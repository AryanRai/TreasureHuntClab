
MainBoardUart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093ac  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  08009540  08009540  0000a540  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099d0  080099d0  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  080099d0  080099d0  0000a9d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099d8  080099d8  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099d8  080099d8  0000a9d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080099dc  080099dc  0000a9dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080099e0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1d4  2**0
                  CONTENTS
 10 .bss          000003d8  200001d4  200001d4  0000b1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005ac  200005ac  0000b1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010c1c  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002143  00000000  00000000  0001be20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb8  00000000  00000000  0001df68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c65  00000000  00000000  0001ef20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e34e  00000000  00000000  0001fb85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000145b2  00000000  00000000  0003ded3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b9e1d  00000000  00000000  00052485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010c2a2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005800  00000000  00000000  0010c2e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  00111ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009524 	.word	0x08009524

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08009524 	.word	0x08009524

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf8:	f000 fd50 	bl	800179c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cfc:	f000 f87e 	bl	8000dfc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d00:	f000 fa5e 	bl	80011c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d04:	f000 f8d2 	bl	8000eac <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000d08:	f000 f9fa 	bl	8001100 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000d0c:	f000 f90e 	bl	8000f2c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d10:	f000 f99c 	bl	800104c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000d14:	f000 fa24 	bl	8001160 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Send startup message on USART1
  sprintf(txBuffer, "UART2 Receiver Started\r\n");
 8000d18:	4930      	ldr	r1, [pc, #192]	@ (8000ddc <main+0xe8>)
 8000d1a:	4831      	ldr	r0, [pc, #196]	@ (8000de0 <main+0xec>)
 8000d1c:	f004 ffca 	bl	8005cb4 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer, strlen(txBuffer), HAL_MAX_DELAY);
 8000d20:	482f      	ldr	r0, [pc, #188]	@ (8000de0 <main+0xec>)
 8000d22:	f7ff faa5 	bl	8000270 <strlen>
 8000d26:	4603      	mov	r3, r0
 8000d28:	b29a      	uxth	r2, r3
 8000d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2e:	492c      	ldr	r1, [pc, #176]	@ (8000de0 <main+0xec>)
 8000d30:	482c      	ldr	r0, [pc, #176]	@ (8000de4 <main+0xf0>)
 8000d32:	f003 fb63 	bl	80043fc <HAL_UART_Transmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // Poll USART2 for incoming data
    if (HAL_UART_Receive(&huart2, &rxByte, 1, RX_TIMEOUT_MS) == HAL_OK)
 8000d36:	230a      	movs	r3, #10
 8000d38:	2201      	movs	r2, #1
 8000d3a:	492b      	ldr	r1, [pc, #172]	@ (8000de8 <main+0xf4>)
 8000d3c:	482b      	ldr	r0, [pc, #172]	@ (8000dec <main+0xf8>)
 8000d3e:	f003 fbe6 	bl	800450e <HAL_UART_Receive>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d12c      	bne.n	8000da2 <main+0xae>
    {
      // Format byte as hex
      sprintf(txBuffer, "%02X ", rxByte);
 8000d48:	4b27      	ldr	r3, [pc, #156]	@ (8000de8 <main+0xf4>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4928      	ldr	r1, [pc, #160]	@ (8000df0 <main+0xfc>)
 8000d50:	4823      	ldr	r0, [pc, #140]	@ (8000de0 <main+0xec>)
 8000d52:	f004 ffaf 	bl	8005cb4 <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer, strlen(txBuffer), HAL_MAX_DELAY);
 8000d56:	4822      	ldr	r0, [pc, #136]	@ (8000de0 <main+0xec>)
 8000d58:	f7ff fa8a 	bl	8000270 <strlen>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	f04f 33ff 	mov.w	r3, #4294967295
 8000d64:	491e      	ldr	r1, [pc, #120]	@ (8000de0 <main+0xec>)
 8000d66:	481f      	ldr	r0, [pc, #124]	@ (8000de4 <main+0xf0>)
 8000d68:	f003 fb48 	bl	80043fc <HAL_UART_Transmit>

      // Increment byte count and add newline every 16 bytes
      byteCount++;
 8000d6c:	4b21      	ldr	r3, [pc, #132]	@ (8000df4 <main+0x100>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	3301      	adds	r3, #1
 8000d72:	4a20      	ldr	r2, [pc, #128]	@ (8000df4 <main+0x100>)
 8000d74:	6013      	str	r3, [r2, #0]
      if (byteCount % BYTES_PER_LINE == 0)
 8000d76:	4b1f      	ldr	r3, [pc, #124]	@ (8000df4 <main+0x100>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f003 030f 	and.w	r3, r3, #15
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d1d9      	bne.n	8000d36 <main+0x42>
      {
        sprintf(txBuffer, "\r\n");
 8000d82:	491d      	ldr	r1, [pc, #116]	@ (8000df8 <main+0x104>)
 8000d84:	4816      	ldr	r0, [pc, #88]	@ (8000de0 <main+0xec>)
 8000d86:	f004 ff95 	bl	8005cb4 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer, strlen(txBuffer), HAL_MAX_DELAY);
 8000d8a:	4815      	ldr	r0, [pc, #84]	@ (8000de0 <main+0xec>)
 8000d8c:	f7ff fa70 	bl	8000270 <strlen>
 8000d90:	4603      	mov	r3, r0
 8000d92:	b29a      	uxth	r2, r3
 8000d94:	f04f 33ff 	mov.w	r3, #4294967295
 8000d98:	4911      	ldr	r1, [pc, #68]	@ (8000de0 <main+0xec>)
 8000d9a:	4812      	ldr	r0, [pc, #72]	@ (8000de4 <main+0xf0>)
 8000d9c:	f003 fb2e 	bl	80043fc <HAL_UART_Transmit>
 8000da0:	e7c9      	b.n	8000d36 <main+0x42>
      }
    }
    else
    {
      // If no data, add newline if bytes were received
      if (byteCount > 0 && byteCount % BYTES_PER_LINE != 0)
 8000da2:	4b14      	ldr	r3, [pc, #80]	@ (8000df4 <main+0x100>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d0c5      	beq.n	8000d36 <main+0x42>
 8000daa:	4b12      	ldr	r3, [pc, #72]	@ (8000df4 <main+0x100>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f003 030f 	and.w	r3, r3, #15
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d0bf      	beq.n	8000d36 <main+0x42>
      {
        sprintf(txBuffer, "\r\n");
 8000db6:	4910      	ldr	r1, [pc, #64]	@ (8000df8 <main+0x104>)
 8000db8:	4809      	ldr	r0, [pc, #36]	@ (8000de0 <main+0xec>)
 8000dba:	f004 ff7b 	bl	8005cb4 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer, strlen(txBuffer), HAL_MAX_DELAY);
 8000dbe:	4808      	ldr	r0, [pc, #32]	@ (8000de0 <main+0xec>)
 8000dc0:	f7ff fa56 	bl	8000270 <strlen>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dcc:	4904      	ldr	r1, [pc, #16]	@ (8000de0 <main+0xec>)
 8000dce:	4805      	ldr	r0, [pc, #20]	@ (8000de4 <main+0xf0>)
 8000dd0:	f003 fb14 	bl	80043fc <HAL_UART_Transmit>
        byteCount = 0;
 8000dd4:	4b07      	ldr	r3, [pc, #28]	@ (8000df4 <main+0x100>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
    if (HAL_UART_Receive(&huart2, &rxByte, 1, RX_TIMEOUT_MS) == HAL_OK)
 8000dda:	e7ac      	b.n	8000d36 <main+0x42>
 8000ddc:	08009540 	.word	0x08009540
 8000de0:	200003f0 	.word	0x200003f0
 8000de4:	200002dc 	.word	0x200002dc
 8000de8:	200003ec 	.word	0x200003ec
 8000dec:	20000364 	.word	0x20000364
 8000df0:	0800955c 	.word	0x0800955c
 8000df4:	20000454 	.word	0x20000454
 8000df8:	08009564 	.word	0x08009564

08000dfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b09e      	sub	sp, #120	@ 0x78
 8000e00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e02:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000e06:	2228      	movs	r2, #40	@ 0x28
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f004 ffb5 	bl	8005d7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e10:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e20:	463b      	mov	r3, r7
 8000e22:	223c      	movs	r2, #60	@ 0x3c
 8000e24:	2100      	movs	r1, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f004 ffa7 	bl	8005d7a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e30:	2301      	movs	r3, #1
 8000e32:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e34:	2310      	movs	r3, #16
 8000e36:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e3c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000e40:	4618      	mov	r0, r3
 8000e42:	f001 f8a3 	bl	8001f8c <HAL_RCC_OscConfig>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000e4c:	f000 fa04 	bl	8001258 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e50:	230f      	movs	r3, #15
 8000e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e54:	2300      	movs	r3, #0
 8000e56:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e60:	2300      	movs	r3, #0
 8000e62:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e64:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000e68:	2100      	movs	r1, #0
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f002 f8cc 	bl	8003008 <HAL_RCC_ClockConfig>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000e76:	f000 f9ef 	bl	8001258 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000e7a:	f241 0323 	movw	r3, #4131	@ 0x1023
 8000e7e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e80:	2300      	movs	r3, #0
 8000e82:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e84:	2300      	movs	r3, #0
 8000e86:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e90:	463b      	mov	r3, r7
 8000e92:	4618      	mov	r0, r3
 8000e94:	f002 fad8 	bl	8003448 <HAL_RCCEx_PeriphCLKConfig>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000e9e:	f000 f9db 	bl	8001258 <Error_Handler>
  }
}
 8000ea2:	bf00      	nop
 8000ea4:	3778      	adds	r7, #120	@ 0x78
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f20 <MX_I2C1_Init+0x74>)
 8000eb2:	4a1c      	ldr	r2, [pc, #112]	@ (8000f24 <MX_I2C1_Init+0x78>)
 8000eb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8000eb6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f20 <MX_I2C1_Init+0x74>)
 8000eb8:	4a1b      	ldr	r2, [pc, #108]	@ (8000f28 <MX_I2C1_Init+0x7c>)
 8000eba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ebc:	4b18      	ldr	r3, [pc, #96]	@ (8000f20 <MX_I2C1_Init+0x74>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ec2:	4b17      	ldr	r3, [pc, #92]	@ (8000f20 <MX_I2C1_Init+0x74>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ec8:	4b15      	ldr	r3, [pc, #84]	@ (8000f20 <MX_I2C1_Init+0x74>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ece:	4b14      	ldr	r3, [pc, #80]	@ (8000f20 <MX_I2C1_Init+0x74>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ed4:	4b12      	ldr	r3, [pc, #72]	@ (8000f20 <MX_I2C1_Init+0x74>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eda:	4b11      	ldr	r3, [pc, #68]	@ (8000f20 <MX_I2C1_Init+0x74>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f20 <MX_I2C1_Init+0x74>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ee6:	480e      	ldr	r0, [pc, #56]	@ (8000f20 <MX_I2C1_Init+0x74>)
 8000ee8:	f000 ff1e 	bl	8001d28 <HAL_I2C_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ef2:	f000 f9b1 	bl	8001258 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	4809      	ldr	r0, [pc, #36]	@ (8000f20 <MX_I2C1_Init+0x74>)
 8000efa:	f000 ffb0 	bl	8001e5e <HAL_I2CEx_ConfigAnalogFilter>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f04:	f000 f9a8 	bl	8001258 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4805      	ldr	r0, [pc, #20]	@ (8000f20 <MX_I2C1_Init+0x74>)
 8000f0c:	f000 fff2 	bl	8001ef4 <HAL_I2CEx_ConfigDigitalFilter>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f16:	f000 f99f 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200001f0 	.word	0x200001f0
 8000f24:	40005400 	.word	0x40005400
 8000f28:	00201d2b 	.word	0x00201d2b

08000f2c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b096      	sub	sp, #88	@ 0x58
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_Init 0 */
  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f32:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f3e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
 8000f4c:	611a      	str	r2, [r3, #16]
 8000f4e:	615a      	str	r2, [r3, #20]
 8000f50:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	222c      	movs	r2, #44	@ 0x2c
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f004 ff0e 	bl	8005d7a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f5e:	4b39      	ldr	r3, [pc, #228]	@ (8001044 <MX_TIM1_Init+0x118>)
 8000f60:	4a39      	ldr	r2, [pc, #228]	@ (8001048 <MX_TIM1_Init+0x11c>)
 8000f62:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f64:	4b37      	ldr	r3, [pc, #220]	@ (8001044 <MX_TIM1_Init+0x118>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f6a:	4b36      	ldr	r3, [pc, #216]	@ (8001044 <MX_TIM1_Init+0x118>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f70:	4b34      	ldr	r3, [pc, #208]	@ (8001044 <MX_TIM1_Init+0x118>)
 8000f72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f76:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f78:	4b32      	ldr	r3, [pc, #200]	@ (8001044 <MX_TIM1_Init+0x118>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f7e:	4b31      	ldr	r3, [pc, #196]	@ (8001044 <MX_TIM1_Init+0x118>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f84:	4b2f      	ldr	r3, [pc, #188]	@ (8001044 <MX_TIM1_Init+0x118>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f8a:	482e      	ldr	r0, [pc, #184]	@ (8001044 <MX_TIM1_Init+0x118>)
 8000f8c:	f002 fc0c 	bl	80037a8 <HAL_TIM_PWM_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000f96:	f000 f95f 	bl	8001258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fa6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000faa:	4619      	mov	r1, r3
 8000fac:	4825      	ldr	r0, [pc, #148]	@ (8001044 <MX_TIM1_Init+0x118>)
 8000fae:	f003 f8d9 	bl	8004164 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000fb8:	f000 f94e 	bl	8001258 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fbc:	2360      	movs	r3, #96	@ 0x60
 8000fbe:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fd8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fdc:	2208      	movs	r2, #8
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4818      	ldr	r0, [pc, #96]	@ (8001044 <MX_TIM1_Init+0x118>)
 8000fe2:	f002 fc39 	bl	8003858 <HAL_TIM_PWM_ConfigChannel>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000fec:	f000 f934 	bl	8001258 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001004:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001008:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800100e:	2300      	movs	r3, #0
 8001010:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001012:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001016:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800101c:	2300      	movs	r3, #0
 800101e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	4619      	mov	r1, r3
 8001024:	4807      	ldr	r0, [pc, #28]	@ (8001044 <MX_TIM1_Init+0x118>)
 8001026:	f003 f91d 	bl	8004264 <HAL_TIMEx_ConfigBreakDeadTime>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001030:	f000 f912 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001034:	4803      	ldr	r0, [pc, #12]	@ (8001044 <MX_TIM1_Init+0x118>)
 8001036:	f000 f9af 	bl	8001398 <HAL_TIM_MspPostInit>
}
 800103a:	bf00      	nop
 800103c:	3758      	adds	r7, #88	@ 0x58
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000244 	.word	0x20000244
 8001048:	40012c00 	.word	0x40012c00

0800104c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08a      	sub	sp, #40	@ 0x28
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001052:	f107 031c 	add.w	r3, r7, #28
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800105e:	463b      	mov	r3, r7
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
 800106c:	615a      	str	r2, [r3, #20]
 800106e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001070:	4b22      	ldr	r3, [pc, #136]	@ (80010fc <MX_TIM2_Init+0xb0>)
 8001072:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001076:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001078:	4b20      	ldr	r3, [pc, #128]	@ (80010fc <MX_TIM2_Init+0xb0>)
 800107a:	2200      	movs	r2, #0
 800107c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107e:	4b1f      	ldr	r3, [pc, #124]	@ (80010fc <MX_TIM2_Init+0xb0>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001084:	4b1d      	ldr	r3, [pc, #116]	@ (80010fc <MX_TIM2_Init+0xb0>)
 8001086:	f04f 32ff 	mov.w	r2, #4294967295
 800108a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108c:	4b1b      	ldr	r3, [pc, #108]	@ (80010fc <MX_TIM2_Init+0xb0>)
 800108e:	2200      	movs	r2, #0
 8001090:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001092:	4b1a      	ldr	r3, [pc, #104]	@ (80010fc <MX_TIM2_Init+0xb0>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001098:	4818      	ldr	r0, [pc, #96]	@ (80010fc <MX_TIM2_Init+0xb0>)
 800109a:	f002 fb85 	bl	80037a8 <HAL_TIM_PWM_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80010a4:	f000 f8d8 	bl	8001258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ac:	2300      	movs	r3, #0
 80010ae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010b0:	f107 031c 	add.w	r3, r7, #28
 80010b4:	4619      	mov	r1, r3
 80010b6:	4811      	ldr	r0, [pc, #68]	@ (80010fc <MX_TIM2_Init+0xb0>)
 80010b8:	f003 f854 	bl	8004164 <HAL_TIMEx_MasterConfigSynchronization>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80010c2:	f000 f8c9 	bl	8001258 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010c6:	2360      	movs	r3, #96	@ 0x60
 80010c8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010d6:	463b      	mov	r3, r7
 80010d8:	2208      	movs	r2, #8
 80010da:	4619      	mov	r1, r3
 80010dc:	4807      	ldr	r0, [pc, #28]	@ (80010fc <MX_TIM2_Init+0xb0>)
 80010de:	f002 fbbb 	bl	8003858 <HAL_TIM_PWM_ConfigChannel>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80010e8:	f000 f8b6 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80010ec:	4803      	ldr	r0, [pc, #12]	@ (80010fc <MX_TIM2_Init+0xb0>)
 80010ee:	f000 f953 	bl	8001398 <HAL_TIM_MspPostInit>
}
 80010f2:	bf00      	nop
 80010f4:	3728      	adds	r7, #40	@ 0x28
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000290 	.word	0x20000290

08001100 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 0 */
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001104:	4b14      	ldr	r3, [pc, #80]	@ (8001158 <MX_USART1_UART_Init+0x58>)
 8001106:	4a15      	ldr	r2, [pc, #84]	@ (800115c <MX_USART1_UART_Init+0x5c>)
 8001108:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800110a:	4b13      	ldr	r3, [pc, #76]	@ (8001158 <MX_USART1_UART_Init+0x58>)
 800110c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001110:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001112:	4b11      	ldr	r3, [pc, #68]	@ (8001158 <MX_USART1_UART_Init+0x58>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001118:	4b0f      	ldr	r3, [pc, #60]	@ (8001158 <MX_USART1_UART_Init+0x58>)
 800111a:	2200      	movs	r2, #0
 800111c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800111e:	4b0e      	ldr	r3, [pc, #56]	@ (8001158 <MX_USART1_UART_Init+0x58>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001124:	4b0c      	ldr	r3, [pc, #48]	@ (8001158 <MX_USART1_UART_Init+0x58>)
 8001126:	220c      	movs	r2, #12
 8001128:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800112a:	4b0b      	ldr	r3, [pc, #44]	@ (8001158 <MX_USART1_UART_Init+0x58>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001130:	4b09      	ldr	r3, [pc, #36]	@ (8001158 <MX_USART1_UART_Init+0x58>)
 8001132:	2200      	movs	r2, #0
 8001134:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001136:	4b08      	ldr	r3, [pc, #32]	@ (8001158 <MX_USART1_UART_Init+0x58>)
 8001138:	2200      	movs	r2, #0
 800113a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800113c:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <MX_USART1_UART_Init+0x58>)
 800113e:	2200      	movs	r2, #0
 8001140:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001142:	4805      	ldr	r0, [pc, #20]	@ (8001158 <MX_USART1_UART_Init+0x58>)
 8001144:	f003 f90c 	bl	8004360 <HAL_UART_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800114e:	f000 f883 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	200002dc 	.word	0x200002dc
 800115c:	40013800 	.word	0x40013800

08001160 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001164:	4b14      	ldr	r3, [pc, #80]	@ (80011b8 <MX_USART2_UART_Init+0x58>)
 8001166:	4a15      	ldr	r2, [pc, #84]	@ (80011bc <MX_USART2_UART_Init+0x5c>)
 8001168:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800116a:	4b13      	ldr	r3, [pc, #76]	@ (80011b8 <MX_USART2_UART_Init+0x58>)
 800116c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001170:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001172:	4b11      	ldr	r3, [pc, #68]	@ (80011b8 <MX_USART2_UART_Init+0x58>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001178:	4b0f      	ldr	r3, [pc, #60]	@ (80011b8 <MX_USART2_UART_Init+0x58>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800117e:	4b0e      	ldr	r3, [pc, #56]	@ (80011b8 <MX_USART2_UART_Init+0x58>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001184:	4b0c      	ldr	r3, [pc, #48]	@ (80011b8 <MX_USART2_UART_Init+0x58>)
 8001186:	220c      	movs	r2, #12
 8001188:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118a:	4b0b      	ldr	r3, [pc, #44]	@ (80011b8 <MX_USART2_UART_Init+0x58>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001190:	4b09      	ldr	r3, [pc, #36]	@ (80011b8 <MX_USART2_UART_Init+0x58>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001196:	4b08      	ldr	r3, [pc, #32]	@ (80011b8 <MX_USART2_UART_Init+0x58>)
 8001198:	2200      	movs	r2, #0
 800119a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800119c:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <MX_USART2_UART_Init+0x58>)
 800119e:	2200      	movs	r2, #0
 80011a0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011a2:	4805      	ldr	r0, [pc, #20]	@ (80011b8 <MX_USART2_UART_Init+0x58>)
 80011a4:	f003 f8dc 	bl	8004360 <HAL_UART_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011ae:	f000 f853 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000364 	.word	0x20000364
 80011bc:	40004400 	.word	0x40004400

080011c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
 80011d4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001250 <MX_GPIO_Init+0x90>)
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	4a1d      	ldr	r2, [pc, #116]	@ (8001250 <MX_GPIO_Init+0x90>)
 80011dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011e0:	6153      	str	r3, [r2, #20]
 80011e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001250 <MX_GPIO_Init+0x90>)
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ee:	4b18      	ldr	r3, [pc, #96]	@ (8001250 <MX_GPIO_Init+0x90>)
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	4a17      	ldr	r2, [pc, #92]	@ (8001250 <MX_GPIO_Init+0x90>)
 80011f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80011f8:	6153      	str	r3, [r2, #20]
 80011fa:	4b15      	ldr	r3, [pc, #84]	@ (8001250 <MX_GPIO_Init+0x90>)
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]

  /* Configure PC4 (TX) and PC5 (RX) for USART1 */
  GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 8001206:	2330      	movs	r3, #48	@ 0x30
 8001208:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001212:	2303      	movs	r3, #3
 8001214:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1; // USART1 TX/RX for PC4/PC5
 8001216:	2307      	movs	r3, #7
 8001218:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800121a:	f107 030c 	add.w	r3, r7, #12
 800121e:	4619      	mov	r1, r3
 8001220:	480c      	ldr	r0, [pc, #48]	@ (8001254 <MX_GPIO_Init+0x94>)
 8001222:	f000 fc07 	bl	8001a34 <HAL_GPIO_Init>

  /* Configure PA2 (TX) and PA3 (RX) for USART2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8001226:	230c      	movs	r3, #12
 8001228:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	2302      	movs	r3, #2
 800122c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001232:	2303      	movs	r3, #3
 8001234:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2; // USART2 TX/RX for PA2/PA3
 8001236:	2307      	movs	r3, #7
 8001238:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123a:	f107 030c 	add.w	r3, r7, #12
 800123e:	4619      	mov	r1, r3
 8001240:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001244:	f000 fbf6 	bl	8001a34 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001248:	bf00      	nop
 800124a:	3720      	adds	r7, #32
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40021000 	.word	0x40021000
 8001254:	48000800 	.word	0x48000800

08001258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800125c:	b672      	cpsid	i
}
 800125e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <Error_Handler+0x8>

08001264 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126a:	4b0f      	ldr	r3, [pc, #60]	@ (80012a8 <HAL_MspInit+0x44>)
 800126c:	699b      	ldr	r3, [r3, #24]
 800126e:	4a0e      	ldr	r2, [pc, #56]	@ (80012a8 <HAL_MspInit+0x44>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6193      	str	r3, [r2, #24]
 8001276:	4b0c      	ldr	r3, [pc, #48]	@ (80012a8 <HAL_MspInit+0x44>)
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001282:	4b09      	ldr	r3, [pc, #36]	@ (80012a8 <HAL_MspInit+0x44>)
 8001284:	69db      	ldr	r3, [r3, #28]
 8001286:	4a08      	ldr	r2, [pc, #32]	@ (80012a8 <HAL_MspInit+0x44>)
 8001288:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800128c:	61d3      	str	r3, [r2, #28]
 800128e:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <HAL_MspInit+0x44>)
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001296:	603b      	str	r3, [r7, #0]
 8001298:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	40021000 	.word	0x40021000

080012ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	@ 0x28
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a18      	ldr	r2, [pc, #96]	@ (800132c <HAL_I2C_MspInit+0x80>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d129      	bne.n	8001322 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ce:	4b18      	ldr	r3, [pc, #96]	@ (8001330 <HAL_I2C_MspInit+0x84>)
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	4a17      	ldr	r2, [pc, #92]	@ (8001330 <HAL_I2C_MspInit+0x84>)
 80012d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012d8:	6153      	str	r3, [r2, #20]
 80012da:	4b15      	ldr	r3, [pc, #84]	@ (8001330 <HAL_I2C_MspInit+0x84>)
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA14     ------> I2C1_SDA
    PA15     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80012e6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80012ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ec:	2312      	movs	r3, #18
 80012ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012f4:	2303      	movs	r3, #3
 80012f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012f8:	2304      	movs	r3, #4
 80012fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	4619      	mov	r1, r3
 8001302:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001306:	f000 fb95 	bl	8001a34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800130a:	4b09      	ldr	r3, [pc, #36]	@ (8001330 <HAL_I2C_MspInit+0x84>)
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	4a08      	ldr	r2, [pc, #32]	@ (8001330 <HAL_I2C_MspInit+0x84>)
 8001310:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001314:	61d3      	str	r3, [r2, #28]
 8001316:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <HAL_I2C_MspInit+0x84>)
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001322:	bf00      	nop
 8001324:	3728      	adds	r7, #40	@ 0x28
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40005400 	.word	0x40005400
 8001330:	40021000 	.word	0x40021000

08001334 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a13      	ldr	r2, [pc, #76]	@ (8001390 <HAL_TIM_PWM_MspInit+0x5c>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d10c      	bne.n	8001360 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001346:	4b13      	ldr	r3, [pc, #76]	@ (8001394 <HAL_TIM_PWM_MspInit+0x60>)
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	4a12      	ldr	r2, [pc, #72]	@ (8001394 <HAL_TIM_PWM_MspInit+0x60>)
 800134c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001350:	6193      	str	r3, [r2, #24]
 8001352:	4b10      	ldr	r3, [pc, #64]	@ (8001394 <HAL_TIM_PWM_MspInit+0x60>)
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800135e:	e010      	b.n	8001382 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM2)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001368:	d10b      	bne.n	8001382 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800136a:	4b0a      	ldr	r3, [pc, #40]	@ (8001394 <HAL_TIM_PWM_MspInit+0x60>)
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	4a09      	ldr	r2, [pc, #36]	@ (8001394 <HAL_TIM_PWM_MspInit+0x60>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	61d3      	str	r3, [r2, #28]
 8001376:	4b07      	ldr	r3, [pc, #28]	@ (8001394 <HAL_TIM_PWM_MspInit+0x60>)
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
}
 8001382:	bf00      	nop
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	40012c00 	.word	0x40012c00
 8001394:	40021000 	.word	0x40021000

08001398 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08a      	sub	sp, #40	@ 0x28
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a24      	ldr	r2, [pc, #144]	@ (8001448 <HAL_TIM_MspPostInit+0xb0>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d11e      	bne.n	80013f8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ba:	4b24      	ldr	r3, [pc, #144]	@ (800144c <HAL_TIM_MspPostInit+0xb4>)
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	4a23      	ldr	r2, [pc, #140]	@ (800144c <HAL_TIM_MspPostInit+0xb4>)
 80013c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013c4:	6153      	str	r3, [r2, #20]
 80013c6:	4b21      	ldr	r3, [pc, #132]	@ (800144c <HAL_TIM_MspPostInit+0xb4>)
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d8:	2302      	movs	r3, #2
 80013da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	2300      	movs	r3, #0
 80013e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80013e4:	2306      	movs	r3, #6
 80013e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	4619      	mov	r1, r3
 80013ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013f2:	f000 fb1f 	bl	8001a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80013f6:	e022      	b.n	800143e <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM2)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001400:	d11d      	bne.n	800143e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	4b12      	ldr	r3, [pc, #72]	@ (800144c <HAL_TIM_MspPostInit+0xb4>)
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	4a11      	ldr	r2, [pc, #68]	@ (800144c <HAL_TIM_MspPostInit+0xb4>)
 8001408:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800140c:	6153      	str	r3, [r2, #20]
 800140e:	4b0f      	ldr	r3, [pc, #60]	@ (800144c <HAL_TIM_MspPostInit+0xb4>)
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800141a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800141e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001420:	2302      	movs	r3, #2
 8001422:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001428:	2300      	movs	r3, #0
 800142a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 800142c:	230a      	movs	r3, #10
 800142e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	4619      	mov	r1, r3
 8001436:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800143a:	f000 fafb 	bl	8001a34 <HAL_GPIO_Init>
}
 800143e:	bf00      	nop
 8001440:	3728      	adds	r7, #40	@ 0x28
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40012c00 	.word	0x40012c00
 800144c:	40021000 	.word	0x40021000

08001450 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08c      	sub	sp, #48	@ 0x30
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 031c 	add.w	r3, r7, #28
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a2e      	ldr	r2, [pc, #184]	@ (8001528 <HAL_UART_MspInit+0xd8>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d128      	bne.n	80014c4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001472:	4b2e      	ldr	r3, [pc, #184]	@ (800152c <HAL_UART_MspInit+0xdc>)
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	4a2d      	ldr	r2, [pc, #180]	@ (800152c <HAL_UART_MspInit+0xdc>)
 8001478:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800147c:	6193      	str	r3, [r2, #24]
 800147e:	4b2b      	ldr	r3, [pc, #172]	@ (800152c <HAL_UART_MspInit+0xdc>)
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001486:	61bb      	str	r3, [r7, #24]
 8001488:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800148a:	4b28      	ldr	r3, [pc, #160]	@ (800152c <HAL_UART_MspInit+0xdc>)
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	4a27      	ldr	r2, [pc, #156]	@ (800152c <HAL_UART_MspInit+0xdc>)
 8001490:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001494:	6153      	str	r3, [r2, #20]
 8001496:	4b25      	ldr	r3, [pc, #148]	@ (800152c <HAL_UART_MspInit+0xdc>)
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800149e:	617b      	str	r3, [r7, #20]
 80014a0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80014a2:	2330      	movs	r3, #48	@ 0x30
 80014a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a6:	2302      	movs	r3, #2
 80014a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ae:	2303      	movs	r3, #3
 80014b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014b2:	2307      	movs	r3, #7
 80014b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b6:	f107 031c 	add.w	r3, r7, #28
 80014ba:	4619      	mov	r1, r3
 80014bc:	481c      	ldr	r0, [pc, #112]	@ (8001530 <HAL_UART_MspInit+0xe0>)
 80014be:	f000 fab9 	bl	8001a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014c2:	e02d      	b.n	8001520 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART2)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a1a      	ldr	r2, [pc, #104]	@ (8001534 <HAL_UART_MspInit+0xe4>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d128      	bne.n	8001520 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80014ce:	4b17      	ldr	r3, [pc, #92]	@ (800152c <HAL_UART_MspInit+0xdc>)
 80014d0:	69db      	ldr	r3, [r3, #28]
 80014d2:	4a16      	ldr	r2, [pc, #88]	@ (800152c <HAL_UART_MspInit+0xdc>)
 80014d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014d8:	61d3      	str	r3, [r2, #28]
 80014da:	4b14      	ldr	r3, [pc, #80]	@ (800152c <HAL_UART_MspInit+0xdc>)
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e6:	4b11      	ldr	r3, [pc, #68]	@ (800152c <HAL_UART_MspInit+0xdc>)
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	4a10      	ldr	r2, [pc, #64]	@ (800152c <HAL_UART_MspInit+0xdc>)
 80014ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014f0:	6153      	str	r3, [r2, #20]
 80014f2:	4b0e      	ldr	r3, [pc, #56]	@ (800152c <HAL_UART_MspInit+0xdc>)
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014fe:	230c      	movs	r3, #12
 8001500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
 8001504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800150a:	2303      	movs	r3, #3
 800150c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800150e:	2307      	movs	r3, #7
 8001510:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001512:	f107 031c 	add.w	r3, r7, #28
 8001516:	4619      	mov	r1, r3
 8001518:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800151c:	f000 fa8a 	bl	8001a34 <HAL_GPIO_Init>
}
 8001520:	bf00      	nop
 8001522:	3730      	adds	r7, #48	@ 0x30
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40013800 	.word	0x40013800
 800152c:	40021000 	.word	0x40021000
 8001530:	48000800 	.word	0x48000800
 8001534:	40004400 	.word	0x40004400

08001538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800153c:	bf00      	nop
 800153e:	e7fd      	b.n	800153c <NMI_Handler+0x4>

08001540 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001544:	bf00      	nop
 8001546:	e7fd      	b.n	8001544 <HardFault_Handler+0x4>

08001548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800154c:	bf00      	nop
 800154e:	e7fd      	b.n	800154c <MemManage_Handler+0x4>

08001550 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001554:	bf00      	nop
 8001556:	e7fd      	b.n	8001554 <BusFault_Handler+0x4>

08001558 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800155c:	bf00      	nop
 800155e:	e7fd      	b.n	800155c <UsageFault_Handler+0x4>

08001560 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800158e:	f000 f94b 	bl	8001828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}

08001596 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0
  return 1;
 800159a:	2301      	movs	r3, #1
}
 800159c:	4618      	mov	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <_kill>:

int _kill(int pid, int sig)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015b0:	f004 fc36 	bl	8005e20 <__errno>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2216      	movs	r2, #22
 80015b8:	601a      	str	r2, [r3, #0]
  return -1;
 80015ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <_exit>:

void _exit (int status)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015ce:	f04f 31ff 	mov.w	r1, #4294967295
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff ffe7 	bl	80015a6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <_exit+0x12>

080015dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
 80015ec:	e00a      	b.n	8001604 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015ee:	f3af 8000 	nop.w
 80015f2:	4601      	mov	r1, r0
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	1c5a      	adds	r2, r3, #1
 80015f8:	60ba      	str	r2, [r7, #8]
 80015fa:	b2ca      	uxtb	r2, r1
 80015fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	3301      	adds	r3, #1
 8001602:	617b      	str	r3, [r7, #20]
 8001604:	697a      	ldr	r2, [r7, #20]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	429a      	cmp	r2, r3
 800160a:	dbf0      	blt.n	80015ee <_read+0x12>
  }

  return len;
 800160c:	687b      	ldr	r3, [r7, #4]
}
 800160e:	4618      	mov	r0, r3
 8001610:	3718      	adds	r7, #24
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b086      	sub	sp, #24
 800161a:	af00      	add	r7, sp, #0
 800161c:	60f8      	str	r0, [r7, #12]
 800161e:	60b9      	str	r1, [r7, #8]
 8001620:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
 8001626:	e009      	b.n	800163c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	1c5a      	adds	r2, r3, #1
 800162c:	60ba      	str	r2, [r7, #8]
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	3301      	adds	r3, #1
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	697a      	ldr	r2, [r7, #20]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	429a      	cmp	r2, r3
 8001642:	dbf1      	blt.n	8001628 <_write+0x12>
  }
  return len;
 8001644:	687b      	ldr	r3, [r7, #4]
}
 8001646:	4618      	mov	r0, r3
 8001648:	3718      	adds	r7, #24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <_close>:

int _close(int file)
{
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001656:	f04f 33ff 	mov.w	r3, #4294967295
}
 800165a:	4618      	mov	r0, r3
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001666:	b480      	push	{r7}
 8001668:	b083      	sub	sp, #12
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
 800166e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001676:	605a      	str	r2, [r3, #4]
  return 0;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <_isatty>:

int _isatty(int file)
{
 8001686:	b480      	push	{r7}
 8001688:	b083      	sub	sp, #12
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800168e:	2301      	movs	r3, #1
}
 8001690:	4618      	mov	r0, r3
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
	...

080016b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c0:	4a14      	ldr	r2, [pc, #80]	@ (8001714 <_sbrk+0x5c>)
 80016c2:	4b15      	ldr	r3, [pc, #84]	@ (8001718 <_sbrk+0x60>)
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016cc:	4b13      	ldr	r3, [pc, #76]	@ (800171c <_sbrk+0x64>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d102      	bne.n	80016da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016d4:	4b11      	ldr	r3, [pc, #68]	@ (800171c <_sbrk+0x64>)
 80016d6:	4a12      	ldr	r2, [pc, #72]	@ (8001720 <_sbrk+0x68>)
 80016d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016da:	4b10      	ldr	r3, [pc, #64]	@ (800171c <_sbrk+0x64>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4413      	add	r3, r2
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d207      	bcs.n	80016f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016e8:	f004 fb9a 	bl	8005e20 <__errno>
 80016ec:	4603      	mov	r3, r0
 80016ee:	220c      	movs	r2, #12
 80016f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016f2:	f04f 33ff 	mov.w	r3, #4294967295
 80016f6:	e009      	b.n	800170c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016f8:	4b08      	ldr	r3, [pc, #32]	@ (800171c <_sbrk+0x64>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016fe:	4b07      	ldr	r3, [pc, #28]	@ (800171c <_sbrk+0x64>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4413      	add	r3, r2
 8001706:	4a05      	ldr	r2, [pc, #20]	@ (800171c <_sbrk+0x64>)
 8001708:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800170a:	68fb      	ldr	r3, [r7, #12]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	2000a000 	.word	0x2000a000
 8001718:	00000400 	.word	0x00000400
 800171c:	20000458 	.word	0x20000458
 8001720:	200005b0 	.word	0x200005b0

08001724 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001728:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <SystemInit+0x20>)
 800172a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800172e:	4a05      	ldr	r2, [pc, #20]	@ (8001744 <SystemInit+0x20>)
 8001730:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001734:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001748:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001780 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800174c:	f7ff ffea 	bl	8001724 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001750:	480c      	ldr	r0, [pc, #48]	@ (8001784 <LoopForever+0x6>)
  ldr r1, =_edata
 8001752:	490d      	ldr	r1, [pc, #52]	@ (8001788 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001754:	4a0d      	ldr	r2, [pc, #52]	@ (800178c <LoopForever+0xe>)
  movs r3, #0
 8001756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001758:	e002      	b.n	8001760 <LoopCopyDataInit>

0800175a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800175a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800175c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800175e:	3304      	adds	r3, #4

08001760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001764:	d3f9      	bcc.n	800175a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001766:	4a0a      	ldr	r2, [pc, #40]	@ (8001790 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001768:	4c0a      	ldr	r4, [pc, #40]	@ (8001794 <LoopForever+0x16>)
  movs r3, #0
 800176a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800176c:	e001      	b.n	8001772 <LoopFillZerobss>

0800176e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800176e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001770:	3204      	adds	r2, #4

08001772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001774:	d3fb      	bcc.n	800176e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001776:	f004 fb59 	bl	8005e2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800177a:	f7ff fabb 	bl	8000cf4 <main>

0800177e <LoopForever>:

LoopForever:
    b LoopForever
 800177e:	e7fe      	b.n	800177e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001780:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001788:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800178c:	080099e0 	.word	0x080099e0
  ldr r2, =_sbss
 8001790:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001794:	200005ac 	.word	0x200005ac

08001798 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001798:	e7fe      	b.n	8001798 <ADC1_2_IRQHandler>
	...

0800179c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017a0:	4b08      	ldr	r3, [pc, #32]	@ (80017c4 <HAL_Init+0x28>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a07      	ldr	r2, [pc, #28]	@ (80017c4 <HAL_Init+0x28>)
 80017a6:	f043 0310 	orr.w	r3, r3, #16
 80017aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ac:	2003      	movs	r0, #3
 80017ae:	f000 f90d 	bl	80019cc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017b2:	200f      	movs	r0, #15
 80017b4:	f000 f808 	bl	80017c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b8:	f7ff fd54 	bl	8001264 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40022000 	.word	0x40022000

080017c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017d0:	4b12      	ldr	r3, [pc, #72]	@ (800181c <HAL_InitTick+0x54>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4b12      	ldr	r3, [pc, #72]	@ (8001820 <HAL_InitTick+0x58>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	4619      	mov	r1, r3
 80017da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017de:	fbb3 f3f1 	udiv	r3, r3, r1
 80017e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 f917 	bl	8001a1a <HAL_SYSTICK_Config>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e00e      	b.n	8001814 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b0f      	cmp	r3, #15
 80017fa:	d80a      	bhi.n	8001812 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017fc:	2200      	movs	r2, #0
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	f04f 30ff 	mov.w	r0, #4294967295
 8001804:	f000 f8ed 	bl	80019e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001808:	4a06      	ldr	r2, [pc, #24]	@ (8001824 <HAL_InitTick+0x5c>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800180e:	2300      	movs	r3, #0
 8001810:	e000      	b.n	8001814 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
}
 8001814:	4618      	mov	r0, r3
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000000 	.word	0x20000000
 8001820:	20000008 	.word	0x20000008
 8001824:	20000004 	.word	0x20000004

08001828 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800182c:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <HAL_IncTick+0x20>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	461a      	mov	r2, r3
 8001832:	4b06      	ldr	r3, [pc, #24]	@ (800184c <HAL_IncTick+0x24>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4413      	add	r3, r2
 8001838:	4a04      	ldr	r2, [pc, #16]	@ (800184c <HAL_IncTick+0x24>)
 800183a:	6013      	str	r3, [r2, #0]
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	20000008 	.word	0x20000008
 800184c:	2000045c 	.word	0x2000045c

08001850 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  return uwTick;  
 8001854:	4b03      	ldr	r3, [pc, #12]	@ (8001864 <HAL_GetTick+0x14>)
 8001856:	681b      	ldr	r3, [r3, #0]
}
 8001858:	4618      	mov	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	2000045c 	.word	0x2000045c

08001868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001878:	4b0c      	ldr	r3, [pc, #48]	@ (80018ac <__NVIC_SetPriorityGrouping+0x44>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001884:	4013      	ands	r3, r2
 8001886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001890:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001894:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800189a:	4a04      	ldr	r2, [pc, #16]	@ (80018ac <__NVIC_SetPriorityGrouping+0x44>)
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	60d3      	str	r3, [r2, #12]
}
 80018a0:	bf00      	nop
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b4:	4b04      	ldr	r3, [pc, #16]	@ (80018c8 <__NVIC_GetPriorityGrouping+0x18>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	0a1b      	lsrs	r3, r3, #8
 80018ba:	f003 0307 	and.w	r3, r3, #7
}
 80018be:	4618      	mov	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	6039      	str	r1, [r7, #0]
 80018d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	db0a      	blt.n	80018f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	490c      	ldr	r1, [pc, #48]	@ (8001918 <__NVIC_SetPriority+0x4c>)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	0112      	lsls	r2, r2, #4
 80018ec:	b2d2      	uxtb	r2, r2
 80018ee:	440b      	add	r3, r1
 80018f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f4:	e00a      	b.n	800190c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	4908      	ldr	r1, [pc, #32]	@ (800191c <__NVIC_SetPriority+0x50>)
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	3b04      	subs	r3, #4
 8001904:	0112      	lsls	r2, r2, #4
 8001906:	b2d2      	uxtb	r2, r2
 8001908:	440b      	add	r3, r1
 800190a:	761a      	strb	r2, [r3, #24]
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000e100 	.word	0xe000e100
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001920:	b480      	push	{r7}
 8001922:	b089      	sub	sp, #36	@ 0x24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	f1c3 0307 	rsb	r3, r3, #7
 800193a:	2b04      	cmp	r3, #4
 800193c:	bf28      	it	cs
 800193e:	2304      	movcs	r3, #4
 8001940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3304      	adds	r3, #4
 8001946:	2b06      	cmp	r3, #6
 8001948:	d902      	bls.n	8001950 <NVIC_EncodePriority+0x30>
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	3b03      	subs	r3, #3
 800194e:	e000      	b.n	8001952 <NVIC_EncodePriority+0x32>
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001954:	f04f 32ff 	mov.w	r2, #4294967295
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43da      	mvns	r2, r3
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	401a      	ands	r2, r3
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001968:	f04f 31ff 	mov.w	r1, #4294967295
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	fa01 f303 	lsl.w	r3, r1, r3
 8001972:	43d9      	mvns	r1, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001978:	4313      	orrs	r3, r2
         );
}
 800197a:	4618      	mov	r0, r3
 800197c:	3724      	adds	r7, #36	@ 0x24
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
	...

08001988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3b01      	subs	r3, #1
 8001994:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001998:	d301      	bcc.n	800199e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800199a:	2301      	movs	r3, #1
 800199c:	e00f      	b.n	80019be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800199e:	4a0a      	ldr	r2, [pc, #40]	@ (80019c8 <SysTick_Config+0x40>)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019a6:	210f      	movs	r1, #15
 80019a8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ac:	f7ff ff8e 	bl	80018cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b0:	4b05      	ldr	r3, [pc, #20]	@ (80019c8 <SysTick_Config+0x40>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019b6:	4b04      	ldr	r3, [pc, #16]	@ (80019c8 <SysTick_Config+0x40>)
 80019b8:	2207      	movs	r2, #7
 80019ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	e000e010 	.word	0xe000e010

080019cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7ff ff47 	bl	8001868 <__NVIC_SetPriorityGrouping>
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b086      	sub	sp, #24
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	4603      	mov	r3, r0
 80019ea:	60b9      	str	r1, [r7, #8]
 80019ec:	607a      	str	r2, [r7, #4]
 80019ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019f4:	f7ff ff5c 	bl	80018b0 <__NVIC_GetPriorityGrouping>
 80019f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	68b9      	ldr	r1, [r7, #8]
 80019fe:	6978      	ldr	r0, [r7, #20]
 8001a00:	f7ff ff8e 	bl	8001920 <NVIC_EncodePriority>
 8001a04:	4602      	mov	r2, r0
 8001a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a0a:	4611      	mov	r1, r2
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff ff5d 	bl	80018cc <__NVIC_SetPriority>
}
 8001a12:	bf00      	nop
 8001a14:	3718      	adds	r7, #24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b082      	sub	sp, #8
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff ffb0 	bl	8001988 <SysTick_Config>
 8001a28:	4603      	mov	r3, r0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b087      	sub	sp, #28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a42:	e154      	b.n	8001cee <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	2101      	movs	r1, #1
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a50:	4013      	ands	r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f000 8146 	beq.w	8001ce8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d005      	beq.n	8001a74 <HAL_GPIO_Init+0x40>
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 0303 	and.w	r3, r3, #3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d130      	bne.n	8001ad6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	2203      	movs	r2, #3
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	68da      	ldr	r2, [r3, #12]
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aaa:	2201      	movs	r2, #1
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	091b      	lsrs	r3, r3, #4
 8001ac0:	f003 0201 	and.w	r2, r3, #1
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f003 0303 	and.w	r3, r3, #3
 8001ade:	2b03      	cmp	r3, #3
 8001ae0:	d017      	beq.n	8001b12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	2203      	movs	r2, #3
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43db      	mvns	r3, r3
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	4013      	ands	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	689a      	ldr	r2, [r3, #8]
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d123      	bne.n	8001b66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	08da      	lsrs	r2, r3, #3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3208      	adds	r2, #8
 8001b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	220f      	movs	r2, #15
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	691a      	ldr	r2, [r3, #16]
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	08da      	lsrs	r2, r3, #3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3208      	adds	r2, #8
 8001b60:	6939      	ldr	r1, [r7, #16]
 8001b62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	2203      	movs	r2, #3
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43db      	mvns	r3, r3
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 0203 	and.w	r2, r3, #3
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 80a0 	beq.w	8001ce8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba8:	4b58      	ldr	r3, [pc, #352]	@ (8001d0c <HAL_GPIO_Init+0x2d8>)
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	4a57      	ldr	r2, [pc, #348]	@ (8001d0c <HAL_GPIO_Init+0x2d8>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	6193      	str	r3, [r2, #24]
 8001bb4:	4b55      	ldr	r3, [pc, #340]	@ (8001d0c <HAL_GPIO_Init+0x2d8>)
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bc0:	4a53      	ldr	r2, [pc, #332]	@ (8001d10 <HAL_GPIO_Init+0x2dc>)
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	089b      	lsrs	r3, r3, #2
 8001bc6:	3302      	adds	r3, #2
 8001bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f003 0303 	and.w	r3, r3, #3
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	220f      	movs	r2, #15
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	4013      	ands	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001bea:	d019      	beq.n	8001c20 <HAL_GPIO_Init+0x1ec>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a49      	ldr	r2, [pc, #292]	@ (8001d14 <HAL_GPIO_Init+0x2e0>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d013      	beq.n	8001c1c <HAL_GPIO_Init+0x1e8>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a48      	ldr	r2, [pc, #288]	@ (8001d18 <HAL_GPIO_Init+0x2e4>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d00d      	beq.n	8001c18 <HAL_GPIO_Init+0x1e4>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a47      	ldr	r2, [pc, #284]	@ (8001d1c <HAL_GPIO_Init+0x2e8>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d007      	beq.n	8001c14 <HAL_GPIO_Init+0x1e0>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a46      	ldr	r2, [pc, #280]	@ (8001d20 <HAL_GPIO_Init+0x2ec>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d101      	bne.n	8001c10 <HAL_GPIO_Init+0x1dc>
 8001c0c:	2304      	movs	r3, #4
 8001c0e:	e008      	b.n	8001c22 <HAL_GPIO_Init+0x1ee>
 8001c10:	2305      	movs	r3, #5
 8001c12:	e006      	b.n	8001c22 <HAL_GPIO_Init+0x1ee>
 8001c14:	2303      	movs	r3, #3
 8001c16:	e004      	b.n	8001c22 <HAL_GPIO_Init+0x1ee>
 8001c18:	2302      	movs	r3, #2
 8001c1a:	e002      	b.n	8001c22 <HAL_GPIO_Init+0x1ee>
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e000      	b.n	8001c22 <HAL_GPIO_Init+0x1ee>
 8001c20:	2300      	movs	r3, #0
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	f002 0203 	and.w	r2, r2, #3
 8001c28:	0092      	lsls	r2, r2, #2
 8001c2a:	4093      	lsls	r3, r2
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c32:	4937      	ldr	r1, [pc, #220]	@ (8001d10 <HAL_GPIO_Init+0x2dc>)
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	089b      	lsrs	r3, r3, #2
 8001c38:	3302      	adds	r3, #2
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c40:	4b38      	ldr	r3, [pc, #224]	@ (8001d24 <HAL_GPIO_Init+0x2f0>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c64:	4a2f      	ldr	r2, [pc, #188]	@ (8001d24 <HAL_GPIO_Init+0x2f0>)
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c6a:	4b2e      	ldr	r3, [pc, #184]	@ (8001d24 <HAL_GPIO_Init+0x2f0>)
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	43db      	mvns	r3, r3
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	4013      	ands	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c8e:	4a25      	ldr	r2, [pc, #148]	@ (8001d24 <HAL_GPIO_Init+0x2f0>)
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c94:	4b23      	ldr	r3, [pc, #140]	@ (8001d24 <HAL_GPIO_Init+0x2f0>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001cb8:	4a1a      	ldr	r2, [pc, #104]	@ (8001d24 <HAL_GPIO_Init+0x2f0>)
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cbe:	4b19      	ldr	r3, [pc, #100]	@ (8001d24 <HAL_GPIO_Init+0x2f0>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ce2:	4a10      	ldr	r2, [pc, #64]	@ (8001d24 <HAL_GPIO_Init+0x2f0>)
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	3301      	adds	r3, #1
 8001cec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f47f aea3 	bne.w	8001a44 <HAL_GPIO_Init+0x10>
  }
}
 8001cfe:	bf00      	nop
 8001d00:	bf00      	nop
 8001d02:	371c      	adds	r7, #28
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40010000 	.word	0x40010000
 8001d14:	48000400 	.word	0x48000400
 8001d18:	48000800 	.word	0x48000800
 8001d1c:	48000c00 	.word	0x48000c00
 8001d20:	48001000 	.word	0x48001000
 8001d24:	40010400 	.word	0x40010400

08001d28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e08d      	b.n	8001e56 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d106      	bne.n	8001d54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7ff faac 	bl	80012ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2224      	movs	r2, #36	@ 0x24
 8001d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f022 0201 	bic.w	r2, r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d78:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d88:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d107      	bne.n	8001da2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689a      	ldr	r2, [r3, #8]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	e006      	b.n	8001db0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001dae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d108      	bne.n	8001dca <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001dc6:	605a      	str	r2, [r3, #4]
 8001dc8:	e007      	b.n	8001dda <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001dd8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6812      	ldr	r2, [r2, #0]
 8001de4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001de8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68da      	ldr	r2, [r3, #12]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001dfc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	691a      	ldr	r2, [r3, #16]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69d9      	ldr	r1, [r3, #28]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a1a      	ldr	r2, [r3, #32]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f042 0201 	orr.w	r2, r2, #1
 8001e36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2220      	movs	r2, #32
 8001e42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b20      	cmp	r3, #32
 8001e72:	d138      	bne.n	8001ee6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d101      	bne.n	8001e82 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e7e:	2302      	movs	r3, #2
 8001e80:	e032      	b.n	8001ee8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2224      	movs	r2, #36	@ 0x24
 8001e8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0201 	bic.w	r2, r2, #1
 8001ea0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001eb0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6819      	ldr	r1, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f042 0201 	orr.w	r2, r2, #1
 8001ed0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2220      	movs	r2, #32
 8001ed6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	e000      	b.n	8001ee8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ee6:	2302      	movs	r3, #2
  }
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b20      	cmp	r3, #32
 8001f08:	d139      	bne.n	8001f7e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d101      	bne.n	8001f18 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f14:	2302      	movs	r3, #2
 8001f16:	e033      	b.n	8001f80 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2224      	movs	r2, #36	@ 0x24
 8001f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 0201 	bic.w	r2, r2, #1
 8001f36:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001f46:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	021b      	lsls	r3, r3, #8
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f042 0201 	orr.w	r2, r2, #1
 8001f68:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2220      	movs	r2, #32
 8001f6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	e000      	b.n	8001f80 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f7e:	2302      	movs	r3, #2
  }
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f98:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f9c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fa2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d102      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	f001 b823 	b.w	8002ff8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fb6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 817d 	beq.w	80022c2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001fc8:	4bbc      	ldr	r3, [pc, #752]	@ (80022bc <HAL_RCC_OscConfig+0x330>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 030c 	and.w	r3, r3, #12
 8001fd0:	2b04      	cmp	r3, #4
 8001fd2:	d00c      	beq.n	8001fee <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fd4:	4bb9      	ldr	r3, [pc, #740]	@ (80022bc <HAL_RCC_OscConfig+0x330>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 030c 	and.w	r3, r3, #12
 8001fdc:	2b08      	cmp	r3, #8
 8001fde:	d15c      	bne.n	800209a <HAL_RCC_OscConfig+0x10e>
 8001fe0:	4bb6      	ldr	r3, [pc, #728]	@ (80022bc <HAL_RCC_OscConfig+0x330>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fe8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fec:	d155      	bne.n	800209a <HAL_RCC_OscConfig+0x10e>
 8001fee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ff2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001ffa:	fa93 f3a3 	rbit	r3, r3
 8001ffe:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002002:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002006:	fab3 f383 	clz	r3, r3
 800200a:	b2db      	uxtb	r3, r3
 800200c:	095b      	lsrs	r3, r3, #5
 800200e:	b2db      	uxtb	r3, r3
 8002010:	f043 0301 	orr.w	r3, r3, #1
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b01      	cmp	r3, #1
 8002018:	d102      	bne.n	8002020 <HAL_RCC_OscConfig+0x94>
 800201a:	4ba8      	ldr	r3, [pc, #672]	@ (80022bc <HAL_RCC_OscConfig+0x330>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	e015      	b.n	800204c <HAL_RCC_OscConfig+0xc0>
 8002020:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002024:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002028:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800202c:	fa93 f3a3 	rbit	r3, r3
 8002030:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002034:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002038:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800203c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002040:	fa93 f3a3 	rbit	r3, r3
 8002044:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002048:	4b9c      	ldr	r3, [pc, #624]	@ (80022bc <HAL_RCC_OscConfig+0x330>)
 800204a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002050:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002054:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002058:	fa92 f2a2 	rbit	r2, r2
 800205c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002060:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002064:	fab2 f282 	clz	r2, r2
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	f042 0220 	orr.w	r2, r2, #32
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	f002 021f 	and.w	r2, r2, #31
 8002074:	2101      	movs	r1, #1
 8002076:	fa01 f202 	lsl.w	r2, r1, r2
 800207a:	4013      	ands	r3, r2
 800207c:	2b00      	cmp	r3, #0
 800207e:	f000 811f 	beq.w	80022c0 <HAL_RCC_OscConfig+0x334>
 8002082:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002086:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	f040 8116 	bne.w	80022c0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	f000 bfaf 	b.w	8002ff8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800209a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800209e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020aa:	d106      	bne.n	80020ba <HAL_RCC_OscConfig+0x12e>
 80020ac:	4b83      	ldr	r3, [pc, #524]	@ (80022bc <HAL_RCC_OscConfig+0x330>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a82      	ldr	r2, [pc, #520]	@ (80022bc <HAL_RCC_OscConfig+0x330>)
 80020b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020b6:	6013      	str	r3, [r2, #0]
 80020b8:	e036      	b.n	8002128 <HAL_RCC_OscConfig+0x19c>
 80020ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10c      	bne.n	80020e4 <HAL_RCC_OscConfig+0x158>
 80020ca:	4b7c      	ldr	r3, [pc, #496]	@ (80022bc <HAL_RCC_OscConfig+0x330>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a7b      	ldr	r2, [pc, #492]	@ (80022bc <HAL_RCC_OscConfig+0x330>)
 80020d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	4b79      	ldr	r3, [pc, #484]	@ (80022bc <HAL_RCC_OscConfig+0x330>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a78      	ldr	r2, [pc, #480]	@ (80022bc <HAL_RCC_OscConfig+0x330>)
 80020dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	e021      	b.n	8002128 <HAL_RCC_OscConfig+0x19c>
 80020e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020f4:	d10c      	bne.n	8002110 <HAL_RCC_OscConfig+0x184>
 80020f6:	4b71      	ldr	r3, [pc, #452]	@ (80022bc <HAL_RCC_OscConfig+0x330>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a70      	ldr	r2, [pc, #448]	@ (80022bc <HAL_RCC_OscConfig+0x330>)
 80020fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002100:	6013      	str	r3, [r2, #0]
 8002102:	4b6e      	ldr	r3, [pc, #440]	@ (80022bc <HAL_RCC_OscConfig+0x330>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a6d      	ldr	r2, [pc, #436]	@ (80022bc <HAL_RCC_OscConfig+0x330>)
 8002108:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800210c:	6013      	str	r3, [r2, #0]
 800210e:	e00b      	b.n	8002128 <HAL_RCC_OscConfig+0x19c>
 8002110:	4b6a      	ldr	r3, [pc, #424]	@ (80022bc <HAL_RCC_OscConfig+0x330>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a69      	ldr	r2, [pc, #420]	@ (80022bc <HAL_RCC_OscConfig+0x330>)
 8002116:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800211a:	6013      	str	r3, [r2, #0]
 800211c:	4b67      	ldr	r3, [pc, #412]	@ (80022bc <HAL_RCC_OscConfig+0x330>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a66      	ldr	r2, [pc, #408]	@ (80022bc <HAL_RCC_OscConfig+0x330>)
 8002122:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002126:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002128:	4b64      	ldr	r3, [pc, #400]	@ (80022bc <HAL_RCC_OscConfig+0x330>)
 800212a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800212c:	f023 020f 	bic.w	r2, r3, #15
 8002130:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002134:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	495f      	ldr	r1, [pc, #380]	@ (80022bc <HAL_RCC_OscConfig+0x330>)
 800213e:	4313      	orrs	r3, r2
 8002140:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002142:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002146:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d059      	beq.n	8002206 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002152:	f7ff fb7d 	bl	8001850 <HAL_GetTick>
 8002156:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215a:	e00a      	b.n	8002172 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800215c:	f7ff fb78 	bl	8001850 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b64      	cmp	r3, #100	@ 0x64
 800216a:	d902      	bls.n	8002172 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	f000 bf43 	b.w	8002ff8 <HAL_RCC_OscConfig+0x106c>
 8002172:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002176:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800217e:	fa93 f3a3 	rbit	r3, r3
 8002182:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002186:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218a:	fab3 f383 	clz	r3, r3
 800218e:	b2db      	uxtb	r3, r3
 8002190:	095b      	lsrs	r3, r3, #5
 8002192:	b2db      	uxtb	r3, r3
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b01      	cmp	r3, #1
 800219c:	d102      	bne.n	80021a4 <HAL_RCC_OscConfig+0x218>
 800219e:	4b47      	ldr	r3, [pc, #284]	@ (80022bc <HAL_RCC_OscConfig+0x330>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	e015      	b.n	80021d0 <HAL_RCC_OscConfig+0x244>
 80021a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021a8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ac:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80021b0:	fa93 f3a3 	rbit	r3, r3
 80021b4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80021b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021bc:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80021c0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80021c4:	fa93 f3a3 	rbit	r3, r3
 80021c8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80021cc:	4b3b      	ldr	r3, [pc, #236]	@ (80022bc <HAL_RCC_OscConfig+0x330>)
 80021ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80021d4:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80021d8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80021dc:	fa92 f2a2 	rbit	r2, r2
 80021e0:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80021e4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80021e8:	fab2 f282 	clz	r2, r2
 80021ec:	b2d2      	uxtb	r2, r2
 80021ee:	f042 0220 	orr.w	r2, r2, #32
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	f002 021f 	and.w	r2, r2, #31
 80021f8:	2101      	movs	r1, #1
 80021fa:	fa01 f202 	lsl.w	r2, r1, r2
 80021fe:	4013      	ands	r3, r2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0ab      	beq.n	800215c <HAL_RCC_OscConfig+0x1d0>
 8002204:	e05d      	b.n	80022c2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002206:	f7ff fb23 	bl	8001850 <HAL_GetTick>
 800220a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800220e:	e00a      	b.n	8002226 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002210:	f7ff fb1e 	bl	8001850 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b64      	cmp	r3, #100	@ 0x64
 800221e:	d902      	bls.n	8002226 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	f000 bee9 	b.w	8002ff8 <HAL_RCC_OscConfig+0x106c>
 8002226:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800222a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002232:	fa93 f3a3 	rbit	r3, r3
 8002236:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800223a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800223e:	fab3 f383 	clz	r3, r3
 8002242:	b2db      	uxtb	r3, r3
 8002244:	095b      	lsrs	r3, r3, #5
 8002246:	b2db      	uxtb	r3, r3
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b01      	cmp	r3, #1
 8002250:	d102      	bne.n	8002258 <HAL_RCC_OscConfig+0x2cc>
 8002252:	4b1a      	ldr	r3, [pc, #104]	@ (80022bc <HAL_RCC_OscConfig+0x330>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	e015      	b.n	8002284 <HAL_RCC_OscConfig+0x2f8>
 8002258:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800225c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002260:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002264:	fa93 f3a3 	rbit	r3, r3
 8002268:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800226c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002270:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002274:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002278:	fa93 f3a3 	rbit	r3, r3
 800227c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002280:	4b0e      	ldr	r3, [pc, #56]	@ (80022bc <HAL_RCC_OscConfig+0x330>)
 8002282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002284:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002288:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800228c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002290:	fa92 f2a2 	rbit	r2, r2
 8002294:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002298:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800229c:	fab2 f282 	clz	r2, r2
 80022a0:	b2d2      	uxtb	r2, r2
 80022a2:	f042 0220 	orr.w	r2, r2, #32
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	f002 021f 	and.w	r2, r2, #31
 80022ac:	2101      	movs	r1, #1
 80022ae:	fa01 f202 	lsl.w	r2, r1, r2
 80022b2:	4013      	ands	r3, r2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1ab      	bne.n	8002210 <HAL_RCC_OscConfig+0x284>
 80022b8:	e003      	b.n	80022c2 <HAL_RCC_OscConfig+0x336>
 80022ba:	bf00      	nop
 80022bc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f000 817d 	beq.w	80025d2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80022d8:	4ba6      	ldr	r3, [pc, #664]	@ (8002574 <HAL_RCC_OscConfig+0x5e8>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 030c 	and.w	r3, r3, #12
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00b      	beq.n	80022fc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80022e4:	4ba3      	ldr	r3, [pc, #652]	@ (8002574 <HAL_RCC_OscConfig+0x5e8>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 030c 	and.w	r3, r3, #12
 80022ec:	2b08      	cmp	r3, #8
 80022ee:	d172      	bne.n	80023d6 <HAL_RCC_OscConfig+0x44a>
 80022f0:	4ba0      	ldr	r3, [pc, #640]	@ (8002574 <HAL_RCC_OscConfig+0x5e8>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d16c      	bne.n	80023d6 <HAL_RCC_OscConfig+0x44a>
 80022fc:	2302      	movs	r3, #2
 80022fe:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002302:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002306:	fa93 f3a3 	rbit	r3, r3
 800230a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800230e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002312:	fab3 f383 	clz	r3, r3
 8002316:	b2db      	uxtb	r3, r3
 8002318:	095b      	lsrs	r3, r3, #5
 800231a:	b2db      	uxtb	r3, r3
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b01      	cmp	r3, #1
 8002324:	d102      	bne.n	800232c <HAL_RCC_OscConfig+0x3a0>
 8002326:	4b93      	ldr	r3, [pc, #588]	@ (8002574 <HAL_RCC_OscConfig+0x5e8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	e013      	b.n	8002354 <HAL_RCC_OscConfig+0x3c8>
 800232c:	2302      	movs	r3, #2
 800232e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002332:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002336:	fa93 f3a3 	rbit	r3, r3
 800233a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800233e:	2302      	movs	r3, #2
 8002340:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002344:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002348:	fa93 f3a3 	rbit	r3, r3
 800234c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002350:	4b88      	ldr	r3, [pc, #544]	@ (8002574 <HAL_RCC_OscConfig+0x5e8>)
 8002352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002354:	2202      	movs	r2, #2
 8002356:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800235a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800235e:	fa92 f2a2 	rbit	r2, r2
 8002362:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002366:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800236a:	fab2 f282 	clz	r2, r2
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	f042 0220 	orr.w	r2, r2, #32
 8002374:	b2d2      	uxtb	r2, r2
 8002376:	f002 021f 	and.w	r2, r2, #31
 800237a:	2101      	movs	r1, #1
 800237c:	fa01 f202 	lsl.w	r2, r1, r2
 8002380:	4013      	ands	r3, r2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00a      	beq.n	800239c <HAL_RCC_OscConfig+0x410>
 8002386:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800238a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d002      	beq.n	800239c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	f000 be2e 	b.w	8002ff8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800239c:	4b75      	ldr	r3, [pc, #468]	@ (8002574 <HAL_RCC_OscConfig+0x5e8>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	21f8      	movs	r1, #248	@ 0xf8
 80023b2:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b6:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80023ba:	fa91 f1a1 	rbit	r1, r1
 80023be:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80023c2:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80023c6:	fab1 f181 	clz	r1, r1
 80023ca:	b2c9      	uxtb	r1, r1
 80023cc:	408b      	lsls	r3, r1
 80023ce:	4969      	ldr	r1, [pc, #420]	@ (8002574 <HAL_RCC_OscConfig+0x5e8>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023d4:	e0fd      	b.n	80025d2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 8088 	beq.w	80024f8 <HAL_RCC_OscConfig+0x56c>
 80023e8:	2301      	movs	r3, #1
 80023ea:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ee:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80023f2:	fa93 f3a3 	rbit	r3, r3
 80023f6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80023fa:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023fe:	fab3 f383 	clz	r3, r3
 8002402:	b2db      	uxtb	r3, r3
 8002404:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002408:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	461a      	mov	r2, r3
 8002410:	2301      	movs	r3, #1
 8002412:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002414:	f7ff fa1c 	bl	8001850 <HAL_GetTick>
 8002418:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800241c:	e00a      	b.n	8002434 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800241e:	f7ff fa17 	bl	8001850 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d902      	bls.n	8002434 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	f000 bde2 	b.w	8002ff8 <HAL_RCC_OscConfig+0x106c>
 8002434:	2302      	movs	r3, #2
 8002436:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800243e:	fa93 f3a3 	rbit	r3, r3
 8002442:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002446:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800244a:	fab3 f383 	clz	r3, r3
 800244e:	b2db      	uxtb	r3, r3
 8002450:	095b      	lsrs	r3, r3, #5
 8002452:	b2db      	uxtb	r3, r3
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b01      	cmp	r3, #1
 800245c:	d102      	bne.n	8002464 <HAL_RCC_OscConfig+0x4d8>
 800245e:	4b45      	ldr	r3, [pc, #276]	@ (8002574 <HAL_RCC_OscConfig+0x5e8>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	e013      	b.n	800248c <HAL_RCC_OscConfig+0x500>
 8002464:	2302      	movs	r3, #2
 8002466:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800246e:	fa93 f3a3 	rbit	r3, r3
 8002472:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002476:	2302      	movs	r3, #2
 8002478:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800247c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002480:	fa93 f3a3 	rbit	r3, r3
 8002484:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002488:	4b3a      	ldr	r3, [pc, #232]	@ (8002574 <HAL_RCC_OscConfig+0x5e8>)
 800248a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248c:	2202      	movs	r2, #2
 800248e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002492:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002496:	fa92 f2a2 	rbit	r2, r2
 800249a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800249e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80024a2:	fab2 f282 	clz	r2, r2
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	f042 0220 	orr.w	r2, r2, #32
 80024ac:	b2d2      	uxtb	r2, r2
 80024ae:	f002 021f 	and.w	r2, r2, #31
 80024b2:	2101      	movs	r1, #1
 80024b4:	fa01 f202 	lsl.w	r2, r1, r2
 80024b8:	4013      	ands	r3, r2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0af      	beq.n	800241e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024be:	4b2d      	ldr	r3, [pc, #180]	@ (8002574 <HAL_RCC_OscConfig+0x5e8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	21f8      	movs	r1, #248	@ 0xf8
 80024d4:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d8:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80024dc:	fa91 f1a1 	rbit	r1, r1
 80024e0:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80024e4:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80024e8:	fab1 f181 	clz	r1, r1
 80024ec:	b2c9      	uxtb	r1, r1
 80024ee:	408b      	lsls	r3, r1
 80024f0:	4920      	ldr	r1, [pc, #128]	@ (8002574 <HAL_RCC_OscConfig+0x5e8>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	600b      	str	r3, [r1, #0]
 80024f6:	e06c      	b.n	80025d2 <HAL_RCC_OscConfig+0x646>
 80024f8:	2301      	movs	r3, #1
 80024fa:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fe:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002502:	fa93 f3a3 	rbit	r3, r3
 8002506:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800250a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800250e:	fab3 f383 	clz	r3, r3
 8002512:	b2db      	uxtb	r3, r3
 8002514:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002518:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	461a      	mov	r2, r3
 8002520:	2300      	movs	r3, #0
 8002522:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002524:	f7ff f994 	bl	8001850 <HAL_GetTick>
 8002528:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800252c:	e00a      	b.n	8002544 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800252e:	f7ff f98f 	bl	8001850 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d902      	bls.n	8002544 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	f000 bd5a 	b.w	8002ff8 <HAL_RCC_OscConfig+0x106c>
 8002544:	2302      	movs	r3, #2
 8002546:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800254e:	fa93 f3a3 	rbit	r3, r3
 8002552:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002556:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800255a:	fab3 f383 	clz	r3, r3
 800255e:	b2db      	uxtb	r3, r3
 8002560:	095b      	lsrs	r3, r3, #5
 8002562:	b2db      	uxtb	r3, r3
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b01      	cmp	r3, #1
 800256c:	d104      	bne.n	8002578 <HAL_RCC_OscConfig+0x5ec>
 800256e:	4b01      	ldr	r3, [pc, #4]	@ (8002574 <HAL_RCC_OscConfig+0x5e8>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	e015      	b.n	80025a0 <HAL_RCC_OscConfig+0x614>
 8002574:	40021000 	.word	0x40021000
 8002578:	2302      	movs	r3, #2
 800257a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002582:	fa93 f3a3 	rbit	r3, r3
 8002586:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800258a:	2302      	movs	r3, #2
 800258c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002590:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002594:	fa93 f3a3 	rbit	r3, r3
 8002598:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800259c:	4bc8      	ldr	r3, [pc, #800]	@ (80028c0 <HAL_RCC_OscConfig+0x934>)
 800259e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a0:	2202      	movs	r2, #2
 80025a2:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80025a6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80025aa:	fa92 f2a2 	rbit	r2, r2
 80025ae:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80025b2:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80025b6:	fab2 f282 	clz	r2, r2
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	f042 0220 	orr.w	r2, r2, #32
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	f002 021f 	and.w	r2, r2, #31
 80025c6:	2101      	movs	r1, #1
 80025c8:	fa01 f202 	lsl.w	r2, r1, r2
 80025cc:	4013      	ands	r3, r2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1ad      	bne.n	800252e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f000 8110 	beq.w	8002808 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d079      	beq.n	80026ec <HAL_RCC_OscConfig+0x760>
 80025f8:	2301      	movs	r3, #1
 80025fa:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002602:	fa93 f3a3 	rbit	r3, r3
 8002606:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800260a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800260e:	fab3 f383 	clz	r3, r3
 8002612:	b2db      	uxtb	r3, r3
 8002614:	461a      	mov	r2, r3
 8002616:	4bab      	ldr	r3, [pc, #684]	@ (80028c4 <HAL_RCC_OscConfig+0x938>)
 8002618:	4413      	add	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	461a      	mov	r2, r3
 800261e:	2301      	movs	r3, #1
 8002620:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002622:	f7ff f915 	bl	8001850 <HAL_GetTick>
 8002626:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800262a:	e00a      	b.n	8002642 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800262c:	f7ff f910 	bl	8001850 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d902      	bls.n	8002642 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	f000 bcdb 	b.w	8002ff8 <HAL_RCC_OscConfig+0x106c>
 8002642:	2302      	movs	r3, #2
 8002644:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002648:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800264c:	fa93 f3a3 	rbit	r3, r3
 8002650:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002654:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002658:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800265c:	2202      	movs	r2, #2
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002664:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	fa93 f2a3 	rbit	r2, r3
 800266e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002672:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800267c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002680:	2202      	movs	r2, #2
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002688:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	fa93 f2a3 	rbit	r2, r3
 8002692:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002696:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800269a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800269c:	4b88      	ldr	r3, [pc, #544]	@ (80028c0 <HAL_RCC_OscConfig+0x934>)
 800269e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80026a8:	2102      	movs	r1, #2
 80026aa:	6019      	str	r1, [r3, #0]
 80026ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	fa93 f1a3 	rbit	r1, r3
 80026ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026be:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80026c2:	6019      	str	r1, [r3, #0]
  return result;
 80026c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	fab3 f383 	clz	r3, r3
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	f003 031f 	and.w	r3, r3, #31
 80026de:	2101      	movs	r1, #1
 80026e0:	fa01 f303 	lsl.w	r3, r1, r3
 80026e4:	4013      	ands	r3, r2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0a0      	beq.n	800262c <HAL_RCC_OscConfig+0x6a0>
 80026ea:	e08d      	b.n	8002808 <HAL_RCC_OscConfig+0x87c>
 80026ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80026f4:	2201      	movs	r2, #1
 80026f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026fc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	fa93 f2a3 	rbit	r2, r3
 8002706:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800270a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800270e:	601a      	str	r2, [r3, #0]
  return result;
 8002710:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002714:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002718:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800271a:	fab3 f383 	clz	r3, r3
 800271e:	b2db      	uxtb	r3, r3
 8002720:	461a      	mov	r2, r3
 8002722:	4b68      	ldr	r3, [pc, #416]	@ (80028c4 <HAL_RCC_OscConfig+0x938>)
 8002724:	4413      	add	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	461a      	mov	r2, r3
 800272a:	2300      	movs	r3, #0
 800272c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800272e:	f7ff f88f 	bl	8001850 <HAL_GetTick>
 8002732:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002736:	e00a      	b.n	800274e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002738:	f7ff f88a 	bl	8001850 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d902      	bls.n	800274e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	f000 bc55 	b.w	8002ff8 <HAL_RCC_OscConfig+0x106c>
 800274e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002752:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002756:	2202      	movs	r2, #2
 8002758:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800275e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	fa93 f2a3 	rbit	r2, r3
 8002768:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800276c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002776:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800277a:	2202      	movs	r2, #2
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002782:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	fa93 f2a3 	rbit	r2, r3
 800278c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002790:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800279a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800279e:	2202      	movs	r2, #2
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	fa93 f2a3 	rbit	r2, r3
 80027b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027b4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80027b8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027ba:	4b41      	ldr	r3, [pc, #260]	@ (80028c0 <HAL_RCC_OscConfig+0x934>)
 80027bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027c2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80027c6:	2102      	movs	r1, #2
 80027c8:	6019      	str	r1, [r3, #0]
 80027ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ce:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	fa93 f1a3 	rbit	r1, r3
 80027d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027dc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027e0:	6019      	str	r1, [r3, #0]
  return result;
 80027e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	fab3 f383 	clz	r3, r3
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	f003 031f 	and.w	r3, r3, #31
 80027fc:	2101      	movs	r1, #1
 80027fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002802:	4013      	ands	r3, r2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d197      	bne.n	8002738 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002808:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800280c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 81a1 	beq.w	8002b60 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800281e:	2300      	movs	r3, #0
 8002820:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002824:	4b26      	ldr	r3, [pc, #152]	@ (80028c0 <HAL_RCC_OscConfig+0x934>)
 8002826:	69db      	ldr	r3, [r3, #28]
 8002828:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d116      	bne.n	800285e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002830:	4b23      	ldr	r3, [pc, #140]	@ (80028c0 <HAL_RCC_OscConfig+0x934>)
 8002832:	69db      	ldr	r3, [r3, #28]
 8002834:	4a22      	ldr	r2, [pc, #136]	@ (80028c0 <HAL_RCC_OscConfig+0x934>)
 8002836:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800283a:	61d3      	str	r3, [r2, #28]
 800283c:	4b20      	ldr	r3, [pc, #128]	@ (80028c0 <HAL_RCC_OscConfig+0x934>)
 800283e:	69db      	ldr	r3, [r3, #28]
 8002840:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002844:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002848:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002852:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002856:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002858:	2301      	movs	r3, #1
 800285a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800285e:	4b1a      	ldr	r3, [pc, #104]	@ (80028c8 <HAL_RCC_OscConfig+0x93c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002866:	2b00      	cmp	r3, #0
 8002868:	d11a      	bne.n	80028a0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800286a:	4b17      	ldr	r3, [pc, #92]	@ (80028c8 <HAL_RCC_OscConfig+0x93c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a16      	ldr	r2, [pc, #88]	@ (80028c8 <HAL_RCC_OscConfig+0x93c>)
 8002870:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002874:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002876:	f7fe ffeb 	bl	8001850 <HAL_GetTick>
 800287a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800287e:	e009      	b.n	8002894 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002880:	f7fe ffe6 	bl	8001850 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b64      	cmp	r3, #100	@ 0x64
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e3b1      	b.n	8002ff8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002894:	4b0c      	ldr	r3, [pc, #48]	@ (80028c8 <HAL_RCC_OscConfig+0x93c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0ef      	beq.n	8002880 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d10d      	bne.n	80028cc <HAL_RCC_OscConfig+0x940>
 80028b0:	4b03      	ldr	r3, [pc, #12]	@ (80028c0 <HAL_RCC_OscConfig+0x934>)
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	4a02      	ldr	r2, [pc, #8]	@ (80028c0 <HAL_RCC_OscConfig+0x934>)
 80028b6:	f043 0301 	orr.w	r3, r3, #1
 80028ba:	6213      	str	r3, [r2, #32]
 80028bc:	e03c      	b.n	8002938 <HAL_RCC_OscConfig+0x9ac>
 80028be:	bf00      	nop
 80028c0:	40021000 	.word	0x40021000
 80028c4:	10908120 	.word	0x10908120
 80028c8:	40007000 	.word	0x40007000
 80028cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10c      	bne.n	80028f6 <HAL_RCC_OscConfig+0x96a>
 80028dc:	4bc1      	ldr	r3, [pc, #772]	@ (8002be4 <HAL_RCC_OscConfig+0xc58>)
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	4ac0      	ldr	r2, [pc, #768]	@ (8002be4 <HAL_RCC_OscConfig+0xc58>)
 80028e2:	f023 0301 	bic.w	r3, r3, #1
 80028e6:	6213      	str	r3, [r2, #32]
 80028e8:	4bbe      	ldr	r3, [pc, #760]	@ (8002be4 <HAL_RCC_OscConfig+0xc58>)
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	4abd      	ldr	r2, [pc, #756]	@ (8002be4 <HAL_RCC_OscConfig+0xc58>)
 80028ee:	f023 0304 	bic.w	r3, r3, #4
 80028f2:	6213      	str	r3, [r2, #32]
 80028f4:	e020      	b.n	8002938 <HAL_RCC_OscConfig+0x9ac>
 80028f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	2b05      	cmp	r3, #5
 8002904:	d10c      	bne.n	8002920 <HAL_RCC_OscConfig+0x994>
 8002906:	4bb7      	ldr	r3, [pc, #732]	@ (8002be4 <HAL_RCC_OscConfig+0xc58>)
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	4ab6      	ldr	r2, [pc, #728]	@ (8002be4 <HAL_RCC_OscConfig+0xc58>)
 800290c:	f043 0304 	orr.w	r3, r3, #4
 8002910:	6213      	str	r3, [r2, #32]
 8002912:	4bb4      	ldr	r3, [pc, #720]	@ (8002be4 <HAL_RCC_OscConfig+0xc58>)
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	4ab3      	ldr	r2, [pc, #716]	@ (8002be4 <HAL_RCC_OscConfig+0xc58>)
 8002918:	f043 0301 	orr.w	r3, r3, #1
 800291c:	6213      	str	r3, [r2, #32]
 800291e:	e00b      	b.n	8002938 <HAL_RCC_OscConfig+0x9ac>
 8002920:	4bb0      	ldr	r3, [pc, #704]	@ (8002be4 <HAL_RCC_OscConfig+0xc58>)
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	4aaf      	ldr	r2, [pc, #700]	@ (8002be4 <HAL_RCC_OscConfig+0xc58>)
 8002926:	f023 0301 	bic.w	r3, r3, #1
 800292a:	6213      	str	r3, [r2, #32]
 800292c:	4bad      	ldr	r3, [pc, #692]	@ (8002be4 <HAL_RCC_OscConfig+0xc58>)
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	4aac      	ldr	r2, [pc, #688]	@ (8002be4 <HAL_RCC_OscConfig+0xc58>)
 8002932:	f023 0304 	bic.w	r3, r3, #4
 8002936:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002938:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800293c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 8081 	beq.w	8002a4c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800294a:	f7fe ff81 	bl	8001850 <HAL_GetTick>
 800294e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002952:	e00b      	b.n	800296c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002954:	f7fe ff7c 	bl	8001850 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002964:	4293      	cmp	r3, r2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e345      	b.n	8002ff8 <HAL_RCC_OscConfig+0x106c>
 800296c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002970:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002974:	2202      	movs	r2, #2
 8002976:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002978:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800297c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	fa93 f2a3 	rbit	r2, r3
 8002986:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800298a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002994:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002998:	2202      	movs	r2, #2
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	fa93 f2a3 	rbit	r2, r3
 80029aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ae:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80029b2:	601a      	str	r2, [r3, #0]
  return result;
 80029b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80029bc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029be:	fab3 f383 	clz	r3, r3
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	095b      	lsrs	r3, r3, #5
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	f043 0302 	orr.w	r3, r3, #2
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d102      	bne.n	80029d8 <HAL_RCC_OscConfig+0xa4c>
 80029d2:	4b84      	ldr	r3, [pc, #528]	@ (8002be4 <HAL_RCC_OscConfig+0xc58>)
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	e013      	b.n	8002a00 <HAL_RCC_OscConfig+0xa74>
 80029d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029dc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80029e0:	2202      	movs	r2, #2
 80029e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	fa93 f2a3 	rbit	r2, r3
 80029f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029f6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	4b79      	ldr	r3, [pc, #484]	@ (8002be4 <HAL_RCC_OscConfig+0xc58>)
 80029fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a00:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a04:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002a08:	2102      	movs	r1, #2
 8002a0a:	6011      	str	r1, [r2, #0]
 8002a0c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a10:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002a14:	6812      	ldr	r2, [r2, #0]
 8002a16:	fa92 f1a2 	rbit	r1, r2
 8002a1a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a1e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002a22:	6011      	str	r1, [r2, #0]
  return result;
 8002a24:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a28:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002a2c:	6812      	ldr	r2, [r2, #0]
 8002a2e:	fab2 f282 	clz	r2, r2
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	f002 021f 	and.w	r2, r2, #31
 8002a3e:	2101      	movs	r1, #1
 8002a40:	fa01 f202 	lsl.w	r2, r1, r2
 8002a44:	4013      	ands	r3, r2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d084      	beq.n	8002954 <HAL_RCC_OscConfig+0x9c8>
 8002a4a:	e07f      	b.n	8002b4c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a4c:	f7fe ff00 	bl	8001850 <HAL_GetTick>
 8002a50:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a54:	e00b      	b.n	8002a6e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a56:	f7fe fefb 	bl	8001850 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e2c4      	b.n	8002ff8 <HAL_RCC_OscConfig+0x106c>
 8002a6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a72:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002a76:	2202      	movs	r2, #2
 8002a78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a7e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	fa93 f2a3 	rbit	r2, r3
 8002a88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a8c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a96:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aa2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	fa93 f2a3 	rbit	r2, r3
 8002aac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ab0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002ab4:	601a      	str	r2, [r3, #0]
  return result;
 8002ab6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aba:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002abe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ac0:	fab3 f383 	clz	r3, r3
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	095b      	lsrs	r3, r3, #5
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	f043 0302 	orr.w	r3, r3, #2
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d102      	bne.n	8002ada <HAL_RCC_OscConfig+0xb4e>
 8002ad4:	4b43      	ldr	r3, [pc, #268]	@ (8002be4 <HAL_RCC_OscConfig+0xc58>)
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	e013      	b.n	8002b02 <HAL_RCC_OscConfig+0xb76>
 8002ada:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ade:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aea:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	fa93 f2a3 	rbit	r2, r3
 8002af4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002af8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	4b39      	ldr	r3, [pc, #228]	@ (8002be4 <HAL_RCC_OscConfig+0xc58>)
 8002b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b02:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b06:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002b0a:	2102      	movs	r1, #2
 8002b0c:	6011      	str	r1, [r2, #0]
 8002b0e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b12:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002b16:	6812      	ldr	r2, [r2, #0]
 8002b18:	fa92 f1a2 	rbit	r1, r2
 8002b1c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b20:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002b24:	6011      	str	r1, [r2, #0]
  return result;
 8002b26:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b2a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002b2e:	6812      	ldr	r2, [r2, #0]
 8002b30:	fab2 f282 	clz	r2, r2
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b3a:	b2d2      	uxtb	r2, r2
 8002b3c:	f002 021f 	and.w	r2, r2, #31
 8002b40:	2101      	movs	r1, #1
 8002b42:	fa01 f202 	lsl.w	r2, r1, r2
 8002b46:	4013      	ands	r3, r2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d184      	bne.n	8002a56 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b4c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d105      	bne.n	8002b60 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b54:	4b23      	ldr	r3, [pc, #140]	@ (8002be4 <HAL_RCC_OscConfig+0xc58>)
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	4a22      	ldr	r2, [pc, #136]	@ (8002be4 <HAL_RCC_OscConfig+0xc58>)
 8002b5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b5e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b64:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	69db      	ldr	r3, [r3, #28]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 8242 	beq.w	8002ff6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b72:	4b1c      	ldr	r3, [pc, #112]	@ (8002be4 <HAL_RCC_OscConfig+0xc58>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f003 030c 	and.w	r3, r3, #12
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	f000 8213 	beq.w	8002fa6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b84:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	f040 8162 	bne.w	8002e56 <HAL_RCC_OscConfig+0xeca>
 8002b92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b96:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002b9a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ba4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	fa93 f2a3 	rbit	r2, r3
 8002bae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002bb6:	601a      	str	r2, [r3, #0]
  return result;
 8002bb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bbc:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002bc0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc2:	fab3 f383 	clz	r3, r3
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002bcc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd8:	f7fe fe3a 	bl	8001850 <HAL_GetTick>
 8002bdc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002be0:	e00c      	b.n	8002bfc <HAL_RCC_OscConfig+0xc70>
 8002be2:	bf00      	nop
 8002be4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002be8:	f7fe fe32 	bl	8001850 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e1fd      	b.n	8002ff8 <HAL_RCC_OscConfig+0x106c>
 8002bfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c00:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002c04:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c0e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	fa93 f2a3 	rbit	r2, r3
 8002c18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c1c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002c20:	601a      	str	r2, [r3, #0]
  return result;
 8002c22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c26:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002c2a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c2c:	fab3 f383 	clz	r3, r3
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	095b      	lsrs	r3, r3, #5
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	f043 0301 	orr.w	r3, r3, #1
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d102      	bne.n	8002c46 <HAL_RCC_OscConfig+0xcba>
 8002c40:	4bb0      	ldr	r3, [pc, #704]	@ (8002f04 <HAL_RCC_OscConfig+0xf78>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	e027      	b.n	8002c96 <HAL_RCC_OscConfig+0xd0a>
 8002c46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c4a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002c4e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c58:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	fa93 f2a3 	rbit	r2, r3
 8002c62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c66:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c70:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002c74:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c78:	601a      	str	r2, [r3, #0]
 8002c7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c7e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	fa93 f2a3 	rbit	r2, r3
 8002c88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c8c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002c90:	601a      	str	r2, [r3, #0]
 8002c92:	4b9c      	ldr	r3, [pc, #624]	@ (8002f04 <HAL_RCC_OscConfig+0xf78>)
 8002c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c96:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c9a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002c9e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002ca2:	6011      	str	r1, [r2, #0]
 8002ca4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ca8:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002cac:	6812      	ldr	r2, [r2, #0]
 8002cae:	fa92 f1a2 	rbit	r1, r2
 8002cb2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cb6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002cba:	6011      	str	r1, [r2, #0]
  return result;
 8002cbc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cc0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002cc4:	6812      	ldr	r2, [r2, #0]
 8002cc6:	fab2 f282 	clz	r2, r2
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	f042 0220 	orr.w	r2, r2, #32
 8002cd0:	b2d2      	uxtb	r2, r2
 8002cd2:	f002 021f 	and.w	r2, r2, #31
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8002cdc:	4013      	ands	r3, r2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d182      	bne.n	8002be8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ce2:	4b88      	ldr	r3, [pc, #544]	@ (8002f04 <HAL_RCC_OscConfig+0xf78>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002cea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002cf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cfa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	430b      	orrs	r3, r1
 8002d04:	497f      	ldr	r1, [pc, #508]	@ (8002f04 <HAL_RCC_OscConfig+0xf78>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	604b      	str	r3, [r1, #4]
 8002d0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d0e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002d12:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d1c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	fa93 f2a3 	rbit	r2, r3
 8002d26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d2a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002d2e:	601a      	str	r2, [r3, #0]
  return result;
 8002d30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d34:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002d38:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d3a:	fab3 f383 	clz	r3, r3
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d44:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d50:	f7fe fd7e 	bl	8001850 <HAL_GetTick>
 8002d54:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d58:	e009      	b.n	8002d6e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d5a:	f7fe fd79 	bl	8001850 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e144      	b.n	8002ff8 <HAL_RCC_OscConfig+0x106c>
 8002d6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d72:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002d76:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d80:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	fa93 f2a3 	rbit	r2, r3
 8002d8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d8e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002d92:	601a      	str	r2, [r3, #0]
  return result;
 8002d94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d98:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002d9c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d9e:	fab3 f383 	clz	r3, r3
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	095b      	lsrs	r3, r3, #5
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	f043 0301 	orr.w	r3, r3, #1
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d102      	bne.n	8002db8 <HAL_RCC_OscConfig+0xe2c>
 8002db2:	4b54      	ldr	r3, [pc, #336]	@ (8002f04 <HAL_RCC_OscConfig+0xf78>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	e027      	b.n	8002e08 <HAL_RCC_OscConfig+0xe7c>
 8002db8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dbc:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002dc0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002dc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dca:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	fa93 f2a3 	rbit	r2, r3
 8002dd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dd8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002de6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002df0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	fa93 f2a3 	rbit	r2, r3
 8002dfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dfe:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	4b3f      	ldr	r3, [pc, #252]	@ (8002f04 <HAL_RCC_OscConfig+0xf78>)
 8002e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e08:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e0c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002e10:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002e14:	6011      	str	r1, [r2, #0]
 8002e16:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e1a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002e1e:	6812      	ldr	r2, [r2, #0]
 8002e20:	fa92 f1a2 	rbit	r1, r2
 8002e24:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e28:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002e2c:	6011      	str	r1, [r2, #0]
  return result;
 8002e2e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e32:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002e36:	6812      	ldr	r2, [r2, #0]
 8002e38:	fab2 f282 	clz	r2, r2
 8002e3c:	b2d2      	uxtb	r2, r2
 8002e3e:	f042 0220 	orr.w	r2, r2, #32
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	f002 021f 	and.w	r2, r2, #31
 8002e48:	2101      	movs	r1, #1
 8002e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e4e:	4013      	ands	r3, r2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d082      	beq.n	8002d5a <HAL_RCC_OscConfig+0xdce>
 8002e54:	e0cf      	b.n	8002ff6 <HAL_RCC_OscConfig+0x106a>
 8002e56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e5a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002e5e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e68:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	fa93 f2a3 	rbit	r2, r3
 8002e72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e76:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002e7a:	601a      	str	r2, [r3, #0]
  return result;
 8002e7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e80:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002e84:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e86:	fab3 f383 	clz	r3, r3
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002e90:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	461a      	mov	r2, r3
 8002e98:	2300      	movs	r3, #0
 8002e9a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9c:	f7fe fcd8 	bl	8001850 <HAL_GetTick>
 8002ea0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ea4:	e009      	b.n	8002eba <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ea6:	f7fe fcd3 	bl	8001850 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e09e      	b.n	8002ff8 <HAL_RCC_OscConfig+0x106c>
 8002eba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ebe:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002ec2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ec6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ecc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	fa93 f2a3 	rbit	r2, r3
 8002ed6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eda:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002ede:	601a      	str	r2, [r3, #0]
  return result;
 8002ee0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ee4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002ee8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eea:	fab3 f383 	clz	r3, r3
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	095b      	lsrs	r3, r3, #5
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	f043 0301 	orr.w	r3, r3, #1
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d104      	bne.n	8002f08 <HAL_RCC_OscConfig+0xf7c>
 8002efe:	4b01      	ldr	r3, [pc, #4]	@ (8002f04 <HAL_RCC_OscConfig+0xf78>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	e029      	b.n	8002f58 <HAL_RCC_OscConfig+0xfcc>
 8002f04:	40021000 	.word	0x40021000
 8002f08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f0c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002f10:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f1a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	fa93 f2a3 	rbit	r2, r3
 8002f24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f28:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f32:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002f36:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f40:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	fa93 f2a3 	rbit	r2, r3
 8002f4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f4e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	4b2b      	ldr	r3, [pc, #172]	@ (8003004 <HAL_RCC_OscConfig+0x1078>)
 8002f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f58:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f5c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002f60:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002f64:	6011      	str	r1, [r2, #0]
 8002f66:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f6a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002f6e:	6812      	ldr	r2, [r2, #0]
 8002f70:	fa92 f1a2 	rbit	r1, r2
 8002f74:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f78:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002f7c:	6011      	str	r1, [r2, #0]
  return result;
 8002f7e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f82:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002f86:	6812      	ldr	r2, [r2, #0]
 8002f88:	fab2 f282 	clz	r2, r2
 8002f8c:	b2d2      	uxtb	r2, r2
 8002f8e:	f042 0220 	orr.w	r2, r2, #32
 8002f92:	b2d2      	uxtb	r2, r2
 8002f94:	f002 021f 	and.w	r2, r2, #31
 8002f98:	2101      	movs	r1, #1
 8002f9a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d180      	bne.n	8002ea6 <HAL_RCC_OscConfig+0xf1a>
 8002fa4:	e027      	b.n	8002ff6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fa6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002faa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d101      	bne.n	8002fba <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e01e      	b.n	8002ff8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fba:	4b12      	ldr	r3, [pc, #72]	@ (8003004 <HAL_RCC_OscConfig+0x1078>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002fc2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002fc6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002fca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d10b      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002fda:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002fde:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002fe2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fe6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d001      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e000      	b.n	8002ff8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40021000 	.word	0x40021000

08003008 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b09e      	sub	sp, #120	@ 0x78
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003012:	2300      	movs	r3, #0
 8003014:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e162      	b.n	80032e6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003020:	4b90      	ldr	r3, [pc, #576]	@ (8003264 <HAL_RCC_ClockConfig+0x25c>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0307 	and.w	r3, r3, #7
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	429a      	cmp	r2, r3
 800302c:	d910      	bls.n	8003050 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800302e:	4b8d      	ldr	r3, [pc, #564]	@ (8003264 <HAL_RCC_ClockConfig+0x25c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f023 0207 	bic.w	r2, r3, #7
 8003036:	498b      	ldr	r1, [pc, #556]	@ (8003264 <HAL_RCC_ClockConfig+0x25c>)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	4313      	orrs	r3, r2
 800303c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800303e:	4b89      	ldr	r3, [pc, #548]	@ (8003264 <HAL_RCC_ClockConfig+0x25c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	429a      	cmp	r2, r3
 800304a:	d001      	beq.n	8003050 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e14a      	b.n	80032e6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d008      	beq.n	800306e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800305c:	4b82      	ldr	r3, [pc, #520]	@ (8003268 <HAL_RCC_ClockConfig+0x260>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	497f      	ldr	r1, [pc, #508]	@ (8003268 <HAL_RCC_ClockConfig+0x260>)
 800306a:	4313      	orrs	r3, r2
 800306c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 80dc 	beq.w	8003234 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d13c      	bne.n	80030fe <HAL_RCC_ClockConfig+0xf6>
 8003084:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003088:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800308c:	fa93 f3a3 	rbit	r3, r3
 8003090:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003092:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003094:	fab3 f383 	clz	r3, r3
 8003098:	b2db      	uxtb	r3, r3
 800309a:	095b      	lsrs	r3, r3, #5
 800309c:	b2db      	uxtb	r3, r3
 800309e:	f043 0301 	orr.w	r3, r3, #1
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d102      	bne.n	80030ae <HAL_RCC_ClockConfig+0xa6>
 80030a8:	4b6f      	ldr	r3, [pc, #444]	@ (8003268 <HAL_RCC_ClockConfig+0x260>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	e00f      	b.n	80030ce <HAL_RCC_ClockConfig+0xc6>
 80030ae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030b2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80030b6:	fa93 f3a3 	rbit	r3, r3
 80030ba:	667b      	str	r3, [r7, #100]	@ 0x64
 80030bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80030c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80030c4:	fa93 f3a3 	rbit	r3, r3
 80030c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80030ca:	4b67      	ldr	r3, [pc, #412]	@ (8003268 <HAL_RCC_ClockConfig+0x260>)
 80030cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ce:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80030d2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80030d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80030d6:	fa92 f2a2 	rbit	r2, r2
 80030da:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80030dc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80030de:	fab2 f282 	clz	r2, r2
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	f042 0220 	orr.w	r2, r2, #32
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	f002 021f 	and.w	r2, r2, #31
 80030ee:	2101      	movs	r1, #1
 80030f0:	fa01 f202 	lsl.w	r2, r1, r2
 80030f4:	4013      	ands	r3, r2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d17b      	bne.n	80031f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e0f3      	b.n	80032e6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	2b02      	cmp	r3, #2
 8003104:	d13c      	bne.n	8003180 <HAL_RCC_ClockConfig+0x178>
 8003106:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800310a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800310e:	fa93 f3a3 	rbit	r3, r3
 8003112:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003114:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003116:	fab3 f383 	clz	r3, r3
 800311a:	b2db      	uxtb	r3, r3
 800311c:	095b      	lsrs	r3, r3, #5
 800311e:	b2db      	uxtb	r3, r3
 8003120:	f043 0301 	orr.w	r3, r3, #1
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b01      	cmp	r3, #1
 8003128:	d102      	bne.n	8003130 <HAL_RCC_ClockConfig+0x128>
 800312a:	4b4f      	ldr	r3, [pc, #316]	@ (8003268 <HAL_RCC_ClockConfig+0x260>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	e00f      	b.n	8003150 <HAL_RCC_ClockConfig+0x148>
 8003130:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003134:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003136:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003138:	fa93 f3a3 	rbit	r3, r3
 800313c:	647b      	str	r3, [r7, #68]	@ 0x44
 800313e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003142:	643b      	str	r3, [r7, #64]	@ 0x40
 8003144:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003146:	fa93 f3a3 	rbit	r3, r3
 800314a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800314c:	4b46      	ldr	r3, [pc, #280]	@ (8003268 <HAL_RCC_ClockConfig+0x260>)
 800314e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003150:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003154:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003156:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003158:	fa92 f2a2 	rbit	r2, r2
 800315c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800315e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003160:	fab2 f282 	clz	r2, r2
 8003164:	b2d2      	uxtb	r2, r2
 8003166:	f042 0220 	orr.w	r2, r2, #32
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	f002 021f 	and.w	r2, r2, #31
 8003170:	2101      	movs	r1, #1
 8003172:	fa01 f202 	lsl.w	r2, r1, r2
 8003176:	4013      	ands	r3, r2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d13a      	bne.n	80031f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e0b2      	b.n	80032e6 <HAL_RCC_ClockConfig+0x2de>
 8003180:	2302      	movs	r3, #2
 8003182:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003186:	fa93 f3a3 	rbit	r3, r3
 800318a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800318c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800318e:	fab3 f383 	clz	r3, r3
 8003192:	b2db      	uxtb	r3, r3
 8003194:	095b      	lsrs	r3, r3, #5
 8003196:	b2db      	uxtb	r3, r3
 8003198:	f043 0301 	orr.w	r3, r3, #1
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d102      	bne.n	80031a8 <HAL_RCC_ClockConfig+0x1a0>
 80031a2:	4b31      	ldr	r3, [pc, #196]	@ (8003268 <HAL_RCC_ClockConfig+0x260>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	e00d      	b.n	80031c4 <HAL_RCC_ClockConfig+0x1bc>
 80031a8:	2302      	movs	r3, #2
 80031aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ae:	fa93 f3a3 	rbit	r3, r3
 80031b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80031b4:	2302      	movs	r3, #2
 80031b6:	623b      	str	r3, [r7, #32]
 80031b8:	6a3b      	ldr	r3, [r7, #32]
 80031ba:	fa93 f3a3 	rbit	r3, r3
 80031be:	61fb      	str	r3, [r7, #28]
 80031c0:	4b29      	ldr	r3, [pc, #164]	@ (8003268 <HAL_RCC_ClockConfig+0x260>)
 80031c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c4:	2202      	movs	r2, #2
 80031c6:	61ba      	str	r2, [r7, #24]
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	fa92 f2a2 	rbit	r2, r2
 80031ce:	617a      	str	r2, [r7, #20]
  return result;
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	fab2 f282 	clz	r2, r2
 80031d6:	b2d2      	uxtb	r2, r2
 80031d8:	f042 0220 	orr.w	r2, r2, #32
 80031dc:	b2d2      	uxtb	r2, r2
 80031de:	f002 021f 	and.w	r2, r2, #31
 80031e2:	2101      	movs	r1, #1
 80031e4:	fa01 f202 	lsl.w	r2, r1, r2
 80031e8:	4013      	ands	r3, r2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e079      	b.n	80032e6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031f2:	4b1d      	ldr	r3, [pc, #116]	@ (8003268 <HAL_RCC_ClockConfig+0x260>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f023 0203 	bic.w	r2, r3, #3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	491a      	ldr	r1, [pc, #104]	@ (8003268 <HAL_RCC_ClockConfig+0x260>)
 8003200:	4313      	orrs	r3, r2
 8003202:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003204:	f7fe fb24 	bl	8001850 <HAL_GetTick>
 8003208:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320a:	e00a      	b.n	8003222 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800320c:	f7fe fb20 	bl	8001850 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	f241 3288 	movw	r2, #5000	@ 0x1388
 800321a:	4293      	cmp	r3, r2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e061      	b.n	80032e6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003222:	4b11      	ldr	r3, [pc, #68]	@ (8003268 <HAL_RCC_ClockConfig+0x260>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f003 020c 	and.w	r2, r3, #12
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	429a      	cmp	r2, r3
 8003232:	d1eb      	bne.n	800320c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003234:	4b0b      	ldr	r3, [pc, #44]	@ (8003264 <HAL_RCC_ClockConfig+0x25c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d214      	bcs.n	800326c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003242:	4b08      	ldr	r3, [pc, #32]	@ (8003264 <HAL_RCC_ClockConfig+0x25c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f023 0207 	bic.w	r2, r3, #7
 800324a:	4906      	ldr	r1, [pc, #24]	@ (8003264 <HAL_RCC_ClockConfig+0x25c>)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	4313      	orrs	r3, r2
 8003250:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003252:	4b04      	ldr	r3, [pc, #16]	@ (8003264 <HAL_RCC_ClockConfig+0x25c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	429a      	cmp	r2, r3
 800325e:	d005      	beq.n	800326c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e040      	b.n	80032e6 <HAL_RCC_ClockConfig+0x2de>
 8003264:	40022000 	.word	0x40022000
 8003268:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b00      	cmp	r3, #0
 8003276:	d008      	beq.n	800328a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003278:	4b1d      	ldr	r3, [pc, #116]	@ (80032f0 <HAL_RCC_ClockConfig+0x2e8>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	491a      	ldr	r1, [pc, #104]	@ (80032f0 <HAL_RCC_ClockConfig+0x2e8>)
 8003286:	4313      	orrs	r3, r2
 8003288:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0308 	and.w	r3, r3, #8
 8003292:	2b00      	cmp	r3, #0
 8003294:	d009      	beq.n	80032aa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003296:	4b16      	ldr	r3, [pc, #88]	@ (80032f0 <HAL_RCC_ClockConfig+0x2e8>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	4912      	ldr	r1, [pc, #72]	@ (80032f0 <HAL_RCC_ClockConfig+0x2e8>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80032aa:	f000 f829 	bl	8003300 <HAL_RCC_GetSysClockFreq>
 80032ae:	4601      	mov	r1, r0
 80032b0:	4b0f      	ldr	r3, [pc, #60]	@ (80032f0 <HAL_RCC_ClockConfig+0x2e8>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032b8:	22f0      	movs	r2, #240	@ 0xf0
 80032ba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	fa92 f2a2 	rbit	r2, r2
 80032c2:	60fa      	str	r2, [r7, #12]
  return result;
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	fab2 f282 	clz	r2, r2
 80032ca:	b2d2      	uxtb	r2, r2
 80032cc:	40d3      	lsrs	r3, r2
 80032ce:	4a09      	ldr	r2, [pc, #36]	@ (80032f4 <HAL_RCC_ClockConfig+0x2ec>)
 80032d0:	5cd3      	ldrb	r3, [r2, r3]
 80032d2:	fa21 f303 	lsr.w	r3, r1, r3
 80032d6:	4a08      	ldr	r2, [pc, #32]	@ (80032f8 <HAL_RCC_ClockConfig+0x2f0>)
 80032d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80032da:	4b08      	ldr	r3, [pc, #32]	@ (80032fc <HAL_RCC_ClockConfig+0x2f4>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7fe fa72 	bl	80017c8 <HAL_InitTick>
  
  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3778      	adds	r7, #120	@ 0x78
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	40021000 	.word	0x40021000
 80032f4:	08009568 	.word	0x08009568
 80032f8:	20000000 	.word	0x20000000
 80032fc:	20000004 	.word	0x20000004

08003300 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003300:	b480      	push	{r7}
 8003302:	b087      	sub	sp, #28
 8003304:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003306:	2300      	movs	r3, #0
 8003308:	60fb      	str	r3, [r7, #12]
 800330a:	2300      	movs	r3, #0
 800330c:	60bb      	str	r3, [r7, #8]
 800330e:	2300      	movs	r3, #0
 8003310:	617b      	str	r3, [r7, #20]
 8003312:	2300      	movs	r3, #0
 8003314:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003316:	2300      	movs	r3, #0
 8003318:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800331a:	4b1e      	ldr	r3, [pc, #120]	@ (8003394 <HAL_RCC_GetSysClockFreq+0x94>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f003 030c 	and.w	r3, r3, #12
 8003326:	2b04      	cmp	r3, #4
 8003328:	d002      	beq.n	8003330 <HAL_RCC_GetSysClockFreq+0x30>
 800332a:	2b08      	cmp	r3, #8
 800332c:	d003      	beq.n	8003336 <HAL_RCC_GetSysClockFreq+0x36>
 800332e:	e026      	b.n	800337e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003330:	4b19      	ldr	r3, [pc, #100]	@ (8003398 <HAL_RCC_GetSysClockFreq+0x98>)
 8003332:	613b      	str	r3, [r7, #16]
      break;
 8003334:	e026      	b.n	8003384 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	0c9b      	lsrs	r3, r3, #18
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	4a17      	ldr	r2, [pc, #92]	@ (800339c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003340:	5cd3      	ldrb	r3, [r2, r3]
 8003342:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003344:	4b13      	ldr	r3, [pc, #76]	@ (8003394 <HAL_RCC_GetSysClockFreq+0x94>)
 8003346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003348:	f003 030f 	and.w	r3, r3, #15
 800334c:	4a14      	ldr	r2, [pc, #80]	@ (80033a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800334e:	5cd3      	ldrb	r3, [r2, r3]
 8003350:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d008      	beq.n	800336e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800335c:	4a0e      	ldr	r2, [pc, #56]	@ (8003398 <HAL_RCC_GetSysClockFreq+0x98>)
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	fbb2 f2f3 	udiv	r2, r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	fb02 f303 	mul.w	r3, r2, r3
 800336a:	617b      	str	r3, [r7, #20]
 800336c:	e004      	b.n	8003378 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a0c      	ldr	r2, [pc, #48]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003372:	fb02 f303 	mul.w	r3, r2, r3
 8003376:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	613b      	str	r3, [r7, #16]
      break;
 800337c:	e002      	b.n	8003384 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800337e:	4b06      	ldr	r3, [pc, #24]	@ (8003398 <HAL_RCC_GetSysClockFreq+0x98>)
 8003380:	613b      	str	r3, [r7, #16]
      break;
 8003382:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003384:	693b      	ldr	r3, [r7, #16]
}
 8003386:	4618      	mov	r0, r3
 8003388:	371c      	adds	r7, #28
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	40021000 	.word	0x40021000
 8003398:	007a1200 	.word	0x007a1200
 800339c:	08009580 	.word	0x08009580
 80033a0:	08009590 	.word	0x08009590
 80033a4:	003d0900 	.word	0x003d0900

080033a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033ac:	4b03      	ldr	r3, [pc, #12]	@ (80033bc <HAL_RCC_GetHCLKFreq+0x14>)
 80033ae:	681b      	ldr	r3, [r3, #0]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	20000000 	.word	0x20000000

080033c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80033c6:	f7ff ffef 	bl	80033a8 <HAL_RCC_GetHCLKFreq>
 80033ca:	4601      	mov	r1, r0
 80033cc:	4b0b      	ldr	r3, [pc, #44]	@ (80033fc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80033d4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80033d8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	fa92 f2a2 	rbit	r2, r2
 80033e0:	603a      	str	r2, [r7, #0]
  return result;
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	fab2 f282 	clz	r2, r2
 80033e8:	b2d2      	uxtb	r2, r2
 80033ea:	40d3      	lsrs	r3, r2
 80033ec:	4a04      	ldr	r2, [pc, #16]	@ (8003400 <HAL_RCC_GetPCLK1Freq+0x40>)
 80033ee:	5cd3      	ldrb	r3, [r2, r3]
 80033f0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80033f4:	4618      	mov	r0, r3
 80033f6:	3708      	adds	r7, #8
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40021000 	.word	0x40021000
 8003400:	08009578 	.word	0x08009578

08003404 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800340a:	f7ff ffcd 	bl	80033a8 <HAL_RCC_GetHCLKFreq>
 800340e:	4601      	mov	r1, r0
 8003410:	4b0b      	ldr	r3, [pc, #44]	@ (8003440 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003418:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800341c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	fa92 f2a2 	rbit	r2, r2
 8003424:	603a      	str	r2, [r7, #0]
  return result;
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	fab2 f282 	clz	r2, r2
 800342c:	b2d2      	uxtb	r2, r2
 800342e:	40d3      	lsrs	r3, r2
 8003430:	4a04      	ldr	r2, [pc, #16]	@ (8003444 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003432:	5cd3      	ldrb	r3, [r2, r3]
 8003434:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003438:	4618      	mov	r0, r3
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40021000 	.word	0x40021000
 8003444:	08009578 	.word	0x08009578

08003448 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b092      	sub	sp, #72	@ 0x48
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003450:	2300      	movs	r3, #0
 8003452:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003454:	2300      	movs	r3, #0
 8003456:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003458:	2300      	movs	r3, #0
 800345a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 80d4 	beq.w	8003614 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800346c:	4b4e      	ldr	r3, [pc, #312]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10e      	bne.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003478:	4b4b      	ldr	r3, [pc, #300]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800347a:	69db      	ldr	r3, [r3, #28]
 800347c:	4a4a      	ldr	r2, [pc, #296]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800347e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003482:	61d3      	str	r3, [r2, #28]
 8003484:	4b48      	ldr	r3, [pc, #288]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003486:	69db      	ldr	r3, [r3, #28]
 8003488:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800348c:	60bb      	str	r3, [r7, #8]
 800348e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003490:	2301      	movs	r3, #1
 8003492:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003496:	4b45      	ldr	r3, [pc, #276]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d118      	bne.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034a2:	4b42      	ldr	r3, [pc, #264]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a41      	ldr	r2, [pc, #260]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ae:	f7fe f9cf 	bl	8001850 <HAL_GetTick>
 80034b2:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b4:	e008      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034b6:	f7fe f9cb 	bl	8001850 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b64      	cmp	r3, #100	@ 0x64
 80034c2:	d901      	bls.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e169      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c8:	4b38      	ldr	r3, [pc, #224]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0f0      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034d4:	4b34      	ldr	r3, [pc, #208]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 8084 	beq.w	80035ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034ee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d07c      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034f4:	4b2c      	ldr	r3, [pc, #176]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003502:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003506:	fa93 f3a3 	rbit	r3, r3
 800350a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800350c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800350e:	fab3 f383 	clz	r3, r3
 8003512:	b2db      	uxtb	r3, r3
 8003514:	461a      	mov	r2, r3
 8003516:	4b26      	ldr	r3, [pc, #152]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003518:	4413      	add	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	461a      	mov	r2, r3
 800351e:	2301      	movs	r3, #1
 8003520:	6013      	str	r3, [r2, #0]
 8003522:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003526:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800352a:	fa93 f3a3 	rbit	r3, r3
 800352e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003532:	fab3 f383 	clz	r3, r3
 8003536:	b2db      	uxtb	r3, r3
 8003538:	461a      	mov	r2, r3
 800353a:	4b1d      	ldr	r3, [pc, #116]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800353c:	4413      	add	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	461a      	mov	r2, r3
 8003542:	2300      	movs	r3, #0
 8003544:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003546:	4a18      	ldr	r2, [pc, #96]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003548:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800354a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800354c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d04b      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003556:	f7fe f97b 	bl	8001850 <HAL_GetTick>
 800355a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800355c:	e00a      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800355e:	f7fe f977 	bl	8001850 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	f241 3288 	movw	r2, #5000	@ 0x1388
 800356c:	4293      	cmp	r3, r2
 800356e:	d901      	bls.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e113      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003574:	2302      	movs	r3, #2
 8003576:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800357a:	fa93 f3a3 	rbit	r3, r3
 800357e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003580:	2302      	movs	r3, #2
 8003582:	623b      	str	r3, [r7, #32]
 8003584:	6a3b      	ldr	r3, [r7, #32]
 8003586:	fa93 f3a3 	rbit	r3, r3
 800358a:	61fb      	str	r3, [r7, #28]
  return result;
 800358c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800358e:	fab3 f383 	clz	r3, r3
 8003592:	b2db      	uxtb	r3, r3
 8003594:	095b      	lsrs	r3, r3, #5
 8003596:	b2db      	uxtb	r3, r3
 8003598:	f043 0302 	orr.w	r3, r3, #2
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d108      	bne.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80035a2:	4b01      	ldr	r3, [pc, #4]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	e00d      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80035a8:	40021000 	.word	0x40021000
 80035ac:	40007000 	.word	0x40007000
 80035b0:	10908100 	.word	0x10908100
 80035b4:	2302      	movs	r3, #2
 80035b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	fa93 f3a3 	rbit	r3, r3
 80035be:	617b      	str	r3, [r7, #20]
 80035c0:	4b78      	ldr	r3, [pc, #480]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c4:	2202      	movs	r2, #2
 80035c6:	613a      	str	r2, [r7, #16]
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	fa92 f2a2 	rbit	r2, r2
 80035ce:	60fa      	str	r2, [r7, #12]
  return result;
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	fab2 f282 	clz	r2, r2
 80035d6:	b2d2      	uxtb	r2, r2
 80035d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035dc:	b2d2      	uxtb	r2, r2
 80035de:	f002 021f 	and.w	r2, r2, #31
 80035e2:	2101      	movs	r1, #1
 80035e4:	fa01 f202 	lsl.w	r2, r1, r2
 80035e8:	4013      	ands	r3, r2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0b7      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80035ee:	4b6d      	ldr	r3, [pc, #436]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	496a      	ldr	r1, [pc, #424]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003600:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003604:	2b01      	cmp	r3, #1
 8003606:	d105      	bne.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003608:	4b66      	ldr	r3, [pc, #408]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	4a65      	ldr	r2, [pc, #404]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800360e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003612:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b00      	cmp	r3, #0
 800361e:	d008      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003620:	4b60      	ldr	r3, [pc, #384]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003624:	f023 0203 	bic.w	r2, r3, #3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	495d      	ldr	r1, [pc, #372]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800362e:	4313      	orrs	r3, r2
 8003630:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d008      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800363e:	4b59      	ldr	r3, [pc, #356]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003642:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	4956      	ldr	r1, [pc, #344]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800364c:	4313      	orrs	r3, r2
 800364e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b00      	cmp	r3, #0
 800365a:	d008      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800365c:	4b51      	ldr	r3, [pc, #324]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800365e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003660:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	494e      	ldr	r1, [pc, #312]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800366a:	4313      	orrs	r3, r2
 800366c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0320 	and.w	r3, r3, #32
 8003676:	2b00      	cmp	r3, #0
 8003678:	d008      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800367a:	4b4a      	ldr	r3, [pc, #296]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800367c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800367e:	f023 0210 	bic.w	r2, r3, #16
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	4947      	ldr	r1, [pc, #284]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003688:	4313      	orrs	r3, r2
 800368a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d008      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003698:	4b42      	ldr	r3, [pc, #264]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036a4:	493f      	ldr	r1, [pc, #252]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d008      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036b6:	4b3b      	ldr	r3, [pc, #236]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ba:	f023 0220 	bic.w	r2, r3, #32
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	4938      	ldr	r1, [pc, #224]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0308 	and.w	r3, r3, #8
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d008      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036d4:	4b33      	ldr	r3, [pc, #204]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	4930      	ldr	r1, [pc, #192]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0310 	and.w	r3, r3, #16
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d008      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036f2:	4b2c      	ldr	r3, [pc, #176]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	4929      	ldr	r1, [pc, #164]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003700:	4313      	orrs	r3, r2
 8003702:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800370c:	2b00      	cmp	r3, #0
 800370e:	d008      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003710:	4b24      	ldr	r3, [pc, #144]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800371c:	4921      	ldr	r1, [pc, #132]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800371e:	4313      	orrs	r3, r2
 8003720:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800372a:	2b00      	cmp	r3, #0
 800372c:	d008      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800372e:	4b1d      	ldr	r3, [pc, #116]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003732:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373a:	491a      	ldr	r1, [pc, #104]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800373c:	4313      	orrs	r3, r2
 800373e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003748:	2b00      	cmp	r3, #0
 800374a:	d008      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800374c:	4b15      	ldr	r3, [pc, #84]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800374e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003750:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003758:	4912      	ldr	r1, [pc, #72]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800375a:	4313      	orrs	r3, r2
 800375c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d008      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800376a:	4b0e      	ldr	r3, [pc, #56]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800376e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003776:	490b      	ldr	r1, [pc, #44]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003778:	4313      	orrs	r3, r2
 800377a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d008      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003788:	4b06      	ldr	r3, [pc, #24]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800378a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003794:	4903      	ldr	r1, [pc, #12]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003796:	4313      	orrs	r3, r2
 8003798:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3748      	adds	r7, #72	@ 0x48
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40021000 	.word	0x40021000

080037a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e049      	b.n	800384e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d106      	bne.n	80037d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7fd fdb0 	bl	8001334 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2202      	movs	r2, #2
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3304      	adds	r3, #4
 80037e4:	4619      	mov	r1, r3
 80037e6:	4610      	mov	r0, r2
 80037e8:	f000 f94a 	bl	8003a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
	...

08003858 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003864:	2300      	movs	r3, #0
 8003866:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800386e:	2b01      	cmp	r3, #1
 8003870:	d101      	bne.n	8003876 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003872:	2302      	movs	r3, #2
 8003874:	e0ff      	b.n	8003a76 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b14      	cmp	r3, #20
 8003882:	f200 80f0 	bhi.w	8003a66 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003886:	a201      	add	r2, pc, #4	@ (adr r2, 800388c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800388c:	080038e1 	.word	0x080038e1
 8003890:	08003a67 	.word	0x08003a67
 8003894:	08003a67 	.word	0x08003a67
 8003898:	08003a67 	.word	0x08003a67
 800389c:	08003921 	.word	0x08003921
 80038a0:	08003a67 	.word	0x08003a67
 80038a4:	08003a67 	.word	0x08003a67
 80038a8:	08003a67 	.word	0x08003a67
 80038ac:	08003963 	.word	0x08003963
 80038b0:	08003a67 	.word	0x08003a67
 80038b4:	08003a67 	.word	0x08003a67
 80038b8:	08003a67 	.word	0x08003a67
 80038bc:	080039a3 	.word	0x080039a3
 80038c0:	08003a67 	.word	0x08003a67
 80038c4:	08003a67 	.word	0x08003a67
 80038c8:	08003a67 	.word	0x08003a67
 80038cc:	080039e5 	.word	0x080039e5
 80038d0:	08003a67 	.word	0x08003a67
 80038d4:	08003a67 	.word	0x08003a67
 80038d8:	08003a67 	.word	0x08003a67
 80038dc:	08003a25 	.word	0x08003a25
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68b9      	ldr	r1, [r7, #8]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 f966 	bl	8003bb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	699a      	ldr	r2, [r3, #24]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0208 	orr.w	r2, r2, #8
 80038fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	699a      	ldr	r2, [r3, #24]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0204 	bic.w	r2, r2, #4
 800390a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6999      	ldr	r1, [r3, #24]
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	691a      	ldr	r2, [r3, #16]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	430a      	orrs	r2, r1
 800391c:	619a      	str	r2, [r3, #24]
      break;
 800391e:	e0a5      	b.n	8003a6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68b9      	ldr	r1, [r7, #8]
 8003926:	4618      	mov	r0, r3
 8003928:	f000 f9d6 	bl	8003cd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	699a      	ldr	r2, [r3, #24]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800393a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	699a      	ldr	r2, [r3, #24]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800394a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6999      	ldr	r1, [r3, #24]
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	021a      	lsls	r2, r3, #8
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	430a      	orrs	r2, r1
 800395e:	619a      	str	r2, [r3, #24]
      break;
 8003960:	e084      	b.n	8003a6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68b9      	ldr	r1, [r7, #8]
 8003968:	4618      	mov	r0, r3
 800396a:	f000 fa3f 	bl	8003dec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	69da      	ldr	r2, [r3, #28]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f042 0208 	orr.w	r2, r2, #8
 800397c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	69da      	ldr	r2, [r3, #28]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0204 	bic.w	r2, r2, #4
 800398c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	69d9      	ldr	r1, [r3, #28]
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	691a      	ldr	r2, [r3, #16]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	430a      	orrs	r2, r1
 800399e:	61da      	str	r2, [r3, #28]
      break;
 80039a0:	e064      	b.n	8003a6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68b9      	ldr	r1, [r7, #8]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f000 faa7 	bl	8003efc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	69da      	ldr	r2, [r3, #28]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	69da      	ldr	r2, [r3, #28]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	69d9      	ldr	r1, [r3, #28]
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	021a      	lsls	r2, r3, #8
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	430a      	orrs	r2, r1
 80039e0:	61da      	str	r2, [r3, #28]
      break;
 80039e2:	e043      	b.n	8003a6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68b9      	ldr	r1, [r7, #8]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f000 faf0 	bl	8003fd0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f042 0208 	orr.w	r2, r2, #8
 80039fe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f022 0204 	bic.w	r2, r2, #4
 8003a0e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	691a      	ldr	r2, [r3, #16]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003a22:	e023      	b.n	8003a6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68b9      	ldr	r1, [r7, #8]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 fb34 	bl	8004098 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a3e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a4e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	021a      	lsls	r2, r3, #8
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003a64:	e002      	b.n	8003a6c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	75fb      	strb	r3, [r7, #23]
      break;
 8003a6a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a74:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3718      	adds	r7, #24
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop

08003a80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a42      	ldr	r2, [pc, #264]	@ (8003b9c <TIM_Base_SetConfig+0x11c>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d00f      	beq.n	8003ab8 <TIM_Base_SetConfig+0x38>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a9e:	d00b      	beq.n	8003ab8 <TIM_Base_SetConfig+0x38>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a3f      	ldr	r2, [pc, #252]	@ (8003ba0 <TIM_Base_SetConfig+0x120>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d007      	beq.n	8003ab8 <TIM_Base_SetConfig+0x38>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a3e      	ldr	r2, [pc, #248]	@ (8003ba4 <TIM_Base_SetConfig+0x124>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d003      	beq.n	8003ab8 <TIM_Base_SetConfig+0x38>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a3d      	ldr	r2, [pc, #244]	@ (8003ba8 <TIM_Base_SetConfig+0x128>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d108      	bne.n	8003aca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003abe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a33      	ldr	r2, [pc, #204]	@ (8003b9c <TIM_Base_SetConfig+0x11c>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d01b      	beq.n	8003b0a <TIM_Base_SetConfig+0x8a>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ad8:	d017      	beq.n	8003b0a <TIM_Base_SetConfig+0x8a>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a30      	ldr	r2, [pc, #192]	@ (8003ba0 <TIM_Base_SetConfig+0x120>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d013      	beq.n	8003b0a <TIM_Base_SetConfig+0x8a>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a2f      	ldr	r2, [pc, #188]	@ (8003ba4 <TIM_Base_SetConfig+0x124>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d00f      	beq.n	8003b0a <TIM_Base_SetConfig+0x8a>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a2e      	ldr	r2, [pc, #184]	@ (8003ba8 <TIM_Base_SetConfig+0x128>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d00b      	beq.n	8003b0a <TIM_Base_SetConfig+0x8a>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a2d      	ldr	r2, [pc, #180]	@ (8003bac <TIM_Base_SetConfig+0x12c>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d007      	beq.n	8003b0a <TIM_Base_SetConfig+0x8a>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a2c      	ldr	r2, [pc, #176]	@ (8003bb0 <TIM_Base_SetConfig+0x130>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d003      	beq.n	8003b0a <TIM_Base_SetConfig+0x8a>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a2b      	ldr	r2, [pc, #172]	@ (8003bb4 <TIM_Base_SetConfig+0x134>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d108      	bne.n	8003b1c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a16      	ldr	r2, [pc, #88]	@ (8003b9c <TIM_Base_SetConfig+0x11c>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d00f      	beq.n	8003b68 <TIM_Base_SetConfig+0xe8>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a17      	ldr	r2, [pc, #92]	@ (8003ba8 <TIM_Base_SetConfig+0x128>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d00b      	beq.n	8003b68 <TIM_Base_SetConfig+0xe8>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a16      	ldr	r2, [pc, #88]	@ (8003bac <TIM_Base_SetConfig+0x12c>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d007      	beq.n	8003b68 <TIM_Base_SetConfig+0xe8>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a15      	ldr	r2, [pc, #84]	@ (8003bb0 <TIM_Base_SetConfig+0x130>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d003      	beq.n	8003b68 <TIM_Base_SetConfig+0xe8>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a14      	ldr	r2, [pc, #80]	@ (8003bb4 <TIM_Base_SetConfig+0x134>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d103      	bne.n	8003b70 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	691a      	ldr	r2, [r3, #16]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d105      	bne.n	8003b8e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	f023 0201 	bic.w	r2, r3, #1
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	611a      	str	r2, [r3, #16]
  }
}
 8003b8e:	bf00      	nop
 8003b90:	3714      	adds	r7, #20
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	40012c00 	.word	0x40012c00
 8003ba0:	40000400 	.word	0x40000400
 8003ba4:	40000800 	.word	0x40000800
 8003ba8:	40013400 	.word	0x40013400
 8003bac:	40014000 	.word	0x40014000
 8003bb0:	40014400 	.word	0x40014400
 8003bb4:	40014800 	.word	0x40014800

08003bb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b087      	sub	sp, #28
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	f023 0201 	bic.w	r2, r3, #1
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003be6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f023 0303 	bic.w	r3, r3, #3
 8003bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f023 0302 	bic.w	r3, r3, #2
 8003c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a2c      	ldr	r2, [pc, #176]	@ (8003cc4 <TIM_OC1_SetConfig+0x10c>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d00f      	beq.n	8003c38 <TIM_OC1_SetConfig+0x80>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a2b      	ldr	r2, [pc, #172]	@ (8003cc8 <TIM_OC1_SetConfig+0x110>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d00b      	beq.n	8003c38 <TIM_OC1_SetConfig+0x80>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a2a      	ldr	r2, [pc, #168]	@ (8003ccc <TIM_OC1_SetConfig+0x114>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d007      	beq.n	8003c38 <TIM_OC1_SetConfig+0x80>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a29      	ldr	r2, [pc, #164]	@ (8003cd0 <TIM_OC1_SetConfig+0x118>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d003      	beq.n	8003c38 <TIM_OC1_SetConfig+0x80>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a28      	ldr	r2, [pc, #160]	@ (8003cd4 <TIM_OC1_SetConfig+0x11c>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d10c      	bne.n	8003c52 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	f023 0308 	bic.w	r3, r3, #8
 8003c3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f023 0304 	bic.w	r3, r3, #4
 8003c50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a1b      	ldr	r2, [pc, #108]	@ (8003cc4 <TIM_OC1_SetConfig+0x10c>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d00f      	beq.n	8003c7a <TIM_OC1_SetConfig+0xc2>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a1a      	ldr	r2, [pc, #104]	@ (8003cc8 <TIM_OC1_SetConfig+0x110>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d00b      	beq.n	8003c7a <TIM_OC1_SetConfig+0xc2>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a19      	ldr	r2, [pc, #100]	@ (8003ccc <TIM_OC1_SetConfig+0x114>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d007      	beq.n	8003c7a <TIM_OC1_SetConfig+0xc2>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a18      	ldr	r2, [pc, #96]	@ (8003cd0 <TIM_OC1_SetConfig+0x118>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d003      	beq.n	8003c7a <TIM_OC1_SetConfig+0xc2>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a17      	ldr	r2, [pc, #92]	@ (8003cd4 <TIM_OC1_SetConfig+0x11c>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d111      	bne.n	8003c9e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	621a      	str	r2, [r3, #32]
}
 8003cb8:	bf00      	nop
 8003cba:	371c      	adds	r7, #28
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	40012c00 	.word	0x40012c00
 8003cc8:	40013400 	.word	0x40013400
 8003ccc:	40014000 	.word	0x40014000
 8003cd0:	40014400 	.word	0x40014400
 8003cd4:	40014800 	.word	0x40014800

08003cd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	f023 0210 	bic.w	r2, r3, #16
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	021b      	lsls	r3, r3, #8
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	f023 0320 	bic.w	r3, r3, #32
 8003d26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	011b      	lsls	r3, r3, #4
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a28      	ldr	r2, [pc, #160]	@ (8003dd8 <TIM_OC2_SetConfig+0x100>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d003      	beq.n	8003d44 <TIM_OC2_SetConfig+0x6c>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a27      	ldr	r2, [pc, #156]	@ (8003ddc <TIM_OC2_SetConfig+0x104>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d10d      	bne.n	8003d60 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	011b      	lsls	r3, r3, #4
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d5e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a1d      	ldr	r2, [pc, #116]	@ (8003dd8 <TIM_OC2_SetConfig+0x100>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d00f      	beq.n	8003d88 <TIM_OC2_SetConfig+0xb0>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a1c      	ldr	r2, [pc, #112]	@ (8003ddc <TIM_OC2_SetConfig+0x104>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d00b      	beq.n	8003d88 <TIM_OC2_SetConfig+0xb0>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a1b      	ldr	r2, [pc, #108]	@ (8003de0 <TIM_OC2_SetConfig+0x108>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d007      	beq.n	8003d88 <TIM_OC2_SetConfig+0xb0>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a1a      	ldr	r2, [pc, #104]	@ (8003de4 <TIM_OC2_SetConfig+0x10c>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d003      	beq.n	8003d88 <TIM_OC2_SetConfig+0xb0>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a19      	ldr	r2, [pc, #100]	@ (8003de8 <TIM_OC2_SetConfig+0x110>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d113      	bne.n	8003db0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d8e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d96:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	621a      	str	r2, [r3, #32]
}
 8003dca:	bf00      	nop
 8003dcc:	371c      	adds	r7, #28
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	40012c00 	.word	0x40012c00
 8003ddc:	40013400 	.word	0x40013400
 8003de0:	40014000 	.word	0x40014000
 8003de4:	40014400 	.word	0x40014400
 8003de8:	40014800 	.word	0x40014800

08003dec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b087      	sub	sp, #28
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f023 0303 	bic.w	r3, r3, #3
 8003e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	021b      	lsls	r3, r3, #8
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a27      	ldr	r2, [pc, #156]	@ (8003ee8 <TIM_OC3_SetConfig+0xfc>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d003      	beq.n	8003e56 <TIM_OC3_SetConfig+0x6a>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a26      	ldr	r2, [pc, #152]	@ (8003eec <TIM_OC3_SetConfig+0x100>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d10d      	bne.n	8003e72 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	021b      	lsls	r3, r3, #8
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e70:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a1c      	ldr	r2, [pc, #112]	@ (8003ee8 <TIM_OC3_SetConfig+0xfc>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d00f      	beq.n	8003e9a <TIM_OC3_SetConfig+0xae>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a1b      	ldr	r2, [pc, #108]	@ (8003eec <TIM_OC3_SetConfig+0x100>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d00b      	beq.n	8003e9a <TIM_OC3_SetConfig+0xae>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a1a      	ldr	r2, [pc, #104]	@ (8003ef0 <TIM_OC3_SetConfig+0x104>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d007      	beq.n	8003e9a <TIM_OC3_SetConfig+0xae>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a19      	ldr	r2, [pc, #100]	@ (8003ef4 <TIM_OC3_SetConfig+0x108>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d003      	beq.n	8003e9a <TIM_OC3_SetConfig+0xae>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a18      	ldr	r2, [pc, #96]	@ (8003ef8 <TIM_OC3_SetConfig+0x10c>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d113      	bne.n	8003ec2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ea0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	011b      	lsls	r3, r3, #4
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	011b      	lsls	r3, r3, #4
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	621a      	str	r2, [r3, #32]
}
 8003edc:	bf00      	nop
 8003ede:	371c      	adds	r7, #28
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	40012c00 	.word	0x40012c00
 8003eec:	40013400 	.word	0x40013400
 8003ef0:	40014000 	.word	0x40014000
 8003ef4:	40014400 	.word	0x40014400
 8003ef8:	40014800 	.word	0x40014800

08003efc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b087      	sub	sp, #28
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	021b      	lsls	r3, r3, #8
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	031b      	lsls	r3, r3, #12
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a18      	ldr	r2, [pc, #96]	@ (8003fbc <TIM_OC4_SetConfig+0xc0>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d00f      	beq.n	8003f80 <TIM_OC4_SetConfig+0x84>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a17      	ldr	r2, [pc, #92]	@ (8003fc0 <TIM_OC4_SetConfig+0xc4>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d00b      	beq.n	8003f80 <TIM_OC4_SetConfig+0x84>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a16      	ldr	r2, [pc, #88]	@ (8003fc4 <TIM_OC4_SetConfig+0xc8>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d007      	beq.n	8003f80 <TIM_OC4_SetConfig+0x84>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a15      	ldr	r2, [pc, #84]	@ (8003fc8 <TIM_OC4_SetConfig+0xcc>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d003      	beq.n	8003f80 <TIM_OC4_SetConfig+0x84>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a14      	ldr	r2, [pc, #80]	@ (8003fcc <TIM_OC4_SetConfig+0xd0>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d109      	bne.n	8003f94 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	019b      	lsls	r3, r3, #6
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	621a      	str	r2, [r3, #32]
}
 8003fae:	bf00      	nop
 8003fb0:	371c      	adds	r7, #28
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	40012c00 	.word	0x40012c00
 8003fc0:	40013400 	.word	0x40013400
 8003fc4:	40014000 	.word	0x40014000
 8003fc8:	40014400 	.word	0x40014400
 8003fcc:	40014800 	.word	0x40014800

08003fd0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b087      	sub	sp, #28
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ffe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004002:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	4313      	orrs	r3, r2
 800400c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004014:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	041b      	lsls	r3, r3, #16
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	4313      	orrs	r3, r2
 8004020:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a17      	ldr	r2, [pc, #92]	@ (8004084 <TIM_OC5_SetConfig+0xb4>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d00f      	beq.n	800404a <TIM_OC5_SetConfig+0x7a>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a16      	ldr	r2, [pc, #88]	@ (8004088 <TIM_OC5_SetConfig+0xb8>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d00b      	beq.n	800404a <TIM_OC5_SetConfig+0x7a>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a15      	ldr	r2, [pc, #84]	@ (800408c <TIM_OC5_SetConfig+0xbc>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d007      	beq.n	800404a <TIM_OC5_SetConfig+0x7a>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a14      	ldr	r2, [pc, #80]	@ (8004090 <TIM_OC5_SetConfig+0xc0>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d003      	beq.n	800404a <TIM_OC5_SetConfig+0x7a>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a13      	ldr	r2, [pc, #76]	@ (8004094 <TIM_OC5_SetConfig+0xc4>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d109      	bne.n	800405e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004050:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	021b      	lsls	r3, r3, #8
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	4313      	orrs	r3, r2
 800405c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	621a      	str	r2, [r3, #32]
}
 8004078:	bf00      	nop
 800407a:	371c      	adds	r7, #28
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	40012c00 	.word	0x40012c00
 8004088:	40013400 	.word	0x40013400
 800408c:	40014000 	.word	0x40014000
 8004090:	40014400 	.word	0x40014400
 8004094:	40014800 	.word	0x40014800

08004098 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004098:	b480      	push	{r7}
 800409a:	b087      	sub	sp, #28
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a1b      	ldr	r3, [r3, #32]
 80040ac:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	021b      	lsls	r3, r3, #8
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80040de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	051b      	lsls	r3, r3, #20
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a18      	ldr	r2, [pc, #96]	@ (8004150 <TIM_OC6_SetConfig+0xb8>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d00f      	beq.n	8004114 <TIM_OC6_SetConfig+0x7c>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a17      	ldr	r2, [pc, #92]	@ (8004154 <TIM_OC6_SetConfig+0xbc>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d00b      	beq.n	8004114 <TIM_OC6_SetConfig+0x7c>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a16      	ldr	r2, [pc, #88]	@ (8004158 <TIM_OC6_SetConfig+0xc0>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d007      	beq.n	8004114 <TIM_OC6_SetConfig+0x7c>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a15      	ldr	r2, [pc, #84]	@ (800415c <TIM_OC6_SetConfig+0xc4>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d003      	beq.n	8004114 <TIM_OC6_SetConfig+0x7c>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a14      	ldr	r2, [pc, #80]	@ (8004160 <TIM_OC6_SetConfig+0xc8>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d109      	bne.n	8004128 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800411a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	029b      	lsls	r3, r3, #10
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	4313      	orrs	r3, r2
 8004126:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	621a      	str	r2, [r3, #32]
}
 8004142:	bf00      	nop
 8004144:	371c      	adds	r7, #28
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	40012c00 	.word	0x40012c00
 8004154:	40013400 	.word	0x40013400
 8004158:	40014000 	.word	0x40014000
 800415c:	40014400 	.word	0x40014400
 8004160:	40014800 	.word	0x40014800

08004164 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004174:	2b01      	cmp	r3, #1
 8004176:	d101      	bne.n	800417c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004178:	2302      	movs	r3, #2
 800417a:	e063      	b.n	8004244 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2202      	movs	r2, #2
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a2b      	ldr	r2, [pc, #172]	@ (8004250 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d004      	beq.n	80041b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a2a      	ldr	r2, [pc, #168]	@ (8004254 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d108      	bne.n	80041c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80041b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	4313      	orrs	r3, r2
 80041c0:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a1b      	ldr	r2, [pc, #108]	@ (8004250 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d018      	beq.n	8004218 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041ee:	d013      	beq.n	8004218 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a18      	ldr	r2, [pc, #96]	@ (8004258 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d00e      	beq.n	8004218 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a17      	ldr	r2, [pc, #92]	@ (800425c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d009      	beq.n	8004218 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a12      	ldr	r2, [pc, #72]	@ (8004254 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d004      	beq.n	8004218 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a13      	ldr	r2, [pc, #76]	@ (8004260 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d10c      	bne.n	8004232 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800421e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	4313      	orrs	r3, r2
 8004228:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3714      	adds	r7, #20
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr
 8004250:	40012c00 	.word	0x40012c00
 8004254:	40013400 	.word	0x40013400
 8004258:	40000400 	.word	0x40000400
 800425c:	40000800 	.word	0x40000800
 8004260:	40014000 	.word	0x40014000

08004264 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800426e:	2300      	movs	r3, #0
 8004270:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004278:	2b01      	cmp	r3, #1
 800427a:	d101      	bne.n	8004280 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800427c:	2302      	movs	r3, #2
 800427e:	e065      	b.n	800434c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	4313      	orrs	r3, r2
 8004294:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4313      	orrs	r3, r2
 80042be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	4313      	orrs	r3, r2
 80042da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042e6:	4313      	orrs	r3, r2
 80042e8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	041b      	lsls	r3, r3, #16
 80042f6:	4313      	orrs	r3, r2
 80042f8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a16      	ldr	r2, [pc, #88]	@ (8004358 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d004      	beq.n	800430e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a14      	ldr	r2, [pc, #80]	@ (800435c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d115      	bne.n	800433a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004318:	051b      	lsls	r3, r3, #20
 800431a:	4313      	orrs	r3, r2
 800431c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	4313      	orrs	r3, r2
 800432a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	4313      	orrs	r3, r2
 8004338:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3714      	adds	r7, #20
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	40012c00 	.word	0x40012c00
 800435c:	40013400 	.word	0x40013400

08004360 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e040      	b.n	80043f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004376:	2b00      	cmp	r3, #0
 8004378:	d106      	bne.n	8004388 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7fd f864 	bl	8001450 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2224      	movs	r2, #36	@ 0x24
 800438c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 0201 	bic.w	r2, r2, #1
 800439c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d002      	beq.n	80043ac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 fb3c 	bl	8004a24 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 f965 	bl	800467c <UART_SetConfig>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d101      	bne.n	80043bc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e01b      	b.n	80043f4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685a      	ldr	r2, [r3, #4]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689a      	ldr	r2, [r3, #8]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80043da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f042 0201 	orr.w	r2, r2, #1
 80043ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 fbbb 	bl	8004b68 <UART_CheckIdleState>
 80043f2:	4603      	mov	r3, r0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3708      	adds	r7, #8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b08a      	sub	sp, #40	@ 0x28
 8004400:	af02      	add	r7, sp, #8
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	603b      	str	r3, [r7, #0]
 8004408:	4613      	mov	r3, r2
 800440a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004410:	2b20      	cmp	r3, #32
 8004412:	d177      	bne.n	8004504 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d002      	beq.n	8004420 <HAL_UART_Transmit+0x24>
 800441a:	88fb      	ldrh	r3, [r7, #6]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e070      	b.n	8004506 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2221      	movs	r2, #33	@ 0x21
 8004430:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004432:	f7fd fa0d 	bl	8001850 <HAL_GetTick>
 8004436:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	88fa      	ldrh	r2, [r7, #6]
 800443c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	88fa      	ldrh	r2, [r7, #6]
 8004444:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004450:	d108      	bne.n	8004464 <HAL_UART_Transmit+0x68>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d104      	bne.n	8004464 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800445a:	2300      	movs	r3, #0
 800445c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	61bb      	str	r3, [r7, #24]
 8004462:	e003      	b.n	800446c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004468:	2300      	movs	r3, #0
 800446a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800446c:	e02f      	b.n	80044ce <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	9300      	str	r3, [sp, #0]
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	2200      	movs	r2, #0
 8004476:	2180      	movs	r1, #128	@ 0x80
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f000 fc1d 	bl	8004cb8 <UART_WaitOnFlagUntilTimeout>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d004      	beq.n	800448e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2220      	movs	r2, #32
 8004488:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e03b      	b.n	8004506 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d10b      	bne.n	80044ac <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	881a      	ldrh	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044a0:	b292      	uxth	r2, r2
 80044a2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	3302      	adds	r3, #2
 80044a8:	61bb      	str	r3, [r7, #24]
 80044aa:	e007      	b.n	80044bc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	781a      	ldrb	r2, [r3, #0]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	3301      	adds	r3, #1
 80044ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	3b01      	subs	r3, #1
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1c9      	bne.n	800446e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	9300      	str	r3, [sp, #0]
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	2200      	movs	r2, #0
 80044e2:	2140      	movs	r1, #64	@ 0x40
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 fbe7 	bl	8004cb8 <UART_WaitOnFlagUntilTimeout>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d004      	beq.n	80044fa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2220      	movs	r2, #32
 80044f4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e005      	b.n	8004506 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2220      	movs	r2, #32
 80044fe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004500:	2300      	movs	r3, #0
 8004502:	e000      	b.n	8004506 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004504:	2302      	movs	r3, #2
  }
}
 8004506:	4618      	mov	r0, r3
 8004508:	3720      	adds	r7, #32
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b08a      	sub	sp, #40	@ 0x28
 8004512:	af02      	add	r7, sp, #8
 8004514:	60f8      	str	r0, [r7, #12]
 8004516:	60b9      	str	r1, [r7, #8]
 8004518:	603b      	str	r3, [r7, #0]
 800451a:	4613      	mov	r3, r2
 800451c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004524:	2b20      	cmp	r3, #32
 8004526:	f040 80a3 	bne.w	8004670 <HAL_UART_Receive+0x162>
  {
    if ((pData == NULL) || (Size == 0U))
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d002      	beq.n	8004536 <HAL_UART_Receive+0x28>
 8004530:	88fb      	ldrh	r3, [r7, #6]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e09b      	b.n	8004672 <HAL_UART_Receive+0x164>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2222      	movs	r2, #34	@ 0x22
 8004546:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004550:	f7fd f97e 	bl	8001850 <HAL_GetTick>
 8004554:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	88fa      	ldrh	r2, [r7, #6]
 800455a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	88fa      	ldrh	r2, [r7, #6]
 8004562:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800456e:	d10e      	bne.n	800458e <HAL_UART_Receive+0x80>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d105      	bne.n	8004584 <HAL_UART_Receive+0x76>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800457e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004582:	e01a      	b.n	80045ba <HAL_UART_Receive+0xac>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	22ff      	movs	r2, #255	@ 0xff
 8004588:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800458c:	e015      	b.n	80045ba <HAL_UART_Receive+0xac>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10d      	bne.n	80045b2 <HAL_UART_Receive+0xa4>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d104      	bne.n	80045a8 <HAL_UART_Receive+0x9a>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	22ff      	movs	r2, #255	@ 0xff
 80045a2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80045a6:	e008      	b.n	80045ba <HAL_UART_Receive+0xac>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	227f      	movs	r2, #127	@ 0x7f
 80045ac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80045b0:	e003      	b.n	80045ba <HAL_UART_Receive+0xac>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80045c0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045ca:	d108      	bne.n	80045de <HAL_UART_Receive+0xd0>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d104      	bne.n	80045de <HAL_UART_Receive+0xd0>
    {
      pdata8bits  = NULL;
 80045d4:	2300      	movs	r3, #0
 80045d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	61bb      	str	r3, [r7, #24]
 80045dc:	e003      	b.n	80045e6 <HAL_UART_Receive+0xd8>
    }
    else
    {
      pdata8bits  = pData;
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045e2:	2300      	movs	r3, #0
 80045e4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80045e6:	e037      	b.n	8004658 <HAL_UART_Receive+0x14a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	2200      	movs	r2, #0
 80045f0:	2120      	movs	r1, #32
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f000 fb60 	bl	8004cb8 <UART_WaitOnFlagUntilTimeout>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d005      	beq.n	800460a <HAL_UART_Receive+0xfc>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2220      	movs	r2, #32
 8004602:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e033      	b.n	8004672 <HAL_UART_Receive+0x164>
      }
      if (pdata8bits == NULL)
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10c      	bne.n	800462a <HAL_UART_Receive+0x11c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004616:	b29a      	uxth	r2, r3
 8004618:	8a7b      	ldrh	r3, [r7, #18]
 800461a:	4013      	ands	r3, r2
 800461c:	b29a      	uxth	r2, r3
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	3302      	adds	r3, #2
 8004626:	61bb      	str	r3, [r7, #24]
 8004628:	e00d      	b.n	8004646 <HAL_UART_Receive+0x138>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004630:	b29b      	uxth	r3, r3
 8004632:	b2da      	uxtb	r2, r3
 8004634:	8a7b      	ldrh	r3, [r7, #18]
 8004636:	b2db      	uxtb	r3, r3
 8004638:	4013      	ands	r3, r2
 800463a:	b2da      	uxtb	r2, r3
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	3301      	adds	r3, #1
 8004644:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800464c:	b29b      	uxth	r3, r3
 800464e:	3b01      	subs	r3, #1
 8004650:	b29a      	uxth	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800465e:	b29b      	uxth	r3, r3
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1c1      	bne.n	80045e8 <HAL_UART_Receive+0xda>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2220      	movs	r2, #32
 8004668:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800466c:	2300      	movs	r3, #0
 800466e:	e000      	b.n	8004672 <HAL_UART_Receive+0x164>
  }
  else
  {
    return HAL_BUSY;
 8004670:	2302      	movs	r3, #2
  }
}
 8004672:	4618      	mov	r0, r3
 8004674:	3720      	adds	r7, #32
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
	...

0800467c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b088      	sub	sp, #32
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004684:	2300      	movs	r3, #0
 8004686:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689a      	ldr	r2, [r3, #8]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	431a      	orrs	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	431a      	orrs	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	69db      	ldr	r3, [r3, #28]
 800469c:	4313      	orrs	r3, r2
 800469e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80046aa:	f023 030c 	bic.w	r3, r3, #12
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	6812      	ldr	r2, [r2, #0]
 80046b2:	6979      	ldr	r1, [r7, #20]
 80046b4:	430b      	orrs	r3, r1
 80046b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68da      	ldr	r2, [r3, #12]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a1b      	ldr	r3, [r3, #32]
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	4313      	orrs	r3, r2
 80046dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4aa7      	ldr	r2, [pc, #668]	@ (8004994 <UART_SetConfig+0x318>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d120      	bne.n	800473e <UART_SetConfig+0xc2>
 80046fc:	4ba6      	ldr	r3, [pc, #664]	@ (8004998 <UART_SetConfig+0x31c>)
 80046fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004700:	f003 0303 	and.w	r3, r3, #3
 8004704:	2b03      	cmp	r3, #3
 8004706:	d817      	bhi.n	8004738 <UART_SetConfig+0xbc>
 8004708:	a201      	add	r2, pc, #4	@ (adr r2, 8004710 <UART_SetConfig+0x94>)
 800470a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470e:	bf00      	nop
 8004710:	08004721 	.word	0x08004721
 8004714:	0800472d 	.word	0x0800472d
 8004718:	08004733 	.word	0x08004733
 800471c:	08004727 	.word	0x08004727
 8004720:	2301      	movs	r3, #1
 8004722:	77fb      	strb	r3, [r7, #31]
 8004724:	e0b5      	b.n	8004892 <UART_SetConfig+0x216>
 8004726:	2302      	movs	r3, #2
 8004728:	77fb      	strb	r3, [r7, #31]
 800472a:	e0b2      	b.n	8004892 <UART_SetConfig+0x216>
 800472c:	2304      	movs	r3, #4
 800472e:	77fb      	strb	r3, [r7, #31]
 8004730:	e0af      	b.n	8004892 <UART_SetConfig+0x216>
 8004732:	2308      	movs	r3, #8
 8004734:	77fb      	strb	r3, [r7, #31]
 8004736:	e0ac      	b.n	8004892 <UART_SetConfig+0x216>
 8004738:	2310      	movs	r3, #16
 800473a:	77fb      	strb	r3, [r7, #31]
 800473c:	e0a9      	b.n	8004892 <UART_SetConfig+0x216>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a96      	ldr	r2, [pc, #600]	@ (800499c <UART_SetConfig+0x320>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d124      	bne.n	8004792 <UART_SetConfig+0x116>
 8004748:	4b93      	ldr	r3, [pc, #588]	@ (8004998 <UART_SetConfig+0x31c>)
 800474a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800474c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004750:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004754:	d011      	beq.n	800477a <UART_SetConfig+0xfe>
 8004756:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800475a:	d817      	bhi.n	800478c <UART_SetConfig+0x110>
 800475c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004760:	d011      	beq.n	8004786 <UART_SetConfig+0x10a>
 8004762:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004766:	d811      	bhi.n	800478c <UART_SetConfig+0x110>
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <UART_SetConfig+0xf8>
 800476c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004770:	d006      	beq.n	8004780 <UART_SetConfig+0x104>
 8004772:	e00b      	b.n	800478c <UART_SetConfig+0x110>
 8004774:	2300      	movs	r3, #0
 8004776:	77fb      	strb	r3, [r7, #31]
 8004778:	e08b      	b.n	8004892 <UART_SetConfig+0x216>
 800477a:	2302      	movs	r3, #2
 800477c:	77fb      	strb	r3, [r7, #31]
 800477e:	e088      	b.n	8004892 <UART_SetConfig+0x216>
 8004780:	2304      	movs	r3, #4
 8004782:	77fb      	strb	r3, [r7, #31]
 8004784:	e085      	b.n	8004892 <UART_SetConfig+0x216>
 8004786:	2308      	movs	r3, #8
 8004788:	77fb      	strb	r3, [r7, #31]
 800478a:	e082      	b.n	8004892 <UART_SetConfig+0x216>
 800478c:	2310      	movs	r3, #16
 800478e:	77fb      	strb	r3, [r7, #31]
 8004790:	e07f      	b.n	8004892 <UART_SetConfig+0x216>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a82      	ldr	r2, [pc, #520]	@ (80049a0 <UART_SetConfig+0x324>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d124      	bne.n	80047e6 <UART_SetConfig+0x16a>
 800479c:	4b7e      	ldr	r3, [pc, #504]	@ (8004998 <UART_SetConfig+0x31c>)
 800479e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047a0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80047a4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80047a8:	d011      	beq.n	80047ce <UART_SetConfig+0x152>
 80047aa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80047ae:	d817      	bhi.n	80047e0 <UART_SetConfig+0x164>
 80047b0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80047b4:	d011      	beq.n	80047da <UART_SetConfig+0x15e>
 80047b6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80047ba:	d811      	bhi.n	80047e0 <UART_SetConfig+0x164>
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d003      	beq.n	80047c8 <UART_SetConfig+0x14c>
 80047c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80047c4:	d006      	beq.n	80047d4 <UART_SetConfig+0x158>
 80047c6:	e00b      	b.n	80047e0 <UART_SetConfig+0x164>
 80047c8:	2300      	movs	r3, #0
 80047ca:	77fb      	strb	r3, [r7, #31]
 80047cc:	e061      	b.n	8004892 <UART_SetConfig+0x216>
 80047ce:	2302      	movs	r3, #2
 80047d0:	77fb      	strb	r3, [r7, #31]
 80047d2:	e05e      	b.n	8004892 <UART_SetConfig+0x216>
 80047d4:	2304      	movs	r3, #4
 80047d6:	77fb      	strb	r3, [r7, #31]
 80047d8:	e05b      	b.n	8004892 <UART_SetConfig+0x216>
 80047da:	2308      	movs	r3, #8
 80047dc:	77fb      	strb	r3, [r7, #31]
 80047de:	e058      	b.n	8004892 <UART_SetConfig+0x216>
 80047e0:	2310      	movs	r3, #16
 80047e2:	77fb      	strb	r3, [r7, #31]
 80047e4:	e055      	b.n	8004892 <UART_SetConfig+0x216>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a6e      	ldr	r2, [pc, #440]	@ (80049a4 <UART_SetConfig+0x328>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d124      	bne.n	800483a <UART_SetConfig+0x1be>
 80047f0:	4b69      	ldr	r3, [pc, #420]	@ (8004998 <UART_SetConfig+0x31c>)
 80047f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80047f8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80047fc:	d011      	beq.n	8004822 <UART_SetConfig+0x1a6>
 80047fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004802:	d817      	bhi.n	8004834 <UART_SetConfig+0x1b8>
 8004804:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004808:	d011      	beq.n	800482e <UART_SetConfig+0x1b2>
 800480a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800480e:	d811      	bhi.n	8004834 <UART_SetConfig+0x1b8>
 8004810:	2b00      	cmp	r3, #0
 8004812:	d003      	beq.n	800481c <UART_SetConfig+0x1a0>
 8004814:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004818:	d006      	beq.n	8004828 <UART_SetConfig+0x1ac>
 800481a:	e00b      	b.n	8004834 <UART_SetConfig+0x1b8>
 800481c:	2300      	movs	r3, #0
 800481e:	77fb      	strb	r3, [r7, #31]
 8004820:	e037      	b.n	8004892 <UART_SetConfig+0x216>
 8004822:	2302      	movs	r3, #2
 8004824:	77fb      	strb	r3, [r7, #31]
 8004826:	e034      	b.n	8004892 <UART_SetConfig+0x216>
 8004828:	2304      	movs	r3, #4
 800482a:	77fb      	strb	r3, [r7, #31]
 800482c:	e031      	b.n	8004892 <UART_SetConfig+0x216>
 800482e:	2308      	movs	r3, #8
 8004830:	77fb      	strb	r3, [r7, #31]
 8004832:	e02e      	b.n	8004892 <UART_SetConfig+0x216>
 8004834:	2310      	movs	r3, #16
 8004836:	77fb      	strb	r3, [r7, #31]
 8004838:	e02b      	b.n	8004892 <UART_SetConfig+0x216>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a5a      	ldr	r2, [pc, #360]	@ (80049a8 <UART_SetConfig+0x32c>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d124      	bne.n	800488e <UART_SetConfig+0x212>
 8004844:	4b54      	ldr	r3, [pc, #336]	@ (8004998 <UART_SetConfig+0x31c>)
 8004846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004848:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800484c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004850:	d011      	beq.n	8004876 <UART_SetConfig+0x1fa>
 8004852:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004856:	d817      	bhi.n	8004888 <UART_SetConfig+0x20c>
 8004858:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800485c:	d011      	beq.n	8004882 <UART_SetConfig+0x206>
 800485e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004862:	d811      	bhi.n	8004888 <UART_SetConfig+0x20c>
 8004864:	2b00      	cmp	r3, #0
 8004866:	d003      	beq.n	8004870 <UART_SetConfig+0x1f4>
 8004868:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800486c:	d006      	beq.n	800487c <UART_SetConfig+0x200>
 800486e:	e00b      	b.n	8004888 <UART_SetConfig+0x20c>
 8004870:	2300      	movs	r3, #0
 8004872:	77fb      	strb	r3, [r7, #31]
 8004874:	e00d      	b.n	8004892 <UART_SetConfig+0x216>
 8004876:	2302      	movs	r3, #2
 8004878:	77fb      	strb	r3, [r7, #31]
 800487a:	e00a      	b.n	8004892 <UART_SetConfig+0x216>
 800487c:	2304      	movs	r3, #4
 800487e:	77fb      	strb	r3, [r7, #31]
 8004880:	e007      	b.n	8004892 <UART_SetConfig+0x216>
 8004882:	2308      	movs	r3, #8
 8004884:	77fb      	strb	r3, [r7, #31]
 8004886:	e004      	b.n	8004892 <UART_SetConfig+0x216>
 8004888:	2310      	movs	r3, #16
 800488a:	77fb      	strb	r3, [r7, #31]
 800488c:	e001      	b.n	8004892 <UART_SetConfig+0x216>
 800488e:	2310      	movs	r3, #16
 8004890:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	69db      	ldr	r3, [r3, #28]
 8004896:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800489a:	d15b      	bne.n	8004954 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 800489c:	7ffb      	ldrb	r3, [r7, #31]
 800489e:	2b08      	cmp	r3, #8
 80048a0:	d827      	bhi.n	80048f2 <UART_SetConfig+0x276>
 80048a2:	a201      	add	r2, pc, #4	@ (adr r2, 80048a8 <UART_SetConfig+0x22c>)
 80048a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a8:	080048cd 	.word	0x080048cd
 80048ac:	080048d5 	.word	0x080048d5
 80048b0:	080048dd 	.word	0x080048dd
 80048b4:	080048f3 	.word	0x080048f3
 80048b8:	080048e3 	.word	0x080048e3
 80048bc:	080048f3 	.word	0x080048f3
 80048c0:	080048f3 	.word	0x080048f3
 80048c4:	080048f3 	.word	0x080048f3
 80048c8:	080048eb 	.word	0x080048eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048cc:	f7fe fd78 	bl	80033c0 <HAL_RCC_GetPCLK1Freq>
 80048d0:	61b8      	str	r0, [r7, #24]
        break;
 80048d2:	e013      	b.n	80048fc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048d4:	f7fe fd96 	bl	8003404 <HAL_RCC_GetPCLK2Freq>
 80048d8:	61b8      	str	r0, [r7, #24]
        break;
 80048da:	e00f      	b.n	80048fc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048dc:	4b33      	ldr	r3, [pc, #204]	@ (80049ac <UART_SetConfig+0x330>)
 80048de:	61bb      	str	r3, [r7, #24]
        break;
 80048e0:	e00c      	b.n	80048fc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048e2:	f7fe fd0d 	bl	8003300 <HAL_RCC_GetSysClockFreq>
 80048e6:	61b8      	str	r0, [r7, #24]
        break;
 80048e8:	e008      	b.n	80048fc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048ee:	61bb      	str	r3, [r7, #24]
        break;
 80048f0:	e004      	b.n	80048fc <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80048f2:	2300      	movs	r3, #0
 80048f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	77bb      	strb	r3, [r7, #30]
        break;
 80048fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f000 8082 	beq.w	8004a08 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	005a      	lsls	r2, r3, #1
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	085b      	lsrs	r3, r3, #1
 800490e:	441a      	add	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	fbb2 f3f3 	udiv	r3, r2, r3
 8004918:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	2b0f      	cmp	r3, #15
 800491e:	d916      	bls.n	800494e <UART_SetConfig+0x2d2>
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004926:	d212      	bcs.n	800494e <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	b29b      	uxth	r3, r3
 800492c:	f023 030f 	bic.w	r3, r3, #15
 8004930:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	085b      	lsrs	r3, r3, #1
 8004936:	b29b      	uxth	r3, r3
 8004938:	f003 0307 	and.w	r3, r3, #7
 800493c:	b29a      	uxth	r2, r3
 800493e:	89fb      	ldrh	r3, [r7, #14]
 8004940:	4313      	orrs	r3, r2
 8004942:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	89fa      	ldrh	r2, [r7, #14]
 800494a:	60da      	str	r2, [r3, #12]
 800494c:	e05c      	b.n	8004a08 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	77bb      	strb	r3, [r7, #30]
 8004952:	e059      	b.n	8004a08 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004954:	7ffb      	ldrb	r3, [r7, #31]
 8004956:	2b08      	cmp	r3, #8
 8004958:	d835      	bhi.n	80049c6 <UART_SetConfig+0x34a>
 800495a:	a201      	add	r2, pc, #4	@ (adr r2, 8004960 <UART_SetConfig+0x2e4>)
 800495c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004960:	08004985 	.word	0x08004985
 8004964:	0800498d 	.word	0x0800498d
 8004968:	080049b1 	.word	0x080049b1
 800496c:	080049c7 	.word	0x080049c7
 8004970:	080049b7 	.word	0x080049b7
 8004974:	080049c7 	.word	0x080049c7
 8004978:	080049c7 	.word	0x080049c7
 800497c:	080049c7 	.word	0x080049c7
 8004980:	080049bf 	.word	0x080049bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004984:	f7fe fd1c 	bl	80033c0 <HAL_RCC_GetPCLK1Freq>
 8004988:	61b8      	str	r0, [r7, #24]
        break;
 800498a:	e021      	b.n	80049d0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800498c:	f7fe fd3a 	bl	8003404 <HAL_RCC_GetPCLK2Freq>
 8004990:	61b8      	str	r0, [r7, #24]
        break;
 8004992:	e01d      	b.n	80049d0 <UART_SetConfig+0x354>
 8004994:	40013800 	.word	0x40013800
 8004998:	40021000 	.word	0x40021000
 800499c:	40004400 	.word	0x40004400
 80049a0:	40004800 	.word	0x40004800
 80049a4:	40004c00 	.word	0x40004c00
 80049a8:	40005000 	.word	0x40005000
 80049ac:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004a20 <UART_SetConfig+0x3a4>)
 80049b2:	61bb      	str	r3, [r7, #24]
        break;
 80049b4:	e00c      	b.n	80049d0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049b6:	f7fe fca3 	bl	8003300 <HAL_RCC_GetSysClockFreq>
 80049ba:	61b8      	str	r0, [r7, #24]
        break;
 80049bc:	e008      	b.n	80049d0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049c2:	61bb      	str	r3, [r7, #24]
        break;
 80049c4:	e004      	b.n	80049d0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80049c6:	2300      	movs	r3, #0
 80049c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	77bb      	strb	r3, [r7, #30]
        break;
 80049ce:	bf00      	nop
    }

    if (pclk != 0U)
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d018      	beq.n	8004a08 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	085a      	lsrs	r2, r3, #1
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	441a      	add	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	2b0f      	cmp	r3, #15
 80049ee:	d909      	bls.n	8004a04 <UART_SetConfig+0x388>
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049f6:	d205      	bcs.n	8004a04 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	60da      	str	r2, [r3, #12]
 8004a02:	e001      	b.n	8004a08 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004a14:	7fbb      	ldrb	r3, [r7, #30]
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3720      	adds	r7, #32
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	007a1200 	.word	0x007a1200

08004a24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a30:	f003 0308 	and.w	r3, r3, #8
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00a      	beq.n	8004a4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00a      	beq.n	8004a92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a96:	f003 0304 	and.w	r3, r3, #4
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00a      	beq.n	8004ab4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab8:	f003 0310 	and.w	r3, r3, #16
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00a      	beq.n	8004ad6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ada:	f003 0320 	and.w	r3, r3, #32
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00a      	beq.n	8004af8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004afc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d01a      	beq.n	8004b3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	430a      	orrs	r2, r1
 8004b18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b22:	d10a      	bne.n	8004b3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00a      	beq.n	8004b5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	605a      	str	r2, [r3, #4]
  }
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b098      	sub	sp, #96	@ 0x60
 8004b6c:	af02      	add	r7, sp, #8
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b78:	f7fc fe6a 	bl	8001850 <HAL_GetTick>
 8004b7c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0308 	and.w	r3, r3, #8
 8004b88:	2b08      	cmp	r3, #8
 8004b8a:	d12e      	bne.n	8004bea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b8c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b90:	9300      	str	r3, [sp, #0]
 8004b92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b94:	2200      	movs	r2, #0
 8004b96:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f88c 	bl	8004cb8 <UART_WaitOnFlagUntilTimeout>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d021      	beq.n	8004bea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bae:	e853 3f00 	ldrex	r3, [r3]
 8004bb2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bba:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bc6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004bca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bcc:	e841 2300 	strex	r3, r2, [r1]
 8004bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004bd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1e6      	bne.n	8004ba6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2220      	movs	r2, #32
 8004bdc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e062      	b.n	8004cb0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0304 	and.w	r3, r3, #4
 8004bf4:	2b04      	cmp	r3, #4
 8004bf6:	d149      	bne.n	8004c8c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bf8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c00:	2200      	movs	r2, #0
 8004c02:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f856 	bl	8004cb8 <UART_WaitOnFlagUntilTimeout>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d03c      	beq.n	8004c8c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c1a:	e853 3f00 	ldrex	r3, [r3]
 8004c1e:	623b      	str	r3, [r7, #32]
   return(result);
 8004c20:	6a3b      	ldr	r3, [r7, #32]
 8004c22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c30:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c32:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c34:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c38:	e841 2300 	strex	r3, r2, [r1]
 8004c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1e6      	bne.n	8004c12 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	3308      	adds	r3, #8
 8004c4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	e853 3f00 	ldrex	r3, [r3]
 8004c52:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f023 0301 	bic.w	r3, r3, #1
 8004c5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	3308      	adds	r3, #8
 8004c62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c64:	61fa      	str	r2, [r7, #28]
 8004c66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c68:	69b9      	ldr	r1, [r7, #24]
 8004c6a:	69fa      	ldr	r2, [r7, #28]
 8004c6c:	e841 2300 	strex	r3, r2, [r1]
 8004c70:	617b      	str	r3, [r7, #20]
   return(result);
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1e5      	bne.n	8004c44 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e011      	b.n	8004cb0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2220      	movs	r2, #32
 8004c90:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2220      	movs	r2, #32
 8004c96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3758      	adds	r7, #88	@ 0x58
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	603b      	str	r3, [r7, #0]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cc8:	e04f      	b.n	8004d6a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd0:	d04b      	beq.n	8004d6a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cd2:	f7fc fdbd 	bl	8001850 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d302      	bcc.n	8004ce8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e04e      	b.n	8004d8a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0304 	and.w	r3, r3, #4
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d037      	beq.n	8004d6a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	2b80      	cmp	r3, #128	@ 0x80
 8004cfe:	d034      	beq.n	8004d6a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	2b40      	cmp	r3, #64	@ 0x40
 8004d04:	d031      	beq.n	8004d6a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	69db      	ldr	r3, [r3, #28]
 8004d0c:	f003 0308 	and.w	r3, r3, #8
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d110      	bne.n	8004d36 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2208      	movs	r2, #8
 8004d1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f000 f838 	bl	8004d92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2208      	movs	r2, #8
 8004d26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e029      	b.n	8004d8a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	69db      	ldr	r3, [r3, #28]
 8004d3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d44:	d111      	bne.n	8004d6a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f000 f81e 	bl	8004d92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2220      	movs	r2, #32
 8004d5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e00f      	b.n	8004d8a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	69da      	ldr	r2, [r3, #28]
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	4013      	ands	r3, r2
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	bf0c      	ite	eq
 8004d7a:	2301      	moveq	r3, #1
 8004d7c:	2300      	movne	r3, #0
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	461a      	mov	r2, r3
 8004d82:	79fb      	ldrb	r3, [r7, #7]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d0a0      	beq.n	8004cca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b095      	sub	sp, #84	@ 0x54
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004da2:	e853 3f00 	ldrex	r3, [r3]
 8004da6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004daa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004dae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	461a      	mov	r2, r3
 8004db6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004db8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004dba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dbc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004dbe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004dc0:	e841 2300 	strex	r3, r2, [r1]
 8004dc4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1e6      	bne.n	8004d9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	3308      	adds	r3, #8
 8004dd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd4:	6a3b      	ldr	r3, [r7, #32]
 8004dd6:	e853 3f00 	ldrex	r3, [r3]
 8004dda:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	f023 0301 	bic.w	r3, r3, #1
 8004de2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	3308      	adds	r3, #8
 8004dea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004dec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004dee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004df2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004df4:	e841 2300 	strex	r3, r2, [r1]
 8004df8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1e5      	bne.n	8004dcc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d118      	bne.n	8004e3a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	e853 3f00 	ldrex	r3, [r3]
 8004e14:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	f023 0310 	bic.w	r3, r3, #16
 8004e1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	461a      	mov	r2, r3
 8004e24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e26:	61bb      	str	r3, [r7, #24]
 8004e28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2a:	6979      	ldr	r1, [r7, #20]
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	e841 2300 	strex	r3, r2, [r1]
 8004e32:	613b      	str	r3, [r7, #16]
   return(result);
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1e6      	bne.n	8004e08 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004e4e:	bf00      	nop
 8004e50:	3754      	adds	r7, #84	@ 0x54
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <__cvt>:
 8004e5a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e5e:	ec57 6b10 	vmov	r6, r7, d0
 8004e62:	2f00      	cmp	r7, #0
 8004e64:	460c      	mov	r4, r1
 8004e66:	4619      	mov	r1, r3
 8004e68:	463b      	mov	r3, r7
 8004e6a:	bfbb      	ittet	lt
 8004e6c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004e70:	461f      	movlt	r7, r3
 8004e72:	2300      	movge	r3, #0
 8004e74:	232d      	movlt	r3, #45	@ 0x2d
 8004e76:	700b      	strb	r3, [r1, #0]
 8004e78:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e7a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004e7e:	4691      	mov	r9, r2
 8004e80:	f023 0820 	bic.w	r8, r3, #32
 8004e84:	bfbc      	itt	lt
 8004e86:	4632      	movlt	r2, r6
 8004e88:	4616      	movlt	r6, r2
 8004e8a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004e8e:	d005      	beq.n	8004e9c <__cvt+0x42>
 8004e90:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004e94:	d100      	bne.n	8004e98 <__cvt+0x3e>
 8004e96:	3401      	adds	r4, #1
 8004e98:	2102      	movs	r1, #2
 8004e9a:	e000      	b.n	8004e9e <__cvt+0x44>
 8004e9c:	2103      	movs	r1, #3
 8004e9e:	ab03      	add	r3, sp, #12
 8004ea0:	9301      	str	r3, [sp, #4]
 8004ea2:	ab02      	add	r3, sp, #8
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	ec47 6b10 	vmov	d0, r6, r7
 8004eaa:	4653      	mov	r3, sl
 8004eac:	4622      	mov	r2, r4
 8004eae:	f001 f873 	bl	8005f98 <_dtoa_r>
 8004eb2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004eb6:	4605      	mov	r5, r0
 8004eb8:	d119      	bne.n	8004eee <__cvt+0x94>
 8004eba:	f019 0f01 	tst.w	r9, #1
 8004ebe:	d00e      	beq.n	8004ede <__cvt+0x84>
 8004ec0:	eb00 0904 	add.w	r9, r0, r4
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	4630      	mov	r0, r6
 8004eca:	4639      	mov	r1, r7
 8004ecc:	f7fb fdfc 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ed0:	b108      	cbz	r0, 8004ed6 <__cvt+0x7c>
 8004ed2:	f8cd 900c 	str.w	r9, [sp, #12]
 8004ed6:	2230      	movs	r2, #48	@ 0x30
 8004ed8:	9b03      	ldr	r3, [sp, #12]
 8004eda:	454b      	cmp	r3, r9
 8004edc:	d31e      	bcc.n	8004f1c <__cvt+0xc2>
 8004ede:	9b03      	ldr	r3, [sp, #12]
 8004ee0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004ee2:	1b5b      	subs	r3, r3, r5
 8004ee4:	4628      	mov	r0, r5
 8004ee6:	6013      	str	r3, [r2, #0]
 8004ee8:	b004      	add	sp, #16
 8004eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eee:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004ef2:	eb00 0904 	add.w	r9, r0, r4
 8004ef6:	d1e5      	bne.n	8004ec4 <__cvt+0x6a>
 8004ef8:	7803      	ldrb	r3, [r0, #0]
 8004efa:	2b30      	cmp	r3, #48	@ 0x30
 8004efc:	d10a      	bne.n	8004f14 <__cvt+0xba>
 8004efe:	2200      	movs	r2, #0
 8004f00:	2300      	movs	r3, #0
 8004f02:	4630      	mov	r0, r6
 8004f04:	4639      	mov	r1, r7
 8004f06:	f7fb fddf 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f0a:	b918      	cbnz	r0, 8004f14 <__cvt+0xba>
 8004f0c:	f1c4 0401 	rsb	r4, r4, #1
 8004f10:	f8ca 4000 	str.w	r4, [sl]
 8004f14:	f8da 3000 	ldr.w	r3, [sl]
 8004f18:	4499      	add	r9, r3
 8004f1a:	e7d3      	b.n	8004ec4 <__cvt+0x6a>
 8004f1c:	1c59      	adds	r1, r3, #1
 8004f1e:	9103      	str	r1, [sp, #12]
 8004f20:	701a      	strb	r2, [r3, #0]
 8004f22:	e7d9      	b.n	8004ed8 <__cvt+0x7e>

08004f24 <__exponent>:
 8004f24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f26:	2900      	cmp	r1, #0
 8004f28:	bfba      	itte	lt
 8004f2a:	4249      	neglt	r1, r1
 8004f2c:	232d      	movlt	r3, #45	@ 0x2d
 8004f2e:	232b      	movge	r3, #43	@ 0x2b
 8004f30:	2909      	cmp	r1, #9
 8004f32:	7002      	strb	r2, [r0, #0]
 8004f34:	7043      	strb	r3, [r0, #1]
 8004f36:	dd29      	ble.n	8004f8c <__exponent+0x68>
 8004f38:	f10d 0307 	add.w	r3, sp, #7
 8004f3c:	461d      	mov	r5, r3
 8004f3e:	270a      	movs	r7, #10
 8004f40:	461a      	mov	r2, r3
 8004f42:	fbb1 f6f7 	udiv	r6, r1, r7
 8004f46:	fb07 1416 	mls	r4, r7, r6, r1
 8004f4a:	3430      	adds	r4, #48	@ 0x30
 8004f4c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004f50:	460c      	mov	r4, r1
 8004f52:	2c63      	cmp	r4, #99	@ 0x63
 8004f54:	f103 33ff 	add.w	r3, r3, #4294967295
 8004f58:	4631      	mov	r1, r6
 8004f5a:	dcf1      	bgt.n	8004f40 <__exponent+0x1c>
 8004f5c:	3130      	adds	r1, #48	@ 0x30
 8004f5e:	1e94      	subs	r4, r2, #2
 8004f60:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004f64:	1c41      	adds	r1, r0, #1
 8004f66:	4623      	mov	r3, r4
 8004f68:	42ab      	cmp	r3, r5
 8004f6a:	d30a      	bcc.n	8004f82 <__exponent+0x5e>
 8004f6c:	f10d 0309 	add.w	r3, sp, #9
 8004f70:	1a9b      	subs	r3, r3, r2
 8004f72:	42ac      	cmp	r4, r5
 8004f74:	bf88      	it	hi
 8004f76:	2300      	movhi	r3, #0
 8004f78:	3302      	adds	r3, #2
 8004f7a:	4403      	add	r3, r0
 8004f7c:	1a18      	subs	r0, r3, r0
 8004f7e:	b003      	add	sp, #12
 8004f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f82:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004f86:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004f8a:	e7ed      	b.n	8004f68 <__exponent+0x44>
 8004f8c:	2330      	movs	r3, #48	@ 0x30
 8004f8e:	3130      	adds	r1, #48	@ 0x30
 8004f90:	7083      	strb	r3, [r0, #2]
 8004f92:	70c1      	strb	r1, [r0, #3]
 8004f94:	1d03      	adds	r3, r0, #4
 8004f96:	e7f1      	b.n	8004f7c <__exponent+0x58>

08004f98 <_printf_float>:
 8004f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f9c:	b08d      	sub	sp, #52	@ 0x34
 8004f9e:	460c      	mov	r4, r1
 8004fa0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004fa4:	4616      	mov	r6, r2
 8004fa6:	461f      	mov	r7, r3
 8004fa8:	4605      	mov	r5, r0
 8004faa:	f000 feef 	bl	8005d8c <_localeconv_r>
 8004fae:	6803      	ldr	r3, [r0, #0]
 8004fb0:	9304      	str	r3, [sp, #16]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7fb f95c 	bl	8000270 <strlen>
 8004fb8:	2300      	movs	r3, #0
 8004fba:	930a      	str	r3, [sp, #40]	@ 0x28
 8004fbc:	f8d8 3000 	ldr.w	r3, [r8]
 8004fc0:	9005      	str	r0, [sp, #20]
 8004fc2:	3307      	adds	r3, #7
 8004fc4:	f023 0307 	bic.w	r3, r3, #7
 8004fc8:	f103 0208 	add.w	r2, r3, #8
 8004fcc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004fd0:	f8d4 b000 	ldr.w	fp, [r4]
 8004fd4:	f8c8 2000 	str.w	r2, [r8]
 8004fd8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004fdc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004fe0:	9307      	str	r3, [sp, #28]
 8004fe2:	f8cd 8018 	str.w	r8, [sp, #24]
 8004fe6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004fea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004fee:	4b9c      	ldr	r3, [pc, #624]	@ (8005260 <_printf_float+0x2c8>)
 8004ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ff4:	f7fb fd9a 	bl	8000b2c <__aeabi_dcmpun>
 8004ff8:	bb70      	cbnz	r0, 8005058 <_printf_float+0xc0>
 8004ffa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ffe:	4b98      	ldr	r3, [pc, #608]	@ (8005260 <_printf_float+0x2c8>)
 8005000:	f04f 32ff 	mov.w	r2, #4294967295
 8005004:	f7fb fd74 	bl	8000af0 <__aeabi_dcmple>
 8005008:	bb30      	cbnz	r0, 8005058 <_printf_float+0xc0>
 800500a:	2200      	movs	r2, #0
 800500c:	2300      	movs	r3, #0
 800500e:	4640      	mov	r0, r8
 8005010:	4649      	mov	r1, r9
 8005012:	f7fb fd63 	bl	8000adc <__aeabi_dcmplt>
 8005016:	b110      	cbz	r0, 800501e <_printf_float+0x86>
 8005018:	232d      	movs	r3, #45	@ 0x2d
 800501a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800501e:	4a91      	ldr	r2, [pc, #580]	@ (8005264 <_printf_float+0x2cc>)
 8005020:	4b91      	ldr	r3, [pc, #580]	@ (8005268 <_printf_float+0x2d0>)
 8005022:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005026:	bf94      	ite	ls
 8005028:	4690      	movls	r8, r2
 800502a:	4698      	movhi	r8, r3
 800502c:	2303      	movs	r3, #3
 800502e:	6123      	str	r3, [r4, #16]
 8005030:	f02b 0304 	bic.w	r3, fp, #4
 8005034:	6023      	str	r3, [r4, #0]
 8005036:	f04f 0900 	mov.w	r9, #0
 800503a:	9700      	str	r7, [sp, #0]
 800503c:	4633      	mov	r3, r6
 800503e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005040:	4621      	mov	r1, r4
 8005042:	4628      	mov	r0, r5
 8005044:	f000 f9d2 	bl	80053ec <_printf_common>
 8005048:	3001      	adds	r0, #1
 800504a:	f040 808d 	bne.w	8005168 <_printf_float+0x1d0>
 800504e:	f04f 30ff 	mov.w	r0, #4294967295
 8005052:	b00d      	add	sp, #52	@ 0x34
 8005054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005058:	4642      	mov	r2, r8
 800505a:	464b      	mov	r3, r9
 800505c:	4640      	mov	r0, r8
 800505e:	4649      	mov	r1, r9
 8005060:	f7fb fd64 	bl	8000b2c <__aeabi_dcmpun>
 8005064:	b140      	cbz	r0, 8005078 <_printf_float+0xe0>
 8005066:	464b      	mov	r3, r9
 8005068:	2b00      	cmp	r3, #0
 800506a:	bfbc      	itt	lt
 800506c:	232d      	movlt	r3, #45	@ 0x2d
 800506e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005072:	4a7e      	ldr	r2, [pc, #504]	@ (800526c <_printf_float+0x2d4>)
 8005074:	4b7e      	ldr	r3, [pc, #504]	@ (8005270 <_printf_float+0x2d8>)
 8005076:	e7d4      	b.n	8005022 <_printf_float+0x8a>
 8005078:	6863      	ldr	r3, [r4, #4]
 800507a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800507e:	9206      	str	r2, [sp, #24]
 8005080:	1c5a      	adds	r2, r3, #1
 8005082:	d13b      	bne.n	80050fc <_printf_float+0x164>
 8005084:	2306      	movs	r3, #6
 8005086:	6063      	str	r3, [r4, #4]
 8005088:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800508c:	2300      	movs	r3, #0
 800508e:	6022      	str	r2, [r4, #0]
 8005090:	9303      	str	r3, [sp, #12]
 8005092:	ab0a      	add	r3, sp, #40	@ 0x28
 8005094:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005098:	ab09      	add	r3, sp, #36	@ 0x24
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	6861      	ldr	r1, [r4, #4]
 800509e:	ec49 8b10 	vmov	d0, r8, r9
 80050a2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80050a6:	4628      	mov	r0, r5
 80050a8:	f7ff fed7 	bl	8004e5a <__cvt>
 80050ac:	9b06      	ldr	r3, [sp, #24]
 80050ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80050b0:	2b47      	cmp	r3, #71	@ 0x47
 80050b2:	4680      	mov	r8, r0
 80050b4:	d129      	bne.n	800510a <_printf_float+0x172>
 80050b6:	1cc8      	adds	r0, r1, #3
 80050b8:	db02      	blt.n	80050c0 <_printf_float+0x128>
 80050ba:	6863      	ldr	r3, [r4, #4]
 80050bc:	4299      	cmp	r1, r3
 80050be:	dd41      	ble.n	8005144 <_printf_float+0x1ac>
 80050c0:	f1aa 0a02 	sub.w	sl, sl, #2
 80050c4:	fa5f fa8a 	uxtb.w	sl, sl
 80050c8:	3901      	subs	r1, #1
 80050ca:	4652      	mov	r2, sl
 80050cc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80050d0:	9109      	str	r1, [sp, #36]	@ 0x24
 80050d2:	f7ff ff27 	bl	8004f24 <__exponent>
 80050d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80050d8:	1813      	adds	r3, r2, r0
 80050da:	2a01      	cmp	r2, #1
 80050dc:	4681      	mov	r9, r0
 80050de:	6123      	str	r3, [r4, #16]
 80050e0:	dc02      	bgt.n	80050e8 <_printf_float+0x150>
 80050e2:	6822      	ldr	r2, [r4, #0]
 80050e4:	07d2      	lsls	r2, r2, #31
 80050e6:	d501      	bpl.n	80050ec <_printf_float+0x154>
 80050e8:	3301      	adds	r3, #1
 80050ea:	6123      	str	r3, [r4, #16]
 80050ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d0a2      	beq.n	800503a <_printf_float+0xa2>
 80050f4:	232d      	movs	r3, #45	@ 0x2d
 80050f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050fa:	e79e      	b.n	800503a <_printf_float+0xa2>
 80050fc:	9a06      	ldr	r2, [sp, #24]
 80050fe:	2a47      	cmp	r2, #71	@ 0x47
 8005100:	d1c2      	bne.n	8005088 <_printf_float+0xf0>
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1c0      	bne.n	8005088 <_printf_float+0xf0>
 8005106:	2301      	movs	r3, #1
 8005108:	e7bd      	b.n	8005086 <_printf_float+0xee>
 800510a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800510e:	d9db      	bls.n	80050c8 <_printf_float+0x130>
 8005110:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005114:	d118      	bne.n	8005148 <_printf_float+0x1b0>
 8005116:	2900      	cmp	r1, #0
 8005118:	6863      	ldr	r3, [r4, #4]
 800511a:	dd0b      	ble.n	8005134 <_printf_float+0x19c>
 800511c:	6121      	str	r1, [r4, #16]
 800511e:	b913      	cbnz	r3, 8005126 <_printf_float+0x18e>
 8005120:	6822      	ldr	r2, [r4, #0]
 8005122:	07d0      	lsls	r0, r2, #31
 8005124:	d502      	bpl.n	800512c <_printf_float+0x194>
 8005126:	3301      	adds	r3, #1
 8005128:	440b      	add	r3, r1
 800512a:	6123      	str	r3, [r4, #16]
 800512c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800512e:	f04f 0900 	mov.w	r9, #0
 8005132:	e7db      	b.n	80050ec <_printf_float+0x154>
 8005134:	b913      	cbnz	r3, 800513c <_printf_float+0x1a4>
 8005136:	6822      	ldr	r2, [r4, #0]
 8005138:	07d2      	lsls	r2, r2, #31
 800513a:	d501      	bpl.n	8005140 <_printf_float+0x1a8>
 800513c:	3302      	adds	r3, #2
 800513e:	e7f4      	b.n	800512a <_printf_float+0x192>
 8005140:	2301      	movs	r3, #1
 8005142:	e7f2      	b.n	800512a <_printf_float+0x192>
 8005144:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005148:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800514a:	4299      	cmp	r1, r3
 800514c:	db05      	blt.n	800515a <_printf_float+0x1c2>
 800514e:	6823      	ldr	r3, [r4, #0]
 8005150:	6121      	str	r1, [r4, #16]
 8005152:	07d8      	lsls	r0, r3, #31
 8005154:	d5ea      	bpl.n	800512c <_printf_float+0x194>
 8005156:	1c4b      	adds	r3, r1, #1
 8005158:	e7e7      	b.n	800512a <_printf_float+0x192>
 800515a:	2900      	cmp	r1, #0
 800515c:	bfd4      	ite	le
 800515e:	f1c1 0202 	rsble	r2, r1, #2
 8005162:	2201      	movgt	r2, #1
 8005164:	4413      	add	r3, r2
 8005166:	e7e0      	b.n	800512a <_printf_float+0x192>
 8005168:	6823      	ldr	r3, [r4, #0]
 800516a:	055a      	lsls	r2, r3, #21
 800516c:	d407      	bmi.n	800517e <_printf_float+0x1e6>
 800516e:	6923      	ldr	r3, [r4, #16]
 8005170:	4642      	mov	r2, r8
 8005172:	4631      	mov	r1, r6
 8005174:	4628      	mov	r0, r5
 8005176:	47b8      	blx	r7
 8005178:	3001      	adds	r0, #1
 800517a:	d12b      	bne.n	80051d4 <_printf_float+0x23c>
 800517c:	e767      	b.n	800504e <_printf_float+0xb6>
 800517e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005182:	f240 80dd 	bls.w	8005340 <_printf_float+0x3a8>
 8005186:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800518a:	2200      	movs	r2, #0
 800518c:	2300      	movs	r3, #0
 800518e:	f7fb fc9b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005192:	2800      	cmp	r0, #0
 8005194:	d033      	beq.n	80051fe <_printf_float+0x266>
 8005196:	4a37      	ldr	r2, [pc, #220]	@ (8005274 <_printf_float+0x2dc>)
 8005198:	2301      	movs	r3, #1
 800519a:	4631      	mov	r1, r6
 800519c:	4628      	mov	r0, r5
 800519e:	47b8      	blx	r7
 80051a0:	3001      	adds	r0, #1
 80051a2:	f43f af54 	beq.w	800504e <_printf_float+0xb6>
 80051a6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80051aa:	4543      	cmp	r3, r8
 80051ac:	db02      	blt.n	80051b4 <_printf_float+0x21c>
 80051ae:	6823      	ldr	r3, [r4, #0]
 80051b0:	07d8      	lsls	r0, r3, #31
 80051b2:	d50f      	bpl.n	80051d4 <_printf_float+0x23c>
 80051b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051b8:	4631      	mov	r1, r6
 80051ba:	4628      	mov	r0, r5
 80051bc:	47b8      	blx	r7
 80051be:	3001      	adds	r0, #1
 80051c0:	f43f af45 	beq.w	800504e <_printf_float+0xb6>
 80051c4:	f04f 0900 	mov.w	r9, #0
 80051c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80051cc:	f104 0a1a 	add.w	sl, r4, #26
 80051d0:	45c8      	cmp	r8, r9
 80051d2:	dc09      	bgt.n	80051e8 <_printf_float+0x250>
 80051d4:	6823      	ldr	r3, [r4, #0]
 80051d6:	079b      	lsls	r3, r3, #30
 80051d8:	f100 8103 	bmi.w	80053e2 <_printf_float+0x44a>
 80051dc:	68e0      	ldr	r0, [r4, #12]
 80051de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80051e0:	4298      	cmp	r0, r3
 80051e2:	bfb8      	it	lt
 80051e4:	4618      	movlt	r0, r3
 80051e6:	e734      	b.n	8005052 <_printf_float+0xba>
 80051e8:	2301      	movs	r3, #1
 80051ea:	4652      	mov	r2, sl
 80051ec:	4631      	mov	r1, r6
 80051ee:	4628      	mov	r0, r5
 80051f0:	47b8      	blx	r7
 80051f2:	3001      	adds	r0, #1
 80051f4:	f43f af2b 	beq.w	800504e <_printf_float+0xb6>
 80051f8:	f109 0901 	add.w	r9, r9, #1
 80051fc:	e7e8      	b.n	80051d0 <_printf_float+0x238>
 80051fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005200:	2b00      	cmp	r3, #0
 8005202:	dc39      	bgt.n	8005278 <_printf_float+0x2e0>
 8005204:	4a1b      	ldr	r2, [pc, #108]	@ (8005274 <_printf_float+0x2dc>)
 8005206:	2301      	movs	r3, #1
 8005208:	4631      	mov	r1, r6
 800520a:	4628      	mov	r0, r5
 800520c:	47b8      	blx	r7
 800520e:	3001      	adds	r0, #1
 8005210:	f43f af1d 	beq.w	800504e <_printf_float+0xb6>
 8005214:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005218:	ea59 0303 	orrs.w	r3, r9, r3
 800521c:	d102      	bne.n	8005224 <_printf_float+0x28c>
 800521e:	6823      	ldr	r3, [r4, #0]
 8005220:	07d9      	lsls	r1, r3, #31
 8005222:	d5d7      	bpl.n	80051d4 <_printf_float+0x23c>
 8005224:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005228:	4631      	mov	r1, r6
 800522a:	4628      	mov	r0, r5
 800522c:	47b8      	blx	r7
 800522e:	3001      	adds	r0, #1
 8005230:	f43f af0d 	beq.w	800504e <_printf_float+0xb6>
 8005234:	f04f 0a00 	mov.w	sl, #0
 8005238:	f104 0b1a 	add.w	fp, r4, #26
 800523c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800523e:	425b      	negs	r3, r3
 8005240:	4553      	cmp	r3, sl
 8005242:	dc01      	bgt.n	8005248 <_printf_float+0x2b0>
 8005244:	464b      	mov	r3, r9
 8005246:	e793      	b.n	8005170 <_printf_float+0x1d8>
 8005248:	2301      	movs	r3, #1
 800524a:	465a      	mov	r2, fp
 800524c:	4631      	mov	r1, r6
 800524e:	4628      	mov	r0, r5
 8005250:	47b8      	blx	r7
 8005252:	3001      	adds	r0, #1
 8005254:	f43f aefb 	beq.w	800504e <_printf_float+0xb6>
 8005258:	f10a 0a01 	add.w	sl, sl, #1
 800525c:	e7ee      	b.n	800523c <_printf_float+0x2a4>
 800525e:	bf00      	nop
 8005260:	7fefffff 	.word	0x7fefffff
 8005264:	080095a0 	.word	0x080095a0
 8005268:	080095a4 	.word	0x080095a4
 800526c:	080095a8 	.word	0x080095a8
 8005270:	080095ac 	.word	0x080095ac
 8005274:	080095b0 	.word	0x080095b0
 8005278:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800527a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800527e:	4553      	cmp	r3, sl
 8005280:	bfa8      	it	ge
 8005282:	4653      	movge	r3, sl
 8005284:	2b00      	cmp	r3, #0
 8005286:	4699      	mov	r9, r3
 8005288:	dc36      	bgt.n	80052f8 <_printf_float+0x360>
 800528a:	f04f 0b00 	mov.w	fp, #0
 800528e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005292:	f104 021a 	add.w	r2, r4, #26
 8005296:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005298:	9306      	str	r3, [sp, #24]
 800529a:	eba3 0309 	sub.w	r3, r3, r9
 800529e:	455b      	cmp	r3, fp
 80052a0:	dc31      	bgt.n	8005306 <_printf_float+0x36e>
 80052a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052a4:	459a      	cmp	sl, r3
 80052a6:	dc3a      	bgt.n	800531e <_printf_float+0x386>
 80052a8:	6823      	ldr	r3, [r4, #0]
 80052aa:	07da      	lsls	r2, r3, #31
 80052ac:	d437      	bmi.n	800531e <_printf_float+0x386>
 80052ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052b0:	ebaa 0903 	sub.w	r9, sl, r3
 80052b4:	9b06      	ldr	r3, [sp, #24]
 80052b6:	ebaa 0303 	sub.w	r3, sl, r3
 80052ba:	4599      	cmp	r9, r3
 80052bc:	bfa8      	it	ge
 80052be:	4699      	movge	r9, r3
 80052c0:	f1b9 0f00 	cmp.w	r9, #0
 80052c4:	dc33      	bgt.n	800532e <_printf_float+0x396>
 80052c6:	f04f 0800 	mov.w	r8, #0
 80052ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052ce:	f104 0b1a 	add.w	fp, r4, #26
 80052d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052d4:	ebaa 0303 	sub.w	r3, sl, r3
 80052d8:	eba3 0309 	sub.w	r3, r3, r9
 80052dc:	4543      	cmp	r3, r8
 80052de:	f77f af79 	ble.w	80051d4 <_printf_float+0x23c>
 80052e2:	2301      	movs	r3, #1
 80052e4:	465a      	mov	r2, fp
 80052e6:	4631      	mov	r1, r6
 80052e8:	4628      	mov	r0, r5
 80052ea:	47b8      	blx	r7
 80052ec:	3001      	adds	r0, #1
 80052ee:	f43f aeae 	beq.w	800504e <_printf_float+0xb6>
 80052f2:	f108 0801 	add.w	r8, r8, #1
 80052f6:	e7ec      	b.n	80052d2 <_printf_float+0x33a>
 80052f8:	4642      	mov	r2, r8
 80052fa:	4631      	mov	r1, r6
 80052fc:	4628      	mov	r0, r5
 80052fe:	47b8      	blx	r7
 8005300:	3001      	adds	r0, #1
 8005302:	d1c2      	bne.n	800528a <_printf_float+0x2f2>
 8005304:	e6a3      	b.n	800504e <_printf_float+0xb6>
 8005306:	2301      	movs	r3, #1
 8005308:	4631      	mov	r1, r6
 800530a:	4628      	mov	r0, r5
 800530c:	9206      	str	r2, [sp, #24]
 800530e:	47b8      	blx	r7
 8005310:	3001      	adds	r0, #1
 8005312:	f43f ae9c 	beq.w	800504e <_printf_float+0xb6>
 8005316:	9a06      	ldr	r2, [sp, #24]
 8005318:	f10b 0b01 	add.w	fp, fp, #1
 800531c:	e7bb      	b.n	8005296 <_printf_float+0x2fe>
 800531e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005322:	4631      	mov	r1, r6
 8005324:	4628      	mov	r0, r5
 8005326:	47b8      	blx	r7
 8005328:	3001      	adds	r0, #1
 800532a:	d1c0      	bne.n	80052ae <_printf_float+0x316>
 800532c:	e68f      	b.n	800504e <_printf_float+0xb6>
 800532e:	9a06      	ldr	r2, [sp, #24]
 8005330:	464b      	mov	r3, r9
 8005332:	4442      	add	r2, r8
 8005334:	4631      	mov	r1, r6
 8005336:	4628      	mov	r0, r5
 8005338:	47b8      	blx	r7
 800533a:	3001      	adds	r0, #1
 800533c:	d1c3      	bne.n	80052c6 <_printf_float+0x32e>
 800533e:	e686      	b.n	800504e <_printf_float+0xb6>
 8005340:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005344:	f1ba 0f01 	cmp.w	sl, #1
 8005348:	dc01      	bgt.n	800534e <_printf_float+0x3b6>
 800534a:	07db      	lsls	r3, r3, #31
 800534c:	d536      	bpl.n	80053bc <_printf_float+0x424>
 800534e:	2301      	movs	r3, #1
 8005350:	4642      	mov	r2, r8
 8005352:	4631      	mov	r1, r6
 8005354:	4628      	mov	r0, r5
 8005356:	47b8      	blx	r7
 8005358:	3001      	adds	r0, #1
 800535a:	f43f ae78 	beq.w	800504e <_printf_float+0xb6>
 800535e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005362:	4631      	mov	r1, r6
 8005364:	4628      	mov	r0, r5
 8005366:	47b8      	blx	r7
 8005368:	3001      	adds	r0, #1
 800536a:	f43f ae70 	beq.w	800504e <_printf_float+0xb6>
 800536e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005372:	2200      	movs	r2, #0
 8005374:	2300      	movs	r3, #0
 8005376:	f10a 3aff 	add.w	sl, sl, #4294967295
 800537a:	f7fb fba5 	bl	8000ac8 <__aeabi_dcmpeq>
 800537e:	b9c0      	cbnz	r0, 80053b2 <_printf_float+0x41a>
 8005380:	4653      	mov	r3, sl
 8005382:	f108 0201 	add.w	r2, r8, #1
 8005386:	4631      	mov	r1, r6
 8005388:	4628      	mov	r0, r5
 800538a:	47b8      	blx	r7
 800538c:	3001      	adds	r0, #1
 800538e:	d10c      	bne.n	80053aa <_printf_float+0x412>
 8005390:	e65d      	b.n	800504e <_printf_float+0xb6>
 8005392:	2301      	movs	r3, #1
 8005394:	465a      	mov	r2, fp
 8005396:	4631      	mov	r1, r6
 8005398:	4628      	mov	r0, r5
 800539a:	47b8      	blx	r7
 800539c:	3001      	adds	r0, #1
 800539e:	f43f ae56 	beq.w	800504e <_printf_float+0xb6>
 80053a2:	f108 0801 	add.w	r8, r8, #1
 80053a6:	45d0      	cmp	r8, sl
 80053a8:	dbf3      	blt.n	8005392 <_printf_float+0x3fa>
 80053aa:	464b      	mov	r3, r9
 80053ac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80053b0:	e6df      	b.n	8005172 <_printf_float+0x1da>
 80053b2:	f04f 0800 	mov.w	r8, #0
 80053b6:	f104 0b1a 	add.w	fp, r4, #26
 80053ba:	e7f4      	b.n	80053a6 <_printf_float+0x40e>
 80053bc:	2301      	movs	r3, #1
 80053be:	4642      	mov	r2, r8
 80053c0:	e7e1      	b.n	8005386 <_printf_float+0x3ee>
 80053c2:	2301      	movs	r3, #1
 80053c4:	464a      	mov	r2, r9
 80053c6:	4631      	mov	r1, r6
 80053c8:	4628      	mov	r0, r5
 80053ca:	47b8      	blx	r7
 80053cc:	3001      	adds	r0, #1
 80053ce:	f43f ae3e 	beq.w	800504e <_printf_float+0xb6>
 80053d2:	f108 0801 	add.w	r8, r8, #1
 80053d6:	68e3      	ldr	r3, [r4, #12]
 80053d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80053da:	1a5b      	subs	r3, r3, r1
 80053dc:	4543      	cmp	r3, r8
 80053de:	dcf0      	bgt.n	80053c2 <_printf_float+0x42a>
 80053e0:	e6fc      	b.n	80051dc <_printf_float+0x244>
 80053e2:	f04f 0800 	mov.w	r8, #0
 80053e6:	f104 0919 	add.w	r9, r4, #25
 80053ea:	e7f4      	b.n	80053d6 <_printf_float+0x43e>

080053ec <_printf_common>:
 80053ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053f0:	4616      	mov	r6, r2
 80053f2:	4698      	mov	r8, r3
 80053f4:	688a      	ldr	r2, [r1, #8]
 80053f6:	690b      	ldr	r3, [r1, #16]
 80053f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80053fc:	4293      	cmp	r3, r2
 80053fe:	bfb8      	it	lt
 8005400:	4613      	movlt	r3, r2
 8005402:	6033      	str	r3, [r6, #0]
 8005404:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005408:	4607      	mov	r7, r0
 800540a:	460c      	mov	r4, r1
 800540c:	b10a      	cbz	r2, 8005412 <_printf_common+0x26>
 800540e:	3301      	adds	r3, #1
 8005410:	6033      	str	r3, [r6, #0]
 8005412:	6823      	ldr	r3, [r4, #0]
 8005414:	0699      	lsls	r1, r3, #26
 8005416:	bf42      	ittt	mi
 8005418:	6833      	ldrmi	r3, [r6, #0]
 800541a:	3302      	addmi	r3, #2
 800541c:	6033      	strmi	r3, [r6, #0]
 800541e:	6825      	ldr	r5, [r4, #0]
 8005420:	f015 0506 	ands.w	r5, r5, #6
 8005424:	d106      	bne.n	8005434 <_printf_common+0x48>
 8005426:	f104 0a19 	add.w	sl, r4, #25
 800542a:	68e3      	ldr	r3, [r4, #12]
 800542c:	6832      	ldr	r2, [r6, #0]
 800542e:	1a9b      	subs	r3, r3, r2
 8005430:	42ab      	cmp	r3, r5
 8005432:	dc26      	bgt.n	8005482 <_printf_common+0x96>
 8005434:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005438:	6822      	ldr	r2, [r4, #0]
 800543a:	3b00      	subs	r3, #0
 800543c:	bf18      	it	ne
 800543e:	2301      	movne	r3, #1
 8005440:	0692      	lsls	r2, r2, #26
 8005442:	d42b      	bmi.n	800549c <_printf_common+0xb0>
 8005444:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005448:	4641      	mov	r1, r8
 800544a:	4638      	mov	r0, r7
 800544c:	47c8      	blx	r9
 800544e:	3001      	adds	r0, #1
 8005450:	d01e      	beq.n	8005490 <_printf_common+0xa4>
 8005452:	6823      	ldr	r3, [r4, #0]
 8005454:	6922      	ldr	r2, [r4, #16]
 8005456:	f003 0306 	and.w	r3, r3, #6
 800545a:	2b04      	cmp	r3, #4
 800545c:	bf02      	ittt	eq
 800545e:	68e5      	ldreq	r5, [r4, #12]
 8005460:	6833      	ldreq	r3, [r6, #0]
 8005462:	1aed      	subeq	r5, r5, r3
 8005464:	68a3      	ldr	r3, [r4, #8]
 8005466:	bf0c      	ite	eq
 8005468:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800546c:	2500      	movne	r5, #0
 800546e:	4293      	cmp	r3, r2
 8005470:	bfc4      	itt	gt
 8005472:	1a9b      	subgt	r3, r3, r2
 8005474:	18ed      	addgt	r5, r5, r3
 8005476:	2600      	movs	r6, #0
 8005478:	341a      	adds	r4, #26
 800547a:	42b5      	cmp	r5, r6
 800547c:	d11a      	bne.n	80054b4 <_printf_common+0xc8>
 800547e:	2000      	movs	r0, #0
 8005480:	e008      	b.n	8005494 <_printf_common+0xa8>
 8005482:	2301      	movs	r3, #1
 8005484:	4652      	mov	r2, sl
 8005486:	4641      	mov	r1, r8
 8005488:	4638      	mov	r0, r7
 800548a:	47c8      	blx	r9
 800548c:	3001      	adds	r0, #1
 800548e:	d103      	bne.n	8005498 <_printf_common+0xac>
 8005490:	f04f 30ff 	mov.w	r0, #4294967295
 8005494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005498:	3501      	adds	r5, #1
 800549a:	e7c6      	b.n	800542a <_printf_common+0x3e>
 800549c:	18e1      	adds	r1, r4, r3
 800549e:	1c5a      	adds	r2, r3, #1
 80054a0:	2030      	movs	r0, #48	@ 0x30
 80054a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80054a6:	4422      	add	r2, r4
 80054a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80054ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80054b0:	3302      	adds	r3, #2
 80054b2:	e7c7      	b.n	8005444 <_printf_common+0x58>
 80054b4:	2301      	movs	r3, #1
 80054b6:	4622      	mov	r2, r4
 80054b8:	4641      	mov	r1, r8
 80054ba:	4638      	mov	r0, r7
 80054bc:	47c8      	blx	r9
 80054be:	3001      	adds	r0, #1
 80054c0:	d0e6      	beq.n	8005490 <_printf_common+0xa4>
 80054c2:	3601      	adds	r6, #1
 80054c4:	e7d9      	b.n	800547a <_printf_common+0x8e>
	...

080054c8 <_printf_i>:
 80054c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054cc:	7e0f      	ldrb	r7, [r1, #24]
 80054ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80054d0:	2f78      	cmp	r7, #120	@ 0x78
 80054d2:	4691      	mov	r9, r2
 80054d4:	4680      	mov	r8, r0
 80054d6:	460c      	mov	r4, r1
 80054d8:	469a      	mov	sl, r3
 80054da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80054de:	d807      	bhi.n	80054f0 <_printf_i+0x28>
 80054e0:	2f62      	cmp	r7, #98	@ 0x62
 80054e2:	d80a      	bhi.n	80054fa <_printf_i+0x32>
 80054e4:	2f00      	cmp	r7, #0
 80054e6:	f000 80d2 	beq.w	800568e <_printf_i+0x1c6>
 80054ea:	2f58      	cmp	r7, #88	@ 0x58
 80054ec:	f000 80b9 	beq.w	8005662 <_printf_i+0x19a>
 80054f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80054f8:	e03a      	b.n	8005570 <_printf_i+0xa8>
 80054fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80054fe:	2b15      	cmp	r3, #21
 8005500:	d8f6      	bhi.n	80054f0 <_printf_i+0x28>
 8005502:	a101      	add	r1, pc, #4	@ (adr r1, 8005508 <_printf_i+0x40>)
 8005504:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005508:	08005561 	.word	0x08005561
 800550c:	08005575 	.word	0x08005575
 8005510:	080054f1 	.word	0x080054f1
 8005514:	080054f1 	.word	0x080054f1
 8005518:	080054f1 	.word	0x080054f1
 800551c:	080054f1 	.word	0x080054f1
 8005520:	08005575 	.word	0x08005575
 8005524:	080054f1 	.word	0x080054f1
 8005528:	080054f1 	.word	0x080054f1
 800552c:	080054f1 	.word	0x080054f1
 8005530:	080054f1 	.word	0x080054f1
 8005534:	08005675 	.word	0x08005675
 8005538:	0800559f 	.word	0x0800559f
 800553c:	0800562f 	.word	0x0800562f
 8005540:	080054f1 	.word	0x080054f1
 8005544:	080054f1 	.word	0x080054f1
 8005548:	08005697 	.word	0x08005697
 800554c:	080054f1 	.word	0x080054f1
 8005550:	0800559f 	.word	0x0800559f
 8005554:	080054f1 	.word	0x080054f1
 8005558:	080054f1 	.word	0x080054f1
 800555c:	08005637 	.word	0x08005637
 8005560:	6833      	ldr	r3, [r6, #0]
 8005562:	1d1a      	adds	r2, r3, #4
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	6032      	str	r2, [r6, #0]
 8005568:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800556c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005570:	2301      	movs	r3, #1
 8005572:	e09d      	b.n	80056b0 <_printf_i+0x1e8>
 8005574:	6833      	ldr	r3, [r6, #0]
 8005576:	6820      	ldr	r0, [r4, #0]
 8005578:	1d19      	adds	r1, r3, #4
 800557a:	6031      	str	r1, [r6, #0]
 800557c:	0606      	lsls	r6, r0, #24
 800557e:	d501      	bpl.n	8005584 <_printf_i+0xbc>
 8005580:	681d      	ldr	r5, [r3, #0]
 8005582:	e003      	b.n	800558c <_printf_i+0xc4>
 8005584:	0645      	lsls	r5, r0, #25
 8005586:	d5fb      	bpl.n	8005580 <_printf_i+0xb8>
 8005588:	f9b3 5000 	ldrsh.w	r5, [r3]
 800558c:	2d00      	cmp	r5, #0
 800558e:	da03      	bge.n	8005598 <_printf_i+0xd0>
 8005590:	232d      	movs	r3, #45	@ 0x2d
 8005592:	426d      	negs	r5, r5
 8005594:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005598:	4859      	ldr	r0, [pc, #356]	@ (8005700 <_printf_i+0x238>)
 800559a:	230a      	movs	r3, #10
 800559c:	e011      	b.n	80055c2 <_printf_i+0xfa>
 800559e:	6821      	ldr	r1, [r4, #0]
 80055a0:	6833      	ldr	r3, [r6, #0]
 80055a2:	0608      	lsls	r0, r1, #24
 80055a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80055a8:	d402      	bmi.n	80055b0 <_printf_i+0xe8>
 80055aa:	0649      	lsls	r1, r1, #25
 80055ac:	bf48      	it	mi
 80055ae:	b2ad      	uxthmi	r5, r5
 80055b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80055b2:	4853      	ldr	r0, [pc, #332]	@ (8005700 <_printf_i+0x238>)
 80055b4:	6033      	str	r3, [r6, #0]
 80055b6:	bf14      	ite	ne
 80055b8:	230a      	movne	r3, #10
 80055ba:	2308      	moveq	r3, #8
 80055bc:	2100      	movs	r1, #0
 80055be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80055c2:	6866      	ldr	r6, [r4, #4]
 80055c4:	60a6      	str	r6, [r4, #8]
 80055c6:	2e00      	cmp	r6, #0
 80055c8:	bfa2      	ittt	ge
 80055ca:	6821      	ldrge	r1, [r4, #0]
 80055cc:	f021 0104 	bicge.w	r1, r1, #4
 80055d0:	6021      	strge	r1, [r4, #0]
 80055d2:	b90d      	cbnz	r5, 80055d8 <_printf_i+0x110>
 80055d4:	2e00      	cmp	r6, #0
 80055d6:	d04b      	beq.n	8005670 <_printf_i+0x1a8>
 80055d8:	4616      	mov	r6, r2
 80055da:	fbb5 f1f3 	udiv	r1, r5, r3
 80055de:	fb03 5711 	mls	r7, r3, r1, r5
 80055e2:	5dc7      	ldrb	r7, [r0, r7]
 80055e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80055e8:	462f      	mov	r7, r5
 80055ea:	42bb      	cmp	r3, r7
 80055ec:	460d      	mov	r5, r1
 80055ee:	d9f4      	bls.n	80055da <_printf_i+0x112>
 80055f0:	2b08      	cmp	r3, #8
 80055f2:	d10b      	bne.n	800560c <_printf_i+0x144>
 80055f4:	6823      	ldr	r3, [r4, #0]
 80055f6:	07df      	lsls	r7, r3, #31
 80055f8:	d508      	bpl.n	800560c <_printf_i+0x144>
 80055fa:	6923      	ldr	r3, [r4, #16]
 80055fc:	6861      	ldr	r1, [r4, #4]
 80055fe:	4299      	cmp	r1, r3
 8005600:	bfde      	ittt	le
 8005602:	2330      	movle	r3, #48	@ 0x30
 8005604:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005608:	f106 36ff 	addle.w	r6, r6, #4294967295
 800560c:	1b92      	subs	r2, r2, r6
 800560e:	6122      	str	r2, [r4, #16]
 8005610:	f8cd a000 	str.w	sl, [sp]
 8005614:	464b      	mov	r3, r9
 8005616:	aa03      	add	r2, sp, #12
 8005618:	4621      	mov	r1, r4
 800561a:	4640      	mov	r0, r8
 800561c:	f7ff fee6 	bl	80053ec <_printf_common>
 8005620:	3001      	adds	r0, #1
 8005622:	d14a      	bne.n	80056ba <_printf_i+0x1f2>
 8005624:	f04f 30ff 	mov.w	r0, #4294967295
 8005628:	b004      	add	sp, #16
 800562a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800562e:	6823      	ldr	r3, [r4, #0]
 8005630:	f043 0320 	orr.w	r3, r3, #32
 8005634:	6023      	str	r3, [r4, #0]
 8005636:	4833      	ldr	r0, [pc, #204]	@ (8005704 <_printf_i+0x23c>)
 8005638:	2778      	movs	r7, #120	@ 0x78
 800563a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800563e:	6823      	ldr	r3, [r4, #0]
 8005640:	6831      	ldr	r1, [r6, #0]
 8005642:	061f      	lsls	r7, r3, #24
 8005644:	f851 5b04 	ldr.w	r5, [r1], #4
 8005648:	d402      	bmi.n	8005650 <_printf_i+0x188>
 800564a:	065f      	lsls	r7, r3, #25
 800564c:	bf48      	it	mi
 800564e:	b2ad      	uxthmi	r5, r5
 8005650:	6031      	str	r1, [r6, #0]
 8005652:	07d9      	lsls	r1, r3, #31
 8005654:	bf44      	itt	mi
 8005656:	f043 0320 	orrmi.w	r3, r3, #32
 800565a:	6023      	strmi	r3, [r4, #0]
 800565c:	b11d      	cbz	r5, 8005666 <_printf_i+0x19e>
 800565e:	2310      	movs	r3, #16
 8005660:	e7ac      	b.n	80055bc <_printf_i+0xf4>
 8005662:	4827      	ldr	r0, [pc, #156]	@ (8005700 <_printf_i+0x238>)
 8005664:	e7e9      	b.n	800563a <_printf_i+0x172>
 8005666:	6823      	ldr	r3, [r4, #0]
 8005668:	f023 0320 	bic.w	r3, r3, #32
 800566c:	6023      	str	r3, [r4, #0]
 800566e:	e7f6      	b.n	800565e <_printf_i+0x196>
 8005670:	4616      	mov	r6, r2
 8005672:	e7bd      	b.n	80055f0 <_printf_i+0x128>
 8005674:	6833      	ldr	r3, [r6, #0]
 8005676:	6825      	ldr	r5, [r4, #0]
 8005678:	6961      	ldr	r1, [r4, #20]
 800567a:	1d18      	adds	r0, r3, #4
 800567c:	6030      	str	r0, [r6, #0]
 800567e:	062e      	lsls	r6, r5, #24
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	d501      	bpl.n	8005688 <_printf_i+0x1c0>
 8005684:	6019      	str	r1, [r3, #0]
 8005686:	e002      	b.n	800568e <_printf_i+0x1c6>
 8005688:	0668      	lsls	r0, r5, #25
 800568a:	d5fb      	bpl.n	8005684 <_printf_i+0x1bc>
 800568c:	8019      	strh	r1, [r3, #0]
 800568e:	2300      	movs	r3, #0
 8005690:	6123      	str	r3, [r4, #16]
 8005692:	4616      	mov	r6, r2
 8005694:	e7bc      	b.n	8005610 <_printf_i+0x148>
 8005696:	6833      	ldr	r3, [r6, #0]
 8005698:	1d1a      	adds	r2, r3, #4
 800569a:	6032      	str	r2, [r6, #0]
 800569c:	681e      	ldr	r6, [r3, #0]
 800569e:	6862      	ldr	r2, [r4, #4]
 80056a0:	2100      	movs	r1, #0
 80056a2:	4630      	mov	r0, r6
 80056a4:	f7fa fd94 	bl	80001d0 <memchr>
 80056a8:	b108      	cbz	r0, 80056ae <_printf_i+0x1e6>
 80056aa:	1b80      	subs	r0, r0, r6
 80056ac:	6060      	str	r0, [r4, #4]
 80056ae:	6863      	ldr	r3, [r4, #4]
 80056b0:	6123      	str	r3, [r4, #16]
 80056b2:	2300      	movs	r3, #0
 80056b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056b8:	e7aa      	b.n	8005610 <_printf_i+0x148>
 80056ba:	6923      	ldr	r3, [r4, #16]
 80056bc:	4632      	mov	r2, r6
 80056be:	4649      	mov	r1, r9
 80056c0:	4640      	mov	r0, r8
 80056c2:	47d0      	blx	sl
 80056c4:	3001      	adds	r0, #1
 80056c6:	d0ad      	beq.n	8005624 <_printf_i+0x15c>
 80056c8:	6823      	ldr	r3, [r4, #0]
 80056ca:	079b      	lsls	r3, r3, #30
 80056cc:	d413      	bmi.n	80056f6 <_printf_i+0x22e>
 80056ce:	68e0      	ldr	r0, [r4, #12]
 80056d0:	9b03      	ldr	r3, [sp, #12]
 80056d2:	4298      	cmp	r0, r3
 80056d4:	bfb8      	it	lt
 80056d6:	4618      	movlt	r0, r3
 80056d8:	e7a6      	b.n	8005628 <_printf_i+0x160>
 80056da:	2301      	movs	r3, #1
 80056dc:	4632      	mov	r2, r6
 80056de:	4649      	mov	r1, r9
 80056e0:	4640      	mov	r0, r8
 80056e2:	47d0      	blx	sl
 80056e4:	3001      	adds	r0, #1
 80056e6:	d09d      	beq.n	8005624 <_printf_i+0x15c>
 80056e8:	3501      	adds	r5, #1
 80056ea:	68e3      	ldr	r3, [r4, #12]
 80056ec:	9903      	ldr	r1, [sp, #12]
 80056ee:	1a5b      	subs	r3, r3, r1
 80056f0:	42ab      	cmp	r3, r5
 80056f2:	dcf2      	bgt.n	80056da <_printf_i+0x212>
 80056f4:	e7eb      	b.n	80056ce <_printf_i+0x206>
 80056f6:	2500      	movs	r5, #0
 80056f8:	f104 0619 	add.w	r6, r4, #25
 80056fc:	e7f5      	b.n	80056ea <_printf_i+0x222>
 80056fe:	bf00      	nop
 8005700:	080095b2 	.word	0x080095b2
 8005704:	080095c3 	.word	0x080095c3

08005708 <_scanf_float>:
 8005708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800570c:	b087      	sub	sp, #28
 800570e:	4617      	mov	r7, r2
 8005710:	9303      	str	r3, [sp, #12]
 8005712:	688b      	ldr	r3, [r1, #8]
 8005714:	1e5a      	subs	r2, r3, #1
 8005716:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800571a:	bf81      	itttt	hi
 800571c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005720:	eb03 0b05 	addhi.w	fp, r3, r5
 8005724:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005728:	608b      	strhi	r3, [r1, #8]
 800572a:	680b      	ldr	r3, [r1, #0]
 800572c:	460a      	mov	r2, r1
 800572e:	f04f 0500 	mov.w	r5, #0
 8005732:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005736:	f842 3b1c 	str.w	r3, [r2], #28
 800573a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800573e:	4680      	mov	r8, r0
 8005740:	460c      	mov	r4, r1
 8005742:	bf98      	it	ls
 8005744:	f04f 0b00 	movls.w	fp, #0
 8005748:	9201      	str	r2, [sp, #4]
 800574a:	4616      	mov	r6, r2
 800574c:	46aa      	mov	sl, r5
 800574e:	46a9      	mov	r9, r5
 8005750:	9502      	str	r5, [sp, #8]
 8005752:	68a2      	ldr	r2, [r4, #8]
 8005754:	b152      	cbz	r2, 800576c <_scanf_float+0x64>
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	2b4e      	cmp	r3, #78	@ 0x4e
 800575c:	d864      	bhi.n	8005828 <_scanf_float+0x120>
 800575e:	2b40      	cmp	r3, #64	@ 0x40
 8005760:	d83c      	bhi.n	80057dc <_scanf_float+0xd4>
 8005762:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005766:	b2c8      	uxtb	r0, r1
 8005768:	280e      	cmp	r0, #14
 800576a:	d93a      	bls.n	80057e2 <_scanf_float+0xda>
 800576c:	f1b9 0f00 	cmp.w	r9, #0
 8005770:	d003      	beq.n	800577a <_scanf_float+0x72>
 8005772:	6823      	ldr	r3, [r4, #0]
 8005774:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005778:	6023      	str	r3, [r4, #0]
 800577a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800577e:	f1ba 0f01 	cmp.w	sl, #1
 8005782:	f200 8117 	bhi.w	80059b4 <_scanf_float+0x2ac>
 8005786:	9b01      	ldr	r3, [sp, #4]
 8005788:	429e      	cmp	r6, r3
 800578a:	f200 8108 	bhi.w	800599e <_scanf_float+0x296>
 800578e:	2001      	movs	r0, #1
 8005790:	b007      	add	sp, #28
 8005792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005796:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800579a:	2a0d      	cmp	r2, #13
 800579c:	d8e6      	bhi.n	800576c <_scanf_float+0x64>
 800579e:	a101      	add	r1, pc, #4	@ (adr r1, 80057a4 <_scanf_float+0x9c>)
 80057a0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80057a4:	080058eb 	.word	0x080058eb
 80057a8:	0800576d 	.word	0x0800576d
 80057ac:	0800576d 	.word	0x0800576d
 80057b0:	0800576d 	.word	0x0800576d
 80057b4:	0800594b 	.word	0x0800594b
 80057b8:	08005923 	.word	0x08005923
 80057bc:	0800576d 	.word	0x0800576d
 80057c0:	0800576d 	.word	0x0800576d
 80057c4:	080058f9 	.word	0x080058f9
 80057c8:	0800576d 	.word	0x0800576d
 80057cc:	0800576d 	.word	0x0800576d
 80057d0:	0800576d 	.word	0x0800576d
 80057d4:	0800576d 	.word	0x0800576d
 80057d8:	080058b1 	.word	0x080058b1
 80057dc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80057e0:	e7db      	b.n	800579a <_scanf_float+0x92>
 80057e2:	290e      	cmp	r1, #14
 80057e4:	d8c2      	bhi.n	800576c <_scanf_float+0x64>
 80057e6:	a001      	add	r0, pc, #4	@ (adr r0, 80057ec <_scanf_float+0xe4>)
 80057e8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80057ec:	080058a1 	.word	0x080058a1
 80057f0:	0800576d 	.word	0x0800576d
 80057f4:	080058a1 	.word	0x080058a1
 80057f8:	08005937 	.word	0x08005937
 80057fc:	0800576d 	.word	0x0800576d
 8005800:	08005849 	.word	0x08005849
 8005804:	08005887 	.word	0x08005887
 8005808:	08005887 	.word	0x08005887
 800580c:	08005887 	.word	0x08005887
 8005810:	08005887 	.word	0x08005887
 8005814:	08005887 	.word	0x08005887
 8005818:	08005887 	.word	0x08005887
 800581c:	08005887 	.word	0x08005887
 8005820:	08005887 	.word	0x08005887
 8005824:	08005887 	.word	0x08005887
 8005828:	2b6e      	cmp	r3, #110	@ 0x6e
 800582a:	d809      	bhi.n	8005840 <_scanf_float+0x138>
 800582c:	2b60      	cmp	r3, #96	@ 0x60
 800582e:	d8b2      	bhi.n	8005796 <_scanf_float+0x8e>
 8005830:	2b54      	cmp	r3, #84	@ 0x54
 8005832:	d07b      	beq.n	800592c <_scanf_float+0x224>
 8005834:	2b59      	cmp	r3, #89	@ 0x59
 8005836:	d199      	bne.n	800576c <_scanf_float+0x64>
 8005838:	2d07      	cmp	r5, #7
 800583a:	d197      	bne.n	800576c <_scanf_float+0x64>
 800583c:	2508      	movs	r5, #8
 800583e:	e02c      	b.n	800589a <_scanf_float+0x192>
 8005840:	2b74      	cmp	r3, #116	@ 0x74
 8005842:	d073      	beq.n	800592c <_scanf_float+0x224>
 8005844:	2b79      	cmp	r3, #121	@ 0x79
 8005846:	e7f6      	b.n	8005836 <_scanf_float+0x12e>
 8005848:	6821      	ldr	r1, [r4, #0]
 800584a:	05c8      	lsls	r0, r1, #23
 800584c:	d51b      	bpl.n	8005886 <_scanf_float+0x17e>
 800584e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005852:	6021      	str	r1, [r4, #0]
 8005854:	f109 0901 	add.w	r9, r9, #1
 8005858:	f1bb 0f00 	cmp.w	fp, #0
 800585c:	d003      	beq.n	8005866 <_scanf_float+0x15e>
 800585e:	3201      	adds	r2, #1
 8005860:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005864:	60a2      	str	r2, [r4, #8]
 8005866:	68a3      	ldr	r3, [r4, #8]
 8005868:	3b01      	subs	r3, #1
 800586a:	60a3      	str	r3, [r4, #8]
 800586c:	6923      	ldr	r3, [r4, #16]
 800586e:	3301      	adds	r3, #1
 8005870:	6123      	str	r3, [r4, #16]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	3b01      	subs	r3, #1
 8005876:	2b00      	cmp	r3, #0
 8005878:	607b      	str	r3, [r7, #4]
 800587a:	f340 8087 	ble.w	800598c <_scanf_float+0x284>
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	3301      	adds	r3, #1
 8005882:	603b      	str	r3, [r7, #0]
 8005884:	e765      	b.n	8005752 <_scanf_float+0x4a>
 8005886:	eb1a 0105 	adds.w	r1, sl, r5
 800588a:	f47f af6f 	bne.w	800576c <_scanf_float+0x64>
 800588e:	6822      	ldr	r2, [r4, #0]
 8005890:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005894:	6022      	str	r2, [r4, #0]
 8005896:	460d      	mov	r5, r1
 8005898:	468a      	mov	sl, r1
 800589a:	f806 3b01 	strb.w	r3, [r6], #1
 800589e:	e7e2      	b.n	8005866 <_scanf_float+0x15e>
 80058a0:	6822      	ldr	r2, [r4, #0]
 80058a2:	0610      	lsls	r0, r2, #24
 80058a4:	f57f af62 	bpl.w	800576c <_scanf_float+0x64>
 80058a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80058ac:	6022      	str	r2, [r4, #0]
 80058ae:	e7f4      	b.n	800589a <_scanf_float+0x192>
 80058b0:	f1ba 0f00 	cmp.w	sl, #0
 80058b4:	d10e      	bne.n	80058d4 <_scanf_float+0x1cc>
 80058b6:	f1b9 0f00 	cmp.w	r9, #0
 80058ba:	d10e      	bne.n	80058da <_scanf_float+0x1d2>
 80058bc:	6822      	ldr	r2, [r4, #0]
 80058be:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80058c2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80058c6:	d108      	bne.n	80058da <_scanf_float+0x1d2>
 80058c8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80058cc:	6022      	str	r2, [r4, #0]
 80058ce:	f04f 0a01 	mov.w	sl, #1
 80058d2:	e7e2      	b.n	800589a <_scanf_float+0x192>
 80058d4:	f1ba 0f02 	cmp.w	sl, #2
 80058d8:	d055      	beq.n	8005986 <_scanf_float+0x27e>
 80058da:	2d01      	cmp	r5, #1
 80058dc:	d002      	beq.n	80058e4 <_scanf_float+0x1dc>
 80058de:	2d04      	cmp	r5, #4
 80058e0:	f47f af44 	bne.w	800576c <_scanf_float+0x64>
 80058e4:	3501      	adds	r5, #1
 80058e6:	b2ed      	uxtb	r5, r5
 80058e8:	e7d7      	b.n	800589a <_scanf_float+0x192>
 80058ea:	f1ba 0f01 	cmp.w	sl, #1
 80058ee:	f47f af3d 	bne.w	800576c <_scanf_float+0x64>
 80058f2:	f04f 0a02 	mov.w	sl, #2
 80058f6:	e7d0      	b.n	800589a <_scanf_float+0x192>
 80058f8:	b97d      	cbnz	r5, 800591a <_scanf_float+0x212>
 80058fa:	f1b9 0f00 	cmp.w	r9, #0
 80058fe:	f47f af38 	bne.w	8005772 <_scanf_float+0x6a>
 8005902:	6822      	ldr	r2, [r4, #0]
 8005904:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005908:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800590c:	f040 8108 	bne.w	8005b20 <_scanf_float+0x418>
 8005910:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005914:	6022      	str	r2, [r4, #0]
 8005916:	2501      	movs	r5, #1
 8005918:	e7bf      	b.n	800589a <_scanf_float+0x192>
 800591a:	2d03      	cmp	r5, #3
 800591c:	d0e2      	beq.n	80058e4 <_scanf_float+0x1dc>
 800591e:	2d05      	cmp	r5, #5
 8005920:	e7de      	b.n	80058e0 <_scanf_float+0x1d8>
 8005922:	2d02      	cmp	r5, #2
 8005924:	f47f af22 	bne.w	800576c <_scanf_float+0x64>
 8005928:	2503      	movs	r5, #3
 800592a:	e7b6      	b.n	800589a <_scanf_float+0x192>
 800592c:	2d06      	cmp	r5, #6
 800592e:	f47f af1d 	bne.w	800576c <_scanf_float+0x64>
 8005932:	2507      	movs	r5, #7
 8005934:	e7b1      	b.n	800589a <_scanf_float+0x192>
 8005936:	6822      	ldr	r2, [r4, #0]
 8005938:	0591      	lsls	r1, r2, #22
 800593a:	f57f af17 	bpl.w	800576c <_scanf_float+0x64>
 800593e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005942:	6022      	str	r2, [r4, #0]
 8005944:	f8cd 9008 	str.w	r9, [sp, #8]
 8005948:	e7a7      	b.n	800589a <_scanf_float+0x192>
 800594a:	6822      	ldr	r2, [r4, #0]
 800594c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005950:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005954:	d006      	beq.n	8005964 <_scanf_float+0x25c>
 8005956:	0550      	lsls	r0, r2, #21
 8005958:	f57f af08 	bpl.w	800576c <_scanf_float+0x64>
 800595c:	f1b9 0f00 	cmp.w	r9, #0
 8005960:	f000 80de 	beq.w	8005b20 <_scanf_float+0x418>
 8005964:	0591      	lsls	r1, r2, #22
 8005966:	bf58      	it	pl
 8005968:	9902      	ldrpl	r1, [sp, #8]
 800596a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800596e:	bf58      	it	pl
 8005970:	eba9 0101 	subpl.w	r1, r9, r1
 8005974:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005978:	bf58      	it	pl
 800597a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800597e:	6022      	str	r2, [r4, #0]
 8005980:	f04f 0900 	mov.w	r9, #0
 8005984:	e789      	b.n	800589a <_scanf_float+0x192>
 8005986:	f04f 0a03 	mov.w	sl, #3
 800598a:	e786      	b.n	800589a <_scanf_float+0x192>
 800598c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005990:	4639      	mov	r1, r7
 8005992:	4640      	mov	r0, r8
 8005994:	4798      	blx	r3
 8005996:	2800      	cmp	r0, #0
 8005998:	f43f aedb 	beq.w	8005752 <_scanf_float+0x4a>
 800599c:	e6e6      	b.n	800576c <_scanf_float+0x64>
 800599e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80059a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80059a6:	463a      	mov	r2, r7
 80059a8:	4640      	mov	r0, r8
 80059aa:	4798      	blx	r3
 80059ac:	6923      	ldr	r3, [r4, #16]
 80059ae:	3b01      	subs	r3, #1
 80059b0:	6123      	str	r3, [r4, #16]
 80059b2:	e6e8      	b.n	8005786 <_scanf_float+0x7e>
 80059b4:	1e6b      	subs	r3, r5, #1
 80059b6:	2b06      	cmp	r3, #6
 80059b8:	d824      	bhi.n	8005a04 <_scanf_float+0x2fc>
 80059ba:	2d02      	cmp	r5, #2
 80059bc:	d836      	bhi.n	8005a2c <_scanf_float+0x324>
 80059be:	9b01      	ldr	r3, [sp, #4]
 80059c0:	429e      	cmp	r6, r3
 80059c2:	f67f aee4 	bls.w	800578e <_scanf_float+0x86>
 80059c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80059ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80059ce:	463a      	mov	r2, r7
 80059d0:	4640      	mov	r0, r8
 80059d2:	4798      	blx	r3
 80059d4:	6923      	ldr	r3, [r4, #16]
 80059d6:	3b01      	subs	r3, #1
 80059d8:	6123      	str	r3, [r4, #16]
 80059da:	e7f0      	b.n	80059be <_scanf_float+0x2b6>
 80059dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80059e0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80059e4:	463a      	mov	r2, r7
 80059e6:	4640      	mov	r0, r8
 80059e8:	4798      	blx	r3
 80059ea:	6923      	ldr	r3, [r4, #16]
 80059ec:	3b01      	subs	r3, #1
 80059ee:	6123      	str	r3, [r4, #16]
 80059f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80059f4:	fa5f fa8a 	uxtb.w	sl, sl
 80059f8:	f1ba 0f02 	cmp.w	sl, #2
 80059fc:	d1ee      	bne.n	80059dc <_scanf_float+0x2d4>
 80059fe:	3d03      	subs	r5, #3
 8005a00:	b2ed      	uxtb	r5, r5
 8005a02:	1b76      	subs	r6, r6, r5
 8005a04:	6823      	ldr	r3, [r4, #0]
 8005a06:	05da      	lsls	r2, r3, #23
 8005a08:	d530      	bpl.n	8005a6c <_scanf_float+0x364>
 8005a0a:	055b      	lsls	r3, r3, #21
 8005a0c:	d511      	bpl.n	8005a32 <_scanf_float+0x32a>
 8005a0e:	9b01      	ldr	r3, [sp, #4]
 8005a10:	429e      	cmp	r6, r3
 8005a12:	f67f aebc 	bls.w	800578e <_scanf_float+0x86>
 8005a16:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005a1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005a1e:	463a      	mov	r2, r7
 8005a20:	4640      	mov	r0, r8
 8005a22:	4798      	blx	r3
 8005a24:	6923      	ldr	r3, [r4, #16]
 8005a26:	3b01      	subs	r3, #1
 8005a28:	6123      	str	r3, [r4, #16]
 8005a2a:	e7f0      	b.n	8005a0e <_scanf_float+0x306>
 8005a2c:	46aa      	mov	sl, r5
 8005a2e:	46b3      	mov	fp, r6
 8005a30:	e7de      	b.n	80059f0 <_scanf_float+0x2e8>
 8005a32:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005a36:	6923      	ldr	r3, [r4, #16]
 8005a38:	2965      	cmp	r1, #101	@ 0x65
 8005a3a:	f103 33ff 	add.w	r3, r3, #4294967295
 8005a3e:	f106 35ff 	add.w	r5, r6, #4294967295
 8005a42:	6123      	str	r3, [r4, #16]
 8005a44:	d00c      	beq.n	8005a60 <_scanf_float+0x358>
 8005a46:	2945      	cmp	r1, #69	@ 0x45
 8005a48:	d00a      	beq.n	8005a60 <_scanf_float+0x358>
 8005a4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005a4e:	463a      	mov	r2, r7
 8005a50:	4640      	mov	r0, r8
 8005a52:	4798      	blx	r3
 8005a54:	6923      	ldr	r3, [r4, #16]
 8005a56:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	1eb5      	subs	r5, r6, #2
 8005a5e:	6123      	str	r3, [r4, #16]
 8005a60:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005a64:	463a      	mov	r2, r7
 8005a66:	4640      	mov	r0, r8
 8005a68:	4798      	blx	r3
 8005a6a:	462e      	mov	r6, r5
 8005a6c:	6822      	ldr	r2, [r4, #0]
 8005a6e:	f012 0210 	ands.w	r2, r2, #16
 8005a72:	d001      	beq.n	8005a78 <_scanf_float+0x370>
 8005a74:	2000      	movs	r0, #0
 8005a76:	e68b      	b.n	8005790 <_scanf_float+0x88>
 8005a78:	7032      	strb	r2, [r6, #0]
 8005a7a:	6823      	ldr	r3, [r4, #0]
 8005a7c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005a80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a84:	d11c      	bne.n	8005ac0 <_scanf_float+0x3b8>
 8005a86:	9b02      	ldr	r3, [sp, #8]
 8005a88:	454b      	cmp	r3, r9
 8005a8a:	eba3 0209 	sub.w	r2, r3, r9
 8005a8e:	d123      	bne.n	8005ad8 <_scanf_float+0x3d0>
 8005a90:	9901      	ldr	r1, [sp, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	4640      	mov	r0, r8
 8005a96:	f002 fbf7 	bl	8008288 <_strtod_r>
 8005a9a:	9b03      	ldr	r3, [sp, #12]
 8005a9c:	6821      	ldr	r1, [r4, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f011 0f02 	tst.w	r1, #2
 8005aa4:	ec57 6b10 	vmov	r6, r7, d0
 8005aa8:	f103 0204 	add.w	r2, r3, #4
 8005aac:	d01f      	beq.n	8005aee <_scanf_float+0x3e6>
 8005aae:	9903      	ldr	r1, [sp, #12]
 8005ab0:	600a      	str	r2, [r1, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	e9c3 6700 	strd	r6, r7, [r3]
 8005ab8:	68e3      	ldr	r3, [r4, #12]
 8005aba:	3301      	adds	r3, #1
 8005abc:	60e3      	str	r3, [r4, #12]
 8005abe:	e7d9      	b.n	8005a74 <_scanf_float+0x36c>
 8005ac0:	9b04      	ldr	r3, [sp, #16]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d0e4      	beq.n	8005a90 <_scanf_float+0x388>
 8005ac6:	9905      	ldr	r1, [sp, #20]
 8005ac8:	230a      	movs	r3, #10
 8005aca:	3101      	adds	r1, #1
 8005acc:	4640      	mov	r0, r8
 8005ace:	f002 fc5b 	bl	8008388 <_strtol_r>
 8005ad2:	9b04      	ldr	r3, [sp, #16]
 8005ad4:	9e05      	ldr	r6, [sp, #20]
 8005ad6:	1ac2      	subs	r2, r0, r3
 8005ad8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005adc:	429e      	cmp	r6, r3
 8005ade:	bf28      	it	cs
 8005ae0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005ae4:	4910      	ldr	r1, [pc, #64]	@ (8005b28 <_scanf_float+0x420>)
 8005ae6:	4630      	mov	r0, r6
 8005ae8:	f000 f8e4 	bl	8005cb4 <siprintf>
 8005aec:	e7d0      	b.n	8005a90 <_scanf_float+0x388>
 8005aee:	f011 0f04 	tst.w	r1, #4
 8005af2:	9903      	ldr	r1, [sp, #12]
 8005af4:	600a      	str	r2, [r1, #0]
 8005af6:	d1dc      	bne.n	8005ab2 <_scanf_float+0x3aa>
 8005af8:	681d      	ldr	r5, [r3, #0]
 8005afa:	4632      	mov	r2, r6
 8005afc:	463b      	mov	r3, r7
 8005afe:	4630      	mov	r0, r6
 8005b00:	4639      	mov	r1, r7
 8005b02:	f7fb f813 	bl	8000b2c <__aeabi_dcmpun>
 8005b06:	b128      	cbz	r0, 8005b14 <_scanf_float+0x40c>
 8005b08:	4808      	ldr	r0, [pc, #32]	@ (8005b2c <_scanf_float+0x424>)
 8005b0a:	f000 f9b7 	bl	8005e7c <nanf>
 8005b0e:	ed85 0a00 	vstr	s0, [r5]
 8005b12:	e7d1      	b.n	8005ab8 <_scanf_float+0x3b0>
 8005b14:	4630      	mov	r0, r6
 8005b16:	4639      	mov	r1, r7
 8005b18:	f7fb f866 	bl	8000be8 <__aeabi_d2f>
 8005b1c:	6028      	str	r0, [r5, #0]
 8005b1e:	e7cb      	b.n	8005ab8 <_scanf_float+0x3b0>
 8005b20:	f04f 0900 	mov.w	r9, #0
 8005b24:	e629      	b.n	800577a <_scanf_float+0x72>
 8005b26:	bf00      	nop
 8005b28:	080095d4 	.word	0x080095d4
 8005b2c:	0800996d 	.word	0x0800996d

08005b30 <std>:
 8005b30:	2300      	movs	r3, #0
 8005b32:	b510      	push	{r4, lr}
 8005b34:	4604      	mov	r4, r0
 8005b36:	e9c0 3300 	strd	r3, r3, [r0]
 8005b3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b3e:	6083      	str	r3, [r0, #8]
 8005b40:	8181      	strh	r1, [r0, #12]
 8005b42:	6643      	str	r3, [r0, #100]	@ 0x64
 8005b44:	81c2      	strh	r2, [r0, #14]
 8005b46:	6183      	str	r3, [r0, #24]
 8005b48:	4619      	mov	r1, r3
 8005b4a:	2208      	movs	r2, #8
 8005b4c:	305c      	adds	r0, #92	@ 0x5c
 8005b4e:	f000 f914 	bl	8005d7a <memset>
 8005b52:	4b0d      	ldr	r3, [pc, #52]	@ (8005b88 <std+0x58>)
 8005b54:	6263      	str	r3, [r4, #36]	@ 0x24
 8005b56:	4b0d      	ldr	r3, [pc, #52]	@ (8005b8c <std+0x5c>)
 8005b58:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005b90 <std+0x60>)
 8005b5c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b94 <std+0x64>)
 8005b60:	6323      	str	r3, [r4, #48]	@ 0x30
 8005b62:	4b0d      	ldr	r3, [pc, #52]	@ (8005b98 <std+0x68>)
 8005b64:	6224      	str	r4, [r4, #32]
 8005b66:	429c      	cmp	r4, r3
 8005b68:	d006      	beq.n	8005b78 <std+0x48>
 8005b6a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005b6e:	4294      	cmp	r4, r2
 8005b70:	d002      	beq.n	8005b78 <std+0x48>
 8005b72:	33d0      	adds	r3, #208	@ 0xd0
 8005b74:	429c      	cmp	r4, r3
 8005b76:	d105      	bne.n	8005b84 <std+0x54>
 8005b78:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b80:	f000 b978 	b.w	8005e74 <__retarget_lock_init_recursive>
 8005b84:	bd10      	pop	{r4, pc}
 8005b86:	bf00      	nop
 8005b88:	08005cf5 	.word	0x08005cf5
 8005b8c:	08005d17 	.word	0x08005d17
 8005b90:	08005d4f 	.word	0x08005d4f
 8005b94:	08005d73 	.word	0x08005d73
 8005b98:	20000460 	.word	0x20000460

08005b9c <stdio_exit_handler>:
 8005b9c:	4a02      	ldr	r2, [pc, #8]	@ (8005ba8 <stdio_exit_handler+0xc>)
 8005b9e:	4903      	ldr	r1, [pc, #12]	@ (8005bac <stdio_exit_handler+0x10>)
 8005ba0:	4803      	ldr	r0, [pc, #12]	@ (8005bb0 <stdio_exit_handler+0x14>)
 8005ba2:	f000 b869 	b.w	8005c78 <_fwalk_sglue>
 8005ba6:	bf00      	nop
 8005ba8:	2000000c 	.word	0x2000000c
 8005bac:	08008745 	.word	0x08008745
 8005bb0:	2000001c 	.word	0x2000001c

08005bb4 <cleanup_stdio>:
 8005bb4:	6841      	ldr	r1, [r0, #4]
 8005bb6:	4b0c      	ldr	r3, [pc, #48]	@ (8005be8 <cleanup_stdio+0x34>)
 8005bb8:	4299      	cmp	r1, r3
 8005bba:	b510      	push	{r4, lr}
 8005bbc:	4604      	mov	r4, r0
 8005bbe:	d001      	beq.n	8005bc4 <cleanup_stdio+0x10>
 8005bc0:	f002 fdc0 	bl	8008744 <_fflush_r>
 8005bc4:	68a1      	ldr	r1, [r4, #8]
 8005bc6:	4b09      	ldr	r3, [pc, #36]	@ (8005bec <cleanup_stdio+0x38>)
 8005bc8:	4299      	cmp	r1, r3
 8005bca:	d002      	beq.n	8005bd2 <cleanup_stdio+0x1e>
 8005bcc:	4620      	mov	r0, r4
 8005bce:	f002 fdb9 	bl	8008744 <_fflush_r>
 8005bd2:	68e1      	ldr	r1, [r4, #12]
 8005bd4:	4b06      	ldr	r3, [pc, #24]	@ (8005bf0 <cleanup_stdio+0x3c>)
 8005bd6:	4299      	cmp	r1, r3
 8005bd8:	d004      	beq.n	8005be4 <cleanup_stdio+0x30>
 8005bda:	4620      	mov	r0, r4
 8005bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005be0:	f002 bdb0 	b.w	8008744 <_fflush_r>
 8005be4:	bd10      	pop	{r4, pc}
 8005be6:	bf00      	nop
 8005be8:	20000460 	.word	0x20000460
 8005bec:	200004c8 	.word	0x200004c8
 8005bf0:	20000530 	.word	0x20000530

08005bf4 <global_stdio_init.part.0>:
 8005bf4:	b510      	push	{r4, lr}
 8005bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8005c24 <global_stdio_init.part.0+0x30>)
 8005bf8:	4c0b      	ldr	r4, [pc, #44]	@ (8005c28 <global_stdio_init.part.0+0x34>)
 8005bfa:	4a0c      	ldr	r2, [pc, #48]	@ (8005c2c <global_stdio_init.part.0+0x38>)
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	4620      	mov	r0, r4
 8005c00:	2200      	movs	r2, #0
 8005c02:	2104      	movs	r1, #4
 8005c04:	f7ff ff94 	bl	8005b30 <std>
 8005c08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	2109      	movs	r1, #9
 8005c10:	f7ff ff8e 	bl	8005b30 <std>
 8005c14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005c18:	2202      	movs	r2, #2
 8005c1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c1e:	2112      	movs	r1, #18
 8005c20:	f7ff bf86 	b.w	8005b30 <std>
 8005c24:	20000598 	.word	0x20000598
 8005c28:	20000460 	.word	0x20000460
 8005c2c:	08005b9d 	.word	0x08005b9d

08005c30 <__sfp_lock_acquire>:
 8005c30:	4801      	ldr	r0, [pc, #4]	@ (8005c38 <__sfp_lock_acquire+0x8>)
 8005c32:	f000 b920 	b.w	8005e76 <__retarget_lock_acquire_recursive>
 8005c36:	bf00      	nop
 8005c38:	200005a1 	.word	0x200005a1

08005c3c <__sfp_lock_release>:
 8005c3c:	4801      	ldr	r0, [pc, #4]	@ (8005c44 <__sfp_lock_release+0x8>)
 8005c3e:	f000 b91b 	b.w	8005e78 <__retarget_lock_release_recursive>
 8005c42:	bf00      	nop
 8005c44:	200005a1 	.word	0x200005a1

08005c48 <__sinit>:
 8005c48:	b510      	push	{r4, lr}
 8005c4a:	4604      	mov	r4, r0
 8005c4c:	f7ff fff0 	bl	8005c30 <__sfp_lock_acquire>
 8005c50:	6a23      	ldr	r3, [r4, #32]
 8005c52:	b11b      	cbz	r3, 8005c5c <__sinit+0x14>
 8005c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c58:	f7ff bff0 	b.w	8005c3c <__sfp_lock_release>
 8005c5c:	4b04      	ldr	r3, [pc, #16]	@ (8005c70 <__sinit+0x28>)
 8005c5e:	6223      	str	r3, [r4, #32]
 8005c60:	4b04      	ldr	r3, [pc, #16]	@ (8005c74 <__sinit+0x2c>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d1f5      	bne.n	8005c54 <__sinit+0xc>
 8005c68:	f7ff ffc4 	bl	8005bf4 <global_stdio_init.part.0>
 8005c6c:	e7f2      	b.n	8005c54 <__sinit+0xc>
 8005c6e:	bf00      	nop
 8005c70:	08005bb5 	.word	0x08005bb5
 8005c74:	20000598 	.word	0x20000598

08005c78 <_fwalk_sglue>:
 8005c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c7c:	4607      	mov	r7, r0
 8005c7e:	4688      	mov	r8, r1
 8005c80:	4614      	mov	r4, r2
 8005c82:	2600      	movs	r6, #0
 8005c84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c88:	f1b9 0901 	subs.w	r9, r9, #1
 8005c8c:	d505      	bpl.n	8005c9a <_fwalk_sglue+0x22>
 8005c8e:	6824      	ldr	r4, [r4, #0]
 8005c90:	2c00      	cmp	r4, #0
 8005c92:	d1f7      	bne.n	8005c84 <_fwalk_sglue+0xc>
 8005c94:	4630      	mov	r0, r6
 8005c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c9a:	89ab      	ldrh	r3, [r5, #12]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d907      	bls.n	8005cb0 <_fwalk_sglue+0x38>
 8005ca0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	d003      	beq.n	8005cb0 <_fwalk_sglue+0x38>
 8005ca8:	4629      	mov	r1, r5
 8005caa:	4638      	mov	r0, r7
 8005cac:	47c0      	blx	r8
 8005cae:	4306      	orrs	r6, r0
 8005cb0:	3568      	adds	r5, #104	@ 0x68
 8005cb2:	e7e9      	b.n	8005c88 <_fwalk_sglue+0x10>

08005cb4 <siprintf>:
 8005cb4:	b40e      	push	{r1, r2, r3}
 8005cb6:	b500      	push	{lr}
 8005cb8:	b09c      	sub	sp, #112	@ 0x70
 8005cba:	ab1d      	add	r3, sp, #116	@ 0x74
 8005cbc:	9002      	str	r0, [sp, #8]
 8005cbe:	9006      	str	r0, [sp, #24]
 8005cc0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005cc4:	4809      	ldr	r0, [pc, #36]	@ (8005cec <siprintf+0x38>)
 8005cc6:	9107      	str	r1, [sp, #28]
 8005cc8:	9104      	str	r1, [sp, #16]
 8005cca:	4909      	ldr	r1, [pc, #36]	@ (8005cf0 <siprintf+0x3c>)
 8005ccc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cd0:	9105      	str	r1, [sp, #20]
 8005cd2:	6800      	ldr	r0, [r0, #0]
 8005cd4:	9301      	str	r3, [sp, #4]
 8005cd6:	a902      	add	r1, sp, #8
 8005cd8:	f002 fbb4 	bl	8008444 <_svfiprintf_r>
 8005cdc:	9b02      	ldr	r3, [sp, #8]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	701a      	strb	r2, [r3, #0]
 8005ce2:	b01c      	add	sp, #112	@ 0x70
 8005ce4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ce8:	b003      	add	sp, #12
 8005cea:	4770      	bx	lr
 8005cec:	20000018 	.word	0x20000018
 8005cf0:	ffff0208 	.word	0xffff0208

08005cf4 <__sread>:
 8005cf4:	b510      	push	{r4, lr}
 8005cf6:	460c      	mov	r4, r1
 8005cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cfc:	f000 f86c 	bl	8005dd8 <_read_r>
 8005d00:	2800      	cmp	r0, #0
 8005d02:	bfab      	itete	ge
 8005d04:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005d06:	89a3      	ldrhlt	r3, [r4, #12]
 8005d08:	181b      	addge	r3, r3, r0
 8005d0a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005d0e:	bfac      	ite	ge
 8005d10:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005d12:	81a3      	strhlt	r3, [r4, #12]
 8005d14:	bd10      	pop	{r4, pc}

08005d16 <__swrite>:
 8005d16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d1a:	461f      	mov	r7, r3
 8005d1c:	898b      	ldrh	r3, [r1, #12]
 8005d1e:	05db      	lsls	r3, r3, #23
 8005d20:	4605      	mov	r5, r0
 8005d22:	460c      	mov	r4, r1
 8005d24:	4616      	mov	r6, r2
 8005d26:	d505      	bpl.n	8005d34 <__swrite+0x1e>
 8005d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f000 f840 	bl	8005db4 <_lseek_r>
 8005d34:	89a3      	ldrh	r3, [r4, #12]
 8005d36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d3e:	81a3      	strh	r3, [r4, #12]
 8005d40:	4632      	mov	r2, r6
 8005d42:	463b      	mov	r3, r7
 8005d44:	4628      	mov	r0, r5
 8005d46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d4a:	f000 b857 	b.w	8005dfc <_write_r>

08005d4e <__sseek>:
 8005d4e:	b510      	push	{r4, lr}
 8005d50:	460c      	mov	r4, r1
 8005d52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d56:	f000 f82d 	bl	8005db4 <_lseek_r>
 8005d5a:	1c43      	adds	r3, r0, #1
 8005d5c:	89a3      	ldrh	r3, [r4, #12]
 8005d5e:	bf15      	itete	ne
 8005d60:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005d62:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005d66:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005d6a:	81a3      	strheq	r3, [r4, #12]
 8005d6c:	bf18      	it	ne
 8005d6e:	81a3      	strhne	r3, [r4, #12]
 8005d70:	bd10      	pop	{r4, pc}

08005d72 <__sclose>:
 8005d72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d76:	f000 b80d 	b.w	8005d94 <_close_r>

08005d7a <memset>:
 8005d7a:	4402      	add	r2, r0
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d100      	bne.n	8005d84 <memset+0xa>
 8005d82:	4770      	bx	lr
 8005d84:	f803 1b01 	strb.w	r1, [r3], #1
 8005d88:	e7f9      	b.n	8005d7e <memset+0x4>
	...

08005d8c <_localeconv_r>:
 8005d8c:	4800      	ldr	r0, [pc, #0]	@ (8005d90 <_localeconv_r+0x4>)
 8005d8e:	4770      	bx	lr
 8005d90:	20000158 	.word	0x20000158

08005d94 <_close_r>:
 8005d94:	b538      	push	{r3, r4, r5, lr}
 8005d96:	4d06      	ldr	r5, [pc, #24]	@ (8005db0 <_close_r+0x1c>)
 8005d98:	2300      	movs	r3, #0
 8005d9a:	4604      	mov	r4, r0
 8005d9c:	4608      	mov	r0, r1
 8005d9e:	602b      	str	r3, [r5, #0]
 8005da0:	f7fb fc55 	bl	800164e <_close>
 8005da4:	1c43      	adds	r3, r0, #1
 8005da6:	d102      	bne.n	8005dae <_close_r+0x1a>
 8005da8:	682b      	ldr	r3, [r5, #0]
 8005daa:	b103      	cbz	r3, 8005dae <_close_r+0x1a>
 8005dac:	6023      	str	r3, [r4, #0]
 8005dae:	bd38      	pop	{r3, r4, r5, pc}
 8005db0:	2000059c 	.word	0x2000059c

08005db4 <_lseek_r>:
 8005db4:	b538      	push	{r3, r4, r5, lr}
 8005db6:	4d07      	ldr	r5, [pc, #28]	@ (8005dd4 <_lseek_r+0x20>)
 8005db8:	4604      	mov	r4, r0
 8005dba:	4608      	mov	r0, r1
 8005dbc:	4611      	mov	r1, r2
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	602a      	str	r2, [r5, #0]
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	f7fb fc6a 	bl	800169c <_lseek>
 8005dc8:	1c43      	adds	r3, r0, #1
 8005dca:	d102      	bne.n	8005dd2 <_lseek_r+0x1e>
 8005dcc:	682b      	ldr	r3, [r5, #0]
 8005dce:	b103      	cbz	r3, 8005dd2 <_lseek_r+0x1e>
 8005dd0:	6023      	str	r3, [r4, #0]
 8005dd2:	bd38      	pop	{r3, r4, r5, pc}
 8005dd4:	2000059c 	.word	0x2000059c

08005dd8 <_read_r>:
 8005dd8:	b538      	push	{r3, r4, r5, lr}
 8005dda:	4d07      	ldr	r5, [pc, #28]	@ (8005df8 <_read_r+0x20>)
 8005ddc:	4604      	mov	r4, r0
 8005dde:	4608      	mov	r0, r1
 8005de0:	4611      	mov	r1, r2
 8005de2:	2200      	movs	r2, #0
 8005de4:	602a      	str	r2, [r5, #0]
 8005de6:	461a      	mov	r2, r3
 8005de8:	f7fb fbf8 	bl	80015dc <_read>
 8005dec:	1c43      	adds	r3, r0, #1
 8005dee:	d102      	bne.n	8005df6 <_read_r+0x1e>
 8005df0:	682b      	ldr	r3, [r5, #0]
 8005df2:	b103      	cbz	r3, 8005df6 <_read_r+0x1e>
 8005df4:	6023      	str	r3, [r4, #0]
 8005df6:	bd38      	pop	{r3, r4, r5, pc}
 8005df8:	2000059c 	.word	0x2000059c

08005dfc <_write_r>:
 8005dfc:	b538      	push	{r3, r4, r5, lr}
 8005dfe:	4d07      	ldr	r5, [pc, #28]	@ (8005e1c <_write_r+0x20>)
 8005e00:	4604      	mov	r4, r0
 8005e02:	4608      	mov	r0, r1
 8005e04:	4611      	mov	r1, r2
 8005e06:	2200      	movs	r2, #0
 8005e08:	602a      	str	r2, [r5, #0]
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	f7fb fc03 	bl	8001616 <_write>
 8005e10:	1c43      	adds	r3, r0, #1
 8005e12:	d102      	bne.n	8005e1a <_write_r+0x1e>
 8005e14:	682b      	ldr	r3, [r5, #0]
 8005e16:	b103      	cbz	r3, 8005e1a <_write_r+0x1e>
 8005e18:	6023      	str	r3, [r4, #0]
 8005e1a:	bd38      	pop	{r3, r4, r5, pc}
 8005e1c:	2000059c 	.word	0x2000059c

08005e20 <__errno>:
 8005e20:	4b01      	ldr	r3, [pc, #4]	@ (8005e28 <__errno+0x8>)
 8005e22:	6818      	ldr	r0, [r3, #0]
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	20000018 	.word	0x20000018

08005e2c <__libc_init_array>:
 8005e2c:	b570      	push	{r4, r5, r6, lr}
 8005e2e:	4d0d      	ldr	r5, [pc, #52]	@ (8005e64 <__libc_init_array+0x38>)
 8005e30:	4c0d      	ldr	r4, [pc, #52]	@ (8005e68 <__libc_init_array+0x3c>)
 8005e32:	1b64      	subs	r4, r4, r5
 8005e34:	10a4      	asrs	r4, r4, #2
 8005e36:	2600      	movs	r6, #0
 8005e38:	42a6      	cmp	r6, r4
 8005e3a:	d109      	bne.n	8005e50 <__libc_init_array+0x24>
 8005e3c:	4d0b      	ldr	r5, [pc, #44]	@ (8005e6c <__libc_init_array+0x40>)
 8005e3e:	4c0c      	ldr	r4, [pc, #48]	@ (8005e70 <__libc_init_array+0x44>)
 8005e40:	f003 fb70 	bl	8009524 <_init>
 8005e44:	1b64      	subs	r4, r4, r5
 8005e46:	10a4      	asrs	r4, r4, #2
 8005e48:	2600      	movs	r6, #0
 8005e4a:	42a6      	cmp	r6, r4
 8005e4c:	d105      	bne.n	8005e5a <__libc_init_array+0x2e>
 8005e4e:	bd70      	pop	{r4, r5, r6, pc}
 8005e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e54:	4798      	blx	r3
 8005e56:	3601      	adds	r6, #1
 8005e58:	e7ee      	b.n	8005e38 <__libc_init_array+0xc>
 8005e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e5e:	4798      	blx	r3
 8005e60:	3601      	adds	r6, #1
 8005e62:	e7f2      	b.n	8005e4a <__libc_init_array+0x1e>
 8005e64:	080099d8 	.word	0x080099d8
 8005e68:	080099d8 	.word	0x080099d8
 8005e6c:	080099d8 	.word	0x080099d8
 8005e70:	080099dc 	.word	0x080099dc

08005e74 <__retarget_lock_init_recursive>:
 8005e74:	4770      	bx	lr

08005e76 <__retarget_lock_acquire_recursive>:
 8005e76:	4770      	bx	lr

08005e78 <__retarget_lock_release_recursive>:
 8005e78:	4770      	bx	lr
	...

08005e7c <nanf>:
 8005e7c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005e84 <nanf+0x8>
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	7fc00000 	.word	0x7fc00000

08005e88 <quorem>:
 8005e88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e8c:	6903      	ldr	r3, [r0, #16]
 8005e8e:	690c      	ldr	r4, [r1, #16]
 8005e90:	42a3      	cmp	r3, r4
 8005e92:	4607      	mov	r7, r0
 8005e94:	db7e      	blt.n	8005f94 <quorem+0x10c>
 8005e96:	3c01      	subs	r4, #1
 8005e98:	f101 0814 	add.w	r8, r1, #20
 8005e9c:	00a3      	lsls	r3, r4, #2
 8005e9e:	f100 0514 	add.w	r5, r0, #20
 8005ea2:	9300      	str	r3, [sp, #0]
 8005ea4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ea8:	9301      	str	r3, [sp, #4]
 8005eaa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005eae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005eba:	fbb2 f6f3 	udiv	r6, r2, r3
 8005ebe:	d32e      	bcc.n	8005f1e <quorem+0x96>
 8005ec0:	f04f 0a00 	mov.w	sl, #0
 8005ec4:	46c4      	mov	ip, r8
 8005ec6:	46ae      	mov	lr, r5
 8005ec8:	46d3      	mov	fp, sl
 8005eca:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005ece:	b298      	uxth	r0, r3
 8005ed0:	fb06 a000 	mla	r0, r6, r0, sl
 8005ed4:	0c02      	lsrs	r2, r0, #16
 8005ed6:	0c1b      	lsrs	r3, r3, #16
 8005ed8:	fb06 2303 	mla	r3, r6, r3, r2
 8005edc:	f8de 2000 	ldr.w	r2, [lr]
 8005ee0:	b280      	uxth	r0, r0
 8005ee2:	b292      	uxth	r2, r2
 8005ee4:	1a12      	subs	r2, r2, r0
 8005ee6:	445a      	add	r2, fp
 8005ee8:	f8de 0000 	ldr.w	r0, [lr]
 8005eec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005ef6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005efa:	b292      	uxth	r2, r2
 8005efc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005f00:	45e1      	cmp	r9, ip
 8005f02:	f84e 2b04 	str.w	r2, [lr], #4
 8005f06:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005f0a:	d2de      	bcs.n	8005eca <quorem+0x42>
 8005f0c:	9b00      	ldr	r3, [sp, #0]
 8005f0e:	58eb      	ldr	r3, [r5, r3]
 8005f10:	b92b      	cbnz	r3, 8005f1e <quorem+0x96>
 8005f12:	9b01      	ldr	r3, [sp, #4]
 8005f14:	3b04      	subs	r3, #4
 8005f16:	429d      	cmp	r5, r3
 8005f18:	461a      	mov	r2, r3
 8005f1a:	d32f      	bcc.n	8005f7c <quorem+0xf4>
 8005f1c:	613c      	str	r4, [r7, #16]
 8005f1e:	4638      	mov	r0, r7
 8005f20:	f001 f9c2 	bl	80072a8 <__mcmp>
 8005f24:	2800      	cmp	r0, #0
 8005f26:	db25      	blt.n	8005f74 <quorem+0xec>
 8005f28:	4629      	mov	r1, r5
 8005f2a:	2000      	movs	r0, #0
 8005f2c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005f30:	f8d1 c000 	ldr.w	ip, [r1]
 8005f34:	fa1f fe82 	uxth.w	lr, r2
 8005f38:	fa1f f38c 	uxth.w	r3, ip
 8005f3c:	eba3 030e 	sub.w	r3, r3, lr
 8005f40:	4403      	add	r3, r0
 8005f42:	0c12      	lsrs	r2, r2, #16
 8005f44:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005f48:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f52:	45c1      	cmp	r9, r8
 8005f54:	f841 3b04 	str.w	r3, [r1], #4
 8005f58:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005f5c:	d2e6      	bcs.n	8005f2c <quorem+0xa4>
 8005f5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f66:	b922      	cbnz	r2, 8005f72 <quorem+0xea>
 8005f68:	3b04      	subs	r3, #4
 8005f6a:	429d      	cmp	r5, r3
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	d30b      	bcc.n	8005f88 <quorem+0x100>
 8005f70:	613c      	str	r4, [r7, #16]
 8005f72:	3601      	adds	r6, #1
 8005f74:	4630      	mov	r0, r6
 8005f76:	b003      	add	sp, #12
 8005f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f7c:	6812      	ldr	r2, [r2, #0]
 8005f7e:	3b04      	subs	r3, #4
 8005f80:	2a00      	cmp	r2, #0
 8005f82:	d1cb      	bne.n	8005f1c <quorem+0x94>
 8005f84:	3c01      	subs	r4, #1
 8005f86:	e7c6      	b.n	8005f16 <quorem+0x8e>
 8005f88:	6812      	ldr	r2, [r2, #0]
 8005f8a:	3b04      	subs	r3, #4
 8005f8c:	2a00      	cmp	r2, #0
 8005f8e:	d1ef      	bne.n	8005f70 <quorem+0xe8>
 8005f90:	3c01      	subs	r4, #1
 8005f92:	e7ea      	b.n	8005f6a <quorem+0xe2>
 8005f94:	2000      	movs	r0, #0
 8005f96:	e7ee      	b.n	8005f76 <quorem+0xee>

08005f98 <_dtoa_r>:
 8005f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f9c:	69c7      	ldr	r7, [r0, #28]
 8005f9e:	b099      	sub	sp, #100	@ 0x64
 8005fa0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005fa4:	ec55 4b10 	vmov	r4, r5, d0
 8005fa8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005faa:	9109      	str	r1, [sp, #36]	@ 0x24
 8005fac:	4683      	mov	fp, r0
 8005fae:	920e      	str	r2, [sp, #56]	@ 0x38
 8005fb0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005fb2:	b97f      	cbnz	r7, 8005fd4 <_dtoa_r+0x3c>
 8005fb4:	2010      	movs	r0, #16
 8005fb6:	f000 fdfd 	bl	8006bb4 <malloc>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	f8cb 001c 	str.w	r0, [fp, #28]
 8005fc0:	b920      	cbnz	r0, 8005fcc <_dtoa_r+0x34>
 8005fc2:	4ba7      	ldr	r3, [pc, #668]	@ (8006260 <_dtoa_r+0x2c8>)
 8005fc4:	21ef      	movs	r1, #239	@ 0xef
 8005fc6:	48a7      	ldr	r0, [pc, #668]	@ (8006264 <_dtoa_r+0x2cc>)
 8005fc8:	f002 fc36 	bl	8008838 <__assert_func>
 8005fcc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005fd0:	6007      	str	r7, [r0, #0]
 8005fd2:	60c7      	str	r7, [r0, #12]
 8005fd4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005fd8:	6819      	ldr	r1, [r3, #0]
 8005fda:	b159      	cbz	r1, 8005ff4 <_dtoa_r+0x5c>
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	604a      	str	r2, [r1, #4]
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	4093      	lsls	r3, r2
 8005fe4:	608b      	str	r3, [r1, #8]
 8005fe6:	4658      	mov	r0, fp
 8005fe8:	f000 feda 	bl	8006da0 <_Bfree>
 8005fec:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	601a      	str	r2, [r3, #0]
 8005ff4:	1e2b      	subs	r3, r5, #0
 8005ff6:	bfb9      	ittee	lt
 8005ff8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005ffc:	9303      	strlt	r3, [sp, #12]
 8005ffe:	2300      	movge	r3, #0
 8006000:	6033      	strge	r3, [r6, #0]
 8006002:	9f03      	ldr	r7, [sp, #12]
 8006004:	4b98      	ldr	r3, [pc, #608]	@ (8006268 <_dtoa_r+0x2d0>)
 8006006:	bfbc      	itt	lt
 8006008:	2201      	movlt	r2, #1
 800600a:	6032      	strlt	r2, [r6, #0]
 800600c:	43bb      	bics	r3, r7
 800600e:	d112      	bne.n	8006036 <_dtoa_r+0x9e>
 8006010:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006012:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006016:	6013      	str	r3, [r2, #0]
 8006018:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800601c:	4323      	orrs	r3, r4
 800601e:	f000 854d 	beq.w	8006abc <_dtoa_r+0xb24>
 8006022:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006024:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800627c <_dtoa_r+0x2e4>
 8006028:	2b00      	cmp	r3, #0
 800602a:	f000 854f 	beq.w	8006acc <_dtoa_r+0xb34>
 800602e:	f10a 0303 	add.w	r3, sl, #3
 8006032:	f000 bd49 	b.w	8006ac8 <_dtoa_r+0xb30>
 8006036:	ed9d 7b02 	vldr	d7, [sp, #8]
 800603a:	2200      	movs	r2, #0
 800603c:	ec51 0b17 	vmov	r0, r1, d7
 8006040:	2300      	movs	r3, #0
 8006042:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006046:	f7fa fd3f 	bl	8000ac8 <__aeabi_dcmpeq>
 800604a:	4680      	mov	r8, r0
 800604c:	b158      	cbz	r0, 8006066 <_dtoa_r+0xce>
 800604e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006050:	2301      	movs	r3, #1
 8006052:	6013      	str	r3, [r2, #0]
 8006054:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006056:	b113      	cbz	r3, 800605e <_dtoa_r+0xc6>
 8006058:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800605a:	4b84      	ldr	r3, [pc, #528]	@ (800626c <_dtoa_r+0x2d4>)
 800605c:	6013      	str	r3, [r2, #0]
 800605e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006280 <_dtoa_r+0x2e8>
 8006062:	f000 bd33 	b.w	8006acc <_dtoa_r+0xb34>
 8006066:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800606a:	aa16      	add	r2, sp, #88	@ 0x58
 800606c:	a917      	add	r1, sp, #92	@ 0x5c
 800606e:	4658      	mov	r0, fp
 8006070:	f001 fa3a 	bl	80074e8 <__d2b>
 8006074:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006078:	4681      	mov	r9, r0
 800607a:	2e00      	cmp	r6, #0
 800607c:	d077      	beq.n	800616e <_dtoa_r+0x1d6>
 800607e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006080:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006084:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006088:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800608c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006090:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006094:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006098:	4619      	mov	r1, r3
 800609a:	2200      	movs	r2, #0
 800609c:	4b74      	ldr	r3, [pc, #464]	@ (8006270 <_dtoa_r+0x2d8>)
 800609e:	f7fa f8f3 	bl	8000288 <__aeabi_dsub>
 80060a2:	a369      	add	r3, pc, #420	@ (adr r3, 8006248 <_dtoa_r+0x2b0>)
 80060a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a8:	f7fa faa6 	bl	80005f8 <__aeabi_dmul>
 80060ac:	a368      	add	r3, pc, #416	@ (adr r3, 8006250 <_dtoa_r+0x2b8>)
 80060ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b2:	f7fa f8eb 	bl	800028c <__adddf3>
 80060b6:	4604      	mov	r4, r0
 80060b8:	4630      	mov	r0, r6
 80060ba:	460d      	mov	r5, r1
 80060bc:	f7fa fa32 	bl	8000524 <__aeabi_i2d>
 80060c0:	a365      	add	r3, pc, #404	@ (adr r3, 8006258 <_dtoa_r+0x2c0>)
 80060c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c6:	f7fa fa97 	bl	80005f8 <__aeabi_dmul>
 80060ca:	4602      	mov	r2, r0
 80060cc:	460b      	mov	r3, r1
 80060ce:	4620      	mov	r0, r4
 80060d0:	4629      	mov	r1, r5
 80060d2:	f7fa f8db 	bl	800028c <__adddf3>
 80060d6:	4604      	mov	r4, r0
 80060d8:	460d      	mov	r5, r1
 80060da:	f7fa fd3d 	bl	8000b58 <__aeabi_d2iz>
 80060de:	2200      	movs	r2, #0
 80060e0:	4607      	mov	r7, r0
 80060e2:	2300      	movs	r3, #0
 80060e4:	4620      	mov	r0, r4
 80060e6:	4629      	mov	r1, r5
 80060e8:	f7fa fcf8 	bl	8000adc <__aeabi_dcmplt>
 80060ec:	b140      	cbz	r0, 8006100 <_dtoa_r+0x168>
 80060ee:	4638      	mov	r0, r7
 80060f0:	f7fa fa18 	bl	8000524 <__aeabi_i2d>
 80060f4:	4622      	mov	r2, r4
 80060f6:	462b      	mov	r3, r5
 80060f8:	f7fa fce6 	bl	8000ac8 <__aeabi_dcmpeq>
 80060fc:	b900      	cbnz	r0, 8006100 <_dtoa_r+0x168>
 80060fe:	3f01      	subs	r7, #1
 8006100:	2f16      	cmp	r7, #22
 8006102:	d851      	bhi.n	80061a8 <_dtoa_r+0x210>
 8006104:	4b5b      	ldr	r3, [pc, #364]	@ (8006274 <_dtoa_r+0x2dc>)
 8006106:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800610a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006112:	f7fa fce3 	bl	8000adc <__aeabi_dcmplt>
 8006116:	2800      	cmp	r0, #0
 8006118:	d048      	beq.n	80061ac <_dtoa_r+0x214>
 800611a:	3f01      	subs	r7, #1
 800611c:	2300      	movs	r3, #0
 800611e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006120:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006122:	1b9b      	subs	r3, r3, r6
 8006124:	1e5a      	subs	r2, r3, #1
 8006126:	bf44      	itt	mi
 8006128:	f1c3 0801 	rsbmi	r8, r3, #1
 800612c:	2300      	movmi	r3, #0
 800612e:	9208      	str	r2, [sp, #32]
 8006130:	bf54      	ite	pl
 8006132:	f04f 0800 	movpl.w	r8, #0
 8006136:	9308      	strmi	r3, [sp, #32]
 8006138:	2f00      	cmp	r7, #0
 800613a:	db39      	blt.n	80061b0 <_dtoa_r+0x218>
 800613c:	9b08      	ldr	r3, [sp, #32]
 800613e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006140:	443b      	add	r3, r7
 8006142:	9308      	str	r3, [sp, #32]
 8006144:	2300      	movs	r3, #0
 8006146:	930a      	str	r3, [sp, #40]	@ 0x28
 8006148:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800614a:	2b09      	cmp	r3, #9
 800614c:	d864      	bhi.n	8006218 <_dtoa_r+0x280>
 800614e:	2b05      	cmp	r3, #5
 8006150:	bfc4      	itt	gt
 8006152:	3b04      	subgt	r3, #4
 8006154:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006156:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006158:	f1a3 0302 	sub.w	r3, r3, #2
 800615c:	bfcc      	ite	gt
 800615e:	2400      	movgt	r4, #0
 8006160:	2401      	movle	r4, #1
 8006162:	2b03      	cmp	r3, #3
 8006164:	d863      	bhi.n	800622e <_dtoa_r+0x296>
 8006166:	e8df f003 	tbb	[pc, r3]
 800616a:	372a      	.short	0x372a
 800616c:	5535      	.short	0x5535
 800616e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006172:	441e      	add	r6, r3
 8006174:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006178:	2b20      	cmp	r3, #32
 800617a:	bfc1      	itttt	gt
 800617c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006180:	409f      	lslgt	r7, r3
 8006182:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006186:	fa24 f303 	lsrgt.w	r3, r4, r3
 800618a:	bfd6      	itet	le
 800618c:	f1c3 0320 	rsble	r3, r3, #32
 8006190:	ea47 0003 	orrgt.w	r0, r7, r3
 8006194:	fa04 f003 	lslle.w	r0, r4, r3
 8006198:	f7fa f9b4 	bl	8000504 <__aeabi_ui2d>
 800619c:	2201      	movs	r2, #1
 800619e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80061a2:	3e01      	subs	r6, #1
 80061a4:	9214      	str	r2, [sp, #80]	@ 0x50
 80061a6:	e777      	b.n	8006098 <_dtoa_r+0x100>
 80061a8:	2301      	movs	r3, #1
 80061aa:	e7b8      	b.n	800611e <_dtoa_r+0x186>
 80061ac:	9012      	str	r0, [sp, #72]	@ 0x48
 80061ae:	e7b7      	b.n	8006120 <_dtoa_r+0x188>
 80061b0:	427b      	negs	r3, r7
 80061b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80061b4:	2300      	movs	r3, #0
 80061b6:	eba8 0807 	sub.w	r8, r8, r7
 80061ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80061bc:	e7c4      	b.n	8006148 <_dtoa_r+0x1b0>
 80061be:	2300      	movs	r3, #0
 80061c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80061c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	dc35      	bgt.n	8006234 <_dtoa_r+0x29c>
 80061c8:	2301      	movs	r3, #1
 80061ca:	9300      	str	r3, [sp, #0]
 80061cc:	9307      	str	r3, [sp, #28]
 80061ce:	461a      	mov	r2, r3
 80061d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80061d2:	e00b      	b.n	80061ec <_dtoa_r+0x254>
 80061d4:	2301      	movs	r3, #1
 80061d6:	e7f3      	b.n	80061c0 <_dtoa_r+0x228>
 80061d8:	2300      	movs	r3, #0
 80061da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80061dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80061de:	18fb      	adds	r3, r7, r3
 80061e0:	9300      	str	r3, [sp, #0]
 80061e2:	3301      	adds	r3, #1
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	9307      	str	r3, [sp, #28]
 80061e8:	bfb8      	it	lt
 80061ea:	2301      	movlt	r3, #1
 80061ec:	f8db 001c 	ldr.w	r0, [fp, #28]
 80061f0:	2100      	movs	r1, #0
 80061f2:	2204      	movs	r2, #4
 80061f4:	f102 0514 	add.w	r5, r2, #20
 80061f8:	429d      	cmp	r5, r3
 80061fa:	d91f      	bls.n	800623c <_dtoa_r+0x2a4>
 80061fc:	6041      	str	r1, [r0, #4]
 80061fe:	4658      	mov	r0, fp
 8006200:	f000 fd8e 	bl	8006d20 <_Balloc>
 8006204:	4682      	mov	sl, r0
 8006206:	2800      	cmp	r0, #0
 8006208:	d13c      	bne.n	8006284 <_dtoa_r+0x2ec>
 800620a:	4b1b      	ldr	r3, [pc, #108]	@ (8006278 <_dtoa_r+0x2e0>)
 800620c:	4602      	mov	r2, r0
 800620e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006212:	e6d8      	b.n	8005fc6 <_dtoa_r+0x2e>
 8006214:	2301      	movs	r3, #1
 8006216:	e7e0      	b.n	80061da <_dtoa_r+0x242>
 8006218:	2401      	movs	r4, #1
 800621a:	2300      	movs	r3, #0
 800621c:	9309      	str	r3, [sp, #36]	@ 0x24
 800621e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006220:	f04f 33ff 	mov.w	r3, #4294967295
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	9307      	str	r3, [sp, #28]
 8006228:	2200      	movs	r2, #0
 800622a:	2312      	movs	r3, #18
 800622c:	e7d0      	b.n	80061d0 <_dtoa_r+0x238>
 800622e:	2301      	movs	r3, #1
 8006230:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006232:	e7f5      	b.n	8006220 <_dtoa_r+0x288>
 8006234:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	9307      	str	r3, [sp, #28]
 800623a:	e7d7      	b.n	80061ec <_dtoa_r+0x254>
 800623c:	3101      	adds	r1, #1
 800623e:	0052      	lsls	r2, r2, #1
 8006240:	e7d8      	b.n	80061f4 <_dtoa_r+0x25c>
 8006242:	bf00      	nop
 8006244:	f3af 8000 	nop.w
 8006248:	636f4361 	.word	0x636f4361
 800624c:	3fd287a7 	.word	0x3fd287a7
 8006250:	8b60c8b3 	.word	0x8b60c8b3
 8006254:	3fc68a28 	.word	0x3fc68a28
 8006258:	509f79fb 	.word	0x509f79fb
 800625c:	3fd34413 	.word	0x3fd34413
 8006260:	080095e6 	.word	0x080095e6
 8006264:	080095fd 	.word	0x080095fd
 8006268:	7ff00000 	.word	0x7ff00000
 800626c:	080095b1 	.word	0x080095b1
 8006270:	3ff80000 	.word	0x3ff80000
 8006274:	080096f8 	.word	0x080096f8
 8006278:	08009655 	.word	0x08009655
 800627c:	080095e2 	.word	0x080095e2
 8006280:	080095b0 	.word	0x080095b0
 8006284:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006288:	6018      	str	r0, [r3, #0]
 800628a:	9b07      	ldr	r3, [sp, #28]
 800628c:	2b0e      	cmp	r3, #14
 800628e:	f200 80a4 	bhi.w	80063da <_dtoa_r+0x442>
 8006292:	2c00      	cmp	r4, #0
 8006294:	f000 80a1 	beq.w	80063da <_dtoa_r+0x442>
 8006298:	2f00      	cmp	r7, #0
 800629a:	dd33      	ble.n	8006304 <_dtoa_r+0x36c>
 800629c:	4bad      	ldr	r3, [pc, #692]	@ (8006554 <_dtoa_r+0x5bc>)
 800629e:	f007 020f 	and.w	r2, r7, #15
 80062a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062a6:	ed93 7b00 	vldr	d7, [r3]
 80062aa:	05f8      	lsls	r0, r7, #23
 80062ac:	ed8d 7b04 	vstr	d7, [sp, #16]
 80062b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80062b4:	d516      	bpl.n	80062e4 <_dtoa_r+0x34c>
 80062b6:	4ba8      	ldr	r3, [pc, #672]	@ (8006558 <_dtoa_r+0x5c0>)
 80062b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80062bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80062c0:	f7fa fac4 	bl	800084c <__aeabi_ddiv>
 80062c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062c8:	f004 040f 	and.w	r4, r4, #15
 80062cc:	2603      	movs	r6, #3
 80062ce:	4da2      	ldr	r5, [pc, #648]	@ (8006558 <_dtoa_r+0x5c0>)
 80062d0:	b954      	cbnz	r4, 80062e8 <_dtoa_r+0x350>
 80062d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062da:	f7fa fab7 	bl	800084c <__aeabi_ddiv>
 80062de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062e2:	e028      	b.n	8006336 <_dtoa_r+0x39e>
 80062e4:	2602      	movs	r6, #2
 80062e6:	e7f2      	b.n	80062ce <_dtoa_r+0x336>
 80062e8:	07e1      	lsls	r1, r4, #31
 80062ea:	d508      	bpl.n	80062fe <_dtoa_r+0x366>
 80062ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80062f4:	f7fa f980 	bl	80005f8 <__aeabi_dmul>
 80062f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80062fc:	3601      	adds	r6, #1
 80062fe:	1064      	asrs	r4, r4, #1
 8006300:	3508      	adds	r5, #8
 8006302:	e7e5      	b.n	80062d0 <_dtoa_r+0x338>
 8006304:	f000 80d2 	beq.w	80064ac <_dtoa_r+0x514>
 8006308:	427c      	negs	r4, r7
 800630a:	4b92      	ldr	r3, [pc, #584]	@ (8006554 <_dtoa_r+0x5bc>)
 800630c:	4d92      	ldr	r5, [pc, #584]	@ (8006558 <_dtoa_r+0x5c0>)
 800630e:	f004 020f 	and.w	r2, r4, #15
 8006312:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800631e:	f7fa f96b 	bl	80005f8 <__aeabi_dmul>
 8006322:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006326:	1124      	asrs	r4, r4, #4
 8006328:	2300      	movs	r3, #0
 800632a:	2602      	movs	r6, #2
 800632c:	2c00      	cmp	r4, #0
 800632e:	f040 80b2 	bne.w	8006496 <_dtoa_r+0x4fe>
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1d3      	bne.n	80062de <_dtoa_r+0x346>
 8006336:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006338:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800633c:	2b00      	cmp	r3, #0
 800633e:	f000 80b7 	beq.w	80064b0 <_dtoa_r+0x518>
 8006342:	4b86      	ldr	r3, [pc, #536]	@ (800655c <_dtoa_r+0x5c4>)
 8006344:	2200      	movs	r2, #0
 8006346:	4620      	mov	r0, r4
 8006348:	4629      	mov	r1, r5
 800634a:	f7fa fbc7 	bl	8000adc <__aeabi_dcmplt>
 800634e:	2800      	cmp	r0, #0
 8006350:	f000 80ae 	beq.w	80064b0 <_dtoa_r+0x518>
 8006354:	9b07      	ldr	r3, [sp, #28]
 8006356:	2b00      	cmp	r3, #0
 8006358:	f000 80aa 	beq.w	80064b0 <_dtoa_r+0x518>
 800635c:	9b00      	ldr	r3, [sp, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	dd37      	ble.n	80063d2 <_dtoa_r+0x43a>
 8006362:	1e7b      	subs	r3, r7, #1
 8006364:	9304      	str	r3, [sp, #16]
 8006366:	4620      	mov	r0, r4
 8006368:	4b7d      	ldr	r3, [pc, #500]	@ (8006560 <_dtoa_r+0x5c8>)
 800636a:	2200      	movs	r2, #0
 800636c:	4629      	mov	r1, r5
 800636e:	f7fa f943 	bl	80005f8 <__aeabi_dmul>
 8006372:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006376:	9c00      	ldr	r4, [sp, #0]
 8006378:	3601      	adds	r6, #1
 800637a:	4630      	mov	r0, r6
 800637c:	f7fa f8d2 	bl	8000524 <__aeabi_i2d>
 8006380:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006384:	f7fa f938 	bl	80005f8 <__aeabi_dmul>
 8006388:	4b76      	ldr	r3, [pc, #472]	@ (8006564 <_dtoa_r+0x5cc>)
 800638a:	2200      	movs	r2, #0
 800638c:	f7f9 ff7e 	bl	800028c <__adddf3>
 8006390:	4605      	mov	r5, r0
 8006392:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006396:	2c00      	cmp	r4, #0
 8006398:	f040 808d 	bne.w	80064b6 <_dtoa_r+0x51e>
 800639c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063a0:	4b71      	ldr	r3, [pc, #452]	@ (8006568 <_dtoa_r+0x5d0>)
 80063a2:	2200      	movs	r2, #0
 80063a4:	f7f9 ff70 	bl	8000288 <__aeabi_dsub>
 80063a8:	4602      	mov	r2, r0
 80063aa:	460b      	mov	r3, r1
 80063ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80063b0:	462a      	mov	r2, r5
 80063b2:	4633      	mov	r3, r6
 80063b4:	f7fa fbb0 	bl	8000b18 <__aeabi_dcmpgt>
 80063b8:	2800      	cmp	r0, #0
 80063ba:	f040 828b 	bne.w	80068d4 <_dtoa_r+0x93c>
 80063be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063c2:	462a      	mov	r2, r5
 80063c4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80063c8:	f7fa fb88 	bl	8000adc <__aeabi_dcmplt>
 80063cc:	2800      	cmp	r0, #0
 80063ce:	f040 8128 	bne.w	8006622 <_dtoa_r+0x68a>
 80063d2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80063d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80063da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f2c0 815a 	blt.w	8006696 <_dtoa_r+0x6fe>
 80063e2:	2f0e      	cmp	r7, #14
 80063e4:	f300 8157 	bgt.w	8006696 <_dtoa_r+0x6fe>
 80063e8:	4b5a      	ldr	r3, [pc, #360]	@ (8006554 <_dtoa_r+0x5bc>)
 80063ea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80063ee:	ed93 7b00 	vldr	d7, [r3]
 80063f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	ed8d 7b00 	vstr	d7, [sp]
 80063fa:	da03      	bge.n	8006404 <_dtoa_r+0x46c>
 80063fc:	9b07      	ldr	r3, [sp, #28]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f340 8101 	ble.w	8006606 <_dtoa_r+0x66e>
 8006404:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006408:	4656      	mov	r6, sl
 800640a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800640e:	4620      	mov	r0, r4
 8006410:	4629      	mov	r1, r5
 8006412:	f7fa fa1b 	bl	800084c <__aeabi_ddiv>
 8006416:	f7fa fb9f 	bl	8000b58 <__aeabi_d2iz>
 800641a:	4680      	mov	r8, r0
 800641c:	f7fa f882 	bl	8000524 <__aeabi_i2d>
 8006420:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006424:	f7fa f8e8 	bl	80005f8 <__aeabi_dmul>
 8006428:	4602      	mov	r2, r0
 800642a:	460b      	mov	r3, r1
 800642c:	4620      	mov	r0, r4
 800642e:	4629      	mov	r1, r5
 8006430:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006434:	f7f9 ff28 	bl	8000288 <__aeabi_dsub>
 8006438:	f806 4b01 	strb.w	r4, [r6], #1
 800643c:	9d07      	ldr	r5, [sp, #28]
 800643e:	eba6 040a 	sub.w	r4, r6, sl
 8006442:	42a5      	cmp	r5, r4
 8006444:	4602      	mov	r2, r0
 8006446:	460b      	mov	r3, r1
 8006448:	f040 8117 	bne.w	800667a <_dtoa_r+0x6e2>
 800644c:	f7f9 ff1e 	bl	800028c <__adddf3>
 8006450:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006454:	4604      	mov	r4, r0
 8006456:	460d      	mov	r5, r1
 8006458:	f7fa fb5e 	bl	8000b18 <__aeabi_dcmpgt>
 800645c:	2800      	cmp	r0, #0
 800645e:	f040 80f9 	bne.w	8006654 <_dtoa_r+0x6bc>
 8006462:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006466:	4620      	mov	r0, r4
 8006468:	4629      	mov	r1, r5
 800646a:	f7fa fb2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800646e:	b118      	cbz	r0, 8006478 <_dtoa_r+0x4e0>
 8006470:	f018 0f01 	tst.w	r8, #1
 8006474:	f040 80ee 	bne.w	8006654 <_dtoa_r+0x6bc>
 8006478:	4649      	mov	r1, r9
 800647a:	4658      	mov	r0, fp
 800647c:	f000 fc90 	bl	8006da0 <_Bfree>
 8006480:	2300      	movs	r3, #0
 8006482:	7033      	strb	r3, [r6, #0]
 8006484:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006486:	3701      	adds	r7, #1
 8006488:	601f      	str	r7, [r3, #0]
 800648a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800648c:	2b00      	cmp	r3, #0
 800648e:	f000 831d 	beq.w	8006acc <_dtoa_r+0xb34>
 8006492:	601e      	str	r6, [r3, #0]
 8006494:	e31a      	b.n	8006acc <_dtoa_r+0xb34>
 8006496:	07e2      	lsls	r2, r4, #31
 8006498:	d505      	bpl.n	80064a6 <_dtoa_r+0x50e>
 800649a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800649e:	f7fa f8ab 	bl	80005f8 <__aeabi_dmul>
 80064a2:	3601      	adds	r6, #1
 80064a4:	2301      	movs	r3, #1
 80064a6:	1064      	asrs	r4, r4, #1
 80064a8:	3508      	adds	r5, #8
 80064aa:	e73f      	b.n	800632c <_dtoa_r+0x394>
 80064ac:	2602      	movs	r6, #2
 80064ae:	e742      	b.n	8006336 <_dtoa_r+0x39e>
 80064b0:	9c07      	ldr	r4, [sp, #28]
 80064b2:	9704      	str	r7, [sp, #16]
 80064b4:	e761      	b.n	800637a <_dtoa_r+0x3e2>
 80064b6:	4b27      	ldr	r3, [pc, #156]	@ (8006554 <_dtoa_r+0x5bc>)
 80064b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80064ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80064be:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80064c2:	4454      	add	r4, sl
 80064c4:	2900      	cmp	r1, #0
 80064c6:	d053      	beq.n	8006570 <_dtoa_r+0x5d8>
 80064c8:	4928      	ldr	r1, [pc, #160]	@ (800656c <_dtoa_r+0x5d4>)
 80064ca:	2000      	movs	r0, #0
 80064cc:	f7fa f9be 	bl	800084c <__aeabi_ddiv>
 80064d0:	4633      	mov	r3, r6
 80064d2:	462a      	mov	r2, r5
 80064d4:	f7f9 fed8 	bl	8000288 <__aeabi_dsub>
 80064d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80064dc:	4656      	mov	r6, sl
 80064de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064e2:	f7fa fb39 	bl	8000b58 <__aeabi_d2iz>
 80064e6:	4605      	mov	r5, r0
 80064e8:	f7fa f81c 	bl	8000524 <__aeabi_i2d>
 80064ec:	4602      	mov	r2, r0
 80064ee:	460b      	mov	r3, r1
 80064f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064f4:	f7f9 fec8 	bl	8000288 <__aeabi_dsub>
 80064f8:	3530      	adds	r5, #48	@ 0x30
 80064fa:	4602      	mov	r2, r0
 80064fc:	460b      	mov	r3, r1
 80064fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006502:	f806 5b01 	strb.w	r5, [r6], #1
 8006506:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800650a:	f7fa fae7 	bl	8000adc <__aeabi_dcmplt>
 800650e:	2800      	cmp	r0, #0
 8006510:	d171      	bne.n	80065f6 <_dtoa_r+0x65e>
 8006512:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006516:	4911      	ldr	r1, [pc, #68]	@ (800655c <_dtoa_r+0x5c4>)
 8006518:	2000      	movs	r0, #0
 800651a:	f7f9 feb5 	bl	8000288 <__aeabi_dsub>
 800651e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006522:	f7fa fadb 	bl	8000adc <__aeabi_dcmplt>
 8006526:	2800      	cmp	r0, #0
 8006528:	f040 8095 	bne.w	8006656 <_dtoa_r+0x6be>
 800652c:	42a6      	cmp	r6, r4
 800652e:	f43f af50 	beq.w	80063d2 <_dtoa_r+0x43a>
 8006532:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006536:	4b0a      	ldr	r3, [pc, #40]	@ (8006560 <_dtoa_r+0x5c8>)
 8006538:	2200      	movs	r2, #0
 800653a:	f7fa f85d 	bl	80005f8 <__aeabi_dmul>
 800653e:	4b08      	ldr	r3, [pc, #32]	@ (8006560 <_dtoa_r+0x5c8>)
 8006540:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006544:	2200      	movs	r2, #0
 8006546:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800654a:	f7fa f855 	bl	80005f8 <__aeabi_dmul>
 800654e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006552:	e7c4      	b.n	80064de <_dtoa_r+0x546>
 8006554:	080096f8 	.word	0x080096f8
 8006558:	080096d0 	.word	0x080096d0
 800655c:	3ff00000 	.word	0x3ff00000
 8006560:	40240000 	.word	0x40240000
 8006564:	401c0000 	.word	0x401c0000
 8006568:	40140000 	.word	0x40140000
 800656c:	3fe00000 	.word	0x3fe00000
 8006570:	4631      	mov	r1, r6
 8006572:	4628      	mov	r0, r5
 8006574:	f7fa f840 	bl	80005f8 <__aeabi_dmul>
 8006578:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800657c:	9415      	str	r4, [sp, #84]	@ 0x54
 800657e:	4656      	mov	r6, sl
 8006580:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006584:	f7fa fae8 	bl	8000b58 <__aeabi_d2iz>
 8006588:	4605      	mov	r5, r0
 800658a:	f7f9 ffcb 	bl	8000524 <__aeabi_i2d>
 800658e:	4602      	mov	r2, r0
 8006590:	460b      	mov	r3, r1
 8006592:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006596:	f7f9 fe77 	bl	8000288 <__aeabi_dsub>
 800659a:	3530      	adds	r5, #48	@ 0x30
 800659c:	f806 5b01 	strb.w	r5, [r6], #1
 80065a0:	4602      	mov	r2, r0
 80065a2:	460b      	mov	r3, r1
 80065a4:	42a6      	cmp	r6, r4
 80065a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80065aa:	f04f 0200 	mov.w	r2, #0
 80065ae:	d124      	bne.n	80065fa <_dtoa_r+0x662>
 80065b0:	4bac      	ldr	r3, [pc, #688]	@ (8006864 <_dtoa_r+0x8cc>)
 80065b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80065b6:	f7f9 fe69 	bl	800028c <__adddf3>
 80065ba:	4602      	mov	r2, r0
 80065bc:	460b      	mov	r3, r1
 80065be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065c2:	f7fa faa9 	bl	8000b18 <__aeabi_dcmpgt>
 80065c6:	2800      	cmp	r0, #0
 80065c8:	d145      	bne.n	8006656 <_dtoa_r+0x6be>
 80065ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80065ce:	49a5      	ldr	r1, [pc, #660]	@ (8006864 <_dtoa_r+0x8cc>)
 80065d0:	2000      	movs	r0, #0
 80065d2:	f7f9 fe59 	bl	8000288 <__aeabi_dsub>
 80065d6:	4602      	mov	r2, r0
 80065d8:	460b      	mov	r3, r1
 80065da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065de:	f7fa fa7d 	bl	8000adc <__aeabi_dcmplt>
 80065e2:	2800      	cmp	r0, #0
 80065e4:	f43f aef5 	beq.w	80063d2 <_dtoa_r+0x43a>
 80065e8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80065ea:	1e73      	subs	r3, r6, #1
 80065ec:	9315      	str	r3, [sp, #84]	@ 0x54
 80065ee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80065f2:	2b30      	cmp	r3, #48	@ 0x30
 80065f4:	d0f8      	beq.n	80065e8 <_dtoa_r+0x650>
 80065f6:	9f04      	ldr	r7, [sp, #16]
 80065f8:	e73e      	b.n	8006478 <_dtoa_r+0x4e0>
 80065fa:	4b9b      	ldr	r3, [pc, #620]	@ (8006868 <_dtoa_r+0x8d0>)
 80065fc:	f7f9 fffc 	bl	80005f8 <__aeabi_dmul>
 8006600:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006604:	e7bc      	b.n	8006580 <_dtoa_r+0x5e8>
 8006606:	d10c      	bne.n	8006622 <_dtoa_r+0x68a>
 8006608:	4b98      	ldr	r3, [pc, #608]	@ (800686c <_dtoa_r+0x8d4>)
 800660a:	2200      	movs	r2, #0
 800660c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006610:	f7f9 fff2 	bl	80005f8 <__aeabi_dmul>
 8006614:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006618:	f7fa fa74 	bl	8000b04 <__aeabi_dcmpge>
 800661c:	2800      	cmp	r0, #0
 800661e:	f000 8157 	beq.w	80068d0 <_dtoa_r+0x938>
 8006622:	2400      	movs	r4, #0
 8006624:	4625      	mov	r5, r4
 8006626:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006628:	43db      	mvns	r3, r3
 800662a:	9304      	str	r3, [sp, #16]
 800662c:	4656      	mov	r6, sl
 800662e:	2700      	movs	r7, #0
 8006630:	4621      	mov	r1, r4
 8006632:	4658      	mov	r0, fp
 8006634:	f000 fbb4 	bl	8006da0 <_Bfree>
 8006638:	2d00      	cmp	r5, #0
 800663a:	d0dc      	beq.n	80065f6 <_dtoa_r+0x65e>
 800663c:	b12f      	cbz	r7, 800664a <_dtoa_r+0x6b2>
 800663e:	42af      	cmp	r7, r5
 8006640:	d003      	beq.n	800664a <_dtoa_r+0x6b2>
 8006642:	4639      	mov	r1, r7
 8006644:	4658      	mov	r0, fp
 8006646:	f000 fbab 	bl	8006da0 <_Bfree>
 800664a:	4629      	mov	r1, r5
 800664c:	4658      	mov	r0, fp
 800664e:	f000 fba7 	bl	8006da0 <_Bfree>
 8006652:	e7d0      	b.n	80065f6 <_dtoa_r+0x65e>
 8006654:	9704      	str	r7, [sp, #16]
 8006656:	4633      	mov	r3, r6
 8006658:	461e      	mov	r6, r3
 800665a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800665e:	2a39      	cmp	r2, #57	@ 0x39
 8006660:	d107      	bne.n	8006672 <_dtoa_r+0x6da>
 8006662:	459a      	cmp	sl, r3
 8006664:	d1f8      	bne.n	8006658 <_dtoa_r+0x6c0>
 8006666:	9a04      	ldr	r2, [sp, #16]
 8006668:	3201      	adds	r2, #1
 800666a:	9204      	str	r2, [sp, #16]
 800666c:	2230      	movs	r2, #48	@ 0x30
 800666e:	f88a 2000 	strb.w	r2, [sl]
 8006672:	781a      	ldrb	r2, [r3, #0]
 8006674:	3201      	adds	r2, #1
 8006676:	701a      	strb	r2, [r3, #0]
 8006678:	e7bd      	b.n	80065f6 <_dtoa_r+0x65e>
 800667a:	4b7b      	ldr	r3, [pc, #492]	@ (8006868 <_dtoa_r+0x8d0>)
 800667c:	2200      	movs	r2, #0
 800667e:	f7f9 ffbb 	bl	80005f8 <__aeabi_dmul>
 8006682:	2200      	movs	r2, #0
 8006684:	2300      	movs	r3, #0
 8006686:	4604      	mov	r4, r0
 8006688:	460d      	mov	r5, r1
 800668a:	f7fa fa1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800668e:	2800      	cmp	r0, #0
 8006690:	f43f aebb 	beq.w	800640a <_dtoa_r+0x472>
 8006694:	e6f0      	b.n	8006478 <_dtoa_r+0x4e0>
 8006696:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006698:	2a00      	cmp	r2, #0
 800669a:	f000 80db 	beq.w	8006854 <_dtoa_r+0x8bc>
 800669e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066a0:	2a01      	cmp	r2, #1
 80066a2:	f300 80bf 	bgt.w	8006824 <_dtoa_r+0x88c>
 80066a6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80066a8:	2a00      	cmp	r2, #0
 80066aa:	f000 80b7 	beq.w	800681c <_dtoa_r+0x884>
 80066ae:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80066b2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80066b4:	4646      	mov	r6, r8
 80066b6:	9a08      	ldr	r2, [sp, #32]
 80066b8:	2101      	movs	r1, #1
 80066ba:	441a      	add	r2, r3
 80066bc:	4658      	mov	r0, fp
 80066be:	4498      	add	r8, r3
 80066c0:	9208      	str	r2, [sp, #32]
 80066c2:	f000 fc6b 	bl	8006f9c <__i2b>
 80066c6:	4605      	mov	r5, r0
 80066c8:	b15e      	cbz	r6, 80066e2 <_dtoa_r+0x74a>
 80066ca:	9b08      	ldr	r3, [sp, #32]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	dd08      	ble.n	80066e2 <_dtoa_r+0x74a>
 80066d0:	42b3      	cmp	r3, r6
 80066d2:	9a08      	ldr	r2, [sp, #32]
 80066d4:	bfa8      	it	ge
 80066d6:	4633      	movge	r3, r6
 80066d8:	eba8 0803 	sub.w	r8, r8, r3
 80066dc:	1af6      	subs	r6, r6, r3
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	9308      	str	r3, [sp, #32]
 80066e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066e4:	b1f3      	cbz	r3, 8006724 <_dtoa_r+0x78c>
 80066e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	f000 80b7 	beq.w	800685c <_dtoa_r+0x8c4>
 80066ee:	b18c      	cbz	r4, 8006714 <_dtoa_r+0x77c>
 80066f0:	4629      	mov	r1, r5
 80066f2:	4622      	mov	r2, r4
 80066f4:	4658      	mov	r0, fp
 80066f6:	f000 fd11 	bl	800711c <__pow5mult>
 80066fa:	464a      	mov	r2, r9
 80066fc:	4601      	mov	r1, r0
 80066fe:	4605      	mov	r5, r0
 8006700:	4658      	mov	r0, fp
 8006702:	f000 fc61 	bl	8006fc8 <__multiply>
 8006706:	4649      	mov	r1, r9
 8006708:	9004      	str	r0, [sp, #16]
 800670a:	4658      	mov	r0, fp
 800670c:	f000 fb48 	bl	8006da0 <_Bfree>
 8006710:	9b04      	ldr	r3, [sp, #16]
 8006712:	4699      	mov	r9, r3
 8006714:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006716:	1b1a      	subs	r2, r3, r4
 8006718:	d004      	beq.n	8006724 <_dtoa_r+0x78c>
 800671a:	4649      	mov	r1, r9
 800671c:	4658      	mov	r0, fp
 800671e:	f000 fcfd 	bl	800711c <__pow5mult>
 8006722:	4681      	mov	r9, r0
 8006724:	2101      	movs	r1, #1
 8006726:	4658      	mov	r0, fp
 8006728:	f000 fc38 	bl	8006f9c <__i2b>
 800672c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800672e:	4604      	mov	r4, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	f000 81cf 	beq.w	8006ad4 <_dtoa_r+0xb3c>
 8006736:	461a      	mov	r2, r3
 8006738:	4601      	mov	r1, r0
 800673a:	4658      	mov	r0, fp
 800673c:	f000 fcee 	bl	800711c <__pow5mult>
 8006740:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006742:	2b01      	cmp	r3, #1
 8006744:	4604      	mov	r4, r0
 8006746:	f300 8095 	bgt.w	8006874 <_dtoa_r+0x8dc>
 800674a:	9b02      	ldr	r3, [sp, #8]
 800674c:	2b00      	cmp	r3, #0
 800674e:	f040 8087 	bne.w	8006860 <_dtoa_r+0x8c8>
 8006752:	9b03      	ldr	r3, [sp, #12]
 8006754:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006758:	2b00      	cmp	r3, #0
 800675a:	f040 8089 	bne.w	8006870 <_dtoa_r+0x8d8>
 800675e:	9b03      	ldr	r3, [sp, #12]
 8006760:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006764:	0d1b      	lsrs	r3, r3, #20
 8006766:	051b      	lsls	r3, r3, #20
 8006768:	b12b      	cbz	r3, 8006776 <_dtoa_r+0x7de>
 800676a:	9b08      	ldr	r3, [sp, #32]
 800676c:	3301      	adds	r3, #1
 800676e:	9308      	str	r3, [sp, #32]
 8006770:	f108 0801 	add.w	r8, r8, #1
 8006774:	2301      	movs	r3, #1
 8006776:	930a      	str	r3, [sp, #40]	@ 0x28
 8006778:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800677a:	2b00      	cmp	r3, #0
 800677c:	f000 81b0 	beq.w	8006ae0 <_dtoa_r+0xb48>
 8006780:	6923      	ldr	r3, [r4, #16]
 8006782:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006786:	6918      	ldr	r0, [r3, #16]
 8006788:	f000 fbbc 	bl	8006f04 <__hi0bits>
 800678c:	f1c0 0020 	rsb	r0, r0, #32
 8006790:	9b08      	ldr	r3, [sp, #32]
 8006792:	4418      	add	r0, r3
 8006794:	f010 001f 	ands.w	r0, r0, #31
 8006798:	d077      	beq.n	800688a <_dtoa_r+0x8f2>
 800679a:	f1c0 0320 	rsb	r3, r0, #32
 800679e:	2b04      	cmp	r3, #4
 80067a0:	dd6b      	ble.n	800687a <_dtoa_r+0x8e2>
 80067a2:	9b08      	ldr	r3, [sp, #32]
 80067a4:	f1c0 001c 	rsb	r0, r0, #28
 80067a8:	4403      	add	r3, r0
 80067aa:	4480      	add	r8, r0
 80067ac:	4406      	add	r6, r0
 80067ae:	9308      	str	r3, [sp, #32]
 80067b0:	f1b8 0f00 	cmp.w	r8, #0
 80067b4:	dd05      	ble.n	80067c2 <_dtoa_r+0x82a>
 80067b6:	4649      	mov	r1, r9
 80067b8:	4642      	mov	r2, r8
 80067ba:	4658      	mov	r0, fp
 80067bc:	f000 fd08 	bl	80071d0 <__lshift>
 80067c0:	4681      	mov	r9, r0
 80067c2:	9b08      	ldr	r3, [sp, #32]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	dd05      	ble.n	80067d4 <_dtoa_r+0x83c>
 80067c8:	4621      	mov	r1, r4
 80067ca:	461a      	mov	r2, r3
 80067cc:	4658      	mov	r0, fp
 80067ce:	f000 fcff 	bl	80071d0 <__lshift>
 80067d2:	4604      	mov	r4, r0
 80067d4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d059      	beq.n	800688e <_dtoa_r+0x8f6>
 80067da:	4621      	mov	r1, r4
 80067dc:	4648      	mov	r0, r9
 80067de:	f000 fd63 	bl	80072a8 <__mcmp>
 80067e2:	2800      	cmp	r0, #0
 80067e4:	da53      	bge.n	800688e <_dtoa_r+0x8f6>
 80067e6:	1e7b      	subs	r3, r7, #1
 80067e8:	9304      	str	r3, [sp, #16]
 80067ea:	4649      	mov	r1, r9
 80067ec:	2300      	movs	r3, #0
 80067ee:	220a      	movs	r2, #10
 80067f0:	4658      	mov	r0, fp
 80067f2:	f000 faf7 	bl	8006de4 <__multadd>
 80067f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067f8:	4681      	mov	r9, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	f000 8172 	beq.w	8006ae4 <_dtoa_r+0xb4c>
 8006800:	2300      	movs	r3, #0
 8006802:	4629      	mov	r1, r5
 8006804:	220a      	movs	r2, #10
 8006806:	4658      	mov	r0, fp
 8006808:	f000 faec 	bl	8006de4 <__multadd>
 800680c:	9b00      	ldr	r3, [sp, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	4605      	mov	r5, r0
 8006812:	dc67      	bgt.n	80068e4 <_dtoa_r+0x94c>
 8006814:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006816:	2b02      	cmp	r3, #2
 8006818:	dc41      	bgt.n	800689e <_dtoa_r+0x906>
 800681a:	e063      	b.n	80068e4 <_dtoa_r+0x94c>
 800681c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800681e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006822:	e746      	b.n	80066b2 <_dtoa_r+0x71a>
 8006824:	9b07      	ldr	r3, [sp, #28]
 8006826:	1e5c      	subs	r4, r3, #1
 8006828:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800682a:	42a3      	cmp	r3, r4
 800682c:	bfbf      	itttt	lt
 800682e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006830:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006832:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006834:	1ae3      	sublt	r3, r4, r3
 8006836:	bfb4      	ite	lt
 8006838:	18d2      	addlt	r2, r2, r3
 800683a:	1b1c      	subge	r4, r3, r4
 800683c:	9b07      	ldr	r3, [sp, #28]
 800683e:	bfbc      	itt	lt
 8006840:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006842:	2400      	movlt	r4, #0
 8006844:	2b00      	cmp	r3, #0
 8006846:	bfb5      	itete	lt
 8006848:	eba8 0603 	sublt.w	r6, r8, r3
 800684c:	9b07      	ldrge	r3, [sp, #28]
 800684e:	2300      	movlt	r3, #0
 8006850:	4646      	movge	r6, r8
 8006852:	e730      	b.n	80066b6 <_dtoa_r+0x71e>
 8006854:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006856:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006858:	4646      	mov	r6, r8
 800685a:	e735      	b.n	80066c8 <_dtoa_r+0x730>
 800685c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800685e:	e75c      	b.n	800671a <_dtoa_r+0x782>
 8006860:	2300      	movs	r3, #0
 8006862:	e788      	b.n	8006776 <_dtoa_r+0x7de>
 8006864:	3fe00000 	.word	0x3fe00000
 8006868:	40240000 	.word	0x40240000
 800686c:	40140000 	.word	0x40140000
 8006870:	9b02      	ldr	r3, [sp, #8]
 8006872:	e780      	b.n	8006776 <_dtoa_r+0x7de>
 8006874:	2300      	movs	r3, #0
 8006876:	930a      	str	r3, [sp, #40]	@ 0x28
 8006878:	e782      	b.n	8006780 <_dtoa_r+0x7e8>
 800687a:	d099      	beq.n	80067b0 <_dtoa_r+0x818>
 800687c:	9a08      	ldr	r2, [sp, #32]
 800687e:	331c      	adds	r3, #28
 8006880:	441a      	add	r2, r3
 8006882:	4498      	add	r8, r3
 8006884:	441e      	add	r6, r3
 8006886:	9208      	str	r2, [sp, #32]
 8006888:	e792      	b.n	80067b0 <_dtoa_r+0x818>
 800688a:	4603      	mov	r3, r0
 800688c:	e7f6      	b.n	800687c <_dtoa_r+0x8e4>
 800688e:	9b07      	ldr	r3, [sp, #28]
 8006890:	9704      	str	r7, [sp, #16]
 8006892:	2b00      	cmp	r3, #0
 8006894:	dc20      	bgt.n	80068d8 <_dtoa_r+0x940>
 8006896:	9300      	str	r3, [sp, #0]
 8006898:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800689a:	2b02      	cmp	r3, #2
 800689c:	dd1e      	ble.n	80068dc <_dtoa_r+0x944>
 800689e:	9b00      	ldr	r3, [sp, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f47f aec0 	bne.w	8006626 <_dtoa_r+0x68e>
 80068a6:	4621      	mov	r1, r4
 80068a8:	2205      	movs	r2, #5
 80068aa:	4658      	mov	r0, fp
 80068ac:	f000 fa9a 	bl	8006de4 <__multadd>
 80068b0:	4601      	mov	r1, r0
 80068b2:	4604      	mov	r4, r0
 80068b4:	4648      	mov	r0, r9
 80068b6:	f000 fcf7 	bl	80072a8 <__mcmp>
 80068ba:	2800      	cmp	r0, #0
 80068bc:	f77f aeb3 	ble.w	8006626 <_dtoa_r+0x68e>
 80068c0:	4656      	mov	r6, sl
 80068c2:	2331      	movs	r3, #49	@ 0x31
 80068c4:	f806 3b01 	strb.w	r3, [r6], #1
 80068c8:	9b04      	ldr	r3, [sp, #16]
 80068ca:	3301      	adds	r3, #1
 80068cc:	9304      	str	r3, [sp, #16]
 80068ce:	e6ae      	b.n	800662e <_dtoa_r+0x696>
 80068d0:	9c07      	ldr	r4, [sp, #28]
 80068d2:	9704      	str	r7, [sp, #16]
 80068d4:	4625      	mov	r5, r4
 80068d6:	e7f3      	b.n	80068c0 <_dtoa_r+0x928>
 80068d8:	9b07      	ldr	r3, [sp, #28]
 80068da:	9300      	str	r3, [sp, #0]
 80068dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068de:	2b00      	cmp	r3, #0
 80068e0:	f000 8104 	beq.w	8006aec <_dtoa_r+0xb54>
 80068e4:	2e00      	cmp	r6, #0
 80068e6:	dd05      	ble.n	80068f4 <_dtoa_r+0x95c>
 80068e8:	4629      	mov	r1, r5
 80068ea:	4632      	mov	r2, r6
 80068ec:	4658      	mov	r0, fp
 80068ee:	f000 fc6f 	bl	80071d0 <__lshift>
 80068f2:	4605      	mov	r5, r0
 80068f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d05a      	beq.n	80069b0 <_dtoa_r+0xa18>
 80068fa:	6869      	ldr	r1, [r5, #4]
 80068fc:	4658      	mov	r0, fp
 80068fe:	f000 fa0f 	bl	8006d20 <_Balloc>
 8006902:	4606      	mov	r6, r0
 8006904:	b928      	cbnz	r0, 8006912 <_dtoa_r+0x97a>
 8006906:	4b84      	ldr	r3, [pc, #528]	@ (8006b18 <_dtoa_r+0xb80>)
 8006908:	4602      	mov	r2, r0
 800690a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800690e:	f7ff bb5a 	b.w	8005fc6 <_dtoa_r+0x2e>
 8006912:	692a      	ldr	r2, [r5, #16]
 8006914:	3202      	adds	r2, #2
 8006916:	0092      	lsls	r2, r2, #2
 8006918:	f105 010c 	add.w	r1, r5, #12
 800691c:	300c      	adds	r0, #12
 800691e:	f001 ff75 	bl	800880c <memcpy>
 8006922:	2201      	movs	r2, #1
 8006924:	4631      	mov	r1, r6
 8006926:	4658      	mov	r0, fp
 8006928:	f000 fc52 	bl	80071d0 <__lshift>
 800692c:	f10a 0301 	add.w	r3, sl, #1
 8006930:	9307      	str	r3, [sp, #28]
 8006932:	9b00      	ldr	r3, [sp, #0]
 8006934:	4453      	add	r3, sl
 8006936:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006938:	9b02      	ldr	r3, [sp, #8]
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	462f      	mov	r7, r5
 8006940:	930a      	str	r3, [sp, #40]	@ 0x28
 8006942:	4605      	mov	r5, r0
 8006944:	9b07      	ldr	r3, [sp, #28]
 8006946:	4621      	mov	r1, r4
 8006948:	3b01      	subs	r3, #1
 800694a:	4648      	mov	r0, r9
 800694c:	9300      	str	r3, [sp, #0]
 800694e:	f7ff fa9b 	bl	8005e88 <quorem>
 8006952:	4639      	mov	r1, r7
 8006954:	9002      	str	r0, [sp, #8]
 8006956:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800695a:	4648      	mov	r0, r9
 800695c:	f000 fca4 	bl	80072a8 <__mcmp>
 8006960:	462a      	mov	r2, r5
 8006962:	9008      	str	r0, [sp, #32]
 8006964:	4621      	mov	r1, r4
 8006966:	4658      	mov	r0, fp
 8006968:	f000 fcba 	bl	80072e0 <__mdiff>
 800696c:	68c2      	ldr	r2, [r0, #12]
 800696e:	4606      	mov	r6, r0
 8006970:	bb02      	cbnz	r2, 80069b4 <_dtoa_r+0xa1c>
 8006972:	4601      	mov	r1, r0
 8006974:	4648      	mov	r0, r9
 8006976:	f000 fc97 	bl	80072a8 <__mcmp>
 800697a:	4602      	mov	r2, r0
 800697c:	4631      	mov	r1, r6
 800697e:	4658      	mov	r0, fp
 8006980:	920e      	str	r2, [sp, #56]	@ 0x38
 8006982:	f000 fa0d 	bl	8006da0 <_Bfree>
 8006986:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006988:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800698a:	9e07      	ldr	r6, [sp, #28]
 800698c:	ea43 0102 	orr.w	r1, r3, r2
 8006990:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006992:	4319      	orrs	r1, r3
 8006994:	d110      	bne.n	80069b8 <_dtoa_r+0xa20>
 8006996:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800699a:	d029      	beq.n	80069f0 <_dtoa_r+0xa58>
 800699c:	9b08      	ldr	r3, [sp, #32]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	dd02      	ble.n	80069a8 <_dtoa_r+0xa10>
 80069a2:	9b02      	ldr	r3, [sp, #8]
 80069a4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80069a8:	9b00      	ldr	r3, [sp, #0]
 80069aa:	f883 8000 	strb.w	r8, [r3]
 80069ae:	e63f      	b.n	8006630 <_dtoa_r+0x698>
 80069b0:	4628      	mov	r0, r5
 80069b2:	e7bb      	b.n	800692c <_dtoa_r+0x994>
 80069b4:	2201      	movs	r2, #1
 80069b6:	e7e1      	b.n	800697c <_dtoa_r+0x9e4>
 80069b8:	9b08      	ldr	r3, [sp, #32]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	db04      	blt.n	80069c8 <_dtoa_r+0xa30>
 80069be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80069c0:	430b      	orrs	r3, r1
 80069c2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80069c4:	430b      	orrs	r3, r1
 80069c6:	d120      	bne.n	8006a0a <_dtoa_r+0xa72>
 80069c8:	2a00      	cmp	r2, #0
 80069ca:	dded      	ble.n	80069a8 <_dtoa_r+0xa10>
 80069cc:	4649      	mov	r1, r9
 80069ce:	2201      	movs	r2, #1
 80069d0:	4658      	mov	r0, fp
 80069d2:	f000 fbfd 	bl	80071d0 <__lshift>
 80069d6:	4621      	mov	r1, r4
 80069d8:	4681      	mov	r9, r0
 80069da:	f000 fc65 	bl	80072a8 <__mcmp>
 80069de:	2800      	cmp	r0, #0
 80069e0:	dc03      	bgt.n	80069ea <_dtoa_r+0xa52>
 80069e2:	d1e1      	bne.n	80069a8 <_dtoa_r+0xa10>
 80069e4:	f018 0f01 	tst.w	r8, #1
 80069e8:	d0de      	beq.n	80069a8 <_dtoa_r+0xa10>
 80069ea:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80069ee:	d1d8      	bne.n	80069a2 <_dtoa_r+0xa0a>
 80069f0:	9a00      	ldr	r2, [sp, #0]
 80069f2:	2339      	movs	r3, #57	@ 0x39
 80069f4:	7013      	strb	r3, [r2, #0]
 80069f6:	4633      	mov	r3, r6
 80069f8:	461e      	mov	r6, r3
 80069fa:	3b01      	subs	r3, #1
 80069fc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006a00:	2a39      	cmp	r2, #57	@ 0x39
 8006a02:	d052      	beq.n	8006aaa <_dtoa_r+0xb12>
 8006a04:	3201      	adds	r2, #1
 8006a06:	701a      	strb	r2, [r3, #0]
 8006a08:	e612      	b.n	8006630 <_dtoa_r+0x698>
 8006a0a:	2a00      	cmp	r2, #0
 8006a0c:	dd07      	ble.n	8006a1e <_dtoa_r+0xa86>
 8006a0e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006a12:	d0ed      	beq.n	80069f0 <_dtoa_r+0xa58>
 8006a14:	9a00      	ldr	r2, [sp, #0]
 8006a16:	f108 0301 	add.w	r3, r8, #1
 8006a1a:	7013      	strb	r3, [r2, #0]
 8006a1c:	e608      	b.n	8006630 <_dtoa_r+0x698>
 8006a1e:	9b07      	ldr	r3, [sp, #28]
 8006a20:	9a07      	ldr	r2, [sp, #28]
 8006a22:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006a26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d028      	beq.n	8006a7e <_dtoa_r+0xae6>
 8006a2c:	4649      	mov	r1, r9
 8006a2e:	2300      	movs	r3, #0
 8006a30:	220a      	movs	r2, #10
 8006a32:	4658      	mov	r0, fp
 8006a34:	f000 f9d6 	bl	8006de4 <__multadd>
 8006a38:	42af      	cmp	r7, r5
 8006a3a:	4681      	mov	r9, r0
 8006a3c:	f04f 0300 	mov.w	r3, #0
 8006a40:	f04f 020a 	mov.w	r2, #10
 8006a44:	4639      	mov	r1, r7
 8006a46:	4658      	mov	r0, fp
 8006a48:	d107      	bne.n	8006a5a <_dtoa_r+0xac2>
 8006a4a:	f000 f9cb 	bl	8006de4 <__multadd>
 8006a4e:	4607      	mov	r7, r0
 8006a50:	4605      	mov	r5, r0
 8006a52:	9b07      	ldr	r3, [sp, #28]
 8006a54:	3301      	adds	r3, #1
 8006a56:	9307      	str	r3, [sp, #28]
 8006a58:	e774      	b.n	8006944 <_dtoa_r+0x9ac>
 8006a5a:	f000 f9c3 	bl	8006de4 <__multadd>
 8006a5e:	4629      	mov	r1, r5
 8006a60:	4607      	mov	r7, r0
 8006a62:	2300      	movs	r3, #0
 8006a64:	220a      	movs	r2, #10
 8006a66:	4658      	mov	r0, fp
 8006a68:	f000 f9bc 	bl	8006de4 <__multadd>
 8006a6c:	4605      	mov	r5, r0
 8006a6e:	e7f0      	b.n	8006a52 <_dtoa_r+0xaba>
 8006a70:	9b00      	ldr	r3, [sp, #0]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	bfcc      	ite	gt
 8006a76:	461e      	movgt	r6, r3
 8006a78:	2601      	movle	r6, #1
 8006a7a:	4456      	add	r6, sl
 8006a7c:	2700      	movs	r7, #0
 8006a7e:	4649      	mov	r1, r9
 8006a80:	2201      	movs	r2, #1
 8006a82:	4658      	mov	r0, fp
 8006a84:	f000 fba4 	bl	80071d0 <__lshift>
 8006a88:	4621      	mov	r1, r4
 8006a8a:	4681      	mov	r9, r0
 8006a8c:	f000 fc0c 	bl	80072a8 <__mcmp>
 8006a90:	2800      	cmp	r0, #0
 8006a92:	dcb0      	bgt.n	80069f6 <_dtoa_r+0xa5e>
 8006a94:	d102      	bne.n	8006a9c <_dtoa_r+0xb04>
 8006a96:	f018 0f01 	tst.w	r8, #1
 8006a9a:	d1ac      	bne.n	80069f6 <_dtoa_r+0xa5e>
 8006a9c:	4633      	mov	r3, r6
 8006a9e:	461e      	mov	r6, r3
 8006aa0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006aa4:	2a30      	cmp	r2, #48	@ 0x30
 8006aa6:	d0fa      	beq.n	8006a9e <_dtoa_r+0xb06>
 8006aa8:	e5c2      	b.n	8006630 <_dtoa_r+0x698>
 8006aaa:	459a      	cmp	sl, r3
 8006aac:	d1a4      	bne.n	80069f8 <_dtoa_r+0xa60>
 8006aae:	9b04      	ldr	r3, [sp, #16]
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	9304      	str	r3, [sp, #16]
 8006ab4:	2331      	movs	r3, #49	@ 0x31
 8006ab6:	f88a 3000 	strb.w	r3, [sl]
 8006aba:	e5b9      	b.n	8006630 <_dtoa_r+0x698>
 8006abc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006abe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006b1c <_dtoa_r+0xb84>
 8006ac2:	b11b      	cbz	r3, 8006acc <_dtoa_r+0xb34>
 8006ac4:	f10a 0308 	add.w	r3, sl, #8
 8006ac8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006aca:	6013      	str	r3, [r2, #0]
 8006acc:	4650      	mov	r0, sl
 8006ace:	b019      	add	sp, #100	@ 0x64
 8006ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ad4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	f77f ae37 	ble.w	800674a <_dtoa_r+0x7b2>
 8006adc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ade:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ae0:	2001      	movs	r0, #1
 8006ae2:	e655      	b.n	8006790 <_dtoa_r+0x7f8>
 8006ae4:	9b00      	ldr	r3, [sp, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f77f aed6 	ble.w	8006898 <_dtoa_r+0x900>
 8006aec:	4656      	mov	r6, sl
 8006aee:	4621      	mov	r1, r4
 8006af0:	4648      	mov	r0, r9
 8006af2:	f7ff f9c9 	bl	8005e88 <quorem>
 8006af6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006afa:	f806 8b01 	strb.w	r8, [r6], #1
 8006afe:	9b00      	ldr	r3, [sp, #0]
 8006b00:	eba6 020a 	sub.w	r2, r6, sl
 8006b04:	4293      	cmp	r3, r2
 8006b06:	ddb3      	ble.n	8006a70 <_dtoa_r+0xad8>
 8006b08:	4649      	mov	r1, r9
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	220a      	movs	r2, #10
 8006b0e:	4658      	mov	r0, fp
 8006b10:	f000 f968 	bl	8006de4 <__multadd>
 8006b14:	4681      	mov	r9, r0
 8006b16:	e7ea      	b.n	8006aee <_dtoa_r+0xb56>
 8006b18:	08009655 	.word	0x08009655
 8006b1c:	080095d9 	.word	0x080095d9

08006b20 <_free_r>:
 8006b20:	b538      	push	{r3, r4, r5, lr}
 8006b22:	4605      	mov	r5, r0
 8006b24:	2900      	cmp	r1, #0
 8006b26:	d041      	beq.n	8006bac <_free_r+0x8c>
 8006b28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b2c:	1f0c      	subs	r4, r1, #4
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	bfb8      	it	lt
 8006b32:	18e4      	addlt	r4, r4, r3
 8006b34:	f000 f8e8 	bl	8006d08 <__malloc_lock>
 8006b38:	4a1d      	ldr	r2, [pc, #116]	@ (8006bb0 <_free_r+0x90>)
 8006b3a:	6813      	ldr	r3, [r2, #0]
 8006b3c:	b933      	cbnz	r3, 8006b4c <_free_r+0x2c>
 8006b3e:	6063      	str	r3, [r4, #4]
 8006b40:	6014      	str	r4, [r2, #0]
 8006b42:	4628      	mov	r0, r5
 8006b44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b48:	f000 b8e4 	b.w	8006d14 <__malloc_unlock>
 8006b4c:	42a3      	cmp	r3, r4
 8006b4e:	d908      	bls.n	8006b62 <_free_r+0x42>
 8006b50:	6820      	ldr	r0, [r4, #0]
 8006b52:	1821      	adds	r1, r4, r0
 8006b54:	428b      	cmp	r3, r1
 8006b56:	bf01      	itttt	eq
 8006b58:	6819      	ldreq	r1, [r3, #0]
 8006b5a:	685b      	ldreq	r3, [r3, #4]
 8006b5c:	1809      	addeq	r1, r1, r0
 8006b5e:	6021      	streq	r1, [r4, #0]
 8006b60:	e7ed      	b.n	8006b3e <_free_r+0x1e>
 8006b62:	461a      	mov	r2, r3
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	b10b      	cbz	r3, 8006b6c <_free_r+0x4c>
 8006b68:	42a3      	cmp	r3, r4
 8006b6a:	d9fa      	bls.n	8006b62 <_free_r+0x42>
 8006b6c:	6811      	ldr	r1, [r2, #0]
 8006b6e:	1850      	adds	r0, r2, r1
 8006b70:	42a0      	cmp	r0, r4
 8006b72:	d10b      	bne.n	8006b8c <_free_r+0x6c>
 8006b74:	6820      	ldr	r0, [r4, #0]
 8006b76:	4401      	add	r1, r0
 8006b78:	1850      	adds	r0, r2, r1
 8006b7a:	4283      	cmp	r3, r0
 8006b7c:	6011      	str	r1, [r2, #0]
 8006b7e:	d1e0      	bne.n	8006b42 <_free_r+0x22>
 8006b80:	6818      	ldr	r0, [r3, #0]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	6053      	str	r3, [r2, #4]
 8006b86:	4408      	add	r0, r1
 8006b88:	6010      	str	r0, [r2, #0]
 8006b8a:	e7da      	b.n	8006b42 <_free_r+0x22>
 8006b8c:	d902      	bls.n	8006b94 <_free_r+0x74>
 8006b8e:	230c      	movs	r3, #12
 8006b90:	602b      	str	r3, [r5, #0]
 8006b92:	e7d6      	b.n	8006b42 <_free_r+0x22>
 8006b94:	6820      	ldr	r0, [r4, #0]
 8006b96:	1821      	adds	r1, r4, r0
 8006b98:	428b      	cmp	r3, r1
 8006b9a:	bf04      	itt	eq
 8006b9c:	6819      	ldreq	r1, [r3, #0]
 8006b9e:	685b      	ldreq	r3, [r3, #4]
 8006ba0:	6063      	str	r3, [r4, #4]
 8006ba2:	bf04      	itt	eq
 8006ba4:	1809      	addeq	r1, r1, r0
 8006ba6:	6021      	streq	r1, [r4, #0]
 8006ba8:	6054      	str	r4, [r2, #4]
 8006baa:	e7ca      	b.n	8006b42 <_free_r+0x22>
 8006bac:	bd38      	pop	{r3, r4, r5, pc}
 8006bae:	bf00      	nop
 8006bb0:	200005a8 	.word	0x200005a8

08006bb4 <malloc>:
 8006bb4:	4b02      	ldr	r3, [pc, #8]	@ (8006bc0 <malloc+0xc>)
 8006bb6:	4601      	mov	r1, r0
 8006bb8:	6818      	ldr	r0, [r3, #0]
 8006bba:	f000 b825 	b.w	8006c08 <_malloc_r>
 8006bbe:	bf00      	nop
 8006bc0:	20000018 	.word	0x20000018

08006bc4 <sbrk_aligned>:
 8006bc4:	b570      	push	{r4, r5, r6, lr}
 8006bc6:	4e0f      	ldr	r6, [pc, #60]	@ (8006c04 <sbrk_aligned+0x40>)
 8006bc8:	460c      	mov	r4, r1
 8006bca:	6831      	ldr	r1, [r6, #0]
 8006bcc:	4605      	mov	r5, r0
 8006bce:	b911      	cbnz	r1, 8006bd6 <sbrk_aligned+0x12>
 8006bd0:	f001 fe0c 	bl	80087ec <_sbrk_r>
 8006bd4:	6030      	str	r0, [r6, #0]
 8006bd6:	4621      	mov	r1, r4
 8006bd8:	4628      	mov	r0, r5
 8006bda:	f001 fe07 	bl	80087ec <_sbrk_r>
 8006bde:	1c43      	adds	r3, r0, #1
 8006be0:	d103      	bne.n	8006bea <sbrk_aligned+0x26>
 8006be2:	f04f 34ff 	mov.w	r4, #4294967295
 8006be6:	4620      	mov	r0, r4
 8006be8:	bd70      	pop	{r4, r5, r6, pc}
 8006bea:	1cc4      	adds	r4, r0, #3
 8006bec:	f024 0403 	bic.w	r4, r4, #3
 8006bf0:	42a0      	cmp	r0, r4
 8006bf2:	d0f8      	beq.n	8006be6 <sbrk_aligned+0x22>
 8006bf4:	1a21      	subs	r1, r4, r0
 8006bf6:	4628      	mov	r0, r5
 8006bf8:	f001 fdf8 	bl	80087ec <_sbrk_r>
 8006bfc:	3001      	adds	r0, #1
 8006bfe:	d1f2      	bne.n	8006be6 <sbrk_aligned+0x22>
 8006c00:	e7ef      	b.n	8006be2 <sbrk_aligned+0x1e>
 8006c02:	bf00      	nop
 8006c04:	200005a4 	.word	0x200005a4

08006c08 <_malloc_r>:
 8006c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c0c:	1ccd      	adds	r5, r1, #3
 8006c0e:	f025 0503 	bic.w	r5, r5, #3
 8006c12:	3508      	adds	r5, #8
 8006c14:	2d0c      	cmp	r5, #12
 8006c16:	bf38      	it	cc
 8006c18:	250c      	movcc	r5, #12
 8006c1a:	2d00      	cmp	r5, #0
 8006c1c:	4606      	mov	r6, r0
 8006c1e:	db01      	blt.n	8006c24 <_malloc_r+0x1c>
 8006c20:	42a9      	cmp	r1, r5
 8006c22:	d904      	bls.n	8006c2e <_malloc_r+0x26>
 8006c24:	230c      	movs	r3, #12
 8006c26:	6033      	str	r3, [r6, #0]
 8006c28:	2000      	movs	r0, #0
 8006c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006d04 <_malloc_r+0xfc>
 8006c32:	f000 f869 	bl	8006d08 <__malloc_lock>
 8006c36:	f8d8 3000 	ldr.w	r3, [r8]
 8006c3a:	461c      	mov	r4, r3
 8006c3c:	bb44      	cbnz	r4, 8006c90 <_malloc_r+0x88>
 8006c3e:	4629      	mov	r1, r5
 8006c40:	4630      	mov	r0, r6
 8006c42:	f7ff ffbf 	bl	8006bc4 <sbrk_aligned>
 8006c46:	1c43      	adds	r3, r0, #1
 8006c48:	4604      	mov	r4, r0
 8006c4a:	d158      	bne.n	8006cfe <_malloc_r+0xf6>
 8006c4c:	f8d8 4000 	ldr.w	r4, [r8]
 8006c50:	4627      	mov	r7, r4
 8006c52:	2f00      	cmp	r7, #0
 8006c54:	d143      	bne.n	8006cde <_malloc_r+0xd6>
 8006c56:	2c00      	cmp	r4, #0
 8006c58:	d04b      	beq.n	8006cf2 <_malloc_r+0xea>
 8006c5a:	6823      	ldr	r3, [r4, #0]
 8006c5c:	4639      	mov	r1, r7
 8006c5e:	4630      	mov	r0, r6
 8006c60:	eb04 0903 	add.w	r9, r4, r3
 8006c64:	f001 fdc2 	bl	80087ec <_sbrk_r>
 8006c68:	4581      	cmp	r9, r0
 8006c6a:	d142      	bne.n	8006cf2 <_malloc_r+0xea>
 8006c6c:	6821      	ldr	r1, [r4, #0]
 8006c6e:	1a6d      	subs	r5, r5, r1
 8006c70:	4629      	mov	r1, r5
 8006c72:	4630      	mov	r0, r6
 8006c74:	f7ff ffa6 	bl	8006bc4 <sbrk_aligned>
 8006c78:	3001      	adds	r0, #1
 8006c7a:	d03a      	beq.n	8006cf2 <_malloc_r+0xea>
 8006c7c:	6823      	ldr	r3, [r4, #0]
 8006c7e:	442b      	add	r3, r5
 8006c80:	6023      	str	r3, [r4, #0]
 8006c82:	f8d8 3000 	ldr.w	r3, [r8]
 8006c86:	685a      	ldr	r2, [r3, #4]
 8006c88:	bb62      	cbnz	r2, 8006ce4 <_malloc_r+0xdc>
 8006c8a:	f8c8 7000 	str.w	r7, [r8]
 8006c8e:	e00f      	b.n	8006cb0 <_malloc_r+0xa8>
 8006c90:	6822      	ldr	r2, [r4, #0]
 8006c92:	1b52      	subs	r2, r2, r5
 8006c94:	d420      	bmi.n	8006cd8 <_malloc_r+0xd0>
 8006c96:	2a0b      	cmp	r2, #11
 8006c98:	d917      	bls.n	8006cca <_malloc_r+0xc2>
 8006c9a:	1961      	adds	r1, r4, r5
 8006c9c:	42a3      	cmp	r3, r4
 8006c9e:	6025      	str	r5, [r4, #0]
 8006ca0:	bf18      	it	ne
 8006ca2:	6059      	strne	r1, [r3, #4]
 8006ca4:	6863      	ldr	r3, [r4, #4]
 8006ca6:	bf08      	it	eq
 8006ca8:	f8c8 1000 	streq.w	r1, [r8]
 8006cac:	5162      	str	r2, [r4, r5]
 8006cae:	604b      	str	r3, [r1, #4]
 8006cb0:	4630      	mov	r0, r6
 8006cb2:	f000 f82f 	bl	8006d14 <__malloc_unlock>
 8006cb6:	f104 000b 	add.w	r0, r4, #11
 8006cba:	1d23      	adds	r3, r4, #4
 8006cbc:	f020 0007 	bic.w	r0, r0, #7
 8006cc0:	1ac2      	subs	r2, r0, r3
 8006cc2:	bf1c      	itt	ne
 8006cc4:	1a1b      	subne	r3, r3, r0
 8006cc6:	50a3      	strne	r3, [r4, r2]
 8006cc8:	e7af      	b.n	8006c2a <_malloc_r+0x22>
 8006cca:	6862      	ldr	r2, [r4, #4]
 8006ccc:	42a3      	cmp	r3, r4
 8006cce:	bf0c      	ite	eq
 8006cd0:	f8c8 2000 	streq.w	r2, [r8]
 8006cd4:	605a      	strne	r2, [r3, #4]
 8006cd6:	e7eb      	b.n	8006cb0 <_malloc_r+0xa8>
 8006cd8:	4623      	mov	r3, r4
 8006cda:	6864      	ldr	r4, [r4, #4]
 8006cdc:	e7ae      	b.n	8006c3c <_malloc_r+0x34>
 8006cde:	463c      	mov	r4, r7
 8006ce0:	687f      	ldr	r7, [r7, #4]
 8006ce2:	e7b6      	b.n	8006c52 <_malloc_r+0x4a>
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	42a3      	cmp	r3, r4
 8006cea:	d1fb      	bne.n	8006ce4 <_malloc_r+0xdc>
 8006cec:	2300      	movs	r3, #0
 8006cee:	6053      	str	r3, [r2, #4]
 8006cf0:	e7de      	b.n	8006cb0 <_malloc_r+0xa8>
 8006cf2:	230c      	movs	r3, #12
 8006cf4:	6033      	str	r3, [r6, #0]
 8006cf6:	4630      	mov	r0, r6
 8006cf8:	f000 f80c 	bl	8006d14 <__malloc_unlock>
 8006cfc:	e794      	b.n	8006c28 <_malloc_r+0x20>
 8006cfe:	6005      	str	r5, [r0, #0]
 8006d00:	e7d6      	b.n	8006cb0 <_malloc_r+0xa8>
 8006d02:	bf00      	nop
 8006d04:	200005a8 	.word	0x200005a8

08006d08 <__malloc_lock>:
 8006d08:	4801      	ldr	r0, [pc, #4]	@ (8006d10 <__malloc_lock+0x8>)
 8006d0a:	f7ff b8b4 	b.w	8005e76 <__retarget_lock_acquire_recursive>
 8006d0e:	bf00      	nop
 8006d10:	200005a0 	.word	0x200005a0

08006d14 <__malloc_unlock>:
 8006d14:	4801      	ldr	r0, [pc, #4]	@ (8006d1c <__malloc_unlock+0x8>)
 8006d16:	f7ff b8af 	b.w	8005e78 <__retarget_lock_release_recursive>
 8006d1a:	bf00      	nop
 8006d1c:	200005a0 	.word	0x200005a0

08006d20 <_Balloc>:
 8006d20:	b570      	push	{r4, r5, r6, lr}
 8006d22:	69c6      	ldr	r6, [r0, #28]
 8006d24:	4604      	mov	r4, r0
 8006d26:	460d      	mov	r5, r1
 8006d28:	b976      	cbnz	r6, 8006d48 <_Balloc+0x28>
 8006d2a:	2010      	movs	r0, #16
 8006d2c:	f7ff ff42 	bl	8006bb4 <malloc>
 8006d30:	4602      	mov	r2, r0
 8006d32:	61e0      	str	r0, [r4, #28]
 8006d34:	b920      	cbnz	r0, 8006d40 <_Balloc+0x20>
 8006d36:	4b18      	ldr	r3, [pc, #96]	@ (8006d98 <_Balloc+0x78>)
 8006d38:	4818      	ldr	r0, [pc, #96]	@ (8006d9c <_Balloc+0x7c>)
 8006d3a:	216b      	movs	r1, #107	@ 0x6b
 8006d3c:	f001 fd7c 	bl	8008838 <__assert_func>
 8006d40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d44:	6006      	str	r6, [r0, #0]
 8006d46:	60c6      	str	r6, [r0, #12]
 8006d48:	69e6      	ldr	r6, [r4, #28]
 8006d4a:	68f3      	ldr	r3, [r6, #12]
 8006d4c:	b183      	cbz	r3, 8006d70 <_Balloc+0x50>
 8006d4e:	69e3      	ldr	r3, [r4, #28]
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006d56:	b9b8      	cbnz	r0, 8006d88 <_Balloc+0x68>
 8006d58:	2101      	movs	r1, #1
 8006d5a:	fa01 f605 	lsl.w	r6, r1, r5
 8006d5e:	1d72      	adds	r2, r6, #5
 8006d60:	0092      	lsls	r2, r2, #2
 8006d62:	4620      	mov	r0, r4
 8006d64:	f001 fd86 	bl	8008874 <_calloc_r>
 8006d68:	b160      	cbz	r0, 8006d84 <_Balloc+0x64>
 8006d6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006d6e:	e00e      	b.n	8006d8e <_Balloc+0x6e>
 8006d70:	2221      	movs	r2, #33	@ 0x21
 8006d72:	2104      	movs	r1, #4
 8006d74:	4620      	mov	r0, r4
 8006d76:	f001 fd7d 	bl	8008874 <_calloc_r>
 8006d7a:	69e3      	ldr	r3, [r4, #28]
 8006d7c:	60f0      	str	r0, [r6, #12]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d1e4      	bne.n	8006d4e <_Balloc+0x2e>
 8006d84:	2000      	movs	r0, #0
 8006d86:	bd70      	pop	{r4, r5, r6, pc}
 8006d88:	6802      	ldr	r2, [r0, #0]
 8006d8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006d8e:	2300      	movs	r3, #0
 8006d90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006d94:	e7f7      	b.n	8006d86 <_Balloc+0x66>
 8006d96:	bf00      	nop
 8006d98:	080095e6 	.word	0x080095e6
 8006d9c:	08009666 	.word	0x08009666

08006da0 <_Bfree>:
 8006da0:	b570      	push	{r4, r5, r6, lr}
 8006da2:	69c6      	ldr	r6, [r0, #28]
 8006da4:	4605      	mov	r5, r0
 8006da6:	460c      	mov	r4, r1
 8006da8:	b976      	cbnz	r6, 8006dc8 <_Bfree+0x28>
 8006daa:	2010      	movs	r0, #16
 8006dac:	f7ff ff02 	bl	8006bb4 <malloc>
 8006db0:	4602      	mov	r2, r0
 8006db2:	61e8      	str	r0, [r5, #28]
 8006db4:	b920      	cbnz	r0, 8006dc0 <_Bfree+0x20>
 8006db6:	4b09      	ldr	r3, [pc, #36]	@ (8006ddc <_Bfree+0x3c>)
 8006db8:	4809      	ldr	r0, [pc, #36]	@ (8006de0 <_Bfree+0x40>)
 8006dba:	218f      	movs	r1, #143	@ 0x8f
 8006dbc:	f001 fd3c 	bl	8008838 <__assert_func>
 8006dc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006dc4:	6006      	str	r6, [r0, #0]
 8006dc6:	60c6      	str	r6, [r0, #12]
 8006dc8:	b13c      	cbz	r4, 8006dda <_Bfree+0x3a>
 8006dca:	69eb      	ldr	r3, [r5, #28]
 8006dcc:	6862      	ldr	r2, [r4, #4]
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006dd4:	6021      	str	r1, [r4, #0]
 8006dd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006dda:	bd70      	pop	{r4, r5, r6, pc}
 8006ddc:	080095e6 	.word	0x080095e6
 8006de0:	08009666 	.word	0x08009666

08006de4 <__multadd>:
 8006de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006de8:	690d      	ldr	r5, [r1, #16]
 8006dea:	4607      	mov	r7, r0
 8006dec:	460c      	mov	r4, r1
 8006dee:	461e      	mov	r6, r3
 8006df0:	f101 0c14 	add.w	ip, r1, #20
 8006df4:	2000      	movs	r0, #0
 8006df6:	f8dc 3000 	ldr.w	r3, [ip]
 8006dfa:	b299      	uxth	r1, r3
 8006dfc:	fb02 6101 	mla	r1, r2, r1, r6
 8006e00:	0c1e      	lsrs	r6, r3, #16
 8006e02:	0c0b      	lsrs	r3, r1, #16
 8006e04:	fb02 3306 	mla	r3, r2, r6, r3
 8006e08:	b289      	uxth	r1, r1
 8006e0a:	3001      	adds	r0, #1
 8006e0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006e10:	4285      	cmp	r5, r0
 8006e12:	f84c 1b04 	str.w	r1, [ip], #4
 8006e16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006e1a:	dcec      	bgt.n	8006df6 <__multadd+0x12>
 8006e1c:	b30e      	cbz	r6, 8006e62 <__multadd+0x7e>
 8006e1e:	68a3      	ldr	r3, [r4, #8]
 8006e20:	42ab      	cmp	r3, r5
 8006e22:	dc19      	bgt.n	8006e58 <__multadd+0x74>
 8006e24:	6861      	ldr	r1, [r4, #4]
 8006e26:	4638      	mov	r0, r7
 8006e28:	3101      	adds	r1, #1
 8006e2a:	f7ff ff79 	bl	8006d20 <_Balloc>
 8006e2e:	4680      	mov	r8, r0
 8006e30:	b928      	cbnz	r0, 8006e3e <__multadd+0x5a>
 8006e32:	4602      	mov	r2, r0
 8006e34:	4b0c      	ldr	r3, [pc, #48]	@ (8006e68 <__multadd+0x84>)
 8006e36:	480d      	ldr	r0, [pc, #52]	@ (8006e6c <__multadd+0x88>)
 8006e38:	21ba      	movs	r1, #186	@ 0xba
 8006e3a:	f001 fcfd 	bl	8008838 <__assert_func>
 8006e3e:	6922      	ldr	r2, [r4, #16]
 8006e40:	3202      	adds	r2, #2
 8006e42:	f104 010c 	add.w	r1, r4, #12
 8006e46:	0092      	lsls	r2, r2, #2
 8006e48:	300c      	adds	r0, #12
 8006e4a:	f001 fcdf 	bl	800880c <memcpy>
 8006e4e:	4621      	mov	r1, r4
 8006e50:	4638      	mov	r0, r7
 8006e52:	f7ff ffa5 	bl	8006da0 <_Bfree>
 8006e56:	4644      	mov	r4, r8
 8006e58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006e5c:	3501      	adds	r5, #1
 8006e5e:	615e      	str	r6, [r3, #20]
 8006e60:	6125      	str	r5, [r4, #16]
 8006e62:	4620      	mov	r0, r4
 8006e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e68:	08009655 	.word	0x08009655
 8006e6c:	08009666 	.word	0x08009666

08006e70 <__s2b>:
 8006e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e74:	460c      	mov	r4, r1
 8006e76:	4615      	mov	r5, r2
 8006e78:	461f      	mov	r7, r3
 8006e7a:	2209      	movs	r2, #9
 8006e7c:	3308      	adds	r3, #8
 8006e7e:	4606      	mov	r6, r0
 8006e80:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e84:	2100      	movs	r1, #0
 8006e86:	2201      	movs	r2, #1
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	db09      	blt.n	8006ea0 <__s2b+0x30>
 8006e8c:	4630      	mov	r0, r6
 8006e8e:	f7ff ff47 	bl	8006d20 <_Balloc>
 8006e92:	b940      	cbnz	r0, 8006ea6 <__s2b+0x36>
 8006e94:	4602      	mov	r2, r0
 8006e96:	4b19      	ldr	r3, [pc, #100]	@ (8006efc <__s2b+0x8c>)
 8006e98:	4819      	ldr	r0, [pc, #100]	@ (8006f00 <__s2b+0x90>)
 8006e9a:	21d3      	movs	r1, #211	@ 0xd3
 8006e9c:	f001 fccc 	bl	8008838 <__assert_func>
 8006ea0:	0052      	lsls	r2, r2, #1
 8006ea2:	3101      	adds	r1, #1
 8006ea4:	e7f0      	b.n	8006e88 <__s2b+0x18>
 8006ea6:	9b08      	ldr	r3, [sp, #32]
 8006ea8:	6143      	str	r3, [r0, #20]
 8006eaa:	2d09      	cmp	r5, #9
 8006eac:	f04f 0301 	mov.w	r3, #1
 8006eb0:	6103      	str	r3, [r0, #16]
 8006eb2:	dd16      	ble.n	8006ee2 <__s2b+0x72>
 8006eb4:	f104 0909 	add.w	r9, r4, #9
 8006eb8:	46c8      	mov	r8, r9
 8006eba:	442c      	add	r4, r5
 8006ebc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006ec0:	4601      	mov	r1, r0
 8006ec2:	3b30      	subs	r3, #48	@ 0x30
 8006ec4:	220a      	movs	r2, #10
 8006ec6:	4630      	mov	r0, r6
 8006ec8:	f7ff ff8c 	bl	8006de4 <__multadd>
 8006ecc:	45a0      	cmp	r8, r4
 8006ece:	d1f5      	bne.n	8006ebc <__s2b+0x4c>
 8006ed0:	f1a5 0408 	sub.w	r4, r5, #8
 8006ed4:	444c      	add	r4, r9
 8006ed6:	1b2d      	subs	r5, r5, r4
 8006ed8:	1963      	adds	r3, r4, r5
 8006eda:	42bb      	cmp	r3, r7
 8006edc:	db04      	blt.n	8006ee8 <__s2b+0x78>
 8006ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ee2:	340a      	adds	r4, #10
 8006ee4:	2509      	movs	r5, #9
 8006ee6:	e7f6      	b.n	8006ed6 <__s2b+0x66>
 8006ee8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006eec:	4601      	mov	r1, r0
 8006eee:	3b30      	subs	r3, #48	@ 0x30
 8006ef0:	220a      	movs	r2, #10
 8006ef2:	4630      	mov	r0, r6
 8006ef4:	f7ff ff76 	bl	8006de4 <__multadd>
 8006ef8:	e7ee      	b.n	8006ed8 <__s2b+0x68>
 8006efa:	bf00      	nop
 8006efc:	08009655 	.word	0x08009655
 8006f00:	08009666 	.word	0x08009666

08006f04 <__hi0bits>:
 8006f04:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006f08:	4603      	mov	r3, r0
 8006f0a:	bf36      	itet	cc
 8006f0c:	0403      	lslcc	r3, r0, #16
 8006f0e:	2000      	movcs	r0, #0
 8006f10:	2010      	movcc	r0, #16
 8006f12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f16:	bf3c      	itt	cc
 8006f18:	021b      	lslcc	r3, r3, #8
 8006f1a:	3008      	addcc	r0, #8
 8006f1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f20:	bf3c      	itt	cc
 8006f22:	011b      	lslcc	r3, r3, #4
 8006f24:	3004      	addcc	r0, #4
 8006f26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f2a:	bf3c      	itt	cc
 8006f2c:	009b      	lslcc	r3, r3, #2
 8006f2e:	3002      	addcc	r0, #2
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	db05      	blt.n	8006f40 <__hi0bits+0x3c>
 8006f34:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006f38:	f100 0001 	add.w	r0, r0, #1
 8006f3c:	bf08      	it	eq
 8006f3e:	2020      	moveq	r0, #32
 8006f40:	4770      	bx	lr

08006f42 <__lo0bits>:
 8006f42:	6803      	ldr	r3, [r0, #0]
 8006f44:	4602      	mov	r2, r0
 8006f46:	f013 0007 	ands.w	r0, r3, #7
 8006f4a:	d00b      	beq.n	8006f64 <__lo0bits+0x22>
 8006f4c:	07d9      	lsls	r1, r3, #31
 8006f4e:	d421      	bmi.n	8006f94 <__lo0bits+0x52>
 8006f50:	0798      	lsls	r0, r3, #30
 8006f52:	bf49      	itett	mi
 8006f54:	085b      	lsrmi	r3, r3, #1
 8006f56:	089b      	lsrpl	r3, r3, #2
 8006f58:	2001      	movmi	r0, #1
 8006f5a:	6013      	strmi	r3, [r2, #0]
 8006f5c:	bf5c      	itt	pl
 8006f5e:	6013      	strpl	r3, [r2, #0]
 8006f60:	2002      	movpl	r0, #2
 8006f62:	4770      	bx	lr
 8006f64:	b299      	uxth	r1, r3
 8006f66:	b909      	cbnz	r1, 8006f6c <__lo0bits+0x2a>
 8006f68:	0c1b      	lsrs	r3, r3, #16
 8006f6a:	2010      	movs	r0, #16
 8006f6c:	b2d9      	uxtb	r1, r3
 8006f6e:	b909      	cbnz	r1, 8006f74 <__lo0bits+0x32>
 8006f70:	3008      	adds	r0, #8
 8006f72:	0a1b      	lsrs	r3, r3, #8
 8006f74:	0719      	lsls	r1, r3, #28
 8006f76:	bf04      	itt	eq
 8006f78:	091b      	lsreq	r3, r3, #4
 8006f7a:	3004      	addeq	r0, #4
 8006f7c:	0799      	lsls	r1, r3, #30
 8006f7e:	bf04      	itt	eq
 8006f80:	089b      	lsreq	r3, r3, #2
 8006f82:	3002      	addeq	r0, #2
 8006f84:	07d9      	lsls	r1, r3, #31
 8006f86:	d403      	bmi.n	8006f90 <__lo0bits+0x4e>
 8006f88:	085b      	lsrs	r3, r3, #1
 8006f8a:	f100 0001 	add.w	r0, r0, #1
 8006f8e:	d003      	beq.n	8006f98 <__lo0bits+0x56>
 8006f90:	6013      	str	r3, [r2, #0]
 8006f92:	4770      	bx	lr
 8006f94:	2000      	movs	r0, #0
 8006f96:	4770      	bx	lr
 8006f98:	2020      	movs	r0, #32
 8006f9a:	4770      	bx	lr

08006f9c <__i2b>:
 8006f9c:	b510      	push	{r4, lr}
 8006f9e:	460c      	mov	r4, r1
 8006fa0:	2101      	movs	r1, #1
 8006fa2:	f7ff febd 	bl	8006d20 <_Balloc>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	b928      	cbnz	r0, 8006fb6 <__i2b+0x1a>
 8006faa:	4b05      	ldr	r3, [pc, #20]	@ (8006fc0 <__i2b+0x24>)
 8006fac:	4805      	ldr	r0, [pc, #20]	@ (8006fc4 <__i2b+0x28>)
 8006fae:	f240 1145 	movw	r1, #325	@ 0x145
 8006fb2:	f001 fc41 	bl	8008838 <__assert_func>
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	6144      	str	r4, [r0, #20]
 8006fba:	6103      	str	r3, [r0, #16]
 8006fbc:	bd10      	pop	{r4, pc}
 8006fbe:	bf00      	nop
 8006fc0:	08009655 	.word	0x08009655
 8006fc4:	08009666 	.word	0x08009666

08006fc8 <__multiply>:
 8006fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fcc:	4614      	mov	r4, r2
 8006fce:	690a      	ldr	r2, [r1, #16]
 8006fd0:	6923      	ldr	r3, [r4, #16]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	bfa8      	it	ge
 8006fd6:	4623      	movge	r3, r4
 8006fd8:	460f      	mov	r7, r1
 8006fda:	bfa4      	itt	ge
 8006fdc:	460c      	movge	r4, r1
 8006fde:	461f      	movge	r7, r3
 8006fe0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006fe4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006fe8:	68a3      	ldr	r3, [r4, #8]
 8006fea:	6861      	ldr	r1, [r4, #4]
 8006fec:	eb0a 0609 	add.w	r6, sl, r9
 8006ff0:	42b3      	cmp	r3, r6
 8006ff2:	b085      	sub	sp, #20
 8006ff4:	bfb8      	it	lt
 8006ff6:	3101      	addlt	r1, #1
 8006ff8:	f7ff fe92 	bl	8006d20 <_Balloc>
 8006ffc:	b930      	cbnz	r0, 800700c <__multiply+0x44>
 8006ffe:	4602      	mov	r2, r0
 8007000:	4b44      	ldr	r3, [pc, #272]	@ (8007114 <__multiply+0x14c>)
 8007002:	4845      	ldr	r0, [pc, #276]	@ (8007118 <__multiply+0x150>)
 8007004:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007008:	f001 fc16 	bl	8008838 <__assert_func>
 800700c:	f100 0514 	add.w	r5, r0, #20
 8007010:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007014:	462b      	mov	r3, r5
 8007016:	2200      	movs	r2, #0
 8007018:	4543      	cmp	r3, r8
 800701a:	d321      	bcc.n	8007060 <__multiply+0x98>
 800701c:	f107 0114 	add.w	r1, r7, #20
 8007020:	f104 0214 	add.w	r2, r4, #20
 8007024:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007028:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800702c:	9302      	str	r3, [sp, #8]
 800702e:	1b13      	subs	r3, r2, r4
 8007030:	3b15      	subs	r3, #21
 8007032:	f023 0303 	bic.w	r3, r3, #3
 8007036:	3304      	adds	r3, #4
 8007038:	f104 0715 	add.w	r7, r4, #21
 800703c:	42ba      	cmp	r2, r7
 800703e:	bf38      	it	cc
 8007040:	2304      	movcc	r3, #4
 8007042:	9301      	str	r3, [sp, #4]
 8007044:	9b02      	ldr	r3, [sp, #8]
 8007046:	9103      	str	r1, [sp, #12]
 8007048:	428b      	cmp	r3, r1
 800704a:	d80c      	bhi.n	8007066 <__multiply+0x9e>
 800704c:	2e00      	cmp	r6, #0
 800704e:	dd03      	ble.n	8007058 <__multiply+0x90>
 8007050:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007054:	2b00      	cmp	r3, #0
 8007056:	d05b      	beq.n	8007110 <__multiply+0x148>
 8007058:	6106      	str	r6, [r0, #16]
 800705a:	b005      	add	sp, #20
 800705c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007060:	f843 2b04 	str.w	r2, [r3], #4
 8007064:	e7d8      	b.n	8007018 <__multiply+0x50>
 8007066:	f8b1 a000 	ldrh.w	sl, [r1]
 800706a:	f1ba 0f00 	cmp.w	sl, #0
 800706e:	d024      	beq.n	80070ba <__multiply+0xf2>
 8007070:	f104 0e14 	add.w	lr, r4, #20
 8007074:	46a9      	mov	r9, r5
 8007076:	f04f 0c00 	mov.w	ip, #0
 800707a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800707e:	f8d9 3000 	ldr.w	r3, [r9]
 8007082:	fa1f fb87 	uxth.w	fp, r7
 8007086:	b29b      	uxth	r3, r3
 8007088:	fb0a 330b 	mla	r3, sl, fp, r3
 800708c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007090:	f8d9 7000 	ldr.w	r7, [r9]
 8007094:	4463      	add	r3, ip
 8007096:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800709a:	fb0a c70b 	mla	r7, sl, fp, ip
 800709e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80070a8:	4572      	cmp	r2, lr
 80070aa:	f849 3b04 	str.w	r3, [r9], #4
 80070ae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80070b2:	d8e2      	bhi.n	800707a <__multiply+0xb2>
 80070b4:	9b01      	ldr	r3, [sp, #4]
 80070b6:	f845 c003 	str.w	ip, [r5, r3]
 80070ba:	9b03      	ldr	r3, [sp, #12]
 80070bc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80070c0:	3104      	adds	r1, #4
 80070c2:	f1b9 0f00 	cmp.w	r9, #0
 80070c6:	d021      	beq.n	800710c <__multiply+0x144>
 80070c8:	682b      	ldr	r3, [r5, #0]
 80070ca:	f104 0c14 	add.w	ip, r4, #20
 80070ce:	46ae      	mov	lr, r5
 80070d0:	f04f 0a00 	mov.w	sl, #0
 80070d4:	f8bc b000 	ldrh.w	fp, [ip]
 80070d8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80070dc:	fb09 770b 	mla	r7, r9, fp, r7
 80070e0:	4457      	add	r7, sl
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80070e8:	f84e 3b04 	str.w	r3, [lr], #4
 80070ec:	f85c 3b04 	ldr.w	r3, [ip], #4
 80070f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80070f4:	f8be 3000 	ldrh.w	r3, [lr]
 80070f8:	fb09 330a 	mla	r3, r9, sl, r3
 80070fc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007100:	4562      	cmp	r2, ip
 8007102:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007106:	d8e5      	bhi.n	80070d4 <__multiply+0x10c>
 8007108:	9f01      	ldr	r7, [sp, #4]
 800710a:	51eb      	str	r3, [r5, r7]
 800710c:	3504      	adds	r5, #4
 800710e:	e799      	b.n	8007044 <__multiply+0x7c>
 8007110:	3e01      	subs	r6, #1
 8007112:	e79b      	b.n	800704c <__multiply+0x84>
 8007114:	08009655 	.word	0x08009655
 8007118:	08009666 	.word	0x08009666

0800711c <__pow5mult>:
 800711c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007120:	4615      	mov	r5, r2
 8007122:	f012 0203 	ands.w	r2, r2, #3
 8007126:	4607      	mov	r7, r0
 8007128:	460e      	mov	r6, r1
 800712a:	d007      	beq.n	800713c <__pow5mult+0x20>
 800712c:	4c25      	ldr	r4, [pc, #148]	@ (80071c4 <__pow5mult+0xa8>)
 800712e:	3a01      	subs	r2, #1
 8007130:	2300      	movs	r3, #0
 8007132:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007136:	f7ff fe55 	bl	8006de4 <__multadd>
 800713a:	4606      	mov	r6, r0
 800713c:	10ad      	asrs	r5, r5, #2
 800713e:	d03d      	beq.n	80071bc <__pow5mult+0xa0>
 8007140:	69fc      	ldr	r4, [r7, #28]
 8007142:	b97c      	cbnz	r4, 8007164 <__pow5mult+0x48>
 8007144:	2010      	movs	r0, #16
 8007146:	f7ff fd35 	bl	8006bb4 <malloc>
 800714a:	4602      	mov	r2, r0
 800714c:	61f8      	str	r0, [r7, #28]
 800714e:	b928      	cbnz	r0, 800715c <__pow5mult+0x40>
 8007150:	4b1d      	ldr	r3, [pc, #116]	@ (80071c8 <__pow5mult+0xac>)
 8007152:	481e      	ldr	r0, [pc, #120]	@ (80071cc <__pow5mult+0xb0>)
 8007154:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007158:	f001 fb6e 	bl	8008838 <__assert_func>
 800715c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007160:	6004      	str	r4, [r0, #0]
 8007162:	60c4      	str	r4, [r0, #12]
 8007164:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007168:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800716c:	b94c      	cbnz	r4, 8007182 <__pow5mult+0x66>
 800716e:	f240 2171 	movw	r1, #625	@ 0x271
 8007172:	4638      	mov	r0, r7
 8007174:	f7ff ff12 	bl	8006f9c <__i2b>
 8007178:	2300      	movs	r3, #0
 800717a:	f8c8 0008 	str.w	r0, [r8, #8]
 800717e:	4604      	mov	r4, r0
 8007180:	6003      	str	r3, [r0, #0]
 8007182:	f04f 0900 	mov.w	r9, #0
 8007186:	07eb      	lsls	r3, r5, #31
 8007188:	d50a      	bpl.n	80071a0 <__pow5mult+0x84>
 800718a:	4631      	mov	r1, r6
 800718c:	4622      	mov	r2, r4
 800718e:	4638      	mov	r0, r7
 8007190:	f7ff ff1a 	bl	8006fc8 <__multiply>
 8007194:	4631      	mov	r1, r6
 8007196:	4680      	mov	r8, r0
 8007198:	4638      	mov	r0, r7
 800719a:	f7ff fe01 	bl	8006da0 <_Bfree>
 800719e:	4646      	mov	r6, r8
 80071a0:	106d      	asrs	r5, r5, #1
 80071a2:	d00b      	beq.n	80071bc <__pow5mult+0xa0>
 80071a4:	6820      	ldr	r0, [r4, #0]
 80071a6:	b938      	cbnz	r0, 80071b8 <__pow5mult+0x9c>
 80071a8:	4622      	mov	r2, r4
 80071aa:	4621      	mov	r1, r4
 80071ac:	4638      	mov	r0, r7
 80071ae:	f7ff ff0b 	bl	8006fc8 <__multiply>
 80071b2:	6020      	str	r0, [r4, #0]
 80071b4:	f8c0 9000 	str.w	r9, [r0]
 80071b8:	4604      	mov	r4, r0
 80071ba:	e7e4      	b.n	8007186 <__pow5mult+0x6a>
 80071bc:	4630      	mov	r0, r6
 80071be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071c2:	bf00      	nop
 80071c4:	080096c0 	.word	0x080096c0
 80071c8:	080095e6 	.word	0x080095e6
 80071cc:	08009666 	.word	0x08009666

080071d0 <__lshift>:
 80071d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071d4:	460c      	mov	r4, r1
 80071d6:	6849      	ldr	r1, [r1, #4]
 80071d8:	6923      	ldr	r3, [r4, #16]
 80071da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80071de:	68a3      	ldr	r3, [r4, #8]
 80071e0:	4607      	mov	r7, r0
 80071e2:	4691      	mov	r9, r2
 80071e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80071e8:	f108 0601 	add.w	r6, r8, #1
 80071ec:	42b3      	cmp	r3, r6
 80071ee:	db0b      	blt.n	8007208 <__lshift+0x38>
 80071f0:	4638      	mov	r0, r7
 80071f2:	f7ff fd95 	bl	8006d20 <_Balloc>
 80071f6:	4605      	mov	r5, r0
 80071f8:	b948      	cbnz	r0, 800720e <__lshift+0x3e>
 80071fa:	4602      	mov	r2, r0
 80071fc:	4b28      	ldr	r3, [pc, #160]	@ (80072a0 <__lshift+0xd0>)
 80071fe:	4829      	ldr	r0, [pc, #164]	@ (80072a4 <__lshift+0xd4>)
 8007200:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007204:	f001 fb18 	bl	8008838 <__assert_func>
 8007208:	3101      	adds	r1, #1
 800720a:	005b      	lsls	r3, r3, #1
 800720c:	e7ee      	b.n	80071ec <__lshift+0x1c>
 800720e:	2300      	movs	r3, #0
 8007210:	f100 0114 	add.w	r1, r0, #20
 8007214:	f100 0210 	add.w	r2, r0, #16
 8007218:	4618      	mov	r0, r3
 800721a:	4553      	cmp	r3, sl
 800721c:	db33      	blt.n	8007286 <__lshift+0xb6>
 800721e:	6920      	ldr	r0, [r4, #16]
 8007220:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007224:	f104 0314 	add.w	r3, r4, #20
 8007228:	f019 091f 	ands.w	r9, r9, #31
 800722c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007230:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007234:	d02b      	beq.n	800728e <__lshift+0xbe>
 8007236:	f1c9 0e20 	rsb	lr, r9, #32
 800723a:	468a      	mov	sl, r1
 800723c:	2200      	movs	r2, #0
 800723e:	6818      	ldr	r0, [r3, #0]
 8007240:	fa00 f009 	lsl.w	r0, r0, r9
 8007244:	4310      	orrs	r0, r2
 8007246:	f84a 0b04 	str.w	r0, [sl], #4
 800724a:	f853 2b04 	ldr.w	r2, [r3], #4
 800724e:	459c      	cmp	ip, r3
 8007250:	fa22 f20e 	lsr.w	r2, r2, lr
 8007254:	d8f3      	bhi.n	800723e <__lshift+0x6e>
 8007256:	ebac 0304 	sub.w	r3, ip, r4
 800725a:	3b15      	subs	r3, #21
 800725c:	f023 0303 	bic.w	r3, r3, #3
 8007260:	3304      	adds	r3, #4
 8007262:	f104 0015 	add.w	r0, r4, #21
 8007266:	4584      	cmp	ip, r0
 8007268:	bf38      	it	cc
 800726a:	2304      	movcc	r3, #4
 800726c:	50ca      	str	r2, [r1, r3]
 800726e:	b10a      	cbz	r2, 8007274 <__lshift+0xa4>
 8007270:	f108 0602 	add.w	r6, r8, #2
 8007274:	3e01      	subs	r6, #1
 8007276:	4638      	mov	r0, r7
 8007278:	612e      	str	r6, [r5, #16]
 800727a:	4621      	mov	r1, r4
 800727c:	f7ff fd90 	bl	8006da0 <_Bfree>
 8007280:	4628      	mov	r0, r5
 8007282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007286:	f842 0f04 	str.w	r0, [r2, #4]!
 800728a:	3301      	adds	r3, #1
 800728c:	e7c5      	b.n	800721a <__lshift+0x4a>
 800728e:	3904      	subs	r1, #4
 8007290:	f853 2b04 	ldr.w	r2, [r3], #4
 8007294:	f841 2f04 	str.w	r2, [r1, #4]!
 8007298:	459c      	cmp	ip, r3
 800729a:	d8f9      	bhi.n	8007290 <__lshift+0xc0>
 800729c:	e7ea      	b.n	8007274 <__lshift+0xa4>
 800729e:	bf00      	nop
 80072a0:	08009655 	.word	0x08009655
 80072a4:	08009666 	.word	0x08009666

080072a8 <__mcmp>:
 80072a8:	690a      	ldr	r2, [r1, #16]
 80072aa:	4603      	mov	r3, r0
 80072ac:	6900      	ldr	r0, [r0, #16]
 80072ae:	1a80      	subs	r0, r0, r2
 80072b0:	b530      	push	{r4, r5, lr}
 80072b2:	d10e      	bne.n	80072d2 <__mcmp+0x2a>
 80072b4:	3314      	adds	r3, #20
 80072b6:	3114      	adds	r1, #20
 80072b8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80072bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80072c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80072c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80072c8:	4295      	cmp	r5, r2
 80072ca:	d003      	beq.n	80072d4 <__mcmp+0x2c>
 80072cc:	d205      	bcs.n	80072da <__mcmp+0x32>
 80072ce:	f04f 30ff 	mov.w	r0, #4294967295
 80072d2:	bd30      	pop	{r4, r5, pc}
 80072d4:	42a3      	cmp	r3, r4
 80072d6:	d3f3      	bcc.n	80072c0 <__mcmp+0x18>
 80072d8:	e7fb      	b.n	80072d2 <__mcmp+0x2a>
 80072da:	2001      	movs	r0, #1
 80072dc:	e7f9      	b.n	80072d2 <__mcmp+0x2a>
	...

080072e0 <__mdiff>:
 80072e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e4:	4689      	mov	r9, r1
 80072e6:	4606      	mov	r6, r0
 80072e8:	4611      	mov	r1, r2
 80072ea:	4648      	mov	r0, r9
 80072ec:	4614      	mov	r4, r2
 80072ee:	f7ff ffdb 	bl	80072a8 <__mcmp>
 80072f2:	1e05      	subs	r5, r0, #0
 80072f4:	d112      	bne.n	800731c <__mdiff+0x3c>
 80072f6:	4629      	mov	r1, r5
 80072f8:	4630      	mov	r0, r6
 80072fa:	f7ff fd11 	bl	8006d20 <_Balloc>
 80072fe:	4602      	mov	r2, r0
 8007300:	b928      	cbnz	r0, 800730e <__mdiff+0x2e>
 8007302:	4b3f      	ldr	r3, [pc, #252]	@ (8007400 <__mdiff+0x120>)
 8007304:	f240 2137 	movw	r1, #567	@ 0x237
 8007308:	483e      	ldr	r0, [pc, #248]	@ (8007404 <__mdiff+0x124>)
 800730a:	f001 fa95 	bl	8008838 <__assert_func>
 800730e:	2301      	movs	r3, #1
 8007310:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007314:	4610      	mov	r0, r2
 8007316:	b003      	add	sp, #12
 8007318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800731c:	bfbc      	itt	lt
 800731e:	464b      	movlt	r3, r9
 8007320:	46a1      	movlt	r9, r4
 8007322:	4630      	mov	r0, r6
 8007324:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007328:	bfba      	itte	lt
 800732a:	461c      	movlt	r4, r3
 800732c:	2501      	movlt	r5, #1
 800732e:	2500      	movge	r5, #0
 8007330:	f7ff fcf6 	bl	8006d20 <_Balloc>
 8007334:	4602      	mov	r2, r0
 8007336:	b918      	cbnz	r0, 8007340 <__mdiff+0x60>
 8007338:	4b31      	ldr	r3, [pc, #196]	@ (8007400 <__mdiff+0x120>)
 800733a:	f240 2145 	movw	r1, #581	@ 0x245
 800733e:	e7e3      	b.n	8007308 <__mdiff+0x28>
 8007340:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007344:	6926      	ldr	r6, [r4, #16]
 8007346:	60c5      	str	r5, [r0, #12]
 8007348:	f109 0310 	add.w	r3, r9, #16
 800734c:	f109 0514 	add.w	r5, r9, #20
 8007350:	f104 0e14 	add.w	lr, r4, #20
 8007354:	f100 0b14 	add.w	fp, r0, #20
 8007358:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800735c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007360:	9301      	str	r3, [sp, #4]
 8007362:	46d9      	mov	r9, fp
 8007364:	f04f 0c00 	mov.w	ip, #0
 8007368:	9b01      	ldr	r3, [sp, #4]
 800736a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800736e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007372:	9301      	str	r3, [sp, #4]
 8007374:	fa1f f38a 	uxth.w	r3, sl
 8007378:	4619      	mov	r1, r3
 800737a:	b283      	uxth	r3, r0
 800737c:	1acb      	subs	r3, r1, r3
 800737e:	0c00      	lsrs	r0, r0, #16
 8007380:	4463      	add	r3, ip
 8007382:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007386:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800738a:	b29b      	uxth	r3, r3
 800738c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007390:	4576      	cmp	r6, lr
 8007392:	f849 3b04 	str.w	r3, [r9], #4
 8007396:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800739a:	d8e5      	bhi.n	8007368 <__mdiff+0x88>
 800739c:	1b33      	subs	r3, r6, r4
 800739e:	3b15      	subs	r3, #21
 80073a0:	f023 0303 	bic.w	r3, r3, #3
 80073a4:	3415      	adds	r4, #21
 80073a6:	3304      	adds	r3, #4
 80073a8:	42a6      	cmp	r6, r4
 80073aa:	bf38      	it	cc
 80073ac:	2304      	movcc	r3, #4
 80073ae:	441d      	add	r5, r3
 80073b0:	445b      	add	r3, fp
 80073b2:	461e      	mov	r6, r3
 80073b4:	462c      	mov	r4, r5
 80073b6:	4544      	cmp	r4, r8
 80073b8:	d30e      	bcc.n	80073d8 <__mdiff+0xf8>
 80073ba:	f108 0103 	add.w	r1, r8, #3
 80073be:	1b49      	subs	r1, r1, r5
 80073c0:	f021 0103 	bic.w	r1, r1, #3
 80073c4:	3d03      	subs	r5, #3
 80073c6:	45a8      	cmp	r8, r5
 80073c8:	bf38      	it	cc
 80073ca:	2100      	movcc	r1, #0
 80073cc:	440b      	add	r3, r1
 80073ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80073d2:	b191      	cbz	r1, 80073fa <__mdiff+0x11a>
 80073d4:	6117      	str	r7, [r2, #16]
 80073d6:	e79d      	b.n	8007314 <__mdiff+0x34>
 80073d8:	f854 1b04 	ldr.w	r1, [r4], #4
 80073dc:	46e6      	mov	lr, ip
 80073de:	0c08      	lsrs	r0, r1, #16
 80073e0:	fa1c fc81 	uxtah	ip, ip, r1
 80073e4:	4471      	add	r1, lr
 80073e6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80073ea:	b289      	uxth	r1, r1
 80073ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80073f0:	f846 1b04 	str.w	r1, [r6], #4
 80073f4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80073f8:	e7dd      	b.n	80073b6 <__mdiff+0xd6>
 80073fa:	3f01      	subs	r7, #1
 80073fc:	e7e7      	b.n	80073ce <__mdiff+0xee>
 80073fe:	bf00      	nop
 8007400:	08009655 	.word	0x08009655
 8007404:	08009666 	.word	0x08009666

08007408 <__ulp>:
 8007408:	b082      	sub	sp, #8
 800740a:	ed8d 0b00 	vstr	d0, [sp]
 800740e:	9a01      	ldr	r2, [sp, #4]
 8007410:	4b0f      	ldr	r3, [pc, #60]	@ (8007450 <__ulp+0x48>)
 8007412:	4013      	ands	r3, r2
 8007414:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007418:	2b00      	cmp	r3, #0
 800741a:	dc08      	bgt.n	800742e <__ulp+0x26>
 800741c:	425b      	negs	r3, r3
 800741e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007422:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007426:	da04      	bge.n	8007432 <__ulp+0x2a>
 8007428:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800742c:	4113      	asrs	r3, r2
 800742e:	2200      	movs	r2, #0
 8007430:	e008      	b.n	8007444 <__ulp+0x3c>
 8007432:	f1a2 0314 	sub.w	r3, r2, #20
 8007436:	2b1e      	cmp	r3, #30
 8007438:	bfda      	itte	le
 800743a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800743e:	40da      	lsrle	r2, r3
 8007440:	2201      	movgt	r2, #1
 8007442:	2300      	movs	r3, #0
 8007444:	4619      	mov	r1, r3
 8007446:	4610      	mov	r0, r2
 8007448:	ec41 0b10 	vmov	d0, r0, r1
 800744c:	b002      	add	sp, #8
 800744e:	4770      	bx	lr
 8007450:	7ff00000 	.word	0x7ff00000

08007454 <__b2d>:
 8007454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007458:	6906      	ldr	r6, [r0, #16]
 800745a:	f100 0814 	add.w	r8, r0, #20
 800745e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007462:	1f37      	subs	r7, r6, #4
 8007464:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007468:	4610      	mov	r0, r2
 800746a:	f7ff fd4b 	bl	8006f04 <__hi0bits>
 800746e:	f1c0 0320 	rsb	r3, r0, #32
 8007472:	280a      	cmp	r0, #10
 8007474:	600b      	str	r3, [r1, #0]
 8007476:	491b      	ldr	r1, [pc, #108]	@ (80074e4 <__b2d+0x90>)
 8007478:	dc15      	bgt.n	80074a6 <__b2d+0x52>
 800747a:	f1c0 0c0b 	rsb	ip, r0, #11
 800747e:	fa22 f30c 	lsr.w	r3, r2, ip
 8007482:	45b8      	cmp	r8, r7
 8007484:	ea43 0501 	orr.w	r5, r3, r1
 8007488:	bf34      	ite	cc
 800748a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800748e:	2300      	movcs	r3, #0
 8007490:	3015      	adds	r0, #21
 8007492:	fa02 f000 	lsl.w	r0, r2, r0
 8007496:	fa23 f30c 	lsr.w	r3, r3, ip
 800749a:	4303      	orrs	r3, r0
 800749c:	461c      	mov	r4, r3
 800749e:	ec45 4b10 	vmov	d0, r4, r5
 80074a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074a6:	45b8      	cmp	r8, r7
 80074a8:	bf3a      	itte	cc
 80074aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80074ae:	f1a6 0708 	subcc.w	r7, r6, #8
 80074b2:	2300      	movcs	r3, #0
 80074b4:	380b      	subs	r0, #11
 80074b6:	d012      	beq.n	80074de <__b2d+0x8a>
 80074b8:	f1c0 0120 	rsb	r1, r0, #32
 80074bc:	fa23 f401 	lsr.w	r4, r3, r1
 80074c0:	4082      	lsls	r2, r0
 80074c2:	4322      	orrs	r2, r4
 80074c4:	4547      	cmp	r7, r8
 80074c6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80074ca:	bf8c      	ite	hi
 80074cc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80074d0:	2200      	movls	r2, #0
 80074d2:	4083      	lsls	r3, r0
 80074d4:	40ca      	lsrs	r2, r1
 80074d6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80074da:	4313      	orrs	r3, r2
 80074dc:	e7de      	b.n	800749c <__b2d+0x48>
 80074de:	ea42 0501 	orr.w	r5, r2, r1
 80074e2:	e7db      	b.n	800749c <__b2d+0x48>
 80074e4:	3ff00000 	.word	0x3ff00000

080074e8 <__d2b>:
 80074e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80074ec:	460f      	mov	r7, r1
 80074ee:	2101      	movs	r1, #1
 80074f0:	ec59 8b10 	vmov	r8, r9, d0
 80074f4:	4616      	mov	r6, r2
 80074f6:	f7ff fc13 	bl	8006d20 <_Balloc>
 80074fa:	4604      	mov	r4, r0
 80074fc:	b930      	cbnz	r0, 800750c <__d2b+0x24>
 80074fe:	4602      	mov	r2, r0
 8007500:	4b23      	ldr	r3, [pc, #140]	@ (8007590 <__d2b+0xa8>)
 8007502:	4824      	ldr	r0, [pc, #144]	@ (8007594 <__d2b+0xac>)
 8007504:	f240 310f 	movw	r1, #783	@ 0x30f
 8007508:	f001 f996 	bl	8008838 <__assert_func>
 800750c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007510:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007514:	b10d      	cbz	r5, 800751a <__d2b+0x32>
 8007516:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800751a:	9301      	str	r3, [sp, #4]
 800751c:	f1b8 0300 	subs.w	r3, r8, #0
 8007520:	d023      	beq.n	800756a <__d2b+0x82>
 8007522:	4668      	mov	r0, sp
 8007524:	9300      	str	r3, [sp, #0]
 8007526:	f7ff fd0c 	bl	8006f42 <__lo0bits>
 800752a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800752e:	b1d0      	cbz	r0, 8007566 <__d2b+0x7e>
 8007530:	f1c0 0320 	rsb	r3, r0, #32
 8007534:	fa02 f303 	lsl.w	r3, r2, r3
 8007538:	430b      	orrs	r3, r1
 800753a:	40c2      	lsrs	r2, r0
 800753c:	6163      	str	r3, [r4, #20]
 800753e:	9201      	str	r2, [sp, #4]
 8007540:	9b01      	ldr	r3, [sp, #4]
 8007542:	61a3      	str	r3, [r4, #24]
 8007544:	2b00      	cmp	r3, #0
 8007546:	bf0c      	ite	eq
 8007548:	2201      	moveq	r2, #1
 800754a:	2202      	movne	r2, #2
 800754c:	6122      	str	r2, [r4, #16]
 800754e:	b1a5      	cbz	r5, 800757a <__d2b+0x92>
 8007550:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007554:	4405      	add	r5, r0
 8007556:	603d      	str	r5, [r7, #0]
 8007558:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800755c:	6030      	str	r0, [r6, #0]
 800755e:	4620      	mov	r0, r4
 8007560:	b003      	add	sp, #12
 8007562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007566:	6161      	str	r1, [r4, #20]
 8007568:	e7ea      	b.n	8007540 <__d2b+0x58>
 800756a:	a801      	add	r0, sp, #4
 800756c:	f7ff fce9 	bl	8006f42 <__lo0bits>
 8007570:	9b01      	ldr	r3, [sp, #4]
 8007572:	6163      	str	r3, [r4, #20]
 8007574:	3020      	adds	r0, #32
 8007576:	2201      	movs	r2, #1
 8007578:	e7e8      	b.n	800754c <__d2b+0x64>
 800757a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800757e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007582:	6038      	str	r0, [r7, #0]
 8007584:	6918      	ldr	r0, [r3, #16]
 8007586:	f7ff fcbd 	bl	8006f04 <__hi0bits>
 800758a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800758e:	e7e5      	b.n	800755c <__d2b+0x74>
 8007590:	08009655 	.word	0x08009655
 8007594:	08009666 	.word	0x08009666

08007598 <__ratio>:
 8007598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800759c:	b085      	sub	sp, #20
 800759e:	e9cd 1000 	strd	r1, r0, [sp]
 80075a2:	a902      	add	r1, sp, #8
 80075a4:	f7ff ff56 	bl	8007454 <__b2d>
 80075a8:	9800      	ldr	r0, [sp, #0]
 80075aa:	a903      	add	r1, sp, #12
 80075ac:	ec55 4b10 	vmov	r4, r5, d0
 80075b0:	f7ff ff50 	bl	8007454 <__b2d>
 80075b4:	9b01      	ldr	r3, [sp, #4]
 80075b6:	6919      	ldr	r1, [r3, #16]
 80075b8:	9b00      	ldr	r3, [sp, #0]
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	1ac9      	subs	r1, r1, r3
 80075be:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80075c2:	1a9b      	subs	r3, r3, r2
 80075c4:	ec5b ab10 	vmov	sl, fp, d0
 80075c8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	bfce      	itee	gt
 80075d0:	462a      	movgt	r2, r5
 80075d2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80075d6:	465a      	movle	r2, fp
 80075d8:	462f      	mov	r7, r5
 80075da:	46d9      	mov	r9, fp
 80075dc:	bfcc      	ite	gt
 80075de:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80075e2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80075e6:	464b      	mov	r3, r9
 80075e8:	4652      	mov	r2, sl
 80075ea:	4620      	mov	r0, r4
 80075ec:	4639      	mov	r1, r7
 80075ee:	f7f9 f92d 	bl	800084c <__aeabi_ddiv>
 80075f2:	ec41 0b10 	vmov	d0, r0, r1
 80075f6:	b005      	add	sp, #20
 80075f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080075fc <__copybits>:
 80075fc:	3901      	subs	r1, #1
 80075fe:	b570      	push	{r4, r5, r6, lr}
 8007600:	1149      	asrs	r1, r1, #5
 8007602:	6914      	ldr	r4, [r2, #16]
 8007604:	3101      	adds	r1, #1
 8007606:	f102 0314 	add.w	r3, r2, #20
 800760a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800760e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007612:	1f05      	subs	r5, r0, #4
 8007614:	42a3      	cmp	r3, r4
 8007616:	d30c      	bcc.n	8007632 <__copybits+0x36>
 8007618:	1aa3      	subs	r3, r4, r2
 800761a:	3b11      	subs	r3, #17
 800761c:	f023 0303 	bic.w	r3, r3, #3
 8007620:	3211      	adds	r2, #17
 8007622:	42a2      	cmp	r2, r4
 8007624:	bf88      	it	hi
 8007626:	2300      	movhi	r3, #0
 8007628:	4418      	add	r0, r3
 800762a:	2300      	movs	r3, #0
 800762c:	4288      	cmp	r0, r1
 800762e:	d305      	bcc.n	800763c <__copybits+0x40>
 8007630:	bd70      	pop	{r4, r5, r6, pc}
 8007632:	f853 6b04 	ldr.w	r6, [r3], #4
 8007636:	f845 6f04 	str.w	r6, [r5, #4]!
 800763a:	e7eb      	b.n	8007614 <__copybits+0x18>
 800763c:	f840 3b04 	str.w	r3, [r0], #4
 8007640:	e7f4      	b.n	800762c <__copybits+0x30>

08007642 <__any_on>:
 8007642:	f100 0214 	add.w	r2, r0, #20
 8007646:	6900      	ldr	r0, [r0, #16]
 8007648:	114b      	asrs	r3, r1, #5
 800764a:	4298      	cmp	r0, r3
 800764c:	b510      	push	{r4, lr}
 800764e:	db11      	blt.n	8007674 <__any_on+0x32>
 8007650:	dd0a      	ble.n	8007668 <__any_on+0x26>
 8007652:	f011 011f 	ands.w	r1, r1, #31
 8007656:	d007      	beq.n	8007668 <__any_on+0x26>
 8007658:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800765c:	fa24 f001 	lsr.w	r0, r4, r1
 8007660:	fa00 f101 	lsl.w	r1, r0, r1
 8007664:	428c      	cmp	r4, r1
 8007666:	d10b      	bne.n	8007680 <__any_on+0x3e>
 8007668:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800766c:	4293      	cmp	r3, r2
 800766e:	d803      	bhi.n	8007678 <__any_on+0x36>
 8007670:	2000      	movs	r0, #0
 8007672:	bd10      	pop	{r4, pc}
 8007674:	4603      	mov	r3, r0
 8007676:	e7f7      	b.n	8007668 <__any_on+0x26>
 8007678:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800767c:	2900      	cmp	r1, #0
 800767e:	d0f5      	beq.n	800766c <__any_on+0x2a>
 8007680:	2001      	movs	r0, #1
 8007682:	e7f6      	b.n	8007672 <__any_on+0x30>

08007684 <sulp>:
 8007684:	b570      	push	{r4, r5, r6, lr}
 8007686:	4604      	mov	r4, r0
 8007688:	460d      	mov	r5, r1
 800768a:	ec45 4b10 	vmov	d0, r4, r5
 800768e:	4616      	mov	r6, r2
 8007690:	f7ff feba 	bl	8007408 <__ulp>
 8007694:	ec51 0b10 	vmov	r0, r1, d0
 8007698:	b17e      	cbz	r6, 80076ba <sulp+0x36>
 800769a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800769e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	dd09      	ble.n	80076ba <sulp+0x36>
 80076a6:	051b      	lsls	r3, r3, #20
 80076a8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80076ac:	2400      	movs	r4, #0
 80076ae:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80076b2:	4622      	mov	r2, r4
 80076b4:	462b      	mov	r3, r5
 80076b6:	f7f8 ff9f 	bl	80005f8 <__aeabi_dmul>
 80076ba:	ec41 0b10 	vmov	d0, r0, r1
 80076be:	bd70      	pop	{r4, r5, r6, pc}

080076c0 <_strtod_l>:
 80076c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076c4:	b09f      	sub	sp, #124	@ 0x7c
 80076c6:	460c      	mov	r4, r1
 80076c8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80076ca:	2200      	movs	r2, #0
 80076cc:	921a      	str	r2, [sp, #104]	@ 0x68
 80076ce:	9005      	str	r0, [sp, #20]
 80076d0:	f04f 0a00 	mov.w	sl, #0
 80076d4:	f04f 0b00 	mov.w	fp, #0
 80076d8:	460a      	mov	r2, r1
 80076da:	9219      	str	r2, [sp, #100]	@ 0x64
 80076dc:	7811      	ldrb	r1, [r2, #0]
 80076de:	292b      	cmp	r1, #43	@ 0x2b
 80076e0:	d04a      	beq.n	8007778 <_strtod_l+0xb8>
 80076e2:	d838      	bhi.n	8007756 <_strtod_l+0x96>
 80076e4:	290d      	cmp	r1, #13
 80076e6:	d832      	bhi.n	800774e <_strtod_l+0x8e>
 80076e8:	2908      	cmp	r1, #8
 80076ea:	d832      	bhi.n	8007752 <_strtod_l+0x92>
 80076ec:	2900      	cmp	r1, #0
 80076ee:	d03b      	beq.n	8007768 <_strtod_l+0xa8>
 80076f0:	2200      	movs	r2, #0
 80076f2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80076f4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80076f6:	782a      	ldrb	r2, [r5, #0]
 80076f8:	2a30      	cmp	r2, #48	@ 0x30
 80076fa:	f040 80b3 	bne.w	8007864 <_strtod_l+0x1a4>
 80076fe:	786a      	ldrb	r2, [r5, #1]
 8007700:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007704:	2a58      	cmp	r2, #88	@ 0x58
 8007706:	d16e      	bne.n	80077e6 <_strtod_l+0x126>
 8007708:	9302      	str	r3, [sp, #8]
 800770a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800770c:	9301      	str	r3, [sp, #4]
 800770e:	ab1a      	add	r3, sp, #104	@ 0x68
 8007710:	9300      	str	r3, [sp, #0]
 8007712:	4a8e      	ldr	r2, [pc, #568]	@ (800794c <_strtod_l+0x28c>)
 8007714:	9805      	ldr	r0, [sp, #20]
 8007716:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007718:	a919      	add	r1, sp, #100	@ 0x64
 800771a:	f001 f927 	bl	800896c <__gethex>
 800771e:	f010 060f 	ands.w	r6, r0, #15
 8007722:	4604      	mov	r4, r0
 8007724:	d005      	beq.n	8007732 <_strtod_l+0x72>
 8007726:	2e06      	cmp	r6, #6
 8007728:	d128      	bne.n	800777c <_strtod_l+0xbc>
 800772a:	3501      	adds	r5, #1
 800772c:	2300      	movs	r3, #0
 800772e:	9519      	str	r5, [sp, #100]	@ 0x64
 8007730:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007732:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007734:	2b00      	cmp	r3, #0
 8007736:	f040 858e 	bne.w	8008256 <_strtod_l+0xb96>
 800773a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800773c:	b1cb      	cbz	r3, 8007772 <_strtod_l+0xb2>
 800773e:	4652      	mov	r2, sl
 8007740:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007744:	ec43 2b10 	vmov	d0, r2, r3
 8007748:	b01f      	add	sp, #124	@ 0x7c
 800774a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800774e:	2920      	cmp	r1, #32
 8007750:	d1ce      	bne.n	80076f0 <_strtod_l+0x30>
 8007752:	3201      	adds	r2, #1
 8007754:	e7c1      	b.n	80076da <_strtod_l+0x1a>
 8007756:	292d      	cmp	r1, #45	@ 0x2d
 8007758:	d1ca      	bne.n	80076f0 <_strtod_l+0x30>
 800775a:	2101      	movs	r1, #1
 800775c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800775e:	1c51      	adds	r1, r2, #1
 8007760:	9119      	str	r1, [sp, #100]	@ 0x64
 8007762:	7852      	ldrb	r2, [r2, #1]
 8007764:	2a00      	cmp	r2, #0
 8007766:	d1c5      	bne.n	80076f4 <_strtod_l+0x34>
 8007768:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800776a:	9419      	str	r4, [sp, #100]	@ 0x64
 800776c:	2b00      	cmp	r3, #0
 800776e:	f040 8570 	bne.w	8008252 <_strtod_l+0xb92>
 8007772:	4652      	mov	r2, sl
 8007774:	465b      	mov	r3, fp
 8007776:	e7e5      	b.n	8007744 <_strtod_l+0x84>
 8007778:	2100      	movs	r1, #0
 800777a:	e7ef      	b.n	800775c <_strtod_l+0x9c>
 800777c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800777e:	b13a      	cbz	r2, 8007790 <_strtod_l+0xd0>
 8007780:	2135      	movs	r1, #53	@ 0x35
 8007782:	a81c      	add	r0, sp, #112	@ 0x70
 8007784:	f7ff ff3a 	bl	80075fc <__copybits>
 8007788:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800778a:	9805      	ldr	r0, [sp, #20]
 800778c:	f7ff fb08 	bl	8006da0 <_Bfree>
 8007790:	3e01      	subs	r6, #1
 8007792:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007794:	2e04      	cmp	r6, #4
 8007796:	d806      	bhi.n	80077a6 <_strtod_l+0xe6>
 8007798:	e8df f006 	tbb	[pc, r6]
 800779c:	201d0314 	.word	0x201d0314
 80077a0:	14          	.byte	0x14
 80077a1:	00          	.byte	0x00
 80077a2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80077a6:	05e1      	lsls	r1, r4, #23
 80077a8:	bf48      	it	mi
 80077aa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80077ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80077b2:	0d1b      	lsrs	r3, r3, #20
 80077b4:	051b      	lsls	r3, r3, #20
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d1bb      	bne.n	8007732 <_strtod_l+0x72>
 80077ba:	f7fe fb31 	bl	8005e20 <__errno>
 80077be:	2322      	movs	r3, #34	@ 0x22
 80077c0:	6003      	str	r3, [r0, #0]
 80077c2:	e7b6      	b.n	8007732 <_strtod_l+0x72>
 80077c4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80077c8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80077cc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80077d0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80077d4:	e7e7      	b.n	80077a6 <_strtod_l+0xe6>
 80077d6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007954 <_strtod_l+0x294>
 80077da:	e7e4      	b.n	80077a6 <_strtod_l+0xe6>
 80077dc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80077e0:	f04f 3aff 	mov.w	sl, #4294967295
 80077e4:	e7df      	b.n	80077a6 <_strtod_l+0xe6>
 80077e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80077e8:	1c5a      	adds	r2, r3, #1
 80077ea:	9219      	str	r2, [sp, #100]	@ 0x64
 80077ec:	785b      	ldrb	r3, [r3, #1]
 80077ee:	2b30      	cmp	r3, #48	@ 0x30
 80077f0:	d0f9      	beq.n	80077e6 <_strtod_l+0x126>
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d09d      	beq.n	8007732 <_strtod_l+0x72>
 80077f6:	2301      	movs	r3, #1
 80077f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80077fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80077fc:	930c      	str	r3, [sp, #48]	@ 0x30
 80077fe:	2300      	movs	r3, #0
 8007800:	9308      	str	r3, [sp, #32]
 8007802:	930a      	str	r3, [sp, #40]	@ 0x28
 8007804:	461f      	mov	r7, r3
 8007806:	220a      	movs	r2, #10
 8007808:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800780a:	7805      	ldrb	r5, [r0, #0]
 800780c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007810:	b2d9      	uxtb	r1, r3
 8007812:	2909      	cmp	r1, #9
 8007814:	d928      	bls.n	8007868 <_strtod_l+0x1a8>
 8007816:	494e      	ldr	r1, [pc, #312]	@ (8007950 <_strtod_l+0x290>)
 8007818:	2201      	movs	r2, #1
 800781a:	f000 ffd5 	bl	80087c8 <strncmp>
 800781e:	2800      	cmp	r0, #0
 8007820:	d032      	beq.n	8007888 <_strtod_l+0x1c8>
 8007822:	2000      	movs	r0, #0
 8007824:	462a      	mov	r2, r5
 8007826:	4681      	mov	r9, r0
 8007828:	463d      	mov	r5, r7
 800782a:	4603      	mov	r3, r0
 800782c:	2a65      	cmp	r2, #101	@ 0x65
 800782e:	d001      	beq.n	8007834 <_strtod_l+0x174>
 8007830:	2a45      	cmp	r2, #69	@ 0x45
 8007832:	d114      	bne.n	800785e <_strtod_l+0x19e>
 8007834:	b91d      	cbnz	r5, 800783e <_strtod_l+0x17e>
 8007836:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007838:	4302      	orrs	r2, r0
 800783a:	d095      	beq.n	8007768 <_strtod_l+0xa8>
 800783c:	2500      	movs	r5, #0
 800783e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007840:	1c62      	adds	r2, r4, #1
 8007842:	9219      	str	r2, [sp, #100]	@ 0x64
 8007844:	7862      	ldrb	r2, [r4, #1]
 8007846:	2a2b      	cmp	r2, #43	@ 0x2b
 8007848:	d077      	beq.n	800793a <_strtod_l+0x27a>
 800784a:	2a2d      	cmp	r2, #45	@ 0x2d
 800784c:	d07b      	beq.n	8007946 <_strtod_l+0x286>
 800784e:	f04f 0c00 	mov.w	ip, #0
 8007852:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007856:	2909      	cmp	r1, #9
 8007858:	f240 8082 	bls.w	8007960 <_strtod_l+0x2a0>
 800785c:	9419      	str	r4, [sp, #100]	@ 0x64
 800785e:	f04f 0800 	mov.w	r8, #0
 8007862:	e0a2      	b.n	80079aa <_strtod_l+0x2ea>
 8007864:	2300      	movs	r3, #0
 8007866:	e7c7      	b.n	80077f8 <_strtod_l+0x138>
 8007868:	2f08      	cmp	r7, #8
 800786a:	bfd5      	itete	le
 800786c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800786e:	9908      	ldrgt	r1, [sp, #32]
 8007870:	fb02 3301 	mlale	r3, r2, r1, r3
 8007874:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007878:	f100 0001 	add.w	r0, r0, #1
 800787c:	bfd4      	ite	le
 800787e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007880:	9308      	strgt	r3, [sp, #32]
 8007882:	3701      	adds	r7, #1
 8007884:	9019      	str	r0, [sp, #100]	@ 0x64
 8007886:	e7bf      	b.n	8007808 <_strtod_l+0x148>
 8007888:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800788a:	1c5a      	adds	r2, r3, #1
 800788c:	9219      	str	r2, [sp, #100]	@ 0x64
 800788e:	785a      	ldrb	r2, [r3, #1]
 8007890:	b37f      	cbz	r7, 80078f2 <_strtod_l+0x232>
 8007892:	4681      	mov	r9, r0
 8007894:	463d      	mov	r5, r7
 8007896:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800789a:	2b09      	cmp	r3, #9
 800789c:	d912      	bls.n	80078c4 <_strtod_l+0x204>
 800789e:	2301      	movs	r3, #1
 80078a0:	e7c4      	b.n	800782c <_strtod_l+0x16c>
 80078a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80078a4:	1c5a      	adds	r2, r3, #1
 80078a6:	9219      	str	r2, [sp, #100]	@ 0x64
 80078a8:	785a      	ldrb	r2, [r3, #1]
 80078aa:	3001      	adds	r0, #1
 80078ac:	2a30      	cmp	r2, #48	@ 0x30
 80078ae:	d0f8      	beq.n	80078a2 <_strtod_l+0x1e2>
 80078b0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80078b4:	2b08      	cmp	r3, #8
 80078b6:	f200 84d3 	bhi.w	8008260 <_strtod_l+0xba0>
 80078ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80078bc:	930c      	str	r3, [sp, #48]	@ 0x30
 80078be:	4681      	mov	r9, r0
 80078c0:	2000      	movs	r0, #0
 80078c2:	4605      	mov	r5, r0
 80078c4:	3a30      	subs	r2, #48	@ 0x30
 80078c6:	f100 0301 	add.w	r3, r0, #1
 80078ca:	d02a      	beq.n	8007922 <_strtod_l+0x262>
 80078cc:	4499      	add	r9, r3
 80078ce:	eb00 0c05 	add.w	ip, r0, r5
 80078d2:	462b      	mov	r3, r5
 80078d4:	210a      	movs	r1, #10
 80078d6:	4563      	cmp	r3, ip
 80078d8:	d10d      	bne.n	80078f6 <_strtod_l+0x236>
 80078da:	1c69      	adds	r1, r5, #1
 80078dc:	4401      	add	r1, r0
 80078de:	4428      	add	r0, r5
 80078e0:	2808      	cmp	r0, #8
 80078e2:	dc16      	bgt.n	8007912 <_strtod_l+0x252>
 80078e4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80078e6:	230a      	movs	r3, #10
 80078e8:	fb03 2300 	mla	r3, r3, r0, r2
 80078ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80078ee:	2300      	movs	r3, #0
 80078f0:	e018      	b.n	8007924 <_strtod_l+0x264>
 80078f2:	4638      	mov	r0, r7
 80078f4:	e7da      	b.n	80078ac <_strtod_l+0x1ec>
 80078f6:	2b08      	cmp	r3, #8
 80078f8:	f103 0301 	add.w	r3, r3, #1
 80078fc:	dc03      	bgt.n	8007906 <_strtod_l+0x246>
 80078fe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007900:	434e      	muls	r6, r1
 8007902:	960a      	str	r6, [sp, #40]	@ 0x28
 8007904:	e7e7      	b.n	80078d6 <_strtod_l+0x216>
 8007906:	2b10      	cmp	r3, #16
 8007908:	bfde      	ittt	le
 800790a:	9e08      	ldrle	r6, [sp, #32]
 800790c:	434e      	mulle	r6, r1
 800790e:	9608      	strle	r6, [sp, #32]
 8007910:	e7e1      	b.n	80078d6 <_strtod_l+0x216>
 8007912:	280f      	cmp	r0, #15
 8007914:	dceb      	bgt.n	80078ee <_strtod_l+0x22e>
 8007916:	9808      	ldr	r0, [sp, #32]
 8007918:	230a      	movs	r3, #10
 800791a:	fb03 2300 	mla	r3, r3, r0, r2
 800791e:	9308      	str	r3, [sp, #32]
 8007920:	e7e5      	b.n	80078ee <_strtod_l+0x22e>
 8007922:	4629      	mov	r1, r5
 8007924:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007926:	1c50      	adds	r0, r2, #1
 8007928:	9019      	str	r0, [sp, #100]	@ 0x64
 800792a:	7852      	ldrb	r2, [r2, #1]
 800792c:	4618      	mov	r0, r3
 800792e:	460d      	mov	r5, r1
 8007930:	e7b1      	b.n	8007896 <_strtod_l+0x1d6>
 8007932:	f04f 0900 	mov.w	r9, #0
 8007936:	2301      	movs	r3, #1
 8007938:	e77d      	b.n	8007836 <_strtod_l+0x176>
 800793a:	f04f 0c00 	mov.w	ip, #0
 800793e:	1ca2      	adds	r2, r4, #2
 8007940:	9219      	str	r2, [sp, #100]	@ 0x64
 8007942:	78a2      	ldrb	r2, [r4, #2]
 8007944:	e785      	b.n	8007852 <_strtod_l+0x192>
 8007946:	f04f 0c01 	mov.w	ip, #1
 800794a:	e7f8      	b.n	800793e <_strtod_l+0x27e>
 800794c:	080097d8 	.word	0x080097d8
 8007950:	080097c0 	.word	0x080097c0
 8007954:	7ff00000 	.word	0x7ff00000
 8007958:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800795a:	1c51      	adds	r1, r2, #1
 800795c:	9119      	str	r1, [sp, #100]	@ 0x64
 800795e:	7852      	ldrb	r2, [r2, #1]
 8007960:	2a30      	cmp	r2, #48	@ 0x30
 8007962:	d0f9      	beq.n	8007958 <_strtod_l+0x298>
 8007964:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007968:	2908      	cmp	r1, #8
 800796a:	f63f af78 	bhi.w	800785e <_strtod_l+0x19e>
 800796e:	3a30      	subs	r2, #48	@ 0x30
 8007970:	920e      	str	r2, [sp, #56]	@ 0x38
 8007972:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007974:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007976:	f04f 080a 	mov.w	r8, #10
 800797a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800797c:	1c56      	adds	r6, r2, #1
 800797e:	9619      	str	r6, [sp, #100]	@ 0x64
 8007980:	7852      	ldrb	r2, [r2, #1]
 8007982:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007986:	f1be 0f09 	cmp.w	lr, #9
 800798a:	d939      	bls.n	8007a00 <_strtod_l+0x340>
 800798c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800798e:	1a76      	subs	r6, r6, r1
 8007990:	2e08      	cmp	r6, #8
 8007992:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007996:	dc03      	bgt.n	80079a0 <_strtod_l+0x2e0>
 8007998:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800799a:	4588      	cmp	r8, r1
 800799c:	bfa8      	it	ge
 800799e:	4688      	movge	r8, r1
 80079a0:	f1bc 0f00 	cmp.w	ip, #0
 80079a4:	d001      	beq.n	80079aa <_strtod_l+0x2ea>
 80079a6:	f1c8 0800 	rsb	r8, r8, #0
 80079aa:	2d00      	cmp	r5, #0
 80079ac:	d14e      	bne.n	8007a4c <_strtod_l+0x38c>
 80079ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80079b0:	4308      	orrs	r0, r1
 80079b2:	f47f aebe 	bne.w	8007732 <_strtod_l+0x72>
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	f47f aed6 	bne.w	8007768 <_strtod_l+0xa8>
 80079bc:	2a69      	cmp	r2, #105	@ 0x69
 80079be:	d028      	beq.n	8007a12 <_strtod_l+0x352>
 80079c0:	dc25      	bgt.n	8007a0e <_strtod_l+0x34e>
 80079c2:	2a49      	cmp	r2, #73	@ 0x49
 80079c4:	d025      	beq.n	8007a12 <_strtod_l+0x352>
 80079c6:	2a4e      	cmp	r2, #78	@ 0x4e
 80079c8:	f47f aece 	bne.w	8007768 <_strtod_l+0xa8>
 80079cc:	499b      	ldr	r1, [pc, #620]	@ (8007c3c <_strtod_l+0x57c>)
 80079ce:	a819      	add	r0, sp, #100	@ 0x64
 80079d0:	f001 f9ee 	bl	8008db0 <__match>
 80079d4:	2800      	cmp	r0, #0
 80079d6:	f43f aec7 	beq.w	8007768 <_strtod_l+0xa8>
 80079da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	2b28      	cmp	r3, #40	@ 0x28
 80079e0:	d12e      	bne.n	8007a40 <_strtod_l+0x380>
 80079e2:	4997      	ldr	r1, [pc, #604]	@ (8007c40 <_strtod_l+0x580>)
 80079e4:	aa1c      	add	r2, sp, #112	@ 0x70
 80079e6:	a819      	add	r0, sp, #100	@ 0x64
 80079e8:	f001 f9f6 	bl	8008dd8 <__hexnan>
 80079ec:	2805      	cmp	r0, #5
 80079ee:	d127      	bne.n	8007a40 <_strtod_l+0x380>
 80079f0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80079f2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80079f6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80079fa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80079fe:	e698      	b.n	8007732 <_strtod_l+0x72>
 8007a00:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007a02:	fb08 2101 	mla	r1, r8, r1, r2
 8007a06:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007a0a:	920e      	str	r2, [sp, #56]	@ 0x38
 8007a0c:	e7b5      	b.n	800797a <_strtod_l+0x2ba>
 8007a0e:	2a6e      	cmp	r2, #110	@ 0x6e
 8007a10:	e7da      	b.n	80079c8 <_strtod_l+0x308>
 8007a12:	498c      	ldr	r1, [pc, #560]	@ (8007c44 <_strtod_l+0x584>)
 8007a14:	a819      	add	r0, sp, #100	@ 0x64
 8007a16:	f001 f9cb 	bl	8008db0 <__match>
 8007a1a:	2800      	cmp	r0, #0
 8007a1c:	f43f aea4 	beq.w	8007768 <_strtod_l+0xa8>
 8007a20:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a22:	4989      	ldr	r1, [pc, #548]	@ (8007c48 <_strtod_l+0x588>)
 8007a24:	3b01      	subs	r3, #1
 8007a26:	a819      	add	r0, sp, #100	@ 0x64
 8007a28:	9319      	str	r3, [sp, #100]	@ 0x64
 8007a2a:	f001 f9c1 	bl	8008db0 <__match>
 8007a2e:	b910      	cbnz	r0, 8007a36 <_strtod_l+0x376>
 8007a30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a32:	3301      	adds	r3, #1
 8007a34:	9319      	str	r3, [sp, #100]	@ 0x64
 8007a36:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007c58 <_strtod_l+0x598>
 8007a3a:	f04f 0a00 	mov.w	sl, #0
 8007a3e:	e678      	b.n	8007732 <_strtod_l+0x72>
 8007a40:	4882      	ldr	r0, [pc, #520]	@ (8007c4c <_strtod_l+0x58c>)
 8007a42:	f000 fef1 	bl	8008828 <nan>
 8007a46:	ec5b ab10 	vmov	sl, fp, d0
 8007a4a:	e672      	b.n	8007732 <_strtod_l+0x72>
 8007a4c:	eba8 0309 	sub.w	r3, r8, r9
 8007a50:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007a52:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a54:	2f00      	cmp	r7, #0
 8007a56:	bf08      	it	eq
 8007a58:	462f      	moveq	r7, r5
 8007a5a:	2d10      	cmp	r5, #16
 8007a5c:	462c      	mov	r4, r5
 8007a5e:	bfa8      	it	ge
 8007a60:	2410      	movge	r4, #16
 8007a62:	f7f8 fd4f 	bl	8000504 <__aeabi_ui2d>
 8007a66:	2d09      	cmp	r5, #9
 8007a68:	4682      	mov	sl, r0
 8007a6a:	468b      	mov	fp, r1
 8007a6c:	dc13      	bgt.n	8007a96 <_strtod_l+0x3d6>
 8007a6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	f43f ae5e 	beq.w	8007732 <_strtod_l+0x72>
 8007a76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a78:	dd78      	ble.n	8007b6c <_strtod_l+0x4ac>
 8007a7a:	2b16      	cmp	r3, #22
 8007a7c:	dc5f      	bgt.n	8007b3e <_strtod_l+0x47e>
 8007a7e:	4974      	ldr	r1, [pc, #464]	@ (8007c50 <_strtod_l+0x590>)
 8007a80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007a84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a88:	4652      	mov	r2, sl
 8007a8a:	465b      	mov	r3, fp
 8007a8c:	f7f8 fdb4 	bl	80005f8 <__aeabi_dmul>
 8007a90:	4682      	mov	sl, r0
 8007a92:	468b      	mov	fp, r1
 8007a94:	e64d      	b.n	8007732 <_strtod_l+0x72>
 8007a96:	4b6e      	ldr	r3, [pc, #440]	@ (8007c50 <_strtod_l+0x590>)
 8007a98:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007a9c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007aa0:	f7f8 fdaa 	bl	80005f8 <__aeabi_dmul>
 8007aa4:	4682      	mov	sl, r0
 8007aa6:	9808      	ldr	r0, [sp, #32]
 8007aa8:	468b      	mov	fp, r1
 8007aaa:	f7f8 fd2b 	bl	8000504 <__aeabi_ui2d>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	4650      	mov	r0, sl
 8007ab4:	4659      	mov	r1, fp
 8007ab6:	f7f8 fbe9 	bl	800028c <__adddf3>
 8007aba:	2d0f      	cmp	r5, #15
 8007abc:	4682      	mov	sl, r0
 8007abe:	468b      	mov	fp, r1
 8007ac0:	ddd5      	ble.n	8007a6e <_strtod_l+0x3ae>
 8007ac2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ac4:	1b2c      	subs	r4, r5, r4
 8007ac6:	441c      	add	r4, r3
 8007ac8:	2c00      	cmp	r4, #0
 8007aca:	f340 8096 	ble.w	8007bfa <_strtod_l+0x53a>
 8007ace:	f014 030f 	ands.w	r3, r4, #15
 8007ad2:	d00a      	beq.n	8007aea <_strtod_l+0x42a>
 8007ad4:	495e      	ldr	r1, [pc, #376]	@ (8007c50 <_strtod_l+0x590>)
 8007ad6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007ada:	4652      	mov	r2, sl
 8007adc:	465b      	mov	r3, fp
 8007ade:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ae2:	f7f8 fd89 	bl	80005f8 <__aeabi_dmul>
 8007ae6:	4682      	mov	sl, r0
 8007ae8:	468b      	mov	fp, r1
 8007aea:	f034 040f 	bics.w	r4, r4, #15
 8007aee:	d073      	beq.n	8007bd8 <_strtod_l+0x518>
 8007af0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007af4:	dd48      	ble.n	8007b88 <_strtod_l+0x4c8>
 8007af6:	2400      	movs	r4, #0
 8007af8:	46a0      	mov	r8, r4
 8007afa:	940a      	str	r4, [sp, #40]	@ 0x28
 8007afc:	46a1      	mov	r9, r4
 8007afe:	9a05      	ldr	r2, [sp, #20]
 8007b00:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007c58 <_strtod_l+0x598>
 8007b04:	2322      	movs	r3, #34	@ 0x22
 8007b06:	6013      	str	r3, [r2, #0]
 8007b08:	f04f 0a00 	mov.w	sl, #0
 8007b0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	f43f ae0f 	beq.w	8007732 <_strtod_l+0x72>
 8007b14:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007b16:	9805      	ldr	r0, [sp, #20]
 8007b18:	f7ff f942 	bl	8006da0 <_Bfree>
 8007b1c:	9805      	ldr	r0, [sp, #20]
 8007b1e:	4649      	mov	r1, r9
 8007b20:	f7ff f93e 	bl	8006da0 <_Bfree>
 8007b24:	9805      	ldr	r0, [sp, #20]
 8007b26:	4641      	mov	r1, r8
 8007b28:	f7ff f93a 	bl	8006da0 <_Bfree>
 8007b2c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b2e:	9805      	ldr	r0, [sp, #20]
 8007b30:	f7ff f936 	bl	8006da0 <_Bfree>
 8007b34:	9805      	ldr	r0, [sp, #20]
 8007b36:	4621      	mov	r1, r4
 8007b38:	f7ff f932 	bl	8006da0 <_Bfree>
 8007b3c:	e5f9      	b.n	8007732 <_strtod_l+0x72>
 8007b3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b40:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007b44:	4293      	cmp	r3, r2
 8007b46:	dbbc      	blt.n	8007ac2 <_strtod_l+0x402>
 8007b48:	4c41      	ldr	r4, [pc, #260]	@ (8007c50 <_strtod_l+0x590>)
 8007b4a:	f1c5 050f 	rsb	r5, r5, #15
 8007b4e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007b52:	4652      	mov	r2, sl
 8007b54:	465b      	mov	r3, fp
 8007b56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b5a:	f7f8 fd4d 	bl	80005f8 <__aeabi_dmul>
 8007b5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b60:	1b5d      	subs	r5, r3, r5
 8007b62:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007b66:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007b6a:	e78f      	b.n	8007a8c <_strtod_l+0x3cc>
 8007b6c:	3316      	adds	r3, #22
 8007b6e:	dba8      	blt.n	8007ac2 <_strtod_l+0x402>
 8007b70:	4b37      	ldr	r3, [pc, #220]	@ (8007c50 <_strtod_l+0x590>)
 8007b72:	eba9 0808 	sub.w	r8, r9, r8
 8007b76:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007b7a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007b7e:	4650      	mov	r0, sl
 8007b80:	4659      	mov	r1, fp
 8007b82:	f7f8 fe63 	bl	800084c <__aeabi_ddiv>
 8007b86:	e783      	b.n	8007a90 <_strtod_l+0x3d0>
 8007b88:	4b32      	ldr	r3, [pc, #200]	@ (8007c54 <_strtod_l+0x594>)
 8007b8a:	9308      	str	r3, [sp, #32]
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	1124      	asrs	r4, r4, #4
 8007b90:	4650      	mov	r0, sl
 8007b92:	4659      	mov	r1, fp
 8007b94:	461e      	mov	r6, r3
 8007b96:	2c01      	cmp	r4, #1
 8007b98:	dc21      	bgt.n	8007bde <_strtod_l+0x51e>
 8007b9a:	b10b      	cbz	r3, 8007ba0 <_strtod_l+0x4e0>
 8007b9c:	4682      	mov	sl, r0
 8007b9e:	468b      	mov	fp, r1
 8007ba0:	492c      	ldr	r1, [pc, #176]	@ (8007c54 <_strtod_l+0x594>)
 8007ba2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007ba6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007baa:	4652      	mov	r2, sl
 8007bac:	465b      	mov	r3, fp
 8007bae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bb2:	f7f8 fd21 	bl	80005f8 <__aeabi_dmul>
 8007bb6:	4b28      	ldr	r3, [pc, #160]	@ (8007c58 <_strtod_l+0x598>)
 8007bb8:	460a      	mov	r2, r1
 8007bba:	400b      	ands	r3, r1
 8007bbc:	4927      	ldr	r1, [pc, #156]	@ (8007c5c <_strtod_l+0x59c>)
 8007bbe:	428b      	cmp	r3, r1
 8007bc0:	4682      	mov	sl, r0
 8007bc2:	d898      	bhi.n	8007af6 <_strtod_l+0x436>
 8007bc4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007bc8:	428b      	cmp	r3, r1
 8007bca:	bf86      	itte	hi
 8007bcc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007c60 <_strtod_l+0x5a0>
 8007bd0:	f04f 3aff 	movhi.w	sl, #4294967295
 8007bd4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007bd8:	2300      	movs	r3, #0
 8007bda:	9308      	str	r3, [sp, #32]
 8007bdc:	e07a      	b.n	8007cd4 <_strtod_l+0x614>
 8007bde:	07e2      	lsls	r2, r4, #31
 8007be0:	d505      	bpl.n	8007bee <_strtod_l+0x52e>
 8007be2:	9b08      	ldr	r3, [sp, #32]
 8007be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be8:	f7f8 fd06 	bl	80005f8 <__aeabi_dmul>
 8007bec:	2301      	movs	r3, #1
 8007bee:	9a08      	ldr	r2, [sp, #32]
 8007bf0:	3208      	adds	r2, #8
 8007bf2:	3601      	adds	r6, #1
 8007bf4:	1064      	asrs	r4, r4, #1
 8007bf6:	9208      	str	r2, [sp, #32]
 8007bf8:	e7cd      	b.n	8007b96 <_strtod_l+0x4d6>
 8007bfa:	d0ed      	beq.n	8007bd8 <_strtod_l+0x518>
 8007bfc:	4264      	negs	r4, r4
 8007bfe:	f014 020f 	ands.w	r2, r4, #15
 8007c02:	d00a      	beq.n	8007c1a <_strtod_l+0x55a>
 8007c04:	4b12      	ldr	r3, [pc, #72]	@ (8007c50 <_strtod_l+0x590>)
 8007c06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c0a:	4650      	mov	r0, sl
 8007c0c:	4659      	mov	r1, fp
 8007c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c12:	f7f8 fe1b 	bl	800084c <__aeabi_ddiv>
 8007c16:	4682      	mov	sl, r0
 8007c18:	468b      	mov	fp, r1
 8007c1a:	1124      	asrs	r4, r4, #4
 8007c1c:	d0dc      	beq.n	8007bd8 <_strtod_l+0x518>
 8007c1e:	2c1f      	cmp	r4, #31
 8007c20:	dd20      	ble.n	8007c64 <_strtod_l+0x5a4>
 8007c22:	2400      	movs	r4, #0
 8007c24:	46a0      	mov	r8, r4
 8007c26:	940a      	str	r4, [sp, #40]	@ 0x28
 8007c28:	46a1      	mov	r9, r4
 8007c2a:	9a05      	ldr	r2, [sp, #20]
 8007c2c:	2322      	movs	r3, #34	@ 0x22
 8007c2e:	f04f 0a00 	mov.w	sl, #0
 8007c32:	f04f 0b00 	mov.w	fp, #0
 8007c36:	6013      	str	r3, [r2, #0]
 8007c38:	e768      	b.n	8007b0c <_strtod_l+0x44c>
 8007c3a:	bf00      	nop
 8007c3c:	080095ad 	.word	0x080095ad
 8007c40:	080097c4 	.word	0x080097c4
 8007c44:	080095a5 	.word	0x080095a5
 8007c48:	080095dc 	.word	0x080095dc
 8007c4c:	0800996d 	.word	0x0800996d
 8007c50:	080096f8 	.word	0x080096f8
 8007c54:	080096d0 	.word	0x080096d0
 8007c58:	7ff00000 	.word	0x7ff00000
 8007c5c:	7ca00000 	.word	0x7ca00000
 8007c60:	7fefffff 	.word	0x7fefffff
 8007c64:	f014 0310 	ands.w	r3, r4, #16
 8007c68:	bf18      	it	ne
 8007c6a:	236a      	movne	r3, #106	@ 0x6a
 8007c6c:	4ea9      	ldr	r6, [pc, #676]	@ (8007f14 <_strtod_l+0x854>)
 8007c6e:	9308      	str	r3, [sp, #32]
 8007c70:	4650      	mov	r0, sl
 8007c72:	4659      	mov	r1, fp
 8007c74:	2300      	movs	r3, #0
 8007c76:	07e2      	lsls	r2, r4, #31
 8007c78:	d504      	bpl.n	8007c84 <_strtod_l+0x5c4>
 8007c7a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007c7e:	f7f8 fcbb 	bl	80005f8 <__aeabi_dmul>
 8007c82:	2301      	movs	r3, #1
 8007c84:	1064      	asrs	r4, r4, #1
 8007c86:	f106 0608 	add.w	r6, r6, #8
 8007c8a:	d1f4      	bne.n	8007c76 <_strtod_l+0x5b6>
 8007c8c:	b10b      	cbz	r3, 8007c92 <_strtod_l+0x5d2>
 8007c8e:	4682      	mov	sl, r0
 8007c90:	468b      	mov	fp, r1
 8007c92:	9b08      	ldr	r3, [sp, #32]
 8007c94:	b1b3      	cbz	r3, 8007cc4 <_strtod_l+0x604>
 8007c96:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007c9a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	4659      	mov	r1, fp
 8007ca2:	dd0f      	ble.n	8007cc4 <_strtod_l+0x604>
 8007ca4:	2b1f      	cmp	r3, #31
 8007ca6:	dd55      	ble.n	8007d54 <_strtod_l+0x694>
 8007ca8:	2b34      	cmp	r3, #52	@ 0x34
 8007caa:	bfde      	ittt	le
 8007cac:	f04f 33ff 	movle.w	r3, #4294967295
 8007cb0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007cb4:	4093      	lslle	r3, r2
 8007cb6:	f04f 0a00 	mov.w	sl, #0
 8007cba:	bfcc      	ite	gt
 8007cbc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007cc0:	ea03 0b01 	andle.w	fp, r3, r1
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	4650      	mov	r0, sl
 8007cca:	4659      	mov	r1, fp
 8007ccc:	f7f8 fefc 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cd0:	2800      	cmp	r0, #0
 8007cd2:	d1a6      	bne.n	8007c22 <_strtod_l+0x562>
 8007cd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cd6:	9300      	str	r3, [sp, #0]
 8007cd8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007cda:	9805      	ldr	r0, [sp, #20]
 8007cdc:	462b      	mov	r3, r5
 8007cde:	463a      	mov	r2, r7
 8007ce0:	f7ff f8c6 	bl	8006e70 <__s2b>
 8007ce4:	900a      	str	r0, [sp, #40]	@ 0x28
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	f43f af05 	beq.w	8007af6 <_strtod_l+0x436>
 8007cec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007cee:	2a00      	cmp	r2, #0
 8007cf0:	eba9 0308 	sub.w	r3, r9, r8
 8007cf4:	bfa8      	it	ge
 8007cf6:	2300      	movge	r3, #0
 8007cf8:	9312      	str	r3, [sp, #72]	@ 0x48
 8007cfa:	2400      	movs	r4, #0
 8007cfc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007d00:	9316      	str	r3, [sp, #88]	@ 0x58
 8007d02:	46a0      	mov	r8, r4
 8007d04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d06:	9805      	ldr	r0, [sp, #20]
 8007d08:	6859      	ldr	r1, [r3, #4]
 8007d0a:	f7ff f809 	bl	8006d20 <_Balloc>
 8007d0e:	4681      	mov	r9, r0
 8007d10:	2800      	cmp	r0, #0
 8007d12:	f43f aef4 	beq.w	8007afe <_strtod_l+0x43e>
 8007d16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d18:	691a      	ldr	r2, [r3, #16]
 8007d1a:	3202      	adds	r2, #2
 8007d1c:	f103 010c 	add.w	r1, r3, #12
 8007d20:	0092      	lsls	r2, r2, #2
 8007d22:	300c      	adds	r0, #12
 8007d24:	f000 fd72 	bl	800880c <memcpy>
 8007d28:	ec4b ab10 	vmov	d0, sl, fp
 8007d2c:	9805      	ldr	r0, [sp, #20]
 8007d2e:	aa1c      	add	r2, sp, #112	@ 0x70
 8007d30:	a91b      	add	r1, sp, #108	@ 0x6c
 8007d32:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007d36:	f7ff fbd7 	bl	80074e8 <__d2b>
 8007d3a:	901a      	str	r0, [sp, #104]	@ 0x68
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	f43f aede 	beq.w	8007afe <_strtod_l+0x43e>
 8007d42:	9805      	ldr	r0, [sp, #20]
 8007d44:	2101      	movs	r1, #1
 8007d46:	f7ff f929 	bl	8006f9c <__i2b>
 8007d4a:	4680      	mov	r8, r0
 8007d4c:	b948      	cbnz	r0, 8007d62 <_strtod_l+0x6a2>
 8007d4e:	f04f 0800 	mov.w	r8, #0
 8007d52:	e6d4      	b.n	8007afe <_strtod_l+0x43e>
 8007d54:	f04f 32ff 	mov.w	r2, #4294967295
 8007d58:	fa02 f303 	lsl.w	r3, r2, r3
 8007d5c:	ea03 0a0a 	and.w	sl, r3, sl
 8007d60:	e7b0      	b.n	8007cc4 <_strtod_l+0x604>
 8007d62:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007d64:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007d66:	2d00      	cmp	r5, #0
 8007d68:	bfab      	itete	ge
 8007d6a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007d6c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007d6e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007d70:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007d72:	bfac      	ite	ge
 8007d74:	18ef      	addge	r7, r5, r3
 8007d76:	1b5e      	sublt	r6, r3, r5
 8007d78:	9b08      	ldr	r3, [sp, #32]
 8007d7a:	1aed      	subs	r5, r5, r3
 8007d7c:	4415      	add	r5, r2
 8007d7e:	4b66      	ldr	r3, [pc, #408]	@ (8007f18 <_strtod_l+0x858>)
 8007d80:	3d01      	subs	r5, #1
 8007d82:	429d      	cmp	r5, r3
 8007d84:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007d88:	da50      	bge.n	8007e2c <_strtod_l+0x76c>
 8007d8a:	1b5b      	subs	r3, r3, r5
 8007d8c:	2b1f      	cmp	r3, #31
 8007d8e:	eba2 0203 	sub.w	r2, r2, r3
 8007d92:	f04f 0101 	mov.w	r1, #1
 8007d96:	dc3d      	bgt.n	8007e14 <_strtod_l+0x754>
 8007d98:	fa01 f303 	lsl.w	r3, r1, r3
 8007d9c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007d9e:	2300      	movs	r3, #0
 8007da0:	9310      	str	r3, [sp, #64]	@ 0x40
 8007da2:	18bd      	adds	r5, r7, r2
 8007da4:	9b08      	ldr	r3, [sp, #32]
 8007da6:	42af      	cmp	r7, r5
 8007da8:	4416      	add	r6, r2
 8007daa:	441e      	add	r6, r3
 8007dac:	463b      	mov	r3, r7
 8007dae:	bfa8      	it	ge
 8007db0:	462b      	movge	r3, r5
 8007db2:	42b3      	cmp	r3, r6
 8007db4:	bfa8      	it	ge
 8007db6:	4633      	movge	r3, r6
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	bfc2      	ittt	gt
 8007dbc:	1aed      	subgt	r5, r5, r3
 8007dbe:	1af6      	subgt	r6, r6, r3
 8007dc0:	1aff      	subgt	r7, r7, r3
 8007dc2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	dd16      	ble.n	8007df6 <_strtod_l+0x736>
 8007dc8:	4641      	mov	r1, r8
 8007dca:	9805      	ldr	r0, [sp, #20]
 8007dcc:	461a      	mov	r2, r3
 8007dce:	f7ff f9a5 	bl	800711c <__pow5mult>
 8007dd2:	4680      	mov	r8, r0
 8007dd4:	2800      	cmp	r0, #0
 8007dd6:	d0ba      	beq.n	8007d4e <_strtod_l+0x68e>
 8007dd8:	4601      	mov	r1, r0
 8007dda:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007ddc:	9805      	ldr	r0, [sp, #20]
 8007dde:	f7ff f8f3 	bl	8006fc8 <__multiply>
 8007de2:	900e      	str	r0, [sp, #56]	@ 0x38
 8007de4:	2800      	cmp	r0, #0
 8007de6:	f43f ae8a 	beq.w	8007afe <_strtod_l+0x43e>
 8007dea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007dec:	9805      	ldr	r0, [sp, #20]
 8007dee:	f7fe ffd7 	bl	8006da0 <_Bfree>
 8007df2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007df4:	931a      	str	r3, [sp, #104]	@ 0x68
 8007df6:	2d00      	cmp	r5, #0
 8007df8:	dc1d      	bgt.n	8007e36 <_strtod_l+0x776>
 8007dfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	dd23      	ble.n	8007e48 <_strtod_l+0x788>
 8007e00:	4649      	mov	r1, r9
 8007e02:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007e04:	9805      	ldr	r0, [sp, #20]
 8007e06:	f7ff f989 	bl	800711c <__pow5mult>
 8007e0a:	4681      	mov	r9, r0
 8007e0c:	b9e0      	cbnz	r0, 8007e48 <_strtod_l+0x788>
 8007e0e:	f04f 0900 	mov.w	r9, #0
 8007e12:	e674      	b.n	8007afe <_strtod_l+0x43e>
 8007e14:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007e18:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007e1c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007e20:	35e2      	adds	r5, #226	@ 0xe2
 8007e22:	fa01 f305 	lsl.w	r3, r1, r5
 8007e26:	9310      	str	r3, [sp, #64]	@ 0x40
 8007e28:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007e2a:	e7ba      	b.n	8007da2 <_strtod_l+0x6e2>
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007e30:	2301      	movs	r3, #1
 8007e32:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007e34:	e7b5      	b.n	8007da2 <_strtod_l+0x6e2>
 8007e36:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007e38:	9805      	ldr	r0, [sp, #20]
 8007e3a:	462a      	mov	r2, r5
 8007e3c:	f7ff f9c8 	bl	80071d0 <__lshift>
 8007e40:	901a      	str	r0, [sp, #104]	@ 0x68
 8007e42:	2800      	cmp	r0, #0
 8007e44:	d1d9      	bne.n	8007dfa <_strtod_l+0x73a>
 8007e46:	e65a      	b.n	8007afe <_strtod_l+0x43e>
 8007e48:	2e00      	cmp	r6, #0
 8007e4a:	dd07      	ble.n	8007e5c <_strtod_l+0x79c>
 8007e4c:	4649      	mov	r1, r9
 8007e4e:	9805      	ldr	r0, [sp, #20]
 8007e50:	4632      	mov	r2, r6
 8007e52:	f7ff f9bd 	bl	80071d0 <__lshift>
 8007e56:	4681      	mov	r9, r0
 8007e58:	2800      	cmp	r0, #0
 8007e5a:	d0d8      	beq.n	8007e0e <_strtod_l+0x74e>
 8007e5c:	2f00      	cmp	r7, #0
 8007e5e:	dd08      	ble.n	8007e72 <_strtod_l+0x7b2>
 8007e60:	4641      	mov	r1, r8
 8007e62:	9805      	ldr	r0, [sp, #20]
 8007e64:	463a      	mov	r2, r7
 8007e66:	f7ff f9b3 	bl	80071d0 <__lshift>
 8007e6a:	4680      	mov	r8, r0
 8007e6c:	2800      	cmp	r0, #0
 8007e6e:	f43f ae46 	beq.w	8007afe <_strtod_l+0x43e>
 8007e72:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007e74:	9805      	ldr	r0, [sp, #20]
 8007e76:	464a      	mov	r2, r9
 8007e78:	f7ff fa32 	bl	80072e0 <__mdiff>
 8007e7c:	4604      	mov	r4, r0
 8007e7e:	2800      	cmp	r0, #0
 8007e80:	f43f ae3d 	beq.w	8007afe <_strtod_l+0x43e>
 8007e84:	68c3      	ldr	r3, [r0, #12]
 8007e86:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007e88:	2300      	movs	r3, #0
 8007e8a:	60c3      	str	r3, [r0, #12]
 8007e8c:	4641      	mov	r1, r8
 8007e8e:	f7ff fa0b 	bl	80072a8 <__mcmp>
 8007e92:	2800      	cmp	r0, #0
 8007e94:	da46      	bge.n	8007f24 <_strtod_l+0x864>
 8007e96:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e98:	ea53 030a 	orrs.w	r3, r3, sl
 8007e9c:	d16c      	bne.n	8007f78 <_strtod_l+0x8b8>
 8007e9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d168      	bne.n	8007f78 <_strtod_l+0x8b8>
 8007ea6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007eaa:	0d1b      	lsrs	r3, r3, #20
 8007eac:	051b      	lsls	r3, r3, #20
 8007eae:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007eb2:	d961      	bls.n	8007f78 <_strtod_l+0x8b8>
 8007eb4:	6963      	ldr	r3, [r4, #20]
 8007eb6:	b913      	cbnz	r3, 8007ebe <_strtod_l+0x7fe>
 8007eb8:	6923      	ldr	r3, [r4, #16]
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	dd5c      	ble.n	8007f78 <_strtod_l+0x8b8>
 8007ebe:	4621      	mov	r1, r4
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	9805      	ldr	r0, [sp, #20]
 8007ec4:	f7ff f984 	bl	80071d0 <__lshift>
 8007ec8:	4641      	mov	r1, r8
 8007eca:	4604      	mov	r4, r0
 8007ecc:	f7ff f9ec 	bl	80072a8 <__mcmp>
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	dd51      	ble.n	8007f78 <_strtod_l+0x8b8>
 8007ed4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007ed8:	9a08      	ldr	r2, [sp, #32]
 8007eda:	0d1b      	lsrs	r3, r3, #20
 8007edc:	051b      	lsls	r3, r3, #20
 8007ede:	2a00      	cmp	r2, #0
 8007ee0:	d06b      	beq.n	8007fba <_strtod_l+0x8fa>
 8007ee2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007ee6:	d868      	bhi.n	8007fba <_strtod_l+0x8fa>
 8007ee8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007eec:	f67f ae9d 	bls.w	8007c2a <_strtod_l+0x56a>
 8007ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8007f1c <_strtod_l+0x85c>)
 8007ef2:	4650      	mov	r0, sl
 8007ef4:	4659      	mov	r1, fp
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f7f8 fb7e 	bl	80005f8 <__aeabi_dmul>
 8007efc:	4b08      	ldr	r3, [pc, #32]	@ (8007f20 <_strtod_l+0x860>)
 8007efe:	400b      	ands	r3, r1
 8007f00:	4682      	mov	sl, r0
 8007f02:	468b      	mov	fp, r1
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f47f ae05 	bne.w	8007b14 <_strtod_l+0x454>
 8007f0a:	9a05      	ldr	r2, [sp, #20]
 8007f0c:	2322      	movs	r3, #34	@ 0x22
 8007f0e:	6013      	str	r3, [r2, #0]
 8007f10:	e600      	b.n	8007b14 <_strtod_l+0x454>
 8007f12:	bf00      	nop
 8007f14:	080097f0 	.word	0x080097f0
 8007f18:	fffffc02 	.word	0xfffffc02
 8007f1c:	39500000 	.word	0x39500000
 8007f20:	7ff00000 	.word	0x7ff00000
 8007f24:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007f28:	d165      	bne.n	8007ff6 <_strtod_l+0x936>
 8007f2a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007f2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f30:	b35a      	cbz	r2, 8007f8a <_strtod_l+0x8ca>
 8007f32:	4a9f      	ldr	r2, [pc, #636]	@ (80081b0 <_strtod_l+0xaf0>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d12b      	bne.n	8007f90 <_strtod_l+0x8d0>
 8007f38:	9b08      	ldr	r3, [sp, #32]
 8007f3a:	4651      	mov	r1, sl
 8007f3c:	b303      	cbz	r3, 8007f80 <_strtod_l+0x8c0>
 8007f3e:	4b9d      	ldr	r3, [pc, #628]	@ (80081b4 <_strtod_l+0xaf4>)
 8007f40:	465a      	mov	r2, fp
 8007f42:	4013      	ands	r3, r2
 8007f44:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007f48:	f04f 32ff 	mov.w	r2, #4294967295
 8007f4c:	d81b      	bhi.n	8007f86 <_strtod_l+0x8c6>
 8007f4e:	0d1b      	lsrs	r3, r3, #20
 8007f50:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007f54:	fa02 f303 	lsl.w	r3, r2, r3
 8007f58:	4299      	cmp	r1, r3
 8007f5a:	d119      	bne.n	8007f90 <_strtod_l+0x8d0>
 8007f5c:	4b96      	ldr	r3, [pc, #600]	@ (80081b8 <_strtod_l+0xaf8>)
 8007f5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d102      	bne.n	8007f6a <_strtod_l+0x8aa>
 8007f64:	3101      	adds	r1, #1
 8007f66:	f43f adca 	beq.w	8007afe <_strtod_l+0x43e>
 8007f6a:	4b92      	ldr	r3, [pc, #584]	@ (80081b4 <_strtod_l+0xaf4>)
 8007f6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f6e:	401a      	ands	r2, r3
 8007f70:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007f74:	f04f 0a00 	mov.w	sl, #0
 8007f78:	9b08      	ldr	r3, [sp, #32]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1b8      	bne.n	8007ef0 <_strtod_l+0x830>
 8007f7e:	e5c9      	b.n	8007b14 <_strtod_l+0x454>
 8007f80:	f04f 33ff 	mov.w	r3, #4294967295
 8007f84:	e7e8      	b.n	8007f58 <_strtod_l+0x898>
 8007f86:	4613      	mov	r3, r2
 8007f88:	e7e6      	b.n	8007f58 <_strtod_l+0x898>
 8007f8a:	ea53 030a 	orrs.w	r3, r3, sl
 8007f8e:	d0a1      	beq.n	8007ed4 <_strtod_l+0x814>
 8007f90:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007f92:	b1db      	cbz	r3, 8007fcc <_strtod_l+0x90c>
 8007f94:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f96:	4213      	tst	r3, r2
 8007f98:	d0ee      	beq.n	8007f78 <_strtod_l+0x8b8>
 8007f9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f9c:	9a08      	ldr	r2, [sp, #32]
 8007f9e:	4650      	mov	r0, sl
 8007fa0:	4659      	mov	r1, fp
 8007fa2:	b1bb      	cbz	r3, 8007fd4 <_strtod_l+0x914>
 8007fa4:	f7ff fb6e 	bl	8007684 <sulp>
 8007fa8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007fac:	ec53 2b10 	vmov	r2, r3, d0
 8007fb0:	f7f8 f96c 	bl	800028c <__adddf3>
 8007fb4:	4682      	mov	sl, r0
 8007fb6:	468b      	mov	fp, r1
 8007fb8:	e7de      	b.n	8007f78 <_strtod_l+0x8b8>
 8007fba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007fbe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007fc2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007fc6:	f04f 3aff 	mov.w	sl, #4294967295
 8007fca:	e7d5      	b.n	8007f78 <_strtod_l+0x8b8>
 8007fcc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007fce:	ea13 0f0a 	tst.w	r3, sl
 8007fd2:	e7e1      	b.n	8007f98 <_strtod_l+0x8d8>
 8007fd4:	f7ff fb56 	bl	8007684 <sulp>
 8007fd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007fdc:	ec53 2b10 	vmov	r2, r3, d0
 8007fe0:	f7f8 f952 	bl	8000288 <__aeabi_dsub>
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	4682      	mov	sl, r0
 8007fea:	468b      	mov	fp, r1
 8007fec:	f7f8 fd6c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ff0:	2800      	cmp	r0, #0
 8007ff2:	d0c1      	beq.n	8007f78 <_strtod_l+0x8b8>
 8007ff4:	e619      	b.n	8007c2a <_strtod_l+0x56a>
 8007ff6:	4641      	mov	r1, r8
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	f7ff facd 	bl	8007598 <__ratio>
 8007ffe:	ec57 6b10 	vmov	r6, r7, d0
 8008002:	2200      	movs	r2, #0
 8008004:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008008:	4630      	mov	r0, r6
 800800a:	4639      	mov	r1, r7
 800800c:	f7f8 fd70 	bl	8000af0 <__aeabi_dcmple>
 8008010:	2800      	cmp	r0, #0
 8008012:	d06f      	beq.n	80080f4 <_strtod_l+0xa34>
 8008014:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008016:	2b00      	cmp	r3, #0
 8008018:	d17a      	bne.n	8008110 <_strtod_l+0xa50>
 800801a:	f1ba 0f00 	cmp.w	sl, #0
 800801e:	d158      	bne.n	80080d2 <_strtod_l+0xa12>
 8008020:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008022:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008026:	2b00      	cmp	r3, #0
 8008028:	d15a      	bne.n	80080e0 <_strtod_l+0xa20>
 800802a:	4b64      	ldr	r3, [pc, #400]	@ (80081bc <_strtod_l+0xafc>)
 800802c:	2200      	movs	r2, #0
 800802e:	4630      	mov	r0, r6
 8008030:	4639      	mov	r1, r7
 8008032:	f7f8 fd53 	bl	8000adc <__aeabi_dcmplt>
 8008036:	2800      	cmp	r0, #0
 8008038:	d159      	bne.n	80080ee <_strtod_l+0xa2e>
 800803a:	4630      	mov	r0, r6
 800803c:	4639      	mov	r1, r7
 800803e:	4b60      	ldr	r3, [pc, #384]	@ (80081c0 <_strtod_l+0xb00>)
 8008040:	2200      	movs	r2, #0
 8008042:	f7f8 fad9 	bl	80005f8 <__aeabi_dmul>
 8008046:	4606      	mov	r6, r0
 8008048:	460f      	mov	r7, r1
 800804a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800804e:	9606      	str	r6, [sp, #24]
 8008050:	9307      	str	r3, [sp, #28]
 8008052:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008056:	4d57      	ldr	r5, [pc, #348]	@ (80081b4 <_strtod_l+0xaf4>)
 8008058:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800805c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800805e:	401d      	ands	r5, r3
 8008060:	4b58      	ldr	r3, [pc, #352]	@ (80081c4 <_strtod_l+0xb04>)
 8008062:	429d      	cmp	r5, r3
 8008064:	f040 80b2 	bne.w	80081cc <_strtod_l+0xb0c>
 8008068:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800806a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800806e:	ec4b ab10 	vmov	d0, sl, fp
 8008072:	f7ff f9c9 	bl	8007408 <__ulp>
 8008076:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800807a:	ec51 0b10 	vmov	r0, r1, d0
 800807e:	f7f8 fabb 	bl	80005f8 <__aeabi_dmul>
 8008082:	4652      	mov	r2, sl
 8008084:	465b      	mov	r3, fp
 8008086:	f7f8 f901 	bl	800028c <__adddf3>
 800808a:	460b      	mov	r3, r1
 800808c:	4949      	ldr	r1, [pc, #292]	@ (80081b4 <_strtod_l+0xaf4>)
 800808e:	4a4e      	ldr	r2, [pc, #312]	@ (80081c8 <_strtod_l+0xb08>)
 8008090:	4019      	ands	r1, r3
 8008092:	4291      	cmp	r1, r2
 8008094:	4682      	mov	sl, r0
 8008096:	d942      	bls.n	800811e <_strtod_l+0xa5e>
 8008098:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800809a:	4b47      	ldr	r3, [pc, #284]	@ (80081b8 <_strtod_l+0xaf8>)
 800809c:	429a      	cmp	r2, r3
 800809e:	d103      	bne.n	80080a8 <_strtod_l+0x9e8>
 80080a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80080a2:	3301      	adds	r3, #1
 80080a4:	f43f ad2b 	beq.w	8007afe <_strtod_l+0x43e>
 80080a8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80081b8 <_strtod_l+0xaf8>
 80080ac:	f04f 3aff 	mov.w	sl, #4294967295
 80080b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80080b2:	9805      	ldr	r0, [sp, #20]
 80080b4:	f7fe fe74 	bl	8006da0 <_Bfree>
 80080b8:	9805      	ldr	r0, [sp, #20]
 80080ba:	4649      	mov	r1, r9
 80080bc:	f7fe fe70 	bl	8006da0 <_Bfree>
 80080c0:	9805      	ldr	r0, [sp, #20]
 80080c2:	4641      	mov	r1, r8
 80080c4:	f7fe fe6c 	bl	8006da0 <_Bfree>
 80080c8:	9805      	ldr	r0, [sp, #20]
 80080ca:	4621      	mov	r1, r4
 80080cc:	f7fe fe68 	bl	8006da0 <_Bfree>
 80080d0:	e618      	b.n	8007d04 <_strtod_l+0x644>
 80080d2:	f1ba 0f01 	cmp.w	sl, #1
 80080d6:	d103      	bne.n	80080e0 <_strtod_l+0xa20>
 80080d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080da:	2b00      	cmp	r3, #0
 80080dc:	f43f ada5 	beq.w	8007c2a <_strtod_l+0x56a>
 80080e0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008190 <_strtod_l+0xad0>
 80080e4:	4f35      	ldr	r7, [pc, #212]	@ (80081bc <_strtod_l+0xafc>)
 80080e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80080ea:	2600      	movs	r6, #0
 80080ec:	e7b1      	b.n	8008052 <_strtod_l+0x992>
 80080ee:	4f34      	ldr	r7, [pc, #208]	@ (80081c0 <_strtod_l+0xb00>)
 80080f0:	2600      	movs	r6, #0
 80080f2:	e7aa      	b.n	800804a <_strtod_l+0x98a>
 80080f4:	4b32      	ldr	r3, [pc, #200]	@ (80081c0 <_strtod_l+0xb00>)
 80080f6:	4630      	mov	r0, r6
 80080f8:	4639      	mov	r1, r7
 80080fa:	2200      	movs	r2, #0
 80080fc:	f7f8 fa7c 	bl	80005f8 <__aeabi_dmul>
 8008100:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008102:	4606      	mov	r6, r0
 8008104:	460f      	mov	r7, r1
 8008106:	2b00      	cmp	r3, #0
 8008108:	d09f      	beq.n	800804a <_strtod_l+0x98a>
 800810a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800810e:	e7a0      	b.n	8008052 <_strtod_l+0x992>
 8008110:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008198 <_strtod_l+0xad8>
 8008114:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008118:	ec57 6b17 	vmov	r6, r7, d7
 800811c:	e799      	b.n	8008052 <_strtod_l+0x992>
 800811e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008122:	9b08      	ldr	r3, [sp, #32]
 8008124:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008128:	2b00      	cmp	r3, #0
 800812a:	d1c1      	bne.n	80080b0 <_strtod_l+0x9f0>
 800812c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008130:	0d1b      	lsrs	r3, r3, #20
 8008132:	051b      	lsls	r3, r3, #20
 8008134:	429d      	cmp	r5, r3
 8008136:	d1bb      	bne.n	80080b0 <_strtod_l+0x9f0>
 8008138:	4630      	mov	r0, r6
 800813a:	4639      	mov	r1, r7
 800813c:	f7f8 fda4 	bl	8000c88 <__aeabi_d2lz>
 8008140:	f7f8 fa2c 	bl	800059c <__aeabi_l2d>
 8008144:	4602      	mov	r2, r0
 8008146:	460b      	mov	r3, r1
 8008148:	4630      	mov	r0, r6
 800814a:	4639      	mov	r1, r7
 800814c:	f7f8 f89c 	bl	8000288 <__aeabi_dsub>
 8008150:	460b      	mov	r3, r1
 8008152:	4602      	mov	r2, r0
 8008154:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008158:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800815c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800815e:	ea46 060a 	orr.w	r6, r6, sl
 8008162:	431e      	orrs	r6, r3
 8008164:	d06f      	beq.n	8008246 <_strtod_l+0xb86>
 8008166:	a30e      	add	r3, pc, #56	@ (adr r3, 80081a0 <_strtod_l+0xae0>)
 8008168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816c:	f7f8 fcb6 	bl	8000adc <__aeabi_dcmplt>
 8008170:	2800      	cmp	r0, #0
 8008172:	f47f accf 	bne.w	8007b14 <_strtod_l+0x454>
 8008176:	a30c      	add	r3, pc, #48	@ (adr r3, 80081a8 <_strtod_l+0xae8>)
 8008178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008180:	f7f8 fcca 	bl	8000b18 <__aeabi_dcmpgt>
 8008184:	2800      	cmp	r0, #0
 8008186:	d093      	beq.n	80080b0 <_strtod_l+0x9f0>
 8008188:	e4c4      	b.n	8007b14 <_strtod_l+0x454>
 800818a:	bf00      	nop
 800818c:	f3af 8000 	nop.w
 8008190:	00000000 	.word	0x00000000
 8008194:	bff00000 	.word	0xbff00000
 8008198:	00000000 	.word	0x00000000
 800819c:	3ff00000 	.word	0x3ff00000
 80081a0:	94a03595 	.word	0x94a03595
 80081a4:	3fdfffff 	.word	0x3fdfffff
 80081a8:	35afe535 	.word	0x35afe535
 80081ac:	3fe00000 	.word	0x3fe00000
 80081b0:	000fffff 	.word	0x000fffff
 80081b4:	7ff00000 	.word	0x7ff00000
 80081b8:	7fefffff 	.word	0x7fefffff
 80081bc:	3ff00000 	.word	0x3ff00000
 80081c0:	3fe00000 	.word	0x3fe00000
 80081c4:	7fe00000 	.word	0x7fe00000
 80081c8:	7c9fffff 	.word	0x7c9fffff
 80081cc:	9b08      	ldr	r3, [sp, #32]
 80081ce:	b323      	cbz	r3, 800821a <_strtod_l+0xb5a>
 80081d0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80081d4:	d821      	bhi.n	800821a <_strtod_l+0xb5a>
 80081d6:	a328      	add	r3, pc, #160	@ (adr r3, 8008278 <_strtod_l+0xbb8>)
 80081d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081dc:	4630      	mov	r0, r6
 80081de:	4639      	mov	r1, r7
 80081e0:	f7f8 fc86 	bl	8000af0 <__aeabi_dcmple>
 80081e4:	b1a0      	cbz	r0, 8008210 <_strtod_l+0xb50>
 80081e6:	4639      	mov	r1, r7
 80081e8:	4630      	mov	r0, r6
 80081ea:	f7f8 fcdd 	bl	8000ba8 <__aeabi_d2uiz>
 80081ee:	2801      	cmp	r0, #1
 80081f0:	bf38      	it	cc
 80081f2:	2001      	movcc	r0, #1
 80081f4:	f7f8 f986 	bl	8000504 <__aeabi_ui2d>
 80081f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081fa:	4606      	mov	r6, r0
 80081fc:	460f      	mov	r7, r1
 80081fe:	b9fb      	cbnz	r3, 8008240 <_strtod_l+0xb80>
 8008200:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008204:	9014      	str	r0, [sp, #80]	@ 0x50
 8008206:	9315      	str	r3, [sp, #84]	@ 0x54
 8008208:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800820c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008210:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008212:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008216:	1b5b      	subs	r3, r3, r5
 8008218:	9311      	str	r3, [sp, #68]	@ 0x44
 800821a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800821e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008222:	f7ff f8f1 	bl	8007408 <__ulp>
 8008226:	4650      	mov	r0, sl
 8008228:	ec53 2b10 	vmov	r2, r3, d0
 800822c:	4659      	mov	r1, fp
 800822e:	f7f8 f9e3 	bl	80005f8 <__aeabi_dmul>
 8008232:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008236:	f7f8 f829 	bl	800028c <__adddf3>
 800823a:	4682      	mov	sl, r0
 800823c:	468b      	mov	fp, r1
 800823e:	e770      	b.n	8008122 <_strtod_l+0xa62>
 8008240:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008244:	e7e0      	b.n	8008208 <_strtod_l+0xb48>
 8008246:	a30e      	add	r3, pc, #56	@ (adr r3, 8008280 <_strtod_l+0xbc0>)
 8008248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824c:	f7f8 fc46 	bl	8000adc <__aeabi_dcmplt>
 8008250:	e798      	b.n	8008184 <_strtod_l+0xac4>
 8008252:	2300      	movs	r3, #0
 8008254:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008256:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008258:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800825a:	6013      	str	r3, [r2, #0]
 800825c:	f7ff ba6d 	b.w	800773a <_strtod_l+0x7a>
 8008260:	2a65      	cmp	r2, #101	@ 0x65
 8008262:	f43f ab66 	beq.w	8007932 <_strtod_l+0x272>
 8008266:	2a45      	cmp	r2, #69	@ 0x45
 8008268:	f43f ab63 	beq.w	8007932 <_strtod_l+0x272>
 800826c:	2301      	movs	r3, #1
 800826e:	f7ff bb9e 	b.w	80079ae <_strtod_l+0x2ee>
 8008272:	bf00      	nop
 8008274:	f3af 8000 	nop.w
 8008278:	ffc00000 	.word	0xffc00000
 800827c:	41dfffff 	.word	0x41dfffff
 8008280:	94a03595 	.word	0x94a03595
 8008284:	3fcfffff 	.word	0x3fcfffff

08008288 <_strtod_r>:
 8008288:	4b01      	ldr	r3, [pc, #4]	@ (8008290 <_strtod_r+0x8>)
 800828a:	f7ff ba19 	b.w	80076c0 <_strtod_l>
 800828e:	bf00      	nop
 8008290:	20000068 	.word	0x20000068

08008294 <_strtol_l.constprop.0>:
 8008294:	2b24      	cmp	r3, #36	@ 0x24
 8008296:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800829a:	4686      	mov	lr, r0
 800829c:	4690      	mov	r8, r2
 800829e:	d801      	bhi.n	80082a4 <_strtol_l.constprop.0+0x10>
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d106      	bne.n	80082b2 <_strtol_l.constprop.0+0x1e>
 80082a4:	f7fd fdbc 	bl	8005e20 <__errno>
 80082a8:	2316      	movs	r3, #22
 80082aa:	6003      	str	r3, [r0, #0]
 80082ac:	2000      	movs	r0, #0
 80082ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082b2:	4834      	ldr	r0, [pc, #208]	@ (8008384 <_strtol_l.constprop.0+0xf0>)
 80082b4:	460d      	mov	r5, r1
 80082b6:	462a      	mov	r2, r5
 80082b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80082bc:	5d06      	ldrb	r6, [r0, r4]
 80082be:	f016 0608 	ands.w	r6, r6, #8
 80082c2:	d1f8      	bne.n	80082b6 <_strtol_l.constprop.0+0x22>
 80082c4:	2c2d      	cmp	r4, #45	@ 0x2d
 80082c6:	d12d      	bne.n	8008324 <_strtol_l.constprop.0+0x90>
 80082c8:	782c      	ldrb	r4, [r5, #0]
 80082ca:	2601      	movs	r6, #1
 80082cc:	1c95      	adds	r5, r2, #2
 80082ce:	f033 0210 	bics.w	r2, r3, #16
 80082d2:	d109      	bne.n	80082e8 <_strtol_l.constprop.0+0x54>
 80082d4:	2c30      	cmp	r4, #48	@ 0x30
 80082d6:	d12a      	bne.n	800832e <_strtol_l.constprop.0+0x9a>
 80082d8:	782a      	ldrb	r2, [r5, #0]
 80082da:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80082de:	2a58      	cmp	r2, #88	@ 0x58
 80082e0:	d125      	bne.n	800832e <_strtol_l.constprop.0+0x9a>
 80082e2:	786c      	ldrb	r4, [r5, #1]
 80082e4:	2310      	movs	r3, #16
 80082e6:	3502      	adds	r5, #2
 80082e8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80082ec:	f10c 3cff 	add.w	ip, ip, #4294967295
 80082f0:	2200      	movs	r2, #0
 80082f2:	fbbc f9f3 	udiv	r9, ip, r3
 80082f6:	4610      	mov	r0, r2
 80082f8:	fb03 ca19 	mls	sl, r3, r9, ip
 80082fc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008300:	2f09      	cmp	r7, #9
 8008302:	d81b      	bhi.n	800833c <_strtol_l.constprop.0+0xa8>
 8008304:	463c      	mov	r4, r7
 8008306:	42a3      	cmp	r3, r4
 8008308:	dd27      	ble.n	800835a <_strtol_l.constprop.0+0xc6>
 800830a:	1c57      	adds	r7, r2, #1
 800830c:	d007      	beq.n	800831e <_strtol_l.constprop.0+0x8a>
 800830e:	4581      	cmp	r9, r0
 8008310:	d320      	bcc.n	8008354 <_strtol_l.constprop.0+0xc0>
 8008312:	d101      	bne.n	8008318 <_strtol_l.constprop.0+0x84>
 8008314:	45a2      	cmp	sl, r4
 8008316:	db1d      	blt.n	8008354 <_strtol_l.constprop.0+0xc0>
 8008318:	fb00 4003 	mla	r0, r0, r3, r4
 800831c:	2201      	movs	r2, #1
 800831e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008322:	e7eb      	b.n	80082fc <_strtol_l.constprop.0+0x68>
 8008324:	2c2b      	cmp	r4, #43	@ 0x2b
 8008326:	bf04      	itt	eq
 8008328:	782c      	ldrbeq	r4, [r5, #0]
 800832a:	1c95      	addeq	r5, r2, #2
 800832c:	e7cf      	b.n	80082ce <_strtol_l.constprop.0+0x3a>
 800832e:	2b00      	cmp	r3, #0
 8008330:	d1da      	bne.n	80082e8 <_strtol_l.constprop.0+0x54>
 8008332:	2c30      	cmp	r4, #48	@ 0x30
 8008334:	bf0c      	ite	eq
 8008336:	2308      	moveq	r3, #8
 8008338:	230a      	movne	r3, #10
 800833a:	e7d5      	b.n	80082e8 <_strtol_l.constprop.0+0x54>
 800833c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008340:	2f19      	cmp	r7, #25
 8008342:	d801      	bhi.n	8008348 <_strtol_l.constprop.0+0xb4>
 8008344:	3c37      	subs	r4, #55	@ 0x37
 8008346:	e7de      	b.n	8008306 <_strtol_l.constprop.0+0x72>
 8008348:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800834c:	2f19      	cmp	r7, #25
 800834e:	d804      	bhi.n	800835a <_strtol_l.constprop.0+0xc6>
 8008350:	3c57      	subs	r4, #87	@ 0x57
 8008352:	e7d8      	b.n	8008306 <_strtol_l.constprop.0+0x72>
 8008354:	f04f 32ff 	mov.w	r2, #4294967295
 8008358:	e7e1      	b.n	800831e <_strtol_l.constprop.0+0x8a>
 800835a:	1c53      	adds	r3, r2, #1
 800835c:	d108      	bne.n	8008370 <_strtol_l.constprop.0+0xdc>
 800835e:	2322      	movs	r3, #34	@ 0x22
 8008360:	f8ce 3000 	str.w	r3, [lr]
 8008364:	4660      	mov	r0, ip
 8008366:	f1b8 0f00 	cmp.w	r8, #0
 800836a:	d0a0      	beq.n	80082ae <_strtol_l.constprop.0+0x1a>
 800836c:	1e69      	subs	r1, r5, #1
 800836e:	e006      	b.n	800837e <_strtol_l.constprop.0+0xea>
 8008370:	b106      	cbz	r6, 8008374 <_strtol_l.constprop.0+0xe0>
 8008372:	4240      	negs	r0, r0
 8008374:	f1b8 0f00 	cmp.w	r8, #0
 8008378:	d099      	beq.n	80082ae <_strtol_l.constprop.0+0x1a>
 800837a:	2a00      	cmp	r2, #0
 800837c:	d1f6      	bne.n	800836c <_strtol_l.constprop.0+0xd8>
 800837e:	f8c8 1000 	str.w	r1, [r8]
 8008382:	e794      	b.n	80082ae <_strtol_l.constprop.0+0x1a>
 8008384:	08009819 	.word	0x08009819

08008388 <_strtol_r>:
 8008388:	f7ff bf84 	b.w	8008294 <_strtol_l.constprop.0>

0800838c <__ssputs_r>:
 800838c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008390:	688e      	ldr	r6, [r1, #8]
 8008392:	461f      	mov	r7, r3
 8008394:	42be      	cmp	r6, r7
 8008396:	680b      	ldr	r3, [r1, #0]
 8008398:	4682      	mov	sl, r0
 800839a:	460c      	mov	r4, r1
 800839c:	4690      	mov	r8, r2
 800839e:	d82d      	bhi.n	80083fc <__ssputs_r+0x70>
 80083a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80083a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80083a8:	d026      	beq.n	80083f8 <__ssputs_r+0x6c>
 80083aa:	6965      	ldr	r5, [r4, #20]
 80083ac:	6909      	ldr	r1, [r1, #16]
 80083ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80083b2:	eba3 0901 	sub.w	r9, r3, r1
 80083b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80083ba:	1c7b      	adds	r3, r7, #1
 80083bc:	444b      	add	r3, r9
 80083be:	106d      	asrs	r5, r5, #1
 80083c0:	429d      	cmp	r5, r3
 80083c2:	bf38      	it	cc
 80083c4:	461d      	movcc	r5, r3
 80083c6:	0553      	lsls	r3, r2, #21
 80083c8:	d527      	bpl.n	800841a <__ssputs_r+0x8e>
 80083ca:	4629      	mov	r1, r5
 80083cc:	f7fe fc1c 	bl	8006c08 <_malloc_r>
 80083d0:	4606      	mov	r6, r0
 80083d2:	b360      	cbz	r0, 800842e <__ssputs_r+0xa2>
 80083d4:	6921      	ldr	r1, [r4, #16]
 80083d6:	464a      	mov	r2, r9
 80083d8:	f000 fa18 	bl	800880c <memcpy>
 80083dc:	89a3      	ldrh	r3, [r4, #12]
 80083de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80083e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083e6:	81a3      	strh	r3, [r4, #12]
 80083e8:	6126      	str	r6, [r4, #16]
 80083ea:	6165      	str	r5, [r4, #20]
 80083ec:	444e      	add	r6, r9
 80083ee:	eba5 0509 	sub.w	r5, r5, r9
 80083f2:	6026      	str	r6, [r4, #0]
 80083f4:	60a5      	str	r5, [r4, #8]
 80083f6:	463e      	mov	r6, r7
 80083f8:	42be      	cmp	r6, r7
 80083fa:	d900      	bls.n	80083fe <__ssputs_r+0x72>
 80083fc:	463e      	mov	r6, r7
 80083fe:	6820      	ldr	r0, [r4, #0]
 8008400:	4632      	mov	r2, r6
 8008402:	4641      	mov	r1, r8
 8008404:	f000 f9c6 	bl	8008794 <memmove>
 8008408:	68a3      	ldr	r3, [r4, #8]
 800840a:	1b9b      	subs	r3, r3, r6
 800840c:	60a3      	str	r3, [r4, #8]
 800840e:	6823      	ldr	r3, [r4, #0]
 8008410:	4433      	add	r3, r6
 8008412:	6023      	str	r3, [r4, #0]
 8008414:	2000      	movs	r0, #0
 8008416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800841a:	462a      	mov	r2, r5
 800841c:	f000 fd89 	bl	8008f32 <_realloc_r>
 8008420:	4606      	mov	r6, r0
 8008422:	2800      	cmp	r0, #0
 8008424:	d1e0      	bne.n	80083e8 <__ssputs_r+0x5c>
 8008426:	6921      	ldr	r1, [r4, #16]
 8008428:	4650      	mov	r0, sl
 800842a:	f7fe fb79 	bl	8006b20 <_free_r>
 800842e:	230c      	movs	r3, #12
 8008430:	f8ca 3000 	str.w	r3, [sl]
 8008434:	89a3      	ldrh	r3, [r4, #12]
 8008436:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800843a:	81a3      	strh	r3, [r4, #12]
 800843c:	f04f 30ff 	mov.w	r0, #4294967295
 8008440:	e7e9      	b.n	8008416 <__ssputs_r+0x8a>
	...

08008444 <_svfiprintf_r>:
 8008444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008448:	4698      	mov	r8, r3
 800844a:	898b      	ldrh	r3, [r1, #12]
 800844c:	061b      	lsls	r3, r3, #24
 800844e:	b09d      	sub	sp, #116	@ 0x74
 8008450:	4607      	mov	r7, r0
 8008452:	460d      	mov	r5, r1
 8008454:	4614      	mov	r4, r2
 8008456:	d510      	bpl.n	800847a <_svfiprintf_r+0x36>
 8008458:	690b      	ldr	r3, [r1, #16]
 800845a:	b973      	cbnz	r3, 800847a <_svfiprintf_r+0x36>
 800845c:	2140      	movs	r1, #64	@ 0x40
 800845e:	f7fe fbd3 	bl	8006c08 <_malloc_r>
 8008462:	6028      	str	r0, [r5, #0]
 8008464:	6128      	str	r0, [r5, #16]
 8008466:	b930      	cbnz	r0, 8008476 <_svfiprintf_r+0x32>
 8008468:	230c      	movs	r3, #12
 800846a:	603b      	str	r3, [r7, #0]
 800846c:	f04f 30ff 	mov.w	r0, #4294967295
 8008470:	b01d      	add	sp, #116	@ 0x74
 8008472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008476:	2340      	movs	r3, #64	@ 0x40
 8008478:	616b      	str	r3, [r5, #20]
 800847a:	2300      	movs	r3, #0
 800847c:	9309      	str	r3, [sp, #36]	@ 0x24
 800847e:	2320      	movs	r3, #32
 8008480:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008484:	f8cd 800c 	str.w	r8, [sp, #12]
 8008488:	2330      	movs	r3, #48	@ 0x30
 800848a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008628 <_svfiprintf_r+0x1e4>
 800848e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008492:	f04f 0901 	mov.w	r9, #1
 8008496:	4623      	mov	r3, r4
 8008498:	469a      	mov	sl, r3
 800849a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800849e:	b10a      	cbz	r2, 80084a4 <_svfiprintf_r+0x60>
 80084a0:	2a25      	cmp	r2, #37	@ 0x25
 80084a2:	d1f9      	bne.n	8008498 <_svfiprintf_r+0x54>
 80084a4:	ebba 0b04 	subs.w	fp, sl, r4
 80084a8:	d00b      	beq.n	80084c2 <_svfiprintf_r+0x7e>
 80084aa:	465b      	mov	r3, fp
 80084ac:	4622      	mov	r2, r4
 80084ae:	4629      	mov	r1, r5
 80084b0:	4638      	mov	r0, r7
 80084b2:	f7ff ff6b 	bl	800838c <__ssputs_r>
 80084b6:	3001      	adds	r0, #1
 80084b8:	f000 80a7 	beq.w	800860a <_svfiprintf_r+0x1c6>
 80084bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084be:	445a      	add	r2, fp
 80084c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80084c2:	f89a 3000 	ldrb.w	r3, [sl]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	f000 809f 	beq.w	800860a <_svfiprintf_r+0x1c6>
 80084cc:	2300      	movs	r3, #0
 80084ce:	f04f 32ff 	mov.w	r2, #4294967295
 80084d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084d6:	f10a 0a01 	add.w	sl, sl, #1
 80084da:	9304      	str	r3, [sp, #16]
 80084dc:	9307      	str	r3, [sp, #28]
 80084de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80084e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80084e4:	4654      	mov	r4, sl
 80084e6:	2205      	movs	r2, #5
 80084e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084ec:	484e      	ldr	r0, [pc, #312]	@ (8008628 <_svfiprintf_r+0x1e4>)
 80084ee:	f7f7 fe6f 	bl	80001d0 <memchr>
 80084f2:	9a04      	ldr	r2, [sp, #16]
 80084f4:	b9d8      	cbnz	r0, 800852e <_svfiprintf_r+0xea>
 80084f6:	06d0      	lsls	r0, r2, #27
 80084f8:	bf44      	itt	mi
 80084fa:	2320      	movmi	r3, #32
 80084fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008500:	0711      	lsls	r1, r2, #28
 8008502:	bf44      	itt	mi
 8008504:	232b      	movmi	r3, #43	@ 0x2b
 8008506:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800850a:	f89a 3000 	ldrb.w	r3, [sl]
 800850e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008510:	d015      	beq.n	800853e <_svfiprintf_r+0xfa>
 8008512:	9a07      	ldr	r2, [sp, #28]
 8008514:	4654      	mov	r4, sl
 8008516:	2000      	movs	r0, #0
 8008518:	f04f 0c0a 	mov.w	ip, #10
 800851c:	4621      	mov	r1, r4
 800851e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008522:	3b30      	subs	r3, #48	@ 0x30
 8008524:	2b09      	cmp	r3, #9
 8008526:	d94b      	bls.n	80085c0 <_svfiprintf_r+0x17c>
 8008528:	b1b0      	cbz	r0, 8008558 <_svfiprintf_r+0x114>
 800852a:	9207      	str	r2, [sp, #28]
 800852c:	e014      	b.n	8008558 <_svfiprintf_r+0x114>
 800852e:	eba0 0308 	sub.w	r3, r0, r8
 8008532:	fa09 f303 	lsl.w	r3, r9, r3
 8008536:	4313      	orrs	r3, r2
 8008538:	9304      	str	r3, [sp, #16]
 800853a:	46a2      	mov	sl, r4
 800853c:	e7d2      	b.n	80084e4 <_svfiprintf_r+0xa0>
 800853e:	9b03      	ldr	r3, [sp, #12]
 8008540:	1d19      	adds	r1, r3, #4
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	9103      	str	r1, [sp, #12]
 8008546:	2b00      	cmp	r3, #0
 8008548:	bfbb      	ittet	lt
 800854a:	425b      	neglt	r3, r3
 800854c:	f042 0202 	orrlt.w	r2, r2, #2
 8008550:	9307      	strge	r3, [sp, #28]
 8008552:	9307      	strlt	r3, [sp, #28]
 8008554:	bfb8      	it	lt
 8008556:	9204      	strlt	r2, [sp, #16]
 8008558:	7823      	ldrb	r3, [r4, #0]
 800855a:	2b2e      	cmp	r3, #46	@ 0x2e
 800855c:	d10a      	bne.n	8008574 <_svfiprintf_r+0x130>
 800855e:	7863      	ldrb	r3, [r4, #1]
 8008560:	2b2a      	cmp	r3, #42	@ 0x2a
 8008562:	d132      	bne.n	80085ca <_svfiprintf_r+0x186>
 8008564:	9b03      	ldr	r3, [sp, #12]
 8008566:	1d1a      	adds	r2, r3, #4
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	9203      	str	r2, [sp, #12]
 800856c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008570:	3402      	adds	r4, #2
 8008572:	9305      	str	r3, [sp, #20]
 8008574:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008638 <_svfiprintf_r+0x1f4>
 8008578:	7821      	ldrb	r1, [r4, #0]
 800857a:	2203      	movs	r2, #3
 800857c:	4650      	mov	r0, sl
 800857e:	f7f7 fe27 	bl	80001d0 <memchr>
 8008582:	b138      	cbz	r0, 8008594 <_svfiprintf_r+0x150>
 8008584:	9b04      	ldr	r3, [sp, #16]
 8008586:	eba0 000a 	sub.w	r0, r0, sl
 800858a:	2240      	movs	r2, #64	@ 0x40
 800858c:	4082      	lsls	r2, r0
 800858e:	4313      	orrs	r3, r2
 8008590:	3401      	adds	r4, #1
 8008592:	9304      	str	r3, [sp, #16]
 8008594:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008598:	4824      	ldr	r0, [pc, #144]	@ (800862c <_svfiprintf_r+0x1e8>)
 800859a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800859e:	2206      	movs	r2, #6
 80085a0:	f7f7 fe16 	bl	80001d0 <memchr>
 80085a4:	2800      	cmp	r0, #0
 80085a6:	d036      	beq.n	8008616 <_svfiprintf_r+0x1d2>
 80085a8:	4b21      	ldr	r3, [pc, #132]	@ (8008630 <_svfiprintf_r+0x1ec>)
 80085aa:	bb1b      	cbnz	r3, 80085f4 <_svfiprintf_r+0x1b0>
 80085ac:	9b03      	ldr	r3, [sp, #12]
 80085ae:	3307      	adds	r3, #7
 80085b0:	f023 0307 	bic.w	r3, r3, #7
 80085b4:	3308      	adds	r3, #8
 80085b6:	9303      	str	r3, [sp, #12]
 80085b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085ba:	4433      	add	r3, r6
 80085bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80085be:	e76a      	b.n	8008496 <_svfiprintf_r+0x52>
 80085c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80085c4:	460c      	mov	r4, r1
 80085c6:	2001      	movs	r0, #1
 80085c8:	e7a8      	b.n	800851c <_svfiprintf_r+0xd8>
 80085ca:	2300      	movs	r3, #0
 80085cc:	3401      	adds	r4, #1
 80085ce:	9305      	str	r3, [sp, #20]
 80085d0:	4619      	mov	r1, r3
 80085d2:	f04f 0c0a 	mov.w	ip, #10
 80085d6:	4620      	mov	r0, r4
 80085d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085dc:	3a30      	subs	r2, #48	@ 0x30
 80085de:	2a09      	cmp	r2, #9
 80085e0:	d903      	bls.n	80085ea <_svfiprintf_r+0x1a6>
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d0c6      	beq.n	8008574 <_svfiprintf_r+0x130>
 80085e6:	9105      	str	r1, [sp, #20]
 80085e8:	e7c4      	b.n	8008574 <_svfiprintf_r+0x130>
 80085ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80085ee:	4604      	mov	r4, r0
 80085f0:	2301      	movs	r3, #1
 80085f2:	e7f0      	b.n	80085d6 <_svfiprintf_r+0x192>
 80085f4:	ab03      	add	r3, sp, #12
 80085f6:	9300      	str	r3, [sp, #0]
 80085f8:	462a      	mov	r2, r5
 80085fa:	4b0e      	ldr	r3, [pc, #56]	@ (8008634 <_svfiprintf_r+0x1f0>)
 80085fc:	a904      	add	r1, sp, #16
 80085fe:	4638      	mov	r0, r7
 8008600:	f7fc fcca 	bl	8004f98 <_printf_float>
 8008604:	1c42      	adds	r2, r0, #1
 8008606:	4606      	mov	r6, r0
 8008608:	d1d6      	bne.n	80085b8 <_svfiprintf_r+0x174>
 800860a:	89ab      	ldrh	r3, [r5, #12]
 800860c:	065b      	lsls	r3, r3, #25
 800860e:	f53f af2d 	bmi.w	800846c <_svfiprintf_r+0x28>
 8008612:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008614:	e72c      	b.n	8008470 <_svfiprintf_r+0x2c>
 8008616:	ab03      	add	r3, sp, #12
 8008618:	9300      	str	r3, [sp, #0]
 800861a:	462a      	mov	r2, r5
 800861c:	4b05      	ldr	r3, [pc, #20]	@ (8008634 <_svfiprintf_r+0x1f0>)
 800861e:	a904      	add	r1, sp, #16
 8008620:	4638      	mov	r0, r7
 8008622:	f7fc ff51 	bl	80054c8 <_printf_i>
 8008626:	e7ed      	b.n	8008604 <_svfiprintf_r+0x1c0>
 8008628:	08009919 	.word	0x08009919
 800862c:	08009923 	.word	0x08009923
 8008630:	08004f99 	.word	0x08004f99
 8008634:	0800838d 	.word	0x0800838d
 8008638:	0800991f 	.word	0x0800991f

0800863c <__sflush_r>:
 800863c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008644:	0716      	lsls	r6, r2, #28
 8008646:	4605      	mov	r5, r0
 8008648:	460c      	mov	r4, r1
 800864a:	d454      	bmi.n	80086f6 <__sflush_r+0xba>
 800864c:	684b      	ldr	r3, [r1, #4]
 800864e:	2b00      	cmp	r3, #0
 8008650:	dc02      	bgt.n	8008658 <__sflush_r+0x1c>
 8008652:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008654:	2b00      	cmp	r3, #0
 8008656:	dd48      	ble.n	80086ea <__sflush_r+0xae>
 8008658:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800865a:	2e00      	cmp	r6, #0
 800865c:	d045      	beq.n	80086ea <__sflush_r+0xae>
 800865e:	2300      	movs	r3, #0
 8008660:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008664:	682f      	ldr	r7, [r5, #0]
 8008666:	6a21      	ldr	r1, [r4, #32]
 8008668:	602b      	str	r3, [r5, #0]
 800866a:	d030      	beq.n	80086ce <__sflush_r+0x92>
 800866c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800866e:	89a3      	ldrh	r3, [r4, #12]
 8008670:	0759      	lsls	r1, r3, #29
 8008672:	d505      	bpl.n	8008680 <__sflush_r+0x44>
 8008674:	6863      	ldr	r3, [r4, #4]
 8008676:	1ad2      	subs	r2, r2, r3
 8008678:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800867a:	b10b      	cbz	r3, 8008680 <__sflush_r+0x44>
 800867c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800867e:	1ad2      	subs	r2, r2, r3
 8008680:	2300      	movs	r3, #0
 8008682:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008684:	6a21      	ldr	r1, [r4, #32]
 8008686:	4628      	mov	r0, r5
 8008688:	47b0      	blx	r6
 800868a:	1c43      	adds	r3, r0, #1
 800868c:	89a3      	ldrh	r3, [r4, #12]
 800868e:	d106      	bne.n	800869e <__sflush_r+0x62>
 8008690:	6829      	ldr	r1, [r5, #0]
 8008692:	291d      	cmp	r1, #29
 8008694:	d82b      	bhi.n	80086ee <__sflush_r+0xb2>
 8008696:	4a2a      	ldr	r2, [pc, #168]	@ (8008740 <__sflush_r+0x104>)
 8008698:	410a      	asrs	r2, r1
 800869a:	07d6      	lsls	r6, r2, #31
 800869c:	d427      	bmi.n	80086ee <__sflush_r+0xb2>
 800869e:	2200      	movs	r2, #0
 80086a0:	6062      	str	r2, [r4, #4]
 80086a2:	04d9      	lsls	r1, r3, #19
 80086a4:	6922      	ldr	r2, [r4, #16]
 80086a6:	6022      	str	r2, [r4, #0]
 80086a8:	d504      	bpl.n	80086b4 <__sflush_r+0x78>
 80086aa:	1c42      	adds	r2, r0, #1
 80086ac:	d101      	bne.n	80086b2 <__sflush_r+0x76>
 80086ae:	682b      	ldr	r3, [r5, #0]
 80086b0:	b903      	cbnz	r3, 80086b4 <__sflush_r+0x78>
 80086b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80086b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80086b6:	602f      	str	r7, [r5, #0]
 80086b8:	b1b9      	cbz	r1, 80086ea <__sflush_r+0xae>
 80086ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80086be:	4299      	cmp	r1, r3
 80086c0:	d002      	beq.n	80086c8 <__sflush_r+0x8c>
 80086c2:	4628      	mov	r0, r5
 80086c4:	f7fe fa2c 	bl	8006b20 <_free_r>
 80086c8:	2300      	movs	r3, #0
 80086ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80086cc:	e00d      	b.n	80086ea <__sflush_r+0xae>
 80086ce:	2301      	movs	r3, #1
 80086d0:	4628      	mov	r0, r5
 80086d2:	47b0      	blx	r6
 80086d4:	4602      	mov	r2, r0
 80086d6:	1c50      	adds	r0, r2, #1
 80086d8:	d1c9      	bne.n	800866e <__sflush_r+0x32>
 80086da:	682b      	ldr	r3, [r5, #0]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d0c6      	beq.n	800866e <__sflush_r+0x32>
 80086e0:	2b1d      	cmp	r3, #29
 80086e2:	d001      	beq.n	80086e8 <__sflush_r+0xac>
 80086e4:	2b16      	cmp	r3, #22
 80086e6:	d11e      	bne.n	8008726 <__sflush_r+0xea>
 80086e8:	602f      	str	r7, [r5, #0]
 80086ea:	2000      	movs	r0, #0
 80086ec:	e022      	b.n	8008734 <__sflush_r+0xf8>
 80086ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086f2:	b21b      	sxth	r3, r3
 80086f4:	e01b      	b.n	800872e <__sflush_r+0xf2>
 80086f6:	690f      	ldr	r7, [r1, #16]
 80086f8:	2f00      	cmp	r7, #0
 80086fa:	d0f6      	beq.n	80086ea <__sflush_r+0xae>
 80086fc:	0793      	lsls	r3, r2, #30
 80086fe:	680e      	ldr	r6, [r1, #0]
 8008700:	bf08      	it	eq
 8008702:	694b      	ldreq	r3, [r1, #20]
 8008704:	600f      	str	r7, [r1, #0]
 8008706:	bf18      	it	ne
 8008708:	2300      	movne	r3, #0
 800870a:	eba6 0807 	sub.w	r8, r6, r7
 800870e:	608b      	str	r3, [r1, #8]
 8008710:	f1b8 0f00 	cmp.w	r8, #0
 8008714:	dde9      	ble.n	80086ea <__sflush_r+0xae>
 8008716:	6a21      	ldr	r1, [r4, #32]
 8008718:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800871a:	4643      	mov	r3, r8
 800871c:	463a      	mov	r2, r7
 800871e:	4628      	mov	r0, r5
 8008720:	47b0      	blx	r6
 8008722:	2800      	cmp	r0, #0
 8008724:	dc08      	bgt.n	8008738 <__sflush_r+0xfc>
 8008726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800872a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800872e:	81a3      	strh	r3, [r4, #12]
 8008730:	f04f 30ff 	mov.w	r0, #4294967295
 8008734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008738:	4407      	add	r7, r0
 800873a:	eba8 0800 	sub.w	r8, r8, r0
 800873e:	e7e7      	b.n	8008710 <__sflush_r+0xd4>
 8008740:	dfbffffe 	.word	0xdfbffffe

08008744 <_fflush_r>:
 8008744:	b538      	push	{r3, r4, r5, lr}
 8008746:	690b      	ldr	r3, [r1, #16]
 8008748:	4605      	mov	r5, r0
 800874a:	460c      	mov	r4, r1
 800874c:	b913      	cbnz	r3, 8008754 <_fflush_r+0x10>
 800874e:	2500      	movs	r5, #0
 8008750:	4628      	mov	r0, r5
 8008752:	bd38      	pop	{r3, r4, r5, pc}
 8008754:	b118      	cbz	r0, 800875e <_fflush_r+0x1a>
 8008756:	6a03      	ldr	r3, [r0, #32]
 8008758:	b90b      	cbnz	r3, 800875e <_fflush_r+0x1a>
 800875a:	f7fd fa75 	bl	8005c48 <__sinit>
 800875e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d0f3      	beq.n	800874e <_fflush_r+0xa>
 8008766:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008768:	07d0      	lsls	r0, r2, #31
 800876a:	d404      	bmi.n	8008776 <_fflush_r+0x32>
 800876c:	0599      	lsls	r1, r3, #22
 800876e:	d402      	bmi.n	8008776 <_fflush_r+0x32>
 8008770:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008772:	f7fd fb80 	bl	8005e76 <__retarget_lock_acquire_recursive>
 8008776:	4628      	mov	r0, r5
 8008778:	4621      	mov	r1, r4
 800877a:	f7ff ff5f 	bl	800863c <__sflush_r>
 800877e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008780:	07da      	lsls	r2, r3, #31
 8008782:	4605      	mov	r5, r0
 8008784:	d4e4      	bmi.n	8008750 <_fflush_r+0xc>
 8008786:	89a3      	ldrh	r3, [r4, #12]
 8008788:	059b      	lsls	r3, r3, #22
 800878a:	d4e1      	bmi.n	8008750 <_fflush_r+0xc>
 800878c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800878e:	f7fd fb73 	bl	8005e78 <__retarget_lock_release_recursive>
 8008792:	e7dd      	b.n	8008750 <_fflush_r+0xc>

08008794 <memmove>:
 8008794:	4288      	cmp	r0, r1
 8008796:	b510      	push	{r4, lr}
 8008798:	eb01 0402 	add.w	r4, r1, r2
 800879c:	d902      	bls.n	80087a4 <memmove+0x10>
 800879e:	4284      	cmp	r4, r0
 80087a0:	4623      	mov	r3, r4
 80087a2:	d807      	bhi.n	80087b4 <memmove+0x20>
 80087a4:	1e43      	subs	r3, r0, #1
 80087a6:	42a1      	cmp	r1, r4
 80087a8:	d008      	beq.n	80087bc <memmove+0x28>
 80087aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80087b2:	e7f8      	b.n	80087a6 <memmove+0x12>
 80087b4:	4402      	add	r2, r0
 80087b6:	4601      	mov	r1, r0
 80087b8:	428a      	cmp	r2, r1
 80087ba:	d100      	bne.n	80087be <memmove+0x2a>
 80087bc:	bd10      	pop	{r4, pc}
 80087be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80087c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80087c6:	e7f7      	b.n	80087b8 <memmove+0x24>

080087c8 <strncmp>:
 80087c8:	b510      	push	{r4, lr}
 80087ca:	b16a      	cbz	r2, 80087e8 <strncmp+0x20>
 80087cc:	3901      	subs	r1, #1
 80087ce:	1884      	adds	r4, r0, r2
 80087d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087d4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80087d8:	429a      	cmp	r2, r3
 80087da:	d103      	bne.n	80087e4 <strncmp+0x1c>
 80087dc:	42a0      	cmp	r0, r4
 80087de:	d001      	beq.n	80087e4 <strncmp+0x1c>
 80087e0:	2a00      	cmp	r2, #0
 80087e2:	d1f5      	bne.n	80087d0 <strncmp+0x8>
 80087e4:	1ad0      	subs	r0, r2, r3
 80087e6:	bd10      	pop	{r4, pc}
 80087e8:	4610      	mov	r0, r2
 80087ea:	e7fc      	b.n	80087e6 <strncmp+0x1e>

080087ec <_sbrk_r>:
 80087ec:	b538      	push	{r3, r4, r5, lr}
 80087ee:	4d06      	ldr	r5, [pc, #24]	@ (8008808 <_sbrk_r+0x1c>)
 80087f0:	2300      	movs	r3, #0
 80087f2:	4604      	mov	r4, r0
 80087f4:	4608      	mov	r0, r1
 80087f6:	602b      	str	r3, [r5, #0]
 80087f8:	f7f8 ff5e 	bl	80016b8 <_sbrk>
 80087fc:	1c43      	adds	r3, r0, #1
 80087fe:	d102      	bne.n	8008806 <_sbrk_r+0x1a>
 8008800:	682b      	ldr	r3, [r5, #0]
 8008802:	b103      	cbz	r3, 8008806 <_sbrk_r+0x1a>
 8008804:	6023      	str	r3, [r4, #0]
 8008806:	bd38      	pop	{r3, r4, r5, pc}
 8008808:	2000059c 	.word	0x2000059c

0800880c <memcpy>:
 800880c:	440a      	add	r2, r1
 800880e:	4291      	cmp	r1, r2
 8008810:	f100 33ff 	add.w	r3, r0, #4294967295
 8008814:	d100      	bne.n	8008818 <memcpy+0xc>
 8008816:	4770      	bx	lr
 8008818:	b510      	push	{r4, lr}
 800881a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800881e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008822:	4291      	cmp	r1, r2
 8008824:	d1f9      	bne.n	800881a <memcpy+0xe>
 8008826:	bd10      	pop	{r4, pc}

08008828 <nan>:
 8008828:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008830 <nan+0x8>
 800882c:	4770      	bx	lr
 800882e:	bf00      	nop
 8008830:	00000000 	.word	0x00000000
 8008834:	7ff80000 	.word	0x7ff80000

08008838 <__assert_func>:
 8008838:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800883a:	4614      	mov	r4, r2
 800883c:	461a      	mov	r2, r3
 800883e:	4b09      	ldr	r3, [pc, #36]	@ (8008864 <__assert_func+0x2c>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4605      	mov	r5, r0
 8008844:	68d8      	ldr	r0, [r3, #12]
 8008846:	b954      	cbnz	r4, 800885e <__assert_func+0x26>
 8008848:	4b07      	ldr	r3, [pc, #28]	@ (8008868 <__assert_func+0x30>)
 800884a:	461c      	mov	r4, r3
 800884c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008850:	9100      	str	r1, [sp, #0]
 8008852:	462b      	mov	r3, r5
 8008854:	4905      	ldr	r1, [pc, #20]	@ (800886c <__assert_func+0x34>)
 8008856:	f000 fba7 	bl	8008fa8 <fiprintf>
 800885a:	f000 fbb7 	bl	8008fcc <abort>
 800885e:	4b04      	ldr	r3, [pc, #16]	@ (8008870 <__assert_func+0x38>)
 8008860:	e7f4      	b.n	800884c <__assert_func+0x14>
 8008862:	bf00      	nop
 8008864:	20000018 	.word	0x20000018
 8008868:	0800996d 	.word	0x0800996d
 800886c:	0800993f 	.word	0x0800993f
 8008870:	08009932 	.word	0x08009932

08008874 <_calloc_r>:
 8008874:	b570      	push	{r4, r5, r6, lr}
 8008876:	fba1 5402 	umull	r5, r4, r1, r2
 800887a:	b93c      	cbnz	r4, 800888c <_calloc_r+0x18>
 800887c:	4629      	mov	r1, r5
 800887e:	f7fe f9c3 	bl	8006c08 <_malloc_r>
 8008882:	4606      	mov	r6, r0
 8008884:	b928      	cbnz	r0, 8008892 <_calloc_r+0x1e>
 8008886:	2600      	movs	r6, #0
 8008888:	4630      	mov	r0, r6
 800888a:	bd70      	pop	{r4, r5, r6, pc}
 800888c:	220c      	movs	r2, #12
 800888e:	6002      	str	r2, [r0, #0]
 8008890:	e7f9      	b.n	8008886 <_calloc_r+0x12>
 8008892:	462a      	mov	r2, r5
 8008894:	4621      	mov	r1, r4
 8008896:	f7fd fa70 	bl	8005d7a <memset>
 800889a:	e7f5      	b.n	8008888 <_calloc_r+0x14>

0800889c <rshift>:
 800889c:	6903      	ldr	r3, [r0, #16]
 800889e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80088a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80088a6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80088aa:	f100 0414 	add.w	r4, r0, #20
 80088ae:	dd45      	ble.n	800893c <rshift+0xa0>
 80088b0:	f011 011f 	ands.w	r1, r1, #31
 80088b4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80088b8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80088bc:	d10c      	bne.n	80088d8 <rshift+0x3c>
 80088be:	f100 0710 	add.w	r7, r0, #16
 80088c2:	4629      	mov	r1, r5
 80088c4:	42b1      	cmp	r1, r6
 80088c6:	d334      	bcc.n	8008932 <rshift+0x96>
 80088c8:	1a9b      	subs	r3, r3, r2
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	1eea      	subs	r2, r5, #3
 80088ce:	4296      	cmp	r6, r2
 80088d0:	bf38      	it	cc
 80088d2:	2300      	movcc	r3, #0
 80088d4:	4423      	add	r3, r4
 80088d6:	e015      	b.n	8008904 <rshift+0x68>
 80088d8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80088dc:	f1c1 0820 	rsb	r8, r1, #32
 80088e0:	40cf      	lsrs	r7, r1
 80088e2:	f105 0e04 	add.w	lr, r5, #4
 80088e6:	46a1      	mov	r9, r4
 80088e8:	4576      	cmp	r6, lr
 80088ea:	46f4      	mov	ip, lr
 80088ec:	d815      	bhi.n	800891a <rshift+0x7e>
 80088ee:	1a9a      	subs	r2, r3, r2
 80088f0:	0092      	lsls	r2, r2, #2
 80088f2:	3a04      	subs	r2, #4
 80088f4:	3501      	adds	r5, #1
 80088f6:	42ae      	cmp	r6, r5
 80088f8:	bf38      	it	cc
 80088fa:	2200      	movcc	r2, #0
 80088fc:	18a3      	adds	r3, r4, r2
 80088fe:	50a7      	str	r7, [r4, r2]
 8008900:	b107      	cbz	r7, 8008904 <rshift+0x68>
 8008902:	3304      	adds	r3, #4
 8008904:	1b1a      	subs	r2, r3, r4
 8008906:	42a3      	cmp	r3, r4
 8008908:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800890c:	bf08      	it	eq
 800890e:	2300      	moveq	r3, #0
 8008910:	6102      	str	r2, [r0, #16]
 8008912:	bf08      	it	eq
 8008914:	6143      	streq	r3, [r0, #20]
 8008916:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800891a:	f8dc c000 	ldr.w	ip, [ip]
 800891e:	fa0c fc08 	lsl.w	ip, ip, r8
 8008922:	ea4c 0707 	orr.w	r7, ip, r7
 8008926:	f849 7b04 	str.w	r7, [r9], #4
 800892a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800892e:	40cf      	lsrs	r7, r1
 8008930:	e7da      	b.n	80088e8 <rshift+0x4c>
 8008932:	f851 cb04 	ldr.w	ip, [r1], #4
 8008936:	f847 cf04 	str.w	ip, [r7, #4]!
 800893a:	e7c3      	b.n	80088c4 <rshift+0x28>
 800893c:	4623      	mov	r3, r4
 800893e:	e7e1      	b.n	8008904 <rshift+0x68>

08008940 <__hexdig_fun>:
 8008940:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008944:	2b09      	cmp	r3, #9
 8008946:	d802      	bhi.n	800894e <__hexdig_fun+0xe>
 8008948:	3820      	subs	r0, #32
 800894a:	b2c0      	uxtb	r0, r0
 800894c:	4770      	bx	lr
 800894e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008952:	2b05      	cmp	r3, #5
 8008954:	d801      	bhi.n	800895a <__hexdig_fun+0x1a>
 8008956:	3847      	subs	r0, #71	@ 0x47
 8008958:	e7f7      	b.n	800894a <__hexdig_fun+0xa>
 800895a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800895e:	2b05      	cmp	r3, #5
 8008960:	d801      	bhi.n	8008966 <__hexdig_fun+0x26>
 8008962:	3827      	subs	r0, #39	@ 0x27
 8008964:	e7f1      	b.n	800894a <__hexdig_fun+0xa>
 8008966:	2000      	movs	r0, #0
 8008968:	4770      	bx	lr
	...

0800896c <__gethex>:
 800896c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008970:	b085      	sub	sp, #20
 8008972:	468a      	mov	sl, r1
 8008974:	9302      	str	r3, [sp, #8]
 8008976:	680b      	ldr	r3, [r1, #0]
 8008978:	9001      	str	r0, [sp, #4]
 800897a:	4690      	mov	r8, r2
 800897c:	1c9c      	adds	r4, r3, #2
 800897e:	46a1      	mov	r9, r4
 8008980:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008984:	2830      	cmp	r0, #48	@ 0x30
 8008986:	d0fa      	beq.n	800897e <__gethex+0x12>
 8008988:	eba9 0303 	sub.w	r3, r9, r3
 800898c:	f1a3 0b02 	sub.w	fp, r3, #2
 8008990:	f7ff ffd6 	bl	8008940 <__hexdig_fun>
 8008994:	4605      	mov	r5, r0
 8008996:	2800      	cmp	r0, #0
 8008998:	d168      	bne.n	8008a6c <__gethex+0x100>
 800899a:	49a0      	ldr	r1, [pc, #640]	@ (8008c1c <__gethex+0x2b0>)
 800899c:	2201      	movs	r2, #1
 800899e:	4648      	mov	r0, r9
 80089a0:	f7ff ff12 	bl	80087c8 <strncmp>
 80089a4:	4607      	mov	r7, r0
 80089a6:	2800      	cmp	r0, #0
 80089a8:	d167      	bne.n	8008a7a <__gethex+0x10e>
 80089aa:	f899 0001 	ldrb.w	r0, [r9, #1]
 80089ae:	4626      	mov	r6, r4
 80089b0:	f7ff ffc6 	bl	8008940 <__hexdig_fun>
 80089b4:	2800      	cmp	r0, #0
 80089b6:	d062      	beq.n	8008a7e <__gethex+0x112>
 80089b8:	4623      	mov	r3, r4
 80089ba:	7818      	ldrb	r0, [r3, #0]
 80089bc:	2830      	cmp	r0, #48	@ 0x30
 80089be:	4699      	mov	r9, r3
 80089c0:	f103 0301 	add.w	r3, r3, #1
 80089c4:	d0f9      	beq.n	80089ba <__gethex+0x4e>
 80089c6:	f7ff ffbb 	bl	8008940 <__hexdig_fun>
 80089ca:	fab0 f580 	clz	r5, r0
 80089ce:	096d      	lsrs	r5, r5, #5
 80089d0:	f04f 0b01 	mov.w	fp, #1
 80089d4:	464a      	mov	r2, r9
 80089d6:	4616      	mov	r6, r2
 80089d8:	3201      	adds	r2, #1
 80089da:	7830      	ldrb	r0, [r6, #0]
 80089dc:	f7ff ffb0 	bl	8008940 <__hexdig_fun>
 80089e0:	2800      	cmp	r0, #0
 80089e2:	d1f8      	bne.n	80089d6 <__gethex+0x6a>
 80089e4:	498d      	ldr	r1, [pc, #564]	@ (8008c1c <__gethex+0x2b0>)
 80089e6:	2201      	movs	r2, #1
 80089e8:	4630      	mov	r0, r6
 80089ea:	f7ff feed 	bl	80087c8 <strncmp>
 80089ee:	2800      	cmp	r0, #0
 80089f0:	d13f      	bne.n	8008a72 <__gethex+0x106>
 80089f2:	b944      	cbnz	r4, 8008a06 <__gethex+0x9a>
 80089f4:	1c74      	adds	r4, r6, #1
 80089f6:	4622      	mov	r2, r4
 80089f8:	4616      	mov	r6, r2
 80089fa:	3201      	adds	r2, #1
 80089fc:	7830      	ldrb	r0, [r6, #0]
 80089fe:	f7ff ff9f 	bl	8008940 <__hexdig_fun>
 8008a02:	2800      	cmp	r0, #0
 8008a04:	d1f8      	bne.n	80089f8 <__gethex+0x8c>
 8008a06:	1ba4      	subs	r4, r4, r6
 8008a08:	00a7      	lsls	r7, r4, #2
 8008a0a:	7833      	ldrb	r3, [r6, #0]
 8008a0c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008a10:	2b50      	cmp	r3, #80	@ 0x50
 8008a12:	d13e      	bne.n	8008a92 <__gethex+0x126>
 8008a14:	7873      	ldrb	r3, [r6, #1]
 8008a16:	2b2b      	cmp	r3, #43	@ 0x2b
 8008a18:	d033      	beq.n	8008a82 <__gethex+0x116>
 8008a1a:	2b2d      	cmp	r3, #45	@ 0x2d
 8008a1c:	d034      	beq.n	8008a88 <__gethex+0x11c>
 8008a1e:	1c71      	adds	r1, r6, #1
 8008a20:	2400      	movs	r4, #0
 8008a22:	7808      	ldrb	r0, [r1, #0]
 8008a24:	f7ff ff8c 	bl	8008940 <__hexdig_fun>
 8008a28:	1e43      	subs	r3, r0, #1
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	2b18      	cmp	r3, #24
 8008a2e:	d830      	bhi.n	8008a92 <__gethex+0x126>
 8008a30:	f1a0 0210 	sub.w	r2, r0, #16
 8008a34:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008a38:	f7ff ff82 	bl	8008940 <__hexdig_fun>
 8008a3c:	f100 3cff 	add.w	ip, r0, #4294967295
 8008a40:	fa5f fc8c 	uxtb.w	ip, ip
 8008a44:	f1bc 0f18 	cmp.w	ip, #24
 8008a48:	f04f 030a 	mov.w	r3, #10
 8008a4c:	d91e      	bls.n	8008a8c <__gethex+0x120>
 8008a4e:	b104      	cbz	r4, 8008a52 <__gethex+0xe6>
 8008a50:	4252      	negs	r2, r2
 8008a52:	4417      	add	r7, r2
 8008a54:	f8ca 1000 	str.w	r1, [sl]
 8008a58:	b1ed      	cbz	r5, 8008a96 <__gethex+0x12a>
 8008a5a:	f1bb 0f00 	cmp.w	fp, #0
 8008a5e:	bf0c      	ite	eq
 8008a60:	2506      	moveq	r5, #6
 8008a62:	2500      	movne	r5, #0
 8008a64:	4628      	mov	r0, r5
 8008a66:	b005      	add	sp, #20
 8008a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a6c:	2500      	movs	r5, #0
 8008a6e:	462c      	mov	r4, r5
 8008a70:	e7b0      	b.n	80089d4 <__gethex+0x68>
 8008a72:	2c00      	cmp	r4, #0
 8008a74:	d1c7      	bne.n	8008a06 <__gethex+0x9a>
 8008a76:	4627      	mov	r7, r4
 8008a78:	e7c7      	b.n	8008a0a <__gethex+0x9e>
 8008a7a:	464e      	mov	r6, r9
 8008a7c:	462f      	mov	r7, r5
 8008a7e:	2501      	movs	r5, #1
 8008a80:	e7c3      	b.n	8008a0a <__gethex+0x9e>
 8008a82:	2400      	movs	r4, #0
 8008a84:	1cb1      	adds	r1, r6, #2
 8008a86:	e7cc      	b.n	8008a22 <__gethex+0xb6>
 8008a88:	2401      	movs	r4, #1
 8008a8a:	e7fb      	b.n	8008a84 <__gethex+0x118>
 8008a8c:	fb03 0002 	mla	r0, r3, r2, r0
 8008a90:	e7ce      	b.n	8008a30 <__gethex+0xc4>
 8008a92:	4631      	mov	r1, r6
 8008a94:	e7de      	b.n	8008a54 <__gethex+0xe8>
 8008a96:	eba6 0309 	sub.w	r3, r6, r9
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	4629      	mov	r1, r5
 8008a9e:	2b07      	cmp	r3, #7
 8008aa0:	dc0a      	bgt.n	8008ab8 <__gethex+0x14c>
 8008aa2:	9801      	ldr	r0, [sp, #4]
 8008aa4:	f7fe f93c 	bl	8006d20 <_Balloc>
 8008aa8:	4604      	mov	r4, r0
 8008aaa:	b940      	cbnz	r0, 8008abe <__gethex+0x152>
 8008aac:	4b5c      	ldr	r3, [pc, #368]	@ (8008c20 <__gethex+0x2b4>)
 8008aae:	4602      	mov	r2, r0
 8008ab0:	21e4      	movs	r1, #228	@ 0xe4
 8008ab2:	485c      	ldr	r0, [pc, #368]	@ (8008c24 <__gethex+0x2b8>)
 8008ab4:	f7ff fec0 	bl	8008838 <__assert_func>
 8008ab8:	3101      	adds	r1, #1
 8008aba:	105b      	asrs	r3, r3, #1
 8008abc:	e7ef      	b.n	8008a9e <__gethex+0x132>
 8008abe:	f100 0a14 	add.w	sl, r0, #20
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	4655      	mov	r5, sl
 8008ac6:	469b      	mov	fp, r3
 8008ac8:	45b1      	cmp	r9, r6
 8008aca:	d337      	bcc.n	8008b3c <__gethex+0x1d0>
 8008acc:	f845 bb04 	str.w	fp, [r5], #4
 8008ad0:	eba5 050a 	sub.w	r5, r5, sl
 8008ad4:	10ad      	asrs	r5, r5, #2
 8008ad6:	6125      	str	r5, [r4, #16]
 8008ad8:	4658      	mov	r0, fp
 8008ada:	f7fe fa13 	bl	8006f04 <__hi0bits>
 8008ade:	016d      	lsls	r5, r5, #5
 8008ae0:	f8d8 6000 	ldr.w	r6, [r8]
 8008ae4:	1a2d      	subs	r5, r5, r0
 8008ae6:	42b5      	cmp	r5, r6
 8008ae8:	dd54      	ble.n	8008b94 <__gethex+0x228>
 8008aea:	1bad      	subs	r5, r5, r6
 8008aec:	4629      	mov	r1, r5
 8008aee:	4620      	mov	r0, r4
 8008af0:	f7fe fda7 	bl	8007642 <__any_on>
 8008af4:	4681      	mov	r9, r0
 8008af6:	b178      	cbz	r0, 8008b18 <__gethex+0x1ac>
 8008af8:	1e6b      	subs	r3, r5, #1
 8008afa:	1159      	asrs	r1, r3, #5
 8008afc:	f003 021f 	and.w	r2, r3, #31
 8008b00:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008b04:	f04f 0901 	mov.w	r9, #1
 8008b08:	fa09 f202 	lsl.w	r2, r9, r2
 8008b0c:	420a      	tst	r2, r1
 8008b0e:	d003      	beq.n	8008b18 <__gethex+0x1ac>
 8008b10:	454b      	cmp	r3, r9
 8008b12:	dc36      	bgt.n	8008b82 <__gethex+0x216>
 8008b14:	f04f 0902 	mov.w	r9, #2
 8008b18:	4629      	mov	r1, r5
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	f7ff febe 	bl	800889c <rshift>
 8008b20:	442f      	add	r7, r5
 8008b22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008b26:	42bb      	cmp	r3, r7
 8008b28:	da42      	bge.n	8008bb0 <__gethex+0x244>
 8008b2a:	9801      	ldr	r0, [sp, #4]
 8008b2c:	4621      	mov	r1, r4
 8008b2e:	f7fe f937 	bl	8006da0 <_Bfree>
 8008b32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b34:	2300      	movs	r3, #0
 8008b36:	6013      	str	r3, [r2, #0]
 8008b38:	25a3      	movs	r5, #163	@ 0xa3
 8008b3a:	e793      	b.n	8008a64 <__gethex+0xf8>
 8008b3c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008b40:	2a2e      	cmp	r2, #46	@ 0x2e
 8008b42:	d012      	beq.n	8008b6a <__gethex+0x1fe>
 8008b44:	2b20      	cmp	r3, #32
 8008b46:	d104      	bne.n	8008b52 <__gethex+0x1e6>
 8008b48:	f845 bb04 	str.w	fp, [r5], #4
 8008b4c:	f04f 0b00 	mov.w	fp, #0
 8008b50:	465b      	mov	r3, fp
 8008b52:	7830      	ldrb	r0, [r6, #0]
 8008b54:	9303      	str	r3, [sp, #12]
 8008b56:	f7ff fef3 	bl	8008940 <__hexdig_fun>
 8008b5a:	9b03      	ldr	r3, [sp, #12]
 8008b5c:	f000 000f 	and.w	r0, r0, #15
 8008b60:	4098      	lsls	r0, r3
 8008b62:	ea4b 0b00 	orr.w	fp, fp, r0
 8008b66:	3304      	adds	r3, #4
 8008b68:	e7ae      	b.n	8008ac8 <__gethex+0x15c>
 8008b6a:	45b1      	cmp	r9, r6
 8008b6c:	d8ea      	bhi.n	8008b44 <__gethex+0x1d8>
 8008b6e:	492b      	ldr	r1, [pc, #172]	@ (8008c1c <__gethex+0x2b0>)
 8008b70:	9303      	str	r3, [sp, #12]
 8008b72:	2201      	movs	r2, #1
 8008b74:	4630      	mov	r0, r6
 8008b76:	f7ff fe27 	bl	80087c8 <strncmp>
 8008b7a:	9b03      	ldr	r3, [sp, #12]
 8008b7c:	2800      	cmp	r0, #0
 8008b7e:	d1e1      	bne.n	8008b44 <__gethex+0x1d8>
 8008b80:	e7a2      	b.n	8008ac8 <__gethex+0x15c>
 8008b82:	1ea9      	subs	r1, r5, #2
 8008b84:	4620      	mov	r0, r4
 8008b86:	f7fe fd5c 	bl	8007642 <__any_on>
 8008b8a:	2800      	cmp	r0, #0
 8008b8c:	d0c2      	beq.n	8008b14 <__gethex+0x1a8>
 8008b8e:	f04f 0903 	mov.w	r9, #3
 8008b92:	e7c1      	b.n	8008b18 <__gethex+0x1ac>
 8008b94:	da09      	bge.n	8008baa <__gethex+0x23e>
 8008b96:	1b75      	subs	r5, r6, r5
 8008b98:	4621      	mov	r1, r4
 8008b9a:	9801      	ldr	r0, [sp, #4]
 8008b9c:	462a      	mov	r2, r5
 8008b9e:	f7fe fb17 	bl	80071d0 <__lshift>
 8008ba2:	1b7f      	subs	r7, r7, r5
 8008ba4:	4604      	mov	r4, r0
 8008ba6:	f100 0a14 	add.w	sl, r0, #20
 8008baa:	f04f 0900 	mov.w	r9, #0
 8008bae:	e7b8      	b.n	8008b22 <__gethex+0x1b6>
 8008bb0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008bb4:	42bd      	cmp	r5, r7
 8008bb6:	dd6f      	ble.n	8008c98 <__gethex+0x32c>
 8008bb8:	1bed      	subs	r5, r5, r7
 8008bba:	42ae      	cmp	r6, r5
 8008bbc:	dc34      	bgt.n	8008c28 <__gethex+0x2bc>
 8008bbe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008bc2:	2b02      	cmp	r3, #2
 8008bc4:	d022      	beq.n	8008c0c <__gethex+0x2a0>
 8008bc6:	2b03      	cmp	r3, #3
 8008bc8:	d024      	beq.n	8008c14 <__gethex+0x2a8>
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d115      	bne.n	8008bfa <__gethex+0x28e>
 8008bce:	42ae      	cmp	r6, r5
 8008bd0:	d113      	bne.n	8008bfa <__gethex+0x28e>
 8008bd2:	2e01      	cmp	r6, #1
 8008bd4:	d10b      	bne.n	8008bee <__gethex+0x282>
 8008bd6:	9a02      	ldr	r2, [sp, #8]
 8008bd8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008bdc:	6013      	str	r3, [r2, #0]
 8008bde:	2301      	movs	r3, #1
 8008be0:	6123      	str	r3, [r4, #16]
 8008be2:	f8ca 3000 	str.w	r3, [sl]
 8008be6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008be8:	2562      	movs	r5, #98	@ 0x62
 8008bea:	601c      	str	r4, [r3, #0]
 8008bec:	e73a      	b.n	8008a64 <__gethex+0xf8>
 8008bee:	1e71      	subs	r1, r6, #1
 8008bf0:	4620      	mov	r0, r4
 8008bf2:	f7fe fd26 	bl	8007642 <__any_on>
 8008bf6:	2800      	cmp	r0, #0
 8008bf8:	d1ed      	bne.n	8008bd6 <__gethex+0x26a>
 8008bfa:	9801      	ldr	r0, [sp, #4]
 8008bfc:	4621      	mov	r1, r4
 8008bfe:	f7fe f8cf 	bl	8006da0 <_Bfree>
 8008c02:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008c04:	2300      	movs	r3, #0
 8008c06:	6013      	str	r3, [r2, #0]
 8008c08:	2550      	movs	r5, #80	@ 0x50
 8008c0a:	e72b      	b.n	8008a64 <__gethex+0xf8>
 8008c0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d1f3      	bne.n	8008bfa <__gethex+0x28e>
 8008c12:	e7e0      	b.n	8008bd6 <__gethex+0x26a>
 8008c14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d1dd      	bne.n	8008bd6 <__gethex+0x26a>
 8008c1a:	e7ee      	b.n	8008bfa <__gethex+0x28e>
 8008c1c:	080097c0 	.word	0x080097c0
 8008c20:	08009655 	.word	0x08009655
 8008c24:	0800996e 	.word	0x0800996e
 8008c28:	1e6f      	subs	r7, r5, #1
 8008c2a:	f1b9 0f00 	cmp.w	r9, #0
 8008c2e:	d130      	bne.n	8008c92 <__gethex+0x326>
 8008c30:	b127      	cbz	r7, 8008c3c <__gethex+0x2d0>
 8008c32:	4639      	mov	r1, r7
 8008c34:	4620      	mov	r0, r4
 8008c36:	f7fe fd04 	bl	8007642 <__any_on>
 8008c3a:	4681      	mov	r9, r0
 8008c3c:	117a      	asrs	r2, r7, #5
 8008c3e:	2301      	movs	r3, #1
 8008c40:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008c44:	f007 071f 	and.w	r7, r7, #31
 8008c48:	40bb      	lsls	r3, r7
 8008c4a:	4213      	tst	r3, r2
 8008c4c:	4629      	mov	r1, r5
 8008c4e:	4620      	mov	r0, r4
 8008c50:	bf18      	it	ne
 8008c52:	f049 0902 	orrne.w	r9, r9, #2
 8008c56:	f7ff fe21 	bl	800889c <rshift>
 8008c5a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008c5e:	1b76      	subs	r6, r6, r5
 8008c60:	2502      	movs	r5, #2
 8008c62:	f1b9 0f00 	cmp.w	r9, #0
 8008c66:	d047      	beq.n	8008cf8 <__gethex+0x38c>
 8008c68:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008c6c:	2b02      	cmp	r3, #2
 8008c6e:	d015      	beq.n	8008c9c <__gethex+0x330>
 8008c70:	2b03      	cmp	r3, #3
 8008c72:	d017      	beq.n	8008ca4 <__gethex+0x338>
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d109      	bne.n	8008c8c <__gethex+0x320>
 8008c78:	f019 0f02 	tst.w	r9, #2
 8008c7c:	d006      	beq.n	8008c8c <__gethex+0x320>
 8008c7e:	f8da 3000 	ldr.w	r3, [sl]
 8008c82:	ea49 0903 	orr.w	r9, r9, r3
 8008c86:	f019 0f01 	tst.w	r9, #1
 8008c8a:	d10e      	bne.n	8008caa <__gethex+0x33e>
 8008c8c:	f045 0510 	orr.w	r5, r5, #16
 8008c90:	e032      	b.n	8008cf8 <__gethex+0x38c>
 8008c92:	f04f 0901 	mov.w	r9, #1
 8008c96:	e7d1      	b.n	8008c3c <__gethex+0x2d0>
 8008c98:	2501      	movs	r5, #1
 8008c9a:	e7e2      	b.n	8008c62 <__gethex+0x2f6>
 8008c9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c9e:	f1c3 0301 	rsb	r3, r3, #1
 8008ca2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008ca4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d0f0      	beq.n	8008c8c <__gethex+0x320>
 8008caa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008cae:	f104 0314 	add.w	r3, r4, #20
 8008cb2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008cb6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008cba:	f04f 0c00 	mov.w	ip, #0
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cc4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008cc8:	d01b      	beq.n	8008d02 <__gethex+0x396>
 8008cca:	3201      	adds	r2, #1
 8008ccc:	6002      	str	r2, [r0, #0]
 8008cce:	2d02      	cmp	r5, #2
 8008cd0:	f104 0314 	add.w	r3, r4, #20
 8008cd4:	d13c      	bne.n	8008d50 <__gethex+0x3e4>
 8008cd6:	f8d8 2000 	ldr.w	r2, [r8]
 8008cda:	3a01      	subs	r2, #1
 8008cdc:	42b2      	cmp	r2, r6
 8008cde:	d109      	bne.n	8008cf4 <__gethex+0x388>
 8008ce0:	1171      	asrs	r1, r6, #5
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008ce8:	f006 061f 	and.w	r6, r6, #31
 8008cec:	fa02 f606 	lsl.w	r6, r2, r6
 8008cf0:	421e      	tst	r6, r3
 8008cf2:	d13a      	bne.n	8008d6a <__gethex+0x3fe>
 8008cf4:	f045 0520 	orr.w	r5, r5, #32
 8008cf8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008cfa:	601c      	str	r4, [r3, #0]
 8008cfc:	9b02      	ldr	r3, [sp, #8]
 8008cfe:	601f      	str	r7, [r3, #0]
 8008d00:	e6b0      	b.n	8008a64 <__gethex+0xf8>
 8008d02:	4299      	cmp	r1, r3
 8008d04:	f843 cc04 	str.w	ip, [r3, #-4]
 8008d08:	d8d9      	bhi.n	8008cbe <__gethex+0x352>
 8008d0a:	68a3      	ldr	r3, [r4, #8]
 8008d0c:	459b      	cmp	fp, r3
 8008d0e:	db17      	blt.n	8008d40 <__gethex+0x3d4>
 8008d10:	6861      	ldr	r1, [r4, #4]
 8008d12:	9801      	ldr	r0, [sp, #4]
 8008d14:	3101      	adds	r1, #1
 8008d16:	f7fe f803 	bl	8006d20 <_Balloc>
 8008d1a:	4681      	mov	r9, r0
 8008d1c:	b918      	cbnz	r0, 8008d26 <__gethex+0x3ba>
 8008d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8008d88 <__gethex+0x41c>)
 8008d20:	4602      	mov	r2, r0
 8008d22:	2184      	movs	r1, #132	@ 0x84
 8008d24:	e6c5      	b.n	8008ab2 <__gethex+0x146>
 8008d26:	6922      	ldr	r2, [r4, #16]
 8008d28:	3202      	adds	r2, #2
 8008d2a:	f104 010c 	add.w	r1, r4, #12
 8008d2e:	0092      	lsls	r2, r2, #2
 8008d30:	300c      	adds	r0, #12
 8008d32:	f7ff fd6b 	bl	800880c <memcpy>
 8008d36:	4621      	mov	r1, r4
 8008d38:	9801      	ldr	r0, [sp, #4]
 8008d3a:	f7fe f831 	bl	8006da0 <_Bfree>
 8008d3e:	464c      	mov	r4, r9
 8008d40:	6923      	ldr	r3, [r4, #16]
 8008d42:	1c5a      	adds	r2, r3, #1
 8008d44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008d48:	6122      	str	r2, [r4, #16]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	615a      	str	r2, [r3, #20]
 8008d4e:	e7be      	b.n	8008cce <__gethex+0x362>
 8008d50:	6922      	ldr	r2, [r4, #16]
 8008d52:	455a      	cmp	r2, fp
 8008d54:	dd0b      	ble.n	8008d6e <__gethex+0x402>
 8008d56:	2101      	movs	r1, #1
 8008d58:	4620      	mov	r0, r4
 8008d5a:	f7ff fd9f 	bl	800889c <rshift>
 8008d5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d62:	3701      	adds	r7, #1
 8008d64:	42bb      	cmp	r3, r7
 8008d66:	f6ff aee0 	blt.w	8008b2a <__gethex+0x1be>
 8008d6a:	2501      	movs	r5, #1
 8008d6c:	e7c2      	b.n	8008cf4 <__gethex+0x388>
 8008d6e:	f016 061f 	ands.w	r6, r6, #31
 8008d72:	d0fa      	beq.n	8008d6a <__gethex+0x3fe>
 8008d74:	4453      	add	r3, sl
 8008d76:	f1c6 0620 	rsb	r6, r6, #32
 8008d7a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008d7e:	f7fe f8c1 	bl	8006f04 <__hi0bits>
 8008d82:	42b0      	cmp	r0, r6
 8008d84:	dbe7      	blt.n	8008d56 <__gethex+0x3ea>
 8008d86:	e7f0      	b.n	8008d6a <__gethex+0x3fe>
 8008d88:	08009655 	.word	0x08009655

08008d8c <L_shift>:
 8008d8c:	f1c2 0208 	rsb	r2, r2, #8
 8008d90:	0092      	lsls	r2, r2, #2
 8008d92:	b570      	push	{r4, r5, r6, lr}
 8008d94:	f1c2 0620 	rsb	r6, r2, #32
 8008d98:	6843      	ldr	r3, [r0, #4]
 8008d9a:	6804      	ldr	r4, [r0, #0]
 8008d9c:	fa03 f506 	lsl.w	r5, r3, r6
 8008da0:	432c      	orrs	r4, r5
 8008da2:	40d3      	lsrs	r3, r2
 8008da4:	6004      	str	r4, [r0, #0]
 8008da6:	f840 3f04 	str.w	r3, [r0, #4]!
 8008daa:	4288      	cmp	r0, r1
 8008dac:	d3f4      	bcc.n	8008d98 <L_shift+0xc>
 8008dae:	bd70      	pop	{r4, r5, r6, pc}

08008db0 <__match>:
 8008db0:	b530      	push	{r4, r5, lr}
 8008db2:	6803      	ldr	r3, [r0, #0]
 8008db4:	3301      	adds	r3, #1
 8008db6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008dba:	b914      	cbnz	r4, 8008dc2 <__match+0x12>
 8008dbc:	6003      	str	r3, [r0, #0]
 8008dbe:	2001      	movs	r0, #1
 8008dc0:	bd30      	pop	{r4, r5, pc}
 8008dc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dc6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008dca:	2d19      	cmp	r5, #25
 8008dcc:	bf98      	it	ls
 8008dce:	3220      	addls	r2, #32
 8008dd0:	42a2      	cmp	r2, r4
 8008dd2:	d0f0      	beq.n	8008db6 <__match+0x6>
 8008dd4:	2000      	movs	r0, #0
 8008dd6:	e7f3      	b.n	8008dc0 <__match+0x10>

08008dd8 <__hexnan>:
 8008dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ddc:	680b      	ldr	r3, [r1, #0]
 8008dde:	6801      	ldr	r1, [r0, #0]
 8008de0:	115e      	asrs	r6, r3, #5
 8008de2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008de6:	f013 031f 	ands.w	r3, r3, #31
 8008dea:	b087      	sub	sp, #28
 8008dec:	bf18      	it	ne
 8008dee:	3604      	addne	r6, #4
 8008df0:	2500      	movs	r5, #0
 8008df2:	1f37      	subs	r7, r6, #4
 8008df4:	4682      	mov	sl, r0
 8008df6:	4690      	mov	r8, r2
 8008df8:	9301      	str	r3, [sp, #4]
 8008dfa:	f846 5c04 	str.w	r5, [r6, #-4]
 8008dfe:	46b9      	mov	r9, r7
 8008e00:	463c      	mov	r4, r7
 8008e02:	9502      	str	r5, [sp, #8]
 8008e04:	46ab      	mov	fp, r5
 8008e06:	784a      	ldrb	r2, [r1, #1]
 8008e08:	1c4b      	adds	r3, r1, #1
 8008e0a:	9303      	str	r3, [sp, #12]
 8008e0c:	b342      	cbz	r2, 8008e60 <__hexnan+0x88>
 8008e0e:	4610      	mov	r0, r2
 8008e10:	9105      	str	r1, [sp, #20]
 8008e12:	9204      	str	r2, [sp, #16]
 8008e14:	f7ff fd94 	bl	8008940 <__hexdig_fun>
 8008e18:	2800      	cmp	r0, #0
 8008e1a:	d151      	bne.n	8008ec0 <__hexnan+0xe8>
 8008e1c:	9a04      	ldr	r2, [sp, #16]
 8008e1e:	9905      	ldr	r1, [sp, #20]
 8008e20:	2a20      	cmp	r2, #32
 8008e22:	d818      	bhi.n	8008e56 <__hexnan+0x7e>
 8008e24:	9b02      	ldr	r3, [sp, #8]
 8008e26:	459b      	cmp	fp, r3
 8008e28:	dd13      	ble.n	8008e52 <__hexnan+0x7a>
 8008e2a:	454c      	cmp	r4, r9
 8008e2c:	d206      	bcs.n	8008e3c <__hexnan+0x64>
 8008e2e:	2d07      	cmp	r5, #7
 8008e30:	dc04      	bgt.n	8008e3c <__hexnan+0x64>
 8008e32:	462a      	mov	r2, r5
 8008e34:	4649      	mov	r1, r9
 8008e36:	4620      	mov	r0, r4
 8008e38:	f7ff ffa8 	bl	8008d8c <L_shift>
 8008e3c:	4544      	cmp	r4, r8
 8008e3e:	d952      	bls.n	8008ee6 <__hexnan+0x10e>
 8008e40:	2300      	movs	r3, #0
 8008e42:	f1a4 0904 	sub.w	r9, r4, #4
 8008e46:	f844 3c04 	str.w	r3, [r4, #-4]
 8008e4a:	f8cd b008 	str.w	fp, [sp, #8]
 8008e4e:	464c      	mov	r4, r9
 8008e50:	461d      	mov	r5, r3
 8008e52:	9903      	ldr	r1, [sp, #12]
 8008e54:	e7d7      	b.n	8008e06 <__hexnan+0x2e>
 8008e56:	2a29      	cmp	r2, #41	@ 0x29
 8008e58:	d157      	bne.n	8008f0a <__hexnan+0x132>
 8008e5a:	3102      	adds	r1, #2
 8008e5c:	f8ca 1000 	str.w	r1, [sl]
 8008e60:	f1bb 0f00 	cmp.w	fp, #0
 8008e64:	d051      	beq.n	8008f0a <__hexnan+0x132>
 8008e66:	454c      	cmp	r4, r9
 8008e68:	d206      	bcs.n	8008e78 <__hexnan+0xa0>
 8008e6a:	2d07      	cmp	r5, #7
 8008e6c:	dc04      	bgt.n	8008e78 <__hexnan+0xa0>
 8008e6e:	462a      	mov	r2, r5
 8008e70:	4649      	mov	r1, r9
 8008e72:	4620      	mov	r0, r4
 8008e74:	f7ff ff8a 	bl	8008d8c <L_shift>
 8008e78:	4544      	cmp	r4, r8
 8008e7a:	d936      	bls.n	8008eea <__hexnan+0x112>
 8008e7c:	f1a8 0204 	sub.w	r2, r8, #4
 8008e80:	4623      	mov	r3, r4
 8008e82:	f853 1b04 	ldr.w	r1, [r3], #4
 8008e86:	f842 1f04 	str.w	r1, [r2, #4]!
 8008e8a:	429f      	cmp	r7, r3
 8008e8c:	d2f9      	bcs.n	8008e82 <__hexnan+0xaa>
 8008e8e:	1b3b      	subs	r3, r7, r4
 8008e90:	f023 0303 	bic.w	r3, r3, #3
 8008e94:	3304      	adds	r3, #4
 8008e96:	3401      	adds	r4, #1
 8008e98:	3e03      	subs	r6, #3
 8008e9a:	42b4      	cmp	r4, r6
 8008e9c:	bf88      	it	hi
 8008e9e:	2304      	movhi	r3, #4
 8008ea0:	4443      	add	r3, r8
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f843 2b04 	str.w	r2, [r3], #4
 8008ea8:	429f      	cmp	r7, r3
 8008eaa:	d2fb      	bcs.n	8008ea4 <__hexnan+0xcc>
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	b91b      	cbnz	r3, 8008eb8 <__hexnan+0xe0>
 8008eb0:	4547      	cmp	r7, r8
 8008eb2:	d128      	bne.n	8008f06 <__hexnan+0x12e>
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	603b      	str	r3, [r7, #0]
 8008eb8:	2005      	movs	r0, #5
 8008eba:	b007      	add	sp, #28
 8008ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ec0:	3501      	adds	r5, #1
 8008ec2:	2d08      	cmp	r5, #8
 8008ec4:	f10b 0b01 	add.w	fp, fp, #1
 8008ec8:	dd06      	ble.n	8008ed8 <__hexnan+0x100>
 8008eca:	4544      	cmp	r4, r8
 8008ecc:	d9c1      	bls.n	8008e52 <__hexnan+0x7a>
 8008ece:	2300      	movs	r3, #0
 8008ed0:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ed4:	2501      	movs	r5, #1
 8008ed6:	3c04      	subs	r4, #4
 8008ed8:	6822      	ldr	r2, [r4, #0]
 8008eda:	f000 000f 	and.w	r0, r0, #15
 8008ede:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008ee2:	6020      	str	r0, [r4, #0]
 8008ee4:	e7b5      	b.n	8008e52 <__hexnan+0x7a>
 8008ee6:	2508      	movs	r5, #8
 8008ee8:	e7b3      	b.n	8008e52 <__hexnan+0x7a>
 8008eea:	9b01      	ldr	r3, [sp, #4]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d0dd      	beq.n	8008eac <__hexnan+0xd4>
 8008ef0:	f1c3 0320 	rsb	r3, r3, #32
 8008ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ef8:	40da      	lsrs	r2, r3
 8008efa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008efe:	4013      	ands	r3, r2
 8008f00:	f846 3c04 	str.w	r3, [r6, #-4]
 8008f04:	e7d2      	b.n	8008eac <__hexnan+0xd4>
 8008f06:	3f04      	subs	r7, #4
 8008f08:	e7d0      	b.n	8008eac <__hexnan+0xd4>
 8008f0a:	2004      	movs	r0, #4
 8008f0c:	e7d5      	b.n	8008eba <__hexnan+0xe2>

08008f0e <__ascii_mbtowc>:
 8008f0e:	b082      	sub	sp, #8
 8008f10:	b901      	cbnz	r1, 8008f14 <__ascii_mbtowc+0x6>
 8008f12:	a901      	add	r1, sp, #4
 8008f14:	b142      	cbz	r2, 8008f28 <__ascii_mbtowc+0x1a>
 8008f16:	b14b      	cbz	r3, 8008f2c <__ascii_mbtowc+0x1e>
 8008f18:	7813      	ldrb	r3, [r2, #0]
 8008f1a:	600b      	str	r3, [r1, #0]
 8008f1c:	7812      	ldrb	r2, [r2, #0]
 8008f1e:	1e10      	subs	r0, r2, #0
 8008f20:	bf18      	it	ne
 8008f22:	2001      	movne	r0, #1
 8008f24:	b002      	add	sp, #8
 8008f26:	4770      	bx	lr
 8008f28:	4610      	mov	r0, r2
 8008f2a:	e7fb      	b.n	8008f24 <__ascii_mbtowc+0x16>
 8008f2c:	f06f 0001 	mvn.w	r0, #1
 8008f30:	e7f8      	b.n	8008f24 <__ascii_mbtowc+0x16>

08008f32 <_realloc_r>:
 8008f32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f36:	4680      	mov	r8, r0
 8008f38:	4615      	mov	r5, r2
 8008f3a:	460c      	mov	r4, r1
 8008f3c:	b921      	cbnz	r1, 8008f48 <_realloc_r+0x16>
 8008f3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f42:	4611      	mov	r1, r2
 8008f44:	f7fd be60 	b.w	8006c08 <_malloc_r>
 8008f48:	b92a      	cbnz	r2, 8008f56 <_realloc_r+0x24>
 8008f4a:	f7fd fde9 	bl	8006b20 <_free_r>
 8008f4e:	2400      	movs	r4, #0
 8008f50:	4620      	mov	r0, r4
 8008f52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f56:	f000 f840 	bl	8008fda <_malloc_usable_size_r>
 8008f5a:	4285      	cmp	r5, r0
 8008f5c:	4606      	mov	r6, r0
 8008f5e:	d802      	bhi.n	8008f66 <_realloc_r+0x34>
 8008f60:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008f64:	d8f4      	bhi.n	8008f50 <_realloc_r+0x1e>
 8008f66:	4629      	mov	r1, r5
 8008f68:	4640      	mov	r0, r8
 8008f6a:	f7fd fe4d 	bl	8006c08 <_malloc_r>
 8008f6e:	4607      	mov	r7, r0
 8008f70:	2800      	cmp	r0, #0
 8008f72:	d0ec      	beq.n	8008f4e <_realloc_r+0x1c>
 8008f74:	42b5      	cmp	r5, r6
 8008f76:	462a      	mov	r2, r5
 8008f78:	4621      	mov	r1, r4
 8008f7a:	bf28      	it	cs
 8008f7c:	4632      	movcs	r2, r6
 8008f7e:	f7ff fc45 	bl	800880c <memcpy>
 8008f82:	4621      	mov	r1, r4
 8008f84:	4640      	mov	r0, r8
 8008f86:	f7fd fdcb 	bl	8006b20 <_free_r>
 8008f8a:	463c      	mov	r4, r7
 8008f8c:	e7e0      	b.n	8008f50 <_realloc_r+0x1e>

08008f8e <__ascii_wctomb>:
 8008f8e:	4603      	mov	r3, r0
 8008f90:	4608      	mov	r0, r1
 8008f92:	b141      	cbz	r1, 8008fa6 <__ascii_wctomb+0x18>
 8008f94:	2aff      	cmp	r2, #255	@ 0xff
 8008f96:	d904      	bls.n	8008fa2 <__ascii_wctomb+0x14>
 8008f98:	228a      	movs	r2, #138	@ 0x8a
 8008f9a:	601a      	str	r2, [r3, #0]
 8008f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008fa0:	4770      	bx	lr
 8008fa2:	700a      	strb	r2, [r1, #0]
 8008fa4:	2001      	movs	r0, #1
 8008fa6:	4770      	bx	lr

08008fa8 <fiprintf>:
 8008fa8:	b40e      	push	{r1, r2, r3}
 8008faa:	b503      	push	{r0, r1, lr}
 8008fac:	4601      	mov	r1, r0
 8008fae:	ab03      	add	r3, sp, #12
 8008fb0:	4805      	ldr	r0, [pc, #20]	@ (8008fc8 <fiprintf+0x20>)
 8008fb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fb6:	6800      	ldr	r0, [r0, #0]
 8008fb8:	9301      	str	r3, [sp, #4]
 8008fba:	f000 f83f 	bl	800903c <_vfiprintf_r>
 8008fbe:	b002      	add	sp, #8
 8008fc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fc4:	b003      	add	sp, #12
 8008fc6:	4770      	bx	lr
 8008fc8:	20000018 	.word	0x20000018

08008fcc <abort>:
 8008fcc:	b508      	push	{r3, lr}
 8008fce:	2006      	movs	r0, #6
 8008fd0:	f000 fa08 	bl	80093e4 <raise>
 8008fd4:	2001      	movs	r0, #1
 8008fd6:	f7f8 faf6 	bl	80015c6 <_exit>

08008fda <_malloc_usable_size_r>:
 8008fda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fde:	1f18      	subs	r0, r3, #4
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	bfbc      	itt	lt
 8008fe4:	580b      	ldrlt	r3, [r1, r0]
 8008fe6:	18c0      	addlt	r0, r0, r3
 8008fe8:	4770      	bx	lr

08008fea <__sfputc_r>:
 8008fea:	6893      	ldr	r3, [r2, #8]
 8008fec:	3b01      	subs	r3, #1
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	b410      	push	{r4}
 8008ff2:	6093      	str	r3, [r2, #8]
 8008ff4:	da08      	bge.n	8009008 <__sfputc_r+0x1e>
 8008ff6:	6994      	ldr	r4, [r2, #24]
 8008ff8:	42a3      	cmp	r3, r4
 8008ffa:	db01      	blt.n	8009000 <__sfputc_r+0x16>
 8008ffc:	290a      	cmp	r1, #10
 8008ffe:	d103      	bne.n	8009008 <__sfputc_r+0x1e>
 8009000:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009004:	f000 b932 	b.w	800926c <__swbuf_r>
 8009008:	6813      	ldr	r3, [r2, #0]
 800900a:	1c58      	adds	r0, r3, #1
 800900c:	6010      	str	r0, [r2, #0]
 800900e:	7019      	strb	r1, [r3, #0]
 8009010:	4608      	mov	r0, r1
 8009012:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009016:	4770      	bx	lr

08009018 <__sfputs_r>:
 8009018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800901a:	4606      	mov	r6, r0
 800901c:	460f      	mov	r7, r1
 800901e:	4614      	mov	r4, r2
 8009020:	18d5      	adds	r5, r2, r3
 8009022:	42ac      	cmp	r4, r5
 8009024:	d101      	bne.n	800902a <__sfputs_r+0x12>
 8009026:	2000      	movs	r0, #0
 8009028:	e007      	b.n	800903a <__sfputs_r+0x22>
 800902a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800902e:	463a      	mov	r2, r7
 8009030:	4630      	mov	r0, r6
 8009032:	f7ff ffda 	bl	8008fea <__sfputc_r>
 8009036:	1c43      	adds	r3, r0, #1
 8009038:	d1f3      	bne.n	8009022 <__sfputs_r+0xa>
 800903a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800903c <_vfiprintf_r>:
 800903c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009040:	460d      	mov	r5, r1
 8009042:	b09d      	sub	sp, #116	@ 0x74
 8009044:	4614      	mov	r4, r2
 8009046:	4698      	mov	r8, r3
 8009048:	4606      	mov	r6, r0
 800904a:	b118      	cbz	r0, 8009054 <_vfiprintf_r+0x18>
 800904c:	6a03      	ldr	r3, [r0, #32]
 800904e:	b90b      	cbnz	r3, 8009054 <_vfiprintf_r+0x18>
 8009050:	f7fc fdfa 	bl	8005c48 <__sinit>
 8009054:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009056:	07d9      	lsls	r1, r3, #31
 8009058:	d405      	bmi.n	8009066 <_vfiprintf_r+0x2a>
 800905a:	89ab      	ldrh	r3, [r5, #12]
 800905c:	059a      	lsls	r2, r3, #22
 800905e:	d402      	bmi.n	8009066 <_vfiprintf_r+0x2a>
 8009060:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009062:	f7fc ff08 	bl	8005e76 <__retarget_lock_acquire_recursive>
 8009066:	89ab      	ldrh	r3, [r5, #12]
 8009068:	071b      	lsls	r3, r3, #28
 800906a:	d501      	bpl.n	8009070 <_vfiprintf_r+0x34>
 800906c:	692b      	ldr	r3, [r5, #16]
 800906e:	b99b      	cbnz	r3, 8009098 <_vfiprintf_r+0x5c>
 8009070:	4629      	mov	r1, r5
 8009072:	4630      	mov	r0, r6
 8009074:	f000 f938 	bl	80092e8 <__swsetup_r>
 8009078:	b170      	cbz	r0, 8009098 <_vfiprintf_r+0x5c>
 800907a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800907c:	07dc      	lsls	r4, r3, #31
 800907e:	d504      	bpl.n	800908a <_vfiprintf_r+0x4e>
 8009080:	f04f 30ff 	mov.w	r0, #4294967295
 8009084:	b01d      	add	sp, #116	@ 0x74
 8009086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800908a:	89ab      	ldrh	r3, [r5, #12]
 800908c:	0598      	lsls	r0, r3, #22
 800908e:	d4f7      	bmi.n	8009080 <_vfiprintf_r+0x44>
 8009090:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009092:	f7fc fef1 	bl	8005e78 <__retarget_lock_release_recursive>
 8009096:	e7f3      	b.n	8009080 <_vfiprintf_r+0x44>
 8009098:	2300      	movs	r3, #0
 800909a:	9309      	str	r3, [sp, #36]	@ 0x24
 800909c:	2320      	movs	r3, #32
 800909e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80090a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80090a6:	2330      	movs	r3, #48	@ 0x30
 80090a8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009258 <_vfiprintf_r+0x21c>
 80090ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80090b0:	f04f 0901 	mov.w	r9, #1
 80090b4:	4623      	mov	r3, r4
 80090b6:	469a      	mov	sl, r3
 80090b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090bc:	b10a      	cbz	r2, 80090c2 <_vfiprintf_r+0x86>
 80090be:	2a25      	cmp	r2, #37	@ 0x25
 80090c0:	d1f9      	bne.n	80090b6 <_vfiprintf_r+0x7a>
 80090c2:	ebba 0b04 	subs.w	fp, sl, r4
 80090c6:	d00b      	beq.n	80090e0 <_vfiprintf_r+0xa4>
 80090c8:	465b      	mov	r3, fp
 80090ca:	4622      	mov	r2, r4
 80090cc:	4629      	mov	r1, r5
 80090ce:	4630      	mov	r0, r6
 80090d0:	f7ff ffa2 	bl	8009018 <__sfputs_r>
 80090d4:	3001      	adds	r0, #1
 80090d6:	f000 80a7 	beq.w	8009228 <_vfiprintf_r+0x1ec>
 80090da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090dc:	445a      	add	r2, fp
 80090de:	9209      	str	r2, [sp, #36]	@ 0x24
 80090e0:	f89a 3000 	ldrb.w	r3, [sl]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	f000 809f 	beq.w	8009228 <_vfiprintf_r+0x1ec>
 80090ea:	2300      	movs	r3, #0
 80090ec:	f04f 32ff 	mov.w	r2, #4294967295
 80090f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090f4:	f10a 0a01 	add.w	sl, sl, #1
 80090f8:	9304      	str	r3, [sp, #16]
 80090fa:	9307      	str	r3, [sp, #28]
 80090fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009100:	931a      	str	r3, [sp, #104]	@ 0x68
 8009102:	4654      	mov	r4, sl
 8009104:	2205      	movs	r2, #5
 8009106:	f814 1b01 	ldrb.w	r1, [r4], #1
 800910a:	4853      	ldr	r0, [pc, #332]	@ (8009258 <_vfiprintf_r+0x21c>)
 800910c:	f7f7 f860 	bl	80001d0 <memchr>
 8009110:	9a04      	ldr	r2, [sp, #16]
 8009112:	b9d8      	cbnz	r0, 800914c <_vfiprintf_r+0x110>
 8009114:	06d1      	lsls	r1, r2, #27
 8009116:	bf44      	itt	mi
 8009118:	2320      	movmi	r3, #32
 800911a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800911e:	0713      	lsls	r3, r2, #28
 8009120:	bf44      	itt	mi
 8009122:	232b      	movmi	r3, #43	@ 0x2b
 8009124:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009128:	f89a 3000 	ldrb.w	r3, [sl]
 800912c:	2b2a      	cmp	r3, #42	@ 0x2a
 800912e:	d015      	beq.n	800915c <_vfiprintf_r+0x120>
 8009130:	9a07      	ldr	r2, [sp, #28]
 8009132:	4654      	mov	r4, sl
 8009134:	2000      	movs	r0, #0
 8009136:	f04f 0c0a 	mov.w	ip, #10
 800913a:	4621      	mov	r1, r4
 800913c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009140:	3b30      	subs	r3, #48	@ 0x30
 8009142:	2b09      	cmp	r3, #9
 8009144:	d94b      	bls.n	80091de <_vfiprintf_r+0x1a2>
 8009146:	b1b0      	cbz	r0, 8009176 <_vfiprintf_r+0x13a>
 8009148:	9207      	str	r2, [sp, #28]
 800914a:	e014      	b.n	8009176 <_vfiprintf_r+0x13a>
 800914c:	eba0 0308 	sub.w	r3, r0, r8
 8009150:	fa09 f303 	lsl.w	r3, r9, r3
 8009154:	4313      	orrs	r3, r2
 8009156:	9304      	str	r3, [sp, #16]
 8009158:	46a2      	mov	sl, r4
 800915a:	e7d2      	b.n	8009102 <_vfiprintf_r+0xc6>
 800915c:	9b03      	ldr	r3, [sp, #12]
 800915e:	1d19      	adds	r1, r3, #4
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	9103      	str	r1, [sp, #12]
 8009164:	2b00      	cmp	r3, #0
 8009166:	bfbb      	ittet	lt
 8009168:	425b      	neglt	r3, r3
 800916a:	f042 0202 	orrlt.w	r2, r2, #2
 800916e:	9307      	strge	r3, [sp, #28]
 8009170:	9307      	strlt	r3, [sp, #28]
 8009172:	bfb8      	it	lt
 8009174:	9204      	strlt	r2, [sp, #16]
 8009176:	7823      	ldrb	r3, [r4, #0]
 8009178:	2b2e      	cmp	r3, #46	@ 0x2e
 800917a:	d10a      	bne.n	8009192 <_vfiprintf_r+0x156>
 800917c:	7863      	ldrb	r3, [r4, #1]
 800917e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009180:	d132      	bne.n	80091e8 <_vfiprintf_r+0x1ac>
 8009182:	9b03      	ldr	r3, [sp, #12]
 8009184:	1d1a      	adds	r2, r3, #4
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	9203      	str	r2, [sp, #12]
 800918a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800918e:	3402      	adds	r4, #2
 8009190:	9305      	str	r3, [sp, #20]
 8009192:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009268 <_vfiprintf_r+0x22c>
 8009196:	7821      	ldrb	r1, [r4, #0]
 8009198:	2203      	movs	r2, #3
 800919a:	4650      	mov	r0, sl
 800919c:	f7f7 f818 	bl	80001d0 <memchr>
 80091a0:	b138      	cbz	r0, 80091b2 <_vfiprintf_r+0x176>
 80091a2:	9b04      	ldr	r3, [sp, #16]
 80091a4:	eba0 000a 	sub.w	r0, r0, sl
 80091a8:	2240      	movs	r2, #64	@ 0x40
 80091aa:	4082      	lsls	r2, r0
 80091ac:	4313      	orrs	r3, r2
 80091ae:	3401      	adds	r4, #1
 80091b0:	9304      	str	r3, [sp, #16]
 80091b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091b6:	4829      	ldr	r0, [pc, #164]	@ (800925c <_vfiprintf_r+0x220>)
 80091b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80091bc:	2206      	movs	r2, #6
 80091be:	f7f7 f807 	bl	80001d0 <memchr>
 80091c2:	2800      	cmp	r0, #0
 80091c4:	d03f      	beq.n	8009246 <_vfiprintf_r+0x20a>
 80091c6:	4b26      	ldr	r3, [pc, #152]	@ (8009260 <_vfiprintf_r+0x224>)
 80091c8:	bb1b      	cbnz	r3, 8009212 <_vfiprintf_r+0x1d6>
 80091ca:	9b03      	ldr	r3, [sp, #12]
 80091cc:	3307      	adds	r3, #7
 80091ce:	f023 0307 	bic.w	r3, r3, #7
 80091d2:	3308      	adds	r3, #8
 80091d4:	9303      	str	r3, [sp, #12]
 80091d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091d8:	443b      	add	r3, r7
 80091da:	9309      	str	r3, [sp, #36]	@ 0x24
 80091dc:	e76a      	b.n	80090b4 <_vfiprintf_r+0x78>
 80091de:	fb0c 3202 	mla	r2, ip, r2, r3
 80091e2:	460c      	mov	r4, r1
 80091e4:	2001      	movs	r0, #1
 80091e6:	e7a8      	b.n	800913a <_vfiprintf_r+0xfe>
 80091e8:	2300      	movs	r3, #0
 80091ea:	3401      	adds	r4, #1
 80091ec:	9305      	str	r3, [sp, #20]
 80091ee:	4619      	mov	r1, r3
 80091f0:	f04f 0c0a 	mov.w	ip, #10
 80091f4:	4620      	mov	r0, r4
 80091f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091fa:	3a30      	subs	r2, #48	@ 0x30
 80091fc:	2a09      	cmp	r2, #9
 80091fe:	d903      	bls.n	8009208 <_vfiprintf_r+0x1cc>
 8009200:	2b00      	cmp	r3, #0
 8009202:	d0c6      	beq.n	8009192 <_vfiprintf_r+0x156>
 8009204:	9105      	str	r1, [sp, #20]
 8009206:	e7c4      	b.n	8009192 <_vfiprintf_r+0x156>
 8009208:	fb0c 2101 	mla	r1, ip, r1, r2
 800920c:	4604      	mov	r4, r0
 800920e:	2301      	movs	r3, #1
 8009210:	e7f0      	b.n	80091f4 <_vfiprintf_r+0x1b8>
 8009212:	ab03      	add	r3, sp, #12
 8009214:	9300      	str	r3, [sp, #0]
 8009216:	462a      	mov	r2, r5
 8009218:	4b12      	ldr	r3, [pc, #72]	@ (8009264 <_vfiprintf_r+0x228>)
 800921a:	a904      	add	r1, sp, #16
 800921c:	4630      	mov	r0, r6
 800921e:	f7fb febb 	bl	8004f98 <_printf_float>
 8009222:	4607      	mov	r7, r0
 8009224:	1c78      	adds	r0, r7, #1
 8009226:	d1d6      	bne.n	80091d6 <_vfiprintf_r+0x19a>
 8009228:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800922a:	07d9      	lsls	r1, r3, #31
 800922c:	d405      	bmi.n	800923a <_vfiprintf_r+0x1fe>
 800922e:	89ab      	ldrh	r3, [r5, #12]
 8009230:	059a      	lsls	r2, r3, #22
 8009232:	d402      	bmi.n	800923a <_vfiprintf_r+0x1fe>
 8009234:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009236:	f7fc fe1f 	bl	8005e78 <__retarget_lock_release_recursive>
 800923a:	89ab      	ldrh	r3, [r5, #12]
 800923c:	065b      	lsls	r3, r3, #25
 800923e:	f53f af1f 	bmi.w	8009080 <_vfiprintf_r+0x44>
 8009242:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009244:	e71e      	b.n	8009084 <_vfiprintf_r+0x48>
 8009246:	ab03      	add	r3, sp, #12
 8009248:	9300      	str	r3, [sp, #0]
 800924a:	462a      	mov	r2, r5
 800924c:	4b05      	ldr	r3, [pc, #20]	@ (8009264 <_vfiprintf_r+0x228>)
 800924e:	a904      	add	r1, sp, #16
 8009250:	4630      	mov	r0, r6
 8009252:	f7fc f939 	bl	80054c8 <_printf_i>
 8009256:	e7e4      	b.n	8009222 <_vfiprintf_r+0x1e6>
 8009258:	08009919 	.word	0x08009919
 800925c:	08009923 	.word	0x08009923
 8009260:	08004f99 	.word	0x08004f99
 8009264:	08009019 	.word	0x08009019
 8009268:	0800991f 	.word	0x0800991f

0800926c <__swbuf_r>:
 800926c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800926e:	460e      	mov	r6, r1
 8009270:	4614      	mov	r4, r2
 8009272:	4605      	mov	r5, r0
 8009274:	b118      	cbz	r0, 800927e <__swbuf_r+0x12>
 8009276:	6a03      	ldr	r3, [r0, #32]
 8009278:	b90b      	cbnz	r3, 800927e <__swbuf_r+0x12>
 800927a:	f7fc fce5 	bl	8005c48 <__sinit>
 800927e:	69a3      	ldr	r3, [r4, #24]
 8009280:	60a3      	str	r3, [r4, #8]
 8009282:	89a3      	ldrh	r3, [r4, #12]
 8009284:	071a      	lsls	r2, r3, #28
 8009286:	d501      	bpl.n	800928c <__swbuf_r+0x20>
 8009288:	6923      	ldr	r3, [r4, #16]
 800928a:	b943      	cbnz	r3, 800929e <__swbuf_r+0x32>
 800928c:	4621      	mov	r1, r4
 800928e:	4628      	mov	r0, r5
 8009290:	f000 f82a 	bl	80092e8 <__swsetup_r>
 8009294:	b118      	cbz	r0, 800929e <__swbuf_r+0x32>
 8009296:	f04f 37ff 	mov.w	r7, #4294967295
 800929a:	4638      	mov	r0, r7
 800929c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800929e:	6823      	ldr	r3, [r4, #0]
 80092a0:	6922      	ldr	r2, [r4, #16]
 80092a2:	1a98      	subs	r0, r3, r2
 80092a4:	6963      	ldr	r3, [r4, #20]
 80092a6:	b2f6      	uxtb	r6, r6
 80092a8:	4283      	cmp	r3, r0
 80092aa:	4637      	mov	r7, r6
 80092ac:	dc05      	bgt.n	80092ba <__swbuf_r+0x4e>
 80092ae:	4621      	mov	r1, r4
 80092b0:	4628      	mov	r0, r5
 80092b2:	f7ff fa47 	bl	8008744 <_fflush_r>
 80092b6:	2800      	cmp	r0, #0
 80092b8:	d1ed      	bne.n	8009296 <__swbuf_r+0x2a>
 80092ba:	68a3      	ldr	r3, [r4, #8]
 80092bc:	3b01      	subs	r3, #1
 80092be:	60a3      	str	r3, [r4, #8]
 80092c0:	6823      	ldr	r3, [r4, #0]
 80092c2:	1c5a      	adds	r2, r3, #1
 80092c4:	6022      	str	r2, [r4, #0]
 80092c6:	701e      	strb	r6, [r3, #0]
 80092c8:	6962      	ldr	r2, [r4, #20]
 80092ca:	1c43      	adds	r3, r0, #1
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d004      	beq.n	80092da <__swbuf_r+0x6e>
 80092d0:	89a3      	ldrh	r3, [r4, #12]
 80092d2:	07db      	lsls	r3, r3, #31
 80092d4:	d5e1      	bpl.n	800929a <__swbuf_r+0x2e>
 80092d6:	2e0a      	cmp	r6, #10
 80092d8:	d1df      	bne.n	800929a <__swbuf_r+0x2e>
 80092da:	4621      	mov	r1, r4
 80092dc:	4628      	mov	r0, r5
 80092de:	f7ff fa31 	bl	8008744 <_fflush_r>
 80092e2:	2800      	cmp	r0, #0
 80092e4:	d0d9      	beq.n	800929a <__swbuf_r+0x2e>
 80092e6:	e7d6      	b.n	8009296 <__swbuf_r+0x2a>

080092e8 <__swsetup_r>:
 80092e8:	b538      	push	{r3, r4, r5, lr}
 80092ea:	4b29      	ldr	r3, [pc, #164]	@ (8009390 <__swsetup_r+0xa8>)
 80092ec:	4605      	mov	r5, r0
 80092ee:	6818      	ldr	r0, [r3, #0]
 80092f0:	460c      	mov	r4, r1
 80092f2:	b118      	cbz	r0, 80092fc <__swsetup_r+0x14>
 80092f4:	6a03      	ldr	r3, [r0, #32]
 80092f6:	b90b      	cbnz	r3, 80092fc <__swsetup_r+0x14>
 80092f8:	f7fc fca6 	bl	8005c48 <__sinit>
 80092fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009300:	0719      	lsls	r1, r3, #28
 8009302:	d422      	bmi.n	800934a <__swsetup_r+0x62>
 8009304:	06da      	lsls	r2, r3, #27
 8009306:	d407      	bmi.n	8009318 <__swsetup_r+0x30>
 8009308:	2209      	movs	r2, #9
 800930a:	602a      	str	r2, [r5, #0]
 800930c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009310:	81a3      	strh	r3, [r4, #12]
 8009312:	f04f 30ff 	mov.w	r0, #4294967295
 8009316:	e033      	b.n	8009380 <__swsetup_r+0x98>
 8009318:	0758      	lsls	r0, r3, #29
 800931a:	d512      	bpl.n	8009342 <__swsetup_r+0x5a>
 800931c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800931e:	b141      	cbz	r1, 8009332 <__swsetup_r+0x4a>
 8009320:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009324:	4299      	cmp	r1, r3
 8009326:	d002      	beq.n	800932e <__swsetup_r+0x46>
 8009328:	4628      	mov	r0, r5
 800932a:	f7fd fbf9 	bl	8006b20 <_free_r>
 800932e:	2300      	movs	r3, #0
 8009330:	6363      	str	r3, [r4, #52]	@ 0x34
 8009332:	89a3      	ldrh	r3, [r4, #12]
 8009334:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009338:	81a3      	strh	r3, [r4, #12]
 800933a:	2300      	movs	r3, #0
 800933c:	6063      	str	r3, [r4, #4]
 800933e:	6923      	ldr	r3, [r4, #16]
 8009340:	6023      	str	r3, [r4, #0]
 8009342:	89a3      	ldrh	r3, [r4, #12]
 8009344:	f043 0308 	orr.w	r3, r3, #8
 8009348:	81a3      	strh	r3, [r4, #12]
 800934a:	6923      	ldr	r3, [r4, #16]
 800934c:	b94b      	cbnz	r3, 8009362 <__swsetup_r+0x7a>
 800934e:	89a3      	ldrh	r3, [r4, #12]
 8009350:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009354:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009358:	d003      	beq.n	8009362 <__swsetup_r+0x7a>
 800935a:	4621      	mov	r1, r4
 800935c:	4628      	mov	r0, r5
 800935e:	f000 f883 	bl	8009468 <__smakebuf_r>
 8009362:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009366:	f013 0201 	ands.w	r2, r3, #1
 800936a:	d00a      	beq.n	8009382 <__swsetup_r+0x9a>
 800936c:	2200      	movs	r2, #0
 800936e:	60a2      	str	r2, [r4, #8]
 8009370:	6962      	ldr	r2, [r4, #20]
 8009372:	4252      	negs	r2, r2
 8009374:	61a2      	str	r2, [r4, #24]
 8009376:	6922      	ldr	r2, [r4, #16]
 8009378:	b942      	cbnz	r2, 800938c <__swsetup_r+0xa4>
 800937a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800937e:	d1c5      	bne.n	800930c <__swsetup_r+0x24>
 8009380:	bd38      	pop	{r3, r4, r5, pc}
 8009382:	0799      	lsls	r1, r3, #30
 8009384:	bf58      	it	pl
 8009386:	6962      	ldrpl	r2, [r4, #20]
 8009388:	60a2      	str	r2, [r4, #8]
 800938a:	e7f4      	b.n	8009376 <__swsetup_r+0x8e>
 800938c:	2000      	movs	r0, #0
 800938e:	e7f7      	b.n	8009380 <__swsetup_r+0x98>
 8009390:	20000018 	.word	0x20000018

08009394 <_raise_r>:
 8009394:	291f      	cmp	r1, #31
 8009396:	b538      	push	{r3, r4, r5, lr}
 8009398:	4605      	mov	r5, r0
 800939a:	460c      	mov	r4, r1
 800939c:	d904      	bls.n	80093a8 <_raise_r+0x14>
 800939e:	2316      	movs	r3, #22
 80093a0:	6003      	str	r3, [r0, #0]
 80093a2:	f04f 30ff 	mov.w	r0, #4294967295
 80093a6:	bd38      	pop	{r3, r4, r5, pc}
 80093a8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80093aa:	b112      	cbz	r2, 80093b2 <_raise_r+0x1e>
 80093ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80093b0:	b94b      	cbnz	r3, 80093c6 <_raise_r+0x32>
 80093b2:	4628      	mov	r0, r5
 80093b4:	f000 f830 	bl	8009418 <_getpid_r>
 80093b8:	4622      	mov	r2, r4
 80093ba:	4601      	mov	r1, r0
 80093bc:	4628      	mov	r0, r5
 80093be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093c2:	f000 b817 	b.w	80093f4 <_kill_r>
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d00a      	beq.n	80093e0 <_raise_r+0x4c>
 80093ca:	1c59      	adds	r1, r3, #1
 80093cc:	d103      	bne.n	80093d6 <_raise_r+0x42>
 80093ce:	2316      	movs	r3, #22
 80093d0:	6003      	str	r3, [r0, #0]
 80093d2:	2001      	movs	r0, #1
 80093d4:	e7e7      	b.n	80093a6 <_raise_r+0x12>
 80093d6:	2100      	movs	r1, #0
 80093d8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80093dc:	4620      	mov	r0, r4
 80093de:	4798      	blx	r3
 80093e0:	2000      	movs	r0, #0
 80093e2:	e7e0      	b.n	80093a6 <_raise_r+0x12>

080093e4 <raise>:
 80093e4:	4b02      	ldr	r3, [pc, #8]	@ (80093f0 <raise+0xc>)
 80093e6:	4601      	mov	r1, r0
 80093e8:	6818      	ldr	r0, [r3, #0]
 80093ea:	f7ff bfd3 	b.w	8009394 <_raise_r>
 80093ee:	bf00      	nop
 80093f0:	20000018 	.word	0x20000018

080093f4 <_kill_r>:
 80093f4:	b538      	push	{r3, r4, r5, lr}
 80093f6:	4d07      	ldr	r5, [pc, #28]	@ (8009414 <_kill_r+0x20>)
 80093f8:	2300      	movs	r3, #0
 80093fa:	4604      	mov	r4, r0
 80093fc:	4608      	mov	r0, r1
 80093fe:	4611      	mov	r1, r2
 8009400:	602b      	str	r3, [r5, #0]
 8009402:	f7f8 f8d0 	bl	80015a6 <_kill>
 8009406:	1c43      	adds	r3, r0, #1
 8009408:	d102      	bne.n	8009410 <_kill_r+0x1c>
 800940a:	682b      	ldr	r3, [r5, #0]
 800940c:	b103      	cbz	r3, 8009410 <_kill_r+0x1c>
 800940e:	6023      	str	r3, [r4, #0]
 8009410:	bd38      	pop	{r3, r4, r5, pc}
 8009412:	bf00      	nop
 8009414:	2000059c 	.word	0x2000059c

08009418 <_getpid_r>:
 8009418:	f7f8 b8bd 	b.w	8001596 <_getpid>

0800941c <__swhatbuf_r>:
 800941c:	b570      	push	{r4, r5, r6, lr}
 800941e:	460c      	mov	r4, r1
 8009420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009424:	2900      	cmp	r1, #0
 8009426:	b096      	sub	sp, #88	@ 0x58
 8009428:	4615      	mov	r5, r2
 800942a:	461e      	mov	r6, r3
 800942c:	da0d      	bge.n	800944a <__swhatbuf_r+0x2e>
 800942e:	89a3      	ldrh	r3, [r4, #12]
 8009430:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009434:	f04f 0100 	mov.w	r1, #0
 8009438:	bf14      	ite	ne
 800943a:	2340      	movne	r3, #64	@ 0x40
 800943c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009440:	2000      	movs	r0, #0
 8009442:	6031      	str	r1, [r6, #0]
 8009444:	602b      	str	r3, [r5, #0]
 8009446:	b016      	add	sp, #88	@ 0x58
 8009448:	bd70      	pop	{r4, r5, r6, pc}
 800944a:	466a      	mov	r2, sp
 800944c:	f000 f848 	bl	80094e0 <_fstat_r>
 8009450:	2800      	cmp	r0, #0
 8009452:	dbec      	blt.n	800942e <__swhatbuf_r+0x12>
 8009454:	9901      	ldr	r1, [sp, #4]
 8009456:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800945a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800945e:	4259      	negs	r1, r3
 8009460:	4159      	adcs	r1, r3
 8009462:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009466:	e7eb      	b.n	8009440 <__swhatbuf_r+0x24>

08009468 <__smakebuf_r>:
 8009468:	898b      	ldrh	r3, [r1, #12]
 800946a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800946c:	079d      	lsls	r5, r3, #30
 800946e:	4606      	mov	r6, r0
 8009470:	460c      	mov	r4, r1
 8009472:	d507      	bpl.n	8009484 <__smakebuf_r+0x1c>
 8009474:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009478:	6023      	str	r3, [r4, #0]
 800947a:	6123      	str	r3, [r4, #16]
 800947c:	2301      	movs	r3, #1
 800947e:	6163      	str	r3, [r4, #20]
 8009480:	b003      	add	sp, #12
 8009482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009484:	ab01      	add	r3, sp, #4
 8009486:	466a      	mov	r2, sp
 8009488:	f7ff ffc8 	bl	800941c <__swhatbuf_r>
 800948c:	9f00      	ldr	r7, [sp, #0]
 800948e:	4605      	mov	r5, r0
 8009490:	4639      	mov	r1, r7
 8009492:	4630      	mov	r0, r6
 8009494:	f7fd fbb8 	bl	8006c08 <_malloc_r>
 8009498:	b948      	cbnz	r0, 80094ae <__smakebuf_r+0x46>
 800949a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800949e:	059a      	lsls	r2, r3, #22
 80094a0:	d4ee      	bmi.n	8009480 <__smakebuf_r+0x18>
 80094a2:	f023 0303 	bic.w	r3, r3, #3
 80094a6:	f043 0302 	orr.w	r3, r3, #2
 80094aa:	81a3      	strh	r3, [r4, #12]
 80094ac:	e7e2      	b.n	8009474 <__smakebuf_r+0xc>
 80094ae:	89a3      	ldrh	r3, [r4, #12]
 80094b0:	6020      	str	r0, [r4, #0]
 80094b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094b6:	81a3      	strh	r3, [r4, #12]
 80094b8:	9b01      	ldr	r3, [sp, #4]
 80094ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80094be:	b15b      	cbz	r3, 80094d8 <__smakebuf_r+0x70>
 80094c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094c4:	4630      	mov	r0, r6
 80094c6:	f000 f81d 	bl	8009504 <_isatty_r>
 80094ca:	b128      	cbz	r0, 80094d8 <__smakebuf_r+0x70>
 80094cc:	89a3      	ldrh	r3, [r4, #12]
 80094ce:	f023 0303 	bic.w	r3, r3, #3
 80094d2:	f043 0301 	orr.w	r3, r3, #1
 80094d6:	81a3      	strh	r3, [r4, #12]
 80094d8:	89a3      	ldrh	r3, [r4, #12]
 80094da:	431d      	orrs	r5, r3
 80094dc:	81a5      	strh	r5, [r4, #12]
 80094de:	e7cf      	b.n	8009480 <__smakebuf_r+0x18>

080094e0 <_fstat_r>:
 80094e0:	b538      	push	{r3, r4, r5, lr}
 80094e2:	4d07      	ldr	r5, [pc, #28]	@ (8009500 <_fstat_r+0x20>)
 80094e4:	2300      	movs	r3, #0
 80094e6:	4604      	mov	r4, r0
 80094e8:	4608      	mov	r0, r1
 80094ea:	4611      	mov	r1, r2
 80094ec:	602b      	str	r3, [r5, #0]
 80094ee:	f7f8 f8ba 	bl	8001666 <_fstat>
 80094f2:	1c43      	adds	r3, r0, #1
 80094f4:	d102      	bne.n	80094fc <_fstat_r+0x1c>
 80094f6:	682b      	ldr	r3, [r5, #0]
 80094f8:	b103      	cbz	r3, 80094fc <_fstat_r+0x1c>
 80094fa:	6023      	str	r3, [r4, #0]
 80094fc:	bd38      	pop	{r3, r4, r5, pc}
 80094fe:	bf00      	nop
 8009500:	2000059c 	.word	0x2000059c

08009504 <_isatty_r>:
 8009504:	b538      	push	{r3, r4, r5, lr}
 8009506:	4d06      	ldr	r5, [pc, #24]	@ (8009520 <_isatty_r+0x1c>)
 8009508:	2300      	movs	r3, #0
 800950a:	4604      	mov	r4, r0
 800950c:	4608      	mov	r0, r1
 800950e:	602b      	str	r3, [r5, #0]
 8009510:	f7f8 f8b9 	bl	8001686 <_isatty>
 8009514:	1c43      	adds	r3, r0, #1
 8009516:	d102      	bne.n	800951e <_isatty_r+0x1a>
 8009518:	682b      	ldr	r3, [r5, #0]
 800951a:	b103      	cbz	r3, 800951e <_isatty_r+0x1a>
 800951c:	6023      	str	r3, [r4, #0]
 800951e:	bd38      	pop	{r3, r4, r5, pc}
 8009520:	2000059c 	.word	0x2000059c

08009524 <_init>:
 8009524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009526:	bf00      	nop
 8009528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800952a:	bc08      	pop	{r3}
 800952c:	469e      	mov	lr, r3
 800952e:	4770      	bx	lr

08009530 <_fini>:
 8009530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009532:	bf00      	nop
 8009534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009536:	bc08      	pop	{r3}
 8009538:	469e      	mov	lr, r3
 800953a:	4770      	bx	lr
