
HAL-servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d18  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08004ea0  08004ea0  00005ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ef8  08004ef8  0000605c  2**0
                  CONTENTS
  4 .ARM          00000000  08004ef8  08004ef8  0000605c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ef8  08004ef8  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ef8  08004ef8  00005ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004efc  08004efc  00005efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004f00  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          00000588  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005e4  200005e4  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013afd  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d30  00000000  00000000  00019b89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001268  00000000  00000000  0001c8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e3c  00000000  00000000  0001db28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f54c  00000000  00000000  0001e964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017622  00000000  00000000  0003deb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b9e2f  00000000  00000000  000554d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010f301  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000507c  00000000  00000000  0010f344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  001143c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004e88 	.word	0x08004e88

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08004e88 	.word	0x08004e88

080001c8 <touch_pad_handler>:
}



doorManagerObj *manager;
void touch_pad_handler(uint8_t pin_index){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
	door_manager_set_enslaved(manager, pin_index);
 80001d2:	4b05      	ldr	r3, [pc, #20]	@ (80001e8 <touch_pad_handler+0x20>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	79fa      	ldrb	r2, [r7, #7]
 80001d8:	4611      	mov	r1, r2
 80001da:	4618      	mov	r0, r3
 80001dc:	f000 ff70 	bl	80010c0 <door_manager_set_enslaved>
	return;
 80001e0:	bf00      	nop
}
 80001e2:	3708      	adds	r7, #8
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bd80      	pop	{r7, pc}
 80001e8:	20000450 	.word	0x20000450

080001ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b08a      	sub	sp, #40	@ 0x28
 80001f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f2:	f001 fad1 	bl	8001798 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f6:	f000 f89d 	bl	8000334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001fa:	f000 f9f7 	bl	80005ec <MX_GPIO_Init>
  MX_I2C1_Init();
 80001fe:	f000 f8fb 	bl	80003f8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000202:	f000 f939 	bl	8000478 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000206:	f000 f9cf 	bl	80005a8 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 800020a:	f000 f973 	bl	80004f4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */




  GPIO *touch_pads = init_port(C, INPUT, 0, 2);
 800020e:	2302      	movs	r3, #2
 8000210:	2200      	movs	r2, #0
 8000212:	2100      	movs	r1, #0
 8000214:	2002      	movs	r0, #2
 8000216:	f000 fc89 	bl	8000b2c <init_port>
 800021a:	61b8      	str	r0, [r7, #24]
  //Enable interupts for each of the touchpads
  //(all share a single callback function that is passed the index appropriate pin) (see GPIO.c)
  for (int i=0; i<2; i++){
 800021c:	2300      	movs	r3, #0
 800021e:	61fb      	str	r3, [r7, #28]
 8000220:	e00b      	b.n	800023a <main+0x4e>
	  enable_interupt(touch_pads, i,
 8000222:	69fb      	ldr	r3, [r7, #28]
 8000224:	b2d9      	uxtb	r1, r3
 8000226:	4b3d      	ldr	r3, [pc, #244]	@ (800031c <main+0x130>)
 8000228:	9300      	str	r3, [sp, #0]
 800022a:	2300      	movs	r3, #0
 800022c:	2200      	movs	r2, #0
 800022e:	69b8      	ldr	r0, [r7, #24]
 8000230:	f000 fe70 	bl	8000f14 <enable_interupt>
  for (int i=0; i<2; i++){
 8000234:	69fb      	ldr	r3, [r7, #28]
 8000236:	3301      	adds	r3, #1
 8000238:	61fb      	str	r3, [r7, #28]
 800023a:	69fb      	ldr	r3, [r7, #28]
 800023c:	2b01      	cmp	r3, #1
 800023e:	ddf0      	ble.n	8000222 <main+0x36>
  }




  GPIO *pot = init_port(A, ANALOG, 4, 6);
 8000240:	2306      	movs	r3, #6
 8000242:	2204      	movs	r2, #4
 8000244:	2102      	movs	r1, #2
 8000246:	2000      	movs	r0, #0
 8000248:	f000 fc70 	bl	8000b2c <init_port>
 800024c:	6178      	str	r0, [r7, #20]
  uint16_t analog_out[2];



  //Init servo-driver
  servoDriverObj *driver = init_servo_driver(0x40);
 800024e:	2040      	movs	r0, #64	@ 0x40
 8000250:	f001 f86e 	bl	8001330 <init_servo_driver>
 8000254:	6138      	str	r0, [r7, #16]


  float master_angle = 0.0f;
 8000256:	f04f 0300 	mov.w	r3, #0
 800025a:	603b      	str	r3, [r7, #0]
  //manager was initialized eariler (for touch_pad handler to reference)
  manager = init_door_manager(8, &master_angle, driver, 8);
 800025c:	4639      	mov	r1, r7
 800025e:	2308      	movs	r3, #8
 8000260:	693a      	ldr	r2, [r7, #16]
 8000262:	2008      	movs	r0, #8
 8000264:	f000 fee4 	bl	8001030 <init_door_manager>
 8000268:	4603      	mov	r3, r0
 800026a:	4a2d      	ldr	r2, [pc, #180]	@ (8000320 <main+0x134>)
 800026c:	6013      	str	r3, [r2, #0]



  //Servo ROM test
  door_manager_set_angle(manager, 0, 80.0f);
 800026e:	4b2c      	ldr	r3, [pc, #176]	@ (8000320 <main+0x134>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8000324 <main+0x138>
 8000276:	2100      	movs	r1, #0
 8000278:	4618      	mov	r0, r3
 800027a:	f000 ff4b 	bl	8001114 <door_manager_set_angle>
  door_manager_set_angle(manager, 1, 80.0f);
 800027e:	4b28      	ldr	r3, [pc, #160]	@ (8000320 <main+0x134>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8000324 <main+0x138>
 8000286:	2101      	movs	r1, #1
 8000288:	4618      	mov	r0, r3
 800028a:	f000 ff43 	bl	8001114 <door_manager_set_angle>
  door_manager_update(manager);
 800028e:	4b24      	ldr	r3, [pc, #144]	@ (8000320 <main+0x134>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	4618      	mov	r0, r3
 8000294:	f000 ff6e 	bl	8001174 <door_manager_update>
  HAL_Delay(500);
 8000298:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800029c:	f001 fae2 	bl	8001864 <HAL_Delay>


  door_manager_set_angle(manager, 0, 0.0f);
 80002a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000320 <main+0x134>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8000328 <main+0x13c>
 80002a8:	2100      	movs	r1, #0
 80002aa:	4618      	mov	r0, r3
 80002ac:	f000 ff32 	bl	8001114 <door_manager_set_angle>
  door_manager_set_angle(manager, 1, 0.0f);
 80002b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000320 <main+0x134>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 8000328 <main+0x13c>
 80002b8:	2101      	movs	r1, #1
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 ff2a 	bl	8001114 <door_manager_set_angle>
  door_manager_update(manager);
 80002c0:	4b17      	ldr	r3, [pc, #92]	@ (8000320 <main+0x134>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4618      	mov	r0, r3
 80002c6:	f000 ff55 	bl	8001174 <door_manager_update>
  HAL_Delay(1000);
 80002ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002ce:	f001 fac9 	bl	8001864 <HAL_Delay>




  const float SPEED = 1.2;
 80002d2:	4b16      	ldr	r3, [pc, #88]	@ (800032c <main+0x140>)
 80002d4:	60fb      	str	r3, [r7, #12]
  const int PAUSE = 20;
 80002d6:	2314      	movs	r3, #20
 80002d8:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  read_pins_analog(pot, analog_out);
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	4619      	mov	r1, r3
 80002de:	6978      	ldr	r0, [r7, #20]
 80002e0:	f000 fd1c 	bl	8000d1c <read_pins_analog>
	  master_angle = map_range( (float)analog_out[1], 0.0f, 4095.0f, 0.0f, 80.0f);
 80002e4:	88fb      	ldrh	r3, [r7, #6]
 80002e6:	ee07 3a90 	vmov	s15, r3
 80002ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80002ee:	ed9f 2a0d 	vldr	s4, [pc, #52]	@ 8000324 <main+0x138>
 80002f2:	eddf 1a0d 	vldr	s3, [pc, #52]	@ 8000328 <main+0x13c>
 80002f6:	ed9f 1a0e 	vldr	s2, [pc, #56]	@ 8000330 <main+0x144>
 80002fa:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 8000328 <main+0x13c>
 80002fe:	eeb0 0a67 	vmov.f32	s0, s15
 8000302:	f001 f946 	bl	8001592 <map_range>
 8000306:	eef0 7a40 	vmov.f32	s15, s0
 800030a:	edc7 7a00 	vstr	s15, [r7]

	  door_manager_update(manager);
 800030e:	4b04      	ldr	r3, [pc, #16]	@ (8000320 <main+0x134>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	4618      	mov	r0, r3
 8000314:	f000 ff2e 	bl	8001174 <door_manager_update>
	  read_pins_analog(pot, analog_out);
 8000318:	bf00      	nop
 800031a:	e7de      	b.n	80002da <main+0xee>
 800031c:	080001c9 	.word	0x080001c9
 8000320:	20000450 	.word	0x20000450
 8000324:	42a00000 	.word	0x42a00000
 8000328:	00000000 	.word	0x00000000
 800032c:	3f99999a 	.word	0x3f99999a
 8000330:	457ff000 	.word	0x457ff000

08000334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b09e      	sub	sp, #120	@ 0x78
 8000338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800033e:	2228      	movs	r2, #40	@ 0x28
 8000340:	2100      	movs	r1, #0
 8000342:	4618      	mov	r0, r3
 8000344:	f004 fd5c 	bl	8004e00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000348:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800034c:	2200      	movs	r2, #0
 800034e:	601a      	str	r2, [r3, #0]
 8000350:	605a      	str	r2, [r3, #4]
 8000352:	609a      	str	r2, [r3, #8]
 8000354:	60da      	str	r2, [r3, #12]
 8000356:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000358:	463b      	mov	r3, r7
 800035a:	223c      	movs	r2, #60	@ 0x3c
 800035c:	2100      	movs	r1, #0
 800035e:	4618      	mov	r0, r3
 8000360:	f004 fd4e 	bl	8004e00 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000364:	2303      	movs	r3, #3
 8000366:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000368:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800036c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800036e:	2300      	movs	r3, #0
 8000370:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000372:	2301      	movs	r3, #1
 8000374:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000376:	2310      	movs	r3, #16
 8000378:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800037a:	2302      	movs	r3, #2
 800037c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800037e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000382:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000384:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000388:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800038a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800038e:	4618      	mov	r0, r3
 8000390:	f002 fa80 	bl	8002894 <HAL_RCC_OscConfig>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800039a:	f000 f9a5 	bl	80006e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800039e:	230f      	movs	r3, #15
 80003a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003a2:	2302      	movs	r3, #2
 80003a4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a6:	2300      	movs	r3, #0
 80003a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003b0:	2300      	movs	r3, #0
 80003b2:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003b4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80003b8:	2101      	movs	r1, #1
 80003ba:	4618      	mov	r0, r3
 80003bc:	f003 faa8 	bl	8003910 <HAL_RCC_ClockConfig>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <SystemClock_Config+0x96>
  {
    Error_Handler();
 80003c6:	f000 f98f 	bl	80006e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 80003ca:	4b0a      	ldr	r3, [pc, #40]	@ (80003f4 <SystemClock_Config+0xc0>)
 80003cc:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80003ce:	2300      	movs	r3, #0
 80003d0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80003d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80003d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003d8:	463b      	mov	r3, r7
 80003da:	4618      	mov	r0, r3
 80003dc:	f003 fc68 	bl	8003cb0 <HAL_RCCEx_PeriphCLKConfig>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80003e6:	f000 f97f 	bl	80006e8 <Error_Handler>
  }
}
 80003ea:	bf00      	nop
 80003ec:	3778      	adds	r7, #120	@ 0x78
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	00020020 	.word	0x00020020

080003f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003fc:	4b1b      	ldr	r3, [pc, #108]	@ (800046c <MX_I2C1_Init+0x74>)
 80003fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000470 <MX_I2C1_Init+0x78>)
 8000400:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8000402:	4b1a      	ldr	r3, [pc, #104]	@ (800046c <MX_I2C1_Init+0x74>)
 8000404:	4a1b      	ldr	r2, [pc, #108]	@ (8000474 <MX_I2C1_Init+0x7c>)
 8000406:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000408:	4b18      	ldr	r3, [pc, #96]	@ (800046c <MX_I2C1_Init+0x74>)
 800040a:	2200      	movs	r2, #0
 800040c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800040e:	4b17      	ldr	r3, [pc, #92]	@ (800046c <MX_I2C1_Init+0x74>)
 8000410:	2201      	movs	r2, #1
 8000412:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000414:	4b15      	ldr	r3, [pc, #84]	@ (800046c <MX_I2C1_Init+0x74>)
 8000416:	2200      	movs	r2, #0
 8000418:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800041a:	4b14      	ldr	r3, [pc, #80]	@ (800046c <MX_I2C1_Init+0x74>)
 800041c:	2200      	movs	r2, #0
 800041e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000420:	4b12      	ldr	r3, [pc, #72]	@ (800046c <MX_I2C1_Init+0x74>)
 8000422:	2200      	movs	r2, #0
 8000424:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000426:	4b11      	ldr	r3, [pc, #68]	@ (800046c <MX_I2C1_Init+0x74>)
 8000428:	2200      	movs	r2, #0
 800042a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800042c:	4b0f      	ldr	r3, [pc, #60]	@ (800046c <MX_I2C1_Init+0x74>)
 800042e:	2200      	movs	r2, #0
 8000430:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000432:	480e      	ldr	r0, [pc, #56]	@ (800046c <MX_I2C1_Init+0x74>)
 8000434:	f001 fcb2 	bl	8001d9c <HAL_I2C_Init>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800043e:	f000 f953 	bl	80006e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000442:	2100      	movs	r1, #0
 8000444:	4809      	ldr	r0, [pc, #36]	@ (800046c <MX_I2C1_Init+0x74>)
 8000446:	f002 f8c7 	bl	80025d8 <HAL_I2CEx_ConfigAnalogFilter>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000450:	f000 f94a 	bl	80006e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000454:	2100      	movs	r1, #0
 8000456:	4805      	ldr	r0, [pc, #20]	@ (800046c <MX_I2C1_Init+0x74>)
 8000458:	f002 f909 	bl	800266e <HAL_I2CEx_ConfigDigitalFilter>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000462:	f000 f941 	bl	80006e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000466:	bf00      	nop
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	20000078 	.word	0x20000078
 8000470:	40005400 	.word	0x40005400
 8000474:	00201d2b 	.word	0x00201d2b

08000478 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800047c:	4b1b      	ldr	r3, [pc, #108]	@ (80004ec <MX_SPI1_Init+0x74>)
 800047e:	4a1c      	ldr	r2, [pc, #112]	@ (80004f0 <MX_SPI1_Init+0x78>)
 8000480:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000482:	4b1a      	ldr	r3, [pc, #104]	@ (80004ec <MX_SPI1_Init+0x74>)
 8000484:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000488:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800048a:	4b18      	ldr	r3, [pc, #96]	@ (80004ec <MX_SPI1_Init+0x74>)
 800048c:	2200      	movs	r2, #0
 800048e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000490:	4b16      	ldr	r3, [pc, #88]	@ (80004ec <MX_SPI1_Init+0x74>)
 8000492:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000496:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000498:	4b14      	ldr	r3, [pc, #80]	@ (80004ec <MX_SPI1_Init+0x74>)
 800049a:	2200      	movs	r2, #0
 800049c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800049e:	4b13      	ldr	r3, [pc, #76]	@ (80004ec <MX_SPI1_Init+0x74>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004a4:	4b11      	ldr	r3, [pc, #68]	@ (80004ec <MX_SPI1_Init+0x74>)
 80004a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80004aa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80004ac:	4b0f      	ldr	r3, [pc, #60]	@ (80004ec <MX_SPI1_Init+0x74>)
 80004ae:	2208      	movs	r2, #8
 80004b0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004b2:	4b0e      	ldr	r3, [pc, #56]	@ (80004ec <MX_SPI1_Init+0x74>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004b8:	4b0c      	ldr	r3, [pc, #48]	@ (80004ec <MX_SPI1_Init+0x74>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004be:	4b0b      	ldr	r3, [pc, #44]	@ (80004ec <MX_SPI1_Init+0x74>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80004c4:	4b09      	ldr	r3, [pc, #36]	@ (80004ec <MX_SPI1_Init+0x74>)
 80004c6:	2207      	movs	r2, #7
 80004c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004ca:	4b08      	ldr	r3, [pc, #32]	@ (80004ec <MX_SPI1_Init+0x74>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004d0:	4b06      	ldr	r3, [pc, #24]	@ (80004ec <MX_SPI1_Init+0x74>)
 80004d2:	2208      	movs	r2, #8
 80004d4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004d6:	4805      	ldr	r0, [pc, #20]	@ (80004ec <MX_SPI1_Init+0x74>)
 80004d8:	f003 fd9a 	bl	8004010 <HAL_SPI_Init>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80004e2:	f000 f901 	bl	80006e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	200000cc 	.word	0x200000cc
 80004f0:	40013000 	.word	0x40013000

080004f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08a      	sub	sp, #40	@ 0x28
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004fa:	f107 031c 	add.w	r3, r7, #28
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000506:	463b      	mov	r3, r7
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]
 8000514:	615a      	str	r2, [r3, #20]
 8000516:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000518:	4b22      	ldr	r3, [pc, #136]	@ (80005a4 <MX_TIM2_Init+0xb0>)
 800051a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800051e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 23;
 8000520:	4b20      	ldr	r3, [pc, #128]	@ (80005a4 <MX_TIM2_Init+0xb0>)
 8000522:	2217      	movs	r2, #23
 8000524:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000526:	4b1f      	ldr	r3, [pc, #124]	@ (80005a4 <MX_TIM2_Init+0xb0>)
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800052c:	4b1d      	ldr	r3, [pc, #116]	@ (80005a4 <MX_TIM2_Init+0xb0>)
 800052e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000532:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000534:	4b1b      	ldr	r3, [pc, #108]	@ (80005a4 <MX_TIM2_Init+0xb0>)
 8000536:	2200      	movs	r2, #0
 8000538:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800053a:	4b1a      	ldr	r3, [pc, #104]	@ (80005a4 <MX_TIM2_Init+0xb0>)
 800053c:	2200      	movs	r2, #0
 800053e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000540:	4818      	ldr	r0, [pc, #96]	@ (80005a4 <MX_TIM2_Init+0xb0>)
 8000542:	f003 fe10 	bl	8004166 <HAL_TIM_PWM_Init>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800054c:	f000 f8cc 	bl	80006e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000550:	2300      	movs	r3, #0
 8000552:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000554:	2300      	movs	r3, #0
 8000556:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000558:	f107 031c 	add.w	r3, r7, #28
 800055c:	4619      	mov	r1, r3
 800055e:	4811      	ldr	r0, [pc, #68]	@ (80005a4 <MX_TIM2_Init+0xb0>)
 8000560:	f004 fade 	bl	8004b20 <HAL_TIMEx_MasterConfigSynchronization>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800056a:	f000 f8bd 	bl	80006e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800056e:	2360      	movs	r3, #96	@ 0x60
 8000570:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000576:	2300      	movs	r3, #0
 8000578:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800057a:	2300      	movs	r3, #0
 800057c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800057e:	463b      	mov	r3, r7
 8000580:	2200      	movs	r2, #0
 8000582:	4619      	mov	r1, r3
 8000584:	4807      	ldr	r0, [pc, #28]	@ (80005a4 <MX_TIM2_Init+0xb0>)
 8000586:	f003 fe45 	bl	8004214 <HAL_TIM_PWM_ConfigChannel>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000590:	f000 f8aa 	bl	80006e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000594:	4803      	ldr	r0, [pc, #12]	@ (80005a4 <MX_TIM2_Init+0xb0>)
 8000596:	f000 f975 	bl	8000884 <HAL_TIM_MspPostInit>

}
 800059a:	bf00      	nop
 800059c:	3728      	adds	r7, #40	@ 0x28
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000130 	.word	0x20000130

080005a8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80005ac:	4b0d      	ldr	r3, [pc, #52]	@ (80005e4 <MX_USB_PCD_Init+0x3c>)
 80005ae:	4a0e      	ldr	r2, [pc, #56]	@ (80005e8 <MX_USB_PCD_Init+0x40>)
 80005b0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80005b2:	4b0c      	ldr	r3, [pc, #48]	@ (80005e4 <MX_USB_PCD_Init+0x3c>)
 80005b4:	2208      	movs	r2, #8
 80005b6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80005b8:	4b0a      	ldr	r3, [pc, #40]	@ (80005e4 <MX_USB_PCD_Init+0x3c>)
 80005ba:	2202      	movs	r2, #2
 80005bc:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80005be:	4b09      	ldr	r3, [pc, #36]	@ (80005e4 <MX_USB_PCD_Init+0x3c>)
 80005c0:	2202      	movs	r2, #2
 80005c2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80005c4:	4b07      	ldr	r3, [pc, #28]	@ (80005e4 <MX_USB_PCD_Init+0x3c>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80005ca:	4b06      	ldr	r3, [pc, #24]	@ (80005e4 <MX_USB_PCD_Init+0x3c>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80005d0:	4804      	ldr	r0, [pc, #16]	@ (80005e4 <MX_USB_PCD_Init+0x3c>)
 80005d2:	f002 f898 	bl	8002706 <HAL_PCD_Init>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80005dc:	f000 f884 	bl	80006e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	2000017c 	.word	0x2000017c
 80005e8:	40005c00 	.word	0x40005c00

080005ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	@ 0x28
 80005f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000602:	4b37      	ldr	r3, [pc, #220]	@ (80006e0 <MX_GPIO_Init+0xf4>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	4a36      	ldr	r2, [pc, #216]	@ (80006e0 <MX_GPIO_Init+0xf4>)
 8000608:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800060c:	6153      	str	r3, [r2, #20]
 800060e:	4b34      	ldr	r3, [pc, #208]	@ (80006e0 <MX_GPIO_Init+0xf4>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000616:	613b      	str	r3, [r7, #16]
 8000618:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061a:	4b31      	ldr	r3, [pc, #196]	@ (80006e0 <MX_GPIO_Init+0xf4>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	4a30      	ldr	r2, [pc, #192]	@ (80006e0 <MX_GPIO_Init+0xf4>)
 8000620:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000624:	6153      	str	r3, [r2, #20]
 8000626:	4b2e      	ldr	r3, [pc, #184]	@ (80006e0 <MX_GPIO_Init+0xf4>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000632:	4b2b      	ldr	r3, [pc, #172]	@ (80006e0 <MX_GPIO_Init+0xf4>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	4a2a      	ldr	r2, [pc, #168]	@ (80006e0 <MX_GPIO_Init+0xf4>)
 8000638:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800063c:	6153      	str	r3, [r2, #20]
 800063e:	4b28      	ldr	r3, [pc, #160]	@ (80006e0 <MX_GPIO_Init+0xf4>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	4b25      	ldr	r3, [pc, #148]	@ (80006e0 <MX_GPIO_Init+0xf4>)
 800064c:	695b      	ldr	r3, [r3, #20]
 800064e:	4a24      	ldr	r2, [pc, #144]	@ (80006e0 <MX_GPIO_Init+0xf4>)
 8000650:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000654:	6153      	str	r3, [r2, #20]
 8000656:	4b22      	ldr	r3, [pc, #136]	@ (80006e0 <MX_GPIO_Init+0xf4>)
 8000658:	695b      	ldr	r3, [r3, #20]
 800065a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000662:	4b1f      	ldr	r3, [pc, #124]	@ (80006e0 <MX_GPIO_Init+0xf4>)
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	4a1e      	ldr	r2, [pc, #120]	@ (80006e0 <MX_GPIO_Init+0xf4>)
 8000668:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800066c:	6153      	str	r3, [r2, #20]
 800066e:	4b1c      	ldr	r3, [pc, #112]	@ (80006e0 <MX_GPIO_Init+0xf4>)
 8000670:	695b      	ldr	r3, [r3, #20]
 8000672:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800067a:	2200      	movs	r2, #0
 800067c:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8000680:	4818      	ldr	r0, [pc, #96]	@ (80006e4 <MX_GPIO_Init+0xf8>)
 8000682:	f001 fb73 	bl	8001d6c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000686:	2337      	movs	r3, #55	@ 0x37
 8000688:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800068a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800068e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000694:	f107 0314 	add.w	r3, r7, #20
 8000698:	4619      	mov	r1, r3
 800069a:	4812      	ldr	r0, [pc, #72]	@ (80006e4 <MX_GPIO_Init+0xf8>)
 800069c:	f001 f9ec 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80006a0:	f64f 7308 	movw	r3, #65288	@ 0xff08
 80006a4:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a6:	2301      	movs	r3, #1
 80006a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ae:	2300      	movs	r3, #0
 80006b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	4619      	mov	r1, r3
 80006b8:	480a      	ldr	r0, [pc, #40]	@ (80006e4 <MX_GPIO_Init+0xf8>)
 80006ba:	f001 f9dd 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006be:	2301      	movs	r3, #1
 80006c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	4619      	mov	r1, r3
 80006d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006d4:	f001 f9d0 	bl	8001a78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006d8:	bf00      	nop
 80006da:	3728      	adds	r7, #40	@ 0x28
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40021000 	.word	0x40021000
 80006e4:	48001000 	.word	0x48001000

080006e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ec:	b672      	cpsid	i
}
 80006ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f0:	bf00      	nop
 80006f2:	e7fd      	b.n	80006f0 <Error_Handler+0x8>

080006f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000738 <HAL_MspInit+0x44>)
 80006fc:	699b      	ldr	r3, [r3, #24]
 80006fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000738 <HAL_MspInit+0x44>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	6193      	str	r3, [r2, #24]
 8000706:	4b0c      	ldr	r3, [pc, #48]	@ (8000738 <HAL_MspInit+0x44>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000712:	4b09      	ldr	r3, [pc, #36]	@ (8000738 <HAL_MspInit+0x44>)
 8000714:	69db      	ldr	r3, [r3, #28]
 8000716:	4a08      	ldr	r2, [pc, #32]	@ (8000738 <HAL_MspInit+0x44>)
 8000718:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800071c:	61d3      	str	r3, [r2, #28]
 800071e:	4b06      	ldr	r3, [pc, #24]	@ (8000738 <HAL_MspInit+0x44>)
 8000720:	69db      	ldr	r3, [r3, #28]
 8000722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800072a:	2007      	movs	r0, #7
 800072c:	f001 f970 	bl	8001a10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40021000 	.word	0x40021000

0800073c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	@ 0x28
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a17      	ldr	r2, [pc, #92]	@ (80007b8 <HAL_I2C_MspInit+0x7c>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d127      	bne.n	80007ae <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800075e:	4b17      	ldr	r3, [pc, #92]	@ (80007bc <HAL_I2C_MspInit+0x80>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	4a16      	ldr	r2, [pc, #88]	@ (80007bc <HAL_I2C_MspInit+0x80>)
 8000764:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000768:	6153      	str	r3, [r2, #20]
 800076a:	4b14      	ldr	r3, [pc, #80]	@ (80007bc <HAL_I2C_MspInit+0x80>)
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000776:	23c0      	movs	r3, #192	@ 0xc0
 8000778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800077a:	2312      	movs	r3, #18
 800077c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000782:	2303      	movs	r3, #3
 8000784:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000786:	2304      	movs	r3, #4
 8000788:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078a:	f107 0314 	add.w	r3, r7, #20
 800078e:	4619      	mov	r1, r3
 8000790:	480b      	ldr	r0, [pc, #44]	@ (80007c0 <HAL_I2C_MspInit+0x84>)
 8000792:	f001 f971 	bl	8001a78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000796:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <HAL_I2C_MspInit+0x80>)
 8000798:	69db      	ldr	r3, [r3, #28]
 800079a:	4a08      	ldr	r2, [pc, #32]	@ (80007bc <HAL_I2C_MspInit+0x80>)
 800079c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007a0:	61d3      	str	r3, [r2, #28]
 80007a2:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <HAL_I2C_MspInit+0x80>)
 80007a4:	69db      	ldr	r3, [r3, #28]
 80007a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80007ae:	bf00      	nop
 80007b0:	3728      	adds	r7, #40	@ 0x28
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40005400 	.word	0x40005400
 80007bc:	40021000 	.word	0x40021000
 80007c0:	48000400 	.word	0x48000400

080007c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	@ 0x28
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a17      	ldr	r2, [pc, #92]	@ (8000840 <HAL_SPI_MspInit+0x7c>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d128      	bne.n	8000838 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007e6:	4b17      	ldr	r3, [pc, #92]	@ (8000844 <HAL_SPI_MspInit+0x80>)
 80007e8:	699b      	ldr	r3, [r3, #24]
 80007ea:	4a16      	ldr	r2, [pc, #88]	@ (8000844 <HAL_SPI_MspInit+0x80>)
 80007ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007f0:	6193      	str	r3, [r2, #24]
 80007f2:	4b14      	ldr	r3, [pc, #80]	@ (8000844 <HAL_SPI_MspInit+0x80>)
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	4b11      	ldr	r3, [pc, #68]	@ (8000844 <HAL_SPI_MspInit+0x80>)
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	4a10      	ldr	r2, [pc, #64]	@ (8000844 <HAL_SPI_MspInit+0x80>)
 8000804:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000808:	6153      	str	r3, [r2, #20]
 800080a:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <HAL_SPI_MspInit+0x80>)
 800080c:	695b      	ldr	r3, [r3, #20]
 800080e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000816:	23e0      	movs	r3, #224	@ 0xe0
 8000818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081a:	2302      	movs	r3, #2
 800081c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000822:	2303      	movs	r3, #3
 8000824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000826:	2305      	movs	r3, #5
 8000828:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	4619      	mov	r1, r3
 8000830:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000834:	f001 f920 	bl	8001a78 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000838:	bf00      	nop
 800083a:	3728      	adds	r7, #40	@ 0x28
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40013000 	.word	0x40013000
 8000844:	40021000 	.word	0x40021000

08000848 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000858:	d10b      	bne.n	8000872 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800085a:	4b09      	ldr	r3, [pc, #36]	@ (8000880 <HAL_TIM_PWM_MspInit+0x38>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	4a08      	ldr	r2, [pc, #32]	@ (8000880 <HAL_TIM_PWM_MspInit+0x38>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	61d3      	str	r3, [r2, #28]
 8000866:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <HAL_TIM_PWM_MspInit+0x38>)
 8000868:	69db      	ldr	r3, [r3, #28]
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000872:	bf00      	nop
 8000874:	3714      	adds	r7, #20
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	40021000 	.word	0x40021000

08000884 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b088      	sub	sp, #32
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088c:	f107 030c 	add.w	r3, r7, #12
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80008a4:	d11d      	bne.n	80008e2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <HAL_TIM_MspPostInit+0x68>)
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	4a10      	ldr	r2, [pc, #64]	@ (80008ec <HAL_TIM_MspPostInit+0x68>)
 80008ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008b0:	6153      	str	r3, [r2, #20]
 80008b2:	4b0e      	ldr	r3, [pc, #56]	@ (80008ec <HAL_TIM_MspPostInit+0x68>)
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80008be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80008d0:	2301      	movs	r3, #1
 80008d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d4:	f107 030c 	add.w	r3, r7, #12
 80008d8:	4619      	mov	r1, r3
 80008da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008de:	f001 f8cb 	bl	8001a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80008e2:	bf00      	nop
 80008e4:	3720      	adds	r7, #32
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40021000 	.word	0x40021000

080008f0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	@ 0x28
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a18      	ldr	r2, [pc, #96]	@ (8000970 <HAL_PCD_MspInit+0x80>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d129      	bne.n	8000966 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b18      	ldr	r3, [pc, #96]	@ (8000974 <HAL_PCD_MspInit+0x84>)
 8000914:	695b      	ldr	r3, [r3, #20]
 8000916:	4a17      	ldr	r2, [pc, #92]	@ (8000974 <HAL_PCD_MspInit+0x84>)
 8000918:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800091c:	6153      	str	r3, [r2, #20]
 800091e:	4b15      	ldr	r3, [pc, #84]	@ (8000974 <HAL_PCD_MspInit+0x84>)
 8000920:	695b      	ldr	r3, [r3, #20]
 8000922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800092a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800092e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000930:	2302      	movs	r3, #2
 8000932:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000938:	2303      	movs	r3, #3
 800093a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800093c:	230e      	movs	r3, #14
 800093e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	4619      	mov	r1, r3
 8000946:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800094a:	f001 f895 	bl	8001a78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800094e:	4b09      	ldr	r3, [pc, #36]	@ (8000974 <HAL_PCD_MspInit+0x84>)
 8000950:	69db      	ldr	r3, [r3, #28]
 8000952:	4a08      	ldr	r2, [pc, #32]	@ (8000974 <HAL_PCD_MspInit+0x84>)
 8000954:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000958:	61d3      	str	r3, [r2, #28]
 800095a:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <HAL_PCD_MspInit+0x84>)
 800095c:	69db      	ldr	r3, [r3, #28]
 800095e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_MspInit 1 */

  }

}
 8000966:	bf00      	nop
 8000968:	3728      	adds	r7, #40	@ 0x28
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40005c00 	.word	0x40005c00
 8000974:	40021000 	.word	0x40021000

08000978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <NMI_Handler+0x4>

08000980 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <HardFault_Handler+0x4>

08000988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <MemManage_Handler+0x4>

08000990 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <BusFault_Handler+0x4>

08000998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <UsageFault_Handler+0x4>

080009a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr

080009ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr

080009ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ce:	f000 ff29 	bl	8001824 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
	...

080009d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009e0:	4a14      	ldr	r2, [pc, #80]	@ (8000a34 <_sbrk+0x5c>)
 80009e2:	4b15      	ldr	r3, [pc, #84]	@ (8000a38 <_sbrk+0x60>)
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009ec:	4b13      	ldr	r3, [pc, #76]	@ (8000a3c <_sbrk+0x64>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d102      	bne.n	80009fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009f4:	4b11      	ldr	r3, [pc, #68]	@ (8000a3c <_sbrk+0x64>)
 80009f6:	4a12      	ldr	r2, [pc, #72]	@ (8000a40 <_sbrk+0x68>)
 80009f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009fa:	4b10      	ldr	r3, [pc, #64]	@ (8000a3c <_sbrk+0x64>)
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4413      	add	r3, r2
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d207      	bcs.n	8000a18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a08:	f004 fa12 	bl	8004e30 <__errno>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	220c      	movs	r2, #12
 8000a10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a16:	e009      	b.n	8000a2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a18:	4b08      	ldr	r3, [pc, #32]	@ (8000a3c <_sbrk+0x64>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a1e:	4b07      	ldr	r3, [pc, #28]	@ (8000a3c <_sbrk+0x64>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4413      	add	r3, r2
 8000a26:	4a05      	ldr	r2, [pc, #20]	@ (8000a3c <_sbrk+0x64>)
 8000a28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3718      	adds	r7, #24
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	2000a000 	.word	0x2000a000
 8000a38:	00000400 	.word	0x00000400
 8000a3c:	20000454 	.word	0x20000454
 8000a40:	200005e8 	.word	0x200005e8

08000a44 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a48:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <SystemInit+0x20>)
 8000a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a4e:	4a05      	ldr	r2, [pc, #20]	@ (8000a64 <SystemInit+0x20>)
 8000a50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	db0b      	blt.n	8000a92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	f003 021f 	and.w	r2, r3, #31
 8000a80:	4907      	ldr	r1, [pc, #28]	@ (8000aa0 <__NVIC_EnableIRQ+0x38>)
 8000a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a86:	095b      	lsrs	r3, r3, #5
 8000a88:	2001      	movs	r0, #1
 8000a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a92:	bf00      	nop
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000e100 	.word	0xe000e100

08000aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	6039      	str	r1, [r7, #0]
 8000aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	db0a      	blt.n	8000ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	490c      	ldr	r1, [pc, #48]	@ (8000af0 <__NVIC_SetPriority+0x4c>)
 8000abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac2:	0112      	lsls	r2, r2, #4
 8000ac4:	b2d2      	uxtb	r2, r2
 8000ac6:	440b      	add	r3, r1
 8000ac8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000acc:	e00a      	b.n	8000ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	4908      	ldr	r1, [pc, #32]	@ (8000af4 <__NVIC_SetPriority+0x50>)
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	f003 030f 	and.w	r3, r3, #15
 8000ada:	3b04      	subs	r3, #4
 8000adc:	0112      	lsls	r2, r2, #4
 8000ade:	b2d2      	uxtb	r2, r2
 8000ae0:	440b      	add	r3, r1
 8000ae2:	761a      	strb	r2, [r3, #24]
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000e100 	.word	0xe000e100
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <create_mask>:
 	uint8_t PIN_UPPER;

 } GPIO;


 uint32_t create_mask(uint8_t start, uint8_t end) {
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	460a      	mov	r2, r1
 8000b02:	71fb      	strb	r3, [r7, #7]
 8000b04:	4613      	mov	r3, r2
 8000b06:	71bb      	strb	r3, [r7, #6]
 	//Bitwise-logic trick to get 1's mask between start and end index
 	return ((1 << (end + 1)) - 1) ^ ((1 << start) - 1);                      // XOR to get the range
 8000b08:	79bb      	ldrb	r3, [r7, #6]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	1e5a      	subs	r2, r3, #1
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	2101      	movs	r1, #1
 8000b18:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1c:	3b01      	subs	r3, #1
 8000b1e:	4053      	eors	r3, r2
 }
 8000b20:	4618      	mov	r0, r3
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <init_port>:



 GPIO *init_port(port_name_link name, port_mode mode, uint8_t pin_lower, uint8_t pin_upper){
 8000b2c:	b590      	push	{r4, r7, lr}
 8000b2e:	b08b      	sub	sp, #44	@ 0x2c
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4604      	mov	r4, r0
 8000b34:	4608      	mov	r0, r1
 8000b36:	4611      	mov	r1, r2
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4623      	mov	r3, r4
 8000b3c:	71fb      	strb	r3, [r7, #7]
 8000b3e:	4603      	mov	r3, r0
 8000b40:	71bb      	strb	r3, [r7, #6]
 8000b42:	460b      	mov	r3, r1
 8000b44:	717b      	strb	r3, [r7, #5]
 8000b46:	4613      	mov	r3, r2
 8000b48:	713b      	strb	r3, [r7, #4]

 	GPIO *port_pt = malloc(sizeof(GPIO)); //Pointer to Port
 8000b4a:	200c      	movs	r0, #12
 8000b4c:	f004 f8a2 	bl	8004c94 <malloc>
 8000b50:	4603      	mov	r3, r0
 8000b52:	61fb      	str	r3, [r7, #28]

 	port_pt->PORT_IND = name;
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	79fa      	ldrb	r2, [r7, #7]
 8000b58:	701a      	strb	r2, [r3, #0]
 	port_pt->PORT_ADR = adr_link[name];
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	4a6a      	ldr	r2, [pc, #424]	@ (8000d08 <init_port+0x1dc>)
 8000b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b62:	461a      	mov	r2, r3
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	605a      	str	r2, [r3, #4]
 	port_pt->MODE = mode;
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	79ba      	ldrb	r2, [r7, #6]
 8000b6c:	721a      	strb	r2, [r3, #8]
 	port_pt->PIN_LOWER = pin_lower;
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	797a      	ldrb	r2, [r7, #5]
 8000b72:	725a      	strb	r2, [r3, #9]
 	port_pt->PIN_UPPER = pin_upper;
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	793a      	ldrb	r2, [r7, #4]
 8000b78:	729a      	strb	r2, [r3, #10]

 	//Enable clock for portX
 	uint32_t clock_en_mask = clock_mask_link[name];
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	4a63      	ldr	r2, [pc, #396]	@ (8000d0c <init_port+0x1e0>)
 8000b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b82:	61bb      	str	r3, [r7, #24]
 	RCC->AHBENR |= clock_en_mask;
 8000b84:	4b62      	ldr	r3, [pc, #392]	@ (8000d10 <init_port+0x1e4>)
 8000b86:	695a      	ldr	r2, [r3, #20]
 8000b88:	4961      	ldr	r1, [pc, #388]	@ (8000d10 <init_port+0x1e4>)
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	614b      	str	r3, [r1, #20]


 	uint32_t *port_mode_reg = ((uint32_t *) &(port_pt->PORT_ADR->MODER));
 8000b90:	69fb      	ldr	r3, [r7, #28]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	617b      	str	r3, [r7, #20]

 	//Generate mode-mask

 	//First mask away the selected section (pin_range)
 	uint32_t temp_mask = create_mask(pin_lower*2, pin_upper*2 + 1);
 8000b96:	797b      	ldrb	r3, [r7, #5]
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	793b      	ldrb	r3, [r7, #4]
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4610      	mov	r0, r2
 8000baa:	f7ff ffa5 	bl	8000af8 <create_mask>
 8000bae:	6278      	str	r0, [r7, #36]	@ 0x24

 	//Sets the pin_range section to 0
 	*port_mode_reg &= ~temp_mask;
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb6:	43db      	mvns	r3, r3
 8000bb8:	401a      	ands	r2, r3
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	601a      	str	r2, [r3, #0]


 	//Input-mode is enabled when each pin is 0b00 so no more masking is required

 	if (mode == OUTPUT){
 8000bbe:	79bb      	ldrb	r3, [r7, #6]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d123      	bne.n	8000c0c <init_port+0xe0>

 		//Similar idea to clear-mask, except shifting by 2 each time (0b01010101...)
 		uint32_t first_mask = (1 << pin_lower*2);
 8000bc4:	797b      	ldrb	r3, [r7, #5]
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	2201      	movs	r2, #1
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	60fb      	str	r3, [r7, #12]

 		temp_mask = first_mask;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	627b      	str	r3, [r7, #36]	@ 0x24
 		for (uint8_t i=pin_lower; i<pin_upper+1; i++){
 8000bd4:	797b      	ldrb	r3, [r7, #5]
 8000bd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8000bda:	e00b      	b.n	8000bf4 <init_port+0xc8>
 			temp_mask <<= 2;
 8000bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	627b      	str	r3, [r7, #36]	@ 0x24
 			temp_mask |= first_mask;
 8000be2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	627b      	str	r3, [r7, #36]	@ 0x24
 		for (uint8_t i=pin_lower; i<pin_upper+1; i++){
 8000bea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000bee:	3301      	adds	r3, #1
 8000bf0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8000bf4:	793a      	ldrb	r2, [r7, #4]
 8000bf6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d2ee      	bcs.n	8000bdc <init_port+0xb0>
 		}

 		*port_mode_reg |=temp_mask;
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c04:	431a      	orrs	r2, r3
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	e078      	b.n	8000cfe <init_port+0x1d2>

 	} else if (mode == ANALOG){
 8000c0c:	79bb      	ldrb	r3, [r7, #6]
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d175      	bne.n	8000cfe <init_port+0x1d2>
 		//All 1s for analog mode (conveniently same as clear-mask)

 		*port_mode_reg |= temp_mask;
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c18:	431a      	orrs	r2, r3
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	601a      	str	r2, [r3, #0]

 		//ONLY AVAILABLE FOR PA0 - PA3 !!!!!!

 		// enable the clock for ADC1
		RCC->AHBENR |= RCC_AHBENR_ADC12EN;
 8000c1e:	4b3c      	ldr	r3, [pc, #240]	@ (8000d10 <init_port+0x1e4>)
 8000c20:	695b      	ldr	r3, [r3, #20]
 8000c22:	4a3b      	ldr	r2, [pc, #236]	@ (8000d10 <init_port+0x1e4>)
 8000c24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c28:	6153      	str	r3, [r2, #20]

		// set to synchronise the ADC with the clock
		ADC12_COMMON->CCR |= ADC12_CCR_CKMODE_0;
 8000c2a:	4b3a      	ldr	r3, [pc, #232]	@ (8000d14 <init_port+0x1e8>)
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	4a39      	ldr	r2, [pc, #228]	@ (8000d14 <init_port+0x1e8>)
 8000c30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c34:	6093      	str	r3, [r2, #8]

		// ADEN must be = 0 for configuration (is the default)
		ADC2->CR &= ~ADC_CR_ADVREGEN; // clear voltage regulator enable
 8000c36:	4b38      	ldr	r3, [pc, #224]	@ (8000d18 <init_port+0x1ec>)
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	4a37      	ldr	r2, [pc, #220]	@ (8000d18 <init_port+0x1ec>)
 8000c3c:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8000c40:	6093      	str	r3, [r2, #8]
		ADC2->CR |= ADC_CR_ADVREGEN_0; // set ADVREGEN TO 01
 8000c42:	4b35      	ldr	r3, [pc, #212]	@ (8000d18 <init_port+0x1ec>)
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	4a34      	ldr	r2, [pc, #208]	@ (8000d18 <init_port+0x1ec>)
 8000c48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c4c:	6093      	str	r3, [r2, #8]
		ADC2->CR &= ~ADC_CR_ADCALDIF; // clear bit to enable Single-ended-input
 8000c4e:	4b32      	ldr	r3, [pc, #200]	@ (8000d18 <init_port+0x1ec>)
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	4a31      	ldr	r2, [pc, #196]	@ (8000d18 <init_port+0x1ec>)
 8000c54:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8000c58:	6093      	str	r3, [r2, #8]

		// calibrate the ADC (self calibration routine)
		ADC2->CR |= ADC_CR_ADCAL;
 8000c5a:	4b2f      	ldr	r3, [pc, #188]	@ (8000d18 <init_port+0x1ec>)
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	4a2e      	ldr	r2, [pc, #184]	@ (8000d18 <init_port+0x1ec>)
 8000c60:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c64:	6093      	str	r3, [r2, #8]
		while((ADC2->CR & ADC_CR_ADCAL) == ADC_CR_ADCAL); // Waiting for the calibration to finish
 8000c66:	bf00      	nop
 8000c68:	4b2b      	ldr	r3, [pc, #172]	@ (8000d18 <init_port+0x1ec>)
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8000c70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c74:	d0f8      	beq.n	8000c68 <init_port+0x13c>




		//Clear channel-sequence
		ADC2->SQR1 = 0;
 8000c76:	4b28      	ldr	r3, [pc, #160]	@ (8000d18 <init_port+0x1ec>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	631a      	str	r2, [r3, #48]	@ 0x30

		//Add each pin/channel to the conversion-sequence
		uint8_t pin; //Index of pin to add in seq
		for (uint8_t i=0; i < pin_upper-pin_lower +1; i++){
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8000c82:	e019      	b.n	8000cb8 <init_port+0x18c>
			pin = pin_lower + i;
 8000c84:	797a      	ldrb	r2, [r7, #5]
 8000c86:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000c8a:	4413      	add	r3, r2
 8000c8c:	74fb      	strb	r3, [r7, #19]
			ADC2->SQR1 |= (pin-3) << 6*(i+1); // set the request for channel x
 8000c8e:	4b22      	ldr	r3, [pc, #136]	@ (8000d18 <init_port+0x1ec>)
 8000c90:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000c92:	7cfb      	ldrb	r3, [r7, #19]
 8000c94:	1ed8      	subs	r0, r3, #3
 8000c96:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000c9a:	1c5a      	adds	r2, r3, #1
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	4413      	add	r3, r2
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	fa00 f303 	lsl.w	r3, r0, r3
 8000ca8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d18 <init_port+0x1ec>)
 8000caa:	430b      	orrs	r3, r1
 8000cac:	6313      	str	r3, [r2, #48]	@ 0x30
		for (uint8_t i=0; i < pin_upper-pin_lower +1; i++){
 8000cae:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8000cb8:	793a      	ldrb	r2, [r7, #4]
 8000cba:	797b      	ldrb	r3, [r7, #5]
 8000cbc:	1ad2      	subs	r2, r2, r3
 8000cbe:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	dade      	bge.n	8000c84 <init_port+0x158>
		}


		ADC2->SQR1 |= (pin_upper-pin_lower) << ADC_SQR1_L_Pos; // set the number of channels to read (number of pins in range)
 8000cc6:	4b14      	ldr	r3, [pc, #80]	@ (8000d18 <init_port+0x1ec>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	7939      	ldrb	r1, [r7, #4]
 8000ccc:	797a      	ldrb	r2, [r7, #5]
 8000cce:	1a8a      	subs	r2, r1, r2
 8000cd0:	4611      	mov	r1, r2
 8000cd2:	4a11      	ldr	r2, [pc, #68]	@ (8000d18 <init_port+0x1ec>)
 8000cd4:	430b      	orrs	r3, r1
 8000cd6:	6313      	str	r3, [r2, #48]	@ 0x30



		// single shot mode
		ADC2->CFGR &= ~ADC_CFGR_CONT;
 8000cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8000d18 <init_port+0x1ec>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	4a0e      	ldr	r2, [pc, #56]	@ (8000d18 <init_port+0x1ec>)
 8000cde:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000ce2:	60d3      	str	r3, [r2, #12]

		// Enable the ADC
		ADC2->CR |= ADC_CR_ADEN;
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d18 <init_port+0x1ec>)
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	4a0b      	ldr	r2, [pc, #44]	@ (8000d18 <init_port+0x1ec>)
 8000cea:	f043 0301 	orr.w	r3, r3, #1
 8000cee:	6093      	str	r3, [r2, #8]

		// Wait the ADC to be ready.
		while (!(ADC2->ISR & ADC_ISR_ADRDY));
 8000cf0:	bf00      	nop
 8000cf2:	4b09      	ldr	r3, [pc, #36]	@ (8000d18 <init_port+0x1ec>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d0f9      	beq.n	8000cf2 <init_port+0x1c6>

 	}


 	//Port has been initialised!! - return the port-struct
 	return port_pt;
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 }
 8000d00:	4618      	mov	r0, r3
 8000d02:	372c      	adds	r7, #44	@ 0x2c
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd90      	pop	{r4, r7, pc}
 8000d08:	08004eb0 	.word	0x08004eb0
 8000d0c:	08004ec4 	.word	0x08004ec4
 8000d10:	40021000 	.word	0x40021000
 8000d14:	50000300 	.word	0x50000300
 8000d18:	50000100 	.word	0x50000100

08000d1c <read_pins_analog>:
	return 0;

 }

 //Read analog pins (writes to pt)
void read_pins_analog(GPIO *port_pt, uint16_t *dest_pt){
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
	 if (port_pt->MODE == ANALOG){
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	7a1b      	ldrb	r3, [r3, #8]
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	d126      	bne.n	8000d7c <read_pins_analog+0x60>
		// request the process to start
		ADC2->CR |= ADC_CR_ADSTART;
 8000d2e:	4b16      	ldr	r3, [pc, #88]	@ (8000d88 <read_pins_analog+0x6c>)
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	4a15      	ldr	r2, [pc, #84]	@ (8000d88 <read_pins_analog+0x6c>)
 8000d34:	f043 0304 	orr.w	r3, r3, #4
 8000d38:	6093      	str	r3, [r2, #8]

		uint8_t i = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	73fb      	strb	r3, [r7, #15]
		while (!(ADC2->ISR & ADC_ISR_EOS)) {
 8000d3e:	e010      	b.n	8000d62 <read_pins_analog+0x46>
		    while (!(ADC2->ISR & ADC_ISR_EOC));  // Wait for conversion
 8000d40:	bf00      	nop
 8000d42:	4b11      	ldr	r3, [pc, #68]	@ (8000d88 <read_pins_analog+0x6c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f003 0304 	and.w	r3, r3, #4
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d0f9      	beq.n	8000d42 <read_pins_analog+0x26>
		    dest_pt[i++] = ADC2->DR;               // Reading clears EOC
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d88 <read_pins_analog+0x6c>)
 8000d50:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
 8000d54:	1c5a      	adds	r2, r3, #1
 8000d56:	73fa      	strb	r2, [r7, #15]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	683a      	ldr	r2, [r7, #0]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	b28a      	uxth	r2, r1
 8000d60:	801a      	strh	r2, [r3, #0]
		while (!(ADC2->ISR & ADC_ISR_EOS)) {
 8000d62:	4b09      	ldr	r3, [pc, #36]	@ (8000d88 <read_pins_analog+0x6c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f003 0308 	and.w	r3, r3, #8
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d0e8      	beq.n	8000d40 <read_pins_analog+0x24>
		}

		// Clear EOS if needed
		ADC2->ISR |= ADC_ISR_EOS;
 8000d6e:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <read_pins_analog+0x6c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a05      	ldr	r2, [pc, #20]	@ (8000d88 <read_pins_analog+0x6c>)
 8000d74:	f043 0308 	orr.w	r3, r3, #8
 8000d78:	6013      	str	r3, [r2, #0]


	}

	 return;
 8000d7a:	bf00      	nop
 8000d7c:	bf00      	nop
 }
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	50000100 	.word	0x50000100

08000d8c <EXTI0_IRQHandler>:

 //Pointers to callback-funcitons (for each of 16 pins)
 void (*EXTI_Callbacks[16])(uint8_t pin_index) = {0x00};
 //Wish this wasn't necessary, but each handler function has to be defined seperately
 //Is there a better way to do this? There doesn't seem to be a generic IQRHandler..
 void EXTI0_IRQHandler(void) {EXTI->PR |= (1 << 0); if (EXTI_Callbacks[0]) EXTI_Callbacks[0](0);}
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	4b07      	ldr	r3, [pc, #28]	@ (8000db0 <EXTI0_IRQHandler+0x24>)
 8000d92:	695b      	ldr	r3, [r3, #20]
 8000d94:	4a06      	ldr	r2, [pc, #24]	@ (8000db0 <EXTI0_IRQHandler+0x24>)
 8000d96:	f043 0301 	orr.w	r3, r3, #1
 8000d9a:	6153      	str	r3, [r2, #20]
 8000d9c:	4b05      	ldr	r3, [pc, #20]	@ (8000db4 <EXTI0_IRQHandler+0x28>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d003      	beq.n	8000dac <EXTI0_IRQHandler+0x20>
 8000da4:	4b03      	ldr	r3, [pc, #12]	@ (8000db4 <EXTI0_IRQHandler+0x28>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2000      	movs	r0, #0
 8000daa:	4798      	blx	r3
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40010400 	.word	0x40010400
 8000db4:	20000458 	.word	0x20000458

08000db8 <EXTI1_IRQHandler>:
 void EXTI1_IRQHandler(void) {EXTI->PR |= (1 << 1); if (EXTI_Callbacks[1]) EXTI_Callbacks[1](1);}
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	4b07      	ldr	r3, [pc, #28]	@ (8000ddc <EXTI1_IRQHandler+0x24>)
 8000dbe:	695b      	ldr	r3, [r3, #20]
 8000dc0:	4a06      	ldr	r2, [pc, #24]	@ (8000ddc <EXTI1_IRQHandler+0x24>)
 8000dc2:	f043 0302 	orr.w	r3, r3, #2
 8000dc6:	6153      	str	r3, [r2, #20]
 8000dc8:	4b05      	ldr	r3, [pc, #20]	@ (8000de0 <EXTI1_IRQHandler+0x28>)
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d003      	beq.n	8000dd8 <EXTI1_IRQHandler+0x20>
 8000dd0:	4b03      	ldr	r3, [pc, #12]	@ (8000de0 <EXTI1_IRQHandler+0x28>)
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	4798      	blx	r3
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40010400 	.word	0x40010400
 8000de0:	20000458 	.word	0x20000458

08000de4 <EXTI3_IRQHandler>:
 void EXTI2_IRQHandler(void) {EXTI->PR |= (1 << 2); if (EXTI_Callbacks[2]) EXTI_Callbacks[2](2);}
 void EXTI3_IRQHandler(void) {EXTI->PR |= (1 << 3); if (EXTI_Callbacks[3]) EXTI_Callbacks[3](3);}
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	4b07      	ldr	r3, [pc, #28]	@ (8000e08 <EXTI3_IRQHandler+0x24>)
 8000dea:	695b      	ldr	r3, [r3, #20]
 8000dec:	4a06      	ldr	r2, [pc, #24]	@ (8000e08 <EXTI3_IRQHandler+0x24>)
 8000dee:	f043 0308 	orr.w	r3, r3, #8
 8000df2:	6153      	str	r3, [r2, #20]
 8000df4:	4b05      	ldr	r3, [pc, #20]	@ (8000e0c <EXTI3_IRQHandler+0x28>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d003      	beq.n	8000e04 <EXTI3_IRQHandler+0x20>
 8000dfc:	4b03      	ldr	r3, [pc, #12]	@ (8000e0c <EXTI3_IRQHandler+0x28>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	2003      	movs	r0, #3
 8000e02:	4798      	blx	r3
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40010400 	.word	0x40010400
 8000e0c:	20000458 	.word	0x20000458

08000e10 <EXTI4_IRQHandler>:
 void EXTI4_IRQHandler(void) {EXTI->PR |= (1 << 4); if (EXTI_Callbacks[4]) EXTI_Callbacks[4](4);}
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	4b07      	ldr	r3, [pc, #28]	@ (8000e34 <EXTI4_IRQHandler+0x24>)
 8000e16:	695b      	ldr	r3, [r3, #20]
 8000e18:	4a06      	ldr	r2, [pc, #24]	@ (8000e34 <EXTI4_IRQHandler+0x24>)
 8000e1a:	f043 0310 	orr.w	r3, r3, #16
 8000e1e:	6153      	str	r3, [r2, #20]
 8000e20:	4b05      	ldr	r3, [pc, #20]	@ (8000e38 <EXTI4_IRQHandler+0x28>)
 8000e22:	691b      	ldr	r3, [r3, #16]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d003      	beq.n	8000e30 <EXTI4_IRQHandler+0x20>
 8000e28:	4b03      	ldr	r3, [pc, #12]	@ (8000e38 <EXTI4_IRQHandler+0x28>)
 8000e2a:	691b      	ldr	r3, [r3, #16]
 8000e2c:	2004      	movs	r0, #4
 8000e2e:	4798      	blx	r3
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40010400 	.word	0x40010400
 8000e38:	20000458 	.word	0x20000458

08000e3c <EXTI9_5_IRQHandler>:
 //Must find which pin in 5-9 range triggered handler
 void EXTI9_5_IRQHandler(void) {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
     for (uint8_t i = 5; i <= 9; i++) {
 8000e42:	2305      	movs	r3, #5
 8000e44:	71fb      	strb	r3, [r7, #7]
 8000e46:	e022      	b.n	8000e8e <EXTI9_5_IRQHandler+0x52>
         if (EXTI->PR & (1 << i)) {
 8000e48:	4b15      	ldr	r3, [pc, #84]	@ (8000ea0 <EXTI9_5_IRQHandler+0x64>)
 8000e4a:	695b      	ldr	r3, [r3, #20]
 8000e4c:	79fa      	ldrb	r2, [r7, #7]
 8000e4e:	2101      	movs	r1, #1
 8000e50:	fa01 f202 	lsl.w	r2, r1, r2
 8000e54:	4013      	ands	r3, r2
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d016      	beq.n	8000e88 <EXTI9_5_IRQHandler+0x4c>
             EXTI->PR |= (1 << i);  // Clear pending flag
 8000e5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ea0 <EXTI9_5_IRQHandler+0x64>)
 8000e5c:	695b      	ldr	r3, [r3, #20]
 8000e5e:	79fa      	ldrb	r2, [r7, #7]
 8000e60:	2101      	movs	r1, #1
 8000e62:	fa01 f202 	lsl.w	r2, r1, r2
 8000e66:	4611      	mov	r1, r2
 8000e68:	4a0d      	ldr	r2, [pc, #52]	@ (8000ea0 <EXTI9_5_IRQHandler+0x64>)
 8000e6a:	430b      	orrs	r3, r1
 8000e6c:	6153      	str	r3, [r2, #20]
             if (EXTI_Callbacks[i]) EXTI_Callbacks[i](i);  // Call user-defined function
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	4a0c      	ldr	r2, [pc, #48]	@ (8000ea4 <EXTI9_5_IRQHandler+0x68>)
 8000e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d006      	beq.n	8000e88 <EXTI9_5_IRQHandler+0x4c>
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	4a09      	ldr	r2, [pc, #36]	@ (8000ea4 <EXTI9_5_IRQHandler+0x68>)
 8000e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e82:	79fa      	ldrb	r2, [r7, #7]
 8000e84:	4610      	mov	r0, r2
 8000e86:	4798      	blx	r3
     for (uint8_t i = 5; i <= 9; i++) {
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	71fb      	strb	r3, [r7, #7]
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	2b09      	cmp	r3, #9
 8000e92:	d9d9      	bls.n	8000e48 <EXTI9_5_IRQHandler+0xc>
         }
     }
 }
 8000e94:	bf00      	nop
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40010400 	.word	0x40010400
 8000ea4:	20000458 	.word	0x20000458

08000ea8 <EXTI15_10_IRQHandler>:

 void EXTI15_10_IRQHandler(void) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
     for (uint8_t i = 10; i <= 15; i++) {
 8000eae:	230a      	movs	r3, #10
 8000eb0:	71fb      	strb	r3, [r7, #7]
 8000eb2:	e022      	b.n	8000efa <EXTI15_10_IRQHandler+0x52>
         if (EXTI->PR & (1 << i)) {
 8000eb4:	4b15      	ldr	r3, [pc, #84]	@ (8000f0c <EXTI15_10_IRQHandler+0x64>)
 8000eb6:	695b      	ldr	r3, [r3, #20]
 8000eb8:	79fa      	ldrb	r2, [r7, #7]
 8000eba:	2101      	movs	r1, #1
 8000ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d016      	beq.n	8000ef4 <EXTI15_10_IRQHandler+0x4c>
             EXTI->PR |= (1 << i);  // Clear pending flag
 8000ec6:	4b11      	ldr	r3, [pc, #68]	@ (8000f0c <EXTI15_10_IRQHandler+0x64>)
 8000ec8:	695b      	ldr	r3, [r3, #20]
 8000eca:	79fa      	ldrb	r2, [r7, #7]
 8000ecc:	2101      	movs	r1, #1
 8000ece:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed2:	4611      	mov	r1, r2
 8000ed4:	4a0d      	ldr	r2, [pc, #52]	@ (8000f0c <EXTI15_10_IRQHandler+0x64>)
 8000ed6:	430b      	orrs	r3, r1
 8000ed8:	6153      	str	r3, [r2, #20]
             if (EXTI_Callbacks[i]) EXTI_Callbacks[i](i);  // Call user-defined function
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	4a0c      	ldr	r2, [pc, #48]	@ (8000f10 <EXTI15_10_IRQHandler+0x68>)
 8000ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d006      	beq.n	8000ef4 <EXTI15_10_IRQHandler+0x4c>
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	4a09      	ldr	r2, [pc, #36]	@ (8000f10 <EXTI15_10_IRQHandler+0x68>)
 8000eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eee:	79fa      	ldrb	r2, [r7, #7]
 8000ef0:	4610      	mov	r0, r2
 8000ef2:	4798      	blx	r3
     for (uint8_t i = 10; i <= 15; i++) {
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	71fb      	strb	r3, [r7, #7]
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	2b0f      	cmp	r3, #15
 8000efe:	d9d9      	bls.n	8000eb4 <EXTI15_10_IRQHandler+0xc>
         }
     }
 }
 8000f00:	bf00      	nop
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40010400 	.word	0x40010400
 8000f10:	20000458 	.word	0x20000458

08000f14 <enable_interupt>:



 void enable_interupt(GPIO *port_pt, uint8_t pin_index,
 					trigger_type trigger, uint8_t priority,
 					void (*interupt_handler)(uint8_t pin_index)){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	4608      	mov	r0, r1
 8000f1e:	4611      	mov	r1, r2
 8000f20:	461a      	mov	r2, r3
 8000f22:	4603      	mov	r3, r0
 8000f24:	70fb      	strb	r3, [r7, #3]
 8000f26:	460b      	mov	r3, r1
 8000f28:	70bb      	strb	r3, [r7, #2]
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	707b      	strb	r3, [r7, #1]

 	//Link interupt_handler function to appropriate EXTI_Callback
 	EXTI_Callbacks[pin_index] = interupt_handler;
 8000f2e:	78fb      	ldrb	r3, [r7, #3]
 8000f30:	493b      	ldr	r1, [pc, #236]	@ (8001020 <enable_interupt+0x10c>)
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("cpsid i" : : : "memory");
 8000f38:	b672      	cpsid	i
}
 8000f3a:	bf00      	nop
 	// Disable the interrupts while messing around with the settings
 	//  otherwise can lead to strange behaviour
 	__disable_irq();

 	// Enable the system configuration controller (SYSCFG in RCC)
 	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000f3c:	4b39      	ldr	r3, [pc, #228]	@ (8001024 <enable_interupt+0x110>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	4a38      	ldr	r2, [pc, #224]	@ (8001024 <enable_interupt+0x110>)
 8000f42:	f043 0301 	orr.w	r3, r3, #1
 8000f46:	6193      	str	r3, [r2, #24]

 	//Tell pin-0 multiplexer to target selected-port (PORT_IND)

 	//If pin 0-3 or 12-15 :

 	uint32_t exticr_shift = 4 * (pin_index % 4);
 8000f48:	78fb      	ldrb	r3, [r7, #3]
 8000f4a:	f003 0303 	and.w	r3, r3, #3
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	60fb      	str	r3, [r7, #12]
 	SYSCFG->EXTICR[pin_index / 4] &= ~(0xF << exticr_shift); // clear old bits
 8000f52:	4a35      	ldr	r2, [pc, #212]	@ (8001028 <enable_interupt+0x114>)
 8000f54:	78fb      	ldrb	r3, [r7, #3]
 8000f56:	089b      	lsrs	r3, r3, #2
 8000f58:	b2d8      	uxtb	r0, r3
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	3302      	adds	r3, #2
 8000f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f62:	210f      	movs	r1, #15
 8000f64:	68fa      	ldr	r2, [r7, #12]
 8000f66:	fa01 f202 	lsl.w	r2, r1, r2
 8000f6a:	43d2      	mvns	r2, r2
 8000f6c:	492e      	ldr	r1, [pc, #184]	@ (8001028 <enable_interupt+0x114>)
 8000f6e:	401a      	ands	r2, r3
 8000f70:	1c83      	adds	r3, r0, #2
 8000f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 	SYSCFG->EXTICR[pin_index / 4] |= (port_pt->PORT_IND << exticr_shift); // set new bits
 8000f76:	4a2c      	ldr	r2, [pc, #176]	@ (8001028 <enable_interupt+0x114>)
 8000f78:	78fb      	ldrb	r3, [r7, #3]
 8000f7a:	089b      	lsrs	r3, r3, #2
 8000f7c:	b2d8      	uxtb	r0, r3
 8000f7e:	4603      	mov	r3, r0
 8000f80:	3302      	adds	r3, #2
 8000f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	7812      	ldrb	r2, [r2, #0]
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	68fa      	ldr	r2, [r7, #12]
 8000f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f92:	4925      	ldr	r1, [pc, #148]	@ (8001028 <enable_interupt+0x114>)
 8000f94:	431a      	orrs	r2, r3
 8000f96:	1c83      	adds	r3, r0, #2
 8000f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

 	//  Select interrupt on rising/falling edge (pins are consecutive bits)
 	if (trigger==RISING_EDGE){
 8000f9c:	78bb      	ldrb	r3, [r7, #2]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d10a      	bne.n	8000fb8 <enable_interupt+0xa4>
 		//Set rising-edge
 		EXTI->RTSR |= (1 << pin_index);
 8000fa2:	4b22      	ldr	r3, [pc, #136]	@ (800102c <enable_interupt+0x118>)
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	78fa      	ldrb	r2, [r7, #3]
 8000fa8:	2101      	movs	r1, #1
 8000faa:	fa01 f202 	lsl.w	r2, r1, r2
 8000fae:	4611      	mov	r1, r2
 8000fb0:	4a1e      	ldr	r2, [pc, #120]	@ (800102c <enable_interupt+0x118>)
 8000fb2:	430b      	orrs	r3, r1
 8000fb4:	6093      	str	r3, [r2, #8]
 8000fb6:	e009      	b.n	8000fcc <enable_interupt+0xb8>
 	} else{
 		//Set falling-edge
 		EXTI->FTSR |= (1 << pin_index);
 8000fb8:	4b1c      	ldr	r3, [pc, #112]	@ (800102c <enable_interupt+0x118>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	78fa      	ldrb	r2, [r7, #3]
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc4:	4611      	mov	r1, r2
 8000fc6:	4a19      	ldr	r2, [pc, #100]	@ (800102c <enable_interupt+0x118>)
 8000fc8:	430b      	orrs	r3, r1
 8000fca:	60d3      	str	r3, [r2, #12]
 	}


 	// set the interrupt from EXTI line x as 'not masked' - as in, enable it.
 	EXTI->IMR |= (1 << pin_index);
 8000fcc:	4b17      	ldr	r3, [pc, #92]	@ (800102c <enable_interupt+0x118>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	78fa      	ldrb	r2, [r7, #3]
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd8:	4611      	mov	r1, r2
 8000fda:	4a14      	ldr	r2, [pc, #80]	@ (800102c <enable_interupt+0x118>)
 8000fdc:	430b      	orrs	r3, r1
 8000fde:	6013      	str	r3, [r2, #0]

 	// Tell the NVIC module that EXTIx interrupts should be handled

 	//Pins 0-4 have a seperate request-num (from 6-10),
 	//pins 5-9 are all at 23, and pins 10-15 are at 40
 	uint8_t req_num = (pin_index <= 4) ? (6 + pin_index) :
 8000fe0:	78fb      	ldrb	r3, [r7, #3]
 8000fe2:	2b04      	cmp	r3, #4
 8000fe4:	d803      	bhi.n	8000fee <enable_interupt+0xda>
 8000fe6:	78fb      	ldrb	r3, [r7, #3]
 8000fe8:	3306      	adds	r3, #6
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	e005      	b.n	8000ffa <enable_interupt+0xe6>
 8000fee:	78fb      	ldrb	r3, [r7, #3]
 8000ff0:	2b09      	cmp	r3, #9
 8000ff2:	d801      	bhi.n	8000ff8 <enable_interupt+0xe4>
 8000ff4:	2317      	movs	r3, #23
 8000ff6:	e000      	b.n	8000ffa <enable_interupt+0xe6>
 8000ff8:	2328      	movs	r3, #40	@ 0x28
 8000ffa:	72fb      	strb	r3, [r7, #11]
 					  (pin_index <= 9) ? 23 : 40;

 	NVIC_SetPriority(req_num, priority);  // Set Priority
 8000ffc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001000:	787a      	ldrb	r2, [r7, #1]
 8001002:	4611      	mov	r1, r2
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff fd4d 	bl	8000aa4 <__NVIC_SetPriority>
 	NVIC_EnableIRQ(req_num);
 800100a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fd2a 	bl	8000a68 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001014:	b662      	cpsie	i
}
 8001016:	bf00      	nop

 	// Re-enable all interrupts (now that we are finished)
 	__enable_irq();

 }
 8001018:	bf00      	nop
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000458 	.word	0x20000458
 8001024:	40021000 	.word	0x40021000
 8001028:	40010000 	.word	0x40010000
 800102c:	40010400 	.word	0x40010400

08001030 <init_door_manager>:
} doorManagerObj;
*/


//Init door-managing object
doorManagerObj *init_door_manager(uint8_t door_count, float *master_angle_pt, servoDriverObj *driver_pt, uint8_t driver_i_offset){
 8001030:	b590      	push	{r4, r7, lr}
 8001032:	b087      	sub	sp, #28
 8001034:	af00      	add	r7, sp, #0
 8001036:	60b9      	str	r1, [r7, #8]
 8001038:	607a      	str	r2, [r7, #4]
 800103a:	461a      	mov	r2, r3
 800103c:	4603      	mov	r3, r0
 800103e:	73fb      	strb	r3, [r7, #15]
 8001040:	4613      	mov	r3, r2
 8001042:	73bb      	strb	r3, [r7, #14]
	//Allocate memory for door-manager
	doorManagerObj *door_manager_pt = malloc(sizeof(doorManagerObj));
 8001044:	2008      	movs	r0, #8
 8001046:	f003 fe25 	bl	8004c94 <malloc>
 800104a:	4603      	mov	r3, r0
 800104c:	613b      	str	r3, [r7, #16]

	door_manager_pt->door_objs = malloc(sizeof(doorObj *) * door_count);
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4618      	mov	r0, r3
 8001054:	f003 fe1e 	bl	8004c94 <malloc>
 8001058:	4603      	mov	r3, r0
 800105a:	461a      	mov	r2, r3
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	601a      	str	r2, [r3, #0]

	//Number of doors under management
	door_manager_pt->door_count = door_count;
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	7bfa      	ldrb	r2, [r7, #15]
 8001064:	711a      	strb	r2, [r3, #4]
	//Initially none of the doors are enslaved (STABLE 0.0 default)
	door_manager_pt->curr_enslaved_i = -1;
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	22ff      	movs	r2, #255	@ 0xff
 800106a:	715a      	strb	r2, [r3, #5]

	//Enable appropriate channels on servo-driver (driver_i_offset is base index)
	servo_driver_en_chans(driver_pt, driver_i_offset, driver_i_offset + door_count-1);
 800106c:	7bba      	ldrb	r2, [r7, #14]
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	4413      	add	r3, r2
 8001072:	b2db      	uxtb	r3, r3
 8001074:	3b01      	subs	r3, #1
 8001076:	b2da      	uxtb	r2, r3
 8001078:	7bbb      	ldrb	r3, [r7, #14]
 800107a:	4619      	mov	r1, r3
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f000 f9b9 	bl	80013f4 <servo_driver_en_chans>

	//Populate door-objs
	for (uint8_t i=0; i<door_count; i++){
 8001082:	2300      	movs	r3, #0
 8001084:	75fb      	strb	r3, [r7, #23]
 8001086:	e012      	b.n	80010ae <init_door_manager+0x7e>
		//Note: driver_i_offset is the starting index of servos in driver (ascending series)
		door_manager_pt->door_objs[i] = init_door(master_angle_pt, driver_pt, i + driver_i_offset);
 8001088:	7dfa      	ldrb	r2, [r7, #23]
 800108a:	7bbb      	ldrb	r3, [r7, #14]
 800108c:	4413      	add	r3, r2
 800108e:	b2d9      	uxtb	r1, r3
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	7dfb      	ldrb	r3, [r7, #23]
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	18d4      	adds	r4, r2, r3
 800109a:	460a      	mov	r2, r1
 800109c:	6879      	ldr	r1, [r7, #4]
 800109e:	68b8      	ldr	r0, [r7, #8]
 80010a0:	f000 f885 	bl	80011ae <init_door>
 80010a4:	4603      	mov	r3, r0
 80010a6:	6023      	str	r3, [r4, #0]
	for (uint8_t i=0; i<door_count; i++){
 80010a8:	7dfb      	ldrb	r3, [r7, #23]
 80010aa:	3301      	adds	r3, #1
 80010ac:	75fb      	strb	r3, [r7, #23]
 80010ae:	7dfa      	ldrb	r2, [r7, #23]
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d3e8      	bcc.n	8001088 <init_door_manager+0x58>
	}


	return door_manager_pt;
 80010b6:	693b      	ldr	r3, [r7, #16]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	371c      	adds	r7, #28
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd90      	pop	{r4, r7, pc}

080010c0 <door_manager_set_enslaved>:


//Change the currently enslaved door
void door_manager_set_enslaved(doorManagerObj *door_manager_pt, uint8_t door_i){
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	460b      	mov	r3, r1
 80010ca:	70fb      	strb	r3, [r7, #3]
	//Check if queried index is within legal-range
	if (0 <= door_i && door_i < door_manager_pt->door_count){
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	791b      	ldrb	r3, [r3, #4]
 80010d0:	78fa      	ldrb	r2, [r7, #3]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d217      	bcs.n	8001106 <door_manager_set_enslaved+0x46>

		//Set previously enslaved door to stable-state (only if necessary)
		if (door_manager_pt->curr_enslaved_i != (uint8_t) -1){
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	795b      	ldrb	r3, [r3, #5]
 80010da:	2bff      	cmp	r3, #255	@ 0xff
 80010dc:	d008      	beq.n	80010f0 <door_manager_set_enslaved+0x30>
			door_manager_pt->door_objs[ door_manager_pt->curr_enslaved_i ]->state = STABLE;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	795b      	ldrb	r3, [r3, #5]
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	4413      	add	r3, r2
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2200      	movs	r2, #0
 80010ee:	715a      	strb	r2, [r3, #5]
		}

		//Set specified door's index to enslaved-state
		door_manager_pt->door_objs[ door_i ]->state = ENSLAVED;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	78fb      	ldrb	r3, [r7, #3]
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4413      	add	r3, r2
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2202      	movs	r2, #2
 80010fe:	715a      	strb	r2, [r3, #5]

		//Update index of currently-enslaved door
		door_manager_pt->curr_enslaved_i = door_i;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	78fa      	ldrb	r2, [r7, #3]
 8001104:	715a      	strb	r2, [r3, #5]

	}


}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
	...

08001114 <door_manager_set_angle>:

//Set door at specified index to stable state (at a given angle)
void door_manager_set_angle(doorManagerObj *door_manager_pt, uint8_t door_i, float angle){
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	460b      	mov	r3, r1
 800111e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001122:	72fb      	strb	r3, [r7, #11]
	//Check if queried index is within legal-range
	if (0 <= door_i && door_i < door_manager_pt->door_count){
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	791b      	ldrb	r3, [r3, #4]
 8001128:	7afa      	ldrb	r2, [r7, #11]
 800112a:	429a      	cmp	r2, r3
 800112c:	d21c      	bcs.n	8001168 <door_manager_set_angle+0x54>
		if (0.0f <= angle && angle <= 80.0f){
 800112e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001132:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800113a:	da00      	bge.n	800113e <door_manager_set_angle+0x2a>
			door_set_angle_stable(door_manager_pt->door_objs[ door_i ], angle);
		}
	}
}
 800113c:	e014      	b.n	8001168 <door_manager_set_angle+0x54>
		if (0.0f <= angle && angle <= 80.0f){
 800113e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001142:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001170 <door_manager_set_angle+0x5c>
 8001146:	eef4 7ac7 	vcmpe.f32	s15, s14
 800114a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114e:	d900      	bls.n	8001152 <door_manager_set_angle+0x3e>
}
 8001150:	e00a      	b.n	8001168 <door_manager_set_angle+0x54>
			door_set_angle_stable(door_manager_pt->door_objs[ door_i ], angle);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	7afb      	ldrb	r3, [r7, #11]
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4413      	add	r3, r2
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001162:	4618      	mov	r0, r3
 8001164:	f000 f840 	bl	80011e8 <door_set_angle_stable>
}
 8001168:	bf00      	nop
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	42a00000 	.word	0x42a00000

08001174 <door_manager_update>:

}


//Update (and actuate) the state of each door under management
void door_manager_update(doorManagerObj *door_manager_pt){
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0; i<door_manager_pt->door_count; i++){
 800117c:	2300      	movs	r3, #0
 800117e:	73fb      	strb	r3, [r7, #15]
 8001180:	e00b      	b.n	800119a <door_manager_update+0x26>
		door_update(door_manager_pt->door_objs[i]);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4413      	add	r3, r2
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f000 f83c 	bl	800120c <door_update>
	for (uint8_t i=0; i<door_manager_pt->door_count; i++){
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	3301      	adds	r3, #1
 8001198:	73fb      	strb	r3, [r7, #15]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	791b      	ldrb	r3, [r3, #4]
 800119e:	7bfa      	ldrb	r2, [r7, #15]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d3ee      	bcc.n	8001182 <door_manager_update+0xe>
	}
}
 80011a4:	bf00      	nop
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <init_door>:
extern const float STEP_SIZE = 1.0/STEP_COUNT;



//doorObj initialiser
doorObj *init_door(float *parent_angle_pt, servoDriverObj *driver_pt, uint8_t servo_index){
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b086      	sub	sp, #24
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	60f8      	str	r0, [r7, #12]
 80011b6:	60b9      	str	r1, [r7, #8]
 80011b8:	4613      	mov	r3, r2
 80011ba:	71fb      	strb	r3, [r7, #7]

    //Allocate mem for door
    doorObj *door_pt = malloc(sizeof(doorObj));
 80011bc:	201c      	movs	r0, #28
 80011be:	f003 fd69 	bl	8004c94 <malloc>
 80011c2:	4603      	mov	r3, r0
 80011c4:	617b      	str	r3, [r7, #20]

    door_pt->driver_pt = driver_pt;
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	68ba      	ldr	r2, [r7, #8]
 80011ca:	601a      	str	r2, [r3, #0]
    //Index of servo-channel that controls door
    door_pt->servo_index = servo_index;
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	79fa      	ldrb	r2, [r7, #7]
 80011d0:	711a      	strb	r2, [r3, #4]

    //Init state
    door_pt->state = STABLE;
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	2200      	movs	r2, #0
 80011d6:	715a      	strb	r2, [r3, #5]

    door_pt->parent_angle_pt = parent_angle_pt;
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	609a      	str	r2, [r3, #8]

    return door_pt;
 80011de:	697b      	ldr	r3, [r7, #20]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3718      	adds	r7, #24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <door_set_angle_stable>:


//Set angle of door's servo (and state to stable)
void door_set_angle_stable(doorObj *door_pt, float angle){
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	ed87 0a00 	vstr	s0, [r7]
    door_pt->state = STABLE;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	715a      	strb	r2, [r3, #5]
    door_pt->stable_angle = angle;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	683a      	ldr	r2, [r7, #0]
 80011fe:	60da      	str	r2, [r3, #12]
    return;
 8001200:	bf00      	nop
}
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <door_update>:
    //FIX!!!!!!!
    return;
}


void door_update(doorObj *door_pt){
 800120c:	b5b0      	push	{r4, r5, r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
    switch (door_pt->state){
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	795b      	ldrb	r3, [r3, #5]
 8001218:	2b02      	cmp	r3, #2
 800121a:	d025      	beq.n	8001268 <door_update+0x5c>
 800121c:	2b02      	cmp	r3, #2
 800121e:	dc7b      	bgt.n	8001318 <door_update+0x10c>
 8001220:	2b00      	cmp	r3, #0
 8001222:	d002      	beq.n	800122a <door_update+0x1e>
 8001224:	2b01      	cmp	r3, #1
 8001226:	d038      	beq.n	800129a <door_update+0x8e>
                door_set_angle_stable(door_pt, door_pt->end_angle);
            }
            break;
    }

    return;
 8001228:	e076      	b.n	8001318 <door_update+0x10c>
            if (servo_driver_query_angle(door_pt->driver_pt, door_pt->servo_index) != door_pt->stable_angle){
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	791b      	ldrb	r3, [r3, #4]
 8001232:	4619      	mov	r1, r3
 8001234:	4610      	mov	r0, r2
 8001236:	f000 f997 	bl	8001568 <servo_driver_query_angle>
 800123a:	eeb0 7a40 	vmov.f32	s14, s0
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	edd3 7a03 	vldr	s15, [r3, #12]
 8001244:	eeb4 7a67 	vcmp.f32	s14, s15
 8001248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124c:	d062      	beq.n	8001314 <door_update+0x108>
                servo_driver_set_angle(door_pt->driver_pt, door_pt->servo_index, door_pt->stable_angle);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	7919      	ldrb	r1, [r3, #4]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	edd3 7a03 	vldr	s15, [r3, #12]
 800125c:	eeb0 0a67 	vmov.f32	s0, s15
 8001260:	4610      	mov	r0, r2
 8001262:	f000 f8fb 	bl	800145c <servo_driver_set_angle>
            break;
 8001266:	e055      	b.n	8001314 <door_update+0x108>
        	servo_driver_set_angle(door_pt->driver_pt, door_pt->servo_index,
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681c      	ldr	r4, [r3, #0]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	791d      	ldrb	r5, [r3, #4]
                            clamp(*(door_pt->parent_angle_pt), 0.0, 90.0));
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
        	servo_driver_set_angle(door_pt->driver_pt, door_pt->servo_index,
 8001274:	edd3 7a00 	vldr	s15, [r3]
 8001278:	ed9f 1a29 	vldr	s2, [pc, #164]	@ 8001320 <door_update+0x114>
 800127c:	eddf 0a29 	vldr	s1, [pc, #164]	@ 8001324 <door_update+0x118>
 8001280:	eeb0 0a67 	vmov.f32	s0, s15
 8001284:	f000 f9b3 	bl	80015ee <clamp>
 8001288:	eef0 7a40 	vmov.f32	s15, s0
 800128c:	eeb0 0a67 	vmov.f32	s0, s15
 8001290:	4629      	mov	r1, r5
 8001292:	4620      	mov	r0, r4
 8001294:	f000 f8e2 	bl	800145c <servo_driver_set_angle>
            break;
 8001298:	e03d      	b.n	8001316 <door_update+0x10a>
        	servo_driver_set_angle(door_pt->driver_pt, door_pt->servo_index,
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681c      	ldr	r4, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	791d      	ldrb	r5, [r3, #4]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	edd3 7a06 	vldr	s15, [r3, #24]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	ed93 7a04 	vldr	s14, [r3, #16]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	edd3 6a05 	vldr	s13, [r3, #20]
 80012b4:	eddf 1a1c 	vldr	s3, [pc, #112]	@ 8001328 <door_update+0x11c>
 80012b8:	eeb0 1a66 	vmov.f32	s2, s13
 80012bc:	eef0 0a47 	vmov.f32	s1, s14
 80012c0:	eeb0 0a67 	vmov.f32	s0, s15
 80012c4:	f000 f9bc 	bl	8001640 <bezier1D>
 80012c8:	eef0 7a40 	vmov.f32	s15, s0
 80012cc:	eeb0 0a67 	vmov.f32	s0, s15
 80012d0:	4629      	mov	r1, r5
 80012d2:	4620      	mov	r0, r4
 80012d4:	f000 f8c2 	bl	800145c <servo_driver_set_angle>
            door_pt->anim_t += STEP_SIZE;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	edd3 7a06 	vldr	s15, [r3, #24]
 80012de:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800132c <door_update+0x120>
 80012e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	edc3 7a06 	vstr	s15, [r3, #24]
            if (door_pt->anim_t >= 1.0){
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	edd3 7a06 	vldr	s15, [r3, #24]
 80012f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80012f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012fe:	da00      	bge.n	8001302 <door_update+0xf6>
            break;
 8001300:	e009      	b.n	8001316 <door_update+0x10a>
                door_set_angle_stable(door_pt, door_pt->end_angle);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	edd3 7a05 	vldr	s15, [r3, #20]
 8001308:	eeb0 0a67 	vmov.f32	s0, s15
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff ff6b 	bl	80011e8 <door_set_angle_stable>
            break;
 8001312:	e000      	b.n	8001316 <door_update+0x10a>
            break;
 8001314:	bf00      	nop
    return;
 8001316:	bf00      	nop
 8001318:	bf00      	nop
}
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bdb0      	pop	{r4, r5, r7, pc}
 8001320:	42b40000 	.word	0x42b40000
 8001324:	00000000 	.word	0x00000000
 8001328:	3e99999a 	.word	0x3e99999a
 800132c:	3c23d70a 	.word	0x3c23d70a

08001330 <init_servo_driver>:




//Servo-driver is represented in object form to allow multiple chained devices (16-boards < )
servoDriverObj *init_servo_driver(uint8_t i2c_adr){
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	71fb      	strb	r3, [r7, #7]
    //Allocate obj-mem
    servoDriverObj *driver_pt = malloc(sizeof(servoDriverObj));
 800133a:	2088      	movs	r0, #136	@ 0x88
 800133c:	f003 fcaa 	bl	8004c94 <malloc>
 8001340:	4603      	mov	r3, r0
 8001342:	613b      	str	r3, [r7, #16]

    //Asign devices I2C address (probably =0x40)
    driver_pt->i2c_adr = i2c_adr;
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	79fa      	ldrb	r2, [r7, #7]
 8001348:	701a      	strb	r2, [r3, #0]


    //Configure device
	//For 50hz PWM output: prescale = 25MHz / (4096 × 50Hz) - 1 ≈ 121
	uint8_t prescale = 121;
 800134a:	2379      	movs	r3, #121	@ 0x79
 800134c:	73fb      	strb	r3, [r7, #15]
	servo_driver_write_reg(driver_pt, MODE1, 0x10);       // Sleep
 800134e:	2210      	movs	r2, #16
 8001350:	2100      	movs	r1, #0
 8001352:	6938      	ldr	r0, [r7, #16]
 8001354:	f000 f82e 	bl	80013b4 <servo_driver_write_reg>
	servo_driver_write_reg(driver_pt, PRESCALE, prescale);
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	461a      	mov	r2, r3
 800135c:	21fe      	movs	r1, #254	@ 0xfe
 800135e:	6938      	ldr	r0, [r7, #16]
 8001360:	f000 f828 	bl	80013b4 <servo_driver_write_reg>
	servo_driver_write_reg(driver_pt, MODE1, 0xA1);       // Restart + auto-increment
 8001364:	22a1      	movs	r2, #161	@ 0xa1
 8001366:	2100      	movs	r1, #0
 8001368:	6938      	ldr	r0, [r7, #16]
 800136a:	f000 f823 	bl	80013b4 <servo_driver_write_reg>


    //Init empty enable-mask (no active servos)
    driver_pt->chan_en_mask = 0;
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	2200      	movs	r2, #0
 8001372:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84

    //Populate servo-data (0 default)
    for (int i=0; i<16; i++){
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]
 800137a:	e013      	b.n	80013a4 <init_servo_driver+0x74>
        driver_pt->servo_angles[i] = 0;
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4413      	add	r3, r2
 8001384:	3304      	adds	r3, #4
 8001386:	f04f 0200 	mov.w	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
        driver_pt->servo_angle_offsets[i] = 0;
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	3310      	adds	r3, #16
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	4413      	add	r3, r2
 8001396:	3304      	adds	r3, #4
 8001398:	f04f 0200 	mov.w	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
    for (int i=0; i<16; i++){
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	3301      	adds	r3, #1
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	2b0f      	cmp	r3, #15
 80013a8:	dde8      	ble.n	800137c <init_servo_driver+0x4c>
    }

    return driver_pt;
 80013aa:	693b      	ldr	r3, [r7, #16]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <servo_driver_write_reg>:




//Write a register in driver
void servo_driver_write_reg(servoDriverObj *driver_pt, uint8_t reg, uint8_t data) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af04      	add	r7, sp, #16
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	460b      	mov	r3, r1
 80013be:	70fb      	strb	r3, [r7, #3]
 80013c0:	4613      	mov	r3, r2
 80013c2:	70bb      	strb	r3, [r7, #2]
    HAL_I2C_Mem_Write(&hi2c1, (driver_pt->i2c_adr << 1), reg, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	b299      	uxth	r1, r3
 80013cc:	78fb      	ldrb	r3, [r7, #3]
 80013ce:	b29a      	uxth	r2, r3
 80013d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013d4:	9302      	str	r3, [sp, #8]
 80013d6:	2301      	movs	r3, #1
 80013d8:	9301      	str	r3, [sp, #4]
 80013da:	1cbb      	adds	r3, r7, #2
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	2301      	movs	r3, #1
 80013e0:	4803      	ldr	r0, [pc, #12]	@ (80013f0 <servo_driver_write_reg+0x3c>)
 80013e2:	f000 fd77 	bl	8001ed4 <HAL_I2C_Mem_Write>
    return;
 80013e6:	bf00      	nop
}
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000078 	.word	0x20000078

080013f4 <servo_driver_en_chans>:

//Enable specified servo-channels (will automatically actuate angle)

//ADD DISABLE!!!!

void servo_driver_en_chans(servoDriverObj *driver_pt, uint8_t chan_index_l, uint8_t chan_index_h){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	460b      	mov	r3, r1
 80013fe:	70fb      	strb	r3, [r7, #3]
 8001400:	4613      	mov	r3, r2
 8001402:	70bb      	strb	r3, [r7, #2]
    //Set enable-bits for selected servo-chans
    for (int i = chan_index_l; i < chan_index_h + 1; i++){
 8001404:	78fb      	ldrb	r3, [r7, #3]
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	e01f      	b.n	800144a <servo_driver_en_chans+0x56>
        driver_pt->chan_en_mask |= (1 << i);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 8001410:	b21a      	sxth	r2, r3
 8001412:	2101      	movs	r1, #1
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	fa01 f303 	lsl.w	r3, r1, r3
 800141a:	b21b      	sxth	r3, r3
 800141c:	4313      	orrs	r3, r2
 800141e:	b21b      	sxth	r3, r3
 8001420:	b29a      	uxth	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84
        //Actuate angle
        servo_driver_set_angle(driver_pt, i, driver_pt->servo_angles[i]);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	b2d9      	uxtb	r1, r3
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	3304      	adds	r3, #4
 8001436:	edd3 7a00 	vldr	s15, [r3]
 800143a:	eeb0 0a67 	vmov.f32	s0, s15
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 f80c 	bl	800145c <servo_driver_set_angle>
    for (int i = chan_index_l; i < chan_index_h + 1; i++){
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	3301      	adds	r3, #1
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	78bb      	ldrb	r3, [r7, #2]
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	429a      	cmp	r2, r3
 8001450:	dddb      	ble.n	800140a <servo_driver_en_chans+0x16>
    }

    return;
 8001452:	bf00      	nop
}
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <servo_driver_set_angle>:




//Set angle of servo on specified channel
void servo_driver_set_angle(servoDriverObj *driver_pt, uint8_t chan_index, float angle){
 800145c:	b580      	push	{r7, lr}
 800145e:	b088      	sub	sp, #32
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	460b      	mov	r3, r1
 8001466:	ed87 0a01 	vstr	s0, [r7, #4]
 800146a:	72fb      	strb	r3, [r7, #11]
	//Update servo-state
	driver_pt->servo_angles[chan_index] = angle;
 800146c:	7afb      	ldrb	r3, [r7, #11]
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	3304      	adds	r3, #4
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	601a      	str	r2, [r3, #0]


	//Don't actuate the updated angle if the channel isn't enabled
	if ((driver_pt->chan_en_mask & (1 << chan_index)) == 0){
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 8001480:	461a      	mov	r2, r3
 8001482:	7afb      	ldrb	r3, [r7, #11]
 8001484:	fa42 f303 	asr.w	r3, r2, r3
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	2b00      	cmp	r3, #0
 800148e:	d05d      	beq.n	800154c <servo_driver_set_angle+0xf0>
		return;
	}

	//Apply calibration offset
	float true_angle = 180.0f - (driver_pt->servo_angle_offsets[chan_index] + angle + 90.0f);
 8001490:	7afb      	ldrb	r3, [r7, #11]
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	3310      	adds	r3, #16
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4413      	add	r3, r2
 800149a:	3304      	adds	r3, #4
 800149c:	ed93 7a00 	vldr	s14, [r3]
 80014a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80014a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014a8:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001554 <servo_driver_set_angle+0xf8>
 80014ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014b0:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8001558 <servo_driver_set_angle+0xfc>
 80014b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014b8:	edc7 7a07 	vstr	s15, [r7, #28]

    //Map angle to tick count (0-180 deg  ->  150-500 ticks)
	uint16_t num_ticks = (uint16_t) map_range( clamp(true_angle, 0.0, 180.0), 0, 180, 500, 150);
 80014bc:	ed9f 1a26 	vldr	s2, [pc, #152]	@ 8001558 <servo_driver_set_angle+0xfc>
 80014c0:	eddf 0a26 	vldr	s1, [pc, #152]	@ 800155c <servo_driver_set_angle+0x100>
 80014c4:	ed97 0a07 	vldr	s0, [r7, #28]
 80014c8:	f000 f891 	bl	80015ee <clamp>
 80014cc:	eef0 7a40 	vmov.f32	s15, s0
 80014d0:	ed9f 2a23 	vldr	s4, [pc, #140]	@ 8001560 <servo_driver_set_angle+0x104>
 80014d4:	eddf 1a23 	vldr	s3, [pc, #140]	@ 8001564 <servo_driver_set_angle+0x108>
 80014d8:	ed9f 1a1f 	vldr	s2, [pc, #124]	@ 8001558 <servo_driver_set_angle+0xfc>
 80014dc:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 800155c <servo_driver_set_angle+0x100>
 80014e0:	eeb0 0a67 	vmov.f32	s0, s15
 80014e4:	f000 f855 	bl	8001592 <map_range>
 80014e8:	eef0 7a40 	vmov.f32	s15, s0
 80014ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014f0:	ee17 3a90 	vmov	r3, s15
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	82bb      	strh	r3, [r7, #20]

	//Pointer to the lower 8-bits of tick-count
	uint8_t *tick_pt = (uint8_t *) &num_ticks;
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	61bb      	str	r3, [r7, #24]

	//Address of pwm_registers for specified channel
	uint8_t pwm_base_reg = 0x06 + chan_index*4;
 80014fe:	7afb      	ldrb	r3, [r7, #11]
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	b2db      	uxtb	r3, r3
 8001504:	3306      	adds	r3, #6
 8001506:	75fb      	strb	r3, [r7, #23]

	//Write lower and higher reg for tick-count
	servo_driver_write_reg(driver_pt, pwm_base_reg, 0x00);
 8001508:	7dfb      	ldrb	r3, [r7, #23]
 800150a:	2200      	movs	r2, #0
 800150c:	4619      	mov	r1, r3
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	f7ff ff50 	bl	80013b4 <servo_driver_write_reg>
	servo_driver_write_reg(driver_pt, pwm_base_reg + 1, 0x00);
 8001514:	7dfb      	ldrb	r3, [r7, #23]
 8001516:	3301      	adds	r3, #1
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2200      	movs	r2, #0
 800151c:	4619      	mov	r1, r3
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	f7ff ff48 	bl	80013b4 <servo_driver_write_reg>
	servo_driver_write_reg(driver_pt, pwm_base_reg + 2, *tick_pt);
 8001524:	7dfb      	ldrb	r3, [r7, #23]
 8001526:	3302      	adds	r3, #2
 8001528:	b2d9      	uxtb	r1, r3
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	461a      	mov	r2, r3
 8001530:	68f8      	ldr	r0, [r7, #12]
 8001532:	f7ff ff3f 	bl	80013b4 <servo_driver_write_reg>
	servo_driver_write_reg(driver_pt, pwm_base_reg + 3, *(tick_pt + 1));
 8001536:	7dfb      	ldrb	r3, [r7, #23]
 8001538:	3303      	adds	r3, #3
 800153a:	b2d9      	uxtb	r1, r3
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	3301      	adds	r3, #1
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	461a      	mov	r2, r3
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	f7ff ff35 	bl	80013b4 <servo_driver_write_reg>


	return;
 800154a:	e000      	b.n	800154e <servo_driver_set_angle+0xf2>
		return;
 800154c:	bf00      	nop
}
 800154e:	3720      	adds	r7, #32
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	42b40000 	.word	0x42b40000
 8001558:	43340000 	.word	0x43340000
 800155c:	00000000 	.word	0x00000000
 8001560:	43160000 	.word	0x43160000
 8001564:	43fa0000 	.word	0x43fa0000

08001568 <servo_driver_query_angle>:



//Returns the angle-state of a specified servo
float servo_driver_query_angle(servoDriverObj *driver_pt, uint8_t chan_index){
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	70fb      	strb	r3, [r7, #3]
	return driver_pt->servo_angles[chan_index];
 8001574:	78fb      	ldrb	r3, [r7, #3]
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4413      	add	r3, r2
 800157c:	3304      	adds	r3, #4
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	ee07 3a90 	vmov	s15, r3
}
 8001584:	eeb0 0a67 	vmov.f32	s0, s15
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <map_range>:
#include "utils.h"

float map_range(float val, float in_min, float in_max, float out_min, float out_max){
 8001592:	b480      	push	{r7}
 8001594:	b087      	sub	sp, #28
 8001596:	af00      	add	r7, sp, #0
 8001598:	ed87 0a05 	vstr	s0, [r7, #20]
 800159c:	edc7 0a04 	vstr	s1, [r7, #16]
 80015a0:	ed87 1a03 	vstr	s2, [r7, #12]
 80015a4:	edc7 1a02 	vstr	s3, [r7, #8]
 80015a8:	ed87 2a01 	vstr	s4, [r7, #4]
	return out_min + (val - in_min)/(in_max - in_min) * (out_max - out_min);
 80015ac:	ed97 7a05 	vldr	s14, [r7, #20]
 80015b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80015b4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80015b8:	ed97 7a03 	vldr	s14, [r7, #12]
 80015bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80015c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80015c8:	edd7 6a01 	vldr	s13, [r7, #4]
 80015cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80015d0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80015d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80015dc:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80015e0:	eeb0 0a67 	vmov.f32	s0, s15
 80015e4:	371c      	adds	r7, #28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <clamp>:

//Utility functions
float clamp(float val, float min, float max){    return val < min ? min : (max < val ? max : val);
 80015ee:	b480      	push	{r7}
 80015f0:	b085      	sub	sp, #20
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	ed87 0a03 	vstr	s0, [r7, #12]
 80015f8:	edc7 0a02 	vstr	s1, [r7, #8]
 80015fc:	ed87 1a01 	vstr	s2, [r7, #4]
 8001600:	ed97 7a03 	vldr	s14, [r7, #12]
 8001604:	edd7 7a02 	vldr	s15, [r7, #8]
 8001608:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800160c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001610:	d501      	bpl.n	8001616 <clamp+0x28>
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	e00b      	b.n	800162e <clamp+0x40>
 8001616:	ed97 7a01 	vldr	s14, [r7, #4]
 800161a:	edd7 7a03 	vldr	s15, [r7, #12]
 800161e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001626:	d501      	bpl.n	800162c <clamp+0x3e>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	e000      	b.n	800162e <clamp+0x40>
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	ee07 3a90 	vmov	s15, r3
}
 8001632:	eeb0 0a67 	vmov.f32	s0, s15
 8001636:	3714      	adds	r7, #20
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <bezier1D>:
float bezier1D(float t, float P0, float P3, float K) {
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af00      	add	r7, sp, #0
 8001646:	ed87 0a03 	vstr	s0, [r7, #12]
 800164a:	edc7 0a02 	vstr	s1, [r7, #8]
 800164e:	ed87 1a01 	vstr	s2, [r7, #4]
 8001652:	edc7 1a00 	vstr	s3, [r7]
    //Handle-offset A as a proportion K of the range

	//Clamp t within legal-range
	t = clamp(t, 0.0, 1.0);
 8001656:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 800165a:	eddf 0a39 	vldr	s1, [pc, #228]	@ 8001740 <bezier1D+0x100>
 800165e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001662:	f7ff ffc4 	bl	80015ee <clamp>
 8001666:	ed87 0a03 	vstr	s0, [r7, #12]

    float A = (P3 - P0)*K;
 800166a:	ed97 7a01 	vldr	s14, [r7, #4]
 800166e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001672:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001676:	ed97 7a00 	vldr	s14, [r7]
 800167a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800167e:	edc7 7a07 	vstr	s15, [r7, #28]

    //Calculate the inner-handle positions
    float P1 = P0 + A;
 8001682:	ed97 7a02 	vldr	s14, [r7, #8]
 8001686:	edd7 7a07 	vldr	s15, [r7, #28]
 800168a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800168e:	edc7 7a06 	vstr	s15, [r7, #24]
    float P2 = P3 - A;
 8001692:	ed97 7a01 	vldr	s14, [r7, #4]
 8001696:	edd7 7a07 	vldr	s15, [r7, #28]
 800169a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800169e:	edc7 7a05 	vstr	s15, [r7, #20]

    //Calculate bezier-value at position t
    float u = 1.0 - t;
 80016a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80016a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80016aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016ae:	edc7 7a04 	vstr	s15, [r7, #16]
    return
        u*u*u * P0 +
 80016b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80016b6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80016ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80016be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80016c6:	ee27 7a27 	vmul.f32	s14, s14, s15
        3 * u*u * t * P1 +
 80016ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80016ce:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 80016d2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80016d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80016da:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016de:	edd7 7a03 	vldr	s15, [r7, #12]
 80016e2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80016ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
        u*u*u * P0 +
 80016ee:	ee37 7a27 	vadd.f32	s14, s14, s15
        3 * u * t*t * P2 +
 80016f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80016f6:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 80016fa:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80016fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001702:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001706:	edd7 7a03 	vldr	s15, [r7, #12]
 800170a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800170e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001712:	ee66 7aa7 	vmul.f32	s15, s13, s15
        3 * u*u * t * P1 +
 8001716:	ee37 7a27 	vadd.f32	s14, s14, s15
        t*t*t * P3;
 800171a:	edd7 7a03 	vldr	s15, [r7, #12]
 800171e:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001722:	edd7 7a03 	vldr	s15, [r7, #12]
 8001726:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800172a:	edd7 7a01 	vldr	s15, [r7, #4]
 800172e:	ee66 7aa7 	vmul.f32	s15, s13, s15
        3 * u * t*t * P2 +
 8001732:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001736:	eeb0 0a67 	vmov.f32	s0, s15
 800173a:	3720      	adds	r7, #32
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	00000000 	.word	0x00000000

08001744 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001744:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800177c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001748:	f7ff f97c 	bl	8000a44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800174c:	480c      	ldr	r0, [pc, #48]	@ (8001780 <LoopForever+0x6>)
  ldr r1, =_edata
 800174e:	490d      	ldr	r1, [pc, #52]	@ (8001784 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001750:	4a0d      	ldr	r2, [pc, #52]	@ (8001788 <LoopForever+0xe>)
  movs r3, #0
 8001752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001754:	e002      	b.n	800175c <LoopCopyDataInit>

08001756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800175a:	3304      	adds	r3, #4

0800175c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800175c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800175e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001760:	d3f9      	bcc.n	8001756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001762:	4a0a      	ldr	r2, [pc, #40]	@ (800178c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001764:	4c0a      	ldr	r4, [pc, #40]	@ (8001790 <LoopForever+0x16>)
  movs r3, #0
 8001766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001768:	e001      	b.n	800176e <LoopFillZerobss>

0800176a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800176a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800176c:	3204      	adds	r2, #4

0800176e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800176e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001770:	d3fb      	bcc.n	800176a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001772:	f003 fb63 	bl	8004e3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001776:	f7fe fd39 	bl	80001ec <main>

0800177a <LoopForever>:

LoopForever:
    b LoopForever
 800177a:	e7fe      	b.n	800177a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800177c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001784:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001788:	08004f00 	.word	0x08004f00
  ldr r2, =_sbss
 800178c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001790:	200005e4 	.word	0x200005e4

08001794 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001794:	e7fe      	b.n	8001794 <ADC1_2_IRQHandler>
	...

08001798 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800179c:	4b08      	ldr	r3, [pc, #32]	@ (80017c0 <HAL_Init+0x28>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a07      	ldr	r2, [pc, #28]	@ (80017c0 <HAL_Init+0x28>)
 80017a2:	f043 0310 	orr.w	r3, r3, #16
 80017a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a8:	2003      	movs	r0, #3
 80017aa:	f000 f931 	bl	8001a10 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ae:	2000      	movs	r0, #0
 80017b0:	f000 f808 	bl	80017c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b4:	f7fe ff9e 	bl	80006f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40022000 	.word	0x40022000

080017c4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017cc:	4b12      	ldr	r3, [pc, #72]	@ (8001818 <HAL_InitTick+0x54>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4b12      	ldr	r3, [pc, #72]	@ (800181c <HAL_InitTick+0x58>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	4619      	mov	r1, r3
 80017d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017da:	fbb3 f3f1 	udiv	r3, r3, r1
 80017de:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 f93b 	bl	8001a5e <HAL_SYSTICK_Config>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e00e      	b.n	8001810 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b0f      	cmp	r3, #15
 80017f6:	d80a      	bhi.n	800180e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f8:	2200      	movs	r2, #0
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001800:	f000 f911 	bl	8001a26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001804:	4a06      	ldr	r2, [pc, #24]	@ (8001820 <HAL_InitTick+0x5c>)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	e000      	b.n	8001810 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
}
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000000 	.word	0x20000000
 800181c:	20000008 	.word	0x20000008
 8001820:	20000004 	.word	0x20000004

08001824 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001828:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <HAL_IncTick+0x20>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	461a      	mov	r2, r3
 800182e:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <HAL_IncTick+0x24>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4413      	add	r3, r2
 8001834:	4a04      	ldr	r2, [pc, #16]	@ (8001848 <HAL_IncTick+0x24>)
 8001836:	6013      	str	r3, [r2, #0]
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	20000008 	.word	0x20000008
 8001848:	20000498 	.word	0x20000498

0800184c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001850:	4b03      	ldr	r3, [pc, #12]	@ (8001860 <HAL_GetTick+0x14>)
 8001852:	681b      	ldr	r3, [r3, #0]
}
 8001854:	4618      	mov	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	20000498 	.word	0x20000498

08001864 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800186c:	f7ff ffee 	bl	800184c <HAL_GetTick>
 8001870:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800187c:	d005      	beq.n	800188a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800187e:	4b0a      	ldr	r3, [pc, #40]	@ (80018a8 <HAL_Delay+0x44>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	461a      	mov	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	4413      	add	r3, r2
 8001888:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800188a:	bf00      	nop
 800188c:	f7ff ffde 	bl	800184c <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	429a      	cmp	r2, r3
 800189a:	d8f7      	bhi.n	800188c <HAL_Delay+0x28>
  {
  }
}
 800189c:	bf00      	nop
 800189e:	bf00      	nop
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000008 	.word	0x20000008

080018ac <__NVIC_SetPriorityGrouping>:
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018bc:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <__NVIC_SetPriorityGrouping+0x44>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018c8:	4013      	ands	r3, r2
 80018ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018de:	4a04      	ldr	r2, [pc, #16]	@ (80018f0 <__NVIC_SetPriorityGrouping+0x44>)
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	60d3      	str	r3, [r2, #12]
}
 80018e4:	bf00      	nop
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <__NVIC_GetPriorityGrouping>:
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f8:	4b04      	ldr	r3, [pc, #16]	@ (800190c <__NVIC_GetPriorityGrouping+0x18>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	0a1b      	lsrs	r3, r3, #8
 80018fe:	f003 0307 	and.w	r3, r3, #7
}
 8001902:	4618      	mov	r0, r3
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <__NVIC_SetPriority>:
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	6039      	str	r1, [r7, #0]
 800191a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800191c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001920:	2b00      	cmp	r3, #0
 8001922:	db0a      	blt.n	800193a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	b2da      	uxtb	r2, r3
 8001928:	490c      	ldr	r1, [pc, #48]	@ (800195c <__NVIC_SetPriority+0x4c>)
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	0112      	lsls	r2, r2, #4
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	440b      	add	r3, r1
 8001934:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001938:	e00a      	b.n	8001950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	b2da      	uxtb	r2, r3
 800193e:	4908      	ldr	r1, [pc, #32]	@ (8001960 <__NVIC_SetPriority+0x50>)
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	f003 030f 	and.w	r3, r3, #15
 8001946:	3b04      	subs	r3, #4
 8001948:	0112      	lsls	r2, r2, #4
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	440b      	add	r3, r1
 800194e:	761a      	strb	r2, [r3, #24]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000e100 	.word	0xe000e100
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001964:	b480      	push	{r7}
 8001966:	b089      	sub	sp, #36	@ 0x24
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	f1c3 0307 	rsb	r3, r3, #7
 800197e:	2b04      	cmp	r3, #4
 8001980:	bf28      	it	cs
 8001982:	2304      	movcs	r3, #4
 8001984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3304      	adds	r3, #4
 800198a:	2b06      	cmp	r3, #6
 800198c:	d902      	bls.n	8001994 <NVIC_EncodePriority+0x30>
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3b03      	subs	r3, #3
 8001992:	e000      	b.n	8001996 <NVIC_EncodePriority+0x32>
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001998:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43da      	mvns	r2, r3
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	401a      	ands	r2, r3
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019ac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	fa01 f303 	lsl.w	r3, r1, r3
 80019b6:	43d9      	mvns	r1, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019bc:	4313      	orrs	r3, r2
         );
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3724      	adds	r7, #36	@ 0x24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019dc:	d301      	bcc.n	80019e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019de:	2301      	movs	r3, #1
 80019e0:	e00f      	b.n	8001a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019e2:	4a0a      	ldr	r2, [pc, #40]	@ (8001a0c <SysTick_Config+0x40>)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ea:	210f      	movs	r1, #15
 80019ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019f0:	f7ff ff8e 	bl	8001910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f4:	4b05      	ldr	r3, [pc, #20]	@ (8001a0c <SysTick_Config+0x40>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019fa:	4b04      	ldr	r3, [pc, #16]	@ (8001a0c <SysTick_Config+0x40>)
 80019fc:	2207      	movs	r2, #7
 80019fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	e000e010 	.word	0xe000e010

08001a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff ff47 	bl	80018ac <__NVIC_SetPriorityGrouping>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b086      	sub	sp, #24
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	607a      	str	r2, [r7, #4]
 8001a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a38:	f7ff ff5c 	bl	80018f4 <__NVIC_GetPriorityGrouping>
 8001a3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	68b9      	ldr	r1, [r7, #8]
 8001a42:	6978      	ldr	r0, [r7, #20]
 8001a44:	f7ff ff8e 	bl	8001964 <NVIC_EncodePriority>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a4e:	4611      	mov	r1, r2
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff5d 	bl	8001910 <__NVIC_SetPriority>
}
 8001a56:	bf00      	nop
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff ffb0 	bl	80019cc <SysTick_Config>
 8001a6c:	4603      	mov	r3, r0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b087      	sub	sp, #28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a86:	e154      	b.n	8001d32 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	fa01 f303 	lsl.w	r3, r1, r3
 8001a94:	4013      	ands	r3, r2
 8001a96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f000 8146 	beq.w	8001d2c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 0303 	and.w	r3, r3, #3
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d005      	beq.n	8001ab8 <HAL_GPIO_Init+0x40>
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d130      	bne.n	8001b1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	2203      	movs	r2, #3
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4013      	ands	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	68da      	ldr	r2, [r3, #12]
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aee:	2201      	movs	r2, #1
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43db      	mvns	r3, r3
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	4013      	ands	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	091b      	lsrs	r3, r3, #4
 8001b04:	f003 0201 	and.w	r2, r3, #1
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 0303 	and.w	r3, r3, #3
 8001b22:	2b03      	cmp	r3, #3
 8001b24:	d017      	beq.n	8001b56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	2203      	movs	r2, #3
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43db      	mvns	r3, r3
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f003 0303 	and.w	r3, r3, #3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d123      	bne.n	8001baa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	08da      	lsrs	r2, r3, #3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	3208      	adds	r2, #8
 8001b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	220f      	movs	r2, #15
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	4013      	ands	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	691a      	ldr	r2, [r3, #16]
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	08da      	lsrs	r2, r3, #3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3208      	adds	r2, #8
 8001ba4:	6939      	ldr	r1, [r7, #16]
 8001ba6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	2203      	movs	r2, #3
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f003 0203 	and.w	r2, r3, #3
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 80a0 	beq.w	8001d2c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bec:	4b58      	ldr	r3, [pc, #352]	@ (8001d50 <HAL_GPIO_Init+0x2d8>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	4a57      	ldr	r2, [pc, #348]	@ (8001d50 <HAL_GPIO_Init+0x2d8>)
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	6193      	str	r3, [r2, #24]
 8001bf8:	4b55      	ldr	r3, [pc, #340]	@ (8001d50 <HAL_GPIO_Init+0x2d8>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	60bb      	str	r3, [r7, #8]
 8001c02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c04:	4a53      	ldr	r2, [pc, #332]	@ (8001d54 <HAL_GPIO_Init+0x2dc>)
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	089b      	lsrs	r3, r3, #2
 8001c0a:	3302      	adds	r3, #2
 8001c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	f003 0303 	and.w	r3, r3, #3
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	220f      	movs	r2, #15
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	4013      	ands	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c2e:	d019      	beq.n	8001c64 <HAL_GPIO_Init+0x1ec>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a49      	ldr	r2, [pc, #292]	@ (8001d58 <HAL_GPIO_Init+0x2e0>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d013      	beq.n	8001c60 <HAL_GPIO_Init+0x1e8>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a48      	ldr	r2, [pc, #288]	@ (8001d5c <HAL_GPIO_Init+0x2e4>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d00d      	beq.n	8001c5c <HAL_GPIO_Init+0x1e4>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a47      	ldr	r2, [pc, #284]	@ (8001d60 <HAL_GPIO_Init+0x2e8>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d007      	beq.n	8001c58 <HAL_GPIO_Init+0x1e0>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a46      	ldr	r2, [pc, #280]	@ (8001d64 <HAL_GPIO_Init+0x2ec>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d101      	bne.n	8001c54 <HAL_GPIO_Init+0x1dc>
 8001c50:	2304      	movs	r3, #4
 8001c52:	e008      	b.n	8001c66 <HAL_GPIO_Init+0x1ee>
 8001c54:	2305      	movs	r3, #5
 8001c56:	e006      	b.n	8001c66 <HAL_GPIO_Init+0x1ee>
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e004      	b.n	8001c66 <HAL_GPIO_Init+0x1ee>
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	e002      	b.n	8001c66 <HAL_GPIO_Init+0x1ee>
 8001c60:	2301      	movs	r3, #1
 8001c62:	e000      	b.n	8001c66 <HAL_GPIO_Init+0x1ee>
 8001c64:	2300      	movs	r3, #0
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	f002 0203 	and.w	r2, r2, #3
 8001c6c:	0092      	lsls	r2, r2, #2
 8001c6e:	4093      	lsls	r3, r2
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c76:	4937      	ldr	r1, [pc, #220]	@ (8001d54 <HAL_GPIO_Init+0x2dc>)
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	089b      	lsrs	r3, r3, #2
 8001c7c:	3302      	adds	r3, #2
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c84:	4b38      	ldr	r3, [pc, #224]	@ (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	4013      	ands	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d003      	beq.n	8001ca8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ca8:	4a2f      	ldr	r2, [pc, #188]	@ (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cae:	4b2e      	ldr	r3, [pc, #184]	@ (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001cd2:	4a25      	ldr	r2, [pc, #148]	@ (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cd8:	4b23      	ldr	r3, [pc, #140]	@ (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001cfc:	4a1a      	ldr	r2, [pc, #104]	@ (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d02:	4b19      	ldr	r3, [pc, #100]	@ (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d26:	4a10      	ldr	r2, [pc, #64]	@ (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	fa22 f303 	lsr.w	r3, r2, r3
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f47f aea3 	bne.w	8001a88 <HAL_GPIO_Init+0x10>
  }
}
 8001d42:	bf00      	nop
 8001d44:	bf00      	nop
 8001d46:	371c      	adds	r7, #28
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40010000 	.word	0x40010000
 8001d58:	48000400 	.word	0x48000400
 8001d5c:	48000800 	.word	0x48000800
 8001d60:	48000c00 	.word	0x48000c00
 8001d64:	48001000 	.word	0x48001000
 8001d68:	40010400 	.word	0x40010400

08001d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	807b      	strh	r3, [r7, #2]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d7c:	787b      	ldrb	r3, [r7, #1]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d82:	887a      	ldrh	r2, [r7, #2]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d88:	e002      	b.n	8001d90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d8a:	887a      	ldrh	r2, [r7, #2]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e08d      	b.n	8001eca <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d106      	bne.n	8001dc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7fe fcba 	bl	800073c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2224      	movs	r2, #36	@ 0x24
 8001dcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0201 	bic.w	r2, r2, #1
 8001dde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001dec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001dfc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d107      	bne.n	8001e16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	e006      	b.n	8001e24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001e22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d108      	bne.n	8001e3e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	685a      	ldr	r2, [r3, #4]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e3a:	605a      	str	r2, [r3, #4]
 8001e3c:	e007      	b.n	8001e4e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	6812      	ldr	r2, [r2, #0]
 8001e58:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68da      	ldr	r2, [r3, #12]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	691a      	ldr	r2, [r3, #16]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69d9      	ldr	r1, [r3, #28]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a1a      	ldr	r2, [r3, #32]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f042 0201 	orr.w	r2, r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2220      	movs	r2, #32
 8001eb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af02      	add	r7, sp, #8
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	4608      	mov	r0, r1
 8001ede:	4611      	mov	r1, r2
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	817b      	strh	r3, [r7, #10]
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	813b      	strh	r3, [r7, #8]
 8001eea:	4613      	mov	r3, r2
 8001eec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b20      	cmp	r3, #32
 8001ef8:	f040 80f9 	bne.w	80020ee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001efc:	6a3b      	ldr	r3, [r7, #32]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d002      	beq.n	8001f08 <HAL_I2C_Mem_Write+0x34>
 8001f02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d105      	bne.n	8001f14 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f0e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e0ed      	b.n	80020f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d101      	bne.n	8001f22 <HAL_I2C_Mem_Write+0x4e>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	e0e6      	b.n	80020f0 <HAL_I2C_Mem_Write+0x21c>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f2a:	f7ff fc8f 	bl	800184c <HAL_GetTick>
 8001f2e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	2319      	movs	r3, #25
 8001f36:	2201      	movs	r2, #1
 8001f38:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f000 f955 	bl	80021ec <I2C_WaitOnFlagUntilTimeout>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e0d1      	b.n	80020f0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2221      	movs	r2, #33	@ 0x21
 8001f50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2240      	movs	r2, #64	@ 0x40
 8001f58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6a3a      	ldr	r2, [r7, #32]
 8001f66:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001f6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f74:	88f8      	ldrh	r0, [r7, #6]
 8001f76:	893a      	ldrh	r2, [r7, #8]
 8001f78:	8979      	ldrh	r1, [r7, #10]
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	9301      	str	r3, [sp, #4]
 8001f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	4603      	mov	r3, r0
 8001f84:	68f8      	ldr	r0, [r7, #12]
 8001f86:	f000 f8b9 	bl	80020fc <I2C_RequestMemoryWrite>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d005      	beq.n	8001f9c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e0a9      	b.n	80020f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	2bff      	cmp	r3, #255	@ 0xff
 8001fa4:	d90e      	bls.n	8001fc4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	22ff      	movs	r2, #255	@ 0xff
 8001faa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	8979      	ldrh	r1, [r7, #10]
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f000 fad9 	bl	8002574 <I2C_TransferConfig>
 8001fc2:	e00f      	b.n	8001fe4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	8979      	ldrh	r1, [r7, #10]
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f000 fac8 	bl	8002574 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	f000 f958 	bl	800229e <I2C_WaitOnTXISFlagUntilTimeout>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e07b      	b.n	80020f0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffc:	781a      	ldrb	r2, [r3, #0]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002008:	1c5a      	adds	r2, r3, #1
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002012:	b29b      	uxth	r3, r3
 8002014:	3b01      	subs	r3, #1
 8002016:	b29a      	uxth	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002020:	3b01      	subs	r3, #1
 8002022:	b29a      	uxth	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800202c:	b29b      	uxth	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d034      	beq.n	800209c <HAL_I2C_Mem_Write+0x1c8>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002036:	2b00      	cmp	r3, #0
 8002038:	d130      	bne.n	800209c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002040:	2200      	movs	r2, #0
 8002042:	2180      	movs	r1, #128	@ 0x80
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f000 f8d1 	bl	80021ec <I2C_WaitOnFlagUntilTimeout>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e04d      	b.n	80020f0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002058:	b29b      	uxth	r3, r3
 800205a:	2bff      	cmp	r3, #255	@ 0xff
 800205c:	d90e      	bls.n	800207c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	22ff      	movs	r2, #255	@ 0xff
 8002062:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002068:	b2da      	uxtb	r2, r3
 800206a:	8979      	ldrh	r1, [r7, #10]
 800206c:	2300      	movs	r3, #0
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f000 fa7d 	bl	8002574 <I2C_TransferConfig>
 800207a:	e00f      	b.n	800209c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002080:	b29a      	uxth	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800208a:	b2da      	uxtb	r2, r3
 800208c:	8979      	ldrh	r1, [r7, #10]
 800208e:	2300      	movs	r3, #0
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f000 fa6c 	bl	8002574 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d19e      	bne.n	8001fe4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f000 f93e 	bl	800232c <I2C_WaitOnSTOPFlagUntilTimeout>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e01a      	b.n	80020f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2220      	movs	r2, #32
 80020c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6859      	ldr	r1, [r3, #4]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	4b0a      	ldr	r3, [pc, #40]	@ (80020f8 <HAL_I2C_Mem_Write+0x224>)
 80020ce:	400b      	ands	r3, r1
 80020d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2220      	movs	r2, #32
 80020d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80020ea:	2300      	movs	r3, #0
 80020ec:	e000      	b.n	80020f0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80020ee:	2302      	movs	r3, #2
  }
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	fe00e800 	.word	0xfe00e800

080020fc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af02      	add	r7, sp, #8
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	4608      	mov	r0, r1
 8002106:	4611      	mov	r1, r2
 8002108:	461a      	mov	r2, r3
 800210a:	4603      	mov	r3, r0
 800210c:	817b      	strh	r3, [r7, #10]
 800210e:	460b      	mov	r3, r1
 8002110:	813b      	strh	r3, [r7, #8]
 8002112:	4613      	mov	r3, r2
 8002114:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002116:	88fb      	ldrh	r3, [r7, #6]
 8002118:	b2da      	uxtb	r2, r3
 800211a:	8979      	ldrh	r1, [r7, #10]
 800211c:	4b20      	ldr	r3, [pc, #128]	@ (80021a0 <I2C_RequestMemoryWrite+0xa4>)
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f000 fa25 	bl	8002574 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800212a:	69fa      	ldr	r2, [r7, #28]
 800212c:	69b9      	ldr	r1, [r7, #24]
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f000 f8b5 	bl	800229e <I2C_WaitOnTXISFlagUntilTimeout>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e02c      	b.n	8002198 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800213e:	88fb      	ldrh	r3, [r7, #6]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d105      	bne.n	8002150 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002144:	893b      	ldrh	r3, [r7, #8]
 8002146:	b2da      	uxtb	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	629a      	str	r2, [r3, #40]	@ 0x28
 800214e:	e015      	b.n	800217c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002150:	893b      	ldrh	r3, [r7, #8]
 8002152:	0a1b      	lsrs	r3, r3, #8
 8002154:	b29b      	uxth	r3, r3
 8002156:	b2da      	uxtb	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800215e:	69fa      	ldr	r2, [r7, #28]
 8002160:	69b9      	ldr	r1, [r7, #24]
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f000 f89b 	bl	800229e <I2C_WaitOnTXISFlagUntilTimeout>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e012      	b.n	8002198 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002172:	893b      	ldrh	r3, [r7, #8]
 8002174:	b2da      	uxtb	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	2200      	movs	r2, #0
 8002184:	2180      	movs	r1, #128	@ 0x80
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f000 f830 	bl	80021ec <I2C_WaitOnFlagUntilTimeout>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e000      	b.n	8002198 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	80002000 	.word	0x80002000

080021a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d103      	bne.n	80021c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2200      	movs	r2, #0
 80021c0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d007      	beq.n	80021e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	699a      	ldr	r2, [r3, #24]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 0201 	orr.w	r2, r2, #1
 80021de:	619a      	str	r2, [r3, #24]
  }
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	603b      	str	r3, [r7, #0]
 80021f8:	4613      	mov	r3, r2
 80021fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021fc:	e03b      	b.n	8002276 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	6839      	ldr	r1, [r7, #0]
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 f8d6 	bl	80023b4 <I2C_IsErrorOccurred>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e041      	b.n	8002296 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002218:	d02d      	beq.n	8002276 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800221a:	f7ff fb17 	bl	800184c <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	429a      	cmp	r2, r3
 8002228:	d302      	bcc.n	8002230 <I2C_WaitOnFlagUntilTimeout+0x44>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d122      	bne.n	8002276 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	699a      	ldr	r2, [r3, #24]
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	4013      	ands	r3, r2
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	429a      	cmp	r2, r3
 800223e:	bf0c      	ite	eq
 8002240:	2301      	moveq	r3, #1
 8002242:	2300      	movne	r3, #0
 8002244:	b2db      	uxtb	r3, r3
 8002246:	461a      	mov	r2, r3
 8002248:	79fb      	ldrb	r3, [r7, #7]
 800224a:	429a      	cmp	r2, r3
 800224c:	d113      	bne.n	8002276 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002252:	f043 0220 	orr.w	r2, r3, #32
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2220      	movs	r2, #32
 800225e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e00f      	b.n	8002296 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	699a      	ldr	r2, [r3, #24]
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	4013      	ands	r3, r2
 8002280:	68ba      	ldr	r2, [r7, #8]
 8002282:	429a      	cmp	r2, r3
 8002284:	bf0c      	ite	eq
 8002286:	2301      	moveq	r3, #1
 8002288:	2300      	movne	r3, #0
 800228a:	b2db      	uxtb	r3, r3
 800228c:	461a      	mov	r2, r3
 800228e:	79fb      	ldrb	r3, [r7, #7]
 8002290:	429a      	cmp	r2, r3
 8002292:	d0b4      	beq.n	80021fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b084      	sub	sp, #16
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	60f8      	str	r0, [r7, #12]
 80022a6:	60b9      	str	r1, [r7, #8]
 80022a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022aa:	e033      	b.n	8002314 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	68b9      	ldr	r1, [r7, #8]
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f000 f87f 	bl	80023b4 <I2C_IsErrorOccurred>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e031      	b.n	8002324 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80022c6:	d025      	beq.n	8002314 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022c8:	f7ff fac0 	bl	800184c <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d302      	bcc.n	80022de <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d11a      	bne.n	8002314 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d013      	beq.n	8002314 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f0:	f043 0220 	orr.w	r2, r3, #32
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2220      	movs	r2, #32
 80022fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e007      	b.n	8002324 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b02      	cmp	r3, #2
 8002320:	d1c4      	bne.n	80022ac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002338:	e02f      	b.n	800239a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	68b9      	ldr	r1, [r7, #8]
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f000 f838 	bl	80023b4 <I2C_IsErrorOccurred>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e02d      	b.n	80023aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800234e:	f7ff fa7d 	bl	800184c <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	68ba      	ldr	r2, [r7, #8]
 800235a:	429a      	cmp	r2, r3
 800235c:	d302      	bcc.n	8002364 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d11a      	bne.n	800239a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	f003 0320 	and.w	r3, r3, #32
 800236e:	2b20      	cmp	r3, #32
 8002370:	d013      	beq.n	800239a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002376:	f043 0220 	orr.w	r2, r3, #32
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2220      	movs	r2, #32
 8002382:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e007      	b.n	80023aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	f003 0320 	and.w	r3, r3, #32
 80023a4:	2b20      	cmp	r3, #32
 80023a6:	d1c8      	bne.n	800233a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
	...

080023b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b08a      	sub	sp, #40	@ 0x28
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023c0:	2300      	movs	r3, #0
 80023c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80023ce:	2300      	movs	r3, #0
 80023d0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	f003 0310 	and.w	r3, r3, #16
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d068      	beq.n	80024b2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2210      	movs	r2, #16
 80023e6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023e8:	e049      	b.n	800247e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023f0:	d045      	beq.n	800247e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80023f2:	f7ff fa2b 	bl	800184c <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d302      	bcc.n	8002408 <I2C_IsErrorOccurred+0x54>
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d13a      	bne.n	800247e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002412:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800241a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002426:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800242a:	d121      	bne.n	8002470 <I2C_IsErrorOccurred+0xbc>
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002432:	d01d      	beq.n	8002470 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002434:	7cfb      	ldrb	r3, [r7, #19]
 8002436:	2b20      	cmp	r3, #32
 8002438:	d01a      	beq.n	8002470 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002448:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800244a:	f7ff f9ff 	bl	800184c <HAL_GetTick>
 800244e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002450:	e00e      	b.n	8002470 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002452:	f7ff f9fb 	bl	800184c <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b19      	cmp	r3, #25
 800245e:	d907      	bls.n	8002470 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	f043 0320 	orr.w	r3, r3, #32
 8002466:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800246e:	e006      	b.n	800247e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	f003 0320 	and.w	r3, r3, #32
 800247a:	2b20      	cmp	r3, #32
 800247c:	d1e9      	bne.n	8002452 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	f003 0320 	and.w	r3, r3, #32
 8002488:	2b20      	cmp	r3, #32
 800248a:	d003      	beq.n	8002494 <I2C_IsErrorOccurred+0xe0>
 800248c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0aa      	beq.n	80023ea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002494:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002498:	2b00      	cmp	r3, #0
 800249a:	d103      	bne.n	80024a4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2220      	movs	r2, #32
 80024a2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80024a4:	6a3b      	ldr	r3, [r7, #32]
 80024a6:	f043 0304 	orr.w	r3, r3, #4
 80024aa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00b      	beq.n	80024dc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80024c4:	6a3b      	ldr	r3, [r7, #32]
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00b      	beq.n	80024fe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	f043 0308 	orr.w	r3, r3, #8
 80024ec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00b      	beq.n	8002520 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002508:	6a3b      	ldr	r3, [r7, #32]
 800250a:	f043 0302 	orr.w	r3, r3, #2
 800250e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002518:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002520:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002524:	2b00      	cmp	r3, #0
 8002526:	d01c      	beq.n	8002562 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f7ff fe3b 	bl	80021a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6859      	ldr	r1, [r3, #4]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	4b0d      	ldr	r3, [pc, #52]	@ (8002570 <I2C_IsErrorOccurred+0x1bc>)
 800253a:	400b      	ands	r3, r1
 800253c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002542:	6a3b      	ldr	r3, [r7, #32]
 8002544:	431a      	orrs	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2220      	movs	r2, #32
 800254e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002562:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002566:	4618      	mov	r0, r3
 8002568:	3728      	adds	r7, #40	@ 0x28
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	fe00e800 	.word	0xfe00e800

08002574 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002574:	b480      	push	{r7}
 8002576:	b087      	sub	sp, #28
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	607b      	str	r3, [r7, #4]
 800257e:	460b      	mov	r3, r1
 8002580:	817b      	strh	r3, [r7, #10]
 8002582:	4613      	mov	r3, r2
 8002584:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002586:	897b      	ldrh	r3, [r7, #10]
 8002588:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800258c:	7a7b      	ldrb	r3, [r7, #9]
 800258e:	041b      	lsls	r3, r3, #16
 8002590:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002594:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800259a:	6a3b      	ldr	r3, [r7, #32]
 800259c:	4313      	orrs	r3, r2
 800259e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80025a2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	6a3b      	ldr	r3, [r7, #32]
 80025ac:	0d5b      	lsrs	r3, r3, #21
 80025ae:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80025b2:	4b08      	ldr	r3, [pc, #32]	@ (80025d4 <I2C_TransferConfig+0x60>)
 80025b4:	430b      	orrs	r3, r1
 80025b6:	43db      	mvns	r3, r3
 80025b8:	ea02 0103 	and.w	r1, r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	697a      	ldr	r2, [r7, #20]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80025c6:	bf00      	nop
 80025c8:	371c      	adds	r7, #28
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	03ff63ff 	.word	0x03ff63ff

080025d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b20      	cmp	r3, #32
 80025ec:	d138      	bne.n	8002660 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d101      	bne.n	80025fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80025f8:	2302      	movs	r3, #2
 80025fa:	e032      	b.n	8002662 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2224      	movs	r2, #36	@ 0x24
 8002608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 0201 	bic.w	r2, r2, #1
 800261a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800262a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6819      	ldr	r1, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0201 	orr.w	r2, r2, #1
 800264a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2220      	movs	r2, #32
 8002650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800265c:	2300      	movs	r3, #0
 800265e:	e000      	b.n	8002662 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002660:	2302      	movs	r3, #2
  }
}
 8002662:	4618      	mov	r0, r3
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800266e:	b480      	push	{r7}
 8002670:	b085      	sub	sp, #20
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
 8002676:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b20      	cmp	r3, #32
 8002682:	d139      	bne.n	80026f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800268a:	2b01      	cmp	r3, #1
 800268c:	d101      	bne.n	8002692 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800268e:	2302      	movs	r3, #2
 8002690:	e033      	b.n	80026fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2224      	movs	r2, #36	@ 0x24
 800269e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 0201 	bic.w	r2, r2, #1
 80026b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80026c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	021b      	lsls	r3, r3, #8
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f042 0201 	orr.w	r2, r2, #1
 80026e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2220      	movs	r2, #32
 80026e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80026f4:	2300      	movs	r3, #0
 80026f6:	e000      	b.n	80026fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80026f8:	2302      	movs	r3, #2
  }
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b084      	sub	sp, #16
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e0b9      	b.n	800288c <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	d106      	bne.n	8002732 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f7fe f8df 	bl	80008f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2203      	movs	r2, #3
 8002736:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f002 fa6e 	bl	8004c20 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002744:	2300      	movs	r3, #0
 8002746:	73fb      	strb	r3, [r7, #15]
 8002748:	e03e      	b.n	80027c8 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800274a:	7bfa      	ldrb	r2, [r7, #15]
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	4613      	mov	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	440b      	add	r3, r1
 8002758:	3311      	adds	r3, #17
 800275a:	2201      	movs	r2, #1
 800275c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800275e:	7bfa      	ldrb	r2, [r7, #15]
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	4613      	mov	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4413      	add	r3, r2
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	440b      	add	r3, r1
 800276c:	3310      	adds	r3, #16
 800276e:	7bfa      	ldrb	r2, [r7, #15]
 8002770:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002772:	7bfa      	ldrb	r2, [r7, #15]
 8002774:	6879      	ldr	r1, [r7, #4]
 8002776:	4613      	mov	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	4413      	add	r3, r2
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	440b      	add	r3, r1
 8002780:	3313      	adds	r3, #19
 8002782:	2200      	movs	r2, #0
 8002784:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002786:	7bfa      	ldrb	r2, [r7, #15]
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	440b      	add	r3, r1
 8002794:	3320      	adds	r3, #32
 8002796:	2200      	movs	r2, #0
 8002798:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800279a:	7bfa      	ldrb	r2, [r7, #15]
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	4613      	mov	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	440b      	add	r3, r1
 80027a8:	3324      	adds	r3, #36	@ 0x24
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80027ae:	7bfb      	ldrb	r3, [r7, #15]
 80027b0:	6879      	ldr	r1, [r7, #4]
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	4613      	mov	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	440b      	add	r3, r1
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
 80027c4:	3301      	adds	r3, #1
 80027c6:	73fb      	strb	r3, [r7, #15]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	791b      	ldrb	r3, [r3, #4]
 80027cc:	7bfa      	ldrb	r2, [r7, #15]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d3bb      	bcc.n	800274a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027d2:	2300      	movs	r3, #0
 80027d4:	73fb      	strb	r3, [r7, #15]
 80027d6:	e044      	b.n	8002862 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027d8:	7bfa      	ldrb	r2, [r7, #15]
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	4613      	mov	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	440b      	add	r3, r1
 80027e6:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80027ea:	2200      	movs	r2, #0
 80027ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027ee:	7bfa      	ldrb	r2, [r7, #15]
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	4613      	mov	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	440b      	add	r3, r1
 80027fc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002800:	7bfa      	ldrb	r2, [r7, #15]
 8002802:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002804:	7bfa      	ldrb	r2, [r7, #15]
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	4613      	mov	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	440b      	add	r3, r1
 8002812:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002816:	2200      	movs	r2, #0
 8002818:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800281a:	7bfa      	ldrb	r2, [r7, #15]
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	4613      	mov	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	440b      	add	r3, r1
 8002828:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002830:	7bfa      	ldrb	r2, [r7, #15]
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	440b      	add	r3, r1
 800283e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002842:	2200      	movs	r2, #0
 8002844:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002846:	7bfa      	ldrb	r2, [r7, #15]
 8002848:	6879      	ldr	r1, [r7, #4]
 800284a:	4613      	mov	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	440b      	add	r3, r1
 8002854:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800285c:	7bfb      	ldrb	r3, [r7, #15]
 800285e:	3301      	adds	r3, #1
 8002860:	73fb      	strb	r3, [r7, #15]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	791b      	ldrb	r3, [r3, #4]
 8002866:	7bfa      	ldrb	r2, [r7, #15]
 8002868:	429a      	cmp	r2, r3
 800286a:	d3b5      	bcc.n	80027d8 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6818      	ldr	r0, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3304      	adds	r3, #4
 8002874:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002878:	f002 f9ed 	bl	8004c56 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800289a:	af00      	add	r7, sp, #0
 800289c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028a4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d102      	bne.n	80028ba <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	f001 b823 	b.w	8003900 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 817d 	beq.w	8002bca <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80028d0:	4bbc      	ldr	r3, [pc, #752]	@ (8002bc4 <HAL_RCC_OscConfig+0x330>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f003 030c 	and.w	r3, r3, #12
 80028d8:	2b04      	cmp	r3, #4
 80028da:	d00c      	beq.n	80028f6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028dc:	4bb9      	ldr	r3, [pc, #740]	@ (8002bc4 <HAL_RCC_OscConfig+0x330>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 030c 	and.w	r3, r3, #12
 80028e4:	2b08      	cmp	r3, #8
 80028e6:	d15c      	bne.n	80029a2 <HAL_RCC_OscConfig+0x10e>
 80028e8:	4bb6      	ldr	r3, [pc, #728]	@ (8002bc4 <HAL_RCC_OscConfig+0x330>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028f4:	d155      	bne.n	80029a2 <HAL_RCC_OscConfig+0x10e>
 80028f6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028fa:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002902:	fa93 f3a3 	rbit	r3, r3
 8002906:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800290a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800290e:	fab3 f383 	clz	r3, r3
 8002912:	b2db      	uxtb	r3, r3
 8002914:	095b      	lsrs	r3, r3, #5
 8002916:	b2db      	uxtb	r3, r3
 8002918:	f043 0301 	orr.w	r3, r3, #1
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b01      	cmp	r3, #1
 8002920:	d102      	bne.n	8002928 <HAL_RCC_OscConfig+0x94>
 8002922:	4ba8      	ldr	r3, [pc, #672]	@ (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	e015      	b.n	8002954 <HAL_RCC_OscConfig+0xc0>
 8002928:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800292c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002930:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002934:	fa93 f3a3 	rbit	r3, r3
 8002938:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800293c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002940:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002944:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002948:	fa93 f3a3 	rbit	r3, r3
 800294c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002950:	4b9c      	ldr	r3, [pc, #624]	@ (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002954:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002958:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800295c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002960:	fa92 f2a2 	rbit	r2, r2
 8002964:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002968:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800296c:	fab2 f282 	clz	r2, r2
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	f042 0220 	orr.w	r2, r2, #32
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	f002 021f 	and.w	r2, r2, #31
 800297c:	2101      	movs	r1, #1
 800297e:	fa01 f202 	lsl.w	r2, r1, r2
 8002982:	4013      	ands	r3, r2
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 811f 	beq.w	8002bc8 <HAL_RCC_OscConfig+0x334>
 800298a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800298e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	f040 8116 	bne.w	8002bc8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	f000 bfaf 	b.w	8003900 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029b2:	d106      	bne.n	80029c2 <HAL_RCC_OscConfig+0x12e>
 80029b4:	4b83      	ldr	r3, [pc, #524]	@ (8002bc4 <HAL_RCC_OscConfig+0x330>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a82      	ldr	r2, [pc, #520]	@ (8002bc4 <HAL_RCC_OscConfig+0x330>)
 80029ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029be:	6013      	str	r3, [r2, #0]
 80029c0:	e036      	b.n	8002a30 <HAL_RCC_OscConfig+0x19c>
 80029c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10c      	bne.n	80029ec <HAL_RCC_OscConfig+0x158>
 80029d2:	4b7c      	ldr	r3, [pc, #496]	@ (8002bc4 <HAL_RCC_OscConfig+0x330>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a7b      	ldr	r2, [pc, #492]	@ (8002bc4 <HAL_RCC_OscConfig+0x330>)
 80029d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029dc:	6013      	str	r3, [r2, #0]
 80029de:	4b79      	ldr	r3, [pc, #484]	@ (8002bc4 <HAL_RCC_OscConfig+0x330>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a78      	ldr	r2, [pc, #480]	@ (8002bc4 <HAL_RCC_OscConfig+0x330>)
 80029e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029e8:	6013      	str	r3, [r2, #0]
 80029ea:	e021      	b.n	8002a30 <HAL_RCC_OscConfig+0x19c>
 80029ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029fc:	d10c      	bne.n	8002a18 <HAL_RCC_OscConfig+0x184>
 80029fe:	4b71      	ldr	r3, [pc, #452]	@ (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a70      	ldr	r2, [pc, #448]	@ (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002a04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	4b6e      	ldr	r3, [pc, #440]	@ (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a6d      	ldr	r2, [pc, #436]	@ (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002a10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	e00b      	b.n	8002a30 <HAL_RCC_OscConfig+0x19c>
 8002a18:	4b6a      	ldr	r3, [pc, #424]	@ (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a69      	ldr	r2, [pc, #420]	@ (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002a1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a22:	6013      	str	r3, [r2, #0]
 8002a24:	4b67      	ldr	r3, [pc, #412]	@ (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a66      	ldr	r2, [pc, #408]	@ (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002a2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a2e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a30:	4b64      	ldr	r3, [pc, #400]	@ (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a34:	f023 020f 	bic.w	r2, r3, #15
 8002a38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a3c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	495f      	ldr	r1, [pc, #380]	@ (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d059      	beq.n	8002b0e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5a:	f7fe fef7 	bl	800184c <HAL_GetTick>
 8002a5e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a62:	e00a      	b.n	8002a7a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a64:	f7fe fef2 	bl	800184c <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b64      	cmp	r3, #100	@ 0x64
 8002a72:	d902      	bls.n	8002a7a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	f000 bf43 	b.w	8003900 <HAL_RCC_OscConfig+0x106c>
 8002a7a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a7e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a82:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002a86:	fa93 f3a3 	rbit	r3, r3
 8002a8a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002a8e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a92:	fab3 f383 	clz	r3, r3
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	095b      	lsrs	r3, r3, #5
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	f043 0301 	orr.w	r3, r3, #1
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d102      	bne.n	8002aac <HAL_RCC_OscConfig+0x218>
 8002aa6:	4b47      	ldr	r3, [pc, #284]	@ (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	e015      	b.n	8002ad8 <HAL_RCC_OscConfig+0x244>
 8002aac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ab0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002ab8:	fa93 f3a3 	rbit	r3, r3
 8002abc:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002ac0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ac4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002ac8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002acc:	fa93 f3a3 	rbit	r3, r3
 8002ad0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002ad4:	4b3b      	ldr	r3, [pc, #236]	@ (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002adc:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002ae0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002ae4:	fa92 f2a2 	rbit	r2, r2
 8002ae8:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002aec:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002af0:	fab2 f282 	clz	r2, r2
 8002af4:	b2d2      	uxtb	r2, r2
 8002af6:	f042 0220 	orr.w	r2, r2, #32
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	f002 021f 	and.w	r2, r2, #31
 8002b00:	2101      	movs	r1, #1
 8002b02:	fa01 f202 	lsl.w	r2, r1, r2
 8002b06:	4013      	ands	r3, r2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d0ab      	beq.n	8002a64 <HAL_RCC_OscConfig+0x1d0>
 8002b0c:	e05d      	b.n	8002bca <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0e:	f7fe fe9d 	bl	800184c <HAL_GetTick>
 8002b12:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b16:	e00a      	b.n	8002b2e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b18:	f7fe fe98 	bl	800184c <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b64      	cmp	r3, #100	@ 0x64
 8002b26:	d902      	bls.n	8002b2e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	f000 bee9 	b.w	8003900 <HAL_RCC_OscConfig+0x106c>
 8002b2e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b32:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b36:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002b3a:	fa93 f3a3 	rbit	r3, r3
 8002b3e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002b42:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b46:	fab3 f383 	clz	r3, r3
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	095b      	lsrs	r3, r3, #5
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	f043 0301 	orr.w	r3, r3, #1
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d102      	bne.n	8002b60 <HAL_RCC_OscConfig+0x2cc>
 8002b5a:	4b1a      	ldr	r3, [pc, #104]	@ (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	e015      	b.n	8002b8c <HAL_RCC_OscConfig+0x2f8>
 8002b60:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b64:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b68:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002b6c:	fa93 f3a3 	rbit	r3, r3
 8002b70:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002b74:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b78:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002b7c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002b80:	fa93 f3a3 	rbit	r3, r3
 8002b84:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002b88:	4b0e      	ldr	r3, [pc, #56]	@ (8002bc4 <HAL_RCC_OscConfig+0x330>)
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002b90:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002b94:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002b98:	fa92 f2a2 	rbit	r2, r2
 8002b9c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002ba0:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002ba4:	fab2 f282 	clz	r2, r2
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	f042 0220 	orr.w	r2, r2, #32
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	f002 021f 	and.w	r2, r2, #31
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8002bba:	4013      	ands	r3, r2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1ab      	bne.n	8002b18 <HAL_RCC_OscConfig+0x284>
 8002bc0:	e003      	b.n	8002bca <HAL_RCC_OscConfig+0x336>
 8002bc2:	bf00      	nop
 8002bc4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 817d 	beq.w	8002eda <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002be0:	4ba6      	ldr	r3, [pc, #664]	@ (8002e7c <HAL_RCC_OscConfig+0x5e8>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 030c 	and.w	r3, r3, #12
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00b      	beq.n	8002c04 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002bec:	4ba3      	ldr	r3, [pc, #652]	@ (8002e7c <HAL_RCC_OscConfig+0x5e8>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f003 030c 	and.w	r3, r3, #12
 8002bf4:	2b08      	cmp	r3, #8
 8002bf6:	d172      	bne.n	8002cde <HAL_RCC_OscConfig+0x44a>
 8002bf8:	4ba0      	ldr	r3, [pc, #640]	@ (8002e7c <HAL_RCC_OscConfig+0x5e8>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d16c      	bne.n	8002cde <HAL_RCC_OscConfig+0x44a>
 8002c04:	2302      	movs	r3, #2
 8002c06:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002c0e:	fa93 f3a3 	rbit	r3, r3
 8002c12:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002c16:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c1a:	fab3 f383 	clz	r3, r3
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	095b      	lsrs	r3, r3, #5
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	f043 0301 	orr.w	r3, r3, #1
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d102      	bne.n	8002c34 <HAL_RCC_OscConfig+0x3a0>
 8002c2e:	4b93      	ldr	r3, [pc, #588]	@ (8002e7c <HAL_RCC_OscConfig+0x5e8>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	e013      	b.n	8002c5c <HAL_RCC_OscConfig+0x3c8>
 8002c34:	2302      	movs	r3, #2
 8002c36:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002c3e:	fa93 f3a3 	rbit	r3, r3
 8002c42:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002c46:	2302      	movs	r3, #2
 8002c48:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002c4c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002c50:	fa93 f3a3 	rbit	r3, r3
 8002c54:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002c58:	4b88      	ldr	r3, [pc, #544]	@ (8002e7c <HAL_RCC_OscConfig+0x5e8>)
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002c62:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002c66:	fa92 f2a2 	rbit	r2, r2
 8002c6a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002c6e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002c72:	fab2 f282 	clz	r2, r2
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	f042 0220 	orr.w	r2, r2, #32
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	f002 021f 	and.w	r2, r2, #31
 8002c82:	2101      	movs	r1, #1
 8002c84:	fa01 f202 	lsl.w	r2, r1, r2
 8002c88:	4013      	ands	r3, r2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00a      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x410>
 8002c8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c92:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d002      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	f000 be2e 	b.w	8003900 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca4:	4b75      	ldr	r3, [pc, #468]	@ (8002e7c <HAL_RCC_OscConfig+0x5e8>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cb0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	21f8      	movs	r1, #248	@ 0xf8
 8002cba:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbe:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002cc2:	fa91 f1a1 	rbit	r1, r1
 8002cc6:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002cca:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002cce:	fab1 f181 	clz	r1, r1
 8002cd2:	b2c9      	uxtb	r1, r1
 8002cd4:	408b      	lsls	r3, r1
 8002cd6:	4969      	ldr	r1, [pc, #420]	@ (8002e7c <HAL_RCC_OscConfig+0x5e8>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cdc:	e0fd      	b.n	8002eda <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ce2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 8088 	beq.w	8002e00 <HAL_RCC_OscConfig+0x56c>
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002cfa:	fa93 f3a3 	rbit	r3, r3
 8002cfe:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002d02:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d06:	fab3 f383 	clz	r3, r3
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d10:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	461a      	mov	r2, r3
 8002d18:	2301      	movs	r3, #1
 8002d1a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1c:	f7fe fd96 	bl	800184c <HAL_GetTick>
 8002d20:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d24:	e00a      	b.n	8002d3c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d26:	f7fe fd91 	bl	800184c <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d902      	bls.n	8002d3c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	f000 bde2 	b.w	8003900 <HAL_RCC_OscConfig+0x106c>
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d42:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002d46:	fa93 f3a3 	rbit	r3, r3
 8002d4a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002d4e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d52:	fab3 f383 	clz	r3, r3
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	095b      	lsrs	r3, r3, #5
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	f043 0301 	orr.w	r3, r3, #1
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d102      	bne.n	8002d6c <HAL_RCC_OscConfig+0x4d8>
 8002d66:	4b45      	ldr	r3, [pc, #276]	@ (8002e7c <HAL_RCC_OscConfig+0x5e8>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	e013      	b.n	8002d94 <HAL_RCC_OscConfig+0x500>
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d72:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002d76:	fa93 f3a3 	rbit	r3, r3
 8002d7a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002d7e:	2302      	movs	r3, #2
 8002d80:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002d84:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002d88:	fa93 f3a3 	rbit	r3, r3
 8002d8c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002d90:	4b3a      	ldr	r3, [pc, #232]	@ (8002e7c <HAL_RCC_OscConfig+0x5e8>)
 8002d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d94:	2202      	movs	r2, #2
 8002d96:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002d9a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002d9e:	fa92 f2a2 	rbit	r2, r2
 8002da2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002da6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002daa:	fab2 f282 	clz	r2, r2
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	f042 0220 	orr.w	r2, r2, #32
 8002db4:	b2d2      	uxtb	r2, r2
 8002db6:	f002 021f 	and.w	r2, r2, #31
 8002dba:	2101      	movs	r1, #1
 8002dbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0af      	beq.n	8002d26 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc6:	4b2d      	ldr	r3, [pc, #180]	@ (8002e7c <HAL_RCC_OscConfig+0x5e8>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dd2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	21f8      	movs	r1, #248	@ 0xf8
 8002ddc:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de0:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002de4:	fa91 f1a1 	rbit	r1, r1
 8002de8:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002dec:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002df0:	fab1 f181 	clz	r1, r1
 8002df4:	b2c9      	uxtb	r1, r1
 8002df6:	408b      	lsls	r3, r1
 8002df8:	4920      	ldr	r1, [pc, #128]	@ (8002e7c <HAL_RCC_OscConfig+0x5e8>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	600b      	str	r3, [r1, #0]
 8002dfe:	e06c      	b.n	8002eda <HAL_RCC_OscConfig+0x646>
 8002e00:	2301      	movs	r3, #1
 8002e02:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e06:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002e0a:	fa93 f3a3 	rbit	r3, r3
 8002e0e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002e12:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e16:	fab3 f383 	clz	r3, r3
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002e20:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	461a      	mov	r2, r3
 8002e28:	2300      	movs	r3, #0
 8002e2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2c:	f7fe fd0e 	bl	800184c <HAL_GetTick>
 8002e30:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e34:	e00a      	b.n	8002e4c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e36:	f7fe fd09 	bl	800184c <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d902      	bls.n	8002e4c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	f000 bd5a 	b.w	8003900 <HAL_RCC_OscConfig+0x106c>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e52:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002e56:	fa93 f3a3 	rbit	r3, r3
 8002e5a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002e5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e62:	fab3 f383 	clz	r3, r3
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	095b      	lsrs	r3, r3, #5
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	f043 0301 	orr.w	r3, r3, #1
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d104      	bne.n	8002e80 <HAL_RCC_OscConfig+0x5ec>
 8002e76:	4b01      	ldr	r3, [pc, #4]	@ (8002e7c <HAL_RCC_OscConfig+0x5e8>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	e015      	b.n	8002ea8 <HAL_RCC_OscConfig+0x614>
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	2302      	movs	r3, #2
 8002e82:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e86:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002e8a:	fa93 f3a3 	rbit	r3, r3
 8002e8e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002e92:	2302      	movs	r3, #2
 8002e94:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002e98:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002e9c:	fa93 f3a3 	rbit	r3, r3
 8002ea0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002ea4:	4bc8      	ldr	r3, [pc, #800]	@ (80031c8 <HAL_RCC_OscConfig+0x934>)
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002eae:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002eb2:	fa92 f2a2 	rbit	r2, r2
 8002eb6:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002eba:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002ebe:	fab2 f282 	clz	r2, r2
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	f042 0220 	orr.w	r2, r2, #32
 8002ec8:	b2d2      	uxtb	r2, r2
 8002eca:	f002 021f 	and.w	r2, r2, #31
 8002ece:	2101      	movs	r1, #1
 8002ed0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1ad      	bne.n	8002e36 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ede:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0308 	and.w	r3, r3, #8
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 8110 	beq.w	8003110 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ef0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ef4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d079      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x760>
 8002f00:	2301      	movs	r3, #1
 8002f02:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f06:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002f0a:	fa93 f3a3 	rbit	r3, r3
 8002f0e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002f12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f16:	fab3 f383 	clz	r3, r3
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	4bab      	ldr	r3, [pc, #684]	@ (80031cc <HAL_RCC_OscConfig+0x938>)
 8002f20:	4413      	add	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	461a      	mov	r2, r3
 8002f26:	2301      	movs	r3, #1
 8002f28:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2a:	f7fe fc8f 	bl	800184c <HAL_GetTick>
 8002f2e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f32:	e00a      	b.n	8002f4a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f34:	f7fe fc8a 	bl	800184c <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d902      	bls.n	8002f4a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	f000 bcdb 	b.w	8003900 <HAL_RCC_OscConfig+0x106c>
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f50:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002f54:	fa93 f3a3 	rbit	r3, r3
 8002f58:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002f5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f60:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002f64:	2202      	movs	r2, #2
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f6c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	fa93 f2a3 	rbit	r2, r3
 8002f76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002f88:	2202      	movs	r2, #2
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	fa93 f2a3 	rbit	r2, r3
 8002f9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f9e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002fa2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fa4:	4b88      	ldr	r3, [pc, #544]	@ (80031c8 <HAL_RCC_OscConfig+0x934>)
 8002fa6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002fa8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fac:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002fb0:	2102      	movs	r1, #2
 8002fb2:	6019      	str	r1, [r3, #0]
 8002fb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fb8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	fa93 f1a3 	rbit	r1, r3
 8002fc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fc6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002fca:	6019      	str	r1, [r3, #0]
  return result;
 8002fcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fd0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	fab3 f383 	clz	r3, r3
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	f003 031f 	and.w	r3, r3, #31
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fec:	4013      	ands	r3, r2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d0a0      	beq.n	8002f34 <HAL_RCC_OscConfig+0x6a0>
 8002ff2:	e08d      	b.n	8003110 <HAL_RCC_OscConfig+0x87c>
 8002ff4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003000:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003004:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	fa93 f2a3 	rbit	r2, r3
 800300e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003012:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003016:	601a      	str	r2, [r3, #0]
  return result;
 8003018:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800301c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003020:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003022:	fab3 f383 	clz	r3, r3
 8003026:	b2db      	uxtb	r3, r3
 8003028:	461a      	mov	r2, r3
 800302a:	4b68      	ldr	r3, [pc, #416]	@ (80031cc <HAL_RCC_OscConfig+0x938>)
 800302c:	4413      	add	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	461a      	mov	r2, r3
 8003032:	2300      	movs	r3, #0
 8003034:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003036:	f7fe fc09 	bl	800184c <HAL_GetTick>
 800303a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800303e:	e00a      	b.n	8003056 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003040:	f7fe fc04 	bl	800184c <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d902      	bls.n	8003056 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	f000 bc55 	b.w	8003900 <HAL_RCC_OscConfig+0x106c>
 8003056:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800305a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800305e:	2202      	movs	r2, #2
 8003060:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003062:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003066:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	fa93 f2a3 	rbit	r2, r3
 8003070:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003074:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800307e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003082:	2202      	movs	r2, #2
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800308a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	fa93 f2a3 	rbit	r2, r3
 8003094:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003098:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030a2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80030a6:	2202      	movs	r2, #2
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ae:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	fa93 f2a3 	rbit	r2, r3
 80030b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030bc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80030c0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c2:	4b41      	ldr	r3, [pc, #260]	@ (80031c8 <HAL_RCC_OscConfig+0x934>)
 80030c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ca:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80030ce:	2102      	movs	r1, #2
 80030d0:	6019      	str	r1, [r3, #0]
 80030d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030d6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	fa93 f1a3 	rbit	r1, r3
 80030e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030e4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80030e8:	6019      	str	r1, [r3, #0]
  return result;
 80030ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ee:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	fab3 f383 	clz	r3, r3
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	f003 031f 	and.w	r3, r3, #31
 8003104:	2101      	movs	r1, #1
 8003106:	fa01 f303 	lsl.w	r3, r1, r3
 800310a:	4013      	ands	r3, r2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d197      	bne.n	8003040 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003110:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003114:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 81a1 	beq.w	8003468 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003126:	2300      	movs	r3, #0
 8003128:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800312c:	4b26      	ldr	r3, [pc, #152]	@ (80031c8 <HAL_RCC_OscConfig+0x934>)
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d116      	bne.n	8003166 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003138:	4b23      	ldr	r3, [pc, #140]	@ (80031c8 <HAL_RCC_OscConfig+0x934>)
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	4a22      	ldr	r2, [pc, #136]	@ (80031c8 <HAL_RCC_OscConfig+0x934>)
 800313e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003142:	61d3      	str	r3, [r2, #28]
 8003144:	4b20      	ldr	r3, [pc, #128]	@ (80031c8 <HAL_RCC_OscConfig+0x934>)
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800314c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003150:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800315a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800315e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003160:	2301      	movs	r3, #1
 8003162:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003166:	4b1a      	ldr	r3, [pc, #104]	@ (80031d0 <HAL_RCC_OscConfig+0x93c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800316e:	2b00      	cmp	r3, #0
 8003170:	d11a      	bne.n	80031a8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003172:	4b17      	ldr	r3, [pc, #92]	@ (80031d0 <HAL_RCC_OscConfig+0x93c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a16      	ldr	r2, [pc, #88]	@ (80031d0 <HAL_RCC_OscConfig+0x93c>)
 8003178:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800317c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800317e:	f7fe fb65 	bl	800184c <HAL_GetTick>
 8003182:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003186:	e009      	b.n	800319c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003188:	f7fe fb60 	bl	800184c <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b64      	cmp	r3, #100	@ 0x64
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e3b1      	b.n	8003900 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800319c:	4b0c      	ldr	r3, [pc, #48]	@ (80031d0 <HAL_RCC_OscConfig+0x93c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0ef      	beq.n	8003188 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d10d      	bne.n	80031d4 <HAL_RCC_OscConfig+0x940>
 80031b8:	4b03      	ldr	r3, [pc, #12]	@ (80031c8 <HAL_RCC_OscConfig+0x934>)
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	4a02      	ldr	r2, [pc, #8]	@ (80031c8 <HAL_RCC_OscConfig+0x934>)
 80031be:	f043 0301 	orr.w	r3, r3, #1
 80031c2:	6213      	str	r3, [r2, #32]
 80031c4:	e03c      	b.n	8003240 <HAL_RCC_OscConfig+0x9ac>
 80031c6:	bf00      	nop
 80031c8:	40021000 	.word	0x40021000
 80031cc:	10908120 	.word	0x10908120
 80031d0:	40007000 	.word	0x40007000
 80031d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10c      	bne.n	80031fe <HAL_RCC_OscConfig+0x96a>
 80031e4:	4bc1      	ldr	r3, [pc, #772]	@ (80034ec <HAL_RCC_OscConfig+0xc58>)
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	4ac0      	ldr	r2, [pc, #768]	@ (80034ec <HAL_RCC_OscConfig+0xc58>)
 80031ea:	f023 0301 	bic.w	r3, r3, #1
 80031ee:	6213      	str	r3, [r2, #32]
 80031f0:	4bbe      	ldr	r3, [pc, #760]	@ (80034ec <HAL_RCC_OscConfig+0xc58>)
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	4abd      	ldr	r2, [pc, #756]	@ (80034ec <HAL_RCC_OscConfig+0xc58>)
 80031f6:	f023 0304 	bic.w	r3, r3, #4
 80031fa:	6213      	str	r3, [r2, #32]
 80031fc:	e020      	b.n	8003240 <HAL_RCC_OscConfig+0x9ac>
 80031fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003202:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	2b05      	cmp	r3, #5
 800320c:	d10c      	bne.n	8003228 <HAL_RCC_OscConfig+0x994>
 800320e:	4bb7      	ldr	r3, [pc, #732]	@ (80034ec <HAL_RCC_OscConfig+0xc58>)
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	4ab6      	ldr	r2, [pc, #728]	@ (80034ec <HAL_RCC_OscConfig+0xc58>)
 8003214:	f043 0304 	orr.w	r3, r3, #4
 8003218:	6213      	str	r3, [r2, #32]
 800321a:	4bb4      	ldr	r3, [pc, #720]	@ (80034ec <HAL_RCC_OscConfig+0xc58>)
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	4ab3      	ldr	r2, [pc, #716]	@ (80034ec <HAL_RCC_OscConfig+0xc58>)
 8003220:	f043 0301 	orr.w	r3, r3, #1
 8003224:	6213      	str	r3, [r2, #32]
 8003226:	e00b      	b.n	8003240 <HAL_RCC_OscConfig+0x9ac>
 8003228:	4bb0      	ldr	r3, [pc, #704]	@ (80034ec <HAL_RCC_OscConfig+0xc58>)
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	4aaf      	ldr	r2, [pc, #700]	@ (80034ec <HAL_RCC_OscConfig+0xc58>)
 800322e:	f023 0301 	bic.w	r3, r3, #1
 8003232:	6213      	str	r3, [r2, #32]
 8003234:	4bad      	ldr	r3, [pc, #692]	@ (80034ec <HAL_RCC_OscConfig+0xc58>)
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	4aac      	ldr	r2, [pc, #688]	@ (80034ec <HAL_RCC_OscConfig+0xc58>)
 800323a:	f023 0304 	bic.w	r3, r3, #4
 800323e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003240:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003244:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 8081 	beq.w	8003354 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003252:	f7fe fafb 	bl	800184c <HAL_GetTick>
 8003256:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800325a:	e00b      	b.n	8003274 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800325c:	f7fe faf6 	bl	800184c <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	f241 3288 	movw	r2, #5000	@ 0x1388
 800326c:	4293      	cmp	r3, r2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e345      	b.n	8003900 <HAL_RCC_OscConfig+0x106c>
 8003274:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003278:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800327c:	2202      	movs	r2, #2
 800327e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003280:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003284:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	fa93 f2a3 	rbit	r2, r3
 800328e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003292:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800329c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80032a0:	2202      	movs	r2, #2
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032a8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	fa93 f2a3 	rbit	r2, r3
 80032b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032b6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80032ba:	601a      	str	r2, [r3, #0]
  return result;
 80032bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032c0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80032c4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c6:	fab3 f383 	clz	r3, r3
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	095b      	lsrs	r3, r3, #5
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	f043 0302 	orr.w	r3, r3, #2
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d102      	bne.n	80032e0 <HAL_RCC_OscConfig+0xa4c>
 80032da:	4b84      	ldr	r3, [pc, #528]	@ (80034ec <HAL_RCC_OscConfig+0xc58>)
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	e013      	b.n	8003308 <HAL_RCC_OscConfig+0xa74>
 80032e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032e4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80032e8:	2202      	movs	r2, #2
 80032ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032f0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	fa93 f2a3 	rbit	r2, r3
 80032fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032fe:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	4b79      	ldr	r3, [pc, #484]	@ (80034ec <HAL_RCC_OscConfig+0xc58>)
 8003306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003308:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800330c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003310:	2102      	movs	r1, #2
 8003312:	6011      	str	r1, [r2, #0]
 8003314:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003318:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800331c:	6812      	ldr	r2, [r2, #0]
 800331e:	fa92 f1a2 	rbit	r1, r2
 8003322:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003326:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800332a:	6011      	str	r1, [r2, #0]
  return result;
 800332c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003330:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003334:	6812      	ldr	r2, [r2, #0]
 8003336:	fab2 f282 	clz	r2, r2
 800333a:	b2d2      	uxtb	r2, r2
 800333c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003340:	b2d2      	uxtb	r2, r2
 8003342:	f002 021f 	and.w	r2, r2, #31
 8003346:	2101      	movs	r1, #1
 8003348:	fa01 f202 	lsl.w	r2, r1, r2
 800334c:	4013      	ands	r3, r2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d084      	beq.n	800325c <HAL_RCC_OscConfig+0x9c8>
 8003352:	e07f      	b.n	8003454 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003354:	f7fe fa7a 	bl	800184c <HAL_GetTick>
 8003358:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800335c:	e00b      	b.n	8003376 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800335e:	f7fe fa75 	bl	800184c <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800336e:	4293      	cmp	r3, r2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e2c4      	b.n	8003900 <HAL_RCC_OscConfig+0x106c>
 8003376:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800337a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800337e:	2202      	movs	r2, #2
 8003380:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003382:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003386:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	fa93 f2a3 	rbit	r2, r3
 8003390:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003394:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800339e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80033a2:	2202      	movs	r2, #2
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033aa:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	fa93 f2a3 	rbit	r2, r3
 80033b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033b8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80033bc:	601a      	str	r2, [r3, #0]
  return result;
 80033be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033c2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80033c6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033c8:	fab3 f383 	clz	r3, r3
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	095b      	lsrs	r3, r3, #5
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	f043 0302 	orr.w	r3, r3, #2
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d102      	bne.n	80033e2 <HAL_RCC_OscConfig+0xb4e>
 80033dc:	4b43      	ldr	r3, [pc, #268]	@ (80034ec <HAL_RCC_OscConfig+0xc58>)
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	e013      	b.n	800340a <HAL_RCC_OscConfig+0xb76>
 80033e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033e6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80033ea:	2202      	movs	r2, #2
 80033ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033f2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	fa93 f2a3 	rbit	r2, r3
 80033fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003400:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	4b39      	ldr	r3, [pc, #228]	@ (80034ec <HAL_RCC_OscConfig+0xc58>)
 8003408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800340e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003412:	2102      	movs	r1, #2
 8003414:	6011      	str	r1, [r2, #0]
 8003416:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800341a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800341e:	6812      	ldr	r2, [r2, #0]
 8003420:	fa92 f1a2 	rbit	r1, r2
 8003424:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003428:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800342c:	6011      	str	r1, [r2, #0]
  return result;
 800342e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003432:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003436:	6812      	ldr	r2, [r2, #0]
 8003438:	fab2 f282 	clz	r2, r2
 800343c:	b2d2      	uxtb	r2, r2
 800343e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003442:	b2d2      	uxtb	r2, r2
 8003444:	f002 021f 	and.w	r2, r2, #31
 8003448:	2101      	movs	r1, #1
 800344a:	fa01 f202 	lsl.w	r2, r1, r2
 800344e:	4013      	ands	r3, r2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d184      	bne.n	800335e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003454:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003458:	2b01      	cmp	r3, #1
 800345a:	d105      	bne.n	8003468 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800345c:	4b23      	ldr	r3, [pc, #140]	@ (80034ec <HAL_RCC_OscConfig+0xc58>)
 800345e:	69db      	ldr	r3, [r3, #28]
 8003460:	4a22      	ldr	r2, [pc, #136]	@ (80034ec <HAL_RCC_OscConfig+0xc58>)
 8003462:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003466:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003468:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800346c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 8242 	beq.w	80038fe <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800347a:	4b1c      	ldr	r3, [pc, #112]	@ (80034ec <HAL_RCC_OscConfig+0xc58>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f003 030c 	and.w	r3, r3, #12
 8003482:	2b08      	cmp	r3, #8
 8003484:	f000 8213 	beq.w	80038ae <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003488:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800348c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	69db      	ldr	r3, [r3, #28]
 8003494:	2b02      	cmp	r3, #2
 8003496:	f040 8162 	bne.w	800375e <HAL_RCC_OscConfig+0xeca>
 800349a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800349e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80034a2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80034a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ac:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	fa93 f2a3 	rbit	r2, r3
 80034b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ba:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80034be:	601a      	str	r2, [r3, #0]
  return result;
 80034c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034c4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80034c8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ca:	fab3 f383 	clz	r3, r3
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80034d4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	461a      	mov	r2, r3
 80034dc:	2300      	movs	r3, #0
 80034de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e0:	f7fe f9b4 	bl	800184c <HAL_GetTick>
 80034e4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034e8:	e00c      	b.n	8003504 <HAL_RCC_OscConfig+0xc70>
 80034ea:	bf00      	nop
 80034ec:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034f0:	f7fe f9ac 	bl	800184c <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e1fd      	b.n	8003900 <HAL_RCC_OscConfig+0x106c>
 8003504:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003508:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800350c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003510:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003512:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003516:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	fa93 f2a3 	rbit	r2, r3
 8003520:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003524:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003528:	601a      	str	r2, [r3, #0]
  return result;
 800352a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800352e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003532:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003534:	fab3 f383 	clz	r3, r3
 8003538:	b2db      	uxtb	r3, r3
 800353a:	095b      	lsrs	r3, r3, #5
 800353c:	b2db      	uxtb	r3, r3
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b01      	cmp	r3, #1
 8003546:	d102      	bne.n	800354e <HAL_RCC_OscConfig+0xcba>
 8003548:	4bb0      	ldr	r3, [pc, #704]	@ (800380c <HAL_RCC_OscConfig+0xf78>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	e027      	b.n	800359e <HAL_RCC_OscConfig+0xd0a>
 800354e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003552:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003556:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800355a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003560:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	fa93 f2a3 	rbit	r2, r3
 800356a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800356e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003578:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800357c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003586:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	fa93 f2a3 	rbit	r2, r3
 8003590:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003594:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003598:	601a      	str	r2, [r3, #0]
 800359a:	4b9c      	ldr	r3, [pc, #624]	@ (800380c <HAL_RCC_OscConfig+0xf78>)
 800359c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035a2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80035a6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80035aa:	6011      	str	r1, [r2, #0]
 80035ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035b0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80035b4:	6812      	ldr	r2, [r2, #0]
 80035b6:	fa92 f1a2 	rbit	r1, r2
 80035ba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035be:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80035c2:	6011      	str	r1, [r2, #0]
  return result;
 80035c4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035c8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80035cc:	6812      	ldr	r2, [r2, #0]
 80035ce:	fab2 f282 	clz	r2, r2
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	f042 0220 	orr.w	r2, r2, #32
 80035d8:	b2d2      	uxtb	r2, r2
 80035da:	f002 021f 	and.w	r2, r2, #31
 80035de:	2101      	movs	r1, #1
 80035e0:	fa01 f202 	lsl.w	r2, r1, r2
 80035e4:	4013      	ands	r3, r2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d182      	bne.n	80034f0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035ea:	4b88      	ldr	r3, [pc, #544]	@ (800380c <HAL_RCC_OscConfig+0xf78>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80035f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80035fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003602:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	430b      	orrs	r3, r1
 800360c:	497f      	ldr	r1, [pc, #508]	@ (800380c <HAL_RCC_OscConfig+0xf78>)
 800360e:	4313      	orrs	r3, r2
 8003610:	604b      	str	r3, [r1, #4]
 8003612:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003616:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800361a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800361e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003620:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003624:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	fa93 f2a3 	rbit	r2, r3
 800362e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003632:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003636:	601a      	str	r2, [r3, #0]
  return result;
 8003638:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800363c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003640:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003642:	fab3 f383 	clz	r3, r3
 8003646:	b2db      	uxtb	r3, r3
 8003648:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800364c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	461a      	mov	r2, r3
 8003654:	2301      	movs	r3, #1
 8003656:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003658:	f7fe f8f8 	bl	800184c <HAL_GetTick>
 800365c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003660:	e009      	b.n	8003676 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003662:	f7fe f8f3 	bl	800184c <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e144      	b.n	8003900 <HAL_RCC_OscConfig+0x106c>
 8003676:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800367a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800367e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003682:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003684:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003688:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	fa93 f2a3 	rbit	r2, r3
 8003692:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003696:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800369a:	601a      	str	r2, [r3, #0]
  return result;
 800369c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036a0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80036a4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036a6:	fab3 f383 	clz	r3, r3
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	095b      	lsrs	r3, r3, #5
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	f043 0301 	orr.w	r3, r3, #1
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d102      	bne.n	80036c0 <HAL_RCC_OscConfig+0xe2c>
 80036ba:	4b54      	ldr	r3, [pc, #336]	@ (800380c <HAL_RCC_OscConfig+0xf78>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	e027      	b.n	8003710 <HAL_RCC_OscConfig+0xe7c>
 80036c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036c4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80036c8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036d2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	fa93 f2a3 	rbit	r2, r3
 80036dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036e0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80036e4:	601a      	str	r2, [r3, #0]
 80036e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036ea:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80036ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036f8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	fa93 f2a3 	rbit	r2, r3
 8003702:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003706:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800370a:	601a      	str	r2, [r3, #0]
 800370c:	4b3f      	ldr	r3, [pc, #252]	@ (800380c <HAL_RCC_OscConfig+0xf78>)
 800370e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003710:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003714:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003718:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800371c:	6011      	str	r1, [r2, #0]
 800371e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003722:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003726:	6812      	ldr	r2, [r2, #0]
 8003728:	fa92 f1a2 	rbit	r1, r2
 800372c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003730:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003734:	6011      	str	r1, [r2, #0]
  return result;
 8003736:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800373a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800373e:	6812      	ldr	r2, [r2, #0]
 8003740:	fab2 f282 	clz	r2, r2
 8003744:	b2d2      	uxtb	r2, r2
 8003746:	f042 0220 	orr.w	r2, r2, #32
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	f002 021f 	and.w	r2, r2, #31
 8003750:	2101      	movs	r1, #1
 8003752:	fa01 f202 	lsl.w	r2, r1, r2
 8003756:	4013      	ands	r3, r2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d082      	beq.n	8003662 <HAL_RCC_OscConfig+0xdce>
 800375c:	e0cf      	b.n	80038fe <HAL_RCC_OscConfig+0x106a>
 800375e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003762:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003766:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800376a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003770:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	fa93 f2a3 	rbit	r2, r3
 800377a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800377e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003782:	601a      	str	r2, [r3, #0]
  return result;
 8003784:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003788:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800378c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800378e:	fab3 f383 	clz	r3, r3
 8003792:	b2db      	uxtb	r3, r3
 8003794:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003798:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	461a      	mov	r2, r3
 80037a0:	2300      	movs	r3, #0
 80037a2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a4:	f7fe f852 	bl	800184c <HAL_GetTick>
 80037a8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037ac:	e009      	b.n	80037c2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ae:	f7fe f84d 	bl	800184c <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e09e      	b.n	8003900 <HAL_RCC_OscConfig+0x106c>
 80037c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037c6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80037ca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037d4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	fa93 f2a3 	rbit	r2, r3
 80037de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037e2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80037e6:	601a      	str	r2, [r3, #0]
  return result;
 80037e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ec:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80037f0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037f2:	fab3 f383 	clz	r3, r3
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	095b      	lsrs	r3, r3, #5
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	f043 0301 	orr.w	r3, r3, #1
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b01      	cmp	r3, #1
 8003804:	d104      	bne.n	8003810 <HAL_RCC_OscConfig+0xf7c>
 8003806:	4b01      	ldr	r3, [pc, #4]	@ (800380c <HAL_RCC_OscConfig+0xf78>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	e029      	b.n	8003860 <HAL_RCC_OscConfig+0xfcc>
 800380c:	40021000 	.word	0x40021000
 8003810:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003814:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003818:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800381c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003822:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	fa93 f2a3 	rbit	r2, r3
 800382c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003830:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800383a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800383e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003848:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	fa93 f2a3 	rbit	r2, r3
 8003852:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003856:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	4b2b      	ldr	r3, [pc, #172]	@ (800390c <HAL_RCC_OscConfig+0x1078>)
 800385e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003860:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003864:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003868:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800386c:	6011      	str	r1, [r2, #0]
 800386e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003872:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003876:	6812      	ldr	r2, [r2, #0]
 8003878:	fa92 f1a2 	rbit	r1, r2
 800387c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003880:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003884:	6011      	str	r1, [r2, #0]
  return result;
 8003886:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800388a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800388e:	6812      	ldr	r2, [r2, #0]
 8003890:	fab2 f282 	clz	r2, r2
 8003894:	b2d2      	uxtb	r2, r2
 8003896:	f042 0220 	orr.w	r2, r2, #32
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	f002 021f 	and.w	r2, r2, #31
 80038a0:	2101      	movs	r1, #1
 80038a2:	fa01 f202 	lsl.w	r2, r1, r2
 80038a6:	4013      	ands	r3, r2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d180      	bne.n	80037ae <HAL_RCC_OscConfig+0xf1a>
 80038ac:	e027      	b.n	80038fe <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d101      	bne.n	80038c2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e01e      	b.n	8003900 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038c2:	4b12      	ldr	r3, [pc, #72]	@ (800390c <HAL_RCC_OscConfig+0x1078>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80038ca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80038ce:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80038d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d10b      	bne.n	80038fa <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80038e2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80038e6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80038ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d001      	beq.n	80038fe <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	40021000 	.word	0x40021000

08003910 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b09e      	sub	sp, #120	@ 0x78
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800391a:	2300      	movs	r3, #0
 800391c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e162      	b.n	8003bee <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003928:	4b90      	ldr	r3, [pc, #576]	@ (8003b6c <HAL_RCC_ClockConfig+0x25c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	429a      	cmp	r2, r3
 8003934:	d910      	bls.n	8003958 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003936:	4b8d      	ldr	r3, [pc, #564]	@ (8003b6c <HAL_RCC_ClockConfig+0x25c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f023 0207 	bic.w	r2, r3, #7
 800393e:	498b      	ldr	r1, [pc, #556]	@ (8003b6c <HAL_RCC_ClockConfig+0x25c>)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	4313      	orrs	r3, r2
 8003944:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003946:	4b89      	ldr	r3, [pc, #548]	@ (8003b6c <HAL_RCC_ClockConfig+0x25c>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	429a      	cmp	r2, r3
 8003952:	d001      	beq.n	8003958 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e14a      	b.n	8003bee <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d008      	beq.n	8003976 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003964:	4b82      	ldr	r3, [pc, #520]	@ (8003b70 <HAL_RCC_ClockConfig+0x260>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	497f      	ldr	r1, [pc, #508]	@ (8003b70 <HAL_RCC_ClockConfig+0x260>)
 8003972:	4313      	orrs	r3, r2
 8003974:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 80dc 	beq.w	8003b3c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d13c      	bne.n	8003a06 <HAL_RCC_ClockConfig+0xf6>
 800398c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003990:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003992:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003994:	fa93 f3a3 	rbit	r3, r3
 8003998:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800399a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800399c:	fab3 f383 	clz	r3, r3
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	095b      	lsrs	r3, r3, #5
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	f043 0301 	orr.w	r3, r3, #1
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d102      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xa6>
 80039b0:	4b6f      	ldr	r3, [pc, #444]	@ (8003b70 <HAL_RCC_ClockConfig+0x260>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	e00f      	b.n	80039d6 <HAL_RCC_ClockConfig+0xc6>
 80039b6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80039ba:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80039be:	fa93 f3a3 	rbit	r3, r3
 80039c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80039c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80039c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80039ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80039cc:	fa93 f3a3 	rbit	r3, r3
 80039d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039d2:	4b67      	ldr	r3, [pc, #412]	@ (8003b70 <HAL_RCC_ClockConfig+0x260>)
 80039d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80039da:	65ba      	str	r2, [r7, #88]	@ 0x58
 80039dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80039de:	fa92 f2a2 	rbit	r2, r2
 80039e2:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80039e4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80039e6:	fab2 f282 	clz	r2, r2
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	f042 0220 	orr.w	r2, r2, #32
 80039f0:	b2d2      	uxtb	r2, r2
 80039f2:	f002 021f 	and.w	r2, r2, #31
 80039f6:	2101      	movs	r1, #1
 80039f8:	fa01 f202 	lsl.w	r2, r1, r2
 80039fc:	4013      	ands	r3, r2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d17b      	bne.n	8003afa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e0f3      	b.n	8003bee <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d13c      	bne.n	8003a88 <HAL_RCC_ClockConfig+0x178>
 8003a0e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a12:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a16:	fa93 f3a3 	rbit	r3, r3
 8003a1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003a1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a1e:	fab3 f383 	clz	r3, r3
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	095b      	lsrs	r3, r3, #5
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	f043 0301 	orr.w	r3, r3, #1
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d102      	bne.n	8003a38 <HAL_RCC_ClockConfig+0x128>
 8003a32:	4b4f      	ldr	r3, [pc, #316]	@ (8003b70 <HAL_RCC_ClockConfig+0x260>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	e00f      	b.n	8003a58 <HAL_RCC_ClockConfig+0x148>
 8003a38:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a3c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a40:	fa93 f3a3 	rbit	r3, r3
 8003a44:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a4e:	fa93 f3a3 	rbit	r3, r3
 8003a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a54:	4b46      	ldr	r3, [pc, #280]	@ (8003b70 <HAL_RCC_ClockConfig+0x260>)
 8003a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a58:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a5c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003a5e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003a60:	fa92 f2a2 	rbit	r2, r2
 8003a64:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003a66:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003a68:	fab2 f282 	clz	r2, r2
 8003a6c:	b2d2      	uxtb	r2, r2
 8003a6e:	f042 0220 	orr.w	r2, r2, #32
 8003a72:	b2d2      	uxtb	r2, r2
 8003a74:	f002 021f 	and.w	r2, r2, #31
 8003a78:	2101      	movs	r1, #1
 8003a7a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a7e:	4013      	ands	r3, r2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d13a      	bne.n	8003afa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e0b2      	b.n	8003bee <HAL_RCC_ClockConfig+0x2de>
 8003a88:	2302      	movs	r3, #2
 8003a8a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a8e:	fa93 f3a3 	rbit	r3, r3
 8003a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a96:	fab3 f383 	clz	r3, r3
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	095b      	lsrs	r3, r3, #5
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	f043 0301 	orr.w	r3, r3, #1
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d102      	bne.n	8003ab0 <HAL_RCC_ClockConfig+0x1a0>
 8003aaa:	4b31      	ldr	r3, [pc, #196]	@ (8003b70 <HAL_RCC_ClockConfig+0x260>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	e00d      	b.n	8003acc <HAL_RCC_ClockConfig+0x1bc>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab6:	fa93 f3a3 	rbit	r3, r3
 8003aba:	627b      	str	r3, [r7, #36]	@ 0x24
 8003abc:	2302      	movs	r3, #2
 8003abe:	623b      	str	r3, [r7, #32]
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
 8003ac2:	fa93 f3a3 	rbit	r3, r3
 8003ac6:	61fb      	str	r3, [r7, #28]
 8003ac8:	4b29      	ldr	r3, [pc, #164]	@ (8003b70 <HAL_RCC_ClockConfig+0x260>)
 8003aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003acc:	2202      	movs	r2, #2
 8003ace:	61ba      	str	r2, [r7, #24]
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	fa92 f2a2 	rbit	r2, r2
 8003ad6:	617a      	str	r2, [r7, #20]
  return result;
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	fab2 f282 	clz	r2, r2
 8003ade:	b2d2      	uxtb	r2, r2
 8003ae0:	f042 0220 	orr.w	r2, r2, #32
 8003ae4:	b2d2      	uxtb	r2, r2
 8003ae6:	f002 021f 	and.w	r2, r2, #31
 8003aea:	2101      	movs	r1, #1
 8003aec:	fa01 f202 	lsl.w	r2, r1, r2
 8003af0:	4013      	ands	r3, r2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e079      	b.n	8003bee <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003afa:	4b1d      	ldr	r3, [pc, #116]	@ (8003b70 <HAL_RCC_ClockConfig+0x260>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f023 0203 	bic.w	r2, r3, #3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	491a      	ldr	r1, [pc, #104]	@ (8003b70 <HAL_RCC_ClockConfig+0x260>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b0c:	f7fd fe9e 	bl	800184c <HAL_GetTick>
 8003b10:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b12:	e00a      	b.n	8003b2a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b14:	f7fd fe9a 	bl	800184c <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e061      	b.n	8003bee <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2a:	4b11      	ldr	r3, [pc, #68]	@ (8003b70 <HAL_RCC_ClockConfig+0x260>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f003 020c 	and.w	r2, r3, #12
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d1eb      	bne.n	8003b14 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b6c <HAL_RCC_ClockConfig+0x25c>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d214      	bcs.n	8003b74 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b4a:	4b08      	ldr	r3, [pc, #32]	@ (8003b6c <HAL_RCC_ClockConfig+0x25c>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f023 0207 	bic.w	r2, r3, #7
 8003b52:	4906      	ldr	r1, [pc, #24]	@ (8003b6c <HAL_RCC_ClockConfig+0x25c>)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b5a:	4b04      	ldr	r3, [pc, #16]	@ (8003b6c <HAL_RCC_ClockConfig+0x25c>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0307 	and.w	r3, r3, #7
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d005      	beq.n	8003b74 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e040      	b.n	8003bee <HAL_RCC_ClockConfig+0x2de>
 8003b6c:	40022000 	.word	0x40022000
 8003b70:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0304 	and.w	r3, r3, #4
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d008      	beq.n	8003b92 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b80:	4b1d      	ldr	r3, [pc, #116]	@ (8003bf8 <HAL_RCC_ClockConfig+0x2e8>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	491a      	ldr	r1, [pc, #104]	@ (8003bf8 <HAL_RCC_ClockConfig+0x2e8>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0308 	and.w	r3, r3, #8
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d009      	beq.n	8003bb2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b9e:	4b16      	ldr	r3, [pc, #88]	@ (8003bf8 <HAL_RCC_ClockConfig+0x2e8>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	4912      	ldr	r1, [pc, #72]	@ (8003bf8 <HAL_RCC_ClockConfig+0x2e8>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003bb2:	f000 f829 	bl	8003c08 <HAL_RCC_GetSysClockFreq>
 8003bb6:	4601      	mov	r1, r0
 8003bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8003bf8 <HAL_RCC_ClockConfig+0x2e8>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bc0:	22f0      	movs	r2, #240	@ 0xf0
 8003bc2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	fa92 f2a2 	rbit	r2, r2
 8003bca:	60fa      	str	r2, [r7, #12]
  return result;
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	fab2 f282 	clz	r2, r2
 8003bd2:	b2d2      	uxtb	r2, r2
 8003bd4:	40d3      	lsrs	r3, r2
 8003bd6:	4a09      	ldr	r2, [pc, #36]	@ (8003bfc <HAL_RCC_ClockConfig+0x2ec>)
 8003bd8:	5cd3      	ldrb	r3, [r2, r3]
 8003bda:	fa21 f303 	lsr.w	r3, r1, r3
 8003bde:	4a08      	ldr	r2, [pc, #32]	@ (8003c00 <HAL_RCC_ClockConfig+0x2f0>)
 8003be0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003be2:	4b08      	ldr	r3, [pc, #32]	@ (8003c04 <HAL_RCC_ClockConfig+0x2f4>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7fd fdec 	bl	80017c4 <HAL_InitTick>
  
  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3778      	adds	r7, #120	@ 0x78
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	08004ea0 	.word	0x08004ea0
 8003c00:	20000000 	.word	0x20000000
 8003c04:	20000004 	.word	0x20000004

08003c08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b087      	sub	sp, #28
 8003c0c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	60fb      	str	r3, [r7, #12]
 8003c12:	2300      	movs	r3, #0
 8003c14:	60bb      	str	r3, [r7, #8]
 8003c16:	2300      	movs	r3, #0
 8003c18:	617b      	str	r3, [r7, #20]
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003c22:	4b1e      	ldr	r3, [pc, #120]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0x94>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f003 030c 	and.w	r3, r3, #12
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	d002      	beq.n	8003c38 <HAL_RCC_GetSysClockFreq+0x30>
 8003c32:	2b08      	cmp	r3, #8
 8003c34:	d003      	beq.n	8003c3e <HAL_RCC_GetSysClockFreq+0x36>
 8003c36:	e026      	b.n	8003c86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c38:	4b19      	ldr	r3, [pc, #100]	@ (8003ca0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c3a:	613b      	str	r3, [r7, #16]
      break;
 8003c3c:	e026      	b.n	8003c8c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	0c9b      	lsrs	r3, r3, #18
 8003c42:	f003 030f 	and.w	r3, r3, #15
 8003c46:	4a17      	ldr	r2, [pc, #92]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c48:	5cd3      	ldrb	r3, [r2, r3]
 8003c4a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003c4c:	4b13      	ldr	r3, [pc, #76]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0x94>)
 8003c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c50:	f003 030f 	and.w	r3, r3, #15
 8003c54:	4a14      	ldr	r2, [pc, #80]	@ (8003ca8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c56:	5cd3      	ldrb	r3, [r2, r3]
 8003c58:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d008      	beq.n	8003c76 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003c64:	4a0e      	ldr	r2, [pc, #56]	@ (8003ca0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	fb02 f303 	mul.w	r3, r2, r3
 8003c72:	617b      	str	r3, [r7, #20]
 8003c74:	e004      	b.n	8003c80 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a0c      	ldr	r2, [pc, #48]	@ (8003cac <HAL_RCC_GetSysClockFreq+0xa4>)
 8003c7a:	fb02 f303 	mul.w	r3, r2, r3
 8003c7e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	613b      	str	r3, [r7, #16]
      break;
 8003c84:	e002      	b.n	8003c8c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c86:	4b06      	ldr	r3, [pc, #24]	@ (8003ca0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c88:	613b      	str	r3, [r7, #16]
      break;
 8003c8a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c8c:	693b      	ldr	r3, [r7, #16]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	371c      	adds	r7, #28
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	007a1200 	.word	0x007a1200
 8003ca4:	08004ed8 	.word	0x08004ed8
 8003ca8:	08004ee8 	.word	0x08004ee8
 8003cac:	003d0900 	.word	0x003d0900

08003cb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b092      	sub	sp, #72	@ 0x48
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f000 80d4 	beq.w	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cd4:	4b4e      	ldr	r3, [pc, #312]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cd6:	69db      	ldr	r3, [r3, #28]
 8003cd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10e      	bne.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ce0:	4b4b      	ldr	r3, [pc, #300]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	4a4a      	ldr	r2, [pc, #296]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ce6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cea:	61d3      	str	r3, [r2, #28]
 8003cec:	4b48      	ldr	r3, [pc, #288]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cee:	69db      	ldr	r3, [r3, #28]
 8003cf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cf4:	60bb      	str	r3, [r7, #8]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cfe:	4b45      	ldr	r3, [pc, #276]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d118      	bne.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d0a:	4b42      	ldr	r3, [pc, #264]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a41      	ldr	r2, [pc, #260]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d14:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d16:	f7fd fd99 	bl	800184c <HAL_GetTick>
 8003d1a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d1c:	e008      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d1e:	f7fd fd95 	bl	800184c <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b64      	cmp	r3, #100	@ 0x64
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e169      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d30:	4b38      	ldr	r3, [pc, #224]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0f0      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d3c:	4b34      	ldr	r3, [pc, #208]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 8084 	beq.w	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d56:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d07c      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d5c:	4b2c      	ldr	r3, [pc, #176]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d66:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003d6a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d6e:	fa93 f3a3 	rbit	r3, r3
 8003d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d76:	fab3 f383 	clz	r3, r3
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	4b26      	ldr	r3, [pc, #152]	@ (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d80:	4413      	add	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	461a      	mov	r2, r3
 8003d86:	2301      	movs	r3, #1
 8003d88:	6013      	str	r3, [r2, #0]
 8003d8a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d92:	fa93 f3a3 	rbit	r3, r3
 8003d96:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d9a:	fab3 f383 	clz	r3, r3
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	461a      	mov	r2, r3
 8003da2:	4b1d      	ldr	r3, [pc, #116]	@ (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003da4:	4413      	add	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	461a      	mov	r2, r3
 8003daa:	2300      	movs	r3, #0
 8003dac:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003dae:	4a18      	ldr	r2, [pc, #96]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003db0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003db2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003db4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d04b      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dbe:	f7fd fd45 	bl	800184c <HAL_GetTick>
 8003dc2:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc4:	e00a      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc6:	f7fd fd41 	bl	800184c <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e113      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003ddc:	2302      	movs	r3, #2
 8003dde:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de2:	fa93 f3a3 	rbit	r3, r3
 8003de6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003de8:	2302      	movs	r3, #2
 8003dea:	623b      	str	r3, [r7, #32]
 8003dec:	6a3b      	ldr	r3, [r7, #32]
 8003dee:	fa93 f3a3 	rbit	r3, r3
 8003df2:	61fb      	str	r3, [r7, #28]
  return result;
 8003df4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003df6:	fab3 f383 	clz	r3, r3
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	095b      	lsrs	r3, r3, #5
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	f043 0302 	orr.w	r3, r3, #2
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d108      	bne.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003e0a:	4b01      	ldr	r3, [pc, #4]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	e00d      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003e10:	40021000 	.word	0x40021000
 8003e14:	40007000 	.word	0x40007000
 8003e18:	10908100 	.word	0x10908100
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	fa93 f3a3 	rbit	r3, r3
 8003e26:	617b      	str	r3, [r7, #20]
 8003e28:	4b78      	ldr	r3, [pc, #480]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2c:	2202      	movs	r2, #2
 8003e2e:	613a      	str	r2, [r7, #16]
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	fa92 f2a2 	rbit	r2, r2
 8003e36:	60fa      	str	r2, [r7, #12]
  return result;
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	fab2 f282 	clz	r2, r2
 8003e3e:	b2d2      	uxtb	r2, r2
 8003e40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e44:	b2d2      	uxtb	r2, r2
 8003e46:	f002 021f 	and.w	r2, r2, #31
 8003e4a:	2101      	movs	r1, #1
 8003e4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e50:	4013      	ands	r3, r2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0b7      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003e56:	4b6d      	ldr	r3, [pc, #436]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	496a      	ldr	r1, [pc, #424]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e68:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d105      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e70:	4b66      	ldr	r3, [pc, #408]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e72:	69db      	ldr	r3, [r3, #28]
 8003e74:	4a65      	ldr	r2, [pc, #404]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e7a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d008      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e88:	4b60      	ldr	r3, [pc, #384]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e8c:	f023 0203 	bic.w	r2, r3, #3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	495d      	ldr	r1, [pc, #372]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d008      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ea6:	4b59      	ldr	r3, [pc, #356]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eaa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	4956      	ldr	r1, [pc, #344]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0304 	and.w	r3, r3, #4
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d008      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ec4:	4b51      	ldr	r3, [pc, #324]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	494e      	ldr	r1, [pc, #312]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0320 	and.w	r3, r3, #32
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d008      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ee2:	4b4a      	ldr	r3, [pc, #296]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee6:	f023 0210 	bic.w	r2, r3, #16
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	4947      	ldr	r1, [pc, #284]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d008      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003f00:	4b42      	ldr	r3, [pc, #264]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f0c:	493f      	ldr	r1, [pc, #252]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d008      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f1e:	4b3b      	ldr	r3, [pc, #236]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f22:	f023 0220 	bic.w	r2, r3, #32
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	4938      	ldr	r1, [pc, #224]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0308 	and.w	r3, r3, #8
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d008      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f3c:	4b33      	ldr	r3, [pc, #204]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f40:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	4930      	ldr	r1, [pc, #192]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0310 	and.w	r3, r3, #16
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d008      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f5a:	4b2c      	ldr	r3, [pc, #176]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f5e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	4929      	ldr	r1, [pc, #164]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d008      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f78:	4b24      	ldr	r3, [pc, #144]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f84:	4921      	ldr	r1, [pc, #132]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d008      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003f96:	4b1d      	ldr	r3, [pc, #116]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f9a:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa2:	491a      	ldr	r1, [pc, #104]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d008      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003fb4:	4b15      	ldr	r3, [pc, #84]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb8:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc0:	4912      	ldr	r1, [pc, #72]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d008      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fde:	490b      	ldr	r1, [pc, #44]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d008      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003ff0:	4b06      	ldr	r3, [pc, #24]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ffc:	4903      	ldr	r1, [pc, #12]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3748      	adds	r7, #72	@ 0x48
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	40021000 	.word	0x40021000

08004010 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e09d      	b.n	800415e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004026:	2b00      	cmp	r3, #0
 8004028:	d108      	bne.n	800403c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004032:	d009      	beq.n	8004048 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	61da      	str	r2, [r3, #28]
 800403a:	e005      	b.n	8004048 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d106      	bne.n	8004068 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7fc fbae 	bl	80007c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2202      	movs	r2, #2
 800406c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800407e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004088:	d902      	bls.n	8004090 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800408a:	2300      	movs	r3, #0
 800408c:	60fb      	str	r3, [r7, #12]
 800408e:	e002      	b.n	8004096 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004090:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004094:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800409e:	d007      	beq.n	80040b0 <HAL_SPI_Init+0xa0>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80040a8:	d002      	beq.n	80040b0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80040c0:	431a      	orrs	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	431a      	orrs	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	431a      	orrs	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040de:	431a      	orrs	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	69db      	ldr	r3, [r3, #28]
 80040e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040e8:	431a      	orrs	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040f2:	ea42 0103 	orr.w	r1, r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040fa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	430a      	orrs	r2, r1
 8004104:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	0c1b      	lsrs	r3, r3, #16
 800410c:	f003 0204 	and.w	r2, r3, #4
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004114:	f003 0310 	and.w	r3, r3, #16
 8004118:	431a      	orrs	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800411e:	f003 0308 	and.w	r3, r3, #8
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800412c:	ea42 0103 	orr.w	r1, r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	430a      	orrs	r2, r1
 800413c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69da      	ldr	r2, [r3, #28]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800414c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b082      	sub	sp, #8
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e049      	b.n	800420c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b00      	cmp	r3, #0
 8004182:	d106      	bne.n	8004192 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f7fc fb5b 	bl	8000848 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2202      	movs	r2, #2
 8004196:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	3304      	adds	r3, #4
 80041a2:	4619      	mov	r1, r3
 80041a4:	4610      	mov	r0, r2
 80041a6:	f000 f949 	bl	800443c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3708      	adds	r7, #8
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004220:	2300      	movs	r3, #0
 8004222:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800422a:	2b01      	cmp	r3, #1
 800422c:	d101      	bne.n	8004232 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800422e:	2302      	movs	r3, #2
 8004230:	e0ff      	b.n	8004432 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b14      	cmp	r3, #20
 800423e:	f200 80f0 	bhi.w	8004422 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004242:	a201      	add	r2, pc, #4	@ (adr r2, 8004248 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004248:	0800429d 	.word	0x0800429d
 800424c:	08004423 	.word	0x08004423
 8004250:	08004423 	.word	0x08004423
 8004254:	08004423 	.word	0x08004423
 8004258:	080042dd 	.word	0x080042dd
 800425c:	08004423 	.word	0x08004423
 8004260:	08004423 	.word	0x08004423
 8004264:	08004423 	.word	0x08004423
 8004268:	0800431f 	.word	0x0800431f
 800426c:	08004423 	.word	0x08004423
 8004270:	08004423 	.word	0x08004423
 8004274:	08004423 	.word	0x08004423
 8004278:	0800435f 	.word	0x0800435f
 800427c:	08004423 	.word	0x08004423
 8004280:	08004423 	.word	0x08004423
 8004284:	08004423 	.word	0x08004423
 8004288:	080043a1 	.word	0x080043a1
 800428c:	08004423 	.word	0x08004423
 8004290:	08004423 	.word	0x08004423
 8004294:	08004423 	.word	0x08004423
 8004298:	080043e1 	.word	0x080043e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68b9      	ldr	r1, [r7, #8]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 f966 	bl	8004574 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	699a      	ldr	r2, [r3, #24]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f042 0208 	orr.w	r2, r2, #8
 80042b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	699a      	ldr	r2, [r3, #24]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0204 	bic.w	r2, r2, #4
 80042c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6999      	ldr	r1, [r3, #24]
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	691a      	ldr	r2, [r3, #16]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	619a      	str	r2, [r3, #24]
      break;
 80042da:	e0a5      	b.n	8004428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68b9      	ldr	r1, [r7, #8]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 f9d6 	bl	8004694 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	699a      	ldr	r2, [r3, #24]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	699a      	ldr	r2, [r3, #24]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004306:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	6999      	ldr	r1, [r3, #24]
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	021a      	lsls	r2, r3, #8
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	430a      	orrs	r2, r1
 800431a:	619a      	str	r2, [r3, #24]
      break;
 800431c:	e084      	b.n	8004428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68b9      	ldr	r1, [r7, #8]
 8004324:	4618      	mov	r0, r3
 8004326:	f000 fa3f 	bl	80047a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	69da      	ldr	r2, [r3, #28]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f042 0208 	orr.w	r2, r2, #8
 8004338:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	69da      	ldr	r2, [r3, #28]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 0204 	bic.w	r2, r2, #4
 8004348:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	69d9      	ldr	r1, [r3, #28]
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	691a      	ldr	r2, [r3, #16]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	430a      	orrs	r2, r1
 800435a:	61da      	str	r2, [r3, #28]
      break;
 800435c:	e064      	b.n	8004428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68b9      	ldr	r1, [r7, #8]
 8004364:	4618      	mov	r0, r3
 8004366:	f000 faa7 	bl	80048b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	69da      	ldr	r2, [r3, #28]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004378:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	69da      	ldr	r2, [r3, #28]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004388:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	69d9      	ldr	r1, [r3, #28]
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	021a      	lsls	r2, r3, #8
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	61da      	str	r2, [r3, #28]
      break;
 800439e:	e043      	b.n	8004428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68b9      	ldr	r1, [r7, #8]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 faf0 	bl	800498c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 0208 	orr.w	r2, r2, #8
 80043ba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0204 	bic.w	r2, r2, #4
 80043ca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	691a      	ldr	r2, [r3, #16]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	430a      	orrs	r2, r1
 80043dc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80043de:	e023      	b.n	8004428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68b9      	ldr	r1, [r7, #8]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 fb34 	bl	8004a54 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043fa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800440a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	021a      	lsls	r2, r3, #8
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	430a      	orrs	r2, r1
 800441e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004420:	e002      	b.n	8004428 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	75fb      	strb	r3, [r7, #23]
      break;
 8004426:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004430:	7dfb      	ldrb	r3, [r7, #23]
}
 8004432:	4618      	mov	r0, r3
 8004434:	3718      	adds	r7, #24
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop

0800443c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a42      	ldr	r2, [pc, #264]	@ (8004558 <TIM_Base_SetConfig+0x11c>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d00f      	beq.n	8004474 <TIM_Base_SetConfig+0x38>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800445a:	d00b      	beq.n	8004474 <TIM_Base_SetConfig+0x38>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a3f      	ldr	r2, [pc, #252]	@ (800455c <TIM_Base_SetConfig+0x120>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d007      	beq.n	8004474 <TIM_Base_SetConfig+0x38>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a3e      	ldr	r2, [pc, #248]	@ (8004560 <TIM_Base_SetConfig+0x124>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d003      	beq.n	8004474 <TIM_Base_SetConfig+0x38>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a3d      	ldr	r2, [pc, #244]	@ (8004564 <TIM_Base_SetConfig+0x128>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d108      	bne.n	8004486 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800447a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	4313      	orrs	r3, r2
 8004484:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a33      	ldr	r2, [pc, #204]	@ (8004558 <TIM_Base_SetConfig+0x11c>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d01b      	beq.n	80044c6 <TIM_Base_SetConfig+0x8a>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004494:	d017      	beq.n	80044c6 <TIM_Base_SetConfig+0x8a>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a30      	ldr	r2, [pc, #192]	@ (800455c <TIM_Base_SetConfig+0x120>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d013      	beq.n	80044c6 <TIM_Base_SetConfig+0x8a>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a2f      	ldr	r2, [pc, #188]	@ (8004560 <TIM_Base_SetConfig+0x124>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d00f      	beq.n	80044c6 <TIM_Base_SetConfig+0x8a>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a2e      	ldr	r2, [pc, #184]	@ (8004564 <TIM_Base_SetConfig+0x128>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d00b      	beq.n	80044c6 <TIM_Base_SetConfig+0x8a>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a2d      	ldr	r2, [pc, #180]	@ (8004568 <TIM_Base_SetConfig+0x12c>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d007      	beq.n	80044c6 <TIM_Base_SetConfig+0x8a>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a2c      	ldr	r2, [pc, #176]	@ (800456c <TIM_Base_SetConfig+0x130>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d003      	beq.n	80044c6 <TIM_Base_SetConfig+0x8a>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a2b      	ldr	r2, [pc, #172]	@ (8004570 <TIM_Base_SetConfig+0x134>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d108      	bne.n	80044d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a16      	ldr	r2, [pc, #88]	@ (8004558 <TIM_Base_SetConfig+0x11c>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d00f      	beq.n	8004524 <TIM_Base_SetConfig+0xe8>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a17      	ldr	r2, [pc, #92]	@ (8004564 <TIM_Base_SetConfig+0x128>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d00b      	beq.n	8004524 <TIM_Base_SetConfig+0xe8>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a16      	ldr	r2, [pc, #88]	@ (8004568 <TIM_Base_SetConfig+0x12c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d007      	beq.n	8004524 <TIM_Base_SetConfig+0xe8>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a15      	ldr	r2, [pc, #84]	@ (800456c <TIM_Base_SetConfig+0x130>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d003      	beq.n	8004524 <TIM_Base_SetConfig+0xe8>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a14      	ldr	r2, [pc, #80]	@ (8004570 <TIM_Base_SetConfig+0x134>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d103      	bne.n	800452c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	691a      	ldr	r2, [r3, #16]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b01      	cmp	r3, #1
 800453c:	d105      	bne.n	800454a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	f023 0201 	bic.w	r2, r3, #1
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	611a      	str	r2, [r3, #16]
  }
}
 800454a:	bf00      	nop
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	40012c00 	.word	0x40012c00
 800455c:	40000400 	.word	0x40000400
 8004560:	40000800 	.word	0x40000800
 8004564:	40013400 	.word	0x40013400
 8004568:	40014000 	.word	0x40014000
 800456c:	40014400 	.word	0x40014400
 8004570:	40014800 	.word	0x40014800

08004574 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004574:	b480      	push	{r7}
 8004576:	b087      	sub	sp, #28
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	f023 0201 	bic.w	r2, r3, #1
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f023 0303 	bic.w	r3, r3, #3
 80045ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	f023 0302 	bic.w	r3, r3, #2
 80045c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a2c      	ldr	r2, [pc, #176]	@ (8004680 <TIM_OC1_SetConfig+0x10c>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d00f      	beq.n	80045f4 <TIM_OC1_SetConfig+0x80>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a2b      	ldr	r2, [pc, #172]	@ (8004684 <TIM_OC1_SetConfig+0x110>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d00b      	beq.n	80045f4 <TIM_OC1_SetConfig+0x80>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a2a      	ldr	r2, [pc, #168]	@ (8004688 <TIM_OC1_SetConfig+0x114>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d007      	beq.n	80045f4 <TIM_OC1_SetConfig+0x80>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a29      	ldr	r2, [pc, #164]	@ (800468c <TIM_OC1_SetConfig+0x118>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d003      	beq.n	80045f4 <TIM_OC1_SetConfig+0x80>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a28      	ldr	r2, [pc, #160]	@ (8004690 <TIM_OC1_SetConfig+0x11c>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d10c      	bne.n	800460e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	f023 0308 	bic.w	r3, r3, #8
 80045fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	4313      	orrs	r3, r2
 8004604:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f023 0304 	bic.w	r3, r3, #4
 800460c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a1b      	ldr	r2, [pc, #108]	@ (8004680 <TIM_OC1_SetConfig+0x10c>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d00f      	beq.n	8004636 <TIM_OC1_SetConfig+0xc2>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a1a      	ldr	r2, [pc, #104]	@ (8004684 <TIM_OC1_SetConfig+0x110>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d00b      	beq.n	8004636 <TIM_OC1_SetConfig+0xc2>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a19      	ldr	r2, [pc, #100]	@ (8004688 <TIM_OC1_SetConfig+0x114>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d007      	beq.n	8004636 <TIM_OC1_SetConfig+0xc2>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a18      	ldr	r2, [pc, #96]	@ (800468c <TIM_OC1_SetConfig+0x118>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d003      	beq.n	8004636 <TIM_OC1_SetConfig+0xc2>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a17      	ldr	r2, [pc, #92]	@ (8004690 <TIM_OC1_SetConfig+0x11c>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d111      	bne.n	800465a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800463c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004644:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	4313      	orrs	r3, r2
 800464e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	4313      	orrs	r3, r2
 8004658:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	621a      	str	r2, [r3, #32]
}
 8004674:	bf00      	nop
 8004676:	371c      	adds	r7, #28
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	40012c00 	.word	0x40012c00
 8004684:	40013400 	.word	0x40013400
 8004688:	40014000 	.word	0x40014000
 800468c:	40014400 	.word	0x40014400
 8004690:	40014800 	.word	0x40014800

08004694 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004694:	b480      	push	{r7}
 8004696:	b087      	sub	sp, #28
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	f023 0210 	bic.w	r2, r3, #16
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	021b      	lsls	r3, r3, #8
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	4313      	orrs	r3, r2
 80046da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	f023 0320 	bic.w	r3, r3, #32
 80046e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	011b      	lsls	r3, r3, #4
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a28      	ldr	r2, [pc, #160]	@ (8004794 <TIM_OC2_SetConfig+0x100>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d003      	beq.n	8004700 <TIM_OC2_SetConfig+0x6c>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a27      	ldr	r2, [pc, #156]	@ (8004798 <TIM_OC2_SetConfig+0x104>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d10d      	bne.n	800471c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004706:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	011b      	lsls	r3, r3, #4
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	4313      	orrs	r3, r2
 8004712:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800471a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a1d      	ldr	r2, [pc, #116]	@ (8004794 <TIM_OC2_SetConfig+0x100>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d00f      	beq.n	8004744 <TIM_OC2_SetConfig+0xb0>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a1c      	ldr	r2, [pc, #112]	@ (8004798 <TIM_OC2_SetConfig+0x104>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d00b      	beq.n	8004744 <TIM_OC2_SetConfig+0xb0>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a1b      	ldr	r2, [pc, #108]	@ (800479c <TIM_OC2_SetConfig+0x108>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d007      	beq.n	8004744 <TIM_OC2_SetConfig+0xb0>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a1a      	ldr	r2, [pc, #104]	@ (80047a0 <TIM_OC2_SetConfig+0x10c>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d003      	beq.n	8004744 <TIM_OC2_SetConfig+0xb0>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a19      	ldr	r2, [pc, #100]	@ (80047a4 <TIM_OC2_SetConfig+0x110>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d113      	bne.n	800476c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800474a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004752:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	4313      	orrs	r3, r2
 800475e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	4313      	orrs	r3, r2
 800476a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685a      	ldr	r2, [r3, #4]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	621a      	str	r2, [r3, #32]
}
 8004786:	bf00      	nop
 8004788:	371c      	adds	r7, #28
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	40012c00 	.word	0x40012c00
 8004798:	40013400 	.word	0x40013400
 800479c:	40014000 	.word	0x40014000
 80047a0:	40014400 	.word	0x40014400
 80047a4:	40014800 	.word	0x40014800

080047a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b087      	sub	sp, #28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f023 0303 	bic.w	r3, r3, #3
 80047e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80047f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	021b      	lsls	r3, r3, #8
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	4313      	orrs	r3, r2
 8004800:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a27      	ldr	r2, [pc, #156]	@ (80048a4 <TIM_OC3_SetConfig+0xfc>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d003      	beq.n	8004812 <TIM_OC3_SetConfig+0x6a>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a26      	ldr	r2, [pc, #152]	@ (80048a8 <TIM_OC3_SetConfig+0x100>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d10d      	bne.n	800482e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004818:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	021b      	lsls	r3, r3, #8
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	4313      	orrs	r3, r2
 8004824:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800482c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a1c      	ldr	r2, [pc, #112]	@ (80048a4 <TIM_OC3_SetConfig+0xfc>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d00f      	beq.n	8004856 <TIM_OC3_SetConfig+0xae>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a1b      	ldr	r2, [pc, #108]	@ (80048a8 <TIM_OC3_SetConfig+0x100>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d00b      	beq.n	8004856 <TIM_OC3_SetConfig+0xae>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a1a      	ldr	r2, [pc, #104]	@ (80048ac <TIM_OC3_SetConfig+0x104>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d007      	beq.n	8004856 <TIM_OC3_SetConfig+0xae>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a19      	ldr	r2, [pc, #100]	@ (80048b0 <TIM_OC3_SetConfig+0x108>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d003      	beq.n	8004856 <TIM_OC3_SetConfig+0xae>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a18      	ldr	r2, [pc, #96]	@ (80048b4 <TIM_OC3_SetConfig+0x10c>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d113      	bne.n	800487e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800485c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004864:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	011b      	lsls	r3, r3, #4
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	4313      	orrs	r3, r2
 8004870:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	011b      	lsls	r3, r3, #4
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	4313      	orrs	r3, r2
 800487c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	685a      	ldr	r2, [r3, #4]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	621a      	str	r2, [r3, #32]
}
 8004898:	bf00      	nop
 800489a:	371c      	adds	r7, #28
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr
 80048a4:	40012c00 	.word	0x40012c00
 80048a8:	40013400 	.word	0x40013400
 80048ac:	40014000 	.word	0x40014000
 80048b0:	40014400 	.word	0x40014400
 80048b4:	40014800 	.word	0x40014800

080048b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b087      	sub	sp, #28
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	69db      	ldr	r3, [r3, #28]
 80048de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	021b      	lsls	r3, r3, #8
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004906:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	031b      	lsls	r3, r3, #12
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	4313      	orrs	r3, r2
 8004912:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a18      	ldr	r2, [pc, #96]	@ (8004978 <TIM_OC4_SetConfig+0xc0>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d00f      	beq.n	800493c <TIM_OC4_SetConfig+0x84>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a17      	ldr	r2, [pc, #92]	@ (800497c <TIM_OC4_SetConfig+0xc4>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d00b      	beq.n	800493c <TIM_OC4_SetConfig+0x84>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a16      	ldr	r2, [pc, #88]	@ (8004980 <TIM_OC4_SetConfig+0xc8>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d007      	beq.n	800493c <TIM_OC4_SetConfig+0x84>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a15      	ldr	r2, [pc, #84]	@ (8004984 <TIM_OC4_SetConfig+0xcc>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d003      	beq.n	800493c <TIM_OC4_SetConfig+0x84>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a14      	ldr	r2, [pc, #80]	@ (8004988 <TIM_OC4_SetConfig+0xd0>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d109      	bne.n	8004950 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004942:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	695b      	ldr	r3, [r3, #20]
 8004948:	019b      	lsls	r3, r3, #6
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	4313      	orrs	r3, r2
 800494e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	621a      	str	r2, [r3, #32]
}
 800496a:	bf00      	nop
 800496c:	371c      	adds	r7, #28
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	40012c00 	.word	0x40012c00
 800497c:	40013400 	.word	0x40013400
 8004980:	40014000 	.word	0x40014000
 8004984:	40014400 	.word	0x40014400
 8004988:	40014800 	.word	0x40014800

0800498c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800498c:	b480      	push	{r7}
 800498e:	b087      	sub	sp, #28
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80049d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	041b      	lsls	r3, r3, #16
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	4313      	orrs	r3, r2
 80049dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a17      	ldr	r2, [pc, #92]	@ (8004a40 <TIM_OC5_SetConfig+0xb4>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d00f      	beq.n	8004a06 <TIM_OC5_SetConfig+0x7a>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a16      	ldr	r2, [pc, #88]	@ (8004a44 <TIM_OC5_SetConfig+0xb8>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d00b      	beq.n	8004a06 <TIM_OC5_SetConfig+0x7a>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a15      	ldr	r2, [pc, #84]	@ (8004a48 <TIM_OC5_SetConfig+0xbc>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d007      	beq.n	8004a06 <TIM_OC5_SetConfig+0x7a>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a14      	ldr	r2, [pc, #80]	@ (8004a4c <TIM_OC5_SetConfig+0xc0>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d003      	beq.n	8004a06 <TIM_OC5_SetConfig+0x7a>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a13      	ldr	r2, [pc, #76]	@ (8004a50 <TIM_OC5_SetConfig+0xc4>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d109      	bne.n	8004a1a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a0c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	021b      	lsls	r3, r3, #8
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	621a      	str	r2, [r3, #32]
}
 8004a34:	bf00      	nop
 8004a36:	371c      	adds	r7, #28
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr
 8004a40:	40012c00 	.word	0x40012c00
 8004a44:	40013400 	.word	0x40013400
 8004a48:	40014000 	.word	0x40014000
 8004a4c:	40014400 	.word	0x40014400
 8004a50:	40014800 	.word	0x40014800

08004a54 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b087      	sub	sp, #28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	021b      	lsls	r3, r3, #8
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004a9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	051b      	lsls	r3, r3, #20
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a18      	ldr	r2, [pc, #96]	@ (8004b0c <TIM_OC6_SetConfig+0xb8>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d00f      	beq.n	8004ad0 <TIM_OC6_SetConfig+0x7c>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a17      	ldr	r2, [pc, #92]	@ (8004b10 <TIM_OC6_SetConfig+0xbc>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d00b      	beq.n	8004ad0 <TIM_OC6_SetConfig+0x7c>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a16      	ldr	r2, [pc, #88]	@ (8004b14 <TIM_OC6_SetConfig+0xc0>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d007      	beq.n	8004ad0 <TIM_OC6_SetConfig+0x7c>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a15      	ldr	r2, [pc, #84]	@ (8004b18 <TIM_OC6_SetConfig+0xc4>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d003      	beq.n	8004ad0 <TIM_OC6_SetConfig+0x7c>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a14      	ldr	r2, [pc, #80]	@ (8004b1c <TIM_OC6_SetConfig+0xc8>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d109      	bne.n	8004ae4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ad6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	029b      	lsls	r3, r3, #10
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	621a      	str	r2, [r3, #32]
}
 8004afe:	bf00      	nop
 8004b00:	371c      	adds	r7, #28
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	40012c00 	.word	0x40012c00
 8004b10:	40013400 	.word	0x40013400
 8004b14:	40014000 	.word	0x40014000
 8004b18:	40014400 	.word	0x40014400
 8004b1c:	40014800 	.word	0x40014800

08004b20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d101      	bne.n	8004b38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b34:	2302      	movs	r3, #2
 8004b36:	e063      	b.n	8004c00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2202      	movs	r2, #2
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a2b      	ldr	r2, [pc, #172]	@ (8004c0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d004      	beq.n	8004b6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a2a      	ldr	r2, [pc, #168]	@ (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d108      	bne.n	8004b7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004b72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a1b      	ldr	r2, [pc, #108]	@ (8004c0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d018      	beq.n	8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004baa:	d013      	beq.n	8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a18      	ldr	r2, [pc, #96]	@ (8004c14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d00e      	beq.n	8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a17      	ldr	r2, [pc, #92]	@ (8004c18 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d009      	beq.n	8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a12      	ldr	r2, [pc, #72]	@ (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d004      	beq.n	8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a13      	ldr	r2, [pc, #76]	@ (8004c1c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d10c      	bne.n	8004bee <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bda:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3714      	adds	r7, #20
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr
 8004c0c:	40012c00 	.word	0x40012c00
 8004c10:	40013400 	.word	0x40013400
 8004c14:	40000400 	.word	0x40000400
 8004c18:	40000800 	.word	0x40000800
 8004c1c:	40014000 	.word	0x40014000

08004c20 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c28:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004c2c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	43db      	mvns	r3, r3
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	4013      	ands	r3, r2
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b085      	sub	sp, #20
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	60f8      	str	r0, [r7, #12]
 8004c5e:	1d3b      	adds	r3, r7, #4
 8004c60:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3714      	adds	r7, #20
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
	...

08004c94 <malloc>:
 8004c94:	4b02      	ldr	r3, [pc, #8]	@ (8004ca0 <malloc+0xc>)
 8004c96:	4601      	mov	r1, r0
 8004c98:	6818      	ldr	r0, [r3, #0]
 8004c9a:	f000 b825 	b.w	8004ce8 <_malloc_r>
 8004c9e:	bf00      	nop
 8004ca0:	2000000c 	.word	0x2000000c

08004ca4 <sbrk_aligned>:
 8004ca4:	b570      	push	{r4, r5, r6, lr}
 8004ca6:	4e0f      	ldr	r6, [pc, #60]	@ (8004ce4 <sbrk_aligned+0x40>)
 8004ca8:	460c      	mov	r4, r1
 8004caa:	6831      	ldr	r1, [r6, #0]
 8004cac:	4605      	mov	r5, r0
 8004cae:	b911      	cbnz	r1, 8004cb6 <sbrk_aligned+0x12>
 8004cb0:	f000 f8ae 	bl	8004e10 <_sbrk_r>
 8004cb4:	6030      	str	r0, [r6, #0]
 8004cb6:	4621      	mov	r1, r4
 8004cb8:	4628      	mov	r0, r5
 8004cba:	f000 f8a9 	bl	8004e10 <_sbrk_r>
 8004cbe:	1c43      	adds	r3, r0, #1
 8004cc0:	d103      	bne.n	8004cca <sbrk_aligned+0x26>
 8004cc2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004cc6:	4620      	mov	r0, r4
 8004cc8:	bd70      	pop	{r4, r5, r6, pc}
 8004cca:	1cc4      	adds	r4, r0, #3
 8004ccc:	f024 0403 	bic.w	r4, r4, #3
 8004cd0:	42a0      	cmp	r0, r4
 8004cd2:	d0f8      	beq.n	8004cc6 <sbrk_aligned+0x22>
 8004cd4:	1a21      	subs	r1, r4, r0
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	f000 f89a 	bl	8004e10 <_sbrk_r>
 8004cdc:	3001      	adds	r0, #1
 8004cde:	d1f2      	bne.n	8004cc6 <sbrk_aligned+0x22>
 8004ce0:	e7ef      	b.n	8004cc2 <sbrk_aligned+0x1e>
 8004ce2:	bf00      	nop
 8004ce4:	2000049c 	.word	0x2000049c

08004ce8 <_malloc_r>:
 8004ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cec:	1ccd      	adds	r5, r1, #3
 8004cee:	f025 0503 	bic.w	r5, r5, #3
 8004cf2:	3508      	adds	r5, #8
 8004cf4:	2d0c      	cmp	r5, #12
 8004cf6:	bf38      	it	cc
 8004cf8:	250c      	movcc	r5, #12
 8004cfa:	2d00      	cmp	r5, #0
 8004cfc:	4606      	mov	r6, r0
 8004cfe:	db01      	blt.n	8004d04 <_malloc_r+0x1c>
 8004d00:	42a9      	cmp	r1, r5
 8004d02:	d904      	bls.n	8004d0e <_malloc_r+0x26>
 8004d04:	230c      	movs	r3, #12
 8004d06:	6033      	str	r3, [r6, #0]
 8004d08:	2000      	movs	r0, #0
 8004d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004de4 <_malloc_r+0xfc>
 8004d12:	f000 f869 	bl	8004de8 <__malloc_lock>
 8004d16:	f8d8 3000 	ldr.w	r3, [r8]
 8004d1a:	461c      	mov	r4, r3
 8004d1c:	bb44      	cbnz	r4, 8004d70 <_malloc_r+0x88>
 8004d1e:	4629      	mov	r1, r5
 8004d20:	4630      	mov	r0, r6
 8004d22:	f7ff ffbf 	bl	8004ca4 <sbrk_aligned>
 8004d26:	1c43      	adds	r3, r0, #1
 8004d28:	4604      	mov	r4, r0
 8004d2a:	d158      	bne.n	8004dde <_malloc_r+0xf6>
 8004d2c:	f8d8 4000 	ldr.w	r4, [r8]
 8004d30:	4627      	mov	r7, r4
 8004d32:	2f00      	cmp	r7, #0
 8004d34:	d143      	bne.n	8004dbe <_malloc_r+0xd6>
 8004d36:	2c00      	cmp	r4, #0
 8004d38:	d04b      	beq.n	8004dd2 <_malloc_r+0xea>
 8004d3a:	6823      	ldr	r3, [r4, #0]
 8004d3c:	4639      	mov	r1, r7
 8004d3e:	4630      	mov	r0, r6
 8004d40:	eb04 0903 	add.w	r9, r4, r3
 8004d44:	f000 f864 	bl	8004e10 <_sbrk_r>
 8004d48:	4581      	cmp	r9, r0
 8004d4a:	d142      	bne.n	8004dd2 <_malloc_r+0xea>
 8004d4c:	6821      	ldr	r1, [r4, #0]
 8004d4e:	1a6d      	subs	r5, r5, r1
 8004d50:	4629      	mov	r1, r5
 8004d52:	4630      	mov	r0, r6
 8004d54:	f7ff ffa6 	bl	8004ca4 <sbrk_aligned>
 8004d58:	3001      	adds	r0, #1
 8004d5a:	d03a      	beq.n	8004dd2 <_malloc_r+0xea>
 8004d5c:	6823      	ldr	r3, [r4, #0]
 8004d5e:	442b      	add	r3, r5
 8004d60:	6023      	str	r3, [r4, #0]
 8004d62:	f8d8 3000 	ldr.w	r3, [r8]
 8004d66:	685a      	ldr	r2, [r3, #4]
 8004d68:	bb62      	cbnz	r2, 8004dc4 <_malloc_r+0xdc>
 8004d6a:	f8c8 7000 	str.w	r7, [r8]
 8004d6e:	e00f      	b.n	8004d90 <_malloc_r+0xa8>
 8004d70:	6822      	ldr	r2, [r4, #0]
 8004d72:	1b52      	subs	r2, r2, r5
 8004d74:	d420      	bmi.n	8004db8 <_malloc_r+0xd0>
 8004d76:	2a0b      	cmp	r2, #11
 8004d78:	d917      	bls.n	8004daa <_malloc_r+0xc2>
 8004d7a:	1961      	adds	r1, r4, r5
 8004d7c:	42a3      	cmp	r3, r4
 8004d7e:	6025      	str	r5, [r4, #0]
 8004d80:	bf18      	it	ne
 8004d82:	6059      	strne	r1, [r3, #4]
 8004d84:	6863      	ldr	r3, [r4, #4]
 8004d86:	bf08      	it	eq
 8004d88:	f8c8 1000 	streq.w	r1, [r8]
 8004d8c:	5162      	str	r2, [r4, r5]
 8004d8e:	604b      	str	r3, [r1, #4]
 8004d90:	4630      	mov	r0, r6
 8004d92:	f000 f82f 	bl	8004df4 <__malloc_unlock>
 8004d96:	f104 000b 	add.w	r0, r4, #11
 8004d9a:	1d23      	adds	r3, r4, #4
 8004d9c:	f020 0007 	bic.w	r0, r0, #7
 8004da0:	1ac2      	subs	r2, r0, r3
 8004da2:	bf1c      	itt	ne
 8004da4:	1a1b      	subne	r3, r3, r0
 8004da6:	50a3      	strne	r3, [r4, r2]
 8004da8:	e7af      	b.n	8004d0a <_malloc_r+0x22>
 8004daa:	6862      	ldr	r2, [r4, #4]
 8004dac:	42a3      	cmp	r3, r4
 8004dae:	bf0c      	ite	eq
 8004db0:	f8c8 2000 	streq.w	r2, [r8]
 8004db4:	605a      	strne	r2, [r3, #4]
 8004db6:	e7eb      	b.n	8004d90 <_malloc_r+0xa8>
 8004db8:	4623      	mov	r3, r4
 8004dba:	6864      	ldr	r4, [r4, #4]
 8004dbc:	e7ae      	b.n	8004d1c <_malloc_r+0x34>
 8004dbe:	463c      	mov	r4, r7
 8004dc0:	687f      	ldr	r7, [r7, #4]
 8004dc2:	e7b6      	b.n	8004d32 <_malloc_r+0x4a>
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	42a3      	cmp	r3, r4
 8004dca:	d1fb      	bne.n	8004dc4 <_malloc_r+0xdc>
 8004dcc:	2300      	movs	r3, #0
 8004dce:	6053      	str	r3, [r2, #4]
 8004dd0:	e7de      	b.n	8004d90 <_malloc_r+0xa8>
 8004dd2:	230c      	movs	r3, #12
 8004dd4:	6033      	str	r3, [r6, #0]
 8004dd6:	4630      	mov	r0, r6
 8004dd8:	f000 f80c 	bl	8004df4 <__malloc_unlock>
 8004ddc:	e794      	b.n	8004d08 <_malloc_r+0x20>
 8004dde:	6005      	str	r5, [r0, #0]
 8004de0:	e7d6      	b.n	8004d90 <_malloc_r+0xa8>
 8004de2:	bf00      	nop
 8004de4:	200004a0 	.word	0x200004a0

08004de8 <__malloc_lock>:
 8004de8:	4801      	ldr	r0, [pc, #4]	@ (8004df0 <__malloc_lock+0x8>)
 8004dea:	f000 b84b 	b.w	8004e84 <__retarget_lock_acquire_recursive>
 8004dee:	bf00      	nop
 8004df0:	200005dc 	.word	0x200005dc

08004df4 <__malloc_unlock>:
 8004df4:	4801      	ldr	r0, [pc, #4]	@ (8004dfc <__malloc_unlock+0x8>)
 8004df6:	f000 b846 	b.w	8004e86 <__retarget_lock_release_recursive>
 8004dfa:	bf00      	nop
 8004dfc:	200005dc 	.word	0x200005dc

08004e00 <memset>:
 8004e00:	4402      	add	r2, r0
 8004e02:	4603      	mov	r3, r0
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d100      	bne.n	8004e0a <memset+0xa>
 8004e08:	4770      	bx	lr
 8004e0a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e0e:	e7f9      	b.n	8004e04 <memset+0x4>

08004e10 <_sbrk_r>:
 8004e10:	b538      	push	{r3, r4, r5, lr}
 8004e12:	4d06      	ldr	r5, [pc, #24]	@ (8004e2c <_sbrk_r+0x1c>)
 8004e14:	2300      	movs	r3, #0
 8004e16:	4604      	mov	r4, r0
 8004e18:	4608      	mov	r0, r1
 8004e1a:	602b      	str	r3, [r5, #0]
 8004e1c:	f7fb fddc 	bl	80009d8 <_sbrk>
 8004e20:	1c43      	adds	r3, r0, #1
 8004e22:	d102      	bne.n	8004e2a <_sbrk_r+0x1a>
 8004e24:	682b      	ldr	r3, [r5, #0]
 8004e26:	b103      	cbz	r3, 8004e2a <_sbrk_r+0x1a>
 8004e28:	6023      	str	r3, [r4, #0]
 8004e2a:	bd38      	pop	{r3, r4, r5, pc}
 8004e2c:	200005e0 	.word	0x200005e0

08004e30 <__errno>:
 8004e30:	4b01      	ldr	r3, [pc, #4]	@ (8004e38 <__errno+0x8>)
 8004e32:	6818      	ldr	r0, [r3, #0]
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	2000000c 	.word	0x2000000c

08004e3c <__libc_init_array>:
 8004e3c:	b570      	push	{r4, r5, r6, lr}
 8004e3e:	4d0d      	ldr	r5, [pc, #52]	@ (8004e74 <__libc_init_array+0x38>)
 8004e40:	4c0d      	ldr	r4, [pc, #52]	@ (8004e78 <__libc_init_array+0x3c>)
 8004e42:	1b64      	subs	r4, r4, r5
 8004e44:	10a4      	asrs	r4, r4, #2
 8004e46:	2600      	movs	r6, #0
 8004e48:	42a6      	cmp	r6, r4
 8004e4a:	d109      	bne.n	8004e60 <__libc_init_array+0x24>
 8004e4c:	4d0b      	ldr	r5, [pc, #44]	@ (8004e7c <__libc_init_array+0x40>)
 8004e4e:	4c0c      	ldr	r4, [pc, #48]	@ (8004e80 <__libc_init_array+0x44>)
 8004e50:	f000 f81a 	bl	8004e88 <_init>
 8004e54:	1b64      	subs	r4, r4, r5
 8004e56:	10a4      	asrs	r4, r4, #2
 8004e58:	2600      	movs	r6, #0
 8004e5a:	42a6      	cmp	r6, r4
 8004e5c:	d105      	bne.n	8004e6a <__libc_init_array+0x2e>
 8004e5e:	bd70      	pop	{r4, r5, r6, pc}
 8004e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e64:	4798      	blx	r3
 8004e66:	3601      	adds	r6, #1
 8004e68:	e7ee      	b.n	8004e48 <__libc_init_array+0xc>
 8004e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e6e:	4798      	blx	r3
 8004e70:	3601      	adds	r6, #1
 8004e72:	e7f2      	b.n	8004e5a <__libc_init_array+0x1e>
 8004e74:	08004ef8 	.word	0x08004ef8
 8004e78:	08004ef8 	.word	0x08004ef8
 8004e7c:	08004ef8 	.word	0x08004ef8
 8004e80:	08004efc 	.word	0x08004efc

08004e84 <__retarget_lock_acquire_recursive>:
 8004e84:	4770      	bx	lr

08004e86 <__retarget_lock_release_recursive>:
 8004e86:	4770      	bx	lr

08004e88 <_init>:
 8004e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e8a:	bf00      	nop
 8004e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e8e:	bc08      	pop	{r3}
 8004e90:	469e      	mov	lr, r3
 8004e92:	4770      	bx	lr

08004e94 <_fini>:
 8004e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e96:	bf00      	nop
 8004e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e9a:	bc08      	pop	{r3}
 8004e9c:	469e      	mov	lr, r3
 8004e9e:	4770      	bx	lr
