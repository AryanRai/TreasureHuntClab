
treasurehunt_game_logic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000222c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  080023cc  080023cc  000033cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028b0  080028b0  00004064  2**0
                  CONTENTS
  4 .ARM          00000008  080028b0  080028b0  000038b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080028b8  080028b8  00004064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028b8  080028b8  000038b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080028bc  080028bc  000038bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080028c0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004064  2**0
                  CONTENTS
 10 .bss          0000037c  20000064  20000064  00004064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003e0  200003e0  00004064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004064  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000228e  00000000  00000000  00004094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000a3c  00000000  00000000  00006322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000218  00000000  00000000  00006d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000174  00000000  00000000  00006f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016d25  00000000  00000000  000070ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002908  00000000  00000000  0001de11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00078df3  00000000  00000000  00020719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0009950c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001374  00000000  00000000  00099550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000082  00000000  00000000  0009a8c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080023b4 	.word	0x080023b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	080023b4 	.word	0x080023b4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <check_servo_choice>:
 */

#include "gamestate.h"


int check_servo_choice(int correct_servos[], int servo_choice, int total_servos){
 80002a0:	b480      	push	{r7}
 80002a2:	b087      	sub	sp, #28
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	60f8      	str	r0, [r7, #12]
 80002a8:	60b9      	str	r1, [r7, #8]
 80002aa:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < total_servos; i++){
 80002ac:	2300      	movs	r3, #0
 80002ae:	617b      	str	r3, [r7, #20]
 80002b0:	e00c      	b.n	80002cc <check_servo_choice+0x2c>
		if(correct_servos[i] == servo_choice){
 80002b2:	697b      	ldr	r3, [r7, #20]
 80002b4:	009b      	lsls	r3, r3, #2
 80002b6:	68fa      	ldr	r2, [r7, #12]
 80002b8:	4413      	add	r3, r2
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	68ba      	ldr	r2, [r7, #8]
 80002be:	429a      	cmp	r2, r3
 80002c0:	d101      	bne.n	80002c6 <check_servo_choice+0x26>
	return(1);
 80002c2:	2301      	movs	r3, #1
 80002c4:	e007      	b.n	80002d6 <check_servo_choice+0x36>
	for(int i = 0; i < total_servos; i++){
 80002c6:	697b      	ldr	r3, [r7, #20]
 80002c8:	3301      	adds	r3, #1
 80002ca:	617b      	str	r3, [r7, #20]
 80002cc:	697a      	ldr	r2, [r7, #20]
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	429a      	cmp	r2, r3
 80002d2:	dbee      	blt.n	80002b2 <check_servo_choice+0x12>
        }
    }
    return 0;  // No match found after checking all
 80002d4:	2300      	movs	r3, #0
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	371c      	adds	r7, #28
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
	...

080002e4 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning \
    "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void) {
 80002e4:	b5b0      	push	{r4, r5, r7, lr}
 80002e6:	b0a4      	sub	sp, #144	@ 0x90
 80002e8:	af0a      	add	r7, sp, #40	@ 0x28
  // For Testing =======
  char* command = NULL;
 80002ea:	2300      	movs	r3, #0
 80002ec:	667b      	str	r3, [r7, #100]	@ 0x64
  char* follow = NULL;
 80002ee:	2300      	movs	r3, #0
 80002f0:	663b      	str	r3, [r7, #96]	@ 0x60
  // For Testing =======

  enableUSART1();
 80002f2:	f000 fa85 	bl	8000800 <enableUSART1>
  enableUARTInterrupts();
 80002f6:	f000 fabd 	bl	8000874 <enableUARTInterrupts>
  clear_screen();
 80002fa:	f000 fc5d 	bl	8000bb8 <clear_screen>

  send_string("hello world");
 80002fe:	488c      	ldr	r0, [pc, #560]	@ (8000530 <main+0x24c>)
 8000300:	f000 fb14 	bl	800092c <send_string>
  clear_screen();
 8000304:	f000 fc58 	bl	8000bb8 <clear_screen>

  GameState game = {
 8000308:	f107 0320 	add.w	r3, r7, #32
 800030c:	2238      	movs	r2, #56	@ 0x38
 800030e:	2100      	movs	r1, #0
 8000310:	4618      	mov	r0, r3
 8000312:	f000 ffa2 	bl	800125a <memset>
 8000316:	2301      	movs	r3, #1
 8000318:	623b      	str	r3, [r7, #32]
 800031a:	2303      	movs	r3, #3
 800031c:	627b      	str	r3, [r7, #36]	@ 0x24
 800031e:	2304      	movs	r3, #4
 8000320:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000322:	2306      	movs	r3, #6
 8000324:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000326:	2304      	movs	r3, #4
 8000328:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800032a:	2304      	movs	r3, #4
 800032c:	647b      	str	r3, [r7, #68]	@ 0x44
 800032e:	23f0      	movs	r3, #240	@ 0xf0
 8000330:	64fb      	str	r3, [r7, #76]	@ 0x4c
			.game_over = 0,
			.total_items_to_find = 0
  };

  //Count item numbers
  int count = 0;
 8000332:	2300      	movs	r3, #0
 8000334:	65fb      	str	r3, [r7, #92]	@ 0x5c
  for (int i = 0; i < 6; i++) {
 8000336:	2300      	movs	r3, #0
 8000338:	65bb      	str	r3, [r7, #88]	@ 0x58
 800033a:	e00d      	b.n	8000358 <main+0x74>
      if (game.correct_servos[i] != 0) {
 800033c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800033e:	009b      	lsls	r3, r3, #2
 8000340:	3368      	adds	r3, #104	@ 0x68
 8000342:	443b      	add	r3, r7
 8000344:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d002      	beq.n	8000352 <main+0x6e>
          count++;
 800034c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800034e:	3301      	adds	r3, #1
 8000350:	65fb      	str	r3, [r7, #92]	@ 0x5c
  for (int i = 0; i < 6; i++) {
 8000352:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000354:	3301      	adds	r3, #1
 8000356:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000358:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800035a:	2b05      	cmp	r3, #5
 800035c:	ddee      	ble.n	800033c <main+0x58>
      }
  }
  game.total_items_to_find = count;
 800035e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000360:	657b      	str	r3, [r7, #84]	@ 0x54

  GameTriggers triggers = {
 8000362:	4b74      	ldr	r3, [pc, #464]	@ (8000534 <main+0x250>)
 8000364:	463c      	mov	r4, r7
 8000366:	461d      	mov	r5, r3
 8000368:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800036a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800036c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000370:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			.trimpot_value = 0,
			.peek_threshold = 10,
			.pending_peek = 0
  };

  send_string("Game Initialised\r\n");
 8000374:	4870      	ldr	r0, [pc, #448]	@ (8000538 <main+0x254>)
 8000376:	f000 fad9 	bl	800092c <send_string>
  // print_game_triggers(triggers);

  // triggers.touchpad_pressed = touchpad_interrupt;

  // Loop forever
  while (game.game_over == 0) {
 800037a:	e1ca      	b.n	8000712 <main+0x42e>
    if (message_complete == 1) {
 800037c:	4b6f      	ldr	r3, [pc, #444]	@ (800053c <main+0x258>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	2b01      	cmp	r3, #1
 8000382:	d10d      	bne.n	80003a0 <main+0xbc>
      command = strtok((char*)string, " ");  // load commmand
 8000384:	496e      	ldr	r1, [pc, #440]	@ (8000540 <main+0x25c>)
 8000386:	486f      	ldr	r0, [pc, #444]	@ (8000544 <main+0x260>)
 8000388:	f000 ff70 	bl	800126c <strtok>
 800038c:	4603      	mov	r3, r0
 800038e:	667b      	str	r3, [r7, #100]	@ 0x64
      follow = strtok(NULL, "");             // load
 8000390:	496d      	ldr	r1, [pc, #436]	@ (8000548 <main+0x264>)
 8000392:	2000      	movs	r0, #0
 8000394:	f000 ff6a 	bl	800126c <strtok>
 8000398:	4603      	mov	r3, r0
 800039a:	663b      	str	r3, [r7, #96]	@ 0x60
      //		      message_complete = 0;  // need to reset this for
      //next message
      clear_screen();
 800039c:	f000 fc0c 	bl	8000bb8 <clear_screen>
    }
    if (command != NULL && message_complete == 1) {
 80003a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	f000 8101 	beq.w	80005aa <main+0x2c6>
 80003a8:	4b64      	ldr	r3, [pc, #400]	@ (800053c <main+0x258>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	2b01      	cmp	r3, #1
 80003ae:	f040 80fc 	bne.w	80005aa <main+0x2c6>
      if (strcmp(command, "touchpad") == 0 && valid_period_check(follow) != 0) {
 80003b2:	4966      	ldr	r1, [pc, #408]	@ (800054c <main+0x268>)
 80003b4:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80003b6:	f7ff ff13 	bl	80001e0 <strcmp>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d126      	bne.n	800040e <main+0x12a>
 80003c0:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80003c2:	f000 fc03 	bl	8000bcc <valid_period_check>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d020      	beq.n	800040e <main+0x12a>

        sprintf(feedback_string, "Touchpad set to: %s \r\n", follow);
 80003cc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80003ce:	4960      	ldr	r1, [pc, #384]	@ (8000550 <main+0x26c>)
 80003d0:	4860      	ldr	r0, [pc, #384]	@ (8000554 <main+0x270>)
 80003d2:	f000 fedf 	bl	8001194 <siprintf>
        send_string(feedback_string);
 80003d6:	485f      	ldr	r0, [pc, #380]	@ (8000554 <main+0x270>)
 80003d8:	f000 faa8 	bl	800092c <send_string>
        triggers.touchpad_pressed = atoi(follow);
 80003dc:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80003de:	f000 fd32 	bl	8000e46 <atoi>
 80003e2:	4603      	mov	r3, r0
 80003e4:	603b      	str	r3, [r7, #0]
        memset(feedback_string, 0, BUFFER);
 80003e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80003ea:	2100      	movs	r1, #0
 80003ec:	4859      	ldr	r0, [pc, #356]	@ (8000554 <main+0x270>)
 80003ee:	f000 ff34 	bl	800125a <memset>
        send_string("Touchpad set to ");
 80003f2:	4859      	ldr	r0, [pc, #356]	@ (8000558 <main+0x274>)
 80003f4:	f000 fa9a 	bl	800092c <send_string>
        send_string_buffer(triggers.touchpad_pressed);
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	4618      	mov	r0, r3
 80003fc:	f000 fab6 	bl	800096c <send_string_buffer>
        send_string("\r\n");
 8000400:	4856      	ldr	r0, [pc, #344]	@ (800055c <main+0x278>)
 8000402:	f000 fa93 	bl	800092c <send_string>
        //		          print_game_triggers(triggers);
        message_complete = 0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	@ (800053c <main+0x258>)
 8000408:	2200      	movs	r2, #0
 800040a:	601a      	str	r2, [r3, #0]
      if (strcmp(command, "touchpad") == 0 && valid_period_check(follow) != 0) {
 800040c:	e0be      	b.n	800058c <main+0x2a8>

      } else if (strcmp(command, "servo") == 0 &&
 800040e:	4954      	ldr	r1, [pc, #336]	@ (8000560 <main+0x27c>)
 8000410:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8000412:	f7ff fee5 	bl	80001e0 <strcmp>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d12b      	bne.n	8000474 <main+0x190>
                 valid_period_check(follow) != 0) {
 800041c:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800041e:	f000 fbd5 	bl	8000bcc <valid_period_check>
 8000422:	4603      	mov	r3, r0
      } else if (strcmp(command, "servo") == 0 &&
 8000424:	2b00      	cmp	r3, #0
 8000426:	d025      	beq.n	8000474 <main+0x190>

        sprintf(feedback_string, "Servo angle set to: %s \r\n", follow);
 8000428:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800042a:	494e      	ldr	r1, [pc, #312]	@ (8000564 <main+0x280>)
 800042c:	4849      	ldr	r0, [pc, #292]	@ (8000554 <main+0x270>)
 800042e:	f000 feb1 	bl	8001194 <siprintf>
        send_string(feedback_string);
 8000432:	4848      	ldr	r0, [pc, #288]	@ (8000554 <main+0x270>)
 8000434:	f000 fa7a 	bl	800092c <send_string>
        triggers.servo_angle = atoi(follow);
 8000438:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800043a:	f000 fd04 	bl	8000e46 <atoi>
 800043e:	4603      	mov	r3, r0
 8000440:	613b      	str	r3, [r7, #16]
        triggers.trimpot_value = atoi(follow);  // Remove this later
 8000442:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8000444:	f000 fcff 	bl	8000e46 <atoi>
 8000448:	4603      	mov	r3, r0
 800044a:	617b      	str	r3, [r7, #20]
        memset(feedback_string, 0, BUFFER);
 800044c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000450:	2100      	movs	r1, #0
 8000452:	4840      	ldr	r0, [pc, #256]	@ (8000554 <main+0x270>)
 8000454:	f000 ff01 	bl	800125a <memset>
        send_string("Servo set to ");
 8000458:	4843      	ldr	r0, [pc, #268]	@ (8000568 <main+0x284>)
 800045a:	f000 fa67 	bl	800092c <send_string>
        send_string_buffer(triggers.servo_angle);
 800045e:	693b      	ldr	r3, [r7, #16]
 8000460:	4618      	mov	r0, r3
 8000462:	f000 fa83 	bl	800096c <send_string_buffer>
        send_string("\r\n");
 8000466:	483d      	ldr	r0, [pc, #244]	@ (800055c <main+0x278>)
 8000468:	f000 fa60 	bl	800092c <send_string>
        // print_game_triggers(triggers);
        message_complete = 0;
 800046c:	4b33      	ldr	r3, [pc, #204]	@ (800053c <main+0x258>)
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
                 valid_period_check(follow) != 0) {
 8000472:	e08b      	b.n	800058c <main+0x2a8>

      } else if (strcmp(command, "trimpot") == 0 &&
 8000474:	493d      	ldr	r1, [pc, #244]	@ (800056c <main+0x288>)
 8000476:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8000478:	f7ff feb2 	bl	80001e0 <strcmp>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d126      	bne.n	80004d0 <main+0x1ec>
                 valid_period_check(follow) != 0) {
 8000482:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8000484:	f000 fba2 	bl	8000bcc <valid_period_check>
 8000488:	4603      	mov	r3, r0
      } else if (strcmp(command, "trimpot") == 0 &&
 800048a:	2b00      	cmp	r3, #0
 800048c:	d020      	beq.n	80004d0 <main+0x1ec>

        sprintf(feedback_string, "Trimpot Value set to: %s \r\n", follow);
 800048e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000490:	4937      	ldr	r1, [pc, #220]	@ (8000570 <main+0x28c>)
 8000492:	4830      	ldr	r0, [pc, #192]	@ (8000554 <main+0x270>)
 8000494:	f000 fe7e 	bl	8001194 <siprintf>
        send_string(feedback_string);
 8000498:	482e      	ldr	r0, [pc, #184]	@ (8000554 <main+0x270>)
 800049a:	f000 fa47 	bl	800092c <send_string>
        triggers.trimpot_value = atoi(follow);
 800049e:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80004a0:	f000 fcd1 	bl	8000e46 <atoi>
 80004a4:	4603      	mov	r3, r0
 80004a6:	617b      	str	r3, [r7, #20]
        memset(feedback_string, 0, BUFFER);
 80004a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80004ac:	2100      	movs	r1, #0
 80004ae:	4829      	ldr	r0, [pc, #164]	@ (8000554 <main+0x270>)
 80004b0:	f000 fed3 	bl	800125a <memset>
        send_string("Trimpot set to ");
 80004b4:	482f      	ldr	r0, [pc, #188]	@ (8000574 <main+0x290>)
 80004b6:	f000 fa39 	bl	800092c <send_string>
        send_string_buffer(triggers.trimpot_value);
 80004ba:	697b      	ldr	r3, [r7, #20]
 80004bc:	4618      	mov	r0, r3
 80004be:	f000 fa55 	bl	800096c <send_string_buffer>
        send_string("\r\n");
 80004c2:	4826      	ldr	r0, [pc, #152]	@ (800055c <main+0x278>)
 80004c4:	f000 fa32 	bl	800092c <send_string>

        // print_game_triggers(triggers);
        message_complete = 0;
 80004c8:	4b1c      	ldr	r3, [pc, #112]	@ (800053c <main+0x258>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
                 valid_period_check(follow) != 0) {
 80004ce:	e05d      	b.n	800058c <main+0x2a8>

      } else if (strcmp(command, "triggers") == 0){
 80004d0:	4929      	ldr	r1, [pc, #164]	@ (8000578 <main+0x294>)
 80004d2:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80004d4:	f7ff fe84 	bl	80001e0 <strcmp>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d10d      	bne.n	80004fa <main+0x216>
    	  print_game_triggers(triggers);
 80004de:	466c      	mov	r4, sp
 80004e0:	f107 0310 	add.w	r3, r7, #16
 80004e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80004ea:	463b      	mov	r3, r7
 80004ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004ee:	f000 faff 	bl	8000af0 <print_game_triggers>
    	  message_complete = 0;
 80004f2:	4b12      	ldr	r3, [pc, #72]	@ (800053c <main+0x258>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	e048      	b.n	800058c <main+0x2a8>
      } else if (strcmp(command, "game") == 0){
 80004fa:	4920      	ldr	r1, [pc, #128]	@ (800057c <main+0x298>)
 80004fc:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80004fe:	f7ff fe6f 	bl	80001e0 <strcmp>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d13b      	bne.n	8000580 <main+0x29c>
    	  print_game_state(game);
 8000508:	466d      	mov	r5, sp
 800050a:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 800050e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000510:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000512:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000514:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000516:	e894 0003 	ldmia.w	r4, {r0, r1}
 800051a:	e885 0003 	stmia.w	r5, {r0, r1}
 800051e:	f107 0320 	add.w	r3, r7, #32
 8000522:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000524:	f000 fa4a 	bl	80009bc <print_game_state>
    	  message_complete = 0;
 8000528:	4b04      	ldr	r3, [pc, #16]	@ (800053c <main+0x258>)
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	e02d      	b.n	800058c <main+0x2a8>
 8000530:	080023cc 	.word	0x080023cc
 8000534:	08002540 	.word	0x08002540
 8000538:	080023d8 	.word	0x080023d8
 800053c:	20000080 	.word	0x20000080
 8000540:	080023ec 	.word	0x080023ec
 8000544:	20000188 	.word	0x20000188
 8000548:	080023f0 	.word	0x080023f0
 800054c:	080023f4 	.word	0x080023f4
 8000550:	08002400 	.word	0x08002400
 8000554:	20000084 	.word	0x20000084
 8000558:	08002418 	.word	0x08002418
 800055c:	0800242c 	.word	0x0800242c
 8000560:	08002430 	.word	0x08002430
 8000564:	08002438 	.word	0x08002438
 8000568:	08002454 	.word	0x08002454
 800056c:	08002464 	.word	0x08002464
 8000570:	0800246c 	.word	0x0800246c
 8000574:	08002488 	.word	0x08002488
 8000578:	08002498 	.word	0x08002498
 800057c:	080024a4 	.word	0x080024a4
      } else {
        send_string("Unknown command\r\n");
 8000580:	4868      	ldr	r0, [pc, #416]	@ (8000724 <main+0x440>)
 8000582:	f000 f9d3 	bl	800092c <send_string>
        message_complete = 0;
 8000586:	4b68      	ldr	r3, [pc, #416]	@ (8000728 <main+0x444>)
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
      }
      reset_input_buffer();
 800058c:	f000 f926 	bl	80007dc <reset_input_buffer>
      command = NULL;
 8000590:	2300      	movs	r3, #0
 8000592:	667b      	str	r3, [r7, #100]	@ 0x64
      follow = NULL;
 8000594:	2300      	movs	r3, #0
 8000596:	663b      	str	r3, [r7, #96]	@ 0x60
      message_complete = 0;
 8000598:	4b63      	ldr	r3, [pc, #396]	@ (8000728 <main+0x444>)
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
      memset(feedback_string, 0, BUFFER);
 800059e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005a2:	2100      	movs	r1, #0
 80005a4:	4861      	ldr	r0, [pc, #388]	@ (800072c <main+0x448>)
 80005a6:	f000 fe58 	bl	800125a <memset>
    }

    // Need an interrupt to change triggers.touchpad_pressed = -1 when touchpad
    // is pressed
    if (triggers.touchpad_pressed != -1) {
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005b0:	f000 80af 	beq.w	8000712 <main+0x42e>
      // send_string("\n\ntouchpad pressed\r\n");
      triggers.servo_controlled = triggers.touchpad_pressed;
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	60fb      	str	r3, [r7, #12]
      send_string("\r\n");
      touctriggers.touchpad_pressed = -1;
      */
      // print_game_triggers(triggers);

      if (triggers.servo_controlled != -1) {
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005be:	f000 80a8 	beq.w	8000712 <main+0x42e>
    	  if (triggers.servo_controlled != last_servo_selection) {
 80005c2:	68fa      	ldr	r2, [r7, #12]
 80005c4:	4b5a      	ldr	r3, [pc, #360]	@ (8000730 <main+0x44c>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	d01f      	beq.n	800060c <main+0x328>
    	          if(triggers.pending_peek == 1){
 80005cc:	69fb      	ldr	r3, [r7, #28]
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d117      	bne.n	8000602 <main+0x31e>
    	        	game.peeks_used += 1;
 80005d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80005d4:	3301      	adds	r3, #1
 80005d6:	64bb      	str	r3, [r7, #72]	@ 0x48
					send_string("New Peek Used\r\n");
 80005d8:	4856      	ldr	r0, [pc, #344]	@ (8000734 <main+0x450>)
 80005da:	f000 f9a7 	bl	800092c <send_string>
					print_game_state(game);
 80005de:	466d      	mov	r5, sp
 80005e0:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 80005e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80005f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80005f4:	f107 0320 	add.w	r3, r7, #32
 80005f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005fa:	f000 f9df 	bl	80009bc <print_game_state>
					triggers.pending_peek = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	61fb      	str	r3, [r7, #28]
    	          } // Reset peek
    	          triggers.servo_angle = 0;
 8000602:	2300      	movs	r3, #0
 8000604:	613b      	str	r3, [r7, #16]
    	          last_servo_selection = triggers.servo_controlled;
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	4a49      	ldr	r2, [pc, #292]	@ (8000730 <main+0x44c>)
 800060a:	6013      	str	r3, [r2, #0]
    	      }


          if (triggers.servo_angle != last_servo_angle) {
 800060c:	693a      	ldr	r2, [r7, #16]
 800060e:	4b4a      	ldr	r3, [pc, #296]	@ (8000738 <main+0x454>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	429a      	cmp	r2, r3
 8000614:	d07d      	beq.n	8000712 <main+0x42e>

              // Respond to angle
              if (triggers.servo_angle == 0) {
 8000616:	693b      	ldr	r3, [r7, #16]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d123      	bne.n	8000664 <main+0x380>
                  send_string("Door Closed\r\n");
 800061c:	4847      	ldr	r0, [pc, #284]	@ (800073c <main+0x458>)
 800061e:	f000 f985 	bl	800092c <send_string>


                  if (triggers.pending_peek == 1 && last_servo_selection == triggers.servo_controlled) { // only change peek if dig is not passed
 8000622:	69fb      	ldr	r3, [r7, #28]
 8000624:	2b01      	cmp	r3, #1
 8000626:	d16e      	bne.n	8000706 <main+0x422>
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	4b41      	ldr	r3, [pc, #260]	@ (8000730 <main+0x44c>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	429a      	cmp	r2, r3
 8000630:	d169      	bne.n	8000706 <main+0x422>
                      game.peeks_used += 1;
 8000632:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000634:	3301      	adds	r3, #1
 8000636:	64bb      	str	r3, [r7, #72]	@ 0x48
                      send_string("New Peek Used\r\n");
 8000638:	483e      	ldr	r0, [pc, #248]	@ (8000734 <main+0x450>)
 800063a:	f000 f977 	bl	800092c <send_string>
                      print_game_state(game);
 800063e:	466d      	mov	r5, sp
 8000640:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8000644:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000646:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000648:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800064a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800064c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000650:	e885 0003 	stmia.w	r5, {r0, r1}
 8000654:	f107 0320 	add.w	r3, r7, #32
 8000658:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800065a:	f000 f9af 	bl	80009bc <print_game_state>
                      triggers.pending_peek = 0; // Reset peek
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]
 8000662:	e050      	b.n	8000706 <main+0x422>
                  }
              } else if (triggers.servo_angle > 0 && triggers.servo_angle < triggers.peek_threshold) {
 8000664:	693b      	ldr	r3, [r7, #16]
 8000666:	2b00      	cmp	r3, #0
 8000668:	dd12      	ble.n	8000690 <main+0x3ac>
 800066a:	693a      	ldr	r2, [r7, #16]
 800066c:	69bb      	ldr	r3, [r7, #24]
 800066e:	429a      	cmp	r2, r3
 8000670:	da0e      	bge.n	8000690 <main+0x3ac>
                  send_string("Below Dig Threshold. But above 0. Peek in Progress.\r\n");
 8000672:	4833      	ldr	r0, [pc, #204]	@ (8000740 <main+0x45c>)
 8000674:	f000 f95a 	bl	800092c <send_string>

                  // Only increment peek count if coming *from* a closed or dig state
                  if (last_servo_angle == 0 && last_servo_selection == triggers.servo_controlled) {
 8000678:	4b2f      	ldr	r3, [pc, #188]	@ (8000738 <main+0x454>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d141      	bne.n	8000704 <main+0x420>
 8000680:	68fa      	ldr	r2, [r7, #12]
 8000682:	4b2b      	ldr	r3, [pc, #172]	@ (8000730 <main+0x44c>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	429a      	cmp	r2, r3
 8000688:	d13c      	bne.n	8000704 <main+0x420>
                	  //game.peeks_used += 1;
                      //send_string("New Peek Used\r\n");
                	  //print_game_state(game);
                	  triggers.pending_peek = 1;
 800068a:	2301      	movs	r3, #1
 800068c:	61fb      	str	r3, [r7, #28]
                  if (last_servo_angle == 0 && last_servo_selection == triggers.servo_controlled) {
 800068e:	e039      	b.n	8000704 <main+0x420>
                  }

              } else if (triggers.servo_angle >= triggers.peek_threshold) {
 8000690:	693a      	ldr	r2, [r7, #16]
 8000692:	69bb      	ldr	r3, [r7, #24]
 8000694:	429a      	cmp	r2, r3
 8000696:	db36      	blt.n	8000706 <main+0x422>
                  send_string("Dig Threshold Passed.\r\n");
 8000698:	482a      	ldr	r0, [pc, #168]	@ (8000744 <main+0x460>)
 800069a:	f000 f947 	bl	800092c <send_string>


                  // Only increment dig count if last angle was not already a dig
                  if (last_servo_angle < triggers.peek_threshold && last_servo_selection == triggers.servo_controlled) {
 800069e:	69ba      	ldr	r2, [r7, #24]
 80006a0:	4b25      	ldr	r3, [pc, #148]	@ (8000738 <main+0x454>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	dd2a      	ble.n	80006fe <main+0x41a>
 80006a8:	68fa      	ldr	r2, [r7, #12]
 80006aa:	4b21      	ldr	r3, [pc, #132]	@ (8000730 <main+0x44c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	429a      	cmp	r2, r3
 80006b0:	d125      	bne.n	80006fe <main+0x41a>
                      game.digs_taken += 1;
 80006b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80006b4:	3301      	adds	r3, #1
 80006b6:	643b      	str	r3, [r7, #64]	@ 0x40
                      if (check_servo_choice(game.correct_servos, triggers.servo_controlled, game.total_items_to_find) == 1) {
 80006b8:	68f9      	ldr	r1, [r7, #12]
 80006ba:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80006bc:	f107 0320 	add.w	r3, r7, #32
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff fded 	bl	80002a0 <check_servo_choice>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d105      	bne.n	80006d8 <main+0x3f4>
                              game.items_found++;
 80006cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80006ce:	3301      	adds	r3, #1
 80006d0:	63bb      	str	r3, [r7, #56]	@ 0x38
                              game.items_left_to_find--;
 80006d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80006d4:	3b01      	subs	r3, #1
 80006d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
                          }
                      send_string("New Dig Used\r\n");
 80006d8:	481b      	ldr	r0, [pc, #108]	@ (8000748 <main+0x464>)
 80006da:	f000 f927 	bl	800092c <send_string>
                      print_game_state(game);
 80006de:	466d      	mov	r5, sp
 80006e0:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 80006e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80006f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80006f4:	f107 0320 	add.w	r3, r7, #32
 80006f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006fa:	f000 f95f 	bl	80009bc <print_game_state>

                  }
                  triggers.pending_peek = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]
 8000702:	e000      	b.n	8000706 <main+0x422>
                  if (last_servo_angle == 0 && last_servo_selection == triggers.servo_controlled) {
 8000704:	bf00      	nop
              }

              // Update the last angle
              last_servo_angle = triggers.servo_angle;
 8000706:	693b      	ldr	r3, [r7, #16]
 8000708:	4a0b      	ldr	r2, [pc, #44]	@ (8000738 <main+0x454>)
 800070a:	6013      	str	r3, [r2, #0]
              last_servo_selection =triggers.servo_controlled;
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	4a08      	ldr	r2, [pc, #32]	@ (8000730 <main+0x44c>)
 8000710:	6013      	str	r3, [r2, #0]
  while (game.game_over == 0) {
 8000712:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000714:	2b00      	cmp	r3, #0
 8000716:	f43f ae31 	beq.w	800037c <main+0x98>
    if(game.items_left_to_find == 0 || game.digs_remaining == 0 ||
game.time_remaining == 0;){ game.game_over = 1;
    }
*/
}
  return 0;
 800071a:	2300      	movs	r3, #0
}
 800071c:	4618      	mov	r0, r3
 800071e:	3768      	adds	r7, #104	@ 0x68
 8000720:	46bd      	mov	sp, r7
 8000722:	bdb0      	pop	{r4, r5, r7, pc}
 8000724:	080024ac 	.word	0x080024ac
 8000728:	20000080 	.word	0x20000080
 800072c:	20000084 	.word	0x20000084
 8000730:	20000004 	.word	0x20000004
 8000734:	080024c0 	.word	0x080024c0
 8000738:	20000000 	.word	0x20000000
 800073c:	080024d0 	.word	0x080024d0
 8000740:	080024e0 	.word	0x080024e0
 8000744:	08002518 	.word	0x08002518
 8000748:	08002530 	.word	0x08002530

0800074c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075a:	2b00      	cmp	r3, #0
 800075c:	db0b      	blt.n	8000776 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	f003 021f 	and.w	r2, r3, #31
 8000764:	4907      	ldr	r1, [pc, #28]	@ (8000784 <__NVIC_EnableIRQ+0x38>)
 8000766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076a:	095b      	lsrs	r3, r3, #5
 800076c:	2001      	movs	r0, #1
 800076e:	fa00 f202 	lsl.w	r2, r0, r2
 8000772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	e000e100 	.word	0xe000e100

08000788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	6039      	str	r1, [r7, #0]
 8000792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000798:	2b00      	cmp	r3, #0
 800079a:	db0a      	blt.n	80007b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	b2da      	uxtb	r2, r3
 80007a0:	490c      	ldr	r1, [pc, #48]	@ (80007d4 <__NVIC_SetPriority+0x4c>)
 80007a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a6:	0112      	lsls	r2, r2, #4
 80007a8:	b2d2      	uxtb	r2, r2
 80007aa:	440b      	add	r3, r1
 80007ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007b0:	e00a      	b.n	80007c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	4908      	ldr	r1, [pc, #32]	@ (80007d8 <__NVIC_SetPriority+0x50>)
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	f003 030f 	and.w	r3, r3, #15
 80007be:	3b04      	subs	r3, #4
 80007c0:	0112      	lsls	r2, r2, #4
 80007c2:	b2d2      	uxtb	r2, r2
 80007c4:	440b      	add	r3, r1
 80007c6:	761a      	strb	r2, [r3, #24]
}
 80007c8:	bf00      	nop
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	e000e100 	.word	0xe000e100
 80007d8:	e000ed00 	.word	0xe000ed00

080007dc <reset_input_buffer>:

int i;
unsigned char string[BUFFER];
extern int message_complete;

void reset_input_buffer() {
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
    memset(string, 0, BUFFER);
 80007e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007e4:	2100      	movs	r1, #0
 80007e6:	4804      	ldr	r0, [pc, #16]	@ (80007f8 <reset_input_buffer+0x1c>)
 80007e8:	f000 fd37 	bl	800125a <memset>
    i = 0;
 80007ec:	4b03      	ldr	r3, [pc, #12]	@ (80007fc <reset_input_buffer+0x20>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000188 	.word	0x20000188
 80007fc:	20000184 	.word	0x20000184

08000800 <enableUSART1>:

void enableUSART1()
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
	// Enable GPIO C and USART1's clocks
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN_Msk;
 8000804:	4b18      	ldr	r3, [pc, #96]	@ (8000868 <enableUSART1+0x68>)
 8000806:	695b      	ldr	r3, [r3, #20]
 8000808:	4a17      	ldr	r2, [pc, #92]	@ (8000868 <enableUSART1+0x68>)
 800080a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800080e:	6153      	str	r3, [r2, #20]
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN_Msk;
 8000810:	4b15      	ldr	r3, [pc, #84]	@ (8000868 <enableUSART1+0x68>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	4a14      	ldr	r2, [pc, #80]	@ (8000868 <enableUSART1+0x68>)
 8000816:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800081a:	6193      	str	r3, [r2, #24]

	// Set GPIO C to use UART as alternate function
	GPIOC->MODER = ALTFUNCTION;
 800081c:	4b13      	ldr	r3, [pc, #76]	@ (800086c <enableUSART1+0x6c>)
 800081e:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8000822:	601a      	str	r2, [r3, #0]
	GPIOC->AFR[0] = RXTX;
 8000824:	4b11      	ldr	r3, [pc, #68]	@ (800086c <enableUSART1+0x6c>)
 8000826:	f44f 02ee 	mov.w	r2, #7798784	@ 0x770000
 800082a:	621a      	str	r2, [r3, #32]
	GPIOC->OSPEEDR = HIGHSPEED;
 800082c:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <enableUSART1+0x6c>)
 800082e:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8000832:	609a      	str	r2, [r3, #8]

	// Set the baud rate and ready USART 1 for both receive and transmit
	USART1->BRR = BAUDRATE;                   // Baud rate = 115200
 8000834:	4b0e      	ldr	r3, [pc, #56]	@ (8000870 <enableUSART1+0x70>)
 8000836:	2246      	movs	r2, #70	@ 0x46
 8000838:	60da      	str	r2, [r3, #12]
	USART1->CR1 |= USART_CR1_RE_Msk;
 800083a:	4b0d      	ldr	r3, [pc, #52]	@ (8000870 <enableUSART1+0x70>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a0c      	ldr	r2, [pc, #48]	@ (8000870 <enableUSART1+0x70>)
 8000840:	f043 0304 	orr.w	r3, r3, #4
 8000844:	6013      	str	r3, [r2, #0]
	USART1->CR1 |= USART_CR1_TE_Msk;
 8000846:	4b0a      	ldr	r3, [pc, #40]	@ (8000870 <enableUSART1+0x70>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a09      	ldr	r2, [pc, #36]	@ (8000870 <enableUSART1+0x70>)
 800084c:	f043 0308 	orr.w	r3, r3, #8
 8000850:	6013      	str	r3, [r2, #0]
	USART1->CR1 |= USART_CR1_UE_Msk;
 8000852:	4b07      	ldr	r3, [pc, #28]	@ (8000870 <enableUSART1+0x70>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a06      	ldr	r2, [pc, #24]	@ (8000870 <enableUSART1+0x70>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6013      	str	r3, [r2, #0]
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr
 8000868:	40021000 	.word	0x40021000
 800086c:	48000800 	.word	0x48000800
 8000870:	40013800 	.word	0x40013800

08000874 <enableUARTInterrupts>:
	// Set the mode of the port pins to output since they are LEDs
	*portMode = LED_OUTPUT;
}

void enableUARTInterrupts()
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000878:	b672      	cpsid	i
}
 800087a:	bf00      	nop
	__disable_irq();

	// Generate an interrupt upon receiving data
	USART1->CR1 |= USART_CR1_RXNEIE_Msk;
 800087c:	4b08      	ldr	r3, [pc, #32]	@ (80008a0 <enableUARTInterrupts+0x2c>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a07      	ldr	r2, [pc, #28]	@ (80008a0 <enableUARTInterrupts+0x2c>)
 8000882:	f043 0320 	orr.w	r3, r3, #32
 8000886:	6013      	str	r3, [r2, #0]

	// Set priority and enable interrupts
	NVIC_SetPriority(USART1_IRQn, 1);
 8000888:	2101      	movs	r1, #1
 800088a:	2025      	movs	r0, #37	@ 0x25
 800088c:	f7ff ff7c 	bl	8000788 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn);
 8000890:	2025      	movs	r0, #37	@ 0x25
 8000892:	f7ff ff5b 	bl	800074c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000896:	b662      	cpsie	i
}
 8000898:	bf00      	nop

	__enable_irq();
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40013800 	.word	0x40013800

080008a4 <USART1_EXTI25_IRQHandler>:

void USART1_EXTI25_IRQHandler()
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
	// Check for overrun or frame errors
	if ((USART1->ISR & USART_ISR_FE_Msk) && (USART1->ISR & USART_ISR_ORE_Msk))
 80008aa:	4b1c      	ldr	r3, [pc, #112]	@ (800091c <USART1_EXTI25_IRQHandler+0x78>)
 80008ac:	69db      	ldr	r3, [r3, #28]
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d005      	beq.n	80008c2 <USART1_EXTI25_IRQHandler+0x1e>
 80008b6:	4b19      	ldr	r3, [pc, #100]	@ (800091c <USART1_EXTI25_IRQHandler+0x78>)
 80008b8:	69db      	ldr	r3, [r3, #28]
 80008ba:	f003 0308 	and.w	r3, r3, #8
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d124      	bne.n	800090c <USART1_EXTI25_IRQHandler+0x68>
	{
		return;
	}

	// If we have stored the maximum amount, stop
	if (i == BUFFER)
 80008c2:	4b17      	ldr	r3, [pc, #92]	@ (8000920 <USART1_EXTI25_IRQHandler+0x7c>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80008ca:	d021      	beq.n	8000910 <USART1_EXTI25_IRQHandler+0x6c>
	{
		return;
	}

	if (USART1->ISR & USART_ISR_RXNE_Msk)
 80008cc:	4b13      	ldr	r3, [pc, #76]	@ (800091c <USART1_EXTI25_IRQHandler+0x78>)
 80008ce:	69db      	ldr	r3, [r3, #28]
 80008d0:	f003 0320 	and.w	r3, r3, #32
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d01c      	beq.n	8000912 <USART1_EXTI25_IRQHandler+0x6e>
	{
		// Read data
		unsigned char data = (uint8_t) USART1->RDR;
 80008d8:	4b10      	ldr	r3, [pc, #64]	@ (800091c <USART1_EXTI25_IRQHandler+0x78>)
 80008da:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80008dc:	b29b      	uxth	r3, r3
 80008de:	71fb      	strb	r3, [r7, #7]
		USART1->TDR = data;  // Echo back
 80008e0:	4b0e      	ldr	r3, [pc, #56]	@ (800091c <USART1_EXTI25_IRQHandler+0x78>)
 80008e2:	79fa      	ldrb	r2, [r7, #7]
 80008e4:	b292      	uxth	r2, r2
 80008e6:	851a      	strh	r2, [r3, #40]	@ 0x28

		if (data != '\r')
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	2b0d      	cmp	r3, #13
 80008ec:	d00a      	beq.n	8000904 <USART1_EXTI25_IRQHandler+0x60>
		{
		// Store the read data
		string[i] = data;
 80008ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <USART1_EXTI25_IRQHandler+0x7c>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	490c      	ldr	r1, [pc, #48]	@ (8000924 <USART1_EXTI25_IRQHandler+0x80>)
 80008f4:	79fa      	ldrb	r2, [r7, #7]
 80008f6:	54ca      	strb	r2, [r1, r3]
		i++;
 80008f8:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <USART1_EXTI25_IRQHandler+0x7c>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	3301      	adds	r3, #1
 80008fe:	4a08      	ldr	r2, [pc, #32]	@ (8000920 <USART1_EXTI25_IRQHandler+0x7c>)
 8000900:	6013      	str	r3, [r2, #0]
 8000902:	e006      	b.n	8000912 <USART1_EXTI25_IRQHandler+0x6e>
		//USART1->TDR = '\n';


		} else {
		message_complete = 1;
 8000904:	4b08      	ldr	r3, [pc, #32]	@ (8000928 <USART1_EXTI25_IRQHandler+0x84>)
 8000906:	2201      	movs	r2, #1
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	e002      	b.n	8000912 <USART1_EXTI25_IRQHandler+0x6e>
		return;
 800090c:	bf00      	nop
 800090e:	e000      	b.n	8000912 <USART1_EXTI25_IRQHandler+0x6e>
		return;
 8000910:	bf00      	nop

		}
	}
}
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	40013800 	.word	0x40013800
 8000920:	20000184 	.word	0x20000184
 8000924:	20000188 	.word	0x20000188
 8000928:	20000080 	.word	0x20000080

0800092c <send_string>:


void send_string(const char *msg) {
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
    while (*msg) {
 8000934:	e00c      	b.n	8000950 <send_string+0x24>
        while (!(USART1->ISR & USART_ISR_TXE_Msk));
 8000936:	bf00      	nop
 8000938:	4b0b      	ldr	r3, [pc, #44]	@ (8000968 <send_string+0x3c>)
 800093a:	69db      	ldr	r3, [r3, #28]
 800093c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000940:	2b00      	cmp	r3, #0
 8000942:	d0f9      	beq.n	8000938 <send_string+0xc>
        USART1->TDR = *msg++;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	1c5a      	adds	r2, r3, #1
 8000948:	607a      	str	r2, [r7, #4]
 800094a:	781a      	ldrb	r2, [r3, #0]
 800094c:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <send_string+0x3c>)
 800094e:	851a      	strh	r2, [r3, #40]	@ 0x28
    while (*msg) {
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d1ee      	bne.n	8000936 <send_string+0xa>
    }
}
 8000958:	bf00      	nop
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	40013800 	.word	0x40013800

0800096c <send_string_buffer>:

void send_string_buffer(int struct_data) {
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	char buffer[12];
	itoa(struct_data, buffer, 10);
 8000974:	f107 0308 	add.w	r3, r7, #8
 8000978:	220a      	movs	r2, #10
 800097a:	4619      	mov	r1, r3
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f000 fa7e 	bl	8000e7e <itoa>
	char *msg = buffer; // Create a pointer to walk through the buffer
 8000982:	f107 0308 	add.w	r3, r7, #8
 8000986:	617b      	str	r3, [r7, #20]
	while (*msg) {
 8000988:	e00c      	b.n	80009a4 <send_string_buffer+0x38>
        while (!(USART1->ISR & USART_ISR_TXE_Msk));
 800098a:	bf00      	nop
 800098c:	4b0a      	ldr	r3, [pc, #40]	@ (80009b8 <send_string_buffer+0x4c>)
 800098e:	69db      	ldr	r3, [r3, #28]
 8000990:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000994:	2b00      	cmp	r3, #0
 8000996:	d0f9      	beq.n	800098c <send_string_buffer+0x20>
        USART1->TDR = *msg++;
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	1c5a      	adds	r2, r3, #1
 800099c:	617a      	str	r2, [r7, #20]
 800099e:	781a      	ldrb	r2, [r3, #0]
 80009a0:	4b05      	ldr	r3, [pc, #20]	@ (80009b8 <send_string_buffer+0x4c>)
 80009a2:	851a      	strh	r2, [r3, #40]	@ 0x28
	while (*msg) {
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d1ee      	bne.n	800098a <send_string_buffer+0x1e>
    }
}
 80009ac:	bf00      	nop
 80009ae:	bf00      	nop
 80009b0:	3718      	adds	r7, #24
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40013800 	.word	0x40013800

080009bc <print_game_state>:

void print_game_state(GameState game) {
 80009bc:	b084      	sub	sp, #16
 80009be:	b580      	push	{r7, lr}
 80009c0:	b082      	sub	sp, #8
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	f107 0c10 	add.w	ip, r7, #16
 80009c8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	send_string("correct_servos: ");
 80009cc:	483b      	ldr	r0, [pc, #236]	@ (8000abc <print_game_state+0x100>)
 80009ce:	f7ff ffad 	bl	800092c <send_string>
	for(int i = 0; i < game.total_items_to_find; i++){
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	e00d      	b.n	80009f4 <print_game_state+0x38>
		send_string(" ");
 80009d8:	4839      	ldr	r0, [pc, #228]	@ (8000ac0 <print_game_state+0x104>)
 80009da:	f7ff ffa7 	bl	800092c <send_string>
		send_string_buffer(game.correct_servos[i]);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	f107 0210 	add.w	r2, r7, #16
 80009e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff ffbf 	bl	800096c <send_string_buffer>
	for(int i = 0; i < game.total_items_to_find; i++){
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	3301      	adds	r3, #1
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009f6:	687a      	ldr	r2, [r7, #4]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	dbed      	blt.n	80009d8 <print_game_state+0x1c>
	}
	send_string("\r\n");
 80009fc:	4831      	ldr	r0, [pc, #196]	@ (8000ac4 <print_game_state+0x108>)
 80009fe:	f7ff ff95 	bl	800092c <send_string>

	send_string("items_found: ");
 8000a02:	4831      	ldr	r0, [pc, #196]	@ (8000ac8 <print_game_state+0x10c>)
 8000a04:	f7ff ff92 	bl	800092c <send_string>
    send_string_buffer(game.items_found);
 8000a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff ffae 	bl	800096c <send_string_buffer>
    send_string("\r\n");
 8000a10:	482c      	ldr	r0, [pc, #176]	@ (8000ac4 <print_game_state+0x108>)
 8000a12:	f7ff ff8b 	bl	800092c <send_string>


    send_string("items_left_to_find: ");
 8000a16:	482d      	ldr	r0, [pc, #180]	@ (8000acc <print_game_state+0x110>)
 8000a18:	f7ff ff88 	bl	800092c <send_string>
    send_string_buffer(game.items_left_to_find);
 8000a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff ffa4 	bl	800096c <send_string_buffer>
    send_string("\r\n");
 8000a24:	4827      	ldr	r0, [pc, #156]	@ (8000ac4 <print_game_state+0x108>)
 8000a26:	f7ff ff81 	bl	800092c <send_string>

    send_string("digs_taken: ");
 8000a2a:	4829      	ldr	r0, [pc, #164]	@ (8000ad0 <print_game_state+0x114>)
 8000a2c:	f7ff ff7e 	bl	800092c <send_string>
    send_string_buffer(game.digs_taken);
 8000a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff ff9a 	bl	800096c <send_string_buffer>
    send_string("\r\n");
 8000a38:	4822      	ldr	r0, [pc, #136]	@ (8000ac4 <print_game_state+0x108>)
 8000a3a:	f7ff ff77 	bl	800092c <send_string>

    send_string("digs_remaining: ");
 8000a3e:	4825      	ldr	r0, [pc, #148]	@ (8000ad4 <print_game_state+0x118>)
 8000a40:	f7ff ff74 	bl	800092c <send_string>
    send_string_buffer(game.digs_remaining);
 8000a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff ff90 	bl	800096c <send_string_buffer>
    send_string("\r\n");
 8000a4c:	481d      	ldr	r0, [pc, #116]	@ (8000ac4 <print_game_state+0x108>)
 8000a4e:	f7ff ff6d 	bl	800092c <send_string>

    send_string("peeks_used: ");
 8000a52:	4821      	ldr	r0, [pc, #132]	@ (8000ad8 <print_game_state+0x11c>)
 8000a54:	f7ff ff6a 	bl	800092c <send_string>
    send_string_buffer(game.peeks_used);
 8000a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff ff86 	bl	800096c <send_string_buffer>
    send_string("\r\n");
 8000a60:	4818      	ldr	r0, [pc, #96]	@ (8000ac4 <print_game_state+0x108>)
 8000a62:	f7ff ff63 	bl	800092c <send_string>

    send_string("total_items_to_find: ");
 8000a66:	481d      	ldr	r0, [pc, #116]	@ (8000adc <print_game_state+0x120>)
 8000a68:	f7ff ff60 	bl	800092c <send_string>
    send_string_buffer(game.total_items_to_find);
 8000a6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff ff7c 	bl	800096c <send_string_buffer>
    send_string("\r\n");
 8000a74:	4813      	ldr	r0, [pc, #76]	@ (8000ac4 <print_game_state+0x108>)
 8000a76:	f7ff ff59 	bl	800092c <send_string>

    send_string("game_time_remaining: ");
 8000a7a:	4819      	ldr	r0, [pc, #100]	@ (8000ae0 <print_game_state+0x124>)
 8000a7c:	f7ff ff56 	bl	800092c <send_string>
    send_string_buffer(game.game_time_remaining);
 8000a80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff ff72 	bl	800096c <send_string_buffer>
    send_string("\r\n");
 8000a88:	480e      	ldr	r0, [pc, #56]	@ (8000ac4 <print_game_state+0x108>)
 8000a8a:	f7ff ff4f 	bl	800092c <send_string>

    send_string("game_over: ");
 8000a8e:	4815      	ldr	r0, [pc, #84]	@ (8000ae4 <print_game_state+0x128>)
 8000a90:	f7ff ff4c 	bl	800092c <send_string>
    send_string(game.game_over ? "true\n" : "false\n");
 8000a94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <print_game_state+0xe2>
 8000a9a:	4b13      	ldr	r3, [pc, #76]	@ (8000ae8 <print_game_state+0x12c>)
 8000a9c:	e000      	b.n	8000aa0 <print_game_state+0xe4>
 8000a9e:	4b13      	ldr	r3, [pc, #76]	@ (8000aec <print_game_state+0x130>)
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff ff43 	bl	800092c <send_string>
    send_string("\r\n");
 8000aa6:	4807      	ldr	r0, [pc, #28]	@ (8000ac4 <print_game_state+0x108>)
 8000aa8:	f7ff ff40 	bl	800092c <send_string>
}
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ab6:	b004      	add	sp, #16
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	08002560 	.word	0x08002560
 8000ac0:	08002574 	.word	0x08002574
 8000ac4:	08002578 	.word	0x08002578
 8000ac8:	0800257c 	.word	0x0800257c
 8000acc:	0800258c 	.word	0x0800258c
 8000ad0:	080025a4 	.word	0x080025a4
 8000ad4:	080025b4 	.word	0x080025b4
 8000ad8:	080025c8 	.word	0x080025c8
 8000adc:	080025d8 	.word	0x080025d8
 8000ae0:	080025f0 	.word	0x080025f0
 8000ae4:	08002608 	.word	0x08002608
 8000ae8:	08002614 	.word	0x08002614
 8000aec:	0800261c 	.word	0x0800261c

08000af0 <print_game_triggers>:

void print_game_triggers(GameTriggers triggers) {
 8000af0:	b084      	sub	sp, #16
 8000af2:	b580      	push	{r7, lr}
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	f107 0c08 	add.w	ip, r7, #8
 8000afa:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    send_string("touchpad_pressed: ");
 8000afe:	4826      	ldr	r0, [pc, #152]	@ (8000b98 <print_game_triggers+0xa8>)
 8000b00:	f7ff ff14 	bl	800092c <send_string>
    send_string_buffer(triggers.touchpad_pressed);
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff ff30 	bl	800096c <send_string_buffer>
    send_string("\r\n");
 8000b0c:	4823      	ldr	r0, [pc, #140]	@ (8000b9c <print_game_triggers+0xac>)
 8000b0e:	f7ff ff0d 	bl	800092c <send_string>


    send_string("magnet1_det: ");
 8000b12:	4823      	ldr	r0, [pc, #140]	@ (8000ba0 <print_game_triggers+0xb0>)
 8000b14:	f7ff ff0a 	bl	800092c <send_string>
    send_string_buffer(triggers.magnet1_det);
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff ff26 	bl	800096c <send_string_buffer>
    send_string("\r\n");
 8000b20:	481e      	ldr	r0, [pc, #120]	@ (8000b9c <print_game_triggers+0xac>)
 8000b22:	f7ff ff03 	bl	800092c <send_string>

    send_string("magnet2_det: ");
 8000b26:	481f      	ldr	r0, [pc, #124]	@ (8000ba4 <print_game_triggers+0xb4>)
 8000b28:	f7ff ff00 	bl	800092c <send_string>
    send_string_buffer(triggers.magnet2_det);
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff ff1c 	bl	800096c <send_string_buffer>
    send_string("\r\n");
 8000b34:	4819      	ldr	r0, [pc, #100]	@ (8000b9c <print_game_triggers+0xac>)
 8000b36:	f7ff fef9 	bl	800092c <send_string>

    send_string("servo_controlled: ");
 8000b3a:	481b      	ldr	r0, [pc, #108]	@ (8000ba8 <print_game_triggers+0xb8>)
 8000b3c:	f7ff fef6 	bl	800092c <send_string>
    send_string_buffer(triggers.servo_controlled);
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff ff12 	bl	800096c <send_string_buffer>
    send_string("\r\n");
 8000b48:	4814      	ldr	r0, [pc, #80]	@ (8000b9c <print_game_triggers+0xac>)
 8000b4a:	f7ff feef 	bl	800092c <send_string>

    send_string("servo_angle: ");
 8000b4e:	4817      	ldr	r0, [pc, #92]	@ (8000bac <print_game_triggers+0xbc>)
 8000b50:	f7ff feec 	bl	800092c <send_string>
	send_string_buffer(triggers.servo_angle);
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff ff08 	bl	800096c <send_string_buffer>
	send_string("\r\n");
 8000b5c:	480f      	ldr	r0, [pc, #60]	@ (8000b9c <print_game_triggers+0xac>)
 8000b5e:	f7ff fee5 	bl	800092c <send_string>

    send_string("trimpot_value: ");
 8000b62:	4813      	ldr	r0, [pc, #76]	@ (8000bb0 <print_game_triggers+0xc0>)
 8000b64:	f7ff fee2 	bl	800092c <send_string>
	send_string_buffer(triggers.trimpot_value);
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff fefe 	bl	800096c <send_string_buffer>
	send_string("\r\n");
 8000b70:	480a      	ldr	r0, [pc, #40]	@ (8000b9c <print_game_triggers+0xac>)
 8000b72:	f7ff fedb 	bl	800092c <send_string>

	send_string("peek_threshold: ");
 8000b76:	480f      	ldr	r0, [pc, #60]	@ (8000bb4 <print_game_triggers+0xc4>)
 8000b78:	f7ff fed8 	bl	800092c <send_string>
	send_string_buffer(triggers.peek_threshold);
 8000b7c:	6a3b      	ldr	r3, [r7, #32]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff fef4 	bl	800096c <send_string_buffer>
	send_string("\r\n");
 8000b84:	4805      	ldr	r0, [pc, #20]	@ (8000b9c <print_game_triggers+0xac>)
 8000b86:	f7ff fed1 	bl	800092c <send_string>
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b92:	b004      	add	sp, #16
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	08002624 	.word	0x08002624
 8000b9c:	08002578 	.word	0x08002578
 8000ba0:	08002638 	.word	0x08002638
 8000ba4:	08002648 	.word	0x08002648
 8000ba8:	08002658 	.word	0x08002658
 8000bac:	0800266c 	.word	0x0800266c
 8000bb0:	0800267c 	.word	0x0800267c
 8000bb4:	0800268c 	.word	0x0800268c

08000bb8 <clear_screen>:


void clear_screen(void) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
    send_string("\x1B[2J\x1B[H");
 8000bbc:	4802      	ldr	r0, [pc, #8]	@ (8000bc8 <clear_screen+0x10>)
 8000bbe:	f7ff feb5 	bl	800092c <send_string>
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	080026a0 	.word	0x080026a0

08000bcc <valid_period_check>:


//For Testing
int valid_period_check(char *input){
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
    // Check for an empty string
    if (input == NULL || strlen(input) == 0) {
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d003      	beq.n	8000be2 <valid_period_check+0x16>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d101      	bne.n	8000be6 <valid_period_check+0x1a>
        return 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	e015      	b.n	8000c12 <valid_period_check+0x46>
    }

    // Confirm every character is a digit
    for (int i = 0; input[i] != '\0'; i++) {
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	e00b      	b.n	8000c04 <valid_period_check+0x38>
        if (!isdigit((unsigned char)input[i])) {
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	3b30      	subs	r3, #48	@ 0x30
 8000bf6:	2b09      	cmp	r3, #9
 8000bf8:	d901      	bls.n	8000bfe <valid_period_check+0x32>
            return 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	e009      	b.n	8000c12 <valid_period_check+0x46>
    for (int i = 0; input[i] != '\0'; i++) {
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	3301      	adds	r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	4413      	add	r3, r2
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d1ed      	bne.n	8000bec <valid_period_check+0x20>
        }
    }
    return 1;
 8000c10:	2301      	movs	r3, #1
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3714      	adds	r7, #20
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0
  return 1;
 8000c22:	2301      	movs	r3, #1
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <_kill>:

int _kill(int pid, int sig)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
 8000c36:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c38:	f000 fbba 	bl	80013b0 <__errno>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2216      	movs	r2, #22
 8000c40:	601a      	str	r2, [r3, #0]
  return -1;
 8000c42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <_exit>:

void _exit (int status)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b082      	sub	sp, #8
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c56:	f04f 31ff 	mov.w	r1, #4294967295
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f7ff ffe7 	bl	8000c2e <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <_exit+0x12>

08000c64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
 8000c74:	e00a      	b.n	8000c8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c76:	f3af 8000 	nop.w
 8000c7a:	4601      	mov	r1, r0
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	1c5a      	adds	r2, r3, #1
 8000c80:	60ba      	str	r2, [r7, #8]
 8000c82:	b2ca      	uxtb	r2, r1
 8000c84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	617b      	str	r3, [r7, #20]
 8000c8c:	697a      	ldr	r2, [r7, #20]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	dbf0      	blt.n	8000c76 <_read+0x12>
  }

  return len;
 8000c94:	687b      	ldr	r3, [r7, #4]
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3718      	adds	r7, #24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b086      	sub	sp, #24
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	60f8      	str	r0, [r7, #12]
 8000ca6:	60b9      	str	r1, [r7, #8]
 8000ca8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
 8000cae:	e009      	b.n	8000cc4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	1c5a      	adds	r2, r3, #1
 8000cb4:	60ba      	str	r2, [r7, #8]
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	617b      	str	r3, [r7, #20]
 8000cc4:	697a      	ldr	r2, [r7, #20]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	dbf1      	blt.n	8000cb0 <_write+0x12>
  }
  return len;
 8000ccc:	687b      	ldr	r3, [r7, #4]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3718      	adds	r7, #24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <_close>:

int _close(int file)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b083      	sub	sp, #12
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	b083      	sub	sp, #12
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
 8000cf6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cfe:	605a      	str	r2, [r3, #4]
  return 0;
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <_isatty>:

int _isatty(int file)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	b083      	sub	sp, #12
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d16:	2301      	movs	r3, #1
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3714      	adds	r7, #20
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
	...

08000d40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d48:	4a14      	ldr	r2, [pc, #80]	@ (8000d9c <_sbrk+0x5c>)
 8000d4a:	4b15      	ldr	r3, [pc, #84]	@ (8000da0 <_sbrk+0x60>)
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d54:	4b13      	ldr	r3, [pc, #76]	@ (8000da4 <_sbrk+0x64>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d102      	bne.n	8000d62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d5c:	4b11      	ldr	r3, [pc, #68]	@ (8000da4 <_sbrk+0x64>)
 8000d5e:	4a12      	ldr	r2, [pc, #72]	@ (8000da8 <_sbrk+0x68>)
 8000d60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d62:	4b10      	ldr	r3, [pc, #64]	@ (8000da4 <_sbrk+0x64>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d207      	bcs.n	8000d80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d70:	f000 fb1e 	bl	80013b0 <__errno>
 8000d74:	4603      	mov	r3, r0
 8000d76:	220c      	movs	r2, #12
 8000d78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7e:	e009      	b.n	8000d94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d80:	4b08      	ldr	r3, [pc, #32]	@ (8000da4 <_sbrk+0x64>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d86:	4b07      	ldr	r3, [pc, #28]	@ (8000da4 <_sbrk+0x64>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	4a05      	ldr	r2, [pc, #20]	@ (8000da4 <_sbrk+0x64>)
 8000d90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d92:	68fb      	ldr	r3, [r7, #12]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3718      	adds	r7, #24
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	2000a000 	.word	0x2000a000
 8000da0:	00000400 	.word	0x00000400
 8000da4:	20000288 	.word	0x20000288
 8000da8:	200003e0 	.word	0x200003e0

08000dac <TIM2_IRQHandler>:

	__enable_irq();
}

void TIM2_IRQHandler()
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
	// Output compare Interrupt SR = status register of timer 2 and a bitmask checking the Capture/Compare 1 Interrupt Flag.
	if (TIM2->SR & TIM_SR_CC1IF_Msk)
 8000db0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000db4:	691b      	ldr	r3, [r3, #16]
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d013      	beq.n	8000de6 <TIM2_IRQHandler+0x3a>
	{
		// The next output compare should occur in the next 8000 clock cycles
		TIM2->CCR1 = TIM2->CNT + timer2_period; // changes CCR1 to the current count + the delay
 8000dbe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000dc2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000dc4:	4b09      	ldr	r3, [pc, #36]	@ (8000dec <TIM2_IRQHandler+0x40>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000dcc:	4413      	add	r3, r2
 8000dce:	634b      	str	r3, [r1, #52]	@ 0x34
		TIM2->SR = 0x00; // clear all status flags in interupt register
 8000dd0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
		//*lights = *lights ^ 1UL << LED_POS; //toggle LED on or off
		if(timer2_callback) {
 8000dd8:	4b05      	ldr	r3, [pc, #20]	@ (8000df0 <TIM2_IRQHandler+0x44>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d002      	beq.n	8000de6 <TIM2_IRQHandler+0x3a>
			timer2_callback();
 8000de0:	4b03      	ldr	r3, [pc, #12]	@ (8000df0 <TIM2_IRQHandler+0x44>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4798      	blx	r3
		}
		}
	}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000290 	.word	0x20000290
 8000df0:	2000028c 	.word	0x2000028c

08000df4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000df4:	480d      	ldr	r0, [pc, #52]	@ (8000e2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000df6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000df8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dfc:	480c      	ldr	r0, [pc, #48]	@ (8000e30 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dfe:	490d      	ldr	r1, [pc, #52]	@ (8000e34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e00:	4a0d      	ldr	r2, [pc, #52]	@ (8000e38 <LoopForever+0xe>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e04:	e002      	b.n	8000e0c <LoopCopyDataInit>

08000e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0a:	3304      	adds	r3, #4

08000e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e10:	d3f9      	bcc.n	8000e06 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e12:	4a0a      	ldr	r2, [pc, #40]	@ (8000e3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e14:	4c0a      	ldr	r4, [pc, #40]	@ (8000e40 <LoopForever+0x16>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e18:	e001      	b.n	8000e1e <LoopFillZerobss>

08000e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e1c:	3204      	adds	r2, #4

08000e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e20:	d3fb      	bcc.n	8000e1a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e22:	f000 facb 	bl	80013bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e26:	f7ff fa5d 	bl	80002e4 <main>

08000e2a <LoopForever>:

LoopForever:
  b LoopForever
 8000e2a:	e7fe      	b.n	8000e2a <LoopForever>
  ldr   r0, =_estack
 8000e2c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e34:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000e38:	080028c0 	.word	0x080028c0
  ldr r2, =_sbss
 8000e3c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000e40:	200003e0 	.word	0x200003e0

08000e44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e44:	e7fe      	b.n	8000e44 <ADC1_2_IRQHandler>

08000e46 <atoi>:
 8000e46:	220a      	movs	r2, #10
 8000e48:	2100      	movs	r1, #0
 8000e4a:	f000 b895 	b.w	8000f78 <strtol>

08000e4e <__itoa>:
 8000e4e:	1e93      	subs	r3, r2, #2
 8000e50:	2b22      	cmp	r3, #34	@ 0x22
 8000e52:	b510      	push	{r4, lr}
 8000e54:	460c      	mov	r4, r1
 8000e56:	d904      	bls.n	8000e62 <__itoa+0x14>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	700b      	strb	r3, [r1, #0]
 8000e5c:	461c      	mov	r4, r3
 8000e5e:	4620      	mov	r0, r4
 8000e60:	bd10      	pop	{r4, pc}
 8000e62:	2a0a      	cmp	r2, #10
 8000e64:	d109      	bne.n	8000e7a <__itoa+0x2c>
 8000e66:	2800      	cmp	r0, #0
 8000e68:	da07      	bge.n	8000e7a <__itoa+0x2c>
 8000e6a:	232d      	movs	r3, #45	@ 0x2d
 8000e6c:	700b      	strb	r3, [r1, #0]
 8000e6e:	4240      	negs	r0, r0
 8000e70:	2101      	movs	r1, #1
 8000e72:	4421      	add	r1, r4
 8000e74:	f000 f88a 	bl	8000f8c <__utoa>
 8000e78:	e7f1      	b.n	8000e5e <__itoa+0x10>
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	e7f9      	b.n	8000e72 <__itoa+0x24>

08000e7e <itoa>:
 8000e7e:	f7ff bfe6 	b.w	8000e4e <__itoa>
	...

08000e84 <_strtol_l.constprop.0>:
 8000e84:	2b24      	cmp	r3, #36	@ 0x24
 8000e86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e8a:	4686      	mov	lr, r0
 8000e8c:	4690      	mov	r8, r2
 8000e8e:	d801      	bhi.n	8000e94 <_strtol_l.constprop.0+0x10>
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d106      	bne.n	8000ea2 <_strtol_l.constprop.0+0x1e>
 8000e94:	f000 fa8c 	bl	80013b0 <__errno>
 8000e98:	2316      	movs	r3, #22
 8000e9a:	6003      	str	r3, [r0, #0]
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	4834      	ldr	r0, [pc, #208]	@ (8000f74 <_strtol_l.constprop.0+0xf0>)
 8000ea4:	460d      	mov	r5, r1
 8000ea6:	462a      	mov	r2, r5
 8000ea8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8000eac:	5d06      	ldrb	r6, [r0, r4]
 8000eae:	f016 0608 	ands.w	r6, r6, #8
 8000eb2:	d1f8      	bne.n	8000ea6 <_strtol_l.constprop.0+0x22>
 8000eb4:	2c2d      	cmp	r4, #45	@ 0x2d
 8000eb6:	d12d      	bne.n	8000f14 <_strtol_l.constprop.0+0x90>
 8000eb8:	782c      	ldrb	r4, [r5, #0]
 8000eba:	2601      	movs	r6, #1
 8000ebc:	1c95      	adds	r5, r2, #2
 8000ebe:	f033 0210 	bics.w	r2, r3, #16
 8000ec2:	d109      	bne.n	8000ed8 <_strtol_l.constprop.0+0x54>
 8000ec4:	2c30      	cmp	r4, #48	@ 0x30
 8000ec6:	d12a      	bne.n	8000f1e <_strtol_l.constprop.0+0x9a>
 8000ec8:	782a      	ldrb	r2, [r5, #0]
 8000eca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8000ece:	2a58      	cmp	r2, #88	@ 0x58
 8000ed0:	d125      	bne.n	8000f1e <_strtol_l.constprop.0+0x9a>
 8000ed2:	786c      	ldrb	r4, [r5, #1]
 8000ed4:	2310      	movs	r3, #16
 8000ed6:	3502      	adds	r5, #2
 8000ed8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8000edc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	fbbc f9f3 	udiv	r9, ip, r3
 8000ee6:	4610      	mov	r0, r2
 8000ee8:	fb03 ca19 	mls	sl, r3, r9, ip
 8000eec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8000ef0:	2f09      	cmp	r7, #9
 8000ef2:	d81b      	bhi.n	8000f2c <_strtol_l.constprop.0+0xa8>
 8000ef4:	463c      	mov	r4, r7
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	dd27      	ble.n	8000f4a <_strtol_l.constprop.0+0xc6>
 8000efa:	1c57      	adds	r7, r2, #1
 8000efc:	d007      	beq.n	8000f0e <_strtol_l.constprop.0+0x8a>
 8000efe:	4581      	cmp	r9, r0
 8000f00:	d320      	bcc.n	8000f44 <_strtol_l.constprop.0+0xc0>
 8000f02:	d101      	bne.n	8000f08 <_strtol_l.constprop.0+0x84>
 8000f04:	45a2      	cmp	sl, r4
 8000f06:	db1d      	blt.n	8000f44 <_strtol_l.constprop.0+0xc0>
 8000f08:	fb00 4003 	mla	r0, r0, r3, r4
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8000f12:	e7eb      	b.n	8000eec <_strtol_l.constprop.0+0x68>
 8000f14:	2c2b      	cmp	r4, #43	@ 0x2b
 8000f16:	bf04      	itt	eq
 8000f18:	782c      	ldrbeq	r4, [r5, #0]
 8000f1a:	1c95      	addeq	r5, r2, #2
 8000f1c:	e7cf      	b.n	8000ebe <_strtol_l.constprop.0+0x3a>
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d1da      	bne.n	8000ed8 <_strtol_l.constprop.0+0x54>
 8000f22:	2c30      	cmp	r4, #48	@ 0x30
 8000f24:	bf0c      	ite	eq
 8000f26:	2308      	moveq	r3, #8
 8000f28:	230a      	movne	r3, #10
 8000f2a:	e7d5      	b.n	8000ed8 <_strtol_l.constprop.0+0x54>
 8000f2c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8000f30:	2f19      	cmp	r7, #25
 8000f32:	d801      	bhi.n	8000f38 <_strtol_l.constprop.0+0xb4>
 8000f34:	3c37      	subs	r4, #55	@ 0x37
 8000f36:	e7de      	b.n	8000ef6 <_strtol_l.constprop.0+0x72>
 8000f38:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8000f3c:	2f19      	cmp	r7, #25
 8000f3e:	d804      	bhi.n	8000f4a <_strtol_l.constprop.0+0xc6>
 8000f40:	3c57      	subs	r4, #87	@ 0x57
 8000f42:	e7d8      	b.n	8000ef6 <_strtol_l.constprop.0+0x72>
 8000f44:	f04f 32ff 	mov.w	r2, #4294967295
 8000f48:	e7e1      	b.n	8000f0e <_strtol_l.constprop.0+0x8a>
 8000f4a:	1c53      	adds	r3, r2, #1
 8000f4c:	d108      	bne.n	8000f60 <_strtol_l.constprop.0+0xdc>
 8000f4e:	2322      	movs	r3, #34	@ 0x22
 8000f50:	f8ce 3000 	str.w	r3, [lr]
 8000f54:	4660      	mov	r0, ip
 8000f56:	f1b8 0f00 	cmp.w	r8, #0
 8000f5a:	d0a0      	beq.n	8000e9e <_strtol_l.constprop.0+0x1a>
 8000f5c:	1e69      	subs	r1, r5, #1
 8000f5e:	e006      	b.n	8000f6e <_strtol_l.constprop.0+0xea>
 8000f60:	b106      	cbz	r6, 8000f64 <_strtol_l.constprop.0+0xe0>
 8000f62:	4240      	negs	r0, r0
 8000f64:	f1b8 0f00 	cmp.w	r8, #0
 8000f68:	d099      	beq.n	8000e9e <_strtol_l.constprop.0+0x1a>
 8000f6a:	2a00      	cmp	r2, #0
 8000f6c:	d1f6      	bne.n	8000f5c <_strtol_l.constprop.0+0xd8>
 8000f6e:	f8c8 1000 	str.w	r1, [r8]
 8000f72:	e794      	b.n	8000e9e <_strtol_l.constprop.0+0x1a>
 8000f74:	080026ce 	.word	0x080026ce

08000f78 <strtol>:
 8000f78:	4613      	mov	r3, r2
 8000f7a:	460a      	mov	r2, r1
 8000f7c:	4601      	mov	r1, r0
 8000f7e:	4802      	ldr	r0, [pc, #8]	@ (8000f88 <strtol+0x10>)
 8000f80:	6800      	ldr	r0, [r0, #0]
 8000f82:	f7ff bf7f 	b.w	8000e84 <_strtol_l.constprop.0>
 8000f86:	bf00      	nop
 8000f88:	20000014 	.word	0x20000014

08000f8c <__utoa>:
 8000f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f8e:	4c1f      	ldr	r4, [pc, #124]	@ (800100c <__utoa+0x80>)
 8000f90:	b08b      	sub	sp, #44	@ 0x2c
 8000f92:	4605      	mov	r5, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	466e      	mov	r6, sp
 8000f98:	f104 0c20 	add.w	ip, r4, #32
 8000f9c:	6820      	ldr	r0, [r4, #0]
 8000f9e:	6861      	ldr	r1, [r4, #4]
 8000fa0:	4637      	mov	r7, r6
 8000fa2:	c703      	stmia	r7!, {r0, r1}
 8000fa4:	3408      	adds	r4, #8
 8000fa6:	4564      	cmp	r4, ip
 8000fa8:	463e      	mov	r6, r7
 8000faa:	d1f7      	bne.n	8000f9c <__utoa+0x10>
 8000fac:	7921      	ldrb	r1, [r4, #4]
 8000fae:	7139      	strb	r1, [r7, #4]
 8000fb0:	1e91      	subs	r1, r2, #2
 8000fb2:	6820      	ldr	r0, [r4, #0]
 8000fb4:	6038      	str	r0, [r7, #0]
 8000fb6:	2922      	cmp	r1, #34	@ 0x22
 8000fb8:	f04f 0100 	mov.w	r1, #0
 8000fbc:	d904      	bls.n	8000fc8 <__utoa+0x3c>
 8000fbe:	7019      	strb	r1, [r3, #0]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	b00b      	add	sp, #44	@ 0x2c
 8000fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fc8:	1e58      	subs	r0, r3, #1
 8000fca:	4684      	mov	ip, r0
 8000fcc:	fbb5 f7f2 	udiv	r7, r5, r2
 8000fd0:	fb02 5617 	mls	r6, r2, r7, r5
 8000fd4:	3628      	adds	r6, #40	@ 0x28
 8000fd6:	446e      	add	r6, sp
 8000fd8:	460c      	mov	r4, r1
 8000fda:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8000fde:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8000fe2:	462e      	mov	r6, r5
 8000fe4:	42b2      	cmp	r2, r6
 8000fe6:	f101 0101 	add.w	r1, r1, #1
 8000fea:	463d      	mov	r5, r7
 8000fec:	d9ee      	bls.n	8000fcc <__utoa+0x40>
 8000fee:	2200      	movs	r2, #0
 8000ff0:	545a      	strb	r2, [r3, r1]
 8000ff2:	1919      	adds	r1, r3, r4
 8000ff4:	1aa5      	subs	r5, r4, r2
 8000ff6:	42aa      	cmp	r2, r5
 8000ff8:	dae3      	bge.n	8000fc2 <__utoa+0x36>
 8000ffa:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8000ffe:	780e      	ldrb	r6, [r1, #0]
 8001000:	7006      	strb	r6, [r0, #0]
 8001002:	3201      	adds	r2, #1
 8001004:	f801 5901 	strb.w	r5, [r1], #-1
 8001008:	e7f4      	b.n	8000ff4 <__utoa+0x68>
 800100a:	bf00      	nop
 800100c:	080026a8 	.word	0x080026a8

08001010 <std>:
 8001010:	2300      	movs	r3, #0
 8001012:	b510      	push	{r4, lr}
 8001014:	4604      	mov	r4, r0
 8001016:	e9c0 3300 	strd	r3, r3, [r0]
 800101a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800101e:	6083      	str	r3, [r0, #8]
 8001020:	8181      	strh	r1, [r0, #12]
 8001022:	6643      	str	r3, [r0, #100]	@ 0x64
 8001024:	81c2      	strh	r2, [r0, #14]
 8001026:	6183      	str	r3, [r0, #24]
 8001028:	4619      	mov	r1, r3
 800102a:	2208      	movs	r2, #8
 800102c:	305c      	adds	r0, #92	@ 0x5c
 800102e:	f000 f914 	bl	800125a <memset>
 8001032:	4b0d      	ldr	r3, [pc, #52]	@ (8001068 <std+0x58>)
 8001034:	6263      	str	r3, [r4, #36]	@ 0x24
 8001036:	4b0d      	ldr	r3, [pc, #52]	@ (800106c <std+0x5c>)
 8001038:	62a3      	str	r3, [r4, #40]	@ 0x28
 800103a:	4b0d      	ldr	r3, [pc, #52]	@ (8001070 <std+0x60>)
 800103c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800103e:	4b0d      	ldr	r3, [pc, #52]	@ (8001074 <std+0x64>)
 8001040:	6323      	str	r3, [r4, #48]	@ 0x30
 8001042:	4b0d      	ldr	r3, [pc, #52]	@ (8001078 <std+0x68>)
 8001044:	6224      	str	r4, [r4, #32]
 8001046:	429c      	cmp	r4, r3
 8001048:	d006      	beq.n	8001058 <std+0x48>
 800104a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800104e:	4294      	cmp	r4, r2
 8001050:	d002      	beq.n	8001058 <std+0x48>
 8001052:	33d0      	adds	r3, #208	@ 0xd0
 8001054:	429c      	cmp	r4, r3
 8001056:	d105      	bne.n	8001064 <std+0x54>
 8001058:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800105c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001060:	f000 b9d0 	b.w	8001404 <__retarget_lock_init_recursive>
 8001064:	bd10      	pop	{r4, pc}
 8001066:	bf00      	nop
 8001068:	080011d5 	.word	0x080011d5
 800106c:	080011f7 	.word	0x080011f7
 8001070:	0800122f 	.word	0x0800122f
 8001074:	08001253 	.word	0x08001253
 8001078:	20000294 	.word	0x20000294

0800107c <stdio_exit_handler>:
 800107c:	4a02      	ldr	r2, [pc, #8]	@ (8001088 <stdio_exit_handler+0xc>)
 800107e:	4903      	ldr	r1, [pc, #12]	@ (800108c <stdio_exit_handler+0x10>)
 8001080:	4803      	ldr	r0, [pc, #12]	@ (8001090 <stdio_exit_handler+0x14>)
 8001082:	f000 b869 	b.w	8001158 <_fwalk_sglue>
 8001086:	bf00      	nop
 8001088:	20000008 	.word	0x20000008
 800108c:	08001d1d 	.word	0x08001d1d
 8001090:	20000018 	.word	0x20000018

08001094 <cleanup_stdio>:
 8001094:	6841      	ldr	r1, [r0, #4]
 8001096:	4b0c      	ldr	r3, [pc, #48]	@ (80010c8 <cleanup_stdio+0x34>)
 8001098:	4299      	cmp	r1, r3
 800109a:	b510      	push	{r4, lr}
 800109c:	4604      	mov	r4, r0
 800109e:	d001      	beq.n	80010a4 <cleanup_stdio+0x10>
 80010a0:	f000 fe3c 	bl	8001d1c <_fflush_r>
 80010a4:	68a1      	ldr	r1, [r4, #8]
 80010a6:	4b09      	ldr	r3, [pc, #36]	@ (80010cc <cleanup_stdio+0x38>)
 80010a8:	4299      	cmp	r1, r3
 80010aa:	d002      	beq.n	80010b2 <cleanup_stdio+0x1e>
 80010ac:	4620      	mov	r0, r4
 80010ae:	f000 fe35 	bl	8001d1c <_fflush_r>
 80010b2:	68e1      	ldr	r1, [r4, #12]
 80010b4:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <cleanup_stdio+0x3c>)
 80010b6:	4299      	cmp	r1, r3
 80010b8:	d004      	beq.n	80010c4 <cleanup_stdio+0x30>
 80010ba:	4620      	mov	r0, r4
 80010bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80010c0:	f000 be2c 	b.w	8001d1c <_fflush_r>
 80010c4:	bd10      	pop	{r4, pc}
 80010c6:	bf00      	nop
 80010c8:	20000294 	.word	0x20000294
 80010cc:	200002fc 	.word	0x200002fc
 80010d0:	20000364 	.word	0x20000364

080010d4 <global_stdio_init.part.0>:
 80010d4:	b510      	push	{r4, lr}
 80010d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001104 <global_stdio_init.part.0+0x30>)
 80010d8:	4c0b      	ldr	r4, [pc, #44]	@ (8001108 <global_stdio_init.part.0+0x34>)
 80010da:	4a0c      	ldr	r2, [pc, #48]	@ (800110c <global_stdio_init.part.0+0x38>)
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	4620      	mov	r0, r4
 80010e0:	2200      	movs	r2, #0
 80010e2:	2104      	movs	r1, #4
 80010e4:	f7ff ff94 	bl	8001010 <std>
 80010e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80010ec:	2201      	movs	r2, #1
 80010ee:	2109      	movs	r1, #9
 80010f0:	f7ff ff8e 	bl	8001010 <std>
 80010f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80010f8:	2202      	movs	r2, #2
 80010fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80010fe:	2112      	movs	r1, #18
 8001100:	f7ff bf86 	b.w	8001010 <std>
 8001104:	200003cc 	.word	0x200003cc
 8001108:	20000294 	.word	0x20000294
 800110c:	0800107d 	.word	0x0800107d

08001110 <__sfp_lock_acquire>:
 8001110:	4801      	ldr	r0, [pc, #4]	@ (8001118 <__sfp_lock_acquire+0x8>)
 8001112:	f000 b978 	b.w	8001406 <__retarget_lock_acquire_recursive>
 8001116:	bf00      	nop
 8001118:	200003d5 	.word	0x200003d5

0800111c <__sfp_lock_release>:
 800111c:	4801      	ldr	r0, [pc, #4]	@ (8001124 <__sfp_lock_release+0x8>)
 800111e:	f000 b973 	b.w	8001408 <__retarget_lock_release_recursive>
 8001122:	bf00      	nop
 8001124:	200003d5 	.word	0x200003d5

08001128 <__sinit>:
 8001128:	b510      	push	{r4, lr}
 800112a:	4604      	mov	r4, r0
 800112c:	f7ff fff0 	bl	8001110 <__sfp_lock_acquire>
 8001130:	6a23      	ldr	r3, [r4, #32]
 8001132:	b11b      	cbz	r3, 800113c <__sinit+0x14>
 8001134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001138:	f7ff bff0 	b.w	800111c <__sfp_lock_release>
 800113c:	4b04      	ldr	r3, [pc, #16]	@ (8001150 <__sinit+0x28>)
 800113e:	6223      	str	r3, [r4, #32]
 8001140:	4b04      	ldr	r3, [pc, #16]	@ (8001154 <__sinit+0x2c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d1f5      	bne.n	8001134 <__sinit+0xc>
 8001148:	f7ff ffc4 	bl	80010d4 <global_stdio_init.part.0>
 800114c:	e7f2      	b.n	8001134 <__sinit+0xc>
 800114e:	bf00      	nop
 8001150:	08001095 	.word	0x08001095
 8001154:	200003cc 	.word	0x200003cc

08001158 <_fwalk_sglue>:
 8001158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800115c:	4607      	mov	r7, r0
 800115e:	4688      	mov	r8, r1
 8001160:	4614      	mov	r4, r2
 8001162:	2600      	movs	r6, #0
 8001164:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001168:	f1b9 0901 	subs.w	r9, r9, #1
 800116c:	d505      	bpl.n	800117a <_fwalk_sglue+0x22>
 800116e:	6824      	ldr	r4, [r4, #0]
 8001170:	2c00      	cmp	r4, #0
 8001172:	d1f7      	bne.n	8001164 <_fwalk_sglue+0xc>
 8001174:	4630      	mov	r0, r6
 8001176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800117a:	89ab      	ldrh	r3, [r5, #12]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d907      	bls.n	8001190 <_fwalk_sglue+0x38>
 8001180:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001184:	3301      	adds	r3, #1
 8001186:	d003      	beq.n	8001190 <_fwalk_sglue+0x38>
 8001188:	4629      	mov	r1, r5
 800118a:	4638      	mov	r0, r7
 800118c:	47c0      	blx	r8
 800118e:	4306      	orrs	r6, r0
 8001190:	3568      	adds	r5, #104	@ 0x68
 8001192:	e7e9      	b.n	8001168 <_fwalk_sglue+0x10>

08001194 <siprintf>:
 8001194:	b40e      	push	{r1, r2, r3}
 8001196:	b500      	push	{lr}
 8001198:	b09c      	sub	sp, #112	@ 0x70
 800119a:	ab1d      	add	r3, sp, #116	@ 0x74
 800119c:	9002      	str	r0, [sp, #8]
 800119e:	9006      	str	r0, [sp, #24]
 80011a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80011a4:	4809      	ldr	r0, [pc, #36]	@ (80011cc <siprintf+0x38>)
 80011a6:	9107      	str	r1, [sp, #28]
 80011a8:	9104      	str	r1, [sp, #16]
 80011aa:	4909      	ldr	r1, [pc, #36]	@ (80011d0 <siprintf+0x3c>)
 80011ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80011b0:	9105      	str	r1, [sp, #20]
 80011b2:	6800      	ldr	r0, [r0, #0]
 80011b4:	9301      	str	r3, [sp, #4]
 80011b6:	a902      	add	r1, sp, #8
 80011b8:	f000 faa2 	bl	8001700 <_svfiprintf_r>
 80011bc:	9b02      	ldr	r3, [sp, #8]
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]
 80011c2:	b01c      	add	sp, #112	@ 0x70
 80011c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80011c8:	b003      	add	sp, #12
 80011ca:	4770      	bx	lr
 80011cc:	20000014 	.word	0x20000014
 80011d0:	ffff0208 	.word	0xffff0208

080011d4 <__sread>:
 80011d4:	b510      	push	{r4, lr}
 80011d6:	460c      	mov	r4, r1
 80011d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011dc:	f000 f8c4 	bl	8001368 <_read_r>
 80011e0:	2800      	cmp	r0, #0
 80011e2:	bfab      	itete	ge
 80011e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80011e6:	89a3      	ldrhlt	r3, [r4, #12]
 80011e8:	181b      	addge	r3, r3, r0
 80011ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80011ee:	bfac      	ite	ge
 80011f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80011f2:	81a3      	strhlt	r3, [r4, #12]
 80011f4:	bd10      	pop	{r4, pc}

080011f6 <__swrite>:
 80011f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011fa:	461f      	mov	r7, r3
 80011fc:	898b      	ldrh	r3, [r1, #12]
 80011fe:	05db      	lsls	r3, r3, #23
 8001200:	4605      	mov	r5, r0
 8001202:	460c      	mov	r4, r1
 8001204:	4616      	mov	r6, r2
 8001206:	d505      	bpl.n	8001214 <__swrite+0x1e>
 8001208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800120c:	2302      	movs	r3, #2
 800120e:	2200      	movs	r2, #0
 8001210:	f000 f898 	bl	8001344 <_lseek_r>
 8001214:	89a3      	ldrh	r3, [r4, #12]
 8001216:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800121a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800121e:	81a3      	strh	r3, [r4, #12]
 8001220:	4632      	mov	r2, r6
 8001222:	463b      	mov	r3, r7
 8001224:	4628      	mov	r0, r5
 8001226:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800122a:	f000 b8af 	b.w	800138c <_write_r>

0800122e <__sseek>:
 800122e:	b510      	push	{r4, lr}
 8001230:	460c      	mov	r4, r1
 8001232:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001236:	f000 f885 	bl	8001344 <_lseek_r>
 800123a:	1c43      	adds	r3, r0, #1
 800123c:	89a3      	ldrh	r3, [r4, #12]
 800123e:	bf15      	itete	ne
 8001240:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001242:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001246:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800124a:	81a3      	strheq	r3, [r4, #12]
 800124c:	bf18      	it	ne
 800124e:	81a3      	strhne	r3, [r4, #12]
 8001250:	bd10      	pop	{r4, pc}

08001252 <__sclose>:
 8001252:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001256:	f000 b865 	b.w	8001324 <_close_r>

0800125a <memset>:
 800125a:	4402      	add	r2, r0
 800125c:	4603      	mov	r3, r0
 800125e:	4293      	cmp	r3, r2
 8001260:	d100      	bne.n	8001264 <memset+0xa>
 8001262:	4770      	bx	lr
 8001264:	f803 1b01 	strb.w	r1, [r3], #1
 8001268:	e7f9      	b.n	800125e <memset+0x4>
	...

0800126c <strtok>:
 800126c:	4b16      	ldr	r3, [pc, #88]	@ (80012c8 <strtok+0x5c>)
 800126e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001272:	681f      	ldr	r7, [r3, #0]
 8001274:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8001276:	4605      	mov	r5, r0
 8001278:	460e      	mov	r6, r1
 800127a:	b9ec      	cbnz	r4, 80012b8 <strtok+0x4c>
 800127c:	2050      	movs	r0, #80	@ 0x50
 800127e:	f000 f92d 	bl	80014dc <malloc>
 8001282:	4602      	mov	r2, r0
 8001284:	6478      	str	r0, [r7, #68]	@ 0x44
 8001286:	b920      	cbnz	r0, 8001292 <strtok+0x26>
 8001288:	4b10      	ldr	r3, [pc, #64]	@ (80012cc <strtok+0x60>)
 800128a:	4811      	ldr	r0, [pc, #68]	@ (80012d0 <strtok+0x64>)
 800128c:	215b      	movs	r1, #91	@ 0x5b
 800128e:	f000 f8bd 	bl	800140c <__assert_func>
 8001292:	e9c0 4400 	strd	r4, r4, [r0]
 8001296:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800129a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800129e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80012a2:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80012a6:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80012aa:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80012ae:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80012b2:	6184      	str	r4, [r0, #24]
 80012b4:	7704      	strb	r4, [r0, #28]
 80012b6:	6244      	str	r4, [r0, #36]	@ 0x24
 80012b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80012ba:	4631      	mov	r1, r6
 80012bc:	4628      	mov	r0, r5
 80012be:	2301      	movs	r3, #1
 80012c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80012c4:	f000 b806 	b.w	80012d4 <__strtok_r>
 80012c8:	20000014 	.word	0x20000014
 80012cc:	080027ce 	.word	0x080027ce
 80012d0:	080027e5 	.word	0x080027e5

080012d4 <__strtok_r>:
 80012d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012d6:	4604      	mov	r4, r0
 80012d8:	b908      	cbnz	r0, 80012de <__strtok_r+0xa>
 80012da:	6814      	ldr	r4, [r2, #0]
 80012dc:	b144      	cbz	r4, 80012f0 <__strtok_r+0x1c>
 80012de:	4620      	mov	r0, r4
 80012e0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80012e4:	460f      	mov	r7, r1
 80012e6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80012ea:	b91e      	cbnz	r6, 80012f4 <__strtok_r+0x20>
 80012ec:	b965      	cbnz	r5, 8001308 <__strtok_r+0x34>
 80012ee:	6015      	str	r5, [r2, #0]
 80012f0:	2000      	movs	r0, #0
 80012f2:	e005      	b.n	8001300 <__strtok_r+0x2c>
 80012f4:	42b5      	cmp	r5, r6
 80012f6:	d1f6      	bne.n	80012e6 <__strtok_r+0x12>
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1f0      	bne.n	80012de <__strtok_r+0xa>
 80012fc:	6014      	str	r4, [r2, #0]
 80012fe:	7003      	strb	r3, [r0, #0]
 8001300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001302:	461c      	mov	r4, r3
 8001304:	e00c      	b.n	8001320 <__strtok_r+0x4c>
 8001306:	b915      	cbnz	r5, 800130e <__strtok_r+0x3a>
 8001308:	f814 3b01 	ldrb.w	r3, [r4], #1
 800130c:	460e      	mov	r6, r1
 800130e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8001312:	42ab      	cmp	r3, r5
 8001314:	d1f7      	bne.n	8001306 <__strtok_r+0x32>
 8001316:	2b00      	cmp	r3, #0
 8001318:	d0f3      	beq.n	8001302 <__strtok_r+0x2e>
 800131a:	2300      	movs	r3, #0
 800131c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8001320:	6014      	str	r4, [r2, #0]
 8001322:	e7ed      	b.n	8001300 <__strtok_r+0x2c>

08001324 <_close_r>:
 8001324:	b538      	push	{r3, r4, r5, lr}
 8001326:	4d06      	ldr	r5, [pc, #24]	@ (8001340 <_close_r+0x1c>)
 8001328:	2300      	movs	r3, #0
 800132a:	4604      	mov	r4, r0
 800132c:	4608      	mov	r0, r1
 800132e:	602b      	str	r3, [r5, #0]
 8001330:	f7ff fcd1 	bl	8000cd6 <_close>
 8001334:	1c43      	adds	r3, r0, #1
 8001336:	d102      	bne.n	800133e <_close_r+0x1a>
 8001338:	682b      	ldr	r3, [r5, #0]
 800133a:	b103      	cbz	r3, 800133e <_close_r+0x1a>
 800133c:	6023      	str	r3, [r4, #0]
 800133e:	bd38      	pop	{r3, r4, r5, pc}
 8001340:	200003d0 	.word	0x200003d0

08001344 <_lseek_r>:
 8001344:	b538      	push	{r3, r4, r5, lr}
 8001346:	4d07      	ldr	r5, [pc, #28]	@ (8001364 <_lseek_r+0x20>)
 8001348:	4604      	mov	r4, r0
 800134a:	4608      	mov	r0, r1
 800134c:	4611      	mov	r1, r2
 800134e:	2200      	movs	r2, #0
 8001350:	602a      	str	r2, [r5, #0]
 8001352:	461a      	mov	r2, r3
 8001354:	f7ff fce6 	bl	8000d24 <_lseek>
 8001358:	1c43      	adds	r3, r0, #1
 800135a:	d102      	bne.n	8001362 <_lseek_r+0x1e>
 800135c:	682b      	ldr	r3, [r5, #0]
 800135e:	b103      	cbz	r3, 8001362 <_lseek_r+0x1e>
 8001360:	6023      	str	r3, [r4, #0]
 8001362:	bd38      	pop	{r3, r4, r5, pc}
 8001364:	200003d0 	.word	0x200003d0

08001368 <_read_r>:
 8001368:	b538      	push	{r3, r4, r5, lr}
 800136a:	4d07      	ldr	r5, [pc, #28]	@ (8001388 <_read_r+0x20>)
 800136c:	4604      	mov	r4, r0
 800136e:	4608      	mov	r0, r1
 8001370:	4611      	mov	r1, r2
 8001372:	2200      	movs	r2, #0
 8001374:	602a      	str	r2, [r5, #0]
 8001376:	461a      	mov	r2, r3
 8001378:	f7ff fc74 	bl	8000c64 <_read>
 800137c:	1c43      	adds	r3, r0, #1
 800137e:	d102      	bne.n	8001386 <_read_r+0x1e>
 8001380:	682b      	ldr	r3, [r5, #0]
 8001382:	b103      	cbz	r3, 8001386 <_read_r+0x1e>
 8001384:	6023      	str	r3, [r4, #0]
 8001386:	bd38      	pop	{r3, r4, r5, pc}
 8001388:	200003d0 	.word	0x200003d0

0800138c <_write_r>:
 800138c:	b538      	push	{r3, r4, r5, lr}
 800138e:	4d07      	ldr	r5, [pc, #28]	@ (80013ac <_write_r+0x20>)
 8001390:	4604      	mov	r4, r0
 8001392:	4608      	mov	r0, r1
 8001394:	4611      	mov	r1, r2
 8001396:	2200      	movs	r2, #0
 8001398:	602a      	str	r2, [r5, #0]
 800139a:	461a      	mov	r2, r3
 800139c:	f7ff fc7f 	bl	8000c9e <_write>
 80013a0:	1c43      	adds	r3, r0, #1
 80013a2:	d102      	bne.n	80013aa <_write_r+0x1e>
 80013a4:	682b      	ldr	r3, [r5, #0]
 80013a6:	b103      	cbz	r3, 80013aa <_write_r+0x1e>
 80013a8:	6023      	str	r3, [r4, #0]
 80013aa:	bd38      	pop	{r3, r4, r5, pc}
 80013ac:	200003d0 	.word	0x200003d0

080013b0 <__errno>:
 80013b0:	4b01      	ldr	r3, [pc, #4]	@ (80013b8 <__errno+0x8>)
 80013b2:	6818      	ldr	r0, [r3, #0]
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	20000014 	.word	0x20000014

080013bc <__libc_init_array>:
 80013bc:	b570      	push	{r4, r5, r6, lr}
 80013be:	4d0d      	ldr	r5, [pc, #52]	@ (80013f4 <__libc_init_array+0x38>)
 80013c0:	4c0d      	ldr	r4, [pc, #52]	@ (80013f8 <__libc_init_array+0x3c>)
 80013c2:	1b64      	subs	r4, r4, r5
 80013c4:	10a4      	asrs	r4, r4, #2
 80013c6:	2600      	movs	r6, #0
 80013c8:	42a6      	cmp	r6, r4
 80013ca:	d109      	bne.n	80013e0 <__libc_init_array+0x24>
 80013cc:	4d0b      	ldr	r5, [pc, #44]	@ (80013fc <__libc_init_array+0x40>)
 80013ce:	4c0c      	ldr	r4, [pc, #48]	@ (8001400 <__libc_init_array+0x44>)
 80013d0:	f000 fff0 	bl	80023b4 <_init>
 80013d4:	1b64      	subs	r4, r4, r5
 80013d6:	10a4      	asrs	r4, r4, #2
 80013d8:	2600      	movs	r6, #0
 80013da:	42a6      	cmp	r6, r4
 80013dc:	d105      	bne.n	80013ea <__libc_init_array+0x2e>
 80013de:	bd70      	pop	{r4, r5, r6, pc}
 80013e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80013e4:	4798      	blx	r3
 80013e6:	3601      	adds	r6, #1
 80013e8:	e7ee      	b.n	80013c8 <__libc_init_array+0xc>
 80013ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80013ee:	4798      	blx	r3
 80013f0:	3601      	adds	r6, #1
 80013f2:	e7f2      	b.n	80013da <__libc_init_array+0x1e>
 80013f4:	080028b8 	.word	0x080028b8
 80013f8:	080028b8 	.word	0x080028b8
 80013fc:	080028b8 	.word	0x080028b8
 8001400:	080028bc 	.word	0x080028bc

08001404 <__retarget_lock_init_recursive>:
 8001404:	4770      	bx	lr

08001406 <__retarget_lock_acquire_recursive>:
 8001406:	4770      	bx	lr

08001408 <__retarget_lock_release_recursive>:
 8001408:	4770      	bx	lr
	...

0800140c <__assert_func>:
 800140c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800140e:	4614      	mov	r4, r2
 8001410:	461a      	mov	r2, r3
 8001412:	4b09      	ldr	r3, [pc, #36]	@ (8001438 <__assert_func+0x2c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4605      	mov	r5, r0
 8001418:	68d8      	ldr	r0, [r3, #12]
 800141a:	b954      	cbnz	r4, 8001432 <__assert_func+0x26>
 800141c:	4b07      	ldr	r3, [pc, #28]	@ (800143c <__assert_func+0x30>)
 800141e:	461c      	mov	r4, r3
 8001420:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001424:	9100      	str	r1, [sp, #0]
 8001426:	462b      	mov	r3, r5
 8001428:	4905      	ldr	r1, [pc, #20]	@ (8001440 <__assert_func+0x34>)
 800142a:	f000 fc9f 	bl	8001d6c <fiprintf>
 800142e:	f000 fce7 	bl	8001e00 <abort>
 8001432:	4b04      	ldr	r3, [pc, #16]	@ (8001444 <__assert_func+0x38>)
 8001434:	e7f4      	b.n	8001420 <__assert_func+0x14>
 8001436:	bf00      	nop
 8001438:	20000014 	.word	0x20000014
 800143c:	0800287a 	.word	0x0800287a
 8001440:	0800284c 	.word	0x0800284c
 8001444:	0800283f 	.word	0x0800283f

08001448 <_free_r>:
 8001448:	b538      	push	{r3, r4, r5, lr}
 800144a:	4605      	mov	r5, r0
 800144c:	2900      	cmp	r1, #0
 800144e:	d041      	beq.n	80014d4 <_free_r+0x8c>
 8001450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001454:	1f0c      	subs	r4, r1, #4
 8001456:	2b00      	cmp	r3, #0
 8001458:	bfb8      	it	lt
 800145a:	18e4      	addlt	r4, r4, r3
 800145c:	f000 f8e8 	bl	8001630 <__malloc_lock>
 8001460:	4a1d      	ldr	r2, [pc, #116]	@ (80014d8 <_free_r+0x90>)
 8001462:	6813      	ldr	r3, [r2, #0]
 8001464:	b933      	cbnz	r3, 8001474 <_free_r+0x2c>
 8001466:	6063      	str	r3, [r4, #4]
 8001468:	6014      	str	r4, [r2, #0]
 800146a:	4628      	mov	r0, r5
 800146c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001470:	f000 b8e4 	b.w	800163c <__malloc_unlock>
 8001474:	42a3      	cmp	r3, r4
 8001476:	d908      	bls.n	800148a <_free_r+0x42>
 8001478:	6820      	ldr	r0, [r4, #0]
 800147a:	1821      	adds	r1, r4, r0
 800147c:	428b      	cmp	r3, r1
 800147e:	bf01      	itttt	eq
 8001480:	6819      	ldreq	r1, [r3, #0]
 8001482:	685b      	ldreq	r3, [r3, #4]
 8001484:	1809      	addeq	r1, r1, r0
 8001486:	6021      	streq	r1, [r4, #0]
 8001488:	e7ed      	b.n	8001466 <_free_r+0x1e>
 800148a:	461a      	mov	r2, r3
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	b10b      	cbz	r3, 8001494 <_free_r+0x4c>
 8001490:	42a3      	cmp	r3, r4
 8001492:	d9fa      	bls.n	800148a <_free_r+0x42>
 8001494:	6811      	ldr	r1, [r2, #0]
 8001496:	1850      	adds	r0, r2, r1
 8001498:	42a0      	cmp	r0, r4
 800149a:	d10b      	bne.n	80014b4 <_free_r+0x6c>
 800149c:	6820      	ldr	r0, [r4, #0]
 800149e:	4401      	add	r1, r0
 80014a0:	1850      	adds	r0, r2, r1
 80014a2:	4283      	cmp	r3, r0
 80014a4:	6011      	str	r1, [r2, #0]
 80014a6:	d1e0      	bne.n	800146a <_free_r+0x22>
 80014a8:	6818      	ldr	r0, [r3, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	6053      	str	r3, [r2, #4]
 80014ae:	4408      	add	r0, r1
 80014b0:	6010      	str	r0, [r2, #0]
 80014b2:	e7da      	b.n	800146a <_free_r+0x22>
 80014b4:	d902      	bls.n	80014bc <_free_r+0x74>
 80014b6:	230c      	movs	r3, #12
 80014b8:	602b      	str	r3, [r5, #0]
 80014ba:	e7d6      	b.n	800146a <_free_r+0x22>
 80014bc:	6820      	ldr	r0, [r4, #0]
 80014be:	1821      	adds	r1, r4, r0
 80014c0:	428b      	cmp	r3, r1
 80014c2:	bf04      	itt	eq
 80014c4:	6819      	ldreq	r1, [r3, #0]
 80014c6:	685b      	ldreq	r3, [r3, #4]
 80014c8:	6063      	str	r3, [r4, #4]
 80014ca:	bf04      	itt	eq
 80014cc:	1809      	addeq	r1, r1, r0
 80014ce:	6021      	streq	r1, [r4, #0]
 80014d0:	6054      	str	r4, [r2, #4]
 80014d2:	e7ca      	b.n	800146a <_free_r+0x22>
 80014d4:	bd38      	pop	{r3, r4, r5, pc}
 80014d6:	bf00      	nop
 80014d8:	200003dc 	.word	0x200003dc

080014dc <malloc>:
 80014dc:	4b02      	ldr	r3, [pc, #8]	@ (80014e8 <malloc+0xc>)
 80014de:	4601      	mov	r1, r0
 80014e0:	6818      	ldr	r0, [r3, #0]
 80014e2:	f000 b825 	b.w	8001530 <_malloc_r>
 80014e6:	bf00      	nop
 80014e8:	20000014 	.word	0x20000014

080014ec <sbrk_aligned>:
 80014ec:	b570      	push	{r4, r5, r6, lr}
 80014ee:	4e0f      	ldr	r6, [pc, #60]	@ (800152c <sbrk_aligned+0x40>)
 80014f0:	460c      	mov	r4, r1
 80014f2:	6831      	ldr	r1, [r6, #0]
 80014f4:	4605      	mov	r5, r0
 80014f6:	b911      	cbnz	r1, 80014fe <sbrk_aligned+0x12>
 80014f8:	f000 fc64 	bl	8001dc4 <_sbrk_r>
 80014fc:	6030      	str	r0, [r6, #0]
 80014fe:	4621      	mov	r1, r4
 8001500:	4628      	mov	r0, r5
 8001502:	f000 fc5f 	bl	8001dc4 <_sbrk_r>
 8001506:	1c43      	adds	r3, r0, #1
 8001508:	d103      	bne.n	8001512 <sbrk_aligned+0x26>
 800150a:	f04f 34ff 	mov.w	r4, #4294967295
 800150e:	4620      	mov	r0, r4
 8001510:	bd70      	pop	{r4, r5, r6, pc}
 8001512:	1cc4      	adds	r4, r0, #3
 8001514:	f024 0403 	bic.w	r4, r4, #3
 8001518:	42a0      	cmp	r0, r4
 800151a:	d0f8      	beq.n	800150e <sbrk_aligned+0x22>
 800151c:	1a21      	subs	r1, r4, r0
 800151e:	4628      	mov	r0, r5
 8001520:	f000 fc50 	bl	8001dc4 <_sbrk_r>
 8001524:	3001      	adds	r0, #1
 8001526:	d1f2      	bne.n	800150e <sbrk_aligned+0x22>
 8001528:	e7ef      	b.n	800150a <sbrk_aligned+0x1e>
 800152a:	bf00      	nop
 800152c:	200003d8 	.word	0x200003d8

08001530 <_malloc_r>:
 8001530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001534:	1ccd      	adds	r5, r1, #3
 8001536:	f025 0503 	bic.w	r5, r5, #3
 800153a:	3508      	adds	r5, #8
 800153c:	2d0c      	cmp	r5, #12
 800153e:	bf38      	it	cc
 8001540:	250c      	movcc	r5, #12
 8001542:	2d00      	cmp	r5, #0
 8001544:	4606      	mov	r6, r0
 8001546:	db01      	blt.n	800154c <_malloc_r+0x1c>
 8001548:	42a9      	cmp	r1, r5
 800154a:	d904      	bls.n	8001556 <_malloc_r+0x26>
 800154c:	230c      	movs	r3, #12
 800154e:	6033      	str	r3, [r6, #0]
 8001550:	2000      	movs	r0, #0
 8001552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001556:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800162c <_malloc_r+0xfc>
 800155a:	f000 f869 	bl	8001630 <__malloc_lock>
 800155e:	f8d8 3000 	ldr.w	r3, [r8]
 8001562:	461c      	mov	r4, r3
 8001564:	bb44      	cbnz	r4, 80015b8 <_malloc_r+0x88>
 8001566:	4629      	mov	r1, r5
 8001568:	4630      	mov	r0, r6
 800156a:	f7ff ffbf 	bl	80014ec <sbrk_aligned>
 800156e:	1c43      	adds	r3, r0, #1
 8001570:	4604      	mov	r4, r0
 8001572:	d158      	bne.n	8001626 <_malloc_r+0xf6>
 8001574:	f8d8 4000 	ldr.w	r4, [r8]
 8001578:	4627      	mov	r7, r4
 800157a:	2f00      	cmp	r7, #0
 800157c:	d143      	bne.n	8001606 <_malloc_r+0xd6>
 800157e:	2c00      	cmp	r4, #0
 8001580:	d04b      	beq.n	800161a <_malloc_r+0xea>
 8001582:	6823      	ldr	r3, [r4, #0]
 8001584:	4639      	mov	r1, r7
 8001586:	4630      	mov	r0, r6
 8001588:	eb04 0903 	add.w	r9, r4, r3
 800158c:	f000 fc1a 	bl	8001dc4 <_sbrk_r>
 8001590:	4581      	cmp	r9, r0
 8001592:	d142      	bne.n	800161a <_malloc_r+0xea>
 8001594:	6821      	ldr	r1, [r4, #0]
 8001596:	1a6d      	subs	r5, r5, r1
 8001598:	4629      	mov	r1, r5
 800159a:	4630      	mov	r0, r6
 800159c:	f7ff ffa6 	bl	80014ec <sbrk_aligned>
 80015a0:	3001      	adds	r0, #1
 80015a2:	d03a      	beq.n	800161a <_malloc_r+0xea>
 80015a4:	6823      	ldr	r3, [r4, #0]
 80015a6:	442b      	add	r3, r5
 80015a8:	6023      	str	r3, [r4, #0]
 80015aa:	f8d8 3000 	ldr.w	r3, [r8]
 80015ae:	685a      	ldr	r2, [r3, #4]
 80015b0:	bb62      	cbnz	r2, 800160c <_malloc_r+0xdc>
 80015b2:	f8c8 7000 	str.w	r7, [r8]
 80015b6:	e00f      	b.n	80015d8 <_malloc_r+0xa8>
 80015b8:	6822      	ldr	r2, [r4, #0]
 80015ba:	1b52      	subs	r2, r2, r5
 80015bc:	d420      	bmi.n	8001600 <_malloc_r+0xd0>
 80015be:	2a0b      	cmp	r2, #11
 80015c0:	d917      	bls.n	80015f2 <_malloc_r+0xc2>
 80015c2:	1961      	adds	r1, r4, r5
 80015c4:	42a3      	cmp	r3, r4
 80015c6:	6025      	str	r5, [r4, #0]
 80015c8:	bf18      	it	ne
 80015ca:	6059      	strne	r1, [r3, #4]
 80015cc:	6863      	ldr	r3, [r4, #4]
 80015ce:	bf08      	it	eq
 80015d0:	f8c8 1000 	streq.w	r1, [r8]
 80015d4:	5162      	str	r2, [r4, r5]
 80015d6:	604b      	str	r3, [r1, #4]
 80015d8:	4630      	mov	r0, r6
 80015da:	f000 f82f 	bl	800163c <__malloc_unlock>
 80015de:	f104 000b 	add.w	r0, r4, #11
 80015e2:	1d23      	adds	r3, r4, #4
 80015e4:	f020 0007 	bic.w	r0, r0, #7
 80015e8:	1ac2      	subs	r2, r0, r3
 80015ea:	bf1c      	itt	ne
 80015ec:	1a1b      	subne	r3, r3, r0
 80015ee:	50a3      	strne	r3, [r4, r2]
 80015f0:	e7af      	b.n	8001552 <_malloc_r+0x22>
 80015f2:	6862      	ldr	r2, [r4, #4]
 80015f4:	42a3      	cmp	r3, r4
 80015f6:	bf0c      	ite	eq
 80015f8:	f8c8 2000 	streq.w	r2, [r8]
 80015fc:	605a      	strne	r2, [r3, #4]
 80015fe:	e7eb      	b.n	80015d8 <_malloc_r+0xa8>
 8001600:	4623      	mov	r3, r4
 8001602:	6864      	ldr	r4, [r4, #4]
 8001604:	e7ae      	b.n	8001564 <_malloc_r+0x34>
 8001606:	463c      	mov	r4, r7
 8001608:	687f      	ldr	r7, [r7, #4]
 800160a:	e7b6      	b.n	800157a <_malloc_r+0x4a>
 800160c:	461a      	mov	r2, r3
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	42a3      	cmp	r3, r4
 8001612:	d1fb      	bne.n	800160c <_malloc_r+0xdc>
 8001614:	2300      	movs	r3, #0
 8001616:	6053      	str	r3, [r2, #4]
 8001618:	e7de      	b.n	80015d8 <_malloc_r+0xa8>
 800161a:	230c      	movs	r3, #12
 800161c:	6033      	str	r3, [r6, #0]
 800161e:	4630      	mov	r0, r6
 8001620:	f000 f80c 	bl	800163c <__malloc_unlock>
 8001624:	e794      	b.n	8001550 <_malloc_r+0x20>
 8001626:	6005      	str	r5, [r0, #0]
 8001628:	e7d6      	b.n	80015d8 <_malloc_r+0xa8>
 800162a:	bf00      	nop
 800162c:	200003dc 	.word	0x200003dc

08001630 <__malloc_lock>:
 8001630:	4801      	ldr	r0, [pc, #4]	@ (8001638 <__malloc_lock+0x8>)
 8001632:	f7ff bee8 	b.w	8001406 <__retarget_lock_acquire_recursive>
 8001636:	bf00      	nop
 8001638:	200003d4 	.word	0x200003d4

0800163c <__malloc_unlock>:
 800163c:	4801      	ldr	r0, [pc, #4]	@ (8001644 <__malloc_unlock+0x8>)
 800163e:	f7ff bee3 	b.w	8001408 <__retarget_lock_release_recursive>
 8001642:	bf00      	nop
 8001644:	200003d4 	.word	0x200003d4

08001648 <__ssputs_r>:
 8001648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800164c:	688e      	ldr	r6, [r1, #8]
 800164e:	461f      	mov	r7, r3
 8001650:	42be      	cmp	r6, r7
 8001652:	680b      	ldr	r3, [r1, #0]
 8001654:	4682      	mov	sl, r0
 8001656:	460c      	mov	r4, r1
 8001658:	4690      	mov	r8, r2
 800165a:	d82d      	bhi.n	80016b8 <__ssputs_r+0x70>
 800165c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001660:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001664:	d026      	beq.n	80016b4 <__ssputs_r+0x6c>
 8001666:	6965      	ldr	r5, [r4, #20]
 8001668:	6909      	ldr	r1, [r1, #16]
 800166a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800166e:	eba3 0901 	sub.w	r9, r3, r1
 8001672:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001676:	1c7b      	adds	r3, r7, #1
 8001678:	444b      	add	r3, r9
 800167a:	106d      	asrs	r5, r5, #1
 800167c:	429d      	cmp	r5, r3
 800167e:	bf38      	it	cc
 8001680:	461d      	movcc	r5, r3
 8001682:	0553      	lsls	r3, r2, #21
 8001684:	d527      	bpl.n	80016d6 <__ssputs_r+0x8e>
 8001686:	4629      	mov	r1, r5
 8001688:	f7ff ff52 	bl	8001530 <_malloc_r>
 800168c:	4606      	mov	r6, r0
 800168e:	b360      	cbz	r0, 80016ea <__ssputs_r+0xa2>
 8001690:	6921      	ldr	r1, [r4, #16]
 8001692:	464a      	mov	r2, r9
 8001694:	f000 fba6 	bl	8001de4 <memcpy>
 8001698:	89a3      	ldrh	r3, [r4, #12]
 800169a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800169e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016a2:	81a3      	strh	r3, [r4, #12]
 80016a4:	6126      	str	r6, [r4, #16]
 80016a6:	6165      	str	r5, [r4, #20]
 80016a8:	444e      	add	r6, r9
 80016aa:	eba5 0509 	sub.w	r5, r5, r9
 80016ae:	6026      	str	r6, [r4, #0]
 80016b0:	60a5      	str	r5, [r4, #8]
 80016b2:	463e      	mov	r6, r7
 80016b4:	42be      	cmp	r6, r7
 80016b6:	d900      	bls.n	80016ba <__ssputs_r+0x72>
 80016b8:	463e      	mov	r6, r7
 80016ba:	6820      	ldr	r0, [r4, #0]
 80016bc:	4632      	mov	r2, r6
 80016be:	4641      	mov	r1, r8
 80016c0:	f000 fb66 	bl	8001d90 <memmove>
 80016c4:	68a3      	ldr	r3, [r4, #8]
 80016c6:	1b9b      	subs	r3, r3, r6
 80016c8:	60a3      	str	r3, [r4, #8]
 80016ca:	6823      	ldr	r3, [r4, #0]
 80016cc:	4433      	add	r3, r6
 80016ce:	6023      	str	r3, [r4, #0]
 80016d0:	2000      	movs	r0, #0
 80016d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016d6:	462a      	mov	r2, r5
 80016d8:	f000 fb99 	bl	8001e0e <_realloc_r>
 80016dc:	4606      	mov	r6, r0
 80016de:	2800      	cmp	r0, #0
 80016e0:	d1e0      	bne.n	80016a4 <__ssputs_r+0x5c>
 80016e2:	6921      	ldr	r1, [r4, #16]
 80016e4:	4650      	mov	r0, sl
 80016e6:	f7ff feaf 	bl	8001448 <_free_r>
 80016ea:	230c      	movs	r3, #12
 80016ec:	f8ca 3000 	str.w	r3, [sl]
 80016f0:	89a3      	ldrh	r3, [r4, #12]
 80016f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016f6:	81a3      	strh	r3, [r4, #12]
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295
 80016fc:	e7e9      	b.n	80016d2 <__ssputs_r+0x8a>
	...

08001700 <_svfiprintf_r>:
 8001700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001704:	4698      	mov	r8, r3
 8001706:	898b      	ldrh	r3, [r1, #12]
 8001708:	061b      	lsls	r3, r3, #24
 800170a:	b09d      	sub	sp, #116	@ 0x74
 800170c:	4607      	mov	r7, r0
 800170e:	460d      	mov	r5, r1
 8001710:	4614      	mov	r4, r2
 8001712:	d510      	bpl.n	8001736 <_svfiprintf_r+0x36>
 8001714:	690b      	ldr	r3, [r1, #16]
 8001716:	b973      	cbnz	r3, 8001736 <_svfiprintf_r+0x36>
 8001718:	2140      	movs	r1, #64	@ 0x40
 800171a:	f7ff ff09 	bl	8001530 <_malloc_r>
 800171e:	6028      	str	r0, [r5, #0]
 8001720:	6128      	str	r0, [r5, #16]
 8001722:	b930      	cbnz	r0, 8001732 <_svfiprintf_r+0x32>
 8001724:	230c      	movs	r3, #12
 8001726:	603b      	str	r3, [r7, #0]
 8001728:	f04f 30ff 	mov.w	r0, #4294967295
 800172c:	b01d      	add	sp, #116	@ 0x74
 800172e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001732:	2340      	movs	r3, #64	@ 0x40
 8001734:	616b      	str	r3, [r5, #20]
 8001736:	2300      	movs	r3, #0
 8001738:	9309      	str	r3, [sp, #36]	@ 0x24
 800173a:	2320      	movs	r3, #32
 800173c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001740:	f8cd 800c 	str.w	r8, [sp, #12]
 8001744:	2330      	movs	r3, #48	@ 0x30
 8001746:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80018e4 <_svfiprintf_r+0x1e4>
 800174a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800174e:	f04f 0901 	mov.w	r9, #1
 8001752:	4623      	mov	r3, r4
 8001754:	469a      	mov	sl, r3
 8001756:	f813 2b01 	ldrb.w	r2, [r3], #1
 800175a:	b10a      	cbz	r2, 8001760 <_svfiprintf_r+0x60>
 800175c:	2a25      	cmp	r2, #37	@ 0x25
 800175e:	d1f9      	bne.n	8001754 <_svfiprintf_r+0x54>
 8001760:	ebba 0b04 	subs.w	fp, sl, r4
 8001764:	d00b      	beq.n	800177e <_svfiprintf_r+0x7e>
 8001766:	465b      	mov	r3, fp
 8001768:	4622      	mov	r2, r4
 800176a:	4629      	mov	r1, r5
 800176c:	4638      	mov	r0, r7
 800176e:	f7ff ff6b 	bl	8001648 <__ssputs_r>
 8001772:	3001      	adds	r0, #1
 8001774:	f000 80a7 	beq.w	80018c6 <_svfiprintf_r+0x1c6>
 8001778:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800177a:	445a      	add	r2, fp
 800177c:	9209      	str	r2, [sp, #36]	@ 0x24
 800177e:	f89a 3000 	ldrb.w	r3, [sl]
 8001782:	2b00      	cmp	r3, #0
 8001784:	f000 809f 	beq.w	80018c6 <_svfiprintf_r+0x1c6>
 8001788:	2300      	movs	r3, #0
 800178a:	f04f 32ff 	mov.w	r2, #4294967295
 800178e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001792:	f10a 0a01 	add.w	sl, sl, #1
 8001796:	9304      	str	r3, [sp, #16]
 8001798:	9307      	str	r3, [sp, #28]
 800179a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800179e:	931a      	str	r3, [sp, #104]	@ 0x68
 80017a0:	4654      	mov	r4, sl
 80017a2:	2205      	movs	r2, #5
 80017a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80017a8:	484e      	ldr	r0, [pc, #312]	@ (80018e4 <_svfiprintf_r+0x1e4>)
 80017aa:	f7fe fd29 	bl	8000200 <memchr>
 80017ae:	9a04      	ldr	r2, [sp, #16]
 80017b0:	b9d8      	cbnz	r0, 80017ea <_svfiprintf_r+0xea>
 80017b2:	06d0      	lsls	r0, r2, #27
 80017b4:	bf44      	itt	mi
 80017b6:	2320      	movmi	r3, #32
 80017b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80017bc:	0711      	lsls	r1, r2, #28
 80017be:	bf44      	itt	mi
 80017c0:	232b      	movmi	r3, #43	@ 0x2b
 80017c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80017c6:	f89a 3000 	ldrb.w	r3, [sl]
 80017ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80017cc:	d015      	beq.n	80017fa <_svfiprintf_r+0xfa>
 80017ce:	9a07      	ldr	r2, [sp, #28]
 80017d0:	4654      	mov	r4, sl
 80017d2:	2000      	movs	r0, #0
 80017d4:	f04f 0c0a 	mov.w	ip, #10
 80017d8:	4621      	mov	r1, r4
 80017da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80017de:	3b30      	subs	r3, #48	@ 0x30
 80017e0:	2b09      	cmp	r3, #9
 80017e2:	d94b      	bls.n	800187c <_svfiprintf_r+0x17c>
 80017e4:	b1b0      	cbz	r0, 8001814 <_svfiprintf_r+0x114>
 80017e6:	9207      	str	r2, [sp, #28]
 80017e8:	e014      	b.n	8001814 <_svfiprintf_r+0x114>
 80017ea:	eba0 0308 	sub.w	r3, r0, r8
 80017ee:	fa09 f303 	lsl.w	r3, r9, r3
 80017f2:	4313      	orrs	r3, r2
 80017f4:	9304      	str	r3, [sp, #16]
 80017f6:	46a2      	mov	sl, r4
 80017f8:	e7d2      	b.n	80017a0 <_svfiprintf_r+0xa0>
 80017fa:	9b03      	ldr	r3, [sp, #12]
 80017fc:	1d19      	adds	r1, r3, #4
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	9103      	str	r1, [sp, #12]
 8001802:	2b00      	cmp	r3, #0
 8001804:	bfbb      	ittet	lt
 8001806:	425b      	neglt	r3, r3
 8001808:	f042 0202 	orrlt.w	r2, r2, #2
 800180c:	9307      	strge	r3, [sp, #28]
 800180e:	9307      	strlt	r3, [sp, #28]
 8001810:	bfb8      	it	lt
 8001812:	9204      	strlt	r2, [sp, #16]
 8001814:	7823      	ldrb	r3, [r4, #0]
 8001816:	2b2e      	cmp	r3, #46	@ 0x2e
 8001818:	d10a      	bne.n	8001830 <_svfiprintf_r+0x130>
 800181a:	7863      	ldrb	r3, [r4, #1]
 800181c:	2b2a      	cmp	r3, #42	@ 0x2a
 800181e:	d132      	bne.n	8001886 <_svfiprintf_r+0x186>
 8001820:	9b03      	ldr	r3, [sp, #12]
 8001822:	1d1a      	adds	r2, r3, #4
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	9203      	str	r2, [sp, #12]
 8001828:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800182c:	3402      	adds	r4, #2
 800182e:	9305      	str	r3, [sp, #20]
 8001830:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80018f4 <_svfiprintf_r+0x1f4>
 8001834:	7821      	ldrb	r1, [r4, #0]
 8001836:	2203      	movs	r2, #3
 8001838:	4650      	mov	r0, sl
 800183a:	f7fe fce1 	bl	8000200 <memchr>
 800183e:	b138      	cbz	r0, 8001850 <_svfiprintf_r+0x150>
 8001840:	9b04      	ldr	r3, [sp, #16]
 8001842:	eba0 000a 	sub.w	r0, r0, sl
 8001846:	2240      	movs	r2, #64	@ 0x40
 8001848:	4082      	lsls	r2, r0
 800184a:	4313      	orrs	r3, r2
 800184c:	3401      	adds	r4, #1
 800184e:	9304      	str	r3, [sp, #16]
 8001850:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001854:	4824      	ldr	r0, [pc, #144]	@ (80018e8 <_svfiprintf_r+0x1e8>)
 8001856:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800185a:	2206      	movs	r2, #6
 800185c:	f7fe fcd0 	bl	8000200 <memchr>
 8001860:	2800      	cmp	r0, #0
 8001862:	d036      	beq.n	80018d2 <_svfiprintf_r+0x1d2>
 8001864:	4b21      	ldr	r3, [pc, #132]	@ (80018ec <_svfiprintf_r+0x1ec>)
 8001866:	bb1b      	cbnz	r3, 80018b0 <_svfiprintf_r+0x1b0>
 8001868:	9b03      	ldr	r3, [sp, #12]
 800186a:	3307      	adds	r3, #7
 800186c:	f023 0307 	bic.w	r3, r3, #7
 8001870:	3308      	adds	r3, #8
 8001872:	9303      	str	r3, [sp, #12]
 8001874:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001876:	4433      	add	r3, r6
 8001878:	9309      	str	r3, [sp, #36]	@ 0x24
 800187a:	e76a      	b.n	8001752 <_svfiprintf_r+0x52>
 800187c:	fb0c 3202 	mla	r2, ip, r2, r3
 8001880:	460c      	mov	r4, r1
 8001882:	2001      	movs	r0, #1
 8001884:	e7a8      	b.n	80017d8 <_svfiprintf_r+0xd8>
 8001886:	2300      	movs	r3, #0
 8001888:	3401      	adds	r4, #1
 800188a:	9305      	str	r3, [sp, #20]
 800188c:	4619      	mov	r1, r3
 800188e:	f04f 0c0a 	mov.w	ip, #10
 8001892:	4620      	mov	r0, r4
 8001894:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001898:	3a30      	subs	r2, #48	@ 0x30
 800189a:	2a09      	cmp	r2, #9
 800189c:	d903      	bls.n	80018a6 <_svfiprintf_r+0x1a6>
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0c6      	beq.n	8001830 <_svfiprintf_r+0x130>
 80018a2:	9105      	str	r1, [sp, #20]
 80018a4:	e7c4      	b.n	8001830 <_svfiprintf_r+0x130>
 80018a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80018aa:	4604      	mov	r4, r0
 80018ac:	2301      	movs	r3, #1
 80018ae:	e7f0      	b.n	8001892 <_svfiprintf_r+0x192>
 80018b0:	ab03      	add	r3, sp, #12
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	462a      	mov	r2, r5
 80018b6:	4b0e      	ldr	r3, [pc, #56]	@ (80018f0 <_svfiprintf_r+0x1f0>)
 80018b8:	a904      	add	r1, sp, #16
 80018ba:	4638      	mov	r0, r7
 80018bc:	f3af 8000 	nop.w
 80018c0:	1c42      	adds	r2, r0, #1
 80018c2:	4606      	mov	r6, r0
 80018c4:	d1d6      	bne.n	8001874 <_svfiprintf_r+0x174>
 80018c6:	89ab      	ldrh	r3, [r5, #12]
 80018c8:	065b      	lsls	r3, r3, #25
 80018ca:	f53f af2d 	bmi.w	8001728 <_svfiprintf_r+0x28>
 80018ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80018d0:	e72c      	b.n	800172c <_svfiprintf_r+0x2c>
 80018d2:	ab03      	add	r3, sp, #12
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	462a      	mov	r2, r5
 80018d8:	4b05      	ldr	r3, [pc, #20]	@ (80018f0 <_svfiprintf_r+0x1f0>)
 80018da:	a904      	add	r1, sp, #16
 80018dc:	4638      	mov	r0, r7
 80018de:	f000 f879 	bl	80019d4 <_printf_i>
 80018e2:	e7ed      	b.n	80018c0 <_svfiprintf_r+0x1c0>
 80018e4:	0800287b 	.word	0x0800287b
 80018e8:	08002885 	.word	0x08002885
 80018ec:	00000000 	.word	0x00000000
 80018f0:	08001649 	.word	0x08001649
 80018f4:	08002881 	.word	0x08002881

080018f8 <_printf_common>:
 80018f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018fc:	4616      	mov	r6, r2
 80018fe:	4698      	mov	r8, r3
 8001900:	688a      	ldr	r2, [r1, #8]
 8001902:	690b      	ldr	r3, [r1, #16]
 8001904:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001908:	4293      	cmp	r3, r2
 800190a:	bfb8      	it	lt
 800190c:	4613      	movlt	r3, r2
 800190e:	6033      	str	r3, [r6, #0]
 8001910:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001914:	4607      	mov	r7, r0
 8001916:	460c      	mov	r4, r1
 8001918:	b10a      	cbz	r2, 800191e <_printf_common+0x26>
 800191a:	3301      	adds	r3, #1
 800191c:	6033      	str	r3, [r6, #0]
 800191e:	6823      	ldr	r3, [r4, #0]
 8001920:	0699      	lsls	r1, r3, #26
 8001922:	bf42      	ittt	mi
 8001924:	6833      	ldrmi	r3, [r6, #0]
 8001926:	3302      	addmi	r3, #2
 8001928:	6033      	strmi	r3, [r6, #0]
 800192a:	6825      	ldr	r5, [r4, #0]
 800192c:	f015 0506 	ands.w	r5, r5, #6
 8001930:	d106      	bne.n	8001940 <_printf_common+0x48>
 8001932:	f104 0a19 	add.w	sl, r4, #25
 8001936:	68e3      	ldr	r3, [r4, #12]
 8001938:	6832      	ldr	r2, [r6, #0]
 800193a:	1a9b      	subs	r3, r3, r2
 800193c:	42ab      	cmp	r3, r5
 800193e:	dc26      	bgt.n	800198e <_printf_common+0x96>
 8001940:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001944:	6822      	ldr	r2, [r4, #0]
 8001946:	3b00      	subs	r3, #0
 8001948:	bf18      	it	ne
 800194a:	2301      	movne	r3, #1
 800194c:	0692      	lsls	r2, r2, #26
 800194e:	d42b      	bmi.n	80019a8 <_printf_common+0xb0>
 8001950:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001954:	4641      	mov	r1, r8
 8001956:	4638      	mov	r0, r7
 8001958:	47c8      	blx	r9
 800195a:	3001      	adds	r0, #1
 800195c:	d01e      	beq.n	800199c <_printf_common+0xa4>
 800195e:	6823      	ldr	r3, [r4, #0]
 8001960:	6922      	ldr	r2, [r4, #16]
 8001962:	f003 0306 	and.w	r3, r3, #6
 8001966:	2b04      	cmp	r3, #4
 8001968:	bf02      	ittt	eq
 800196a:	68e5      	ldreq	r5, [r4, #12]
 800196c:	6833      	ldreq	r3, [r6, #0]
 800196e:	1aed      	subeq	r5, r5, r3
 8001970:	68a3      	ldr	r3, [r4, #8]
 8001972:	bf0c      	ite	eq
 8001974:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001978:	2500      	movne	r5, #0
 800197a:	4293      	cmp	r3, r2
 800197c:	bfc4      	itt	gt
 800197e:	1a9b      	subgt	r3, r3, r2
 8001980:	18ed      	addgt	r5, r5, r3
 8001982:	2600      	movs	r6, #0
 8001984:	341a      	adds	r4, #26
 8001986:	42b5      	cmp	r5, r6
 8001988:	d11a      	bne.n	80019c0 <_printf_common+0xc8>
 800198a:	2000      	movs	r0, #0
 800198c:	e008      	b.n	80019a0 <_printf_common+0xa8>
 800198e:	2301      	movs	r3, #1
 8001990:	4652      	mov	r2, sl
 8001992:	4641      	mov	r1, r8
 8001994:	4638      	mov	r0, r7
 8001996:	47c8      	blx	r9
 8001998:	3001      	adds	r0, #1
 800199a:	d103      	bne.n	80019a4 <_printf_common+0xac>
 800199c:	f04f 30ff 	mov.w	r0, #4294967295
 80019a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019a4:	3501      	adds	r5, #1
 80019a6:	e7c6      	b.n	8001936 <_printf_common+0x3e>
 80019a8:	18e1      	adds	r1, r4, r3
 80019aa:	1c5a      	adds	r2, r3, #1
 80019ac:	2030      	movs	r0, #48	@ 0x30
 80019ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80019b2:	4422      	add	r2, r4
 80019b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80019b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80019bc:	3302      	adds	r3, #2
 80019be:	e7c7      	b.n	8001950 <_printf_common+0x58>
 80019c0:	2301      	movs	r3, #1
 80019c2:	4622      	mov	r2, r4
 80019c4:	4641      	mov	r1, r8
 80019c6:	4638      	mov	r0, r7
 80019c8:	47c8      	blx	r9
 80019ca:	3001      	adds	r0, #1
 80019cc:	d0e6      	beq.n	800199c <_printf_common+0xa4>
 80019ce:	3601      	adds	r6, #1
 80019d0:	e7d9      	b.n	8001986 <_printf_common+0x8e>
	...

080019d4 <_printf_i>:
 80019d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80019d8:	7e0f      	ldrb	r7, [r1, #24]
 80019da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80019dc:	2f78      	cmp	r7, #120	@ 0x78
 80019de:	4691      	mov	r9, r2
 80019e0:	4680      	mov	r8, r0
 80019e2:	460c      	mov	r4, r1
 80019e4:	469a      	mov	sl, r3
 80019e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80019ea:	d807      	bhi.n	80019fc <_printf_i+0x28>
 80019ec:	2f62      	cmp	r7, #98	@ 0x62
 80019ee:	d80a      	bhi.n	8001a06 <_printf_i+0x32>
 80019f0:	2f00      	cmp	r7, #0
 80019f2:	f000 80d2 	beq.w	8001b9a <_printf_i+0x1c6>
 80019f6:	2f58      	cmp	r7, #88	@ 0x58
 80019f8:	f000 80b9 	beq.w	8001b6e <_printf_i+0x19a>
 80019fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001a00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001a04:	e03a      	b.n	8001a7c <_printf_i+0xa8>
 8001a06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001a0a:	2b15      	cmp	r3, #21
 8001a0c:	d8f6      	bhi.n	80019fc <_printf_i+0x28>
 8001a0e:	a101      	add	r1, pc, #4	@ (adr r1, 8001a14 <_printf_i+0x40>)
 8001a10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001a14:	08001a6d 	.word	0x08001a6d
 8001a18:	08001a81 	.word	0x08001a81
 8001a1c:	080019fd 	.word	0x080019fd
 8001a20:	080019fd 	.word	0x080019fd
 8001a24:	080019fd 	.word	0x080019fd
 8001a28:	080019fd 	.word	0x080019fd
 8001a2c:	08001a81 	.word	0x08001a81
 8001a30:	080019fd 	.word	0x080019fd
 8001a34:	080019fd 	.word	0x080019fd
 8001a38:	080019fd 	.word	0x080019fd
 8001a3c:	080019fd 	.word	0x080019fd
 8001a40:	08001b81 	.word	0x08001b81
 8001a44:	08001aab 	.word	0x08001aab
 8001a48:	08001b3b 	.word	0x08001b3b
 8001a4c:	080019fd 	.word	0x080019fd
 8001a50:	080019fd 	.word	0x080019fd
 8001a54:	08001ba3 	.word	0x08001ba3
 8001a58:	080019fd 	.word	0x080019fd
 8001a5c:	08001aab 	.word	0x08001aab
 8001a60:	080019fd 	.word	0x080019fd
 8001a64:	080019fd 	.word	0x080019fd
 8001a68:	08001b43 	.word	0x08001b43
 8001a6c:	6833      	ldr	r3, [r6, #0]
 8001a6e:	1d1a      	adds	r2, r3, #4
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6032      	str	r2, [r6, #0]
 8001a74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001a78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e09d      	b.n	8001bbc <_printf_i+0x1e8>
 8001a80:	6833      	ldr	r3, [r6, #0]
 8001a82:	6820      	ldr	r0, [r4, #0]
 8001a84:	1d19      	adds	r1, r3, #4
 8001a86:	6031      	str	r1, [r6, #0]
 8001a88:	0606      	lsls	r6, r0, #24
 8001a8a:	d501      	bpl.n	8001a90 <_printf_i+0xbc>
 8001a8c:	681d      	ldr	r5, [r3, #0]
 8001a8e:	e003      	b.n	8001a98 <_printf_i+0xc4>
 8001a90:	0645      	lsls	r5, r0, #25
 8001a92:	d5fb      	bpl.n	8001a8c <_printf_i+0xb8>
 8001a94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001a98:	2d00      	cmp	r5, #0
 8001a9a:	da03      	bge.n	8001aa4 <_printf_i+0xd0>
 8001a9c:	232d      	movs	r3, #45	@ 0x2d
 8001a9e:	426d      	negs	r5, r5
 8001aa0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001aa4:	4859      	ldr	r0, [pc, #356]	@ (8001c0c <_printf_i+0x238>)
 8001aa6:	230a      	movs	r3, #10
 8001aa8:	e011      	b.n	8001ace <_printf_i+0xfa>
 8001aaa:	6821      	ldr	r1, [r4, #0]
 8001aac:	6833      	ldr	r3, [r6, #0]
 8001aae:	0608      	lsls	r0, r1, #24
 8001ab0:	f853 5b04 	ldr.w	r5, [r3], #4
 8001ab4:	d402      	bmi.n	8001abc <_printf_i+0xe8>
 8001ab6:	0649      	lsls	r1, r1, #25
 8001ab8:	bf48      	it	mi
 8001aba:	b2ad      	uxthmi	r5, r5
 8001abc:	2f6f      	cmp	r7, #111	@ 0x6f
 8001abe:	4853      	ldr	r0, [pc, #332]	@ (8001c0c <_printf_i+0x238>)
 8001ac0:	6033      	str	r3, [r6, #0]
 8001ac2:	bf14      	ite	ne
 8001ac4:	230a      	movne	r3, #10
 8001ac6:	2308      	moveq	r3, #8
 8001ac8:	2100      	movs	r1, #0
 8001aca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001ace:	6866      	ldr	r6, [r4, #4]
 8001ad0:	60a6      	str	r6, [r4, #8]
 8001ad2:	2e00      	cmp	r6, #0
 8001ad4:	bfa2      	ittt	ge
 8001ad6:	6821      	ldrge	r1, [r4, #0]
 8001ad8:	f021 0104 	bicge.w	r1, r1, #4
 8001adc:	6021      	strge	r1, [r4, #0]
 8001ade:	b90d      	cbnz	r5, 8001ae4 <_printf_i+0x110>
 8001ae0:	2e00      	cmp	r6, #0
 8001ae2:	d04b      	beq.n	8001b7c <_printf_i+0x1a8>
 8001ae4:	4616      	mov	r6, r2
 8001ae6:	fbb5 f1f3 	udiv	r1, r5, r3
 8001aea:	fb03 5711 	mls	r7, r3, r1, r5
 8001aee:	5dc7      	ldrb	r7, [r0, r7]
 8001af0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001af4:	462f      	mov	r7, r5
 8001af6:	42bb      	cmp	r3, r7
 8001af8:	460d      	mov	r5, r1
 8001afa:	d9f4      	bls.n	8001ae6 <_printf_i+0x112>
 8001afc:	2b08      	cmp	r3, #8
 8001afe:	d10b      	bne.n	8001b18 <_printf_i+0x144>
 8001b00:	6823      	ldr	r3, [r4, #0]
 8001b02:	07df      	lsls	r7, r3, #31
 8001b04:	d508      	bpl.n	8001b18 <_printf_i+0x144>
 8001b06:	6923      	ldr	r3, [r4, #16]
 8001b08:	6861      	ldr	r1, [r4, #4]
 8001b0a:	4299      	cmp	r1, r3
 8001b0c:	bfde      	ittt	le
 8001b0e:	2330      	movle	r3, #48	@ 0x30
 8001b10:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001b14:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001b18:	1b92      	subs	r2, r2, r6
 8001b1a:	6122      	str	r2, [r4, #16]
 8001b1c:	f8cd a000 	str.w	sl, [sp]
 8001b20:	464b      	mov	r3, r9
 8001b22:	aa03      	add	r2, sp, #12
 8001b24:	4621      	mov	r1, r4
 8001b26:	4640      	mov	r0, r8
 8001b28:	f7ff fee6 	bl	80018f8 <_printf_common>
 8001b2c:	3001      	adds	r0, #1
 8001b2e:	d14a      	bne.n	8001bc6 <_printf_i+0x1f2>
 8001b30:	f04f 30ff 	mov.w	r0, #4294967295
 8001b34:	b004      	add	sp, #16
 8001b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b3a:	6823      	ldr	r3, [r4, #0]
 8001b3c:	f043 0320 	orr.w	r3, r3, #32
 8001b40:	6023      	str	r3, [r4, #0]
 8001b42:	4833      	ldr	r0, [pc, #204]	@ (8001c10 <_printf_i+0x23c>)
 8001b44:	2778      	movs	r7, #120	@ 0x78
 8001b46:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001b4a:	6823      	ldr	r3, [r4, #0]
 8001b4c:	6831      	ldr	r1, [r6, #0]
 8001b4e:	061f      	lsls	r7, r3, #24
 8001b50:	f851 5b04 	ldr.w	r5, [r1], #4
 8001b54:	d402      	bmi.n	8001b5c <_printf_i+0x188>
 8001b56:	065f      	lsls	r7, r3, #25
 8001b58:	bf48      	it	mi
 8001b5a:	b2ad      	uxthmi	r5, r5
 8001b5c:	6031      	str	r1, [r6, #0]
 8001b5e:	07d9      	lsls	r1, r3, #31
 8001b60:	bf44      	itt	mi
 8001b62:	f043 0320 	orrmi.w	r3, r3, #32
 8001b66:	6023      	strmi	r3, [r4, #0]
 8001b68:	b11d      	cbz	r5, 8001b72 <_printf_i+0x19e>
 8001b6a:	2310      	movs	r3, #16
 8001b6c:	e7ac      	b.n	8001ac8 <_printf_i+0xf4>
 8001b6e:	4827      	ldr	r0, [pc, #156]	@ (8001c0c <_printf_i+0x238>)
 8001b70:	e7e9      	b.n	8001b46 <_printf_i+0x172>
 8001b72:	6823      	ldr	r3, [r4, #0]
 8001b74:	f023 0320 	bic.w	r3, r3, #32
 8001b78:	6023      	str	r3, [r4, #0]
 8001b7a:	e7f6      	b.n	8001b6a <_printf_i+0x196>
 8001b7c:	4616      	mov	r6, r2
 8001b7e:	e7bd      	b.n	8001afc <_printf_i+0x128>
 8001b80:	6833      	ldr	r3, [r6, #0]
 8001b82:	6825      	ldr	r5, [r4, #0]
 8001b84:	6961      	ldr	r1, [r4, #20]
 8001b86:	1d18      	adds	r0, r3, #4
 8001b88:	6030      	str	r0, [r6, #0]
 8001b8a:	062e      	lsls	r6, r5, #24
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	d501      	bpl.n	8001b94 <_printf_i+0x1c0>
 8001b90:	6019      	str	r1, [r3, #0]
 8001b92:	e002      	b.n	8001b9a <_printf_i+0x1c6>
 8001b94:	0668      	lsls	r0, r5, #25
 8001b96:	d5fb      	bpl.n	8001b90 <_printf_i+0x1bc>
 8001b98:	8019      	strh	r1, [r3, #0]
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	6123      	str	r3, [r4, #16]
 8001b9e:	4616      	mov	r6, r2
 8001ba0:	e7bc      	b.n	8001b1c <_printf_i+0x148>
 8001ba2:	6833      	ldr	r3, [r6, #0]
 8001ba4:	1d1a      	adds	r2, r3, #4
 8001ba6:	6032      	str	r2, [r6, #0]
 8001ba8:	681e      	ldr	r6, [r3, #0]
 8001baa:	6862      	ldr	r2, [r4, #4]
 8001bac:	2100      	movs	r1, #0
 8001bae:	4630      	mov	r0, r6
 8001bb0:	f7fe fb26 	bl	8000200 <memchr>
 8001bb4:	b108      	cbz	r0, 8001bba <_printf_i+0x1e6>
 8001bb6:	1b80      	subs	r0, r0, r6
 8001bb8:	6060      	str	r0, [r4, #4]
 8001bba:	6863      	ldr	r3, [r4, #4]
 8001bbc:	6123      	str	r3, [r4, #16]
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001bc4:	e7aa      	b.n	8001b1c <_printf_i+0x148>
 8001bc6:	6923      	ldr	r3, [r4, #16]
 8001bc8:	4632      	mov	r2, r6
 8001bca:	4649      	mov	r1, r9
 8001bcc:	4640      	mov	r0, r8
 8001bce:	47d0      	blx	sl
 8001bd0:	3001      	adds	r0, #1
 8001bd2:	d0ad      	beq.n	8001b30 <_printf_i+0x15c>
 8001bd4:	6823      	ldr	r3, [r4, #0]
 8001bd6:	079b      	lsls	r3, r3, #30
 8001bd8:	d413      	bmi.n	8001c02 <_printf_i+0x22e>
 8001bda:	68e0      	ldr	r0, [r4, #12]
 8001bdc:	9b03      	ldr	r3, [sp, #12]
 8001bde:	4298      	cmp	r0, r3
 8001be0:	bfb8      	it	lt
 8001be2:	4618      	movlt	r0, r3
 8001be4:	e7a6      	b.n	8001b34 <_printf_i+0x160>
 8001be6:	2301      	movs	r3, #1
 8001be8:	4632      	mov	r2, r6
 8001bea:	4649      	mov	r1, r9
 8001bec:	4640      	mov	r0, r8
 8001bee:	47d0      	blx	sl
 8001bf0:	3001      	adds	r0, #1
 8001bf2:	d09d      	beq.n	8001b30 <_printf_i+0x15c>
 8001bf4:	3501      	adds	r5, #1
 8001bf6:	68e3      	ldr	r3, [r4, #12]
 8001bf8:	9903      	ldr	r1, [sp, #12]
 8001bfa:	1a5b      	subs	r3, r3, r1
 8001bfc:	42ab      	cmp	r3, r5
 8001bfe:	dcf2      	bgt.n	8001be6 <_printf_i+0x212>
 8001c00:	e7eb      	b.n	8001bda <_printf_i+0x206>
 8001c02:	2500      	movs	r5, #0
 8001c04:	f104 0619 	add.w	r6, r4, #25
 8001c08:	e7f5      	b.n	8001bf6 <_printf_i+0x222>
 8001c0a:	bf00      	nop
 8001c0c:	0800288c 	.word	0x0800288c
 8001c10:	0800289d 	.word	0x0800289d

08001c14 <__sflush_r>:
 8001c14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c1c:	0716      	lsls	r6, r2, #28
 8001c1e:	4605      	mov	r5, r0
 8001c20:	460c      	mov	r4, r1
 8001c22:	d454      	bmi.n	8001cce <__sflush_r+0xba>
 8001c24:	684b      	ldr	r3, [r1, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	dc02      	bgt.n	8001c30 <__sflush_r+0x1c>
 8001c2a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	dd48      	ble.n	8001cc2 <__sflush_r+0xae>
 8001c30:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001c32:	2e00      	cmp	r6, #0
 8001c34:	d045      	beq.n	8001cc2 <__sflush_r+0xae>
 8001c36:	2300      	movs	r3, #0
 8001c38:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001c3c:	682f      	ldr	r7, [r5, #0]
 8001c3e:	6a21      	ldr	r1, [r4, #32]
 8001c40:	602b      	str	r3, [r5, #0]
 8001c42:	d030      	beq.n	8001ca6 <__sflush_r+0x92>
 8001c44:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001c46:	89a3      	ldrh	r3, [r4, #12]
 8001c48:	0759      	lsls	r1, r3, #29
 8001c4a:	d505      	bpl.n	8001c58 <__sflush_r+0x44>
 8001c4c:	6863      	ldr	r3, [r4, #4]
 8001c4e:	1ad2      	subs	r2, r2, r3
 8001c50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001c52:	b10b      	cbz	r3, 8001c58 <__sflush_r+0x44>
 8001c54:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001c56:	1ad2      	subs	r2, r2, r3
 8001c58:	2300      	movs	r3, #0
 8001c5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001c5c:	6a21      	ldr	r1, [r4, #32]
 8001c5e:	4628      	mov	r0, r5
 8001c60:	47b0      	blx	r6
 8001c62:	1c43      	adds	r3, r0, #1
 8001c64:	89a3      	ldrh	r3, [r4, #12]
 8001c66:	d106      	bne.n	8001c76 <__sflush_r+0x62>
 8001c68:	6829      	ldr	r1, [r5, #0]
 8001c6a:	291d      	cmp	r1, #29
 8001c6c:	d82b      	bhi.n	8001cc6 <__sflush_r+0xb2>
 8001c6e:	4a2a      	ldr	r2, [pc, #168]	@ (8001d18 <__sflush_r+0x104>)
 8001c70:	410a      	asrs	r2, r1
 8001c72:	07d6      	lsls	r6, r2, #31
 8001c74:	d427      	bmi.n	8001cc6 <__sflush_r+0xb2>
 8001c76:	2200      	movs	r2, #0
 8001c78:	6062      	str	r2, [r4, #4]
 8001c7a:	04d9      	lsls	r1, r3, #19
 8001c7c:	6922      	ldr	r2, [r4, #16]
 8001c7e:	6022      	str	r2, [r4, #0]
 8001c80:	d504      	bpl.n	8001c8c <__sflush_r+0x78>
 8001c82:	1c42      	adds	r2, r0, #1
 8001c84:	d101      	bne.n	8001c8a <__sflush_r+0x76>
 8001c86:	682b      	ldr	r3, [r5, #0]
 8001c88:	b903      	cbnz	r3, 8001c8c <__sflush_r+0x78>
 8001c8a:	6560      	str	r0, [r4, #84]	@ 0x54
 8001c8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001c8e:	602f      	str	r7, [r5, #0]
 8001c90:	b1b9      	cbz	r1, 8001cc2 <__sflush_r+0xae>
 8001c92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001c96:	4299      	cmp	r1, r3
 8001c98:	d002      	beq.n	8001ca0 <__sflush_r+0x8c>
 8001c9a:	4628      	mov	r0, r5
 8001c9c:	f7ff fbd4 	bl	8001448 <_free_r>
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	6363      	str	r3, [r4, #52]	@ 0x34
 8001ca4:	e00d      	b.n	8001cc2 <__sflush_r+0xae>
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	4628      	mov	r0, r5
 8001caa:	47b0      	blx	r6
 8001cac:	4602      	mov	r2, r0
 8001cae:	1c50      	adds	r0, r2, #1
 8001cb0:	d1c9      	bne.n	8001c46 <__sflush_r+0x32>
 8001cb2:	682b      	ldr	r3, [r5, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0c6      	beq.n	8001c46 <__sflush_r+0x32>
 8001cb8:	2b1d      	cmp	r3, #29
 8001cba:	d001      	beq.n	8001cc0 <__sflush_r+0xac>
 8001cbc:	2b16      	cmp	r3, #22
 8001cbe:	d11e      	bne.n	8001cfe <__sflush_r+0xea>
 8001cc0:	602f      	str	r7, [r5, #0]
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	e022      	b.n	8001d0c <__sflush_r+0xf8>
 8001cc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cca:	b21b      	sxth	r3, r3
 8001ccc:	e01b      	b.n	8001d06 <__sflush_r+0xf2>
 8001cce:	690f      	ldr	r7, [r1, #16]
 8001cd0:	2f00      	cmp	r7, #0
 8001cd2:	d0f6      	beq.n	8001cc2 <__sflush_r+0xae>
 8001cd4:	0793      	lsls	r3, r2, #30
 8001cd6:	680e      	ldr	r6, [r1, #0]
 8001cd8:	bf08      	it	eq
 8001cda:	694b      	ldreq	r3, [r1, #20]
 8001cdc:	600f      	str	r7, [r1, #0]
 8001cde:	bf18      	it	ne
 8001ce0:	2300      	movne	r3, #0
 8001ce2:	eba6 0807 	sub.w	r8, r6, r7
 8001ce6:	608b      	str	r3, [r1, #8]
 8001ce8:	f1b8 0f00 	cmp.w	r8, #0
 8001cec:	dde9      	ble.n	8001cc2 <__sflush_r+0xae>
 8001cee:	6a21      	ldr	r1, [r4, #32]
 8001cf0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001cf2:	4643      	mov	r3, r8
 8001cf4:	463a      	mov	r2, r7
 8001cf6:	4628      	mov	r0, r5
 8001cf8:	47b0      	blx	r6
 8001cfa:	2800      	cmp	r0, #0
 8001cfc:	dc08      	bgt.n	8001d10 <__sflush_r+0xfc>
 8001cfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d06:	81a3      	strh	r3, [r4, #12]
 8001d08:	f04f 30ff 	mov.w	r0, #4294967295
 8001d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d10:	4407      	add	r7, r0
 8001d12:	eba8 0800 	sub.w	r8, r8, r0
 8001d16:	e7e7      	b.n	8001ce8 <__sflush_r+0xd4>
 8001d18:	dfbffffe 	.word	0xdfbffffe

08001d1c <_fflush_r>:
 8001d1c:	b538      	push	{r3, r4, r5, lr}
 8001d1e:	690b      	ldr	r3, [r1, #16]
 8001d20:	4605      	mov	r5, r0
 8001d22:	460c      	mov	r4, r1
 8001d24:	b913      	cbnz	r3, 8001d2c <_fflush_r+0x10>
 8001d26:	2500      	movs	r5, #0
 8001d28:	4628      	mov	r0, r5
 8001d2a:	bd38      	pop	{r3, r4, r5, pc}
 8001d2c:	b118      	cbz	r0, 8001d36 <_fflush_r+0x1a>
 8001d2e:	6a03      	ldr	r3, [r0, #32]
 8001d30:	b90b      	cbnz	r3, 8001d36 <_fflush_r+0x1a>
 8001d32:	f7ff f9f9 	bl	8001128 <__sinit>
 8001d36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d0f3      	beq.n	8001d26 <_fflush_r+0xa>
 8001d3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001d40:	07d0      	lsls	r0, r2, #31
 8001d42:	d404      	bmi.n	8001d4e <_fflush_r+0x32>
 8001d44:	0599      	lsls	r1, r3, #22
 8001d46:	d402      	bmi.n	8001d4e <_fflush_r+0x32>
 8001d48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001d4a:	f7ff fb5c 	bl	8001406 <__retarget_lock_acquire_recursive>
 8001d4e:	4628      	mov	r0, r5
 8001d50:	4621      	mov	r1, r4
 8001d52:	f7ff ff5f 	bl	8001c14 <__sflush_r>
 8001d56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001d58:	07da      	lsls	r2, r3, #31
 8001d5a:	4605      	mov	r5, r0
 8001d5c:	d4e4      	bmi.n	8001d28 <_fflush_r+0xc>
 8001d5e:	89a3      	ldrh	r3, [r4, #12]
 8001d60:	059b      	lsls	r3, r3, #22
 8001d62:	d4e1      	bmi.n	8001d28 <_fflush_r+0xc>
 8001d64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001d66:	f7ff fb4f 	bl	8001408 <__retarget_lock_release_recursive>
 8001d6a:	e7dd      	b.n	8001d28 <_fflush_r+0xc>

08001d6c <fiprintf>:
 8001d6c:	b40e      	push	{r1, r2, r3}
 8001d6e:	b503      	push	{r0, r1, lr}
 8001d70:	4601      	mov	r1, r0
 8001d72:	ab03      	add	r3, sp, #12
 8001d74:	4805      	ldr	r0, [pc, #20]	@ (8001d8c <fiprintf+0x20>)
 8001d76:	f853 2b04 	ldr.w	r2, [r3], #4
 8001d7a:	6800      	ldr	r0, [r0, #0]
 8001d7c:	9301      	str	r3, [sp, #4]
 8001d7e:	f000 f89d 	bl	8001ebc <_vfiprintf_r>
 8001d82:	b002      	add	sp, #8
 8001d84:	f85d eb04 	ldr.w	lr, [sp], #4
 8001d88:	b003      	add	sp, #12
 8001d8a:	4770      	bx	lr
 8001d8c:	20000014 	.word	0x20000014

08001d90 <memmove>:
 8001d90:	4288      	cmp	r0, r1
 8001d92:	b510      	push	{r4, lr}
 8001d94:	eb01 0402 	add.w	r4, r1, r2
 8001d98:	d902      	bls.n	8001da0 <memmove+0x10>
 8001d9a:	4284      	cmp	r4, r0
 8001d9c:	4623      	mov	r3, r4
 8001d9e:	d807      	bhi.n	8001db0 <memmove+0x20>
 8001da0:	1e43      	subs	r3, r0, #1
 8001da2:	42a1      	cmp	r1, r4
 8001da4:	d008      	beq.n	8001db8 <memmove+0x28>
 8001da6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001daa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001dae:	e7f8      	b.n	8001da2 <memmove+0x12>
 8001db0:	4402      	add	r2, r0
 8001db2:	4601      	mov	r1, r0
 8001db4:	428a      	cmp	r2, r1
 8001db6:	d100      	bne.n	8001dba <memmove+0x2a>
 8001db8:	bd10      	pop	{r4, pc}
 8001dba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001dbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001dc2:	e7f7      	b.n	8001db4 <memmove+0x24>

08001dc4 <_sbrk_r>:
 8001dc4:	b538      	push	{r3, r4, r5, lr}
 8001dc6:	4d06      	ldr	r5, [pc, #24]	@ (8001de0 <_sbrk_r+0x1c>)
 8001dc8:	2300      	movs	r3, #0
 8001dca:	4604      	mov	r4, r0
 8001dcc:	4608      	mov	r0, r1
 8001dce:	602b      	str	r3, [r5, #0]
 8001dd0:	f7fe ffb6 	bl	8000d40 <_sbrk>
 8001dd4:	1c43      	adds	r3, r0, #1
 8001dd6:	d102      	bne.n	8001dde <_sbrk_r+0x1a>
 8001dd8:	682b      	ldr	r3, [r5, #0]
 8001dda:	b103      	cbz	r3, 8001dde <_sbrk_r+0x1a>
 8001ddc:	6023      	str	r3, [r4, #0]
 8001dde:	bd38      	pop	{r3, r4, r5, pc}
 8001de0:	200003d0 	.word	0x200003d0

08001de4 <memcpy>:
 8001de4:	440a      	add	r2, r1
 8001de6:	4291      	cmp	r1, r2
 8001de8:	f100 33ff 	add.w	r3, r0, #4294967295
 8001dec:	d100      	bne.n	8001df0 <memcpy+0xc>
 8001dee:	4770      	bx	lr
 8001df0:	b510      	push	{r4, lr}
 8001df2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001df6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001dfa:	4291      	cmp	r1, r2
 8001dfc:	d1f9      	bne.n	8001df2 <memcpy+0xe>
 8001dfe:	bd10      	pop	{r4, pc}

08001e00 <abort>:
 8001e00:	b508      	push	{r3, lr}
 8001e02:	2006      	movs	r0, #6
 8001e04:	f000 fa2e 	bl	8002264 <raise>
 8001e08:	2001      	movs	r0, #1
 8001e0a:	f7fe ff20 	bl	8000c4e <_exit>

08001e0e <_realloc_r>:
 8001e0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e12:	4680      	mov	r8, r0
 8001e14:	4615      	mov	r5, r2
 8001e16:	460c      	mov	r4, r1
 8001e18:	b921      	cbnz	r1, 8001e24 <_realloc_r+0x16>
 8001e1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001e1e:	4611      	mov	r1, r2
 8001e20:	f7ff bb86 	b.w	8001530 <_malloc_r>
 8001e24:	b92a      	cbnz	r2, 8001e32 <_realloc_r+0x24>
 8001e26:	f7ff fb0f 	bl	8001448 <_free_r>
 8001e2a:	2400      	movs	r4, #0
 8001e2c:	4620      	mov	r0, r4
 8001e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e32:	f000 fa33 	bl	800229c <_malloc_usable_size_r>
 8001e36:	4285      	cmp	r5, r0
 8001e38:	4606      	mov	r6, r0
 8001e3a:	d802      	bhi.n	8001e42 <_realloc_r+0x34>
 8001e3c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8001e40:	d8f4      	bhi.n	8001e2c <_realloc_r+0x1e>
 8001e42:	4629      	mov	r1, r5
 8001e44:	4640      	mov	r0, r8
 8001e46:	f7ff fb73 	bl	8001530 <_malloc_r>
 8001e4a:	4607      	mov	r7, r0
 8001e4c:	2800      	cmp	r0, #0
 8001e4e:	d0ec      	beq.n	8001e2a <_realloc_r+0x1c>
 8001e50:	42b5      	cmp	r5, r6
 8001e52:	462a      	mov	r2, r5
 8001e54:	4621      	mov	r1, r4
 8001e56:	bf28      	it	cs
 8001e58:	4632      	movcs	r2, r6
 8001e5a:	f7ff ffc3 	bl	8001de4 <memcpy>
 8001e5e:	4621      	mov	r1, r4
 8001e60:	4640      	mov	r0, r8
 8001e62:	f7ff faf1 	bl	8001448 <_free_r>
 8001e66:	463c      	mov	r4, r7
 8001e68:	e7e0      	b.n	8001e2c <_realloc_r+0x1e>

08001e6a <__sfputc_r>:
 8001e6a:	6893      	ldr	r3, [r2, #8]
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	b410      	push	{r4}
 8001e72:	6093      	str	r3, [r2, #8]
 8001e74:	da08      	bge.n	8001e88 <__sfputc_r+0x1e>
 8001e76:	6994      	ldr	r4, [r2, #24]
 8001e78:	42a3      	cmp	r3, r4
 8001e7a:	db01      	blt.n	8001e80 <__sfputc_r+0x16>
 8001e7c:	290a      	cmp	r1, #10
 8001e7e:	d103      	bne.n	8001e88 <__sfputc_r+0x1e>
 8001e80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e84:	f000 b932 	b.w	80020ec <__swbuf_r>
 8001e88:	6813      	ldr	r3, [r2, #0]
 8001e8a:	1c58      	adds	r0, r3, #1
 8001e8c:	6010      	str	r0, [r2, #0]
 8001e8e:	7019      	strb	r1, [r3, #0]
 8001e90:	4608      	mov	r0, r1
 8001e92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <__sfputs_r>:
 8001e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e9a:	4606      	mov	r6, r0
 8001e9c:	460f      	mov	r7, r1
 8001e9e:	4614      	mov	r4, r2
 8001ea0:	18d5      	adds	r5, r2, r3
 8001ea2:	42ac      	cmp	r4, r5
 8001ea4:	d101      	bne.n	8001eaa <__sfputs_r+0x12>
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	e007      	b.n	8001eba <__sfputs_r+0x22>
 8001eaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001eae:	463a      	mov	r2, r7
 8001eb0:	4630      	mov	r0, r6
 8001eb2:	f7ff ffda 	bl	8001e6a <__sfputc_r>
 8001eb6:	1c43      	adds	r3, r0, #1
 8001eb8:	d1f3      	bne.n	8001ea2 <__sfputs_r+0xa>
 8001eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001ebc <_vfiprintf_r>:
 8001ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ec0:	460d      	mov	r5, r1
 8001ec2:	b09d      	sub	sp, #116	@ 0x74
 8001ec4:	4614      	mov	r4, r2
 8001ec6:	4698      	mov	r8, r3
 8001ec8:	4606      	mov	r6, r0
 8001eca:	b118      	cbz	r0, 8001ed4 <_vfiprintf_r+0x18>
 8001ecc:	6a03      	ldr	r3, [r0, #32]
 8001ece:	b90b      	cbnz	r3, 8001ed4 <_vfiprintf_r+0x18>
 8001ed0:	f7ff f92a 	bl	8001128 <__sinit>
 8001ed4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001ed6:	07d9      	lsls	r1, r3, #31
 8001ed8:	d405      	bmi.n	8001ee6 <_vfiprintf_r+0x2a>
 8001eda:	89ab      	ldrh	r3, [r5, #12]
 8001edc:	059a      	lsls	r2, r3, #22
 8001ede:	d402      	bmi.n	8001ee6 <_vfiprintf_r+0x2a>
 8001ee0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001ee2:	f7ff fa90 	bl	8001406 <__retarget_lock_acquire_recursive>
 8001ee6:	89ab      	ldrh	r3, [r5, #12]
 8001ee8:	071b      	lsls	r3, r3, #28
 8001eea:	d501      	bpl.n	8001ef0 <_vfiprintf_r+0x34>
 8001eec:	692b      	ldr	r3, [r5, #16]
 8001eee:	b99b      	cbnz	r3, 8001f18 <_vfiprintf_r+0x5c>
 8001ef0:	4629      	mov	r1, r5
 8001ef2:	4630      	mov	r0, r6
 8001ef4:	f000 f938 	bl	8002168 <__swsetup_r>
 8001ef8:	b170      	cbz	r0, 8001f18 <_vfiprintf_r+0x5c>
 8001efa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001efc:	07dc      	lsls	r4, r3, #31
 8001efe:	d504      	bpl.n	8001f0a <_vfiprintf_r+0x4e>
 8001f00:	f04f 30ff 	mov.w	r0, #4294967295
 8001f04:	b01d      	add	sp, #116	@ 0x74
 8001f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f0a:	89ab      	ldrh	r3, [r5, #12]
 8001f0c:	0598      	lsls	r0, r3, #22
 8001f0e:	d4f7      	bmi.n	8001f00 <_vfiprintf_r+0x44>
 8001f10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001f12:	f7ff fa79 	bl	8001408 <__retarget_lock_release_recursive>
 8001f16:	e7f3      	b.n	8001f00 <_vfiprintf_r+0x44>
 8001f18:	2300      	movs	r3, #0
 8001f1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8001f1c:	2320      	movs	r3, #32
 8001f1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001f22:	f8cd 800c 	str.w	r8, [sp, #12]
 8001f26:	2330      	movs	r3, #48	@ 0x30
 8001f28:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80020d8 <_vfiprintf_r+0x21c>
 8001f2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001f30:	f04f 0901 	mov.w	r9, #1
 8001f34:	4623      	mov	r3, r4
 8001f36:	469a      	mov	sl, r3
 8001f38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001f3c:	b10a      	cbz	r2, 8001f42 <_vfiprintf_r+0x86>
 8001f3e:	2a25      	cmp	r2, #37	@ 0x25
 8001f40:	d1f9      	bne.n	8001f36 <_vfiprintf_r+0x7a>
 8001f42:	ebba 0b04 	subs.w	fp, sl, r4
 8001f46:	d00b      	beq.n	8001f60 <_vfiprintf_r+0xa4>
 8001f48:	465b      	mov	r3, fp
 8001f4a:	4622      	mov	r2, r4
 8001f4c:	4629      	mov	r1, r5
 8001f4e:	4630      	mov	r0, r6
 8001f50:	f7ff ffa2 	bl	8001e98 <__sfputs_r>
 8001f54:	3001      	adds	r0, #1
 8001f56:	f000 80a7 	beq.w	80020a8 <_vfiprintf_r+0x1ec>
 8001f5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001f5c:	445a      	add	r2, fp
 8001f5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8001f60:	f89a 3000 	ldrb.w	r3, [sl]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f000 809f 	beq.w	80020a8 <_vfiprintf_r+0x1ec>
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001f74:	f10a 0a01 	add.w	sl, sl, #1
 8001f78:	9304      	str	r3, [sp, #16]
 8001f7a:	9307      	str	r3, [sp, #28]
 8001f7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001f80:	931a      	str	r3, [sp, #104]	@ 0x68
 8001f82:	4654      	mov	r4, sl
 8001f84:	2205      	movs	r2, #5
 8001f86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f8a:	4853      	ldr	r0, [pc, #332]	@ (80020d8 <_vfiprintf_r+0x21c>)
 8001f8c:	f7fe f938 	bl	8000200 <memchr>
 8001f90:	9a04      	ldr	r2, [sp, #16]
 8001f92:	b9d8      	cbnz	r0, 8001fcc <_vfiprintf_r+0x110>
 8001f94:	06d1      	lsls	r1, r2, #27
 8001f96:	bf44      	itt	mi
 8001f98:	2320      	movmi	r3, #32
 8001f9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001f9e:	0713      	lsls	r3, r2, #28
 8001fa0:	bf44      	itt	mi
 8001fa2:	232b      	movmi	r3, #43	@ 0x2b
 8001fa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001fa8:	f89a 3000 	ldrb.w	r3, [sl]
 8001fac:	2b2a      	cmp	r3, #42	@ 0x2a
 8001fae:	d015      	beq.n	8001fdc <_vfiprintf_r+0x120>
 8001fb0:	9a07      	ldr	r2, [sp, #28]
 8001fb2:	4654      	mov	r4, sl
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	f04f 0c0a 	mov.w	ip, #10
 8001fba:	4621      	mov	r1, r4
 8001fbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001fc0:	3b30      	subs	r3, #48	@ 0x30
 8001fc2:	2b09      	cmp	r3, #9
 8001fc4:	d94b      	bls.n	800205e <_vfiprintf_r+0x1a2>
 8001fc6:	b1b0      	cbz	r0, 8001ff6 <_vfiprintf_r+0x13a>
 8001fc8:	9207      	str	r2, [sp, #28]
 8001fca:	e014      	b.n	8001ff6 <_vfiprintf_r+0x13a>
 8001fcc:	eba0 0308 	sub.w	r3, r0, r8
 8001fd0:	fa09 f303 	lsl.w	r3, r9, r3
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	9304      	str	r3, [sp, #16]
 8001fd8:	46a2      	mov	sl, r4
 8001fda:	e7d2      	b.n	8001f82 <_vfiprintf_r+0xc6>
 8001fdc:	9b03      	ldr	r3, [sp, #12]
 8001fde:	1d19      	adds	r1, r3, #4
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	9103      	str	r1, [sp, #12]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	bfbb      	ittet	lt
 8001fe8:	425b      	neglt	r3, r3
 8001fea:	f042 0202 	orrlt.w	r2, r2, #2
 8001fee:	9307      	strge	r3, [sp, #28]
 8001ff0:	9307      	strlt	r3, [sp, #28]
 8001ff2:	bfb8      	it	lt
 8001ff4:	9204      	strlt	r2, [sp, #16]
 8001ff6:	7823      	ldrb	r3, [r4, #0]
 8001ff8:	2b2e      	cmp	r3, #46	@ 0x2e
 8001ffa:	d10a      	bne.n	8002012 <_vfiprintf_r+0x156>
 8001ffc:	7863      	ldrb	r3, [r4, #1]
 8001ffe:	2b2a      	cmp	r3, #42	@ 0x2a
 8002000:	d132      	bne.n	8002068 <_vfiprintf_r+0x1ac>
 8002002:	9b03      	ldr	r3, [sp, #12]
 8002004:	1d1a      	adds	r2, r3, #4
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	9203      	str	r2, [sp, #12]
 800200a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800200e:	3402      	adds	r4, #2
 8002010:	9305      	str	r3, [sp, #20]
 8002012:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80020e8 <_vfiprintf_r+0x22c>
 8002016:	7821      	ldrb	r1, [r4, #0]
 8002018:	2203      	movs	r2, #3
 800201a:	4650      	mov	r0, sl
 800201c:	f7fe f8f0 	bl	8000200 <memchr>
 8002020:	b138      	cbz	r0, 8002032 <_vfiprintf_r+0x176>
 8002022:	9b04      	ldr	r3, [sp, #16]
 8002024:	eba0 000a 	sub.w	r0, r0, sl
 8002028:	2240      	movs	r2, #64	@ 0x40
 800202a:	4082      	lsls	r2, r0
 800202c:	4313      	orrs	r3, r2
 800202e:	3401      	adds	r4, #1
 8002030:	9304      	str	r3, [sp, #16]
 8002032:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002036:	4829      	ldr	r0, [pc, #164]	@ (80020dc <_vfiprintf_r+0x220>)
 8002038:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800203c:	2206      	movs	r2, #6
 800203e:	f7fe f8df 	bl	8000200 <memchr>
 8002042:	2800      	cmp	r0, #0
 8002044:	d03f      	beq.n	80020c6 <_vfiprintf_r+0x20a>
 8002046:	4b26      	ldr	r3, [pc, #152]	@ (80020e0 <_vfiprintf_r+0x224>)
 8002048:	bb1b      	cbnz	r3, 8002092 <_vfiprintf_r+0x1d6>
 800204a:	9b03      	ldr	r3, [sp, #12]
 800204c:	3307      	adds	r3, #7
 800204e:	f023 0307 	bic.w	r3, r3, #7
 8002052:	3308      	adds	r3, #8
 8002054:	9303      	str	r3, [sp, #12]
 8002056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002058:	443b      	add	r3, r7
 800205a:	9309      	str	r3, [sp, #36]	@ 0x24
 800205c:	e76a      	b.n	8001f34 <_vfiprintf_r+0x78>
 800205e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002062:	460c      	mov	r4, r1
 8002064:	2001      	movs	r0, #1
 8002066:	e7a8      	b.n	8001fba <_vfiprintf_r+0xfe>
 8002068:	2300      	movs	r3, #0
 800206a:	3401      	adds	r4, #1
 800206c:	9305      	str	r3, [sp, #20]
 800206e:	4619      	mov	r1, r3
 8002070:	f04f 0c0a 	mov.w	ip, #10
 8002074:	4620      	mov	r0, r4
 8002076:	f810 2b01 	ldrb.w	r2, [r0], #1
 800207a:	3a30      	subs	r2, #48	@ 0x30
 800207c:	2a09      	cmp	r2, #9
 800207e:	d903      	bls.n	8002088 <_vfiprintf_r+0x1cc>
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0c6      	beq.n	8002012 <_vfiprintf_r+0x156>
 8002084:	9105      	str	r1, [sp, #20]
 8002086:	e7c4      	b.n	8002012 <_vfiprintf_r+0x156>
 8002088:	fb0c 2101 	mla	r1, ip, r1, r2
 800208c:	4604      	mov	r4, r0
 800208e:	2301      	movs	r3, #1
 8002090:	e7f0      	b.n	8002074 <_vfiprintf_r+0x1b8>
 8002092:	ab03      	add	r3, sp, #12
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	462a      	mov	r2, r5
 8002098:	4b12      	ldr	r3, [pc, #72]	@ (80020e4 <_vfiprintf_r+0x228>)
 800209a:	a904      	add	r1, sp, #16
 800209c:	4630      	mov	r0, r6
 800209e:	f3af 8000 	nop.w
 80020a2:	4607      	mov	r7, r0
 80020a4:	1c78      	adds	r0, r7, #1
 80020a6:	d1d6      	bne.n	8002056 <_vfiprintf_r+0x19a>
 80020a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80020aa:	07d9      	lsls	r1, r3, #31
 80020ac:	d405      	bmi.n	80020ba <_vfiprintf_r+0x1fe>
 80020ae:	89ab      	ldrh	r3, [r5, #12]
 80020b0:	059a      	lsls	r2, r3, #22
 80020b2:	d402      	bmi.n	80020ba <_vfiprintf_r+0x1fe>
 80020b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80020b6:	f7ff f9a7 	bl	8001408 <__retarget_lock_release_recursive>
 80020ba:	89ab      	ldrh	r3, [r5, #12]
 80020bc:	065b      	lsls	r3, r3, #25
 80020be:	f53f af1f 	bmi.w	8001f00 <_vfiprintf_r+0x44>
 80020c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80020c4:	e71e      	b.n	8001f04 <_vfiprintf_r+0x48>
 80020c6:	ab03      	add	r3, sp, #12
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	462a      	mov	r2, r5
 80020cc:	4b05      	ldr	r3, [pc, #20]	@ (80020e4 <_vfiprintf_r+0x228>)
 80020ce:	a904      	add	r1, sp, #16
 80020d0:	4630      	mov	r0, r6
 80020d2:	f7ff fc7f 	bl	80019d4 <_printf_i>
 80020d6:	e7e4      	b.n	80020a2 <_vfiprintf_r+0x1e6>
 80020d8:	0800287b 	.word	0x0800287b
 80020dc:	08002885 	.word	0x08002885
 80020e0:	00000000 	.word	0x00000000
 80020e4:	08001e99 	.word	0x08001e99
 80020e8:	08002881 	.word	0x08002881

080020ec <__swbuf_r>:
 80020ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ee:	460e      	mov	r6, r1
 80020f0:	4614      	mov	r4, r2
 80020f2:	4605      	mov	r5, r0
 80020f4:	b118      	cbz	r0, 80020fe <__swbuf_r+0x12>
 80020f6:	6a03      	ldr	r3, [r0, #32]
 80020f8:	b90b      	cbnz	r3, 80020fe <__swbuf_r+0x12>
 80020fa:	f7ff f815 	bl	8001128 <__sinit>
 80020fe:	69a3      	ldr	r3, [r4, #24]
 8002100:	60a3      	str	r3, [r4, #8]
 8002102:	89a3      	ldrh	r3, [r4, #12]
 8002104:	071a      	lsls	r2, r3, #28
 8002106:	d501      	bpl.n	800210c <__swbuf_r+0x20>
 8002108:	6923      	ldr	r3, [r4, #16]
 800210a:	b943      	cbnz	r3, 800211e <__swbuf_r+0x32>
 800210c:	4621      	mov	r1, r4
 800210e:	4628      	mov	r0, r5
 8002110:	f000 f82a 	bl	8002168 <__swsetup_r>
 8002114:	b118      	cbz	r0, 800211e <__swbuf_r+0x32>
 8002116:	f04f 37ff 	mov.w	r7, #4294967295
 800211a:	4638      	mov	r0, r7
 800211c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800211e:	6823      	ldr	r3, [r4, #0]
 8002120:	6922      	ldr	r2, [r4, #16]
 8002122:	1a98      	subs	r0, r3, r2
 8002124:	6963      	ldr	r3, [r4, #20]
 8002126:	b2f6      	uxtb	r6, r6
 8002128:	4283      	cmp	r3, r0
 800212a:	4637      	mov	r7, r6
 800212c:	dc05      	bgt.n	800213a <__swbuf_r+0x4e>
 800212e:	4621      	mov	r1, r4
 8002130:	4628      	mov	r0, r5
 8002132:	f7ff fdf3 	bl	8001d1c <_fflush_r>
 8002136:	2800      	cmp	r0, #0
 8002138:	d1ed      	bne.n	8002116 <__swbuf_r+0x2a>
 800213a:	68a3      	ldr	r3, [r4, #8]
 800213c:	3b01      	subs	r3, #1
 800213e:	60a3      	str	r3, [r4, #8]
 8002140:	6823      	ldr	r3, [r4, #0]
 8002142:	1c5a      	adds	r2, r3, #1
 8002144:	6022      	str	r2, [r4, #0]
 8002146:	701e      	strb	r6, [r3, #0]
 8002148:	6962      	ldr	r2, [r4, #20]
 800214a:	1c43      	adds	r3, r0, #1
 800214c:	429a      	cmp	r2, r3
 800214e:	d004      	beq.n	800215a <__swbuf_r+0x6e>
 8002150:	89a3      	ldrh	r3, [r4, #12]
 8002152:	07db      	lsls	r3, r3, #31
 8002154:	d5e1      	bpl.n	800211a <__swbuf_r+0x2e>
 8002156:	2e0a      	cmp	r6, #10
 8002158:	d1df      	bne.n	800211a <__swbuf_r+0x2e>
 800215a:	4621      	mov	r1, r4
 800215c:	4628      	mov	r0, r5
 800215e:	f7ff fddd 	bl	8001d1c <_fflush_r>
 8002162:	2800      	cmp	r0, #0
 8002164:	d0d9      	beq.n	800211a <__swbuf_r+0x2e>
 8002166:	e7d6      	b.n	8002116 <__swbuf_r+0x2a>

08002168 <__swsetup_r>:
 8002168:	b538      	push	{r3, r4, r5, lr}
 800216a:	4b29      	ldr	r3, [pc, #164]	@ (8002210 <__swsetup_r+0xa8>)
 800216c:	4605      	mov	r5, r0
 800216e:	6818      	ldr	r0, [r3, #0]
 8002170:	460c      	mov	r4, r1
 8002172:	b118      	cbz	r0, 800217c <__swsetup_r+0x14>
 8002174:	6a03      	ldr	r3, [r0, #32]
 8002176:	b90b      	cbnz	r3, 800217c <__swsetup_r+0x14>
 8002178:	f7fe ffd6 	bl	8001128 <__sinit>
 800217c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002180:	0719      	lsls	r1, r3, #28
 8002182:	d422      	bmi.n	80021ca <__swsetup_r+0x62>
 8002184:	06da      	lsls	r2, r3, #27
 8002186:	d407      	bmi.n	8002198 <__swsetup_r+0x30>
 8002188:	2209      	movs	r2, #9
 800218a:	602a      	str	r2, [r5, #0]
 800218c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002190:	81a3      	strh	r3, [r4, #12]
 8002192:	f04f 30ff 	mov.w	r0, #4294967295
 8002196:	e033      	b.n	8002200 <__swsetup_r+0x98>
 8002198:	0758      	lsls	r0, r3, #29
 800219a:	d512      	bpl.n	80021c2 <__swsetup_r+0x5a>
 800219c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800219e:	b141      	cbz	r1, 80021b2 <__swsetup_r+0x4a>
 80021a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80021a4:	4299      	cmp	r1, r3
 80021a6:	d002      	beq.n	80021ae <__swsetup_r+0x46>
 80021a8:	4628      	mov	r0, r5
 80021aa:	f7ff f94d 	bl	8001448 <_free_r>
 80021ae:	2300      	movs	r3, #0
 80021b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80021b2:	89a3      	ldrh	r3, [r4, #12]
 80021b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80021b8:	81a3      	strh	r3, [r4, #12]
 80021ba:	2300      	movs	r3, #0
 80021bc:	6063      	str	r3, [r4, #4]
 80021be:	6923      	ldr	r3, [r4, #16]
 80021c0:	6023      	str	r3, [r4, #0]
 80021c2:	89a3      	ldrh	r3, [r4, #12]
 80021c4:	f043 0308 	orr.w	r3, r3, #8
 80021c8:	81a3      	strh	r3, [r4, #12]
 80021ca:	6923      	ldr	r3, [r4, #16]
 80021cc:	b94b      	cbnz	r3, 80021e2 <__swsetup_r+0x7a>
 80021ce:	89a3      	ldrh	r3, [r4, #12]
 80021d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80021d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021d8:	d003      	beq.n	80021e2 <__swsetup_r+0x7a>
 80021da:	4621      	mov	r1, r4
 80021dc:	4628      	mov	r0, r5
 80021de:	f000 f88b 	bl	80022f8 <__smakebuf_r>
 80021e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021e6:	f013 0201 	ands.w	r2, r3, #1
 80021ea:	d00a      	beq.n	8002202 <__swsetup_r+0x9a>
 80021ec:	2200      	movs	r2, #0
 80021ee:	60a2      	str	r2, [r4, #8]
 80021f0:	6962      	ldr	r2, [r4, #20]
 80021f2:	4252      	negs	r2, r2
 80021f4:	61a2      	str	r2, [r4, #24]
 80021f6:	6922      	ldr	r2, [r4, #16]
 80021f8:	b942      	cbnz	r2, 800220c <__swsetup_r+0xa4>
 80021fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80021fe:	d1c5      	bne.n	800218c <__swsetup_r+0x24>
 8002200:	bd38      	pop	{r3, r4, r5, pc}
 8002202:	0799      	lsls	r1, r3, #30
 8002204:	bf58      	it	pl
 8002206:	6962      	ldrpl	r2, [r4, #20]
 8002208:	60a2      	str	r2, [r4, #8]
 800220a:	e7f4      	b.n	80021f6 <__swsetup_r+0x8e>
 800220c:	2000      	movs	r0, #0
 800220e:	e7f7      	b.n	8002200 <__swsetup_r+0x98>
 8002210:	20000014 	.word	0x20000014

08002214 <_raise_r>:
 8002214:	291f      	cmp	r1, #31
 8002216:	b538      	push	{r3, r4, r5, lr}
 8002218:	4605      	mov	r5, r0
 800221a:	460c      	mov	r4, r1
 800221c:	d904      	bls.n	8002228 <_raise_r+0x14>
 800221e:	2316      	movs	r3, #22
 8002220:	6003      	str	r3, [r0, #0]
 8002222:	f04f 30ff 	mov.w	r0, #4294967295
 8002226:	bd38      	pop	{r3, r4, r5, pc}
 8002228:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800222a:	b112      	cbz	r2, 8002232 <_raise_r+0x1e>
 800222c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002230:	b94b      	cbnz	r3, 8002246 <_raise_r+0x32>
 8002232:	4628      	mov	r0, r5
 8002234:	f000 f830 	bl	8002298 <_getpid_r>
 8002238:	4622      	mov	r2, r4
 800223a:	4601      	mov	r1, r0
 800223c:	4628      	mov	r0, r5
 800223e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002242:	f000 b817 	b.w	8002274 <_kill_r>
 8002246:	2b01      	cmp	r3, #1
 8002248:	d00a      	beq.n	8002260 <_raise_r+0x4c>
 800224a:	1c59      	adds	r1, r3, #1
 800224c:	d103      	bne.n	8002256 <_raise_r+0x42>
 800224e:	2316      	movs	r3, #22
 8002250:	6003      	str	r3, [r0, #0]
 8002252:	2001      	movs	r0, #1
 8002254:	e7e7      	b.n	8002226 <_raise_r+0x12>
 8002256:	2100      	movs	r1, #0
 8002258:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800225c:	4620      	mov	r0, r4
 800225e:	4798      	blx	r3
 8002260:	2000      	movs	r0, #0
 8002262:	e7e0      	b.n	8002226 <_raise_r+0x12>

08002264 <raise>:
 8002264:	4b02      	ldr	r3, [pc, #8]	@ (8002270 <raise+0xc>)
 8002266:	4601      	mov	r1, r0
 8002268:	6818      	ldr	r0, [r3, #0]
 800226a:	f7ff bfd3 	b.w	8002214 <_raise_r>
 800226e:	bf00      	nop
 8002270:	20000014 	.word	0x20000014

08002274 <_kill_r>:
 8002274:	b538      	push	{r3, r4, r5, lr}
 8002276:	4d07      	ldr	r5, [pc, #28]	@ (8002294 <_kill_r+0x20>)
 8002278:	2300      	movs	r3, #0
 800227a:	4604      	mov	r4, r0
 800227c:	4608      	mov	r0, r1
 800227e:	4611      	mov	r1, r2
 8002280:	602b      	str	r3, [r5, #0]
 8002282:	f7fe fcd4 	bl	8000c2e <_kill>
 8002286:	1c43      	adds	r3, r0, #1
 8002288:	d102      	bne.n	8002290 <_kill_r+0x1c>
 800228a:	682b      	ldr	r3, [r5, #0]
 800228c:	b103      	cbz	r3, 8002290 <_kill_r+0x1c>
 800228e:	6023      	str	r3, [r4, #0]
 8002290:	bd38      	pop	{r3, r4, r5, pc}
 8002292:	bf00      	nop
 8002294:	200003d0 	.word	0x200003d0

08002298 <_getpid_r>:
 8002298:	f7fe bcc1 	b.w	8000c1e <_getpid>

0800229c <_malloc_usable_size_r>:
 800229c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80022a0:	1f18      	subs	r0, r3, #4
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	bfbc      	itt	lt
 80022a6:	580b      	ldrlt	r3, [r1, r0]
 80022a8:	18c0      	addlt	r0, r0, r3
 80022aa:	4770      	bx	lr

080022ac <__swhatbuf_r>:
 80022ac:	b570      	push	{r4, r5, r6, lr}
 80022ae:	460c      	mov	r4, r1
 80022b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022b4:	2900      	cmp	r1, #0
 80022b6:	b096      	sub	sp, #88	@ 0x58
 80022b8:	4615      	mov	r5, r2
 80022ba:	461e      	mov	r6, r3
 80022bc:	da0d      	bge.n	80022da <__swhatbuf_r+0x2e>
 80022be:	89a3      	ldrh	r3, [r4, #12]
 80022c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80022c4:	f04f 0100 	mov.w	r1, #0
 80022c8:	bf14      	ite	ne
 80022ca:	2340      	movne	r3, #64	@ 0x40
 80022cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80022d0:	2000      	movs	r0, #0
 80022d2:	6031      	str	r1, [r6, #0]
 80022d4:	602b      	str	r3, [r5, #0]
 80022d6:	b016      	add	sp, #88	@ 0x58
 80022d8:	bd70      	pop	{r4, r5, r6, pc}
 80022da:	466a      	mov	r2, sp
 80022dc:	f000 f848 	bl	8002370 <_fstat_r>
 80022e0:	2800      	cmp	r0, #0
 80022e2:	dbec      	blt.n	80022be <__swhatbuf_r+0x12>
 80022e4:	9901      	ldr	r1, [sp, #4]
 80022e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80022ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80022ee:	4259      	negs	r1, r3
 80022f0:	4159      	adcs	r1, r3
 80022f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022f6:	e7eb      	b.n	80022d0 <__swhatbuf_r+0x24>

080022f8 <__smakebuf_r>:
 80022f8:	898b      	ldrh	r3, [r1, #12]
 80022fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80022fc:	079d      	lsls	r5, r3, #30
 80022fe:	4606      	mov	r6, r0
 8002300:	460c      	mov	r4, r1
 8002302:	d507      	bpl.n	8002314 <__smakebuf_r+0x1c>
 8002304:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002308:	6023      	str	r3, [r4, #0]
 800230a:	6123      	str	r3, [r4, #16]
 800230c:	2301      	movs	r3, #1
 800230e:	6163      	str	r3, [r4, #20]
 8002310:	b003      	add	sp, #12
 8002312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002314:	ab01      	add	r3, sp, #4
 8002316:	466a      	mov	r2, sp
 8002318:	f7ff ffc8 	bl	80022ac <__swhatbuf_r>
 800231c:	9f00      	ldr	r7, [sp, #0]
 800231e:	4605      	mov	r5, r0
 8002320:	4639      	mov	r1, r7
 8002322:	4630      	mov	r0, r6
 8002324:	f7ff f904 	bl	8001530 <_malloc_r>
 8002328:	b948      	cbnz	r0, 800233e <__smakebuf_r+0x46>
 800232a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800232e:	059a      	lsls	r2, r3, #22
 8002330:	d4ee      	bmi.n	8002310 <__smakebuf_r+0x18>
 8002332:	f023 0303 	bic.w	r3, r3, #3
 8002336:	f043 0302 	orr.w	r3, r3, #2
 800233a:	81a3      	strh	r3, [r4, #12]
 800233c:	e7e2      	b.n	8002304 <__smakebuf_r+0xc>
 800233e:	89a3      	ldrh	r3, [r4, #12]
 8002340:	6020      	str	r0, [r4, #0]
 8002342:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002346:	81a3      	strh	r3, [r4, #12]
 8002348:	9b01      	ldr	r3, [sp, #4]
 800234a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800234e:	b15b      	cbz	r3, 8002368 <__smakebuf_r+0x70>
 8002350:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002354:	4630      	mov	r0, r6
 8002356:	f000 f81d 	bl	8002394 <_isatty_r>
 800235a:	b128      	cbz	r0, 8002368 <__smakebuf_r+0x70>
 800235c:	89a3      	ldrh	r3, [r4, #12]
 800235e:	f023 0303 	bic.w	r3, r3, #3
 8002362:	f043 0301 	orr.w	r3, r3, #1
 8002366:	81a3      	strh	r3, [r4, #12]
 8002368:	89a3      	ldrh	r3, [r4, #12]
 800236a:	431d      	orrs	r5, r3
 800236c:	81a5      	strh	r5, [r4, #12]
 800236e:	e7cf      	b.n	8002310 <__smakebuf_r+0x18>

08002370 <_fstat_r>:
 8002370:	b538      	push	{r3, r4, r5, lr}
 8002372:	4d07      	ldr	r5, [pc, #28]	@ (8002390 <_fstat_r+0x20>)
 8002374:	2300      	movs	r3, #0
 8002376:	4604      	mov	r4, r0
 8002378:	4608      	mov	r0, r1
 800237a:	4611      	mov	r1, r2
 800237c:	602b      	str	r3, [r5, #0]
 800237e:	f7fe fcb6 	bl	8000cee <_fstat>
 8002382:	1c43      	adds	r3, r0, #1
 8002384:	d102      	bne.n	800238c <_fstat_r+0x1c>
 8002386:	682b      	ldr	r3, [r5, #0]
 8002388:	b103      	cbz	r3, 800238c <_fstat_r+0x1c>
 800238a:	6023      	str	r3, [r4, #0]
 800238c:	bd38      	pop	{r3, r4, r5, pc}
 800238e:	bf00      	nop
 8002390:	200003d0 	.word	0x200003d0

08002394 <_isatty_r>:
 8002394:	b538      	push	{r3, r4, r5, lr}
 8002396:	4d06      	ldr	r5, [pc, #24]	@ (80023b0 <_isatty_r+0x1c>)
 8002398:	2300      	movs	r3, #0
 800239a:	4604      	mov	r4, r0
 800239c:	4608      	mov	r0, r1
 800239e:	602b      	str	r3, [r5, #0]
 80023a0:	f7fe fcb5 	bl	8000d0e <_isatty>
 80023a4:	1c43      	adds	r3, r0, #1
 80023a6:	d102      	bne.n	80023ae <_isatty_r+0x1a>
 80023a8:	682b      	ldr	r3, [r5, #0]
 80023aa:	b103      	cbz	r3, 80023ae <_isatty_r+0x1a>
 80023ac:	6023      	str	r3, [r4, #0]
 80023ae:	bd38      	pop	{r3, r4, r5, pc}
 80023b0:	200003d0 	.word	0x200003d0

080023b4 <_init>:
 80023b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023b6:	bf00      	nop
 80023b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ba:	bc08      	pop	{r3}
 80023bc:	469e      	mov	lr, r3
 80023be:	4770      	bx	lr

080023c0 <_fini>:
 80023c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023c2:	bf00      	nop
 80023c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023c6:	bc08      	pop	{r3}
 80023c8:	469e      	mov	lr, r3
 80023ca:	4770      	bx	lr
