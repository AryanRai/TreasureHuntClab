
MagnetometerLed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2b0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f8  0800a440  0800a440  0000b440  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a938  0800a938  0000c1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a938  0800a938  0000b938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a940  0800a940  0000c1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a940  0800a940  0000b940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a944  0800a944  0000b944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800a948  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1e8  2**0
                  CONTENTS
 10 .bss          000002ec  200001e8  200001e8  0000c1e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004d4  200004d4  0000c1e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010d8d  00000000  00000000  0000c218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002127  00000000  00000000  0001cfa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fc0  00000000  00000000  0001f0d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c6c  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f089  00000000  00000000  00020cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001468f  00000000  00000000  0003fd85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ba749  00000000  00000000  00054414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010eb5d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000058a8  00000000  00000000  0010eba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  00114448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a428 	.word	0x0800a428

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800a428 	.word	0x0800a428

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <QMC5883L_Init>:

/**
  * @brief Initialize QMC5883L magnetometer
  * @retval HAL status
  */
HAL_StatusTypeDef QMC5883L_Init(void) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af04      	add	r7, sp, #16
    uint8_t data;
    HAL_StatusTypeDef ret;

    // Reset the device
    data = 0x80; // Soft reset
 8000cfa:	2380      	movs	r3, #128	@ 0x80
 8000cfc:	71bb      	strb	r3, [r7, #6]
    ret = HAL_I2C_Mem_Write(&hi2c1, QMC5883L_ADDR, 0x0A, 1, &data, 1, HAL_MAX_DELAY);
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000d02:	9302      	str	r3, [sp, #8]
 8000d04:	2301      	movs	r3, #1
 8000d06:	9301      	str	r3, [sp, #4]
 8000d08:	1dbb      	adds	r3, r7, #6
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	220a      	movs	r2, #10
 8000d10:	211a      	movs	r1, #26
 8000d12:	4814      	ldr	r0, [pc, #80]	@ (8000d64 <QMC5883L_Init+0x70>)
 8000d14:	f001 f9be 	bl	8002094 <HAL_I2C_Mem_Write>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK) return ret;
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <QMC5883L_Init+0x32>
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	e019      	b.n	8000d5a <QMC5883L_Init+0x66>
    HAL_Delay(10);
 8000d26:	200a      	movs	r0, #10
 8000d28:	f000 fe94 	bl	8001a54 <HAL_Delay>

    // Configure: Continuous mode, 200 Hz, 8G range, 512 oversampling
    data = 0x1D; // 0b00011101: MODE=01 (continuous), ODR=11 (200 Hz), RNG=10 (8G), OSR=11 (512)
 8000d2c:	231d      	movs	r3, #29
 8000d2e:	71bb      	strb	r3, [r7, #6]
    ret = HAL_I2C_Mem_Write(&hi2c1, QMC5883L_ADDR, QMC5883L_REG_CTRL1, 1, &data, 1, HAL_MAX_DELAY);
 8000d30:	f04f 33ff 	mov.w	r3, #4294967295
 8000d34:	9302      	str	r3, [sp, #8]
 8000d36:	2301      	movs	r3, #1
 8000d38:	9301      	str	r3, [sp, #4]
 8000d3a:	1dbb      	adds	r3, r7, #6
 8000d3c:	9300      	str	r3, [sp, #0]
 8000d3e:	2301      	movs	r3, #1
 8000d40:	2209      	movs	r2, #9
 8000d42:	211a      	movs	r1, #26
 8000d44:	4807      	ldr	r0, [pc, #28]	@ (8000d64 <QMC5883L_Init+0x70>)
 8000d46:	f001 f9a5 	bl	8002094 <HAL_I2C_Mem_Write>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK) return ret;
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <QMC5883L_Init+0x64>
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	e000      	b.n	8000d5a <QMC5883L_Init+0x66>

    return HAL_OK;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000204 	.word	0x20000204

08000d68 <QMC5883L_ReadXYZ>:
/**
  * @brief Read X, Y, Z values from QMC5883L
  * @param x, y, z: Pointers to store magnetometer data
  * @retval HAL status
  */
HAL_StatusTypeDef QMC5883L_ReadXYZ(int16_t *x, int16_t *y, int16_t *z) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08c      	sub	sp, #48	@ 0x30
 8000d6c:	af04      	add	r7, sp, #16
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
    uint8_t status;
    HAL_StatusTypeDef ret;

    // Check if data is ready (DRDY bit)
    do {
        ret = HAL_I2C_Mem_Read(&hi2c1, QMC5883L_ADDR, QMC5883L_REG_STATUS, 1, &status, 1, HAL_MAX_DELAY);
 8000d74:	f04f 33ff 	mov.w	r3, #4294967295
 8000d78:	9302      	str	r3, [sp, #8]
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	9301      	str	r3, [sp, #4]
 8000d7e:	f107 0317 	add.w	r3, r7, #23
 8000d82:	9300      	str	r3, [sp, #0]
 8000d84:	2301      	movs	r3, #1
 8000d86:	2206      	movs	r2, #6
 8000d88:	211a      	movs	r1, #26
 8000d8a:	4822      	ldr	r0, [pc, #136]	@ (8000e14 <QMC5883L_ReadXYZ+0xac>)
 8000d8c:	f001 fa96 	bl	80022bc <HAL_I2C_Mem_Read>
 8000d90:	4603      	mov	r3, r0
 8000d92:	77fb      	strb	r3, [r7, #31]
        if (ret != HAL_OK) return ret;
 8000d94:	7ffb      	ldrb	r3, [r7, #31]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <QMC5883L_ReadXYZ+0x36>
 8000d9a:	7ffb      	ldrb	r3, [r7, #31]
 8000d9c:	e035      	b.n	8000e0a <QMC5883L_ReadXYZ+0xa2>
    } while (!(status & 0x01)); // Wait for DRDY = 1
 8000d9e:	7dfb      	ldrb	r3, [r7, #23]
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d0e5      	beq.n	8000d74 <QMC5883L_ReadXYZ+0xc>

    // Read 6 bytes (X_LSB, X_MSB, Y_LSB, Y_MSB, Z_LSB, Z_MSB)
    ret = HAL_I2C_Mem_Read(&hi2c1, QMC5883L_ADDR, QMC5883L_REG_X_LSB, 1, data, 6, HAL_MAX_DELAY);
 8000da8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dac:	9302      	str	r3, [sp, #8]
 8000dae:	2306      	movs	r3, #6
 8000db0:	9301      	str	r3, [sp, #4]
 8000db2:	f107 0318 	add.w	r3, r7, #24
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	2301      	movs	r3, #1
 8000dba:	2200      	movs	r2, #0
 8000dbc:	211a      	movs	r1, #26
 8000dbe:	4815      	ldr	r0, [pc, #84]	@ (8000e14 <QMC5883L_ReadXYZ+0xac>)
 8000dc0:	f001 fa7c 	bl	80022bc <HAL_I2C_Mem_Read>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	77fb      	strb	r3, [r7, #31]
    if (ret != HAL_OK) return ret;
 8000dc8:	7ffb      	ldrb	r3, [r7, #31]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <QMC5883L_ReadXYZ+0x6a>
 8000dce:	7ffb      	ldrb	r3, [r7, #31]
 8000dd0:	e01b      	b.n	8000e0a <QMC5883L_ReadXYZ+0xa2>

    // Combine bytes (2’s complement)
    *x = (int16_t)(data[1] << 8 | data[0]);
 8000dd2:	7e7b      	ldrb	r3, [r7, #25]
 8000dd4:	021b      	lsls	r3, r3, #8
 8000dd6:	b21a      	sxth	r2, r3
 8000dd8:	7e3b      	ldrb	r3, [r7, #24]
 8000dda:	b21b      	sxth	r3, r3
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	b21a      	sxth	r2, r3
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)(data[3] << 8 | data[2]);
 8000de4:	7efb      	ldrb	r3, [r7, #27]
 8000de6:	021b      	lsls	r3, r3, #8
 8000de8:	b21a      	sxth	r2, r3
 8000dea:	7ebb      	ldrb	r3, [r7, #26]
 8000dec:	b21b      	sxth	r3, r3
 8000dee:	4313      	orrs	r3, r2
 8000df0:	b21a      	sxth	r2, r3
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)(data[5] << 8 | data[4]);
 8000df6:	7f7b      	ldrb	r3, [r7, #29]
 8000df8:	021b      	lsls	r3, r3, #8
 8000dfa:	b21a      	sxth	r2, r3
 8000dfc:	7f3b      	ldrb	r3, [r7, #28]
 8000dfe:	b21b      	sxth	r3, r3
 8000e00:	4313      	orrs	r3, r2
 8000e02:	b21a      	sxth	r2, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	801a      	strh	r2, [r3, #0]

    return HAL_OK;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3720      	adds	r7, #32
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000204 	.word	0x20000204

08000e18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b0a0      	sub	sp, #128	@ 0x80
 8000e1c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  int16_t x, y, z;
  float magnitude;
  uint32_t dutyCycle = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	673b      	str	r3, [r7, #112]	@ 0x70
  const uint32_t maxDuty = 7999; // Matches TIM1 and TIM2 Period
 8000e22:	f641 733f 	movw	r3, #7999	@ 0x1f3f
 8000e26:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e28:	f000 fdae 	bl	8001988 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e2c:	f000 f918 	bl	8001060 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e30:	f000 fac6 	bl	80013c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e34:	f000 f96a 	bl	800110c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000e38:	f000 fa92 	bl	8001360 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000e3c:	f000 f9a6 	bl	800118c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000e40:	f000 fa34 	bl	80012ac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Initialize QMC5883L
  ret = QMC5883L_Init();
 8000e44:	f7ff ff56 	bl	8000cf4 <QMC5883L_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
  if (ret != HAL_OK) {
 8000e4e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d014      	beq.n	8000e80 <main+0x68>
      sprintf(buffer, "QMC5883L Init Failed: %d\r\n", ret);
 8000e56:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8000e5a:	463b      	mov	r3, r7
 8000e5c:	4974      	ldr	r1, [pc, #464]	@ (8001030 <main+0x218>)
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f005 fda4 	bl	80069ac <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000e64:	463b      	mov	r3, r7
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fa02 	bl	8000270 <strlen>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	b29a      	uxth	r2, r3
 8000e70:	4639      	mov	r1, r7
 8000e72:	f04f 33ff 	mov.w	r3, #4294967295
 8000e76:	486f      	ldr	r0, [pc, #444]	@ (8001034 <main+0x21c>)
 8000e78:	f004 f9f2 	bl	8005260 <HAL_UART_Transmit>
      while (1);
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <main+0x64>
  }

  // Start PWM on TIM1 Channel 3 (LED) and TIM2 Channel 3 (Buzzer)
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000e80:	2108      	movs	r1, #8
 8000e82:	486d      	ldr	r0, [pc, #436]	@ (8001038 <main+0x220>)
 8000e84:	f003 faf4 	bl	8004470 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000e88:	2108      	movs	r1, #8
 8000e8a:	486c      	ldr	r0, [pc, #432]	@ (800103c <main+0x224>)
 8000e8c:	f003 faf0 	bl	8004470 <HAL_TIM_PWM_Start>

  // Send startup message
  sprintf(buffer, "QMC5883L Initialized, LED and Buzzer PWM Started\r\n");
 8000e90:	463b      	mov	r3, r7
 8000e92:	496b      	ldr	r1, [pc, #428]	@ (8001040 <main+0x228>)
 8000e94:	4618      	mov	r0, r3
 8000e96:	f005 fd89 	bl	80069ac <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff f9e7 	bl	8000270 <strlen>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	4639      	mov	r1, r7
 8000ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8000eac:	4861      	ldr	r0, [pc, #388]	@ (8001034 <main+0x21c>)
 8000eae:	f004 f9d7 	bl	8005260 <HAL_UART_Transmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // Increment timers
    uartTimer += 10;
 8000eb2:	4b64      	ldr	r3, [pc, #400]	@ (8001044 <main+0x22c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	330a      	adds	r3, #10
 8000eb8:	4a62      	ldr	r2, [pc, #392]	@ (8001044 <main+0x22c>)
 8000eba:	6013      	str	r3, [r2, #0]
    magTimer += 10;
 8000ebc:	4b62      	ldr	r3, [pc, #392]	@ (8001048 <main+0x230>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	330a      	adds	r3, #10
 8000ec2:	4a61      	ldr	r2, [pc, #388]	@ (8001048 <main+0x230>)
 8000ec4:	6013      	str	r3, [r2, #0]

    // Read magnetometer every 200 ms
    if (magTimer >= 200) {
 8000ec6:	4b60      	ldr	r3, [pc, #384]	@ (8001048 <main+0x230>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2bc7      	cmp	r3, #199	@ 0xc7
 8000ecc:	f240 8087 	bls.w	8000fde <main+0x1c6>
        ret = QMC5883L_ReadXYZ(&x, &y, &z);
 8000ed0:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8000ed4:	f107 0166 	add.w	r1, r7, #102	@ 0x66
 8000ed8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ff43 	bl	8000d68 <QMC5883L_ReadXYZ>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
        if (ret == HAL_OK) {
 8000ee8:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d160      	bne.n	8000fb2 <main+0x19a>
            // Calculate magnetic field magnitude
            magnitude = sqrt((float)(x * x + y * y + z * z));
 8000ef0:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	@ 0x68
 8000ef4:	f9b7 2068 	ldrsh.w	r2, [r7, #104]	@ 0x68
 8000ef8:	fb03 f202 	mul.w	r2, r3, r2
 8000efc:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	@ 0x66
 8000f00:	f9b7 1066 	ldrsh.w	r1, [r7, #102]	@ 0x66
 8000f04:	fb01 f303 	mul.w	r3, r1, r3
 8000f08:	441a      	add	r2, r3
 8000f0a:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	@ 0x64
 8000f0e:	f9b7 1064 	ldrsh.w	r1, [r7, #100]	@ 0x64
 8000f12:	fb01 f303 	mul.w	r3, r1, r3
 8000f16:	4413      	add	r3, r2
 8000f18:	ee07 3a90 	vmov	s15, r3
 8000f1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f20:	ee17 0a90 	vmov	r0, s15
 8000f24:	f7ff fb10 	bl	8000548 <__aeabi_f2d>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	ec43 2b10 	vmov	d0, r2, r3
 8000f30:	f009 f974 	bl	800a21c <sqrt>
 8000f34:	ec53 2b10 	vmov	r2, r3, d0
 8000f38:	4610      	mov	r0, r2
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	f7ff fe54 	bl	8000be8 <__aeabi_d2f>
 8000f40:	4603      	mov	r3, r0
 8000f42:	677b      	str	r3, [r7, #116]	@ 0x74

            // Map magnitude to duty cycle (inverse relationship)
            if (magnitude <= MAG_MIN_THRESHOLD) {
 8000f44:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8000f48:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 800104c <main+0x234>
 8000f4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f54:	d802      	bhi.n	8000f5c <main+0x144>
                dutyCycle = maxDuty; // Max brightness/loudness
 8000f56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000f58:	673b      	str	r3, [r7, #112]	@ 0x70
 8000f5a:	e021      	b.n	8000fa0 <main+0x188>
            } else if (magnitude >= MAG_MAX_THRESHOLD) {
 8000f5c:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8000f60:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001050 <main+0x238>
 8000f64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f6c:	db02      	blt.n	8000f74 <main+0x15c>
                dutyCycle = 0; // Min brightness/loudness
 8000f6e:	2300      	movs	r3, #0
 8000f70:	673b      	str	r3, [r7, #112]	@ 0x70
 8000f72:	e015      	b.n	8000fa0 <main+0x188>
            } else {
                // Linear interpolation: dutyCycle = maxDuty * (10000 - mag) / (10000 - 3000)
                dutyCycle = maxDuty * (MAG_MAX_THRESHOLD - magnitude) / (MAG_MAX_THRESHOLD - MAG_MIN_THRESHOLD);
 8000f74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000f76:	ee07 3a90 	vmov	s15, r3
 8000f7a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f7e:	eddf 6a34 	vldr	s13, [pc, #208]	@ 8001050 <main+0x238>
 8000f82:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8000f86:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000f8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f8e:	eddf 6a31 	vldr	s13, [pc, #196]	@ 8001054 <main+0x23c>
 8000f92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f9a:	ee17 3a90 	vmov	r3, s15
 8000f9e:	673b      	str	r3, [r7, #112]	@ 0x70
            }

            // Set PWM duty cycle for both LED and buzzer
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, dutyCycle); // LED
 8000fa0:	4b25      	ldr	r3, [pc, #148]	@ (8001038 <main+0x220>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000fa6:	63da      	str	r2, [r3, #60]	@ 0x3c
            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, dutyCycle); // Buzzer
 8000fa8:	4b24      	ldr	r3, [pc, #144]	@ (800103c <main+0x224>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000fae:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000fb0:	e012      	b.n	8000fd8 <main+0x1c0>
        } else {
            // Report error but continue
            sprintf(buffer, "Magnetometer Read Error: %d\r\n", ret);
 8000fb2:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	4927      	ldr	r1, [pc, #156]	@ (8001058 <main+0x240>)
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f005 fcf6 	bl	80069ac <siprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000fc0:	463b      	mov	r3, r7
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff f954 	bl	8000270 <strlen>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	4639      	mov	r1, r7
 8000fce:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd2:	4818      	ldr	r0, [pc, #96]	@ (8001034 <main+0x21c>)
 8000fd4:	f004 f944 	bl	8005260 <HAL_UART_Transmit>
        }
        magTimer = 0; // Reset timer
 8000fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001048 <main+0x230>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
    }

    // Send UART message every 1 second
    if (uartTimer >= UART_TX_PERIOD_MS) {
 8000fde:	4b19      	ldr	r3, [pc, #100]	@ (8001044 <main+0x22c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000fe6:	d31f      	bcc.n	8001028 <main+0x210>
        sprintf(buffer, "DEBUG: Mag: %.2f, Duty: %lu%%\r\n", magnitude, (dutyCycle * 100) / maxDuty);
 8000fe8:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8000fea:	f7ff faad 	bl	8000548 <__aeabi_f2d>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8000ff4:	2064      	movs	r0, #100	@ 0x64
 8000ff6:	fb01 f000 	mul.w	r0, r1, r0
 8000ffa:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8000ffc:	fbb0 f1f1 	udiv	r1, r0, r1
 8001000:	4638      	mov	r0, r7
 8001002:	9100      	str	r1, [sp, #0]
 8001004:	4915      	ldr	r1, [pc, #84]	@ (800105c <main+0x244>)
 8001006:	f005 fcd1 	bl	80069ac <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800100a:	463b      	mov	r3, r7
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff f92f 	bl	8000270 <strlen>
 8001012:	4603      	mov	r3, r0
 8001014:	b29a      	uxth	r2, r3
 8001016:	4639      	mov	r1, r7
 8001018:	f04f 33ff 	mov.w	r3, #4294967295
 800101c:	4805      	ldr	r0, [pc, #20]	@ (8001034 <main+0x21c>)
 800101e:	f004 f91f 	bl	8005260 <HAL_UART_Transmit>
        uartTimer = 0; // Reset timer
 8001022:	4b08      	ldr	r3, [pc, #32]	@ (8001044 <main+0x22c>)
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
    }

    // Small delay for loop stability
    HAL_Delay(10);
 8001028:	200a      	movs	r0, #10
 800102a:	f000 fd13 	bl	8001a54 <HAL_Delay>
    uartTimer += 10;
 800102e:	e740      	b.n	8000eb2 <main+0x9a>
 8001030:	0800a440 	.word	0x0800a440
 8001034:	200002f0 	.word	0x200002f0
 8001038:	20000258 	.word	0x20000258
 800103c:	200002a4 	.word	0x200002a4
 8001040:	0800a45c 	.word	0x0800a45c
 8001044:	20000378 	.word	0x20000378
 8001048:	2000037c 	.word	0x2000037c
 800104c:	453b8000 	.word	0x453b8000
 8001050:	461c4000 	.word	0x461c4000
 8001054:	45dac000 	.word	0x45dac000
 8001058:	0800a490 	.word	0x0800a490
 800105c:	0800a4b0 	.word	0x0800a4b0

08001060 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b09e      	sub	sp, #120	@ 0x78
 8001064:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001066:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800106a:	2228      	movs	r2, #40	@ 0x28
 800106c:	2100      	movs	r1, #0
 800106e:	4618      	mov	r0, r3
 8001070:	f005 fcff 	bl	8006a72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001074:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001084:	463b      	mov	r3, r7
 8001086:	223c      	movs	r2, #60	@ 0x3c
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f005 fcf1 	bl	8006a72 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001090:	2302      	movs	r3, #2
 8001092:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001094:	2301      	movs	r3, #1
 8001096:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001098:	2310      	movs	r3, #16
 800109a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800109c:	2300      	movs	r3, #0
 800109e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80010a4:	4618      	mov	r0, r3
 80010a6:	f001 fd7d 	bl	8002ba4 <HAL_RCC_OscConfig>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80010b0:	f000 f9f8 	bl	80014a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b4:	230f      	movs	r3, #15
 80010b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010b8:	2300      	movs	r3, #0
 80010ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010bc:	2300      	movs	r3, #0
 80010be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010c0:	2300      	movs	r3, #0
 80010c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010c4:	2300      	movs	r3, #0
 80010c6:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010c8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80010cc:	2100      	movs	r1, #0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f002 fda6 	bl	8003c20 <HAL_RCC_ClockConfig>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80010da:	f000 f9e3 	bl	80014a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 80010de:	f241 0321 	movw	r3, #4129	@ 0x1021
 80010e2:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80010ec:	2300      	movs	r3, #0
 80010ee:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010f0:	463b      	mov	r3, r7
 80010f2:	4618      	mov	r0, r3
 80010f4:	f002 ffb4 	bl	8004060 <HAL_RCCEx_PeriphCLKConfig>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80010fe:	f000 f9d1 	bl	80014a4 <Error_Handler>
  }
}
 8001102:	bf00      	nop
 8001104:	3778      	adds	r7, #120	@ 0x78
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001110:	4b1b      	ldr	r3, [pc, #108]	@ (8001180 <MX_I2C1_Init+0x74>)
 8001112:	4a1c      	ldr	r2, [pc, #112]	@ (8001184 <MX_I2C1_Init+0x78>)
 8001114:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B; // 100 kHz for 8 MHz HSI
 8001116:	4b1a      	ldr	r3, [pc, #104]	@ (8001180 <MX_I2C1_Init+0x74>)
 8001118:	4a1b      	ldr	r2, [pc, #108]	@ (8001188 <MX_I2C1_Init+0x7c>)
 800111a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800111c:	4b18      	ldr	r3, [pc, #96]	@ (8001180 <MX_I2C1_Init+0x74>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001122:	4b17      	ldr	r3, [pc, #92]	@ (8001180 <MX_I2C1_Init+0x74>)
 8001124:	2201      	movs	r2, #1
 8001126:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001128:	4b15      	ldr	r3, [pc, #84]	@ (8001180 <MX_I2C1_Init+0x74>)
 800112a:	2200      	movs	r2, #0
 800112c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800112e:	4b14      	ldr	r3, [pc, #80]	@ (8001180 <MX_I2C1_Init+0x74>)
 8001130:	2200      	movs	r2, #0
 8001132:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001134:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <MX_I2C1_Init+0x74>)
 8001136:	2200      	movs	r2, #0
 8001138:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800113a:	4b11      	ldr	r3, [pc, #68]	@ (8001180 <MX_I2C1_Init+0x74>)
 800113c:	2200      	movs	r2, #0
 800113e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001140:	4b0f      	ldr	r3, [pc, #60]	@ (8001180 <MX_I2C1_Init+0x74>)
 8001142:	2200      	movs	r2, #0
 8001144:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001146:	480e      	ldr	r0, [pc, #56]	@ (8001180 <MX_I2C1_Init+0x74>)
 8001148:	f000 ff08 	bl	8001f5c <HAL_I2C_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001152:	f000 f9a7 	bl	80014a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001156:	2100      	movs	r1, #0
 8001158:	4809      	ldr	r0, [pc, #36]	@ (8001180 <MX_I2C1_Init+0x74>)
 800115a:	f001 fc8b 	bl	8002a74 <HAL_I2CEx_ConfigAnalogFilter>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001164:	f000 f99e 	bl	80014a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001168:	2100      	movs	r1, #0
 800116a:	4805      	ldr	r0, [pc, #20]	@ (8001180 <MX_I2C1_Init+0x74>)
 800116c:	f001 fccd 	bl	8002b0a <HAL_I2CEx_ConfigDigitalFilter>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001176:	f000 f995 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000204 	.word	0x20000204
 8001184:	40005400 	.word	0x40005400
 8001188:	00201d2b 	.word	0x00201d2b

0800118c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b096      	sub	sp, #88	@ 0x58
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_Init 0 */
  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001192:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800119e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
 80011ac:	611a      	str	r2, [r3, #16]
 80011ae:	615a      	str	r2, [r3, #20]
 80011b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	222c      	movs	r2, #44	@ 0x2c
 80011b6:	2100      	movs	r1, #0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f005 fc5a 	bl	8006a72 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011be:	4b39      	ldr	r3, [pc, #228]	@ (80012a4 <MX_TIM1_Init+0x118>)
 80011c0:	4a39      	ldr	r2, [pc, #228]	@ (80012a8 <MX_TIM1_Init+0x11c>)
 80011c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0; // 8 MHz timer clock
 80011c4:	4b37      	ldr	r3, [pc, #220]	@ (80012a4 <MX_TIM1_Init+0x118>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ca:	4b36      	ldr	r3, [pc, #216]	@ (80012a4 <MX_TIM1_Init+0x118>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7999; // PWM frequency = 8 MHz / (7999 + 1) = 1 kHz
 80011d0:	4b34      	ldr	r3, [pc, #208]	@ (80012a4 <MX_TIM1_Init+0x118>)
 80011d2:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80011d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d8:	4b32      	ldr	r3, [pc, #200]	@ (80012a4 <MX_TIM1_Init+0x118>)
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011de:	4b31      	ldr	r3, [pc, #196]	@ (80012a4 <MX_TIM1_Init+0x118>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE; // Enable preload
 80011e4:	4b2f      	ldr	r3, [pc, #188]	@ (80012a4 <MX_TIM1_Init+0x118>)
 80011e6:	2280      	movs	r2, #128	@ 0x80
 80011e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011ea:	482e      	ldr	r0, [pc, #184]	@ (80012a4 <MX_TIM1_Init+0x118>)
 80011ec:	f003 f8e8 	bl	80043c0 <HAL_TIM_PWM_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80011f6:	f000 f955 	bl	80014a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011fa:	2300      	movs	r3, #0
 80011fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011fe:	2300      	movs	r3, #0
 8001200:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001202:	2300      	movs	r3, #0
 8001204:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001206:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800120a:	4619      	mov	r1, r3
 800120c:	4825      	ldr	r0, [pc, #148]	@ (80012a4 <MX_TIM1_Init+0x118>)
 800120e:	f003 fedb 	bl	8004fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001218:	f000 f944 	bl	80014a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800121c:	2360      	movs	r3, #96	@ 0x60
 800121e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0; // Initial duty cycle (0%)
 8001220:	2300      	movs	r3, #0
 8001222:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001224:	2300      	movs	r3, #0
 8001226:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001228:	2300      	movs	r3, #0
 800122a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800122c:	2300      	movs	r3, #0
 800122e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001230:	2300      	movs	r3, #0
 8001232:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001234:	2300      	movs	r3, #0
 8001236:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001238:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800123c:	2208      	movs	r2, #8
 800123e:	4619      	mov	r1, r3
 8001240:	4818      	ldr	r0, [pc, #96]	@ (80012a4 <MX_TIM1_Init+0x118>)
 8001242:	f003 fa15 	bl	8004670 <HAL_TIM_PWM_ConfigChannel>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800124c:	f000 f92a 	bl	80014a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001250:	2300      	movs	r3, #0
 8001252:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001254:	2300      	movs	r3, #0
 8001256:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001264:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001268:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800126e:	2300      	movs	r3, #0
 8001270:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001272:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001276:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800127c:	2300      	movs	r3, #0
 800127e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	4619      	mov	r1, r3
 8001284:	4807      	ldr	r0, [pc, #28]	@ (80012a4 <MX_TIM1_Init+0x118>)
 8001286:	f003 ff1f 	bl	80050c8 <HAL_TIMEx_ConfigBreakDeadTime>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001290:	f000 f908 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001294:	4803      	ldr	r0, [pc, #12]	@ (80012a4 <MX_TIM1_Init+0x118>)
 8001296:	f000 f9a5 	bl	80015e4 <HAL_TIM_MspPostInit>
}
 800129a:	bf00      	nop
 800129c:	3758      	adds	r7, #88	@ 0x58
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000258 	.word	0x20000258
 80012a8:	40012c00 	.word	0x40012c00

080012ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	@ 0x28
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b2:	f107 031c 	add.w	r3, r7, #28
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012be:	463b      	mov	r3, r7
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
 80012cc:	615a      	str	r2, [r3, #20]
 80012ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012d0:	4b22      	ldr	r3, [pc, #136]	@ (800135c <MX_TIM2_Init+0xb0>)
 80012d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0; // 8 MHz timer clock
 80012d8:	4b20      	ldr	r3, [pc, #128]	@ (800135c <MX_TIM2_Init+0xb0>)
 80012da:	2200      	movs	r2, #0
 80012dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012de:	4b1f      	ldr	r3, [pc, #124]	@ (800135c <MX_TIM2_Init+0xb0>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7999; // PWM frequency = 8 MHz / (7999 + 1) = 1 kHz
 80012e4:	4b1d      	ldr	r3, [pc, #116]	@ (800135c <MX_TIM2_Init+0xb0>)
 80012e6:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80012ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ec:	4b1b      	ldr	r3, [pc, #108]	@ (800135c <MX_TIM2_Init+0xb0>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE; // Enable preload
 80012f2:	4b1a      	ldr	r3, [pc, #104]	@ (800135c <MX_TIM2_Init+0xb0>)
 80012f4:	2280      	movs	r2, #128	@ 0x80
 80012f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012f8:	4818      	ldr	r0, [pc, #96]	@ (800135c <MX_TIM2_Init+0xb0>)
 80012fa:	f003 f861 	bl	80043c0 <HAL_TIM_PWM_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001304:	f000 f8ce 	bl	80014a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800130c:	2300      	movs	r3, #0
 800130e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001310:	f107 031c 	add.w	r3, r7, #28
 8001314:	4619      	mov	r1, r3
 8001316:	4811      	ldr	r0, [pc, #68]	@ (800135c <MX_TIM2_Init+0xb0>)
 8001318:	f003 fe56 	bl	8004fc8 <HAL_TIMEx_MasterConfigSynchronization>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001322:	f000 f8bf 	bl	80014a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001326:	2360      	movs	r3, #96	@ 0x60
 8001328:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0; // Initial duty cycle (0%)
 800132a:	2300      	movs	r3, #0
 800132c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800132e:	2300      	movs	r3, #0
 8001330:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001336:	463b      	mov	r3, r7
 8001338:	2208      	movs	r2, #8
 800133a:	4619      	mov	r1, r3
 800133c:	4807      	ldr	r0, [pc, #28]	@ (800135c <MX_TIM2_Init+0xb0>)
 800133e:	f003 f997 	bl	8004670 <HAL_TIM_PWM_ConfigChannel>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001348:	f000 f8ac 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800134c:	4803      	ldr	r0, [pc, #12]	@ (800135c <MX_TIM2_Init+0xb0>)
 800134e:	f000 f949 	bl	80015e4 <HAL_TIM_MspPostInit>
}
 8001352:	bf00      	nop
 8001354:	3728      	adds	r7, #40	@ 0x28
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200002a4 	.word	0x200002a4

08001360 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 0 */
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001364:	4b14      	ldr	r3, [pc, #80]	@ (80013b8 <MX_USART1_UART_Init+0x58>)
 8001366:	4a15      	ldr	r2, [pc, #84]	@ (80013bc <MX_USART1_UART_Init+0x5c>)
 8001368:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800136a:	4b13      	ldr	r3, [pc, #76]	@ (80013b8 <MX_USART1_UART_Init+0x58>)
 800136c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001370:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001372:	4b11      	ldr	r3, [pc, #68]	@ (80013b8 <MX_USART1_UART_Init+0x58>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001378:	4b0f      	ldr	r3, [pc, #60]	@ (80013b8 <MX_USART1_UART_Init+0x58>)
 800137a:	2200      	movs	r2, #0
 800137c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800137e:	4b0e      	ldr	r3, [pc, #56]	@ (80013b8 <MX_USART1_UART_Init+0x58>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001384:	4b0c      	ldr	r3, [pc, #48]	@ (80013b8 <MX_USART1_UART_Init+0x58>)
 8001386:	220c      	movs	r2, #12
 8001388:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800138a:	4b0b      	ldr	r3, [pc, #44]	@ (80013b8 <MX_USART1_UART_Init+0x58>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001390:	4b09      	ldr	r3, [pc, #36]	@ (80013b8 <MX_USART1_UART_Init+0x58>)
 8001392:	2200      	movs	r2, #0
 8001394:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001396:	4b08      	ldr	r3, [pc, #32]	@ (80013b8 <MX_USART1_UART_Init+0x58>)
 8001398:	2200      	movs	r2, #0
 800139a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800139c:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <MX_USART1_UART_Init+0x58>)
 800139e:	2200      	movs	r2, #0
 80013a0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013a2:	4805      	ldr	r0, [pc, #20]	@ (80013b8 <MX_USART1_UART_Init+0x58>)
 80013a4:	f003 ff0e 	bl	80051c4 <HAL_UART_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80013ae:	f000 f879 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	200002f0 	.word	0x200002f0
 80013bc:	40013800 	.word	0x40013800

080013c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c6:	f107 030c 	add.w	r3, r7, #12
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
 80013d4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d6:	4b31      	ldr	r3, [pc, #196]	@ (800149c <MX_GPIO_Init+0xdc>)
 80013d8:	695b      	ldr	r3, [r3, #20]
 80013da:	4a30      	ldr	r2, [pc, #192]	@ (800149c <MX_GPIO_Init+0xdc>)
 80013dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80013e0:	6153      	str	r3, [r2, #20]
 80013e2:	4b2e      	ldr	r3, [pc, #184]	@ (800149c <MX_GPIO_Init+0xdc>)
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ee:	4b2b      	ldr	r3, [pc, #172]	@ (800149c <MX_GPIO_Init+0xdc>)
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	4a2a      	ldr	r2, [pc, #168]	@ (800149c <MX_GPIO_Init+0xdc>)
 80013f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013f8:	6153      	str	r3, [r2, #20]
 80013fa:	4b28      	ldr	r3, [pc, #160]	@ (800149c <MX_GPIO_Init+0xdc>)
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]

  /* Configure PA10 for TIM1_CH3 (LED) */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001406:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800140a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140c:	2302      	movs	r3, #2
 800140e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	2300      	movs	r3, #0
 8001416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF6_TIM1; // TIM1_CH3 for PA10
 8001418:	2306      	movs	r3, #6
 800141a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141c:	f107 030c 	add.w	r3, r7, #12
 8001420:	4619      	mov	r1, r3
 8001422:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001426:	f000 fc1f 	bl	8001c68 <HAL_GPIO_Init>

  /* Configure PA9 for TIM2_CH3 (Buzzer) */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800142a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800142e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001430:	2302      	movs	r3, #2
 8001432:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001438:	2300      	movs	r3, #0
 800143a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_TIM2; // TIM2_CH3 for PA9
 800143c:	230a      	movs	r3, #10
 800143e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001440:	f107 030c 	add.w	r3, r7, #12
 8001444:	4619      	mov	r1, r3
 8001446:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800144a:	f000 fc0d 	bl	8001c68 <HAL_GPIO_Init>

  /* Configure PA15 (SCL) and PA14 (SDA) for I2C1 */
  GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_15;
 800144e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001452:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD; // Open-drain for I2C
 8001454:	2312      	movs	r3, #18
 8001456:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;     // External pull-ups recommended
 8001458:	2301      	movs	r3, #1
 800145a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800145c:	2303      	movs	r3, #3
 800145e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1; // I2C1 SCL/SDA for PA15/PA14
 8001460:	2304      	movs	r3, #4
 8001462:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001464:	f107 030c 	add.w	r3, r7, #12
 8001468:	4619      	mov	r1, r3
 800146a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800146e:	f000 fbfb 	bl	8001c68 <HAL_GPIO_Init>

  /* Configure PC4 (TX) and PC5 (RX) for USART1 */
  GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 8001472:	2330      	movs	r3, #48	@ 0x30
 8001474:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001476:	2302      	movs	r3, #2
 8001478:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800147e:	2303      	movs	r3, #3
 8001480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1; // USART1 TX/RX for PC4/PC5
 8001482:	2307      	movs	r3, #7
 8001484:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001486:	f107 030c 	add.w	r3, r7, #12
 800148a:	4619      	mov	r1, r3
 800148c:	4804      	ldr	r0, [pc, #16]	@ (80014a0 <MX_GPIO_Init+0xe0>)
 800148e:	f000 fbeb 	bl	8001c68 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001492:	bf00      	nop
 8001494:	3720      	adds	r7, #32
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40021000 	.word	0x40021000
 80014a0:	48000800 	.word	0x48000800

080014a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014a8:	b672      	cpsid	i
}
 80014aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014ac:	bf00      	nop
 80014ae:	e7fd      	b.n	80014ac <Error_Handler+0x8>

080014b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b6:	4b0f      	ldr	r3, [pc, #60]	@ (80014f4 <HAL_MspInit+0x44>)
 80014b8:	699b      	ldr	r3, [r3, #24]
 80014ba:	4a0e      	ldr	r2, [pc, #56]	@ (80014f4 <HAL_MspInit+0x44>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6193      	str	r3, [r2, #24]
 80014c2:	4b0c      	ldr	r3, [pc, #48]	@ (80014f4 <HAL_MspInit+0x44>)
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ce:	4b09      	ldr	r3, [pc, #36]	@ (80014f4 <HAL_MspInit+0x44>)
 80014d0:	69db      	ldr	r3, [r3, #28]
 80014d2:	4a08      	ldr	r2, [pc, #32]	@ (80014f4 <HAL_MspInit+0x44>)
 80014d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014d8:	61d3      	str	r3, [r2, #28]
 80014da:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <HAL_MspInit+0x44>)
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	40021000 	.word	0x40021000

080014f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08a      	sub	sp, #40	@ 0x28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a18      	ldr	r2, [pc, #96]	@ (8001578 <HAL_I2C_MspInit+0x80>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d129      	bne.n	800156e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151a:	4b18      	ldr	r3, [pc, #96]	@ (800157c <HAL_I2C_MspInit+0x84>)
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	4a17      	ldr	r2, [pc, #92]	@ (800157c <HAL_I2C_MspInit+0x84>)
 8001520:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001524:	6153      	str	r3, [r2, #20]
 8001526:	4b15      	ldr	r3, [pc, #84]	@ (800157c <HAL_I2C_MspInit+0x84>)
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA14     ------> I2C1_SDA
    PA15     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001532:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001538:	2312      	movs	r3, #18
 800153a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001540:	2303      	movs	r3, #3
 8001542:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001544:	2304      	movs	r3, #4
 8001546:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	4619      	mov	r1, r3
 800154e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001552:	f000 fb89 	bl	8001c68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001556:	4b09      	ldr	r3, [pc, #36]	@ (800157c <HAL_I2C_MspInit+0x84>)
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	4a08      	ldr	r2, [pc, #32]	@ (800157c <HAL_I2C_MspInit+0x84>)
 800155c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001560:	61d3      	str	r3, [r2, #28]
 8001562:	4b06      	ldr	r3, [pc, #24]	@ (800157c <HAL_I2C_MspInit+0x84>)
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800156e:	bf00      	nop
 8001570:	3728      	adds	r7, #40	@ 0x28
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40005400 	.word	0x40005400
 800157c:	40021000 	.word	0x40021000

08001580 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a13      	ldr	r2, [pc, #76]	@ (80015dc <HAL_TIM_PWM_MspInit+0x5c>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d10c      	bne.n	80015ac <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001592:	4b13      	ldr	r3, [pc, #76]	@ (80015e0 <HAL_TIM_PWM_MspInit+0x60>)
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	4a12      	ldr	r2, [pc, #72]	@ (80015e0 <HAL_TIM_PWM_MspInit+0x60>)
 8001598:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800159c:	6193      	str	r3, [r2, #24]
 800159e:	4b10      	ldr	r3, [pc, #64]	@ (80015e0 <HAL_TIM_PWM_MspInit+0x60>)
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015aa:	e010      	b.n	80015ce <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM2)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015b4:	d10b      	bne.n	80015ce <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015b6:	4b0a      	ldr	r3, [pc, #40]	@ (80015e0 <HAL_TIM_PWM_MspInit+0x60>)
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	4a09      	ldr	r2, [pc, #36]	@ (80015e0 <HAL_TIM_PWM_MspInit+0x60>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	61d3      	str	r3, [r2, #28]
 80015c2:	4b07      	ldr	r3, [pc, #28]	@ (80015e0 <HAL_TIM_PWM_MspInit+0x60>)
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	68bb      	ldr	r3, [r7, #8]
}
 80015ce:	bf00      	nop
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	40012c00 	.word	0x40012c00
 80015e0:	40021000 	.word	0x40021000

080015e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	@ 0x28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a24      	ldr	r2, [pc, #144]	@ (8001694 <HAL_TIM_MspPostInit+0xb0>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d11e      	bne.n	8001644 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001606:	4b24      	ldr	r3, [pc, #144]	@ (8001698 <HAL_TIM_MspPostInit+0xb4>)
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	4a23      	ldr	r2, [pc, #140]	@ (8001698 <HAL_TIM_MspPostInit+0xb4>)
 800160c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001610:	6153      	str	r3, [r2, #20]
 8001612:	4b21      	ldr	r3, [pc, #132]	@ (8001698 <HAL_TIM_MspPostInit+0xb4>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800161e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001624:	2302      	movs	r3, #2
 8001626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162c:	2300      	movs	r3, #0
 800162e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001630:	2306      	movs	r3, #6
 8001632:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	4619      	mov	r1, r3
 800163a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800163e:	f000 fb13 	bl	8001c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001642:	e022      	b.n	800168a <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM2)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800164c:	d11d      	bne.n	800168a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800164e:	4b12      	ldr	r3, [pc, #72]	@ (8001698 <HAL_TIM_MspPostInit+0xb4>)
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	4a11      	ldr	r2, [pc, #68]	@ (8001698 <HAL_TIM_MspPostInit+0xb4>)
 8001654:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001658:	6153      	str	r3, [r2, #20]
 800165a:	4b0f      	ldr	r3, [pc, #60]	@ (8001698 <HAL_TIM_MspPostInit+0xb4>)
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001666:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800166a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166c:	2302      	movs	r3, #2
 800166e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	2300      	movs	r3, #0
 8001676:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 8001678:	230a      	movs	r3, #10
 800167a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	4619      	mov	r1, r3
 8001682:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001686:	f000 faef 	bl	8001c68 <HAL_GPIO_Init>
}
 800168a:	bf00      	nop
 800168c:	3728      	adds	r7, #40	@ 0x28
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40012c00 	.word	0x40012c00
 8001698:	40021000 	.word	0x40021000

0800169c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08a      	sub	sp, #40	@ 0x28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a17      	ldr	r2, [pc, #92]	@ (8001718 <HAL_UART_MspInit+0x7c>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d127      	bne.n	800170e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016be:	4b17      	ldr	r3, [pc, #92]	@ (800171c <HAL_UART_MspInit+0x80>)
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	4a16      	ldr	r2, [pc, #88]	@ (800171c <HAL_UART_MspInit+0x80>)
 80016c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016c8:	6193      	str	r3, [r2, #24]
 80016ca:	4b14      	ldr	r3, [pc, #80]	@ (800171c <HAL_UART_MspInit+0x80>)
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d6:	4b11      	ldr	r3, [pc, #68]	@ (800171c <HAL_UART_MspInit+0x80>)
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	4a10      	ldr	r2, [pc, #64]	@ (800171c <HAL_UART_MspInit+0x80>)
 80016dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80016e0:	6153      	str	r3, [r2, #20]
 80016e2:	4b0e      	ldr	r3, [pc, #56]	@ (800171c <HAL_UART_MspInit+0x80>)
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80016ee:	2330      	movs	r3, #48	@ 0x30
 80016f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016fa:	2303      	movs	r3, #3
 80016fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016fe:	2307      	movs	r3, #7
 8001700:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	4619      	mov	r1, r3
 8001708:	4805      	ldr	r0, [pc, #20]	@ (8001720 <HAL_UART_MspInit+0x84>)
 800170a:	f000 faad 	bl	8001c68 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800170e:	bf00      	nop
 8001710:	3728      	adds	r7, #40	@ 0x28
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40013800 	.word	0x40013800
 800171c:	40021000 	.word	0x40021000
 8001720:	48000800 	.word	0x48000800

08001724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <NMI_Handler+0x4>

0800172c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <HardFault_Handler+0x4>

08001734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <MemManage_Handler+0x4>

0800173c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <BusFault_Handler+0x4>

08001744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <UsageFault_Handler+0x4>

0800174c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800177a:	f000 f94b 	bl	8001a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}

08001782 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
  return 1;
 8001786:	2301      	movs	r3, #1
}
 8001788:	4618      	mov	r0, r3
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <_kill>:

int _kill(int pid, int sig)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800179c:	f005 f9bc 	bl	8006b18 <__errno>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2216      	movs	r2, #22
 80017a4:	601a      	str	r2, [r3, #0]
  return -1;
 80017a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <_exit>:

void _exit (int status)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017ba:	f04f 31ff 	mov.w	r1, #4294967295
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff ffe7 	bl	8001792 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017c4:	bf00      	nop
 80017c6:	e7fd      	b.n	80017c4 <_exit+0x12>

080017c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
 80017d8:	e00a      	b.n	80017f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017da:	f3af 8000 	nop.w
 80017de:	4601      	mov	r1, r0
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	1c5a      	adds	r2, r3, #1
 80017e4:	60ba      	str	r2, [r7, #8]
 80017e6:	b2ca      	uxtb	r2, r1
 80017e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	3301      	adds	r3, #1
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	dbf0      	blt.n	80017da <_read+0x12>
  }

  return len;
 80017f8:	687b      	ldr	r3, [r7, #4]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b086      	sub	sp, #24
 8001806:	af00      	add	r7, sp, #0
 8001808:	60f8      	str	r0, [r7, #12]
 800180a:	60b9      	str	r1, [r7, #8]
 800180c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]
 8001812:	e009      	b.n	8001828 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	1c5a      	adds	r2, r3, #1
 8001818:	60ba      	str	r2, [r7, #8]
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	3301      	adds	r3, #1
 8001826:	617b      	str	r3, [r7, #20]
 8001828:	697a      	ldr	r2, [r7, #20]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	429a      	cmp	r2, r3
 800182e:	dbf1      	blt.n	8001814 <_write+0x12>
  }
  return len;
 8001830:	687b      	ldr	r3, [r7, #4]
}
 8001832:	4618      	mov	r0, r3
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <_close>:

int _close(int file)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001842:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001846:	4618      	mov	r0, r3
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
 800185a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001862:	605a      	str	r2, [r3, #4]
  return 0;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <_isatty>:

int _isatty(int file)
{
 8001872:	b480      	push	{r7}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800187a:	2301      	movs	r3, #1
}
 800187c:	4618      	mov	r0, r3
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
	...

080018a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018ac:	4a14      	ldr	r2, [pc, #80]	@ (8001900 <_sbrk+0x5c>)
 80018ae:	4b15      	ldr	r3, [pc, #84]	@ (8001904 <_sbrk+0x60>)
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018b8:	4b13      	ldr	r3, [pc, #76]	@ (8001908 <_sbrk+0x64>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d102      	bne.n	80018c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018c0:	4b11      	ldr	r3, [pc, #68]	@ (8001908 <_sbrk+0x64>)
 80018c2:	4a12      	ldr	r2, [pc, #72]	@ (800190c <_sbrk+0x68>)
 80018c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018c6:	4b10      	ldr	r3, [pc, #64]	@ (8001908 <_sbrk+0x64>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4413      	add	r3, r2
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d207      	bcs.n	80018e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018d4:	f005 f920 	bl	8006b18 <__errno>
 80018d8:	4603      	mov	r3, r0
 80018da:	220c      	movs	r2, #12
 80018dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018de:	f04f 33ff 	mov.w	r3, #4294967295
 80018e2:	e009      	b.n	80018f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018e4:	4b08      	ldr	r3, [pc, #32]	@ (8001908 <_sbrk+0x64>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ea:	4b07      	ldr	r3, [pc, #28]	@ (8001908 <_sbrk+0x64>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4413      	add	r3, r2
 80018f2:	4a05      	ldr	r2, [pc, #20]	@ (8001908 <_sbrk+0x64>)
 80018f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018f6:	68fb      	ldr	r3, [r7, #12]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	2000a000 	.word	0x2000a000
 8001904:	00000400 	.word	0x00000400
 8001908:	20000380 	.word	0x20000380
 800190c:	200004d8 	.word	0x200004d8

08001910 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001914:	4b06      	ldr	r3, [pc, #24]	@ (8001930 <SystemInit+0x20>)
 8001916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800191a:	4a05      	ldr	r2, [pc, #20]	@ (8001930 <SystemInit+0x20>)
 800191c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001920:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001934:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800196c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001938:	f7ff ffea 	bl	8001910 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800193c:	480c      	ldr	r0, [pc, #48]	@ (8001970 <LoopForever+0x6>)
  ldr r1, =_edata
 800193e:	490d      	ldr	r1, [pc, #52]	@ (8001974 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001940:	4a0d      	ldr	r2, [pc, #52]	@ (8001978 <LoopForever+0xe>)
  movs r3, #0
 8001942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001944:	e002      	b.n	800194c <LoopCopyDataInit>

08001946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800194a:	3304      	adds	r3, #4

0800194c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800194c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800194e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001950:	d3f9      	bcc.n	8001946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001952:	4a0a      	ldr	r2, [pc, #40]	@ (800197c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001954:	4c0a      	ldr	r4, [pc, #40]	@ (8001980 <LoopForever+0x16>)
  movs r3, #0
 8001956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001958:	e001      	b.n	800195e <LoopFillZerobss>

0800195a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800195a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800195c:	3204      	adds	r2, #4

0800195e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800195e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001960:	d3fb      	bcc.n	800195a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001962:	f005 f8df 	bl	8006b24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001966:	f7ff fa57 	bl	8000e18 <main>

0800196a <LoopForever>:

LoopForever:
    b LoopForever
 800196a:	e7fe      	b.n	800196a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800196c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001974:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001978:	0800a948 	.word	0x0800a948
  ldr r2, =_sbss
 800197c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001980:	200004d4 	.word	0x200004d4

08001984 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001984:	e7fe      	b.n	8001984 <ADC1_2_IRQHandler>
	...

08001988 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800198c:	4b08      	ldr	r3, [pc, #32]	@ (80019b0 <HAL_Init+0x28>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a07      	ldr	r2, [pc, #28]	@ (80019b0 <HAL_Init+0x28>)
 8001992:	f043 0310 	orr.w	r3, r3, #16
 8001996:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001998:	2003      	movs	r0, #3
 800199a:	f000 f931 	bl	8001c00 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800199e:	200f      	movs	r0, #15
 80019a0:	f000 f808 	bl	80019b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019a4:	f7ff fd84 	bl	80014b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40022000 	.word	0x40022000

080019b4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019bc:	4b12      	ldr	r3, [pc, #72]	@ (8001a08 <HAL_InitTick+0x54>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	4b12      	ldr	r3, [pc, #72]	@ (8001a0c <HAL_InitTick+0x58>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	4619      	mov	r1, r3
 80019c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d2:	4618      	mov	r0, r3
 80019d4:	f000 f93b 	bl	8001c4e <HAL_SYSTICK_Config>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e00e      	b.n	8001a00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2b0f      	cmp	r3, #15
 80019e6:	d80a      	bhi.n	80019fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019e8:	2200      	movs	r2, #0
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	f04f 30ff 	mov.w	r0, #4294967295
 80019f0:	f000 f911 	bl	8001c16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019f4:	4a06      	ldr	r2, [pc, #24]	@ (8001a10 <HAL_InitTick+0x5c>)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
 80019fc:	e000      	b.n	8001a00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	20000008 	.word	0x20000008
 8001a10:	20000004 	.word	0x20000004

08001a14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a18:	4b06      	ldr	r3, [pc, #24]	@ (8001a34 <HAL_IncTick+0x20>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4b06      	ldr	r3, [pc, #24]	@ (8001a38 <HAL_IncTick+0x24>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4413      	add	r3, r2
 8001a24:	4a04      	ldr	r2, [pc, #16]	@ (8001a38 <HAL_IncTick+0x24>)
 8001a26:	6013      	str	r3, [r2, #0]
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	20000008 	.word	0x20000008
 8001a38:	20000384 	.word	0x20000384

08001a3c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001a40:	4b03      	ldr	r3, [pc, #12]	@ (8001a50 <HAL_GetTick+0x14>)
 8001a42:	681b      	ldr	r3, [r3, #0]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	20000384 	.word	0x20000384

08001a54 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a5c:	f7ff ffee 	bl	8001a3c <HAL_GetTick>
 8001a60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a6c:	d005      	beq.n	8001a7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a98 <HAL_Delay+0x44>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	461a      	mov	r2, r3
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	4413      	add	r3, r2
 8001a78:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001a7a:	bf00      	nop
 8001a7c:	f7ff ffde 	bl	8001a3c <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d8f7      	bhi.n	8001a7c <HAL_Delay+0x28>
  {
  }
}
 8001a8c:	bf00      	nop
 8001a8e:	bf00      	nop
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000008 	.word	0x20000008

08001a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ab2:	68ba      	ldr	r2, [r7, #8]
 8001ab4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ab8:	4013      	ands	r3, r2
 8001aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ac4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ac8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ace:	4a04      	ldr	r2, [pc, #16]	@ (8001ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	60d3      	str	r3, [r2, #12]
}
 8001ad4:	bf00      	nop
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae8:	4b04      	ldr	r3, [pc, #16]	@ (8001afc <__NVIC_GetPriorityGrouping+0x18>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	0a1b      	lsrs	r3, r3, #8
 8001aee:	f003 0307 	and.w	r3, r3, #7
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	6039      	str	r1, [r7, #0]
 8001b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	db0a      	blt.n	8001b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	490c      	ldr	r1, [pc, #48]	@ (8001b4c <__NVIC_SetPriority+0x4c>)
 8001b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1e:	0112      	lsls	r2, r2, #4
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	440b      	add	r3, r1
 8001b24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b28:	e00a      	b.n	8001b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	4908      	ldr	r1, [pc, #32]	@ (8001b50 <__NVIC_SetPriority+0x50>)
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	3b04      	subs	r3, #4
 8001b38:	0112      	lsls	r2, r2, #4
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	761a      	strb	r2, [r3, #24]
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	e000e100 	.word	0xe000e100
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b089      	sub	sp, #36	@ 0x24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f1c3 0307 	rsb	r3, r3, #7
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	bf28      	it	cs
 8001b72:	2304      	movcs	r3, #4
 8001b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	2b06      	cmp	r3, #6
 8001b7c:	d902      	bls.n	8001b84 <NVIC_EncodePriority+0x30>
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3b03      	subs	r3, #3
 8001b82:	e000      	b.n	8001b86 <NVIC_EncodePriority+0x32>
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b88:	f04f 32ff 	mov.w	r2, #4294967295
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43da      	mvns	r2, r3
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	401a      	ands	r2, r3
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba6:	43d9      	mvns	r1, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bac:	4313      	orrs	r3, r2
         );
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3724      	adds	r7, #36	@ 0x24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
	...

08001bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bcc:	d301      	bcc.n	8001bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e00f      	b.n	8001bf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bfc <SysTick_Config+0x40>)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bda:	210f      	movs	r1, #15
 8001bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001be0:	f7ff ff8e 	bl	8001b00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001be4:	4b05      	ldr	r3, [pc, #20]	@ (8001bfc <SysTick_Config+0x40>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bea:	4b04      	ldr	r3, [pc, #16]	@ (8001bfc <SysTick_Config+0x40>)
 8001bec:	2207      	movs	r2, #7
 8001bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	e000e010 	.word	0xe000e010

08001c00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff ff47 	bl	8001a9c <__NVIC_SetPriorityGrouping>
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b086      	sub	sp, #24
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
 8001c22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c28:	f7ff ff5c 	bl	8001ae4 <__NVIC_GetPriorityGrouping>
 8001c2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	68b9      	ldr	r1, [r7, #8]
 8001c32:	6978      	ldr	r0, [r7, #20]
 8001c34:	f7ff ff8e 	bl	8001b54 <NVIC_EncodePriority>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c3e:	4611      	mov	r1, r2
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff5d 	bl	8001b00 <__NVIC_SetPriority>
}
 8001c46:	bf00      	nop
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff ffb0 	bl	8001bbc <SysTick_Config>
 8001c5c:	4603      	mov	r3, r0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
	...

08001c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b087      	sub	sp, #28
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c76:	e154      	b.n	8001f22 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	fa01 f303 	lsl.w	r3, r1, r3
 8001c84:	4013      	ands	r3, r2
 8001c86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f000 8146 	beq.w	8001f1c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d005      	beq.n	8001ca8 <HAL_GPIO_Init+0x40>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 0303 	and.w	r3, r3, #3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d130      	bne.n	8001d0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	2203      	movs	r2, #3
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	68da      	ldr	r2, [r3, #12]
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cde:	2201      	movs	r2, #1
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	4013      	ands	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	091b      	lsrs	r3, r3, #4
 8001cf4:	f003 0201 	and.w	r2, r3, #1
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	2b03      	cmp	r3, #3
 8001d14:	d017      	beq.n	8001d46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	2203      	movs	r2, #3
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	43db      	mvns	r3, r3
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	689a      	ldr	r2, [r3, #8]
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d123      	bne.n	8001d9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	08da      	lsrs	r2, r3, #3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3208      	adds	r2, #8
 8001d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	220f      	movs	r2, #15
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	4013      	ands	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	691a      	ldr	r2, [r3, #16]
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	08da      	lsrs	r2, r3, #3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3208      	adds	r2, #8
 8001d94:	6939      	ldr	r1, [r7, #16]
 8001d96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	2203      	movs	r2, #3
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	4013      	ands	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f003 0203 	and.w	r2, r3, #3
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 80a0 	beq.w	8001f1c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ddc:	4b58      	ldr	r3, [pc, #352]	@ (8001f40 <HAL_GPIO_Init+0x2d8>)
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	4a57      	ldr	r2, [pc, #348]	@ (8001f40 <HAL_GPIO_Init+0x2d8>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	6193      	str	r3, [r2, #24]
 8001de8:	4b55      	ldr	r3, [pc, #340]	@ (8001f40 <HAL_GPIO_Init+0x2d8>)
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	60bb      	str	r3, [r7, #8]
 8001df2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001df4:	4a53      	ldr	r2, [pc, #332]	@ (8001f44 <HAL_GPIO_Init+0x2dc>)
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	089b      	lsrs	r3, r3, #2
 8001dfa:	3302      	adds	r3, #2
 8001dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	220f      	movs	r2, #15
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4013      	ands	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e1e:	d019      	beq.n	8001e54 <HAL_GPIO_Init+0x1ec>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a49      	ldr	r2, [pc, #292]	@ (8001f48 <HAL_GPIO_Init+0x2e0>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d013      	beq.n	8001e50 <HAL_GPIO_Init+0x1e8>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a48      	ldr	r2, [pc, #288]	@ (8001f4c <HAL_GPIO_Init+0x2e4>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d00d      	beq.n	8001e4c <HAL_GPIO_Init+0x1e4>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a47      	ldr	r2, [pc, #284]	@ (8001f50 <HAL_GPIO_Init+0x2e8>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d007      	beq.n	8001e48 <HAL_GPIO_Init+0x1e0>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a46      	ldr	r2, [pc, #280]	@ (8001f54 <HAL_GPIO_Init+0x2ec>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d101      	bne.n	8001e44 <HAL_GPIO_Init+0x1dc>
 8001e40:	2304      	movs	r3, #4
 8001e42:	e008      	b.n	8001e56 <HAL_GPIO_Init+0x1ee>
 8001e44:	2305      	movs	r3, #5
 8001e46:	e006      	b.n	8001e56 <HAL_GPIO_Init+0x1ee>
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e004      	b.n	8001e56 <HAL_GPIO_Init+0x1ee>
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	e002      	b.n	8001e56 <HAL_GPIO_Init+0x1ee>
 8001e50:	2301      	movs	r3, #1
 8001e52:	e000      	b.n	8001e56 <HAL_GPIO_Init+0x1ee>
 8001e54:	2300      	movs	r3, #0
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	f002 0203 	and.w	r2, r2, #3
 8001e5c:	0092      	lsls	r2, r2, #2
 8001e5e:	4093      	lsls	r3, r2
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e66:	4937      	ldr	r1, [pc, #220]	@ (8001f44 <HAL_GPIO_Init+0x2dc>)
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	089b      	lsrs	r3, r3, #2
 8001e6c:	3302      	adds	r3, #2
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e74:	4b38      	ldr	r3, [pc, #224]	@ (8001f58 <HAL_GPIO_Init+0x2f0>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	4013      	ands	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e98:	4a2f      	ldr	r2, [pc, #188]	@ (8001f58 <HAL_GPIO_Init+0x2f0>)
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e9e:	4b2e      	ldr	r3, [pc, #184]	@ (8001f58 <HAL_GPIO_Init+0x2f0>)
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ec2:	4a25      	ldr	r2, [pc, #148]	@ (8001f58 <HAL_GPIO_Init+0x2f0>)
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ec8:	4b23      	ldr	r3, [pc, #140]	@ (8001f58 <HAL_GPIO_Init+0x2f0>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001eec:	4a1a      	ldr	r2, [pc, #104]	@ (8001f58 <HAL_GPIO_Init+0x2f0>)
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ef2:	4b19      	ldr	r3, [pc, #100]	@ (8001f58 <HAL_GPIO_Init+0x2f0>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	43db      	mvns	r3, r3
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	4013      	ands	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f16:	4a10      	ldr	r2, [pc, #64]	@ (8001f58 <HAL_GPIO_Init+0x2f0>)
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	fa22 f303 	lsr.w	r3, r2, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f47f aea3 	bne.w	8001c78 <HAL_GPIO_Init+0x10>
  }
}
 8001f32:	bf00      	nop
 8001f34:	bf00      	nop
 8001f36:	371c      	adds	r7, #28
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	40021000 	.word	0x40021000
 8001f44:	40010000 	.word	0x40010000
 8001f48:	48000400 	.word	0x48000400
 8001f4c:	48000800 	.word	0x48000800
 8001f50:	48000c00 	.word	0x48000c00
 8001f54:	48001000 	.word	0x48001000
 8001f58:	40010400 	.word	0x40010400

08001f5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e08d      	b.n	800208a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d106      	bne.n	8001f88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7ff fab8 	bl	80014f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2224      	movs	r2, #36	@ 0x24
 8001f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 0201 	bic.w	r2, r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fbc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d107      	bne.n	8001fd6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	e006      	b.n	8001fe4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001fe2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d108      	bne.n	8001ffe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ffa:	605a      	str	r2, [r3, #4]
 8001ffc:	e007      	b.n	800200e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800200c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	6812      	ldr	r2, [r2, #0]
 8002018:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800201c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002020:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68da      	ldr	r2, [r3, #12]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002030:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691a      	ldr	r2, [r3, #16]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	430a      	orrs	r2, r1
 800204a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	69d9      	ldr	r1, [r3, #28]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a1a      	ldr	r2, [r3, #32]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	430a      	orrs	r2, r1
 800205a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f042 0201 	orr.w	r2, r2, #1
 800206a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2220      	movs	r2, #32
 8002076:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
	...

08002094 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b088      	sub	sp, #32
 8002098:	af02      	add	r7, sp, #8
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	4608      	mov	r0, r1
 800209e:	4611      	mov	r1, r2
 80020a0:	461a      	mov	r2, r3
 80020a2:	4603      	mov	r3, r0
 80020a4:	817b      	strh	r3, [r7, #10]
 80020a6:	460b      	mov	r3, r1
 80020a8:	813b      	strh	r3, [r7, #8]
 80020aa:	4613      	mov	r3, r2
 80020ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b20      	cmp	r3, #32
 80020b8:	f040 80f9 	bne.w	80022ae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80020bc:	6a3b      	ldr	r3, [r7, #32]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d002      	beq.n	80020c8 <HAL_I2C_Mem_Write+0x34>
 80020c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d105      	bne.n	80020d4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020ce:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e0ed      	b.n	80022b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d101      	bne.n	80020e2 <HAL_I2C_Mem_Write+0x4e>
 80020de:	2302      	movs	r3, #2
 80020e0:	e0e6      	b.n	80022b0 <HAL_I2C_Mem_Write+0x21c>
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80020ea:	f7ff fca7 	bl	8001a3c <HAL_GetTick>
 80020ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	2319      	movs	r3, #25
 80020f6:	2201      	movs	r2, #1
 80020f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	f000 fac3 	bl	8002688 <I2C_WaitOnFlagUntilTimeout>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e0d1      	b.n	80022b0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2221      	movs	r2, #33	@ 0x21
 8002110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2240      	movs	r2, #64	@ 0x40
 8002118:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2200      	movs	r2, #0
 8002120:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6a3a      	ldr	r2, [r7, #32]
 8002126:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800212c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002134:	88f8      	ldrh	r0, [r7, #6]
 8002136:	893a      	ldrh	r2, [r7, #8]
 8002138:	8979      	ldrh	r1, [r7, #10]
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	9301      	str	r3, [sp, #4]
 800213e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	4603      	mov	r3, r0
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f000 f9d3 	bl	80024f0 <I2C_RequestMemoryWrite>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d005      	beq.n	800215c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e0a9      	b.n	80022b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002160:	b29b      	uxth	r3, r3
 8002162:	2bff      	cmp	r3, #255	@ 0xff
 8002164:	d90e      	bls.n	8002184 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	22ff      	movs	r2, #255	@ 0xff
 800216a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002170:	b2da      	uxtb	r2, r3
 8002172:	8979      	ldrh	r1, [r7, #10]
 8002174:	2300      	movs	r3, #0
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f000 fc47 	bl	8002a10 <I2C_TransferConfig>
 8002182:	e00f      	b.n	80021a4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002188:	b29a      	uxth	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002192:	b2da      	uxtb	r2, r3
 8002194:	8979      	ldrh	r1, [r7, #10]
 8002196:	2300      	movs	r3, #0
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f000 fc36 	bl	8002a10 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f000 fac6 	bl	800273a <I2C_WaitOnTXISFlagUntilTimeout>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e07b      	b.n	80022b0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021bc:	781a      	ldrb	r2, [r3, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c8:	1c5a      	adds	r2, r3, #1
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	3b01      	subs	r3, #1
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021e0:	3b01      	subs	r3, #1
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d034      	beq.n	800225c <HAL_I2C_Mem_Write+0x1c8>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d130      	bne.n	800225c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002200:	2200      	movs	r2, #0
 8002202:	2180      	movs	r1, #128	@ 0x80
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f000 fa3f 	bl	8002688 <I2C_WaitOnFlagUntilTimeout>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e04d      	b.n	80022b0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002218:	b29b      	uxth	r3, r3
 800221a:	2bff      	cmp	r3, #255	@ 0xff
 800221c:	d90e      	bls.n	800223c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	22ff      	movs	r2, #255	@ 0xff
 8002222:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002228:	b2da      	uxtb	r2, r3
 800222a:	8979      	ldrh	r1, [r7, #10]
 800222c:	2300      	movs	r3, #0
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f000 fbeb 	bl	8002a10 <I2C_TransferConfig>
 800223a:	e00f      	b.n	800225c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002240:	b29a      	uxth	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800224a:	b2da      	uxtb	r2, r3
 800224c:	8979      	ldrh	r1, [r7, #10]
 800224e:	2300      	movs	r3, #0
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f000 fbda 	bl	8002a10 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002260:	b29b      	uxth	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d19e      	bne.n	80021a4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002266:	697a      	ldr	r2, [r7, #20]
 8002268:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f000 faac 	bl	80027c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e01a      	b.n	80022b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2220      	movs	r2, #32
 8002280:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6859      	ldr	r1, [r3, #4]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	4b0a      	ldr	r3, [pc, #40]	@ (80022b8 <HAL_I2C_Mem_Write+0x224>)
 800228e:	400b      	ands	r3, r1
 8002290:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2220      	movs	r2, #32
 8002296:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80022aa:	2300      	movs	r3, #0
 80022ac:	e000      	b.n	80022b0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80022ae:	2302      	movs	r3, #2
  }
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	fe00e800 	.word	0xfe00e800

080022bc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b088      	sub	sp, #32
 80022c0:	af02      	add	r7, sp, #8
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	4608      	mov	r0, r1
 80022c6:	4611      	mov	r1, r2
 80022c8:	461a      	mov	r2, r3
 80022ca:	4603      	mov	r3, r0
 80022cc:	817b      	strh	r3, [r7, #10]
 80022ce:	460b      	mov	r3, r1
 80022d0:	813b      	strh	r3, [r7, #8]
 80022d2:	4613      	mov	r3, r2
 80022d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b20      	cmp	r3, #32
 80022e0:	f040 80fd 	bne.w	80024de <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80022e4:	6a3b      	ldr	r3, [r7, #32]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d002      	beq.n	80022f0 <HAL_I2C_Mem_Read+0x34>
 80022ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d105      	bne.n	80022fc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022f6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e0f1      	b.n	80024e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002302:	2b01      	cmp	r3, #1
 8002304:	d101      	bne.n	800230a <HAL_I2C_Mem_Read+0x4e>
 8002306:	2302      	movs	r3, #2
 8002308:	e0ea      	b.n	80024e0 <HAL_I2C_Mem_Read+0x224>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002312:	f7ff fb93 	bl	8001a3c <HAL_GetTick>
 8002316:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	2319      	movs	r3, #25
 800231e:	2201      	movs	r2, #1
 8002320:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f000 f9af 	bl	8002688 <I2C_WaitOnFlagUntilTimeout>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e0d5      	b.n	80024e0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2222      	movs	r2, #34	@ 0x22
 8002338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2240      	movs	r2, #64	@ 0x40
 8002340:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6a3a      	ldr	r2, [r7, #32]
 800234e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002354:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800235c:	88f8      	ldrh	r0, [r7, #6]
 800235e:	893a      	ldrh	r2, [r7, #8]
 8002360:	8979      	ldrh	r1, [r7, #10]
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	9301      	str	r3, [sp, #4]
 8002366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	4603      	mov	r3, r0
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f000 f913 	bl	8002598 <I2C_RequestMemoryRead>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d005      	beq.n	8002384 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e0ad      	b.n	80024e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002388:	b29b      	uxth	r3, r3
 800238a:	2bff      	cmp	r3, #255	@ 0xff
 800238c:	d90e      	bls.n	80023ac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2201      	movs	r2, #1
 8002392:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002398:	b2da      	uxtb	r2, r3
 800239a:	8979      	ldrh	r1, [r7, #10]
 800239c:	4b52      	ldr	r3, [pc, #328]	@ (80024e8 <HAL_I2C_Mem_Read+0x22c>)
 800239e:	9300      	str	r3, [sp, #0]
 80023a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f000 fb33 	bl	8002a10 <I2C_TransferConfig>
 80023aa:	e00f      	b.n	80023cc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	8979      	ldrh	r1, [r7, #10]
 80023be:	4b4a      	ldr	r3, [pc, #296]	@ (80024e8 <HAL_I2C_Mem_Read+0x22c>)
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f000 fb22 	bl	8002a10 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023d2:	2200      	movs	r2, #0
 80023d4:	2104      	movs	r1, #4
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f000 f956 	bl	8002688 <I2C_WaitOnFlagUntilTimeout>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e07c      	b.n	80024e0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f8:	1c5a      	adds	r2, r3, #1
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002402:	3b01      	subs	r3, #1
 8002404:	b29a      	uxth	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800240e:	b29b      	uxth	r3, r3
 8002410:	3b01      	subs	r3, #1
 8002412:	b29a      	uxth	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800241c:	b29b      	uxth	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d034      	beq.n	800248c <HAL_I2C_Mem_Read+0x1d0>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002426:	2b00      	cmp	r3, #0
 8002428:	d130      	bne.n	800248c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002430:	2200      	movs	r2, #0
 8002432:	2180      	movs	r1, #128	@ 0x80
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f000 f927 	bl	8002688 <I2C_WaitOnFlagUntilTimeout>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e04d      	b.n	80024e0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002448:	b29b      	uxth	r3, r3
 800244a:	2bff      	cmp	r3, #255	@ 0xff
 800244c:	d90e      	bls.n	800246c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2201      	movs	r2, #1
 8002452:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002458:	b2da      	uxtb	r2, r3
 800245a:	8979      	ldrh	r1, [r7, #10]
 800245c:	2300      	movs	r3, #0
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f000 fad3 	bl	8002a10 <I2C_TransferConfig>
 800246a:	e00f      	b.n	800248c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002470:	b29a      	uxth	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800247a:	b2da      	uxtb	r2, r3
 800247c:	8979      	ldrh	r1, [r7, #10]
 800247e:	2300      	movs	r3, #0
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f000 fac2 	bl	8002a10 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002490:	b29b      	uxth	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d19a      	bne.n	80023cc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f000 f994 	bl	80027c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e01a      	b.n	80024e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2220      	movs	r2, #32
 80024b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6859      	ldr	r1, [r3, #4]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	4b0b      	ldr	r3, [pc, #44]	@ (80024ec <HAL_I2C_Mem_Read+0x230>)
 80024be:	400b      	ands	r3, r1
 80024c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2220      	movs	r2, #32
 80024c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	e000      	b.n	80024e0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80024de:	2302      	movs	r3, #2
  }
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	80002400 	.word	0x80002400
 80024ec:	fe00e800 	.word	0xfe00e800

080024f0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af02      	add	r7, sp, #8
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	4608      	mov	r0, r1
 80024fa:	4611      	mov	r1, r2
 80024fc:	461a      	mov	r2, r3
 80024fe:	4603      	mov	r3, r0
 8002500:	817b      	strh	r3, [r7, #10]
 8002502:	460b      	mov	r3, r1
 8002504:	813b      	strh	r3, [r7, #8]
 8002506:	4613      	mov	r3, r2
 8002508:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800250a:	88fb      	ldrh	r3, [r7, #6]
 800250c:	b2da      	uxtb	r2, r3
 800250e:	8979      	ldrh	r1, [r7, #10]
 8002510:	4b20      	ldr	r3, [pc, #128]	@ (8002594 <I2C_RequestMemoryWrite+0xa4>)
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f000 fa79 	bl	8002a10 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800251e:	69fa      	ldr	r2, [r7, #28]
 8002520:	69b9      	ldr	r1, [r7, #24]
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f000 f909 	bl	800273a <I2C_WaitOnTXISFlagUntilTimeout>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e02c      	b.n	800258c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002532:	88fb      	ldrh	r3, [r7, #6]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d105      	bne.n	8002544 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002538:	893b      	ldrh	r3, [r7, #8]
 800253a:	b2da      	uxtb	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	629a      	str	r2, [r3, #40]	@ 0x28
 8002542:	e015      	b.n	8002570 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002544:	893b      	ldrh	r3, [r7, #8]
 8002546:	0a1b      	lsrs	r3, r3, #8
 8002548:	b29b      	uxth	r3, r3
 800254a:	b2da      	uxtb	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002552:	69fa      	ldr	r2, [r7, #28]
 8002554:	69b9      	ldr	r1, [r7, #24]
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f000 f8ef 	bl	800273a <I2C_WaitOnTXISFlagUntilTimeout>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e012      	b.n	800258c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002566:	893b      	ldrh	r3, [r7, #8]
 8002568:	b2da      	uxtb	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	2200      	movs	r2, #0
 8002578:	2180      	movs	r1, #128	@ 0x80
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 f884 	bl	8002688 <I2C_WaitOnFlagUntilTimeout>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e000      	b.n	800258c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	80002000 	.word	0x80002000

08002598 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af02      	add	r7, sp, #8
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	4608      	mov	r0, r1
 80025a2:	4611      	mov	r1, r2
 80025a4:	461a      	mov	r2, r3
 80025a6:	4603      	mov	r3, r0
 80025a8:	817b      	strh	r3, [r7, #10]
 80025aa:	460b      	mov	r3, r1
 80025ac:	813b      	strh	r3, [r7, #8]
 80025ae:	4613      	mov	r3, r2
 80025b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80025b2:	88fb      	ldrh	r3, [r7, #6]
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	8979      	ldrh	r1, [r7, #10]
 80025b8:	4b20      	ldr	r3, [pc, #128]	@ (800263c <I2C_RequestMemoryRead+0xa4>)
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	2300      	movs	r3, #0
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 fa26 	bl	8002a10 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025c4:	69fa      	ldr	r2, [r7, #28]
 80025c6:	69b9      	ldr	r1, [r7, #24]
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f000 f8b6 	bl	800273a <I2C_WaitOnTXISFlagUntilTimeout>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e02c      	b.n	8002632 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025d8:	88fb      	ldrh	r3, [r7, #6]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d105      	bne.n	80025ea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025de:	893b      	ldrh	r3, [r7, #8]
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80025e8:	e015      	b.n	8002616 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80025ea:	893b      	ldrh	r3, [r7, #8]
 80025ec:	0a1b      	lsrs	r3, r3, #8
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025f8:	69fa      	ldr	r2, [r7, #28]
 80025fa:	69b9      	ldr	r1, [r7, #24]
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f000 f89c 	bl	800273a <I2C_WaitOnTXISFlagUntilTimeout>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e012      	b.n	8002632 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800260c:	893b      	ldrh	r3, [r7, #8]
 800260e:	b2da      	uxtb	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	2200      	movs	r2, #0
 800261e:	2140      	movs	r1, #64	@ 0x40
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f000 f831 	bl	8002688 <I2C_WaitOnFlagUntilTimeout>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e000      	b.n	8002632 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	80002000 	.word	0x80002000

08002640 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b02      	cmp	r3, #2
 8002654:	d103      	bne.n	800265e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2200      	movs	r2, #0
 800265c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b01      	cmp	r3, #1
 800266a:	d007      	beq.n	800267c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	699a      	ldr	r2, [r3, #24]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0201 	orr.w	r2, r2, #1
 800267a:	619a      	str	r2, [r3, #24]
  }
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	603b      	str	r3, [r7, #0]
 8002694:	4613      	mov	r3, r2
 8002696:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002698:	e03b      	b.n	8002712 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	6839      	ldr	r1, [r7, #0]
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f000 f8d6 	bl	8002850 <I2C_IsErrorOccurred>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e041      	b.n	8002732 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b4:	d02d      	beq.n	8002712 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026b6:	f7ff f9c1 	bl	8001a3c <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d302      	bcc.n	80026cc <I2C_WaitOnFlagUntilTimeout+0x44>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d122      	bne.n	8002712 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	699a      	ldr	r2, [r3, #24]
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	4013      	ands	r3, r2
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	429a      	cmp	r2, r3
 80026da:	bf0c      	ite	eq
 80026dc:	2301      	moveq	r3, #1
 80026de:	2300      	movne	r3, #0
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	461a      	mov	r2, r3
 80026e4:	79fb      	ldrb	r3, [r7, #7]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d113      	bne.n	8002712 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ee:	f043 0220 	orr.w	r2, r3, #32
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2220      	movs	r2, #32
 80026fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e00f      	b.n	8002732 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	699a      	ldr	r2, [r3, #24]
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	4013      	ands	r3, r2
 800271c:	68ba      	ldr	r2, [r7, #8]
 800271e:	429a      	cmp	r2, r3
 8002720:	bf0c      	ite	eq
 8002722:	2301      	moveq	r3, #1
 8002724:	2300      	movne	r3, #0
 8002726:	b2db      	uxtb	r3, r3
 8002728:	461a      	mov	r2, r3
 800272a:	79fb      	ldrb	r3, [r7, #7]
 800272c:	429a      	cmp	r2, r3
 800272e:	d0b4      	beq.n	800269a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b084      	sub	sp, #16
 800273e:	af00      	add	r7, sp, #0
 8002740:	60f8      	str	r0, [r7, #12]
 8002742:	60b9      	str	r1, [r7, #8]
 8002744:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002746:	e033      	b.n	80027b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	68b9      	ldr	r1, [r7, #8]
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f000 f87f 	bl	8002850 <I2C_IsErrorOccurred>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e031      	b.n	80027c0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002762:	d025      	beq.n	80027b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002764:	f7ff f96a 	bl	8001a3c <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	429a      	cmp	r2, r3
 8002772:	d302      	bcc.n	800277a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d11a      	bne.n	80027b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b02      	cmp	r3, #2
 8002786:	d013      	beq.n	80027b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800278c:	f043 0220 	orr.w	r2, r3, #32
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2220      	movs	r2, #32
 8002798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e007      	b.n	80027c0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d1c4      	bne.n	8002748 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027d4:	e02f      	b.n	8002836 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	68b9      	ldr	r1, [r7, #8]
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 f838 	bl	8002850 <I2C_IsErrorOccurred>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e02d      	b.n	8002846 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ea:	f7ff f927 	bl	8001a3c <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	68ba      	ldr	r2, [r7, #8]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d302      	bcc.n	8002800 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d11a      	bne.n	8002836 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	f003 0320 	and.w	r3, r3, #32
 800280a:	2b20      	cmp	r3, #32
 800280c:	d013      	beq.n	8002836 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002812:	f043 0220 	orr.w	r2, r3, #32
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2220      	movs	r2, #32
 800281e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e007      	b.n	8002846 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	f003 0320 	and.w	r3, r3, #32
 8002840:	2b20      	cmp	r3, #32
 8002842:	d1c8      	bne.n	80027d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
	...

08002850 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b08a      	sub	sp, #40	@ 0x28
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800285c:	2300      	movs	r3, #0
 800285e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800286a:	2300      	movs	r3, #0
 800286c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	f003 0310 	and.w	r3, r3, #16
 8002878:	2b00      	cmp	r3, #0
 800287a:	d068      	beq.n	800294e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2210      	movs	r2, #16
 8002882:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002884:	e049      	b.n	800291a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800288c:	d045      	beq.n	800291a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800288e:	f7ff f8d5 	bl	8001a3c <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	68ba      	ldr	r2, [r7, #8]
 800289a:	429a      	cmp	r2, r3
 800289c:	d302      	bcc.n	80028a4 <I2C_IsErrorOccurred+0x54>
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d13a      	bne.n	800291a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80028b6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028c6:	d121      	bne.n	800290c <I2C_IsErrorOccurred+0xbc>
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80028ce:	d01d      	beq.n	800290c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80028d0:	7cfb      	ldrb	r3, [r7, #19]
 80028d2:	2b20      	cmp	r3, #32
 80028d4:	d01a      	beq.n	800290c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80028e4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80028e6:	f7ff f8a9 	bl	8001a3c <HAL_GetTick>
 80028ea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028ec:	e00e      	b.n	800290c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80028ee:	f7ff f8a5 	bl	8001a3c <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b19      	cmp	r3, #25
 80028fa:	d907      	bls.n	800290c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80028fc:	6a3b      	ldr	r3, [r7, #32]
 80028fe:	f043 0320 	orr.w	r3, r3, #32
 8002902:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800290a:	e006      	b.n	800291a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	f003 0320 	and.w	r3, r3, #32
 8002916:	2b20      	cmp	r3, #32
 8002918:	d1e9      	bne.n	80028ee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	f003 0320 	and.w	r3, r3, #32
 8002924:	2b20      	cmp	r3, #32
 8002926:	d003      	beq.n	8002930 <I2C_IsErrorOccurred+0xe0>
 8002928:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0aa      	beq.n	8002886 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002930:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002934:	2b00      	cmp	r3, #0
 8002936:	d103      	bne.n	8002940 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2220      	movs	r2, #32
 800293e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002940:	6a3b      	ldr	r3, [r7, #32]
 8002942:	f043 0304 	orr.w	r3, r3, #4
 8002946:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00b      	beq.n	8002978 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002960:	6a3b      	ldr	r3, [r7, #32]
 8002962:	f043 0301 	orr.w	r3, r3, #1
 8002966:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002970:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00b      	beq.n	800299a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	f043 0308 	orr.w	r3, r3, #8
 8002988:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002992:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00b      	beq.n	80029bc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80029a4:	6a3b      	ldr	r3, [r7, #32]
 80029a6:	f043 0302 	orr.w	r3, r3, #2
 80029aa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80029bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d01c      	beq.n	80029fe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f7ff fe3b 	bl	8002640 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6859      	ldr	r1, [r3, #4]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	4b0d      	ldr	r3, [pc, #52]	@ (8002a0c <I2C_IsErrorOccurred+0x1bc>)
 80029d6:	400b      	ands	r3, r1
 80029d8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80029de:	6a3b      	ldr	r3, [r7, #32]
 80029e0:	431a      	orrs	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2220      	movs	r2, #32
 80029ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80029fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3728      	adds	r7, #40	@ 0x28
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	fe00e800 	.word	0xfe00e800

08002a10 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b087      	sub	sp, #28
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	607b      	str	r3, [r7, #4]
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	817b      	strh	r3, [r7, #10]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a22:	897b      	ldrh	r3, [r7, #10]
 8002a24:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a28:	7a7b      	ldrb	r3, [r7, #9]
 8002a2a:	041b      	lsls	r3, r3, #16
 8002a2c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a30:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a36:	6a3b      	ldr	r3, [r7, #32]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a3e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	6a3b      	ldr	r3, [r7, #32]
 8002a48:	0d5b      	lsrs	r3, r3, #21
 8002a4a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002a4e:	4b08      	ldr	r3, [pc, #32]	@ (8002a70 <I2C_TransferConfig+0x60>)
 8002a50:	430b      	orrs	r3, r1
 8002a52:	43db      	mvns	r3, r3
 8002a54:	ea02 0103 	and.w	r1, r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002a62:	bf00      	nop
 8002a64:	371c      	adds	r7, #28
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	03ff63ff 	.word	0x03ff63ff

08002a74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b20      	cmp	r3, #32
 8002a88:	d138      	bne.n	8002afc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d101      	bne.n	8002a98 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a94:	2302      	movs	r3, #2
 8002a96:	e032      	b.n	8002afe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2224      	movs	r2, #36	@ 0x24
 8002aa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 0201 	bic.w	r2, r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002ac6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6819      	ldr	r1, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f042 0201 	orr.w	r2, r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2220      	movs	r2, #32
 8002aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	e000      	b.n	8002afe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002afc:	2302      	movs	r3, #2
  }
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b085      	sub	sp, #20
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
 8002b12:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b20      	cmp	r3, #32
 8002b1e:	d139      	bne.n	8002b94 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d101      	bne.n	8002b2e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	e033      	b.n	8002b96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2224      	movs	r2, #36	@ 0x24
 8002b3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 0201 	bic.w	r2, r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002b5c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	021b      	lsls	r3, r3, #8
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0201 	orr.w	r2, r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2220      	movs	r2, #32
 8002b84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b90:	2300      	movs	r3, #0
 8002b92:	e000      	b.n	8002b96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b94:	2302      	movs	r3, #2
  }
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
	...

08002ba4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bb4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d102      	bne.n	8002bca <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	f001 b823 	b.w	8003c10 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 817d 	beq.w	8002eda <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002be0:	4bbc      	ldr	r3, [pc, #752]	@ (8002ed4 <HAL_RCC_OscConfig+0x330>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 030c 	and.w	r3, r3, #12
 8002be8:	2b04      	cmp	r3, #4
 8002bea:	d00c      	beq.n	8002c06 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bec:	4bb9      	ldr	r3, [pc, #740]	@ (8002ed4 <HAL_RCC_OscConfig+0x330>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f003 030c 	and.w	r3, r3, #12
 8002bf4:	2b08      	cmp	r3, #8
 8002bf6:	d15c      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x10e>
 8002bf8:	4bb6      	ldr	r3, [pc, #728]	@ (8002ed4 <HAL_RCC_OscConfig+0x330>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c04:	d155      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x10e>
 8002c06:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c0a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002c12:	fa93 f3a3 	rbit	r3, r3
 8002c16:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c1a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c1e:	fab3 f383 	clz	r3, r3
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	095b      	lsrs	r3, r3, #5
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	f043 0301 	orr.w	r3, r3, #1
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d102      	bne.n	8002c38 <HAL_RCC_OscConfig+0x94>
 8002c32:	4ba8      	ldr	r3, [pc, #672]	@ (8002ed4 <HAL_RCC_OscConfig+0x330>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	e015      	b.n	8002c64 <HAL_RCC_OscConfig+0xc0>
 8002c38:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c3c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c40:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002c44:	fa93 f3a3 	rbit	r3, r3
 8002c48:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002c4c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c50:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002c54:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002c58:	fa93 f3a3 	rbit	r3, r3
 8002c5c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002c60:	4b9c      	ldr	r3, [pc, #624]	@ (8002ed4 <HAL_RCC_OscConfig+0x330>)
 8002c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c64:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c68:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002c6c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002c70:	fa92 f2a2 	rbit	r2, r2
 8002c74:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002c78:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002c7c:	fab2 f282 	clz	r2, r2
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	f042 0220 	orr.w	r2, r2, #32
 8002c86:	b2d2      	uxtb	r2, r2
 8002c88:	f002 021f 	and.w	r2, r2, #31
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c92:	4013      	ands	r3, r2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 811f 	beq.w	8002ed8 <HAL_RCC_OscConfig+0x334>
 8002c9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f040 8116 	bne.w	8002ed8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	f000 bfaf 	b.w	8003c10 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cb6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cc2:	d106      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x12e>
 8002cc4:	4b83      	ldr	r3, [pc, #524]	@ (8002ed4 <HAL_RCC_OscConfig+0x330>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a82      	ldr	r2, [pc, #520]	@ (8002ed4 <HAL_RCC_OscConfig+0x330>)
 8002cca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cce:	6013      	str	r3, [r2, #0]
 8002cd0:	e036      	b.n	8002d40 <HAL_RCC_OscConfig+0x19c>
 8002cd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10c      	bne.n	8002cfc <HAL_RCC_OscConfig+0x158>
 8002ce2:	4b7c      	ldr	r3, [pc, #496]	@ (8002ed4 <HAL_RCC_OscConfig+0x330>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a7b      	ldr	r2, [pc, #492]	@ (8002ed4 <HAL_RCC_OscConfig+0x330>)
 8002ce8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cec:	6013      	str	r3, [r2, #0]
 8002cee:	4b79      	ldr	r3, [pc, #484]	@ (8002ed4 <HAL_RCC_OscConfig+0x330>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a78      	ldr	r2, [pc, #480]	@ (8002ed4 <HAL_RCC_OscConfig+0x330>)
 8002cf4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	e021      	b.n	8002d40 <HAL_RCC_OscConfig+0x19c>
 8002cfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d00:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d0c:	d10c      	bne.n	8002d28 <HAL_RCC_OscConfig+0x184>
 8002d0e:	4b71      	ldr	r3, [pc, #452]	@ (8002ed4 <HAL_RCC_OscConfig+0x330>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a70      	ldr	r2, [pc, #448]	@ (8002ed4 <HAL_RCC_OscConfig+0x330>)
 8002d14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d18:	6013      	str	r3, [r2, #0]
 8002d1a:	4b6e      	ldr	r3, [pc, #440]	@ (8002ed4 <HAL_RCC_OscConfig+0x330>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a6d      	ldr	r2, [pc, #436]	@ (8002ed4 <HAL_RCC_OscConfig+0x330>)
 8002d20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	e00b      	b.n	8002d40 <HAL_RCC_OscConfig+0x19c>
 8002d28:	4b6a      	ldr	r3, [pc, #424]	@ (8002ed4 <HAL_RCC_OscConfig+0x330>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a69      	ldr	r2, [pc, #420]	@ (8002ed4 <HAL_RCC_OscConfig+0x330>)
 8002d2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d32:	6013      	str	r3, [r2, #0]
 8002d34:	4b67      	ldr	r3, [pc, #412]	@ (8002ed4 <HAL_RCC_OscConfig+0x330>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a66      	ldr	r2, [pc, #408]	@ (8002ed4 <HAL_RCC_OscConfig+0x330>)
 8002d3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d3e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d40:	4b64      	ldr	r3, [pc, #400]	@ (8002ed4 <HAL_RCC_OscConfig+0x330>)
 8002d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d44:	f023 020f 	bic.w	r2, r3, #15
 8002d48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d4c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	495f      	ldr	r1, [pc, #380]	@ (8002ed4 <HAL_RCC_OscConfig+0x330>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d5e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d059      	beq.n	8002e1e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6a:	f7fe fe67 	bl	8001a3c <HAL_GetTick>
 8002d6e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d72:	e00a      	b.n	8002d8a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d74:	f7fe fe62 	bl	8001a3c <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b64      	cmp	r3, #100	@ 0x64
 8002d82:	d902      	bls.n	8002d8a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	f000 bf43 	b.w	8003c10 <HAL_RCC_OscConfig+0x106c>
 8002d8a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d8e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d92:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002d96:	fa93 f3a3 	rbit	r3, r3
 8002d9a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002d9e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da2:	fab3 f383 	clz	r3, r3
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	095b      	lsrs	r3, r3, #5
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	f043 0301 	orr.w	r3, r3, #1
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d102      	bne.n	8002dbc <HAL_RCC_OscConfig+0x218>
 8002db6:	4b47      	ldr	r3, [pc, #284]	@ (8002ed4 <HAL_RCC_OscConfig+0x330>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	e015      	b.n	8002de8 <HAL_RCC_OscConfig+0x244>
 8002dbc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002dc0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002dc8:	fa93 f3a3 	rbit	r3, r3
 8002dcc:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002dd0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002dd4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002dd8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002ddc:	fa93 f3a3 	rbit	r3, r3
 8002de0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002de4:	4b3b      	ldr	r3, [pc, #236]	@ (8002ed4 <HAL_RCC_OscConfig+0x330>)
 8002de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002dec:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002df0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002df4:	fa92 f2a2 	rbit	r2, r2
 8002df8:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002dfc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002e00:	fab2 f282 	clz	r2, r2
 8002e04:	b2d2      	uxtb	r2, r2
 8002e06:	f042 0220 	orr.w	r2, r2, #32
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	f002 021f 	and.w	r2, r2, #31
 8002e10:	2101      	movs	r1, #1
 8002e12:	fa01 f202 	lsl.w	r2, r1, r2
 8002e16:	4013      	ands	r3, r2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0ab      	beq.n	8002d74 <HAL_RCC_OscConfig+0x1d0>
 8002e1c:	e05d      	b.n	8002eda <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1e:	f7fe fe0d 	bl	8001a3c <HAL_GetTick>
 8002e22:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e26:	e00a      	b.n	8002e3e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e28:	f7fe fe08 	bl	8001a3c <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b64      	cmp	r3, #100	@ 0x64
 8002e36:	d902      	bls.n	8002e3e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	f000 bee9 	b.w	8003c10 <HAL_RCC_OscConfig+0x106c>
 8002e3e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e42:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e46:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002e4a:	fa93 f3a3 	rbit	r3, r3
 8002e4e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002e52:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e56:	fab3 f383 	clz	r3, r3
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	095b      	lsrs	r3, r3, #5
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	f043 0301 	orr.w	r3, r3, #1
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d102      	bne.n	8002e70 <HAL_RCC_OscConfig+0x2cc>
 8002e6a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ed4 <HAL_RCC_OscConfig+0x330>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	e015      	b.n	8002e9c <HAL_RCC_OscConfig+0x2f8>
 8002e70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e74:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e78:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002e7c:	fa93 f3a3 	rbit	r3, r3
 8002e80:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002e84:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e88:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002e8c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002e90:	fa93 f3a3 	rbit	r3, r3
 8002e94:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002e98:	4b0e      	ldr	r3, [pc, #56]	@ (8002ed4 <HAL_RCC_OscConfig+0x330>)
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002ea0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002ea4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002ea8:	fa92 f2a2 	rbit	r2, r2
 8002eac:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002eb0:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002eb4:	fab2 f282 	clz	r2, r2
 8002eb8:	b2d2      	uxtb	r2, r2
 8002eba:	f042 0220 	orr.w	r2, r2, #32
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	f002 021f 	and.w	r2, r2, #31
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	fa01 f202 	lsl.w	r2, r1, r2
 8002eca:	4013      	ands	r3, r2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1ab      	bne.n	8002e28 <HAL_RCC_OscConfig+0x284>
 8002ed0:	e003      	b.n	8002eda <HAL_RCC_OscConfig+0x336>
 8002ed2:	bf00      	nop
 8002ed4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ede:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 817d 	beq.w	80031ea <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002ef0:	4ba6      	ldr	r3, [pc, #664]	@ (800318c <HAL_RCC_OscConfig+0x5e8>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f003 030c 	and.w	r3, r3, #12
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00b      	beq.n	8002f14 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002efc:	4ba3      	ldr	r3, [pc, #652]	@ (800318c <HAL_RCC_OscConfig+0x5e8>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f003 030c 	and.w	r3, r3, #12
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	d172      	bne.n	8002fee <HAL_RCC_OscConfig+0x44a>
 8002f08:	4ba0      	ldr	r3, [pc, #640]	@ (800318c <HAL_RCC_OscConfig+0x5e8>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d16c      	bne.n	8002fee <HAL_RCC_OscConfig+0x44a>
 8002f14:	2302      	movs	r3, #2
 8002f16:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002f1e:	fa93 f3a3 	rbit	r3, r3
 8002f22:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002f26:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f2a:	fab3 f383 	clz	r3, r3
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	095b      	lsrs	r3, r3, #5
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	f043 0301 	orr.w	r3, r3, #1
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d102      	bne.n	8002f44 <HAL_RCC_OscConfig+0x3a0>
 8002f3e:	4b93      	ldr	r3, [pc, #588]	@ (800318c <HAL_RCC_OscConfig+0x5e8>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	e013      	b.n	8002f6c <HAL_RCC_OscConfig+0x3c8>
 8002f44:	2302      	movs	r3, #2
 8002f46:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002f4e:	fa93 f3a3 	rbit	r3, r3
 8002f52:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002f56:	2302      	movs	r3, #2
 8002f58:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002f5c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002f60:	fa93 f3a3 	rbit	r3, r3
 8002f64:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002f68:	4b88      	ldr	r3, [pc, #544]	@ (800318c <HAL_RCC_OscConfig+0x5e8>)
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002f72:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002f76:	fa92 f2a2 	rbit	r2, r2
 8002f7a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002f7e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002f82:	fab2 f282 	clz	r2, r2
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	f042 0220 	orr.w	r2, r2, #32
 8002f8c:	b2d2      	uxtb	r2, r2
 8002f8e:	f002 021f 	and.w	r2, r2, #31
 8002f92:	2101      	movs	r1, #1
 8002f94:	fa01 f202 	lsl.w	r2, r1, r2
 8002f98:	4013      	ands	r3, r2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00a      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x410>
 8002f9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fa2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d002      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	f000 be2e 	b.w	8003c10 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb4:	4b75      	ldr	r3, [pc, #468]	@ (800318c <HAL_RCC_OscConfig+0x5e8>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fc0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	21f8      	movs	r1, #248	@ 0xf8
 8002fca:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fce:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002fd2:	fa91 f1a1 	rbit	r1, r1
 8002fd6:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002fda:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002fde:	fab1 f181 	clz	r1, r1
 8002fe2:	b2c9      	uxtb	r1, r1
 8002fe4:	408b      	lsls	r3, r1
 8002fe6:	4969      	ldr	r1, [pc, #420]	@ (800318c <HAL_RCC_OscConfig+0x5e8>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fec:	e0fd      	b.n	80031ea <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 8088 	beq.w	8003110 <HAL_RCC_OscConfig+0x56c>
 8003000:	2301      	movs	r3, #1
 8003002:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003006:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800300a:	fa93 f3a3 	rbit	r3, r3
 800300e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8003012:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003016:	fab3 f383 	clz	r3, r3
 800301a:	b2db      	uxtb	r3, r3
 800301c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003020:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	461a      	mov	r2, r3
 8003028:	2301      	movs	r3, #1
 800302a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302c:	f7fe fd06 	bl	8001a3c <HAL_GetTick>
 8003030:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003034:	e00a      	b.n	800304c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003036:	f7fe fd01 	bl	8001a3c <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d902      	bls.n	800304c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	f000 bde2 	b.w	8003c10 <HAL_RCC_OscConfig+0x106c>
 800304c:	2302      	movs	r3, #2
 800304e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003052:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8003056:	fa93 f3a3 	rbit	r3, r3
 800305a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800305e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003062:	fab3 f383 	clz	r3, r3
 8003066:	b2db      	uxtb	r3, r3
 8003068:	095b      	lsrs	r3, r3, #5
 800306a:	b2db      	uxtb	r3, r3
 800306c:	f043 0301 	orr.w	r3, r3, #1
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b01      	cmp	r3, #1
 8003074:	d102      	bne.n	800307c <HAL_RCC_OscConfig+0x4d8>
 8003076:	4b45      	ldr	r3, [pc, #276]	@ (800318c <HAL_RCC_OscConfig+0x5e8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	e013      	b.n	80030a4 <HAL_RCC_OscConfig+0x500>
 800307c:	2302      	movs	r3, #2
 800307e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003082:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8003086:	fa93 f3a3 	rbit	r3, r3
 800308a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800308e:	2302      	movs	r3, #2
 8003090:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003094:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003098:	fa93 f3a3 	rbit	r3, r3
 800309c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80030a0:	4b3a      	ldr	r3, [pc, #232]	@ (800318c <HAL_RCC_OscConfig+0x5e8>)
 80030a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a4:	2202      	movs	r2, #2
 80030a6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80030aa:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80030ae:	fa92 f2a2 	rbit	r2, r2
 80030b2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80030b6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80030ba:	fab2 f282 	clz	r2, r2
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	f042 0220 	orr.w	r2, r2, #32
 80030c4:	b2d2      	uxtb	r2, r2
 80030c6:	f002 021f 	and.w	r2, r2, #31
 80030ca:	2101      	movs	r1, #1
 80030cc:	fa01 f202 	lsl.w	r2, r1, r2
 80030d0:	4013      	ands	r3, r2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d0af      	beq.n	8003036 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d6:	4b2d      	ldr	r3, [pc, #180]	@ (800318c <HAL_RCC_OscConfig+0x5e8>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	21f8      	movs	r1, #248	@ 0xf8
 80030ec:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f0:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80030f4:	fa91 f1a1 	rbit	r1, r1
 80030f8:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80030fc:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003100:	fab1 f181 	clz	r1, r1
 8003104:	b2c9      	uxtb	r1, r1
 8003106:	408b      	lsls	r3, r1
 8003108:	4920      	ldr	r1, [pc, #128]	@ (800318c <HAL_RCC_OscConfig+0x5e8>)
 800310a:	4313      	orrs	r3, r2
 800310c:	600b      	str	r3, [r1, #0]
 800310e:	e06c      	b.n	80031ea <HAL_RCC_OscConfig+0x646>
 8003110:	2301      	movs	r3, #1
 8003112:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003116:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800311a:	fa93 f3a3 	rbit	r3, r3
 800311e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8003122:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003126:	fab3 f383 	clz	r3, r3
 800312a:	b2db      	uxtb	r3, r3
 800312c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003130:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	461a      	mov	r2, r3
 8003138:	2300      	movs	r3, #0
 800313a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313c:	f7fe fc7e 	bl	8001a3c <HAL_GetTick>
 8003140:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003144:	e00a      	b.n	800315c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003146:	f7fe fc79 	bl	8001a3c <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d902      	bls.n	800315c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	f000 bd5a 	b.w	8003c10 <HAL_RCC_OscConfig+0x106c>
 800315c:	2302      	movs	r3, #2
 800315e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003162:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003166:	fa93 f3a3 	rbit	r3, r3
 800316a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800316e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003172:	fab3 f383 	clz	r3, r3
 8003176:	b2db      	uxtb	r3, r3
 8003178:	095b      	lsrs	r3, r3, #5
 800317a:	b2db      	uxtb	r3, r3
 800317c:	f043 0301 	orr.w	r3, r3, #1
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b01      	cmp	r3, #1
 8003184:	d104      	bne.n	8003190 <HAL_RCC_OscConfig+0x5ec>
 8003186:	4b01      	ldr	r3, [pc, #4]	@ (800318c <HAL_RCC_OscConfig+0x5e8>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	e015      	b.n	80031b8 <HAL_RCC_OscConfig+0x614>
 800318c:	40021000 	.word	0x40021000
 8003190:	2302      	movs	r3, #2
 8003192:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003196:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800319a:	fa93 f3a3 	rbit	r3, r3
 800319e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80031a2:	2302      	movs	r3, #2
 80031a4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80031a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80031ac:	fa93 f3a3 	rbit	r3, r3
 80031b0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80031b4:	4bc8      	ldr	r3, [pc, #800]	@ (80034d8 <HAL_RCC_OscConfig+0x934>)
 80031b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b8:	2202      	movs	r2, #2
 80031ba:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80031be:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80031c2:	fa92 f2a2 	rbit	r2, r2
 80031c6:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80031ca:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80031ce:	fab2 f282 	clz	r2, r2
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	f042 0220 	orr.w	r2, r2, #32
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	f002 021f 	and.w	r2, r2, #31
 80031de:	2101      	movs	r1, #1
 80031e0:	fa01 f202 	lsl.w	r2, r1, r2
 80031e4:	4013      	ands	r3, r2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1ad      	bne.n	8003146 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0308 	and.w	r3, r3, #8
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 8110 	beq.w	8003420 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003200:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003204:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d079      	beq.n	8003304 <HAL_RCC_OscConfig+0x760>
 8003210:	2301      	movs	r3, #1
 8003212:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003216:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800321a:	fa93 f3a3 	rbit	r3, r3
 800321e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003222:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003226:	fab3 f383 	clz	r3, r3
 800322a:	b2db      	uxtb	r3, r3
 800322c:	461a      	mov	r2, r3
 800322e:	4bab      	ldr	r3, [pc, #684]	@ (80034dc <HAL_RCC_OscConfig+0x938>)
 8003230:	4413      	add	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	461a      	mov	r2, r3
 8003236:	2301      	movs	r3, #1
 8003238:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800323a:	f7fe fbff 	bl	8001a3c <HAL_GetTick>
 800323e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003242:	e00a      	b.n	800325a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003244:	f7fe fbfa 	bl	8001a3c <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d902      	bls.n	800325a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	f000 bcdb 	b.w	8003c10 <HAL_RCC_OscConfig+0x106c>
 800325a:	2302      	movs	r3, #2
 800325c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003260:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003264:	fa93 f3a3 	rbit	r3, r3
 8003268:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800326c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003270:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003274:	2202      	movs	r2, #2
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800327c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	fa93 f2a3 	rbit	r2, r3
 8003286:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800328a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003294:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003298:	2202      	movs	r2, #2
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	fa93 f2a3 	rbit	r2, r3
 80032aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80032b2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b4:	4b88      	ldr	r3, [pc, #544]	@ (80034d8 <HAL_RCC_OscConfig+0x934>)
 80032b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032bc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80032c0:	2102      	movs	r1, #2
 80032c2:	6019      	str	r1, [r3, #0]
 80032c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032c8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	fa93 f1a3 	rbit	r1, r3
 80032d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032d6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80032da:	6019      	str	r1, [r3, #0]
  return result;
 80032dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032e0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	fab3 f383 	clz	r3, r3
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	f003 031f 	and.w	r3, r3, #31
 80032f6:	2101      	movs	r1, #1
 80032f8:	fa01 f303 	lsl.w	r3, r1, r3
 80032fc:	4013      	ands	r3, r2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0a0      	beq.n	8003244 <HAL_RCC_OscConfig+0x6a0>
 8003302:	e08d      	b.n	8003420 <HAL_RCC_OscConfig+0x87c>
 8003304:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003308:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800330c:	2201      	movs	r2, #1
 800330e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003310:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003314:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	fa93 f2a3 	rbit	r2, r3
 800331e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003322:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003326:	601a      	str	r2, [r3, #0]
  return result;
 8003328:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800332c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003330:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003332:	fab3 f383 	clz	r3, r3
 8003336:	b2db      	uxtb	r3, r3
 8003338:	461a      	mov	r2, r3
 800333a:	4b68      	ldr	r3, [pc, #416]	@ (80034dc <HAL_RCC_OscConfig+0x938>)
 800333c:	4413      	add	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	461a      	mov	r2, r3
 8003342:	2300      	movs	r3, #0
 8003344:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003346:	f7fe fb79 	bl	8001a3c <HAL_GetTick>
 800334a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800334e:	e00a      	b.n	8003366 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003350:	f7fe fb74 	bl	8001a3c <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d902      	bls.n	8003366 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	f000 bc55 	b.w	8003c10 <HAL_RCC_OscConfig+0x106c>
 8003366:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800336a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800336e:	2202      	movs	r2, #2
 8003370:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003372:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003376:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	fa93 f2a3 	rbit	r2, r3
 8003380:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003384:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800338e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003392:	2202      	movs	r2, #2
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800339a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	fa93 f2a3 	rbit	r2, r3
 80033a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80033ac:	601a      	str	r2, [r3, #0]
 80033ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033b2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80033b6:	2202      	movs	r2, #2
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033be:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	fa93 f2a3 	rbit	r2, r3
 80033c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033cc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80033d0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d2:	4b41      	ldr	r3, [pc, #260]	@ (80034d8 <HAL_RCC_OscConfig+0x934>)
 80033d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033da:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80033de:	2102      	movs	r1, #2
 80033e0:	6019      	str	r1, [r3, #0]
 80033e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033e6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	fa93 f1a3 	rbit	r1, r3
 80033f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033f4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80033f8:	6019      	str	r1, [r3, #0]
  return result;
 80033fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033fe:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	fab3 f383 	clz	r3, r3
 8003408:	b2db      	uxtb	r3, r3
 800340a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800340e:	b2db      	uxtb	r3, r3
 8003410:	f003 031f 	and.w	r3, r3, #31
 8003414:	2101      	movs	r1, #1
 8003416:	fa01 f303 	lsl.w	r3, r1, r3
 800341a:	4013      	ands	r3, r2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d197      	bne.n	8003350 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003420:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003424:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 81a1 	beq.w	8003778 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003436:	2300      	movs	r3, #0
 8003438:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800343c:	4b26      	ldr	r3, [pc, #152]	@ (80034d8 <HAL_RCC_OscConfig+0x934>)
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d116      	bne.n	8003476 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003448:	4b23      	ldr	r3, [pc, #140]	@ (80034d8 <HAL_RCC_OscConfig+0x934>)
 800344a:	69db      	ldr	r3, [r3, #28]
 800344c:	4a22      	ldr	r2, [pc, #136]	@ (80034d8 <HAL_RCC_OscConfig+0x934>)
 800344e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003452:	61d3      	str	r3, [r2, #28]
 8003454:	4b20      	ldr	r3, [pc, #128]	@ (80034d8 <HAL_RCC_OscConfig+0x934>)
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800345c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003460:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800346a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800346e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003470:	2301      	movs	r3, #1
 8003472:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003476:	4b1a      	ldr	r3, [pc, #104]	@ (80034e0 <HAL_RCC_OscConfig+0x93c>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800347e:	2b00      	cmp	r3, #0
 8003480:	d11a      	bne.n	80034b8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003482:	4b17      	ldr	r3, [pc, #92]	@ (80034e0 <HAL_RCC_OscConfig+0x93c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a16      	ldr	r2, [pc, #88]	@ (80034e0 <HAL_RCC_OscConfig+0x93c>)
 8003488:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800348c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800348e:	f7fe fad5 	bl	8001a3c <HAL_GetTick>
 8003492:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003496:	e009      	b.n	80034ac <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003498:	f7fe fad0 	bl	8001a3c <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b64      	cmp	r3, #100	@ 0x64
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e3b1      	b.n	8003c10 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ac:	4b0c      	ldr	r3, [pc, #48]	@ (80034e0 <HAL_RCC_OscConfig+0x93c>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0ef      	beq.n	8003498 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d10d      	bne.n	80034e4 <HAL_RCC_OscConfig+0x940>
 80034c8:	4b03      	ldr	r3, [pc, #12]	@ (80034d8 <HAL_RCC_OscConfig+0x934>)
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	4a02      	ldr	r2, [pc, #8]	@ (80034d8 <HAL_RCC_OscConfig+0x934>)
 80034ce:	f043 0301 	orr.w	r3, r3, #1
 80034d2:	6213      	str	r3, [r2, #32]
 80034d4:	e03c      	b.n	8003550 <HAL_RCC_OscConfig+0x9ac>
 80034d6:	bf00      	nop
 80034d8:	40021000 	.word	0x40021000
 80034dc:	10908120 	.word	0x10908120
 80034e0:	40007000 	.word	0x40007000
 80034e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10c      	bne.n	800350e <HAL_RCC_OscConfig+0x96a>
 80034f4:	4bc1      	ldr	r3, [pc, #772]	@ (80037fc <HAL_RCC_OscConfig+0xc58>)
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	4ac0      	ldr	r2, [pc, #768]	@ (80037fc <HAL_RCC_OscConfig+0xc58>)
 80034fa:	f023 0301 	bic.w	r3, r3, #1
 80034fe:	6213      	str	r3, [r2, #32]
 8003500:	4bbe      	ldr	r3, [pc, #760]	@ (80037fc <HAL_RCC_OscConfig+0xc58>)
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	4abd      	ldr	r2, [pc, #756]	@ (80037fc <HAL_RCC_OscConfig+0xc58>)
 8003506:	f023 0304 	bic.w	r3, r3, #4
 800350a:	6213      	str	r3, [r2, #32]
 800350c:	e020      	b.n	8003550 <HAL_RCC_OscConfig+0x9ac>
 800350e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003512:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	2b05      	cmp	r3, #5
 800351c:	d10c      	bne.n	8003538 <HAL_RCC_OscConfig+0x994>
 800351e:	4bb7      	ldr	r3, [pc, #732]	@ (80037fc <HAL_RCC_OscConfig+0xc58>)
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	4ab6      	ldr	r2, [pc, #728]	@ (80037fc <HAL_RCC_OscConfig+0xc58>)
 8003524:	f043 0304 	orr.w	r3, r3, #4
 8003528:	6213      	str	r3, [r2, #32]
 800352a:	4bb4      	ldr	r3, [pc, #720]	@ (80037fc <HAL_RCC_OscConfig+0xc58>)
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	4ab3      	ldr	r2, [pc, #716]	@ (80037fc <HAL_RCC_OscConfig+0xc58>)
 8003530:	f043 0301 	orr.w	r3, r3, #1
 8003534:	6213      	str	r3, [r2, #32]
 8003536:	e00b      	b.n	8003550 <HAL_RCC_OscConfig+0x9ac>
 8003538:	4bb0      	ldr	r3, [pc, #704]	@ (80037fc <HAL_RCC_OscConfig+0xc58>)
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	4aaf      	ldr	r2, [pc, #700]	@ (80037fc <HAL_RCC_OscConfig+0xc58>)
 800353e:	f023 0301 	bic.w	r3, r3, #1
 8003542:	6213      	str	r3, [r2, #32]
 8003544:	4bad      	ldr	r3, [pc, #692]	@ (80037fc <HAL_RCC_OscConfig+0xc58>)
 8003546:	6a1b      	ldr	r3, [r3, #32]
 8003548:	4aac      	ldr	r2, [pc, #688]	@ (80037fc <HAL_RCC_OscConfig+0xc58>)
 800354a:	f023 0304 	bic.w	r3, r3, #4
 800354e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003550:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003554:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 8081 	beq.w	8003664 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003562:	f7fe fa6b 	bl	8001a3c <HAL_GetTick>
 8003566:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800356a:	e00b      	b.n	8003584 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800356c:	f7fe fa66 	bl	8001a3c <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	f241 3288 	movw	r2, #5000	@ 0x1388
 800357c:	4293      	cmp	r3, r2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e345      	b.n	8003c10 <HAL_RCC_OscConfig+0x106c>
 8003584:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003588:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800358c:	2202      	movs	r2, #2
 800358e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003590:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003594:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	fa93 f2a3 	rbit	r2, r3
 800359e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035a2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035ac:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80035b0:	2202      	movs	r2, #2
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035b8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	fa93 f2a3 	rbit	r2, r3
 80035c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035c6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80035ca:	601a      	str	r2, [r3, #0]
  return result;
 80035cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035d0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80035d4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d6:	fab3 f383 	clz	r3, r3
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	095b      	lsrs	r3, r3, #5
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	f043 0302 	orr.w	r3, r3, #2
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d102      	bne.n	80035f0 <HAL_RCC_OscConfig+0xa4c>
 80035ea:	4b84      	ldr	r3, [pc, #528]	@ (80037fc <HAL_RCC_OscConfig+0xc58>)
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	e013      	b.n	8003618 <HAL_RCC_OscConfig+0xa74>
 80035f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035f4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80035f8:	2202      	movs	r2, #2
 80035fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003600:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	fa93 f2a3 	rbit	r2, r3
 800360a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800360e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	4b79      	ldr	r3, [pc, #484]	@ (80037fc <HAL_RCC_OscConfig+0xc58>)
 8003616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003618:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800361c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003620:	2102      	movs	r1, #2
 8003622:	6011      	str	r1, [r2, #0]
 8003624:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003628:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800362c:	6812      	ldr	r2, [r2, #0]
 800362e:	fa92 f1a2 	rbit	r1, r2
 8003632:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003636:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800363a:	6011      	str	r1, [r2, #0]
  return result;
 800363c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003640:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003644:	6812      	ldr	r2, [r2, #0]
 8003646:	fab2 f282 	clz	r2, r2
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003650:	b2d2      	uxtb	r2, r2
 8003652:	f002 021f 	and.w	r2, r2, #31
 8003656:	2101      	movs	r1, #1
 8003658:	fa01 f202 	lsl.w	r2, r1, r2
 800365c:	4013      	ands	r3, r2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d084      	beq.n	800356c <HAL_RCC_OscConfig+0x9c8>
 8003662:	e07f      	b.n	8003764 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003664:	f7fe f9ea 	bl	8001a3c <HAL_GetTick>
 8003668:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800366c:	e00b      	b.n	8003686 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800366e:	f7fe f9e5 	bl	8001a3c <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800367e:	4293      	cmp	r3, r2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e2c4      	b.n	8003c10 <HAL_RCC_OscConfig+0x106c>
 8003686:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800368a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800368e:	2202      	movs	r2, #2
 8003690:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003692:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003696:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	fa93 f2a3 	rbit	r2, r3
 80036a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036a4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036ae:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80036b2:	2202      	movs	r2, #2
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036ba:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	fa93 f2a3 	rbit	r2, r3
 80036c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036c8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80036cc:	601a      	str	r2, [r3, #0]
  return result;
 80036ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036d2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80036d6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036d8:	fab3 f383 	clz	r3, r3
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	095b      	lsrs	r3, r3, #5
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	f043 0302 	orr.w	r3, r3, #2
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d102      	bne.n	80036f2 <HAL_RCC_OscConfig+0xb4e>
 80036ec:	4b43      	ldr	r3, [pc, #268]	@ (80037fc <HAL_RCC_OscConfig+0xc58>)
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	e013      	b.n	800371a <HAL_RCC_OscConfig+0xb76>
 80036f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036f6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80036fa:	2202      	movs	r2, #2
 80036fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003702:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	fa93 f2a3 	rbit	r2, r3
 800370c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003710:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003714:	601a      	str	r2, [r3, #0]
 8003716:	4b39      	ldr	r3, [pc, #228]	@ (80037fc <HAL_RCC_OscConfig+0xc58>)
 8003718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800371e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003722:	2102      	movs	r1, #2
 8003724:	6011      	str	r1, [r2, #0]
 8003726:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800372a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800372e:	6812      	ldr	r2, [r2, #0]
 8003730:	fa92 f1a2 	rbit	r1, r2
 8003734:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003738:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800373c:	6011      	str	r1, [r2, #0]
  return result;
 800373e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003742:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003746:	6812      	ldr	r2, [r2, #0]
 8003748:	fab2 f282 	clz	r2, r2
 800374c:	b2d2      	uxtb	r2, r2
 800374e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	f002 021f 	and.w	r2, r2, #31
 8003758:	2101      	movs	r1, #1
 800375a:	fa01 f202 	lsl.w	r2, r1, r2
 800375e:	4013      	ands	r3, r2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d184      	bne.n	800366e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003764:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003768:	2b01      	cmp	r3, #1
 800376a:	d105      	bne.n	8003778 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800376c:	4b23      	ldr	r3, [pc, #140]	@ (80037fc <HAL_RCC_OscConfig+0xc58>)
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	4a22      	ldr	r2, [pc, #136]	@ (80037fc <HAL_RCC_OscConfig+0xc58>)
 8003772:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003776:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003778:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800377c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	69db      	ldr	r3, [r3, #28]
 8003784:	2b00      	cmp	r3, #0
 8003786:	f000 8242 	beq.w	8003c0e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800378a:	4b1c      	ldr	r3, [pc, #112]	@ (80037fc <HAL_RCC_OscConfig+0xc58>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f003 030c 	and.w	r3, r3, #12
 8003792:	2b08      	cmp	r3, #8
 8003794:	f000 8213 	beq.w	8003bbe <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003798:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800379c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	69db      	ldr	r3, [r3, #28]
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	f040 8162 	bne.w	8003a6e <HAL_RCC_OscConfig+0xeca>
 80037aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ae:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80037b2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80037b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037bc:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	fa93 f2a3 	rbit	r2, r3
 80037c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ca:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80037ce:	601a      	str	r2, [r3, #0]
  return result;
 80037d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037d4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80037d8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037da:	fab3 f383 	clz	r3, r3
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80037e4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	461a      	mov	r2, r3
 80037ec:	2300      	movs	r3, #0
 80037ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f0:	f7fe f924 	bl	8001a3c <HAL_GetTick>
 80037f4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037f8:	e00c      	b.n	8003814 <HAL_RCC_OscConfig+0xc70>
 80037fa:	bf00      	nop
 80037fc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003800:	f7fe f91c 	bl	8001a3c <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e1fd      	b.n	8003c10 <HAL_RCC_OscConfig+0x106c>
 8003814:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003818:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800381c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003820:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003822:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003826:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	fa93 f2a3 	rbit	r2, r3
 8003830:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003834:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003838:	601a      	str	r2, [r3, #0]
  return result;
 800383a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800383e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003842:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003844:	fab3 f383 	clz	r3, r3
 8003848:	b2db      	uxtb	r3, r3
 800384a:	095b      	lsrs	r3, r3, #5
 800384c:	b2db      	uxtb	r3, r3
 800384e:	f043 0301 	orr.w	r3, r3, #1
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b01      	cmp	r3, #1
 8003856:	d102      	bne.n	800385e <HAL_RCC_OscConfig+0xcba>
 8003858:	4bb0      	ldr	r3, [pc, #704]	@ (8003b1c <HAL_RCC_OscConfig+0xf78>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	e027      	b.n	80038ae <HAL_RCC_OscConfig+0xd0a>
 800385e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003862:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003866:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800386a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003870:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	fa93 f2a3 	rbit	r2, r3
 800387a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800387e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003888:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800388c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003896:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	fa93 f2a3 	rbit	r2, r3
 80038a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038a4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	4b9c      	ldr	r3, [pc, #624]	@ (8003b1c <HAL_RCC_OscConfig+0xf78>)
 80038ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038b2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80038b6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80038ba:	6011      	str	r1, [r2, #0]
 80038bc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038c0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80038c4:	6812      	ldr	r2, [r2, #0]
 80038c6:	fa92 f1a2 	rbit	r1, r2
 80038ca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038ce:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80038d2:	6011      	str	r1, [r2, #0]
  return result;
 80038d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038d8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80038dc:	6812      	ldr	r2, [r2, #0]
 80038de:	fab2 f282 	clz	r2, r2
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	f042 0220 	orr.w	r2, r2, #32
 80038e8:	b2d2      	uxtb	r2, r2
 80038ea:	f002 021f 	and.w	r2, r2, #31
 80038ee:	2101      	movs	r1, #1
 80038f0:	fa01 f202 	lsl.w	r2, r1, r2
 80038f4:	4013      	ands	r3, r2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d182      	bne.n	8003800 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038fa:	4b88      	ldr	r3, [pc, #544]	@ (8003b1c <HAL_RCC_OscConfig+0xf78>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003902:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003906:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800390e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003912:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	430b      	orrs	r3, r1
 800391c:	497f      	ldr	r1, [pc, #508]	@ (8003b1c <HAL_RCC_OscConfig+0xf78>)
 800391e:	4313      	orrs	r3, r2
 8003920:	604b      	str	r3, [r1, #4]
 8003922:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003926:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800392a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800392e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003930:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003934:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	fa93 f2a3 	rbit	r2, r3
 800393e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003942:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003946:	601a      	str	r2, [r3, #0]
  return result;
 8003948:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800394c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003950:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003952:	fab3 f383 	clz	r3, r3
 8003956:	b2db      	uxtb	r3, r3
 8003958:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800395c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	461a      	mov	r2, r3
 8003964:	2301      	movs	r3, #1
 8003966:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003968:	f7fe f868 	bl	8001a3c <HAL_GetTick>
 800396c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003970:	e009      	b.n	8003986 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003972:	f7fe f863 	bl	8001a3c <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e144      	b.n	8003c10 <HAL_RCC_OscConfig+0x106c>
 8003986:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800398a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800398e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003992:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003994:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003998:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	fa93 f2a3 	rbit	r2, r3
 80039a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039a6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80039aa:	601a      	str	r2, [r3, #0]
  return result;
 80039ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039b0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80039b4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039b6:	fab3 f383 	clz	r3, r3
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	095b      	lsrs	r3, r3, #5
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	f043 0301 	orr.w	r3, r3, #1
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d102      	bne.n	80039d0 <HAL_RCC_OscConfig+0xe2c>
 80039ca:	4b54      	ldr	r3, [pc, #336]	@ (8003b1c <HAL_RCC_OscConfig+0xf78>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	e027      	b.n	8003a20 <HAL_RCC_OscConfig+0xe7c>
 80039d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039d4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80039d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80039dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039e2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	fa93 f2a3 	rbit	r2, r3
 80039ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039f0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039fa:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80039fe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a08:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	fa93 f2a3 	rbit	r2, r3
 8003a12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a16:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	4b3f      	ldr	r3, [pc, #252]	@ (8003b1c <HAL_RCC_OscConfig+0xf78>)
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a20:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a24:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003a28:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003a2c:	6011      	str	r1, [r2, #0]
 8003a2e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a32:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003a36:	6812      	ldr	r2, [r2, #0]
 8003a38:	fa92 f1a2 	rbit	r1, r2
 8003a3c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a40:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003a44:	6011      	str	r1, [r2, #0]
  return result;
 8003a46:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a4a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003a4e:	6812      	ldr	r2, [r2, #0]
 8003a50:	fab2 f282 	clz	r2, r2
 8003a54:	b2d2      	uxtb	r2, r2
 8003a56:	f042 0220 	orr.w	r2, r2, #32
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	f002 021f 	and.w	r2, r2, #31
 8003a60:	2101      	movs	r1, #1
 8003a62:	fa01 f202 	lsl.w	r2, r1, r2
 8003a66:	4013      	ands	r3, r2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d082      	beq.n	8003972 <HAL_RCC_OscConfig+0xdce>
 8003a6c:	e0cf      	b.n	8003c0e <HAL_RCC_OscConfig+0x106a>
 8003a6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a72:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003a76:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003a7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a80:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	fa93 f2a3 	rbit	r2, r3
 8003a8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a8e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003a92:	601a      	str	r2, [r3, #0]
  return result;
 8003a94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a98:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003a9c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a9e:	fab3 f383 	clz	r3, r3
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003aa8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	461a      	mov	r2, r3
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab4:	f7fd ffc2 	bl	8001a3c <HAL_GetTick>
 8003ab8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003abc:	e009      	b.n	8003ad2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003abe:	f7fd ffbd 	bl	8001a3c <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e09e      	b.n	8003c10 <HAL_RCC_OscConfig+0x106c>
 8003ad2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ad6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003ada:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ade:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ae4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	fa93 f2a3 	rbit	r2, r3
 8003aee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003af2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003af6:	601a      	str	r2, [r3, #0]
  return result;
 8003af8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003afc:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003b00:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b02:	fab3 f383 	clz	r3, r3
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	095b      	lsrs	r3, r3, #5
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	f043 0301 	orr.w	r3, r3, #1
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d104      	bne.n	8003b20 <HAL_RCC_OscConfig+0xf7c>
 8003b16:	4b01      	ldr	r3, [pc, #4]	@ (8003b1c <HAL_RCC_OscConfig+0xf78>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	e029      	b.n	8003b70 <HAL_RCC_OscConfig+0xfcc>
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b24:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003b28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b32:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	fa93 f2a3 	rbit	r2, r3
 8003b3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b40:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b4a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003b4e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b52:	601a      	str	r2, [r3, #0]
 8003b54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b58:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	fa93 f2a3 	rbit	r2, r3
 8003b62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b66:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	4b2b      	ldr	r3, [pc, #172]	@ (8003c1c <HAL_RCC_OscConfig+0x1078>)
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b70:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b74:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003b78:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003b7c:	6011      	str	r1, [r2, #0]
 8003b7e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b82:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003b86:	6812      	ldr	r2, [r2, #0]
 8003b88:	fa92 f1a2 	rbit	r1, r2
 8003b8c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b90:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003b94:	6011      	str	r1, [r2, #0]
  return result;
 8003b96:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b9a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003b9e:	6812      	ldr	r2, [r2, #0]
 8003ba0:	fab2 f282 	clz	r2, r2
 8003ba4:	b2d2      	uxtb	r2, r2
 8003ba6:	f042 0220 	orr.w	r2, r2, #32
 8003baa:	b2d2      	uxtb	r2, r2
 8003bac:	f002 021f 	and.w	r2, r2, #31
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	fa01 f202 	lsl.w	r2, r1, r2
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d180      	bne.n	8003abe <HAL_RCC_OscConfig+0xf1a>
 8003bbc:	e027      	b.n	8003c0e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bc2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d101      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e01e      	b.n	8003c10 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003bd2:	4b12      	ldr	r3, [pc, #72]	@ (8003c1c <HAL_RCC_OscConfig+0x1078>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003bda:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003bde:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003be2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003be6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d10b      	bne.n	8003c0a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003bf2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003bf6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003bfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bfe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d001      	beq.n	8003c0e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e000      	b.n	8003c10 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	40021000 	.word	0x40021000

08003c20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b09e      	sub	sp, #120	@ 0x78
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d101      	bne.n	8003c38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e162      	b.n	8003efe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c38:	4b90      	ldr	r3, [pc, #576]	@ (8003e7c <HAL_RCC_ClockConfig+0x25c>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0307 	and.w	r3, r3, #7
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d910      	bls.n	8003c68 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c46:	4b8d      	ldr	r3, [pc, #564]	@ (8003e7c <HAL_RCC_ClockConfig+0x25c>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f023 0207 	bic.w	r2, r3, #7
 8003c4e:	498b      	ldr	r1, [pc, #556]	@ (8003e7c <HAL_RCC_ClockConfig+0x25c>)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c56:	4b89      	ldr	r3, [pc, #548]	@ (8003e7c <HAL_RCC_ClockConfig+0x25c>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d001      	beq.n	8003c68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e14a      	b.n	8003efe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d008      	beq.n	8003c86 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c74:	4b82      	ldr	r3, [pc, #520]	@ (8003e80 <HAL_RCC_ClockConfig+0x260>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	497f      	ldr	r1, [pc, #508]	@ (8003e80 <HAL_RCC_ClockConfig+0x260>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f000 80dc 	beq.w	8003e4c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d13c      	bne.n	8003d16 <HAL_RCC_ClockConfig+0xf6>
 8003c9c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ca0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ca4:	fa93 f3a3 	rbit	r3, r3
 8003ca8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003caa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cac:	fab3 f383 	clz	r3, r3
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	095b      	lsrs	r3, r3, #5
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	f043 0301 	orr.w	r3, r3, #1
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d102      	bne.n	8003cc6 <HAL_RCC_ClockConfig+0xa6>
 8003cc0:	4b6f      	ldr	r3, [pc, #444]	@ (8003e80 <HAL_RCC_ClockConfig+0x260>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	e00f      	b.n	8003ce6 <HAL_RCC_ClockConfig+0xc6>
 8003cc6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003cca:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ccc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003cce:	fa93 f3a3 	rbit	r3, r3
 8003cd2:	667b      	str	r3, [r7, #100]	@ 0x64
 8003cd4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003cd8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003cda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003cdc:	fa93 f3a3 	rbit	r3, r3
 8003ce0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ce2:	4b67      	ldr	r3, [pc, #412]	@ (8003e80 <HAL_RCC_ClockConfig+0x260>)
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003cea:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003cec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003cee:	fa92 f2a2 	rbit	r2, r2
 8003cf2:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003cf4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003cf6:	fab2 f282 	clz	r2, r2
 8003cfa:	b2d2      	uxtb	r2, r2
 8003cfc:	f042 0220 	orr.w	r2, r2, #32
 8003d00:	b2d2      	uxtb	r2, r2
 8003d02:	f002 021f 	and.w	r2, r2, #31
 8003d06:	2101      	movs	r1, #1
 8003d08:	fa01 f202 	lsl.w	r2, r1, r2
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d17b      	bne.n	8003e0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e0f3      	b.n	8003efe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d13c      	bne.n	8003d98 <HAL_RCC_ClockConfig+0x178>
 8003d1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d22:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d26:	fa93 f3a3 	rbit	r3, r3
 8003d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003d2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d2e:	fab3 f383 	clz	r3, r3
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	095b      	lsrs	r3, r3, #5
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	f043 0301 	orr.w	r3, r3, #1
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d102      	bne.n	8003d48 <HAL_RCC_ClockConfig+0x128>
 8003d42:	4b4f      	ldr	r3, [pc, #316]	@ (8003e80 <HAL_RCC_ClockConfig+0x260>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	e00f      	b.n	8003d68 <HAL_RCC_ClockConfig+0x148>
 8003d48:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d50:	fa93 f3a3 	rbit	r3, r3
 8003d54:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d56:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d5e:	fa93 f3a3 	rbit	r3, r3
 8003d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d64:	4b46      	ldr	r3, [pc, #280]	@ (8003e80 <HAL_RCC_ClockConfig+0x260>)
 8003d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d68:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d6c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003d6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003d70:	fa92 f2a2 	rbit	r2, r2
 8003d74:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003d76:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d78:	fab2 f282 	clz	r2, r2
 8003d7c:	b2d2      	uxtb	r2, r2
 8003d7e:	f042 0220 	orr.w	r2, r2, #32
 8003d82:	b2d2      	uxtb	r2, r2
 8003d84:	f002 021f 	and.w	r2, r2, #31
 8003d88:	2101      	movs	r1, #1
 8003d8a:	fa01 f202 	lsl.w	r2, r1, r2
 8003d8e:	4013      	ands	r3, r2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d13a      	bne.n	8003e0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e0b2      	b.n	8003efe <HAL_RCC_ClockConfig+0x2de>
 8003d98:	2302      	movs	r3, #2
 8003d9a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d9e:	fa93 f3a3 	rbit	r3, r3
 8003da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da6:	fab3 f383 	clz	r3, r3
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	095b      	lsrs	r3, r3, #5
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	f043 0301 	orr.w	r3, r3, #1
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d102      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0x1a0>
 8003dba:	4b31      	ldr	r3, [pc, #196]	@ (8003e80 <HAL_RCC_ClockConfig+0x260>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	e00d      	b.n	8003ddc <HAL_RCC_ClockConfig+0x1bc>
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc6:	fa93 f3a3 	rbit	r3, r3
 8003dca:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dcc:	2302      	movs	r3, #2
 8003dce:	623b      	str	r3, [r7, #32]
 8003dd0:	6a3b      	ldr	r3, [r7, #32]
 8003dd2:	fa93 f3a3 	rbit	r3, r3
 8003dd6:	61fb      	str	r3, [r7, #28]
 8003dd8:	4b29      	ldr	r3, [pc, #164]	@ (8003e80 <HAL_RCC_ClockConfig+0x260>)
 8003dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ddc:	2202      	movs	r2, #2
 8003dde:	61ba      	str	r2, [r7, #24]
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	fa92 f2a2 	rbit	r2, r2
 8003de6:	617a      	str	r2, [r7, #20]
  return result;
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	fab2 f282 	clz	r2, r2
 8003dee:	b2d2      	uxtb	r2, r2
 8003df0:	f042 0220 	orr.w	r2, r2, #32
 8003df4:	b2d2      	uxtb	r2, r2
 8003df6:	f002 021f 	and.w	r2, r2, #31
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8003e00:	4013      	ands	r3, r2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e079      	b.n	8003efe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e0a:	4b1d      	ldr	r3, [pc, #116]	@ (8003e80 <HAL_RCC_ClockConfig+0x260>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f023 0203 	bic.w	r2, r3, #3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	491a      	ldr	r1, [pc, #104]	@ (8003e80 <HAL_RCC_ClockConfig+0x260>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e1c:	f7fd fe0e 	bl	8001a3c <HAL_GetTick>
 8003e20:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e22:	e00a      	b.n	8003e3a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e24:	f7fd fe0a 	bl	8001a3c <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e061      	b.n	8003efe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e3a:	4b11      	ldr	r3, [pc, #68]	@ (8003e80 <HAL_RCC_ClockConfig+0x260>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f003 020c 	and.w	r2, r3, #12
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d1eb      	bne.n	8003e24 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e7c <HAL_RCC_ClockConfig+0x25c>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0307 	and.w	r3, r3, #7
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d214      	bcs.n	8003e84 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e5a:	4b08      	ldr	r3, [pc, #32]	@ (8003e7c <HAL_RCC_ClockConfig+0x25c>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f023 0207 	bic.w	r2, r3, #7
 8003e62:	4906      	ldr	r1, [pc, #24]	@ (8003e7c <HAL_RCC_ClockConfig+0x25c>)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e6a:	4b04      	ldr	r3, [pc, #16]	@ (8003e7c <HAL_RCC_ClockConfig+0x25c>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0307 	and.w	r3, r3, #7
 8003e72:	683a      	ldr	r2, [r7, #0]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d005      	beq.n	8003e84 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e040      	b.n	8003efe <HAL_RCC_ClockConfig+0x2de>
 8003e7c:	40022000 	.word	0x40022000
 8003e80:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0304 	and.w	r3, r3, #4
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d008      	beq.n	8003ea2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e90:	4b1d      	ldr	r3, [pc, #116]	@ (8003f08 <HAL_RCC_ClockConfig+0x2e8>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	491a      	ldr	r1, [pc, #104]	@ (8003f08 <HAL_RCC_ClockConfig+0x2e8>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0308 	and.w	r3, r3, #8
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d009      	beq.n	8003ec2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003eae:	4b16      	ldr	r3, [pc, #88]	@ (8003f08 <HAL_RCC_ClockConfig+0x2e8>)
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	00db      	lsls	r3, r3, #3
 8003ebc:	4912      	ldr	r1, [pc, #72]	@ (8003f08 <HAL_RCC_ClockConfig+0x2e8>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003ec2:	f000 f829 	bl	8003f18 <HAL_RCC_GetSysClockFreq>
 8003ec6:	4601      	mov	r1, r0
 8003ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8003f08 <HAL_RCC_ClockConfig+0x2e8>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ed0:	22f0      	movs	r2, #240	@ 0xf0
 8003ed2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	fa92 f2a2 	rbit	r2, r2
 8003eda:	60fa      	str	r2, [r7, #12]
  return result;
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	fab2 f282 	clz	r2, r2
 8003ee2:	b2d2      	uxtb	r2, r2
 8003ee4:	40d3      	lsrs	r3, r2
 8003ee6:	4a09      	ldr	r2, [pc, #36]	@ (8003f0c <HAL_RCC_ClockConfig+0x2ec>)
 8003ee8:	5cd3      	ldrb	r3, [r2, r3]
 8003eea:	fa21 f303 	lsr.w	r3, r1, r3
 8003eee:	4a08      	ldr	r2, [pc, #32]	@ (8003f10 <HAL_RCC_ClockConfig+0x2f0>)
 8003ef0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003ef2:	4b08      	ldr	r3, [pc, #32]	@ (8003f14 <HAL_RCC_ClockConfig+0x2f4>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7fd fd5c 	bl	80019b4 <HAL_InitTick>
  
  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3778      	adds	r7, #120	@ 0x78
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	0800a4d0 	.word	0x0800a4d0
 8003f10:	20000000 	.word	0x20000000
 8003f14:	20000004 	.word	0x20000004

08003f18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b087      	sub	sp, #28
 8003f1c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60fb      	str	r3, [r7, #12]
 8003f22:	2300      	movs	r3, #0
 8003f24:	60bb      	str	r3, [r7, #8]
 8003f26:	2300      	movs	r3, #0
 8003f28:	617b      	str	r3, [r7, #20]
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003f32:	4b1e      	ldr	r3, [pc, #120]	@ (8003fac <HAL_RCC_GetSysClockFreq+0x94>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f003 030c 	and.w	r3, r3, #12
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	d002      	beq.n	8003f48 <HAL_RCC_GetSysClockFreq+0x30>
 8003f42:	2b08      	cmp	r3, #8
 8003f44:	d003      	beq.n	8003f4e <HAL_RCC_GetSysClockFreq+0x36>
 8003f46:	e026      	b.n	8003f96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f48:	4b19      	ldr	r3, [pc, #100]	@ (8003fb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f4a:	613b      	str	r3, [r7, #16]
      break;
 8003f4c:	e026      	b.n	8003f9c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	0c9b      	lsrs	r3, r3, #18
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	4a17      	ldr	r2, [pc, #92]	@ (8003fb4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f58:	5cd3      	ldrb	r3, [r2, r3]
 8003f5a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003f5c:	4b13      	ldr	r3, [pc, #76]	@ (8003fac <HAL_RCC_GetSysClockFreq+0x94>)
 8003f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f60:	f003 030f 	and.w	r3, r3, #15
 8003f64:	4a14      	ldr	r2, [pc, #80]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f66:	5cd3      	ldrb	r3, [r2, r3]
 8003f68:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d008      	beq.n	8003f86 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003f74:	4a0e      	ldr	r2, [pc, #56]	@ (8003fb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	fb02 f303 	mul.w	r3, r2, r3
 8003f82:	617b      	str	r3, [r7, #20]
 8003f84:	e004      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a0c      	ldr	r2, [pc, #48]	@ (8003fbc <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f8a:	fb02 f303 	mul.w	r3, r2, r3
 8003f8e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	613b      	str	r3, [r7, #16]
      break;
 8003f94:	e002      	b.n	8003f9c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f96:	4b06      	ldr	r3, [pc, #24]	@ (8003fb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f98:	613b      	str	r3, [r7, #16]
      break;
 8003f9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f9c:	693b      	ldr	r3, [r7, #16]
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	371c      	adds	r7, #28
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	007a1200 	.word	0x007a1200
 8003fb4:	0800a4e8 	.word	0x0800a4e8
 8003fb8:	0800a4f8 	.word	0x0800a4f8
 8003fbc:	003d0900 	.word	0x003d0900

08003fc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fc4:	4b03      	ldr	r3, [pc, #12]	@ (8003fd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	20000000 	.word	0x20000000

08003fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003fde:	f7ff ffef 	bl	8003fc0 <HAL_RCC_GetHCLKFreq>
 8003fe2:	4601      	mov	r1, r0
 8003fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8004014 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003fec:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003ff0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	fa92 f2a2 	rbit	r2, r2
 8003ff8:	603a      	str	r2, [r7, #0]
  return result;
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	fab2 f282 	clz	r2, r2
 8004000:	b2d2      	uxtb	r2, r2
 8004002:	40d3      	lsrs	r3, r2
 8004004:	4a04      	ldr	r2, [pc, #16]	@ (8004018 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004006:	5cd3      	ldrb	r3, [r2, r3]
 8004008:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800400c:	4618      	mov	r0, r3
 800400e:	3708      	adds	r7, #8
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	40021000 	.word	0x40021000
 8004018:	0800a4e0 	.word	0x0800a4e0

0800401c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004022:	f7ff ffcd 	bl	8003fc0 <HAL_RCC_GetHCLKFreq>
 8004026:	4601      	mov	r1, r0
 8004028:	4b0b      	ldr	r3, [pc, #44]	@ (8004058 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004030:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004034:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	fa92 f2a2 	rbit	r2, r2
 800403c:	603a      	str	r2, [r7, #0]
  return result;
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	fab2 f282 	clz	r2, r2
 8004044:	b2d2      	uxtb	r2, r2
 8004046:	40d3      	lsrs	r3, r2
 8004048:	4a04      	ldr	r2, [pc, #16]	@ (800405c <HAL_RCC_GetPCLK2Freq+0x40>)
 800404a:	5cd3      	ldrb	r3, [r2, r3]
 800404c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004050:	4618      	mov	r0, r3
 8004052:	3708      	adds	r7, #8
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	40021000 	.word	0x40021000
 800405c:	0800a4e0 	.word	0x0800a4e0

08004060 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b092      	sub	sp, #72	@ 0x48
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004068:	2300      	movs	r3, #0
 800406a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800406c:	2300      	movs	r3, #0
 800406e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004070:	2300      	movs	r3, #0
 8004072:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 80d4 	beq.w	800422c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004084:	4b4e      	ldr	r3, [pc, #312]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10e      	bne.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004090:	4b4b      	ldr	r3, [pc, #300]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004092:	69db      	ldr	r3, [r3, #28]
 8004094:	4a4a      	ldr	r2, [pc, #296]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004096:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800409a:	61d3      	str	r3, [r2, #28]
 800409c:	4b48      	ldr	r3, [pc, #288]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800409e:	69db      	ldr	r3, [r3, #28]
 80040a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040a4:	60bb      	str	r3, [r7, #8]
 80040a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040a8:	2301      	movs	r3, #1
 80040aa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ae:	4b45      	ldr	r3, [pc, #276]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d118      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040ba:	4b42      	ldr	r3, [pc, #264]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a41      	ldr	r2, [pc, #260]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040c4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040c6:	f7fd fcb9 	bl	8001a3c <HAL_GetTick>
 80040ca:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040cc:	e008      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040ce:	f7fd fcb5 	bl	8001a3c <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b64      	cmp	r3, #100	@ 0x64
 80040da:	d901      	bls.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e169      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e0:	4b38      	ldr	r3, [pc, #224]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d0f0      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040ec:	4b34      	ldr	r3, [pc, #208]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f000 8084 	beq.w	8004206 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004106:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004108:	429a      	cmp	r2, r3
 800410a:	d07c      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800410c:	4b2c      	ldr	r3, [pc, #176]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004114:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004116:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800411a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800411e:	fa93 f3a3 	rbit	r3, r3
 8004122:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004126:	fab3 f383 	clz	r3, r3
 800412a:	b2db      	uxtb	r3, r3
 800412c:	461a      	mov	r2, r3
 800412e:	4b26      	ldr	r3, [pc, #152]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004130:	4413      	add	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	461a      	mov	r2, r3
 8004136:	2301      	movs	r3, #1
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800413e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004142:	fa93 f3a3 	rbit	r3, r3
 8004146:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800414a:	fab3 f383 	clz	r3, r3
 800414e:	b2db      	uxtb	r3, r3
 8004150:	461a      	mov	r2, r3
 8004152:	4b1d      	ldr	r3, [pc, #116]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004154:	4413      	add	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	461a      	mov	r2, r3
 800415a:	2300      	movs	r3, #0
 800415c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800415e:	4a18      	ldr	r2, [pc, #96]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004160:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004162:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004164:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b00      	cmp	r3, #0
 800416c:	d04b      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800416e:	f7fd fc65 	bl	8001a3c <HAL_GetTick>
 8004172:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004174:	e00a      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004176:	f7fd fc61 	bl	8001a3c <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004184:	4293      	cmp	r3, r2
 8004186:	d901      	bls.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e113      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800418c:	2302      	movs	r3, #2
 800418e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004192:	fa93 f3a3 	rbit	r3, r3
 8004196:	627b      	str	r3, [r7, #36]	@ 0x24
 8004198:	2302      	movs	r3, #2
 800419a:	623b      	str	r3, [r7, #32]
 800419c:	6a3b      	ldr	r3, [r7, #32]
 800419e:	fa93 f3a3 	rbit	r3, r3
 80041a2:	61fb      	str	r3, [r7, #28]
  return result;
 80041a4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041a6:	fab3 f383 	clz	r3, r3
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	095b      	lsrs	r3, r3, #5
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	f043 0302 	orr.w	r3, r3, #2
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d108      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80041ba:	4b01      	ldr	r3, [pc, #4]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	e00d      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80041c0:	40021000 	.word	0x40021000
 80041c4:	40007000 	.word	0x40007000
 80041c8:	10908100 	.word	0x10908100
 80041cc:	2302      	movs	r3, #2
 80041ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	fa93 f3a3 	rbit	r3, r3
 80041d6:	617b      	str	r3, [r7, #20]
 80041d8:	4b78      	ldr	r3, [pc, #480]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041dc:	2202      	movs	r2, #2
 80041de:	613a      	str	r2, [r7, #16]
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	fa92 f2a2 	rbit	r2, r2
 80041e6:	60fa      	str	r2, [r7, #12]
  return result;
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	fab2 f282 	clz	r2, r2
 80041ee:	b2d2      	uxtb	r2, r2
 80041f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80041f4:	b2d2      	uxtb	r2, r2
 80041f6:	f002 021f 	and.w	r2, r2, #31
 80041fa:	2101      	movs	r1, #1
 80041fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004200:	4013      	ands	r3, r2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d0b7      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004206:	4b6d      	ldr	r3, [pc, #436]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	496a      	ldr	r1, [pc, #424]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004214:	4313      	orrs	r3, r2
 8004216:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004218:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800421c:	2b01      	cmp	r3, #1
 800421e:	d105      	bne.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004220:	4b66      	ldr	r3, [pc, #408]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	4a65      	ldr	r2, [pc, #404]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004226:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800422a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b00      	cmp	r3, #0
 8004236:	d008      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004238:	4b60      	ldr	r3, [pc, #384]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800423a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800423c:	f023 0203 	bic.w	r2, r3, #3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	495d      	ldr	r1, [pc, #372]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004246:	4313      	orrs	r3, r2
 8004248:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d008      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004256:	4b59      	ldr	r3, [pc, #356]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800425a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	4956      	ldr	r1, [pc, #344]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004264:	4313      	orrs	r3, r2
 8004266:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	2b00      	cmp	r3, #0
 8004272:	d008      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004274:	4b51      	ldr	r3, [pc, #324]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004278:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	494e      	ldr	r1, [pc, #312]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004282:	4313      	orrs	r3, r2
 8004284:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0320 	and.w	r3, r3, #32
 800428e:	2b00      	cmp	r3, #0
 8004290:	d008      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004292:	4b4a      	ldr	r3, [pc, #296]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004296:	f023 0210 	bic.w	r2, r3, #16
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	4947      	ldr	r1, [pc, #284]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d008      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80042b0:	4b42      	ldr	r3, [pc, #264]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042bc:	493f      	ldr	r1, [pc, #252]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d008      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042ce:	4b3b      	ldr	r3, [pc, #236]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d2:	f023 0220 	bic.w	r2, r3, #32
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	4938      	ldr	r1, [pc, #224]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0308 	and.w	r3, r3, #8
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d008      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042ec:	4b33      	ldr	r3, [pc, #204]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	4930      	ldr	r1, [pc, #192]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0310 	and.w	r3, r3, #16
 8004306:	2b00      	cmp	r3, #0
 8004308:	d008      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800430a:	4b2c      	ldr	r3, [pc, #176]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800430c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800430e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	4929      	ldr	r1, [pc, #164]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004318:	4313      	orrs	r3, r2
 800431a:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004324:	2b00      	cmp	r3, #0
 8004326:	d008      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004328:	4b24      	ldr	r3, [pc, #144]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004334:	4921      	ldr	r1, [pc, #132]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004336:	4313      	orrs	r3, r2
 8004338:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004342:	2b00      	cmp	r3, #0
 8004344:	d008      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004346:	4b1d      	ldr	r3, [pc, #116]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800434a:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004352:	491a      	ldr	r1, [pc, #104]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004354:	4313      	orrs	r3, r2
 8004356:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004360:	2b00      	cmp	r3, #0
 8004362:	d008      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004364:	4b15      	ldr	r3, [pc, #84]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004368:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004370:	4912      	ldr	r1, [pc, #72]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004372:	4313      	orrs	r3, r2
 8004374:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d008      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004382:	4b0e      	ldr	r3, [pc, #56]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004386:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800438e:	490b      	ldr	r1, [pc, #44]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004390:	4313      	orrs	r3, r2
 8004392:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d008      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80043a0:	4b06      	ldr	r3, [pc, #24]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043ac:	4903      	ldr	r1, [pc, #12]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3748      	adds	r7, #72	@ 0x48
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	40021000 	.word	0x40021000

080043c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e049      	b.n	8004466 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d106      	bne.n	80043ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7fd f8ca 	bl	8001580 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2202      	movs	r2, #2
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3304      	adds	r3, #4
 80043fc:	4619      	mov	r1, r3
 80043fe:	4610      	mov	r0, r2
 8004400:	f000 fa4a 	bl	8004898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
	...

08004470 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d109      	bne.n	8004494 <HAL_TIM_PWM_Start+0x24>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b01      	cmp	r3, #1
 800448a:	bf14      	ite	ne
 800448c:	2301      	movne	r3, #1
 800448e:	2300      	moveq	r3, #0
 8004490:	b2db      	uxtb	r3, r3
 8004492:	e03c      	b.n	800450e <HAL_TIM_PWM_Start+0x9e>
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	2b04      	cmp	r3, #4
 8004498:	d109      	bne.n	80044ae <HAL_TIM_PWM_Start+0x3e>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	bf14      	ite	ne
 80044a6:	2301      	movne	r3, #1
 80044a8:	2300      	moveq	r3, #0
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	e02f      	b.n	800450e <HAL_TIM_PWM_Start+0x9e>
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	2b08      	cmp	r3, #8
 80044b2:	d109      	bne.n	80044c8 <HAL_TIM_PWM_Start+0x58>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b01      	cmp	r3, #1
 80044be:	bf14      	ite	ne
 80044c0:	2301      	movne	r3, #1
 80044c2:	2300      	moveq	r3, #0
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	e022      	b.n	800450e <HAL_TIM_PWM_Start+0x9e>
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	2b0c      	cmp	r3, #12
 80044cc:	d109      	bne.n	80044e2 <HAL_TIM_PWM_Start+0x72>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	bf14      	ite	ne
 80044da:	2301      	movne	r3, #1
 80044dc:	2300      	moveq	r3, #0
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	e015      	b.n	800450e <HAL_TIM_PWM_Start+0x9e>
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	2b10      	cmp	r3, #16
 80044e6:	d109      	bne.n	80044fc <HAL_TIM_PWM_Start+0x8c>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	bf14      	ite	ne
 80044f4:	2301      	movne	r3, #1
 80044f6:	2300      	moveq	r3, #0
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	e008      	b.n	800450e <HAL_TIM_PWM_Start+0x9e>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b01      	cmp	r3, #1
 8004506:	bf14      	ite	ne
 8004508:	2301      	movne	r3, #1
 800450a:	2300      	moveq	r3, #0
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e097      	b.n	8004646 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d104      	bne.n	8004526 <HAL_TIM_PWM_Start+0xb6>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2202      	movs	r2, #2
 8004520:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004524:	e023      	b.n	800456e <HAL_TIM_PWM_Start+0xfe>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b04      	cmp	r3, #4
 800452a:	d104      	bne.n	8004536 <HAL_TIM_PWM_Start+0xc6>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2202      	movs	r2, #2
 8004530:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004534:	e01b      	b.n	800456e <HAL_TIM_PWM_Start+0xfe>
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b08      	cmp	r3, #8
 800453a:	d104      	bne.n	8004546 <HAL_TIM_PWM_Start+0xd6>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004544:	e013      	b.n	800456e <HAL_TIM_PWM_Start+0xfe>
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2b0c      	cmp	r3, #12
 800454a:	d104      	bne.n	8004556 <HAL_TIM_PWM_Start+0xe6>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2202      	movs	r2, #2
 8004550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004554:	e00b      	b.n	800456e <HAL_TIM_PWM_Start+0xfe>
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	2b10      	cmp	r3, #16
 800455a:	d104      	bne.n	8004566 <HAL_TIM_PWM_Start+0xf6>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2202      	movs	r2, #2
 8004560:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004564:	e003      	b.n	800456e <HAL_TIM_PWM_Start+0xfe>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2202      	movs	r2, #2
 800456a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2201      	movs	r2, #1
 8004574:	6839      	ldr	r1, [r7, #0]
 8004576:	4618      	mov	r0, r3
 8004578:	f000 fd00 	bl	8004f7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a33      	ldr	r2, [pc, #204]	@ (8004650 <HAL_TIM_PWM_Start+0x1e0>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d013      	beq.n	80045ae <HAL_TIM_PWM_Start+0x13e>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a32      	ldr	r2, [pc, #200]	@ (8004654 <HAL_TIM_PWM_Start+0x1e4>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d00e      	beq.n	80045ae <HAL_TIM_PWM_Start+0x13e>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a30      	ldr	r2, [pc, #192]	@ (8004658 <HAL_TIM_PWM_Start+0x1e8>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d009      	beq.n	80045ae <HAL_TIM_PWM_Start+0x13e>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a2f      	ldr	r2, [pc, #188]	@ (800465c <HAL_TIM_PWM_Start+0x1ec>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d004      	beq.n	80045ae <HAL_TIM_PWM_Start+0x13e>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a2d      	ldr	r2, [pc, #180]	@ (8004660 <HAL_TIM_PWM_Start+0x1f0>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d101      	bne.n	80045b2 <HAL_TIM_PWM_Start+0x142>
 80045ae:	2301      	movs	r3, #1
 80045b0:	e000      	b.n	80045b4 <HAL_TIM_PWM_Start+0x144>
 80045b2:	2300      	movs	r3, #0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d007      	beq.n	80045c8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80045c6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a20      	ldr	r2, [pc, #128]	@ (8004650 <HAL_TIM_PWM_Start+0x1e0>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d018      	beq.n	8004604 <HAL_TIM_PWM_Start+0x194>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045da:	d013      	beq.n	8004604 <HAL_TIM_PWM_Start+0x194>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a20      	ldr	r2, [pc, #128]	@ (8004664 <HAL_TIM_PWM_Start+0x1f4>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d00e      	beq.n	8004604 <HAL_TIM_PWM_Start+0x194>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a1f      	ldr	r2, [pc, #124]	@ (8004668 <HAL_TIM_PWM_Start+0x1f8>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d009      	beq.n	8004604 <HAL_TIM_PWM_Start+0x194>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a17      	ldr	r2, [pc, #92]	@ (8004654 <HAL_TIM_PWM_Start+0x1e4>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d004      	beq.n	8004604 <HAL_TIM_PWM_Start+0x194>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a16      	ldr	r2, [pc, #88]	@ (8004658 <HAL_TIM_PWM_Start+0x1e8>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d115      	bne.n	8004630 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689a      	ldr	r2, [r3, #8]
 800460a:	4b18      	ldr	r3, [pc, #96]	@ (800466c <HAL_TIM_PWM_Start+0x1fc>)
 800460c:	4013      	ands	r3, r2
 800460e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2b06      	cmp	r3, #6
 8004614:	d015      	beq.n	8004642 <HAL_TIM_PWM_Start+0x1d2>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800461c:	d011      	beq.n	8004642 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f042 0201 	orr.w	r2, r2, #1
 800462c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800462e:	e008      	b.n	8004642 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f042 0201 	orr.w	r2, r2, #1
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	e000      	b.n	8004644 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004642:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	40012c00 	.word	0x40012c00
 8004654:	40013400 	.word	0x40013400
 8004658:	40014000 	.word	0x40014000
 800465c:	40014400 	.word	0x40014400
 8004660:	40014800 	.word	0x40014800
 8004664:	40000400 	.word	0x40000400
 8004668:	40000800 	.word	0x40000800
 800466c:	00010007 	.word	0x00010007

08004670 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800467c:	2300      	movs	r3, #0
 800467e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004686:	2b01      	cmp	r3, #1
 8004688:	d101      	bne.n	800468e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800468a:	2302      	movs	r3, #2
 800468c:	e0ff      	b.n	800488e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b14      	cmp	r3, #20
 800469a:	f200 80f0 	bhi.w	800487e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800469e:	a201      	add	r2, pc, #4	@ (adr r2, 80046a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a4:	080046f9 	.word	0x080046f9
 80046a8:	0800487f 	.word	0x0800487f
 80046ac:	0800487f 	.word	0x0800487f
 80046b0:	0800487f 	.word	0x0800487f
 80046b4:	08004739 	.word	0x08004739
 80046b8:	0800487f 	.word	0x0800487f
 80046bc:	0800487f 	.word	0x0800487f
 80046c0:	0800487f 	.word	0x0800487f
 80046c4:	0800477b 	.word	0x0800477b
 80046c8:	0800487f 	.word	0x0800487f
 80046cc:	0800487f 	.word	0x0800487f
 80046d0:	0800487f 	.word	0x0800487f
 80046d4:	080047bb 	.word	0x080047bb
 80046d8:	0800487f 	.word	0x0800487f
 80046dc:	0800487f 	.word	0x0800487f
 80046e0:	0800487f 	.word	0x0800487f
 80046e4:	080047fd 	.word	0x080047fd
 80046e8:	0800487f 	.word	0x0800487f
 80046ec:	0800487f 	.word	0x0800487f
 80046f0:	0800487f 	.word	0x0800487f
 80046f4:	0800483d 	.word	0x0800483d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68b9      	ldr	r1, [r7, #8]
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 f966 	bl	80049d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	699a      	ldr	r2, [r3, #24]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f042 0208 	orr.w	r2, r2, #8
 8004712:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	699a      	ldr	r2, [r3, #24]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 0204 	bic.w	r2, r2, #4
 8004722:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6999      	ldr	r1, [r3, #24]
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	691a      	ldr	r2, [r3, #16]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	430a      	orrs	r2, r1
 8004734:	619a      	str	r2, [r3, #24]
      break;
 8004736:	e0a5      	b.n	8004884 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68b9      	ldr	r1, [r7, #8]
 800473e:	4618      	mov	r0, r3
 8004740:	f000 f9d6 	bl	8004af0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	699a      	ldr	r2, [r3, #24]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004752:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	699a      	ldr	r2, [r3, #24]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004762:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6999      	ldr	r1, [r3, #24]
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	021a      	lsls	r2, r3, #8
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	619a      	str	r2, [r3, #24]
      break;
 8004778:	e084      	b.n	8004884 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68b9      	ldr	r1, [r7, #8]
 8004780:	4618      	mov	r0, r3
 8004782:	f000 fa3f 	bl	8004c04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	69da      	ldr	r2, [r3, #28]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f042 0208 	orr.w	r2, r2, #8
 8004794:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	69da      	ldr	r2, [r3, #28]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f022 0204 	bic.w	r2, r2, #4
 80047a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	69d9      	ldr	r1, [r3, #28]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	691a      	ldr	r2, [r3, #16]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	430a      	orrs	r2, r1
 80047b6:	61da      	str	r2, [r3, #28]
      break;
 80047b8:	e064      	b.n	8004884 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68b9      	ldr	r1, [r7, #8]
 80047c0:	4618      	mov	r0, r3
 80047c2:	f000 faa7 	bl	8004d14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	69da      	ldr	r2, [r3, #28]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	69da      	ldr	r2, [r3, #28]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	69d9      	ldr	r1, [r3, #28]
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	021a      	lsls	r2, r3, #8
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	61da      	str	r2, [r3, #28]
      break;
 80047fa:	e043      	b.n	8004884 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68b9      	ldr	r1, [r7, #8]
 8004802:	4618      	mov	r0, r3
 8004804:	f000 faf0 	bl	8004de8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f042 0208 	orr.w	r2, r2, #8
 8004816:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0204 	bic.w	r2, r2, #4
 8004826:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	691a      	ldr	r2, [r3, #16]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	430a      	orrs	r2, r1
 8004838:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800483a:	e023      	b.n	8004884 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68b9      	ldr	r1, [r7, #8]
 8004842:	4618      	mov	r0, r3
 8004844:	f000 fb34 	bl	8004eb0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004856:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004866:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	021a      	lsls	r2, r3, #8
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	430a      	orrs	r2, r1
 800487a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800487c:	e002      	b.n	8004884 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	75fb      	strb	r3, [r7, #23]
      break;
 8004882:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800488c:	7dfb      	ldrb	r3, [r7, #23]
}
 800488e:	4618      	mov	r0, r3
 8004890:	3718      	adds	r7, #24
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop

08004898 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a42      	ldr	r2, [pc, #264]	@ (80049b4 <TIM_Base_SetConfig+0x11c>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d00f      	beq.n	80048d0 <TIM_Base_SetConfig+0x38>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048b6:	d00b      	beq.n	80048d0 <TIM_Base_SetConfig+0x38>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a3f      	ldr	r2, [pc, #252]	@ (80049b8 <TIM_Base_SetConfig+0x120>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d007      	beq.n	80048d0 <TIM_Base_SetConfig+0x38>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a3e      	ldr	r2, [pc, #248]	@ (80049bc <TIM_Base_SetConfig+0x124>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d003      	beq.n	80048d0 <TIM_Base_SetConfig+0x38>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a3d      	ldr	r2, [pc, #244]	@ (80049c0 <TIM_Base_SetConfig+0x128>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d108      	bne.n	80048e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	4313      	orrs	r3, r2
 80048e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a33      	ldr	r2, [pc, #204]	@ (80049b4 <TIM_Base_SetConfig+0x11c>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d01b      	beq.n	8004922 <TIM_Base_SetConfig+0x8a>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048f0:	d017      	beq.n	8004922 <TIM_Base_SetConfig+0x8a>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a30      	ldr	r2, [pc, #192]	@ (80049b8 <TIM_Base_SetConfig+0x120>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d013      	beq.n	8004922 <TIM_Base_SetConfig+0x8a>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a2f      	ldr	r2, [pc, #188]	@ (80049bc <TIM_Base_SetConfig+0x124>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d00f      	beq.n	8004922 <TIM_Base_SetConfig+0x8a>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a2e      	ldr	r2, [pc, #184]	@ (80049c0 <TIM_Base_SetConfig+0x128>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d00b      	beq.n	8004922 <TIM_Base_SetConfig+0x8a>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a2d      	ldr	r2, [pc, #180]	@ (80049c4 <TIM_Base_SetConfig+0x12c>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d007      	beq.n	8004922 <TIM_Base_SetConfig+0x8a>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a2c      	ldr	r2, [pc, #176]	@ (80049c8 <TIM_Base_SetConfig+0x130>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d003      	beq.n	8004922 <TIM_Base_SetConfig+0x8a>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a2b      	ldr	r2, [pc, #172]	@ (80049cc <TIM_Base_SetConfig+0x134>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d108      	bne.n	8004934 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	4313      	orrs	r3, r2
 8004932:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	4313      	orrs	r3, r2
 8004940:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	689a      	ldr	r2, [r3, #8]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a16      	ldr	r2, [pc, #88]	@ (80049b4 <TIM_Base_SetConfig+0x11c>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d00f      	beq.n	8004980 <TIM_Base_SetConfig+0xe8>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a17      	ldr	r2, [pc, #92]	@ (80049c0 <TIM_Base_SetConfig+0x128>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d00b      	beq.n	8004980 <TIM_Base_SetConfig+0xe8>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a16      	ldr	r2, [pc, #88]	@ (80049c4 <TIM_Base_SetConfig+0x12c>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d007      	beq.n	8004980 <TIM_Base_SetConfig+0xe8>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a15      	ldr	r2, [pc, #84]	@ (80049c8 <TIM_Base_SetConfig+0x130>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d003      	beq.n	8004980 <TIM_Base_SetConfig+0xe8>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a14      	ldr	r2, [pc, #80]	@ (80049cc <TIM_Base_SetConfig+0x134>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d103      	bne.n	8004988 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	691a      	ldr	r2, [r3, #16]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	2b01      	cmp	r3, #1
 8004998:	d105      	bne.n	80049a6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	f023 0201 	bic.w	r2, r3, #1
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	611a      	str	r2, [r3, #16]
  }
}
 80049a6:	bf00      	nop
 80049a8:	3714      	adds	r7, #20
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	40012c00 	.word	0x40012c00
 80049b8:	40000400 	.word	0x40000400
 80049bc:	40000800 	.word	0x40000800
 80049c0:	40013400 	.word	0x40013400
 80049c4:	40014000 	.word	0x40014000
 80049c8:	40014400 	.word	0x40014400
 80049cc:	40014800 	.word	0x40014800

080049d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b087      	sub	sp, #28
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a1b      	ldr	r3, [r3, #32]
 80049e4:	f023 0201 	bic.w	r2, r3, #1
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f023 0303 	bic.w	r3, r3, #3
 8004a0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f023 0302 	bic.w	r3, r3, #2
 8004a1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a2c      	ldr	r2, [pc, #176]	@ (8004adc <TIM_OC1_SetConfig+0x10c>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d00f      	beq.n	8004a50 <TIM_OC1_SetConfig+0x80>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a2b      	ldr	r2, [pc, #172]	@ (8004ae0 <TIM_OC1_SetConfig+0x110>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d00b      	beq.n	8004a50 <TIM_OC1_SetConfig+0x80>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a2a      	ldr	r2, [pc, #168]	@ (8004ae4 <TIM_OC1_SetConfig+0x114>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d007      	beq.n	8004a50 <TIM_OC1_SetConfig+0x80>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a29      	ldr	r2, [pc, #164]	@ (8004ae8 <TIM_OC1_SetConfig+0x118>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d003      	beq.n	8004a50 <TIM_OC1_SetConfig+0x80>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a28      	ldr	r2, [pc, #160]	@ (8004aec <TIM_OC1_SetConfig+0x11c>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d10c      	bne.n	8004a6a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	f023 0308 	bic.w	r3, r3, #8
 8004a56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f023 0304 	bic.w	r3, r3, #4
 8004a68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a1b      	ldr	r2, [pc, #108]	@ (8004adc <TIM_OC1_SetConfig+0x10c>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d00f      	beq.n	8004a92 <TIM_OC1_SetConfig+0xc2>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a1a      	ldr	r2, [pc, #104]	@ (8004ae0 <TIM_OC1_SetConfig+0x110>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d00b      	beq.n	8004a92 <TIM_OC1_SetConfig+0xc2>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a19      	ldr	r2, [pc, #100]	@ (8004ae4 <TIM_OC1_SetConfig+0x114>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d007      	beq.n	8004a92 <TIM_OC1_SetConfig+0xc2>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a18      	ldr	r2, [pc, #96]	@ (8004ae8 <TIM_OC1_SetConfig+0x118>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d003      	beq.n	8004a92 <TIM_OC1_SetConfig+0xc2>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a17      	ldr	r2, [pc, #92]	@ (8004aec <TIM_OC1_SetConfig+0x11c>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d111      	bne.n	8004ab6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	685a      	ldr	r2, [r3, #4]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	621a      	str	r2, [r3, #32]
}
 8004ad0:	bf00      	nop
 8004ad2:	371c      	adds	r7, #28
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr
 8004adc:	40012c00 	.word	0x40012c00
 8004ae0:	40013400 	.word	0x40013400
 8004ae4:	40014000 	.word	0x40014000
 8004ae8:	40014400 	.word	0x40014400
 8004aec:	40014800 	.word	0x40014800

08004af0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b087      	sub	sp, #28
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a1b      	ldr	r3, [r3, #32]
 8004b04:	f023 0210 	bic.w	r2, r3, #16
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	021b      	lsls	r3, r3, #8
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f023 0320 	bic.w	r3, r3, #32
 8004b3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	011b      	lsls	r3, r3, #4
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a28      	ldr	r2, [pc, #160]	@ (8004bf0 <TIM_OC2_SetConfig+0x100>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d003      	beq.n	8004b5c <TIM_OC2_SetConfig+0x6c>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a27      	ldr	r2, [pc, #156]	@ (8004bf4 <TIM_OC2_SetConfig+0x104>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d10d      	bne.n	8004b78 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	011b      	lsls	r3, r3, #4
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a1d      	ldr	r2, [pc, #116]	@ (8004bf0 <TIM_OC2_SetConfig+0x100>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d00f      	beq.n	8004ba0 <TIM_OC2_SetConfig+0xb0>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a1c      	ldr	r2, [pc, #112]	@ (8004bf4 <TIM_OC2_SetConfig+0x104>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d00b      	beq.n	8004ba0 <TIM_OC2_SetConfig+0xb0>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a1b      	ldr	r2, [pc, #108]	@ (8004bf8 <TIM_OC2_SetConfig+0x108>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d007      	beq.n	8004ba0 <TIM_OC2_SetConfig+0xb0>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a1a      	ldr	r2, [pc, #104]	@ (8004bfc <TIM_OC2_SetConfig+0x10c>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d003      	beq.n	8004ba0 <TIM_OC2_SetConfig+0xb0>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a19      	ldr	r2, [pc, #100]	@ (8004c00 <TIM_OC2_SetConfig+0x110>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d113      	bne.n	8004bc8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ba6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004bae:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	621a      	str	r2, [r3, #32]
}
 8004be2:	bf00      	nop
 8004be4:	371c      	adds	r7, #28
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	40012c00 	.word	0x40012c00
 8004bf4:	40013400 	.word	0x40013400
 8004bf8:	40014000 	.word	0x40014000
 8004bfc:	40014400 	.word	0x40014400
 8004c00:	40014800 	.word	0x40014800

08004c04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b087      	sub	sp, #28
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f023 0303 	bic.w	r3, r3, #3
 8004c3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	021b      	lsls	r3, r3, #8
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a27      	ldr	r2, [pc, #156]	@ (8004d00 <TIM_OC3_SetConfig+0xfc>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d003      	beq.n	8004c6e <TIM_OC3_SetConfig+0x6a>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a26      	ldr	r2, [pc, #152]	@ (8004d04 <TIM_OC3_SetConfig+0x100>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d10d      	bne.n	8004c8a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	021b      	lsls	r3, r3, #8
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c88:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a1c      	ldr	r2, [pc, #112]	@ (8004d00 <TIM_OC3_SetConfig+0xfc>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d00f      	beq.n	8004cb2 <TIM_OC3_SetConfig+0xae>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a1b      	ldr	r2, [pc, #108]	@ (8004d04 <TIM_OC3_SetConfig+0x100>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d00b      	beq.n	8004cb2 <TIM_OC3_SetConfig+0xae>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a1a      	ldr	r2, [pc, #104]	@ (8004d08 <TIM_OC3_SetConfig+0x104>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d007      	beq.n	8004cb2 <TIM_OC3_SetConfig+0xae>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a19      	ldr	r2, [pc, #100]	@ (8004d0c <TIM_OC3_SetConfig+0x108>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d003      	beq.n	8004cb2 <TIM_OC3_SetConfig+0xae>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a18      	ldr	r2, [pc, #96]	@ (8004d10 <TIM_OC3_SetConfig+0x10c>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d113      	bne.n	8004cda <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004cb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	011b      	lsls	r3, r3, #4
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	011b      	lsls	r3, r3, #4
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	685a      	ldr	r2, [r3, #4]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	621a      	str	r2, [r3, #32]
}
 8004cf4:	bf00      	nop
 8004cf6:	371c      	adds	r7, #28
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	40012c00 	.word	0x40012c00
 8004d04:	40013400 	.word	0x40013400
 8004d08:	40014000 	.word	0x40014000
 8004d0c:	40014400 	.word	0x40014400
 8004d10:	40014800 	.word	0x40014800

08004d14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b087      	sub	sp, #28
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	69db      	ldr	r3, [r3, #28]
 8004d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	021b      	lsls	r3, r3, #8
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	031b      	lsls	r3, r3, #12
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a18      	ldr	r2, [pc, #96]	@ (8004dd4 <TIM_OC4_SetConfig+0xc0>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d00f      	beq.n	8004d98 <TIM_OC4_SetConfig+0x84>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a17      	ldr	r2, [pc, #92]	@ (8004dd8 <TIM_OC4_SetConfig+0xc4>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d00b      	beq.n	8004d98 <TIM_OC4_SetConfig+0x84>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a16      	ldr	r2, [pc, #88]	@ (8004ddc <TIM_OC4_SetConfig+0xc8>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d007      	beq.n	8004d98 <TIM_OC4_SetConfig+0x84>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a15      	ldr	r2, [pc, #84]	@ (8004de0 <TIM_OC4_SetConfig+0xcc>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d003      	beq.n	8004d98 <TIM_OC4_SetConfig+0x84>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a14      	ldr	r2, [pc, #80]	@ (8004de4 <TIM_OC4_SetConfig+0xd0>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d109      	bne.n	8004dac <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	019b      	lsls	r3, r3, #6
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685a      	ldr	r2, [r3, #4]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	621a      	str	r2, [r3, #32]
}
 8004dc6:	bf00      	nop
 8004dc8:	371c      	adds	r7, #28
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	40012c00 	.word	0x40012c00
 8004dd8:	40013400 	.word	0x40013400
 8004ddc:	40014000 	.word	0x40014000
 8004de0:	40014400 	.word	0x40014400
 8004de4:	40014800 	.word	0x40014800

08004de8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b087      	sub	sp, #28
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004e2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	041b      	lsls	r3, r3, #16
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a17      	ldr	r2, [pc, #92]	@ (8004e9c <TIM_OC5_SetConfig+0xb4>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d00f      	beq.n	8004e62 <TIM_OC5_SetConfig+0x7a>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a16      	ldr	r2, [pc, #88]	@ (8004ea0 <TIM_OC5_SetConfig+0xb8>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d00b      	beq.n	8004e62 <TIM_OC5_SetConfig+0x7a>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a15      	ldr	r2, [pc, #84]	@ (8004ea4 <TIM_OC5_SetConfig+0xbc>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d007      	beq.n	8004e62 <TIM_OC5_SetConfig+0x7a>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a14      	ldr	r2, [pc, #80]	@ (8004ea8 <TIM_OC5_SetConfig+0xc0>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d003      	beq.n	8004e62 <TIM_OC5_SetConfig+0x7a>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a13      	ldr	r2, [pc, #76]	@ (8004eac <TIM_OC5_SetConfig+0xc4>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d109      	bne.n	8004e76 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	021b      	lsls	r3, r3, #8
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	621a      	str	r2, [r3, #32]
}
 8004e90:	bf00      	nop
 8004e92:	371c      	adds	r7, #28
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr
 8004e9c:	40012c00 	.word	0x40012c00
 8004ea0:	40013400 	.word	0x40013400
 8004ea4:	40014000 	.word	0x40014000
 8004ea8:	40014400 	.word	0x40014400
 8004eac:	40014800 	.word	0x40014800

08004eb0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b087      	sub	sp, #28
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
 8004ebe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a1b      	ldr	r3, [r3, #32]
 8004ec4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ede:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ee2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	021b      	lsls	r3, r3, #8
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004ef6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	051b      	lsls	r3, r3, #20
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a18      	ldr	r2, [pc, #96]	@ (8004f68 <TIM_OC6_SetConfig+0xb8>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d00f      	beq.n	8004f2c <TIM_OC6_SetConfig+0x7c>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a17      	ldr	r2, [pc, #92]	@ (8004f6c <TIM_OC6_SetConfig+0xbc>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d00b      	beq.n	8004f2c <TIM_OC6_SetConfig+0x7c>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a16      	ldr	r2, [pc, #88]	@ (8004f70 <TIM_OC6_SetConfig+0xc0>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d007      	beq.n	8004f2c <TIM_OC6_SetConfig+0x7c>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a15      	ldr	r2, [pc, #84]	@ (8004f74 <TIM_OC6_SetConfig+0xc4>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d003      	beq.n	8004f2c <TIM_OC6_SetConfig+0x7c>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a14      	ldr	r2, [pc, #80]	@ (8004f78 <TIM_OC6_SetConfig+0xc8>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d109      	bne.n	8004f40 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	029b      	lsls	r3, r3, #10
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	621a      	str	r2, [r3, #32]
}
 8004f5a:	bf00      	nop
 8004f5c:	371c      	adds	r7, #28
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	40012c00 	.word	0x40012c00
 8004f6c:	40013400 	.word	0x40013400
 8004f70:	40014000 	.word	0x40014000
 8004f74:	40014400 	.word	0x40014400
 8004f78:	40014800 	.word	0x40014800

08004f7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b087      	sub	sp, #28
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f003 031f 	and.w	r3, r3, #31
 8004f8e:	2201      	movs	r2, #1
 8004f90:	fa02 f303 	lsl.w	r3, r2, r3
 8004f94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6a1a      	ldr	r2, [r3, #32]
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	43db      	mvns	r3, r3
 8004f9e:	401a      	ands	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6a1a      	ldr	r2, [r3, #32]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	f003 031f 	and.w	r3, r3, #31
 8004fae:	6879      	ldr	r1, [r7, #4]
 8004fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb4:	431a      	orrs	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	621a      	str	r2, [r3, #32]
}
 8004fba:	bf00      	nop
 8004fbc:	371c      	adds	r7, #28
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
	...

08004fc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d101      	bne.n	8004fe0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fdc:	2302      	movs	r3, #2
 8004fde:	e063      	b.n	80050a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2202      	movs	r2, #2
 8004fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a2b      	ldr	r2, [pc, #172]	@ (80050b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d004      	beq.n	8005014 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a2a      	ldr	r2, [pc, #168]	@ (80050b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d108      	bne.n	8005026 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800501a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	4313      	orrs	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800502c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	4313      	orrs	r3, r2
 8005036:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a1b      	ldr	r2, [pc, #108]	@ (80050b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d018      	beq.n	800507c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005052:	d013      	beq.n	800507c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a18      	ldr	r2, [pc, #96]	@ (80050bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d00e      	beq.n	800507c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a17      	ldr	r2, [pc, #92]	@ (80050c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d009      	beq.n	800507c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a12      	ldr	r2, [pc, #72]	@ (80050b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d004      	beq.n	800507c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a13      	ldr	r2, [pc, #76]	@ (80050c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d10c      	bne.n	8005096 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005082:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	4313      	orrs	r3, r2
 800508c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3714      	adds	r7, #20
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr
 80050b4:	40012c00 	.word	0x40012c00
 80050b8:	40013400 	.word	0x40013400
 80050bc:	40000400 	.word	0x40000400
 80050c0:	40000800 	.word	0x40000800
 80050c4:	40014000 	.word	0x40014000

080050c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80050d2:	2300      	movs	r3, #0
 80050d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d101      	bne.n	80050e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80050e0:	2302      	movs	r3, #2
 80050e2:	e065      	b.n	80051b0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	4313      	orrs	r3, r2
 8005106:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	4313      	orrs	r3, r2
 8005114:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4313      	orrs	r3, r2
 8005122:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	4313      	orrs	r3, r2
 8005130:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	695b      	ldr	r3, [r3, #20]
 800513c:	4313      	orrs	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800514a:	4313      	orrs	r3, r2
 800514c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	041b      	lsls	r3, r3, #16
 800515a:	4313      	orrs	r3, r2
 800515c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a16      	ldr	r2, [pc, #88]	@ (80051bc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d004      	beq.n	8005172 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a14      	ldr	r2, [pc, #80]	@ (80051c0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d115      	bne.n	800519e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800517c:	051b      	lsls	r3, r3, #20
 800517e:	4313      	orrs	r3, r2
 8005180:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	69db      	ldr	r3, [r3, #28]
 800518c:	4313      	orrs	r3, r2
 800518e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	4313      	orrs	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3714      	adds	r7, #20
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	40012c00 	.word	0x40012c00
 80051c0:	40013400 	.word	0x40013400

080051c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d101      	bne.n	80051d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e040      	b.n	8005258 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d106      	bne.n	80051ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7fc fa58 	bl	800169c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2224      	movs	r2, #36	@ 0x24
 80051f0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f022 0201 	bic.w	r2, r2, #1
 8005200:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005206:	2b00      	cmp	r3, #0
 8005208:	d002      	beq.n	8005210 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 fa86 	bl	800571c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 f8af 	bl	8005374 <UART_SetConfig>
 8005216:	4603      	mov	r3, r0
 8005218:	2b01      	cmp	r3, #1
 800521a:	d101      	bne.n	8005220 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e01b      	b.n	8005258 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800522e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	689a      	ldr	r2, [r3, #8]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800523e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f042 0201 	orr.w	r2, r2, #1
 800524e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 fb05 	bl	8005860 <UART_CheckIdleState>
 8005256:	4603      	mov	r3, r0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3708      	adds	r7, #8
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b08a      	sub	sp, #40	@ 0x28
 8005264:	af02      	add	r7, sp, #8
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	603b      	str	r3, [r7, #0]
 800526c:	4613      	mov	r3, r2
 800526e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005274:	2b20      	cmp	r3, #32
 8005276:	d177      	bne.n	8005368 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d002      	beq.n	8005284 <HAL_UART_Transmit+0x24>
 800527e:	88fb      	ldrh	r3, [r7, #6]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e070      	b.n	800536a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2221      	movs	r2, #33	@ 0x21
 8005294:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005296:	f7fc fbd1 	bl	8001a3c <HAL_GetTick>
 800529a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	88fa      	ldrh	r2, [r7, #6]
 80052a0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	88fa      	ldrh	r2, [r7, #6]
 80052a8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052b4:	d108      	bne.n	80052c8 <HAL_UART_Transmit+0x68>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d104      	bne.n	80052c8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80052be:	2300      	movs	r3, #0
 80052c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	61bb      	str	r3, [r7, #24]
 80052c6:	e003      	b.n	80052d0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052cc:	2300      	movs	r3, #0
 80052ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052d0:	e02f      	b.n	8005332 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	2200      	movs	r2, #0
 80052da:	2180      	movs	r1, #128	@ 0x80
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f000 fb67 	bl	80059b0 <UART_WaitOnFlagUntilTimeout>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d004      	beq.n	80052f2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2220      	movs	r2, #32
 80052ec:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e03b      	b.n	800536a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d10b      	bne.n	8005310 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	881a      	ldrh	r2, [r3, #0]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005304:	b292      	uxth	r2, r2
 8005306:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	3302      	adds	r3, #2
 800530c:	61bb      	str	r3, [r7, #24]
 800530e:	e007      	b.n	8005320 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	781a      	ldrb	r2, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	3301      	adds	r3, #1
 800531e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005326:	b29b      	uxth	r3, r3
 8005328:	3b01      	subs	r3, #1
 800532a:	b29a      	uxth	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005338:	b29b      	uxth	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1c9      	bne.n	80052d2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	2200      	movs	r2, #0
 8005346:	2140      	movs	r1, #64	@ 0x40
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f000 fb31 	bl	80059b0 <UART_WaitOnFlagUntilTimeout>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d004      	beq.n	800535e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2220      	movs	r2, #32
 8005358:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e005      	b.n	800536a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2220      	movs	r2, #32
 8005362:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005364:	2300      	movs	r3, #0
 8005366:	e000      	b.n	800536a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005368:	2302      	movs	r3, #2
  }
}
 800536a:	4618      	mov	r0, r3
 800536c:	3720      	adds	r7, #32
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
	...

08005374 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b088      	sub	sp, #32
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800537c:	2300      	movs	r3, #0
 800537e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	689a      	ldr	r2, [r3, #8]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	431a      	orrs	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	431a      	orrs	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	69db      	ldr	r3, [r3, #28]
 8005394:	4313      	orrs	r3, r2
 8005396:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80053a2:	f023 030c 	bic.w	r3, r3, #12
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	6812      	ldr	r2, [r2, #0]
 80053aa:	6979      	ldr	r1, [r7, #20]
 80053ac:	430b      	orrs	r3, r1
 80053ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68da      	ldr	r2, [r3, #12]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	430a      	orrs	r2, r1
 80053c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a1b      	ldr	r3, [r3, #32]
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4aa7      	ldr	r2, [pc, #668]	@ (800568c <UART_SetConfig+0x318>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d120      	bne.n	8005436 <UART_SetConfig+0xc2>
 80053f4:	4ba6      	ldr	r3, [pc, #664]	@ (8005690 <UART_SetConfig+0x31c>)
 80053f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053f8:	f003 0303 	and.w	r3, r3, #3
 80053fc:	2b03      	cmp	r3, #3
 80053fe:	d817      	bhi.n	8005430 <UART_SetConfig+0xbc>
 8005400:	a201      	add	r2, pc, #4	@ (adr r2, 8005408 <UART_SetConfig+0x94>)
 8005402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005406:	bf00      	nop
 8005408:	08005419 	.word	0x08005419
 800540c:	08005425 	.word	0x08005425
 8005410:	0800542b 	.word	0x0800542b
 8005414:	0800541f 	.word	0x0800541f
 8005418:	2301      	movs	r3, #1
 800541a:	77fb      	strb	r3, [r7, #31]
 800541c:	e0b5      	b.n	800558a <UART_SetConfig+0x216>
 800541e:	2302      	movs	r3, #2
 8005420:	77fb      	strb	r3, [r7, #31]
 8005422:	e0b2      	b.n	800558a <UART_SetConfig+0x216>
 8005424:	2304      	movs	r3, #4
 8005426:	77fb      	strb	r3, [r7, #31]
 8005428:	e0af      	b.n	800558a <UART_SetConfig+0x216>
 800542a:	2308      	movs	r3, #8
 800542c:	77fb      	strb	r3, [r7, #31]
 800542e:	e0ac      	b.n	800558a <UART_SetConfig+0x216>
 8005430:	2310      	movs	r3, #16
 8005432:	77fb      	strb	r3, [r7, #31]
 8005434:	e0a9      	b.n	800558a <UART_SetConfig+0x216>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a96      	ldr	r2, [pc, #600]	@ (8005694 <UART_SetConfig+0x320>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d124      	bne.n	800548a <UART_SetConfig+0x116>
 8005440:	4b93      	ldr	r3, [pc, #588]	@ (8005690 <UART_SetConfig+0x31c>)
 8005442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005444:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005448:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800544c:	d011      	beq.n	8005472 <UART_SetConfig+0xfe>
 800544e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005452:	d817      	bhi.n	8005484 <UART_SetConfig+0x110>
 8005454:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005458:	d011      	beq.n	800547e <UART_SetConfig+0x10a>
 800545a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800545e:	d811      	bhi.n	8005484 <UART_SetConfig+0x110>
 8005460:	2b00      	cmp	r3, #0
 8005462:	d003      	beq.n	800546c <UART_SetConfig+0xf8>
 8005464:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005468:	d006      	beq.n	8005478 <UART_SetConfig+0x104>
 800546a:	e00b      	b.n	8005484 <UART_SetConfig+0x110>
 800546c:	2300      	movs	r3, #0
 800546e:	77fb      	strb	r3, [r7, #31]
 8005470:	e08b      	b.n	800558a <UART_SetConfig+0x216>
 8005472:	2302      	movs	r3, #2
 8005474:	77fb      	strb	r3, [r7, #31]
 8005476:	e088      	b.n	800558a <UART_SetConfig+0x216>
 8005478:	2304      	movs	r3, #4
 800547a:	77fb      	strb	r3, [r7, #31]
 800547c:	e085      	b.n	800558a <UART_SetConfig+0x216>
 800547e:	2308      	movs	r3, #8
 8005480:	77fb      	strb	r3, [r7, #31]
 8005482:	e082      	b.n	800558a <UART_SetConfig+0x216>
 8005484:	2310      	movs	r3, #16
 8005486:	77fb      	strb	r3, [r7, #31]
 8005488:	e07f      	b.n	800558a <UART_SetConfig+0x216>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a82      	ldr	r2, [pc, #520]	@ (8005698 <UART_SetConfig+0x324>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d124      	bne.n	80054de <UART_SetConfig+0x16a>
 8005494:	4b7e      	ldr	r3, [pc, #504]	@ (8005690 <UART_SetConfig+0x31c>)
 8005496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005498:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800549c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80054a0:	d011      	beq.n	80054c6 <UART_SetConfig+0x152>
 80054a2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80054a6:	d817      	bhi.n	80054d8 <UART_SetConfig+0x164>
 80054a8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80054ac:	d011      	beq.n	80054d2 <UART_SetConfig+0x15e>
 80054ae:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80054b2:	d811      	bhi.n	80054d8 <UART_SetConfig+0x164>
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d003      	beq.n	80054c0 <UART_SetConfig+0x14c>
 80054b8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80054bc:	d006      	beq.n	80054cc <UART_SetConfig+0x158>
 80054be:	e00b      	b.n	80054d8 <UART_SetConfig+0x164>
 80054c0:	2300      	movs	r3, #0
 80054c2:	77fb      	strb	r3, [r7, #31]
 80054c4:	e061      	b.n	800558a <UART_SetConfig+0x216>
 80054c6:	2302      	movs	r3, #2
 80054c8:	77fb      	strb	r3, [r7, #31]
 80054ca:	e05e      	b.n	800558a <UART_SetConfig+0x216>
 80054cc:	2304      	movs	r3, #4
 80054ce:	77fb      	strb	r3, [r7, #31]
 80054d0:	e05b      	b.n	800558a <UART_SetConfig+0x216>
 80054d2:	2308      	movs	r3, #8
 80054d4:	77fb      	strb	r3, [r7, #31]
 80054d6:	e058      	b.n	800558a <UART_SetConfig+0x216>
 80054d8:	2310      	movs	r3, #16
 80054da:	77fb      	strb	r3, [r7, #31]
 80054dc:	e055      	b.n	800558a <UART_SetConfig+0x216>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a6e      	ldr	r2, [pc, #440]	@ (800569c <UART_SetConfig+0x328>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d124      	bne.n	8005532 <UART_SetConfig+0x1be>
 80054e8:	4b69      	ldr	r3, [pc, #420]	@ (8005690 <UART_SetConfig+0x31c>)
 80054ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ec:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80054f0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80054f4:	d011      	beq.n	800551a <UART_SetConfig+0x1a6>
 80054f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80054fa:	d817      	bhi.n	800552c <UART_SetConfig+0x1b8>
 80054fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005500:	d011      	beq.n	8005526 <UART_SetConfig+0x1b2>
 8005502:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005506:	d811      	bhi.n	800552c <UART_SetConfig+0x1b8>
 8005508:	2b00      	cmp	r3, #0
 800550a:	d003      	beq.n	8005514 <UART_SetConfig+0x1a0>
 800550c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005510:	d006      	beq.n	8005520 <UART_SetConfig+0x1ac>
 8005512:	e00b      	b.n	800552c <UART_SetConfig+0x1b8>
 8005514:	2300      	movs	r3, #0
 8005516:	77fb      	strb	r3, [r7, #31]
 8005518:	e037      	b.n	800558a <UART_SetConfig+0x216>
 800551a:	2302      	movs	r3, #2
 800551c:	77fb      	strb	r3, [r7, #31]
 800551e:	e034      	b.n	800558a <UART_SetConfig+0x216>
 8005520:	2304      	movs	r3, #4
 8005522:	77fb      	strb	r3, [r7, #31]
 8005524:	e031      	b.n	800558a <UART_SetConfig+0x216>
 8005526:	2308      	movs	r3, #8
 8005528:	77fb      	strb	r3, [r7, #31]
 800552a:	e02e      	b.n	800558a <UART_SetConfig+0x216>
 800552c:	2310      	movs	r3, #16
 800552e:	77fb      	strb	r3, [r7, #31]
 8005530:	e02b      	b.n	800558a <UART_SetConfig+0x216>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a5a      	ldr	r2, [pc, #360]	@ (80056a0 <UART_SetConfig+0x32c>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d124      	bne.n	8005586 <UART_SetConfig+0x212>
 800553c:	4b54      	ldr	r3, [pc, #336]	@ (8005690 <UART_SetConfig+0x31c>)
 800553e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005540:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005544:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005548:	d011      	beq.n	800556e <UART_SetConfig+0x1fa>
 800554a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800554e:	d817      	bhi.n	8005580 <UART_SetConfig+0x20c>
 8005550:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005554:	d011      	beq.n	800557a <UART_SetConfig+0x206>
 8005556:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800555a:	d811      	bhi.n	8005580 <UART_SetConfig+0x20c>
 800555c:	2b00      	cmp	r3, #0
 800555e:	d003      	beq.n	8005568 <UART_SetConfig+0x1f4>
 8005560:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005564:	d006      	beq.n	8005574 <UART_SetConfig+0x200>
 8005566:	e00b      	b.n	8005580 <UART_SetConfig+0x20c>
 8005568:	2300      	movs	r3, #0
 800556a:	77fb      	strb	r3, [r7, #31]
 800556c:	e00d      	b.n	800558a <UART_SetConfig+0x216>
 800556e:	2302      	movs	r3, #2
 8005570:	77fb      	strb	r3, [r7, #31]
 8005572:	e00a      	b.n	800558a <UART_SetConfig+0x216>
 8005574:	2304      	movs	r3, #4
 8005576:	77fb      	strb	r3, [r7, #31]
 8005578:	e007      	b.n	800558a <UART_SetConfig+0x216>
 800557a:	2308      	movs	r3, #8
 800557c:	77fb      	strb	r3, [r7, #31]
 800557e:	e004      	b.n	800558a <UART_SetConfig+0x216>
 8005580:	2310      	movs	r3, #16
 8005582:	77fb      	strb	r3, [r7, #31]
 8005584:	e001      	b.n	800558a <UART_SetConfig+0x216>
 8005586:	2310      	movs	r3, #16
 8005588:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	69db      	ldr	r3, [r3, #28]
 800558e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005592:	d15b      	bne.n	800564c <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8005594:	7ffb      	ldrb	r3, [r7, #31]
 8005596:	2b08      	cmp	r3, #8
 8005598:	d827      	bhi.n	80055ea <UART_SetConfig+0x276>
 800559a:	a201      	add	r2, pc, #4	@ (adr r2, 80055a0 <UART_SetConfig+0x22c>)
 800559c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a0:	080055c5 	.word	0x080055c5
 80055a4:	080055cd 	.word	0x080055cd
 80055a8:	080055d5 	.word	0x080055d5
 80055ac:	080055eb 	.word	0x080055eb
 80055b0:	080055db 	.word	0x080055db
 80055b4:	080055eb 	.word	0x080055eb
 80055b8:	080055eb 	.word	0x080055eb
 80055bc:	080055eb 	.word	0x080055eb
 80055c0:	080055e3 	.word	0x080055e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055c4:	f7fe fd08 	bl	8003fd8 <HAL_RCC_GetPCLK1Freq>
 80055c8:	61b8      	str	r0, [r7, #24]
        break;
 80055ca:	e013      	b.n	80055f4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055cc:	f7fe fd26 	bl	800401c <HAL_RCC_GetPCLK2Freq>
 80055d0:	61b8      	str	r0, [r7, #24]
        break;
 80055d2:	e00f      	b.n	80055f4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055d4:	4b33      	ldr	r3, [pc, #204]	@ (80056a4 <UART_SetConfig+0x330>)
 80055d6:	61bb      	str	r3, [r7, #24]
        break;
 80055d8:	e00c      	b.n	80055f4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055da:	f7fe fc9d 	bl	8003f18 <HAL_RCC_GetSysClockFreq>
 80055de:	61b8      	str	r0, [r7, #24]
        break;
 80055e0:	e008      	b.n	80055f4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055e6:	61bb      	str	r3, [r7, #24]
        break;
 80055e8:	e004      	b.n	80055f4 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80055ea:	2300      	movs	r3, #0
 80055ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	77bb      	strb	r3, [r7, #30]
        break;
 80055f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f000 8082 	beq.w	8005700 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	005a      	lsls	r2, r3, #1
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	085b      	lsrs	r3, r3, #1
 8005606:	441a      	add	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005610:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	2b0f      	cmp	r3, #15
 8005616:	d916      	bls.n	8005646 <UART_SetConfig+0x2d2>
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800561e:	d212      	bcs.n	8005646 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	b29b      	uxth	r3, r3
 8005624:	f023 030f 	bic.w	r3, r3, #15
 8005628:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	085b      	lsrs	r3, r3, #1
 800562e:	b29b      	uxth	r3, r3
 8005630:	f003 0307 	and.w	r3, r3, #7
 8005634:	b29a      	uxth	r2, r3
 8005636:	89fb      	ldrh	r3, [r7, #14]
 8005638:	4313      	orrs	r3, r2
 800563a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	89fa      	ldrh	r2, [r7, #14]
 8005642:	60da      	str	r2, [r3, #12]
 8005644:	e05c      	b.n	8005700 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	77bb      	strb	r3, [r7, #30]
 800564a:	e059      	b.n	8005700 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800564c:	7ffb      	ldrb	r3, [r7, #31]
 800564e:	2b08      	cmp	r3, #8
 8005650:	d835      	bhi.n	80056be <UART_SetConfig+0x34a>
 8005652:	a201      	add	r2, pc, #4	@ (adr r2, 8005658 <UART_SetConfig+0x2e4>)
 8005654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005658:	0800567d 	.word	0x0800567d
 800565c:	08005685 	.word	0x08005685
 8005660:	080056a9 	.word	0x080056a9
 8005664:	080056bf 	.word	0x080056bf
 8005668:	080056af 	.word	0x080056af
 800566c:	080056bf 	.word	0x080056bf
 8005670:	080056bf 	.word	0x080056bf
 8005674:	080056bf 	.word	0x080056bf
 8005678:	080056b7 	.word	0x080056b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800567c:	f7fe fcac 	bl	8003fd8 <HAL_RCC_GetPCLK1Freq>
 8005680:	61b8      	str	r0, [r7, #24]
        break;
 8005682:	e021      	b.n	80056c8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005684:	f7fe fcca 	bl	800401c <HAL_RCC_GetPCLK2Freq>
 8005688:	61b8      	str	r0, [r7, #24]
        break;
 800568a:	e01d      	b.n	80056c8 <UART_SetConfig+0x354>
 800568c:	40013800 	.word	0x40013800
 8005690:	40021000 	.word	0x40021000
 8005694:	40004400 	.word	0x40004400
 8005698:	40004800 	.word	0x40004800
 800569c:	40004c00 	.word	0x40004c00
 80056a0:	40005000 	.word	0x40005000
 80056a4:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056a8:	4b1b      	ldr	r3, [pc, #108]	@ (8005718 <UART_SetConfig+0x3a4>)
 80056aa:	61bb      	str	r3, [r7, #24]
        break;
 80056ac:	e00c      	b.n	80056c8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056ae:	f7fe fc33 	bl	8003f18 <HAL_RCC_GetSysClockFreq>
 80056b2:	61b8      	str	r0, [r7, #24]
        break;
 80056b4:	e008      	b.n	80056c8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056ba:	61bb      	str	r3, [r7, #24]
        break;
 80056bc:	e004      	b.n	80056c8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80056be:	2300      	movs	r3, #0
 80056c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	77bb      	strb	r3, [r7, #30]
        break;
 80056c6:	bf00      	nop
    }

    if (pclk != 0U)
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d018      	beq.n	8005700 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	085a      	lsrs	r2, r3, #1
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	441a      	add	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	2b0f      	cmp	r3, #15
 80056e6:	d909      	bls.n	80056fc <UART_SetConfig+0x388>
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056ee:	d205      	bcs.n	80056fc <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	60da      	str	r2, [r3, #12]
 80056fa:	e001      	b.n	8005700 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800570c:	7fbb      	ldrb	r3, [r7, #30]
}
 800570e:	4618      	mov	r0, r3
 8005710:	3720      	adds	r7, #32
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	007a1200 	.word	0x007a1200

0800571c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005728:	f003 0308 	and.w	r3, r3, #8
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00a      	beq.n	8005746 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	430a      	orrs	r2, r1
 8005744:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00a      	beq.n	8005768 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	430a      	orrs	r2, r1
 8005766:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800576c:	f003 0302 	and.w	r3, r3, #2
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00a      	beq.n	800578a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	430a      	orrs	r2, r1
 8005788:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800578e:	f003 0304 	and.w	r3, r3, #4
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00a      	beq.n	80057ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	430a      	orrs	r2, r1
 80057aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b0:	f003 0310 	and.w	r3, r3, #16
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00a      	beq.n	80057ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	430a      	orrs	r2, r1
 80057cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d2:	f003 0320 	and.w	r3, r3, #32
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00a      	beq.n	80057f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	430a      	orrs	r2, r1
 80057ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d01a      	beq.n	8005832 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	430a      	orrs	r2, r1
 8005810:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005816:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800581a:	d10a      	bne.n	8005832 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005836:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00a      	beq.n	8005854 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	430a      	orrs	r2, r1
 8005852:	605a      	str	r2, [r3, #4]
  }
}
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b098      	sub	sp, #96	@ 0x60
 8005864:	af02      	add	r7, sp, #8
 8005866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005870:	f7fc f8e4 	bl	8001a3c <HAL_GetTick>
 8005874:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0308 	and.w	r3, r3, #8
 8005880:	2b08      	cmp	r3, #8
 8005882:	d12e      	bne.n	80058e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005884:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005888:	9300      	str	r3, [sp, #0]
 800588a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800588c:	2200      	movs	r2, #0
 800588e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f88c 	bl	80059b0 <UART_WaitOnFlagUntilTimeout>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d021      	beq.n	80058e2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a6:	e853 3f00 	ldrex	r3, [r3]
 80058aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80058ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	461a      	mov	r2, r3
 80058ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80058be:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80058c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058c4:	e841 2300 	strex	r3, r2, [r1]
 80058c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80058ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1e6      	bne.n	800589e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2220      	movs	r2, #32
 80058d4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e062      	b.n	80059a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0304 	and.w	r3, r3, #4
 80058ec:	2b04      	cmp	r3, #4
 80058ee:	d149      	bne.n	8005984 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058f8:	2200      	movs	r2, #0
 80058fa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f856 	bl	80059b0 <UART_WaitOnFlagUntilTimeout>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d03c      	beq.n	8005984 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005912:	e853 3f00 	ldrex	r3, [r3]
 8005916:	623b      	str	r3, [r7, #32]
   return(result);
 8005918:	6a3b      	ldr	r3, [r7, #32]
 800591a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800591e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	461a      	mov	r2, r3
 8005926:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005928:	633b      	str	r3, [r7, #48]	@ 0x30
 800592a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800592e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005930:	e841 2300 	strex	r3, r2, [r1]
 8005934:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1e6      	bne.n	800590a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	3308      	adds	r3, #8
 8005942:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	e853 3f00 	ldrex	r3, [r3]
 800594a:	60fb      	str	r3, [r7, #12]
   return(result);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f023 0301 	bic.w	r3, r3, #1
 8005952:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	3308      	adds	r3, #8
 800595a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800595c:	61fa      	str	r2, [r7, #28]
 800595e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005960:	69b9      	ldr	r1, [r7, #24]
 8005962:	69fa      	ldr	r2, [r7, #28]
 8005964:	e841 2300 	strex	r3, r2, [r1]
 8005968:	617b      	str	r3, [r7, #20]
   return(result);
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1e5      	bne.n	800593c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2220      	movs	r2, #32
 8005974:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e011      	b.n	80059a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2220      	movs	r2, #32
 8005988:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2220      	movs	r2, #32
 800598e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3758      	adds	r7, #88	@ 0x58
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	603b      	str	r3, [r7, #0]
 80059bc:	4613      	mov	r3, r2
 80059be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059c0:	e04f      	b.n	8005a62 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c8:	d04b      	beq.n	8005a62 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059ca:	f7fc f837 	bl	8001a3c <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	69ba      	ldr	r2, [r7, #24]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d302      	bcc.n	80059e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d101      	bne.n	80059e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80059e0:	2303      	movs	r3, #3
 80059e2:	e04e      	b.n	8005a82 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0304 	and.w	r3, r3, #4
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d037      	beq.n	8005a62 <UART_WaitOnFlagUntilTimeout+0xb2>
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	2b80      	cmp	r3, #128	@ 0x80
 80059f6:	d034      	beq.n	8005a62 <UART_WaitOnFlagUntilTimeout+0xb2>
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	2b40      	cmp	r3, #64	@ 0x40
 80059fc:	d031      	beq.n	8005a62 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	69db      	ldr	r3, [r3, #28]
 8005a04:	f003 0308 	and.w	r3, r3, #8
 8005a08:	2b08      	cmp	r3, #8
 8005a0a:	d110      	bne.n	8005a2e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2208      	movs	r2, #8
 8005a12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f000 f838 	bl	8005a8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2208      	movs	r2, #8
 8005a1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e029      	b.n	8005a82 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	69db      	ldr	r3, [r3, #28]
 8005a34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a3c:	d111      	bne.n	8005a62 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f000 f81e 	bl	8005a8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2220      	movs	r2, #32
 8005a52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e00f      	b.n	8005a82 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	69da      	ldr	r2, [r3, #28]
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	bf0c      	ite	eq
 8005a72:	2301      	moveq	r3, #1
 8005a74:	2300      	movne	r3, #0
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	461a      	mov	r2, r3
 8005a7a:	79fb      	ldrb	r3, [r7, #7]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d0a0      	beq.n	80059c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a8a:	b480      	push	{r7}
 8005a8c:	b095      	sub	sp, #84	@ 0x54
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a9a:	e853 3f00 	ldrex	r3, [r3]
 8005a9e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	461a      	mov	r2, r3
 8005aae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ab0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ab2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ab6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ab8:	e841 2300 	strex	r3, r2, [r1]
 8005abc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1e6      	bne.n	8005a92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	3308      	adds	r3, #8
 8005aca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005acc:	6a3b      	ldr	r3, [r7, #32]
 8005ace:	e853 3f00 	ldrex	r3, [r3]
 8005ad2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	f023 0301 	bic.w	r3, r3, #1
 8005ada:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	3308      	adds	r3, #8
 8005ae2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ae4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005aea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005aec:	e841 2300 	strex	r3, r2, [r1]
 8005af0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d1e5      	bne.n	8005ac4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d118      	bne.n	8005b32 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	e853 3f00 	ldrex	r3, [r3]
 8005b0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	f023 0310 	bic.w	r3, r3, #16
 8005b14:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b1e:	61bb      	str	r3, [r7, #24]
 8005b20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b22:	6979      	ldr	r1, [r7, #20]
 8005b24:	69ba      	ldr	r2, [r7, #24]
 8005b26:	e841 2300 	strex	r3, r2, [r1]
 8005b2a:	613b      	str	r3, [r7, #16]
   return(result);
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1e6      	bne.n	8005b00 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2220      	movs	r2, #32
 8005b36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005b46:	bf00      	nop
 8005b48:	3754      	adds	r7, #84	@ 0x54
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr

08005b52 <__cvt>:
 8005b52:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b56:	ec57 6b10 	vmov	r6, r7, d0
 8005b5a:	2f00      	cmp	r7, #0
 8005b5c:	460c      	mov	r4, r1
 8005b5e:	4619      	mov	r1, r3
 8005b60:	463b      	mov	r3, r7
 8005b62:	bfbb      	ittet	lt
 8005b64:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005b68:	461f      	movlt	r7, r3
 8005b6a:	2300      	movge	r3, #0
 8005b6c:	232d      	movlt	r3, #45	@ 0x2d
 8005b6e:	700b      	strb	r3, [r1, #0]
 8005b70:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b72:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005b76:	4691      	mov	r9, r2
 8005b78:	f023 0820 	bic.w	r8, r3, #32
 8005b7c:	bfbc      	itt	lt
 8005b7e:	4632      	movlt	r2, r6
 8005b80:	4616      	movlt	r6, r2
 8005b82:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005b86:	d005      	beq.n	8005b94 <__cvt+0x42>
 8005b88:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005b8c:	d100      	bne.n	8005b90 <__cvt+0x3e>
 8005b8e:	3401      	adds	r4, #1
 8005b90:	2102      	movs	r1, #2
 8005b92:	e000      	b.n	8005b96 <__cvt+0x44>
 8005b94:	2103      	movs	r1, #3
 8005b96:	ab03      	add	r3, sp, #12
 8005b98:	9301      	str	r3, [sp, #4]
 8005b9a:	ab02      	add	r3, sp, #8
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	ec47 6b10 	vmov	d0, r6, r7
 8005ba2:	4653      	mov	r3, sl
 8005ba4:	4622      	mov	r2, r4
 8005ba6:	f001 f873 	bl	8006c90 <_dtoa_r>
 8005baa:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005bae:	4605      	mov	r5, r0
 8005bb0:	d119      	bne.n	8005be6 <__cvt+0x94>
 8005bb2:	f019 0f01 	tst.w	r9, #1
 8005bb6:	d00e      	beq.n	8005bd6 <__cvt+0x84>
 8005bb8:	eb00 0904 	add.w	r9, r0, r4
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	4630      	mov	r0, r6
 8005bc2:	4639      	mov	r1, r7
 8005bc4:	f7fa ff80 	bl	8000ac8 <__aeabi_dcmpeq>
 8005bc8:	b108      	cbz	r0, 8005bce <__cvt+0x7c>
 8005bca:	f8cd 900c 	str.w	r9, [sp, #12]
 8005bce:	2230      	movs	r2, #48	@ 0x30
 8005bd0:	9b03      	ldr	r3, [sp, #12]
 8005bd2:	454b      	cmp	r3, r9
 8005bd4:	d31e      	bcc.n	8005c14 <__cvt+0xc2>
 8005bd6:	9b03      	ldr	r3, [sp, #12]
 8005bd8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005bda:	1b5b      	subs	r3, r3, r5
 8005bdc:	4628      	mov	r0, r5
 8005bde:	6013      	str	r3, [r2, #0]
 8005be0:	b004      	add	sp, #16
 8005be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005be6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005bea:	eb00 0904 	add.w	r9, r0, r4
 8005bee:	d1e5      	bne.n	8005bbc <__cvt+0x6a>
 8005bf0:	7803      	ldrb	r3, [r0, #0]
 8005bf2:	2b30      	cmp	r3, #48	@ 0x30
 8005bf4:	d10a      	bne.n	8005c0c <__cvt+0xba>
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	4630      	mov	r0, r6
 8005bfc:	4639      	mov	r1, r7
 8005bfe:	f7fa ff63 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c02:	b918      	cbnz	r0, 8005c0c <__cvt+0xba>
 8005c04:	f1c4 0401 	rsb	r4, r4, #1
 8005c08:	f8ca 4000 	str.w	r4, [sl]
 8005c0c:	f8da 3000 	ldr.w	r3, [sl]
 8005c10:	4499      	add	r9, r3
 8005c12:	e7d3      	b.n	8005bbc <__cvt+0x6a>
 8005c14:	1c59      	adds	r1, r3, #1
 8005c16:	9103      	str	r1, [sp, #12]
 8005c18:	701a      	strb	r2, [r3, #0]
 8005c1a:	e7d9      	b.n	8005bd0 <__cvt+0x7e>

08005c1c <__exponent>:
 8005c1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c1e:	2900      	cmp	r1, #0
 8005c20:	bfba      	itte	lt
 8005c22:	4249      	neglt	r1, r1
 8005c24:	232d      	movlt	r3, #45	@ 0x2d
 8005c26:	232b      	movge	r3, #43	@ 0x2b
 8005c28:	2909      	cmp	r1, #9
 8005c2a:	7002      	strb	r2, [r0, #0]
 8005c2c:	7043      	strb	r3, [r0, #1]
 8005c2e:	dd29      	ble.n	8005c84 <__exponent+0x68>
 8005c30:	f10d 0307 	add.w	r3, sp, #7
 8005c34:	461d      	mov	r5, r3
 8005c36:	270a      	movs	r7, #10
 8005c38:	461a      	mov	r2, r3
 8005c3a:	fbb1 f6f7 	udiv	r6, r1, r7
 8005c3e:	fb07 1416 	mls	r4, r7, r6, r1
 8005c42:	3430      	adds	r4, #48	@ 0x30
 8005c44:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005c48:	460c      	mov	r4, r1
 8005c4a:	2c63      	cmp	r4, #99	@ 0x63
 8005c4c:	f103 33ff 	add.w	r3, r3, #4294967295
 8005c50:	4631      	mov	r1, r6
 8005c52:	dcf1      	bgt.n	8005c38 <__exponent+0x1c>
 8005c54:	3130      	adds	r1, #48	@ 0x30
 8005c56:	1e94      	subs	r4, r2, #2
 8005c58:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005c5c:	1c41      	adds	r1, r0, #1
 8005c5e:	4623      	mov	r3, r4
 8005c60:	42ab      	cmp	r3, r5
 8005c62:	d30a      	bcc.n	8005c7a <__exponent+0x5e>
 8005c64:	f10d 0309 	add.w	r3, sp, #9
 8005c68:	1a9b      	subs	r3, r3, r2
 8005c6a:	42ac      	cmp	r4, r5
 8005c6c:	bf88      	it	hi
 8005c6e:	2300      	movhi	r3, #0
 8005c70:	3302      	adds	r3, #2
 8005c72:	4403      	add	r3, r0
 8005c74:	1a18      	subs	r0, r3, r0
 8005c76:	b003      	add	sp, #12
 8005c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c7a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005c7e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005c82:	e7ed      	b.n	8005c60 <__exponent+0x44>
 8005c84:	2330      	movs	r3, #48	@ 0x30
 8005c86:	3130      	adds	r1, #48	@ 0x30
 8005c88:	7083      	strb	r3, [r0, #2]
 8005c8a:	70c1      	strb	r1, [r0, #3]
 8005c8c:	1d03      	adds	r3, r0, #4
 8005c8e:	e7f1      	b.n	8005c74 <__exponent+0x58>

08005c90 <_printf_float>:
 8005c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c94:	b08d      	sub	sp, #52	@ 0x34
 8005c96:	460c      	mov	r4, r1
 8005c98:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005c9c:	4616      	mov	r6, r2
 8005c9e:	461f      	mov	r7, r3
 8005ca0:	4605      	mov	r5, r0
 8005ca2:	f000 feef 	bl	8006a84 <_localeconv_r>
 8005ca6:	6803      	ldr	r3, [r0, #0]
 8005ca8:	9304      	str	r3, [sp, #16]
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7fa fae0 	bl	8000270 <strlen>
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	930a      	str	r3, [sp, #40]	@ 0x28
 8005cb4:	f8d8 3000 	ldr.w	r3, [r8]
 8005cb8:	9005      	str	r0, [sp, #20]
 8005cba:	3307      	adds	r3, #7
 8005cbc:	f023 0307 	bic.w	r3, r3, #7
 8005cc0:	f103 0208 	add.w	r2, r3, #8
 8005cc4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005cc8:	f8d4 b000 	ldr.w	fp, [r4]
 8005ccc:	f8c8 2000 	str.w	r2, [r8]
 8005cd0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005cd4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005cd8:	9307      	str	r3, [sp, #28]
 8005cda:	f8cd 8018 	str.w	r8, [sp, #24]
 8005cde:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005ce2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ce6:	4b9c      	ldr	r3, [pc, #624]	@ (8005f58 <_printf_float+0x2c8>)
 8005ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8005cec:	f7fa ff1e 	bl	8000b2c <__aeabi_dcmpun>
 8005cf0:	bb70      	cbnz	r0, 8005d50 <_printf_float+0xc0>
 8005cf2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005cf6:	4b98      	ldr	r3, [pc, #608]	@ (8005f58 <_printf_float+0x2c8>)
 8005cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8005cfc:	f7fa fef8 	bl	8000af0 <__aeabi_dcmple>
 8005d00:	bb30      	cbnz	r0, 8005d50 <_printf_float+0xc0>
 8005d02:	2200      	movs	r2, #0
 8005d04:	2300      	movs	r3, #0
 8005d06:	4640      	mov	r0, r8
 8005d08:	4649      	mov	r1, r9
 8005d0a:	f7fa fee7 	bl	8000adc <__aeabi_dcmplt>
 8005d0e:	b110      	cbz	r0, 8005d16 <_printf_float+0x86>
 8005d10:	232d      	movs	r3, #45	@ 0x2d
 8005d12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d16:	4a91      	ldr	r2, [pc, #580]	@ (8005f5c <_printf_float+0x2cc>)
 8005d18:	4b91      	ldr	r3, [pc, #580]	@ (8005f60 <_printf_float+0x2d0>)
 8005d1a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005d1e:	bf94      	ite	ls
 8005d20:	4690      	movls	r8, r2
 8005d22:	4698      	movhi	r8, r3
 8005d24:	2303      	movs	r3, #3
 8005d26:	6123      	str	r3, [r4, #16]
 8005d28:	f02b 0304 	bic.w	r3, fp, #4
 8005d2c:	6023      	str	r3, [r4, #0]
 8005d2e:	f04f 0900 	mov.w	r9, #0
 8005d32:	9700      	str	r7, [sp, #0]
 8005d34:	4633      	mov	r3, r6
 8005d36:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005d38:	4621      	mov	r1, r4
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	f000 f9d2 	bl	80060e4 <_printf_common>
 8005d40:	3001      	adds	r0, #1
 8005d42:	f040 808d 	bne.w	8005e60 <_printf_float+0x1d0>
 8005d46:	f04f 30ff 	mov.w	r0, #4294967295
 8005d4a:	b00d      	add	sp, #52	@ 0x34
 8005d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d50:	4642      	mov	r2, r8
 8005d52:	464b      	mov	r3, r9
 8005d54:	4640      	mov	r0, r8
 8005d56:	4649      	mov	r1, r9
 8005d58:	f7fa fee8 	bl	8000b2c <__aeabi_dcmpun>
 8005d5c:	b140      	cbz	r0, 8005d70 <_printf_float+0xe0>
 8005d5e:	464b      	mov	r3, r9
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	bfbc      	itt	lt
 8005d64:	232d      	movlt	r3, #45	@ 0x2d
 8005d66:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005d6a:	4a7e      	ldr	r2, [pc, #504]	@ (8005f64 <_printf_float+0x2d4>)
 8005d6c:	4b7e      	ldr	r3, [pc, #504]	@ (8005f68 <_printf_float+0x2d8>)
 8005d6e:	e7d4      	b.n	8005d1a <_printf_float+0x8a>
 8005d70:	6863      	ldr	r3, [r4, #4]
 8005d72:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005d76:	9206      	str	r2, [sp, #24]
 8005d78:	1c5a      	adds	r2, r3, #1
 8005d7a:	d13b      	bne.n	8005df4 <_printf_float+0x164>
 8005d7c:	2306      	movs	r3, #6
 8005d7e:	6063      	str	r3, [r4, #4]
 8005d80:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005d84:	2300      	movs	r3, #0
 8005d86:	6022      	str	r2, [r4, #0]
 8005d88:	9303      	str	r3, [sp, #12]
 8005d8a:	ab0a      	add	r3, sp, #40	@ 0x28
 8005d8c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005d90:	ab09      	add	r3, sp, #36	@ 0x24
 8005d92:	9300      	str	r3, [sp, #0]
 8005d94:	6861      	ldr	r1, [r4, #4]
 8005d96:	ec49 8b10 	vmov	d0, r8, r9
 8005d9a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005d9e:	4628      	mov	r0, r5
 8005da0:	f7ff fed7 	bl	8005b52 <__cvt>
 8005da4:	9b06      	ldr	r3, [sp, #24]
 8005da6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005da8:	2b47      	cmp	r3, #71	@ 0x47
 8005daa:	4680      	mov	r8, r0
 8005dac:	d129      	bne.n	8005e02 <_printf_float+0x172>
 8005dae:	1cc8      	adds	r0, r1, #3
 8005db0:	db02      	blt.n	8005db8 <_printf_float+0x128>
 8005db2:	6863      	ldr	r3, [r4, #4]
 8005db4:	4299      	cmp	r1, r3
 8005db6:	dd41      	ble.n	8005e3c <_printf_float+0x1ac>
 8005db8:	f1aa 0a02 	sub.w	sl, sl, #2
 8005dbc:	fa5f fa8a 	uxtb.w	sl, sl
 8005dc0:	3901      	subs	r1, #1
 8005dc2:	4652      	mov	r2, sl
 8005dc4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005dc8:	9109      	str	r1, [sp, #36]	@ 0x24
 8005dca:	f7ff ff27 	bl	8005c1c <__exponent>
 8005dce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005dd0:	1813      	adds	r3, r2, r0
 8005dd2:	2a01      	cmp	r2, #1
 8005dd4:	4681      	mov	r9, r0
 8005dd6:	6123      	str	r3, [r4, #16]
 8005dd8:	dc02      	bgt.n	8005de0 <_printf_float+0x150>
 8005dda:	6822      	ldr	r2, [r4, #0]
 8005ddc:	07d2      	lsls	r2, r2, #31
 8005dde:	d501      	bpl.n	8005de4 <_printf_float+0x154>
 8005de0:	3301      	adds	r3, #1
 8005de2:	6123      	str	r3, [r4, #16]
 8005de4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d0a2      	beq.n	8005d32 <_printf_float+0xa2>
 8005dec:	232d      	movs	r3, #45	@ 0x2d
 8005dee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005df2:	e79e      	b.n	8005d32 <_printf_float+0xa2>
 8005df4:	9a06      	ldr	r2, [sp, #24]
 8005df6:	2a47      	cmp	r2, #71	@ 0x47
 8005df8:	d1c2      	bne.n	8005d80 <_printf_float+0xf0>
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1c0      	bne.n	8005d80 <_printf_float+0xf0>
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e7bd      	b.n	8005d7e <_printf_float+0xee>
 8005e02:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005e06:	d9db      	bls.n	8005dc0 <_printf_float+0x130>
 8005e08:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005e0c:	d118      	bne.n	8005e40 <_printf_float+0x1b0>
 8005e0e:	2900      	cmp	r1, #0
 8005e10:	6863      	ldr	r3, [r4, #4]
 8005e12:	dd0b      	ble.n	8005e2c <_printf_float+0x19c>
 8005e14:	6121      	str	r1, [r4, #16]
 8005e16:	b913      	cbnz	r3, 8005e1e <_printf_float+0x18e>
 8005e18:	6822      	ldr	r2, [r4, #0]
 8005e1a:	07d0      	lsls	r0, r2, #31
 8005e1c:	d502      	bpl.n	8005e24 <_printf_float+0x194>
 8005e1e:	3301      	adds	r3, #1
 8005e20:	440b      	add	r3, r1
 8005e22:	6123      	str	r3, [r4, #16]
 8005e24:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005e26:	f04f 0900 	mov.w	r9, #0
 8005e2a:	e7db      	b.n	8005de4 <_printf_float+0x154>
 8005e2c:	b913      	cbnz	r3, 8005e34 <_printf_float+0x1a4>
 8005e2e:	6822      	ldr	r2, [r4, #0]
 8005e30:	07d2      	lsls	r2, r2, #31
 8005e32:	d501      	bpl.n	8005e38 <_printf_float+0x1a8>
 8005e34:	3302      	adds	r3, #2
 8005e36:	e7f4      	b.n	8005e22 <_printf_float+0x192>
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e7f2      	b.n	8005e22 <_printf_float+0x192>
 8005e3c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005e40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e42:	4299      	cmp	r1, r3
 8005e44:	db05      	blt.n	8005e52 <_printf_float+0x1c2>
 8005e46:	6823      	ldr	r3, [r4, #0]
 8005e48:	6121      	str	r1, [r4, #16]
 8005e4a:	07d8      	lsls	r0, r3, #31
 8005e4c:	d5ea      	bpl.n	8005e24 <_printf_float+0x194>
 8005e4e:	1c4b      	adds	r3, r1, #1
 8005e50:	e7e7      	b.n	8005e22 <_printf_float+0x192>
 8005e52:	2900      	cmp	r1, #0
 8005e54:	bfd4      	ite	le
 8005e56:	f1c1 0202 	rsble	r2, r1, #2
 8005e5a:	2201      	movgt	r2, #1
 8005e5c:	4413      	add	r3, r2
 8005e5e:	e7e0      	b.n	8005e22 <_printf_float+0x192>
 8005e60:	6823      	ldr	r3, [r4, #0]
 8005e62:	055a      	lsls	r2, r3, #21
 8005e64:	d407      	bmi.n	8005e76 <_printf_float+0x1e6>
 8005e66:	6923      	ldr	r3, [r4, #16]
 8005e68:	4642      	mov	r2, r8
 8005e6a:	4631      	mov	r1, r6
 8005e6c:	4628      	mov	r0, r5
 8005e6e:	47b8      	blx	r7
 8005e70:	3001      	adds	r0, #1
 8005e72:	d12b      	bne.n	8005ecc <_printf_float+0x23c>
 8005e74:	e767      	b.n	8005d46 <_printf_float+0xb6>
 8005e76:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005e7a:	f240 80dd 	bls.w	8006038 <_printf_float+0x3a8>
 8005e7e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005e82:	2200      	movs	r2, #0
 8005e84:	2300      	movs	r3, #0
 8005e86:	f7fa fe1f 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e8a:	2800      	cmp	r0, #0
 8005e8c:	d033      	beq.n	8005ef6 <_printf_float+0x266>
 8005e8e:	4a37      	ldr	r2, [pc, #220]	@ (8005f6c <_printf_float+0x2dc>)
 8005e90:	2301      	movs	r3, #1
 8005e92:	4631      	mov	r1, r6
 8005e94:	4628      	mov	r0, r5
 8005e96:	47b8      	blx	r7
 8005e98:	3001      	adds	r0, #1
 8005e9a:	f43f af54 	beq.w	8005d46 <_printf_float+0xb6>
 8005e9e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005ea2:	4543      	cmp	r3, r8
 8005ea4:	db02      	blt.n	8005eac <_printf_float+0x21c>
 8005ea6:	6823      	ldr	r3, [r4, #0]
 8005ea8:	07d8      	lsls	r0, r3, #31
 8005eaa:	d50f      	bpl.n	8005ecc <_printf_float+0x23c>
 8005eac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005eb0:	4631      	mov	r1, r6
 8005eb2:	4628      	mov	r0, r5
 8005eb4:	47b8      	blx	r7
 8005eb6:	3001      	adds	r0, #1
 8005eb8:	f43f af45 	beq.w	8005d46 <_printf_float+0xb6>
 8005ebc:	f04f 0900 	mov.w	r9, #0
 8005ec0:	f108 38ff 	add.w	r8, r8, #4294967295
 8005ec4:	f104 0a1a 	add.w	sl, r4, #26
 8005ec8:	45c8      	cmp	r8, r9
 8005eca:	dc09      	bgt.n	8005ee0 <_printf_float+0x250>
 8005ecc:	6823      	ldr	r3, [r4, #0]
 8005ece:	079b      	lsls	r3, r3, #30
 8005ed0:	f100 8103 	bmi.w	80060da <_printf_float+0x44a>
 8005ed4:	68e0      	ldr	r0, [r4, #12]
 8005ed6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ed8:	4298      	cmp	r0, r3
 8005eda:	bfb8      	it	lt
 8005edc:	4618      	movlt	r0, r3
 8005ede:	e734      	b.n	8005d4a <_printf_float+0xba>
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	4652      	mov	r2, sl
 8005ee4:	4631      	mov	r1, r6
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	47b8      	blx	r7
 8005eea:	3001      	adds	r0, #1
 8005eec:	f43f af2b 	beq.w	8005d46 <_printf_float+0xb6>
 8005ef0:	f109 0901 	add.w	r9, r9, #1
 8005ef4:	e7e8      	b.n	8005ec8 <_printf_float+0x238>
 8005ef6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	dc39      	bgt.n	8005f70 <_printf_float+0x2e0>
 8005efc:	4a1b      	ldr	r2, [pc, #108]	@ (8005f6c <_printf_float+0x2dc>)
 8005efe:	2301      	movs	r3, #1
 8005f00:	4631      	mov	r1, r6
 8005f02:	4628      	mov	r0, r5
 8005f04:	47b8      	blx	r7
 8005f06:	3001      	adds	r0, #1
 8005f08:	f43f af1d 	beq.w	8005d46 <_printf_float+0xb6>
 8005f0c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005f10:	ea59 0303 	orrs.w	r3, r9, r3
 8005f14:	d102      	bne.n	8005f1c <_printf_float+0x28c>
 8005f16:	6823      	ldr	r3, [r4, #0]
 8005f18:	07d9      	lsls	r1, r3, #31
 8005f1a:	d5d7      	bpl.n	8005ecc <_printf_float+0x23c>
 8005f1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f20:	4631      	mov	r1, r6
 8005f22:	4628      	mov	r0, r5
 8005f24:	47b8      	blx	r7
 8005f26:	3001      	adds	r0, #1
 8005f28:	f43f af0d 	beq.w	8005d46 <_printf_float+0xb6>
 8005f2c:	f04f 0a00 	mov.w	sl, #0
 8005f30:	f104 0b1a 	add.w	fp, r4, #26
 8005f34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f36:	425b      	negs	r3, r3
 8005f38:	4553      	cmp	r3, sl
 8005f3a:	dc01      	bgt.n	8005f40 <_printf_float+0x2b0>
 8005f3c:	464b      	mov	r3, r9
 8005f3e:	e793      	b.n	8005e68 <_printf_float+0x1d8>
 8005f40:	2301      	movs	r3, #1
 8005f42:	465a      	mov	r2, fp
 8005f44:	4631      	mov	r1, r6
 8005f46:	4628      	mov	r0, r5
 8005f48:	47b8      	blx	r7
 8005f4a:	3001      	adds	r0, #1
 8005f4c:	f43f aefb 	beq.w	8005d46 <_printf_float+0xb6>
 8005f50:	f10a 0a01 	add.w	sl, sl, #1
 8005f54:	e7ee      	b.n	8005f34 <_printf_float+0x2a4>
 8005f56:	bf00      	nop
 8005f58:	7fefffff 	.word	0x7fefffff
 8005f5c:	0800a508 	.word	0x0800a508
 8005f60:	0800a50c 	.word	0x0800a50c
 8005f64:	0800a510 	.word	0x0800a510
 8005f68:	0800a514 	.word	0x0800a514
 8005f6c:	0800a518 	.word	0x0800a518
 8005f70:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005f72:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005f76:	4553      	cmp	r3, sl
 8005f78:	bfa8      	it	ge
 8005f7a:	4653      	movge	r3, sl
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	4699      	mov	r9, r3
 8005f80:	dc36      	bgt.n	8005ff0 <_printf_float+0x360>
 8005f82:	f04f 0b00 	mov.w	fp, #0
 8005f86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f8a:	f104 021a 	add.w	r2, r4, #26
 8005f8e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005f90:	9306      	str	r3, [sp, #24]
 8005f92:	eba3 0309 	sub.w	r3, r3, r9
 8005f96:	455b      	cmp	r3, fp
 8005f98:	dc31      	bgt.n	8005ffe <_printf_float+0x36e>
 8005f9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f9c:	459a      	cmp	sl, r3
 8005f9e:	dc3a      	bgt.n	8006016 <_printf_float+0x386>
 8005fa0:	6823      	ldr	r3, [r4, #0]
 8005fa2:	07da      	lsls	r2, r3, #31
 8005fa4:	d437      	bmi.n	8006016 <_printf_float+0x386>
 8005fa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fa8:	ebaa 0903 	sub.w	r9, sl, r3
 8005fac:	9b06      	ldr	r3, [sp, #24]
 8005fae:	ebaa 0303 	sub.w	r3, sl, r3
 8005fb2:	4599      	cmp	r9, r3
 8005fb4:	bfa8      	it	ge
 8005fb6:	4699      	movge	r9, r3
 8005fb8:	f1b9 0f00 	cmp.w	r9, #0
 8005fbc:	dc33      	bgt.n	8006026 <_printf_float+0x396>
 8005fbe:	f04f 0800 	mov.w	r8, #0
 8005fc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fc6:	f104 0b1a 	add.w	fp, r4, #26
 8005fca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fcc:	ebaa 0303 	sub.w	r3, sl, r3
 8005fd0:	eba3 0309 	sub.w	r3, r3, r9
 8005fd4:	4543      	cmp	r3, r8
 8005fd6:	f77f af79 	ble.w	8005ecc <_printf_float+0x23c>
 8005fda:	2301      	movs	r3, #1
 8005fdc:	465a      	mov	r2, fp
 8005fde:	4631      	mov	r1, r6
 8005fe0:	4628      	mov	r0, r5
 8005fe2:	47b8      	blx	r7
 8005fe4:	3001      	adds	r0, #1
 8005fe6:	f43f aeae 	beq.w	8005d46 <_printf_float+0xb6>
 8005fea:	f108 0801 	add.w	r8, r8, #1
 8005fee:	e7ec      	b.n	8005fca <_printf_float+0x33a>
 8005ff0:	4642      	mov	r2, r8
 8005ff2:	4631      	mov	r1, r6
 8005ff4:	4628      	mov	r0, r5
 8005ff6:	47b8      	blx	r7
 8005ff8:	3001      	adds	r0, #1
 8005ffa:	d1c2      	bne.n	8005f82 <_printf_float+0x2f2>
 8005ffc:	e6a3      	b.n	8005d46 <_printf_float+0xb6>
 8005ffe:	2301      	movs	r3, #1
 8006000:	4631      	mov	r1, r6
 8006002:	4628      	mov	r0, r5
 8006004:	9206      	str	r2, [sp, #24]
 8006006:	47b8      	blx	r7
 8006008:	3001      	adds	r0, #1
 800600a:	f43f ae9c 	beq.w	8005d46 <_printf_float+0xb6>
 800600e:	9a06      	ldr	r2, [sp, #24]
 8006010:	f10b 0b01 	add.w	fp, fp, #1
 8006014:	e7bb      	b.n	8005f8e <_printf_float+0x2fe>
 8006016:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800601a:	4631      	mov	r1, r6
 800601c:	4628      	mov	r0, r5
 800601e:	47b8      	blx	r7
 8006020:	3001      	adds	r0, #1
 8006022:	d1c0      	bne.n	8005fa6 <_printf_float+0x316>
 8006024:	e68f      	b.n	8005d46 <_printf_float+0xb6>
 8006026:	9a06      	ldr	r2, [sp, #24]
 8006028:	464b      	mov	r3, r9
 800602a:	4442      	add	r2, r8
 800602c:	4631      	mov	r1, r6
 800602e:	4628      	mov	r0, r5
 8006030:	47b8      	blx	r7
 8006032:	3001      	adds	r0, #1
 8006034:	d1c3      	bne.n	8005fbe <_printf_float+0x32e>
 8006036:	e686      	b.n	8005d46 <_printf_float+0xb6>
 8006038:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800603c:	f1ba 0f01 	cmp.w	sl, #1
 8006040:	dc01      	bgt.n	8006046 <_printf_float+0x3b6>
 8006042:	07db      	lsls	r3, r3, #31
 8006044:	d536      	bpl.n	80060b4 <_printf_float+0x424>
 8006046:	2301      	movs	r3, #1
 8006048:	4642      	mov	r2, r8
 800604a:	4631      	mov	r1, r6
 800604c:	4628      	mov	r0, r5
 800604e:	47b8      	blx	r7
 8006050:	3001      	adds	r0, #1
 8006052:	f43f ae78 	beq.w	8005d46 <_printf_float+0xb6>
 8006056:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800605a:	4631      	mov	r1, r6
 800605c:	4628      	mov	r0, r5
 800605e:	47b8      	blx	r7
 8006060:	3001      	adds	r0, #1
 8006062:	f43f ae70 	beq.w	8005d46 <_printf_float+0xb6>
 8006066:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800606a:	2200      	movs	r2, #0
 800606c:	2300      	movs	r3, #0
 800606e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006072:	f7fa fd29 	bl	8000ac8 <__aeabi_dcmpeq>
 8006076:	b9c0      	cbnz	r0, 80060aa <_printf_float+0x41a>
 8006078:	4653      	mov	r3, sl
 800607a:	f108 0201 	add.w	r2, r8, #1
 800607e:	4631      	mov	r1, r6
 8006080:	4628      	mov	r0, r5
 8006082:	47b8      	blx	r7
 8006084:	3001      	adds	r0, #1
 8006086:	d10c      	bne.n	80060a2 <_printf_float+0x412>
 8006088:	e65d      	b.n	8005d46 <_printf_float+0xb6>
 800608a:	2301      	movs	r3, #1
 800608c:	465a      	mov	r2, fp
 800608e:	4631      	mov	r1, r6
 8006090:	4628      	mov	r0, r5
 8006092:	47b8      	blx	r7
 8006094:	3001      	adds	r0, #1
 8006096:	f43f ae56 	beq.w	8005d46 <_printf_float+0xb6>
 800609a:	f108 0801 	add.w	r8, r8, #1
 800609e:	45d0      	cmp	r8, sl
 80060a0:	dbf3      	blt.n	800608a <_printf_float+0x3fa>
 80060a2:	464b      	mov	r3, r9
 80060a4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80060a8:	e6df      	b.n	8005e6a <_printf_float+0x1da>
 80060aa:	f04f 0800 	mov.w	r8, #0
 80060ae:	f104 0b1a 	add.w	fp, r4, #26
 80060b2:	e7f4      	b.n	800609e <_printf_float+0x40e>
 80060b4:	2301      	movs	r3, #1
 80060b6:	4642      	mov	r2, r8
 80060b8:	e7e1      	b.n	800607e <_printf_float+0x3ee>
 80060ba:	2301      	movs	r3, #1
 80060bc:	464a      	mov	r2, r9
 80060be:	4631      	mov	r1, r6
 80060c0:	4628      	mov	r0, r5
 80060c2:	47b8      	blx	r7
 80060c4:	3001      	adds	r0, #1
 80060c6:	f43f ae3e 	beq.w	8005d46 <_printf_float+0xb6>
 80060ca:	f108 0801 	add.w	r8, r8, #1
 80060ce:	68e3      	ldr	r3, [r4, #12]
 80060d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80060d2:	1a5b      	subs	r3, r3, r1
 80060d4:	4543      	cmp	r3, r8
 80060d6:	dcf0      	bgt.n	80060ba <_printf_float+0x42a>
 80060d8:	e6fc      	b.n	8005ed4 <_printf_float+0x244>
 80060da:	f04f 0800 	mov.w	r8, #0
 80060de:	f104 0919 	add.w	r9, r4, #25
 80060e2:	e7f4      	b.n	80060ce <_printf_float+0x43e>

080060e4 <_printf_common>:
 80060e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060e8:	4616      	mov	r6, r2
 80060ea:	4698      	mov	r8, r3
 80060ec:	688a      	ldr	r2, [r1, #8]
 80060ee:	690b      	ldr	r3, [r1, #16]
 80060f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80060f4:	4293      	cmp	r3, r2
 80060f6:	bfb8      	it	lt
 80060f8:	4613      	movlt	r3, r2
 80060fa:	6033      	str	r3, [r6, #0]
 80060fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006100:	4607      	mov	r7, r0
 8006102:	460c      	mov	r4, r1
 8006104:	b10a      	cbz	r2, 800610a <_printf_common+0x26>
 8006106:	3301      	adds	r3, #1
 8006108:	6033      	str	r3, [r6, #0]
 800610a:	6823      	ldr	r3, [r4, #0]
 800610c:	0699      	lsls	r1, r3, #26
 800610e:	bf42      	ittt	mi
 8006110:	6833      	ldrmi	r3, [r6, #0]
 8006112:	3302      	addmi	r3, #2
 8006114:	6033      	strmi	r3, [r6, #0]
 8006116:	6825      	ldr	r5, [r4, #0]
 8006118:	f015 0506 	ands.w	r5, r5, #6
 800611c:	d106      	bne.n	800612c <_printf_common+0x48>
 800611e:	f104 0a19 	add.w	sl, r4, #25
 8006122:	68e3      	ldr	r3, [r4, #12]
 8006124:	6832      	ldr	r2, [r6, #0]
 8006126:	1a9b      	subs	r3, r3, r2
 8006128:	42ab      	cmp	r3, r5
 800612a:	dc26      	bgt.n	800617a <_printf_common+0x96>
 800612c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006130:	6822      	ldr	r2, [r4, #0]
 8006132:	3b00      	subs	r3, #0
 8006134:	bf18      	it	ne
 8006136:	2301      	movne	r3, #1
 8006138:	0692      	lsls	r2, r2, #26
 800613a:	d42b      	bmi.n	8006194 <_printf_common+0xb0>
 800613c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006140:	4641      	mov	r1, r8
 8006142:	4638      	mov	r0, r7
 8006144:	47c8      	blx	r9
 8006146:	3001      	adds	r0, #1
 8006148:	d01e      	beq.n	8006188 <_printf_common+0xa4>
 800614a:	6823      	ldr	r3, [r4, #0]
 800614c:	6922      	ldr	r2, [r4, #16]
 800614e:	f003 0306 	and.w	r3, r3, #6
 8006152:	2b04      	cmp	r3, #4
 8006154:	bf02      	ittt	eq
 8006156:	68e5      	ldreq	r5, [r4, #12]
 8006158:	6833      	ldreq	r3, [r6, #0]
 800615a:	1aed      	subeq	r5, r5, r3
 800615c:	68a3      	ldr	r3, [r4, #8]
 800615e:	bf0c      	ite	eq
 8006160:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006164:	2500      	movne	r5, #0
 8006166:	4293      	cmp	r3, r2
 8006168:	bfc4      	itt	gt
 800616a:	1a9b      	subgt	r3, r3, r2
 800616c:	18ed      	addgt	r5, r5, r3
 800616e:	2600      	movs	r6, #0
 8006170:	341a      	adds	r4, #26
 8006172:	42b5      	cmp	r5, r6
 8006174:	d11a      	bne.n	80061ac <_printf_common+0xc8>
 8006176:	2000      	movs	r0, #0
 8006178:	e008      	b.n	800618c <_printf_common+0xa8>
 800617a:	2301      	movs	r3, #1
 800617c:	4652      	mov	r2, sl
 800617e:	4641      	mov	r1, r8
 8006180:	4638      	mov	r0, r7
 8006182:	47c8      	blx	r9
 8006184:	3001      	adds	r0, #1
 8006186:	d103      	bne.n	8006190 <_printf_common+0xac>
 8006188:	f04f 30ff 	mov.w	r0, #4294967295
 800618c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006190:	3501      	adds	r5, #1
 8006192:	e7c6      	b.n	8006122 <_printf_common+0x3e>
 8006194:	18e1      	adds	r1, r4, r3
 8006196:	1c5a      	adds	r2, r3, #1
 8006198:	2030      	movs	r0, #48	@ 0x30
 800619a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800619e:	4422      	add	r2, r4
 80061a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80061a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80061a8:	3302      	adds	r3, #2
 80061aa:	e7c7      	b.n	800613c <_printf_common+0x58>
 80061ac:	2301      	movs	r3, #1
 80061ae:	4622      	mov	r2, r4
 80061b0:	4641      	mov	r1, r8
 80061b2:	4638      	mov	r0, r7
 80061b4:	47c8      	blx	r9
 80061b6:	3001      	adds	r0, #1
 80061b8:	d0e6      	beq.n	8006188 <_printf_common+0xa4>
 80061ba:	3601      	adds	r6, #1
 80061bc:	e7d9      	b.n	8006172 <_printf_common+0x8e>
	...

080061c0 <_printf_i>:
 80061c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061c4:	7e0f      	ldrb	r7, [r1, #24]
 80061c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80061c8:	2f78      	cmp	r7, #120	@ 0x78
 80061ca:	4691      	mov	r9, r2
 80061cc:	4680      	mov	r8, r0
 80061ce:	460c      	mov	r4, r1
 80061d0:	469a      	mov	sl, r3
 80061d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80061d6:	d807      	bhi.n	80061e8 <_printf_i+0x28>
 80061d8:	2f62      	cmp	r7, #98	@ 0x62
 80061da:	d80a      	bhi.n	80061f2 <_printf_i+0x32>
 80061dc:	2f00      	cmp	r7, #0
 80061de:	f000 80d2 	beq.w	8006386 <_printf_i+0x1c6>
 80061e2:	2f58      	cmp	r7, #88	@ 0x58
 80061e4:	f000 80b9 	beq.w	800635a <_printf_i+0x19a>
 80061e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80061ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80061f0:	e03a      	b.n	8006268 <_printf_i+0xa8>
 80061f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80061f6:	2b15      	cmp	r3, #21
 80061f8:	d8f6      	bhi.n	80061e8 <_printf_i+0x28>
 80061fa:	a101      	add	r1, pc, #4	@ (adr r1, 8006200 <_printf_i+0x40>)
 80061fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006200:	08006259 	.word	0x08006259
 8006204:	0800626d 	.word	0x0800626d
 8006208:	080061e9 	.word	0x080061e9
 800620c:	080061e9 	.word	0x080061e9
 8006210:	080061e9 	.word	0x080061e9
 8006214:	080061e9 	.word	0x080061e9
 8006218:	0800626d 	.word	0x0800626d
 800621c:	080061e9 	.word	0x080061e9
 8006220:	080061e9 	.word	0x080061e9
 8006224:	080061e9 	.word	0x080061e9
 8006228:	080061e9 	.word	0x080061e9
 800622c:	0800636d 	.word	0x0800636d
 8006230:	08006297 	.word	0x08006297
 8006234:	08006327 	.word	0x08006327
 8006238:	080061e9 	.word	0x080061e9
 800623c:	080061e9 	.word	0x080061e9
 8006240:	0800638f 	.word	0x0800638f
 8006244:	080061e9 	.word	0x080061e9
 8006248:	08006297 	.word	0x08006297
 800624c:	080061e9 	.word	0x080061e9
 8006250:	080061e9 	.word	0x080061e9
 8006254:	0800632f 	.word	0x0800632f
 8006258:	6833      	ldr	r3, [r6, #0]
 800625a:	1d1a      	adds	r2, r3, #4
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	6032      	str	r2, [r6, #0]
 8006260:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006264:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006268:	2301      	movs	r3, #1
 800626a:	e09d      	b.n	80063a8 <_printf_i+0x1e8>
 800626c:	6833      	ldr	r3, [r6, #0]
 800626e:	6820      	ldr	r0, [r4, #0]
 8006270:	1d19      	adds	r1, r3, #4
 8006272:	6031      	str	r1, [r6, #0]
 8006274:	0606      	lsls	r6, r0, #24
 8006276:	d501      	bpl.n	800627c <_printf_i+0xbc>
 8006278:	681d      	ldr	r5, [r3, #0]
 800627a:	e003      	b.n	8006284 <_printf_i+0xc4>
 800627c:	0645      	lsls	r5, r0, #25
 800627e:	d5fb      	bpl.n	8006278 <_printf_i+0xb8>
 8006280:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006284:	2d00      	cmp	r5, #0
 8006286:	da03      	bge.n	8006290 <_printf_i+0xd0>
 8006288:	232d      	movs	r3, #45	@ 0x2d
 800628a:	426d      	negs	r5, r5
 800628c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006290:	4859      	ldr	r0, [pc, #356]	@ (80063f8 <_printf_i+0x238>)
 8006292:	230a      	movs	r3, #10
 8006294:	e011      	b.n	80062ba <_printf_i+0xfa>
 8006296:	6821      	ldr	r1, [r4, #0]
 8006298:	6833      	ldr	r3, [r6, #0]
 800629a:	0608      	lsls	r0, r1, #24
 800629c:	f853 5b04 	ldr.w	r5, [r3], #4
 80062a0:	d402      	bmi.n	80062a8 <_printf_i+0xe8>
 80062a2:	0649      	lsls	r1, r1, #25
 80062a4:	bf48      	it	mi
 80062a6:	b2ad      	uxthmi	r5, r5
 80062a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80062aa:	4853      	ldr	r0, [pc, #332]	@ (80063f8 <_printf_i+0x238>)
 80062ac:	6033      	str	r3, [r6, #0]
 80062ae:	bf14      	ite	ne
 80062b0:	230a      	movne	r3, #10
 80062b2:	2308      	moveq	r3, #8
 80062b4:	2100      	movs	r1, #0
 80062b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80062ba:	6866      	ldr	r6, [r4, #4]
 80062bc:	60a6      	str	r6, [r4, #8]
 80062be:	2e00      	cmp	r6, #0
 80062c0:	bfa2      	ittt	ge
 80062c2:	6821      	ldrge	r1, [r4, #0]
 80062c4:	f021 0104 	bicge.w	r1, r1, #4
 80062c8:	6021      	strge	r1, [r4, #0]
 80062ca:	b90d      	cbnz	r5, 80062d0 <_printf_i+0x110>
 80062cc:	2e00      	cmp	r6, #0
 80062ce:	d04b      	beq.n	8006368 <_printf_i+0x1a8>
 80062d0:	4616      	mov	r6, r2
 80062d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80062d6:	fb03 5711 	mls	r7, r3, r1, r5
 80062da:	5dc7      	ldrb	r7, [r0, r7]
 80062dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80062e0:	462f      	mov	r7, r5
 80062e2:	42bb      	cmp	r3, r7
 80062e4:	460d      	mov	r5, r1
 80062e6:	d9f4      	bls.n	80062d2 <_printf_i+0x112>
 80062e8:	2b08      	cmp	r3, #8
 80062ea:	d10b      	bne.n	8006304 <_printf_i+0x144>
 80062ec:	6823      	ldr	r3, [r4, #0]
 80062ee:	07df      	lsls	r7, r3, #31
 80062f0:	d508      	bpl.n	8006304 <_printf_i+0x144>
 80062f2:	6923      	ldr	r3, [r4, #16]
 80062f4:	6861      	ldr	r1, [r4, #4]
 80062f6:	4299      	cmp	r1, r3
 80062f8:	bfde      	ittt	le
 80062fa:	2330      	movle	r3, #48	@ 0x30
 80062fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006300:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006304:	1b92      	subs	r2, r2, r6
 8006306:	6122      	str	r2, [r4, #16]
 8006308:	f8cd a000 	str.w	sl, [sp]
 800630c:	464b      	mov	r3, r9
 800630e:	aa03      	add	r2, sp, #12
 8006310:	4621      	mov	r1, r4
 8006312:	4640      	mov	r0, r8
 8006314:	f7ff fee6 	bl	80060e4 <_printf_common>
 8006318:	3001      	adds	r0, #1
 800631a:	d14a      	bne.n	80063b2 <_printf_i+0x1f2>
 800631c:	f04f 30ff 	mov.w	r0, #4294967295
 8006320:	b004      	add	sp, #16
 8006322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006326:	6823      	ldr	r3, [r4, #0]
 8006328:	f043 0320 	orr.w	r3, r3, #32
 800632c:	6023      	str	r3, [r4, #0]
 800632e:	4833      	ldr	r0, [pc, #204]	@ (80063fc <_printf_i+0x23c>)
 8006330:	2778      	movs	r7, #120	@ 0x78
 8006332:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006336:	6823      	ldr	r3, [r4, #0]
 8006338:	6831      	ldr	r1, [r6, #0]
 800633a:	061f      	lsls	r7, r3, #24
 800633c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006340:	d402      	bmi.n	8006348 <_printf_i+0x188>
 8006342:	065f      	lsls	r7, r3, #25
 8006344:	bf48      	it	mi
 8006346:	b2ad      	uxthmi	r5, r5
 8006348:	6031      	str	r1, [r6, #0]
 800634a:	07d9      	lsls	r1, r3, #31
 800634c:	bf44      	itt	mi
 800634e:	f043 0320 	orrmi.w	r3, r3, #32
 8006352:	6023      	strmi	r3, [r4, #0]
 8006354:	b11d      	cbz	r5, 800635e <_printf_i+0x19e>
 8006356:	2310      	movs	r3, #16
 8006358:	e7ac      	b.n	80062b4 <_printf_i+0xf4>
 800635a:	4827      	ldr	r0, [pc, #156]	@ (80063f8 <_printf_i+0x238>)
 800635c:	e7e9      	b.n	8006332 <_printf_i+0x172>
 800635e:	6823      	ldr	r3, [r4, #0]
 8006360:	f023 0320 	bic.w	r3, r3, #32
 8006364:	6023      	str	r3, [r4, #0]
 8006366:	e7f6      	b.n	8006356 <_printf_i+0x196>
 8006368:	4616      	mov	r6, r2
 800636a:	e7bd      	b.n	80062e8 <_printf_i+0x128>
 800636c:	6833      	ldr	r3, [r6, #0]
 800636e:	6825      	ldr	r5, [r4, #0]
 8006370:	6961      	ldr	r1, [r4, #20]
 8006372:	1d18      	adds	r0, r3, #4
 8006374:	6030      	str	r0, [r6, #0]
 8006376:	062e      	lsls	r6, r5, #24
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	d501      	bpl.n	8006380 <_printf_i+0x1c0>
 800637c:	6019      	str	r1, [r3, #0]
 800637e:	e002      	b.n	8006386 <_printf_i+0x1c6>
 8006380:	0668      	lsls	r0, r5, #25
 8006382:	d5fb      	bpl.n	800637c <_printf_i+0x1bc>
 8006384:	8019      	strh	r1, [r3, #0]
 8006386:	2300      	movs	r3, #0
 8006388:	6123      	str	r3, [r4, #16]
 800638a:	4616      	mov	r6, r2
 800638c:	e7bc      	b.n	8006308 <_printf_i+0x148>
 800638e:	6833      	ldr	r3, [r6, #0]
 8006390:	1d1a      	adds	r2, r3, #4
 8006392:	6032      	str	r2, [r6, #0]
 8006394:	681e      	ldr	r6, [r3, #0]
 8006396:	6862      	ldr	r2, [r4, #4]
 8006398:	2100      	movs	r1, #0
 800639a:	4630      	mov	r0, r6
 800639c:	f7f9 ff18 	bl	80001d0 <memchr>
 80063a0:	b108      	cbz	r0, 80063a6 <_printf_i+0x1e6>
 80063a2:	1b80      	subs	r0, r0, r6
 80063a4:	6060      	str	r0, [r4, #4]
 80063a6:	6863      	ldr	r3, [r4, #4]
 80063a8:	6123      	str	r3, [r4, #16]
 80063aa:	2300      	movs	r3, #0
 80063ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063b0:	e7aa      	b.n	8006308 <_printf_i+0x148>
 80063b2:	6923      	ldr	r3, [r4, #16]
 80063b4:	4632      	mov	r2, r6
 80063b6:	4649      	mov	r1, r9
 80063b8:	4640      	mov	r0, r8
 80063ba:	47d0      	blx	sl
 80063bc:	3001      	adds	r0, #1
 80063be:	d0ad      	beq.n	800631c <_printf_i+0x15c>
 80063c0:	6823      	ldr	r3, [r4, #0]
 80063c2:	079b      	lsls	r3, r3, #30
 80063c4:	d413      	bmi.n	80063ee <_printf_i+0x22e>
 80063c6:	68e0      	ldr	r0, [r4, #12]
 80063c8:	9b03      	ldr	r3, [sp, #12]
 80063ca:	4298      	cmp	r0, r3
 80063cc:	bfb8      	it	lt
 80063ce:	4618      	movlt	r0, r3
 80063d0:	e7a6      	b.n	8006320 <_printf_i+0x160>
 80063d2:	2301      	movs	r3, #1
 80063d4:	4632      	mov	r2, r6
 80063d6:	4649      	mov	r1, r9
 80063d8:	4640      	mov	r0, r8
 80063da:	47d0      	blx	sl
 80063dc:	3001      	adds	r0, #1
 80063de:	d09d      	beq.n	800631c <_printf_i+0x15c>
 80063e0:	3501      	adds	r5, #1
 80063e2:	68e3      	ldr	r3, [r4, #12]
 80063e4:	9903      	ldr	r1, [sp, #12]
 80063e6:	1a5b      	subs	r3, r3, r1
 80063e8:	42ab      	cmp	r3, r5
 80063ea:	dcf2      	bgt.n	80063d2 <_printf_i+0x212>
 80063ec:	e7eb      	b.n	80063c6 <_printf_i+0x206>
 80063ee:	2500      	movs	r5, #0
 80063f0:	f104 0619 	add.w	r6, r4, #25
 80063f4:	e7f5      	b.n	80063e2 <_printf_i+0x222>
 80063f6:	bf00      	nop
 80063f8:	0800a51a 	.word	0x0800a51a
 80063fc:	0800a52b 	.word	0x0800a52b

08006400 <_scanf_float>:
 8006400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006404:	b087      	sub	sp, #28
 8006406:	4617      	mov	r7, r2
 8006408:	9303      	str	r3, [sp, #12]
 800640a:	688b      	ldr	r3, [r1, #8]
 800640c:	1e5a      	subs	r2, r3, #1
 800640e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006412:	bf81      	itttt	hi
 8006414:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006418:	eb03 0b05 	addhi.w	fp, r3, r5
 800641c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006420:	608b      	strhi	r3, [r1, #8]
 8006422:	680b      	ldr	r3, [r1, #0]
 8006424:	460a      	mov	r2, r1
 8006426:	f04f 0500 	mov.w	r5, #0
 800642a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800642e:	f842 3b1c 	str.w	r3, [r2], #28
 8006432:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006436:	4680      	mov	r8, r0
 8006438:	460c      	mov	r4, r1
 800643a:	bf98      	it	ls
 800643c:	f04f 0b00 	movls.w	fp, #0
 8006440:	9201      	str	r2, [sp, #4]
 8006442:	4616      	mov	r6, r2
 8006444:	46aa      	mov	sl, r5
 8006446:	46a9      	mov	r9, r5
 8006448:	9502      	str	r5, [sp, #8]
 800644a:	68a2      	ldr	r2, [r4, #8]
 800644c:	b152      	cbz	r2, 8006464 <_scanf_float+0x64>
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	2b4e      	cmp	r3, #78	@ 0x4e
 8006454:	d864      	bhi.n	8006520 <_scanf_float+0x120>
 8006456:	2b40      	cmp	r3, #64	@ 0x40
 8006458:	d83c      	bhi.n	80064d4 <_scanf_float+0xd4>
 800645a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800645e:	b2c8      	uxtb	r0, r1
 8006460:	280e      	cmp	r0, #14
 8006462:	d93a      	bls.n	80064da <_scanf_float+0xda>
 8006464:	f1b9 0f00 	cmp.w	r9, #0
 8006468:	d003      	beq.n	8006472 <_scanf_float+0x72>
 800646a:	6823      	ldr	r3, [r4, #0]
 800646c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006470:	6023      	str	r3, [r4, #0]
 8006472:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006476:	f1ba 0f01 	cmp.w	sl, #1
 800647a:	f200 8117 	bhi.w	80066ac <_scanf_float+0x2ac>
 800647e:	9b01      	ldr	r3, [sp, #4]
 8006480:	429e      	cmp	r6, r3
 8006482:	f200 8108 	bhi.w	8006696 <_scanf_float+0x296>
 8006486:	2001      	movs	r0, #1
 8006488:	b007      	add	sp, #28
 800648a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800648e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006492:	2a0d      	cmp	r2, #13
 8006494:	d8e6      	bhi.n	8006464 <_scanf_float+0x64>
 8006496:	a101      	add	r1, pc, #4	@ (adr r1, 800649c <_scanf_float+0x9c>)
 8006498:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800649c:	080065e3 	.word	0x080065e3
 80064a0:	08006465 	.word	0x08006465
 80064a4:	08006465 	.word	0x08006465
 80064a8:	08006465 	.word	0x08006465
 80064ac:	08006643 	.word	0x08006643
 80064b0:	0800661b 	.word	0x0800661b
 80064b4:	08006465 	.word	0x08006465
 80064b8:	08006465 	.word	0x08006465
 80064bc:	080065f1 	.word	0x080065f1
 80064c0:	08006465 	.word	0x08006465
 80064c4:	08006465 	.word	0x08006465
 80064c8:	08006465 	.word	0x08006465
 80064cc:	08006465 	.word	0x08006465
 80064d0:	080065a9 	.word	0x080065a9
 80064d4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80064d8:	e7db      	b.n	8006492 <_scanf_float+0x92>
 80064da:	290e      	cmp	r1, #14
 80064dc:	d8c2      	bhi.n	8006464 <_scanf_float+0x64>
 80064de:	a001      	add	r0, pc, #4	@ (adr r0, 80064e4 <_scanf_float+0xe4>)
 80064e0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80064e4:	08006599 	.word	0x08006599
 80064e8:	08006465 	.word	0x08006465
 80064ec:	08006599 	.word	0x08006599
 80064f0:	0800662f 	.word	0x0800662f
 80064f4:	08006465 	.word	0x08006465
 80064f8:	08006541 	.word	0x08006541
 80064fc:	0800657f 	.word	0x0800657f
 8006500:	0800657f 	.word	0x0800657f
 8006504:	0800657f 	.word	0x0800657f
 8006508:	0800657f 	.word	0x0800657f
 800650c:	0800657f 	.word	0x0800657f
 8006510:	0800657f 	.word	0x0800657f
 8006514:	0800657f 	.word	0x0800657f
 8006518:	0800657f 	.word	0x0800657f
 800651c:	0800657f 	.word	0x0800657f
 8006520:	2b6e      	cmp	r3, #110	@ 0x6e
 8006522:	d809      	bhi.n	8006538 <_scanf_float+0x138>
 8006524:	2b60      	cmp	r3, #96	@ 0x60
 8006526:	d8b2      	bhi.n	800648e <_scanf_float+0x8e>
 8006528:	2b54      	cmp	r3, #84	@ 0x54
 800652a:	d07b      	beq.n	8006624 <_scanf_float+0x224>
 800652c:	2b59      	cmp	r3, #89	@ 0x59
 800652e:	d199      	bne.n	8006464 <_scanf_float+0x64>
 8006530:	2d07      	cmp	r5, #7
 8006532:	d197      	bne.n	8006464 <_scanf_float+0x64>
 8006534:	2508      	movs	r5, #8
 8006536:	e02c      	b.n	8006592 <_scanf_float+0x192>
 8006538:	2b74      	cmp	r3, #116	@ 0x74
 800653a:	d073      	beq.n	8006624 <_scanf_float+0x224>
 800653c:	2b79      	cmp	r3, #121	@ 0x79
 800653e:	e7f6      	b.n	800652e <_scanf_float+0x12e>
 8006540:	6821      	ldr	r1, [r4, #0]
 8006542:	05c8      	lsls	r0, r1, #23
 8006544:	d51b      	bpl.n	800657e <_scanf_float+0x17e>
 8006546:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800654a:	6021      	str	r1, [r4, #0]
 800654c:	f109 0901 	add.w	r9, r9, #1
 8006550:	f1bb 0f00 	cmp.w	fp, #0
 8006554:	d003      	beq.n	800655e <_scanf_float+0x15e>
 8006556:	3201      	adds	r2, #1
 8006558:	f10b 3bff 	add.w	fp, fp, #4294967295
 800655c:	60a2      	str	r2, [r4, #8]
 800655e:	68a3      	ldr	r3, [r4, #8]
 8006560:	3b01      	subs	r3, #1
 8006562:	60a3      	str	r3, [r4, #8]
 8006564:	6923      	ldr	r3, [r4, #16]
 8006566:	3301      	adds	r3, #1
 8006568:	6123      	str	r3, [r4, #16]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	3b01      	subs	r3, #1
 800656e:	2b00      	cmp	r3, #0
 8006570:	607b      	str	r3, [r7, #4]
 8006572:	f340 8087 	ble.w	8006684 <_scanf_float+0x284>
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	3301      	adds	r3, #1
 800657a:	603b      	str	r3, [r7, #0]
 800657c:	e765      	b.n	800644a <_scanf_float+0x4a>
 800657e:	eb1a 0105 	adds.w	r1, sl, r5
 8006582:	f47f af6f 	bne.w	8006464 <_scanf_float+0x64>
 8006586:	6822      	ldr	r2, [r4, #0]
 8006588:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800658c:	6022      	str	r2, [r4, #0]
 800658e:	460d      	mov	r5, r1
 8006590:	468a      	mov	sl, r1
 8006592:	f806 3b01 	strb.w	r3, [r6], #1
 8006596:	e7e2      	b.n	800655e <_scanf_float+0x15e>
 8006598:	6822      	ldr	r2, [r4, #0]
 800659a:	0610      	lsls	r0, r2, #24
 800659c:	f57f af62 	bpl.w	8006464 <_scanf_float+0x64>
 80065a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80065a4:	6022      	str	r2, [r4, #0]
 80065a6:	e7f4      	b.n	8006592 <_scanf_float+0x192>
 80065a8:	f1ba 0f00 	cmp.w	sl, #0
 80065ac:	d10e      	bne.n	80065cc <_scanf_float+0x1cc>
 80065ae:	f1b9 0f00 	cmp.w	r9, #0
 80065b2:	d10e      	bne.n	80065d2 <_scanf_float+0x1d2>
 80065b4:	6822      	ldr	r2, [r4, #0]
 80065b6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80065ba:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80065be:	d108      	bne.n	80065d2 <_scanf_float+0x1d2>
 80065c0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80065c4:	6022      	str	r2, [r4, #0]
 80065c6:	f04f 0a01 	mov.w	sl, #1
 80065ca:	e7e2      	b.n	8006592 <_scanf_float+0x192>
 80065cc:	f1ba 0f02 	cmp.w	sl, #2
 80065d0:	d055      	beq.n	800667e <_scanf_float+0x27e>
 80065d2:	2d01      	cmp	r5, #1
 80065d4:	d002      	beq.n	80065dc <_scanf_float+0x1dc>
 80065d6:	2d04      	cmp	r5, #4
 80065d8:	f47f af44 	bne.w	8006464 <_scanf_float+0x64>
 80065dc:	3501      	adds	r5, #1
 80065de:	b2ed      	uxtb	r5, r5
 80065e0:	e7d7      	b.n	8006592 <_scanf_float+0x192>
 80065e2:	f1ba 0f01 	cmp.w	sl, #1
 80065e6:	f47f af3d 	bne.w	8006464 <_scanf_float+0x64>
 80065ea:	f04f 0a02 	mov.w	sl, #2
 80065ee:	e7d0      	b.n	8006592 <_scanf_float+0x192>
 80065f0:	b97d      	cbnz	r5, 8006612 <_scanf_float+0x212>
 80065f2:	f1b9 0f00 	cmp.w	r9, #0
 80065f6:	f47f af38 	bne.w	800646a <_scanf_float+0x6a>
 80065fa:	6822      	ldr	r2, [r4, #0]
 80065fc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006600:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006604:	f040 8108 	bne.w	8006818 <_scanf_float+0x418>
 8006608:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800660c:	6022      	str	r2, [r4, #0]
 800660e:	2501      	movs	r5, #1
 8006610:	e7bf      	b.n	8006592 <_scanf_float+0x192>
 8006612:	2d03      	cmp	r5, #3
 8006614:	d0e2      	beq.n	80065dc <_scanf_float+0x1dc>
 8006616:	2d05      	cmp	r5, #5
 8006618:	e7de      	b.n	80065d8 <_scanf_float+0x1d8>
 800661a:	2d02      	cmp	r5, #2
 800661c:	f47f af22 	bne.w	8006464 <_scanf_float+0x64>
 8006620:	2503      	movs	r5, #3
 8006622:	e7b6      	b.n	8006592 <_scanf_float+0x192>
 8006624:	2d06      	cmp	r5, #6
 8006626:	f47f af1d 	bne.w	8006464 <_scanf_float+0x64>
 800662a:	2507      	movs	r5, #7
 800662c:	e7b1      	b.n	8006592 <_scanf_float+0x192>
 800662e:	6822      	ldr	r2, [r4, #0]
 8006630:	0591      	lsls	r1, r2, #22
 8006632:	f57f af17 	bpl.w	8006464 <_scanf_float+0x64>
 8006636:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800663a:	6022      	str	r2, [r4, #0]
 800663c:	f8cd 9008 	str.w	r9, [sp, #8]
 8006640:	e7a7      	b.n	8006592 <_scanf_float+0x192>
 8006642:	6822      	ldr	r2, [r4, #0]
 8006644:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006648:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800664c:	d006      	beq.n	800665c <_scanf_float+0x25c>
 800664e:	0550      	lsls	r0, r2, #21
 8006650:	f57f af08 	bpl.w	8006464 <_scanf_float+0x64>
 8006654:	f1b9 0f00 	cmp.w	r9, #0
 8006658:	f000 80de 	beq.w	8006818 <_scanf_float+0x418>
 800665c:	0591      	lsls	r1, r2, #22
 800665e:	bf58      	it	pl
 8006660:	9902      	ldrpl	r1, [sp, #8]
 8006662:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006666:	bf58      	it	pl
 8006668:	eba9 0101 	subpl.w	r1, r9, r1
 800666c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006670:	bf58      	it	pl
 8006672:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006676:	6022      	str	r2, [r4, #0]
 8006678:	f04f 0900 	mov.w	r9, #0
 800667c:	e789      	b.n	8006592 <_scanf_float+0x192>
 800667e:	f04f 0a03 	mov.w	sl, #3
 8006682:	e786      	b.n	8006592 <_scanf_float+0x192>
 8006684:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006688:	4639      	mov	r1, r7
 800668a:	4640      	mov	r0, r8
 800668c:	4798      	blx	r3
 800668e:	2800      	cmp	r0, #0
 8006690:	f43f aedb 	beq.w	800644a <_scanf_float+0x4a>
 8006694:	e6e6      	b.n	8006464 <_scanf_float+0x64>
 8006696:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800669a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800669e:	463a      	mov	r2, r7
 80066a0:	4640      	mov	r0, r8
 80066a2:	4798      	blx	r3
 80066a4:	6923      	ldr	r3, [r4, #16]
 80066a6:	3b01      	subs	r3, #1
 80066a8:	6123      	str	r3, [r4, #16]
 80066aa:	e6e8      	b.n	800647e <_scanf_float+0x7e>
 80066ac:	1e6b      	subs	r3, r5, #1
 80066ae:	2b06      	cmp	r3, #6
 80066b0:	d824      	bhi.n	80066fc <_scanf_float+0x2fc>
 80066b2:	2d02      	cmp	r5, #2
 80066b4:	d836      	bhi.n	8006724 <_scanf_float+0x324>
 80066b6:	9b01      	ldr	r3, [sp, #4]
 80066b8:	429e      	cmp	r6, r3
 80066ba:	f67f aee4 	bls.w	8006486 <_scanf_float+0x86>
 80066be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80066c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80066c6:	463a      	mov	r2, r7
 80066c8:	4640      	mov	r0, r8
 80066ca:	4798      	blx	r3
 80066cc:	6923      	ldr	r3, [r4, #16]
 80066ce:	3b01      	subs	r3, #1
 80066d0:	6123      	str	r3, [r4, #16]
 80066d2:	e7f0      	b.n	80066b6 <_scanf_float+0x2b6>
 80066d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80066d8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80066dc:	463a      	mov	r2, r7
 80066de:	4640      	mov	r0, r8
 80066e0:	4798      	blx	r3
 80066e2:	6923      	ldr	r3, [r4, #16]
 80066e4:	3b01      	subs	r3, #1
 80066e6:	6123      	str	r3, [r4, #16]
 80066e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80066ec:	fa5f fa8a 	uxtb.w	sl, sl
 80066f0:	f1ba 0f02 	cmp.w	sl, #2
 80066f4:	d1ee      	bne.n	80066d4 <_scanf_float+0x2d4>
 80066f6:	3d03      	subs	r5, #3
 80066f8:	b2ed      	uxtb	r5, r5
 80066fa:	1b76      	subs	r6, r6, r5
 80066fc:	6823      	ldr	r3, [r4, #0]
 80066fe:	05da      	lsls	r2, r3, #23
 8006700:	d530      	bpl.n	8006764 <_scanf_float+0x364>
 8006702:	055b      	lsls	r3, r3, #21
 8006704:	d511      	bpl.n	800672a <_scanf_float+0x32a>
 8006706:	9b01      	ldr	r3, [sp, #4]
 8006708:	429e      	cmp	r6, r3
 800670a:	f67f aebc 	bls.w	8006486 <_scanf_float+0x86>
 800670e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006712:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006716:	463a      	mov	r2, r7
 8006718:	4640      	mov	r0, r8
 800671a:	4798      	blx	r3
 800671c:	6923      	ldr	r3, [r4, #16]
 800671e:	3b01      	subs	r3, #1
 8006720:	6123      	str	r3, [r4, #16]
 8006722:	e7f0      	b.n	8006706 <_scanf_float+0x306>
 8006724:	46aa      	mov	sl, r5
 8006726:	46b3      	mov	fp, r6
 8006728:	e7de      	b.n	80066e8 <_scanf_float+0x2e8>
 800672a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800672e:	6923      	ldr	r3, [r4, #16]
 8006730:	2965      	cmp	r1, #101	@ 0x65
 8006732:	f103 33ff 	add.w	r3, r3, #4294967295
 8006736:	f106 35ff 	add.w	r5, r6, #4294967295
 800673a:	6123      	str	r3, [r4, #16]
 800673c:	d00c      	beq.n	8006758 <_scanf_float+0x358>
 800673e:	2945      	cmp	r1, #69	@ 0x45
 8006740:	d00a      	beq.n	8006758 <_scanf_float+0x358>
 8006742:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006746:	463a      	mov	r2, r7
 8006748:	4640      	mov	r0, r8
 800674a:	4798      	blx	r3
 800674c:	6923      	ldr	r3, [r4, #16]
 800674e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006752:	3b01      	subs	r3, #1
 8006754:	1eb5      	subs	r5, r6, #2
 8006756:	6123      	str	r3, [r4, #16]
 8006758:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800675c:	463a      	mov	r2, r7
 800675e:	4640      	mov	r0, r8
 8006760:	4798      	blx	r3
 8006762:	462e      	mov	r6, r5
 8006764:	6822      	ldr	r2, [r4, #0]
 8006766:	f012 0210 	ands.w	r2, r2, #16
 800676a:	d001      	beq.n	8006770 <_scanf_float+0x370>
 800676c:	2000      	movs	r0, #0
 800676e:	e68b      	b.n	8006488 <_scanf_float+0x88>
 8006770:	7032      	strb	r2, [r6, #0]
 8006772:	6823      	ldr	r3, [r4, #0]
 8006774:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006778:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800677c:	d11c      	bne.n	80067b8 <_scanf_float+0x3b8>
 800677e:	9b02      	ldr	r3, [sp, #8]
 8006780:	454b      	cmp	r3, r9
 8006782:	eba3 0209 	sub.w	r2, r3, r9
 8006786:	d123      	bne.n	80067d0 <_scanf_float+0x3d0>
 8006788:	9901      	ldr	r1, [sp, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	4640      	mov	r0, r8
 800678e:	f002 fbf7 	bl	8008f80 <_strtod_r>
 8006792:	9b03      	ldr	r3, [sp, #12]
 8006794:	6821      	ldr	r1, [r4, #0]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f011 0f02 	tst.w	r1, #2
 800679c:	ec57 6b10 	vmov	r6, r7, d0
 80067a0:	f103 0204 	add.w	r2, r3, #4
 80067a4:	d01f      	beq.n	80067e6 <_scanf_float+0x3e6>
 80067a6:	9903      	ldr	r1, [sp, #12]
 80067a8:	600a      	str	r2, [r1, #0]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	e9c3 6700 	strd	r6, r7, [r3]
 80067b0:	68e3      	ldr	r3, [r4, #12]
 80067b2:	3301      	adds	r3, #1
 80067b4:	60e3      	str	r3, [r4, #12]
 80067b6:	e7d9      	b.n	800676c <_scanf_float+0x36c>
 80067b8:	9b04      	ldr	r3, [sp, #16]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d0e4      	beq.n	8006788 <_scanf_float+0x388>
 80067be:	9905      	ldr	r1, [sp, #20]
 80067c0:	230a      	movs	r3, #10
 80067c2:	3101      	adds	r1, #1
 80067c4:	4640      	mov	r0, r8
 80067c6:	f002 fc5b 	bl	8009080 <_strtol_r>
 80067ca:	9b04      	ldr	r3, [sp, #16]
 80067cc:	9e05      	ldr	r6, [sp, #20]
 80067ce:	1ac2      	subs	r2, r0, r3
 80067d0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80067d4:	429e      	cmp	r6, r3
 80067d6:	bf28      	it	cs
 80067d8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80067dc:	4910      	ldr	r1, [pc, #64]	@ (8006820 <_scanf_float+0x420>)
 80067de:	4630      	mov	r0, r6
 80067e0:	f000 f8e4 	bl	80069ac <siprintf>
 80067e4:	e7d0      	b.n	8006788 <_scanf_float+0x388>
 80067e6:	f011 0f04 	tst.w	r1, #4
 80067ea:	9903      	ldr	r1, [sp, #12]
 80067ec:	600a      	str	r2, [r1, #0]
 80067ee:	d1dc      	bne.n	80067aa <_scanf_float+0x3aa>
 80067f0:	681d      	ldr	r5, [r3, #0]
 80067f2:	4632      	mov	r2, r6
 80067f4:	463b      	mov	r3, r7
 80067f6:	4630      	mov	r0, r6
 80067f8:	4639      	mov	r1, r7
 80067fa:	f7fa f997 	bl	8000b2c <__aeabi_dcmpun>
 80067fe:	b128      	cbz	r0, 800680c <_scanf_float+0x40c>
 8006800:	4808      	ldr	r0, [pc, #32]	@ (8006824 <_scanf_float+0x424>)
 8006802:	f000 f9b7 	bl	8006b74 <nanf>
 8006806:	ed85 0a00 	vstr	s0, [r5]
 800680a:	e7d1      	b.n	80067b0 <_scanf_float+0x3b0>
 800680c:	4630      	mov	r0, r6
 800680e:	4639      	mov	r1, r7
 8006810:	f7fa f9ea 	bl	8000be8 <__aeabi_d2f>
 8006814:	6028      	str	r0, [r5, #0]
 8006816:	e7cb      	b.n	80067b0 <_scanf_float+0x3b0>
 8006818:	f04f 0900 	mov.w	r9, #0
 800681c:	e629      	b.n	8006472 <_scanf_float+0x72>
 800681e:	bf00      	nop
 8006820:	0800a53c 	.word	0x0800a53c
 8006824:	0800a8d5 	.word	0x0800a8d5

08006828 <std>:
 8006828:	2300      	movs	r3, #0
 800682a:	b510      	push	{r4, lr}
 800682c:	4604      	mov	r4, r0
 800682e:	e9c0 3300 	strd	r3, r3, [r0]
 8006832:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006836:	6083      	str	r3, [r0, #8]
 8006838:	8181      	strh	r1, [r0, #12]
 800683a:	6643      	str	r3, [r0, #100]	@ 0x64
 800683c:	81c2      	strh	r2, [r0, #14]
 800683e:	6183      	str	r3, [r0, #24]
 8006840:	4619      	mov	r1, r3
 8006842:	2208      	movs	r2, #8
 8006844:	305c      	adds	r0, #92	@ 0x5c
 8006846:	f000 f914 	bl	8006a72 <memset>
 800684a:	4b0d      	ldr	r3, [pc, #52]	@ (8006880 <std+0x58>)
 800684c:	6263      	str	r3, [r4, #36]	@ 0x24
 800684e:	4b0d      	ldr	r3, [pc, #52]	@ (8006884 <std+0x5c>)
 8006850:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006852:	4b0d      	ldr	r3, [pc, #52]	@ (8006888 <std+0x60>)
 8006854:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006856:	4b0d      	ldr	r3, [pc, #52]	@ (800688c <std+0x64>)
 8006858:	6323      	str	r3, [r4, #48]	@ 0x30
 800685a:	4b0d      	ldr	r3, [pc, #52]	@ (8006890 <std+0x68>)
 800685c:	6224      	str	r4, [r4, #32]
 800685e:	429c      	cmp	r4, r3
 8006860:	d006      	beq.n	8006870 <std+0x48>
 8006862:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006866:	4294      	cmp	r4, r2
 8006868:	d002      	beq.n	8006870 <std+0x48>
 800686a:	33d0      	adds	r3, #208	@ 0xd0
 800686c:	429c      	cmp	r4, r3
 800686e:	d105      	bne.n	800687c <std+0x54>
 8006870:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006878:	f000 b978 	b.w	8006b6c <__retarget_lock_init_recursive>
 800687c:	bd10      	pop	{r4, pc}
 800687e:	bf00      	nop
 8006880:	080069ed 	.word	0x080069ed
 8006884:	08006a0f 	.word	0x08006a0f
 8006888:	08006a47 	.word	0x08006a47
 800688c:	08006a6b 	.word	0x08006a6b
 8006890:	20000388 	.word	0x20000388

08006894 <stdio_exit_handler>:
 8006894:	4a02      	ldr	r2, [pc, #8]	@ (80068a0 <stdio_exit_handler+0xc>)
 8006896:	4903      	ldr	r1, [pc, #12]	@ (80068a4 <stdio_exit_handler+0x10>)
 8006898:	4803      	ldr	r0, [pc, #12]	@ (80068a8 <stdio_exit_handler+0x14>)
 800689a:	f000 b869 	b.w	8006970 <_fwalk_sglue>
 800689e:	bf00      	nop
 80068a0:	2000000c 	.word	0x2000000c
 80068a4:	0800943d 	.word	0x0800943d
 80068a8:	2000001c 	.word	0x2000001c

080068ac <cleanup_stdio>:
 80068ac:	6841      	ldr	r1, [r0, #4]
 80068ae:	4b0c      	ldr	r3, [pc, #48]	@ (80068e0 <cleanup_stdio+0x34>)
 80068b0:	4299      	cmp	r1, r3
 80068b2:	b510      	push	{r4, lr}
 80068b4:	4604      	mov	r4, r0
 80068b6:	d001      	beq.n	80068bc <cleanup_stdio+0x10>
 80068b8:	f002 fdc0 	bl	800943c <_fflush_r>
 80068bc:	68a1      	ldr	r1, [r4, #8]
 80068be:	4b09      	ldr	r3, [pc, #36]	@ (80068e4 <cleanup_stdio+0x38>)
 80068c0:	4299      	cmp	r1, r3
 80068c2:	d002      	beq.n	80068ca <cleanup_stdio+0x1e>
 80068c4:	4620      	mov	r0, r4
 80068c6:	f002 fdb9 	bl	800943c <_fflush_r>
 80068ca:	68e1      	ldr	r1, [r4, #12]
 80068cc:	4b06      	ldr	r3, [pc, #24]	@ (80068e8 <cleanup_stdio+0x3c>)
 80068ce:	4299      	cmp	r1, r3
 80068d0:	d004      	beq.n	80068dc <cleanup_stdio+0x30>
 80068d2:	4620      	mov	r0, r4
 80068d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068d8:	f002 bdb0 	b.w	800943c <_fflush_r>
 80068dc:	bd10      	pop	{r4, pc}
 80068de:	bf00      	nop
 80068e0:	20000388 	.word	0x20000388
 80068e4:	200003f0 	.word	0x200003f0
 80068e8:	20000458 	.word	0x20000458

080068ec <global_stdio_init.part.0>:
 80068ec:	b510      	push	{r4, lr}
 80068ee:	4b0b      	ldr	r3, [pc, #44]	@ (800691c <global_stdio_init.part.0+0x30>)
 80068f0:	4c0b      	ldr	r4, [pc, #44]	@ (8006920 <global_stdio_init.part.0+0x34>)
 80068f2:	4a0c      	ldr	r2, [pc, #48]	@ (8006924 <global_stdio_init.part.0+0x38>)
 80068f4:	601a      	str	r2, [r3, #0]
 80068f6:	4620      	mov	r0, r4
 80068f8:	2200      	movs	r2, #0
 80068fa:	2104      	movs	r1, #4
 80068fc:	f7ff ff94 	bl	8006828 <std>
 8006900:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006904:	2201      	movs	r2, #1
 8006906:	2109      	movs	r1, #9
 8006908:	f7ff ff8e 	bl	8006828 <std>
 800690c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006910:	2202      	movs	r2, #2
 8006912:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006916:	2112      	movs	r1, #18
 8006918:	f7ff bf86 	b.w	8006828 <std>
 800691c:	200004c0 	.word	0x200004c0
 8006920:	20000388 	.word	0x20000388
 8006924:	08006895 	.word	0x08006895

08006928 <__sfp_lock_acquire>:
 8006928:	4801      	ldr	r0, [pc, #4]	@ (8006930 <__sfp_lock_acquire+0x8>)
 800692a:	f000 b920 	b.w	8006b6e <__retarget_lock_acquire_recursive>
 800692e:	bf00      	nop
 8006930:	200004c9 	.word	0x200004c9

08006934 <__sfp_lock_release>:
 8006934:	4801      	ldr	r0, [pc, #4]	@ (800693c <__sfp_lock_release+0x8>)
 8006936:	f000 b91b 	b.w	8006b70 <__retarget_lock_release_recursive>
 800693a:	bf00      	nop
 800693c:	200004c9 	.word	0x200004c9

08006940 <__sinit>:
 8006940:	b510      	push	{r4, lr}
 8006942:	4604      	mov	r4, r0
 8006944:	f7ff fff0 	bl	8006928 <__sfp_lock_acquire>
 8006948:	6a23      	ldr	r3, [r4, #32]
 800694a:	b11b      	cbz	r3, 8006954 <__sinit+0x14>
 800694c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006950:	f7ff bff0 	b.w	8006934 <__sfp_lock_release>
 8006954:	4b04      	ldr	r3, [pc, #16]	@ (8006968 <__sinit+0x28>)
 8006956:	6223      	str	r3, [r4, #32]
 8006958:	4b04      	ldr	r3, [pc, #16]	@ (800696c <__sinit+0x2c>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d1f5      	bne.n	800694c <__sinit+0xc>
 8006960:	f7ff ffc4 	bl	80068ec <global_stdio_init.part.0>
 8006964:	e7f2      	b.n	800694c <__sinit+0xc>
 8006966:	bf00      	nop
 8006968:	080068ad 	.word	0x080068ad
 800696c:	200004c0 	.word	0x200004c0

08006970 <_fwalk_sglue>:
 8006970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006974:	4607      	mov	r7, r0
 8006976:	4688      	mov	r8, r1
 8006978:	4614      	mov	r4, r2
 800697a:	2600      	movs	r6, #0
 800697c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006980:	f1b9 0901 	subs.w	r9, r9, #1
 8006984:	d505      	bpl.n	8006992 <_fwalk_sglue+0x22>
 8006986:	6824      	ldr	r4, [r4, #0]
 8006988:	2c00      	cmp	r4, #0
 800698a:	d1f7      	bne.n	800697c <_fwalk_sglue+0xc>
 800698c:	4630      	mov	r0, r6
 800698e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006992:	89ab      	ldrh	r3, [r5, #12]
 8006994:	2b01      	cmp	r3, #1
 8006996:	d907      	bls.n	80069a8 <_fwalk_sglue+0x38>
 8006998:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800699c:	3301      	adds	r3, #1
 800699e:	d003      	beq.n	80069a8 <_fwalk_sglue+0x38>
 80069a0:	4629      	mov	r1, r5
 80069a2:	4638      	mov	r0, r7
 80069a4:	47c0      	blx	r8
 80069a6:	4306      	orrs	r6, r0
 80069a8:	3568      	adds	r5, #104	@ 0x68
 80069aa:	e7e9      	b.n	8006980 <_fwalk_sglue+0x10>

080069ac <siprintf>:
 80069ac:	b40e      	push	{r1, r2, r3}
 80069ae:	b500      	push	{lr}
 80069b0:	b09c      	sub	sp, #112	@ 0x70
 80069b2:	ab1d      	add	r3, sp, #116	@ 0x74
 80069b4:	9002      	str	r0, [sp, #8]
 80069b6:	9006      	str	r0, [sp, #24]
 80069b8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80069bc:	4809      	ldr	r0, [pc, #36]	@ (80069e4 <siprintf+0x38>)
 80069be:	9107      	str	r1, [sp, #28]
 80069c0:	9104      	str	r1, [sp, #16]
 80069c2:	4909      	ldr	r1, [pc, #36]	@ (80069e8 <siprintf+0x3c>)
 80069c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80069c8:	9105      	str	r1, [sp, #20]
 80069ca:	6800      	ldr	r0, [r0, #0]
 80069cc:	9301      	str	r3, [sp, #4]
 80069ce:	a902      	add	r1, sp, #8
 80069d0:	f002 fbb4 	bl	800913c <_svfiprintf_r>
 80069d4:	9b02      	ldr	r3, [sp, #8]
 80069d6:	2200      	movs	r2, #0
 80069d8:	701a      	strb	r2, [r3, #0]
 80069da:	b01c      	add	sp, #112	@ 0x70
 80069dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80069e0:	b003      	add	sp, #12
 80069e2:	4770      	bx	lr
 80069e4:	20000018 	.word	0x20000018
 80069e8:	ffff0208 	.word	0xffff0208

080069ec <__sread>:
 80069ec:	b510      	push	{r4, lr}
 80069ee:	460c      	mov	r4, r1
 80069f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069f4:	f000 f86c 	bl	8006ad0 <_read_r>
 80069f8:	2800      	cmp	r0, #0
 80069fa:	bfab      	itete	ge
 80069fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80069fe:	89a3      	ldrhlt	r3, [r4, #12]
 8006a00:	181b      	addge	r3, r3, r0
 8006a02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006a06:	bfac      	ite	ge
 8006a08:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006a0a:	81a3      	strhlt	r3, [r4, #12]
 8006a0c:	bd10      	pop	{r4, pc}

08006a0e <__swrite>:
 8006a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a12:	461f      	mov	r7, r3
 8006a14:	898b      	ldrh	r3, [r1, #12]
 8006a16:	05db      	lsls	r3, r3, #23
 8006a18:	4605      	mov	r5, r0
 8006a1a:	460c      	mov	r4, r1
 8006a1c:	4616      	mov	r6, r2
 8006a1e:	d505      	bpl.n	8006a2c <__swrite+0x1e>
 8006a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a24:	2302      	movs	r3, #2
 8006a26:	2200      	movs	r2, #0
 8006a28:	f000 f840 	bl	8006aac <_lseek_r>
 8006a2c:	89a3      	ldrh	r3, [r4, #12]
 8006a2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a36:	81a3      	strh	r3, [r4, #12]
 8006a38:	4632      	mov	r2, r6
 8006a3a:	463b      	mov	r3, r7
 8006a3c:	4628      	mov	r0, r5
 8006a3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a42:	f000 b857 	b.w	8006af4 <_write_r>

08006a46 <__sseek>:
 8006a46:	b510      	push	{r4, lr}
 8006a48:	460c      	mov	r4, r1
 8006a4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a4e:	f000 f82d 	bl	8006aac <_lseek_r>
 8006a52:	1c43      	adds	r3, r0, #1
 8006a54:	89a3      	ldrh	r3, [r4, #12]
 8006a56:	bf15      	itete	ne
 8006a58:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006a5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006a5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006a62:	81a3      	strheq	r3, [r4, #12]
 8006a64:	bf18      	it	ne
 8006a66:	81a3      	strhne	r3, [r4, #12]
 8006a68:	bd10      	pop	{r4, pc}

08006a6a <__sclose>:
 8006a6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a6e:	f000 b80d 	b.w	8006a8c <_close_r>

08006a72 <memset>:
 8006a72:	4402      	add	r2, r0
 8006a74:	4603      	mov	r3, r0
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d100      	bne.n	8006a7c <memset+0xa>
 8006a7a:	4770      	bx	lr
 8006a7c:	f803 1b01 	strb.w	r1, [r3], #1
 8006a80:	e7f9      	b.n	8006a76 <memset+0x4>
	...

08006a84 <_localeconv_r>:
 8006a84:	4800      	ldr	r0, [pc, #0]	@ (8006a88 <_localeconv_r+0x4>)
 8006a86:	4770      	bx	lr
 8006a88:	20000158 	.word	0x20000158

08006a8c <_close_r>:
 8006a8c:	b538      	push	{r3, r4, r5, lr}
 8006a8e:	4d06      	ldr	r5, [pc, #24]	@ (8006aa8 <_close_r+0x1c>)
 8006a90:	2300      	movs	r3, #0
 8006a92:	4604      	mov	r4, r0
 8006a94:	4608      	mov	r0, r1
 8006a96:	602b      	str	r3, [r5, #0]
 8006a98:	f7fa fecf 	bl	800183a <_close>
 8006a9c:	1c43      	adds	r3, r0, #1
 8006a9e:	d102      	bne.n	8006aa6 <_close_r+0x1a>
 8006aa0:	682b      	ldr	r3, [r5, #0]
 8006aa2:	b103      	cbz	r3, 8006aa6 <_close_r+0x1a>
 8006aa4:	6023      	str	r3, [r4, #0]
 8006aa6:	bd38      	pop	{r3, r4, r5, pc}
 8006aa8:	200004c4 	.word	0x200004c4

08006aac <_lseek_r>:
 8006aac:	b538      	push	{r3, r4, r5, lr}
 8006aae:	4d07      	ldr	r5, [pc, #28]	@ (8006acc <_lseek_r+0x20>)
 8006ab0:	4604      	mov	r4, r0
 8006ab2:	4608      	mov	r0, r1
 8006ab4:	4611      	mov	r1, r2
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	602a      	str	r2, [r5, #0]
 8006aba:	461a      	mov	r2, r3
 8006abc:	f7fa fee4 	bl	8001888 <_lseek>
 8006ac0:	1c43      	adds	r3, r0, #1
 8006ac2:	d102      	bne.n	8006aca <_lseek_r+0x1e>
 8006ac4:	682b      	ldr	r3, [r5, #0]
 8006ac6:	b103      	cbz	r3, 8006aca <_lseek_r+0x1e>
 8006ac8:	6023      	str	r3, [r4, #0]
 8006aca:	bd38      	pop	{r3, r4, r5, pc}
 8006acc:	200004c4 	.word	0x200004c4

08006ad0 <_read_r>:
 8006ad0:	b538      	push	{r3, r4, r5, lr}
 8006ad2:	4d07      	ldr	r5, [pc, #28]	@ (8006af0 <_read_r+0x20>)
 8006ad4:	4604      	mov	r4, r0
 8006ad6:	4608      	mov	r0, r1
 8006ad8:	4611      	mov	r1, r2
 8006ada:	2200      	movs	r2, #0
 8006adc:	602a      	str	r2, [r5, #0]
 8006ade:	461a      	mov	r2, r3
 8006ae0:	f7fa fe72 	bl	80017c8 <_read>
 8006ae4:	1c43      	adds	r3, r0, #1
 8006ae6:	d102      	bne.n	8006aee <_read_r+0x1e>
 8006ae8:	682b      	ldr	r3, [r5, #0]
 8006aea:	b103      	cbz	r3, 8006aee <_read_r+0x1e>
 8006aec:	6023      	str	r3, [r4, #0]
 8006aee:	bd38      	pop	{r3, r4, r5, pc}
 8006af0:	200004c4 	.word	0x200004c4

08006af4 <_write_r>:
 8006af4:	b538      	push	{r3, r4, r5, lr}
 8006af6:	4d07      	ldr	r5, [pc, #28]	@ (8006b14 <_write_r+0x20>)
 8006af8:	4604      	mov	r4, r0
 8006afa:	4608      	mov	r0, r1
 8006afc:	4611      	mov	r1, r2
 8006afe:	2200      	movs	r2, #0
 8006b00:	602a      	str	r2, [r5, #0]
 8006b02:	461a      	mov	r2, r3
 8006b04:	f7fa fe7d 	bl	8001802 <_write>
 8006b08:	1c43      	adds	r3, r0, #1
 8006b0a:	d102      	bne.n	8006b12 <_write_r+0x1e>
 8006b0c:	682b      	ldr	r3, [r5, #0]
 8006b0e:	b103      	cbz	r3, 8006b12 <_write_r+0x1e>
 8006b10:	6023      	str	r3, [r4, #0]
 8006b12:	bd38      	pop	{r3, r4, r5, pc}
 8006b14:	200004c4 	.word	0x200004c4

08006b18 <__errno>:
 8006b18:	4b01      	ldr	r3, [pc, #4]	@ (8006b20 <__errno+0x8>)
 8006b1a:	6818      	ldr	r0, [r3, #0]
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	20000018 	.word	0x20000018

08006b24 <__libc_init_array>:
 8006b24:	b570      	push	{r4, r5, r6, lr}
 8006b26:	4d0d      	ldr	r5, [pc, #52]	@ (8006b5c <__libc_init_array+0x38>)
 8006b28:	4c0d      	ldr	r4, [pc, #52]	@ (8006b60 <__libc_init_array+0x3c>)
 8006b2a:	1b64      	subs	r4, r4, r5
 8006b2c:	10a4      	asrs	r4, r4, #2
 8006b2e:	2600      	movs	r6, #0
 8006b30:	42a6      	cmp	r6, r4
 8006b32:	d109      	bne.n	8006b48 <__libc_init_array+0x24>
 8006b34:	4d0b      	ldr	r5, [pc, #44]	@ (8006b64 <__libc_init_array+0x40>)
 8006b36:	4c0c      	ldr	r4, [pc, #48]	@ (8006b68 <__libc_init_array+0x44>)
 8006b38:	f003 fc76 	bl	800a428 <_init>
 8006b3c:	1b64      	subs	r4, r4, r5
 8006b3e:	10a4      	asrs	r4, r4, #2
 8006b40:	2600      	movs	r6, #0
 8006b42:	42a6      	cmp	r6, r4
 8006b44:	d105      	bne.n	8006b52 <__libc_init_array+0x2e>
 8006b46:	bd70      	pop	{r4, r5, r6, pc}
 8006b48:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b4c:	4798      	blx	r3
 8006b4e:	3601      	adds	r6, #1
 8006b50:	e7ee      	b.n	8006b30 <__libc_init_array+0xc>
 8006b52:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b56:	4798      	blx	r3
 8006b58:	3601      	adds	r6, #1
 8006b5a:	e7f2      	b.n	8006b42 <__libc_init_array+0x1e>
 8006b5c:	0800a940 	.word	0x0800a940
 8006b60:	0800a940 	.word	0x0800a940
 8006b64:	0800a940 	.word	0x0800a940
 8006b68:	0800a944 	.word	0x0800a944

08006b6c <__retarget_lock_init_recursive>:
 8006b6c:	4770      	bx	lr

08006b6e <__retarget_lock_acquire_recursive>:
 8006b6e:	4770      	bx	lr

08006b70 <__retarget_lock_release_recursive>:
 8006b70:	4770      	bx	lr
	...

08006b74 <nanf>:
 8006b74:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006b7c <nanf+0x8>
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	7fc00000 	.word	0x7fc00000

08006b80 <quorem>:
 8006b80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b84:	6903      	ldr	r3, [r0, #16]
 8006b86:	690c      	ldr	r4, [r1, #16]
 8006b88:	42a3      	cmp	r3, r4
 8006b8a:	4607      	mov	r7, r0
 8006b8c:	db7e      	blt.n	8006c8c <quorem+0x10c>
 8006b8e:	3c01      	subs	r4, #1
 8006b90:	f101 0814 	add.w	r8, r1, #20
 8006b94:	00a3      	lsls	r3, r4, #2
 8006b96:	f100 0514 	add.w	r5, r0, #20
 8006b9a:	9300      	str	r3, [sp, #0]
 8006b9c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ba0:	9301      	str	r3, [sp, #4]
 8006ba2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ba6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006baa:	3301      	adds	r3, #1
 8006bac:	429a      	cmp	r2, r3
 8006bae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006bb2:	fbb2 f6f3 	udiv	r6, r2, r3
 8006bb6:	d32e      	bcc.n	8006c16 <quorem+0x96>
 8006bb8:	f04f 0a00 	mov.w	sl, #0
 8006bbc:	46c4      	mov	ip, r8
 8006bbe:	46ae      	mov	lr, r5
 8006bc0:	46d3      	mov	fp, sl
 8006bc2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006bc6:	b298      	uxth	r0, r3
 8006bc8:	fb06 a000 	mla	r0, r6, r0, sl
 8006bcc:	0c02      	lsrs	r2, r0, #16
 8006bce:	0c1b      	lsrs	r3, r3, #16
 8006bd0:	fb06 2303 	mla	r3, r6, r3, r2
 8006bd4:	f8de 2000 	ldr.w	r2, [lr]
 8006bd8:	b280      	uxth	r0, r0
 8006bda:	b292      	uxth	r2, r2
 8006bdc:	1a12      	subs	r2, r2, r0
 8006bde:	445a      	add	r2, fp
 8006be0:	f8de 0000 	ldr.w	r0, [lr]
 8006be4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006bee:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006bf2:	b292      	uxth	r2, r2
 8006bf4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006bf8:	45e1      	cmp	r9, ip
 8006bfa:	f84e 2b04 	str.w	r2, [lr], #4
 8006bfe:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006c02:	d2de      	bcs.n	8006bc2 <quorem+0x42>
 8006c04:	9b00      	ldr	r3, [sp, #0]
 8006c06:	58eb      	ldr	r3, [r5, r3]
 8006c08:	b92b      	cbnz	r3, 8006c16 <quorem+0x96>
 8006c0a:	9b01      	ldr	r3, [sp, #4]
 8006c0c:	3b04      	subs	r3, #4
 8006c0e:	429d      	cmp	r5, r3
 8006c10:	461a      	mov	r2, r3
 8006c12:	d32f      	bcc.n	8006c74 <quorem+0xf4>
 8006c14:	613c      	str	r4, [r7, #16]
 8006c16:	4638      	mov	r0, r7
 8006c18:	f001 f9c2 	bl	8007fa0 <__mcmp>
 8006c1c:	2800      	cmp	r0, #0
 8006c1e:	db25      	blt.n	8006c6c <quorem+0xec>
 8006c20:	4629      	mov	r1, r5
 8006c22:	2000      	movs	r0, #0
 8006c24:	f858 2b04 	ldr.w	r2, [r8], #4
 8006c28:	f8d1 c000 	ldr.w	ip, [r1]
 8006c2c:	fa1f fe82 	uxth.w	lr, r2
 8006c30:	fa1f f38c 	uxth.w	r3, ip
 8006c34:	eba3 030e 	sub.w	r3, r3, lr
 8006c38:	4403      	add	r3, r0
 8006c3a:	0c12      	lsrs	r2, r2, #16
 8006c3c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006c40:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c4a:	45c1      	cmp	r9, r8
 8006c4c:	f841 3b04 	str.w	r3, [r1], #4
 8006c50:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006c54:	d2e6      	bcs.n	8006c24 <quorem+0xa4>
 8006c56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c5e:	b922      	cbnz	r2, 8006c6a <quorem+0xea>
 8006c60:	3b04      	subs	r3, #4
 8006c62:	429d      	cmp	r5, r3
 8006c64:	461a      	mov	r2, r3
 8006c66:	d30b      	bcc.n	8006c80 <quorem+0x100>
 8006c68:	613c      	str	r4, [r7, #16]
 8006c6a:	3601      	adds	r6, #1
 8006c6c:	4630      	mov	r0, r6
 8006c6e:	b003      	add	sp, #12
 8006c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c74:	6812      	ldr	r2, [r2, #0]
 8006c76:	3b04      	subs	r3, #4
 8006c78:	2a00      	cmp	r2, #0
 8006c7a:	d1cb      	bne.n	8006c14 <quorem+0x94>
 8006c7c:	3c01      	subs	r4, #1
 8006c7e:	e7c6      	b.n	8006c0e <quorem+0x8e>
 8006c80:	6812      	ldr	r2, [r2, #0]
 8006c82:	3b04      	subs	r3, #4
 8006c84:	2a00      	cmp	r2, #0
 8006c86:	d1ef      	bne.n	8006c68 <quorem+0xe8>
 8006c88:	3c01      	subs	r4, #1
 8006c8a:	e7ea      	b.n	8006c62 <quorem+0xe2>
 8006c8c:	2000      	movs	r0, #0
 8006c8e:	e7ee      	b.n	8006c6e <quorem+0xee>

08006c90 <_dtoa_r>:
 8006c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c94:	69c7      	ldr	r7, [r0, #28]
 8006c96:	b099      	sub	sp, #100	@ 0x64
 8006c98:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006c9c:	ec55 4b10 	vmov	r4, r5, d0
 8006ca0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006ca2:	9109      	str	r1, [sp, #36]	@ 0x24
 8006ca4:	4683      	mov	fp, r0
 8006ca6:	920e      	str	r2, [sp, #56]	@ 0x38
 8006ca8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006caa:	b97f      	cbnz	r7, 8006ccc <_dtoa_r+0x3c>
 8006cac:	2010      	movs	r0, #16
 8006cae:	f000 fdfd 	bl	80078ac <malloc>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	f8cb 001c 	str.w	r0, [fp, #28]
 8006cb8:	b920      	cbnz	r0, 8006cc4 <_dtoa_r+0x34>
 8006cba:	4ba7      	ldr	r3, [pc, #668]	@ (8006f58 <_dtoa_r+0x2c8>)
 8006cbc:	21ef      	movs	r1, #239	@ 0xef
 8006cbe:	48a7      	ldr	r0, [pc, #668]	@ (8006f5c <_dtoa_r+0x2cc>)
 8006cc0:	f002 fc36 	bl	8009530 <__assert_func>
 8006cc4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006cc8:	6007      	str	r7, [r0, #0]
 8006cca:	60c7      	str	r7, [r0, #12]
 8006ccc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006cd0:	6819      	ldr	r1, [r3, #0]
 8006cd2:	b159      	cbz	r1, 8006cec <_dtoa_r+0x5c>
 8006cd4:	685a      	ldr	r2, [r3, #4]
 8006cd6:	604a      	str	r2, [r1, #4]
 8006cd8:	2301      	movs	r3, #1
 8006cda:	4093      	lsls	r3, r2
 8006cdc:	608b      	str	r3, [r1, #8]
 8006cde:	4658      	mov	r0, fp
 8006ce0:	f000 feda 	bl	8007a98 <_Bfree>
 8006ce4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	601a      	str	r2, [r3, #0]
 8006cec:	1e2b      	subs	r3, r5, #0
 8006cee:	bfb9      	ittee	lt
 8006cf0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006cf4:	9303      	strlt	r3, [sp, #12]
 8006cf6:	2300      	movge	r3, #0
 8006cf8:	6033      	strge	r3, [r6, #0]
 8006cfa:	9f03      	ldr	r7, [sp, #12]
 8006cfc:	4b98      	ldr	r3, [pc, #608]	@ (8006f60 <_dtoa_r+0x2d0>)
 8006cfe:	bfbc      	itt	lt
 8006d00:	2201      	movlt	r2, #1
 8006d02:	6032      	strlt	r2, [r6, #0]
 8006d04:	43bb      	bics	r3, r7
 8006d06:	d112      	bne.n	8006d2e <_dtoa_r+0x9e>
 8006d08:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006d0a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006d0e:	6013      	str	r3, [r2, #0]
 8006d10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006d14:	4323      	orrs	r3, r4
 8006d16:	f000 854d 	beq.w	80077b4 <_dtoa_r+0xb24>
 8006d1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006d1c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006f74 <_dtoa_r+0x2e4>
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	f000 854f 	beq.w	80077c4 <_dtoa_r+0xb34>
 8006d26:	f10a 0303 	add.w	r3, sl, #3
 8006d2a:	f000 bd49 	b.w	80077c0 <_dtoa_r+0xb30>
 8006d2e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006d32:	2200      	movs	r2, #0
 8006d34:	ec51 0b17 	vmov	r0, r1, d7
 8006d38:	2300      	movs	r3, #0
 8006d3a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006d3e:	f7f9 fec3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d42:	4680      	mov	r8, r0
 8006d44:	b158      	cbz	r0, 8006d5e <_dtoa_r+0xce>
 8006d46:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006d48:	2301      	movs	r3, #1
 8006d4a:	6013      	str	r3, [r2, #0]
 8006d4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006d4e:	b113      	cbz	r3, 8006d56 <_dtoa_r+0xc6>
 8006d50:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006d52:	4b84      	ldr	r3, [pc, #528]	@ (8006f64 <_dtoa_r+0x2d4>)
 8006d54:	6013      	str	r3, [r2, #0]
 8006d56:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006f78 <_dtoa_r+0x2e8>
 8006d5a:	f000 bd33 	b.w	80077c4 <_dtoa_r+0xb34>
 8006d5e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006d62:	aa16      	add	r2, sp, #88	@ 0x58
 8006d64:	a917      	add	r1, sp, #92	@ 0x5c
 8006d66:	4658      	mov	r0, fp
 8006d68:	f001 fa3a 	bl	80081e0 <__d2b>
 8006d6c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006d70:	4681      	mov	r9, r0
 8006d72:	2e00      	cmp	r6, #0
 8006d74:	d077      	beq.n	8006e66 <_dtoa_r+0x1d6>
 8006d76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d78:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006d7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d84:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006d88:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006d8c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006d90:	4619      	mov	r1, r3
 8006d92:	2200      	movs	r2, #0
 8006d94:	4b74      	ldr	r3, [pc, #464]	@ (8006f68 <_dtoa_r+0x2d8>)
 8006d96:	f7f9 fa77 	bl	8000288 <__aeabi_dsub>
 8006d9a:	a369      	add	r3, pc, #420	@ (adr r3, 8006f40 <_dtoa_r+0x2b0>)
 8006d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da0:	f7f9 fc2a 	bl	80005f8 <__aeabi_dmul>
 8006da4:	a368      	add	r3, pc, #416	@ (adr r3, 8006f48 <_dtoa_r+0x2b8>)
 8006da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006daa:	f7f9 fa6f 	bl	800028c <__adddf3>
 8006dae:	4604      	mov	r4, r0
 8006db0:	4630      	mov	r0, r6
 8006db2:	460d      	mov	r5, r1
 8006db4:	f7f9 fbb6 	bl	8000524 <__aeabi_i2d>
 8006db8:	a365      	add	r3, pc, #404	@ (adr r3, 8006f50 <_dtoa_r+0x2c0>)
 8006dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dbe:	f7f9 fc1b 	bl	80005f8 <__aeabi_dmul>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	4629      	mov	r1, r5
 8006dca:	f7f9 fa5f 	bl	800028c <__adddf3>
 8006dce:	4604      	mov	r4, r0
 8006dd0:	460d      	mov	r5, r1
 8006dd2:	f7f9 fec1 	bl	8000b58 <__aeabi_d2iz>
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	4607      	mov	r7, r0
 8006dda:	2300      	movs	r3, #0
 8006ddc:	4620      	mov	r0, r4
 8006dde:	4629      	mov	r1, r5
 8006de0:	f7f9 fe7c 	bl	8000adc <__aeabi_dcmplt>
 8006de4:	b140      	cbz	r0, 8006df8 <_dtoa_r+0x168>
 8006de6:	4638      	mov	r0, r7
 8006de8:	f7f9 fb9c 	bl	8000524 <__aeabi_i2d>
 8006dec:	4622      	mov	r2, r4
 8006dee:	462b      	mov	r3, r5
 8006df0:	f7f9 fe6a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006df4:	b900      	cbnz	r0, 8006df8 <_dtoa_r+0x168>
 8006df6:	3f01      	subs	r7, #1
 8006df8:	2f16      	cmp	r7, #22
 8006dfa:	d851      	bhi.n	8006ea0 <_dtoa_r+0x210>
 8006dfc:	4b5b      	ldr	r3, [pc, #364]	@ (8006f6c <_dtoa_r+0x2dc>)
 8006dfe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e0a:	f7f9 fe67 	bl	8000adc <__aeabi_dcmplt>
 8006e0e:	2800      	cmp	r0, #0
 8006e10:	d048      	beq.n	8006ea4 <_dtoa_r+0x214>
 8006e12:	3f01      	subs	r7, #1
 8006e14:	2300      	movs	r3, #0
 8006e16:	9312      	str	r3, [sp, #72]	@ 0x48
 8006e18:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006e1a:	1b9b      	subs	r3, r3, r6
 8006e1c:	1e5a      	subs	r2, r3, #1
 8006e1e:	bf44      	itt	mi
 8006e20:	f1c3 0801 	rsbmi	r8, r3, #1
 8006e24:	2300      	movmi	r3, #0
 8006e26:	9208      	str	r2, [sp, #32]
 8006e28:	bf54      	ite	pl
 8006e2a:	f04f 0800 	movpl.w	r8, #0
 8006e2e:	9308      	strmi	r3, [sp, #32]
 8006e30:	2f00      	cmp	r7, #0
 8006e32:	db39      	blt.n	8006ea8 <_dtoa_r+0x218>
 8006e34:	9b08      	ldr	r3, [sp, #32]
 8006e36:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006e38:	443b      	add	r3, r7
 8006e3a:	9308      	str	r3, [sp, #32]
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e42:	2b09      	cmp	r3, #9
 8006e44:	d864      	bhi.n	8006f10 <_dtoa_r+0x280>
 8006e46:	2b05      	cmp	r3, #5
 8006e48:	bfc4      	itt	gt
 8006e4a:	3b04      	subgt	r3, #4
 8006e4c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006e4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e50:	f1a3 0302 	sub.w	r3, r3, #2
 8006e54:	bfcc      	ite	gt
 8006e56:	2400      	movgt	r4, #0
 8006e58:	2401      	movle	r4, #1
 8006e5a:	2b03      	cmp	r3, #3
 8006e5c:	d863      	bhi.n	8006f26 <_dtoa_r+0x296>
 8006e5e:	e8df f003 	tbb	[pc, r3]
 8006e62:	372a      	.short	0x372a
 8006e64:	5535      	.short	0x5535
 8006e66:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006e6a:	441e      	add	r6, r3
 8006e6c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006e70:	2b20      	cmp	r3, #32
 8006e72:	bfc1      	itttt	gt
 8006e74:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006e78:	409f      	lslgt	r7, r3
 8006e7a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006e7e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006e82:	bfd6      	itet	le
 8006e84:	f1c3 0320 	rsble	r3, r3, #32
 8006e88:	ea47 0003 	orrgt.w	r0, r7, r3
 8006e8c:	fa04 f003 	lslle.w	r0, r4, r3
 8006e90:	f7f9 fb38 	bl	8000504 <__aeabi_ui2d>
 8006e94:	2201      	movs	r2, #1
 8006e96:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006e9a:	3e01      	subs	r6, #1
 8006e9c:	9214      	str	r2, [sp, #80]	@ 0x50
 8006e9e:	e777      	b.n	8006d90 <_dtoa_r+0x100>
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e7b8      	b.n	8006e16 <_dtoa_r+0x186>
 8006ea4:	9012      	str	r0, [sp, #72]	@ 0x48
 8006ea6:	e7b7      	b.n	8006e18 <_dtoa_r+0x188>
 8006ea8:	427b      	negs	r3, r7
 8006eaa:	930a      	str	r3, [sp, #40]	@ 0x28
 8006eac:	2300      	movs	r3, #0
 8006eae:	eba8 0807 	sub.w	r8, r8, r7
 8006eb2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006eb4:	e7c4      	b.n	8006e40 <_dtoa_r+0x1b0>
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006eba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	dc35      	bgt.n	8006f2c <_dtoa_r+0x29c>
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	9300      	str	r3, [sp, #0]
 8006ec4:	9307      	str	r3, [sp, #28]
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	920e      	str	r2, [sp, #56]	@ 0x38
 8006eca:	e00b      	b.n	8006ee4 <_dtoa_r+0x254>
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e7f3      	b.n	8006eb8 <_dtoa_r+0x228>
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ed4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ed6:	18fb      	adds	r3, r7, r3
 8006ed8:	9300      	str	r3, [sp, #0]
 8006eda:	3301      	adds	r3, #1
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	9307      	str	r3, [sp, #28]
 8006ee0:	bfb8      	it	lt
 8006ee2:	2301      	movlt	r3, #1
 8006ee4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006ee8:	2100      	movs	r1, #0
 8006eea:	2204      	movs	r2, #4
 8006eec:	f102 0514 	add.w	r5, r2, #20
 8006ef0:	429d      	cmp	r5, r3
 8006ef2:	d91f      	bls.n	8006f34 <_dtoa_r+0x2a4>
 8006ef4:	6041      	str	r1, [r0, #4]
 8006ef6:	4658      	mov	r0, fp
 8006ef8:	f000 fd8e 	bl	8007a18 <_Balloc>
 8006efc:	4682      	mov	sl, r0
 8006efe:	2800      	cmp	r0, #0
 8006f00:	d13c      	bne.n	8006f7c <_dtoa_r+0x2ec>
 8006f02:	4b1b      	ldr	r3, [pc, #108]	@ (8006f70 <_dtoa_r+0x2e0>)
 8006f04:	4602      	mov	r2, r0
 8006f06:	f240 11af 	movw	r1, #431	@ 0x1af
 8006f0a:	e6d8      	b.n	8006cbe <_dtoa_r+0x2e>
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e7e0      	b.n	8006ed2 <_dtoa_r+0x242>
 8006f10:	2401      	movs	r4, #1
 8006f12:	2300      	movs	r3, #0
 8006f14:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f16:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006f18:	f04f 33ff 	mov.w	r3, #4294967295
 8006f1c:	9300      	str	r3, [sp, #0]
 8006f1e:	9307      	str	r3, [sp, #28]
 8006f20:	2200      	movs	r2, #0
 8006f22:	2312      	movs	r3, #18
 8006f24:	e7d0      	b.n	8006ec8 <_dtoa_r+0x238>
 8006f26:	2301      	movs	r3, #1
 8006f28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f2a:	e7f5      	b.n	8006f18 <_dtoa_r+0x288>
 8006f2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f2e:	9300      	str	r3, [sp, #0]
 8006f30:	9307      	str	r3, [sp, #28]
 8006f32:	e7d7      	b.n	8006ee4 <_dtoa_r+0x254>
 8006f34:	3101      	adds	r1, #1
 8006f36:	0052      	lsls	r2, r2, #1
 8006f38:	e7d8      	b.n	8006eec <_dtoa_r+0x25c>
 8006f3a:	bf00      	nop
 8006f3c:	f3af 8000 	nop.w
 8006f40:	636f4361 	.word	0x636f4361
 8006f44:	3fd287a7 	.word	0x3fd287a7
 8006f48:	8b60c8b3 	.word	0x8b60c8b3
 8006f4c:	3fc68a28 	.word	0x3fc68a28
 8006f50:	509f79fb 	.word	0x509f79fb
 8006f54:	3fd34413 	.word	0x3fd34413
 8006f58:	0800a54e 	.word	0x0800a54e
 8006f5c:	0800a565 	.word	0x0800a565
 8006f60:	7ff00000 	.word	0x7ff00000
 8006f64:	0800a519 	.word	0x0800a519
 8006f68:	3ff80000 	.word	0x3ff80000
 8006f6c:	0800a660 	.word	0x0800a660
 8006f70:	0800a5bd 	.word	0x0800a5bd
 8006f74:	0800a54a 	.word	0x0800a54a
 8006f78:	0800a518 	.word	0x0800a518
 8006f7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006f80:	6018      	str	r0, [r3, #0]
 8006f82:	9b07      	ldr	r3, [sp, #28]
 8006f84:	2b0e      	cmp	r3, #14
 8006f86:	f200 80a4 	bhi.w	80070d2 <_dtoa_r+0x442>
 8006f8a:	2c00      	cmp	r4, #0
 8006f8c:	f000 80a1 	beq.w	80070d2 <_dtoa_r+0x442>
 8006f90:	2f00      	cmp	r7, #0
 8006f92:	dd33      	ble.n	8006ffc <_dtoa_r+0x36c>
 8006f94:	4bad      	ldr	r3, [pc, #692]	@ (800724c <_dtoa_r+0x5bc>)
 8006f96:	f007 020f 	and.w	r2, r7, #15
 8006f9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f9e:	ed93 7b00 	vldr	d7, [r3]
 8006fa2:	05f8      	lsls	r0, r7, #23
 8006fa4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006fa8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006fac:	d516      	bpl.n	8006fdc <_dtoa_r+0x34c>
 8006fae:	4ba8      	ldr	r3, [pc, #672]	@ (8007250 <_dtoa_r+0x5c0>)
 8006fb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006fb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006fb8:	f7f9 fc48 	bl	800084c <__aeabi_ddiv>
 8006fbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fc0:	f004 040f 	and.w	r4, r4, #15
 8006fc4:	2603      	movs	r6, #3
 8006fc6:	4da2      	ldr	r5, [pc, #648]	@ (8007250 <_dtoa_r+0x5c0>)
 8006fc8:	b954      	cbnz	r4, 8006fe0 <_dtoa_r+0x350>
 8006fca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fd2:	f7f9 fc3b 	bl	800084c <__aeabi_ddiv>
 8006fd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fda:	e028      	b.n	800702e <_dtoa_r+0x39e>
 8006fdc:	2602      	movs	r6, #2
 8006fde:	e7f2      	b.n	8006fc6 <_dtoa_r+0x336>
 8006fe0:	07e1      	lsls	r1, r4, #31
 8006fe2:	d508      	bpl.n	8006ff6 <_dtoa_r+0x366>
 8006fe4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fe8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006fec:	f7f9 fb04 	bl	80005f8 <__aeabi_dmul>
 8006ff0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ff4:	3601      	adds	r6, #1
 8006ff6:	1064      	asrs	r4, r4, #1
 8006ff8:	3508      	adds	r5, #8
 8006ffa:	e7e5      	b.n	8006fc8 <_dtoa_r+0x338>
 8006ffc:	f000 80d2 	beq.w	80071a4 <_dtoa_r+0x514>
 8007000:	427c      	negs	r4, r7
 8007002:	4b92      	ldr	r3, [pc, #584]	@ (800724c <_dtoa_r+0x5bc>)
 8007004:	4d92      	ldr	r5, [pc, #584]	@ (8007250 <_dtoa_r+0x5c0>)
 8007006:	f004 020f 	and.w	r2, r4, #15
 800700a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800700e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007012:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007016:	f7f9 faef 	bl	80005f8 <__aeabi_dmul>
 800701a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800701e:	1124      	asrs	r4, r4, #4
 8007020:	2300      	movs	r3, #0
 8007022:	2602      	movs	r6, #2
 8007024:	2c00      	cmp	r4, #0
 8007026:	f040 80b2 	bne.w	800718e <_dtoa_r+0x4fe>
 800702a:	2b00      	cmp	r3, #0
 800702c:	d1d3      	bne.n	8006fd6 <_dtoa_r+0x346>
 800702e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007030:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007034:	2b00      	cmp	r3, #0
 8007036:	f000 80b7 	beq.w	80071a8 <_dtoa_r+0x518>
 800703a:	4b86      	ldr	r3, [pc, #536]	@ (8007254 <_dtoa_r+0x5c4>)
 800703c:	2200      	movs	r2, #0
 800703e:	4620      	mov	r0, r4
 8007040:	4629      	mov	r1, r5
 8007042:	f7f9 fd4b 	bl	8000adc <__aeabi_dcmplt>
 8007046:	2800      	cmp	r0, #0
 8007048:	f000 80ae 	beq.w	80071a8 <_dtoa_r+0x518>
 800704c:	9b07      	ldr	r3, [sp, #28]
 800704e:	2b00      	cmp	r3, #0
 8007050:	f000 80aa 	beq.w	80071a8 <_dtoa_r+0x518>
 8007054:	9b00      	ldr	r3, [sp, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	dd37      	ble.n	80070ca <_dtoa_r+0x43a>
 800705a:	1e7b      	subs	r3, r7, #1
 800705c:	9304      	str	r3, [sp, #16]
 800705e:	4620      	mov	r0, r4
 8007060:	4b7d      	ldr	r3, [pc, #500]	@ (8007258 <_dtoa_r+0x5c8>)
 8007062:	2200      	movs	r2, #0
 8007064:	4629      	mov	r1, r5
 8007066:	f7f9 fac7 	bl	80005f8 <__aeabi_dmul>
 800706a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800706e:	9c00      	ldr	r4, [sp, #0]
 8007070:	3601      	adds	r6, #1
 8007072:	4630      	mov	r0, r6
 8007074:	f7f9 fa56 	bl	8000524 <__aeabi_i2d>
 8007078:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800707c:	f7f9 fabc 	bl	80005f8 <__aeabi_dmul>
 8007080:	4b76      	ldr	r3, [pc, #472]	@ (800725c <_dtoa_r+0x5cc>)
 8007082:	2200      	movs	r2, #0
 8007084:	f7f9 f902 	bl	800028c <__adddf3>
 8007088:	4605      	mov	r5, r0
 800708a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800708e:	2c00      	cmp	r4, #0
 8007090:	f040 808d 	bne.w	80071ae <_dtoa_r+0x51e>
 8007094:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007098:	4b71      	ldr	r3, [pc, #452]	@ (8007260 <_dtoa_r+0x5d0>)
 800709a:	2200      	movs	r2, #0
 800709c:	f7f9 f8f4 	bl	8000288 <__aeabi_dsub>
 80070a0:	4602      	mov	r2, r0
 80070a2:	460b      	mov	r3, r1
 80070a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80070a8:	462a      	mov	r2, r5
 80070aa:	4633      	mov	r3, r6
 80070ac:	f7f9 fd34 	bl	8000b18 <__aeabi_dcmpgt>
 80070b0:	2800      	cmp	r0, #0
 80070b2:	f040 828b 	bne.w	80075cc <_dtoa_r+0x93c>
 80070b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070ba:	462a      	mov	r2, r5
 80070bc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80070c0:	f7f9 fd0c 	bl	8000adc <__aeabi_dcmplt>
 80070c4:	2800      	cmp	r0, #0
 80070c6:	f040 8128 	bne.w	800731a <_dtoa_r+0x68a>
 80070ca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80070ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80070d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	f2c0 815a 	blt.w	800738e <_dtoa_r+0x6fe>
 80070da:	2f0e      	cmp	r7, #14
 80070dc:	f300 8157 	bgt.w	800738e <_dtoa_r+0x6fe>
 80070e0:	4b5a      	ldr	r3, [pc, #360]	@ (800724c <_dtoa_r+0x5bc>)
 80070e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80070e6:	ed93 7b00 	vldr	d7, [r3]
 80070ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	ed8d 7b00 	vstr	d7, [sp]
 80070f2:	da03      	bge.n	80070fc <_dtoa_r+0x46c>
 80070f4:	9b07      	ldr	r3, [sp, #28]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	f340 8101 	ble.w	80072fe <_dtoa_r+0x66e>
 80070fc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007100:	4656      	mov	r6, sl
 8007102:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007106:	4620      	mov	r0, r4
 8007108:	4629      	mov	r1, r5
 800710a:	f7f9 fb9f 	bl	800084c <__aeabi_ddiv>
 800710e:	f7f9 fd23 	bl	8000b58 <__aeabi_d2iz>
 8007112:	4680      	mov	r8, r0
 8007114:	f7f9 fa06 	bl	8000524 <__aeabi_i2d>
 8007118:	e9dd 2300 	ldrd	r2, r3, [sp]
 800711c:	f7f9 fa6c 	bl	80005f8 <__aeabi_dmul>
 8007120:	4602      	mov	r2, r0
 8007122:	460b      	mov	r3, r1
 8007124:	4620      	mov	r0, r4
 8007126:	4629      	mov	r1, r5
 8007128:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800712c:	f7f9 f8ac 	bl	8000288 <__aeabi_dsub>
 8007130:	f806 4b01 	strb.w	r4, [r6], #1
 8007134:	9d07      	ldr	r5, [sp, #28]
 8007136:	eba6 040a 	sub.w	r4, r6, sl
 800713a:	42a5      	cmp	r5, r4
 800713c:	4602      	mov	r2, r0
 800713e:	460b      	mov	r3, r1
 8007140:	f040 8117 	bne.w	8007372 <_dtoa_r+0x6e2>
 8007144:	f7f9 f8a2 	bl	800028c <__adddf3>
 8007148:	e9dd 2300 	ldrd	r2, r3, [sp]
 800714c:	4604      	mov	r4, r0
 800714e:	460d      	mov	r5, r1
 8007150:	f7f9 fce2 	bl	8000b18 <__aeabi_dcmpgt>
 8007154:	2800      	cmp	r0, #0
 8007156:	f040 80f9 	bne.w	800734c <_dtoa_r+0x6bc>
 800715a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800715e:	4620      	mov	r0, r4
 8007160:	4629      	mov	r1, r5
 8007162:	f7f9 fcb1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007166:	b118      	cbz	r0, 8007170 <_dtoa_r+0x4e0>
 8007168:	f018 0f01 	tst.w	r8, #1
 800716c:	f040 80ee 	bne.w	800734c <_dtoa_r+0x6bc>
 8007170:	4649      	mov	r1, r9
 8007172:	4658      	mov	r0, fp
 8007174:	f000 fc90 	bl	8007a98 <_Bfree>
 8007178:	2300      	movs	r3, #0
 800717a:	7033      	strb	r3, [r6, #0]
 800717c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800717e:	3701      	adds	r7, #1
 8007180:	601f      	str	r7, [r3, #0]
 8007182:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007184:	2b00      	cmp	r3, #0
 8007186:	f000 831d 	beq.w	80077c4 <_dtoa_r+0xb34>
 800718a:	601e      	str	r6, [r3, #0]
 800718c:	e31a      	b.n	80077c4 <_dtoa_r+0xb34>
 800718e:	07e2      	lsls	r2, r4, #31
 8007190:	d505      	bpl.n	800719e <_dtoa_r+0x50e>
 8007192:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007196:	f7f9 fa2f 	bl	80005f8 <__aeabi_dmul>
 800719a:	3601      	adds	r6, #1
 800719c:	2301      	movs	r3, #1
 800719e:	1064      	asrs	r4, r4, #1
 80071a0:	3508      	adds	r5, #8
 80071a2:	e73f      	b.n	8007024 <_dtoa_r+0x394>
 80071a4:	2602      	movs	r6, #2
 80071a6:	e742      	b.n	800702e <_dtoa_r+0x39e>
 80071a8:	9c07      	ldr	r4, [sp, #28]
 80071aa:	9704      	str	r7, [sp, #16]
 80071ac:	e761      	b.n	8007072 <_dtoa_r+0x3e2>
 80071ae:	4b27      	ldr	r3, [pc, #156]	@ (800724c <_dtoa_r+0x5bc>)
 80071b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80071b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80071b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80071ba:	4454      	add	r4, sl
 80071bc:	2900      	cmp	r1, #0
 80071be:	d053      	beq.n	8007268 <_dtoa_r+0x5d8>
 80071c0:	4928      	ldr	r1, [pc, #160]	@ (8007264 <_dtoa_r+0x5d4>)
 80071c2:	2000      	movs	r0, #0
 80071c4:	f7f9 fb42 	bl	800084c <__aeabi_ddiv>
 80071c8:	4633      	mov	r3, r6
 80071ca:	462a      	mov	r2, r5
 80071cc:	f7f9 f85c 	bl	8000288 <__aeabi_dsub>
 80071d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80071d4:	4656      	mov	r6, sl
 80071d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071da:	f7f9 fcbd 	bl	8000b58 <__aeabi_d2iz>
 80071de:	4605      	mov	r5, r0
 80071e0:	f7f9 f9a0 	bl	8000524 <__aeabi_i2d>
 80071e4:	4602      	mov	r2, r0
 80071e6:	460b      	mov	r3, r1
 80071e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071ec:	f7f9 f84c 	bl	8000288 <__aeabi_dsub>
 80071f0:	3530      	adds	r5, #48	@ 0x30
 80071f2:	4602      	mov	r2, r0
 80071f4:	460b      	mov	r3, r1
 80071f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80071fa:	f806 5b01 	strb.w	r5, [r6], #1
 80071fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007202:	f7f9 fc6b 	bl	8000adc <__aeabi_dcmplt>
 8007206:	2800      	cmp	r0, #0
 8007208:	d171      	bne.n	80072ee <_dtoa_r+0x65e>
 800720a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800720e:	4911      	ldr	r1, [pc, #68]	@ (8007254 <_dtoa_r+0x5c4>)
 8007210:	2000      	movs	r0, #0
 8007212:	f7f9 f839 	bl	8000288 <__aeabi_dsub>
 8007216:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800721a:	f7f9 fc5f 	bl	8000adc <__aeabi_dcmplt>
 800721e:	2800      	cmp	r0, #0
 8007220:	f040 8095 	bne.w	800734e <_dtoa_r+0x6be>
 8007224:	42a6      	cmp	r6, r4
 8007226:	f43f af50 	beq.w	80070ca <_dtoa_r+0x43a>
 800722a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800722e:	4b0a      	ldr	r3, [pc, #40]	@ (8007258 <_dtoa_r+0x5c8>)
 8007230:	2200      	movs	r2, #0
 8007232:	f7f9 f9e1 	bl	80005f8 <__aeabi_dmul>
 8007236:	4b08      	ldr	r3, [pc, #32]	@ (8007258 <_dtoa_r+0x5c8>)
 8007238:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800723c:	2200      	movs	r2, #0
 800723e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007242:	f7f9 f9d9 	bl	80005f8 <__aeabi_dmul>
 8007246:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800724a:	e7c4      	b.n	80071d6 <_dtoa_r+0x546>
 800724c:	0800a660 	.word	0x0800a660
 8007250:	0800a638 	.word	0x0800a638
 8007254:	3ff00000 	.word	0x3ff00000
 8007258:	40240000 	.word	0x40240000
 800725c:	401c0000 	.word	0x401c0000
 8007260:	40140000 	.word	0x40140000
 8007264:	3fe00000 	.word	0x3fe00000
 8007268:	4631      	mov	r1, r6
 800726a:	4628      	mov	r0, r5
 800726c:	f7f9 f9c4 	bl	80005f8 <__aeabi_dmul>
 8007270:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007274:	9415      	str	r4, [sp, #84]	@ 0x54
 8007276:	4656      	mov	r6, sl
 8007278:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800727c:	f7f9 fc6c 	bl	8000b58 <__aeabi_d2iz>
 8007280:	4605      	mov	r5, r0
 8007282:	f7f9 f94f 	bl	8000524 <__aeabi_i2d>
 8007286:	4602      	mov	r2, r0
 8007288:	460b      	mov	r3, r1
 800728a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800728e:	f7f8 fffb 	bl	8000288 <__aeabi_dsub>
 8007292:	3530      	adds	r5, #48	@ 0x30
 8007294:	f806 5b01 	strb.w	r5, [r6], #1
 8007298:	4602      	mov	r2, r0
 800729a:	460b      	mov	r3, r1
 800729c:	42a6      	cmp	r6, r4
 800729e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80072a2:	f04f 0200 	mov.w	r2, #0
 80072a6:	d124      	bne.n	80072f2 <_dtoa_r+0x662>
 80072a8:	4bac      	ldr	r3, [pc, #688]	@ (800755c <_dtoa_r+0x8cc>)
 80072aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80072ae:	f7f8 ffed 	bl	800028c <__adddf3>
 80072b2:	4602      	mov	r2, r0
 80072b4:	460b      	mov	r3, r1
 80072b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072ba:	f7f9 fc2d 	bl	8000b18 <__aeabi_dcmpgt>
 80072be:	2800      	cmp	r0, #0
 80072c0:	d145      	bne.n	800734e <_dtoa_r+0x6be>
 80072c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80072c6:	49a5      	ldr	r1, [pc, #660]	@ (800755c <_dtoa_r+0x8cc>)
 80072c8:	2000      	movs	r0, #0
 80072ca:	f7f8 ffdd 	bl	8000288 <__aeabi_dsub>
 80072ce:	4602      	mov	r2, r0
 80072d0:	460b      	mov	r3, r1
 80072d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072d6:	f7f9 fc01 	bl	8000adc <__aeabi_dcmplt>
 80072da:	2800      	cmp	r0, #0
 80072dc:	f43f aef5 	beq.w	80070ca <_dtoa_r+0x43a>
 80072e0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80072e2:	1e73      	subs	r3, r6, #1
 80072e4:	9315      	str	r3, [sp, #84]	@ 0x54
 80072e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80072ea:	2b30      	cmp	r3, #48	@ 0x30
 80072ec:	d0f8      	beq.n	80072e0 <_dtoa_r+0x650>
 80072ee:	9f04      	ldr	r7, [sp, #16]
 80072f0:	e73e      	b.n	8007170 <_dtoa_r+0x4e0>
 80072f2:	4b9b      	ldr	r3, [pc, #620]	@ (8007560 <_dtoa_r+0x8d0>)
 80072f4:	f7f9 f980 	bl	80005f8 <__aeabi_dmul>
 80072f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072fc:	e7bc      	b.n	8007278 <_dtoa_r+0x5e8>
 80072fe:	d10c      	bne.n	800731a <_dtoa_r+0x68a>
 8007300:	4b98      	ldr	r3, [pc, #608]	@ (8007564 <_dtoa_r+0x8d4>)
 8007302:	2200      	movs	r2, #0
 8007304:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007308:	f7f9 f976 	bl	80005f8 <__aeabi_dmul>
 800730c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007310:	f7f9 fbf8 	bl	8000b04 <__aeabi_dcmpge>
 8007314:	2800      	cmp	r0, #0
 8007316:	f000 8157 	beq.w	80075c8 <_dtoa_r+0x938>
 800731a:	2400      	movs	r4, #0
 800731c:	4625      	mov	r5, r4
 800731e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007320:	43db      	mvns	r3, r3
 8007322:	9304      	str	r3, [sp, #16]
 8007324:	4656      	mov	r6, sl
 8007326:	2700      	movs	r7, #0
 8007328:	4621      	mov	r1, r4
 800732a:	4658      	mov	r0, fp
 800732c:	f000 fbb4 	bl	8007a98 <_Bfree>
 8007330:	2d00      	cmp	r5, #0
 8007332:	d0dc      	beq.n	80072ee <_dtoa_r+0x65e>
 8007334:	b12f      	cbz	r7, 8007342 <_dtoa_r+0x6b2>
 8007336:	42af      	cmp	r7, r5
 8007338:	d003      	beq.n	8007342 <_dtoa_r+0x6b2>
 800733a:	4639      	mov	r1, r7
 800733c:	4658      	mov	r0, fp
 800733e:	f000 fbab 	bl	8007a98 <_Bfree>
 8007342:	4629      	mov	r1, r5
 8007344:	4658      	mov	r0, fp
 8007346:	f000 fba7 	bl	8007a98 <_Bfree>
 800734a:	e7d0      	b.n	80072ee <_dtoa_r+0x65e>
 800734c:	9704      	str	r7, [sp, #16]
 800734e:	4633      	mov	r3, r6
 8007350:	461e      	mov	r6, r3
 8007352:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007356:	2a39      	cmp	r2, #57	@ 0x39
 8007358:	d107      	bne.n	800736a <_dtoa_r+0x6da>
 800735a:	459a      	cmp	sl, r3
 800735c:	d1f8      	bne.n	8007350 <_dtoa_r+0x6c0>
 800735e:	9a04      	ldr	r2, [sp, #16]
 8007360:	3201      	adds	r2, #1
 8007362:	9204      	str	r2, [sp, #16]
 8007364:	2230      	movs	r2, #48	@ 0x30
 8007366:	f88a 2000 	strb.w	r2, [sl]
 800736a:	781a      	ldrb	r2, [r3, #0]
 800736c:	3201      	adds	r2, #1
 800736e:	701a      	strb	r2, [r3, #0]
 8007370:	e7bd      	b.n	80072ee <_dtoa_r+0x65e>
 8007372:	4b7b      	ldr	r3, [pc, #492]	@ (8007560 <_dtoa_r+0x8d0>)
 8007374:	2200      	movs	r2, #0
 8007376:	f7f9 f93f 	bl	80005f8 <__aeabi_dmul>
 800737a:	2200      	movs	r2, #0
 800737c:	2300      	movs	r3, #0
 800737e:	4604      	mov	r4, r0
 8007380:	460d      	mov	r5, r1
 8007382:	f7f9 fba1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007386:	2800      	cmp	r0, #0
 8007388:	f43f aebb 	beq.w	8007102 <_dtoa_r+0x472>
 800738c:	e6f0      	b.n	8007170 <_dtoa_r+0x4e0>
 800738e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007390:	2a00      	cmp	r2, #0
 8007392:	f000 80db 	beq.w	800754c <_dtoa_r+0x8bc>
 8007396:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007398:	2a01      	cmp	r2, #1
 800739a:	f300 80bf 	bgt.w	800751c <_dtoa_r+0x88c>
 800739e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80073a0:	2a00      	cmp	r2, #0
 80073a2:	f000 80b7 	beq.w	8007514 <_dtoa_r+0x884>
 80073a6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80073aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80073ac:	4646      	mov	r6, r8
 80073ae:	9a08      	ldr	r2, [sp, #32]
 80073b0:	2101      	movs	r1, #1
 80073b2:	441a      	add	r2, r3
 80073b4:	4658      	mov	r0, fp
 80073b6:	4498      	add	r8, r3
 80073b8:	9208      	str	r2, [sp, #32]
 80073ba:	f000 fc6b 	bl	8007c94 <__i2b>
 80073be:	4605      	mov	r5, r0
 80073c0:	b15e      	cbz	r6, 80073da <_dtoa_r+0x74a>
 80073c2:	9b08      	ldr	r3, [sp, #32]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	dd08      	ble.n	80073da <_dtoa_r+0x74a>
 80073c8:	42b3      	cmp	r3, r6
 80073ca:	9a08      	ldr	r2, [sp, #32]
 80073cc:	bfa8      	it	ge
 80073ce:	4633      	movge	r3, r6
 80073d0:	eba8 0803 	sub.w	r8, r8, r3
 80073d4:	1af6      	subs	r6, r6, r3
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	9308      	str	r3, [sp, #32]
 80073da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073dc:	b1f3      	cbz	r3, 800741c <_dtoa_r+0x78c>
 80073de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f000 80b7 	beq.w	8007554 <_dtoa_r+0x8c4>
 80073e6:	b18c      	cbz	r4, 800740c <_dtoa_r+0x77c>
 80073e8:	4629      	mov	r1, r5
 80073ea:	4622      	mov	r2, r4
 80073ec:	4658      	mov	r0, fp
 80073ee:	f000 fd11 	bl	8007e14 <__pow5mult>
 80073f2:	464a      	mov	r2, r9
 80073f4:	4601      	mov	r1, r0
 80073f6:	4605      	mov	r5, r0
 80073f8:	4658      	mov	r0, fp
 80073fa:	f000 fc61 	bl	8007cc0 <__multiply>
 80073fe:	4649      	mov	r1, r9
 8007400:	9004      	str	r0, [sp, #16]
 8007402:	4658      	mov	r0, fp
 8007404:	f000 fb48 	bl	8007a98 <_Bfree>
 8007408:	9b04      	ldr	r3, [sp, #16]
 800740a:	4699      	mov	r9, r3
 800740c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800740e:	1b1a      	subs	r2, r3, r4
 8007410:	d004      	beq.n	800741c <_dtoa_r+0x78c>
 8007412:	4649      	mov	r1, r9
 8007414:	4658      	mov	r0, fp
 8007416:	f000 fcfd 	bl	8007e14 <__pow5mult>
 800741a:	4681      	mov	r9, r0
 800741c:	2101      	movs	r1, #1
 800741e:	4658      	mov	r0, fp
 8007420:	f000 fc38 	bl	8007c94 <__i2b>
 8007424:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007426:	4604      	mov	r4, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	f000 81cf 	beq.w	80077cc <_dtoa_r+0xb3c>
 800742e:	461a      	mov	r2, r3
 8007430:	4601      	mov	r1, r0
 8007432:	4658      	mov	r0, fp
 8007434:	f000 fcee 	bl	8007e14 <__pow5mult>
 8007438:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800743a:	2b01      	cmp	r3, #1
 800743c:	4604      	mov	r4, r0
 800743e:	f300 8095 	bgt.w	800756c <_dtoa_r+0x8dc>
 8007442:	9b02      	ldr	r3, [sp, #8]
 8007444:	2b00      	cmp	r3, #0
 8007446:	f040 8087 	bne.w	8007558 <_dtoa_r+0x8c8>
 800744a:	9b03      	ldr	r3, [sp, #12]
 800744c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007450:	2b00      	cmp	r3, #0
 8007452:	f040 8089 	bne.w	8007568 <_dtoa_r+0x8d8>
 8007456:	9b03      	ldr	r3, [sp, #12]
 8007458:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800745c:	0d1b      	lsrs	r3, r3, #20
 800745e:	051b      	lsls	r3, r3, #20
 8007460:	b12b      	cbz	r3, 800746e <_dtoa_r+0x7de>
 8007462:	9b08      	ldr	r3, [sp, #32]
 8007464:	3301      	adds	r3, #1
 8007466:	9308      	str	r3, [sp, #32]
 8007468:	f108 0801 	add.w	r8, r8, #1
 800746c:	2301      	movs	r3, #1
 800746e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007470:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007472:	2b00      	cmp	r3, #0
 8007474:	f000 81b0 	beq.w	80077d8 <_dtoa_r+0xb48>
 8007478:	6923      	ldr	r3, [r4, #16]
 800747a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800747e:	6918      	ldr	r0, [r3, #16]
 8007480:	f000 fbbc 	bl	8007bfc <__hi0bits>
 8007484:	f1c0 0020 	rsb	r0, r0, #32
 8007488:	9b08      	ldr	r3, [sp, #32]
 800748a:	4418      	add	r0, r3
 800748c:	f010 001f 	ands.w	r0, r0, #31
 8007490:	d077      	beq.n	8007582 <_dtoa_r+0x8f2>
 8007492:	f1c0 0320 	rsb	r3, r0, #32
 8007496:	2b04      	cmp	r3, #4
 8007498:	dd6b      	ble.n	8007572 <_dtoa_r+0x8e2>
 800749a:	9b08      	ldr	r3, [sp, #32]
 800749c:	f1c0 001c 	rsb	r0, r0, #28
 80074a0:	4403      	add	r3, r0
 80074a2:	4480      	add	r8, r0
 80074a4:	4406      	add	r6, r0
 80074a6:	9308      	str	r3, [sp, #32]
 80074a8:	f1b8 0f00 	cmp.w	r8, #0
 80074ac:	dd05      	ble.n	80074ba <_dtoa_r+0x82a>
 80074ae:	4649      	mov	r1, r9
 80074b0:	4642      	mov	r2, r8
 80074b2:	4658      	mov	r0, fp
 80074b4:	f000 fd08 	bl	8007ec8 <__lshift>
 80074b8:	4681      	mov	r9, r0
 80074ba:	9b08      	ldr	r3, [sp, #32]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	dd05      	ble.n	80074cc <_dtoa_r+0x83c>
 80074c0:	4621      	mov	r1, r4
 80074c2:	461a      	mov	r2, r3
 80074c4:	4658      	mov	r0, fp
 80074c6:	f000 fcff 	bl	8007ec8 <__lshift>
 80074ca:	4604      	mov	r4, r0
 80074cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d059      	beq.n	8007586 <_dtoa_r+0x8f6>
 80074d2:	4621      	mov	r1, r4
 80074d4:	4648      	mov	r0, r9
 80074d6:	f000 fd63 	bl	8007fa0 <__mcmp>
 80074da:	2800      	cmp	r0, #0
 80074dc:	da53      	bge.n	8007586 <_dtoa_r+0x8f6>
 80074de:	1e7b      	subs	r3, r7, #1
 80074e0:	9304      	str	r3, [sp, #16]
 80074e2:	4649      	mov	r1, r9
 80074e4:	2300      	movs	r3, #0
 80074e6:	220a      	movs	r2, #10
 80074e8:	4658      	mov	r0, fp
 80074ea:	f000 faf7 	bl	8007adc <__multadd>
 80074ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074f0:	4681      	mov	r9, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	f000 8172 	beq.w	80077dc <_dtoa_r+0xb4c>
 80074f8:	2300      	movs	r3, #0
 80074fa:	4629      	mov	r1, r5
 80074fc:	220a      	movs	r2, #10
 80074fe:	4658      	mov	r0, fp
 8007500:	f000 faec 	bl	8007adc <__multadd>
 8007504:	9b00      	ldr	r3, [sp, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	4605      	mov	r5, r0
 800750a:	dc67      	bgt.n	80075dc <_dtoa_r+0x94c>
 800750c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800750e:	2b02      	cmp	r3, #2
 8007510:	dc41      	bgt.n	8007596 <_dtoa_r+0x906>
 8007512:	e063      	b.n	80075dc <_dtoa_r+0x94c>
 8007514:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007516:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800751a:	e746      	b.n	80073aa <_dtoa_r+0x71a>
 800751c:	9b07      	ldr	r3, [sp, #28]
 800751e:	1e5c      	subs	r4, r3, #1
 8007520:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007522:	42a3      	cmp	r3, r4
 8007524:	bfbf      	itttt	lt
 8007526:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007528:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800752a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800752c:	1ae3      	sublt	r3, r4, r3
 800752e:	bfb4      	ite	lt
 8007530:	18d2      	addlt	r2, r2, r3
 8007532:	1b1c      	subge	r4, r3, r4
 8007534:	9b07      	ldr	r3, [sp, #28]
 8007536:	bfbc      	itt	lt
 8007538:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800753a:	2400      	movlt	r4, #0
 800753c:	2b00      	cmp	r3, #0
 800753e:	bfb5      	itete	lt
 8007540:	eba8 0603 	sublt.w	r6, r8, r3
 8007544:	9b07      	ldrge	r3, [sp, #28]
 8007546:	2300      	movlt	r3, #0
 8007548:	4646      	movge	r6, r8
 800754a:	e730      	b.n	80073ae <_dtoa_r+0x71e>
 800754c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800754e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007550:	4646      	mov	r6, r8
 8007552:	e735      	b.n	80073c0 <_dtoa_r+0x730>
 8007554:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007556:	e75c      	b.n	8007412 <_dtoa_r+0x782>
 8007558:	2300      	movs	r3, #0
 800755a:	e788      	b.n	800746e <_dtoa_r+0x7de>
 800755c:	3fe00000 	.word	0x3fe00000
 8007560:	40240000 	.word	0x40240000
 8007564:	40140000 	.word	0x40140000
 8007568:	9b02      	ldr	r3, [sp, #8]
 800756a:	e780      	b.n	800746e <_dtoa_r+0x7de>
 800756c:	2300      	movs	r3, #0
 800756e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007570:	e782      	b.n	8007478 <_dtoa_r+0x7e8>
 8007572:	d099      	beq.n	80074a8 <_dtoa_r+0x818>
 8007574:	9a08      	ldr	r2, [sp, #32]
 8007576:	331c      	adds	r3, #28
 8007578:	441a      	add	r2, r3
 800757a:	4498      	add	r8, r3
 800757c:	441e      	add	r6, r3
 800757e:	9208      	str	r2, [sp, #32]
 8007580:	e792      	b.n	80074a8 <_dtoa_r+0x818>
 8007582:	4603      	mov	r3, r0
 8007584:	e7f6      	b.n	8007574 <_dtoa_r+0x8e4>
 8007586:	9b07      	ldr	r3, [sp, #28]
 8007588:	9704      	str	r7, [sp, #16]
 800758a:	2b00      	cmp	r3, #0
 800758c:	dc20      	bgt.n	80075d0 <_dtoa_r+0x940>
 800758e:	9300      	str	r3, [sp, #0]
 8007590:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007592:	2b02      	cmp	r3, #2
 8007594:	dd1e      	ble.n	80075d4 <_dtoa_r+0x944>
 8007596:	9b00      	ldr	r3, [sp, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	f47f aec0 	bne.w	800731e <_dtoa_r+0x68e>
 800759e:	4621      	mov	r1, r4
 80075a0:	2205      	movs	r2, #5
 80075a2:	4658      	mov	r0, fp
 80075a4:	f000 fa9a 	bl	8007adc <__multadd>
 80075a8:	4601      	mov	r1, r0
 80075aa:	4604      	mov	r4, r0
 80075ac:	4648      	mov	r0, r9
 80075ae:	f000 fcf7 	bl	8007fa0 <__mcmp>
 80075b2:	2800      	cmp	r0, #0
 80075b4:	f77f aeb3 	ble.w	800731e <_dtoa_r+0x68e>
 80075b8:	4656      	mov	r6, sl
 80075ba:	2331      	movs	r3, #49	@ 0x31
 80075bc:	f806 3b01 	strb.w	r3, [r6], #1
 80075c0:	9b04      	ldr	r3, [sp, #16]
 80075c2:	3301      	adds	r3, #1
 80075c4:	9304      	str	r3, [sp, #16]
 80075c6:	e6ae      	b.n	8007326 <_dtoa_r+0x696>
 80075c8:	9c07      	ldr	r4, [sp, #28]
 80075ca:	9704      	str	r7, [sp, #16]
 80075cc:	4625      	mov	r5, r4
 80075ce:	e7f3      	b.n	80075b8 <_dtoa_r+0x928>
 80075d0:	9b07      	ldr	r3, [sp, #28]
 80075d2:	9300      	str	r3, [sp, #0]
 80075d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	f000 8104 	beq.w	80077e4 <_dtoa_r+0xb54>
 80075dc:	2e00      	cmp	r6, #0
 80075de:	dd05      	ble.n	80075ec <_dtoa_r+0x95c>
 80075e0:	4629      	mov	r1, r5
 80075e2:	4632      	mov	r2, r6
 80075e4:	4658      	mov	r0, fp
 80075e6:	f000 fc6f 	bl	8007ec8 <__lshift>
 80075ea:	4605      	mov	r5, r0
 80075ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d05a      	beq.n	80076a8 <_dtoa_r+0xa18>
 80075f2:	6869      	ldr	r1, [r5, #4]
 80075f4:	4658      	mov	r0, fp
 80075f6:	f000 fa0f 	bl	8007a18 <_Balloc>
 80075fa:	4606      	mov	r6, r0
 80075fc:	b928      	cbnz	r0, 800760a <_dtoa_r+0x97a>
 80075fe:	4b84      	ldr	r3, [pc, #528]	@ (8007810 <_dtoa_r+0xb80>)
 8007600:	4602      	mov	r2, r0
 8007602:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007606:	f7ff bb5a 	b.w	8006cbe <_dtoa_r+0x2e>
 800760a:	692a      	ldr	r2, [r5, #16]
 800760c:	3202      	adds	r2, #2
 800760e:	0092      	lsls	r2, r2, #2
 8007610:	f105 010c 	add.w	r1, r5, #12
 8007614:	300c      	adds	r0, #12
 8007616:	f001 ff75 	bl	8009504 <memcpy>
 800761a:	2201      	movs	r2, #1
 800761c:	4631      	mov	r1, r6
 800761e:	4658      	mov	r0, fp
 8007620:	f000 fc52 	bl	8007ec8 <__lshift>
 8007624:	f10a 0301 	add.w	r3, sl, #1
 8007628:	9307      	str	r3, [sp, #28]
 800762a:	9b00      	ldr	r3, [sp, #0]
 800762c:	4453      	add	r3, sl
 800762e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007630:	9b02      	ldr	r3, [sp, #8]
 8007632:	f003 0301 	and.w	r3, r3, #1
 8007636:	462f      	mov	r7, r5
 8007638:	930a      	str	r3, [sp, #40]	@ 0x28
 800763a:	4605      	mov	r5, r0
 800763c:	9b07      	ldr	r3, [sp, #28]
 800763e:	4621      	mov	r1, r4
 8007640:	3b01      	subs	r3, #1
 8007642:	4648      	mov	r0, r9
 8007644:	9300      	str	r3, [sp, #0]
 8007646:	f7ff fa9b 	bl	8006b80 <quorem>
 800764a:	4639      	mov	r1, r7
 800764c:	9002      	str	r0, [sp, #8]
 800764e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007652:	4648      	mov	r0, r9
 8007654:	f000 fca4 	bl	8007fa0 <__mcmp>
 8007658:	462a      	mov	r2, r5
 800765a:	9008      	str	r0, [sp, #32]
 800765c:	4621      	mov	r1, r4
 800765e:	4658      	mov	r0, fp
 8007660:	f000 fcba 	bl	8007fd8 <__mdiff>
 8007664:	68c2      	ldr	r2, [r0, #12]
 8007666:	4606      	mov	r6, r0
 8007668:	bb02      	cbnz	r2, 80076ac <_dtoa_r+0xa1c>
 800766a:	4601      	mov	r1, r0
 800766c:	4648      	mov	r0, r9
 800766e:	f000 fc97 	bl	8007fa0 <__mcmp>
 8007672:	4602      	mov	r2, r0
 8007674:	4631      	mov	r1, r6
 8007676:	4658      	mov	r0, fp
 8007678:	920e      	str	r2, [sp, #56]	@ 0x38
 800767a:	f000 fa0d 	bl	8007a98 <_Bfree>
 800767e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007680:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007682:	9e07      	ldr	r6, [sp, #28]
 8007684:	ea43 0102 	orr.w	r1, r3, r2
 8007688:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800768a:	4319      	orrs	r1, r3
 800768c:	d110      	bne.n	80076b0 <_dtoa_r+0xa20>
 800768e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007692:	d029      	beq.n	80076e8 <_dtoa_r+0xa58>
 8007694:	9b08      	ldr	r3, [sp, #32]
 8007696:	2b00      	cmp	r3, #0
 8007698:	dd02      	ble.n	80076a0 <_dtoa_r+0xa10>
 800769a:	9b02      	ldr	r3, [sp, #8]
 800769c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80076a0:	9b00      	ldr	r3, [sp, #0]
 80076a2:	f883 8000 	strb.w	r8, [r3]
 80076a6:	e63f      	b.n	8007328 <_dtoa_r+0x698>
 80076a8:	4628      	mov	r0, r5
 80076aa:	e7bb      	b.n	8007624 <_dtoa_r+0x994>
 80076ac:	2201      	movs	r2, #1
 80076ae:	e7e1      	b.n	8007674 <_dtoa_r+0x9e4>
 80076b0:	9b08      	ldr	r3, [sp, #32]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	db04      	blt.n	80076c0 <_dtoa_r+0xa30>
 80076b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80076b8:	430b      	orrs	r3, r1
 80076ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80076bc:	430b      	orrs	r3, r1
 80076be:	d120      	bne.n	8007702 <_dtoa_r+0xa72>
 80076c0:	2a00      	cmp	r2, #0
 80076c2:	dded      	ble.n	80076a0 <_dtoa_r+0xa10>
 80076c4:	4649      	mov	r1, r9
 80076c6:	2201      	movs	r2, #1
 80076c8:	4658      	mov	r0, fp
 80076ca:	f000 fbfd 	bl	8007ec8 <__lshift>
 80076ce:	4621      	mov	r1, r4
 80076d0:	4681      	mov	r9, r0
 80076d2:	f000 fc65 	bl	8007fa0 <__mcmp>
 80076d6:	2800      	cmp	r0, #0
 80076d8:	dc03      	bgt.n	80076e2 <_dtoa_r+0xa52>
 80076da:	d1e1      	bne.n	80076a0 <_dtoa_r+0xa10>
 80076dc:	f018 0f01 	tst.w	r8, #1
 80076e0:	d0de      	beq.n	80076a0 <_dtoa_r+0xa10>
 80076e2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80076e6:	d1d8      	bne.n	800769a <_dtoa_r+0xa0a>
 80076e8:	9a00      	ldr	r2, [sp, #0]
 80076ea:	2339      	movs	r3, #57	@ 0x39
 80076ec:	7013      	strb	r3, [r2, #0]
 80076ee:	4633      	mov	r3, r6
 80076f0:	461e      	mov	r6, r3
 80076f2:	3b01      	subs	r3, #1
 80076f4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80076f8:	2a39      	cmp	r2, #57	@ 0x39
 80076fa:	d052      	beq.n	80077a2 <_dtoa_r+0xb12>
 80076fc:	3201      	adds	r2, #1
 80076fe:	701a      	strb	r2, [r3, #0]
 8007700:	e612      	b.n	8007328 <_dtoa_r+0x698>
 8007702:	2a00      	cmp	r2, #0
 8007704:	dd07      	ble.n	8007716 <_dtoa_r+0xa86>
 8007706:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800770a:	d0ed      	beq.n	80076e8 <_dtoa_r+0xa58>
 800770c:	9a00      	ldr	r2, [sp, #0]
 800770e:	f108 0301 	add.w	r3, r8, #1
 8007712:	7013      	strb	r3, [r2, #0]
 8007714:	e608      	b.n	8007328 <_dtoa_r+0x698>
 8007716:	9b07      	ldr	r3, [sp, #28]
 8007718:	9a07      	ldr	r2, [sp, #28]
 800771a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800771e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007720:	4293      	cmp	r3, r2
 8007722:	d028      	beq.n	8007776 <_dtoa_r+0xae6>
 8007724:	4649      	mov	r1, r9
 8007726:	2300      	movs	r3, #0
 8007728:	220a      	movs	r2, #10
 800772a:	4658      	mov	r0, fp
 800772c:	f000 f9d6 	bl	8007adc <__multadd>
 8007730:	42af      	cmp	r7, r5
 8007732:	4681      	mov	r9, r0
 8007734:	f04f 0300 	mov.w	r3, #0
 8007738:	f04f 020a 	mov.w	r2, #10
 800773c:	4639      	mov	r1, r7
 800773e:	4658      	mov	r0, fp
 8007740:	d107      	bne.n	8007752 <_dtoa_r+0xac2>
 8007742:	f000 f9cb 	bl	8007adc <__multadd>
 8007746:	4607      	mov	r7, r0
 8007748:	4605      	mov	r5, r0
 800774a:	9b07      	ldr	r3, [sp, #28]
 800774c:	3301      	adds	r3, #1
 800774e:	9307      	str	r3, [sp, #28]
 8007750:	e774      	b.n	800763c <_dtoa_r+0x9ac>
 8007752:	f000 f9c3 	bl	8007adc <__multadd>
 8007756:	4629      	mov	r1, r5
 8007758:	4607      	mov	r7, r0
 800775a:	2300      	movs	r3, #0
 800775c:	220a      	movs	r2, #10
 800775e:	4658      	mov	r0, fp
 8007760:	f000 f9bc 	bl	8007adc <__multadd>
 8007764:	4605      	mov	r5, r0
 8007766:	e7f0      	b.n	800774a <_dtoa_r+0xaba>
 8007768:	9b00      	ldr	r3, [sp, #0]
 800776a:	2b00      	cmp	r3, #0
 800776c:	bfcc      	ite	gt
 800776e:	461e      	movgt	r6, r3
 8007770:	2601      	movle	r6, #1
 8007772:	4456      	add	r6, sl
 8007774:	2700      	movs	r7, #0
 8007776:	4649      	mov	r1, r9
 8007778:	2201      	movs	r2, #1
 800777a:	4658      	mov	r0, fp
 800777c:	f000 fba4 	bl	8007ec8 <__lshift>
 8007780:	4621      	mov	r1, r4
 8007782:	4681      	mov	r9, r0
 8007784:	f000 fc0c 	bl	8007fa0 <__mcmp>
 8007788:	2800      	cmp	r0, #0
 800778a:	dcb0      	bgt.n	80076ee <_dtoa_r+0xa5e>
 800778c:	d102      	bne.n	8007794 <_dtoa_r+0xb04>
 800778e:	f018 0f01 	tst.w	r8, #1
 8007792:	d1ac      	bne.n	80076ee <_dtoa_r+0xa5e>
 8007794:	4633      	mov	r3, r6
 8007796:	461e      	mov	r6, r3
 8007798:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800779c:	2a30      	cmp	r2, #48	@ 0x30
 800779e:	d0fa      	beq.n	8007796 <_dtoa_r+0xb06>
 80077a0:	e5c2      	b.n	8007328 <_dtoa_r+0x698>
 80077a2:	459a      	cmp	sl, r3
 80077a4:	d1a4      	bne.n	80076f0 <_dtoa_r+0xa60>
 80077a6:	9b04      	ldr	r3, [sp, #16]
 80077a8:	3301      	adds	r3, #1
 80077aa:	9304      	str	r3, [sp, #16]
 80077ac:	2331      	movs	r3, #49	@ 0x31
 80077ae:	f88a 3000 	strb.w	r3, [sl]
 80077b2:	e5b9      	b.n	8007328 <_dtoa_r+0x698>
 80077b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80077b6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007814 <_dtoa_r+0xb84>
 80077ba:	b11b      	cbz	r3, 80077c4 <_dtoa_r+0xb34>
 80077bc:	f10a 0308 	add.w	r3, sl, #8
 80077c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80077c2:	6013      	str	r3, [r2, #0]
 80077c4:	4650      	mov	r0, sl
 80077c6:	b019      	add	sp, #100	@ 0x64
 80077c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	f77f ae37 	ble.w	8007442 <_dtoa_r+0x7b2>
 80077d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80077d8:	2001      	movs	r0, #1
 80077da:	e655      	b.n	8007488 <_dtoa_r+0x7f8>
 80077dc:	9b00      	ldr	r3, [sp, #0]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	f77f aed6 	ble.w	8007590 <_dtoa_r+0x900>
 80077e4:	4656      	mov	r6, sl
 80077e6:	4621      	mov	r1, r4
 80077e8:	4648      	mov	r0, r9
 80077ea:	f7ff f9c9 	bl	8006b80 <quorem>
 80077ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80077f2:	f806 8b01 	strb.w	r8, [r6], #1
 80077f6:	9b00      	ldr	r3, [sp, #0]
 80077f8:	eba6 020a 	sub.w	r2, r6, sl
 80077fc:	4293      	cmp	r3, r2
 80077fe:	ddb3      	ble.n	8007768 <_dtoa_r+0xad8>
 8007800:	4649      	mov	r1, r9
 8007802:	2300      	movs	r3, #0
 8007804:	220a      	movs	r2, #10
 8007806:	4658      	mov	r0, fp
 8007808:	f000 f968 	bl	8007adc <__multadd>
 800780c:	4681      	mov	r9, r0
 800780e:	e7ea      	b.n	80077e6 <_dtoa_r+0xb56>
 8007810:	0800a5bd 	.word	0x0800a5bd
 8007814:	0800a541 	.word	0x0800a541

08007818 <_free_r>:
 8007818:	b538      	push	{r3, r4, r5, lr}
 800781a:	4605      	mov	r5, r0
 800781c:	2900      	cmp	r1, #0
 800781e:	d041      	beq.n	80078a4 <_free_r+0x8c>
 8007820:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007824:	1f0c      	subs	r4, r1, #4
 8007826:	2b00      	cmp	r3, #0
 8007828:	bfb8      	it	lt
 800782a:	18e4      	addlt	r4, r4, r3
 800782c:	f000 f8e8 	bl	8007a00 <__malloc_lock>
 8007830:	4a1d      	ldr	r2, [pc, #116]	@ (80078a8 <_free_r+0x90>)
 8007832:	6813      	ldr	r3, [r2, #0]
 8007834:	b933      	cbnz	r3, 8007844 <_free_r+0x2c>
 8007836:	6063      	str	r3, [r4, #4]
 8007838:	6014      	str	r4, [r2, #0]
 800783a:	4628      	mov	r0, r5
 800783c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007840:	f000 b8e4 	b.w	8007a0c <__malloc_unlock>
 8007844:	42a3      	cmp	r3, r4
 8007846:	d908      	bls.n	800785a <_free_r+0x42>
 8007848:	6820      	ldr	r0, [r4, #0]
 800784a:	1821      	adds	r1, r4, r0
 800784c:	428b      	cmp	r3, r1
 800784e:	bf01      	itttt	eq
 8007850:	6819      	ldreq	r1, [r3, #0]
 8007852:	685b      	ldreq	r3, [r3, #4]
 8007854:	1809      	addeq	r1, r1, r0
 8007856:	6021      	streq	r1, [r4, #0]
 8007858:	e7ed      	b.n	8007836 <_free_r+0x1e>
 800785a:	461a      	mov	r2, r3
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	b10b      	cbz	r3, 8007864 <_free_r+0x4c>
 8007860:	42a3      	cmp	r3, r4
 8007862:	d9fa      	bls.n	800785a <_free_r+0x42>
 8007864:	6811      	ldr	r1, [r2, #0]
 8007866:	1850      	adds	r0, r2, r1
 8007868:	42a0      	cmp	r0, r4
 800786a:	d10b      	bne.n	8007884 <_free_r+0x6c>
 800786c:	6820      	ldr	r0, [r4, #0]
 800786e:	4401      	add	r1, r0
 8007870:	1850      	adds	r0, r2, r1
 8007872:	4283      	cmp	r3, r0
 8007874:	6011      	str	r1, [r2, #0]
 8007876:	d1e0      	bne.n	800783a <_free_r+0x22>
 8007878:	6818      	ldr	r0, [r3, #0]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	6053      	str	r3, [r2, #4]
 800787e:	4408      	add	r0, r1
 8007880:	6010      	str	r0, [r2, #0]
 8007882:	e7da      	b.n	800783a <_free_r+0x22>
 8007884:	d902      	bls.n	800788c <_free_r+0x74>
 8007886:	230c      	movs	r3, #12
 8007888:	602b      	str	r3, [r5, #0]
 800788a:	e7d6      	b.n	800783a <_free_r+0x22>
 800788c:	6820      	ldr	r0, [r4, #0]
 800788e:	1821      	adds	r1, r4, r0
 8007890:	428b      	cmp	r3, r1
 8007892:	bf04      	itt	eq
 8007894:	6819      	ldreq	r1, [r3, #0]
 8007896:	685b      	ldreq	r3, [r3, #4]
 8007898:	6063      	str	r3, [r4, #4]
 800789a:	bf04      	itt	eq
 800789c:	1809      	addeq	r1, r1, r0
 800789e:	6021      	streq	r1, [r4, #0]
 80078a0:	6054      	str	r4, [r2, #4]
 80078a2:	e7ca      	b.n	800783a <_free_r+0x22>
 80078a4:	bd38      	pop	{r3, r4, r5, pc}
 80078a6:	bf00      	nop
 80078a8:	200004d0 	.word	0x200004d0

080078ac <malloc>:
 80078ac:	4b02      	ldr	r3, [pc, #8]	@ (80078b8 <malloc+0xc>)
 80078ae:	4601      	mov	r1, r0
 80078b0:	6818      	ldr	r0, [r3, #0]
 80078b2:	f000 b825 	b.w	8007900 <_malloc_r>
 80078b6:	bf00      	nop
 80078b8:	20000018 	.word	0x20000018

080078bc <sbrk_aligned>:
 80078bc:	b570      	push	{r4, r5, r6, lr}
 80078be:	4e0f      	ldr	r6, [pc, #60]	@ (80078fc <sbrk_aligned+0x40>)
 80078c0:	460c      	mov	r4, r1
 80078c2:	6831      	ldr	r1, [r6, #0]
 80078c4:	4605      	mov	r5, r0
 80078c6:	b911      	cbnz	r1, 80078ce <sbrk_aligned+0x12>
 80078c8:	f001 fe0c 	bl	80094e4 <_sbrk_r>
 80078cc:	6030      	str	r0, [r6, #0]
 80078ce:	4621      	mov	r1, r4
 80078d0:	4628      	mov	r0, r5
 80078d2:	f001 fe07 	bl	80094e4 <_sbrk_r>
 80078d6:	1c43      	adds	r3, r0, #1
 80078d8:	d103      	bne.n	80078e2 <sbrk_aligned+0x26>
 80078da:	f04f 34ff 	mov.w	r4, #4294967295
 80078de:	4620      	mov	r0, r4
 80078e0:	bd70      	pop	{r4, r5, r6, pc}
 80078e2:	1cc4      	adds	r4, r0, #3
 80078e4:	f024 0403 	bic.w	r4, r4, #3
 80078e8:	42a0      	cmp	r0, r4
 80078ea:	d0f8      	beq.n	80078de <sbrk_aligned+0x22>
 80078ec:	1a21      	subs	r1, r4, r0
 80078ee:	4628      	mov	r0, r5
 80078f0:	f001 fdf8 	bl	80094e4 <_sbrk_r>
 80078f4:	3001      	adds	r0, #1
 80078f6:	d1f2      	bne.n	80078de <sbrk_aligned+0x22>
 80078f8:	e7ef      	b.n	80078da <sbrk_aligned+0x1e>
 80078fa:	bf00      	nop
 80078fc:	200004cc 	.word	0x200004cc

08007900 <_malloc_r>:
 8007900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007904:	1ccd      	adds	r5, r1, #3
 8007906:	f025 0503 	bic.w	r5, r5, #3
 800790a:	3508      	adds	r5, #8
 800790c:	2d0c      	cmp	r5, #12
 800790e:	bf38      	it	cc
 8007910:	250c      	movcc	r5, #12
 8007912:	2d00      	cmp	r5, #0
 8007914:	4606      	mov	r6, r0
 8007916:	db01      	blt.n	800791c <_malloc_r+0x1c>
 8007918:	42a9      	cmp	r1, r5
 800791a:	d904      	bls.n	8007926 <_malloc_r+0x26>
 800791c:	230c      	movs	r3, #12
 800791e:	6033      	str	r3, [r6, #0]
 8007920:	2000      	movs	r0, #0
 8007922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007926:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80079fc <_malloc_r+0xfc>
 800792a:	f000 f869 	bl	8007a00 <__malloc_lock>
 800792e:	f8d8 3000 	ldr.w	r3, [r8]
 8007932:	461c      	mov	r4, r3
 8007934:	bb44      	cbnz	r4, 8007988 <_malloc_r+0x88>
 8007936:	4629      	mov	r1, r5
 8007938:	4630      	mov	r0, r6
 800793a:	f7ff ffbf 	bl	80078bc <sbrk_aligned>
 800793e:	1c43      	adds	r3, r0, #1
 8007940:	4604      	mov	r4, r0
 8007942:	d158      	bne.n	80079f6 <_malloc_r+0xf6>
 8007944:	f8d8 4000 	ldr.w	r4, [r8]
 8007948:	4627      	mov	r7, r4
 800794a:	2f00      	cmp	r7, #0
 800794c:	d143      	bne.n	80079d6 <_malloc_r+0xd6>
 800794e:	2c00      	cmp	r4, #0
 8007950:	d04b      	beq.n	80079ea <_malloc_r+0xea>
 8007952:	6823      	ldr	r3, [r4, #0]
 8007954:	4639      	mov	r1, r7
 8007956:	4630      	mov	r0, r6
 8007958:	eb04 0903 	add.w	r9, r4, r3
 800795c:	f001 fdc2 	bl	80094e4 <_sbrk_r>
 8007960:	4581      	cmp	r9, r0
 8007962:	d142      	bne.n	80079ea <_malloc_r+0xea>
 8007964:	6821      	ldr	r1, [r4, #0]
 8007966:	1a6d      	subs	r5, r5, r1
 8007968:	4629      	mov	r1, r5
 800796a:	4630      	mov	r0, r6
 800796c:	f7ff ffa6 	bl	80078bc <sbrk_aligned>
 8007970:	3001      	adds	r0, #1
 8007972:	d03a      	beq.n	80079ea <_malloc_r+0xea>
 8007974:	6823      	ldr	r3, [r4, #0]
 8007976:	442b      	add	r3, r5
 8007978:	6023      	str	r3, [r4, #0]
 800797a:	f8d8 3000 	ldr.w	r3, [r8]
 800797e:	685a      	ldr	r2, [r3, #4]
 8007980:	bb62      	cbnz	r2, 80079dc <_malloc_r+0xdc>
 8007982:	f8c8 7000 	str.w	r7, [r8]
 8007986:	e00f      	b.n	80079a8 <_malloc_r+0xa8>
 8007988:	6822      	ldr	r2, [r4, #0]
 800798a:	1b52      	subs	r2, r2, r5
 800798c:	d420      	bmi.n	80079d0 <_malloc_r+0xd0>
 800798e:	2a0b      	cmp	r2, #11
 8007990:	d917      	bls.n	80079c2 <_malloc_r+0xc2>
 8007992:	1961      	adds	r1, r4, r5
 8007994:	42a3      	cmp	r3, r4
 8007996:	6025      	str	r5, [r4, #0]
 8007998:	bf18      	it	ne
 800799a:	6059      	strne	r1, [r3, #4]
 800799c:	6863      	ldr	r3, [r4, #4]
 800799e:	bf08      	it	eq
 80079a0:	f8c8 1000 	streq.w	r1, [r8]
 80079a4:	5162      	str	r2, [r4, r5]
 80079a6:	604b      	str	r3, [r1, #4]
 80079a8:	4630      	mov	r0, r6
 80079aa:	f000 f82f 	bl	8007a0c <__malloc_unlock>
 80079ae:	f104 000b 	add.w	r0, r4, #11
 80079b2:	1d23      	adds	r3, r4, #4
 80079b4:	f020 0007 	bic.w	r0, r0, #7
 80079b8:	1ac2      	subs	r2, r0, r3
 80079ba:	bf1c      	itt	ne
 80079bc:	1a1b      	subne	r3, r3, r0
 80079be:	50a3      	strne	r3, [r4, r2]
 80079c0:	e7af      	b.n	8007922 <_malloc_r+0x22>
 80079c2:	6862      	ldr	r2, [r4, #4]
 80079c4:	42a3      	cmp	r3, r4
 80079c6:	bf0c      	ite	eq
 80079c8:	f8c8 2000 	streq.w	r2, [r8]
 80079cc:	605a      	strne	r2, [r3, #4]
 80079ce:	e7eb      	b.n	80079a8 <_malloc_r+0xa8>
 80079d0:	4623      	mov	r3, r4
 80079d2:	6864      	ldr	r4, [r4, #4]
 80079d4:	e7ae      	b.n	8007934 <_malloc_r+0x34>
 80079d6:	463c      	mov	r4, r7
 80079d8:	687f      	ldr	r7, [r7, #4]
 80079da:	e7b6      	b.n	800794a <_malloc_r+0x4a>
 80079dc:	461a      	mov	r2, r3
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	42a3      	cmp	r3, r4
 80079e2:	d1fb      	bne.n	80079dc <_malloc_r+0xdc>
 80079e4:	2300      	movs	r3, #0
 80079e6:	6053      	str	r3, [r2, #4]
 80079e8:	e7de      	b.n	80079a8 <_malloc_r+0xa8>
 80079ea:	230c      	movs	r3, #12
 80079ec:	6033      	str	r3, [r6, #0]
 80079ee:	4630      	mov	r0, r6
 80079f0:	f000 f80c 	bl	8007a0c <__malloc_unlock>
 80079f4:	e794      	b.n	8007920 <_malloc_r+0x20>
 80079f6:	6005      	str	r5, [r0, #0]
 80079f8:	e7d6      	b.n	80079a8 <_malloc_r+0xa8>
 80079fa:	bf00      	nop
 80079fc:	200004d0 	.word	0x200004d0

08007a00 <__malloc_lock>:
 8007a00:	4801      	ldr	r0, [pc, #4]	@ (8007a08 <__malloc_lock+0x8>)
 8007a02:	f7ff b8b4 	b.w	8006b6e <__retarget_lock_acquire_recursive>
 8007a06:	bf00      	nop
 8007a08:	200004c8 	.word	0x200004c8

08007a0c <__malloc_unlock>:
 8007a0c:	4801      	ldr	r0, [pc, #4]	@ (8007a14 <__malloc_unlock+0x8>)
 8007a0e:	f7ff b8af 	b.w	8006b70 <__retarget_lock_release_recursive>
 8007a12:	bf00      	nop
 8007a14:	200004c8 	.word	0x200004c8

08007a18 <_Balloc>:
 8007a18:	b570      	push	{r4, r5, r6, lr}
 8007a1a:	69c6      	ldr	r6, [r0, #28]
 8007a1c:	4604      	mov	r4, r0
 8007a1e:	460d      	mov	r5, r1
 8007a20:	b976      	cbnz	r6, 8007a40 <_Balloc+0x28>
 8007a22:	2010      	movs	r0, #16
 8007a24:	f7ff ff42 	bl	80078ac <malloc>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	61e0      	str	r0, [r4, #28]
 8007a2c:	b920      	cbnz	r0, 8007a38 <_Balloc+0x20>
 8007a2e:	4b18      	ldr	r3, [pc, #96]	@ (8007a90 <_Balloc+0x78>)
 8007a30:	4818      	ldr	r0, [pc, #96]	@ (8007a94 <_Balloc+0x7c>)
 8007a32:	216b      	movs	r1, #107	@ 0x6b
 8007a34:	f001 fd7c 	bl	8009530 <__assert_func>
 8007a38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a3c:	6006      	str	r6, [r0, #0]
 8007a3e:	60c6      	str	r6, [r0, #12]
 8007a40:	69e6      	ldr	r6, [r4, #28]
 8007a42:	68f3      	ldr	r3, [r6, #12]
 8007a44:	b183      	cbz	r3, 8007a68 <_Balloc+0x50>
 8007a46:	69e3      	ldr	r3, [r4, #28]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a4e:	b9b8      	cbnz	r0, 8007a80 <_Balloc+0x68>
 8007a50:	2101      	movs	r1, #1
 8007a52:	fa01 f605 	lsl.w	r6, r1, r5
 8007a56:	1d72      	adds	r2, r6, #5
 8007a58:	0092      	lsls	r2, r2, #2
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	f001 fd86 	bl	800956c <_calloc_r>
 8007a60:	b160      	cbz	r0, 8007a7c <_Balloc+0x64>
 8007a62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007a66:	e00e      	b.n	8007a86 <_Balloc+0x6e>
 8007a68:	2221      	movs	r2, #33	@ 0x21
 8007a6a:	2104      	movs	r1, #4
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	f001 fd7d 	bl	800956c <_calloc_r>
 8007a72:	69e3      	ldr	r3, [r4, #28]
 8007a74:	60f0      	str	r0, [r6, #12]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d1e4      	bne.n	8007a46 <_Balloc+0x2e>
 8007a7c:	2000      	movs	r0, #0
 8007a7e:	bd70      	pop	{r4, r5, r6, pc}
 8007a80:	6802      	ldr	r2, [r0, #0]
 8007a82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007a86:	2300      	movs	r3, #0
 8007a88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007a8c:	e7f7      	b.n	8007a7e <_Balloc+0x66>
 8007a8e:	bf00      	nop
 8007a90:	0800a54e 	.word	0x0800a54e
 8007a94:	0800a5ce 	.word	0x0800a5ce

08007a98 <_Bfree>:
 8007a98:	b570      	push	{r4, r5, r6, lr}
 8007a9a:	69c6      	ldr	r6, [r0, #28]
 8007a9c:	4605      	mov	r5, r0
 8007a9e:	460c      	mov	r4, r1
 8007aa0:	b976      	cbnz	r6, 8007ac0 <_Bfree+0x28>
 8007aa2:	2010      	movs	r0, #16
 8007aa4:	f7ff ff02 	bl	80078ac <malloc>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	61e8      	str	r0, [r5, #28]
 8007aac:	b920      	cbnz	r0, 8007ab8 <_Bfree+0x20>
 8007aae:	4b09      	ldr	r3, [pc, #36]	@ (8007ad4 <_Bfree+0x3c>)
 8007ab0:	4809      	ldr	r0, [pc, #36]	@ (8007ad8 <_Bfree+0x40>)
 8007ab2:	218f      	movs	r1, #143	@ 0x8f
 8007ab4:	f001 fd3c 	bl	8009530 <__assert_func>
 8007ab8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007abc:	6006      	str	r6, [r0, #0]
 8007abe:	60c6      	str	r6, [r0, #12]
 8007ac0:	b13c      	cbz	r4, 8007ad2 <_Bfree+0x3a>
 8007ac2:	69eb      	ldr	r3, [r5, #28]
 8007ac4:	6862      	ldr	r2, [r4, #4]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007acc:	6021      	str	r1, [r4, #0]
 8007ace:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007ad2:	bd70      	pop	{r4, r5, r6, pc}
 8007ad4:	0800a54e 	.word	0x0800a54e
 8007ad8:	0800a5ce 	.word	0x0800a5ce

08007adc <__multadd>:
 8007adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ae0:	690d      	ldr	r5, [r1, #16]
 8007ae2:	4607      	mov	r7, r0
 8007ae4:	460c      	mov	r4, r1
 8007ae6:	461e      	mov	r6, r3
 8007ae8:	f101 0c14 	add.w	ip, r1, #20
 8007aec:	2000      	movs	r0, #0
 8007aee:	f8dc 3000 	ldr.w	r3, [ip]
 8007af2:	b299      	uxth	r1, r3
 8007af4:	fb02 6101 	mla	r1, r2, r1, r6
 8007af8:	0c1e      	lsrs	r6, r3, #16
 8007afa:	0c0b      	lsrs	r3, r1, #16
 8007afc:	fb02 3306 	mla	r3, r2, r6, r3
 8007b00:	b289      	uxth	r1, r1
 8007b02:	3001      	adds	r0, #1
 8007b04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b08:	4285      	cmp	r5, r0
 8007b0a:	f84c 1b04 	str.w	r1, [ip], #4
 8007b0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007b12:	dcec      	bgt.n	8007aee <__multadd+0x12>
 8007b14:	b30e      	cbz	r6, 8007b5a <__multadd+0x7e>
 8007b16:	68a3      	ldr	r3, [r4, #8]
 8007b18:	42ab      	cmp	r3, r5
 8007b1a:	dc19      	bgt.n	8007b50 <__multadd+0x74>
 8007b1c:	6861      	ldr	r1, [r4, #4]
 8007b1e:	4638      	mov	r0, r7
 8007b20:	3101      	adds	r1, #1
 8007b22:	f7ff ff79 	bl	8007a18 <_Balloc>
 8007b26:	4680      	mov	r8, r0
 8007b28:	b928      	cbnz	r0, 8007b36 <__multadd+0x5a>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8007b60 <__multadd+0x84>)
 8007b2e:	480d      	ldr	r0, [pc, #52]	@ (8007b64 <__multadd+0x88>)
 8007b30:	21ba      	movs	r1, #186	@ 0xba
 8007b32:	f001 fcfd 	bl	8009530 <__assert_func>
 8007b36:	6922      	ldr	r2, [r4, #16]
 8007b38:	3202      	adds	r2, #2
 8007b3a:	f104 010c 	add.w	r1, r4, #12
 8007b3e:	0092      	lsls	r2, r2, #2
 8007b40:	300c      	adds	r0, #12
 8007b42:	f001 fcdf 	bl	8009504 <memcpy>
 8007b46:	4621      	mov	r1, r4
 8007b48:	4638      	mov	r0, r7
 8007b4a:	f7ff ffa5 	bl	8007a98 <_Bfree>
 8007b4e:	4644      	mov	r4, r8
 8007b50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007b54:	3501      	adds	r5, #1
 8007b56:	615e      	str	r6, [r3, #20]
 8007b58:	6125      	str	r5, [r4, #16]
 8007b5a:	4620      	mov	r0, r4
 8007b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b60:	0800a5bd 	.word	0x0800a5bd
 8007b64:	0800a5ce 	.word	0x0800a5ce

08007b68 <__s2b>:
 8007b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b6c:	460c      	mov	r4, r1
 8007b6e:	4615      	mov	r5, r2
 8007b70:	461f      	mov	r7, r3
 8007b72:	2209      	movs	r2, #9
 8007b74:	3308      	adds	r3, #8
 8007b76:	4606      	mov	r6, r0
 8007b78:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	2201      	movs	r2, #1
 8007b80:	429a      	cmp	r2, r3
 8007b82:	db09      	blt.n	8007b98 <__s2b+0x30>
 8007b84:	4630      	mov	r0, r6
 8007b86:	f7ff ff47 	bl	8007a18 <_Balloc>
 8007b8a:	b940      	cbnz	r0, 8007b9e <__s2b+0x36>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	4b19      	ldr	r3, [pc, #100]	@ (8007bf4 <__s2b+0x8c>)
 8007b90:	4819      	ldr	r0, [pc, #100]	@ (8007bf8 <__s2b+0x90>)
 8007b92:	21d3      	movs	r1, #211	@ 0xd3
 8007b94:	f001 fccc 	bl	8009530 <__assert_func>
 8007b98:	0052      	lsls	r2, r2, #1
 8007b9a:	3101      	adds	r1, #1
 8007b9c:	e7f0      	b.n	8007b80 <__s2b+0x18>
 8007b9e:	9b08      	ldr	r3, [sp, #32]
 8007ba0:	6143      	str	r3, [r0, #20]
 8007ba2:	2d09      	cmp	r5, #9
 8007ba4:	f04f 0301 	mov.w	r3, #1
 8007ba8:	6103      	str	r3, [r0, #16]
 8007baa:	dd16      	ble.n	8007bda <__s2b+0x72>
 8007bac:	f104 0909 	add.w	r9, r4, #9
 8007bb0:	46c8      	mov	r8, r9
 8007bb2:	442c      	add	r4, r5
 8007bb4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007bb8:	4601      	mov	r1, r0
 8007bba:	3b30      	subs	r3, #48	@ 0x30
 8007bbc:	220a      	movs	r2, #10
 8007bbe:	4630      	mov	r0, r6
 8007bc0:	f7ff ff8c 	bl	8007adc <__multadd>
 8007bc4:	45a0      	cmp	r8, r4
 8007bc6:	d1f5      	bne.n	8007bb4 <__s2b+0x4c>
 8007bc8:	f1a5 0408 	sub.w	r4, r5, #8
 8007bcc:	444c      	add	r4, r9
 8007bce:	1b2d      	subs	r5, r5, r4
 8007bd0:	1963      	adds	r3, r4, r5
 8007bd2:	42bb      	cmp	r3, r7
 8007bd4:	db04      	blt.n	8007be0 <__s2b+0x78>
 8007bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bda:	340a      	adds	r4, #10
 8007bdc:	2509      	movs	r5, #9
 8007bde:	e7f6      	b.n	8007bce <__s2b+0x66>
 8007be0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007be4:	4601      	mov	r1, r0
 8007be6:	3b30      	subs	r3, #48	@ 0x30
 8007be8:	220a      	movs	r2, #10
 8007bea:	4630      	mov	r0, r6
 8007bec:	f7ff ff76 	bl	8007adc <__multadd>
 8007bf0:	e7ee      	b.n	8007bd0 <__s2b+0x68>
 8007bf2:	bf00      	nop
 8007bf4:	0800a5bd 	.word	0x0800a5bd
 8007bf8:	0800a5ce 	.word	0x0800a5ce

08007bfc <__hi0bits>:
 8007bfc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007c00:	4603      	mov	r3, r0
 8007c02:	bf36      	itet	cc
 8007c04:	0403      	lslcc	r3, r0, #16
 8007c06:	2000      	movcs	r0, #0
 8007c08:	2010      	movcc	r0, #16
 8007c0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c0e:	bf3c      	itt	cc
 8007c10:	021b      	lslcc	r3, r3, #8
 8007c12:	3008      	addcc	r0, #8
 8007c14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c18:	bf3c      	itt	cc
 8007c1a:	011b      	lslcc	r3, r3, #4
 8007c1c:	3004      	addcc	r0, #4
 8007c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c22:	bf3c      	itt	cc
 8007c24:	009b      	lslcc	r3, r3, #2
 8007c26:	3002      	addcc	r0, #2
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	db05      	blt.n	8007c38 <__hi0bits+0x3c>
 8007c2c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007c30:	f100 0001 	add.w	r0, r0, #1
 8007c34:	bf08      	it	eq
 8007c36:	2020      	moveq	r0, #32
 8007c38:	4770      	bx	lr

08007c3a <__lo0bits>:
 8007c3a:	6803      	ldr	r3, [r0, #0]
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	f013 0007 	ands.w	r0, r3, #7
 8007c42:	d00b      	beq.n	8007c5c <__lo0bits+0x22>
 8007c44:	07d9      	lsls	r1, r3, #31
 8007c46:	d421      	bmi.n	8007c8c <__lo0bits+0x52>
 8007c48:	0798      	lsls	r0, r3, #30
 8007c4a:	bf49      	itett	mi
 8007c4c:	085b      	lsrmi	r3, r3, #1
 8007c4e:	089b      	lsrpl	r3, r3, #2
 8007c50:	2001      	movmi	r0, #1
 8007c52:	6013      	strmi	r3, [r2, #0]
 8007c54:	bf5c      	itt	pl
 8007c56:	6013      	strpl	r3, [r2, #0]
 8007c58:	2002      	movpl	r0, #2
 8007c5a:	4770      	bx	lr
 8007c5c:	b299      	uxth	r1, r3
 8007c5e:	b909      	cbnz	r1, 8007c64 <__lo0bits+0x2a>
 8007c60:	0c1b      	lsrs	r3, r3, #16
 8007c62:	2010      	movs	r0, #16
 8007c64:	b2d9      	uxtb	r1, r3
 8007c66:	b909      	cbnz	r1, 8007c6c <__lo0bits+0x32>
 8007c68:	3008      	adds	r0, #8
 8007c6a:	0a1b      	lsrs	r3, r3, #8
 8007c6c:	0719      	lsls	r1, r3, #28
 8007c6e:	bf04      	itt	eq
 8007c70:	091b      	lsreq	r3, r3, #4
 8007c72:	3004      	addeq	r0, #4
 8007c74:	0799      	lsls	r1, r3, #30
 8007c76:	bf04      	itt	eq
 8007c78:	089b      	lsreq	r3, r3, #2
 8007c7a:	3002      	addeq	r0, #2
 8007c7c:	07d9      	lsls	r1, r3, #31
 8007c7e:	d403      	bmi.n	8007c88 <__lo0bits+0x4e>
 8007c80:	085b      	lsrs	r3, r3, #1
 8007c82:	f100 0001 	add.w	r0, r0, #1
 8007c86:	d003      	beq.n	8007c90 <__lo0bits+0x56>
 8007c88:	6013      	str	r3, [r2, #0]
 8007c8a:	4770      	bx	lr
 8007c8c:	2000      	movs	r0, #0
 8007c8e:	4770      	bx	lr
 8007c90:	2020      	movs	r0, #32
 8007c92:	4770      	bx	lr

08007c94 <__i2b>:
 8007c94:	b510      	push	{r4, lr}
 8007c96:	460c      	mov	r4, r1
 8007c98:	2101      	movs	r1, #1
 8007c9a:	f7ff febd 	bl	8007a18 <_Balloc>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	b928      	cbnz	r0, 8007cae <__i2b+0x1a>
 8007ca2:	4b05      	ldr	r3, [pc, #20]	@ (8007cb8 <__i2b+0x24>)
 8007ca4:	4805      	ldr	r0, [pc, #20]	@ (8007cbc <__i2b+0x28>)
 8007ca6:	f240 1145 	movw	r1, #325	@ 0x145
 8007caa:	f001 fc41 	bl	8009530 <__assert_func>
 8007cae:	2301      	movs	r3, #1
 8007cb0:	6144      	str	r4, [r0, #20]
 8007cb2:	6103      	str	r3, [r0, #16]
 8007cb4:	bd10      	pop	{r4, pc}
 8007cb6:	bf00      	nop
 8007cb8:	0800a5bd 	.word	0x0800a5bd
 8007cbc:	0800a5ce 	.word	0x0800a5ce

08007cc0 <__multiply>:
 8007cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc4:	4614      	mov	r4, r2
 8007cc6:	690a      	ldr	r2, [r1, #16]
 8007cc8:	6923      	ldr	r3, [r4, #16]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	bfa8      	it	ge
 8007cce:	4623      	movge	r3, r4
 8007cd0:	460f      	mov	r7, r1
 8007cd2:	bfa4      	itt	ge
 8007cd4:	460c      	movge	r4, r1
 8007cd6:	461f      	movge	r7, r3
 8007cd8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007cdc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007ce0:	68a3      	ldr	r3, [r4, #8]
 8007ce2:	6861      	ldr	r1, [r4, #4]
 8007ce4:	eb0a 0609 	add.w	r6, sl, r9
 8007ce8:	42b3      	cmp	r3, r6
 8007cea:	b085      	sub	sp, #20
 8007cec:	bfb8      	it	lt
 8007cee:	3101      	addlt	r1, #1
 8007cf0:	f7ff fe92 	bl	8007a18 <_Balloc>
 8007cf4:	b930      	cbnz	r0, 8007d04 <__multiply+0x44>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	4b44      	ldr	r3, [pc, #272]	@ (8007e0c <__multiply+0x14c>)
 8007cfa:	4845      	ldr	r0, [pc, #276]	@ (8007e10 <__multiply+0x150>)
 8007cfc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007d00:	f001 fc16 	bl	8009530 <__assert_func>
 8007d04:	f100 0514 	add.w	r5, r0, #20
 8007d08:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007d0c:	462b      	mov	r3, r5
 8007d0e:	2200      	movs	r2, #0
 8007d10:	4543      	cmp	r3, r8
 8007d12:	d321      	bcc.n	8007d58 <__multiply+0x98>
 8007d14:	f107 0114 	add.w	r1, r7, #20
 8007d18:	f104 0214 	add.w	r2, r4, #20
 8007d1c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007d20:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007d24:	9302      	str	r3, [sp, #8]
 8007d26:	1b13      	subs	r3, r2, r4
 8007d28:	3b15      	subs	r3, #21
 8007d2a:	f023 0303 	bic.w	r3, r3, #3
 8007d2e:	3304      	adds	r3, #4
 8007d30:	f104 0715 	add.w	r7, r4, #21
 8007d34:	42ba      	cmp	r2, r7
 8007d36:	bf38      	it	cc
 8007d38:	2304      	movcc	r3, #4
 8007d3a:	9301      	str	r3, [sp, #4]
 8007d3c:	9b02      	ldr	r3, [sp, #8]
 8007d3e:	9103      	str	r1, [sp, #12]
 8007d40:	428b      	cmp	r3, r1
 8007d42:	d80c      	bhi.n	8007d5e <__multiply+0x9e>
 8007d44:	2e00      	cmp	r6, #0
 8007d46:	dd03      	ble.n	8007d50 <__multiply+0x90>
 8007d48:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d05b      	beq.n	8007e08 <__multiply+0x148>
 8007d50:	6106      	str	r6, [r0, #16]
 8007d52:	b005      	add	sp, #20
 8007d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d58:	f843 2b04 	str.w	r2, [r3], #4
 8007d5c:	e7d8      	b.n	8007d10 <__multiply+0x50>
 8007d5e:	f8b1 a000 	ldrh.w	sl, [r1]
 8007d62:	f1ba 0f00 	cmp.w	sl, #0
 8007d66:	d024      	beq.n	8007db2 <__multiply+0xf2>
 8007d68:	f104 0e14 	add.w	lr, r4, #20
 8007d6c:	46a9      	mov	r9, r5
 8007d6e:	f04f 0c00 	mov.w	ip, #0
 8007d72:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007d76:	f8d9 3000 	ldr.w	r3, [r9]
 8007d7a:	fa1f fb87 	uxth.w	fp, r7
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	fb0a 330b 	mla	r3, sl, fp, r3
 8007d84:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007d88:	f8d9 7000 	ldr.w	r7, [r9]
 8007d8c:	4463      	add	r3, ip
 8007d8e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007d92:	fb0a c70b 	mla	r7, sl, fp, ip
 8007d96:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007da0:	4572      	cmp	r2, lr
 8007da2:	f849 3b04 	str.w	r3, [r9], #4
 8007da6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007daa:	d8e2      	bhi.n	8007d72 <__multiply+0xb2>
 8007dac:	9b01      	ldr	r3, [sp, #4]
 8007dae:	f845 c003 	str.w	ip, [r5, r3]
 8007db2:	9b03      	ldr	r3, [sp, #12]
 8007db4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007db8:	3104      	adds	r1, #4
 8007dba:	f1b9 0f00 	cmp.w	r9, #0
 8007dbe:	d021      	beq.n	8007e04 <__multiply+0x144>
 8007dc0:	682b      	ldr	r3, [r5, #0]
 8007dc2:	f104 0c14 	add.w	ip, r4, #20
 8007dc6:	46ae      	mov	lr, r5
 8007dc8:	f04f 0a00 	mov.w	sl, #0
 8007dcc:	f8bc b000 	ldrh.w	fp, [ip]
 8007dd0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007dd4:	fb09 770b 	mla	r7, r9, fp, r7
 8007dd8:	4457      	add	r7, sl
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007de0:	f84e 3b04 	str.w	r3, [lr], #4
 8007de4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007de8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007dec:	f8be 3000 	ldrh.w	r3, [lr]
 8007df0:	fb09 330a 	mla	r3, r9, sl, r3
 8007df4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007df8:	4562      	cmp	r2, ip
 8007dfa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007dfe:	d8e5      	bhi.n	8007dcc <__multiply+0x10c>
 8007e00:	9f01      	ldr	r7, [sp, #4]
 8007e02:	51eb      	str	r3, [r5, r7]
 8007e04:	3504      	adds	r5, #4
 8007e06:	e799      	b.n	8007d3c <__multiply+0x7c>
 8007e08:	3e01      	subs	r6, #1
 8007e0a:	e79b      	b.n	8007d44 <__multiply+0x84>
 8007e0c:	0800a5bd 	.word	0x0800a5bd
 8007e10:	0800a5ce 	.word	0x0800a5ce

08007e14 <__pow5mult>:
 8007e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e18:	4615      	mov	r5, r2
 8007e1a:	f012 0203 	ands.w	r2, r2, #3
 8007e1e:	4607      	mov	r7, r0
 8007e20:	460e      	mov	r6, r1
 8007e22:	d007      	beq.n	8007e34 <__pow5mult+0x20>
 8007e24:	4c25      	ldr	r4, [pc, #148]	@ (8007ebc <__pow5mult+0xa8>)
 8007e26:	3a01      	subs	r2, #1
 8007e28:	2300      	movs	r3, #0
 8007e2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e2e:	f7ff fe55 	bl	8007adc <__multadd>
 8007e32:	4606      	mov	r6, r0
 8007e34:	10ad      	asrs	r5, r5, #2
 8007e36:	d03d      	beq.n	8007eb4 <__pow5mult+0xa0>
 8007e38:	69fc      	ldr	r4, [r7, #28]
 8007e3a:	b97c      	cbnz	r4, 8007e5c <__pow5mult+0x48>
 8007e3c:	2010      	movs	r0, #16
 8007e3e:	f7ff fd35 	bl	80078ac <malloc>
 8007e42:	4602      	mov	r2, r0
 8007e44:	61f8      	str	r0, [r7, #28]
 8007e46:	b928      	cbnz	r0, 8007e54 <__pow5mult+0x40>
 8007e48:	4b1d      	ldr	r3, [pc, #116]	@ (8007ec0 <__pow5mult+0xac>)
 8007e4a:	481e      	ldr	r0, [pc, #120]	@ (8007ec4 <__pow5mult+0xb0>)
 8007e4c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007e50:	f001 fb6e 	bl	8009530 <__assert_func>
 8007e54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e58:	6004      	str	r4, [r0, #0]
 8007e5a:	60c4      	str	r4, [r0, #12]
 8007e5c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007e60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e64:	b94c      	cbnz	r4, 8007e7a <__pow5mult+0x66>
 8007e66:	f240 2171 	movw	r1, #625	@ 0x271
 8007e6a:	4638      	mov	r0, r7
 8007e6c:	f7ff ff12 	bl	8007c94 <__i2b>
 8007e70:	2300      	movs	r3, #0
 8007e72:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e76:	4604      	mov	r4, r0
 8007e78:	6003      	str	r3, [r0, #0]
 8007e7a:	f04f 0900 	mov.w	r9, #0
 8007e7e:	07eb      	lsls	r3, r5, #31
 8007e80:	d50a      	bpl.n	8007e98 <__pow5mult+0x84>
 8007e82:	4631      	mov	r1, r6
 8007e84:	4622      	mov	r2, r4
 8007e86:	4638      	mov	r0, r7
 8007e88:	f7ff ff1a 	bl	8007cc0 <__multiply>
 8007e8c:	4631      	mov	r1, r6
 8007e8e:	4680      	mov	r8, r0
 8007e90:	4638      	mov	r0, r7
 8007e92:	f7ff fe01 	bl	8007a98 <_Bfree>
 8007e96:	4646      	mov	r6, r8
 8007e98:	106d      	asrs	r5, r5, #1
 8007e9a:	d00b      	beq.n	8007eb4 <__pow5mult+0xa0>
 8007e9c:	6820      	ldr	r0, [r4, #0]
 8007e9e:	b938      	cbnz	r0, 8007eb0 <__pow5mult+0x9c>
 8007ea0:	4622      	mov	r2, r4
 8007ea2:	4621      	mov	r1, r4
 8007ea4:	4638      	mov	r0, r7
 8007ea6:	f7ff ff0b 	bl	8007cc0 <__multiply>
 8007eaa:	6020      	str	r0, [r4, #0]
 8007eac:	f8c0 9000 	str.w	r9, [r0]
 8007eb0:	4604      	mov	r4, r0
 8007eb2:	e7e4      	b.n	8007e7e <__pow5mult+0x6a>
 8007eb4:	4630      	mov	r0, r6
 8007eb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eba:	bf00      	nop
 8007ebc:	0800a628 	.word	0x0800a628
 8007ec0:	0800a54e 	.word	0x0800a54e
 8007ec4:	0800a5ce 	.word	0x0800a5ce

08007ec8 <__lshift>:
 8007ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ecc:	460c      	mov	r4, r1
 8007ece:	6849      	ldr	r1, [r1, #4]
 8007ed0:	6923      	ldr	r3, [r4, #16]
 8007ed2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007ed6:	68a3      	ldr	r3, [r4, #8]
 8007ed8:	4607      	mov	r7, r0
 8007eda:	4691      	mov	r9, r2
 8007edc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ee0:	f108 0601 	add.w	r6, r8, #1
 8007ee4:	42b3      	cmp	r3, r6
 8007ee6:	db0b      	blt.n	8007f00 <__lshift+0x38>
 8007ee8:	4638      	mov	r0, r7
 8007eea:	f7ff fd95 	bl	8007a18 <_Balloc>
 8007eee:	4605      	mov	r5, r0
 8007ef0:	b948      	cbnz	r0, 8007f06 <__lshift+0x3e>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	4b28      	ldr	r3, [pc, #160]	@ (8007f98 <__lshift+0xd0>)
 8007ef6:	4829      	ldr	r0, [pc, #164]	@ (8007f9c <__lshift+0xd4>)
 8007ef8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007efc:	f001 fb18 	bl	8009530 <__assert_func>
 8007f00:	3101      	adds	r1, #1
 8007f02:	005b      	lsls	r3, r3, #1
 8007f04:	e7ee      	b.n	8007ee4 <__lshift+0x1c>
 8007f06:	2300      	movs	r3, #0
 8007f08:	f100 0114 	add.w	r1, r0, #20
 8007f0c:	f100 0210 	add.w	r2, r0, #16
 8007f10:	4618      	mov	r0, r3
 8007f12:	4553      	cmp	r3, sl
 8007f14:	db33      	blt.n	8007f7e <__lshift+0xb6>
 8007f16:	6920      	ldr	r0, [r4, #16]
 8007f18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f1c:	f104 0314 	add.w	r3, r4, #20
 8007f20:	f019 091f 	ands.w	r9, r9, #31
 8007f24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f28:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007f2c:	d02b      	beq.n	8007f86 <__lshift+0xbe>
 8007f2e:	f1c9 0e20 	rsb	lr, r9, #32
 8007f32:	468a      	mov	sl, r1
 8007f34:	2200      	movs	r2, #0
 8007f36:	6818      	ldr	r0, [r3, #0]
 8007f38:	fa00 f009 	lsl.w	r0, r0, r9
 8007f3c:	4310      	orrs	r0, r2
 8007f3e:	f84a 0b04 	str.w	r0, [sl], #4
 8007f42:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f46:	459c      	cmp	ip, r3
 8007f48:	fa22 f20e 	lsr.w	r2, r2, lr
 8007f4c:	d8f3      	bhi.n	8007f36 <__lshift+0x6e>
 8007f4e:	ebac 0304 	sub.w	r3, ip, r4
 8007f52:	3b15      	subs	r3, #21
 8007f54:	f023 0303 	bic.w	r3, r3, #3
 8007f58:	3304      	adds	r3, #4
 8007f5a:	f104 0015 	add.w	r0, r4, #21
 8007f5e:	4584      	cmp	ip, r0
 8007f60:	bf38      	it	cc
 8007f62:	2304      	movcc	r3, #4
 8007f64:	50ca      	str	r2, [r1, r3]
 8007f66:	b10a      	cbz	r2, 8007f6c <__lshift+0xa4>
 8007f68:	f108 0602 	add.w	r6, r8, #2
 8007f6c:	3e01      	subs	r6, #1
 8007f6e:	4638      	mov	r0, r7
 8007f70:	612e      	str	r6, [r5, #16]
 8007f72:	4621      	mov	r1, r4
 8007f74:	f7ff fd90 	bl	8007a98 <_Bfree>
 8007f78:	4628      	mov	r0, r5
 8007f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f7e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007f82:	3301      	adds	r3, #1
 8007f84:	e7c5      	b.n	8007f12 <__lshift+0x4a>
 8007f86:	3904      	subs	r1, #4
 8007f88:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f8c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f90:	459c      	cmp	ip, r3
 8007f92:	d8f9      	bhi.n	8007f88 <__lshift+0xc0>
 8007f94:	e7ea      	b.n	8007f6c <__lshift+0xa4>
 8007f96:	bf00      	nop
 8007f98:	0800a5bd 	.word	0x0800a5bd
 8007f9c:	0800a5ce 	.word	0x0800a5ce

08007fa0 <__mcmp>:
 8007fa0:	690a      	ldr	r2, [r1, #16]
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	6900      	ldr	r0, [r0, #16]
 8007fa6:	1a80      	subs	r0, r0, r2
 8007fa8:	b530      	push	{r4, r5, lr}
 8007faa:	d10e      	bne.n	8007fca <__mcmp+0x2a>
 8007fac:	3314      	adds	r3, #20
 8007fae:	3114      	adds	r1, #20
 8007fb0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007fb4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007fb8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007fbc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007fc0:	4295      	cmp	r5, r2
 8007fc2:	d003      	beq.n	8007fcc <__mcmp+0x2c>
 8007fc4:	d205      	bcs.n	8007fd2 <__mcmp+0x32>
 8007fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8007fca:	bd30      	pop	{r4, r5, pc}
 8007fcc:	42a3      	cmp	r3, r4
 8007fce:	d3f3      	bcc.n	8007fb8 <__mcmp+0x18>
 8007fd0:	e7fb      	b.n	8007fca <__mcmp+0x2a>
 8007fd2:	2001      	movs	r0, #1
 8007fd4:	e7f9      	b.n	8007fca <__mcmp+0x2a>
	...

08007fd8 <__mdiff>:
 8007fd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fdc:	4689      	mov	r9, r1
 8007fde:	4606      	mov	r6, r0
 8007fe0:	4611      	mov	r1, r2
 8007fe2:	4648      	mov	r0, r9
 8007fe4:	4614      	mov	r4, r2
 8007fe6:	f7ff ffdb 	bl	8007fa0 <__mcmp>
 8007fea:	1e05      	subs	r5, r0, #0
 8007fec:	d112      	bne.n	8008014 <__mdiff+0x3c>
 8007fee:	4629      	mov	r1, r5
 8007ff0:	4630      	mov	r0, r6
 8007ff2:	f7ff fd11 	bl	8007a18 <_Balloc>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	b928      	cbnz	r0, 8008006 <__mdiff+0x2e>
 8007ffa:	4b3f      	ldr	r3, [pc, #252]	@ (80080f8 <__mdiff+0x120>)
 8007ffc:	f240 2137 	movw	r1, #567	@ 0x237
 8008000:	483e      	ldr	r0, [pc, #248]	@ (80080fc <__mdiff+0x124>)
 8008002:	f001 fa95 	bl	8009530 <__assert_func>
 8008006:	2301      	movs	r3, #1
 8008008:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800800c:	4610      	mov	r0, r2
 800800e:	b003      	add	sp, #12
 8008010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008014:	bfbc      	itt	lt
 8008016:	464b      	movlt	r3, r9
 8008018:	46a1      	movlt	r9, r4
 800801a:	4630      	mov	r0, r6
 800801c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008020:	bfba      	itte	lt
 8008022:	461c      	movlt	r4, r3
 8008024:	2501      	movlt	r5, #1
 8008026:	2500      	movge	r5, #0
 8008028:	f7ff fcf6 	bl	8007a18 <_Balloc>
 800802c:	4602      	mov	r2, r0
 800802e:	b918      	cbnz	r0, 8008038 <__mdiff+0x60>
 8008030:	4b31      	ldr	r3, [pc, #196]	@ (80080f8 <__mdiff+0x120>)
 8008032:	f240 2145 	movw	r1, #581	@ 0x245
 8008036:	e7e3      	b.n	8008000 <__mdiff+0x28>
 8008038:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800803c:	6926      	ldr	r6, [r4, #16]
 800803e:	60c5      	str	r5, [r0, #12]
 8008040:	f109 0310 	add.w	r3, r9, #16
 8008044:	f109 0514 	add.w	r5, r9, #20
 8008048:	f104 0e14 	add.w	lr, r4, #20
 800804c:	f100 0b14 	add.w	fp, r0, #20
 8008050:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008054:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008058:	9301      	str	r3, [sp, #4]
 800805a:	46d9      	mov	r9, fp
 800805c:	f04f 0c00 	mov.w	ip, #0
 8008060:	9b01      	ldr	r3, [sp, #4]
 8008062:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008066:	f853 af04 	ldr.w	sl, [r3, #4]!
 800806a:	9301      	str	r3, [sp, #4]
 800806c:	fa1f f38a 	uxth.w	r3, sl
 8008070:	4619      	mov	r1, r3
 8008072:	b283      	uxth	r3, r0
 8008074:	1acb      	subs	r3, r1, r3
 8008076:	0c00      	lsrs	r0, r0, #16
 8008078:	4463      	add	r3, ip
 800807a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800807e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008082:	b29b      	uxth	r3, r3
 8008084:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008088:	4576      	cmp	r6, lr
 800808a:	f849 3b04 	str.w	r3, [r9], #4
 800808e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008092:	d8e5      	bhi.n	8008060 <__mdiff+0x88>
 8008094:	1b33      	subs	r3, r6, r4
 8008096:	3b15      	subs	r3, #21
 8008098:	f023 0303 	bic.w	r3, r3, #3
 800809c:	3415      	adds	r4, #21
 800809e:	3304      	adds	r3, #4
 80080a0:	42a6      	cmp	r6, r4
 80080a2:	bf38      	it	cc
 80080a4:	2304      	movcc	r3, #4
 80080a6:	441d      	add	r5, r3
 80080a8:	445b      	add	r3, fp
 80080aa:	461e      	mov	r6, r3
 80080ac:	462c      	mov	r4, r5
 80080ae:	4544      	cmp	r4, r8
 80080b0:	d30e      	bcc.n	80080d0 <__mdiff+0xf8>
 80080b2:	f108 0103 	add.w	r1, r8, #3
 80080b6:	1b49      	subs	r1, r1, r5
 80080b8:	f021 0103 	bic.w	r1, r1, #3
 80080bc:	3d03      	subs	r5, #3
 80080be:	45a8      	cmp	r8, r5
 80080c0:	bf38      	it	cc
 80080c2:	2100      	movcc	r1, #0
 80080c4:	440b      	add	r3, r1
 80080c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80080ca:	b191      	cbz	r1, 80080f2 <__mdiff+0x11a>
 80080cc:	6117      	str	r7, [r2, #16]
 80080ce:	e79d      	b.n	800800c <__mdiff+0x34>
 80080d0:	f854 1b04 	ldr.w	r1, [r4], #4
 80080d4:	46e6      	mov	lr, ip
 80080d6:	0c08      	lsrs	r0, r1, #16
 80080d8:	fa1c fc81 	uxtah	ip, ip, r1
 80080dc:	4471      	add	r1, lr
 80080de:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80080e2:	b289      	uxth	r1, r1
 80080e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80080e8:	f846 1b04 	str.w	r1, [r6], #4
 80080ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80080f0:	e7dd      	b.n	80080ae <__mdiff+0xd6>
 80080f2:	3f01      	subs	r7, #1
 80080f4:	e7e7      	b.n	80080c6 <__mdiff+0xee>
 80080f6:	bf00      	nop
 80080f8:	0800a5bd 	.word	0x0800a5bd
 80080fc:	0800a5ce 	.word	0x0800a5ce

08008100 <__ulp>:
 8008100:	b082      	sub	sp, #8
 8008102:	ed8d 0b00 	vstr	d0, [sp]
 8008106:	9a01      	ldr	r2, [sp, #4]
 8008108:	4b0f      	ldr	r3, [pc, #60]	@ (8008148 <__ulp+0x48>)
 800810a:	4013      	ands	r3, r2
 800810c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008110:	2b00      	cmp	r3, #0
 8008112:	dc08      	bgt.n	8008126 <__ulp+0x26>
 8008114:	425b      	negs	r3, r3
 8008116:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800811a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800811e:	da04      	bge.n	800812a <__ulp+0x2a>
 8008120:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008124:	4113      	asrs	r3, r2
 8008126:	2200      	movs	r2, #0
 8008128:	e008      	b.n	800813c <__ulp+0x3c>
 800812a:	f1a2 0314 	sub.w	r3, r2, #20
 800812e:	2b1e      	cmp	r3, #30
 8008130:	bfda      	itte	le
 8008132:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008136:	40da      	lsrle	r2, r3
 8008138:	2201      	movgt	r2, #1
 800813a:	2300      	movs	r3, #0
 800813c:	4619      	mov	r1, r3
 800813e:	4610      	mov	r0, r2
 8008140:	ec41 0b10 	vmov	d0, r0, r1
 8008144:	b002      	add	sp, #8
 8008146:	4770      	bx	lr
 8008148:	7ff00000 	.word	0x7ff00000

0800814c <__b2d>:
 800814c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008150:	6906      	ldr	r6, [r0, #16]
 8008152:	f100 0814 	add.w	r8, r0, #20
 8008156:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800815a:	1f37      	subs	r7, r6, #4
 800815c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008160:	4610      	mov	r0, r2
 8008162:	f7ff fd4b 	bl	8007bfc <__hi0bits>
 8008166:	f1c0 0320 	rsb	r3, r0, #32
 800816a:	280a      	cmp	r0, #10
 800816c:	600b      	str	r3, [r1, #0]
 800816e:	491b      	ldr	r1, [pc, #108]	@ (80081dc <__b2d+0x90>)
 8008170:	dc15      	bgt.n	800819e <__b2d+0x52>
 8008172:	f1c0 0c0b 	rsb	ip, r0, #11
 8008176:	fa22 f30c 	lsr.w	r3, r2, ip
 800817a:	45b8      	cmp	r8, r7
 800817c:	ea43 0501 	orr.w	r5, r3, r1
 8008180:	bf34      	ite	cc
 8008182:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008186:	2300      	movcs	r3, #0
 8008188:	3015      	adds	r0, #21
 800818a:	fa02 f000 	lsl.w	r0, r2, r0
 800818e:	fa23 f30c 	lsr.w	r3, r3, ip
 8008192:	4303      	orrs	r3, r0
 8008194:	461c      	mov	r4, r3
 8008196:	ec45 4b10 	vmov	d0, r4, r5
 800819a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800819e:	45b8      	cmp	r8, r7
 80081a0:	bf3a      	itte	cc
 80081a2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80081a6:	f1a6 0708 	subcc.w	r7, r6, #8
 80081aa:	2300      	movcs	r3, #0
 80081ac:	380b      	subs	r0, #11
 80081ae:	d012      	beq.n	80081d6 <__b2d+0x8a>
 80081b0:	f1c0 0120 	rsb	r1, r0, #32
 80081b4:	fa23 f401 	lsr.w	r4, r3, r1
 80081b8:	4082      	lsls	r2, r0
 80081ba:	4322      	orrs	r2, r4
 80081bc:	4547      	cmp	r7, r8
 80081be:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80081c2:	bf8c      	ite	hi
 80081c4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80081c8:	2200      	movls	r2, #0
 80081ca:	4083      	lsls	r3, r0
 80081cc:	40ca      	lsrs	r2, r1
 80081ce:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80081d2:	4313      	orrs	r3, r2
 80081d4:	e7de      	b.n	8008194 <__b2d+0x48>
 80081d6:	ea42 0501 	orr.w	r5, r2, r1
 80081da:	e7db      	b.n	8008194 <__b2d+0x48>
 80081dc:	3ff00000 	.word	0x3ff00000

080081e0 <__d2b>:
 80081e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80081e4:	460f      	mov	r7, r1
 80081e6:	2101      	movs	r1, #1
 80081e8:	ec59 8b10 	vmov	r8, r9, d0
 80081ec:	4616      	mov	r6, r2
 80081ee:	f7ff fc13 	bl	8007a18 <_Balloc>
 80081f2:	4604      	mov	r4, r0
 80081f4:	b930      	cbnz	r0, 8008204 <__d2b+0x24>
 80081f6:	4602      	mov	r2, r0
 80081f8:	4b23      	ldr	r3, [pc, #140]	@ (8008288 <__d2b+0xa8>)
 80081fa:	4824      	ldr	r0, [pc, #144]	@ (800828c <__d2b+0xac>)
 80081fc:	f240 310f 	movw	r1, #783	@ 0x30f
 8008200:	f001 f996 	bl	8009530 <__assert_func>
 8008204:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008208:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800820c:	b10d      	cbz	r5, 8008212 <__d2b+0x32>
 800820e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008212:	9301      	str	r3, [sp, #4]
 8008214:	f1b8 0300 	subs.w	r3, r8, #0
 8008218:	d023      	beq.n	8008262 <__d2b+0x82>
 800821a:	4668      	mov	r0, sp
 800821c:	9300      	str	r3, [sp, #0]
 800821e:	f7ff fd0c 	bl	8007c3a <__lo0bits>
 8008222:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008226:	b1d0      	cbz	r0, 800825e <__d2b+0x7e>
 8008228:	f1c0 0320 	rsb	r3, r0, #32
 800822c:	fa02 f303 	lsl.w	r3, r2, r3
 8008230:	430b      	orrs	r3, r1
 8008232:	40c2      	lsrs	r2, r0
 8008234:	6163      	str	r3, [r4, #20]
 8008236:	9201      	str	r2, [sp, #4]
 8008238:	9b01      	ldr	r3, [sp, #4]
 800823a:	61a3      	str	r3, [r4, #24]
 800823c:	2b00      	cmp	r3, #0
 800823e:	bf0c      	ite	eq
 8008240:	2201      	moveq	r2, #1
 8008242:	2202      	movne	r2, #2
 8008244:	6122      	str	r2, [r4, #16]
 8008246:	b1a5      	cbz	r5, 8008272 <__d2b+0x92>
 8008248:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800824c:	4405      	add	r5, r0
 800824e:	603d      	str	r5, [r7, #0]
 8008250:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008254:	6030      	str	r0, [r6, #0]
 8008256:	4620      	mov	r0, r4
 8008258:	b003      	add	sp, #12
 800825a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800825e:	6161      	str	r1, [r4, #20]
 8008260:	e7ea      	b.n	8008238 <__d2b+0x58>
 8008262:	a801      	add	r0, sp, #4
 8008264:	f7ff fce9 	bl	8007c3a <__lo0bits>
 8008268:	9b01      	ldr	r3, [sp, #4]
 800826a:	6163      	str	r3, [r4, #20]
 800826c:	3020      	adds	r0, #32
 800826e:	2201      	movs	r2, #1
 8008270:	e7e8      	b.n	8008244 <__d2b+0x64>
 8008272:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008276:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800827a:	6038      	str	r0, [r7, #0]
 800827c:	6918      	ldr	r0, [r3, #16]
 800827e:	f7ff fcbd 	bl	8007bfc <__hi0bits>
 8008282:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008286:	e7e5      	b.n	8008254 <__d2b+0x74>
 8008288:	0800a5bd 	.word	0x0800a5bd
 800828c:	0800a5ce 	.word	0x0800a5ce

08008290 <__ratio>:
 8008290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008294:	b085      	sub	sp, #20
 8008296:	e9cd 1000 	strd	r1, r0, [sp]
 800829a:	a902      	add	r1, sp, #8
 800829c:	f7ff ff56 	bl	800814c <__b2d>
 80082a0:	9800      	ldr	r0, [sp, #0]
 80082a2:	a903      	add	r1, sp, #12
 80082a4:	ec55 4b10 	vmov	r4, r5, d0
 80082a8:	f7ff ff50 	bl	800814c <__b2d>
 80082ac:	9b01      	ldr	r3, [sp, #4]
 80082ae:	6919      	ldr	r1, [r3, #16]
 80082b0:	9b00      	ldr	r3, [sp, #0]
 80082b2:	691b      	ldr	r3, [r3, #16]
 80082b4:	1ac9      	subs	r1, r1, r3
 80082b6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80082ba:	1a9b      	subs	r3, r3, r2
 80082bc:	ec5b ab10 	vmov	sl, fp, d0
 80082c0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	bfce      	itee	gt
 80082c8:	462a      	movgt	r2, r5
 80082ca:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80082ce:	465a      	movle	r2, fp
 80082d0:	462f      	mov	r7, r5
 80082d2:	46d9      	mov	r9, fp
 80082d4:	bfcc      	ite	gt
 80082d6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80082da:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80082de:	464b      	mov	r3, r9
 80082e0:	4652      	mov	r2, sl
 80082e2:	4620      	mov	r0, r4
 80082e4:	4639      	mov	r1, r7
 80082e6:	f7f8 fab1 	bl	800084c <__aeabi_ddiv>
 80082ea:	ec41 0b10 	vmov	d0, r0, r1
 80082ee:	b005      	add	sp, #20
 80082f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080082f4 <__copybits>:
 80082f4:	3901      	subs	r1, #1
 80082f6:	b570      	push	{r4, r5, r6, lr}
 80082f8:	1149      	asrs	r1, r1, #5
 80082fa:	6914      	ldr	r4, [r2, #16]
 80082fc:	3101      	adds	r1, #1
 80082fe:	f102 0314 	add.w	r3, r2, #20
 8008302:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008306:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800830a:	1f05      	subs	r5, r0, #4
 800830c:	42a3      	cmp	r3, r4
 800830e:	d30c      	bcc.n	800832a <__copybits+0x36>
 8008310:	1aa3      	subs	r3, r4, r2
 8008312:	3b11      	subs	r3, #17
 8008314:	f023 0303 	bic.w	r3, r3, #3
 8008318:	3211      	adds	r2, #17
 800831a:	42a2      	cmp	r2, r4
 800831c:	bf88      	it	hi
 800831e:	2300      	movhi	r3, #0
 8008320:	4418      	add	r0, r3
 8008322:	2300      	movs	r3, #0
 8008324:	4288      	cmp	r0, r1
 8008326:	d305      	bcc.n	8008334 <__copybits+0x40>
 8008328:	bd70      	pop	{r4, r5, r6, pc}
 800832a:	f853 6b04 	ldr.w	r6, [r3], #4
 800832e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008332:	e7eb      	b.n	800830c <__copybits+0x18>
 8008334:	f840 3b04 	str.w	r3, [r0], #4
 8008338:	e7f4      	b.n	8008324 <__copybits+0x30>

0800833a <__any_on>:
 800833a:	f100 0214 	add.w	r2, r0, #20
 800833e:	6900      	ldr	r0, [r0, #16]
 8008340:	114b      	asrs	r3, r1, #5
 8008342:	4298      	cmp	r0, r3
 8008344:	b510      	push	{r4, lr}
 8008346:	db11      	blt.n	800836c <__any_on+0x32>
 8008348:	dd0a      	ble.n	8008360 <__any_on+0x26>
 800834a:	f011 011f 	ands.w	r1, r1, #31
 800834e:	d007      	beq.n	8008360 <__any_on+0x26>
 8008350:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008354:	fa24 f001 	lsr.w	r0, r4, r1
 8008358:	fa00 f101 	lsl.w	r1, r0, r1
 800835c:	428c      	cmp	r4, r1
 800835e:	d10b      	bne.n	8008378 <__any_on+0x3e>
 8008360:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008364:	4293      	cmp	r3, r2
 8008366:	d803      	bhi.n	8008370 <__any_on+0x36>
 8008368:	2000      	movs	r0, #0
 800836a:	bd10      	pop	{r4, pc}
 800836c:	4603      	mov	r3, r0
 800836e:	e7f7      	b.n	8008360 <__any_on+0x26>
 8008370:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008374:	2900      	cmp	r1, #0
 8008376:	d0f5      	beq.n	8008364 <__any_on+0x2a>
 8008378:	2001      	movs	r0, #1
 800837a:	e7f6      	b.n	800836a <__any_on+0x30>

0800837c <sulp>:
 800837c:	b570      	push	{r4, r5, r6, lr}
 800837e:	4604      	mov	r4, r0
 8008380:	460d      	mov	r5, r1
 8008382:	ec45 4b10 	vmov	d0, r4, r5
 8008386:	4616      	mov	r6, r2
 8008388:	f7ff feba 	bl	8008100 <__ulp>
 800838c:	ec51 0b10 	vmov	r0, r1, d0
 8008390:	b17e      	cbz	r6, 80083b2 <sulp+0x36>
 8008392:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008396:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800839a:	2b00      	cmp	r3, #0
 800839c:	dd09      	ble.n	80083b2 <sulp+0x36>
 800839e:	051b      	lsls	r3, r3, #20
 80083a0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80083a4:	2400      	movs	r4, #0
 80083a6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80083aa:	4622      	mov	r2, r4
 80083ac:	462b      	mov	r3, r5
 80083ae:	f7f8 f923 	bl	80005f8 <__aeabi_dmul>
 80083b2:	ec41 0b10 	vmov	d0, r0, r1
 80083b6:	bd70      	pop	{r4, r5, r6, pc}

080083b8 <_strtod_l>:
 80083b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083bc:	b09f      	sub	sp, #124	@ 0x7c
 80083be:	460c      	mov	r4, r1
 80083c0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80083c2:	2200      	movs	r2, #0
 80083c4:	921a      	str	r2, [sp, #104]	@ 0x68
 80083c6:	9005      	str	r0, [sp, #20]
 80083c8:	f04f 0a00 	mov.w	sl, #0
 80083cc:	f04f 0b00 	mov.w	fp, #0
 80083d0:	460a      	mov	r2, r1
 80083d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80083d4:	7811      	ldrb	r1, [r2, #0]
 80083d6:	292b      	cmp	r1, #43	@ 0x2b
 80083d8:	d04a      	beq.n	8008470 <_strtod_l+0xb8>
 80083da:	d838      	bhi.n	800844e <_strtod_l+0x96>
 80083dc:	290d      	cmp	r1, #13
 80083de:	d832      	bhi.n	8008446 <_strtod_l+0x8e>
 80083e0:	2908      	cmp	r1, #8
 80083e2:	d832      	bhi.n	800844a <_strtod_l+0x92>
 80083e4:	2900      	cmp	r1, #0
 80083e6:	d03b      	beq.n	8008460 <_strtod_l+0xa8>
 80083e8:	2200      	movs	r2, #0
 80083ea:	920b      	str	r2, [sp, #44]	@ 0x2c
 80083ec:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80083ee:	782a      	ldrb	r2, [r5, #0]
 80083f0:	2a30      	cmp	r2, #48	@ 0x30
 80083f2:	f040 80b3 	bne.w	800855c <_strtod_l+0x1a4>
 80083f6:	786a      	ldrb	r2, [r5, #1]
 80083f8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80083fc:	2a58      	cmp	r2, #88	@ 0x58
 80083fe:	d16e      	bne.n	80084de <_strtod_l+0x126>
 8008400:	9302      	str	r3, [sp, #8]
 8008402:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008404:	9301      	str	r3, [sp, #4]
 8008406:	ab1a      	add	r3, sp, #104	@ 0x68
 8008408:	9300      	str	r3, [sp, #0]
 800840a:	4a8e      	ldr	r2, [pc, #568]	@ (8008644 <_strtod_l+0x28c>)
 800840c:	9805      	ldr	r0, [sp, #20]
 800840e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008410:	a919      	add	r1, sp, #100	@ 0x64
 8008412:	f001 f927 	bl	8009664 <__gethex>
 8008416:	f010 060f 	ands.w	r6, r0, #15
 800841a:	4604      	mov	r4, r0
 800841c:	d005      	beq.n	800842a <_strtod_l+0x72>
 800841e:	2e06      	cmp	r6, #6
 8008420:	d128      	bne.n	8008474 <_strtod_l+0xbc>
 8008422:	3501      	adds	r5, #1
 8008424:	2300      	movs	r3, #0
 8008426:	9519      	str	r5, [sp, #100]	@ 0x64
 8008428:	930b      	str	r3, [sp, #44]	@ 0x2c
 800842a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800842c:	2b00      	cmp	r3, #0
 800842e:	f040 858e 	bne.w	8008f4e <_strtod_l+0xb96>
 8008432:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008434:	b1cb      	cbz	r3, 800846a <_strtod_l+0xb2>
 8008436:	4652      	mov	r2, sl
 8008438:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800843c:	ec43 2b10 	vmov	d0, r2, r3
 8008440:	b01f      	add	sp, #124	@ 0x7c
 8008442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008446:	2920      	cmp	r1, #32
 8008448:	d1ce      	bne.n	80083e8 <_strtod_l+0x30>
 800844a:	3201      	adds	r2, #1
 800844c:	e7c1      	b.n	80083d2 <_strtod_l+0x1a>
 800844e:	292d      	cmp	r1, #45	@ 0x2d
 8008450:	d1ca      	bne.n	80083e8 <_strtod_l+0x30>
 8008452:	2101      	movs	r1, #1
 8008454:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008456:	1c51      	adds	r1, r2, #1
 8008458:	9119      	str	r1, [sp, #100]	@ 0x64
 800845a:	7852      	ldrb	r2, [r2, #1]
 800845c:	2a00      	cmp	r2, #0
 800845e:	d1c5      	bne.n	80083ec <_strtod_l+0x34>
 8008460:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008462:	9419      	str	r4, [sp, #100]	@ 0x64
 8008464:	2b00      	cmp	r3, #0
 8008466:	f040 8570 	bne.w	8008f4a <_strtod_l+0xb92>
 800846a:	4652      	mov	r2, sl
 800846c:	465b      	mov	r3, fp
 800846e:	e7e5      	b.n	800843c <_strtod_l+0x84>
 8008470:	2100      	movs	r1, #0
 8008472:	e7ef      	b.n	8008454 <_strtod_l+0x9c>
 8008474:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008476:	b13a      	cbz	r2, 8008488 <_strtod_l+0xd0>
 8008478:	2135      	movs	r1, #53	@ 0x35
 800847a:	a81c      	add	r0, sp, #112	@ 0x70
 800847c:	f7ff ff3a 	bl	80082f4 <__copybits>
 8008480:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008482:	9805      	ldr	r0, [sp, #20]
 8008484:	f7ff fb08 	bl	8007a98 <_Bfree>
 8008488:	3e01      	subs	r6, #1
 800848a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800848c:	2e04      	cmp	r6, #4
 800848e:	d806      	bhi.n	800849e <_strtod_l+0xe6>
 8008490:	e8df f006 	tbb	[pc, r6]
 8008494:	201d0314 	.word	0x201d0314
 8008498:	14          	.byte	0x14
 8008499:	00          	.byte	0x00
 800849a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800849e:	05e1      	lsls	r1, r4, #23
 80084a0:	bf48      	it	mi
 80084a2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80084a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80084aa:	0d1b      	lsrs	r3, r3, #20
 80084ac:	051b      	lsls	r3, r3, #20
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d1bb      	bne.n	800842a <_strtod_l+0x72>
 80084b2:	f7fe fb31 	bl	8006b18 <__errno>
 80084b6:	2322      	movs	r3, #34	@ 0x22
 80084b8:	6003      	str	r3, [r0, #0]
 80084ba:	e7b6      	b.n	800842a <_strtod_l+0x72>
 80084bc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80084c0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80084c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80084c8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80084cc:	e7e7      	b.n	800849e <_strtod_l+0xe6>
 80084ce:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800864c <_strtod_l+0x294>
 80084d2:	e7e4      	b.n	800849e <_strtod_l+0xe6>
 80084d4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80084d8:	f04f 3aff 	mov.w	sl, #4294967295
 80084dc:	e7df      	b.n	800849e <_strtod_l+0xe6>
 80084de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80084e0:	1c5a      	adds	r2, r3, #1
 80084e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80084e4:	785b      	ldrb	r3, [r3, #1]
 80084e6:	2b30      	cmp	r3, #48	@ 0x30
 80084e8:	d0f9      	beq.n	80084de <_strtod_l+0x126>
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d09d      	beq.n	800842a <_strtod_l+0x72>
 80084ee:	2301      	movs	r3, #1
 80084f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80084f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80084f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80084f6:	2300      	movs	r3, #0
 80084f8:	9308      	str	r3, [sp, #32]
 80084fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80084fc:	461f      	mov	r7, r3
 80084fe:	220a      	movs	r2, #10
 8008500:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008502:	7805      	ldrb	r5, [r0, #0]
 8008504:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008508:	b2d9      	uxtb	r1, r3
 800850a:	2909      	cmp	r1, #9
 800850c:	d928      	bls.n	8008560 <_strtod_l+0x1a8>
 800850e:	494e      	ldr	r1, [pc, #312]	@ (8008648 <_strtod_l+0x290>)
 8008510:	2201      	movs	r2, #1
 8008512:	f000 ffd5 	bl	80094c0 <strncmp>
 8008516:	2800      	cmp	r0, #0
 8008518:	d032      	beq.n	8008580 <_strtod_l+0x1c8>
 800851a:	2000      	movs	r0, #0
 800851c:	462a      	mov	r2, r5
 800851e:	4681      	mov	r9, r0
 8008520:	463d      	mov	r5, r7
 8008522:	4603      	mov	r3, r0
 8008524:	2a65      	cmp	r2, #101	@ 0x65
 8008526:	d001      	beq.n	800852c <_strtod_l+0x174>
 8008528:	2a45      	cmp	r2, #69	@ 0x45
 800852a:	d114      	bne.n	8008556 <_strtod_l+0x19e>
 800852c:	b91d      	cbnz	r5, 8008536 <_strtod_l+0x17e>
 800852e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008530:	4302      	orrs	r2, r0
 8008532:	d095      	beq.n	8008460 <_strtod_l+0xa8>
 8008534:	2500      	movs	r5, #0
 8008536:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008538:	1c62      	adds	r2, r4, #1
 800853a:	9219      	str	r2, [sp, #100]	@ 0x64
 800853c:	7862      	ldrb	r2, [r4, #1]
 800853e:	2a2b      	cmp	r2, #43	@ 0x2b
 8008540:	d077      	beq.n	8008632 <_strtod_l+0x27a>
 8008542:	2a2d      	cmp	r2, #45	@ 0x2d
 8008544:	d07b      	beq.n	800863e <_strtod_l+0x286>
 8008546:	f04f 0c00 	mov.w	ip, #0
 800854a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800854e:	2909      	cmp	r1, #9
 8008550:	f240 8082 	bls.w	8008658 <_strtod_l+0x2a0>
 8008554:	9419      	str	r4, [sp, #100]	@ 0x64
 8008556:	f04f 0800 	mov.w	r8, #0
 800855a:	e0a2      	b.n	80086a2 <_strtod_l+0x2ea>
 800855c:	2300      	movs	r3, #0
 800855e:	e7c7      	b.n	80084f0 <_strtod_l+0x138>
 8008560:	2f08      	cmp	r7, #8
 8008562:	bfd5      	itete	le
 8008564:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008566:	9908      	ldrgt	r1, [sp, #32]
 8008568:	fb02 3301 	mlale	r3, r2, r1, r3
 800856c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008570:	f100 0001 	add.w	r0, r0, #1
 8008574:	bfd4      	ite	le
 8008576:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008578:	9308      	strgt	r3, [sp, #32]
 800857a:	3701      	adds	r7, #1
 800857c:	9019      	str	r0, [sp, #100]	@ 0x64
 800857e:	e7bf      	b.n	8008500 <_strtod_l+0x148>
 8008580:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008582:	1c5a      	adds	r2, r3, #1
 8008584:	9219      	str	r2, [sp, #100]	@ 0x64
 8008586:	785a      	ldrb	r2, [r3, #1]
 8008588:	b37f      	cbz	r7, 80085ea <_strtod_l+0x232>
 800858a:	4681      	mov	r9, r0
 800858c:	463d      	mov	r5, r7
 800858e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008592:	2b09      	cmp	r3, #9
 8008594:	d912      	bls.n	80085bc <_strtod_l+0x204>
 8008596:	2301      	movs	r3, #1
 8008598:	e7c4      	b.n	8008524 <_strtod_l+0x16c>
 800859a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800859c:	1c5a      	adds	r2, r3, #1
 800859e:	9219      	str	r2, [sp, #100]	@ 0x64
 80085a0:	785a      	ldrb	r2, [r3, #1]
 80085a2:	3001      	adds	r0, #1
 80085a4:	2a30      	cmp	r2, #48	@ 0x30
 80085a6:	d0f8      	beq.n	800859a <_strtod_l+0x1e2>
 80085a8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80085ac:	2b08      	cmp	r3, #8
 80085ae:	f200 84d3 	bhi.w	8008f58 <_strtod_l+0xba0>
 80085b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80085b4:	930c      	str	r3, [sp, #48]	@ 0x30
 80085b6:	4681      	mov	r9, r0
 80085b8:	2000      	movs	r0, #0
 80085ba:	4605      	mov	r5, r0
 80085bc:	3a30      	subs	r2, #48	@ 0x30
 80085be:	f100 0301 	add.w	r3, r0, #1
 80085c2:	d02a      	beq.n	800861a <_strtod_l+0x262>
 80085c4:	4499      	add	r9, r3
 80085c6:	eb00 0c05 	add.w	ip, r0, r5
 80085ca:	462b      	mov	r3, r5
 80085cc:	210a      	movs	r1, #10
 80085ce:	4563      	cmp	r3, ip
 80085d0:	d10d      	bne.n	80085ee <_strtod_l+0x236>
 80085d2:	1c69      	adds	r1, r5, #1
 80085d4:	4401      	add	r1, r0
 80085d6:	4428      	add	r0, r5
 80085d8:	2808      	cmp	r0, #8
 80085da:	dc16      	bgt.n	800860a <_strtod_l+0x252>
 80085dc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80085de:	230a      	movs	r3, #10
 80085e0:	fb03 2300 	mla	r3, r3, r0, r2
 80085e4:	930a      	str	r3, [sp, #40]	@ 0x28
 80085e6:	2300      	movs	r3, #0
 80085e8:	e018      	b.n	800861c <_strtod_l+0x264>
 80085ea:	4638      	mov	r0, r7
 80085ec:	e7da      	b.n	80085a4 <_strtod_l+0x1ec>
 80085ee:	2b08      	cmp	r3, #8
 80085f0:	f103 0301 	add.w	r3, r3, #1
 80085f4:	dc03      	bgt.n	80085fe <_strtod_l+0x246>
 80085f6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80085f8:	434e      	muls	r6, r1
 80085fa:	960a      	str	r6, [sp, #40]	@ 0x28
 80085fc:	e7e7      	b.n	80085ce <_strtod_l+0x216>
 80085fe:	2b10      	cmp	r3, #16
 8008600:	bfde      	ittt	le
 8008602:	9e08      	ldrle	r6, [sp, #32]
 8008604:	434e      	mulle	r6, r1
 8008606:	9608      	strle	r6, [sp, #32]
 8008608:	e7e1      	b.n	80085ce <_strtod_l+0x216>
 800860a:	280f      	cmp	r0, #15
 800860c:	dceb      	bgt.n	80085e6 <_strtod_l+0x22e>
 800860e:	9808      	ldr	r0, [sp, #32]
 8008610:	230a      	movs	r3, #10
 8008612:	fb03 2300 	mla	r3, r3, r0, r2
 8008616:	9308      	str	r3, [sp, #32]
 8008618:	e7e5      	b.n	80085e6 <_strtod_l+0x22e>
 800861a:	4629      	mov	r1, r5
 800861c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800861e:	1c50      	adds	r0, r2, #1
 8008620:	9019      	str	r0, [sp, #100]	@ 0x64
 8008622:	7852      	ldrb	r2, [r2, #1]
 8008624:	4618      	mov	r0, r3
 8008626:	460d      	mov	r5, r1
 8008628:	e7b1      	b.n	800858e <_strtod_l+0x1d6>
 800862a:	f04f 0900 	mov.w	r9, #0
 800862e:	2301      	movs	r3, #1
 8008630:	e77d      	b.n	800852e <_strtod_l+0x176>
 8008632:	f04f 0c00 	mov.w	ip, #0
 8008636:	1ca2      	adds	r2, r4, #2
 8008638:	9219      	str	r2, [sp, #100]	@ 0x64
 800863a:	78a2      	ldrb	r2, [r4, #2]
 800863c:	e785      	b.n	800854a <_strtod_l+0x192>
 800863e:	f04f 0c01 	mov.w	ip, #1
 8008642:	e7f8      	b.n	8008636 <_strtod_l+0x27e>
 8008644:	0800a740 	.word	0x0800a740
 8008648:	0800a728 	.word	0x0800a728
 800864c:	7ff00000 	.word	0x7ff00000
 8008650:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008652:	1c51      	adds	r1, r2, #1
 8008654:	9119      	str	r1, [sp, #100]	@ 0x64
 8008656:	7852      	ldrb	r2, [r2, #1]
 8008658:	2a30      	cmp	r2, #48	@ 0x30
 800865a:	d0f9      	beq.n	8008650 <_strtod_l+0x298>
 800865c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008660:	2908      	cmp	r1, #8
 8008662:	f63f af78 	bhi.w	8008556 <_strtod_l+0x19e>
 8008666:	3a30      	subs	r2, #48	@ 0x30
 8008668:	920e      	str	r2, [sp, #56]	@ 0x38
 800866a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800866c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800866e:	f04f 080a 	mov.w	r8, #10
 8008672:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008674:	1c56      	adds	r6, r2, #1
 8008676:	9619      	str	r6, [sp, #100]	@ 0x64
 8008678:	7852      	ldrb	r2, [r2, #1]
 800867a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800867e:	f1be 0f09 	cmp.w	lr, #9
 8008682:	d939      	bls.n	80086f8 <_strtod_l+0x340>
 8008684:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008686:	1a76      	subs	r6, r6, r1
 8008688:	2e08      	cmp	r6, #8
 800868a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800868e:	dc03      	bgt.n	8008698 <_strtod_l+0x2e0>
 8008690:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008692:	4588      	cmp	r8, r1
 8008694:	bfa8      	it	ge
 8008696:	4688      	movge	r8, r1
 8008698:	f1bc 0f00 	cmp.w	ip, #0
 800869c:	d001      	beq.n	80086a2 <_strtod_l+0x2ea>
 800869e:	f1c8 0800 	rsb	r8, r8, #0
 80086a2:	2d00      	cmp	r5, #0
 80086a4:	d14e      	bne.n	8008744 <_strtod_l+0x38c>
 80086a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80086a8:	4308      	orrs	r0, r1
 80086aa:	f47f aebe 	bne.w	800842a <_strtod_l+0x72>
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	f47f aed6 	bne.w	8008460 <_strtod_l+0xa8>
 80086b4:	2a69      	cmp	r2, #105	@ 0x69
 80086b6:	d028      	beq.n	800870a <_strtod_l+0x352>
 80086b8:	dc25      	bgt.n	8008706 <_strtod_l+0x34e>
 80086ba:	2a49      	cmp	r2, #73	@ 0x49
 80086bc:	d025      	beq.n	800870a <_strtod_l+0x352>
 80086be:	2a4e      	cmp	r2, #78	@ 0x4e
 80086c0:	f47f aece 	bne.w	8008460 <_strtod_l+0xa8>
 80086c4:	499b      	ldr	r1, [pc, #620]	@ (8008934 <_strtod_l+0x57c>)
 80086c6:	a819      	add	r0, sp, #100	@ 0x64
 80086c8:	f001 f9ee 	bl	8009aa8 <__match>
 80086cc:	2800      	cmp	r0, #0
 80086ce:	f43f aec7 	beq.w	8008460 <_strtod_l+0xa8>
 80086d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	2b28      	cmp	r3, #40	@ 0x28
 80086d8:	d12e      	bne.n	8008738 <_strtod_l+0x380>
 80086da:	4997      	ldr	r1, [pc, #604]	@ (8008938 <_strtod_l+0x580>)
 80086dc:	aa1c      	add	r2, sp, #112	@ 0x70
 80086de:	a819      	add	r0, sp, #100	@ 0x64
 80086e0:	f001 f9f6 	bl	8009ad0 <__hexnan>
 80086e4:	2805      	cmp	r0, #5
 80086e6:	d127      	bne.n	8008738 <_strtod_l+0x380>
 80086e8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80086ea:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80086ee:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80086f2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80086f6:	e698      	b.n	800842a <_strtod_l+0x72>
 80086f8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80086fa:	fb08 2101 	mla	r1, r8, r1, r2
 80086fe:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008702:	920e      	str	r2, [sp, #56]	@ 0x38
 8008704:	e7b5      	b.n	8008672 <_strtod_l+0x2ba>
 8008706:	2a6e      	cmp	r2, #110	@ 0x6e
 8008708:	e7da      	b.n	80086c0 <_strtod_l+0x308>
 800870a:	498c      	ldr	r1, [pc, #560]	@ (800893c <_strtod_l+0x584>)
 800870c:	a819      	add	r0, sp, #100	@ 0x64
 800870e:	f001 f9cb 	bl	8009aa8 <__match>
 8008712:	2800      	cmp	r0, #0
 8008714:	f43f aea4 	beq.w	8008460 <_strtod_l+0xa8>
 8008718:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800871a:	4989      	ldr	r1, [pc, #548]	@ (8008940 <_strtod_l+0x588>)
 800871c:	3b01      	subs	r3, #1
 800871e:	a819      	add	r0, sp, #100	@ 0x64
 8008720:	9319      	str	r3, [sp, #100]	@ 0x64
 8008722:	f001 f9c1 	bl	8009aa8 <__match>
 8008726:	b910      	cbnz	r0, 800872e <_strtod_l+0x376>
 8008728:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800872a:	3301      	adds	r3, #1
 800872c:	9319      	str	r3, [sp, #100]	@ 0x64
 800872e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008950 <_strtod_l+0x598>
 8008732:	f04f 0a00 	mov.w	sl, #0
 8008736:	e678      	b.n	800842a <_strtod_l+0x72>
 8008738:	4882      	ldr	r0, [pc, #520]	@ (8008944 <_strtod_l+0x58c>)
 800873a:	f000 fef1 	bl	8009520 <nan>
 800873e:	ec5b ab10 	vmov	sl, fp, d0
 8008742:	e672      	b.n	800842a <_strtod_l+0x72>
 8008744:	eba8 0309 	sub.w	r3, r8, r9
 8008748:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800874a:	9309      	str	r3, [sp, #36]	@ 0x24
 800874c:	2f00      	cmp	r7, #0
 800874e:	bf08      	it	eq
 8008750:	462f      	moveq	r7, r5
 8008752:	2d10      	cmp	r5, #16
 8008754:	462c      	mov	r4, r5
 8008756:	bfa8      	it	ge
 8008758:	2410      	movge	r4, #16
 800875a:	f7f7 fed3 	bl	8000504 <__aeabi_ui2d>
 800875e:	2d09      	cmp	r5, #9
 8008760:	4682      	mov	sl, r0
 8008762:	468b      	mov	fp, r1
 8008764:	dc13      	bgt.n	800878e <_strtod_l+0x3d6>
 8008766:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008768:	2b00      	cmp	r3, #0
 800876a:	f43f ae5e 	beq.w	800842a <_strtod_l+0x72>
 800876e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008770:	dd78      	ble.n	8008864 <_strtod_l+0x4ac>
 8008772:	2b16      	cmp	r3, #22
 8008774:	dc5f      	bgt.n	8008836 <_strtod_l+0x47e>
 8008776:	4974      	ldr	r1, [pc, #464]	@ (8008948 <_strtod_l+0x590>)
 8008778:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800877c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008780:	4652      	mov	r2, sl
 8008782:	465b      	mov	r3, fp
 8008784:	f7f7 ff38 	bl	80005f8 <__aeabi_dmul>
 8008788:	4682      	mov	sl, r0
 800878a:	468b      	mov	fp, r1
 800878c:	e64d      	b.n	800842a <_strtod_l+0x72>
 800878e:	4b6e      	ldr	r3, [pc, #440]	@ (8008948 <_strtod_l+0x590>)
 8008790:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008794:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008798:	f7f7 ff2e 	bl	80005f8 <__aeabi_dmul>
 800879c:	4682      	mov	sl, r0
 800879e:	9808      	ldr	r0, [sp, #32]
 80087a0:	468b      	mov	fp, r1
 80087a2:	f7f7 feaf 	bl	8000504 <__aeabi_ui2d>
 80087a6:	4602      	mov	r2, r0
 80087a8:	460b      	mov	r3, r1
 80087aa:	4650      	mov	r0, sl
 80087ac:	4659      	mov	r1, fp
 80087ae:	f7f7 fd6d 	bl	800028c <__adddf3>
 80087b2:	2d0f      	cmp	r5, #15
 80087b4:	4682      	mov	sl, r0
 80087b6:	468b      	mov	fp, r1
 80087b8:	ddd5      	ble.n	8008766 <_strtod_l+0x3ae>
 80087ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087bc:	1b2c      	subs	r4, r5, r4
 80087be:	441c      	add	r4, r3
 80087c0:	2c00      	cmp	r4, #0
 80087c2:	f340 8096 	ble.w	80088f2 <_strtod_l+0x53a>
 80087c6:	f014 030f 	ands.w	r3, r4, #15
 80087ca:	d00a      	beq.n	80087e2 <_strtod_l+0x42a>
 80087cc:	495e      	ldr	r1, [pc, #376]	@ (8008948 <_strtod_l+0x590>)
 80087ce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80087d2:	4652      	mov	r2, sl
 80087d4:	465b      	mov	r3, fp
 80087d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087da:	f7f7 ff0d 	bl	80005f8 <__aeabi_dmul>
 80087de:	4682      	mov	sl, r0
 80087e0:	468b      	mov	fp, r1
 80087e2:	f034 040f 	bics.w	r4, r4, #15
 80087e6:	d073      	beq.n	80088d0 <_strtod_l+0x518>
 80087e8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80087ec:	dd48      	ble.n	8008880 <_strtod_l+0x4c8>
 80087ee:	2400      	movs	r4, #0
 80087f0:	46a0      	mov	r8, r4
 80087f2:	940a      	str	r4, [sp, #40]	@ 0x28
 80087f4:	46a1      	mov	r9, r4
 80087f6:	9a05      	ldr	r2, [sp, #20]
 80087f8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008950 <_strtod_l+0x598>
 80087fc:	2322      	movs	r3, #34	@ 0x22
 80087fe:	6013      	str	r3, [r2, #0]
 8008800:	f04f 0a00 	mov.w	sl, #0
 8008804:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008806:	2b00      	cmp	r3, #0
 8008808:	f43f ae0f 	beq.w	800842a <_strtod_l+0x72>
 800880c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800880e:	9805      	ldr	r0, [sp, #20]
 8008810:	f7ff f942 	bl	8007a98 <_Bfree>
 8008814:	9805      	ldr	r0, [sp, #20]
 8008816:	4649      	mov	r1, r9
 8008818:	f7ff f93e 	bl	8007a98 <_Bfree>
 800881c:	9805      	ldr	r0, [sp, #20]
 800881e:	4641      	mov	r1, r8
 8008820:	f7ff f93a 	bl	8007a98 <_Bfree>
 8008824:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008826:	9805      	ldr	r0, [sp, #20]
 8008828:	f7ff f936 	bl	8007a98 <_Bfree>
 800882c:	9805      	ldr	r0, [sp, #20]
 800882e:	4621      	mov	r1, r4
 8008830:	f7ff f932 	bl	8007a98 <_Bfree>
 8008834:	e5f9      	b.n	800842a <_strtod_l+0x72>
 8008836:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008838:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800883c:	4293      	cmp	r3, r2
 800883e:	dbbc      	blt.n	80087ba <_strtod_l+0x402>
 8008840:	4c41      	ldr	r4, [pc, #260]	@ (8008948 <_strtod_l+0x590>)
 8008842:	f1c5 050f 	rsb	r5, r5, #15
 8008846:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800884a:	4652      	mov	r2, sl
 800884c:	465b      	mov	r3, fp
 800884e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008852:	f7f7 fed1 	bl	80005f8 <__aeabi_dmul>
 8008856:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008858:	1b5d      	subs	r5, r3, r5
 800885a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800885e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008862:	e78f      	b.n	8008784 <_strtod_l+0x3cc>
 8008864:	3316      	adds	r3, #22
 8008866:	dba8      	blt.n	80087ba <_strtod_l+0x402>
 8008868:	4b37      	ldr	r3, [pc, #220]	@ (8008948 <_strtod_l+0x590>)
 800886a:	eba9 0808 	sub.w	r8, r9, r8
 800886e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008872:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008876:	4650      	mov	r0, sl
 8008878:	4659      	mov	r1, fp
 800887a:	f7f7 ffe7 	bl	800084c <__aeabi_ddiv>
 800887e:	e783      	b.n	8008788 <_strtod_l+0x3d0>
 8008880:	4b32      	ldr	r3, [pc, #200]	@ (800894c <_strtod_l+0x594>)
 8008882:	9308      	str	r3, [sp, #32]
 8008884:	2300      	movs	r3, #0
 8008886:	1124      	asrs	r4, r4, #4
 8008888:	4650      	mov	r0, sl
 800888a:	4659      	mov	r1, fp
 800888c:	461e      	mov	r6, r3
 800888e:	2c01      	cmp	r4, #1
 8008890:	dc21      	bgt.n	80088d6 <_strtod_l+0x51e>
 8008892:	b10b      	cbz	r3, 8008898 <_strtod_l+0x4e0>
 8008894:	4682      	mov	sl, r0
 8008896:	468b      	mov	fp, r1
 8008898:	492c      	ldr	r1, [pc, #176]	@ (800894c <_strtod_l+0x594>)
 800889a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800889e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80088a2:	4652      	mov	r2, sl
 80088a4:	465b      	mov	r3, fp
 80088a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088aa:	f7f7 fea5 	bl	80005f8 <__aeabi_dmul>
 80088ae:	4b28      	ldr	r3, [pc, #160]	@ (8008950 <_strtod_l+0x598>)
 80088b0:	460a      	mov	r2, r1
 80088b2:	400b      	ands	r3, r1
 80088b4:	4927      	ldr	r1, [pc, #156]	@ (8008954 <_strtod_l+0x59c>)
 80088b6:	428b      	cmp	r3, r1
 80088b8:	4682      	mov	sl, r0
 80088ba:	d898      	bhi.n	80087ee <_strtod_l+0x436>
 80088bc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80088c0:	428b      	cmp	r3, r1
 80088c2:	bf86      	itte	hi
 80088c4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008958 <_strtod_l+0x5a0>
 80088c8:	f04f 3aff 	movhi.w	sl, #4294967295
 80088cc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80088d0:	2300      	movs	r3, #0
 80088d2:	9308      	str	r3, [sp, #32]
 80088d4:	e07a      	b.n	80089cc <_strtod_l+0x614>
 80088d6:	07e2      	lsls	r2, r4, #31
 80088d8:	d505      	bpl.n	80088e6 <_strtod_l+0x52e>
 80088da:	9b08      	ldr	r3, [sp, #32]
 80088dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e0:	f7f7 fe8a 	bl	80005f8 <__aeabi_dmul>
 80088e4:	2301      	movs	r3, #1
 80088e6:	9a08      	ldr	r2, [sp, #32]
 80088e8:	3208      	adds	r2, #8
 80088ea:	3601      	adds	r6, #1
 80088ec:	1064      	asrs	r4, r4, #1
 80088ee:	9208      	str	r2, [sp, #32]
 80088f0:	e7cd      	b.n	800888e <_strtod_l+0x4d6>
 80088f2:	d0ed      	beq.n	80088d0 <_strtod_l+0x518>
 80088f4:	4264      	negs	r4, r4
 80088f6:	f014 020f 	ands.w	r2, r4, #15
 80088fa:	d00a      	beq.n	8008912 <_strtod_l+0x55a>
 80088fc:	4b12      	ldr	r3, [pc, #72]	@ (8008948 <_strtod_l+0x590>)
 80088fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008902:	4650      	mov	r0, sl
 8008904:	4659      	mov	r1, fp
 8008906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890a:	f7f7 ff9f 	bl	800084c <__aeabi_ddiv>
 800890e:	4682      	mov	sl, r0
 8008910:	468b      	mov	fp, r1
 8008912:	1124      	asrs	r4, r4, #4
 8008914:	d0dc      	beq.n	80088d0 <_strtod_l+0x518>
 8008916:	2c1f      	cmp	r4, #31
 8008918:	dd20      	ble.n	800895c <_strtod_l+0x5a4>
 800891a:	2400      	movs	r4, #0
 800891c:	46a0      	mov	r8, r4
 800891e:	940a      	str	r4, [sp, #40]	@ 0x28
 8008920:	46a1      	mov	r9, r4
 8008922:	9a05      	ldr	r2, [sp, #20]
 8008924:	2322      	movs	r3, #34	@ 0x22
 8008926:	f04f 0a00 	mov.w	sl, #0
 800892a:	f04f 0b00 	mov.w	fp, #0
 800892e:	6013      	str	r3, [r2, #0]
 8008930:	e768      	b.n	8008804 <_strtod_l+0x44c>
 8008932:	bf00      	nop
 8008934:	0800a515 	.word	0x0800a515
 8008938:	0800a72c 	.word	0x0800a72c
 800893c:	0800a50d 	.word	0x0800a50d
 8008940:	0800a544 	.word	0x0800a544
 8008944:	0800a8d5 	.word	0x0800a8d5
 8008948:	0800a660 	.word	0x0800a660
 800894c:	0800a638 	.word	0x0800a638
 8008950:	7ff00000 	.word	0x7ff00000
 8008954:	7ca00000 	.word	0x7ca00000
 8008958:	7fefffff 	.word	0x7fefffff
 800895c:	f014 0310 	ands.w	r3, r4, #16
 8008960:	bf18      	it	ne
 8008962:	236a      	movne	r3, #106	@ 0x6a
 8008964:	4ea9      	ldr	r6, [pc, #676]	@ (8008c0c <_strtod_l+0x854>)
 8008966:	9308      	str	r3, [sp, #32]
 8008968:	4650      	mov	r0, sl
 800896a:	4659      	mov	r1, fp
 800896c:	2300      	movs	r3, #0
 800896e:	07e2      	lsls	r2, r4, #31
 8008970:	d504      	bpl.n	800897c <_strtod_l+0x5c4>
 8008972:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008976:	f7f7 fe3f 	bl	80005f8 <__aeabi_dmul>
 800897a:	2301      	movs	r3, #1
 800897c:	1064      	asrs	r4, r4, #1
 800897e:	f106 0608 	add.w	r6, r6, #8
 8008982:	d1f4      	bne.n	800896e <_strtod_l+0x5b6>
 8008984:	b10b      	cbz	r3, 800898a <_strtod_l+0x5d2>
 8008986:	4682      	mov	sl, r0
 8008988:	468b      	mov	fp, r1
 800898a:	9b08      	ldr	r3, [sp, #32]
 800898c:	b1b3      	cbz	r3, 80089bc <_strtod_l+0x604>
 800898e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008992:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008996:	2b00      	cmp	r3, #0
 8008998:	4659      	mov	r1, fp
 800899a:	dd0f      	ble.n	80089bc <_strtod_l+0x604>
 800899c:	2b1f      	cmp	r3, #31
 800899e:	dd55      	ble.n	8008a4c <_strtod_l+0x694>
 80089a0:	2b34      	cmp	r3, #52	@ 0x34
 80089a2:	bfde      	ittt	le
 80089a4:	f04f 33ff 	movle.w	r3, #4294967295
 80089a8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80089ac:	4093      	lslle	r3, r2
 80089ae:	f04f 0a00 	mov.w	sl, #0
 80089b2:	bfcc      	ite	gt
 80089b4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80089b8:	ea03 0b01 	andle.w	fp, r3, r1
 80089bc:	2200      	movs	r2, #0
 80089be:	2300      	movs	r3, #0
 80089c0:	4650      	mov	r0, sl
 80089c2:	4659      	mov	r1, fp
 80089c4:	f7f8 f880 	bl	8000ac8 <__aeabi_dcmpeq>
 80089c8:	2800      	cmp	r0, #0
 80089ca:	d1a6      	bne.n	800891a <_strtod_l+0x562>
 80089cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089ce:	9300      	str	r3, [sp, #0]
 80089d0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80089d2:	9805      	ldr	r0, [sp, #20]
 80089d4:	462b      	mov	r3, r5
 80089d6:	463a      	mov	r2, r7
 80089d8:	f7ff f8c6 	bl	8007b68 <__s2b>
 80089dc:	900a      	str	r0, [sp, #40]	@ 0x28
 80089de:	2800      	cmp	r0, #0
 80089e0:	f43f af05 	beq.w	80087ee <_strtod_l+0x436>
 80089e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089e6:	2a00      	cmp	r2, #0
 80089e8:	eba9 0308 	sub.w	r3, r9, r8
 80089ec:	bfa8      	it	ge
 80089ee:	2300      	movge	r3, #0
 80089f0:	9312      	str	r3, [sp, #72]	@ 0x48
 80089f2:	2400      	movs	r4, #0
 80089f4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80089f8:	9316      	str	r3, [sp, #88]	@ 0x58
 80089fa:	46a0      	mov	r8, r4
 80089fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089fe:	9805      	ldr	r0, [sp, #20]
 8008a00:	6859      	ldr	r1, [r3, #4]
 8008a02:	f7ff f809 	bl	8007a18 <_Balloc>
 8008a06:	4681      	mov	r9, r0
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	f43f aef4 	beq.w	80087f6 <_strtod_l+0x43e>
 8008a0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a10:	691a      	ldr	r2, [r3, #16]
 8008a12:	3202      	adds	r2, #2
 8008a14:	f103 010c 	add.w	r1, r3, #12
 8008a18:	0092      	lsls	r2, r2, #2
 8008a1a:	300c      	adds	r0, #12
 8008a1c:	f000 fd72 	bl	8009504 <memcpy>
 8008a20:	ec4b ab10 	vmov	d0, sl, fp
 8008a24:	9805      	ldr	r0, [sp, #20]
 8008a26:	aa1c      	add	r2, sp, #112	@ 0x70
 8008a28:	a91b      	add	r1, sp, #108	@ 0x6c
 8008a2a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008a2e:	f7ff fbd7 	bl	80081e0 <__d2b>
 8008a32:	901a      	str	r0, [sp, #104]	@ 0x68
 8008a34:	2800      	cmp	r0, #0
 8008a36:	f43f aede 	beq.w	80087f6 <_strtod_l+0x43e>
 8008a3a:	9805      	ldr	r0, [sp, #20]
 8008a3c:	2101      	movs	r1, #1
 8008a3e:	f7ff f929 	bl	8007c94 <__i2b>
 8008a42:	4680      	mov	r8, r0
 8008a44:	b948      	cbnz	r0, 8008a5a <_strtod_l+0x6a2>
 8008a46:	f04f 0800 	mov.w	r8, #0
 8008a4a:	e6d4      	b.n	80087f6 <_strtod_l+0x43e>
 8008a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8008a50:	fa02 f303 	lsl.w	r3, r2, r3
 8008a54:	ea03 0a0a 	and.w	sl, r3, sl
 8008a58:	e7b0      	b.n	80089bc <_strtod_l+0x604>
 8008a5a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008a5c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008a5e:	2d00      	cmp	r5, #0
 8008a60:	bfab      	itete	ge
 8008a62:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008a64:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008a66:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008a68:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008a6a:	bfac      	ite	ge
 8008a6c:	18ef      	addge	r7, r5, r3
 8008a6e:	1b5e      	sublt	r6, r3, r5
 8008a70:	9b08      	ldr	r3, [sp, #32]
 8008a72:	1aed      	subs	r5, r5, r3
 8008a74:	4415      	add	r5, r2
 8008a76:	4b66      	ldr	r3, [pc, #408]	@ (8008c10 <_strtod_l+0x858>)
 8008a78:	3d01      	subs	r5, #1
 8008a7a:	429d      	cmp	r5, r3
 8008a7c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008a80:	da50      	bge.n	8008b24 <_strtod_l+0x76c>
 8008a82:	1b5b      	subs	r3, r3, r5
 8008a84:	2b1f      	cmp	r3, #31
 8008a86:	eba2 0203 	sub.w	r2, r2, r3
 8008a8a:	f04f 0101 	mov.w	r1, #1
 8008a8e:	dc3d      	bgt.n	8008b0c <_strtod_l+0x754>
 8008a90:	fa01 f303 	lsl.w	r3, r1, r3
 8008a94:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008a96:	2300      	movs	r3, #0
 8008a98:	9310      	str	r3, [sp, #64]	@ 0x40
 8008a9a:	18bd      	adds	r5, r7, r2
 8008a9c:	9b08      	ldr	r3, [sp, #32]
 8008a9e:	42af      	cmp	r7, r5
 8008aa0:	4416      	add	r6, r2
 8008aa2:	441e      	add	r6, r3
 8008aa4:	463b      	mov	r3, r7
 8008aa6:	bfa8      	it	ge
 8008aa8:	462b      	movge	r3, r5
 8008aaa:	42b3      	cmp	r3, r6
 8008aac:	bfa8      	it	ge
 8008aae:	4633      	movge	r3, r6
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	bfc2      	ittt	gt
 8008ab4:	1aed      	subgt	r5, r5, r3
 8008ab6:	1af6      	subgt	r6, r6, r3
 8008ab8:	1aff      	subgt	r7, r7, r3
 8008aba:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	dd16      	ble.n	8008aee <_strtod_l+0x736>
 8008ac0:	4641      	mov	r1, r8
 8008ac2:	9805      	ldr	r0, [sp, #20]
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	f7ff f9a5 	bl	8007e14 <__pow5mult>
 8008aca:	4680      	mov	r8, r0
 8008acc:	2800      	cmp	r0, #0
 8008ace:	d0ba      	beq.n	8008a46 <_strtod_l+0x68e>
 8008ad0:	4601      	mov	r1, r0
 8008ad2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008ad4:	9805      	ldr	r0, [sp, #20]
 8008ad6:	f7ff f8f3 	bl	8007cc0 <__multiply>
 8008ada:	900e      	str	r0, [sp, #56]	@ 0x38
 8008adc:	2800      	cmp	r0, #0
 8008ade:	f43f ae8a 	beq.w	80087f6 <_strtod_l+0x43e>
 8008ae2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008ae4:	9805      	ldr	r0, [sp, #20]
 8008ae6:	f7fe ffd7 	bl	8007a98 <_Bfree>
 8008aea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008aec:	931a      	str	r3, [sp, #104]	@ 0x68
 8008aee:	2d00      	cmp	r5, #0
 8008af0:	dc1d      	bgt.n	8008b2e <_strtod_l+0x776>
 8008af2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	dd23      	ble.n	8008b40 <_strtod_l+0x788>
 8008af8:	4649      	mov	r1, r9
 8008afa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008afc:	9805      	ldr	r0, [sp, #20]
 8008afe:	f7ff f989 	bl	8007e14 <__pow5mult>
 8008b02:	4681      	mov	r9, r0
 8008b04:	b9e0      	cbnz	r0, 8008b40 <_strtod_l+0x788>
 8008b06:	f04f 0900 	mov.w	r9, #0
 8008b0a:	e674      	b.n	80087f6 <_strtod_l+0x43e>
 8008b0c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008b10:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008b14:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008b18:	35e2      	adds	r5, #226	@ 0xe2
 8008b1a:	fa01 f305 	lsl.w	r3, r1, r5
 8008b1e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008b20:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008b22:	e7ba      	b.n	8008a9a <_strtod_l+0x6e2>
 8008b24:	2300      	movs	r3, #0
 8008b26:	9310      	str	r3, [sp, #64]	@ 0x40
 8008b28:	2301      	movs	r3, #1
 8008b2a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008b2c:	e7b5      	b.n	8008a9a <_strtod_l+0x6e2>
 8008b2e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008b30:	9805      	ldr	r0, [sp, #20]
 8008b32:	462a      	mov	r2, r5
 8008b34:	f7ff f9c8 	bl	8007ec8 <__lshift>
 8008b38:	901a      	str	r0, [sp, #104]	@ 0x68
 8008b3a:	2800      	cmp	r0, #0
 8008b3c:	d1d9      	bne.n	8008af2 <_strtod_l+0x73a>
 8008b3e:	e65a      	b.n	80087f6 <_strtod_l+0x43e>
 8008b40:	2e00      	cmp	r6, #0
 8008b42:	dd07      	ble.n	8008b54 <_strtod_l+0x79c>
 8008b44:	4649      	mov	r1, r9
 8008b46:	9805      	ldr	r0, [sp, #20]
 8008b48:	4632      	mov	r2, r6
 8008b4a:	f7ff f9bd 	bl	8007ec8 <__lshift>
 8008b4e:	4681      	mov	r9, r0
 8008b50:	2800      	cmp	r0, #0
 8008b52:	d0d8      	beq.n	8008b06 <_strtod_l+0x74e>
 8008b54:	2f00      	cmp	r7, #0
 8008b56:	dd08      	ble.n	8008b6a <_strtod_l+0x7b2>
 8008b58:	4641      	mov	r1, r8
 8008b5a:	9805      	ldr	r0, [sp, #20]
 8008b5c:	463a      	mov	r2, r7
 8008b5e:	f7ff f9b3 	bl	8007ec8 <__lshift>
 8008b62:	4680      	mov	r8, r0
 8008b64:	2800      	cmp	r0, #0
 8008b66:	f43f ae46 	beq.w	80087f6 <_strtod_l+0x43e>
 8008b6a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008b6c:	9805      	ldr	r0, [sp, #20]
 8008b6e:	464a      	mov	r2, r9
 8008b70:	f7ff fa32 	bl	8007fd8 <__mdiff>
 8008b74:	4604      	mov	r4, r0
 8008b76:	2800      	cmp	r0, #0
 8008b78:	f43f ae3d 	beq.w	80087f6 <_strtod_l+0x43e>
 8008b7c:	68c3      	ldr	r3, [r0, #12]
 8008b7e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008b80:	2300      	movs	r3, #0
 8008b82:	60c3      	str	r3, [r0, #12]
 8008b84:	4641      	mov	r1, r8
 8008b86:	f7ff fa0b 	bl	8007fa0 <__mcmp>
 8008b8a:	2800      	cmp	r0, #0
 8008b8c:	da46      	bge.n	8008c1c <_strtod_l+0x864>
 8008b8e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b90:	ea53 030a 	orrs.w	r3, r3, sl
 8008b94:	d16c      	bne.n	8008c70 <_strtod_l+0x8b8>
 8008b96:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d168      	bne.n	8008c70 <_strtod_l+0x8b8>
 8008b9e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008ba2:	0d1b      	lsrs	r3, r3, #20
 8008ba4:	051b      	lsls	r3, r3, #20
 8008ba6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008baa:	d961      	bls.n	8008c70 <_strtod_l+0x8b8>
 8008bac:	6963      	ldr	r3, [r4, #20]
 8008bae:	b913      	cbnz	r3, 8008bb6 <_strtod_l+0x7fe>
 8008bb0:	6923      	ldr	r3, [r4, #16]
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	dd5c      	ble.n	8008c70 <_strtod_l+0x8b8>
 8008bb6:	4621      	mov	r1, r4
 8008bb8:	2201      	movs	r2, #1
 8008bba:	9805      	ldr	r0, [sp, #20]
 8008bbc:	f7ff f984 	bl	8007ec8 <__lshift>
 8008bc0:	4641      	mov	r1, r8
 8008bc2:	4604      	mov	r4, r0
 8008bc4:	f7ff f9ec 	bl	8007fa0 <__mcmp>
 8008bc8:	2800      	cmp	r0, #0
 8008bca:	dd51      	ble.n	8008c70 <_strtod_l+0x8b8>
 8008bcc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008bd0:	9a08      	ldr	r2, [sp, #32]
 8008bd2:	0d1b      	lsrs	r3, r3, #20
 8008bd4:	051b      	lsls	r3, r3, #20
 8008bd6:	2a00      	cmp	r2, #0
 8008bd8:	d06b      	beq.n	8008cb2 <_strtod_l+0x8fa>
 8008bda:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008bde:	d868      	bhi.n	8008cb2 <_strtod_l+0x8fa>
 8008be0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008be4:	f67f ae9d 	bls.w	8008922 <_strtod_l+0x56a>
 8008be8:	4b0a      	ldr	r3, [pc, #40]	@ (8008c14 <_strtod_l+0x85c>)
 8008bea:	4650      	mov	r0, sl
 8008bec:	4659      	mov	r1, fp
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f7f7 fd02 	bl	80005f8 <__aeabi_dmul>
 8008bf4:	4b08      	ldr	r3, [pc, #32]	@ (8008c18 <_strtod_l+0x860>)
 8008bf6:	400b      	ands	r3, r1
 8008bf8:	4682      	mov	sl, r0
 8008bfa:	468b      	mov	fp, r1
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	f47f ae05 	bne.w	800880c <_strtod_l+0x454>
 8008c02:	9a05      	ldr	r2, [sp, #20]
 8008c04:	2322      	movs	r3, #34	@ 0x22
 8008c06:	6013      	str	r3, [r2, #0]
 8008c08:	e600      	b.n	800880c <_strtod_l+0x454>
 8008c0a:	bf00      	nop
 8008c0c:	0800a758 	.word	0x0800a758
 8008c10:	fffffc02 	.word	0xfffffc02
 8008c14:	39500000 	.word	0x39500000
 8008c18:	7ff00000 	.word	0x7ff00000
 8008c1c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008c20:	d165      	bne.n	8008cee <_strtod_l+0x936>
 8008c22:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008c24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c28:	b35a      	cbz	r2, 8008c82 <_strtod_l+0x8ca>
 8008c2a:	4a9f      	ldr	r2, [pc, #636]	@ (8008ea8 <_strtod_l+0xaf0>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d12b      	bne.n	8008c88 <_strtod_l+0x8d0>
 8008c30:	9b08      	ldr	r3, [sp, #32]
 8008c32:	4651      	mov	r1, sl
 8008c34:	b303      	cbz	r3, 8008c78 <_strtod_l+0x8c0>
 8008c36:	4b9d      	ldr	r3, [pc, #628]	@ (8008eac <_strtod_l+0xaf4>)
 8008c38:	465a      	mov	r2, fp
 8008c3a:	4013      	ands	r3, r2
 8008c3c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008c40:	f04f 32ff 	mov.w	r2, #4294967295
 8008c44:	d81b      	bhi.n	8008c7e <_strtod_l+0x8c6>
 8008c46:	0d1b      	lsrs	r3, r3, #20
 8008c48:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c50:	4299      	cmp	r1, r3
 8008c52:	d119      	bne.n	8008c88 <_strtod_l+0x8d0>
 8008c54:	4b96      	ldr	r3, [pc, #600]	@ (8008eb0 <_strtod_l+0xaf8>)
 8008c56:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d102      	bne.n	8008c62 <_strtod_l+0x8aa>
 8008c5c:	3101      	adds	r1, #1
 8008c5e:	f43f adca 	beq.w	80087f6 <_strtod_l+0x43e>
 8008c62:	4b92      	ldr	r3, [pc, #584]	@ (8008eac <_strtod_l+0xaf4>)
 8008c64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008c66:	401a      	ands	r2, r3
 8008c68:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008c6c:	f04f 0a00 	mov.w	sl, #0
 8008c70:	9b08      	ldr	r3, [sp, #32]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d1b8      	bne.n	8008be8 <_strtod_l+0x830>
 8008c76:	e5c9      	b.n	800880c <_strtod_l+0x454>
 8008c78:	f04f 33ff 	mov.w	r3, #4294967295
 8008c7c:	e7e8      	b.n	8008c50 <_strtod_l+0x898>
 8008c7e:	4613      	mov	r3, r2
 8008c80:	e7e6      	b.n	8008c50 <_strtod_l+0x898>
 8008c82:	ea53 030a 	orrs.w	r3, r3, sl
 8008c86:	d0a1      	beq.n	8008bcc <_strtod_l+0x814>
 8008c88:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008c8a:	b1db      	cbz	r3, 8008cc4 <_strtod_l+0x90c>
 8008c8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008c8e:	4213      	tst	r3, r2
 8008c90:	d0ee      	beq.n	8008c70 <_strtod_l+0x8b8>
 8008c92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c94:	9a08      	ldr	r2, [sp, #32]
 8008c96:	4650      	mov	r0, sl
 8008c98:	4659      	mov	r1, fp
 8008c9a:	b1bb      	cbz	r3, 8008ccc <_strtod_l+0x914>
 8008c9c:	f7ff fb6e 	bl	800837c <sulp>
 8008ca0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ca4:	ec53 2b10 	vmov	r2, r3, d0
 8008ca8:	f7f7 faf0 	bl	800028c <__adddf3>
 8008cac:	4682      	mov	sl, r0
 8008cae:	468b      	mov	fp, r1
 8008cb0:	e7de      	b.n	8008c70 <_strtod_l+0x8b8>
 8008cb2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008cb6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008cba:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008cbe:	f04f 3aff 	mov.w	sl, #4294967295
 8008cc2:	e7d5      	b.n	8008c70 <_strtod_l+0x8b8>
 8008cc4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008cc6:	ea13 0f0a 	tst.w	r3, sl
 8008cca:	e7e1      	b.n	8008c90 <_strtod_l+0x8d8>
 8008ccc:	f7ff fb56 	bl	800837c <sulp>
 8008cd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008cd4:	ec53 2b10 	vmov	r2, r3, d0
 8008cd8:	f7f7 fad6 	bl	8000288 <__aeabi_dsub>
 8008cdc:	2200      	movs	r2, #0
 8008cde:	2300      	movs	r3, #0
 8008ce0:	4682      	mov	sl, r0
 8008ce2:	468b      	mov	fp, r1
 8008ce4:	f7f7 fef0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ce8:	2800      	cmp	r0, #0
 8008cea:	d0c1      	beq.n	8008c70 <_strtod_l+0x8b8>
 8008cec:	e619      	b.n	8008922 <_strtod_l+0x56a>
 8008cee:	4641      	mov	r1, r8
 8008cf0:	4620      	mov	r0, r4
 8008cf2:	f7ff facd 	bl	8008290 <__ratio>
 8008cf6:	ec57 6b10 	vmov	r6, r7, d0
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008d00:	4630      	mov	r0, r6
 8008d02:	4639      	mov	r1, r7
 8008d04:	f7f7 fef4 	bl	8000af0 <__aeabi_dcmple>
 8008d08:	2800      	cmp	r0, #0
 8008d0a:	d06f      	beq.n	8008dec <_strtod_l+0xa34>
 8008d0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d17a      	bne.n	8008e08 <_strtod_l+0xa50>
 8008d12:	f1ba 0f00 	cmp.w	sl, #0
 8008d16:	d158      	bne.n	8008dca <_strtod_l+0xa12>
 8008d18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d15a      	bne.n	8008dd8 <_strtod_l+0xa20>
 8008d22:	4b64      	ldr	r3, [pc, #400]	@ (8008eb4 <_strtod_l+0xafc>)
 8008d24:	2200      	movs	r2, #0
 8008d26:	4630      	mov	r0, r6
 8008d28:	4639      	mov	r1, r7
 8008d2a:	f7f7 fed7 	bl	8000adc <__aeabi_dcmplt>
 8008d2e:	2800      	cmp	r0, #0
 8008d30:	d159      	bne.n	8008de6 <_strtod_l+0xa2e>
 8008d32:	4630      	mov	r0, r6
 8008d34:	4639      	mov	r1, r7
 8008d36:	4b60      	ldr	r3, [pc, #384]	@ (8008eb8 <_strtod_l+0xb00>)
 8008d38:	2200      	movs	r2, #0
 8008d3a:	f7f7 fc5d 	bl	80005f8 <__aeabi_dmul>
 8008d3e:	4606      	mov	r6, r0
 8008d40:	460f      	mov	r7, r1
 8008d42:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008d46:	9606      	str	r6, [sp, #24]
 8008d48:	9307      	str	r3, [sp, #28]
 8008d4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d4e:	4d57      	ldr	r5, [pc, #348]	@ (8008eac <_strtod_l+0xaf4>)
 8008d50:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008d54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d56:	401d      	ands	r5, r3
 8008d58:	4b58      	ldr	r3, [pc, #352]	@ (8008ebc <_strtod_l+0xb04>)
 8008d5a:	429d      	cmp	r5, r3
 8008d5c:	f040 80b2 	bne.w	8008ec4 <_strtod_l+0xb0c>
 8008d60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d62:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008d66:	ec4b ab10 	vmov	d0, sl, fp
 8008d6a:	f7ff f9c9 	bl	8008100 <__ulp>
 8008d6e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d72:	ec51 0b10 	vmov	r0, r1, d0
 8008d76:	f7f7 fc3f 	bl	80005f8 <__aeabi_dmul>
 8008d7a:	4652      	mov	r2, sl
 8008d7c:	465b      	mov	r3, fp
 8008d7e:	f7f7 fa85 	bl	800028c <__adddf3>
 8008d82:	460b      	mov	r3, r1
 8008d84:	4949      	ldr	r1, [pc, #292]	@ (8008eac <_strtod_l+0xaf4>)
 8008d86:	4a4e      	ldr	r2, [pc, #312]	@ (8008ec0 <_strtod_l+0xb08>)
 8008d88:	4019      	ands	r1, r3
 8008d8a:	4291      	cmp	r1, r2
 8008d8c:	4682      	mov	sl, r0
 8008d8e:	d942      	bls.n	8008e16 <_strtod_l+0xa5e>
 8008d90:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008d92:	4b47      	ldr	r3, [pc, #284]	@ (8008eb0 <_strtod_l+0xaf8>)
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d103      	bne.n	8008da0 <_strtod_l+0x9e8>
 8008d98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	f43f ad2b 	beq.w	80087f6 <_strtod_l+0x43e>
 8008da0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008eb0 <_strtod_l+0xaf8>
 8008da4:	f04f 3aff 	mov.w	sl, #4294967295
 8008da8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008daa:	9805      	ldr	r0, [sp, #20]
 8008dac:	f7fe fe74 	bl	8007a98 <_Bfree>
 8008db0:	9805      	ldr	r0, [sp, #20]
 8008db2:	4649      	mov	r1, r9
 8008db4:	f7fe fe70 	bl	8007a98 <_Bfree>
 8008db8:	9805      	ldr	r0, [sp, #20]
 8008dba:	4641      	mov	r1, r8
 8008dbc:	f7fe fe6c 	bl	8007a98 <_Bfree>
 8008dc0:	9805      	ldr	r0, [sp, #20]
 8008dc2:	4621      	mov	r1, r4
 8008dc4:	f7fe fe68 	bl	8007a98 <_Bfree>
 8008dc8:	e618      	b.n	80089fc <_strtod_l+0x644>
 8008dca:	f1ba 0f01 	cmp.w	sl, #1
 8008dce:	d103      	bne.n	8008dd8 <_strtod_l+0xa20>
 8008dd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	f43f ada5 	beq.w	8008922 <_strtod_l+0x56a>
 8008dd8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008e88 <_strtod_l+0xad0>
 8008ddc:	4f35      	ldr	r7, [pc, #212]	@ (8008eb4 <_strtod_l+0xafc>)
 8008dde:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008de2:	2600      	movs	r6, #0
 8008de4:	e7b1      	b.n	8008d4a <_strtod_l+0x992>
 8008de6:	4f34      	ldr	r7, [pc, #208]	@ (8008eb8 <_strtod_l+0xb00>)
 8008de8:	2600      	movs	r6, #0
 8008dea:	e7aa      	b.n	8008d42 <_strtod_l+0x98a>
 8008dec:	4b32      	ldr	r3, [pc, #200]	@ (8008eb8 <_strtod_l+0xb00>)
 8008dee:	4630      	mov	r0, r6
 8008df0:	4639      	mov	r1, r7
 8008df2:	2200      	movs	r2, #0
 8008df4:	f7f7 fc00 	bl	80005f8 <__aeabi_dmul>
 8008df8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008dfa:	4606      	mov	r6, r0
 8008dfc:	460f      	mov	r7, r1
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d09f      	beq.n	8008d42 <_strtod_l+0x98a>
 8008e02:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008e06:	e7a0      	b.n	8008d4a <_strtod_l+0x992>
 8008e08:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008e90 <_strtod_l+0xad8>
 8008e0c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008e10:	ec57 6b17 	vmov	r6, r7, d7
 8008e14:	e799      	b.n	8008d4a <_strtod_l+0x992>
 8008e16:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008e1a:	9b08      	ldr	r3, [sp, #32]
 8008e1c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d1c1      	bne.n	8008da8 <_strtod_l+0x9f0>
 8008e24:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008e28:	0d1b      	lsrs	r3, r3, #20
 8008e2a:	051b      	lsls	r3, r3, #20
 8008e2c:	429d      	cmp	r5, r3
 8008e2e:	d1bb      	bne.n	8008da8 <_strtod_l+0x9f0>
 8008e30:	4630      	mov	r0, r6
 8008e32:	4639      	mov	r1, r7
 8008e34:	f7f7 ff28 	bl	8000c88 <__aeabi_d2lz>
 8008e38:	f7f7 fbb0 	bl	800059c <__aeabi_l2d>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	460b      	mov	r3, r1
 8008e40:	4630      	mov	r0, r6
 8008e42:	4639      	mov	r1, r7
 8008e44:	f7f7 fa20 	bl	8000288 <__aeabi_dsub>
 8008e48:	460b      	mov	r3, r1
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008e50:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008e54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e56:	ea46 060a 	orr.w	r6, r6, sl
 8008e5a:	431e      	orrs	r6, r3
 8008e5c:	d06f      	beq.n	8008f3e <_strtod_l+0xb86>
 8008e5e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008e98 <_strtod_l+0xae0>)
 8008e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e64:	f7f7 fe3a 	bl	8000adc <__aeabi_dcmplt>
 8008e68:	2800      	cmp	r0, #0
 8008e6a:	f47f accf 	bne.w	800880c <_strtod_l+0x454>
 8008e6e:	a30c      	add	r3, pc, #48	@ (adr r3, 8008ea0 <_strtod_l+0xae8>)
 8008e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e78:	f7f7 fe4e 	bl	8000b18 <__aeabi_dcmpgt>
 8008e7c:	2800      	cmp	r0, #0
 8008e7e:	d093      	beq.n	8008da8 <_strtod_l+0x9f0>
 8008e80:	e4c4      	b.n	800880c <_strtod_l+0x454>
 8008e82:	bf00      	nop
 8008e84:	f3af 8000 	nop.w
 8008e88:	00000000 	.word	0x00000000
 8008e8c:	bff00000 	.word	0xbff00000
 8008e90:	00000000 	.word	0x00000000
 8008e94:	3ff00000 	.word	0x3ff00000
 8008e98:	94a03595 	.word	0x94a03595
 8008e9c:	3fdfffff 	.word	0x3fdfffff
 8008ea0:	35afe535 	.word	0x35afe535
 8008ea4:	3fe00000 	.word	0x3fe00000
 8008ea8:	000fffff 	.word	0x000fffff
 8008eac:	7ff00000 	.word	0x7ff00000
 8008eb0:	7fefffff 	.word	0x7fefffff
 8008eb4:	3ff00000 	.word	0x3ff00000
 8008eb8:	3fe00000 	.word	0x3fe00000
 8008ebc:	7fe00000 	.word	0x7fe00000
 8008ec0:	7c9fffff 	.word	0x7c9fffff
 8008ec4:	9b08      	ldr	r3, [sp, #32]
 8008ec6:	b323      	cbz	r3, 8008f12 <_strtod_l+0xb5a>
 8008ec8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008ecc:	d821      	bhi.n	8008f12 <_strtod_l+0xb5a>
 8008ece:	a328      	add	r3, pc, #160	@ (adr r3, 8008f70 <_strtod_l+0xbb8>)
 8008ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed4:	4630      	mov	r0, r6
 8008ed6:	4639      	mov	r1, r7
 8008ed8:	f7f7 fe0a 	bl	8000af0 <__aeabi_dcmple>
 8008edc:	b1a0      	cbz	r0, 8008f08 <_strtod_l+0xb50>
 8008ede:	4639      	mov	r1, r7
 8008ee0:	4630      	mov	r0, r6
 8008ee2:	f7f7 fe61 	bl	8000ba8 <__aeabi_d2uiz>
 8008ee6:	2801      	cmp	r0, #1
 8008ee8:	bf38      	it	cc
 8008eea:	2001      	movcc	r0, #1
 8008eec:	f7f7 fb0a 	bl	8000504 <__aeabi_ui2d>
 8008ef0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ef2:	4606      	mov	r6, r0
 8008ef4:	460f      	mov	r7, r1
 8008ef6:	b9fb      	cbnz	r3, 8008f38 <_strtod_l+0xb80>
 8008ef8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008efc:	9014      	str	r0, [sp, #80]	@ 0x50
 8008efe:	9315      	str	r3, [sp, #84]	@ 0x54
 8008f00:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008f04:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008f08:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008f0a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008f0e:	1b5b      	subs	r3, r3, r5
 8008f10:	9311      	str	r3, [sp, #68]	@ 0x44
 8008f12:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008f16:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008f1a:	f7ff f8f1 	bl	8008100 <__ulp>
 8008f1e:	4650      	mov	r0, sl
 8008f20:	ec53 2b10 	vmov	r2, r3, d0
 8008f24:	4659      	mov	r1, fp
 8008f26:	f7f7 fb67 	bl	80005f8 <__aeabi_dmul>
 8008f2a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008f2e:	f7f7 f9ad 	bl	800028c <__adddf3>
 8008f32:	4682      	mov	sl, r0
 8008f34:	468b      	mov	fp, r1
 8008f36:	e770      	b.n	8008e1a <_strtod_l+0xa62>
 8008f38:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008f3c:	e7e0      	b.n	8008f00 <_strtod_l+0xb48>
 8008f3e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008f78 <_strtod_l+0xbc0>)
 8008f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f44:	f7f7 fdca 	bl	8000adc <__aeabi_dcmplt>
 8008f48:	e798      	b.n	8008e7c <_strtod_l+0xac4>
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f4e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008f50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f52:	6013      	str	r3, [r2, #0]
 8008f54:	f7ff ba6d 	b.w	8008432 <_strtod_l+0x7a>
 8008f58:	2a65      	cmp	r2, #101	@ 0x65
 8008f5a:	f43f ab66 	beq.w	800862a <_strtod_l+0x272>
 8008f5e:	2a45      	cmp	r2, #69	@ 0x45
 8008f60:	f43f ab63 	beq.w	800862a <_strtod_l+0x272>
 8008f64:	2301      	movs	r3, #1
 8008f66:	f7ff bb9e 	b.w	80086a6 <_strtod_l+0x2ee>
 8008f6a:	bf00      	nop
 8008f6c:	f3af 8000 	nop.w
 8008f70:	ffc00000 	.word	0xffc00000
 8008f74:	41dfffff 	.word	0x41dfffff
 8008f78:	94a03595 	.word	0x94a03595
 8008f7c:	3fcfffff 	.word	0x3fcfffff

08008f80 <_strtod_r>:
 8008f80:	4b01      	ldr	r3, [pc, #4]	@ (8008f88 <_strtod_r+0x8>)
 8008f82:	f7ff ba19 	b.w	80083b8 <_strtod_l>
 8008f86:	bf00      	nop
 8008f88:	20000068 	.word	0x20000068

08008f8c <_strtol_l.constprop.0>:
 8008f8c:	2b24      	cmp	r3, #36	@ 0x24
 8008f8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f92:	4686      	mov	lr, r0
 8008f94:	4690      	mov	r8, r2
 8008f96:	d801      	bhi.n	8008f9c <_strtol_l.constprop.0+0x10>
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d106      	bne.n	8008faa <_strtol_l.constprop.0+0x1e>
 8008f9c:	f7fd fdbc 	bl	8006b18 <__errno>
 8008fa0:	2316      	movs	r3, #22
 8008fa2:	6003      	str	r3, [r0, #0]
 8008fa4:	2000      	movs	r0, #0
 8008fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008faa:	4834      	ldr	r0, [pc, #208]	@ (800907c <_strtol_l.constprop.0+0xf0>)
 8008fac:	460d      	mov	r5, r1
 8008fae:	462a      	mov	r2, r5
 8008fb0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008fb4:	5d06      	ldrb	r6, [r0, r4]
 8008fb6:	f016 0608 	ands.w	r6, r6, #8
 8008fba:	d1f8      	bne.n	8008fae <_strtol_l.constprop.0+0x22>
 8008fbc:	2c2d      	cmp	r4, #45	@ 0x2d
 8008fbe:	d12d      	bne.n	800901c <_strtol_l.constprop.0+0x90>
 8008fc0:	782c      	ldrb	r4, [r5, #0]
 8008fc2:	2601      	movs	r6, #1
 8008fc4:	1c95      	adds	r5, r2, #2
 8008fc6:	f033 0210 	bics.w	r2, r3, #16
 8008fca:	d109      	bne.n	8008fe0 <_strtol_l.constprop.0+0x54>
 8008fcc:	2c30      	cmp	r4, #48	@ 0x30
 8008fce:	d12a      	bne.n	8009026 <_strtol_l.constprop.0+0x9a>
 8008fd0:	782a      	ldrb	r2, [r5, #0]
 8008fd2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008fd6:	2a58      	cmp	r2, #88	@ 0x58
 8008fd8:	d125      	bne.n	8009026 <_strtol_l.constprop.0+0x9a>
 8008fda:	786c      	ldrb	r4, [r5, #1]
 8008fdc:	2310      	movs	r3, #16
 8008fde:	3502      	adds	r5, #2
 8008fe0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008fe4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008fe8:	2200      	movs	r2, #0
 8008fea:	fbbc f9f3 	udiv	r9, ip, r3
 8008fee:	4610      	mov	r0, r2
 8008ff0:	fb03 ca19 	mls	sl, r3, r9, ip
 8008ff4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008ff8:	2f09      	cmp	r7, #9
 8008ffa:	d81b      	bhi.n	8009034 <_strtol_l.constprop.0+0xa8>
 8008ffc:	463c      	mov	r4, r7
 8008ffe:	42a3      	cmp	r3, r4
 8009000:	dd27      	ble.n	8009052 <_strtol_l.constprop.0+0xc6>
 8009002:	1c57      	adds	r7, r2, #1
 8009004:	d007      	beq.n	8009016 <_strtol_l.constprop.0+0x8a>
 8009006:	4581      	cmp	r9, r0
 8009008:	d320      	bcc.n	800904c <_strtol_l.constprop.0+0xc0>
 800900a:	d101      	bne.n	8009010 <_strtol_l.constprop.0+0x84>
 800900c:	45a2      	cmp	sl, r4
 800900e:	db1d      	blt.n	800904c <_strtol_l.constprop.0+0xc0>
 8009010:	fb00 4003 	mla	r0, r0, r3, r4
 8009014:	2201      	movs	r2, #1
 8009016:	f815 4b01 	ldrb.w	r4, [r5], #1
 800901a:	e7eb      	b.n	8008ff4 <_strtol_l.constprop.0+0x68>
 800901c:	2c2b      	cmp	r4, #43	@ 0x2b
 800901e:	bf04      	itt	eq
 8009020:	782c      	ldrbeq	r4, [r5, #0]
 8009022:	1c95      	addeq	r5, r2, #2
 8009024:	e7cf      	b.n	8008fc6 <_strtol_l.constprop.0+0x3a>
 8009026:	2b00      	cmp	r3, #0
 8009028:	d1da      	bne.n	8008fe0 <_strtol_l.constprop.0+0x54>
 800902a:	2c30      	cmp	r4, #48	@ 0x30
 800902c:	bf0c      	ite	eq
 800902e:	2308      	moveq	r3, #8
 8009030:	230a      	movne	r3, #10
 8009032:	e7d5      	b.n	8008fe0 <_strtol_l.constprop.0+0x54>
 8009034:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009038:	2f19      	cmp	r7, #25
 800903a:	d801      	bhi.n	8009040 <_strtol_l.constprop.0+0xb4>
 800903c:	3c37      	subs	r4, #55	@ 0x37
 800903e:	e7de      	b.n	8008ffe <_strtol_l.constprop.0+0x72>
 8009040:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009044:	2f19      	cmp	r7, #25
 8009046:	d804      	bhi.n	8009052 <_strtol_l.constprop.0+0xc6>
 8009048:	3c57      	subs	r4, #87	@ 0x57
 800904a:	e7d8      	b.n	8008ffe <_strtol_l.constprop.0+0x72>
 800904c:	f04f 32ff 	mov.w	r2, #4294967295
 8009050:	e7e1      	b.n	8009016 <_strtol_l.constprop.0+0x8a>
 8009052:	1c53      	adds	r3, r2, #1
 8009054:	d108      	bne.n	8009068 <_strtol_l.constprop.0+0xdc>
 8009056:	2322      	movs	r3, #34	@ 0x22
 8009058:	f8ce 3000 	str.w	r3, [lr]
 800905c:	4660      	mov	r0, ip
 800905e:	f1b8 0f00 	cmp.w	r8, #0
 8009062:	d0a0      	beq.n	8008fa6 <_strtol_l.constprop.0+0x1a>
 8009064:	1e69      	subs	r1, r5, #1
 8009066:	e006      	b.n	8009076 <_strtol_l.constprop.0+0xea>
 8009068:	b106      	cbz	r6, 800906c <_strtol_l.constprop.0+0xe0>
 800906a:	4240      	negs	r0, r0
 800906c:	f1b8 0f00 	cmp.w	r8, #0
 8009070:	d099      	beq.n	8008fa6 <_strtol_l.constprop.0+0x1a>
 8009072:	2a00      	cmp	r2, #0
 8009074:	d1f6      	bne.n	8009064 <_strtol_l.constprop.0+0xd8>
 8009076:	f8c8 1000 	str.w	r1, [r8]
 800907a:	e794      	b.n	8008fa6 <_strtol_l.constprop.0+0x1a>
 800907c:	0800a781 	.word	0x0800a781

08009080 <_strtol_r>:
 8009080:	f7ff bf84 	b.w	8008f8c <_strtol_l.constprop.0>

08009084 <__ssputs_r>:
 8009084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009088:	688e      	ldr	r6, [r1, #8]
 800908a:	461f      	mov	r7, r3
 800908c:	42be      	cmp	r6, r7
 800908e:	680b      	ldr	r3, [r1, #0]
 8009090:	4682      	mov	sl, r0
 8009092:	460c      	mov	r4, r1
 8009094:	4690      	mov	r8, r2
 8009096:	d82d      	bhi.n	80090f4 <__ssputs_r+0x70>
 8009098:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800909c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80090a0:	d026      	beq.n	80090f0 <__ssputs_r+0x6c>
 80090a2:	6965      	ldr	r5, [r4, #20]
 80090a4:	6909      	ldr	r1, [r1, #16]
 80090a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80090aa:	eba3 0901 	sub.w	r9, r3, r1
 80090ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80090b2:	1c7b      	adds	r3, r7, #1
 80090b4:	444b      	add	r3, r9
 80090b6:	106d      	asrs	r5, r5, #1
 80090b8:	429d      	cmp	r5, r3
 80090ba:	bf38      	it	cc
 80090bc:	461d      	movcc	r5, r3
 80090be:	0553      	lsls	r3, r2, #21
 80090c0:	d527      	bpl.n	8009112 <__ssputs_r+0x8e>
 80090c2:	4629      	mov	r1, r5
 80090c4:	f7fe fc1c 	bl	8007900 <_malloc_r>
 80090c8:	4606      	mov	r6, r0
 80090ca:	b360      	cbz	r0, 8009126 <__ssputs_r+0xa2>
 80090cc:	6921      	ldr	r1, [r4, #16]
 80090ce:	464a      	mov	r2, r9
 80090d0:	f000 fa18 	bl	8009504 <memcpy>
 80090d4:	89a3      	ldrh	r3, [r4, #12]
 80090d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80090da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090de:	81a3      	strh	r3, [r4, #12]
 80090e0:	6126      	str	r6, [r4, #16]
 80090e2:	6165      	str	r5, [r4, #20]
 80090e4:	444e      	add	r6, r9
 80090e6:	eba5 0509 	sub.w	r5, r5, r9
 80090ea:	6026      	str	r6, [r4, #0]
 80090ec:	60a5      	str	r5, [r4, #8]
 80090ee:	463e      	mov	r6, r7
 80090f0:	42be      	cmp	r6, r7
 80090f2:	d900      	bls.n	80090f6 <__ssputs_r+0x72>
 80090f4:	463e      	mov	r6, r7
 80090f6:	6820      	ldr	r0, [r4, #0]
 80090f8:	4632      	mov	r2, r6
 80090fa:	4641      	mov	r1, r8
 80090fc:	f000 f9c6 	bl	800948c <memmove>
 8009100:	68a3      	ldr	r3, [r4, #8]
 8009102:	1b9b      	subs	r3, r3, r6
 8009104:	60a3      	str	r3, [r4, #8]
 8009106:	6823      	ldr	r3, [r4, #0]
 8009108:	4433      	add	r3, r6
 800910a:	6023      	str	r3, [r4, #0]
 800910c:	2000      	movs	r0, #0
 800910e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009112:	462a      	mov	r2, r5
 8009114:	f000 fd89 	bl	8009c2a <_realloc_r>
 8009118:	4606      	mov	r6, r0
 800911a:	2800      	cmp	r0, #0
 800911c:	d1e0      	bne.n	80090e0 <__ssputs_r+0x5c>
 800911e:	6921      	ldr	r1, [r4, #16]
 8009120:	4650      	mov	r0, sl
 8009122:	f7fe fb79 	bl	8007818 <_free_r>
 8009126:	230c      	movs	r3, #12
 8009128:	f8ca 3000 	str.w	r3, [sl]
 800912c:	89a3      	ldrh	r3, [r4, #12]
 800912e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009132:	81a3      	strh	r3, [r4, #12]
 8009134:	f04f 30ff 	mov.w	r0, #4294967295
 8009138:	e7e9      	b.n	800910e <__ssputs_r+0x8a>
	...

0800913c <_svfiprintf_r>:
 800913c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009140:	4698      	mov	r8, r3
 8009142:	898b      	ldrh	r3, [r1, #12]
 8009144:	061b      	lsls	r3, r3, #24
 8009146:	b09d      	sub	sp, #116	@ 0x74
 8009148:	4607      	mov	r7, r0
 800914a:	460d      	mov	r5, r1
 800914c:	4614      	mov	r4, r2
 800914e:	d510      	bpl.n	8009172 <_svfiprintf_r+0x36>
 8009150:	690b      	ldr	r3, [r1, #16]
 8009152:	b973      	cbnz	r3, 8009172 <_svfiprintf_r+0x36>
 8009154:	2140      	movs	r1, #64	@ 0x40
 8009156:	f7fe fbd3 	bl	8007900 <_malloc_r>
 800915a:	6028      	str	r0, [r5, #0]
 800915c:	6128      	str	r0, [r5, #16]
 800915e:	b930      	cbnz	r0, 800916e <_svfiprintf_r+0x32>
 8009160:	230c      	movs	r3, #12
 8009162:	603b      	str	r3, [r7, #0]
 8009164:	f04f 30ff 	mov.w	r0, #4294967295
 8009168:	b01d      	add	sp, #116	@ 0x74
 800916a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800916e:	2340      	movs	r3, #64	@ 0x40
 8009170:	616b      	str	r3, [r5, #20]
 8009172:	2300      	movs	r3, #0
 8009174:	9309      	str	r3, [sp, #36]	@ 0x24
 8009176:	2320      	movs	r3, #32
 8009178:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800917c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009180:	2330      	movs	r3, #48	@ 0x30
 8009182:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009320 <_svfiprintf_r+0x1e4>
 8009186:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800918a:	f04f 0901 	mov.w	r9, #1
 800918e:	4623      	mov	r3, r4
 8009190:	469a      	mov	sl, r3
 8009192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009196:	b10a      	cbz	r2, 800919c <_svfiprintf_r+0x60>
 8009198:	2a25      	cmp	r2, #37	@ 0x25
 800919a:	d1f9      	bne.n	8009190 <_svfiprintf_r+0x54>
 800919c:	ebba 0b04 	subs.w	fp, sl, r4
 80091a0:	d00b      	beq.n	80091ba <_svfiprintf_r+0x7e>
 80091a2:	465b      	mov	r3, fp
 80091a4:	4622      	mov	r2, r4
 80091a6:	4629      	mov	r1, r5
 80091a8:	4638      	mov	r0, r7
 80091aa:	f7ff ff6b 	bl	8009084 <__ssputs_r>
 80091ae:	3001      	adds	r0, #1
 80091b0:	f000 80a7 	beq.w	8009302 <_svfiprintf_r+0x1c6>
 80091b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091b6:	445a      	add	r2, fp
 80091b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80091ba:	f89a 3000 	ldrb.w	r3, [sl]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	f000 809f 	beq.w	8009302 <_svfiprintf_r+0x1c6>
 80091c4:	2300      	movs	r3, #0
 80091c6:	f04f 32ff 	mov.w	r2, #4294967295
 80091ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091ce:	f10a 0a01 	add.w	sl, sl, #1
 80091d2:	9304      	str	r3, [sp, #16]
 80091d4:	9307      	str	r3, [sp, #28]
 80091d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80091da:	931a      	str	r3, [sp, #104]	@ 0x68
 80091dc:	4654      	mov	r4, sl
 80091de:	2205      	movs	r2, #5
 80091e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091e4:	484e      	ldr	r0, [pc, #312]	@ (8009320 <_svfiprintf_r+0x1e4>)
 80091e6:	f7f6 fff3 	bl	80001d0 <memchr>
 80091ea:	9a04      	ldr	r2, [sp, #16]
 80091ec:	b9d8      	cbnz	r0, 8009226 <_svfiprintf_r+0xea>
 80091ee:	06d0      	lsls	r0, r2, #27
 80091f0:	bf44      	itt	mi
 80091f2:	2320      	movmi	r3, #32
 80091f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091f8:	0711      	lsls	r1, r2, #28
 80091fa:	bf44      	itt	mi
 80091fc:	232b      	movmi	r3, #43	@ 0x2b
 80091fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009202:	f89a 3000 	ldrb.w	r3, [sl]
 8009206:	2b2a      	cmp	r3, #42	@ 0x2a
 8009208:	d015      	beq.n	8009236 <_svfiprintf_r+0xfa>
 800920a:	9a07      	ldr	r2, [sp, #28]
 800920c:	4654      	mov	r4, sl
 800920e:	2000      	movs	r0, #0
 8009210:	f04f 0c0a 	mov.w	ip, #10
 8009214:	4621      	mov	r1, r4
 8009216:	f811 3b01 	ldrb.w	r3, [r1], #1
 800921a:	3b30      	subs	r3, #48	@ 0x30
 800921c:	2b09      	cmp	r3, #9
 800921e:	d94b      	bls.n	80092b8 <_svfiprintf_r+0x17c>
 8009220:	b1b0      	cbz	r0, 8009250 <_svfiprintf_r+0x114>
 8009222:	9207      	str	r2, [sp, #28]
 8009224:	e014      	b.n	8009250 <_svfiprintf_r+0x114>
 8009226:	eba0 0308 	sub.w	r3, r0, r8
 800922a:	fa09 f303 	lsl.w	r3, r9, r3
 800922e:	4313      	orrs	r3, r2
 8009230:	9304      	str	r3, [sp, #16]
 8009232:	46a2      	mov	sl, r4
 8009234:	e7d2      	b.n	80091dc <_svfiprintf_r+0xa0>
 8009236:	9b03      	ldr	r3, [sp, #12]
 8009238:	1d19      	adds	r1, r3, #4
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	9103      	str	r1, [sp, #12]
 800923e:	2b00      	cmp	r3, #0
 8009240:	bfbb      	ittet	lt
 8009242:	425b      	neglt	r3, r3
 8009244:	f042 0202 	orrlt.w	r2, r2, #2
 8009248:	9307      	strge	r3, [sp, #28]
 800924a:	9307      	strlt	r3, [sp, #28]
 800924c:	bfb8      	it	lt
 800924e:	9204      	strlt	r2, [sp, #16]
 8009250:	7823      	ldrb	r3, [r4, #0]
 8009252:	2b2e      	cmp	r3, #46	@ 0x2e
 8009254:	d10a      	bne.n	800926c <_svfiprintf_r+0x130>
 8009256:	7863      	ldrb	r3, [r4, #1]
 8009258:	2b2a      	cmp	r3, #42	@ 0x2a
 800925a:	d132      	bne.n	80092c2 <_svfiprintf_r+0x186>
 800925c:	9b03      	ldr	r3, [sp, #12]
 800925e:	1d1a      	adds	r2, r3, #4
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	9203      	str	r2, [sp, #12]
 8009264:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009268:	3402      	adds	r4, #2
 800926a:	9305      	str	r3, [sp, #20]
 800926c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009330 <_svfiprintf_r+0x1f4>
 8009270:	7821      	ldrb	r1, [r4, #0]
 8009272:	2203      	movs	r2, #3
 8009274:	4650      	mov	r0, sl
 8009276:	f7f6 ffab 	bl	80001d0 <memchr>
 800927a:	b138      	cbz	r0, 800928c <_svfiprintf_r+0x150>
 800927c:	9b04      	ldr	r3, [sp, #16]
 800927e:	eba0 000a 	sub.w	r0, r0, sl
 8009282:	2240      	movs	r2, #64	@ 0x40
 8009284:	4082      	lsls	r2, r0
 8009286:	4313      	orrs	r3, r2
 8009288:	3401      	adds	r4, #1
 800928a:	9304      	str	r3, [sp, #16]
 800928c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009290:	4824      	ldr	r0, [pc, #144]	@ (8009324 <_svfiprintf_r+0x1e8>)
 8009292:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009296:	2206      	movs	r2, #6
 8009298:	f7f6 ff9a 	bl	80001d0 <memchr>
 800929c:	2800      	cmp	r0, #0
 800929e:	d036      	beq.n	800930e <_svfiprintf_r+0x1d2>
 80092a0:	4b21      	ldr	r3, [pc, #132]	@ (8009328 <_svfiprintf_r+0x1ec>)
 80092a2:	bb1b      	cbnz	r3, 80092ec <_svfiprintf_r+0x1b0>
 80092a4:	9b03      	ldr	r3, [sp, #12]
 80092a6:	3307      	adds	r3, #7
 80092a8:	f023 0307 	bic.w	r3, r3, #7
 80092ac:	3308      	adds	r3, #8
 80092ae:	9303      	str	r3, [sp, #12]
 80092b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092b2:	4433      	add	r3, r6
 80092b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80092b6:	e76a      	b.n	800918e <_svfiprintf_r+0x52>
 80092b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80092bc:	460c      	mov	r4, r1
 80092be:	2001      	movs	r0, #1
 80092c0:	e7a8      	b.n	8009214 <_svfiprintf_r+0xd8>
 80092c2:	2300      	movs	r3, #0
 80092c4:	3401      	adds	r4, #1
 80092c6:	9305      	str	r3, [sp, #20]
 80092c8:	4619      	mov	r1, r3
 80092ca:	f04f 0c0a 	mov.w	ip, #10
 80092ce:	4620      	mov	r0, r4
 80092d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092d4:	3a30      	subs	r2, #48	@ 0x30
 80092d6:	2a09      	cmp	r2, #9
 80092d8:	d903      	bls.n	80092e2 <_svfiprintf_r+0x1a6>
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d0c6      	beq.n	800926c <_svfiprintf_r+0x130>
 80092de:	9105      	str	r1, [sp, #20]
 80092e0:	e7c4      	b.n	800926c <_svfiprintf_r+0x130>
 80092e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80092e6:	4604      	mov	r4, r0
 80092e8:	2301      	movs	r3, #1
 80092ea:	e7f0      	b.n	80092ce <_svfiprintf_r+0x192>
 80092ec:	ab03      	add	r3, sp, #12
 80092ee:	9300      	str	r3, [sp, #0]
 80092f0:	462a      	mov	r2, r5
 80092f2:	4b0e      	ldr	r3, [pc, #56]	@ (800932c <_svfiprintf_r+0x1f0>)
 80092f4:	a904      	add	r1, sp, #16
 80092f6:	4638      	mov	r0, r7
 80092f8:	f7fc fcca 	bl	8005c90 <_printf_float>
 80092fc:	1c42      	adds	r2, r0, #1
 80092fe:	4606      	mov	r6, r0
 8009300:	d1d6      	bne.n	80092b0 <_svfiprintf_r+0x174>
 8009302:	89ab      	ldrh	r3, [r5, #12]
 8009304:	065b      	lsls	r3, r3, #25
 8009306:	f53f af2d 	bmi.w	8009164 <_svfiprintf_r+0x28>
 800930a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800930c:	e72c      	b.n	8009168 <_svfiprintf_r+0x2c>
 800930e:	ab03      	add	r3, sp, #12
 8009310:	9300      	str	r3, [sp, #0]
 8009312:	462a      	mov	r2, r5
 8009314:	4b05      	ldr	r3, [pc, #20]	@ (800932c <_svfiprintf_r+0x1f0>)
 8009316:	a904      	add	r1, sp, #16
 8009318:	4638      	mov	r0, r7
 800931a:	f7fc ff51 	bl	80061c0 <_printf_i>
 800931e:	e7ed      	b.n	80092fc <_svfiprintf_r+0x1c0>
 8009320:	0800a881 	.word	0x0800a881
 8009324:	0800a88b 	.word	0x0800a88b
 8009328:	08005c91 	.word	0x08005c91
 800932c:	08009085 	.word	0x08009085
 8009330:	0800a887 	.word	0x0800a887

08009334 <__sflush_r>:
 8009334:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800933c:	0716      	lsls	r6, r2, #28
 800933e:	4605      	mov	r5, r0
 8009340:	460c      	mov	r4, r1
 8009342:	d454      	bmi.n	80093ee <__sflush_r+0xba>
 8009344:	684b      	ldr	r3, [r1, #4]
 8009346:	2b00      	cmp	r3, #0
 8009348:	dc02      	bgt.n	8009350 <__sflush_r+0x1c>
 800934a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800934c:	2b00      	cmp	r3, #0
 800934e:	dd48      	ble.n	80093e2 <__sflush_r+0xae>
 8009350:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009352:	2e00      	cmp	r6, #0
 8009354:	d045      	beq.n	80093e2 <__sflush_r+0xae>
 8009356:	2300      	movs	r3, #0
 8009358:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800935c:	682f      	ldr	r7, [r5, #0]
 800935e:	6a21      	ldr	r1, [r4, #32]
 8009360:	602b      	str	r3, [r5, #0]
 8009362:	d030      	beq.n	80093c6 <__sflush_r+0x92>
 8009364:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009366:	89a3      	ldrh	r3, [r4, #12]
 8009368:	0759      	lsls	r1, r3, #29
 800936a:	d505      	bpl.n	8009378 <__sflush_r+0x44>
 800936c:	6863      	ldr	r3, [r4, #4]
 800936e:	1ad2      	subs	r2, r2, r3
 8009370:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009372:	b10b      	cbz	r3, 8009378 <__sflush_r+0x44>
 8009374:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009376:	1ad2      	subs	r2, r2, r3
 8009378:	2300      	movs	r3, #0
 800937a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800937c:	6a21      	ldr	r1, [r4, #32]
 800937e:	4628      	mov	r0, r5
 8009380:	47b0      	blx	r6
 8009382:	1c43      	adds	r3, r0, #1
 8009384:	89a3      	ldrh	r3, [r4, #12]
 8009386:	d106      	bne.n	8009396 <__sflush_r+0x62>
 8009388:	6829      	ldr	r1, [r5, #0]
 800938a:	291d      	cmp	r1, #29
 800938c:	d82b      	bhi.n	80093e6 <__sflush_r+0xb2>
 800938e:	4a2a      	ldr	r2, [pc, #168]	@ (8009438 <__sflush_r+0x104>)
 8009390:	410a      	asrs	r2, r1
 8009392:	07d6      	lsls	r6, r2, #31
 8009394:	d427      	bmi.n	80093e6 <__sflush_r+0xb2>
 8009396:	2200      	movs	r2, #0
 8009398:	6062      	str	r2, [r4, #4]
 800939a:	04d9      	lsls	r1, r3, #19
 800939c:	6922      	ldr	r2, [r4, #16]
 800939e:	6022      	str	r2, [r4, #0]
 80093a0:	d504      	bpl.n	80093ac <__sflush_r+0x78>
 80093a2:	1c42      	adds	r2, r0, #1
 80093a4:	d101      	bne.n	80093aa <__sflush_r+0x76>
 80093a6:	682b      	ldr	r3, [r5, #0]
 80093a8:	b903      	cbnz	r3, 80093ac <__sflush_r+0x78>
 80093aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80093ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80093ae:	602f      	str	r7, [r5, #0]
 80093b0:	b1b9      	cbz	r1, 80093e2 <__sflush_r+0xae>
 80093b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80093b6:	4299      	cmp	r1, r3
 80093b8:	d002      	beq.n	80093c0 <__sflush_r+0x8c>
 80093ba:	4628      	mov	r0, r5
 80093bc:	f7fe fa2c 	bl	8007818 <_free_r>
 80093c0:	2300      	movs	r3, #0
 80093c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80093c4:	e00d      	b.n	80093e2 <__sflush_r+0xae>
 80093c6:	2301      	movs	r3, #1
 80093c8:	4628      	mov	r0, r5
 80093ca:	47b0      	blx	r6
 80093cc:	4602      	mov	r2, r0
 80093ce:	1c50      	adds	r0, r2, #1
 80093d0:	d1c9      	bne.n	8009366 <__sflush_r+0x32>
 80093d2:	682b      	ldr	r3, [r5, #0]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d0c6      	beq.n	8009366 <__sflush_r+0x32>
 80093d8:	2b1d      	cmp	r3, #29
 80093da:	d001      	beq.n	80093e0 <__sflush_r+0xac>
 80093dc:	2b16      	cmp	r3, #22
 80093de:	d11e      	bne.n	800941e <__sflush_r+0xea>
 80093e0:	602f      	str	r7, [r5, #0]
 80093e2:	2000      	movs	r0, #0
 80093e4:	e022      	b.n	800942c <__sflush_r+0xf8>
 80093e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093ea:	b21b      	sxth	r3, r3
 80093ec:	e01b      	b.n	8009426 <__sflush_r+0xf2>
 80093ee:	690f      	ldr	r7, [r1, #16]
 80093f0:	2f00      	cmp	r7, #0
 80093f2:	d0f6      	beq.n	80093e2 <__sflush_r+0xae>
 80093f4:	0793      	lsls	r3, r2, #30
 80093f6:	680e      	ldr	r6, [r1, #0]
 80093f8:	bf08      	it	eq
 80093fa:	694b      	ldreq	r3, [r1, #20]
 80093fc:	600f      	str	r7, [r1, #0]
 80093fe:	bf18      	it	ne
 8009400:	2300      	movne	r3, #0
 8009402:	eba6 0807 	sub.w	r8, r6, r7
 8009406:	608b      	str	r3, [r1, #8]
 8009408:	f1b8 0f00 	cmp.w	r8, #0
 800940c:	dde9      	ble.n	80093e2 <__sflush_r+0xae>
 800940e:	6a21      	ldr	r1, [r4, #32]
 8009410:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009412:	4643      	mov	r3, r8
 8009414:	463a      	mov	r2, r7
 8009416:	4628      	mov	r0, r5
 8009418:	47b0      	blx	r6
 800941a:	2800      	cmp	r0, #0
 800941c:	dc08      	bgt.n	8009430 <__sflush_r+0xfc>
 800941e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009422:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009426:	81a3      	strh	r3, [r4, #12]
 8009428:	f04f 30ff 	mov.w	r0, #4294967295
 800942c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009430:	4407      	add	r7, r0
 8009432:	eba8 0800 	sub.w	r8, r8, r0
 8009436:	e7e7      	b.n	8009408 <__sflush_r+0xd4>
 8009438:	dfbffffe 	.word	0xdfbffffe

0800943c <_fflush_r>:
 800943c:	b538      	push	{r3, r4, r5, lr}
 800943e:	690b      	ldr	r3, [r1, #16]
 8009440:	4605      	mov	r5, r0
 8009442:	460c      	mov	r4, r1
 8009444:	b913      	cbnz	r3, 800944c <_fflush_r+0x10>
 8009446:	2500      	movs	r5, #0
 8009448:	4628      	mov	r0, r5
 800944a:	bd38      	pop	{r3, r4, r5, pc}
 800944c:	b118      	cbz	r0, 8009456 <_fflush_r+0x1a>
 800944e:	6a03      	ldr	r3, [r0, #32]
 8009450:	b90b      	cbnz	r3, 8009456 <_fflush_r+0x1a>
 8009452:	f7fd fa75 	bl	8006940 <__sinit>
 8009456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d0f3      	beq.n	8009446 <_fflush_r+0xa>
 800945e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009460:	07d0      	lsls	r0, r2, #31
 8009462:	d404      	bmi.n	800946e <_fflush_r+0x32>
 8009464:	0599      	lsls	r1, r3, #22
 8009466:	d402      	bmi.n	800946e <_fflush_r+0x32>
 8009468:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800946a:	f7fd fb80 	bl	8006b6e <__retarget_lock_acquire_recursive>
 800946e:	4628      	mov	r0, r5
 8009470:	4621      	mov	r1, r4
 8009472:	f7ff ff5f 	bl	8009334 <__sflush_r>
 8009476:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009478:	07da      	lsls	r2, r3, #31
 800947a:	4605      	mov	r5, r0
 800947c:	d4e4      	bmi.n	8009448 <_fflush_r+0xc>
 800947e:	89a3      	ldrh	r3, [r4, #12]
 8009480:	059b      	lsls	r3, r3, #22
 8009482:	d4e1      	bmi.n	8009448 <_fflush_r+0xc>
 8009484:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009486:	f7fd fb73 	bl	8006b70 <__retarget_lock_release_recursive>
 800948a:	e7dd      	b.n	8009448 <_fflush_r+0xc>

0800948c <memmove>:
 800948c:	4288      	cmp	r0, r1
 800948e:	b510      	push	{r4, lr}
 8009490:	eb01 0402 	add.w	r4, r1, r2
 8009494:	d902      	bls.n	800949c <memmove+0x10>
 8009496:	4284      	cmp	r4, r0
 8009498:	4623      	mov	r3, r4
 800949a:	d807      	bhi.n	80094ac <memmove+0x20>
 800949c:	1e43      	subs	r3, r0, #1
 800949e:	42a1      	cmp	r1, r4
 80094a0:	d008      	beq.n	80094b4 <memmove+0x28>
 80094a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094aa:	e7f8      	b.n	800949e <memmove+0x12>
 80094ac:	4402      	add	r2, r0
 80094ae:	4601      	mov	r1, r0
 80094b0:	428a      	cmp	r2, r1
 80094b2:	d100      	bne.n	80094b6 <memmove+0x2a>
 80094b4:	bd10      	pop	{r4, pc}
 80094b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094be:	e7f7      	b.n	80094b0 <memmove+0x24>

080094c0 <strncmp>:
 80094c0:	b510      	push	{r4, lr}
 80094c2:	b16a      	cbz	r2, 80094e0 <strncmp+0x20>
 80094c4:	3901      	subs	r1, #1
 80094c6:	1884      	adds	r4, r0, r2
 80094c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094cc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d103      	bne.n	80094dc <strncmp+0x1c>
 80094d4:	42a0      	cmp	r0, r4
 80094d6:	d001      	beq.n	80094dc <strncmp+0x1c>
 80094d8:	2a00      	cmp	r2, #0
 80094da:	d1f5      	bne.n	80094c8 <strncmp+0x8>
 80094dc:	1ad0      	subs	r0, r2, r3
 80094de:	bd10      	pop	{r4, pc}
 80094e0:	4610      	mov	r0, r2
 80094e2:	e7fc      	b.n	80094de <strncmp+0x1e>

080094e4 <_sbrk_r>:
 80094e4:	b538      	push	{r3, r4, r5, lr}
 80094e6:	4d06      	ldr	r5, [pc, #24]	@ (8009500 <_sbrk_r+0x1c>)
 80094e8:	2300      	movs	r3, #0
 80094ea:	4604      	mov	r4, r0
 80094ec:	4608      	mov	r0, r1
 80094ee:	602b      	str	r3, [r5, #0]
 80094f0:	f7f8 f9d8 	bl	80018a4 <_sbrk>
 80094f4:	1c43      	adds	r3, r0, #1
 80094f6:	d102      	bne.n	80094fe <_sbrk_r+0x1a>
 80094f8:	682b      	ldr	r3, [r5, #0]
 80094fa:	b103      	cbz	r3, 80094fe <_sbrk_r+0x1a>
 80094fc:	6023      	str	r3, [r4, #0]
 80094fe:	bd38      	pop	{r3, r4, r5, pc}
 8009500:	200004c4 	.word	0x200004c4

08009504 <memcpy>:
 8009504:	440a      	add	r2, r1
 8009506:	4291      	cmp	r1, r2
 8009508:	f100 33ff 	add.w	r3, r0, #4294967295
 800950c:	d100      	bne.n	8009510 <memcpy+0xc>
 800950e:	4770      	bx	lr
 8009510:	b510      	push	{r4, lr}
 8009512:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009516:	f803 4f01 	strb.w	r4, [r3, #1]!
 800951a:	4291      	cmp	r1, r2
 800951c:	d1f9      	bne.n	8009512 <memcpy+0xe>
 800951e:	bd10      	pop	{r4, pc}

08009520 <nan>:
 8009520:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009528 <nan+0x8>
 8009524:	4770      	bx	lr
 8009526:	bf00      	nop
 8009528:	00000000 	.word	0x00000000
 800952c:	7ff80000 	.word	0x7ff80000

08009530 <__assert_func>:
 8009530:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009532:	4614      	mov	r4, r2
 8009534:	461a      	mov	r2, r3
 8009536:	4b09      	ldr	r3, [pc, #36]	@ (800955c <__assert_func+0x2c>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4605      	mov	r5, r0
 800953c:	68d8      	ldr	r0, [r3, #12]
 800953e:	b954      	cbnz	r4, 8009556 <__assert_func+0x26>
 8009540:	4b07      	ldr	r3, [pc, #28]	@ (8009560 <__assert_func+0x30>)
 8009542:	461c      	mov	r4, r3
 8009544:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009548:	9100      	str	r1, [sp, #0]
 800954a:	462b      	mov	r3, r5
 800954c:	4905      	ldr	r1, [pc, #20]	@ (8009564 <__assert_func+0x34>)
 800954e:	f000 fba7 	bl	8009ca0 <fiprintf>
 8009552:	f000 fbb7 	bl	8009cc4 <abort>
 8009556:	4b04      	ldr	r3, [pc, #16]	@ (8009568 <__assert_func+0x38>)
 8009558:	e7f4      	b.n	8009544 <__assert_func+0x14>
 800955a:	bf00      	nop
 800955c:	20000018 	.word	0x20000018
 8009560:	0800a8d5 	.word	0x0800a8d5
 8009564:	0800a8a7 	.word	0x0800a8a7
 8009568:	0800a89a 	.word	0x0800a89a

0800956c <_calloc_r>:
 800956c:	b570      	push	{r4, r5, r6, lr}
 800956e:	fba1 5402 	umull	r5, r4, r1, r2
 8009572:	b93c      	cbnz	r4, 8009584 <_calloc_r+0x18>
 8009574:	4629      	mov	r1, r5
 8009576:	f7fe f9c3 	bl	8007900 <_malloc_r>
 800957a:	4606      	mov	r6, r0
 800957c:	b928      	cbnz	r0, 800958a <_calloc_r+0x1e>
 800957e:	2600      	movs	r6, #0
 8009580:	4630      	mov	r0, r6
 8009582:	bd70      	pop	{r4, r5, r6, pc}
 8009584:	220c      	movs	r2, #12
 8009586:	6002      	str	r2, [r0, #0]
 8009588:	e7f9      	b.n	800957e <_calloc_r+0x12>
 800958a:	462a      	mov	r2, r5
 800958c:	4621      	mov	r1, r4
 800958e:	f7fd fa70 	bl	8006a72 <memset>
 8009592:	e7f5      	b.n	8009580 <_calloc_r+0x14>

08009594 <rshift>:
 8009594:	6903      	ldr	r3, [r0, #16]
 8009596:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800959a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800959e:	ea4f 1261 	mov.w	r2, r1, asr #5
 80095a2:	f100 0414 	add.w	r4, r0, #20
 80095a6:	dd45      	ble.n	8009634 <rshift+0xa0>
 80095a8:	f011 011f 	ands.w	r1, r1, #31
 80095ac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80095b0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80095b4:	d10c      	bne.n	80095d0 <rshift+0x3c>
 80095b6:	f100 0710 	add.w	r7, r0, #16
 80095ba:	4629      	mov	r1, r5
 80095bc:	42b1      	cmp	r1, r6
 80095be:	d334      	bcc.n	800962a <rshift+0x96>
 80095c0:	1a9b      	subs	r3, r3, r2
 80095c2:	009b      	lsls	r3, r3, #2
 80095c4:	1eea      	subs	r2, r5, #3
 80095c6:	4296      	cmp	r6, r2
 80095c8:	bf38      	it	cc
 80095ca:	2300      	movcc	r3, #0
 80095cc:	4423      	add	r3, r4
 80095ce:	e015      	b.n	80095fc <rshift+0x68>
 80095d0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80095d4:	f1c1 0820 	rsb	r8, r1, #32
 80095d8:	40cf      	lsrs	r7, r1
 80095da:	f105 0e04 	add.w	lr, r5, #4
 80095de:	46a1      	mov	r9, r4
 80095e0:	4576      	cmp	r6, lr
 80095e2:	46f4      	mov	ip, lr
 80095e4:	d815      	bhi.n	8009612 <rshift+0x7e>
 80095e6:	1a9a      	subs	r2, r3, r2
 80095e8:	0092      	lsls	r2, r2, #2
 80095ea:	3a04      	subs	r2, #4
 80095ec:	3501      	adds	r5, #1
 80095ee:	42ae      	cmp	r6, r5
 80095f0:	bf38      	it	cc
 80095f2:	2200      	movcc	r2, #0
 80095f4:	18a3      	adds	r3, r4, r2
 80095f6:	50a7      	str	r7, [r4, r2]
 80095f8:	b107      	cbz	r7, 80095fc <rshift+0x68>
 80095fa:	3304      	adds	r3, #4
 80095fc:	1b1a      	subs	r2, r3, r4
 80095fe:	42a3      	cmp	r3, r4
 8009600:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009604:	bf08      	it	eq
 8009606:	2300      	moveq	r3, #0
 8009608:	6102      	str	r2, [r0, #16]
 800960a:	bf08      	it	eq
 800960c:	6143      	streq	r3, [r0, #20]
 800960e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009612:	f8dc c000 	ldr.w	ip, [ip]
 8009616:	fa0c fc08 	lsl.w	ip, ip, r8
 800961a:	ea4c 0707 	orr.w	r7, ip, r7
 800961e:	f849 7b04 	str.w	r7, [r9], #4
 8009622:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009626:	40cf      	lsrs	r7, r1
 8009628:	e7da      	b.n	80095e0 <rshift+0x4c>
 800962a:	f851 cb04 	ldr.w	ip, [r1], #4
 800962e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009632:	e7c3      	b.n	80095bc <rshift+0x28>
 8009634:	4623      	mov	r3, r4
 8009636:	e7e1      	b.n	80095fc <rshift+0x68>

08009638 <__hexdig_fun>:
 8009638:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800963c:	2b09      	cmp	r3, #9
 800963e:	d802      	bhi.n	8009646 <__hexdig_fun+0xe>
 8009640:	3820      	subs	r0, #32
 8009642:	b2c0      	uxtb	r0, r0
 8009644:	4770      	bx	lr
 8009646:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800964a:	2b05      	cmp	r3, #5
 800964c:	d801      	bhi.n	8009652 <__hexdig_fun+0x1a>
 800964e:	3847      	subs	r0, #71	@ 0x47
 8009650:	e7f7      	b.n	8009642 <__hexdig_fun+0xa>
 8009652:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009656:	2b05      	cmp	r3, #5
 8009658:	d801      	bhi.n	800965e <__hexdig_fun+0x26>
 800965a:	3827      	subs	r0, #39	@ 0x27
 800965c:	e7f1      	b.n	8009642 <__hexdig_fun+0xa>
 800965e:	2000      	movs	r0, #0
 8009660:	4770      	bx	lr
	...

08009664 <__gethex>:
 8009664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009668:	b085      	sub	sp, #20
 800966a:	468a      	mov	sl, r1
 800966c:	9302      	str	r3, [sp, #8]
 800966e:	680b      	ldr	r3, [r1, #0]
 8009670:	9001      	str	r0, [sp, #4]
 8009672:	4690      	mov	r8, r2
 8009674:	1c9c      	adds	r4, r3, #2
 8009676:	46a1      	mov	r9, r4
 8009678:	f814 0b01 	ldrb.w	r0, [r4], #1
 800967c:	2830      	cmp	r0, #48	@ 0x30
 800967e:	d0fa      	beq.n	8009676 <__gethex+0x12>
 8009680:	eba9 0303 	sub.w	r3, r9, r3
 8009684:	f1a3 0b02 	sub.w	fp, r3, #2
 8009688:	f7ff ffd6 	bl	8009638 <__hexdig_fun>
 800968c:	4605      	mov	r5, r0
 800968e:	2800      	cmp	r0, #0
 8009690:	d168      	bne.n	8009764 <__gethex+0x100>
 8009692:	49a0      	ldr	r1, [pc, #640]	@ (8009914 <__gethex+0x2b0>)
 8009694:	2201      	movs	r2, #1
 8009696:	4648      	mov	r0, r9
 8009698:	f7ff ff12 	bl	80094c0 <strncmp>
 800969c:	4607      	mov	r7, r0
 800969e:	2800      	cmp	r0, #0
 80096a0:	d167      	bne.n	8009772 <__gethex+0x10e>
 80096a2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80096a6:	4626      	mov	r6, r4
 80096a8:	f7ff ffc6 	bl	8009638 <__hexdig_fun>
 80096ac:	2800      	cmp	r0, #0
 80096ae:	d062      	beq.n	8009776 <__gethex+0x112>
 80096b0:	4623      	mov	r3, r4
 80096b2:	7818      	ldrb	r0, [r3, #0]
 80096b4:	2830      	cmp	r0, #48	@ 0x30
 80096b6:	4699      	mov	r9, r3
 80096b8:	f103 0301 	add.w	r3, r3, #1
 80096bc:	d0f9      	beq.n	80096b2 <__gethex+0x4e>
 80096be:	f7ff ffbb 	bl	8009638 <__hexdig_fun>
 80096c2:	fab0 f580 	clz	r5, r0
 80096c6:	096d      	lsrs	r5, r5, #5
 80096c8:	f04f 0b01 	mov.w	fp, #1
 80096cc:	464a      	mov	r2, r9
 80096ce:	4616      	mov	r6, r2
 80096d0:	3201      	adds	r2, #1
 80096d2:	7830      	ldrb	r0, [r6, #0]
 80096d4:	f7ff ffb0 	bl	8009638 <__hexdig_fun>
 80096d8:	2800      	cmp	r0, #0
 80096da:	d1f8      	bne.n	80096ce <__gethex+0x6a>
 80096dc:	498d      	ldr	r1, [pc, #564]	@ (8009914 <__gethex+0x2b0>)
 80096de:	2201      	movs	r2, #1
 80096e0:	4630      	mov	r0, r6
 80096e2:	f7ff feed 	bl	80094c0 <strncmp>
 80096e6:	2800      	cmp	r0, #0
 80096e8:	d13f      	bne.n	800976a <__gethex+0x106>
 80096ea:	b944      	cbnz	r4, 80096fe <__gethex+0x9a>
 80096ec:	1c74      	adds	r4, r6, #1
 80096ee:	4622      	mov	r2, r4
 80096f0:	4616      	mov	r6, r2
 80096f2:	3201      	adds	r2, #1
 80096f4:	7830      	ldrb	r0, [r6, #0]
 80096f6:	f7ff ff9f 	bl	8009638 <__hexdig_fun>
 80096fa:	2800      	cmp	r0, #0
 80096fc:	d1f8      	bne.n	80096f0 <__gethex+0x8c>
 80096fe:	1ba4      	subs	r4, r4, r6
 8009700:	00a7      	lsls	r7, r4, #2
 8009702:	7833      	ldrb	r3, [r6, #0]
 8009704:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009708:	2b50      	cmp	r3, #80	@ 0x50
 800970a:	d13e      	bne.n	800978a <__gethex+0x126>
 800970c:	7873      	ldrb	r3, [r6, #1]
 800970e:	2b2b      	cmp	r3, #43	@ 0x2b
 8009710:	d033      	beq.n	800977a <__gethex+0x116>
 8009712:	2b2d      	cmp	r3, #45	@ 0x2d
 8009714:	d034      	beq.n	8009780 <__gethex+0x11c>
 8009716:	1c71      	adds	r1, r6, #1
 8009718:	2400      	movs	r4, #0
 800971a:	7808      	ldrb	r0, [r1, #0]
 800971c:	f7ff ff8c 	bl	8009638 <__hexdig_fun>
 8009720:	1e43      	subs	r3, r0, #1
 8009722:	b2db      	uxtb	r3, r3
 8009724:	2b18      	cmp	r3, #24
 8009726:	d830      	bhi.n	800978a <__gethex+0x126>
 8009728:	f1a0 0210 	sub.w	r2, r0, #16
 800972c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009730:	f7ff ff82 	bl	8009638 <__hexdig_fun>
 8009734:	f100 3cff 	add.w	ip, r0, #4294967295
 8009738:	fa5f fc8c 	uxtb.w	ip, ip
 800973c:	f1bc 0f18 	cmp.w	ip, #24
 8009740:	f04f 030a 	mov.w	r3, #10
 8009744:	d91e      	bls.n	8009784 <__gethex+0x120>
 8009746:	b104      	cbz	r4, 800974a <__gethex+0xe6>
 8009748:	4252      	negs	r2, r2
 800974a:	4417      	add	r7, r2
 800974c:	f8ca 1000 	str.w	r1, [sl]
 8009750:	b1ed      	cbz	r5, 800978e <__gethex+0x12a>
 8009752:	f1bb 0f00 	cmp.w	fp, #0
 8009756:	bf0c      	ite	eq
 8009758:	2506      	moveq	r5, #6
 800975a:	2500      	movne	r5, #0
 800975c:	4628      	mov	r0, r5
 800975e:	b005      	add	sp, #20
 8009760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009764:	2500      	movs	r5, #0
 8009766:	462c      	mov	r4, r5
 8009768:	e7b0      	b.n	80096cc <__gethex+0x68>
 800976a:	2c00      	cmp	r4, #0
 800976c:	d1c7      	bne.n	80096fe <__gethex+0x9a>
 800976e:	4627      	mov	r7, r4
 8009770:	e7c7      	b.n	8009702 <__gethex+0x9e>
 8009772:	464e      	mov	r6, r9
 8009774:	462f      	mov	r7, r5
 8009776:	2501      	movs	r5, #1
 8009778:	e7c3      	b.n	8009702 <__gethex+0x9e>
 800977a:	2400      	movs	r4, #0
 800977c:	1cb1      	adds	r1, r6, #2
 800977e:	e7cc      	b.n	800971a <__gethex+0xb6>
 8009780:	2401      	movs	r4, #1
 8009782:	e7fb      	b.n	800977c <__gethex+0x118>
 8009784:	fb03 0002 	mla	r0, r3, r2, r0
 8009788:	e7ce      	b.n	8009728 <__gethex+0xc4>
 800978a:	4631      	mov	r1, r6
 800978c:	e7de      	b.n	800974c <__gethex+0xe8>
 800978e:	eba6 0309 	sub.w	r3, r6, r9
 8009792:	3b01      	subs	r3, #1
 8009794:	4629      	mov	r1, r5
 8009796:	2b07      	cmp	r3, #7
 8009798:	dc0a      	bgt.n	80097b0 <__gethex+0x14c>
 800979a:	9801      	ldr	r0, [sp, #4]
 800979c:	f7fe f93c 	bl	8007a18 <_Balloc>
 80097a0:	4604      	mov	r4, r0
 80097a2:	b940      	cbnz	r0, 80097b6 <__gethex+0x152>
 80097a4:	4b5c      	ldr	r3, [pc, #368]	@ (8009918 <__gethex+0x2b4>)
 80097a6:	4602      	mov	r2, r0
 80097a8:	21e4      	movs	r1, #228	@ 0xe4
 80097aa:	485c      	ldr	r0, [pc, #368]	@ (800991c <__gethex+0x2b8>)
 80097ac:	f7ff fec0 	bl	8009530 <__assert_func>
 80097b0:	3101      	adds	r1, #1
 80097b2:	105b      	asrs	r3, r3, #1
 80097b4:	e7ef      	b.n	8009796 <__gethex+0x132>
 80097b6:	f100 0a14 	add.w	sl, r0, #20
 80097ba:	2300      	movs	r3, #0
 80097bc:	4655      	mov	r5, sl
 80097be:	469b      	mov	fp, r3
 80097c0:	45b1      	cmp	r9, r6
 80097c2:	d337      	bcc.n	8009834 <__gethex+0x1d0>
 80097c4:	f845 bb04 	str.w	fp, [r5], #4
 80097c8:	eba5 050a 	sub.w	r5, r5, sl
 80097cc:	10ad      	asrs	r5, r5, #2
 80097ce:	6125      	str	r5, [r4, #16]
 80097d0:	4658      	mov	r0, fp
 80097d2:	f7fe fa13 	bl	8007bfc <__hi0bits>
 80097d6:	016d      	lsls	r5, r5, #5
 80097d8:	f8d8 6000 	ldr.w	r6, [r8]
 80097dc:	1a2d      	subs	r5, r5, r0
 80097de:	42b5      	cmp	r5, r6
 80097e0:	dd54      	ble.n	800988c <__gethex+0x228>
 80097e2:	1bad      	subs	r5, r5, r6
 80097e4:	4629      	mov	r1, r5
 80097e6:	4620      	mov	r0, r4
 80097e8:	f7fe fda7 	bl	800833a <__any_on>
 80097ec:	4681      	mov	r9, r0
 80097ee:	b178      	cbz	r0, 8009810 <__gethex+0x1ac>
 80097f0:	1e6b      	subs	r3, r5, #1
 80097f2:	1159      	asrs	r1, r3, #5
 80097f4:	f003 021f 	and.w	r2, r3, #31
 80097f8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80097fc:	f04f 0901 	mov.w	r9, #1
 8009800:	fa09 f202 	lsl.w	r2, r9, r2
 8009804:	420a      	tst	r2, r1
 8009806:	d003      	beq.n	8009810 <__gethex+0x1ac>
 8009808:	454b      	cmp	r3, r9
 800980a:	dc36      	bgt.n	800987a <__gethex+0x216>
 800980c:	f04f 0902 	mov.w	r9, #2
 8009810:	4629      	mov	r1, r5
 8009812:	4620      	mov	r0, r4
 8009814:	f7ff febe 	bl	8009594 <rshift>
 8009818:	442f      	add	r7, r5
 800981a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800981e:	42bb      	cmp	r3, r7
 8009820:	da42      	bge.n	80098a8 <__gethex+0x244>
 8009822:	9801      	ldr	r0, [sp, #4]
 8009824:	4621      	mov	r1, r4
 8009826:	f7fe f937 	bl	8007a98 <_Bfree>
 800982a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800982c:	2300      	movs	r3, #0
 800982e:	6013      	str	r3, [r2, #0]
 8009830:	25a3      	movs	r5, #163	@ 0xa3
 8009832:	e793      	b.n	800975c <__gethex+0xf8>
 8009834:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009838:	2a2e      	cmp	r2, #46	@ 0x2e
 800983a:	d012      	beq.n	8009862 <__gethex+0x1fe>
 800983c:	2b20      	cmp	r3, #32
 800983e:	d104      	bne.n	800984a <__gethex+0x1e6>
 8009840:	f845 bb04 	str.w	fp, [r5], #4
 8009844:	f04f 0b00 	mov.w	fp, #0
 8009848:	465b      	mov	r3, fp
 800984a:	7830      	ldrb	r0, [r6, #0]
 800984c:	9303      	str	r3, [sp, #12]
 800984e:	f7ff fef3 	bl	8009638 <__hexdig_fun>
 8009852:	9b03      	ldr	r3, [sp, #12]
 8009854:	f000 000f 	and.w	r0, r0, #15
 8009858:	4098      	lsls	r0, r3
 800985a:	ea4b 0b00 	orr.w	fp, fp, r0
 800985e:	3304      	adds	r3, #4
 8009860:	e7ae      	b.n	80097c0 <__gethex+0x15c>
 8009862:	45b1      	cmp	r9, r6
 8009864:	d8ea      	bhi.n	800983c <__gethex+0x1d8>
 8009866:	492b      	ldr	r1, [pc, #172]	@ (8009914 <__gethex+0x2b0>)
 8009868:	9303      	str	r3, [sp, #12]
 800986a:	2201      	movs	r2, #1
 800986c:	4630      	mov	r0, r6
 800986e:	f7ff fe27 	bl	80094c0 <strncmp>
 8009872:	9b03      	ldr	r3, [sp, #12]
 8009874:	2800      	cmp	r0, #0
 8009876:	d1e1      	bne.n	800983c <__gethex+0x1d8>
 8009878:	e7a2      	b.n	80097c0 <__gethex+0x15c>
 800987a:	1ea9      	subs	r1, r5, #2
 800987c:	4620      	mov	r0, r4
 800987e:	f7fe fd5c 	bl	800833a <__any_on>
 8009882:	2800      	cmp	r0, #0
 8009884:	d0c2      	beq.n	800980c <__gethex+0x1a8>
 8009886:	f04f 0903 	mov.w	r9, #3
 800988a:	e7c1      	b.n	8009810 <__gethex+0x1ac>
 800988c:	da09      	bge.n	80098a2 <__gethex+0x23e>
 800988e:	1b75      	subs	r5, r6, r5
 8009890:	4621      	mov	r1, r4
 8009892:	9801      	ldr	r0, [sp, #4]
 8009894:	462a      	mov	r2, r5
 8009896:	f7fe fb17 	bl	8007ec8 <__lshift>
 800989a:	1b7f      	subs	r7, r7, r5
 800989c:	4604      	mov	r4, r0
 800989e:	f100 0a14 	add.w	sl, r0, #20
 80098a2:	f04f 0900 	mov.w	r9, #0
 80098a6:	e7b8      	b.n	800981a <__gethex+0x1b6>
 80098a8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80098ac:	42bd      	cmp	r5, r7
 80098ae:	dd6f      	ble.n	8009990 <__gethex+0x32c>
 80098b0:	1bed      	subs	r5, r5, r7
 80098b2:	42ae      	cmp	r6, r5
 80098b4:	dc34      	bgt.n	8009920 <__gethex+0x2bc>
 80098b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80098ba:	2b02      	cmp	r3, #2
 80098bc:	d022      	beq.n	8009904 <__gethex+0x2a0>
 80098be:	2b03      	cmp	r3, #3
 80098c0:	d024      	beq.n	800990c <__gethex+0x2a8>
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	d115      	bne.n	80098f2 <__gethex+0x28e>
 80098c6:	42ae      	cmp	r6, r5
 80098c8:	d113      	bne.n	80098f2 <__gethex+0x28e>
 80098ca:	2e01      	cmp	r6, #1
 80098cc:	d10b      	bne.n	80098e6 <__gethex+0x282>
 80098ce:	9a02      	ldr	r2, [sp, #8]
 80098d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80098d4:	6013      	str	r3, [r2, #0]
 80098d6:	2301      	movs	r3, #1
 80098d8:	6123      	str	r3, [r4, #16]
 80098da:	f8ca 3000 	str.w	r3, [sl]
 80098de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098e0:	2562      	movs	r5, #98	@ 0x62
 80098e2:	601c      	str	r4, [r3, #0]
 80098e4:	e73a      	b.n	800975c <__gethex+0xf8>
 80098e6:	1e71      	subs	r1, r6, #1
 80098e8:	4620      	mov	r0, r4
 80098ea:	f7fe fd26 	bl	800833a <__any_on>
 80098ee:	2800      	cmp	r0, #0
 80098f0:	d1ed      	bne.n	80098ce <__gethex+0x26a>
 80098f2:	9801      	ldr	r0, [sp, #4]
 80098f4:	4621      	mov	r1, r4
 80098f6:	f7fe f8cf 	bl	8007a98 <_Bfree>
 80098fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80098fc:	2300      	movs	r3, #0
 80098fe:	6013      	str	r3, [r2, #0]
 8009900:	2550      	movs	r5, #80	@ 0x50
 8009902:	e72b      	b.n	800975c <__gethex+0xf8>
 8009904:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009906:	2b00      	cmp	r3, #0
 8009908:	d1f3      	bne.n	80098f2 <__gethex+0x28e>
 800990a:	e7e0      	b.n	80098ce <__gethex+0x26a>
 800990c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800990e:	2b00      	cmp	r3, #0
 8009910:	d1dd      	bne.n	80098ce <__gethex+0x26a>
 8009912:	e7ee      	b.n	80098f2 <__gethex+0x28e>
 8009914:	0800a728 	.word	0x0800a728
 8009918:	0800a5bd 	.word	0x0800a5bd
 800991c:	0800a8d6 	.word	0x0800a8d6
 8009920:	1e6f      	subs	r7, r5, #1
 8009922:	f1b9 0f00 	cmp.w	r9, #0
 8009926:	d130      	bne.n	800998a <__gethex+0x326>
 8009928:	b127      	cbz	r7, 8009934 <__gethex+0x2d0>
 800992a:	4639      	mov	r1, r7
 800992c:	4620      	mov	r0, r4
 800992e:	f7fe fd04 	bl	800833a <__any_on>
 8009932:	4681      	mov	r9, r0
 8009934:	117a      	asrs	r2, r7, #5
 8009936:	2301      	movs	r3, #1
 8009938:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800993c:	f007 071f 	and.w	r7, r7, #31
 8009940:	40bb      	lsls	r3, r7
 8009942:	4213      	tst	r3, r2
 8009944:	4629      	mov	r1, r5
 8009946:	4620      	mov	r0, r4
 8009948:	bf18      	it	ne
 800994a:	f049 0902 	orrne.w	r9, r9, #2
 800994e:	f7ff fe21 	bl	8009594 <rshift>
 8009952:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009956:	1b76      	subs	r6, r6, r5
 8009958:	2502      	movs	r5, #2
 800995a:	f1b9 0f00 	cmp.w	r9, #0
 800995e:	d047      	beq.n	80099f0 <__gethex+0x38c>
 8009960:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009964:	2b02      	cmp	r3, #2
 8009966:	d015      	beq.n	8009994 <__gethex+0x330>
 8009968:	2b03      	cmp	r3, #3
 800996a:	d017      	beq.n	800999c <__gethex+0x338>
 800996c:	2b01      	cmp	r3, #1
 800996e:	d109      	bne.n	8009984 <__gethex+0x320>
 8009970:	f019 0f02 	tst.w	r9, #2
 8009974:	d006      	beq.n	8009984 <__gethex+0x320>
 8009976:	f8da 3000 	ldr.w	r3, [sl]
 800997a:	ea49 0903 	orr.w	r9, r9, r3
 800997e:	f019 0f01 	tst.w	r9, #1
 8009982:	d10e      	bne.n	80099a2 <__gethex+0x33e>
 8009984:	f045 0510 	orr.w	r5, r5, #16
 8009988:	e032      	b.n	80099f0 <__gethex+0x38c>
 800998a:	f04f 0901 	mov.w	r9, #1
 800998e:	e7d1      	b.n	8009934 <__gethex+0x2d0>
 8009990:	2501      	movs	r5, #1
 8009992:	e7e2      	b.n	800995a <__gethex+0x2f6>
 8009994:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009996:	f1c3 0301 	rsb	r3, r3, #1
 800999a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800999c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d0f0      	beq.n	8009984 <__gethex+0x320>
 80099a2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80099a6:	f104 0314 	add.w	r3, r4, #20
 80099aa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80099ae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80099b2:	f04f 0c00 	mov.w	ip, #0
 80099b6:	4618      	mov	r0, r3
 80099b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80099bc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80099c0:	d01b      	beq.n	80099fa <__gethex+0x396>
 80099c2:	3201      	adds	r2, #1
 80099c4:	6002      	str	r2, [r0, #0]
 80099c6:	2d02      	cmp	r5, #2
 80099c8:	f104 0314 	add.w	r3, r4, #20
 80099cc:	d13c      	bne.n	8009a48 <__gethex+0x3e4>
 80099ce:	f8d8 2000 	ldr.w	r2, [r8]
 80099d2:	3a01      	subs	r2, #1
 80099d4:	42b2      	cmp	r2, r6
 80099d6:	d109      	bne.n	80099ec <__gethex+0x388>
 80099d8:	1171      	asrs	r1, r6, #5
 80099da:	2201      	movs	r2, #1
 80099dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80099e0:	f006 061f 	and.w	r6, r6, #31
 80099e4:	fa02 f606 	lsl.w	r6, r2, r6
 80099e8:	421e      	tst	r6, r3
 80099ea:	d13a      	bne.n	8009a62 <__gethex+0x3fe>
 80099ec:	f045 0520 	orr.w	r5, r5, #32
 80099f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099f2:	601c      	str	r4, [r3, #0]
 80099f4:	9b02      	ldr	r3, [sp, #8]
 80099f6:	601f      	str	r7, [r3, #0]
 80099f8:	e6b0      	b.n	800975c <__gethex+0xf8>
 80099fa:	4299      	cmp	r1, r3
 80099fc:	f843 cc04 	str.w	ip, [r3, #-4]
 8009a00:	d8d9      	bhi.n	80099b6 <__gethex+0x352>
 8009a02:	68a3      	ldr	r3, [r4, #8]
 8009a04:	459b      	cmp	fp, r3
 8009a06:	db17      	blt.n	8009a38 <__gethex+0x3d4>
 8009a08:	6861      	ldr	r1, [r4, #4]
 8009a0a:	9801      	ldr	r0, [sp, #4]
 8009a0c:	3101      	adds	r1, #1
 8009a0e:	f7fe f803 	bl	8007a18 <_Balloc>
 8009a12:	4681      	mov	r9, r0
 8009a14:	b918      	cbnz	r0, 8009a1e <__gethex+0x3ba>
 8009a16:	4b1a      	ldr	r3, [pc, #104]	@ (8009a80 <__gethex+0x41c>)
 8009a18:	4602      	mov	r2, r0
 8009a1a:	2184      	movs	r1, #132	@ 0x84
 8009a1c:	e6c5      	b.n	80097aa <__gethex+0x146>
 8009a1e:	6922      	ldr	r2, [r4, #16]
 8009a20:	3202      	adds	r2, #2
 8009a22:	f104 010c 	add.w	r1, r4, #12
 8009a26:	0092      	lsls	r2, r2, #2
 8009a28:	300c      	adds	r0, #12
 8009a2a:	f7ff fd6b 	bl	8009504 <memcpy>
 8009a2e:	4621      	mov	r1, r4
 8009a30:	9801      	ldr	r0, [sp, #4]
 8009a32:	f7fe f831 	bl	8007a98 <_Bfree>
 8009a36:	464c      	mov	r4, r9
 8009a38:	6923      	ldr	r3, [r4, #16]
 8009a3a:	1c5a      	adds	r2, r3, #1
 8009a3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009a40:	6122      	str	r2, [r4, #16]
 8009a42:	2201      	movs	r2, #1
 8009a44:	615a      	str	r2, [r3, #20]
 8009a46:	e7be      	b.n	80099c6 <__gethex+0x362>
 8009a48:	6922      	ldr	r2, [r4, #16]
 8009a4a:	455a      	cmp	r2, fp
 8009a4c:	dd0b      	ble.n	8009a66 <__gethex+0x402>
 8009a4e:	2101      	movs	r1, #1
 8009a50:	4620      	mov	r0, r4
 8009a52:	f7ff fd9f 	bl	8009594 <rshift>
 8009a56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009a5a:	3701      	adds	r7, #1
 8009a5c:	42bb      	cmp	r3, r7
 8009a5e:	f6ff aee0 	blt.w	8009822 <__gethex+0x1be>
 8009a62:	2501      	movs	r5, #1
 8009a64:	e7c2      	b.n	80099ec <__gethex+0x388>
 8009a66:	f016 061f 	ands.w	r6, r6, #31
 8009a6a:	d0fa      	beq.n	8009a62 <__gethex+0x3fe>
 8009a6c:	4453      	add	r3, sl
 8009a6e:	f1c6 0620 	rsb	r6, r6, #32
 8009a72:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009a76:	f7fe f8c1 	bl	8007bfc <__hi0bits>
 8009a7a:	42b0      	cmp	r0, r6
 8009a7c:	dbe7      	blt.n	8009a4e <__gethex+0x3ea>
 8009a7e:	e7f0      	b.n	8009a62 <__gethex+0x3fe>
 8009a80:	0800a5bd 	.word	0x0800a5bd

08009a84 <L_shift>:
 8009a84:	f1c2 0208 	rsb	r2, r2, #8
 8009a88:	0092      	lsls	r2, r2, #2
 8009a8a:	b570      	push	{r4, r5, r6, lr}
 8009a8c:	f1c2 0620 	rsb	r6, r2, #32
 8009a90:	6843      	ldr	r3, [r0, #4]
 8009a92:	6804      	ldr	r4, [r0, #0]
 8009a94:	fa03 f506 	lsl.w	r5, r3, r6
 8009a98:	432c      	orrs	r4, r5
 8009a9a:	40d3      	lsrs	r3, r2
 8009a9c:	6004      	str	r4, [r0, #0]
 8009a9e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009aa2:	4288      	cmp	r0, r1
 8009aa4:	d3f4      	bcc.n	8009a90 <L_shift+0xc>
 8009aa6:	bd70      	pop	{r4, r5, r6, pc}

08009aa8 <__match>:
 8009aa8:	b530      	push	{r4, r5, lr}
 8009aaa:	6803      	ldr	r3, [r0, #0]
 8009aac:	3301      	adds	r3, #1
 8009aae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ab2:	b914      	cbnz	r4, 8009aba <__match+0x12>
 8009ab4:	6003      	str	r3, [r0, #0]
 8009ab6:	2001      	movs	r0, #1
 8009ab8:	bd30      	pop	{r4, r5, pc}
 8009aba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009abe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009ac2:	2d19      	cmp	r5, #25
 8009ac4:	bf98      	it	ls
 8009ac6:	3220      	addls	r2, #32
 8009ac8:	42a2      	cmp	r2, r4
 8009aca:	d0f0      	beq.n	8009aae <__match+0x6>
 8009acc:	2000      	movs	r0, #0
 8009ace:	e7f3      	b.n	8009ab8 <__match+0x10>

08009ad0 <__hexnan>:
 8009ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ad4:	680b      	ldr	r3, [r1, #0]
 8009ad6:	6801      	ldr	r1, [r0, #0]
 8009ad8:	115e      	asrs	r6, r3, #5
 8009ada:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009ade:	f013 031f 	ands.w	r3, r3, #31
 8009ae2:	b087      	sub	sp, #28
 8009ae4:	bf18      	it	ne
 8009ae6:	3604      	addne	r6, #4
 8009ae8:	2500      	movs	r5, #0
 8009aea:	1f37      	subs	r7, r6, #4
 8009aec:	4682      	mov	sl, r0
 8009aee:	4690      	mov	r8, r2
 8009af0:	9301      	str	r3, [sp, #4]
 8009af2:	f846 5c04 	str.w	r5, [r6, #-4]
 8009af6:	46b9      	mov	r9, r7
 8009af8:	463c      	mov	r4, r7
 8009afa:	9502      	str	r5, [sp, #8]
 8009afc:	46ab      	mov	fp, r5
 8009afe:	784a      	ldrb	r2, [r1, #1]
 8009b00:	1c4b      	adds	r3, r1, #1
 8009b02:	9303      	str	r3, [sp, #12]
 8009b04:	b342      	cbz	r2, 8009b58 <__hexnan+0x88>
 8009b06:	4610      	mov	r0, r2
 8009b08:	9105      	str	r1, [sp, #20]
 8009b0a:	9204      	str	r2, [sp, #16]
 8009b0c:	f7ff fd94 	bl	8009638 <__hexdig_fun>
 8009b10:	2800      	cmp	r0, #0
 8009b12:	d151      	bne.n	8009bb8 <__hexnan+0xe8>
 8009b14:	9a04      	ldr	r2, [sp, #16]
 8009b16:	9905      	ldr	r1, [sp, #20]
 8009b18:	2a20      	cmp	r2, #32
 8009b1a:	d818      	bhi.n	8009b4e <__hexnan+0x7e>
 8009b1c:	9b02      	ldr	r3, [sp, #8]
 8009b1e:	459b      	cmp	fp, r3
 8009b20:	dd13      	ble.n	8009b4a <__hexnan+0x7a>
 8009b22:	454c      	cmp	r4, r9
 8009b24:	d206      	bcs.n	8009b34 <__hexnan+0x64>
 8009b26:	2d07      	cmp	r5, #7
 8009b28:	dc04      	bgt.n	8009b34 <__hexnan+0x64>
 8009b2a:	462a      	mov	r2, r5
 8009b2c:	4649      	mov	r1, r9
 8009b2e:	4620      	mov	r0, r4
 8009b30:	f7ff ffa8 	bl	8009a84 <L_shift>
 8009b34:	4544      	cmp	r4, r8
 8009b36:	d952      	bls.n	8009bde <__hexnan+0x10e>
 8009b38:	2300      	movs	r3, #0
 8009b3a:	f1a4 0904 	sub.w	r9, r4, #4
 8009b3e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009b42:	f8cd b008 	str.w	fp, [sp, #8]
 8009b46:	464c      	mov	r4, r9
 8009b48:	461d      	mov	r5, r3
 8009b4a:	9903      	ldr	r1, [sp, #12]
 8009b4c:	e7d7      	b.n	8009afe <__hexnan+0x2e>
 8009b4e:	2a29      	cmp	r2, #41	@ 0x29
 8009b50:	d157      	bne.n	8009c02 <__hexnan+0x132>
 8009b52:	3102      	adds	r1, #2
 8009b54:	f8ca 1000 	str.w	r1, [sl]
 8009b58:	f1bb 0f00 	cmp.w	fp, #0
 8009b5c:	d051      	beq.n	8009c02 <__hexnan+0x132>
 8009b5e:	454c      	cmp	r4, r9
 8009b60:	d206      	bcs.n	8009b70 <__hexnan+0xa0>
 8009b62:	2d07      	cmp	r5, #7
 8009b64:	dc04      	bgt.n	8009b70 <__hexnan+0xa0>
 8009b66:	462a      	mov	r2, r5
 8009b68:	4649      	mov	r1, r9
 8009b6a:	4620      	mov	r0, r4
 8009b6c:	f7ff ff8a 	bl	8009a84 <L_shift>
 8009b70:	4544      	cmp	r4, r8
 8009b72:	d936      	bls.n	8009be2 <__hexnan+0x112>
 8009b74:	f1a8 0204 	sub.w	r2, r8, #4
 8009b78:	4623      	mov	r3, r4
 8009b7a:	f853 1b04 	ldr.w	r1, [r3], #4
 8009b7e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009b82:	429f      	cmp	r7, r3
 8009b84:	d2f9      	bcs.n	8009b7a <__hexnan+0xaa>
 8009b86:	1b3b      	subs	r3, r7, r4
 8009b88:	f023 0303 	bic.w	r3, r3, #3
 8009b8c:	3304      	adds	r3, #4
 8009b8e:	3401      	adds	r4, #1
 8009b90:	3e03      	subs	r6, #3
 8009b92:	42b4      	cmp	r4, r6
 8009b94:	bf88      	it	hi
 8009b96:	2304      	movhi	r3, #4
 8009b98:	4443      	add	r3, r8
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	f843 2b04 	str.w	r2, [r3], #4
 8009ba0:	429f      	cmp	r7, r3
 8009ba2:	d2fb      	bcs.n	8009b9c <__hexnan+0xcc>
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	b91b      	cbnz	r3, 8009bb0 <__hexnan+0xe0>
 8009ba8:	4547      	cmp	r7, r8
 8009baa:	d128      	bne.n	8009bfe <__hexnan+0x12e>
 8009bac:	2301      	movs	r3, #1
 8009bae:	603b      	str	r3, [r7, #0]
 8009bb0:	2005      	movs	r0, #5
 8009bb2:	b007      	add	sp, #28
 8009bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bb8:	3501      	adds	r5, #1
 8009bba:	2d08      	cmp	r5, #8
 8009bbc:	f10b 0b01 	add.w	fp, fp, #1
 8009bc0:	dd06      	ble.n	8009bd0 <__hexnan+0x100>
 8009bc2:	4544      	cmp	r4, r8
 8009bc4:	d9c1      	bls.n	8009b4a <__hexnan+0x7a>
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	f844 3c04 	str.w	r3, [r4, #-4]
 8009bcc:	2501      	movs	r5, #1
 8009bce:	3c04      	subs	r4, #4
 8009bd0:	6822      	ldr	r2, [r4, #0]
 8009bd2:	f000 000f 	and.w	r0, r0, #15
 8009bd6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009bda:	6020      	str	r0, [r4, #0]
 8009bdc:	e7b5      	b.n	8009b4a <__hexnan+0x7a>
 8009bde:	2508      	movs	r5, #8
 8009be0:	e7b3      	b.n	8009b4a <__hexnan+0x7a>
 8009be2:	9b01      	ldr	r3, [sp, #4]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d0dd      	beq.n	8009ba4 <__hexnan+0xd4>
 8009be8:	f1c3 0320 	rsb	r3, r3, #32
 8009bec:	f04f 32ff 	mov.w	r2, #4294967295
 8009bf0:	40da      	lsrs	r2, r3
 8009bf2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009bf6:	4013      	ands	r3, r2
 8009bf8:	f846 3c04 	str.w	r3, [r6, #-4]
 8009bfc:	e7d2      	b.n	8009ba4 <__hexnan+0xd4>
 8009bfe:	3f04      	subs	r7, #4
 8009c00:	e7d0      	b.n	8009ba4 <__hexnan+0xd4>
 8009c02:	2004      	movs	r0, #4
 8009c04:	e7d5      	b.n	8009bb2 <__hexnan+0xe2>

08009c06 <__ascii_mbtowc>:
 8009c06:	b082      	sub	sp, #8
 8009c08:	b901      	cbnz	r1, 8009c0c <__ascii_mbtowc+0x6>
 8009c0a:	a901      	add	r1, sp, #4
 8009c0c:	b142      	cbz	r2, 8009c20 <__ascii_mbtowc+0x1a>
 8009c0e:	b14b      	cbz	r3, 8009c24 <__ascii_mbtowc+0x1e>
 8009c10:	7813      	ldrb	r3, [r2, #0]
 8009c12:	600b      	str	r3, [r1, #0]
 8009c14:	7812      	ldrb	r2, [r2, #0]
 8009c16:	1e10      	subs	r0, r2, #0
 8009c18:	bf18      	it	ne
 8009c1a:	2001      	movne	r0, #1
 8009c1c:	b002      	add	sp, #8
 8009c1e:	4770      	bx	lr
 8009c20:	4610      	mov	r0, r2
 8009c22:	e7fb      	b.n	8009c1c <__ascii_mbtowc+0x16>
 8009c24:	f06f 0001 	mvn.w	r0, #1
 8009c28:	e7f8      	b.n	8009c1c <__ascii_mbtowc+0x16>

08009c2a <_realloc_r>:
 8009c2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c2e:	4680      	mov	r8, r0
 8009c30:	4615      	mov	r5, r2
 8009c32:	460c      	mov	r4, r1
 8009c34:	b921      	cbnz	r1, 8009c40 <_realloc_r+0x16>
 8009c36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c3a:	4611      	mov	r1, r2
 8009c3c:	f7fd be60 	b.w	8007900 <_malloc_r>
 8009c40:	b92a      	cbnz	r2, 8009c4e <_realloc_r+0x24>
 8009c42:	f7fd fde9 	bl	8007818 <_free_r>
 8009c46:	2400      	movs	r4, #0
 8009c48:	4620      	mov	r0, r4
 8009c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c4e:	f000 f840 	bl	8009cd2 <_malloc_usable_size_r>
 8009c52:	4285      	cmp	r5, r0
 8009c54:	4606      	mov	r6, r0
 8009c56:	d802      	bhi.n	8009c5e <_realloc_r+0x34>
 8009c58:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009c5c:	d8f4      	bhi.n	8009c48 <_realloc_r+0x1e>
 8009c5e:	4629      	mov	r1, r5
 8009c60:	4640      	mov	r0, r8
 8009c62:	f7fd fe4d 	bl	8007900 <_malloc_r>
 8009c66:	4607      	mov	r7, r0
 8009c68:	2800      	cmp	r0, #0
 8009c6a:	d0ec      	beq.n	8009c46 <_realloc_r+0x1c>
 8009c6c:	42b5      	cmp	r5, r6
 8009c6e:	462a      	mov	r2, r5
 8009c70:	4621      	mov	r1, r4
 8009c72:	bf28      	it	cs
 8009c74:	4632      	movcs	r2, r6
 8009c76:	f7ff fc45 	bl	8009504 <memcpy>
 8009c7a:	4621      	mov	r1, r4
 8009c7c:	4640      	mov	r0, r8
 8009c7e:	f7fd fdcb 	bl	8007818 <_free_r>
 8009c82:	463c      	mov	r4, r7
 8009c84:	e7e0      	b.n	8009c48 <_realloc_r+0x1e>

08009c86 <__ascii_wctomb>:
 8009c86:	4603      	mov	r3, r0
 8009c88:	4608      	mov	r0, r1
 8009c8a:	b141      	cbz	r1, 8009c9e <__ascii_wctomb+0x18>
 8009c8c:	2aff      	cmp	r2, #255	@ 0xff
 8009c8e:	d904      	bls.n	8009c9a <__ascii_wctomb+0x14>
 8009c90:	228a      	movs	r2, #138	@ 0x8a
 8009c92:	601a      	str	r2, [r3, #0]
 8009c94:	f04f 30ff 	mov.w	r0, #4294967295
 8009c98:	4770      	bx	lr
 8009c9a:	700a      	strb	r2, [r1, #0]
 8009c9c:	2001      	movs	r0, #1
 8009c9e:	4770      	bx	lr

08009ca0 <fiprintf>:
 8009ca0:	b40e      	push	{r1, r2, r3}
 8009ca2:	b503      	push	{r0, r1, lr}
 8009ca4:	4601      	mov	r1, r0
 8009ca6:	ab03      	add	r3, sp, #12
 8009ca8:	4805      	ldr	r0, [pc, #20]	@ (8009cc0 <fiprintf+0x20>)
 8009caa:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cae:	6800      	ldr	r0, [r0, #0]
 8009cb0:	9301      	str	r3, [sp, #4]
 8009cb2:	f000 f83f 	bl	8009d34 <_vfiprintf_r>
 8009cb6:	b002      	add	sp, #8
 8009cb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009cbc:	b003      	add	sp, #12
 8009cbe:	4770      	bx	lr
 8009cc0:	20000018 	.word	0x20000018

08009cc4 <abort>:
 8009cc4:	b508      	push	{r3, lr}
 8009cc6:	2006      	movs	r0, #6
 8009cc8:	f000 fa08 	bl	800a0dc <raise>
 8009ccc:	2001      	movs	r0, #1
 8009cce:	f7f7 fd70 	bl	80017b2 <_exit>

08009cd2 <_malloc_usable_size_r>:
 8009cd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cd6:	1f18      	subs	r0, r3, #4
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	bfbc      	itt	lt
 8009cdc:	580b      	ldrlt	r3, [r1, r0]
 8009cde:	18c0      	addlt	r0, r0, r3
 8009ce0:	4770      	bx	lr

08009ce2 <__sfputc_r>:
 8009ce2:	6893      	ldr	r3, [r2, #8]
 8009ce4:	3b01      	subs	r3, #1
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	b410      	push	{r4}
 8009cea:	6093      	str	r3, [r2, #8]
 8009cec:	da08      	bge.n	8009d00 <__sfputc_r+0x1e>
 8009cee:	6994      	ldr	r4, [r2, #24]
 8009cf0:	42a3      	cmp	r3, r4
 8009cf2:	db01      	blt.n	8009cf8 <__sfputc_r+0x16>
 8009cf4:	290a      	cmp	r1, #10
 8009cf6:	d103      	bne.n	8009d00 <__sfputc_r+0x1e>
 8009cf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cfc:	f000 b932 	b.w	8009f64 <__swbuf_r>
 8009d00:	6813      	ldr	r3, [r2, #0]
 8009d02:	1c58      	adds	r0, r3, #1
 8009d04:	6010      	str	r0, [r2, #0]
 8009d06:	7019      	strb	r1, [r3, #0]
 8009d08:	4608      	mov	r0, r1
 8009d0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d0e:	4770      	bx	lr

08009d10 <__sfputs_r>:
 8009d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d12:	4606      	mov	r6, r0
 8009d14:	460f      	mov	r7, r1
 8009d16:	4614      	mov	r4, r2
 8009d18:	18d5      	adds	r5, r2, r3
 8009d1a:	42ac      	cmp	r4, r5
 8009d1c:	d101      	bne.n	8009d22 <__sfputs_r+0x12>
 8009d1e:	2000      	movs	r0, #0
 8009d20:	e007      	b.n	8009d32 <__sfputs_r+0x22>
 8009d22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d26:	463a      	mov	r2, r7
 8009d28:	4630      	mov	r0, r6
 8009d2a:	f7ff ffda 	bl	8009ce2 <__sfputc_r>
 8009d2e:	1c43      	adds	r3, r0, #1
 8009d30:	d1f3      	bne.n	8009d1a <__sfputs_r+0xa>
 8009d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009d34 <_vfiprintf_r>:
 8009d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d38:	460d      	mov	r5, r1
 8009d3a:	b09d      	sub	sp, #116	@ 0x74
 8009d3c:	4614      	mov	r4, r2
 8009d3e:	4698      	mov	r8, r3
 8009d40:	4606      	mov	r6, r0
 8009d42:	b118      	cbz	r0, 8009d4c <_vfiprintf_r+0x18>
 8009d44:	6a03      	ldr	r3, [r0, #32]
 8009d46:	b90b      	cbnz	r3, 8009d4c <_vfiprintf_r+0x18>
 8009d48:	f7fc fdfa 	bl	8006940 <__sinit>
 8009d4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d4e:	07d9      	lsls	r1, r3, #31
 8009d50:	d405      	bmi.n	8009d5e <_vfiprintf_r+0x2a>
 8009d52:	89ab      	ldrh	r3, [r5, #12]
 8009d54:	059a      	lsls	r2, r3, #22
 8009d56:	d402      	bmi.n	8009d5e <_vfiprintf_r+0x2a>
 8009d58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d5a:	f7fc ff08 	bl	8006b6e <__retarget_lock_acquire_recursive>
 8009d5e:	89ab      	ldrh	r3, [r5, #12]
 8009d60:	071b      	lsls	r3, r3, #28
 8009d62:	d501      	bpl.n	8009d68 <_vfiprintf_r+0x34>
 8009d64:	692b      	ldr	r3, [r5, #16]
 8009d66:	b99b      	cbnz	r3, 8009d90 <_vfiprintf_r+0x5c>
 8009d68:	4629      	mov	r1, r5
 8009d6a:	4630      	mov	r0, r6
 8009d6c:	f000 f938 	bl	8009fe0 <__swsetup_r>
 8009d70:	b170      	cbz	r0, 8009d90 <_vfiprintf_r+0x5c>
 8009d72:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d74:	07dc      	lsls	r4, r3, #31
 8009d76:	d504      	bpl.n	8009d82 <_vfiprintf_r+0x4e>
 8009d78:	f04f 30ff 	mov.w	r0, #4294967295
 8009d7c:	b01d      	add	sp, #116	@ 0x74
 8009d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d82:	89ab      	ldrh	r3, [r5, #12]
 8009d84:	0598      	lsls	r0, r3, #22
 8009d86:	d4f7      	bmi.n	8009d78 <_vfiprintf_r+0x44>
 8009d88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d8a:	f7fc fef1 	bl	8006b70 <__retarget_lock_release_recursive>
 8009d8e:	e7f3      	b.n	8009d78 <_vfiprintf_r+0x44>
 8009d90:	2300      	movs	r3, #0
 8009d92:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d94:	2320      	movs	r3, #32
 8009d96:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009d9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d9e:	2330      	movs	r3, #48	@ 0x30
 8009da0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009f50 <_vfiprintf_r+0x21c>
 8009da4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009da8:	f04f 0901 	mov.w	r9, #1
 8009dac:	4623      	mov	r3, r4
 8009dae:	469a      	mov	sl, r3
 8009db0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009db4:	b10a      	cbz	r2, 8009dba <_vfiprintf_r+0x86>
 8009db6:	2a25      	cmp	r2, #37	@ 0x25
 8009db8:	d1f9      	bne.n	8009dae <_vfiprintf_r+0x7a>
 8009dba:	ebba 0b04 	subs.w	fp, sl, r4
 8009dbe:	d00b      	beq.n	8009dd8 <_vfiprintf_r+0xa4>
 8009dc0:	465b      	mov	r3, fp
 8009dc2:	4622      	mov	r2, r4
 8009dc4:	4629      	mov	r1, r5
 8009dc6:	4630      	mov	r0, r6
 8009dc8:	f7ff ffa2 	bl	8009d10 <__sfputs_r>
 8009dcc:	3001      	adds	r0, #1
 8009dce:	f000 80a7 	beq.w	8009f20 <_vfiprintf_r+0x1ec>
 8009dd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009dd4:	445a      	add	r2, fp
 8009dd6:	9209      	str	r2, [sp, #36]	@ 0x24
 8009dd8:	f89a 3000 	ldrb.w	r3, [sl]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	f000 809f 	beq.w	8009f20 <_vfiprintf_r+0x1ec>
 8009de2:	2300      	movs	r3, #0
 8009de4:	f04f 32ff 	mov.w	r2, #4294967295
 8009de8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dec:	f10a 0a01 	add.w	sl, sl, #1
 8009df0:	9304      	str	r3, [sp, #16]
 8009df2:	9307      	str	r3, [sp, #28]
 8009df4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009df8:	931a      	str	r3, [sp, #104]	@ 0x68
 8009dfa:	4654      	mov	r4, sl
 8009dfc:	2205      	movs	r2, #5
 8009dfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e02:	4853      	ldr	r0, [pc, #332]	@ (8009f50 <_vfiprintf_r+0x21c>)
 8009e04:	f7f6 f9e4 	bl	80001d0 <memchr>
 8009e08:	9a04      	ldr	r2, [sp, #16]
 8009e0a:	b9d8      	cbnz	r0, 8009e44 <_vfiprintf_r+0x110>
 8009e0c:	06d1      	lsls	r1, r2, #27
 8009e0e:	bf44      	itt	mi
 8009e10:	2320      	movmi	r3, #32
 8009e12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e16:	0713      	lsls	r3, r2, #28
 8009e18:	bf44      	itt	mi
 8009e1a:	232b      	movmi	r3, #43	@ 0x2b
 8009e1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e20:	f89a 3000 	ldrb.w	r3, [sl]
 8009e24:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e26:	d015      	beq.n	8009e54 <_vfiprintf_r+0x120>
 8009e28:	9a07      	ldr	r2, [sp, #28]
 8009e2a:	4654      	mov	r4, sl
 8009e2c:	2000      	movs	r0, #0
 8009e2e:	f04f 0c0a 	mov.w	ip, #10
 8009e32:	4621      	mov	r1, r4
 8009e34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e38:	3b30      	subs	r3, #48	@ 0x30
 8009e3a:	2b09      	cmp	r3, #9
 8009e3c:	d94b      	bls.n	8009ed6 <_vfiprintf_r+0x1a2>
 8009e3e:	b1b0      	cbz	r0, 8009e6e <_vfiprintf_r+0x13a>
 8009e40:	9207      	str	r2, [sp, #28]
 8009e42:	e014      	b.n	8009e6e <_vfiprintf_r+0x13a>
 8009e44:	eba0 0308 	sub.w	r3, r0, r8
 8009e48:	fa09 f303 	lsl.w	r3, r9, r3
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	9304      	str	r3, [sp, #16]
 8009e50:	46a2      	mov	sl, r4
 8009e52:	e7d2      	b.n	8009dfa <_vfiprintf_r+0xc6>
 8009e54:	9b03      	ldr	r3, [sp, #12]
 8009e56:	1d19      	adds	r1, r3, #4
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	9103      	str	r1, [sp, #12]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	bfbb      	ittet	lt
 8009e60:	425b      	neglt	r3, r3
 8009e62:	f042 0202 	orrlt.w	r2, r2, #2
 8009e66:	9307      	strge	r3, [sp, #28]
 8009e68:	9307      	strlt	r3, [sp, #28]
 8009e6a:	bfb8      	it	lt
 8009e6c:	9204      	strlt	r2, [sp, #16]
 8009e6e:	7823      	ldrb	r3, [r4, #0]
 8009e70:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e72:	d10a      	bne.n	8009e8a <_vfiprintf_r+0x156>
 8009e74:	7863      	ldrb	r3, [r4, #1]
 8009e76:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e78:	d132      	bne.n	8009ee0 <_vfiprintf_r+0x1ac>
 8009e7a:	9b03      	ldr	r3, [sp, #12]
 8009e7c:	1d1a      	adds	r2, r3, #4
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	9203      	str	r2, [sp, #12]
 8009e82:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009e86:	3402      	adds	r4, #2
 8009e88:	9305      	str	r3, [sp, #20]
 8009e8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009f60 <_vfiprintf_r+0x22c>
 8009e8e:	7821      	ldrb	r1, [r4, #0]
 8009e90:	2203      	movs	r2, #3
 8009e92:	4650      	mov	r0, sl
 8009e94:	f7f6 f99c 	bl	80001d0 <memchr>
 8009e98:	b138      	cbz	r0, 8009eaa <_vfiprintf_r+0x176>
 8009e9a:	9b04      	ldr	r3, [sp, #16]
 8009e9c:	eba0 000a 	sub.w	r0, r0, sl
 8009ea0:	2240      	movs	r2, #64	@ 0x40
 8009ea2:	4082      	lsls	r2, r0
 8009ea4:	4313      	orrs	r3, r2
 8009ea6:	3401      	adds	r4, #1
 8009ea8:	9304      	str	r3, [sp, #16]
 8009eaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009eae:	4829      	ldr	r0, [pc, #164]	@ (8009f54 <_vfiprintf_r+0x220>)
 8009eb0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009eb4:	2206      	movs	r2, #6
 8009eb6:	f7f6 f98b 	bl	80001d0 <memchr>
 8009eba:	2800      	cmp	r0, #0
 8009ebc:	d03f      	beq.n	8009f3e <_vfiprintf_r+0x20a>
 8009ebe:	4b26      	ldr	r3, [pc, #152]	@ (8009f58 <_vfiprintf_r+0x224>)
 8009ec0:	bb1b      	cbnz	r3, 8009f0a <_vfiprintf_r+0x1d6>
 8009ec2:	9b03      	ldr	r3, [sp, #12]
 8009ec4:	3307      	adds	r3, #7
 8009ec6:	f023 0307 	bic.w	r3, r3, #7
 8009eca:	3308      	adds	r3, #8
 8009ecc:	9303      	str	r3, [sp, #12]
 8009ece:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ed0:	443b      	add	r3, r7
 8009ed2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ed4:	e76a      	b.n	8009dac <_vfiprintf_r+0x78>
 8009ed6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009eda:	460c      	mov	r4, r1
 8009edc:	2001      	movs	r0, #1
 8009ede:	e7a8      	b.n	8009e32 <_vfiprintf_r+0xfe>
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	3401      	adds	r4, #1
 8009ee4:	9305      	str	r3, [sp, #20]
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	f04f 0c0a 	mov.w	ip, #10
 8009eec:	4620      	mov	r0, r4
 8009eee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ef2:	3a30      	subs	r2, #48	@ 0x30
 8009ef4:	2a09      	cmp	r2, #9
 8009ef6:	d903      	bls.n	8009f00 <_vfiprintf_r+0x1cc>
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d0c6      	beq.n	8009e8a <_vfiprintf_r+0x156>
 8009efc:	9105      	str	r1, [sp, #20]
 8009efe:	e7c4      	b.n	8009e8a <_vfiprintf_r+0x156>
 8009f00:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f04:	4604      	mov	r4, r0
 8009f06:	2301      	movs	r3, #1
 8009f08:	e7f0      	b.n	8009eec <_vfiprintf_r+0x1b8>
 8009f0a:	ab03      	add	r3, sp, #12
 8009f0c:	9300      	str	r3, [sp, #0]
 8009f0e:	462a      	mov	r2, r5
 8009f10:	4b12      	ldr	r3, [pc, #72]	@ (8009f5c <_vfiprintf_r+0x228>)
 8009f12:	a904      	add	r1, sp, #16
 8009f14:	4630      	mov	r0, r6
 8009f16:	f7fb febb 	bl	8005c90 <_printf_float>
 8009f1a:	4607      	mov	r7, r0
 8009f1c:	1c78      	adds	r0, r7, #1
 8009f1e:	d1d6      	bne.n	8009ece <_vfiprintf_r+0x19a>
 8009f20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f22:	07d9      	lsls	r1, r3, #31
 8009f24:	d405      	bmi.n	8009f32 <_vfiprintf_r+0x1fe>
 8009f26:	89ab      	ldrh	r3, [r5, #12]
 8009f28:	059a      	lsls	r2, r3, #22
 8009f2a:	d402      	bmi.n	8009f32 <_vfiprintf_r+0x1fe>
 8009f2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f2e:	f7fc fe1f 	bl	8006b70 <__retarget_lock_release_recursive>
 8009f32:	89ab      	ldrh	r3, [r5, #12]
 8009f34:	065b      	lsls	r3, r3, #25
 8009f36:	f53f af1f 	bmi.w	8009d78 <_vfiprintf_r+0x44>
 8009f3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f3c:	e71e      	b.n	8009d7c <_vfiprintf_r+0x48>
 8009f3e:	ab03      	add	r3, sp, #12
 8009f40:	9300      	str	r3, [sp, #0]
 8009f42:	462a      	mov	r2, r5
 8009f44:	4b05      	ldr	r3, [pc, #20]	@ (8009f5c <_vfiprintf_r+0x228>)
 8009f46:	a904      	add	r1, sp, #16
 8009f48:	4630      	mov	r0, r6
 8009f4a:	f7fc f939 	bl	80061c0 <_printf_i>
 8009f4e:	e7e4      	b.n	8009f1a <_vfiprintf_r+0x1e6>
 8009f50:	0800a881 	.word	0x0800a881
 8009f54:	0800a88b 	.word	0x0800a88b
 8009f58:	08005c91 	.word	0x08005c91
 8009f5c:	08009d11 	.word	0x08009d11
 8009f60:	0800a887 	.word	0x0800a887

08009f64 <__swbuf_r>:
 8009f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f66:	460e      	mov	r6, r1
 8009f68:	4614      	mov	r4, r2
 8009f6a:	4605      	mov	r5, r0
 8009f6c:	b118      	cbz	r0, 8009f76 <__swbuf_r+0x12>
 8009f6e:	6a03      	ldr	r3, [r0, #32]
 8009f70:	b90b      	cbnz	r3, 8009f76 <__swbuf_r+0x12>
 8009f72:	f7fc fce5 	bl	8006940 <__sinit>
 8009f76:	69a3      	ldr	r3, [r4, #24]
 8009f78:	60a3      	str	r3, [r4, #8]
 8009f7a:	89a3      	ldrh	r3, [r4, #12]
 8009f7c:	071a      	lsls	r2, r3, #28
 8009f7e:	d501      	bpl.n	8009f84 <__swbuf_r+0x20>
 8009f80:	6923      	ldr	r3, [r4, #16]
 8009f82:	b943      	cbnz	r3, 8009f96 <__swbuf_r+0x32>
 8009f84:	4621      	mov	r1, r4
 8009f86:	4628      	mov	r0, r5
 8009f88:	f000 f82a 	bl	8009fe0 <__swsetup_r>
 8009f8c:	b118      	cbz	r0, 8009f96 <__swbuf_r+0x32>
 8009f8e:	f04f 37ff 	mov.w	r7, #4294967295
 8009f92:	4638      	mov	r0, r7
 8009f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f96:	6823      	ldr	r3, [r4, #0]
 8009f98:	6922      	ldr	r2, [r4, #16]
 8009f9a:	1a98      	subs	r0, r3, r2
 8009f9c:	6963      	ldr	r3, [r4, #20]
 8009f9e:	b2f6      	uxtb	r6, r6
 8009fa0:	4283      	cmp	r3, r0
 8009fa2:	4637      	mov	r7, r6
 8009fa4:	dc05      	bgt.n	8009fb2 <__swbuf_r+0x4e>
 8009fa6:	4621      	mov	r1, r4
 8009fa8:	4628      	mov	r0, r5
 8009faa:	f7ff fa47 	bl	800943c <_fflush_r>
 8009fae:	2800      	cmp	r0, #0
 8009fb0:	d1ed      	bne.n	8009f8e <__swbuf_r+0x2a>
 8009fb2:	68a3      	ldr	r3, [r4, #8]
 8009fb4:	3b01      	subs	r3, #1
 8009fb6:	60a3      	str	r3, [r4, #8]
 8009fb8:	6823      	ldr	r3, [r4, #0]
 8009fba:	1c5a      	adds	r2, r3, #1
 8009fbc:	6022      	str	r2, [r4, #0]
 8009fbe:	701e      	strb	r6, [r3, #0]
 8009fc0:	6962      	ldr	r2, [r4, #20]
 8009fc2:	1c43      	adds	r3, r0, #1
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d004      	beq.n	8009fd2 <__swbuf_r+0x6e>
 8009fc8:	89a3      	ldrh	r3, [r4, #12]
 8009fca:	07db      	lsls	r3, r3, #31
 8009fcc:	d5e1      	bpl.n	8009f92 <__swbuf_r+0x2e>
 8009fce:	2e0a      	cmp	r6, #10
 8009fd0:	d1df      	bne.n	8009f92 <__swbuf_r+0x2e>
 8009fd2:	4621      	mov	r1, r4
 8009fd4:	4628      	mov	r0, r5
 8009fd6:	f7ff fa31 	bl	800943c <_fflush_r>
 8009fda:	2800      	cmp	r0, #0
 8009fdc:	d0d9      	beq.n	8009f92 <__swbuf_r+0x2e>
 8009fde:	e7d6      	b.n	8009f8e <__swbuf_r+0x2a>

08009fe0 <__swsetup_r>:
 8009fe0:	b538      	push	{r3, r4, r5, lr}
 8009fe2:	4b29      	ldr	r3, [pc, #164]	@ (800a088 <__swsetup_r+0xa8>)
 8009fe4:	4605      	mov	r5, r0
 8009fe6:	6818      	ldr	r0, [r3, #0]
 8009fe8:	460c      	mov	r4, r1
 8009fea:	b118      	cbz	r0, 8009ff4 <__swsetup_r+0x14>
 8009fec:	6a03      	ldr	r3, [r0, #32]
 8009fee:	b90b      	cbnz	r3, 8009ff4 <__swsetup_r+0x14>
 8009ff0:	f7fc fca6 	bl	8006940 <__sinit>
 8009ff4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ff8:	0719      	lsls	r1, r3, #28
 8009ffa:	d422      	bmi.n	800a042 <__swsetup_r+0x62>
 8009ffc:	06da      	lsls	r2, r3, #27
 8009ffe:	d407      	bmi.n	800a010 <__swsetup_r+0x30>
 800a000:	2209      	movs	r2, #9
 800a002:	602a      	str	r2, [r5, #0]
 800a004:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a008:	81a3      	strh	r3, [r4, #12]
 800a00a:	f04f 30ff 	mov.w	r0, #4294967295
 800a00e:	e033      	b.n	800a078 <__swsetup_r+0x98>
 800a010:	0758      	lsls	r0, r3, #29
 800a012:	d512      	bpl.n	800a03a <__swsetup_r+0x5a>
 800a014:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a016:	b141      	cbz	r1, 800a02a <__swsetup_r+0x4a>
 800a018:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a01c:	4299      	cmp	r1, r3
 800a01e:	d002      	beq.n	800a026 <__swsetup_r+0x46>
 800a020:	4628      	mov	r0, r5
 800a022:	f7fd fbf9 	bl	8007818 <_free_r>
 800a026:	2300      	movs	r3, #0
 800a028:	6363      	str	r3, [r4, #52]	@ 0x34
 800a02a:	89a3      	ldrh	r3, [r4, #12]
 800a02c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a030:	81a3      	strh	r3, [r4, #12]
 800a032:	2300      	movs	r3, #0
 800a034:	6063      	str	r3, [r4, #4]
 800a036:	6923      	ldr	r3, [r4, #16]
 800a038:	6023      	str	r3, [r4, #0]
 800a03a:	89a3      	ldrh	r3, [r4, #12]
 800a03c:	f043 0308 	orr.w	r3, r3, #8
 800a040:	81a3      	strh	r3, [r4, #12]
 800a042:	6923      	ldr	r3, [r4, #16]
 800a044:	b94b      	cbnz	r3, 800a05a <__swsetup_r+0x7a>
 800a046:	89a3      	ldrh	r3, [r4, #12]
 800a048:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a04c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a050:	d003      	beq.n	800a05a <__swsetup_r+0x7a>
 800a052:	4621      	mov	r1, r4
 800a054:	4628      	mov	r0, r5
 800a056:	f000 f883 	bl	800a160 <__smakebuf_r>
 800a05a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a05e:	f013 0201 	ands.w	r2, r3, #1
 800a062:	d00a      	beq.n	800a07a <__swsetup_r+0x9a>
 800a064:	2200      	movs	r2, #0
 800a066:	60a2      	str	r2, [r4, #8]
 800a068:	6962      	ldr	r2, [r4, #20]
 800a06a:	4252      	negs	r2, r2
 800a06c:	61a2      	str	r2, [r4, #24]
 800a06e:	6922      	ldr	r2, [r4, #16]
 800a070:	b942      	cbnz	r2, 800a084 <__swsetup_r+0xa4>
 800a072:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a076:	d1c5      	bne.n	800a004 <__swsetup_r+0x24>
 800a078:	bd38      	pop	{r3, r4, r5, pc}
 800a07a:	0799      	lsls	r1, r3, #30
 800a07c:	bf58      	it	pl
 800a07e:	6962      	ldrpl	r2, [r4, #20]
 800a080:	60a2      	str	r2, [r4, #8]
 800a082:	e7f4      	b.n	800a06e <__swsetup_r+0x8e>
 800a084:	2000      	movs	r0, #0
 800a086:	e7f7      	b.n	800a078 <__swsetup_r+0x98>
 800a088:	20000018 	.word	0x20000018

0800a08c <_raise_r>:
 800a08c:	291f      	cmp	r1, #31
 800a08e:	b538      	push	{r3, r4, r5, lr}
 800a090:	4605      	mov	r5, r0
 800a092:	460c      	mov	r4, r1
 800a094:	d904      	bls.n	800a0a0 <_raise_r+0x14>
 800a096:	2316      	movs	r3, #22
 800a098:	6003      	str	r3, [r0, #0]
 800a09a:	f04f 30ff 	mov.w	r0, #4294967295
 800a09e:	bd38      	pop	{r3, r4, r5, pc}
 800a0a0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a0a2:	b112      	cbz	r2, 800a0aa <_raise_r+0x1e>
 800a0a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a0a8:	b94b      	cbnz	r3, 800a0be <_raise_r+0x32>
 800a0aa:	4628      	mov	r0, r5
 800a0ac:	f000 f830 	bl	800a110 <_getpid_r>
 800a0b0:	4622      	mov	r2, r4
 800a0b2:	4601      	mov	r1, r0
 800a0b4:	4628      	mov	r0, r5
 800a0b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0ba:	f000 b817 	b.w	800a0ec <_kill_r>
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d00a      	beq.n	800a0d8 <_raise_r+0x4c>
 800a0c2:	1c59      	adds	r1, r3, #1
 800a0c4:	d103      	bne.n	800a0ce <_raise_r+0x42>
 800a0c6:	2316      	movs	r3, #22
 800a0c8:	6003      	str	r3, [r0, #0]
 800a0ca:	2001      	movs	r0, #1
 800a0cc:	e7e7      	b.n	800a09e <_raise_r+0x12>
 800a0ce:	2100      	movs	r1, #0
 800a0d0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a0d4:	4620      	mov	r0, r4
 800a0d6:	4798      	blx	r3
 800a0d8:	2000      	movs	r0, #0
 800a0da:	e7e0      	b.n	800a09e <_raise_r+0x12>

0800a0dc <raise>:
 800a0dc:	4b02      	ldr	r3, [pc, #8]	@ (800a0e8 <raise+0xc>)
 800a0de:	4601      	mov	r1, r0
 800a0e0:	6818      	ldr	r0, [r3, #0]
 800a0e2:	f7ff bfd3 	b.w	800a08c <_raise_r>
 800a0e6:	bf00      	nop
 800a0e8:	20000018 	.word	0x20000018

0800a0ec <_kill_r>:
 800a0ec:	b538      	push	{r3, r4, r5, lr}
 800a0ee:	4d07      	ldr	r5, [pc, #28]	@ (800a10c <_kill_r+0x20>)
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	4604      	mov	r4, r0
 800a0f4:	4608      	mov	r0, r1
 800a0f6:	4611      	mov	r1, r2
 800a0f8:	602b      	str	r3, [r5, #0]
 800a0fa:	f7f7 fb4a 	bl	8001792 <_kill>
 800a0fe:	1c43      	adds	r3, r0, #1
 800a100:	d102      	bne.n	800a108 <_kill_r+0x1c>
 800a102:	682b      	ldr	r3, [r5, #0]
 800a104:	b103      	cbz	r3, 800a108 <_kill_r+0x1c>
 800a106:	6023      	str	r3, [r4, #0]
 800a108:	bd38      	pop	{r3, r4, r5, pc}
 800a10a:	bf00      	nop
 800a10c:	200004c4 	.word	0x200004c4

0800a110 <_getpid_r>:
 800a110:	f7f7 bb37 	b.w	8001782 <_getpid>

0800a114 <__swhatbuf_r>:
 800a114:	b570      	push	{r4, r5, r6, lr}
 800a116:	460c      	mov	r4, r1
 800a118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a11c:	2900      	cmp	r1, #0
 800a11e:	b096      	sub	sp, #88	@ 0x58
 800a120:	4615      	mov	r5, r2
 800a122:	461e      	mov	r6, r3
 800a124:	da0d      	bge.n	800a142 <__swhatbuf_r+0x2e>
 800a126:	89a3      	ldrh	r3, [r4, #12]
 800a128:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a12c:	f04f 0100 	mov.w	r1, #0
 800a130:	bf14      	ite	ne
 800a132:	2340      	movne	r3, #64	@ 0x40
 800a134:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a138:	2000      	movs	r0, #0
 800a13a:	6031      	str	r1, [r6, #0]
 800a13c:	602b      	str	r3, [r5, #0]
 800a13e:	b016      	add	sp, #88	@ 0x58
 800a140:	bd70      	pop	{r4, r5, r6, pc}
 800a142:	466a      	mov	r2, sp
 800a144:	f000 f848 	bl	800a1d8 <_fstat_r>
 800a148:	2800      	cmp	r0, #0
 800a14a:	dbec      	blt.n	800a126 <__swhatbuf_r+0x12>
 800a14c:	9901      	ldr	r1, [sp, #4]
 800a14e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a152:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a156:	4259      	negs	r1, r3
 800a158:	4159      	adcs	r1, r3
 800a15a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a15e:	e7eb      	b.n	800a138 <__swhatbuf_r+0x24>

0800a160 <__smakebuf_r>:
 800a160:	898b      	ldrh	r3, [r1, #12]
 800a162:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a164:	079d      	lsls	r5, r3, #30
 800a166:	4606      	mov	r6, r0
 800a168:	460c      	mov	r4, r1
 800a16a:	d507      	bpl.n	800a17c <__smakebuf_r+0x1c>
 800a16c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a170:	6023      	str	r3, [r4, #0]
 800a172:	6123      	str	r3, [r4, #16]
 800a174:	2301      	movs	r3, #1
 800a176:	6163      	str	r3, [r4, #20]
 800a178:	b003      	add	sp, #12
 800a17a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a17c:	ab01      	add	r3, sp, #4
 800a17e:	466a      	mov	r2, sp
 800a180:	f7ff ffc8 	bl	800a114 <__swhatbuf_r>
 800a184:	9f00      	ldr	r7, [sp, #0]
 800a186:	4605      	mov	r5, r0
 800a188:	4639      	mov	r1, r7
 800a18a:	4630      	mov	r0, r6
 800a18c:	f7fd fbb8 	bl	8007900 <_malloc_r>
 800a190:	b948      	cbnz	r0, 800a1a6 <__smakebuf_r+0x46>
 800a192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a196:	059a      	lsls	r2, r3, #22
 800a198:	d4ee      	bmi.n	800a178 <__smakebuf_r+0x18>
 800a19a:	f023 0303 	bic.w	r3, r3, #3
 800a19e:	f043 0302 	orr.w	r3, r3, #2
 800a1a2:	81a3      	strh	r3, [r4, #12]
 800a1a4:	e7e2      	b.n	800a16c <__smakebuf_r+0xc>
 800a1a6:	89a3      	ldrh	r3, [r4, #12]
 800a1a8:	6020      	str	r0, [r4, #0]
 800a1aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1ae:	81a3      	strh	r3, [r4, #12]
 800a1b0:	9b01      	ldr	r3, [sp, #4]
 800a1b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a1b6:	b15b      	cbz	r3, 800a1d0 <__smakebuf_r+0x70>
 800a1b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1bc:	4630      	mov	r0, r6
 800a1be:	f000 f81d 	bl	800a1fc <_isatty_r>
 800a1c2:	b128      	cbz	r0, 800a1d0 <__smakebuf_r+0x70>
 800a1c4:	89a3      	ldrh	r3, [r4, #12]
 800a1c6:	f023 0303 	bic.w	r3, r3, #3
 800a1ca:	f043 0301 	orr.w	r3, r3, #1
 800a1ce:	81a3      	strh	r3, [r4, #12]
 800a1d0:	89a3      	ldrh	r3, [r4, #12]
 800a1d2:	431d      	orrs	r5, r3
 800a1d4:	81a5      	strh	r5, [r4, #12]
 800a1d6:	e7cf      	b.n	800a178 <__smakebuf_r+0x18>

0800a1d8 <_fstat_r>:
 800a1d8:	b538      	push	{r3, r4, r5, lr}
 800a1da:	4d07      	ldr	r5, [pc, #28]	@ (800a1f8 <_fstat_r+0x20>)
 800a1dc:	2300      	movs	r3, #0
 800a1de:	4604      	mov	r4, r0
 800a1e0:	4608      	mov	r0, r1
 800a1e2:	4611      	mov	r1, r2
 800a1e4:	602b      	str	r3, [r5, #0]
 800a1e6:	f7f7 fb34 	bl	8001852 <_fstat>
 800a1ea:	1c43      	adds	r3, r0, #1
 800a1ec:	d102      	bne.n	800a1f4 <_fstat_r+0x1c>
 800a1ee:	682b      	ldr	r3, [r5, #0]
 800a1f0:	b103      	cbz	r3, 800a1f4 <_fstat_r+0x1c>
 800a1f2:	6023      	str	r3, [r4, #0]
 800a1f4:	bd38      	pop	{r3, r4, r5, pc}
 800a1f6:	bf00      	nop
 800a1f8:	200004c4 	.word	0x200004c4

0800a1fc <_isatty_r>:
 800a1fc:	b538      	push	{r3, r4, r5, lr}
 800a1fe:	4d06      	ldr	r5, [pc, #24]	@ (800a218 <_isatty_r+0x1c>)
 800a200:	2300      	movs	r3, #0
 800a202:	4604      	mov	r4, r0
 800a204:	4608      	mov	r0, r1
 800a206:	602b      	str	r3, [r5, #0]
 800a208:	f7f7 fb33 	bl	8001872 <_isatty>
 800a20c:	1c43      	adds	r3, r0, #1
 800a20e:	d102      	bne.n	800a216 <_isatty_r+0x1a>
 800a210:	682b      	ldr	r3, [r5, #0]
 800a212:	b103      	cbz	r3, 800a216 <_isatty_r+0x1a>
 800a214:	6023      	str	r3, [r4, #0]
 800a216:	bd38      	pop	{r3, r4, r5, pc}
 800a218:	200004c4 	.word	0x200004c4

0800a21c <sqrt>:
 800a21c:	b538      	push	{r3, r4, r5, lr}
 800a21e:	ed2d 8b02 	vpush	{d8}
 800a222:	ec55 4b10 	vmov	r4, r5, d0
 800a226:	f000 f825 	bl	800a274 <__ieee754_sqrt>
 800a22a:	4622      	mov	r2, r4
 800a22c:	462b      	mov	r3, r5
 800a22e:	4620      	mov	r0, r4
 800a230:	4629      	mov	r1, r5
 800a232:	eeb0 8a40 	vmov.f32	s16, s0
 800a236:	eef0 8a60 	vmov.f32	s17, s1
 800a23a:	f7f6 fc77 	bl	8000b2c <__aeabi_dcmpun>
 800a23e:	b990      	cbnz	r0, 800a266 <sqrt+0x4a>
 800a240:	2200      	movs	r2, #0
 800a242:	2300      	movs	r3, #0
 800a244:	4620      	mov	r0, r4
 800a246:	4629      	mov	r1, r5
 800a248:	f7f6 fc48 	bl	8000adc <__aeabi_dcmplt>
 800a24c:	b158      	cbz	r0, 800a266 <sqrt+0x4a>
 800a24e:	f7fc fc63 	bl	8006b18 <__errno>
 800a252:	2321      	movs	r3, #33	@ 0x21
 800a254:	6003      	str	r3, [r0, #0]
 800a256:	2200      	movs	r2, #0
 800a258:	2300      	movs	r3, #0
 800a25a:	4610      	mov	r0, r2
 800a25c:	4619      	mov	r1, r3
 800a25e:	f7f6 faf5 	bl	800084c <__aeabi_ddiv>
 800a262:	ec41 0b18 	vmov	d8, r0, r1
 800a266:	eeb0 0a48 	vmov.f32	s0, s16
 800a26a:	eef0 0a68 	vmov.f32	s1, s17
 800a26e:	ecbd 8b02 	vpop	{d8}
 800a272:	bd38      	pop	{r3, r4, r5, pc}

0800a274 <__ieee754_sqrt>:
 800a274:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a278:	4a68      	ldr	r2, [pc, #416]	@ (800a41c <__ieee754_sqrt+0x1a8>)
 800a27a:	ec55 4b10 	vmov	r4, r5, d0
 800a27e:	43aa      	bics	r2, r5
 800a280:	462b      	mov	r3, r5
 800a282:	4621      	mov	r1, r4
 800a284:	d110      	bne.n	800a2a8 <__ieee754_sqrt+0x34>
 800a286:	4622      	mov	r2, r4
 800a288:	4620      	mov	r0, r4
 800a28a:	4629      	mov	r1, r5
 800a28c:	f7f6 f9b4 	bl	80005f8 <__aeabi_dmul>
 800a290:	4602      	mov	r2, r0
 800a292:	460b      	mov	r3, r1
 800a294:	4620      	mov	r0, r4
 800a296:	4629      	mov	r1, r5
 800a298:	f7f5 fff8 	bl	800028c <__adddf3>
 800a29c:	4604      	mov	r4, r0
 800a29e:	460d      	mov	r5, r1
 800a2a0:	ec45 4b10 	vmov	d0, r4, r5
 800a2a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2a8:	2d00      	cmp	r5, #0
 800a2aa:	dc0e      	bgt.n	800a2ca <__ieee754_sqrt+0x56>
 800a2ac:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800a2b0:	4322      	orrs	r2, r4
 800a2b2:	d0f5      	beq.n	800a2a0 <__ieee754_sqrt+0x2c>
 800a2b4:	b19d      	cbz	r5, 800a2de <__ieee754_sqrt+0x6a>
 800a2b6:	4622      	mov	r2, r4
 800a2b8:	4620      	mov	r0, r4
 800a2ba:	4629      	mov	r1, r5
 800a2bc:	f7f5 ffe4 	bl	8000288 <__aeabi_dsub>
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	460b      	mov	r3, r1
 800a2c4:	f7f6 fac2 	bl	800084c <__aeabi_ddiv>
 800a2c8:	e7e8      	b.n	800a29c <__ieee754_sqrt+0x28>
 800a2ca:	152a      	asrs	r2, r5, #20
 800a2cc:	d115      	bne.n	800a2fa <__ieee754_sqrt+0x86>
 800a2ce:	2000      	movs	r0, #0
 800a2d0:	e009      	b.n	800a2e6 <__ieee754_sqrt+0x72>
 800a2d2:	0acb      	lsrs	r3, r1, #11
 800a2d4:	3a15      	subs	r2, #21
 800a2d6:	0549      	lsls	r1, r1, #21
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d0fa      	beq.n	800a2d2 <__ieee754_sqrt+0x5e>
 800a2dc:	e7f7      	b.n	800a2ce <__ieee754_sqrt+0x5a>
 800a2de:	462a      	mov	r2, r5
 800a2e0:	e7fa      	b.n	800a2d8 <__ieee754_sqrt+0x64>
 800a2e2:	005b      	lsls	r3, r3, #1
 800a2e4:	3001      	adds	r0, #1
 800a2e6:	02dc      	lsls	r4, r3, #11
 800a2e8:	d5fb      	bpl.n	800a2e2 <__ieee754_sqrt+0x6e>
 800a2ea:	1e44      	subs	r4, r0, #1
 800a2ec:	1b12      	subs	r2, r2, r4
 800a2ee:	f1c0 0420 	rsb	r4, r0, #32
 800a2f2:	fa21 f404 	lsr.w	r4, r1, r4
 800a2f6:	4323      	orrs	r3, r4
 800a2f8:	4081      	lsls	r1, r0
 800a2fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2fe:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800a302:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a306:	07d2      	lsls	r2, r2, #31
 800a308:	bf5c      	itt	pl
 800a30a:	005b      	lslpl	r3, r3, #1
 800a30c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800a310:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a314:	bf58      	it	pl
 800a316:	0049      	lslpl	r1, r1, #1
 800a318:	2600      	movs	r6, #0
 800a31a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800a31e:	106d      	asrs	r5, r5, #1
 800a320:	0049      	lsls	r1, r1, #1
 800a322:	2016      	movs	r0, #22
 800a324:	4632      	mov	r2, r6
 800a326:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800a32a:	1917      	adds	r7, r2, r4
 800a32c:	429f      	cmp	r7, r3
 800a32e:	bfde      	ittt	le
 800a330:	193a      	addle	r2, r7, r4
 800a332:	1bdb      	suble	r3, r3, r7
 800a334:	1936      	addle	r6, r6, r4
 800a336:	0fcf      	lsrs	r7, r1, #31
 800a338:	3801      	subs	r0, #1
 800a33a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800a33e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a342:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a346:	d1f0      	bne.n	800a32a <__ieee754_sqrt+0xb6>
 800a348:	4604      	mov	r4, r0
 800a34a:	2720      	movs	r7, #32
 800a34c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800a350:	429a      	cmp	r2, r3
 800a352:	eb00 0e0c 	add.w	lr, r0, ip
 800a356:	db02      	blt.n	800a35e <__ieee754_sqrt+0xea>
 800a358:	d113      	bne.n	800a382 <__ieee754_sqrt+0x10e>
 800a35a:	458e      	cmp	lr, r1
 800a35c:	d811      	bhi.n	800a382 <__ieee754_sqrt+0x10e>
 800a35e:	f1be 0f00 	cmp.w	lr, #0
 800a362:	eb0e 000c 	add.w	r0, lr, ip
 800a366:	da42      	bge.n	800a3ee <__ieee754_sqrt+0x17a>
 800a368:	2800      	cmp	r0, #0
 800a36a:	db40      	blt.n	800a3ee <__ieee754_sqrt+0x17a>
 800a36c:	f102 0801 	add.w	r8, r2, #1
 800a370:	1a9b      	subs	r3, r3, r2
 800a372:	458e      	cmp	lr, r1
 800a374:	bf88      	it	hi
 800a376:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a37a:	eba1 010e 	sub.w	r1, r1, lr
 800a37e:	4464      	add	r4, ip
 800a380:	4642      	mov	r2, r8
 800a382:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800a386:	3f01      	subs	r7, #1
 800a388:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800a38c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a390:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800a394:	d1dc      	bne.n	800a350 <__ieee754_sqrt+0xdc>
 800a396:	4319      	orrs	r1, r3
 800a398:	d01b      	beq.n	800a3d2 <__ieee754_sqrt+0x15e>
 800a39a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800a420 <__ieee754_sqrt+0x1ac>
 800a39e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800a424 <__ieee754_sqrt+0x1b0>
 800a3a2:	e9da 0100 	ldrd	r0, r1, [sl]
 800a3a6:	e9db 2300 	ldrd	r2, r3, [fp]
 800a3aa:	f7f5 ff6d 	bl	8000288 <__aeabi_dsub>
 800a3ae:	e9da 8900 	ldrd	r8, r9, [sl]
 800a3b2:	4602      	mov	r2, r0
 800a3b4:	460b      	mov	r3, r1
 800a3b6:	4640      	mov	r0, r8
 800a3b8:	4649      	mov	r1, r9
 800a3ba:	f7f6 fb99 	bl	8000af0 <__aeabi_dcmple>
 800a3be:	b140      	cbz	r0, 800a3d2 <__ieee754_sqrt+0x15e>
 800a3c0:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a3c4:	e9da 0100 	ldrd	r0, r1, [sl]
 800a3c8:	e9db 2300 	ldrd	r2, r3, [fp]
 800a3cc:	d111      	bne.n	800a3f2 <__ieee754_sqrt+0x17e>
 800a3ce:	3601      	adds	r6, #1
 800a3d0:	463c      	mov	r4, r7
 800a3d2:	1072      	asrs	r2, r6, #1
 800a3d4:	0863      	lsrs	r3, r4, #1
 800a3d6:	07f1      	lsls	r1, r6, #31
 800a3d8:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800a3dc:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800a3e0:	bf48      	it	mi
 800a3e2:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800a3e6:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	e756      	b.n	800a29c <__ieee754_sqrt+0x28>
 800a3ee:	4690      	mov	r8, r2
 800a3f0:	e7be      	b.n	800a370 <__ieee754_sqrt+0xfc>
 800a3f2:	f7f5 ff4b 	bl	800028c <__adddf3>
 800a3f6:	e9da 8900 	ldrd	r8, r9, [sl]
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	4640      	mov	r0, r8
 800a400:	4649      	mov	r1, r9
 800a402:	f7f6 fb6b 	bl	8000adc <__aeabi_dcmplt>
 800a406:	b120      	cbz	r0, 800a412 <__ieee754_sqrt+0x19e>
 800a408:	1ca0      	adds	r0, r4, #2
 800a40a:	bf08      	it	eq
 800a40c:	3601      	addeq	r6, #1
 800a40e:	3402      	adds	r4, #2
 800a410:	e7df      	b.n	800a3d2 <__ieee754_sqrt+0x15e>
 800a412:	1c63      	adds	r3, r4, #1
 800a414:	f023 0401 	bic.w	r4, r3, #1
 800a418:	e7db      	b.n	800a3d2 <__ieee754_sqrt+0x15e>
 800a41a:	bf00      	nop
 800a41c:	7ff00000 	.word	0x7ff00000
 800a420:	200001e0 	.word	0x200001e0
 800a424:	200001d8 	.word	0x200001d8

0800a428 <_init>:
 800a428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a42a:	bf00      	nop
 800a42c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a42e:	bc08      	pop	{r3}
 800a430:	469e      	mov	lr, r3
 800a432:	4770      	bx	lr

0800a434 <_fini>:
 800a434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a436:	bf00      	nop
 800a438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a43a:	bc08      	pop	{r3}
 800a43c:	469e      	mov	lr, r3
 800a43e:	4770      	bx	lr
