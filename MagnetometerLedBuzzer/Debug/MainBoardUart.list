
MainBoardUart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009950  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f0  08009ae0  08009ae0  0000aae0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fd0  08009fd0  0000b1e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009fd0  08009fd0  0000afd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fd8  08009fd8  0000b1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fd8  08009fd8  0000afd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009fdc  08009fdc  0000afdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08009fe0  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1e8  2**0
                  CONTENTS
 10 .bss          00000264  200001e8  200001e8  0000b1e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000044c  2000044c  0000b1e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dd81  00000000  00000000  0000b218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021b3  00000000  00000000  00018f99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e20  00000000  00000000  0001b150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000af7  00000000  00000000  0001bf70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e5f7  00000000  00000000  0001ca67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011f7a  00000000  00000000  0003b05e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ba22a  00000000  00000000  0004cfd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00107202  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000050e0  00000000  00000000  00107248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  0010c328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009ac8 	.word	0x08009ac8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08009ac8 	.word	0x08009ac8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <QMC5883L_Init>:

/**
  * @brief Initialize QMC5883L magnetometer
  * @retval HAL status
  */
HAL_StatusTypeDef QMC5883L_Init(void) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af04      	add	r7, sp, #16
    uint8_t data;
    HAL_StatusTypeDef ret;

    // Reset the device
    data = 0x80; // Soft reset
 8000cfa:	2380      	movs	r3, #128	@ 0x80
 8000cfc:	71bb      	strb	r3, [r7, #6]
    ret = HAL_I2C_Mem_Write(&hi2c1, QMC5883L_ADDR, 0x0A, 1, &data, 1, HAL_MAX_DELAY);
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000d02:	9302      	str	r3, [sp, #8]
 8000d04:	2301      	movs	r3, #1
 8000d06:	9301      	str	r3, [sp, #4]
 8000d08:	1dbb      	adds	r3, r7, #6
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	220a      	movs	r2, #10
 8000d10:	211a      	movs	r1, #26
 8000d12:	4814      	ldr	r0, [pc, #80]	@ (8000d64 <QMC5883L_Init+0x70>)
 8000d14:	f001 fa22 	bl	800215c <HAL_I2C_Mem_Write>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK) return ret;
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <QMC5883L_Init+0x32>
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	e019      	b.n	8000d5a <QMC5883L_Init+0x66>
    HAL_Delay(10);
 8000d26:	200a      	movs	r0, #10
 8000d28:	f000 fef8 	bl	8001b1c <HAL_Delay>

    // Configure: Continuous mode, 200 Hz, 8G range, 512 oversampling
    data = 0x1D; // 0b00011101: MODE=01 (continuous), ODR=11 (200 Hz), RNG=10 (8G), OSR=11 (512)
 8000d2c:	231d      	movs	r3, #29
 8000d2e:	71bb      	strb	r3, [r7, #6]
    ret = HAL_I2C_Mem_Write(&hi2c1, QMC5883L_ADDR, QMC5883L_REG_CTRL1, 1, &data, 1, HAL_MAX_DELAY);
 8000d30:	f04f 33ff 	mov.w	r3, #4294967295
 8000d34:	9302      	str	r3, [sp, #8]
 8000d36:	2301      	movs	r3, #1
 8000d38:	9301      	str	r3, [sp, #4]
 8000d3a:	1dbb      	adds	r3, r7, #6
 8000d3c:	9300      	str	r3, [sp, #0]
 8000d3e:	2301      	movs	r3, #1
 8000d40:	2209      	movs	r2, #9
 8000d42:	211a      	movs	r1, #26
 8000d44:	4807      	ldr	r0, [pc, #28]	@ (8000d64 <QMC5883L_Init+0x70>)
 8000d46:	f001 fa09 	bl	800215c <HAL_I2C_Mem_Write>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK) return ret;
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <QMC5883L_Init+0x64>
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	e000      	b.n	8000d5a <QMC5883L_Init+0x66>

    return HAL_OK;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000204 	.word	0x20000204

08000d68 <QMC5883L_ReadXYZ>:
/**
  * @brief Read X, Y, Z values from QMC5883L
  * @param x, y, z: Pointers to store magnetometer data
  * @retval HAL status
  */
HAL_StatusTypeDef QMC5883L_ReadXYZ(int16_t *x, int16_t *y, int16_t *z) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08c      	sub	sp, #48	@ 0x30
 8000d6c:	af04      	add	r7, sp, #16
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
    uint8_t status;
    HAL_StatusTypeDef ret;

    // Check if data is ready (DRDY bit)
    do {
        ret = HAL_I2C_Mem_Read(&hi2c1, QMC5883L_ADDR, QMC5883L_REG_STATUS, 1, &status, 1, HAL_MAX_DELAY);
 8000d74:	f04f 33ff 	mov.w	r3, #4294967295
 8000d78:	9302      	str	r3, [sp, #8]
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	9301      	str	r3, [sp, #4]
 8000d7e:	f107 0317 	add.w	r3, r7, #23
 8000d82:	9300      	str	r3, [sp, #0]
 8000d84:	2301      	movs	r3, #1
 8000d86:	2206      	movs	r2, #6
 8000d88:	211a      	movs	r1, #26
 8000d8a:	4822      	ldr	r0, [pc, #136]	@ (8000e14 <QMC5883L_ReadXYZ+0xac>)
 8000d8c:	f001 fafa 	bl	8002384 <HAL_I2C_Mem_Read>
 8000d90:	4603      	mov	r3, r0
 8000d92:	77fb      	strb	r3, [r7, #31]
        if (ret != HAL_OK) return ret;
 8000d94:	7ffb      	ldrb	r3, [r7, #31]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <QMC5883L_ReadXYZ+0x36>
 8000d9a:	7ffb      	ldrb	r3, [r7, #31]
 8000d9c:	e035      	b.n	8000e0a <QMC5883L_ReadXYZ+0xa2>
    } while (!(status & 0x01)); // Wait for DRDY = 1
 8000d9e:	7dfb      	ldrb	r3, [r7, #23]
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d0e5      	beq.n	8000d74 <QMC5883L_ReadXYZ+0xc>

    // Read 6 bytes (X_LSB, X_MSB, Y_LSB, Y_MSB, Z_LSB, Z_MSB)
    ret = HAL_I2C_Mem_Read(&hi2c1, QMC5883L_ADDR, QMC5883L_REG_X_LSB, 1, data, 6, HAL_MAX_DELAY);
 8000da8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dac:	9302      	str	r3, [sp, #8]
 8000dae:	2306      	movs	r3, #6
 8000db0:	9301      	str	r3, [sp, #4]
 8000db2:	f107 0318 	add.w	r3, r7, #24
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	2301      	movs	r3, #1
 8000dba:	2200      	movs	r2, #0
 8000dbc:	211a      	movs	r1, #26
 8000dbe:	4815      	ldr	r0, [pc, #84]	@ (8000e14 <QMC5883L_ReadXYZ+0xac>)
 8000dc0:	f001 fae0 	bl	8002384 <HAL_I2C_Mem_Read>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	77fb      	strb	r3, [r7, #31]
    if (ret != HAL_OK) return ret;
 8000dc8:	7ffb      	ldrb	r3, [r7, #31]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <QMC5883L_ReadXYZ+0x6a>
 8000dce:	7ffb      	ldrb	r3, [r7, #31]
 8000dd0:	e01b      	b.n	8000e0a <QMC5883L_ReadXYZ+0xa2>

    // Combine bytes (2’s complement)
    *x = (int16_t)(data[1] << 8 | data[0]);
 8000dd2:	7e7b      	ldrb	r3, [r7, #25]
 8000dd4:	021b      	lsls	r3, r3, #8
 8000dd6:	b21a      	sxth	r2, r3
 8000dd8:	7e3b      	ldrb	r3, [r7, #24]
 8000dda:	b21b      	sxth	r3, r3
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	b21a      	sxth	r2, r3
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)(data[3] << 8 | data[2]);
 8000de4:	7efb      	ldrb	r3, [r7, #27]
 8000de6:	021b      	lsls	r3, r3, #8
 8000de8:	b21a      	sxth	r2, r3
 8000dea:	7ebb      	ldrb	r3, [r7, #26]
 8000dec:	b21b      	sxth	r3, r3
 8000dee:	4313      	orrs	r3, r2
 8000df0:	b21a      	sxth	r2, r3
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)(data[5] << 8 | data[4]);
 8000df6:	7f7b      	ldrb	r3, [r7, #29]
 8000df8:	021b      	lsls	r3, r3, #8
 8000dfa:	b21a      	sxth	r2, r3
 8000dfc:	7f3b      	ldrb	r3, [r7, #28]
 8000dfe:	b21b      	sxth	r3, r3
 8000e00:	4313      	orrs	r3, r2
 8000e02:	b21a      	sxth	r2, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	801a      	strh	r2, [r3, #0]

    return HAL_OK;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3720      	adds	r7, #32
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000204 	.word	0x20000204

08000e18 <USART2_Transmit_Packet>:
/**
  * @brief Transmit magnetometer data over USART2 using custom protocol
  * @param x, y, z: Magnetometer readings
  * @retval None
  */
void USART2_Transmit_Packet(int16_t x, int16_t y, int16_t z) {
 8000e18:	b480      	push	{r7}
 8000e1a:	b089      	sub	sp, #36	@ 0x24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	80fb      	strh	r3, [r7, #6]
 8000e22:	460b      	mov	r3, r1
 8000e24:	80bb      	strh	r3, [r7, #4]
 8000e26:	4613      	mov	r3, r2
 8000e28:	807b      	strh	r3, [r7, #2]
    uint8_t packet[11];
    uint8_t checksum = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	77fb      	strb	r3, [r7, #31]

    // Start Marker
    packet[0] = PROTOCOL_START_MARKER;
 8000e2e:	237e      	movs	r3, #126	@ 0x7e
 8000e30:	723b      	strb	r3, [r7, #8]

    // Length (length + sensor type + sensor ID + payload + checksum)
    packet[1] = 0x0A; // 10 bytes
 8000e32:	230a      	movs	r3, #10
 8000e34:	727b      	strb	r3, [r7, #9]
    checksum += packet[1];
 8000e36:	7a7a      	ldrb	r2, [r7, #9]
 8000e38:	7ffb      	ldrb	r3, [r7, #31]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	77fb      	strb	r3, [r7, #31]

    // Sensor Type
    packet[2] = PROTOCOL_SENSOR_TYPE_MAG;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	72bb      	strb	r3, [r7, #10]
    checksum += packet[2];
 8000e42:	7aba      	ldrb	r2, [r7, #10]
 8000e44:	7ffb      	ldrb	r3, [r7, #31]
 8000e46:	4413      	add	r3, r2
 8000e48:	77fb      	strb	r3, [r7, #31]

    // Sensor ID
    packet[3] = PROTOCOL_SENSOR_ID_QMC;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	72fb      	strb	r3, [r7, #11]
    checksum += packet[3];
 8000e4e:	7afa      	ldrb	r2, [r7, #11]
 8000e50:	7ffb      	ldrb	r3, [r7, #31]
 8000e52:	4413      	add	r3, r2
 8000e54:	77fb      	strb	r3, [r7, #31]

    // Payload: X, Y, Z (little-endian)
    packet[4] = (uint8_t)(x & 0xFF); // X LSB
 8000e56:	88fb      	ldrh	r3, [r7, #6]
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	733b      	strb	r3, [r7, #12]
    packet[5] = (uint8_t)(x >> 8);   // X MSB
 8000e5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e60:	121b      	asrs	r3, r3, #8
 8000e62:	b21b      	sxth	r3, r3
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	737b      	strb	r3, [r7, #13]
    packet[6] = (uint8_t)(y & 0xFF); // Y LSB
 8000e68:	88bb      	ldrh	r3, [r7, #4]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	73bb      	strb	r3, [r7, #14]
    packet[7] = (uint8_t)(y >> 8);   // Y MSB
 8000e6e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e72:	121b      	asrs	r3, r3, #8
 8000e74:	b21b      	sxth	r3, r3
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	73fb      	strb	r3, [r7, #15]
    packet[8] = (uint8_t)(z & 0xFF); // Z LSB
 8000e7a:	887b      	ldrh	r3, [r7, #2]
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	743b      	strb	r3, [r7, #16]
    packet[9] = (uint8_t)(z >> 8);   // Z MSB
 8000e80:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e84:	121b      	asrs	r3, r3, #8
 8000e86:	b21b      	sxth	r3, r3
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	747b      	strb	r3, [r7, #17]
    for (int i = 4; i <= 9; i++) {
 8000e8c:	2304      	movs	r3, #4
 8000e8e:	61bb      	str	r3, [r7, #24]
 8000e90:	e00a      	b.n	8000ea8 <USART2_Transmit_Packet+0x90>
        checksum += packet[i];
 8000e92:	f107 0208 	add.w	r2, r7, #8
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	4413      	add	r3, r2
 8000e9a:	781a      	ldrb	r2, [r3, #0]
 8000e9c:	7ffb      	ldrb	r3, [r7, #31]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	77fb      	strb	r3, [r7, #31]
    for (int i = 4; i <= 9; i++) {
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	61bb      	str	r3, [r7, #24]
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	2b09      	cmp	r3, #9
 8000eac:	ddf1      	ble.n	8000e92 <USART2_Transmit_Packet+0x7a>
    }

    // Checksum
    packet[10] = checksum;
 8000eae:	7ffb      	ldrb	r3, [r7, #31]
 8000eb0:	74bb      	strb	r3, [r7, #18]

    // Transmit packet
    for (int i = 0; i < 11; i++) {
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
 8000eb6:	e010      	b.n	8000eda <USART2_Transmit_Packet+0xc2>
        while (!(USART2->ISR & USART_ISR_TXE_Msk));
 8000eb8:	bf00      	nop
 8000eba:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef0 <USART2_Transmit_Packet+0xd8>)
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d0f9      	beq.n	8000eba <USART2_Transmit_Packet+0xa2>
        USART2->TDR = packet[i];
 8000ec6:	f107 0208 	add.w	r2, r7, #8
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	4413      	add	r3, r2
 8000ece:	781a      	ldrb	r2, [r3, #0]
 8000ed0:	4b07      	ldr	r3, [pc, #28]	@ (8000ef0 <USART2_Transmit_Packet+0xd8>)
 8000ed2:	851a      	strh	r2, [r3, #40]	@ 0x28
    for (int i = 0; i < 11; i++) {
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	2b0a      	cmp	r3, #10
 8000ede:	ddeb      	ble.n	8000eb8 <USART2_Transmit_Packet+0xa0>
    }
}
 8000ee0:	bf00      	nop
 8000ee2:	bf00      	nop
 8000ee4:	3724      	adds	r7, #36	@ 0x24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	40004400 	.word	0x40004400

08000ef4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b0a0      	sub	sp, #128	@ 0x80
 8000ef8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  int16_t x, y, z;
  float magnitude;
  uint32_t dutyCycle = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	673b      	str	r3, [r7, #112]	@ 0x70
  const uint32_t maxDuty = 7999; // Matches TIM1 and TIM2 Period
 8000efe:	f641 733f 	movw	r3, #7999	@ 0x1f3f
 8000f02:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f04:	f000 fda4 	bl	8001a50 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f08:	f000 f902 	bl	8001110 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0c:	f000 fa96 	bl	800143c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f10:	f000 f952 	bl	80011b8 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000f14:	f000 f990 	bl	8001238 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f18:	f000 fa1e 	bl	8001358 <MX_TIM2_Init>
  MX_USART2_Init();
 8000f1c:	f000 fa76 	bl	800140c <MX_USART2_Init>
  /* USER CODE BEGIN 2 */

  // Initialize USART1 using custom serial code
  enableUSART1();
 8000f20:	f000 fb14 	bl	800154c <enableUSART1>

  // Initialize QMC5883L
  ret = QMC5883L_Init();
 8000f24:	f7ff fee6 	bl	8000cf4 <QMC5883L_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
  if (ret != HAL_OK) {
 8000f2e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d00c      	beq.n	8000f50 <main+0x5c>
      sprintf(buffer, "QMC5883L Init Failed: %d\r\n", ret);
 8000f36:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8000f3a:	463b      	mov	r3, r7
 8000f3c:	4969      	ldr	r1, [pc, #420]	@ (80010e4 <main+0x1f0>)
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f005 f882 	bl	8006048 <siprintf>
      send_string(buffer);
 8000f44:	463b      	mov	r3, r7
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 fb3a 	bl	80015c0 <send_string>
      while (1);
 8000f4c:	bf00      	nop
 8000f4e:	e7fd      	b.n	8000f4c <main+0x58>
  }

  // Start PWM on TIM1 Channel 3 (LED) and TIM2 Channel 3 (Buzzer)
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000f50:	2108      	movs	r1, #8
 8000f52:	4865      	ldr	r0, [pc, #404]	@ (80010e8 <main+0x1f4>)
 8000f54:	f003 faa0 	bl	8004498 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000f58:	2108      	movs	r1, #8
 8000f5a:	4864      	ldr	r0, [pc, #400]	@ (80010ec <main+0x1f8>)
 8000f5c:	f003 fa9c 	bl	8004498 <HAL_TIM_PWM_Start>

  // Send startup message over USART1
  sprintf(buffer, "QMC5883L Initialized, LED and Buzzer PWM Started\r\n");
 8000f60:	463b      	mov	r3, r7
 8000f62:	4963      	ldr	r1, [pc, #396]	@ (80010f0 <main+0x1fc>)
 8000f64:	4618      	mov	r0, r3
 8000f66:	f005 f86f 	bl	8006048 <siprintf>
  send_string(buffer);
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f000 fb27 	bl	80015c0 <send_string>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // Increment timers
    uartTimer += 10;
 8000f72:	4b60      	ldr	r3, [pc, #384]	@ (80010f4 <main+0x200>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	330a      	adds	r3, #10
 8000f78:	4a5e      	ldr	r2, [pc, #376]	@ (80010f4 <main+0x200>)
 8000f7a:	6013      	str	r3, [r2, #0]
    magTimer += 10;
 8000f7c:	4b5e      	ldr	r3, [pc, #376]	@ (80010f8 <main+0x204>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	330a      	adds	r3, #10
 8000f82:	4a5d      	ldr	r2, [pc, #372]	@ (80010f8 <main+0x204>)
 8000f84:	6013      	str	r3, [r2, #0]

    // Read magnetometer every 200 ms
    if (magTimer >= 200) {
 8000f86:	4b5c      	ldr	r3, [pc, #368]	@ (80010f8 <main+0x204>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2bc7      	cmp	r3, #199	@ 0xc7
 8000f8c:	f240 8088 	bls.w	80010a0 <main+0x1ac>
        ret = QMC5883L_ReadXYZ(&x, &y, &z);
 8000f90:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8000f94:	f107 0166 	add.w	r1, r7, #102	@ 0x66
 8000f98:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fee3 	bl	8000d68 <QMC5883L_ReadXYZ>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
        if (ret == HAL_OK) {
 8000fa8:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d169      	bne.n	8001084 <main+0x190>
            // Calculate magnetic field magnitude
            magnitude = sqrt((float)(x * x + y * y + z * z));
 8000fb0:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	@ 0x68
 8000fb4:	f9b7 2068 	ldrsh.w	r2, [r7, #104]	@ 0x68
 8000fb8:	fb03 f202 	mul.w	r2, r3, r2
 8000fbc:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	@ 0x66
 8000fc0:	f9b7 1066 	ldrsh.w	r1, [r7, #102]	@ 0x66
 8000fc4:	fb01 f303 	mul.w	r3, r1, r3
 8000fc8:	441a      	add	r2, r3
 8000fca:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	@ 0x64
 8000fce:	f9b7 1064 	ldrsh.w	r1, [r7, #100]	@ 0x64
 8000fd2:	fb01 f303 	mul.w	r3, r1, r3
 8000fd6:	4413      	add	r3, r2
 8000fd8:	ee07 3a90 	vmov	s15, r3
 8000fdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fe0:	ee17 0a90 	vmov	r0, s15
 8000fe4:	f7ff fab0 	bl	8000548 <__aeabi_f2d>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	460b      	mov	r3, r1
 8000fec:	ec43 2b10 	vmov	d0, r2, r3
 8000ff0:	f008 fc64 	bl	80098bc <sqrt>
 8000ff4:	ec53 2b10 	vmov	r2, r3, d0
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f7ff fdf4 	bl	8000be8 <__aeabi_d2f>
 8001000:	4603      	mov	r3, r0
 8001002:	677b      	str	r3, [r7, #116]	@ 0x74

            // Map magnitude to duty cycle (inverse relationship)
            if (magnitude <= MAG_MIN_THRESHOLD) {
 8001004:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001008:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 80010fc <main+0x208>
 800100c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001014:	d802      	bhi.n	800101c <main+0x128>
                dutyCycle = maxDuty; // Max brightness/loudness
 8001016:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001018:	673b      	str	r3, [r7, #112]	@ 0x70
 800101a:	e021      	b.n	8001060 <main+0x16c>
            } else if (magnitude >= MAG_MAX_THRESHOLD) {
 800101c:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001020:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8001100 <main+0x20c>
 8001024:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102c:	db02      	blt.n	8001034 <main+0x140>
                dutyCycle = 0; // Min brightness/loudness
 800102e:	2300      	movs	r3, #0
 8001030:	673b      	str	r3, [r7, #112]	@ 0x70
 8001032:	e015      	b.n	8001060 <main+0x16c>
            } else {
                // Linear interpolation: dutyCycle = maxDuty * (10000 - mag) / (10000 - 3000)
                dutyCycle = maxDuty * (MAG_MAX_THRESHOLD - magnitude) / (MAG_MAX_THRESHOLD - MAG_MIN_THRESHOLD);
 8001034:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001036:	ee07 3a90 	vmov	s15, r3
 800103a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800103e:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8001100 <main+0x20c>
 8001042:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001046:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800104a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800104e:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8001104 <main+0x210>
 8001052:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001056:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800105a:	ee17 3a90 	vmov	r3, s15
 800105e:	673b      	str	r3, [r7, #112]	@ 0x70
            }

            // Set PWM duty cycle for both LED and buzzer
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, dutyCycle); // LED
 8001060:	4b21      	ldr	r3, [pc, #132]	@ (80010e8 <main+0x1f4>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001066:	63da      	str	r2, [r3, #60]	@ 0x3c
            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, dutyCycle); // Buzzer
 8001068:	4b20      	ldr	r3, [pc, #128]	@ (80010ec <main+0x1f8>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800106e:	63da      	str	r2, [r3, #60]	@ 0x3c

            // Transmit magnetometer data over USART2
            USART2_Transmit_Packet(x, y, z);
 8001070:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	@ 0x68
 8001074:	f9b7 1066 	ldrsh.w	r1, [r7, #102]	@ 0x66
 8001078:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	@ 0x64
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fecb 	bl	8000e18 <USART2_Transmit_Packet>
 8001082:	e00a      	b.n	800109a <main+0x1a6>
        } else {
            // Report error over USART1
            sprintf(buffer, "Magnetometer Read Error: %d\r\n", ret);
 8001084:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8001088:	463b      	mov	r3, r7
 800108a:	491f      	ldr	r1, [pc, #124]	@ (8001108 <main+0x214>)
 800108c:	4618      	mov	r0, r3
 800108e:	f004 ffdb 	bl	8006048 <siprintf>
            send_string(buffer);
 8001092:	463b      	mov	r3, r7
 8001094:	4618      	mov	r0, r3
 8001096:	f000 fa93 	bl	80015c0 <send_string>
        }
        magTimer = 0; // Reset timer
 800109a:	4b17      	ldr	r3, [pc, #92]	@ (80010f8 <main+0x204>)
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
    }

    // Send debug message over USART1 every 1 second
    if (uartTimer >= UART_TX_PERIOD_MS) {
 80010a0:	4b14      	ldr	r3, [pc, #80]	@ (80010f4 <main+0x200>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010a8:	d317      	bcc.n	80010da <main+0x1e6>
        sprintf(buffer, "DEBUG: Mag: %.2f, Duty: %lu%%\r\n", magnitude, (dutyCycle * 100) / maxDuty);
 80010aa:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80010ac:	f7ff fa4c 	bl	8000548 <__aeabi_f2d>
 80010b0:	4602      	mov	r2, r0
 80010b2:	460b      	mov	r3, r1
 80010b4:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80010b6:	2064      	movs	r0, #100	@ 0x64
 80010b8:	fb01 f000 	mul.w	r0, r1, r0
 80010bc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80010be:	fbb0 f1f1 	udiv	r1, r0, r1
 80010c2:	4638      	mov	r0, r7
 80010c4:	9100      	str	r1, [sp, #0]
 80010c6:	4911      	ldr	r1, [pc, #68]	@ (800110c <main+0x218>)
 80010c8:	f004 ffbe 	bl	8006048 <siprintf>
        send_string(buffer);
 80010cc:	463b      	mov	r3, r7
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 fa76 	bl	80015c0 <send_string>
        uartTimer = 0; // Reset timer
 80010d4:	4b07      	ldr	r3, [pc, #28]	@ (80010f4 <main+0x200>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
    }

    // Small delay for loop stability
    HAL_Delay(10);
 80010da:	200a      	movs	r0, #10
 80010dc:	f000 fd1e 	bl	8001b1c <HAL_Delay>
    uartTimer += 10;
 80010e0:	e747      	b.n	8000f72 <main+0x7e>
 80010e2:	bf00      	nop
 80010e4:	08009ae0 	.word	0x08009ae0
 80010e8:	20000258 	.word	0x20000258
 80010ec:	200002a4 	.word	0x200002a4
 80010f0:	08009afc 	.word	0x08009afc
 80010f4:	200002f0 	.word	0x200002f0
 80010f8:	200002f4 	.word	0x200002f4
 80010fc:	453b8000 	.word	0x453b8000
 8001100:	461c4000 	.word	0x461c4000
 8001104:	45dac000 	.word	0x45dac000
 8001108:	08009b30 	.word	0x08009b30
 800110c:	08009b50 	.word	0x08009b50

08001110 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b09e      	sub	sp, #120	@ 0x78
 8001114:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001116:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800111a:	2228      	movs	r2, #40	@ 0x28
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f004 fff5 	bl	800610e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001124:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001134:	463b      	mov	r3, r7
 8001136:	223c      	movs	r2, #60	@ 0x3c
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f004 ffe7 	bl	800610e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001140:	2302      	movs	r3, #2
 8001142:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001144:	2301      	movs	r3, #1
 8001146:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001148:	2310      	movs	r3, #16
 800114a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800114c:	2300      	movs	r3, #0
 800114e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001150:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001154:	4618      	mov	r0, r3
 8001156:	f001 fd89 	bl	8002c6c <HAL_RCC_OscConfig>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001160:	f000 f9ee 	bl	8001540 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001164:	230f      	movs	r3, #15
 8001166:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001168:	2300      	movs	r3, #0
 800116a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800116c:	2300      	movs	r3, #0
 800116e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001170:	2300      	movs	r3, #0
 8001172:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001174:	2300      	movs	r3, #0
 8001176:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001178:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800117c:	2100      	movs	r1, #0
 800117e:	4618      	mov	r0, r3
 8001180:	f002 fdb2 	bl	8003ce8 <HAL_RCC_ClockConfig>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800118a:	f000 f9d9 	bl	8001540 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1;
 800118e:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 8001192:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001194:	2300      	movs	r3, #0
 8001196:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001198:	2300      	movs	r3, #0
 800119a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800119c:	463b      	mov	r3, r7
 800119e:	4618      	mov	r0, r3
 80011a0:	f002 ff72 	bl	8004088 <HAL_RCCEx_PeriphCLKConfig>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80011aa:	f000 f9c9 	bl	8001540 <Error_Handler>
  }
}
 80011ae:	bf00      	nop
 80011b0:	3778      	adds	r7, #120	@ 0x78
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011bc:	4b1b      	ldr	r3, [pc, #108]	@ (800122c <MX_I2C1_Init+0x74>)
 80011be:	4a1c      	ldr	r2, [pc, #112]	@ (8001230 <MX_I2C1_Init+0x78>)
 80011c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B; // 100 kHz for 8 MHz HSI
 80011c2:	4b1a      	ldr	r3, [pc, #104]	@ (800122c <MX_I2C1_Init+0x74>)
 80011c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001234 <MX_I2C1_Init+0x7c>)
 80011c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011c8:	4b18      	ldr	r3, [pc, #96]	@ (800122c <MX_I2C1_Init+0x74>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ce:	4b17      	ldr	r3, [pc, #92]	@ (800122c <MX_I2C1_Init+0x74>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d4:	4b15      	ldr	r3, [pc, #84]	@ (800122c <MX_I2C1_Init+0x74>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011da:	4b14      	ldr	r3, [pc, #80]	@ (800122c <MX_I2C1_Init+0x74>)
 80011dc:	2200      	movs	r2, #0
 80011de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011e0:	4b12      	ldr	r3, [pc, #72]	@ (800122c <MX_I2C1_Init+0x74>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011e6:	4b11      	ldr	r3, [pc, #68]	@ (800122c <MX_I2C1_Init+0x74>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ec:	4b0f      	ldr	r3, [pc, #60]	@ (800122c <MX_I2C1_Init+0x74>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011f2:	480e      	ldr	r0, [pc, #56]	@ (800122c <MX_I2C1_Init+0x74>)
 80011f4:	f000 ff16 	bl	8002024 <HAL_I2C_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011fe:	f000 f99f 	bl	8001540 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001202:	2100      	movs	r1, #0
 8001204:	4809      	ldr	r0, [pc, #36]	@ (800122c <MX_I2C1_Init+0x74>)
 8001206:	f001 fc99 	bl	8002b3c <HAL_I2CEx_ConfigAnalogFilter>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001210:	f000 f996 	bl	8001540 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001214:	2100      	movs	r1, #0
 8001216:	4805      	ldr	r0, [pc, #20]	@ (800122c <MX_I2C1_Init+0x74>)
 8001218:	f001 fcdb 	bl	8002bd2 <HAL_I2CEx_ConfigDigitalFilter>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001222:	f000 f98d 	bl	8001540 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000204 	.word	0x20000204
 8001230:	40005400 	.word	0x40005400
 8001234:	00201d2b 	.word	0x00201d2b

08001238 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b096      	sub	sp, #88	@ 0x58
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_Init 0 */
  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800123e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800124a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
 8001258:	611a      	str	r2, [r3, #16]
 800125a:	615a      	str	r2, [r3, #20]
 800125c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	222c      	movs	r2, #44	@ 0x2c
 8001262:	2100      	movs	r1, #0
 8001264:	4618      	mov	r0, r3
 8001266:	f004 ff52 	bl	800610e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800126a:	4b39      	ldr	r3, [pc, #228]	@ (8001350 <MX_TIM1_Init+0x118>)
 800126c:	4a39      	ldr	r2, [pc, #228]	@ (8001354 <MX_TIM1_Init+0x11c>)
 800126e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0; // 8 MHz timer clock
 8001270:	4b37      	ldr	r3, [pc, #220]	@ (8001350 <MX_TIM1_Init+0x118>)
 8001272:	2200      	movs	r2, #0
 8001274:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001276:	4b36      	ldr	r3, [pc, #216]	@ (8001350 <MX_TIM1_Init+0x118>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7999; // PWM frequency = 8 MHz / (7999 + 1) = 1 kHz
 800127c:	4b34      	ldr	r3, [pc, #208]	@ (8001350 <MX_TIM1_Init+0x118>)
 800127e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001282:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001284:	4b32      	ldr	r3, [pc, #200]	@ (8001350 <MX_TIM1_Init+0x118>)
 8001286:	2200      	movs	r2, #0
 8001288:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800128a:	4b31      	ldr	r3, [pc, #196]	@ (8001350 <MX_TIM1_Init+0x118>)
 800128c:	2200      	movs	r2, #0
 800128e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE; // Enable preload
 8001290:	4b2f      	ldr	r3, [pc, #188]	@ (8001350 <MX_TIM1_Init+0x118>)
 8001292:	2280      	movs	r2, #128	@ 0x80
 8001294:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001296:	482e      	ldr	r0, [pc, #184]	@ (8001350 <MX_TIM1_Init+0x118>)
 8001298:	f003 f8a6 	bl	80043e8 <HAL_TIM_PWM_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80012a2:	f000 f94d 	bl	8001540 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a6:	2300      	movs	r3, #0
 80012a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012aa:	2300      	movs	r3, #0
 80012ac:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012b2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80012b6:	4619      	mov	r1, r3
 80012b8:	4825      	ldr	r0, [pc, #148]	@ (8001350 <MX_TIM1_Init+0x118>)
 80012ba:	f003 fe99 	bl	8004ff0 <HAL_TIMEx_MasterConfigSynchronization>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80012c4:	f000 f93c 	bl	8001540 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012c8:	2360      	movs	r3, #96	@ 0x60
 80012ca:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0; // Initial duty cycle (0%)
 80012cc:	2300      	movs	r3, #0
 80012ce:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012d0:	2300      	movs	r3, #0
 80012d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012d4:	2300      	movs	r3, #0
 80012d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012d8:	2300      	movs	r3, #0
 80012da:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012dc:	2300      	movs	r3, #0
 80012de:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012e0:	2300      	movs	r3, #0
 80012e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012e4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80012e8:	2208      	movs	r2, #8
 80012ea:	4619      	mov	r1, r3
 80012ec:	4818      	ldr	r0, [pc, #96]	@ (8001350 <MX_TIM1_Init+0x118>)
 80012ee:	f003 f9d3 	bl	8004698 <HAL_TIM_PWM_ConfigChannel>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80012f8:	f000 f922 	bl	8001540 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001300:	2300      	movs	r3, #0
 8001302:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001310:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001314:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800131a:	2300      	movs	r3, #0
 800131c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800131e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001322:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001328:	2300      	movs	r3, #0
 800132a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	4619      	mov	r1, r3
 8001330:	4807      	ldr	r0, [pc, #28]	@ (8001350 <MX_TIM1_Init+0x118>)
 8001332:	f003 fedd 	bl	80050f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 800133c:	f000 f900 	bl	8001540 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001340:	4803      	ldr	r0, [pc, #12]	@ (8001350 <MX_TIM1_Init+0x118>)
 8001342:	f000 f9f7 	bl	8001734 <HAL_TIM_MspPostInit>
}
 8001346:	bf00      	nop
 8001348:	3758      	adds	r7, #88	@ 0x58
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000258 	.word	0x20000258
 8001354:	40012c00 	.word	0x40012c00

08001358 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08a      	sub	sp, #40	@ 0x28
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800135e:	f107 031c 	add.w	r3, r7, #28
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800136a:	463b      	mov	r3, r7
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
 8001378:	615a      	str	r2, [r3, #20]
 800137a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800137c:	4b22      	ldr	r3, [pc, #136]	@ (8001408 <MX_TIM2_Init+0xb0>)
 800137e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001382:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0; // 8 MHz timer clock
 8001384:	4b20      	ldr	r3, [pc, #128]	@ (8001408 <MX_TIM2_Init+0xb0>)
 8001386:	2200      	movs	r2, #0
 8001388:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138a:	4b1f      	ldr	r3, [pc, #124]	@ (8001408 <MX_TIM2_Init+0xb0>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7999; // PWM frequency = 8 MHz / (7999 + 1) = 1 kHz
 8001390:	4b1d      	ldr	r3, [pc, #116]	@ (8001408 <MX_TIM2_Init+0xb0>)
 8001392:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001396:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001398:	4b1b      	ldr	r3, [pc, #108]	@ (8001408 <MX_TIM2_Init+0xb0>)
 800139a:	2200      	movs	r2, #0
 800139c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE; // Enable preload
 800139e:	4b1a      	ldr	r3, [pc, #104]	@ (8001408 <MX_TIM2_Init+0xb0>)
 80013a0:	2280      	movs	r2, #128	@ 0x80
 80013a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013a4:	4818      	ldr	r0, [pc, #96]	@ (8001408 <MX_TIM2_Init+0xb0>)
 80013a6:	f003 f81f 	bl	80043e8 <HAL_TIM_PWM_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80013b0:	f000 f8c6 	bl	8001540 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013bc:	f107 031c 	add.w	r3, r7, #28
 80013c0:	4619      	mov	r1, r3
 80013c2:	4811      	ldr	r0, [pc, #68]	@ (8001408 <MX_TIM2_Init+0xb0>)
 80013c4:	f003 fe14 	bl	8004ff0 <HAL_TIMEx_MasterConfigSynchronization>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80013ce:	f000 f8b7 	bl	8001540 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013d2:	2360      	movs	r3, #96	@ 0x60
 80013d4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0; // Initial duty cycle (0%)
 80013d6:	2300      	movs	r3, #0
 80013d8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013da:	2300      	movs	r3, #0
 80013dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013e2:	463b      	mov	r3, r7
 80013e4:	2208      	movs	r2, #8
 80013e6:	4619      	mov	r1, r3
 80013e8:	4807      	ldr	r0, [pc, #28]	@ (8001408 <MX_TIM2_Init+0xb0>)
 80013ea:	f003 f955 	bl	8004698 <HAL_TIM_PWM_ConfigChannel>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80013f4:	f000 f8a4 	bl	8001540 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013f8:	4803      	ldr	r0, [pc, #12]	@ (8001408 <MX_TIM2_Init+0xb0>)
 80013fa:	f000 f99b 	bl	8001734 <HAL_TIM_MspPostInit>
}
 80013fe:	bf00      	nop
 8001400:	3728      	adds	r7, #40	@ 0x28
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	200002a4 	.word	0x200002a4

0800140c <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  // Enable USART2 clock
  RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8001410:	4b08      	ldr	r3, [pc, #32]	@ (8001434 <MX_USART2_Init+0x28>)
 8001412:	69db      	ldr	r3, [r3, #28]
 8001414:	4a07      	ldr	r2, [pc, #28]	@ (8001434 <MX_USART2_Init+0x28>)
 8001416:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800141a:	61d3      	str	r3, [r2, #28]

  // Configure USART2: 115200 baud, 8N1, TX/RX
  USART2->BRR = 0x46; // 8 MHz / 115200 = 69.4, round to 70 (0x46)
 800141c:	4b06      	ldr	r3, [pc, #24]	@ (8001438 <MX_USART2_Init+0x2c>)
 800141e:	2246      	movs	r2, #70	@ 0x46
 8001420:	60da      	str	r2, [r3, #12]
  USART2->CR1 = USART_CR1_RE | USART_CR1_TE | USART_CR1_UE;
 8001422:	4b05      	ldr	r3, [pc, #20]	@ (8001438 <MX_USART2_Init+0x2c>)
 8001424:	220d      	movs	r2, #13
 8001426:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40021000 	.word	0x40021000
 8001438:	40004400 	.word	0x40004400

0800143c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b088      	sub	sp, #32
 8001440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001442:	f107 030c 	add.w	r3, r7, #12
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
 8001450:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001452:	4b39      	ldr	r3, [pc, #228]	@ (8001538 <MX_GPIO_Init+0xfc>)
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	4a38      	ldr	r2, [pc, #224]	@ (8001538 <MX_GPIO_Init+0xfc>)
 8001458:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800145c:	6153      	str	r3, [r2, #20]
 800145e:	4b36      	ldr	r3, [pc, #216]	@ (8001538 <MX_GPIO_Init+0xfc>)
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146a:	4b33      	ldr	r3, [pc, #204]	@ (8001538 <MX_GPIO_Init+0xfc>)
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	4a32      	ldr	r2, [pc, #200]	@ (8001538 <MX_GPIO_Init+0xfc>)
 8001470:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001474:	6153      	str	r3, [r2, #20]
 8001476:	4b30      	ldr	r3, [pc, #192]	@ (8001538 <MX_GPIO_Init+0xfc>)
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	687b      	ldr	r3, [r7, #4]

  /* Configure PA10 for TIM1_CH3 (LED) */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001482:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001486:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001488:	2302      	movs	r3, #2
 800148a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2300      	movs	r3, #0
 8001492:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF6_TIM1; // TIM1_CH3 for PA10
 8001494:	2306      	movs	r3, #6
 8001496:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001498:	f107 030c 	add.w	r3, r7, #12
 800149c:	4619      	mov	r1, r3
 800149e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014a2:	f000 fc45 	bl	8001d30 <HAL_GPIO_Init>

  /* Configure PA9 for TIM2_CH3 (Buzzer) */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ac:	2302      	movs	r3, #2
 80014ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_TIM2; // TIM2_CH3 for PA9
 80014b8:	230a      	movs	r3, #10
 80014ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014bc:	f107 030c 	add.w	r3, r7, #12
 80014c0:	4619      	mov	r1, r3
 80014c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014c6:	f000 fc33 	bl	8001d30 <HAL_GPIO_Init>

  /* Configure PA15 (SCL) and PA14 (SDA) for I2C1 */
  GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_15;
 80014ca:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80014ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD; // Open-drain for I2C
 80014d0:	2312      	movs	r3, #18
 80014d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;     // External pull-ups recommended
 80014d4:	2301      	movs	r3, #1
 80014d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014d8:	2303      	movs	r3, #3
 80014da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1; // I2C1 SCL/SDA for PA15/PA14
 80014dc:	2304      	movs	r3, #4
 80014de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e0:	f107 030c 	add.w	r3, r7, #12
 80014e4:	4619      	mov	r1, r3
 80014e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014ea:	f000 fc21 	bl	8001d30 <HAL_GPIO_Init>

  /* Configure PC4 (TX) and PC5 (RX) for USART1 */
  GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 80014ee:	2330      	movs	r3, #48	@ 0x30
 80014f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f2:	2302      	movs	r3, #2
 80014f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014fa:	2303      	movs	r3, #3
 80014fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1; // USART1 TX/RX for PC4/PC5
 80014fe:	2307      	movs	r3, #7
 8001500:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001502:	f107 030c 	add.w	r3, r7, #12
 8001506:	4619      	mov	r1, r3
 8001508:	480c      	ldr	r0, [pc, #48]	@ (800153c <MX_GPIO_Init+0x100>)
 800150a:	f000 fc11 	bl	8001d30 <HAL_GPIO_Init>

  /* Configure PA2 (TX) and PA3 (RX) for USART2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 800150e:	230c      	movs	r3, #12
 8001510:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	2302      	movs	r3, #2
 8001514:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800151a:	2303      	movs	r3, #3
 800151c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2; // USART2 TX/RX for PA2/PA3
 800151e:	2307      	movs	r3, #7
 8001520:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001522:	f107 030c 	add.w	r3, r7, #12
 8001526:	4619      	mov	r1, r3
 8001528:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800152c:	f000 fc00 	bl	8001d30 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001530:	bf00      	nop
 8001532:	3720      	adds	r7, #32
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40021000 	.word	0x40021000
 800153c:	48000800 	.word	0x48000800

08001540 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001544:	b672      	cpsid	i
}
 8001546:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001548:	bf00      	nop
 800154a:	e7fd      	b.n	8001548 <Error_Handler+0x8>

0800154c <enableUSART1>:
    memset(string, 0, BUFFER);
    i = 0;
}

void enableUSART1()
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
    // Enable GPIO C and USART1's clocks
    RCC->AHBENR |= RCC_AHBENR_GPIOCEN_Msk;
 8001550:	4b18      	ldr	r3, [pc, #96]	@ (80015b4 <enableUSART1+0x68>)
 8001552:	695b      	ldr	r3, [r3, #20]
 8001554:	4a17      	ldr	r2, [pc, #92]	@ (80015b4 <enableUSART1+0x68>)
 8001556:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800155a:	6153      	str	r3, [r2, #20]
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN_Msk;
 800155c:	4b15      	ldr	r3, [pc, #84]	@ (80015b4 <enableUSART1+0x68>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	4a14      	ldr	r2, [pc, #80]	@ (80015b4 <enableUSART1+0x68>)
 8001562:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001566:	6193      	str	r3, [r2, #24]

    // Set GPIO C to use UART as alternate function
    GPIOC->MODER = ALTFUNCTION;
 8001568:	4b13      	ldr	r3, [pc, #76]	@ (80015b8 <enableUSART1+0x6c>)
 800156a:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 800156e:	601a      	str	r2, [r3, #0]
    GPIOC->AFR[0] = RXTX;
 8001570:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <enableUSART1+0x6c>)
 8001572:	f44f 02ee 	mov.w	r2, #7798784	@ 0x770000
 8001576:	621a      	str	r2, [r3, #32]
    GPIOC->OSPEEDR = HIGHSPEED;
 8001578:	4b0f      	ldr	r3, [pc, #60]	@ (80015b8 <enableUSART1+0x6c>)
 800157a:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 800157e:	609a      	str	r2, [r3, #8]

    // Set the baud rate and ready USART 1 for both receive and transmit
    USART1->BRR = BAUDRATE;                   // Baud rate = 115200
 8001580:	4b0e      	ldr	r3, [pc, #56]	@ (80015bc <enableUSART1+0x70>)
 8001582:	2246      	movs	r2, #70	@ 0x46
 8001584:	60da      	str	r2, [r3, #12]
    USART1->CR1 |= USART_CR1_RE_Msk;
 8001586:	4b0d      	ldr	r3, [pc, #52]	@ (80015bc <enableUSART1+0x70>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a0c      	ldr	r2, [pc, #48]	@ (80015bc <enableUSART1+0x70>)
 800158c:	f043 0304 	orr.w	r3, r3, #4
 8001590:	6013      	str	r3, [r2, #0]
    USART1->CR1 |= USART_CR1_TE_Msk;
 8001592:	4b0a      	ldr	r3, [pc, #40]	@ (80015bc <enableUSART1+0x70>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a09      	ldr	r2, [pc, #36]	@ (80015bc <enableUSART1+0x70>)
 8001598:	f043 0308 	orr.w	r3, r3, #8
 800159c:	6013      	str	r3, [r2, #0]
    USART1->CR1 |= USART_CR1_UE_Msk;
 800159e:	4b07      	ldr	r3, [pc, #28]	@ (80015bc <enableUSART1+0x70>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a06      	ldr	r2, [pc, #24]	@ (80015bc <enableUSART1+0x70>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6013      	str	r3, [r2, #0]
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	40021000 	.word	0x40021000
 80015b8:	48000800 	.word	0x48000800
 80015bc:	40013800 	.word	0x40013800

080015c0 <send_string>:

        }
    }
}

void send_string(const char *msg) {
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
    while (*msg) {
 80015c8:	e00c      	b.n	80015e4 <send_string+0x24>
        while (!(USART1->ISR & USART_ISR_TXE_Msk));
 80015ca:	bf00      	nop
 80015cc:	4b0b      	ldr	r3, [pc, #44]	@ (80015fc <send_string+0x3c>)
 80015ce:	69db      	ldr	r3, [r3, #28]
 80015d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d0f9      	beq.n	80015cc <send_string+0xc>
        USART1->TDR = *msg++;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	1c5a      	adds	r2, r3, #1
 80015dc:	607a      	str	r2, [r7, #4]
 80015de:	781a      	ldrb	r2, [r3, #0]
 80015e0:	4b06      	ldr	r3, [pc, #24]	@ (80015fc <send_string+0x3c>)
 80015e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    while (*msg) {
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d1ee      	bne.n	80015ca <send_string+0xa>
    }
}
 80015ec:	bf00      	nop
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	40013800 	.word	0x40013800

08001600 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001606:	4b0f      	ldr	r3, [pc, #60]	@ (8001644 <HAL_MspInit+0x44>)
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	4a0e      	ldr	r2, [pc, #56]	@ (8001644 <HAL_MspInit+0x44>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6193      	str	r3, [r2, #24]
 8001612:	4b0c      	ldr	r3, [pc, #48]	@ (8001644 <HAL_MspInit+0x44>)
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800161e:	4b09      	ldr	r3, [pc, #36]	@ (8001644 <HAL_MspInit+0x44>)
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	4a08      	ldr	r2, [pc, #32]	@ (8001644 <HAL_MspInit+0x44>)
 8001624:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001628:	61d3      	str	r3, [r2, #28]
 800162a:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <HAL_MspInit+0x44>)
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001632:	603b      	str	r3, [r7, #0]
 8001634:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	40021000 	.word	0x40021000

08001648 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08a      	sub	sp, #40	@ 0x28
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a18      	ldr	r2, [pc, #96]	@ (80016c8 <HAL_I2C_MspInit+0x80>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d129      	bne.n	80016be <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166a:	4b18      	ldr	r3, [pc, #96]	@ (80016cc <HAL_I2C_MspInit+0x84>)
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	4a17      	ldr	r2, [pc, #92]	@ (80016cc <HAL_I2C_MspInit+0x84>)
 8001670:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001674:	6153      	str	r3, [r2, #20]
 8001676:	4b15      	ldr	r3, [pc, #84]	@ (80016cc <HAL_I2C_MspInit+0x84>)
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800167e:	613b      	str	r3, [r7, #16]
 8001680:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA14     ------> I2C1_SDA
    PA15     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001682:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001688:	2312      	movs	r3, #18
 800168a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001690:	2303      	movs	r3, #3
 8001692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001694:	2304      	movs	r3, #4
 8001696:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4619      	mov	r1, r3
 800169e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016a2:	f000 fb45 	bl	8001d30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016a6:	4b09      	ldr	r3, [pc, #36]	@ (80016cc <HAL_I2C_MspInit+0x84>)
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	4a08      	ldr	r2, [pc, #32]	@ (80016cc <HAL_I2C_MspInit+0x84>)
 80016ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016b0:	61d3      	str	r3, [r2, #28]
 80016b2:	4b06      	ldr	r3, [pc, #24]	@ (80016cc <HAL_I2C_MspInit+0x84>)
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80016be:	bf00      	nop
 80016c0:	3728      	adds	r7, #40	@ 0x28
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40005400 	.word	0x40005400
 80016cc:	40021000 	.word	0x40021000

080016d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a13      	ldr	r2, [pc, #76]	@ (800172c <HAL_TIM_PWM_MspInit+0x5c>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d10c      	bne.n	80016fc <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016e2:	4b13      	ldr	r3, [pc, #76]	@ (8001730 <HAL_TIM_PWM_MspInit+0x60>)
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	4a12      	ldr	r2, [pc, #72]	@ (8001730 <HAL_TIM_PWM_MspInit+0x60>)
 80016e8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016ec:	6193      	str	r3, [r2, #24]
 80016ee:	4b10      	ldr	r3, [pc, #64]	@ (8001730 <HAL_TIM_PWM_MspInit+0x60>)
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016fa:	e010      	b.n	800171e <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM2)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001704:	d10b      	bne.n	800171e <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001706:	4b0a      	ldr	r3, [pc, #40]	@ (8001730 <HAL_TIM_PWM_MspInit+0x60>)
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	4a09      	ldr	r2, [pc, #36]	@ (8001730 <HAL_TIM_PWM_MspInit+0x60>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	61d3      	str	r3, [r2, #28]
 8001712:	4b07      	ldr	r3, [pc, #28]	@ (8001730 <HAL_TIM_PWM_MspInit+0x60>)
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	68bb      	ldr	r3, [r7, #8]
}
 800171e:	bf00      	nop
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	40012c00 	.word	0x40012c00
 8001730:	40021000 	.word	0x40021000

08001734 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08a      	sub	sp, #40	@ 0x28
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a24      	ldr	r2, [pc, #144]	@ (80017e4 <HAL_TIM_MspPostInit+0xb0>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d11e      	bne.n	8001794 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001756:	4b24      	ldr	r3, [pc, #144]	@ (80017e8 <HAL_TIM_MspPostInit+0xb4>)
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	4a23      	ldr	r2, [pc, #140]	@ (80017e8 <HAL_TIM_MspPostInit+0xb4>)
 800175c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001760:	6153      	str	r3, [r2, #20]
 8001762:	4b21      	ldr	r3, [pc, #132]	@ (80017e8 <HAL_TIM_MspPostInit+0xb4>)
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800176a:	613b      	str	r3, [r7, #16]
 800176c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800176e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001774:	2302      	movs	r3, #2
 8001776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177c:	2300      	movs	r3, #0
 800177e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001780:	2306      	movs	r3, #6
 8001782:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	4619      	mov	r1, r3
 800178a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800178e:	f000 facf 	bl	8001d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001792:	e022      	b.n	80017da <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM2)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800179c:	d11d      	bne.n	80017da <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179e:	4b12      	ldr	r3, [pc, #72]	@ (80017e8 <HAL_TIM_MspPostInit+0xb4>)
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	4a11      	ldr	r2, [pc, #68]	@ (80017e8 <HAL_TIM_MspPostInit+0xb4>)
 80017a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017a8:	6153      	str	r3, [r2, #20]
 80017aa:	4b0f      	ldr	r3, [pc, #60]	@ (80017e8 <HAL_TIM_MspPostInit+0xb4>)
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017bc:	2302      	movs	r3, #2
 80017be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c4:	2300      	movs	r3, #0
 80017c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 80017c8:	230a      	movs	r3, #10
 80017ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	4619      	mov	r1, r3
 80017d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017d6:	f000 faab 	bl	8001d30 <HAL_GPIO_Init>
}
 80017da:	bf00      	nop
 80017dc:	3728      	adds	r7, #40	@ 0x28
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40012c00 	.word	0x40012c00
 80017e8:	40021000 	.word	0x40021000

080017ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <NMI_Handler+0x4>

080017f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <HardFault_Handler+0x4>

080017fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001800:	bf00      	nop
 8001802:	e7fd      	b.n	8001800 <MemManage_Handler+0x4>

08001804 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001808:	bf00      	nop
 800180a:	e7fd      	b.n	8001808 <BusFault_Handler+0x4>

0800180c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001810:	bf00      	nop
 8001812:	e7fd      	b.n	8001810 <UsageFault_Handler+0x4>

08001814 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001842:	f000 f94b 	bl	8001adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}

0800184a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0
  return 1;
 800184e:	2301      	movs	r3, #1
}
 8001850:	4618      	mov	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <_kill>:

int _kill(int pid, int sig)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001864:	f004 fca6 	bl	80061b4 <__errno>
 8001868:	4603      	mov	r3, r0
 800186a:	2216      	movs	r2, #22
 800186c:	601a      	str	r2, [r3, #0]
  return -1;
 800186e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <_exit>:

void _exit (int status)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001882:	f04f 31ff 	mov.w	r1, #4294967295
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ffe7 	bl	800185a <_kill>
  while (1) {}    /* Make sure we hang here */
 800188c:	bf00      	nop
 800188e:	e7fd      	b.n	800188c <_exit+0x12>

08001890 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	e00a      	b.n	80018b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018a2:	f3af 8000 	nop.w
 80018a6:	4601      	mov	r1, r0
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	1c5a      	adds	r2, r3, #1
 80018ac:	60ba      	str	r2, [r7, #8]
 80018ae:	b2ca      	uxtb	r2, r1
 80018b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	3301      	adds	r3, #1
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	429a      	cmp	r2, r3
 80018be:	dbf0      	blt.n	80018a2 <_read+0x12>
  }

  return len;
 80018c0:	687b      	ldr	r3, [r7, #4]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b086      	sub	sp, #24
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d6:	2300      	movs	r3, #0
 80018d8:	617b      	str	r3, [r7, #20]
 80018da:	e009      	b.n	80018f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	1c5a      	adds	r2, r3, #1
 80018e0:	60ba      	str	r2, [r7, #8]
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	3301      	adds	r3, #1
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	dbf1      	blt.n	80018dc <_write+0x12>
  }
  return len;
 80018f8:	687b      	ldr	r3, [r7, #4]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <_close>:

int _close(int file)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800190a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800190e:	4618      	mov	r0, r3
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
 8001922:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800192a:	605a      	str	r2, [r3, #4]
  return 0;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <_isatty>:

int _isatty(int file)
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001942:	2301      	movs	r3, #1
}
 8001944:	4618      	mov	r0, r3
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3714      	adds	r7, #20
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
	...

0800196c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001974:	4a14      	ldr	r2, [pc, #80]	@ (80019c8 <_sbrk+0x5c>)
 8001976:	4b15      	ldr	r3, [pc, #84]	@ (80019cc <_sbrk+0x60>)
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001980:	4b13      	ldr	r3, [pc, #76]	@ (80019d0 <_sbrk+0x64>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d102      	bne.n	800198e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001988:	4b11      	ldr	r3, [pc, #68]	@ (80019d0 <_sbrk+0x64>)
 800198a:	4a12      	ldr	r2, [pc, #72]	@ (80019d4 <_sbrk+0x68>)
 800198c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800198e:	4b10      	ldr	r3, [pc, #64]	@ (80019d0 <_sbrk+0x64>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	429a      	cmp	r2, r3
 800199a:	d207      	bcs.n	80019ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800199c:	f004 fc0a 	bl	80061b4 <__errno>
 80019a0:	4603      	mov	r3, r0
 80019a2:	220c      	movs	r2, #12
 80019a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019a6:	f04f 33ff 	mov.w	r3, #4294967295
 80019aa:	e009      	b.n	80019c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019ac:	4b08      	ldr	r3, [pc, #32]	@ (80019d0 <_sbrk+0x64>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019b2:	4b07      	ldr	r3, [pc, #28]	@ (80019d0 <_sbrk+0x64>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4413      	add	r3, r2
 80019ba:	4a05      	ldr	r2, [pc, #20]	@ (80019d0 <_sbrk+0x64>)
 80019bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019be:	68fb      	ldr	r3, [r7, #12]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	2000a000 	.word	0x2000a000
 80019cc:	00000400 	.word	0x00000400
 80019d0:	200002f8 	.word	0x200002f8
 80019d4:	20000450 	.word	0x20000450

080019d8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019dc:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <SystemInit+0x20>)
 80019de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019e2:	4a05      	ldr	r2, [pc, #20]	@ (80019f8 <SystemInit+0x20>)
 80019e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80019fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a34 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a00:	f7ff ffea 	bl	80019d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a04:	480c      	ldr	r0, [pc, #48]	@ (8001a38 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a06:	490d      	ldr	r1, [pc, #52]	@ (8001a3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a08:	4a0d      	ldr	r2, [pc, #52]	@ (8001a40 <LoopForever+0xe>)
  movs r3, #0
 8001a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a0c:	e002      	b.n	8001a14 <LoopCopyDataInit>

08001a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a12:	3304      	adds	r3, #4

08001a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a18:	d3f9      	bcc.n	8001a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a1c:	4c0a      	ldr	r4, [pc, #40]	@ (8001a48 <LoopForever+0x16>)
  movs r3, #0
 8001a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a20:	e001      	b.n	8001a26 <LoopFillZerobss>

08001a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a24:	3204      	adds	r2, #4

08001a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a28:	d3fb      	bcc.n	8001a22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a2a:	f004 fbc9 	bl	80061c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a2e:	f7ff fa61 	bl	8000ef4 <main>

08001a32 <LoopForever>:

LoopForever:
    b LoopForever
 8001a32:	e7fe      	b.n	8001a32 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a34:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a3c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001a40:	08009fe0 	.word	0x08009fe0
  ldr r2, =_sbss
 8001a44:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001a48:	2000044c 	.word	0x2000044c

08001a4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a4c:	e7fe      	b.n	8001a4c <ADC1_2_IRQHandler>
	...

08001a50 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a54:	4b08      	ldr	r3, [pc, #32]	@ (8001a78 <HAL_Init+0x28>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a07      	ldr	r2, [pc, #28]	@ (8001a78 <HAL_Init+0x28>)
 8001a5a:	f043 0310 	orr.w	r3, r3, #16
 8001a5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a60:	2003      	movs	r0, #3
 8001a62:	f000 f931 	bl	8001cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a66:	200f      	movs	r0, #15
 8001a68:	f000 f808 	bl	8001a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a6c:	f7ff fdc8 	bl	8001600 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40022000 	.word	0x40022000

08001a7c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a84:	4b12      	ldr	r3, [pc, #72]	@ (8001ad0 <HAL_InitTick+0x54>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b12      	ldr	r3, [pc, #72]	@ (8001ad4 <HAL_InitTick+0x58>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 f93b 	bl	8001d16 <HAL_SYSTICK_Config>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e00e      	b.n	8001ac8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b0f      	cmp	r3, #15
 8001aae:	d80a      	bhi.n	8001ac6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab8:	f000 f911 	bl	8001cde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001abc:	4a06      	ldr	r2, [pc, #24]	@ (8001ad8 <HAL_InitTick+0x5c>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	e000      	b.n	8001ac8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20000000 	.word	0x20000000
 8001ad4:	20000008 	.word	0x20000008
 8001ad8:	20000004 	.word	0x20000004

08001adc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ae0:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <HAL_IncTick+0x20>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4b06      	ldr	r3, [pc, #24]	@ (8001b00 <HAL_IncTick+0x24>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4413      	add	r3, r2
 8001aec:	4a04      	ldr	r2, [pc, #16]	@ (8001b00 <HAL_IncTick+0x24>)
 8001aee:	6013      	str	r3, [r2, #0]
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	20000008 	.word	0x20000008
 8001b00:	200002fc 	.word	0x200002fc

08001b04 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return uwTick;  
 8001b08:	4b03      	ldr	r3, [pc, #12]	@ (8001b18 <HAL_GetTick+0x14>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	200002fc 	.word	0x200002fc

08001b1c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b24:	f7ff ffee 	bl	8001b04 <HAL_GetTick>
 8001b28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b34:	d005      	beq.n	8001b42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b36:	4b0a      	ldr	r3, [pc, #40]	@ (8001b60 <HAL_Delay+0x44>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4413      	add	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001b42:	bf00      	nop
 8001b44:	f7ff ffde 	bl	8001b04 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d8f7      	bhi.n	8001b44 <HAL_Delay+0x28>
  {
  }
}
 8001b54:	bf00      	nop
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000008 	.word	0x20000008

08001b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b74:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b7a:	68ba      	ldr	r2, [r7, #8]
 8001b7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b80:	4013      	ands	r3, r2
 8001b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b96:	4a04      	ldr	r2, [pc, #16]	@ (8001ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	60d3      	str	r3, [r2, #12]
}
 8001b9c:	bf00      	nop
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bb0:	4b04      	ldr	r3, [pc, #16]	@ (8001bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	0a1b      	lsrs	r3, r3, #8
 8001bb6:	f003 0307 	and.w	r3, r3, #7
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	6039      	str	r1, [r7, #0]
 8001bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	db0a      	blt.n	8001bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	490c      	ldr	r1, [pc, #48]	@ (8001c14 <__NVIC_SetPriority+0x4c>)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	0112      	lsls	r2, r2, #4
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	440b      	add	r3, r1
 8001bec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf0:	e00a      	b.n	8001c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	4908      	ldr	r1, [pc, #32]	@ (8001c18 <__NVIC_SetPriority+0x50>)
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	3b04      	subs	r3, #4
 8001c00:	0112      	lsls	r2, r2, #4
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	440b      	add	r3, r1
 8001c06:	761a      	strb	r2, [r3, #24]
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000e100 	.word	0xe000e100
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	@ 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f1c3 0307 	rsb	r3, r3, #7
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	bf28      	it	cs
 8001c3a:	2304      	movcs	r3, #4
 8001c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3304      	adds	r3, #4
 8001c42:	2b06      	cmp	r3, #6
 8001c44:	d902      	bls.n	8001c4c <NVIC_EncodePriority+0x30>
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3b03      	subs	r3, #3
 8001c4a:	e000      	b.n	8001c4e <NVIC_EncodePriority+0x32>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	f04f 32ff 	mov.w	r2, #4294967295
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43da      	mvns	r2, r3
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	401a      	ands	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c64:	f04f 31ff 	mov.w	r1, #4294967295
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6e:	43d9      	mvns	r1, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c74:	4313      	orrs	r3, r2
         );
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3724      	adds	r7, #36	@ 0x24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c94:	d301      	bcc.n	8001c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c96:	2301      	movs	r3, #1
 8001c98:	e00f      	b.n	8001cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc4 <SysTick_Config+0x40>)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ca2:	210f      	movs	r1, #15
 8001ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca8:	f7ff ff8e 	bl	8001bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cac:	4b05      	ldr	r3, [pc, #20]	@ (8001cc4 <SysTick_Config+0x40>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cb2:	4b04      	ldr	r3, [pc, #16]	@ (8001cc4 <SysTick_Config+0x40>)
 8001cb4:	2207      	movs	r2, #7
 8001cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	e000e010 	.word	0xe000e010

08001cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff ff47 	bl	8001b64 <__NVIC_SetPriorityGrouping>
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b086      	sub	sp, #24
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
 8001cea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf0:	f7ff ff5c 	bl	8001bac <__NVIC_GetPriorityGrouping>
 8001cf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	68b9      	ldr	r1, [r7, #8]
 8001cfa:	6978      	ldr	r0, [r7, #20]
 8001cfc:	f7ff ff8e 	bl	8001c1c <NVIC_EncodePriority>
 8001d00:	4602      	mov	r2, r0
 8001d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d06:	4611      	mov	r1, r2
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff5d 	bl	8001bc8 <__NVIC_SetPriority>
}
 8001d0e:	bf00      	nop
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff ffb0 	bl	8001c84 <SysTick_Config>
 8001d24:	4603      	mov	r3, r0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b087      	sub	sp, #28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d3e:	e154      	b.n	8001fea <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	2101      	movs	r1, #1
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 8146 	beq.w	8001fe4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 0303 	and.w	r3, r3, #3
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d005      	beq.n	8001d70 <HAL_GPIO_Init+0x40>
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d130      	bne.n	8001dd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	4013      	ands	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	68da      	ldr	r2, [r3, #12]
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001da6:	2201      	movs	r2, #1
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	4013      	ands	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	091b      	lsrs	r3, r3, #4
 8001dbc:	f003 0201 	and.w	r2, r3, #1
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	2b03      	cmp	r3, #3
 8001ddc:	d017      	beq.n	8001e0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	2203      	movs	r2, #3
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43db      	mvns	r3, r3
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	4013      	ands	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	689a      	ldr	r2, [r3, #8]
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d123      	bne.n	8001e62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	08da      	lsrs	r2, r3, #3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	3208      	adds	r2, #8
 8001e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	220f      	movs	r2, #15
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43db      	mvns	r3, r3
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	691a      	ldr	r2, [r3, #16]
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	f003 0307 	and.w	r3, r3, #7
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	08da      	lsrs	r2, r3, #3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3208      	adds	r2, #8
 8001e5c:	6939      	ldr	r1, [r7, #16]
 8001e5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	2203      	movs	r2, #3
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43db      	mvns	r3, r3
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	4013      	ands	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f003 0203 	and.w	r2, r3, #3
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 80a0 	beq.w	8001fe4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea4:	4b58      	ldr	r3, [pc, #352]	@ (8002008 <HAL_GPIO_Init+0x2d8>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	4a57      	ldr	r2, [pc, #348]	@ (8002008 <HAL_GPIO_Init+0x2d8>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	6193      	str	r3, [r2, #24]
 8001eb0:	4b55      	ldr	r3, [pc, #340]	@ (8002008 <HAL_GPIO_Init+0x2d8>)
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ebc:	4a53      	ldr	r2, [pc, #332]	@ (800200c <HAL_GPIO_Init+0x2dc>)
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	089b      	lsrs	r3, r3, #2
 8001ec2:	3302      	adds	r3, #2
 8001ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f003 0303 	and.w	r3, r3, #3
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	220f      	movs	r2, #15
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	4013      	ands	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001ee6:	d019      	beq.n	8001f1c <HAL_GPIO_Init+0x1ec>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a49      	ldr	r2, [pc, #292]	@ (8002010 <HAL_GPIO_Init+0x2e0>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d013      	beq.n	8001f18 <HAL_GPIO_Init+0x1e8>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a48      	ldr	r2, [pc, #288]	@ (8002014 <HAL_GPIO_Init+0x2e4>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d00d      	beq.n	8001f14 <HAL_GPIO_Init+0x1e4>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a47      	ldr	r2, [pc, #284]	@ (8002018 <HAL_GPIO_Init+0x2e8>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d007      	beq.n	8001f10 <HAL_GPIO_Init+0x1e0>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a46      	ldr	r2, [pc, #280]	@ (800201c <HAL_GPIO_Init+0x2ec>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d101      	bne.n	8001f0c <HAL_GPIO_Init+0x1dc>
 8001f08:	2304      	movs	r3, #4
 8001f0a:	e008      	b.n	8001f1e <HAL_GPIO_Init+0x1ee>
 8001f0c:	2305      	movs	r3, #5
 8001f0e:	e006      	b.n	8001f1e <HAL_GPIO_Init+0x1ee>
 8001f10:	2303      	movs	r3, #3
 8001f12:	e004      	b.n	8001f1e <HAL_GPIO_Init+0x1ee>
 8001f14:	2302      	movs	r3, #2
 8001f16:	e002      	b.n	8001f1e <HAL_GPIO_Init+0x1ee>
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e000      	b.n	8001f1e <HAL_GPIO_Init+0x1ee>
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	f002 0203 	and.w	r2, r2, #3
 8001f24:	0092      	lsls	r2, r2, #2
 8001f26:	4093      	lsls	r3, r2
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f2e:	4937      	ldr	r1, [pc, #220]	@ (800200c <HAL_GPIO_Init+0x2dc>)
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	089b      	lsrs	r3, r3, #2
 8001f34:	3302      	adds	r3, #2
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f3c:	4b38      	ldr	r3, [pc, #224]	@ (8002020 <HAL_GPIO_Init+0x2f0>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	43db      	mvns	r3, r3
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f60:	4a2f      	ldr	r2, [pc, #188]	@ (8002020 <HAL_GPIO_Init+0x2f0>)
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f66:	4b2e      	ldr	r3, [pc, #184]	@ (8002020 <HAL_GPIO_Init+0x2f0>)
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	4013      	ands	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f8a:	4a25      	ldr	r2, [pc, #148]	@ (8002020 <HAL_GPIO_Init+0x2f0>)
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f90:	4b23      	ldr	r3, [pc, #140]	@ (8002020 <HAL_GPIO_Init+0x2f0>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d003      	beq.n	8001fb4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001fb4:	4a1a      	ldr	r2, [pc, #104]	@ (8002020 <HAL_GPIO_Init+0x2f0>)
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fba:	4b19      	ldr	r3, [pc, #100]	@ (8002020 <HAL_GPIO_Init+0x2f0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001fde:	4a10      	ldr	r2, [pc, #64]	@ (8002020 <HAL_GPIO_Init+0x2f0>)
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f47f aea3 	bne.w	8001d40 <HAL_GPIO_Init+0x10>
  }
}
 8001ffa:	bf00      	nop
 8001ffc:	bf00      	nop
 8001ffe:	371c      	adds	r7, #28
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	40021000 	.word	0x40021000
 800200c:	40010000 	.word	0x40010000
 8002010:	48000400 	.word	0x48000400
 8002014:	48000800 	.word	0x48000800
 8002018:	48000c00 	.word	0x48000c00
 800201c:	48001000 	.word	0x48001000
 8002020:	40010400 	.word	0x40010400

08002024 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e08d      	b.n	8002152 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d106      	bne.n	8002050 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7ff fafc 	bl	8001648 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2224      	movs	r2, #36	@ 0x24
 8002054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0201 	bic.w	r2, r2, #1
 8002066:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002074:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002084:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d107      	bne.n	800209e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	e006      	b.n	80020ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689a      	ldr	r2, [r3, #8]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80020aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d108      	bne.n	80020c6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020c2:	605a      	str	r2, [r3, #4]
 80020c4:	e007      	b.n	80020d6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6812      	ldr	r2, [r2, #0]
 80020e0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68da      	ldr	r2, [r3, #12]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	691a      	ldr	r2, [r3, #16]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	430a      	orrs	r2, r1
 8002112:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	69d9      	ldr	r1, [r3, #28]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a1a      	ldr	r2, [r3, #32]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	430a      	orrs	r2, r1
 8002122:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 0201 	orr.w	r2, r2, #1
 8002132:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2220      	movs	r2, #32
 800213e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
	...

0800215c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b088      	sub	sp, #32
 8002160:	af02      	add	r7, sp, #8
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	4608      	mov	r0, r1
 8002166:	4611      	mov	r1, r2
 8002168:	461a      	mov	r2, r3
 800216a:	4603      	mov	r3, r0
 800216c:	817b      	strh	r3, [r7, #10]
 800216e:	460b      	mov	r3, r1
 8002170:	813b      	strh	r3, [r7, #8]
 8002172:	4613      	mov	r3, r2
 8002174:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b20      	cmp	r3, #32
 8002180:	f040 80f9 	bne.w	8002376 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002184:	6a3b      	ldr	r3, [r7, #32]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d002      	beq.n	8002190 <HAL_I2C_Mem_Write+0x34>
 800218a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800218c:	2b00      	cmp	r3, #0
 800218e:	d105      	bne.n	800219c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002196:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e0ed      	b.n	8002378 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d101      	bne.n	80021aa <HAL_I2C_Mem_Write+0x4e>
 80021a6:	2302      	movs	r3, #2
 80021a8:	e0e6      	b.n	8002378 <HAL_I2C_Mem_Write+0x21c>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80021b2:	f7ff fca7 	bl	8001b04 <HAL_GetTick>
 80021b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	2319      	movs	r3, #25
 80021be:	2201      	movs	r2, #1
 80021c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	f000 fac3 	bl	8002750 <I2C_WaitOnFlagUntilTimeout>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e0d1      	b.n	8002378 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2221      	movs	r2, #33	@ 0x21
 80021d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2240      	movs	r2, #64	@ 0x40
 80021e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6a3a      	ldr	r2, [r7, #32]
 80021ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80021f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021fc:	88f8      	ldrh	r0, [r7, #6]
 80021fe:	893a      	ldrh	r2, [r7, #8]
 8002200:	8979      	ldrh	r1, [r7, #10]
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	9301      	str	r3, [sp, #4]
 8002206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	4603      	mov	r3, r0
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	f000 f9d3 	bl	80025b8 <I2C_RequestMemoryWrite>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d005      	beq.n	8002224 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e0a9      	b.n	8002378 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002228:	b29b      	uxth	r3, r3
 800222a:	2bff      	cmp	r3, #255	@ 0xff
 800222c:	d90e      	bls.n	800224c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	22ff      	movs	r2, #255	@ 0xff
 8002232:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002238:	b2da      	uxtb	r2, r3
 800223a:	8979      	ldrh	r1, [r7, #10]
 800223c:	2300      	movs	r3, #0
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002244:	68f8      	ldr	r0, [r7, #12]
 8002246:	f000 fc47 	bl	8002ad8 <I2C_TransferConfig>
 800224a:	e00f      	b.n	800226c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002250:	b29a      	uxth	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800225a:	b2da      	uxtb	r2, r3
 800225c:	8979      	ldrh	r1, [r7, #10]
 800225e:	2300      	movs	r3, #0
 8002260:	9300      	str	r3, [sp, #0]
 8002262:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f000 fc36 	bl	8002ad8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f000 fac6 	bl	8002802 <I2C_WaitOnTXISFlagUntilTimeout>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e07b      	b.n	8002378 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002284:	781a      	ldrb	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002290:	1c5a      	adds	r2, r3, #1
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800229a:	b29b      	uxth	r3, r3
 800229c:	3b01      	subs	r3, #1
 800229e:	b29a      	uxth	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022a8:	3b01      	subs	r3, #1
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d034      	beq.n	8002324 <HAL_I2C_Mem_Write+0x1c8>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d130      	bne.n	8002324 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022c8:	2200      	movs	r2, #0
 80022ca:	2180      	movs	r1, #128	@ 0x80
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f000 fa3f 	bl	8002750 <I2C_WaitOnFlagUntilTimeout>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e04d      	b.n	8002378 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	2bff      	cmp	r3, #255	@ 0xff
 80022e4:	d90e      	bls.n	8002304 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	22ff      	movs	r2, #255	@ 0xff
 80022ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	8979      	ldrh	r1, [r7, #10]
 80022f4:	2300      	movs	r3, #0
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f000 fbeb 	bl	8002ad8 <I2C_TransferConfig>
 8002302:	e00f      	b.n	8002324 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002308:	b29a      	uxth	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002312:	b2da      	uxtb	r2, r3
 8002314:	8979      	ldrh	r1, [r7, #10]
 8002316:	2300      	movs	r3, #0
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f000 fbda 	bl	8002ad8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002328:	b29b      	uxth	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d19e      	bne.n	800226c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 faac 	bl	8002890 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e01a      	b.n	8002378 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2220      	movs	r2, #32
 8002348:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6859      	ldr	r1, [r3, #4]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	4b0a      	ldr	r3, [pc, #40]	@ (8002380 <HAL_I2C_Mem_Write+0x224>)
 8002356:	400b      	ands	r3, r1
 8002358:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2220      	movs	r2, #32
 800235e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002372:	2300      	movs	r3, #0
 8002374:	e000      	b.n	8002378 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002376:	2302      	movs	r3, #2
  }
}
 8002378:	4618      	mov	r0, r3
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	fe00e800 	.word	0xfe00e800

08002384 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b088      	sub	sp, #32
 8002388:	af02      	add	r7, sp, #8
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	4608      	mov	r0, r1
 800238e:	4611      	mov	r1, r2
 8002390:	461a      	mov	r2, r3
 8002392:	4603      	mov	r3, r0
 8002394:	817b      	strh	r3, [r7, #10]
 8002396:	460b      	mov	r3, r1
 8002398:	813b      	strh	r3, [r7, #8]
 800239a:	4613      	mov	r3, r2
 800239c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b20      	cmp	r3, #32
 80023a8:	f040 80fd 	bne.w	80025a6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80023ac:	6a3b      	ldr	r3, [r7, #32]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d002      	beq.n	80023b8 <HAL_I2C_Mem_Read+0x34>
 80023b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d105      	bne.n	80023c4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023be:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e0f1      	b.n	80025a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d101      	bne.n	80023d2 <HAL_I2C_Mem_Read+0x4e>
 80023ce:	2302      	movs	r3, #2
 80023d0:	e0ea      	b.n	80025a8 <HAL_I2C_Mem_Read+0x224>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023da:	f7ff fb93 	bl	8001b04 <HAL_GetTick>
 80023de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	2319      	movs	r3, #25
 80023e6:	2201      	movs	r2, #1
 80023e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f000 f9af 	bl	8002750 <I2C_WaitOnFlagUntilTimeout>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e0d5      	b.n	80025a8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2222      	movs	r2, #34	@ 0x22
 8002400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2240      	movs	r2, #64	@ 0x40
 8002408:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6a3a      	ldr	r2, [r7, #32]
 8002416:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800241c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002424:	88f8      	ldrh	r0, [r7, #6]
 8002426:	893a      	ldrh	r2, [r7, #8]
 8002428:	8979      	ldrh	r1, [r7, #10]
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	9301      	str	r3, [sp, #4]
 800242e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	4603      	mov	r3, r0
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f000 f913 	bl	8002660 <I2C_RequestMemoryRead>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d005      	beq.n	800244c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e0ad      	b.n	80025a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002450:	b29b      	uxth	r3, r3
 8002452:	2bff      	cmp	r3, #255	@ 0xff
 8002454:	d90e      	bls.n	8002474 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2201      	movs	r2, #1
 800245a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002460:	b2da      	uxtb	r2, r3
 8002462:	8979      	ldrh	r1, [r7, #10]
 8002464:	4b52      	ldr	r3, [pc, #328]	@ (80025b0 <HAL_I2C_Mem_Read+0x22c>)
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f000 fb33 	bl	8002ad8 <I2C_TransferConfig>
 8002472:	e00f      	b.n	8002494 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002478:	b29a      	uxth	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002482:	b2da      	uxtb	r2, r3
 8002484:	8979      	ldrh	r1, [r7, #10]
 8002486:	4b4a      	ldr	r3, [pc, #296]	@ (80025b0 <HAL_I2C_Mem_Read+0x22c>)
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f000 fb22 	bl	8002ad8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800249a:	2200      	movs	r2, #0
 800249c:	2104      	movs	r1, #4
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 f956 	bl	8002750 <I2C_WaitOnFlagUntilTimeout>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e07c      	b.n	80025a8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c0:	1c5a      	adds	r2, r3, #1
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ca:	3b01      	subs	r3, #1
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	3b01      	subs	r3, #1
 80024da:	b29a      	uxth	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d034      	beq.n	8002554 <HAL_I2C_Mem_Read+0x1d0>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d130      	bne.n	8002554 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024f8:	2200      	movs	r2, #0
 80024fa:	2180      	movs	r1, #128	@ 0x80
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f000 f927 	bl	8002750 <I2C_WaitOnFlagUntilTimeout>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e04d      	b.n	80025a8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002510:	b29b      	uxth	r3, r3
 8002512:	2bff      	cmp	r3, #255	@ 0xff
 8002514:	d90e      	bls.n	8002534 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2201      	movs	r2, #1
 800251a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002520:	b2da      	uxtb	r2, r3
 8002522:	8979      	ldrh	r1, [r7, #10]
 8002524:	2300      	movs	r3, #0
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f000 fad3 	bl	8002ad8 <I2C_TransferConfig>
 8002532:	e00f      	b.n	8002554 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002538:	b29a      	uxth	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002542:	b2da      	uxtb	r2, r3
 8002544:	8979      	ldrh	r1, [r7, #10]
 8002546:	2300      	movs	r3, #0
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f000 fac2 	bl	8002ad8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002558:	b29b      	uxth	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d19a      	bne.n	8002494 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002562:	68f8      	ldr	r0, [r7, #12]
 8002564:	f000 f994 	bl	8002890 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e01a      	b.n	80025a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2220      	movs	r2, #32
 8002578:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6859      	ldr	r1, [r3, #4]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	4b0b      	ldr	r3, [pc, #44]	@ (80025b4 <HAL_I2C_Mem_Read+0x230>)
 8002586:	400b      	ands	r3, r1
 8002588:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2220      	movs	r2, #32
 800258e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80025a2:	2300      	movs	r3, #0
 80025a4:	e000      	b.n	80025a8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80025a6:	2302      	movs	r3, #2
  }
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	80002400 	.word	0x80002400
 80025b4:	fe00e800 	.word	0xfe00e800

080025b8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af02      	add	r7, sp, #8
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	4608      	mov	r0, r1
 80025c2:	4611      	mov	r1, r2
 80025c4:	461a      	mov	r2, r3
 80025c6:	4603      	mov	r3, r0
 80025c8:	817b      	strh	r3, [r7, #10]
 80025ca:	460b      	mov	r3, r1
 80025cc:	813b      	strh	r3, [r7, #8]
 80025ce:	4613      	mov	r3, r2
 80025d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80025d2:	88fb      	ldrh	r3, [r7, #6]
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	8979      	ldrh	r1, [r7, #10]
 80025d8:	4b20      	ldr	r3, [pc, #128]	@ (800265c <I2C_RequestMemoryWrite+0xa4>)
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f000 fa79 	bl	8002ad8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025e6:	69fa      	ldr	r2, [r7, #28]
 80025e8:	69b9      	ldr	r1, [r7, #24]
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f000 f909 	bl	8002802 <I2C_WaitOnTXISFlagUntilTimeout>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e02c      	b.n	8002654 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025fa:	88fb      	ldrh	r3, [r7, #6]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d105      	bne.n	800260c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002600:	893b      	ldrh	r3, [r7, #8]
 8002602:	b2da      	uxtb	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	629a      	str	r2, [r3, #40]	@ 0x28
 800260a:	e015      	b.n	8002638 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800260c:	893b      	ldrh	r3, [r7, #8]
 800260e:	0a1b      	lsrs	r3, r3, #8
 8002610:	b29b      	uxth	r3, r3
 8002612:	b2da      	uxtb	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800261a:	69fa      	ldr	r2, [r7, #28]
 800261c:	69b9      	ldr	r1, [r7, #24]
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f000 f8ef 	bl	8002802 <I2C_WaitOnTXISFlagUntilTimeout>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e012      	b.n	8002654 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800262e:	893b      	ldrh	r3, [r7, #8]
 8002630:	b2da      	uxtb	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	2200      	movs	r2, #0
 8002640:	2180      	movs	r1, #128	@ 0x80
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 f884 	bl	8002750 <I2C_WaitOnFlagUntilTimeout>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e000      	b.n	8002654 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	80002000 	.word	0x80002000

08002660 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af02      	add	r7, sp, #8
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	4608      	mov	r0, r1
 800266a:	4611      	mov	r1, r2
 800266c:	461a      	mov	r2, r3
 800266e:	4603      	mov	r3, r0
 8002670:	817b      	strh	r3, [r7, #10]
 8002672:	460b      	mov	r3, r1
 8002674:	813b      	strh	r3, [r7, #8]
 8002676:	4613      	mov	r3, r2
 8002678:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800267a:	88fb      	ldrh	r3, [r7, #6]
 800267c:	b2da      	uxtb	r2, r3
 800267e:	8979      	ldrh	r1, [r7, #10]
 8002680:	4b20      	ldr	r3, [pc, #128]	@ (8002704 <I2C_RequestMemoryRead+0xa4>)
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	2300      	movs	r3, #0
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f000 fa26 	bl	8002ad8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800268c:	69fa      	ldr	r2, [r7, #28]
 800268e:	69b9      	ldr	r1, [r7, #24]
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 f8b6 	bl	8002802 <I2C_WaitOnTXISFlagUntilTimeout>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e02c      	b.n	80026fa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026a0:	88fb      	ldrh	r3, [r7, #6]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d105      	bne.n	80026b2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80026a6:	893b      	ldrh	r3, [r7, #8]
 80026a8:	b2da      	uxtb	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80026b0:	e015      	b.n	80026de <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80026b2:	893b      	ldrh	r3, [r7, #8]
 80026b4:	0a1b      	lsrs	r3, r3, #8
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026c0:	69fa      	ldr	r2, [r7, #28]
 80026c2:	69b9      	ldr	r1, [r7, #24]
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f000 f89c 	bl	8002802 <I2C_WaitOnTXISFlagUntilTimeout>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e012      	b.n	80026fa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80026d4:	893b      	ldrh	r3, [r7, #8]
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	9300      	str	r3, [sp, #0]
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	2200      	movs	r2, #0
 80026e6:	2140      	movs	r1, #64	@ 0x40
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f000 f831 	bl	8002750 <I2C_WaitOnFlagUntilTimeout>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e000      	b.n	80026fa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	80002000 	.word	0x80002000

08002708 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b02      	cmp	r3, #2
 800271c:	d103      	bne.n	8002726 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2200      	movs	r2, #0
 8002724:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b01      	cmp	r3, #1
 8002732:	d007      	beq.n	8002744 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	699a      	ldr	r2, [r3, #24]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0201 	orr.w	r2, r2, #1
 8002742:	619a      	str	r2, [r3, #24]
  }
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	603b      	str	r3, [r7, #0]
 800275c:	4613      	mov	r3, r2
 800275e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002760:	e03b      	b.n	80027da <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	6839      	ldr	r1, [r7, #0]
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 f8d6 	bl	8002918 <I2C_IsErrorOccurred>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e041      	b.n	80027fa <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277c:	d02d      	beq.n	80027da <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800277e:	f7ff f9c1 	bl	8001b04 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	429a      	cmp	r2, r3
 800278c:	d302      	bcc.n	8002794 <I2C_WaitOnFlagUntilTimeout+0x44>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d122      	bne.n	80027da <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	699a      	ldr	r2, [r3, #24]
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	4013      	ands	r3, r2
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	bf0c      	ite	eq
 80027a4:	2301      	moveq	r3, #1
 80027a6:	2300      	movne	r3, #0
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	461a      	mov	r2, r3
 80027ac:	79fb      	ldrb	r3, [r7, #7]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d113      	bne.n	80027da <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b6:	f043 0220 	orr.w	r2, r3, #32
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2220      	movs	r2, #32
 80027c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e00f      	b.n	80027fa <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	699a      	ldr	r2, [r3, #24]
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	4013      	ands	r3, r2
 80027e4:	68ba      	ldr	r2, [r7, #8]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	bf0c      	ite	eq
 80027ea:	2301      	moveq	r3, #1
 80027ec:	2300      	movne	r3, #0
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	461a      	mov	r2, r3
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d0b4      	beq.n	8002762 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b084      	sub	sp, #16
 8002806:	af00      	add	r7, sp, #0
 8002808:	60f8      	str	r0, [r7, #12]
 800280a:	60b9      	str	r1, [r7, #8]
 800280c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800280e:	e033      	b.n	8002878 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	68b9      	ldr	r1, [r7, #8]
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f000 f87f 	bl	8002918 <I2C_IsErrorOccurred>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e031      	b.n	8002888 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800282a:	d025      	beq.n	8002878 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800282c:	f7ff f96a 	bl	8001b04 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	429a      	cmp	r2, r3
 800283a:	d302      	bcc.n	8002842 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d11a      	bne.n	8002878 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b02      	cmp	r3, #2
 800284e:	d013      	beq.n	8002878 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002854:	f043 0220 	orr.w	r2, r3, #32
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2220      	movs	r2, #32
 8002860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e007      	b.n	8002888 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b02      	cmp	r3, #2
 8002884:	d1c4      	bne.n	8002810 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800289c:	e02f      	b.n	80028fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	68b9      	ldr	r1, [r7, #8]
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 f838 	bl	8002918 <I2C_IsErrorOccurred>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e02d      	b.n	800290e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028b2:	f7ff f927 	bl	8001b04 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	68ba      	ldr	r2, [r7, #8]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d302      	bcc.n	80028c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d11a      	bne.n	80028fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	f003 0320 	and.w	r3, r3, #32
 80028d2:	2b20      	cmp	r3, #32
 80028d4:	d013      	beq.n	80028fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028da:	f043 0220 	orr.w	r2, r3, #32
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2220      	movs	r2, #32
 80028e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e007      	b.n	800290e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	f003 0320 	and.w	r3, r3, #32
 8002908:	2b20      	cmp	r3, #32
 800290a:	d1c8      	bne.n	800289e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
	...

08002918 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b08a      	sub	sp, #40	@ 0x28
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002924:	2300      	movs	r3, #0
 8002926:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002932:	2300      	movs	r3, #0
 8002934:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	f003 0310 	and.w	r3, r3, #16
 8002940:	2b00      	cmp	r3, #0
 8002942:	d068      	beq.n	8002a16 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2210      	movs	r2, #16
 800294a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800294c:	e049      	b.n	80029e2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002954:	d045      	beq.n	80029e2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002956:	f7ff f8d5 	bl	8001b04 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	68ba      	ldr	r2, [r7, #8]
 8002962:	429a      	cmp	r2, r3
 8002964:	d302      	bcc.n	800296c <I2C_IsErrorOccurred+0x54>
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d13a      	bne.n	80029e2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002976:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800297e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800298a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800298e:	d121      	bne.n	80029d4 <I2C_IsErrorOccurred+0xbc>
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002996:	d01d      	beq.n	80029d4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002998:	7cfb      	ldrb	r3, [r7, #19]
 800299a:	2b20      	cmp	r3, #32
 800299c:	d01a      	beq.n	80029d4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80029ac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80029ae:	f7ff f8a9 	bl	8001b04 <HAL_GetTick>
 80029b2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029b4:	e00e      	b.n	80029d4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80029b6:	f7ff f8a5 	bl	8001b04 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b19      	cmp	r3, #25
 80029c2:	d907      	bls.n	80029d4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80029c4:	6a3b      	ldr	r3, [r7, #32]
 80029c6:	f043 0320 	orr.w	r3, r3, #32
 80029ca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80029d2:	e006      	b.n	80029e2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	f003 0320 	and.w	r3, r3, #32
 80029de:	2b20      	cmp	r3, #32
 80029e0:	d1e9      	bne.n	80029b6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	f003 0320 	and.w	r3, r3, #32
 80029ec:	2b20      	cmp	r3, #32
 80029ee:	d003      	beq.n	80029f8 <I2C_IsErrorOccurred+0xe0>
 80029f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0aa      	beq.n	800294e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80029f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d103      	bne.n	8002a08 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2220      	movs	r2, #32
 8002a06:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	f043 0304 	orr.w	r3, r3, #4
 8002a0e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00b      	beq.n	8002a40 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002a28:	6a3b      	ldr	r3, [r7, #32]
 8002a2a:	f043 0301 	orr.w	r3, r3, #1
 8002a2e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a38:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00b      	beq.n	8002a62 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002a4a:	6a3b      	ldr	r3, [r7, #32]
 8002a4c:	f043 0308 	orr.w	r3, r3, #8
 8002a50:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a5a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00b      	beq.n	8002a84 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002a6c:	6a3b      	ldr	r3, [r7, #32]
 8002a6e:	f043 0302 	orr.w	r3, r3, #2
 8002a72:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a7c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002a84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d01c      	beq.n	8002ac6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f7ff fe3b 	bl	8002708 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6859      	ldr	r1, [r3, #4]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	4b0d      	ldr	r3, [pc, #52]	@ (8002ad4 <I2C_IsErrorOccurred+0x1bc>)
 8002a9e:	400b      	ands	r3, r1
 8002aa0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002aa6:	6a3b      	ldr	r3, [r7, #32]
 8002aa8:	431a      	orrs	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002ac6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3728      	adds	r7, #40	@ 0x28
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	fe00e800 	.word	0xfe00e800

08002ad8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b087      	sub	sp, #28
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	607b      	str	r3, [r7, #4]
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	817b      	strh	r3, [r7, #10]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002aea:	897b      	ldrh	r3, [r7, #10]
 8002aec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002af0:	7a7b      	ldrb	r3, [r7, #9]
 8002af2:	041b      	lsls	r3, r3, #16
 8002af4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002af8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002afe:	6a3b      	ldr	r3, [r7, #32]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b06:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	6a3b      	ldr	r3, [r7, #32]
 8002b10:	0d5b      	lsrs	r3, r3, #21
 8002b12:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002b16:	4b08      	ldr	r3, [pc, #32]	@ (8002b38 <I2C_TransferConfig+0x60>)
 8002b18:	430b      	orrs	r3, r1
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	ea02 0103 	and.w	r1, r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002b2a:	bf00      	nop
 8002b2c:	371c      	adds	r7, #28
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	03ff63ff 	.word	0x03ff63ff

08002b3c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b20      	cmp	r3, #32
 8002b50:	d138      	bne.n	8002bc4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	e032      	b.n	8002bc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2224      	movs	r2, #36	@ 0x24
 8002b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0201 	bic.w	r2, r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b8e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6819      	ldr	r1, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0201 	orr.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	e000      	b.n	8002bc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002bc4:	2302      	movs	r3, #2
  }
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b085      	sub	sp, #20
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
 8002bda:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b20      	cmp	r3, #32
 8002be6:	d139      	bne.n	8002c5c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d101      	bne.n	8002bf6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	e033      	b.n	8002c5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2224      	movs	r2, #36	@ 0x24
 8002c02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 0201 	bic.w	r2, r2, #1
 8002c14:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002c24:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	021b      	lsls	r3, r3, #8
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0201 	orr.w	r2, r2, #1
 8002c46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	e000      	b.n	8002c5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c5c:	2302      	movs	r3, #2
  }
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
	...

08002c6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c78:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c7c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d102      	bne.n	8002c92 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	f001 b823 	b.w	8003cd8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c96:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 817d 	beq.w	8002fa2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002ca8:	4bbc      	ldr	r3, [pc, #752]	@ (8002f9c <HAL_RCC_OscConfig+0x330>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f003 030c 	and.w	r3, r3, #12
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d00c      	beq.n	8002cce <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cb4:	4bb9      	ldr	r3, [pc, #740]	@ (8002f9c <HAL_RCC_OscConfig+0x330>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f003 030c 	and.w	r3, r3, #12
 8002cbc:	2b08      	cmp	r3, #8
 8002cbe:	d15c      	bne.n	8002d7a <HAL_RCC_OscConfig+0x10e>
 8002cc0:	4bb6      	ldr	r3, [pc, #728]	@ (8002f9c <HAL_RCC_OscConfig+0x330>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ccc:	d155      	bne.n	8002d7a <HAL_RCC_OscConfig+0x10e>
 8002cce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002cd2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002cda:	fa93 f3a3 	rbit	r3, r3
 8002cde:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ce2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce6:	fab3 f383 	clz	r3, r3
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	095b      	lsrs	r3, r3, #5
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	f043 0301 	orr.w	r3, r3, #1
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d102      	bne.n	8002d00 <HAL_RCC_OscConfig+0x94>
 8002cfa:	4ba8      	ldr	r3, [pc, #672]	@ (8002f9c <HAL_RCC_OscConfig+0x330>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	e015      	b.n	8002d2c <HAL_RCC_OscConfig+0xc0>
 8002d00:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d04:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d08:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002d0c:	fa93 f3a3 	rbit	r3, r3
 8002d10:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002d14:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d18:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002d1c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002d20:	fa93 f3a3 	rbit	r3, r3
 8002d24:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002d28:	4b9c      	ldr	r3, [pc, #624]	@ (8002f9c <HAL_RCC_OscConfig+0x330>)
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002d30:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002d34:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002d38:	fa92 f2a2 	rbit	r2, r2
 8002d3c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002d40:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002d44:	fab2 f282 	clz	r2, r2
 8002d48:	b2d2      	uxtb	r2, r2
 8002d4a:	f042 0220 	orr.w	r2, r2, #32
 8002d4e:	b2d2      	uxtb	r2, r2
 8002d50:	f002 021f 	and.w	r2, r2, #31
 8002d54:	2101      	movs	r1, #1
 8002d56:	fa01 f202 	lsl.w	r2, r1, r2
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 811f 	beq.w	8002fa0 <HAL_RCC_OscConfig+0x334>
 8002d62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d66:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f040 8116 	bne.w	8002fa0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	f000 bfaf 	b.w	8003cd8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d7e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d8a:	d106      	bne.n	8002d9a <HAL_RCC_OscConfig+0x12e>
 8002d8c:	4b83      	ldr	r3, [pc, #524]	@ (8002f9c <HAL_RCC_OscConfig+0x330>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a82      	ldr	r2, [pc, #520]	@ (8002f9c <HAL_RCC_OscConfig+0x330>)
 8002d92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d96:	6013      	str	r3, [r2, #0]
 8002d98:	e036      	b.n	8002e08 <HAL_RCC_OscConfig+0x19c>
 8002d9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10c      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x158>
 8002daa:	4b7c      	ldr	r3, [pc, #496]	@ (8002f9c <HAL_RCC_OscConfig+0x330>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a7b      	ldr	r2, [pc, #492]	@ (8002f9c <HAL_RCC_OscConfig+0x330>)
 8002db0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002db4:	6013      	str	r3, [r2, #0]
 8002db6:	4b79      	ldr	r3, [pc, #484]	@ (8002f9c <HAL_RCC_OscConfig+0x330>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a78      	ldr	r2, [pc, #480]	@ (8002f9c <HAL_RCC_OscConfig+0x330>)
 8002dbc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002dc0:	6013      	str	r3, [r2, #0]
 8002dc2:	e021      	b.n	8002e08 <HAL_RCC_OscConfig+0x19c>
 8002dc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dc8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002dd4:	d10c      	bne.n	8002df0 <HAL_RCC_OscConfig+0x184>
 8002dd6:	4b71      	ldr	r3, [pc, #452]	@ (8002f9c <HAL_RCC_OscConfig+0x330>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a70      	ldr	r2, [pc, #448]	@ (8002f9c <HAL_RCC_OscConfig+0x330>)
 8002ddc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	4b6e      	ldr	r3, [pc, #440]	@ (8002f9c <HAL_RCC_OscConfig+0x330>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a6d      	ldr	r2, [pc, #436]	@ (8002f9c <HAL_RCC_OscConfig+0x330>)
 8002de8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dec:	6013      	str	r3, [r2, #0]
 8002dee:	e00b      	b.n	8002e08 <HAL_RCC_OscConfig+0x19c>
 8002df0:	4b6a      	ldr	r3, [pc, #424]	@ (8002f9c <HAL_RCC_OscConfig+0x330>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a69      	ldr	r2, [pc, #420]	@ (8002f9c <HAL_RCC_OscConfig+0x330>)
 8002df6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dfa:	6013      	str	r3, [r2, #0]
 8002dfc:	4b67      	ldr	r3, [pc, #412]	@ (8002f9c <HAL_RCC_OscConfig+0x330>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a66      	ldr	r2, [pc, #408]	@ (8002f9c <HAL_RCC_OscConfig+0x330>)
 8002e02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e06:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e08:	4b64      	ldr	r3, [pc, #400]	@ (8002f9c <HAL_RCC_OscConfig+0x330>)
 8002e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e0c:	f023 020f 	bic.w	r2, r3, #15
 8002e10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e14:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	495f      	ldr	r1, [pc, #380]	@ (8002f9c <HAL_RCC_OscConfig+0x330>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d059      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e32:	f7fe fe67 	bl	8001b04 <HAL_GetTick>
 8002e36:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3a:	e00a      	b.n	8002e52 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e3c:	f7fe fe62 	bl	8001b04 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b64      	cmp	r3, #100	@ 0x64
 8002e4a:	d902      	bls.n	8002e52 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	f000 bf43 	b.w	8003cd8 <HAL_RCC_OscConfig+0x106c>
 8002e52:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e56:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002e5e:	fa93 f3a3 	rbit	r3, r3
 8002e62:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002e66:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6a:	fab3 f383 	clz	r3, r3
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	095b      	lsrs	r3, r3, #5
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	f043 0301 	orr.w	r3, r3, #1
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d102      	bne.n	8002e84 <HAL_RCC_OscConfig+0x218>
 8002e7e:	4b47      	ldr	r3, [pc, #284]	@ (8002f9c <HAL_RCC_OscConfig+0x330>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	e015      	b.n	8002eb0 <HAL_RCC_OscConfig+0x244>
 8002e84:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e88:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002e90:	fa93 f3a3 	rbit	r3, r3
 8002e94:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002e98:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e9c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002ea0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002ea4:	fa93 f3a3 	rbit	r3, r3
 8002ea8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002eac:	4b3b      	ldr	r3, [pc, #236]	@ (8002f9c <HAL_RCC_OscConfig+0x330>)
 8002eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002eb4:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002eb8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002ebc:	fa92 f2a2 	rbit	r2, r2
 8002ec0:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002ec4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002ec8:	fab2 f282 	clz	r2, r2
 8002ecc:	b2d2      	uxtb	r2, r2
 8002ece:	f042 0220 	orr.w	r2, r2, #32
 8002ed2:	b2d2      	uxtb	r2, r2
 8002ed4:	f002 021f 	and.w	r2, r2, #31
 8002ed8:	2101      	movs	r1, #1
 8002eda:	fa01 f202 	lsl.w	r2, r1, r2
 8002ede:	4013      	ands	r3, r2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0ab      	beq.n	8002e3c <HAL_RCC_OscConfig+0x1d0>
 8002ee4:	e05d      	b.n	8002fa2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee6:	f7fe fe0d 	bl	8001b04 <HAL_GetTick>
 8002eea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eee:	e00a      	b.n	8002f06 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ef0:	f7fe fe08 	bl	8001b04 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b64      	cmp	r3, #100	@ 0x64
 8002efe:	d902      	bls.n	8002f06 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	f000 bee9 	b.w	8003cd8 <HAL_RCC_OscConfig+0x106c>
 8002f06:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f0a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002f12:	fa93 f3a3 	rbit	r3, r3
 8002f16:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002f1a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f1e:	fab3 f383 	clz	r3, r3
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	095b      	lsrs	r3, r3, #5
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d102      	bne.n	8002f38 <HAL_RCC_OscConfig+0x2cc>
 8002f32:	4b1a      	ldr	r3, [pc, #104]	@ (8002f9c <HAL_RCC_OscConfig+0x330>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	e015      	b.n	8002f64 <HAL_RCC_OscConfig+0x2f8>
 8002f38:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f3c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f40:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002f44:	fa93 f3a3 	rbit	r3, r3
 8002f48:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002f4c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f50:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002f54:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002f58:	fa93 f3a3 	rbit	r3, r3
 8002f5c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002f60:	4b0e      	ldr	r3, [pc, #56]	@ (8002f9c <HAL_RCC_OscConfig+0x330>)
 8002f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f64:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002f68:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002f6c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002f70:	fa92 f2a2 	rbit	r2, r2
 8002f74:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002f78:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002f7c:	fab2 f282 	clz	r2, r2
 8002f80:	b2d2      	uxtb	r2, r2
 8002f82:	f042 0220 	orr.w	r2, r2, #32
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	f002 021f 	and.w	r2, r2, #31
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f92:	4013      	ands	r3, r2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1ab      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x284>
 8002f98:	e003      	b.n	8002fa2 <HAL_RCC_OscConfig+0x336>
 8002f9a:	bf00      	nop
 8002f9c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fa6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f000 817d 	beq.w	80032b2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002fb8:	4ba6      	ldr	r3, [pc, #664]	@ (8003254 <HAL_RCC_OscConfig+0x5e8>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f003 030c 	and.w	r3, r3, #12
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00b      	beq.n	8002fdc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002fc4:	4ba3      	ldr	r3, [pc, #652]	@ (8003254 <HAL_RCC_OscConfig+0x5e8>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f003 030c 	and.w	r3, r3, #12
 8002fcc:	2b08      	cmp	r3, #8
 8002fce:	d172      	bne.n	80030b6 <HAL_RCC_OscConfig+0x44a>
 8002fd0:	4ba0      	ldr	r3, [pc, #640]	@ (8003254 <HAL_RCC_OscConfig+0x5e8>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d16c      	bne.n	80030b6 <HAL_RCC_OscConfig+0x44a>
 8002fdc:	2302      	movs	r3, #2
 8002fde:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002fe6:	fa93 f3a3 	rbit	r3, r3
 8002fea:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002fee:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ff2:	fab3 f383 	clz	r3, r3
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	095b      	lsrs	r3, r3, #5
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	f043 0301 	orr.w	r3, r3, #1
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b01      	cmp	r3, #1
 8003004:	d102      	bne.n	800300c <HAL_RCC_OscConfig+0x3a0>
 8003006:	4b93      	ldr	r3, [pc, #588]	@ (8003254 <HAL_RCC_OscConfig+0x5e8>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	e013      	b.n	8003034 <HAL_RCC_OscConfig+0x3c8>
 800300c:	2302      	movs	r3, #2
 800300e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003012:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003016:	fa93 f3a3 	rbit	r3, r3
 800301a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800301e:	2302      	movs	r3, #2
 8003020:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003024:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003028:	fa93 f3a3 	rbit	r3, r3
 800302c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003030:	4b88      	ldr	r3, [pc, #544]	@ (8003254 <HAL_RCC_OscConfig+0x5e8>)
 8003032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003034:	2202      	movs	r2, #2
 8003036:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800303a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800303e:	fa92 f2a2 	rbit	r2, r2
 8003042:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8003046:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800304a:	fab2 f282 	clz	r2, r2
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	f042 0220 	orr.w	r2, r2, #32
 8003054:	b2d2      	uxtb	r2, r2
 8003056:	f002 021f 	and.w	r2, r2, #31
 800305a:	2101      	movs	r1, #1
 800305c:	fa01 f202 	lsl.w	r2, r1, r2
 8003060:	4013      	ands	r3, r2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00a      	beq.n	800307c <HAL_RCC_OscConfig+0x410>
 8003066:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800306a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d002      	beq.n	800307c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	f000 be2e 	b.w	8003cd8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800307c:	4b75      	ldr	r3, [pc, #468]	@ (8003254 <HAL_RCC_OscConfig+0x5e8>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003084:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003088:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	21f8      	movs	r1, #248	@ 0xf8
 8003092:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003096:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800309a:	fa91 f1a1 	rbit	r1, r1
 800309e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80030a2:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80030a6:	fab1 f181 	clz	r1, r1
 80030aa:	b2c9      	uxtb	r1, r1
 80030ac:	408b      	lsls	r3, r1
 80030ae:	4969      	ldr	r1, [pc, #420]	@ (8003254 <HAL_RCC_OscConfig+0x5e8>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030b4:	e0fd      	b.n	80032b2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 8088 	beq.w	80031d8 <HAL_RCC_OscConfig+0x56c>
 80030c8:	2301      	movs	r3, #1
 80030ca:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ce:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80030d2:	fa93 f3a3 	rbit	r3, r3
 80030d6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80030da:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030de:	fab3 f383 	clz	r3, r3
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80030e8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	461a      	mov	r2, r3
 80030f0:	2301      	movs	r3, #1
 80030f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f4:	f7fe fd06 	bl	8001b04 <HAL_GetTick>
 80030f8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030fc:	e00a      	b.n	8003114 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030fe:	f7fe fd01 	bl	8001b04 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d902      	bls.n	8003114 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	f000 bde2 	b.w	8003cd8 <HAL_RCC_OscConfig+0x106c>
 8003114:	2302      	movs	r3, #2
 8003116:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800311e:	fa93 f3a3 	rbit	r3, r3
 8003122:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8003126:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800312a:	fab3 f383 	clz	r3, r3
 800312e:	b2db      	uxtb	r3, r3
 8003130:	095b      	lsrs	r3, r3, #5
 8003132:	b2db      	uxtb	r3, r3
 8003134:	f043 0301 	orr.w	r3, r3, #1
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b01      	cmp	r3, #1
 800313c:	d102      	bne.n	8003144 <HAL_RCC_OscConfig+0x4d8>
 800313e:	4b45      	ldr	r3, [pc, #276]	@ (8003254 <HAL_RCC_OscConfig+0x5e8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	e013      	b.n	800316c <HAL_RCC_OscConfig+0x500>
 8003144:	2302      	movs	r3, #2
 8003146:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800314e:	fa93 f3a3 	rbit	r3, r3
 8003152:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003156:	2302      	movs	r3, #2
 8003158:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800315c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003160:	fa93 f3a3 	rbit	r3, r3
 8003164:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003168:	4b3a      	ldr	r3, [pc, #232]	@ (8003254 <HAL_RCC_OscConfig+0x5e8>)
 800316a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316c:	2202      	movs	r2, #2
 800316e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8003172:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003176:	fa92 f2a2 	rbit	r2, r2
 800317a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800317e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8003182:	fab2 f282 	clz	r2, r2
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	f042 0220 	orr.w	r2, r2, #32
 800318c:	b2d2      	uxtb	r2, r2
 800318e:	f002 021f 	and.w	r2, r2, #31
 8003192:	2101      	movs	r1, #1
 8003194:	fa01 f202 	lsl.w	r2, r1, r2
 8003198:	4013      	ands	r3, r2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d0af      	beq.n	80030fe <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800319e:	4b2d      	ldr	r3, [pc, #180]	@ (8003254 <HAL_RCC_OscConfig+0x5e8>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	21f8      	movs	r1, #248	@ 0xf8
 80031b4:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b8:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80031bc:	fa91 f1a1 	rbit	r1, r1
 80031c0:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80031c4:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80031c8:	fab1 f181 	clz	r1, r1
 80031cc:	b2c9      	uxtb	r1, r1
 80031ce:	408b      	lsls	r3, r1
 80031d0:	4920      	ldr	r1, [pc, #128]	@ (8003254 <HAL_RCC_OscConfig+0x5e8>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	600b      	str	r3, [r1, #0]
 80031d6:	e06c      	b.n	80032b2 <HAL_RCC_OscConfig+0x646>
 80031d8:	2301      	movs	r3, #1
 80031da:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031de:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80031e2:	fa93 f3a3 	rbit	r3, r3
 80031e6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80031ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ee:	fab3 f383 	clz	r3, r3
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80031f8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	461a      	mov	r2, r3
 8003200:	2300      	movs	r3, #0
 8003202:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003204:	f7fe fc7e 	bl	8001b04 <HAL_GetTick>
 8003208:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800320c:	e00a      	b.n	8003224 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800320e:	f7fe fc79 	bl	8001b04 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d902      	bls.n	8003224 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	f000 bd5a 	b.w	8003cd8 <HAL_RCC_OscConfig+0x106c>
 8003224:	2302      	movs	r3, #2
 8003226:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800322e:	fa93 f3a3 	rbit	r3, r3
 8003232:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8003236:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800323a:	fab3 f383 	clz	r3, r3
 800323e:	b2db      	uxtb	r3, r3
 8003240:	095b      	lsrs	r3, r3, #5
 8003242:	b2db      	uxtb	r3, r3
 8003244:	f043 0301 	orr.w	r3, r3, #1
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b01      	cmp	r3, #1
 800324c:	d104      	bne.n	8003258 <HAL_RCC_OscConfig+0x5ec>
 800324e:	4b01      	ldr	r3, [pc, #4]	@ (8003254 <HAL_RCC_OscConfig+0x5e8>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	e015      	b.n	8003280 <HAL_RCC_OscConfig+0x614>
 8003254:	40021000 	.word	0x40021000
 8003258:	2302      	movs	r3, #2
 800325a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003262:	fa93 f3a3 	rbit	r3, r3
 8003266:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800326a:	2302      	movs	r3, #2
 800326c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003270:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003274:	fa93 f3a3 	rbit	r3, r3
 8003278:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800327c:	4bc8      	ldr	r3, [pc, #800]	@ (80035a0 <HAL_RCC_OscConfig+0x934>)
 800327e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003280:	2202      	movs	r2, #2
 8003282:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003286:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800328a:	fa92 f2a2 	rbit	r2, r2
 800328e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003292:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003296:	fab2 f282 	clz	r2, r2
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	f042 0220 	orr.w	r2, r2, #32
 80032a0:	b2d2      	uxtb	r2, r2
 80032a2:	f002 021f 	and.w	r2, r2, #31
 80032a6:	2101      	movs	r1, #1
 80032a8:	fa01 f202 	lsl.w	r2, r1, r2
 80032ac:	4013      	ands	r3, r2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1ad      	bne.n	800320e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0308 	and.w	r3, r3, #8
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 8110 	beq.w	80034e8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d079      	beq.n	80033cc <HAL_RCC_OscConfig+0x760>
 80032d8:	2301      	movs	r3, #1
 80032da:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032de:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80032e2:	fa93 f3a3 	rbit	r3, r3
 80032e6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80032ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ee:	fab3 f383 	clz	r3, r3
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	461a      	mov	r2, r3
 80032f6:	4bab      	ldr	r3, [pc, #684]	@ (80035a4 <HAL_RCC_OscConfig+0x938>)
 80032f8:	4413      	add	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	461a      	mov	r2, r3
 80032fe:	2301      	movs	r3, #1
 8003300:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003302:	f7fe fbff 	bl	8001b04 <HAL_GetTick>
 8003306:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800330a:	e00a      	b.n	8003322 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800330c:	f7fe fbfa 	bl	8001b04 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d902      	bls.n	8003322 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	f000 bcdb 	b.w	8003cd8 <HAL_RCC_OscConfig+0x106c>
 8003322:	2302      	movs	r3, #2
 8003324:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003328:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800332c:	fa93 f3a3 	rbit	r3, r3
 8003330:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003334:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003338:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800333c:	2202      	movs	r2, #2
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003344:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	fa93 f2a3 	rbit	r2, r3
 800334e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003352:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800335c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003360:	2202      	movs	r2, #2
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003368:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	fa93 f2a3 	rbit	r2, r3
 8003372:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003376:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800337a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800337c:	4b88      	ldr	r3, [pc, #544]	@ (80035a0 <HAL_RCC_OscConfig+0x934>)
 800337e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003380:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003384:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003388:	2102      	movs	r1, #2
 800338a:	6019      	str	r1, [r3, #0]
 800338c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003390:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	fa93 f1a3 	rbit	r1, r3
 800339a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800339e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80033a2:	6019      	str	r1, [r3, #0]
  return result;
 80033a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033a8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	fab3 f383 	clz	r3, r3
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	f003 031f 	and.w	r3, r3, #31
 80033be:	2101      	movs	r1, #1
 80033c0:	fa01 f303 	lsl.w	r3, r1, r3
 80033c4:	4013      	ands	r3, r2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0a0      	beq.n	800330c <HAL_RCC_OscConfig+0x6a0>
 80033ca:	e08d      	b.n	80034e8 <HAL_RCC_OscConfig+0x87c>
 80033cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033d0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80033d4:	2201      	movs	r2, #1
 80033d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033dc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	fa93 f2a3 	rbit	r2, r3
 80033e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ea:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80033ee:	601a      	str	r2, [r3, #0]
  return result;
 80033f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033f4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80033f8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033fa:	fab3 f383 	clz	r3, r3
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	461a      	mov	r2, r3
 8003402:	4b68      	ldr	r3, [pc, #416]	@ (80035a4 <HAL_RCC_OscConfig+0x938>)
 8003404:	4413      	add	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	461a      	mov	r2, r3
 800340a:	2300      	movs	r3, #0
 800340c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800340e:	f7fe fb79 	bl	8001b04 <HAL_GetTick>
 8003412:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003416:	e00a      	b.n	800342e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003418:	f7fe fb74 	bl	8001b04 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d902      	bls.n	800342e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	f000 bc55 	b.w	8003cd8 <HAL_RCC_OscConfig+0x106c>
 800342e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003432:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003436:	2202      	movs	r2, #2
 8003438:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800343e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	fa93 f2a3 	rbit	r2, r3
 8003448:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800344c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003450:	601a      	str	r2, [r3, #0]
 8003452:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003456:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800345a:	2202      	movs	r2, #2
 800345c:	601a      	str	r2, [r3, #0]
 800345e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003462:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	fa93 f2a3 	rbit	r2, r3
 800346c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003470:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003474:	601a      	str	r2, [r3, #0]
 8003476:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800347a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800347e:	2202      	movs	r2, #2
 8003480:	601a      	str	r2, [r3, #0]
 8003482:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003486:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	fa93 f2a3 	rbit	r2, r3
 8003490:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003494:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003498:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800349a:	4b41      	ldr	r3, [pc, #260]	@ (80035a0 <HAL_RCC_OscConfig+0x934>)
 800349c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800349e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034a2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80034a6:	2102      	movs	r1, #2
 80034a8:	6019      	str	r1, [r3, #0]
 80034aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ae:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	fa93 f1a3 	rbit	r1, r3
 80034b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034bc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80034c0:	6019      	str	r1, [r3, #0]
  return result;
 80034c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034c6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	fab3 f383 	clz	r3, r3
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	f003 031f 	and.w	r3, r3, #31
 80034dc:	2101      	movs	r1, #1
 80034de:	fa01 f303 	lsl.w	r3, r1, r3
 80034e2:	4013      	ands	r3, r2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d197      	bne.n	8003418 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 81a1 	beq.w	8003840 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034fe:	2300      	movs	r3, #0
 8003500:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003504:	4b26      	ldr	r3, [pc, #152]	@ (80035a0 <HAL_RCC_OscConfig+0x934>)
 8003506:	69db      	ldr	r3, [r3, #28]
 8003508:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d116      	bne.n	800353e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003510:	4b23      	ldr	r3, [pc, #140]	@ (80035a0 <HAL_RCC_OscConfig+0x934>)
 8003512:	69db      	ldr	r3, [r3, #28]
 8003514:	4a22      	ldr	r2, [pc, #136]	@ (80035a0 <HAL_RCC_OscConfig+0x934>)
 8003516:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800351a:	61d3      	str	r3, [r2, #28]
 800351c:	4b20      	ldr	r3, [pc, #128]	@ (80035a0 <HAL_RCC_OscConfig+0x934>)
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003524:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003528:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003532:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003536:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003538:	2301      	movs	r3, #1
 800353a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800353e:	4b1a      	ldr	r3, [pc, #104]	@ (80035a8 <HAL_RCC_OscConfig+0x93c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003546:	2b00      	cmp	r3, #0
 8003548:	d11a      	bne.n	8003580 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800354a:	4b17      	ldr	r3, [pc, #92]	@ (80035a8 <HAL_RCC_OscConfig+0x93c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a16      	ldr	r2, [pc, #88]	@ (80035a8 <HAL_RCC_OscConfig+0x93c>)
 8003550:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003554:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003556:	f7fe fad5 	bl	8001b04 <HAL_GetTick>
 800355a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800355e:	e009      	b.n	8003574 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003560:	f7fe fad0 	bl	8001b04 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b64      	cmp	r3, #100	@ 0x64
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e3b1      	b.n	8003cd8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003574:	4b0c      	ldr	r3, [pc, #48]	@ (80035a8 <HAL_RCC_OscConfig+0x93c>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0ef      	beq.n	8003560 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003580:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003584:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d10d      	bne.n	80035ac <HAL_RCC_OscConfig+0x940>
 8003590:	4b03      	ldr	r3, [pc, #12]	@ (80035a0 <HAL_RCC_OscConfig+0x934>)
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	4a02      	ldr	r2, [pc, #8]	@ (80035a0 <HAL_RCC_OscConfig+0x934>)
 8003596:	f043 0301 	orr.w	r3, r3, #1
 800359a:	6213      	str	r3, [r2, #32]
 800359c:	e03c      	b.n	8003618 <HAL_RCC_OscConfig+0x9ac>
 800359e:	bf00      	nop
 80035a0:	40021000 	.word	0x40021000
 80035a4:	10908120 	.word	0x10908120
 80035a8:	40007000 	.word	0x40007000
 80035ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035b0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10c      	bne.n	80035d6 <HAL_RCC_OscConfig+0x96a>
 80035bc:	4bc1      	ldr	r3, [pc, #772]	@ (80038c4 <HAL_RCC_OscConfig+0xc58>)
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	4ac0      	ldr	r2, [pc, #768]	@ (80038c4 <HAL_RCC_OscConfig+0xc58>)
 80035c2:	f023 0301 	bic.w	r3, r3, #1
 80035c6:	6213      	str	r3, [r2, #32]
 80035c8:	4bbe      	ldr	r3, [pc, #760]	@ (80038c4 <HAL_RCC_OscConfig+0xc58>)
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	4abd      	ldr	r2, [pc, #756]	@ (80038c4 <HAL_RCC_OscConfig+0xc58>)
 80035ce:	f023 0304 	bic.w	r3, r3, #4
 80035d2:	6213      	str	r3, [r2, #32]
 80035d4:	e020      	b.n	8003618 <HAL_RCC_OscConfig+0x9ac>
 80035d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	2b05      	cmp	r3, #5
 80035e4:	d10c      	bne.n	8003600 <HAL_RCC_OscConfig+0x994>
 80035e6:	4bb7      	ldr	r3, [pc, #732]	@ (80038c4 <HAL_RCC_OscConfig+0xc58>)
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	4ab6      	ldr	r2, [pc, #728]	@ (80038c4 <HAL_RCC_OscConfig+0xc58>)
 80035ec:	f043 0304 	orr.w	r3, r3, #4
 80035f0:	6213      	str	r3, [r2, #32]
 80035f2:	4bb4      	ldr	r3, [pc, #720]	@ (80038c4 <HAL_RCC_OscConfig+0xc58>)
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	4ab3      	ldr	r2, [pc, #716]	@ (80038c4 <HAL_RCC_OscConfig+0xc58>)
 80035f8:	f043 0301 	orr.w	r3, r3, #1
 80035fc:	6213      	str	r3, [r2, #32]
 80035fe:	e00b      	b.n	8003618 <HAL_RCC_OscConfig+0x9ac>
 8003600:	4bb0      	ldr	r3, [pc, #704]	@ (80038c4 <HAL_RCC_OscConfig+0xc58>)
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	4aaf      	ldr	r2, [pc, #700]	@ (80038c4 <HAL_RCC_OscConfig+0xc58>)
 8003606:	f023 0301 	bic.w	r3, r3, #1
 800360a:	6213      	str	r3, [r2, #32]
 800360c:	4bad      	ldr	r3, [pc, #692]	@ (80038c4 <HAL_RCC_OscConfig+0xc58>)
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	4aac      	ldr	r2, [pc, #688]	@ (80038c4 <HAL_RCC_OscConfig+0xc58>)
 8003612:	f023 0304 	bic.w	r3, r3, #4
 8003616:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003618:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800361c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 8081 	beq.w	800372c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800362a:	f7fe fa6b 	bl	8001b04 <HAL_GetTick>
 800362e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003632:	e00b      	b.n	800364c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003634:	f7fe fa66 	bl	8001b04 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003644:	4293      	cmp	r3, r2
 8003646:	d901      	bls.n	800364c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e345      	b.n	8003cd8 <HAL_RCC_OscConfig+0x106c>
 800364c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003650:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003654:	2202      	movs	r2, #2
 8003656:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003658:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800365c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	fa93 f2a3 	rbit	r2, r3
 8003666:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800366a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003674:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003678:	2202      	movs	r2, #2
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003680:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	fa93 f2a3 	rbit	r2, r3
 800368a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800368e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003692:	601a      	str	r2, [r3, #0]
  return result;
 8003694:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003698:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800369c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369e:	fab3 f383 	clz	r3, r3
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	095b      	lsrs	r3, r3, #5
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	f043 0302 	orr.w	r3, r3, #2
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d102      	bne.n	80036b8 <HAL_RCC_OscConfig+0xa4c>
 80036b2:	4b84      	ldr	r3, [pc, #528]	@ (80038c4 <HAL_RCC_OscConfig+0xc58>)
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	e013      	b.n	80036e0 <HAL_RCC_OscConfig+0xa74>
 80036b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036bc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80036c0:	2202      	movs	r2, #2
 80036c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036c8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	fa93 f2a3 	rbit	r2, r3
 80036d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036d6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	4b79      	ldr	r3, [pc, #484]	@ (80038c4 <HAL_RCC_OscConfig+0xc58>)
 80036de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036e4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80036e8:	2102      	movs	r1, #2
 80036ea:	6011      	str	r1, [r2, #0]
 80036ec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036f0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80036f4:	6812      	ldr	r2, [r2, #0]
 80036f6:	fa92 f1a2 	rbit	r1, r2
 80036fa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036fe:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003702:	6011      	str	r1, [r2, #0]
  return result;
 8003704:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003708:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800370c:	6812      	ldr	r2, [r2, #0]
 800370e:	fab2 f282 	clz	r2, r2
 8003712:	b2d2      	uxtb	r2, r2
 8003714:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003718:	b2d2      	uxtb	r2, r2
 800371a:	f002 021f 	and.w	r2, r2, #31
 800371e:	2101      	movs	r1, #1
 8003720:	fa01 f202 	lsl.w	r2, r1, r2
 8003724:	4013      	ands	r3, r2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d084      	beq.n	8003634 <HAL_RCC_OscConfig+0x9c8>
 800372a:	e07f      	b.n	800382c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800372c:	f7fe f9ea 	bl	8001b04 <HAL_GetTick>
 8003730:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003734:	e00b      	b.n	800374e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003736:	f7fe f9e5 	bl	8001b04 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003746:	4293      	cmp	r3, r2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e2c4      	b.n	8003cd8 <HAL_RCC_OscConfig+0x106c>
 800374e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003752:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003756:	2202      	movs	r2, #2
 8003758:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800375e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	fa93 f2a3 	rbit	r2, r3
 8003768:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800376c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003776:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800377a:	2202      	movs	r2, #2
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003782:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	fa93 f2a3 	rbit	r2, r3
 800378c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003790:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003794:	601a      	str	r2, [r3, #0]
  return result;
 8003796:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800379a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800379e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037a0:	fab3 f383 	clz	r3, r3
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	095b      	lsrs	r3, r3, #5
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	f043 0302 	orr.w	r3, r3, #2
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d102      	bne.n	80037ba <HAL_RCC_OscConfig+0xb4e>
 80037b4:	4b43      	ldr	r3, [pc, #268]	@ (80038c4 <HAL_RCC_OscConfig+0xc58>)
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	e013      	b.n	80037e2 <HAL_RCC_OscConfig+0xb76>
 80037ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037be:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80037c2:	2202      	movs	r2, #2
 80037c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ca:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	fa93 f2a3 	rbit	r2, r3
 80037d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037d8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	4b39      	ldr	r3, [pc, #228]	@ (80038c4 <HAL_RCC_OscConfig+0xc58>)
 80037e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80037e6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80037ea:	2102      	movs	r1, #2
 80037ec:	6011      	str	r1, [r2, #0]
 80037ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80037f2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80037f6:	6812      	ldr	r2, [r2, #0]
 80037f8:	fa92 f1a2 	rbit	r1, r2
 80037fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003800:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003804:	6011      	str	r1, [r2, #0]
  return result;
 8003806:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800380a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800380e:	6812      	ldr	r2, [r2, #0]
 8003810:	fab2 f282 	clz	r2, r2
 8003814:	b2d2      	uxtb	r2, r2
 8003816:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800381a:	b2d2      	uxtb	r2, r2
 800381c:	f002 021f 	and.w	r2, r2, #31
 8003820:	2101      	movs	r1, #1
 8003822:	fa01 f202 	lsl.w	r2, r1, r2
 8003826:	4013      	ands	r3, r2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d184      	bne.n	8003736 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800382c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003830:	2b01      	cmp	r3, #1
 8003832:	d105      	bne.n	8003840 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003834:	4b23      	ldr	r3, [pc, #140]	@ (80038c4 <HAL_RCC_OscConfig+0xc58>)
 8003836:	69db      	ldr	r3, [r3, #28]
 8003838:	4a22      	ldr	r2, [pc, #136]	@ (80038c4 <HAL_RCC_OscConfig+0xc58>)
 800383a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800383e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003840:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003844:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	69db      	ldr	r3, [r3, #28]
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 8242 	beq.w	8003cd6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003852:	4b1c      	ldr	r3, [pc, #112]	@ (80038c4 <HAL_RCC_OscConfig+0xc58>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f003 030c 	and.w	r3, r3, #12
 800385a:	2b08      	cmp	r3, #8
 800385c:	f000 8213 	beq.w	8003c86 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003860:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003864:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	69db      	ldr	r3, [r3, #28]
 800386c:	2b02      	cmp	r3, #2
 800386e:	f040 8162 	bne.w	8003b36 <HAL_RCC_OscConfig+0xeca>
 8003872:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003876:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800387a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800387e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003880:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003884:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	fa93 f2a3 	rbit	r2, r3
 800388e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003892:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003896:	601a      	str	r2, [r3, #0]
  return result;
 8003898:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800389c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80038a0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a2:	fab3 f383 	clz	r3, r3
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80038ac:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	461a      	mov	r2, r3
 80038b4:	2300      	movs	r3, #0
 80038b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b8:	f7fe f924 	bl	8001b04 <HAL_GetTick>
 80038bc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038c0:	e00c      	b.n	80038dc <HAL_RCC_OscConfig+0xc70>
 80038c2:	bf00      	nop
 80038c4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038c8:	f7fe f91c 	bl	8001b04 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d901      	bls.n	80038dc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e1fd      	b.n	8003cd8 <HAL_RCC_OscConfig+0x106c>
 80038dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038e0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80038e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80038e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038ee:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	fa93 f2a3 	rbit	r2, r3
 80038f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038fc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003900:	601a      	str	r2, [r3, #0]
  return result;
 8003902:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003906:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800390a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800390c:	fab3 f383 	clz	r3, r3
 8003910:	b2db      	uxtb	r3, r3
 8003912:	095b      	lsrs	r3, r3, #5
 8003914:	b2db      	uxtb	r3, r3
 8003916:	f043 0301 	orr.w	r3, r3, #1
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b01      	cmp	r3, #1
 800391e:	d102      	bne.n	8003926 <HAL_RCC_OscConfig+0xcba>
 8003920:	4bb0      	ldr	r3, [pc, #704]	@ (8003be4 <HAL_RCC_OscConfig+0xf78>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	e027      	b.n	8003976 <HAL_RCC_OscConfig+0xd0a>
 8003926:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800392a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800392e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003932:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003934:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003938:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	fa93 f2a3 	rbit	r2, r3
 8003942:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003946:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003950:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003954:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800395e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	fa93 f2a3 	rbit	r2, r3
 8003968:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800396c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	4b9c      	ldr	r3, [pc, #624]	@ (8003be4 <HAL_RCC_OscConfig+0xf78>)
 8003974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003976:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800397a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800397e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003982:	6011      	str	r1, [r2, #0]
 8003984:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003988:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800398c:	6812      	ldr	r2, [r2, #0]
 800398e:	fa92 f1a2 	rbit	r1, r2
 8003992:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003996:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800399a:	6011      	str	r1, [r2, #0]
  return result;
 800399c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80039a0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80039a4:	6812      	ldr	r2, [r2, #0]
 80039a6:	fab2 f282 	clz	r2, r2
 80039aa:	b2d2      	uxtb	r2, r2
 80039ac:	f042 0220 	orr.w	r2, r2, #32
 80039b0:	b2d2      	uxtb	r2, r2
 80039b2:	f002 021f 	and.w	r2, r2, #31
 80039b6:	2101      	movs	r1, #1
 80039b8:	fa01 f202 	lsl.w	r2, r1, r2
 80039bc:	4013      	ands	r3, r2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d182      	bne.n	80038c8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039c2:	4b88      	ldr	r3, [pc, #544]	@ (8003be4 <HAL_RCC_OscConfig+0xf78>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80039ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80039d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	430b      	orrs	r3, r1
 80039e4:	497f      	ldr	r1, [pc, #508]	@ (8003be4 <HAL_RCC_OscConfig+0xf78>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	604b      	str	r3, [r1, #4]
 80039ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039ee:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80039f2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80039f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039fc:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	fa93 f2a3 	rbit	r2, r3
 8003a06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a0a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003a0e:	601a      	str	r2, [r3, #0]
  return result;
 8003a10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a14:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003a18:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a1a:	fab3 f383 	clz	r3, r3
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003a24:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a30:	f7fe f868 	bl	8001b04 <HAL_GetTick>
 8003a34:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a38:	e009      	b.n	8003a4e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a3a:	f7fe f863 	bl	8001b04 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e144      	b.n	8003cd8 <HAL_RCC_OscConfig+0x106c>
 8003a4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a52:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003a56:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a60:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	fa93 f2a3 	rbit	r2, r3
 8003a6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a6e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003a72:	601a      	str	r2, [r3, #0]
  return result;
 8003a74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a78:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003a7c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a7e:	fab3 f383 	clz	r3, r3
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	095b      	lsrs	r3, r3, #5
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	f043 0301 	orr.w	r3, r3, #1
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d102      	bne.n	8003a98 <HAL_RCC_OscConfig+0xe2c>
 8003a92:	4b54      	ldr	r3, [pc, #336]	@ (8003be4 <HAL_RCC_OscConfig+0xf78>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	e027      	b.n	8003ae8 <HAL_RCC_OscConfig+0xe7c>
 8003a98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a9c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003aa0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003aa4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aaa:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	fa93 f2a3 	rbit	r2, r3
 8003ab4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ab8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ac2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003ac6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003aca:	601a      	str	r2, [r3, #0]
 8003acc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ad0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	fa93 f2a3 	rbit	r2, r3
 8003ada:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ade:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	4b3f      	ldr	r3, [pc, #252]	@ (8003be4 <HAL_RCC_OscConfig+0xf78>)
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003aec:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003af0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003af4:	6011      	str	r1, [r2, #0]
 8003af6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003afa:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003afe:	6812      	ldr	r2, [r2, #0]
 8003b00:	fa92 f1a2 	rbit	r1, r2
 8003b04:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b08:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003b0c:	6011      	str	r1, [r2, #0]
  return result;
 8003b0e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b12:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003b16:	6812      	ldr	r2, [r2, #0]
 8003b18:	fab2 f282 	clz	r2, r2
 8003b1c:	b2d2      	uxtb	r2, r2
 8003b1e:	f042 0220 	orr.w	r2, r2, #32
 8003b22:	b2d2      	uxtb	r2, r2
 8003b24:	f002 021f 	and.w	r2, r2, #31
 8003b28:	2101      	movs	r1, #1
 8003b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b2e:	4013      	ands	r3, r2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d082      	beq.n	8003a3a <HAL_RCC_OscConfig+0xdce>
 8003b34:	e0cf      	b.n	8003cd6 <HAL_RCC_OscConfig+0x106a>
 8003b36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b3a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003b3e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003b42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b48:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	fa93 f2a3 	rbit	r2, r3
 8003b52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b56:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003b5a:	601a      	str	r2, [r3, #0]
  return result;
 8003b5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b60:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003b64:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b66:	fab3 f383 	clz	r3, r3
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003b70:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	461a      	mov	r2, r3
 8003b78:	2300      	movs	r3, #0
 8003b7a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b7c:	f7fd ffc2 	bl	8001b04 <HAL_GetTick>
 8003b80:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b84:	e009      	b.n	8003b9a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b86:	f7fd ffbd 	bl	8001b04 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e09e      	b.n	8003cd8 <HAL_RCC_OscConfig+0x106c>
 8003b9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b9e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003ba2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ba6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bac:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	fa93 f2a3 	rbit	r2, r3
 8003bb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bba:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003bbe:	601a      	str	r2, [r3, #0]
  return result;
 8003bc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bc4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003bc8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bca:	fab3 f383 	clz	r3, r3
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	095b      	lsrs	r3, r3, #5
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	f043 0301 	orr.w	r3, r3, #1
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d104      	bne.n	8003be8 <HAL_RCC_OscConfig+0xf7c>
 8003bde:	4b01      	ldr	r3, [pc, #4]	@ (8003be4 <HAL_RCC_OscConfig+0xf78>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	e029      	b.n	8003c38 <HAL_RCC_OscConfig+0xfcc>
 8003be4:	40021000 	.word	0x40021000
 8003be8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bec:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003bf0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003bf4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bfa:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	fa93 f2a3 	rbit	r2, r3
 8003c04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c08:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003c0c:	601a      	str	r2, [r3, #0]
 8003c0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c12:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003c16:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c20:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	fa93 f2a3 	rbit	r2, r3
 8003c2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c2e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	4b2b      	ldr	r3, [pc, #172]	@ (8003ce4 <HAL_RCC_OscConfig+0x1078>)
 8003c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c38:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c3c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003c40:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003c44:	6011      	str	r1, [r2, #0]
 8003c46:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c4a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003c4e:	6812      	ldr	r2, [r2, #0]
 8003c50:	fa92 f1a2 	rbit	r1, r2
 8003c54:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c58:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003c5c:	6011      	str	r1, [r2, #0]
  return result;
 8003c5e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c62:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003c66:	6812      	ldr	r2, [r2, #0]
 8003c68:	fab2 f282 	clz	r2, r2
 8003c6c:	b2d2      	uxtb	r2, r2
 8003c6e:	f042 0220 	orr.w	r2, r2, #32
 8003c72:	b2d2      	uxtb	r2, r2
 8003c74:	f002 021f 	and.w	r2, r2, #31
 8003c78:	2101      	movs	r1, #1
 8003c7a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c7e:	4013      	ands	r3, r2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d180      	bne.n	8003b86 <HAL_RCC_OscConfig+0xf1a>
 8003c84:	e027      	b.n	8003cd6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d101      	bne.n	8003c9a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e01e      	b.n	8003cd8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c9a:	4b12      	ldr	r3, [pc, #72]	@ (8003ce4 <HAL_RCC_OscConfig+0x1078>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003ca2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003ca6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003caa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d10b      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003cba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003cbe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003cc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cc6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d001      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e000      	b.n	8003cd8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40021000 	.word	0x40021000

08003ce8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b09e      	sub	sp, #120	@ 0x78
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d101      	bne.n	8003d00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e162      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d00:	4b90      	ldr	r3, [pc, #576]	@ (8003f44 <HAL_RCC_ClockConfig+0x25c>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0307 	and.w	r3, r3, #7
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d910      	bls.n	8003d30 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d0e:	4b8d      	ldr	r3, [pc, #564]	@ (8003f44 <HAL_RCC_ClockConfig+0x25c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f023 0207 	bic.w	r2, r3, #7
 8003d16:	498b      	ldr	r1, [pc, #556]	@ (8003f44 <HAL_RCC_ClockConfig+0x25c>)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d1e:	4b89      	ldr	r3, [pc, #548]	@ (8003f44 <HAL_RCC_ClockConfig+0x25c>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0307 	and.w	r3, r3, #7
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d001      	beq.n	8003d30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e14a      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d008      	beq.n	8003d4e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d3c:	4b82      	ldr	r3, [pc, #520]	@ (8003f48 <HAL_RCC_ClockConfig+0x260>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	497f      	ldr	r1, [pc, #508]	@ (8003f48 <HAL_RCC_ClockConfig+0x260>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f000 80dc 	beq.w	8003f14 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d13c      	bne.n	8003dde <HAL_RCC_ClockConfig+0xf6>
 8003d64:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d68:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d6c:	fa93 f3a3 	rbit	r3, r3
 8003d70:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003d72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d74:	fab3 f383 	clz	r3, r3
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	095b      	lsrs	r3, r3, #5
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	f043 0301 	orr.w	r3, r3, #1
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d102      	bne.n	8003d8e <HAL_RCC_ClockConfig+0xa6>
 8003d88:	4b6f      	ldr	r3, [pc, #444]	@ (8003f48 <HAL_RCC_ClockConfig+0x260>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	e00f      	b.n	8003dae <HAL_RCC_ClockConfig+0xc6>
 8003d8e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d92:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d96:	fa93 f3a3 	rbit	r3, r3
 8003d9a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003d9c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003da0:	663b      	str	r3, [r7, #96]	@ 0x60
 8003da2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003da4:	fa93 f3a3 	rbit	r3, r3
 8003da8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003daa:	4b67      	ldr	r3, [pc, #412]	@ (8003f48 <HAL_RCC_ClockConfig+0x260>)
 8003dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dae:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003db2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003db4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003db6:	fa92 f2a2 	rbit	r2, r2
 8003dba:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003dbc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003dbe:	fab2 f282 	clz	r2, r2
 8003dc2:	b2d2      	uxtb	r2, r2
 8003dc4:	f042 0220 	orr.w	r2, r2, #32
 8003dc8:	b2d2      	uxtb	r2, r2
 8003dca:	f002 021f 	and.w	r2, r2, #31
 8003dce:	2101      	movs	r1, #1
 8003dd0:	fa01 f202 	lsl.w	r2, r1, r2
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d17b      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e0f3      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d13c      	bne.n	8003e60 <HAL_RCC_ClockConfig+0x178>
 8003de6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003dea:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003dee:	fa93 f3a3 	rbit	r3, r3
 8003df2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003df4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003df6:	fab3 f383 	clz	r3, r3
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	095b      	lsrs	r3, r3, #5
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	f043 0301 	orr.w	r3, r3, #1
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d102      	bne.n	8003e10 <HAL_RCC_ClockConfig+0x128>
 8003e0a:	4b4f      	ldr	r3, [pc, #316]	@ (8003f48 <HAL_RCC_ClockConfig+0x260>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	e00f      	b.n	8003e30 <HAL_RCC_ClockConfig+0x148>
 8003e10:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e14:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e18:	fa93 f3a3 	rbit	r3, r3
 8003e1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e22:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e26:	fa93 f3a3 	rbit	r3, r3
 8003e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e2c:	4b46      	ldr	r3, [pc, #280]	@ (8003f48 <HAL_RCC_ClockConfig+0x260>)
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e30:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e34:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003e36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003e38:	fa92 f2a2 	rbit	r2, r2
 8003e3c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003e3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003e40:	fab2 f282 	clz	r2, r2
 8003e44:	b2d2      	uxtb	r2, r2
 8003e46:	f042 0220 	orr.w	r2, r2, #32
 8003e4a:	b2d2      	uxtb	r2, r2
 8003e4c:	f002 021f 	and.w	r2, r2, #31
 8003e50:	2101      	movs	r1, #1
 8003e52:	fa01 f202 	lsl.w	r2, r1, r2
 8003e56:	4013      	ands	r3, r2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d13a      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e0b2      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x2de>
 8003e60:	2302      	movs	r3, #2
 8003e62:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e66:	fa93 f3a3 	rbit	r3, r3
 8003e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e6e:	fab3 f383 	clz	r3, r3
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	095b      	lsrs	r3, r3, #5
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	f043 0301 	orr.w	r3, r3, #1
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d102      	bne.n	8003e88 <HAL_RCC_ClockConfig+0x1a0>
 8003e82:	4b31      	ldr	r3, [pc, #196]	@ (8003f48 <HAL_RCC_ClockConfig+0x260>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	e00d      	b.n	8003ea4 <HAL_RCC_ClockConfig+0x1bc>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e8e:	fa93 f3a3 	rbit	r3, r3
 8003e92:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e94:	2302      	movs	r3, #2
 8003e96:	623b      	str	r3, [r7, #32]
 8003e98:	6a3b      	ldr	r3, [r7, #32]
 8003e9a:	fa93 f3a3 	rbit	r3, r3
 8003e9e:	61fb      	str	r3, [r7, #28]
 8003ea0:	4b29      	ldr	r3, [pc, #164]	@ (8003f48 <HAL_RCC_ClockConfig+0x260>)
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea4:	2202      	movs	r2, #2
 8003ea6:	61ba      	str	r2, [r7, #24]
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	fa92 f2a2 	rbit	r2, r2
 8003eae:	617a      	str	r2, [r7, #20]
  return result;
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	fab2 f282 	clz	r2, r2
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	f042 0220 	orr.w	r2, r2, #32
 8003ebc:	b2d2      	uxtb	r2, r2
 8003ebe:	f002 021f 	and.w	r2, r2, #31
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ec8:	4013      	ands	r3, r2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e079      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ed2:	4b1d      	ldr	r3, [pc, #116]	@ (8003f48 <HAL_RCC_ClockConfig+0x260>)
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f023 0203 	bic.w	r2, r3, #3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	491a      	ldr	r1, [pc, #104]	@ (8003f48 <HAL_RCC_ClockConfig+0x260>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ee4:	f7fd fe0e 	bl	8001b04 <HAL_GetTick>
 8003ee8:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eea:	e00a      	b.n	8003f02 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eec:	f7fd fe0a 	bl	8001b04 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e061      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f02:	4b11      	ldr	r3, [pc, #68]	@ (8003f48 <HAL_RCC_ClockConfig+0x260>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f003 020c 	and.w	r2, r3, #12
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d1eb      	bne.n	8003eec <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f14:	4b0b      	ldr	r3, [pc, #44]	@ (8003f44 <HAL_RCC_ClockConfig+0x25c>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0307 	and.w	r3, r3, #7
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d214      	bcs.n	8003f4c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f22:	4b08      	ldr	r3, [pc, #32]	@ (8003f44 <HAL_RCC_ClockConfig+0x25c>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f023 0207 	bic.w	r2, r3, #7
 8003f2a:	4906      	ldr	r1, [pc, #24]	@ (8003f44 <HAL_RCC_ClockConfig+0x25c>)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f32:	4b04      	ldr	r3, [pc, #16]	@ (8003f44 <HAL_RCC_ClockConfig+0x25c>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0307 	and.w	r3, r3, #7
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d005      	beq.n	8003f4c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e040      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x2de>
 8003f44:	40022000 	.word	0x40022000
 8003f48:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d008      	beq.n	8003f6a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f58:	4b1d      	ldr	r3, [pc, #116]	@ (8003fd0 <HAL_RCC_ClockConfig+0x2e8>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	491a      	ldr	r1, [pc, #104]	@ (8003fd0 <HAL_RCC_ClockConfig+0x2e8>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0308 	and.w	r3, r3, #8
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d009      	beq.n	8003f8a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f76:	4b16      	ldr	r3, [pc, #88]	@ (8003fd0 <HAL_RCC_ClockConfig+0x2e8>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	4912      	ldr	r1, [pc, #72]	@ (8003fd0 <HAL_RCC_ClockConfig+0x2e8>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003f8a:	f000 f829 	bl	8003fe0 <HAL_RCC_GetSysClockFreq>
 8003f8e:	4601      	mov	r1, r0
 8003f90:	4b0f      	ldr	r3, [pc, #60]	@ (8003fd0 <HAL_RCC_ClockConfig+0x2e8>)
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f98:	22f0      	movs	r2, #240	@ 0xf0
 8003f9a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	fa92 f2a2 	rbit	r2, r2
 8003fa2:	60fa      	str	r2, [r7, #12]
  return result;
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	fab2 f282 	clz	r2, r2
 8003faa:	b2d2      	uxtb	r2, r2
 8003fac:	40d3      	lsrs	r3, r2
 8003fae:	4a09      	ldr	r2, [pc, #36]	@ (8003fd4 <HAL_RCC_ClockConfig+0x2ec>)
 8003fb0:	5cd3      	ldrb	r3, [r2, r3]
 8003fb2:	fa21 f303 	lsr.w	r3, r1, r3
 8003fb6:	4a08      	ldr	r2, [pc, #32]	@ (8003fd8 <HAL_RCC_ClockConfig+0x2f0>)
 8003fb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003fba:	4b08      	ldr	r3, [pc, #32]	@ (8003fdc <HAL_RCC_ClockConfig+0x2f4>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fd fd5c 	bl	8001a7c <HAL_InitTick>
  
  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3778      	adds	r7, #120	@ 0x78
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	08009b70 	.word	0x08009b70
 8003fd8:	20000000 	.word	0x20000000
 8003fdc:	20000004 	.word	0x20000004

08003fe0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b087      	sub	sp, #28
 8003fe4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	60fb      	str	r3, [r7, #12]
 8003fea:	2300      	movs	r3, #0
 8003fec:	60bb      	str	r3, [r7, #8]
 8003fee:	2300      	movs	r3, #0
 8003ff0:	617b      	str	r3, [r7, #20]
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003ffa:	4b1e      	ldr	r3, [pc, #120]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f003 030c 	and.w	r3, r3, #12
 8004006:	2b04      	cmp	r3, #4
 8004008:	d002      	beq.n	8004010 <HAL_RCC_GetSysClockFreq+0x30>
 800400a:	2b08      	cmp	r3, #8
 800400c:	d003      	beq.n	8004016 <HAL_RCC_GetSysClockFreq+0x36>
 800400e:	e026      	b.n	800405e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004010:	4b19      	ldr	r3, [pc, #100]	@ (8004078 <HAL_RCC_GetSysClockFreq+0x98>)
 8004012:	613b      	str	r3, [r7, #16]
      break;
 8004014:	e026      	b.n	8004064 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	0c9b      	lsrs	r3, r3, #18
 800401a:	f003 030f 	and.w	r3, r3, #15
 800401e:	4a17      	ldr	r2, [pc, #92]	@ (800407c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004020:	5cd3      	ldrb	r3, [r2, r3]
 8004022:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004024:	4b13      	ldr	r3, [pc, #76]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x94>)
 8004026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004028:	f003 030f 	and.w	r3, r3, #15
 800402c:	4a14      	ldr	r2, [pc, #80]	@ (8004080 <HAL_RCC_GetSysClockFreq+0xa0>)
 800402e:	5cd3      	ldrb	r3, [r2, r3]
 8004030:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d008      	beq.n	800404e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800403c:	4a0e      	ldr	r2, [pc, #56]	@ (8004078 <HAL_RCC_GetSysClockFreq+0x98>)
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	fbb2 f2f3 	udiv	r2, r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	fb02 f303 	mul.w	r3, r2, r3
 800404a:	617b      	str	r3, [r7, #20]
 800404c:	e004      	b.n	8004058 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a0c      	ldr	r2, [pc, #48]	@ (8004084 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004052:	fb02 f303 	mul.w	r3, r2, r3
 8004056:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	613b      	str	r3, [r7, #16]
      break;
 800405c:	e002      	b.n	8004064 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800405e:	4b06      	ldr	r3, [pc, #24]	@ (8004078 <HAL_RCC_GetSysClockFreq+0x98>)
 8004060:	613b      	str	r3, [r7, #16]
      break;
 8004062:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004064:	693b      	ldr	r3, [r7, #16]
}
 8004066:	4618      	mov	r0, r3
 8004068:	371c      	adds	r7, #28
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	40021000 	.word	0x40021000
 8004078:	007a1200 	.word	0x007a1200
 800407c:	08009b80 	.word	0x08009b80
 8004080:	08009b90 	.word	0x08009b90
 8004084:	003d0900 	.word	0x003d0900

08004088 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b092      	sub	sp, #72	@ 0x48
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004090:	2300      	movs	r3, #0
 8004092:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004094:	2300      	movs	r3, #0
 8004096:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004098:	2300      	movs	r3, #0
 800409a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 80d4 	beq.w	8004254 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040ac:	4b4e      	ldr	r3, [pc, #312]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ae:	69db      	ldr	r3, [r3, #28]
 80040b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10e      	bne.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040b8:	4b4b      	ldr	r3, [pc, #300]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ba:	69db      	ldr	r3, [r3, #28]
 80040bc:	4a4a      	ldr	r2, [pc, #296]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040c2:	61d3      	str	r3, [r2, #28]
 80040c4:	4b48      	ldr	r3, [pc, #288]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040c6:	69db      	ldr	r3, [r3, #28]
 80040c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040cc:	60bb      	str	r3, [r7, #8]
 80040ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040d0:	2301      	movs	r3, #1
 80040d2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d6:	4b45      	ldr	r3, [pc, #276]	@ (80041ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d118      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040e2:	4b42      	ldr	r3, [pc, #264]	@ (80041ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a41      	ldr	r2, [pc, #260]	@ (80041ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040ec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040ee:	f7fd fd09 	bl	8001b04 <HAL_GetTick>
 80040f2:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f4:	e008      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040f6:	f7fd fd05 	bl	8001b04 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b64      	cmp	r3, #100	@ 0x64
 8004102:	d901      	bls.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e169      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004108:	4b38      	ldr	r3, [pc, #224]	@ (80041ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0f0      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004114:	4b34      	ldr	r3, [pc, #208]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800411c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800411e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004120:	2b00      	cmp	r3, #0
 8004122:	f000 8084 	beq.w	800422e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800412e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004130:	429a      	cmp	r2, r3
 8004132:	d07c      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004134:	4b2c      	ldr	r3, [pc, #176]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800413c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800413e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004142:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004146:	fa93 f3a3 	rbit	r3, r3
 800414a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800414c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800414e:	fab3 f383 	clz	r3, r3
 8004152:	b2db      	uxtb	r3, r3
 8004154:	461a      	mov	r2, r3
 8004156:	4b26      	ldr	r3, [pc, #152]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004158:	4413      	add	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	461a      	mov	r2, r3
 800415e:	2301      	movs	r3, #1
 8004160:	6013      	str	r3, [r2, #0]
 8004162:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004166:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800416a:	fa93 f3a3 	rbit	r3, r3
 800416e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004172:	fab3 f383 	clz	r3, r3
 8004176:	b2db      	uxtb	r3, r3
 8004178:	461a      	mov	r2, r3
 800417a:	4b1d      	ldr	r3, [pc, #116]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800417c:	4413      	add	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	461a      	mov	r2, r3
 8004182:	2300      	movs	r3, #0
 8004184:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004186:	4a18      	ldr	r2, [pc, #96]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004188:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800418a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800418c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d04b      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004196:	f7fd fcb5 	bl	8001b04 <HAL_GetTick>
 800419a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800419c:	e00a      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800419e:	f7fd fcb1 	bl	8001b04 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d901      	bls.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e113      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x354>
 80041b4:	2302      	movs	r3, #2
 80041b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ba:	fa93 f3a3 	rbit	r3, r3
 80041be:	627b      	str	r3, [r7, #36]	@ 0x24
 80041c0:	2302      	movs	r3, #2
 80041c2:	623b      	str	r3, [r7, #32]
 80041c4:	6a3b      	ldr	r3, [r7, #32]
 80041c6:	fa93 f3a3 	rbit	r3, r3
 80041ca:	61fb      	str	r3, [r7, #28]
  return result;
 80041cc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ce:	fab3 f383 	clz	r3, r3
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	095b      	lsrs	r3, r3, #5
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	f043 0302 	orr.w	r3, r3, #2
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d108      	bne.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80041e2:	4b01      	ldr	r3, [pc, #4]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	e00d      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80041e8:	40021000 	.word	0x40021000
 80041ec:	40007000 	.word	0x40007000
 80041f0:	10908100 	.word	0x10908100
 80041f4:	2302      	movs	r3, #2
 80041f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	fa93 f3a3 	rbit	r3, r3
 80041fe:	617b      	str	r3, [r7, #20]
 8004200:	4b78      	ldr	r3, [pc, #480]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004204:	2202      	movs	r2, #2
 8004206:	613a      	str	r2, [r7, #16]
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	fa92 f2a2 	rbit	r2, r2
 800420e:	60fa      	str	r2, [r7, #12]
  return result;
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	fab2 f282 	clz	r2, r2
 8004216:	b2d2      	uxtb	r2, r2
 8004218:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800421c:	b2d2      	uxtb	r2, r2
 800421e:	f002 021f 	and.w	r2, r2, #31
 8004222:	2101      	movs	r1, #1
 8004224:	fa01 f202 	lsl.w	r2, r1, r2
 8004228:	4013      	ands	r3, r2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d0b7      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800422e:	4b6d      	ldr	r3, [pc, #436]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	496a      	ldr	r1, [pc, #424]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800423c:	4313      	orrs	r3, r2
 800423e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004240:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004244:	2b01      	cmp	r3, #1
 8004246:	d105      	bne.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004248:	4b66      	ldr	r3, [pc, #408]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800424a:	69db      	ldr	r3, [r3, #28]
 800424c:	4a65      	ldr	r2, [pc, #404]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800424e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004252:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b00      	cmp	r3, #0
 800425e:	d008      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004260:	4b60      	ldr	r3, [pc, #384]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004264:	f023 0203 	bic.w	r2, r3, #3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	495d      	ldr	r1, [pc, #372]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800426e:	4313      	orrs	r3, r2
 8004270:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d008      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800427e:	4b59      	ldr	r3, [pc, #356]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004282:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	4956      	ldr	r1, [pc, #344]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800428c:	4313      	orrs	r3, r2
 800428e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	2b00      	cmp	r3, #0
 800429a:	d008      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800429c:	4b51      	ldr	r3, [pc, #324]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800429e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	494e      	ldr	r1, [pc, #312]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0320 	and.w	r3, r3, #32
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d008      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042ba:	4b4a      	ldr	r3, [pc, #296]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042be:	f023 0210 	bic.w	r2, r3, #16
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	69db      	ldr	r3, [r3, #28]
 80042c6:	4947      	ldr	r1, [pc, #284]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d008      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80042d8:	4b42      	ldr	r3, [pc, #264]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e4:	493f      	ldr	r1, [pc, #252]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d008      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042f6:	4b3b      	ldr	r3, [pc, #236]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042fa:	f023 0220 	bic.w	r2, r3, #32
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	4938      	ldr	r1, [pc, #224]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004304:	4313      	orrs	r3, r2
 8004306:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0308 	and.w	r3, r3, #8
 8004310:	2b00      	cmp	r3, #0
 8004312:	d008      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004314:	4b33      	ldr	r3, [pc, #204]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004318:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	4930      	ldr	r1, [pc, #192]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004322:	4313      	orrs	r3, r2
 8004324:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0310 	and.w	r3, r3, #16
 800432e:	2b00      	cmp	r3, #0
 8004330:	d008      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004332:	4b2c      	ldr	r3, [pc, #176]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004336:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	4929      	ldr	r1, [pc, #164]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004340:	4313      	orrs	r3, r2
 8004342:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800434c:	2b00      	cmp	r3, #0
 800434e:	d008      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004350:	4b24      	ldr	r3, [pc, #144]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800435c:	4921      	ldr	r1, [pc, #132]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800435e:	4313      	orrs	r3, r2
 8004360:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800436a:	2b00      	cmp	r3, #0
 800436c:	d008      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800436e:	4b1d      	ldr	r3, [pc, #116]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004372:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437a:	491a      	ldr	r1, [pc, #104]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800437c:	4313      	orrs	r3, r2
 800437e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004388:	2b00      	cmp	r3, #0
 800438a:	d008      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800438c:	4b15      	ldr	r3, [pc, #84]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800438e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004390:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004398:	4912      	ldr	r1, [pc, #72]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800439a:	4313      	orrs	r3, r2
 800439c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d008      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80043aa:	4b0e      	ldr	r3, [pc, #56]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b6:	490b      	ldr	r1, [pc, #44]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d008      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80043c8:	4b06      	ldr	r3, [pc, #24]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043cc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043d4:	4903      	ldr	r1, [pc, #12]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3748      	adds	r7, #72	@ 0x48
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	40021000 	.word	0x40021000

080043e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e049      	b.n	800448e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d106      	bne.n	8004414 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7fd f95e 	bl	80016d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3304      	adds	r3, #4
 8004424:	4619      	mov	r1, r3
 8004426:	4610      	mov	r0, r2
 8004428:	f000 fa4a 	bl	80048c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
	...

08004498 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d109      	bne.n	80044bc <HAL_TIM_PWM_Start+0x24>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	bf14      	ite	ne
 80044b4:	2301      	movne	r3, #1
 80044b6:	2300      	moveq	r3, #0
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	e03c      	b.n	8004536 <HAL_TIM_PWM_Start+0x9e>
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	2b04      	cmp	r3, #4
 80044c0:	d109      	bne.n	80044d6 <HAL_TIM_PWM_Start+0x3e>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	bf14      	ite	ne
 80044ce:	2301      	movne	r3, #1
 80044d0:	2300      	moveq	r3, #0
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	e02f      	b.n	8004536 <HAL_TIM_PWM_Start+0x9e>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b08      	cmp	r3, #8
 80044da:	d109      	bne.n	80044f0 <HAL_TIM_PWM_Start+0x58>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	bf14      	ite	ne
 80044e8:	2301      	movne	r3, #1
 80044ea:	2300      	moveq	r3, #0
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	e022      	b.n	8004536 <HAL_TIM_PWM_Start+0x9e>
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	2b0c      	cmp	r3, #12
 80044f4:	d109      	bne.n	800450a <HAL_TIM_PWM_Start+0x72>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b01      	cmp	r3, #1
 8004500:	bf14      	ite	ne
 8004502:	2301      	movne	r3, #1
 8004504:	2300      	moveq	r3, #0
 8004506:	b2db      	uxtb	r3, r3
 8004508:	e015      	b.n	8004536 <HAL_TIM_PWM_Start+0x9e>
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	2b10      	cmp	r3, #16
 800450e:	d109      	bne.n	8004524 <HAL_TIM_PWM_Start+0x8c>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b01      	cmp	r3, #1
 800451a:	bf14      	ite	ne
 800451c:	2301      	movne	r3, #1
 800451e:	2300      	moveq	r3, #0
 8004520:	b2db      	uxtb	r3, r3
 8004522:	e008      	b.n	8004536 <HAL_TIM_PWM_Start+0x9e>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b01      	cmp	r3, #1
 800452e:	bf14      	ite	ne
 8004530:	2301      	movne	r3, #1
 8004532:	2300      	moveq	r3, #0
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e097      	b.n	800466e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d104      	bne.n	800454e <HAL_TIM_PWM_Start+0xb6>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2202      	movs	r2, #2
 8004548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800454c:	e023      	b.n	8004596 <HAL_TIM_PWM_Start+0xfe>
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	2b04      	cmp	r3, #4
 8004552:	d104      	bne.n	800455e <HAL_TIM_PWM_Start+0xc6>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2202      	movs	r2, #2
 8004558:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800455c:	e01b      	b.n	8004596 <HAL_TIM_PWM_Start+0xfe>
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	2b08      	cmp	r3, #8
 8004562:	d104      	bne.n	800456e <HAL_TIM_PWM_Start+0xd6>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2202      	movs	r2, #2
 8004568:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800456c:	e013      	b.n	8004596 <HAL_TIM_PWM_Start+0xfe>
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	2b0c      	cmp	r3, #12
 8004572:	d104      	bne.n	800457e <HAL_TIM_PWM_Start+0xe6>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2202      	movs	r2, #2
 8004578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800457c:	e00b      	b.n	8004596 <HAL_TIM_PWM_Start+0xfe>
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	2b10      	cmp	r3, #16
 8004582:	d104      	bne.n	800458e <HAL_TIM_PWM_Start+0xf6>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2202      	movs	r2, #2
 8004588:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800458c:	e003      	b.n	8004596 <HAL_TIM_PWM_Start+0xfe>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2202      	movs	r2, #2
 8004592:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2201      	movs	r2, #1
 800459c:	6839      	ldr	r1, [r7, #0]
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 fd00 	bl	8004fa4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a33      	ldr	r2, [pc, #204]	@ (8004678 <HAL_TIM_PWM_Start+0x1e0>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d013      	beq.n	80045d6 <HAL_TIM_PWM_Start+0x13e>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a32      	ldr	r2, [pc, #200]	@ (800467c <HAL_TIM_PWM_Start+0x1e4>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d00e      	beq.n	80045d6 <HAL_TIM_PWM_Start+0x13e>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a30      	ldr	r2, [pc, #192]	@ (8004680 <HAL_TIM_PWM_Start+0x1e8>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d009      	beq.n	80045d6 <HAL_TIM_PWM_Start+0x13e>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a2f      	ldr	r2, [pc, #188]	@ (8004684 <HAL_TIM_PWM_Start+0x1ec>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d004      	beq.n	80045d6 <HAL_TIM_PWM_Start+0x13e>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a2d      	ldr	r2, [pc, #180]	@ (8004688 <HAL_TIM_PWM_Start+0x1f0>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d101      	bne.n	80045da <HAL_TIM_PWM_Start+0x142>
 80045d6:	2301      	movs	r3, #1
 80045d8:	e000      	b.n	80045dc <HAL_TIM_PWM_Start+0x144>
 80045da:	2300      	movs	r3, #0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d007      	beq.n	80045f0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80045ee:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a20      	ldr	r2, [pc, #128]	@ (8004678 <HAL_TIM_PWM_Start+0x1e0>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d018      	beq.n	800462c <HAL_TIM_PWM_Start+0x194>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004602:	d013      	beq.n	800462c <HAL_TIM_PWM_Start+0x194>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a20      	ldr	r2, [pc, #128]	@ (800468c <HAL_TIM_PWM_Start+0x1f4>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d00e      	beq.n	800462c <HAL_TIM_PWM_Start+0x194>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a1f      	ldr	r2, [pc, #124]	@ (8004690 <HAL_TIM_PWM_Start+0x1f8>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d009      	beq.n	800462c <HAL_TIM_PWM_Start+0x194>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a17      	ldr	r2, [pc, #92]	@ (800467c <HAL_TIM_PWM_Start+0x1e4>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d004      	beq.n	800462c <HAL_TIM_PWM_Start+0x194>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a16      	ldr	r2, [pc, #88]	@ (8004680 <HAL_TIM_PWM_Start+0x1e8>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d115      	bne.n	8004658 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689a      	ldr	r2, [r3, #8]
 8004632:	4b18      	ldr	r3, [pc, #96]	@ (8004694 <HAL_TIM_PWM_Start+0x1fc>)
 8004634:	4013      	ands	r3, r2
 8004636:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2b06      	cmp	r3, #6
 800463c:	d015      	beq.n	800466a <HAL_TIM_PWM_Start+0x1d2>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004644:	d011      	beq.n	800466a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f042 0201 	orr.w	r2, r2, #1
 8004654:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004656:	e008      	b.n	800466a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f042 0201 	orr.w	r2, r2, #1
 8004666:	601a      	str	r2, [r3, #0]
 8004668:	e000      	b.n	800466c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800466a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	40012c00 	.word	0x40012c00
 800467c:	40013400 	.word	0x40013400
 8004680:	40014000 	.word	0x40014000
 8004684:	40014400 	.word	0x40014400
 8004688:	40014800 	.word	0x40014800
 800468c:	40000400 	.word	0x40000400
 8004690:	40000800 	.word	0x40000800
 8004694:	00010007 	.word	0x00010007

08004698 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b086      	sub	sp, #24
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046a4:	2300      	movs	r3, #0
 80046a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d101      	bne.n	80046b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80046b2:	2302      	movs	r3, #2
 80046b4:	e0ff      	b.n	80048b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2b14      	cmp	r3, #20
 80046c2:	f200 80f0 	bhi.w	80048a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80046c6:	a201      	add	r2, pc, #4	@ (adr r2, 80046cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046cc:	08004721 	.word	0x08004721
 80046d0:	080048a7 	.word	0x080048a7
 80046d4:	080048a7 	.word	0x080048a7
 80046d8:	080048a7 	.word	0x080048a7
 80046dc:	08004761 	.word	0x08004761
 80046e0:	080048a7 	.word	0x080048a7
 80046e4:	080048a7 	.word	0x080048a7
 80046e8:	080048a7 	.word	0x080048a7
 80046ec:	080047a3 	.word	0x080047a3
 80046f0:	080048a7 	.word	0x080048a7
 80046f4:	080048a7 	.word	0x080048a7
 80046f8:	080048a7 	.word	0x080048a7
 80046fc:	080047e3 	.word	0x080047e3
 8004700:	080048a7 	.word	0x080048a7
 8004704:	080048a7 	.word	0x080048a7
 8004708:	080048a7 	.word	0x080048a7
 800470c:	08004825 	.word	0x08004825
 8004710:	080048a7 	.word	0x080048a7
 8004714:	080048a7 	.word	0x080048a7
 8004718:	080048a7 	.word	0x080048a7
 800471c:	08004865 	.word	0x08004865
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68b9      	ldr	r1, [r7, #8]
 8004726:	4618      	mov	r0, r3
 8004728:	f000 f966 	bl	80049f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	699a      	ldr	r2, [r3, #24]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0208 	orr.w	r2, r2, #8
 800473a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	699a      	ldr	r2, [r3, #24]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0204 	bic.w	r2, r2, #4
 800474a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6999      	ldr	r1, [r3, #24]
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	691a      	ldr	r2, [r3, #16]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	619a      	str	r2, [r3, #24]
      break;
 800475e:	e0a5      	b.n	80048ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68b9      	ldr	r1, [r7, #8]
 8004766:	4618      	mov	r0, r3
 8004768:	f000 f9d6 	bl	8004b18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	699a      	ldr	r2, [r3, #24]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800477a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	699a      	ldr	r2, [r3, #24]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800478a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6999      	ldr	r1, [r3, #24]
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	021a      	lsls	r2, r3, #8
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	430a      	orrs	r2, r1
 800479e:	619a      	str	r2, [r3, #24]
      break;
 80047a0:	e084      	b.n	80048ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68b9      	ldr	r1, [r7, #8]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 fa3f 	bl	8004c2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	69da      	ldr	r2, [r3, #28]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f042 0208 	orr.w	r2, r2, #8
 80047bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	69da      	ldr	r2, [r3, #28]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 0204 	bic.w	r2, r2, #4
 80047cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	69d9      	ldr	r1, [r3, #28]
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	691a      	ldr	r2, [r3, #16]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	430a      	orrs	r2, r1
 80047de:	61da      	str	r2, [r3, #28]
      break;
 80047e0:	e064      	b.n	80048ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68b9      	ldr	r1, [r7, #8]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f000 faa7 	bl	8004d3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	69da      	ldr	r2, [r3, #28]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	69da      	ldr	r2, [r3, #28]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800480c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	69d9      	ldr	r1, [r3, #28]
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	021a      	lsls	r2, r3, #8
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	61da      	str	r2, [r3, #28]
      break;
 8004822:	e043      	b.n	80048ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68b9      	ldr	r1, [r7, #8]
 800482a:	4618      	mov	r0, r3
 800482c:	f000 faf0 	bl	8004e10 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f042 0208 	orr.w	r2, r2, #8
 800483e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f022 0204 	bic.w	r2, r2, #4
 800484e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	691a      	ldr	r2, [r3, #16]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004862:	e023      	b.n	80048ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68b9      	ldr	r1, [r7, #8]
 800486a:	4618      	mov	r0, r3
 800486c:	f000 fb34 	bl	8004ed8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800487e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800488e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	021a      	lsls	r2, r3, #8
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	430a      	orrs	r2, r1
 80048a2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80048a4:	e002      	b.n	80048ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	75fb      	strb	r3, [r7, #23]
      break;
 80048aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80048b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3718      	adds	r7, #24
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop

080048c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a42      	ldr	r2, [pc, #264]	@ (80049dc <TIM_Base_SetConfig+0x11c>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d00f      	beq.n	80048f8 <TIM_Base_SetConfig+0x38>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048de:	d00b      	beq.n	80048f8 <TIM_Base_SetConfig+0x38>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a3f      	ldr	r2, [pc, #252]	@ (80049e0 <TIM_Base_SetConfig+0x120>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d007      	beq.n	80048f8 <TIM_Base_SetConfig+0x38>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a3e      	ldr	r2, [pc, #248]	@ (80049e4 <TIM_Base_SetConfig+0x124>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d003      	beq.n	80048f8 <TIM_Base_SetConfig+0x38>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a3d      	ldr	r2, [pc, #244]	@ (80049e8 <TIM_Base_SetConfig+0x128>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d108      	bne.n	800490a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	4313      	orrs	r3, r2
 8004908:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a33      	ldr	r2, [pc, #204]	@ (80049dc <TIM_Base_SetConfig+0x11c>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d01b      	beq.n	800494a <TIM_Base_SetConfig+0x8a>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004918:	d017      	beq.n	800494a <TIM_Base_SetConfig+0x8a>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a30      	ldr	r2, [pc, #192]	@ (80049e0 <TIM_Base_SetConfig+0x120>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d013      	beq.n	800494a <TIM_Base_SetConfig+0x8a>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a2f      	ldr	r2, [pc, #188]	@ (80049e4 <TIM_Base_SetConfig+0x124>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d00f      	beq.n	800494a <TIM_Base_SetConfig+0x8a>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a2e      	ldr	r2, [pc, #184]	@ (80049e8 <TIM_Base_SetConfig+0x128>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d00b      	beq.n	800494a <TIM_Base_SetConfig+0x8a>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a2d      	ldr	r2, [pc, #180]	@ (80049ec <TIM_Base_SetConfig+0x12c>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d007      	beq.n	800494a <TIM_Base_SetConfig+0x8a>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a2c      	ldr	r2, [pc, #176]	@ (80049f0 <TIM_Base_SetConfig+0x130>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d003      	beq.n	800494a <TIM_Base_SetConfig+0x8a>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a2b      	ldr	r2, [pc, #172]	@ (80049f4 <TIM_Base_SetConfig+0x134>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d108      	bne.n	800495c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004950:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	4313      	orrs	r3, r2
 800495a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	4313      	orrs	r3, r2
 8004968:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a16      	ldr	r2, [pc, #88]	@ (80049dc <TIM_Base_SetConfig+0x11c>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d00f      	beq.n	80049a8 <TIM_Base_SetConfig+0xe8>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a17      	ldr	r2, [pc, #92]	@ (80049e8 <TIM_Base_SetConfig+0x128>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d00b      	beq.n	80049a8 <TIM_Base_SetConfig+0xe8>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a16      	ldr	r2, [pc, #88]	@ (80049ec <TIM_Base_SetConfig+0x12c>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d007      	beq.n	80049a8 <TIM_Base_SetConfig+0xe8>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a15      	ldr	r2, [pc, #84]	@ (80049f0 <TIM_Base_SetConfig+0x130>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d003      	beq.n	80049a8 <TIM_Base_SetConfig+0xe8>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a14      	ldr	r2, [pc, #80]	@ (80049f4 <TIM_Base_SetConfig+0x134>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d103      	bne.n	80049b0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	691a      	ldr	r2, [r3, #16]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d105      	bne.n	80049ce <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	f023 0201 	bic.w	r2, r3, #1
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	611a      	str	r2, [r3, #16]
  }
}
 80049ce:	bf00      	nop
 80049d0:	3714      	adds	r7, #20
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	40012c00 	.word	0x40012c00
 80049e0:	40000400 	.word	0x40000400
 80049e4:	40000800 	.word	0x40000800
 80049e8:	40013400 	.word	0x40013400
 80049ec:	40014000 	.word	0x40014000
 80049f0:	40014400 	.word	0x40014400
 80049f4:	40014800 	.word	0x40014800

080049f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b087      	sub	sp, #28
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a1b      	ldr	r3, [r3, #32]
 8004a0c:	f023 0201 	bic.w	r2, r3, #1
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f023 0303 	bic.w	r3, r3, #3
 8004a32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f023 0302 	bic.w	r3, r3, #2
 8004a44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a2c      	ldr	r2, [pc, #176]	@ (8004b04 <TIM_OC1_SetConfig+0x10c>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d00f      	beq.n	8004a78 <TIM_OC1_SetConfig+0x80>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a2b      	ldr	r2, [pc, #172]	@ (8004b08 <TIM_OC1_SetConfig+0x110>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d00b      	beq.n	8004a78 <TIM_OC1_SetConfig+0x80>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a2a      	ldr	r2, [pc, #168]	@ (8004b0c <TIM_OC1_SetConfig+0x114>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d007      	beq.n	8004a78 <TIM_OC1_SetConfig+0x80>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a29      	ldr	r2, [pc, #164]	@ (8004b10 <TIM_OC1_SetConfig+0x118>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d003      	beq.n	8004a78 <TIM_OC1_SetConfig+0x80>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a28      	ldr	r2, [pc, #160]	@ (8004b14 <TIM_OC1_SetConfig+0x11c>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d10c      	bne.n	8004a92 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	f023 0308 	bic.w	r3, r3, #8
 8004a7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f023 0304 	bic.w	r3, r3, #4
 8004a90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a1b      	ldr	r2, [pc, #108]	@ (8004b04 <TIM_OC1_SetConfig+0x10c>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d00f      	beq.n	8004aba <TIM_OC1_SetConfig+0xc2>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a1a      	ldr	r2, [pc, #104]	@ (8004b08 <TIM_OC1_SetConfig+0x110>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d00b      	beq.n	8004aba <TIM_OC1_SetConfig+0xc2>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a19      	ldr	r2, [pc, #100]	@ (8004b0c <TIM_OC1_SetConfig+0x114>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d007      	beq.n	8004aba <TIM_OC1_SetConfig+0xc2>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a18      	ldr	r2, [pc, #96]	@ (8004b10 <TIM_OC1_SetConfig+0x118>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d003      	beq.n	8004aba <TIM_OC1_SetConfig+0xc2>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a17      	ldr	r2, [pc, #92]	@ (8004b14 <TIM_OC1_SetConfig+0x11c>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d111      	bne.n	8004ade <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ac0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	621a      	str	r2, [r3, #32]
}
 8004af8:	bf00      	nop
 8004afa:	371c      	adds	r7, #28
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr
 8004b04:	40012c00 	.word	0x40012c00
 8004b08:	40013400 	.word	0x40013400
 8004b0c:	40014000 	.word	0x40014000
 8004b10:	40014400 	.word	0x40014400
 8004b14:	40014800 	.word	0x40014800

08004b18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a1b      	ldr	r3, [r3, #32]
 8004b2c:	f023 0210 	bic.w	r2, r3, #16
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	021b      	lsls	r3, r3, #8
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	f023 0320 	bic.w	r3, r3, #32
 8004b66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	011b      	lsls	r3, r3, #4
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a28      	ldr	r2, [pc, #160]	@ (8004c18 <TIM_OC2_SetConfig+0x100>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d003      	beq.n	8004b84 <TIM_OC2_SetConfig+0x6c>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a27      	ldr	r2, [pc, #156]	@ (8004c1c <TIM_OC2_SetConfig+0x104>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d10d      	bne.n	8004ba0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	011b      	lsls	r3, r3, #4
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b9e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a1d      	ldr	r2, [pc, #116]	@ (8004c18 <TIM_OC2_SetConfig+0x100>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d00f      	beq.n	8004bc8 <TIM_OC2_SetConfig+0xb0>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a1c      	ldr	r2, [pc, #112]	@ (8004c1c <TIM_OC2_SetConfig+0x104>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d00b      	beq.n	8004bc8 <TIM_OC2_SetConfig+0xb0>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a1b      	ldr	r2, [pc, #108]	@ (8004c20 <TIM_OC2_SetConfig+0x108>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d007      	beq.n	8004bc8 <TIM_OC2_SetConfig+0xb0>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a1a      	ldr	r2, [pc, #104]	@ (8004c24 <TIM_OC2_SetConfig+0x10c>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d003      	beq.n	8004bc8 <TIM_OC2_SetConfig+0xb0>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a19      	ldr	r2, [pc, #100]	@ (8004c28 <TIM_OC2_SetConfig+0x110>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d113      	bne.n	8004bf0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004bce:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004bd6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	621a      	str	r2, [r3, #32]
}
 8004c0a:	bf00      	nop
 8004c0c:	371c      	adds	r7, #28
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	40012c00 	.word	0x40012c00
 8004c1c:	40013400 	.word	0x40013400
 8004c20:	40014000 	.word	0x40014000
 8004c24:	40014400 	.word	0x40014400
 8004c28:	40014800 	.word	0x40014800

08004c2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b087      	sub	sp, #28
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	69db      	ldr	r3, [r3, #28]
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f023 0303 	bic.w	r3, r3, #3
 8004c66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	021b      	lsls	r3, r3, #8
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a27      	ldr	r2, [pc, #156]	@ (8004d28 <TIM_OC3_SetConfig+0xfc>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d003      	beq.n	8004c96 <TIM_OC3_SetConfig+0x6a>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a26      	ldr	r2, [pc, #152]	@ (8004d2c <TIM_OC3_SetConfig+0x100>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d10d      	bne.n	8004cb2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	021b      	lsls	r3, r3, #8
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004cb0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a1c      	ldr	r2, [pc, #112]	@ (8004d28 <TIM_OC3_SetConfig+0xfc>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d00f      	beq.n	8004cda <TIM_OC3_SetConfig+0xae>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a1b      	ldr	r2, [pc, #108]	@ (8004d2c <TIM_OC3_SetConfig+0x100>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d00b      	beq.n	8004cda <TIM_OC3_SetConfig+0xae>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a1a      	ldr	r2, [pc, #104]	@ (8004d30 <TIM_OC3_SetConfig+0x104>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d007      	beq.n	8004cda <TIM_OC3_SetConfig+0xae>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a19      	ldr	r2, [pc, #100]	@ (8004d34 <TIM_OC3_SetConfig+0x108>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d003      	beq.n	8004cda <TIM_OC3_SetConfig+0xae>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a18      	ldr	r2, [pc, #96]	@ (8004d38 <TIM_OC3_SetConfig+0x10c>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d113      	bne.n	8004d02 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ce0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	011b      	lsls	r3, r3, #4
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	011b      	lsls	r3, r3, #4
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	621a      	str	r2, [r3, #32]
}
 8004d1c:	bf00      	nop
 8004d1e:	371c      	adds	r7, #28
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr
 8004d28:	40012c00 	.word	0x40012c00
 8004d2c:	40013400 	.word	0x40013400
 8004d30:	40014000 	.word	0x40014000
 8004d34:	40014400 	.word	0x40014400
 8004d38:	40014800 	.word	0x40014800

08004d3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b087      	sub	sp, #28
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a1b      	ldr	r3, [r3, #32]
 8004d50:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	021b      	lsls	r3, r3, #8
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	031b      	lsls	r3, r3, #12
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a18      	ldr	r2, [pc, #96]	@ (8004dfc <TIM_OC4_SetConfig+0xc0>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d00f      	beq.n	8004dc0 <TIM_OC4_SetConfig+0x84>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a17      	ldr	r2, [pc, #92]	@ (8004e00 <TIM_OC4_SetConfig+0xc4>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d00b      	beq.n	8004dc0 <TIM_OC4_SetConfig+0x84>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a16      	ldr	r2, [pc, #88]	@ (8004e04 <TIM_OC4_SetConfig+0xc8>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d007      	beq.n	8004dc0 <TIM_OC4_SetConfig+0x84>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a15      	ldr	r2, [pc, #84]	@ (8004e08 <TIM_OC4_SetConfig+0xcc>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d003      	beq.n	8004dc0 <TIM_OC4_SetConfig+0x84>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a14      	ldr	r2, [pc, #80]	@ (8004e0c <TIM_OC4_SetConfig+0xd0>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d109      	bne.n	8004dd4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004dc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	019b      	lsls	r3, r3, #6
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	621a      	str	r2, [r3, #32]
}
 8004dee:	bf00      	nop
 8004df0:	371c      	adds	r7, #28
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	40012c00 	.word	0x40012c00
 8004e00:	40013400 	.word	0x40013400
 8004e04:	40014000 	.word	0x40014000
 8004e08:	40014400 	.word	0x40014400
 8004e0c:	40014800 	.word	0x40014800

08004e10 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b087      	sub	sp, #28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004e54:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	041b      	lsls	r3, r3, #16
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a17      	ldr	r2, [pc, #92]	@ (8004ec4 <TIM_OC5_SetConfig+0xb4>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d00f      	beq.n	8004e8a <TIM_OC5_SetConfig+0x7a>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a16      	ldr	r2, [pc, #88]	@ (8004ec8 <TIM_OC5_SetConfig+0xb8>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d00b      	beq.n	8004e8a <TIM_OC5_SetConfig+0x7a>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a15      	ldr	r2, [pc, #84]	@ (8004ecc <TIM_OC5_SetConfig+0xbc>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d007      	beq.n	8004e8a <TIM_OC5_SetConfig+0x7a>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a14      	ldr	r2, [pc, #80]	@ (8004ed0 <TIM_OC5_SetConfig+0xc0>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d003      	beq.n	8004e8a <TIM_OC5_SetConfig+0x7a>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a13      	ldr	r2, [pc, #76]	@ (8004ed4 <TIM_OC5_SetConfig+0xc4>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d109      	bne.n	8004e9e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	021b      	lsls	r3, r3, #8
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	685a      	ldr	r2, [r3, #4]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	621a      	str	r2, [r3, #32]
}
 8004eb8:	bf00      	nop
 8004eba:	371c      	adds	r7, #28
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	40012c00 	.word	0x40012c00
 8004ec8:	40013400 	.word	0x40013400
 8004ecc:	40014000 	.word	0x40014000
 8004ed0:	40014400 	.word	0x40014400
 8004ed4:	40014800 	.word	0x40014800

08004ed8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b087      	sub	sp, #28
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a1b      	ldr	r3, [r3, #32]
 8004eec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	021b      	lsls	r3, r3, #8
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004f1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	051b      	lsls	r3, r3, #20
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a18      	ldr	r2, [pc, #96]	@ (8004f90 <TIM_OC6_SetConfig+0xb8>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d00f      	beq.n	8004f54 <TIM_OC6_SetConfig+0x7c>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a17      	ldr	r2, [pc, #92]	@ (8004f94 <TIM_OC6_SetConfig+0xbc>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d00b      	beq.n	8004f54 <TIM_OC6_SetConfig+0x7c>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a16      	ldr	r2, [pc, #88]	@ (8004f98 <TIM_OC6_SetConfig+0xc0>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d007      	beq.n	8004f54 <TIM_OC6_SetConfig+0x7c>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a15      	ldr	r2, [pc, #84]	@ (8004f9c <TIM_OC6_SetConfig+0xc4>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d003      	beq.n	8004f54 <TIM_OC6_SetConfig+0x7c>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a14      	ldr	r2, [pc, #80]	@ (8004fa0 <TIM_OC6_SetConfig+0xc8>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d109      	bne.n	8004f68 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f5a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	029b      	lsls	r3, r3, #10
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	621a      	str	r2, [r3, #32]
}
 8004f82:	bf00      	nop
 8004f84:	371c      	adds	r7, #28
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	40012c00 	.word	0x40012c00
 8004f94:	40013400 	.word	0x40013400
 8004f98:	40014000 	.word	0x40014000
 8004f9c:	40014400 	.word	0x40014400
 8004fa0:	40014800 	.word	0x40014800

08004fa4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b087      	sub	sp, #28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	f003 031f 	and.w	r3, r3, #31
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6a1a      	ldr	r2, [r3, #32]
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	43db      	mvns	r3, r3
 8004fc6:	401a      	ands	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6a1a      	ldr	r2, [r3, #32]
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	f003 031f 	and.w	r3, r3, #31
 8004fd6:	6879      	ldr	r1, [r7, #4]
 8004fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8004fdc:	431a      	orrs	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	621a      	str	r2, [r3, #32]
}
 8004fe2:	bf00      	nop
 8004fe4:	371c      	adds	r7, #28
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
	...

08004ff0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005000:	2b01      	cmp	r3, #1
 8005002:	d101      	bne.n	8005008 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005004:	2302      	movs	r3, #2
 8005006:	e063      	b.n	80050d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2202      	movs	r2, #2
 8005014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a2b      	ldr	r2, [pc, #172]	@ (80050dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d004      	beq.n	800503c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a2a      	ldr	r2, [pc, #168]	@ (80050e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d108      	bne.n	800504e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005042:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	4313      	orrs	r3, r2
 800504c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005054:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	4313      	orrs	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a1b      	ldr	r2, [pc, #108]	@ (80050dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d018      	beq.n	80050a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800507a:	d013      	beq.n	80050a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a18      	ldr	r2, [pc, #96]	@ (80050e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d00e      	beq.n	80050a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a17      	ldr	r2, [pc, #92]	@ (80050e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d009      	beq.n	80050a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a12      	ldr	r2, [pc, #72]	@ (80050e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d004      	beq.n	80050a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a13      	ldr	r2, [pc, #76]	@ (80050ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d10c      	bne.n	80050be <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3714      	adds	r7, #20
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	40012c00 	.word	0x40012c00
 80050e0:	40013400 	.word	0x40013400
 80050e4:	40000400 	.word	0x40000400
 80050e8:	40000800 	.word	0x40000800
 80050ec:	40014000 	.word	0x40014000

080050f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80050fa:	2300      	movs	r3, #0
 80050fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005104:	2b01      	cmp	r3, #1
 8005106:	d101      	bne.n	800510c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005108:	2302      	movs	r3, #2
 800510a:	e065      	b.n	80051d8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	4313      	orrs	r3, r2
 8005120:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	4313      	orrs	r3, r2
 800512e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	4313      	orrs	r3, r2
 800513c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4313      	orrs	r3, r2
 800514a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	4313      	orrs	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	695b      	ldr	r3, [r3, #20]
 8005164:	4313      	orrs	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005172:	4313      	orrs	r3, r2
 8005174:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	041b      	lsls	r3, r3, #16
 8005182:	4313      	orrs	r3, r2
 8005184:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a16      	ldr	r2, [pc, #88]	@ (80051e4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d004      	beq.n	800519a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a14      	ldr	r2, [pc, #80]	@ (80051e8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d115      	bne.n	80051c6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a4:	051b      	lsls	r3, r3, #20
 80051a6:	4313      	orrs	r3, r2
 80051a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	69db      	ldr	r3, [r3, #28]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3714      	adds	r7, #20
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	40012c00 	.word	0x40012c00
 80051e8:	40013400 	.word	0x40013400

080051ec <__cvt>:
 80051ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051f0:	ec57 6b10 	vmov	r6, r7, d0
 80051f4:	2f00      	cmp	r7, #0
 80051f6:	460c      	mov	r4, r1
 80051f8:	4619      	mov	r1, r3
 80051fa:	463b      	mov	r3, r7
 80051fc:	bfbb      	ittet	lt
 80051fe:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005202:	461f      	movlt	r7, r3
 8005204:	2300      	movge	r3, #0
 8005206:	232d      	movlt	r3, #45	@ 0x2d
 8005208:	700b      	strb	r3, [r1, #0]
 800520a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800520c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005210:	4691      	mov	r9, r2
 8005212:	f023 0820 	bic.w	r8, r3, #32
 8005216:	bfbc      	itt	lt
 8005218:	4632      	movlt	r2, r6
 800521a:	4616      	movlt	r6, r2
 800521c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005220:	d005      	beq.n	800522e <__cvt+0x42>
 8005222:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005226:	d100      	bne.n	800522a <__cvt+0x3e>
 8005228:	3401      	adds	r4, #1
 800522a:	2102      	movs	r1, #2
 800522c:	e000      	b.n	8005230 <__cvt+0x44>
 800522e:	2103      	movs	r1, #3
 8005230:	ab03      	add	r3, sp, #12
 8005232:	9301      	str	r3, [sp, #4]
 8005234:	ab02      	add	r3, sp, #8
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	ec47 6b10 	vmov	d0, r6, r7
 800523c:	4653      	mov	r3, sl
 800523e:	4622      	mov	r2, r4
 8005240:	f001 f876 	bl	8006330 <_dtoa_r>
 8005244:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005248:	4605      	mov	r5, r0
 800524a:	d119      	bne.n	8005280 <__cvt+0x94>
 800524c:	f019 0f01 	tst.w	r9, #1
 8005250:	d00e      	beq.n	8005270 <__cvt+0x84>
 8005252:	eb00 0904 	add.w	r9, r0, r4
 8005256:	2200      	movs	r2, #0
 8005258:	2300      	movs	r3, #0
 800525a:	4630      	mov	r0, r6
 800525c:	4639      	mov	r1, r7
 800525e:	f7fb fc33 	bl	8000ac8 <__aeabi_dcmpeq>
 8005262:	b108      	cbz	r0, 8005268 <__cvt+0x7c>
 8005264:	f8cd 900c 	str.w	r9, [sp, #12]
 8005268:	2230      	movs	r2, #48	@ 0x30
 800526a:	9b03      	ldr	r3, [sp, #12]
 800526c:	454b      	cmp	r3, r9
 800526e:	d31e      	bcc.n	80052ae <__cvt+0xc2>
 8005270:	9b03      	ldr	r3, [sp, #12]
 8005272:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005274:	1b5b      	subs	r3, r3, r5
 8005276:	4628      	mov	r0, r5
 8005278:	6013      	str	r3, [r2, #0]
 800527a:	b004      	add	sp, #16
 800527c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005280:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005284:	eb00 0904 	add.w	r9, r0, r4
 8005288:	d1e5      	bne.n	8005256 <__cvt+0x6a>
 800528a:	7803      	ldrb	r3, [r0, #0]
 800528c:	2b30      	cmp	r3, #48	@ 0x30
 800528e:	d10a      	bne.n	80052a6 <__cvt+0xba>
 8005290:	2200      	movs	r2, #0
 8005292:	2300      	movs	r3, #0
 8005294:	4630      	mov	r0, r6
 8005296:	4639      	mov	r1, r7
 8005298:	f7fb fc16 	bl	8000ac8 <__aeabi_dcmpeq>
 800529c:	b918      	cbnz	r0, 80052a6 <__cvt+0xba>
 800529e:	f1c4 0401 	rsb	r4, r4, #1
 80052a2:	f8ca 4000 	str.w	r4, [sl]
 80052a6:	f8da 3000 	ldr.w	r3, [sl]
 80052aa:	4499      	add	r9, r3
 80052ac:	e7d3      	b.n	8005256 <__cvt+0x6a>
 80052ae:	1c59      	adds	r1, r3, #1
 80052b0:	9103      	str	r1, [sp, #12]
 80052b2:	701a      	strb	r2, [r3, #0]
 80052b4:	e7d9      	b.n	800526a <__cvt+0x7e>

080052b6 <__exponent>:
 80052b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052b8:	2900      	cmp	r1, #0
 80052ba:	bfba      	itte	lt
 80052bc:	4249      	neglt	r1, r1
 80052be:	232d      	movlt	r3, #45	@ 0x2d
 80052c0:	232b      	movge	r3, #43	@ 0x2b
 80052c2:	2909      	cmp	r1, #9
 80052c4:	7002      	strb	r2, [r0, #0]
 80052c6:	7043      	strb	r3, [r0, #1]
 80052c8:	dd29      	ble.n	800531e <__exponent+0x68>
 80052ca:	f10d 0307 	add.w	r3, sp, #7
 80052ce:	461d      	mov	r5, r3
 80052d0:	270a      	movs	r7, #10
 80052d2:	461a      	mov	r2, r3
 80052d4:	fbb1 f6f7 	udiv	r6, r1, r7
 80052d8:	fb07 1416 	mls	r4, r7, r6, r1
 80052dc:	3430      	adds	r4, #48	@ 0x30
 80052de:	f802 4c01 	strb.w	r4, [r2, #-1]
 80052e2:	460c      	mov	r4, r1
 80052e4:	2c63      	cmp	r4, #99	@ 0x63
 80052e6:	f103 33ff 	add.w	r3, r3, #4294967295
 80052ea:	4631      	mov	r1, r6
 80052ec:	dcf1      	bgt.n	80052d2 <__exponent+0x1c>
 80052ee:	3130      	adds	r1, #48	@ 0x30
 80052f0:	1e94      	subs	r4, r2, #2
 80052f2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80052f6:	1c41      	adds	r1, r0, #1
 80052f8:	4623      	mov	r3, r4
 80052fa:	42ab      	cmp	r3, r5
 80052fc:	d30a      	bcc.n	8005314 <__exponent+0x5e>
 80052fe:	f10d 0309 	add.w	r3, sp, #9
 8005302:	1a9b      	subs	r3, r3, r2
 8005304:	42ac      	cmp	r4, r5
 8005306:	bf88      	it	hi
 8005308:	2300      	movhi	r3, #0
 800530a:	3302      	adds	r3, #2
 800530c:	4403      	add	r3, r0
 800530e:	1a18      	subs	r0, r3, r0
 8005310:	b003      	add	sp, #12
 8005312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005314:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005318:	f801 6f01 	strb.w	r6, [r1, #1]!
 800531c:	e7ed      	b.n	80052fa <__exponent+0x44>
 800531e:	2330      	movs	r3, #48	@ 0x30
 8005320:	3130      	adds	r1, #48	@ 0x30
 8005322:	7083      	strb	r3, [r0, #2]
 8005324:	70c1      	strb	r1, [r0, #3]
 8005326:	1d03      	adds	r3, r0, #4
 8005328:	e7f1      	b.n	800530e <__exponent+0x58>
	...

0800532c <_printf_float>:
 800532c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005330:	b08d      	sub	sp, #52	@ 0x34
 8005332:	460c      	mov	r4, r1
 8005334:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005338:	4616      	mov	r6, r2
 800533a:	461f      	mov	r7, r3
 800533c:	4605      	mov	r5, r0
 800533e:	f000 feef 	bl	8006120 <_localeconv_r>
 8005342:	6803      	ldr	r3, [r0, #0]
 8005344:	9304      	str	r3, [sp, #16]
 8005346:	4618      	mov	r0, r3
 8005348:	f7fa ff92 	bl	8000270 <strlen>
 800534c:	2300      	movs	r3, #0
 800534e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005350:	f8d8 3000 	ldr.w	r3, [r8]
 8005354:	9005      	str	r0, [sp, #20]
 8005356:	3307      	adds	r3, #7
 8005358:	f023 0307 	bic.w	r3, r3, #7
 800535c:	f103 0208 	add.w	r2, r3, #8
 8005360:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005364:	f8d4 b000 	ldr.w	fp, [r4]
 8005368:	f8c8 2000 	str.w	r2, [r8]
 800536c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005370:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005374:	9307      	str	r3, [sp, #28]
 8005376:	f8cd 8018 	str.w	r8, [sp, #24]
 800537a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800537e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005382:	4b9c      	ldr	r3, [pc, #624]	@ (80055f4 <_printf_float+0x2c8>)
 8005384:	f04f 32ff 	mov.w	r2, #4294967295
 8005388:	f7fb fbd0 	bl	8000b2c <__aeabi_dcmpun>
 800538c:	bb70      	cbnz	r0, 80053ec <_printf_float+0xc0>
 800538e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005392:	4b98      	ldr	r3, [pc, #608]	@ (80055f4 <_printf_float+0x2c8>)
 8005394:	f04f 32ff 	mov.w	r2, #4294967295
 8005398:	f7fb fbaa 	bl	8000af0 <__aeabi_dcmple>
 800539c:	bb30      	cbnz	r0, 80053ec <_printf_float+0xc0>
 800539e:	2200      	movs	r2, #0
 80053a0:	2300      	movs	r3, #0
 80053a2:	4640      	mov	r0, r8
 80053a4:	4649      	mov	r1, r9
 80053a6:	f7fb fb99 	bl	8000adc <__aeabi_dcmplt>
 80053aa:	b110      	cbz	r0, 80053b2 <_printf_float+0x86>
 80053ac:	232d      	movs	r3, #45	@ 0x2d
 80053ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053b2:	4a91      	ldr	r2, [pc, #580]	@ (80055f8 <_printf_float+0x2cc>)
 80053b4:	4b91      	ldr	r3, [pc, #580]	@ (80055fc <_printf_float+0x2d0>)
 80053b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80053ba:	bf94      	ite	ls
 80053bc:	4690      	movls	r8, r2
 80053be:	4698      	movhi	r8, r3
 80053c0:	2303      	movs	r3, #3
 80053c2:	6123      	str	r3, [r4, #16]
 80053c4:	f02b 0304 	bic.w	r3, fp, #4
 80053c8:	6023      	str	r3, [r4, #0]
 80053ca:	f04f 0900 	mov.w	r9, #0
 80053ce:	9700      	str	r7, [sp, #0]
 80053d0:	4633      	mov	r3, r6
 80053d2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80053d4:	4621      	mov	r1, r4
 80053d6:	4628      	mov	r0, r5
 80053d8:	f000 f9d2 	bl	8005780 <_printf_common>
 80053dc:	3001      	adds	r0, #1
 80053de:	f040 808d 	bne.w	80054fc <_printf_float+0x1d0>
 80053e2:	f04f 30ff 	mov.w	r0, #4294967295
 80053e6:	b00d      	add	sp, #52	@ 0x34
 80053e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ec:	4642      	mov	r2, r8
 80053ee:	464b      	mov	r3, r9
 80053f0:	4640      	mov	r0, r8
 80053f2:	4649      	mov	r1, r9
 80053f4:	f7fb fb9a 	bl	8000b2c <__aeabi_dcmpun>
 80053f8:	b140      	cbz	r0, 800540c <_printf_float+0xe0>
 80053fa:	464b      	mov	r3, r9
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	bfbc      	itt	lt
 8005400:	232d      	movlt	r3, #45	@ 0x2d
 8005402:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005406:	4a7e      	ldr	r2, [pc, #504]	@ (8005600 <_printf_float+0x2d4>)
 8005408:	4b7e      	ldr	r3, [pc, #504]	@ (8005604 <_printf_float+0x2d8>)
 800540a:	e7d4      	b.n	80053b6 <_printf_float+0x8a>
 800540c:	6863      	ldr	r3, [r4, #4]
 800540e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005412:	9206      	str	r2, [sp, #24]
 8005414:	1c5a      	adds	r2, r3, #1
 8005416:	d13b      	bne.n	8005490 <_printf_float+0x164>
 8005418:	2306      	movs	r3, #6
 800541a:	6063      	str	r3, [r4, #4]
 800541c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005420:	2300      	movs	r3, #0
 8005422:	6022      	str	r2, [r4, #0]
 8005424:	9303      	str	r3, [sp, #12]
 8005426:	ab0a      	add	r3, sp, #40	@ 0x28
 8005428:	e9cd a301 	strd	sl, r3, [sp, #4]
 800542c:	ab09      	add	r3, sp, #36	@ 0x24
 800542e:	9300      	str	r3, [sp, #0]
 8005430:	6861      	ldr	r1, [r4, #4]
 8005432:	ec49 8b10 	vmov	d0, r8, r9
 8005436:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800543a:	4628      	mov	r0, r5
 800543c:	f7ff fed6 	bl	80051ec <__cvt>
 8005440:	9b06      	ldr	r3, [sp, #24]
 8005442:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005444:	2b47      	cmp	r3, #71	@ 0x47
 8005446:	4680      	mov	r8, r0
 8005448:	d129      	bne.n	800549e <_printf_float+0x172>
 800544a:	1cc8      	adds	r0, r1, #3
 800544c:	db02      	blt.n	8005454 <_printf_float+0x128>
 800544e:	6863      	ldr	r3, [r4, #4]
 8005450:	4299      	cmp	r1, r3
 8005452:	dd41      	ble.n	80054d8 <_printf_float+0x1ac>
 8005454:	f1aa 0a02 	sub.w	sl, sl, #2
 8005458:	fa5f fa8a 	uxtb.w	sl, sl
 800545c:	3901      	subs	r1, #1
 800545e:	4652      	mov	r2, sl
 8005460:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005464:	9109      	str	r1, [sp, #36]	@ 0x24
 8005466:	f7ff ff26 	bl	80052b6 <__exponent>
 800546a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800546c:	1813      	adds	r3, r2, r0
 800546e:	2a01      	cmp	r2, #1
 8005470:	4681      	mov	r9, r0
 8005472:	6123      	str	r3, [r4, #16]
 8005474:	dc02      	bgt.n	800547c <_printf_float+0x150>
 8005476:	6822      	ldr	r2, [r4, #0]
 8005478:	07d2      	lsls	r2, r2, #31
 800547a:	d501      	bpl.n	8005480 <_printf_float+0x154>
 800547c:	3301      	adds	r3, #1
 800547e:	6123      	str	r3, [r4, #16]
 8005480:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005484:	2b00      	cmp	r3, #0
 8005486:	d0a2      	beq.n	80053ce <_printf_float+0xa2>
 8005488:	232d      	movs	r3, #45	@ 0x2d
 800548a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800548e:	e79e      	b.n	80053ce <_printf_float+0xa2>
 8005490:	9a06      	ldr	r2, [sp, #24]
 8005492:	2a47      	cmp	r2, #71	@ 0x47
 8005494:	d1c2      	bne.n	800541c <_printf_float+0xf0>
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1c0      	bne.n	800541c <_printf_float+0xf0>
 800549a:	2301      	movs	r3, #1
 800549c:	e7bd      	b.n	800541a <_printf_float+0xee>
 800549e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80054a2:	d9db      	bls.n	800545c <_printf_float+0x130>
 80054a4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80054a8:	d118      	bne.n	80054dc <_printf_float+0x1b0>
 80054aa:	2900      	cmp	r1, #0
 80054ac:	6863      	ldr	r3, [r4, #4]
 80054ae:	dd0b      	ble.n	80054c8 <_printf_float+0x19c>
 80054b0:	6121      	str	r1, [r4, #16]
 80054b2:	b913      	cbnz	r3, 80054ba <_printf_float+0x18e>
 80054b4:	6822      	ldr	r2, [r4, #0]
 80054b6:	07d0      	lsls	r0, r2, #31
 80054b8:	d502      	bpl.n	80054c0 <_printf_float+0x194>
 80054ba:	3301      	adds	r3, #1
 80054bc:	440b      	add	r3, r1
 80054be:	6123      	str	r3, [r4, #16]
 80054c0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80054c2:	f04f 0900 	mov.w	r9, #0
 80054c6:	e7db      	b.n	8005480 <_printf_float+0x154>
 80054c8:	b913      	cbnz	r3, 80054d0 <_printf_float+0x1a4>
 80054ca:	6822      	ldr	r2, [r4, #0]
 80054cc:	07d2      	lsls	r2, r2, #31
 80054ce:	d501      	bpl.n	80054d4 <_printf_float+0x1a8>
 80054d0:	3302      	adds	r3, #2
 80054d2:	e7f4      	b.n	80054be <_printf_float+0x192>
 80054d4:	2301      	movs	r3, #1
 80054d6:	e7f2      	b.n	80054be <_printf_float+0x192>
 80054d8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80054dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80054de:	4299      	cmp	r1, r3
 80054e0:	db05      	blt.n	80054ee <_printf_float+0x1c2>
 80054e2:	6823      	ldr	r3, [r4, #0]
 80054e4:	6121      	str	r1, [r4, #16]
 80054e6:	07d8      	lsls	r0, r3, #31
 80054e8:	d5ea      	bpl.n	80054c0 <_printf_float+0x194>
 80054ea:	1c4b      	adds	r3, r1, #1
 80054ec:	e7e7      	b.n	80054be <_printf_float+0x192>
 80054ee:	2900      	cmp	r1, #0
 80054f0:	bfd4      	ite	le
 80054f2:	f1c1 0202 	rsble	r2, r1, #2
 80054f6:	2201      	movgt	r2, #1
 80054f8:	4413      	add	r3, r2
 80054fa:	e7e0      	b.n	80054be <_printf_float+0x192>
 80054fc:	6823      	ldr	r3, [r4, #0]
 80054fe:	055a      	lsls	r2, r3, #21
 8005500:	d407      	bmi.n	8005512 <_printf_float+0x1e6>
 8005502:	6923      	ldr	r3, [r4, #16]
 8005504:	4642      	mov	r2, r8
 8005506:	4631      	mov	r1, r6
 8005508:	4628      	mov	r0, r5
 800550a:	47b8      	blx	r7
 800550c:	3001      	adds	r0, #1
 800550e:	d12b      	bne.n	8005568 <_printf_float+0x23c>
 8005510:	e767      	b.n	80053e2 <_printf_float+0xb6>
 8005512:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005516:	f240 80dd 	bls.w	80056d4 <_printf_float+0x3a8>
 800551a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800551e:	2200      	movs	r2, #0
 8005520:	2300      	movs	r3, #0
 8005522:	f7fb fad1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005526:	2800      	cmp	r0, #0
 8005528:	d033      	beq.n	8005592 <_printf_float+0x266>
 800552a:	4a37      	ldr	r2, [pc, #220]	@ (8005608 <_printf_float+0x2dc>)
 800552c:	2301      	movs	r3, #1
 800552e:	4631      	mov	r1, r6
 8005530:	4628      	mov	r0, r5
 8005532:	47b8      	blx	r7
 8005534:	3001      	adds	r0, #1
 8005536:	f43f af54 	beq.w	80053e2 <_printf_float+0xb6>
 800553a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800553e:	4543      	cmp	r3, r8
 8005540:	db02      	blt.n	8005548 <_printf_float+0x21c>
 8005542:	6823      	ldr	r3, [r4, #0]
 8005544:	07d8      	lsls	r0, r3, #31
 8005546:	d50f      	bpl.n	8005568 <_printf_float+0x23c>
 8005548:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800554c:	4631      	mov	r1, r6
 800554e:	4628      	mov	r0, r5
 8005550:	47b8      	blx	r7
 8005552:	3001      	adds	r0, #1
 8005554:	f43f af45 	beq.w	80053e2 <_printf_float+0xb6>
 8005558:	f04f 0900 	mov.w	r9, #0
 800555c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005560:	f104 0a1a 	add.w	sl, r4, #26
 8005564:	45c8      	cmp	r8, r9
 8005566:	dc09      	bgt.n	800557c <_printf_float+0x250>
 8005568:	6823      	ldr	r3, [r4, #0]
 800556a:	079b      	lsls	r3, r3, #30
 800556c:	f100 8103 	bmi.w	8005776 <_printf_float+0x44a>
 8005570:	68e0      	ldr	r0, [r4, #12]
 8005572:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005574:	4298      	cmp	r0, r3
 8005576:	bfb8      	it	lt
 8005578:	4618      	movlt	r0, r3
 800557a:	e734      	b.n	80053e6 <_printf_float+0xba>
 800557c:	2301      	movs	r3, #1
 800557e:	4652      	mov	r2, sl
 8005580:	4631      	mov	r1, r6
 8005582:	4628      	mov	r0, r5
 8005584:	47b8      	blx	r7
 8005586:	3001      	adds	r0, #1
 8005588:	f43f af2b 	beq.w	80053e2 <_printf_float+0xb6>
 800558c:	f109 0901 	add.w	r9, r9, #1
 8005590:	e7e8      	b.n	8005564 <_printf_float+0x238>
 8005592:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005594:	2b00      	cmp	r3, #0
 8005596:	dc39      	bgt.n	800560c <_printf_float+0x2e0>
 8005598:	4a1b      	ldr	r2, [pc, #108]	@ (8005608 <_printf_float+0x2dc>)
 800559a:	2301      	movs	r3, #1
 800559c:	4631      	mov	r1, r6
 800559e:	4628      	mov	r0, r5
 80055a0:	47b8      	blx	r7
 80055a2:	3001      	adds	r0, #1
 80055a4:	f43f af1d 	beq.w	80053e2 <_printf_float+0xb6>
 80055a8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80055ac:	ea59 0303 	orrs.w	r3, r9, r3
 80055b0:	d102      	bne.n	80055b8 <_printf_float+0x28c>
 80055b2:	6823      	ldr	r3, [r4, #0]
 80055b4:	07d9      	lsls	r1, r3, #31
 80055b6:	d5d7      	bpl.n	8005568 <_printf_float+0x23c>
 80055b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055bc:	4631      	mov	r1, r6
 80055be:	4628      	mov	r0, r5
 80055c0:	47b8      	blx	r7
 80055c2:	3001      	adds	r0, #1
 80055c4:	f43f af0d 	beq.w	80053e2 <_printf_float+0xb6>
 80055c8:	f04f 0a00 	mov.w	sl, #0
 80055cc:	f104 0b1a 	add.w	fp, r4, #26
 80055d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055d2:	425b      	negs	r3, r3
 80055d4:	4553      	cmp	r3, sl
 80055d6:	dc01      	bgt.n	80055dc <_printf_float+0x2b0>
 80055d8:	464b      	mov	r3, r9
 80055da:	e793      	b.n	8005504 <_printf_float+0x1d8>
 80055dc:	2301      	movs	r3, #1
 80055de:	465a      	mov	r2, fp
 80055e0:	4631      	mov	r1, r6
 80055e2:	4628      	mov	r0, r5
 80055e4:	47b8      	blx	r7
 80055e6:	3001      	adds	r0, #1
 80055e8:	f43f aefb 	beq.w	80053e2 <_printf_float+0xb6>
 80055ec:	f10a 0a01 	add.w	sl, sl, #1
 80055f0:	e7ee      	b.n	80055d0 <_printf_float+0x2a4>
 80055f2:	bf00      	nop
 80055f4:	7fefffff 	.word	0x7fefffff
 80055f8:	08009ba0 	.word	0x08009ba0
 80055fc:	08009ba4 	.word	0x08009ba4
 8005600:	08009ba8 	.word	0x08009ba8
 8005604:	08009bac 	.word	0x08009bac
 8005608:	08009bb0 	.word	0x08009bb0
 800560c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800560e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005612:	4553      	cmp	r3, sl
 8005614:	bfa8      	it	ge
 8005616:	4653      	movge	r3, sl
 8005618:	2b00      	cmp	r3, #0
 800561a:	4699      	mov	r9, r3
 800561c:	dc36      	bgt.n	800568c <_printf_float+0x360>
 800561e:	f04f 0b00 	mov.w	fp, #0
 8005622:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005626:	f104 021a 	add.w	r2, r4, #26
 800562a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800562c:	9306      	str	r3, [sp, #24]
 800562e:	eba3 0309 	sub.w	r3, r3, r9
 8005632:	455b      	cmp	r3, fp
 8005634:	dc31      	bgt.n	800569a <_printf_float+0x36e>
 8005636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005638:	459a      	cmp	sl, r3
 800563a:	dc3a      	bgt.n	80056b2 <_printf_float+0x386>
 800563c:	6823      	ldr	r3, [r4, #0]
 800563e:	07da      	lsls	r2, r3, #31
 8005640:	d437      	bmi.n	80056b2 <_printf_float+0x386>
 8005642:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005644:	ebaa 0903 	sub.w	r9, sl, r3
 8005648:	9b06      	ldr	r3, [sp, #24]
 800564a:	ebaa 0303 	sub.w	r3, sl, r3
 800564e:	4599      	cmp	r9, r3
 8005650:	bfa8      	it	ge
 8005652:	4699      	movge	r9, r3
 8005654:	f1b9 0f00 	cmp.w	r9, #0
 8005658:	dc33      	bgt.n	80056c2 <_printf_float+0x396>
 800565a:	f04f 0800 	mov.w	r8, #0
 800565e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005662:	f104 0b1a 	add.w	fp, r4, #26
 8005666:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005668:	ebaa 0303 	sub.w	r3, sl, r3
 800566c:	eba3 0309 	sub.w	r3, r3, r9
 8005670:	4543      	cmp	r3, r8
 8005672:	f77f af79 	ble.w	8005568 <_printf_float+0x23c>
 8005676:	2301      	movs	r3, #1
 8005678:	465a      	mov	r2, fp
 800567a:	4631      	mov	r1, r6
 800567c:	4628      	mov	r0, r5
 800567e:	47b8      	blx	r7
 8005680:	3001      	adds	r0, #1
 8005682:	f43f aeae 	beq.w	80053e2 <_printf_float+0xb6>
 8005686:	f108 0801 	add.w	r8, r8, #1
 800568a:	e7ec      	b.n	8005666 <_printf_float+0x33a>
 800568c:	4642      	mov	r2, r8
 800568e:	4631      	mov	r1, r6
 8005690:	4628      	mov	r0, r5
 8005692:	47b8      	blx	r7
 8005694:	3001      	adds	r0, #1
 8005696:	d1c2      	bne.n	800561e <_printf_float+0x2f2>
 8005698:	e6a3      	b.n	80053e2 <_printf_float+0xb6>
 800569a:	2301      	movs	r3, #1
 800569c:	4631      	mov	r1, r6
 800569e:	4628      	mov	r0, r5
 80056a0:	9206      	str	r2, [sp, #24]
 80056a2:	47b8      	blx	r7
 80056a4:	3001      	adds	r0, #1
 80056a6:	f43f ae9c 	beq.w	80053e2 <_printf_float+0xb6>
 80056aa:	9a06      	ldr	r2, [sp, #24]
 80056ac:	f10b 0b01 	add.w	fp, fp, #1
 80056b0:	e7bb      	b.n	800562a <_printf_float+0x2fe>
 80056b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056b6:	4631      	mov	r1, r6
 80056b8:	4628      	mov	r0, r5
 80056ba:	47b8      	blx	r7
 80056bc:	3001      	adds	r0, #1
 80056be:	d1c0      	bne.n	8005642 <_printf_float+0x316>
 80056c0:	e68f      	b.n	80053e2 <_printf_float+0xb6>
 80056c2:	9a06      	ldr	r2, [sp, #24]
 80056c4:	464b      	mov	r3, r9
 80056c6:	4442      	add	r2, r8
 80056c8:	4631      	mov	r1, r6
 80056ca:	4628      	mov	r0, r5
 80056cc:	47b8      	blx	r7
 80056ce:	3001      	adds	r0, #1
 80056d0:	d1c3      	bne.n	800565a <_printf_float+0x32e>
 80056d2:	e686      	b.n	80053e2 <_printf_float+0xb6>
 80056d4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80056d8:	f1ba 0f01 	cmp.w	sl, #1
 80056dc:	dc01      	bgt.n	80056e2 <_printf_float+0x3b6>
 80056de:	07db      	lsls	r3, r3, #31
 80056e0:	d536      	bpl.n	8005750 <_printf_float+0x424>
 80056e2:	2301      	movs	r3, #1
 80056e4:	4642      	mov	r2, r8
 80056e6:	4631      	mov	r1, r6
 80056e8:	4628      	mov	r0, r5
 80056ea:	47b8      	blx	r7
 80056ec:	3001      	adds	r0, #1
 80056ee:	f43f ae78 	beq.w	80053e2 <_printf_float+0xb6>
 80056f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056f6:	4631      	mov	r1, r6
 80056f8:	4628      	mov	r0, r5
 80056fa:	47b8      	blx	r7
 80056fc:	3001      	adds	r0, #1
 80056fe:	f43f ae70 	beq.w	80053e2 <_printf_float+0xb6>
 8005702:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005706:	2200      	movs	r2, #0
 8005708:	2300      	movs	r3, #0
 800570a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800570e:	f7fb f9db 	bl	8000ac8 <__aeabi_dcmpeq>
 8005712:	b9c0      	cbnz	r0, 8005746 <_printf_float+0x41a>
 8005714:	4653      	mov	r3, sl
 8005716:	f108 0201 	add.w	r2, r8, #1
 800571a:	4631      	mov	r1, r6
 800571c:	4628      	mov	r0, r5
 800571e:	47b8      	blx	r7
 8005720:	3001      	adds	r0, #1
 8005722:	d10c      	bne.n	800573e <_printf_float+0x412>
 8005724:	e65d      	b.n	80053e2 <_printf_float+0xb6>
 8005726:	2301      	movs	r3, #1
 8005728:	465a      	mov	r2, fp
 800572a:	4631      	mov	r1, r6
 800572c:	4628      	mov	r0, r5
 800572e:	47b8      	blx	r7
 8005730:	3001      	adds	r0, #1
 8005732:	f43f ae56 	beq.w	80053e2 <_printf_float+0xb6>
 8005736:	f108 0801 	add.w	r8, r8, #1
 800573a:	45d0      	cmp	r8, sl
 800573c:	dbf3      	blt.n	8005726 <_printf_float+0x3fa>
 800573e:	464b      	mov	r3, r9
 8005740:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005744:	e6df      	b.n	8005506 <_printf_float+0x1da>
 8005746:	f04f 0800 	mov.w	r8, #0
 800574a:	f104 0b1a 	add.w	fp, r4, #26
 800574e:	e7f4      	b.n	800573a <_printf_float+0x40e>
 8005750:	2301      	movs	r3, #1
 8005752:	4642      	mov	r2, r8
 8005754:	e7e1      	b.n	800571a <_printf_float+0x3ee>
 8005756:	2301      	movs	r3, #1
 8005758:	464a      	mov	r2, r9
 800575a:	4631      	mov	r1, r6
 800575c:	4628      	mov	r0, r5
 800575e:	47b8      	blx	r7
 8005760:	3001      	adds	r0, #1
 8005762:	f43f ae3e 	beq.w	80053e2 <_printf_float+0xb6>
 8005766:	f108 0801 	add.w	r8, r8, #1
 800576a:	68e3      	ldr	r3, [r4, #12]
 800576c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800576e:	1a5b      	subs	r3, r3, r1
 8005770:	4543      	cmp	r3, r8
 8005772:	dcf0      	bgt.n	8005756 <_printf_float+0x42a>
 8005774:	e6fc      	b.n	8005570 <_printf_float+0x244>
 8005776:	f04f 0800 	mov.w	r8, #0
 800577a:	f104 0919 	add.w	r9, r4, #25
 800577e:	e7f4      	b.n	800576a <_printf_float+0x43e>

08005780 <_printf_common>:
 8005780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005784:	4616      	mov	r6, r2
 8005786:	4698      	mov	r8, r3
 8005788:	688a      	ldr	r2, [r1, #8]
 800578a:	690b      	ldr	r3, [r1, #16]
 800578c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005790:	4293      	cmp	r3, r2
 8005792:	bfb8      	it	lt
 8005794:	4613      	movlt	r3, r2
 8005796:	6033      	str	r3, [r6, #0]
 8005798:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800579c:	4607      	mov	r7, r0
 800579e:	460c      	mov	r4, r1
 80057a0:	b10a      	cbz	r2, 80057a6 <_printf_common+0x26>
 80057a2:	3301      	adds	r3, #1
 80057a4:	6033      	str	r3, [r6, #0]
 80057a6:	6823      	ldr	r3, [r4, #0]
 80057a8:	0699      	lsls	r1, r3, #26
 80057aa:	bf42      	ittt	mi
 80057ac:	6833      	ldrmi	r3, [r6, #0]
 80057ae:	3302      	addmi	r3, #2
 80057b0:	6033      	strmi	r3, [r6, #0]
 80057b2:	6825      	ldr	r5, [r4, #0]
 80057b4:	f015 0506 	ands.w	r5, r5, #6
 80057b8:	d106      	bne.n	80057c8 <_printf_common+0x48>
 80057ba:	f104 0a19 	add.w	sl, r4, #25
 80057be:	68e3      	ldr	r3, [r4, #12]
 80057c0:	6832      	ldr	r2, [r6, #0]
 80057c2:	1a9b      	subs	r3, r3, r2
 80057c4:	42ab      	cmp	r3, r5
 80057c6:	dc26      	bgt.n	8005816 <_printf_common+0x96>
 80057c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80057cc:	6822      	ldr	r2, [r4, #0]
 80057ce:	3b00      	subs	r3, #0
 80057d0:	bf18      	it	ne
 80057d2:	2301      	movne	r3, #1
 80057d4:	0692      	lsls	r2, r2, #26
 80057d6:	d42b      	bmi.n	8005830 <_printf_common+0xb0>
 80057d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80057dc:	4641      	mov	r1, r8
 80057de:	4638      	mov	r0, r7
 80057e0:	47c8      	blx	r9
 80057e2:	3001      	adds	r0, #1
 80057e4:	d01e      	beq.n	8005824 <_printf_common+0xa4>
 80057e6:	6823      	ldr	r3, [r4, #0]
 80057e8:	6922      	ldr	r2, [r4, #16]
 80057ea:	f003 0306 	and.w	r3, r3, #6
 80057ee:	2b04      	cmp	r3, #4
 80057f0:	bf02      	ittt	eq
 80057f2:	68e5      	ldreq	r5, [r4, #12]
 80057f4:	6833      	ldreq	r3, [r6, #0]
 80057f6:	1aed      	subeq	r5, r5, r3
 80057f8:	68a3      	ldr	r3, [r4, #8]
 80057fa:	bf0c      	ite	eq
 80057fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005800:	2500      	movne	r5, #0
 8005802:	4293      	cmp	r3, r2
 8005804:	bfc4      	itt	gt
 8005806:	1a9b      	subgt	r3, r3, r2
 8005808:	18ed      	addgt	r5, r5, r3
 800580a:	2600      	movs	r6, #0
 800580c:	341a      	adds	r4, #26
 800580e:	42b5      	cmp	r5, r6
 8005810:	d11a      	bne.n	8005848 <_printf_common+0xc8>
 8005812:	2000      	movs	r0, #0
 8005814:	e008      	b.n	8005828 <_printf_common+0xa8>
 8005816:	2301      	movs	r3, #1
 8005818:	4652      	mov	r2, sl
 800581a:	4641      	mov	r1, r8
 800581c:	4638      	mov	r0, r7
 800581e:	47c8      	blx	r9
 8005820:	3001      	adds	r0, #1
 8005822:	d103      	bne.n	800582c <_printf_common+0xac>
 8005824:	f04f 30ff 	mov.w	r0, #4294967295
 8005828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800582c:	3501      	adds	r5, #1
 800582e:	e7c6      	b.n	80057be <_printf_common+0x3e>
 8005830:	18e1      	adds	r1, r4, r3
 8005832:	1c5a      	adds	r2, r3, #1
 8005834:	2030      	movs	r0, #48	@ 0x30
 8005836:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800583a:	4422      	add	r2, r4
 800583c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005840:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005844:	3302      	adds	r3, #2
 8005846:	e7c7      	b.n	80057d8 <_printf_common+0x58>
 8005848:	2301      	movs	r3, #1
 800584a:	4622      	mov	r2, r4
 800584c:	4641      	mov	r1, r8
 800584e:	4638      	mov	r0, r7
 8005850:	47c8      	blx	r9
 8005852:	3001      	adds	r0, #1
 8005854:	d0e6      	beq.n	8005824 <_printf_common+0xa4>
 8005856:	3601      	adds	r6, #1
 8005858:	e7d9      	b.n	800580e <_printf_common+0x8e>
	...

0800585c <_printf_i>:
 800585c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005860:	7e0f      	ldrb	r7, [r1, #24]
 8005862:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005864:	2f78      	cmp	r7, #120	@ 0x78
 8005866:	4691      	mov	r9, r2
 8005868:	4680      	mov	r8, r0
 800586a:	460c      	mov	r4, r1
 800586c:	469a      	mov	sl, r3
 800586e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005872:	d807      	bhi.n	8005884 <_printf_i+0x28>
 8005874:	2f62      	cmp	r7, #98	@ 0x62
 8005876:	d80a      	bhi.n	800588e <_printf_i+0x32>
 8005878:	2f00      	cmp	r7, #0
 800587a:	f000 80d2 	beq.w	8005a22 <_printf_i+0x1c6>
 800587e:	2f58      	cmp	r7, #88	@ 0x58
 8005880:	f000 80b9 	beq.w	80059f6 <_printf_i+0x19a>
 8005884:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005888:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800588c:	e03a      	b.n	8005904 <_printf_i+0xa8>
 800588e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005892:	2b15      	cmp	r3, #21
 8005894:	d8f6      	bhi.n	8005884 <_printf_i+0x28>
 8005896:	a101      	add	r1, pc, #4	@ (adr r1, 800589c <_printf_i+0x40>)
 8005898:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800589c:	080058f5 	.word	0x080058f5
 80058a0:	08005909 	.word	0x08005909
 80058a4:	08005885 	.word	0x08005885
 80058a8:	08005885 	.word	0x08005885
 80058ac:	08005885 	.word	0x08005885
 80058b0:	08005885 	.word	0x08005885
 80058b4:	08005909 	.word	0x08005909
 80058b8:	08005885 	.word	0x08005885
 80058bc:	08005885 	.word	0x08005885
 80058c0:	08005885 	.word	0x08005885
 80058c4:	08005885 	.word	0x08005885
 80058c8:	08005a09 	.word	0x08005a09
 80058cc:	08005933 	.word	0x08005933
 80058d0:	080059c3 	.word	0x080059c3
 80058d4:	08005885 	.word	0x08005885
 80058d8:	08005885 	.word	0x08005885
 80058dc:	08005a2b 	.word	0x08005a2b
 80058e0:	08005885 	.word	0x08005885
 80058e4:	08005933 	.word	0x08005933
 80058e8:	08005885 	.word	0x08005885
 80058ec:	08005885 	.word	0x08005885
 80058f0:	080059cb 	.word	0x080059cb
 80058f4:	6833      	ldr	r3, [r6, #0]
 80058f6:	1d1a      	adds	r2, r3, #4
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	6032      	str	r2, [r6, #0]
 80058fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005900:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005904:	2301      	movs	r3, #1
 8005906:	e09d      	b.n	8005a44 <_printf_i+0x1e8>
 8005908:	6833      	ldr	r3, [r6, #0]
 800590a:	6820      	ldr	r0, [r4, #0]
 800590c:	1d19      	adds	r1, r3, #4
 800590e:	6031      	str	r1, [r6, #0]
 8005910:	0606      	lsls	r6, r0, #24
 8005912:	d501      	bpl.n	8005918 <_printf_i+0xbc>
 8005914:	681d      	ldr	r5, [r3, #0]
 8005916:	e003      	b.n	8005920 <_printf_i+0xc4>
 8005918:	0645      	lsls	r5, r0, #25
 800591a:	d5fb      	bpl.n	8005914 <_printf_i+0xb8>
 800591c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005920:	2d00      	cmp	r5, #0
 8005922:	da03      	bge.n	800592c <_printf_i+0xd0>
 8005924:	232d      	movs	r3, #45	@ 0x2d
 8005926:	426d      	negs	r5, r5
 8005928:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800592c:	4859      	ldr	r0, [pc, #356]	@ (8005a94 <_printf_i+0x238>)
 800592e:	230a      	movs	r3, #10
 8005930:	e011      	b.n	8005956 <_printf_i+0xfa>
 8005932:	6821      	ldr	r1, [r4, #0]
 8005934:	6833      	ldr	r3, [r6, #0]
 8005936:	0608      	lsls	r0, r1, #24
 8005938:	f853 5b04 	ldr.w	r5, [r3], #4
 800593c:	d402      	bmi.n	8005944 <_printf_i+0xe8>
 800593e:	0649      	lsls	r1, r1, #25
 8005940:	bf48      	it	mi
 8005942:	b2ad      	uxthmi	r5, r5
 8005944:	2f6f      	cmp	r7, #111	@ 0x6f
 8005946:	4853      	ldr	r0, [pc, #332]	@ (8005a94 <_printf_i+0x238>)
 8005948:	6033      	str	r3, [r6, #0]
 800594a:	bf14      	ite	ne
 800594c:	230a      	movne	r3, #10
 800594e:	2308      	moveq	r3, #8
 8005950:	2100      	movs	r1, #0
 8005952:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005956:	6866      	ldr	r6, [r4, #4]
 8005958:	60a6      	str	r6, [r4, #8]
 800595a:	2e00      	cmp	r6, #0
 800595c:	bfa2      	ittt	ge
 800595e:	6821      	ldrge	r1, [r4, #0]
 8005960:	f021 0104 	bicge.w	r1, r1, #4
 8005964:	6021      	strge	r1, [r4, #0]
 8005966:	b90d      	cbnz	r5, 800596c <_printf_i+0x110>
 8005968:	2e00      	cmp	r6, #0
 800596a:	d04b      	beq.n	8005a04 <_printf_i+0x1a8>
 800596c:	4616      	mov	r6, r2
 800596e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005972:	fb03 5711 	mls	r7, r3, r1, r5
 8005976:	5dc7      	ldrb	r7, [r0, r7]
 8005978:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800597c:	462f      	mov	r7, r5
 800597e:	42bb      	cmp	r3, r7
 8005980:	460d      	mov	r5, r1
 8005982:	d9f4      	bls.n	800596e <_printf_i+0x112>
 8005984:	2b08      	cmp	r3, #8
 8005986:	d10b      	bne.n	80059a0 <_printf_i+0x144>
 8005988:	6823      	ldr	r3, [r4, #0]
 800598a:	07df      	lsls	r7, r3, #31
 800598c:	d508      	bpl.n	80059a0 <_printf_i+0x144>
 800598e:	6923      	ldr	r3, [r4, #16]
 8005990:	6861      	ldr	r1, [r4, #4]
 8005992:	4299      	cmp	r1, r3
 8005994:	bfde      	ittt	le
 8005996:	2330      	movle	r3, #48	@ 0x30
 8005998:	f806 3c01 	strble.w	r3, [r6, #-1]
 800599c:	f106 36ff 	addle.w	r6, r6, #4294967295
 80059a0:	1b92      	subs	r2, r2, r6
 80059a2:	6122      	str	r2, [r4, #16]
 80059a4:	f8cd a000 	str.w	sl, [sp]
 80059a8:	464b      	mov	r3, r9
 80059aa:	aa03      	add	r2, sp, #12
 80059ac:	4621      	mov	r1, r4
 80059ae:	4640      	mov	r0, r8
 80059b0:	f7ff fee6 	bl	8005780 <_printf_common>
 80059b4:	3001      	adds	r0, #1
 80059b6:	d14a      	bne.n	8005a4e <_printf_i+0x1f2>
 80059b8:	f04f 30ff 	mov.w	r0, #4294967295
 80059bc:	b004      	add	sp, #16
 80059be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059c2:	6823      	ldr	r3, [r4, #0]
 80059c4:	f043 0320 	orr.w	r3, r3, #32
 80059c8:	6023      	str	r3, [r4, #0]
 80059ca:	4833      	ldr	r0, [pc, #204]	@ (8005a98 <_printf_i+0x23c>)
 80059cc:	2778      	movs	r7, #120	@ 0x78
 80059ce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80059d2:	6823      	ldr	r3, [r4, #0]
 80059d4:	6831      	ldr	r1, [r6, #0]
 80059d6:	061f      	lsls	r7, r3, #24
 80059d8:	f851 5b04 	ldr.w	r5, [r1], #4
 80059dc:	d402      	bmi.n	80059e4 <_printf_i+0x188>
 80059de:	065f      	lsls	r7, r3, #25
 80059e0:	bf48      	it	mi
 80059e2:	b2ad      	uxthmi	r5, r5
 80059e4:	6031      	str	r1, [r6, #0]
 80059e6:	07d9      	lsls	r1, r3, #31
 80059e8:	bf44      	itt	mi
 80059ea:	f043 0320 	orrmi.w	r3, r3, #32
 80059ee:	6023      	strmi	r3, [r4, #0]
 80059f0:	b11d      	cbz	r5, 80059fa <_printf_i+0x19e>
 80059f2:	2310      	movs	r3, #16
 80059f4:	e7ac      	b.n	8005950 <_printf_i+0xf4>
 80059f6:	4827      	ldr	r0, [pc, #156]	@ (8005a94 <_printf_i+0x238>)
 80059f8:	e7e9      	b.n	80059ce <_printf_i+0x172>
 80059fa:	6823      	ldr	r3, [r4, #0]
 80059fc:	f023 0320 	bic.w	r3, r3, #32
 8005a00:	6023      	str	r3, [r4, #0]
 8005a02:	e7f6      	b.n	80059f2 <_printf_i+0x196>
 8005a04:	4616      	mov	r6, r2
 8005a06:	e7bd      	b.n	8005984 <_printf_i+0x128>
 8005a08:	6833      	ldr	r3, [r6, #0]
 8005a0a:	6825      	ldr	r5, [r4, #0]
 8005a0c:	6961      	ldr	r1, [r4, #20]
 8005a0e:	1d18      	adds	r0, r3, #4
 8005a10:	6030      	str	r0, [r6, #0]
 8005a12:	062e      	lsls	r6, r5, #24
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	d501      	bpl.n	8005a1c <_printf_i+0x1c0>
 8005a18:	6019      	str	r1, [r3, #0]
 8005a1a:	e002      	b.n	8005a22 <_printf_i+0x1c6>
 8005a1c:	0668      	lsls	r0, r5, #25
 8005a1e:	d5fb      	bpl.n	8005a18 <_printf_i+0x1bc>
 8005a20:	8019      	strh	r1, [r3, #0]
 8005a22:	2300      	movs	r3, #0
 8005a24:	6123      	str	r3, [r4, #16]
 8005a26:	4616      	mov	r6, r2
 8005a28:	e7bc      	b.n	80059a4 <_printf_i+0x148>
 8005a2a:	6833      	ldr	r3, [r6, #0]
 8005a2c:	1d1a      	adds	r2, r3, #4
 8005a2e:	6032      	str	r2, [r6, #0]
 8005a30:	681e      	ldr	r6, [r3, #0]
 8005a32:	6862      	ldr	r2, [r4, #4]
 8005a34:	2100      	movs	r1, #0
 8005a36:	4630      	mov	r0, r6
 8005a38:	f7fa fbca 	bl	80001d0 <memchr>
 8005a3c:	b108      	cbz	r0, 8005a42 <_printf_i+0x1e6>
 8005a3e:	1b80      	subs	r0, r0, r6
 8005a40:	6060      	str	r0, [r4, #4]
 8005a42:	6863      	ldr	r3, [r4, #4]
 8005a44:	6123      	str	r3, [r4, #16]
 8005a46:	2300      	movs	r3, #0
 8005a48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a4c:	e7aa      	b.n	80059a4 <_printf_i+0x148>
 8005a4e:	6923      	ldr	r3, [r4, #16]
 8005a50:	4632      	mov	r2, r6
 8005a52:	4649      	mov	r1, r9
 8005a54:	4640      	mov	r0, r8
 8005a56:	47d0      	blx	sl
 8005a58:	3001      	adds	r0, #1
 8005a5a:	d0ad      	beq.n	80059b8 <_printf_i+0x15c>
 8005a5c:	6823      	ldr	r3, [r4, #0]
 8005a5e:	079b      	lsls	r3, r3, #30
 8005a60:	d413      	bmi.n	8005a8a <_printf_i+0x22e>
 8005a62:	68e0      	ldr	r0, [r4, #12]
 8005a64:	9b03      	ldr	r3, [sp, #12]
 8005a66:	4298      	cmp	r0, r3
 8005a68:	bfb8      	it	lt
 8005a6a:	4618      	movlt	r0, r3
 8005a6c:	e7a6      	b.n	80059bc <_printf_i+0x160>
 8005a6e:	2301      	movs	r3, #1
 8005a70:	4632      	mov	r2, r6
 8005a72:	4649      	mov	r1, r9
 8005a74:	4640      	mov	r0, r8
 8005a76:	47d0      	blx	sl
 8005a78:	3001      	adds	r0, #1
 8005a7a:	d09d      	beq.n	80059b8 <_printf_i+0x15c>
 8005a7c:	3501      	adds	r5, #1
 8005a7e:	68e3      	ldr	r3, [r4, #12]
 8005a80:	9903      	ldr	r1, [sp, #12]
 8005a82:	1a5b      	subs	r3, r3, r1
 8005a84:	42ab      	cmp	r3, r5
 8005a86:	dcf2      	bgt.n	8005a6e <_printf_i+0x212>
 8005a88:	e7eb      	b.n	8005a62 <_printf_i+0x206>
 8005a8a:	2500      	movs	r5, #0
 8005a8c:	f104 0619 	add.w	r6, r4, #25
 8005a90:	e7f5      	b.n	8005a7e <_printf_i+0x222>
 8005a92:	bf00      	nop
 8005a94:	08009bb2 	.word	0x08009bb2
 8005a98:	08009bc3 	.word	0x08009bc3

08005a9c <_scanf_float>:
 8005a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa0:	b087      	sub	sp, #28
 8005aa2:	4617      	mov	r7, r2
 8005aa4:	9303      	str	r3, [sp, #12]
 8005aa6:	688b      	ldr	r3, [r1, #8]
 8005aa8:	1e5a      	subs	r2, r3, #1
 8005aaa:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005aae:	bf81      	itttt	hi
 8005ab0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005ab4:	eb03 0b05 	addhi.w	fp, r3, r5
 8005ab8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005abc:	608b      	strhi	r3, [r1, #8]
 8005abe:	680b      	ldr	r3, [r1, #0]
 8005ac0:	460a      	mov	r2, r1
 8005ac2:	f04f 0500 	mov.w	r5, #0
 8005ac6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005aca:	f842 3b1c 	str.w	r3, [r2], #28
 8005ace:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005ad2:	4680      	mov	r8, r0
 8005ad4:	460c      	mov	r4, r1
 8005ad6:	bf98      	it	ls
 8005ad8:	f04f 0b00 	movls.w	fp, #0
 8005adc:	9201      	str	r2, [sp, #4]
 8005ade:	4616      	mov	r6, r2
 8005ae0:	46aa      	mov	sl, r5
 8005ae2:	46a9      	mov	r9, r5
 8005ae4:	9502      	str	r5, [sp, #8]
 8005ae6:	68a2      	ldr	r2, [r4, #8]
 8005ae8:	b152      	cbz	r2, 8005b00 <_scanf_float+0x64>
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	2b4e      	cmp	r3, #78	@ 0x4e
 8005af0:	d864      	bhi.n	8005bbc <_scanf_float+0x120>
 8005af2:	2b40      	cmp	r3, #64	@ 0x40
 8005af4:	d83c      	bhi.n	8005b70 <_scanf_float+0xd4>
 8005af6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005afa:	b2c8      	uxtb	r0, r1
 8005afc:	280e      	cmp	r0, #14
 8005afe:	d93a      	bls.n	8005b76 <_scanf_float+0xda>
 8005b00:	f1b9 0f00 	cmp.w	r9, #0
 8005b04:	d003      	beq.n	8005b0e <_scanf_float+0x72>
 8005b06:	6823      	ldr	r3, [r4, #0]
 8005b08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b0c:	6023      	str	r3, [r4, #0]
 8005b0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b12:	f1ba 0f01 	cmp.w	sl, #1
 8005b16:	f200 8117 	bhi.w	8005d48 <_scanf_float+0x2ac>
 8005b1a:	9b01      	ldr	r3, [sp, #4]
 8005b1c:	429e      	cmp	r6, r3
 8005b1e:	f200 8108 	bhi.w	8005d32 <_scanf_float+0x296>
 8005b22:	2001      	movs	r0, #1
 8005b24:	b007      	add	sp, #28
 8005b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b2a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005b2e:	2a0d      	cmp	r2, #13
 8005b30:	d8e6      	bhi.n	8005b00 <_scanf_float+0x64>
 8005b32:	a101      	add	r1, pc, #4	@ (adr r1, 8005b38 <_scanf_float+0x9c>)
 8005b34:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005b38:	08005c7f 	.word	0x08005c7f
 8005b3c:	08005b01 	.word	0x08005b01
 8005b40:	08005b01 	.word	0x08005b01
 8005b44:	08005b01 	.word	0x08005b01
 8005b48:	08005cdf 	.word	0x08005cdf
 8005b4c:	08005cb7 	.word	0x08005cb7
 8005b50:	08005b01 	.word	0x08005b01
 8005b54:	08005b01 	.word	0x08005b01
 8005b58:	08005c8d 	.word	0x08005c8d
 8005b5c:	08005b01 	.word	0x08005b01
 8005b60:	08005b01 	.word	0x08005b01
 8005b64:	08005b01 	.word	0x08005b01
 8005b68:	08005b01 	.word	0x08005b01
 8005b6c:	08005c45 	.word	0x08005c45
 8005b70:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005b74:	e7db      	b.n	8005b2e <_scanf_float+0x92>
 8005b76:	290e      	cmp	r1, #14
 8005b78:	d8c2      	bhi.n	8005b00 <_scanf_float+0x64>
 8005b7a:	a001      	add	r0, pc, #4	@ (adr r0, 8005b80 <_scanf_float+0xe4>)
 8005b7c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005b80:	08005c35 	.word	0x08005c35
 8005b84:	08005b01 	.word	0x08005b01
 8005b88:	08005c35 	.word	0x08005c35
 8005b8c:	08005ccb 	.word	0x08005ccb
 8005b90:	08005b01 	.word	0x08005b01
 8005b94:	08005bdd 	.word	0x08005bdd
 8005b98:	08005c1b 	.word	0x08005c1b
 8005b9c:	08005c1b 	.word	0x08005c1b
 8005ba0:	08005c1b 	.word	0x08005c1b
 8005ba4:	08005c1b 	.word	0x08005c1b
 8005ba8:	08005c1b 	.word	0x08005c1b
 8005bac:	08005c1b 	.word	0x08005c1b
 8005bb0:	08005c1b 	.word	0x08005c1b
 8005bb4:	08005c1b 	.word	0x08005c1b
 8005bb8:	08005c1b 	.word	0x08005c1b
 8005bbc:	2b6e      	cmp	r3, #110	@ 0x6e
 8005bbe:	d809      	bhi.n	8005bd4 <_scanf_float+0x138>
 8005bc0:	2b60      	cmp	r3, #96	@ 0x60
 8005bc2:	d8b2      	bhi.n	8005b2a <_scanf_float+0x8e>
 8005bc4:	2b54      	cmp	r3, #84	@ 0x54
 8005bc6:	d07b      	beq.n	8005cc0 <_scanf_float+0x224>
 8005bc8:	2b59      	cmp	r3, #89	@ 0x59
 8005bca:	d199      	bne.n	8005b00 <_scanf_float+0x64>
 8005bcc:	2d07      	cmp	r5, #7
 8005bce:	d197      	bne.n	8005b00 <_scanf_float+0x64>
 8005bd0:	2508      	movs	r5, #8
 8005bd2:	e02c      	b.n	8005c2e <_scanf_float+0x192>
 8005bd4:	2b74      	cmp	r3, #116	@ 0x74
 8005bd6:	d073      	beq.n	8005cc0 <_scanf_float+0x224>
 8005bd8:	2b79      	cmp	r3, #121	@ 0x79
 8005bda:	e7f6      	b.n	8005bca <_scanf_float+0x12e>
 8005bdc:	6821      	ldr	r1, [r4, #0]
 8005bde:	05c8      	lsls	r0, r1, #23
 8005be0:	d51b      	bpl.n	8005c1a <_scanf_float+0x17e>
 8005be2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005be6:	6021      	str	r1, [r4, #0]
 8005be8:	f109 0901 	add.w	r9, r9, #1
 8005bec:	f1bb 0f00 	cmp.w	fp, #0
 8005bf0:	d003      	beq.n	8005bfa <_scanf_float+0x15e>
 8005bf2:	3201      	adds	r2, #1
 8005bf4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005bf8:	60a2      	str	r2, [r4, #8]
 8005bfa:	68a3      	ldr	r3, [r4, #8]
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	60a3      	str	r3, [r4, #8]
 8005c00:	6923      	ldr	r3, [r4, #16]
 8005c02:	3301      	adds	r3, #1
 8005c04:	6123      	str	r3, [r4, #16]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	607b      	str	r3, [r7, #4]
 8005c0e:	f340 8087 	ble.w	8005d20 <_scanf_float+0x284>
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	3301      	adds	r3, #1
 8005c16:	603b      	str	r3, [r7, #0]
 8005c18:	e765      	b.n	8005ae6 <_scanf_float+0x4a>
 8005c1a:	eb1a 0105 	adds.w	r1, sl, r5
 8005c1e:	f47f af6f 	bne.w	8005b00 <_scanf_float+0x64>
 8005c22:	6822      	ldr	r2, [r4, #0]
 8005c24:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005c28:	6022      	str	r2, [r4, #0]
 8005c2a:	460d      	mov	r5, r1
 8005c2c:	468a      	mov	sl, r1
 8005c2e:	f806 3b01 	strb.w	r3, [r6], #1
 8005c32:	e7e2      	b.n	8005bfa <_scanf_float+0x15e>
 8005c34:	6822      	ldr	r2, [r4, #0]
 8005c36:	0610      	lsls	r0, r2, #24
 8005c38:	f57f af62 	bpl.w	8005b00 <_scanf_float+0x64>
 8005c3c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005c40:	6022      	str	r2, [r4, #0]
 8005c42:	e7f4      	b.n	8005c2e <_scanf_float+0x192>
 8005c44:	f1ba 0f00 	cmp.w	sl, #0
 8005c48:	d10e      	bne.n	8005c68 <_scanf_float+0x1cc>
 8005c4a:	f1b9 0f00 	cmp.w	r9, #0
 8005c4e:	d10e      	bne.n	8005c6e <_scanf_float+0x1d2>
 8005c50:	6822      	ldr	r2, [r4, #0]
 8005c52:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005c56:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005c5a:	d108      	bne.n	8005c6e <_scanf_float+0x1d2>
 8005c5c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005c60:	6022      	str	r2, [r4, #0]
 8005c62:	f04f 0a01 	mov.w	sl, #1
 8005c66:	e7e2      	b.n	8005c2e <_scanf_float+0x192>
 8005c68:	f1ba 0f02 	cmp.w	sl, #2
 8005c6c:	d055      	beq.n	8005d1a <_scanf_float+0x27e>
 8005c6e:	2d01      	cmp	r5, #1
 8005c70:	d002      	beq.n	8005c78 <_scanf_float+0x1dc>
 8005c72:	2d04      	cmp	r5, #4
 8005c74:	f47f af44 	bne.w	8005b00 <_scanf_float+0x64>
 8005c78:	3501      	adds	r5, #1
 8005c7a:	b2ed      	uxtb	r5, r5
 8005c7c:	e7d7      	b.n	8005c2e <_scanf_float+0x192>
 8005c7e:	f1ba 0f01 	cmp.w	sl, #1
 8005c82:	f47f af3d 	bne.w	8005b00 <_scanf_float+0x64>
 8005c86:	f04f 0a02 	mov.w	sl, #2
 8005c8a:	e7d0      	b.n	8005c2e <_scanf_float+0x192>
 8005c8c:	b97d      	cbnz	r5, 8005cae <_scanf_float+0x212>
 8005c8e:	f1b9 0f00 	cmp.w	r9, #0
 8005c92:	f47f af38 	bne.w	8005b06 <_scanf_float+0x6a>
 8005c96:	6822      	ldr	r2, [r4, #0]
 8005c98:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005c9c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005ca0:	f040 8108 	bne.w	8005eb4 <_scanf_float+0x418>
 8005ca4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005ca8:	6022      	str	r2, [r4, #0]
 8005caa:	2501      	movs	r5, #1
 8005cac:	e7bf      	b.n	8005c2e <_scanf_float+0x192>
 8005cae:	2d03      	cmp	r5, #3
 8005cb0:	d0e2      	beq.n	8005c78 <_scanf_float+0x1dc>
 8005cb2:	2d05      	cmp	r5, #5
 8005cb4:	e7de      	b.n	8005c74 <_scanf_float+0x1d8>
 8005cb6:	2d02      	cmp	r5, #2
 8005cb8:	f47f af22 	bne.w	8005b00 <_scanf_float+0x64>
 8005cbc:	2503      	movs	r5, #3
 8005cbe:	e7b6      	b.n	8005c2e <_scanf_float+0x192>
 8005cc0:	2d06      	cmp	r5, #6
 8005cc2:	f47f af1d 	bne.w	8005b00 <_scanf_float+0x64>
 8005cc6:	2507      	movs	r5, #7
 8005cc8:	e7b1      	b.n	8005c2e <_scanf_float+0x192>
 8005cca:	6822      	ldr	r2, [r4, #0]
 8005ccc:	0591      	lsls	r1, r2, #22
 8005cce:	f57f af17 	bpl.w	8005b00 <_scanf_float+0x64>
 8005cd2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005cd6:	6022      	str	r2, [r4, #0]
 8005cd8:	f8cd 9008 	str.w	r9, [sp, #8]
 8005cdc:	e7a7      	b.n	8005c2e <_scanf_float+0x192>
 8005cde:	6822      	ldr	r2, [r4, #0]
 8005ce0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005ce4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005ce8:	d006      	beq.n	8005cf8 <_scanf_float+0x25c>
 8005cea:	0550      	lsls	r0, r2, #21
 8005cec:	f57f af08 	bpl.w	8005b00 <_scanf_float+0x64>
 8005cf0:	f1b9 0f00 	cmp.w	r9, #0
 8005cf4:	f000 80de 	beq.w	8005eb4 <_scanf_float+0x418>
 8005cf8:	0591      	lsls	r1, r2, #22
 8005cfa:	bf58      	it	pl
 8005cfc:	9902      	ldrpl	r1, [sp, #8]
 8005cfe:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005d02:	bf58      	it	pl
 8005d04:	eba9 0101 	subpl.w	r1, r9, r1
 8005d08:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005d0c:	bf58      	it	pl
 8005d0e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005d12:	6022      	str	r2, [r4, #0]
 8005d14:	f04f 0900 	mov.w	r9, #0
 8005d18:	e789      	b.n	8005c2e <_scanf_float+0x192>
 8005d1a:	f04f 0a03 	mov.w	sl, #3
 8005d1e:	e786      	b.n	8005c2e <_scanf_float+0x192>
 8005d20:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005d24:	4639      	mov	r1, r7
 8005d26:	4640      	mov	r0, r8
 8005d28:	4798      	blx	r3
 8005d2a:	2800      	cmp	r0, #0
 8005d2c:	f43f aedb 	beq.w	8005ae6 <_scanf_float+0x4a>
 8005d30:	e6e6      	b.n	8005b00 <_scanf_float+0x64>
 8005d32:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005d36:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005d3a:	463a      	mov	r2, r7
 8005d3c:	4640      	mov	r0, r8
 8005d3e:	4798      	blx	r3
 8005d40:	6923      	ldr	r3, [r4, #16]
 8005d42:	3b01      	subs	r3, #1
 8005d44:	6123      	str	r3, [r4, #16]
 8005d46:	e6e8      	b.n	8005b1a <_scanf_float+0x7e>
 8005d48:	1e6b      	subs	r3, r5, #1
 8005d4a:	2b06      	cmp	r3, #6
 8005d4c:	d824      	bhi.n	8005d98 <_scanf_float+0x2fc>
 8005d4e:	2d02      	cmp	r5, #2
 8005d50:	d836      	bhi.n	8005dc0 <_scanf_float+0x324>
 8005d52:	9b01      	ldr	r3, [sp, #4]
 8005d54:	429e      	cmp	r6, r3
 8005d56:	f67f aee4 	bls.w	8005b22 <_scanf_float+0x86>
 8005d5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005d5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005d62:	463a      	mov	r2, r7
 8005d64:	4640      	mov	r0, r8
 8005d66:	4798      	blx	r3
 8005d68:	6923      	ldr	r3, [r4, #16]
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	6123      	str	r3, [r4, #16]
 8005d6e:	e7f0      	b.n	8005d52 <_scanf_float+0x2b6>
 8005d70:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005d74:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005d78:	463a      	mov	r2, r7
 8005d7a:	4640      	mov	r0, r8
 8005d7c:	4798      	blx	r3
 8005d7e:	6923      	ldr	r3, [r4, #16]
 8005d80:	3b01      	subs	r3, #1
 8005d82:	6123      	str	r3, [r4, #16]
 8005d84:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d88:	fa5f fa8a 	uxtb.w	sl, sl
 8005d8c:	f1ba 0f02 	cmp.w	sl, #2
 8005d90:	d1ee      	bne.n	8005d70 <_scanf_float+0x2d4>
 8005d92:	3d03      	subs	r5, #3
 8005d94:	b2ed      	uxtb	r5, r5
 8005d96:	1b76      	subs	r6, r6, r5
 8005d98:	6823      	ldr	r3, [r4, #0]
 8005d9a:	05da      	lsls	r2, r3, #23
 8005d9c:	d530      	bpl.n	8005e00 <_scanf_float+0x364>
 8005d9e:	055b      	lsls	r3, r3, #21
 8005da0:	d511      	bpl.n	8005dc6 <_scanf_float+0x32a>
 8005da2:	9b01      	ldr	r3, [sp, #4]
 8005da4:	429e      	cmp	r6, r3
 8005da6:	f67f aebc 	bls.w	8005b22 <_scanf_float+0x86>
 8005daa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005dae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005db2:	463a      	mov	r2, r7
 8005db4:	4640      	mov	r0, r8
 8005db6:	4798      	blx	r3
 8005db8:	6923      	ldr	r3, [r4, #16]
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	6123      	str	r3, [r4, #16]
 8005dbe:	e7f0      	b.n	8005da2 <_scanf_float+0x306>
 8005dc0:	46aa      	mov	sl, r5
 8005dc2:	46b3      	mov	fp, r6
 8005dc4:	e7de      	b.n	8005d84 <_scanf_float+0x2e8>
 8005dc6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005dca:	6923      	ldr	r3, [r4, #16]
 8005dcc:	2965      	cmp	r1, #101	@ 0x65
 8005dce:	f103 33ff 	add.w	r3, r3, #4294967295
 8005dd2:	f106 35ff 	add.w	r5, r6, #4294967295
 8005dd6:	6123      	str	r3, [r4, #16]
 8005dd8:	d00c      	beq.n	8005df4 <_scanf_float+0x358>
 8005dda:	2945      	cmp	r1, #69	@ 0x45
 8005ddc:	d00a      	beq.n	8005df4 <_scanf_float+0x358>
 8005dde:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005de2:	463a      	mov	r2, r7
 8005de4:	4640      	mov	r0, r8
 8005de6:	4798      	blx	r3
 8005de8:	6923      	ldr	r3, [r4, #16]
 8005dea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005dee:	3b01      	subs	r3, #1
 8005df0:	1eb5      	subs	r5, r6, #2
 8005df2:	6123      	str	r3, [r4, #16]
 8005df4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005df8:	463a      	mov	r2, r7
 8005dfa:	4640      	mov	r0, r8
 8005dfc:	4798      	blx	r3
 8005dfe:	462e      	mov	r6, r5
 8005e00:	6822      	ldr	r2, [r4, #0]
 8005e02:	f012 0210 	ands.w	r2, r2, #16
 8005e06:	d001      	beq.n	8005e0c <_scanf_float+0x370>
 8005e08:	2000      	movs	r0, #0
 8005e0a:	e68b      	b.n	8005b24 <_scanf_float+0x88>
 8005e0c:	7032      	strb	r2, [r6, #0]
 8005e0e:	6823      	ldr	r3, [r4, #0]
 8005e10:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005e14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e18:	d11c      	bne.n	8005e54 <_scanf_float+0x3b8>
 8005e1a:	9b02      	ldr	r3, [sp, #8]
 8005e1c:	454b      	cmp	r3, r9
 8005e1e:	eba3 0209 	sub.w	r2, r3, r9
 8005e22:	d123      	bne.n	8005e6c <_scanf_float+0x3d0>
 8005e24:	9901      	ldr	r1, [sp, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	4640      	mov	r0, r8
 8005e2a:	f002 fbf9 	bl	8008620 <_strtod_r>
 8005e2e:	9b03      	ldr	r3, [sp, #12]
 8005e30:	6821      	ldr	r1, [r4, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f011 0f02 	tst.w	r1, #2
 8005e38:	ec57 6b10 	vmov	r6, r7, d0
 8005e3c:	f103 0204 	add.w	r2, r3, #4
 8005e40:	d01f      	beq.n	8005e82 <_scanf_float+0x3e6>
 8005e42:	9903      	ldr	r1, [sp, #12]
 8005e44:	600a      	str	r2, [r1, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	e9c3 6700 	strd	r6, r7, [r3]
 8005e4c:	68e3      	ldr	r3, [r4, #12]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	60e3      	str	r3, [r4, #12]
 8005e52:	e7d9      	b.n	8005e08 <_scanf_float+0x36c>
 8005e54:	9b04      	ldr	r3, [sp, #16]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d0e4      	beq.n	8005e24 <_scanf_float+0x388>
 8005e5a:	9905      	ldr	r1, [sp, #20]
 8005e5c:	230a      	movs	r3, #10
 8005e5e:	3101      	adds	r1, #1
 8005e60:	4640      	mov	r0, r8
 8005e62:	f002 fc5d 	bl	8008720 <_strtol_r>
 8005e66:	9b04      	ldr	r3, [sp, #16]
 8005e68:	9e05      	ldr	r6, [sp, #20]
 8005e6a:	1ac2      	subs	r2, r0, r3
 8005e6c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005e70:	429e      	cmp	r6, r3
 8005e72:	bf28      	it	cs
 8005e74:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005e78:	4910      	ldr	r1, [pc, #64]	@ (8005ebc <_scanf_float+0x420>)
 8005e7a:	4630      	mov	r0, r6
 8005e7c:	f000 f8e4 	bl	8006048 <siprintf>
 8005e80:	e7d0      	b.n	8005e24 <_scanf_float+0x388>
 8005e82:	f011 0f04 	tst.w	r1, #4
 8005e86:	9903      	ldr	r1, [sp, #12]
 8005e88:	600a      	str	r2, [r1, #0]
 8005e8a:	d1dc      	bne.n	8005e46 <_scanf_float+0x3aa>
 8005e8c:	681d      	ldr	r5, [r3, #0]
 8005e8e:	4632      	mov	r2, r6
 8005e90:	463b      	mov	r3, r7
 8005e92:	4630      	mov	r0, r6
 8005e94:	4639      	mov	r1, r7
 8005e96:	f7fa fe49 	bl	8000b2c <__aeabi_dcmpun>
 8005e9a:	b128      	cbz	r0, 8005ea8 <_scanf_float+0x40c>
 8005e9c:	4808      	ldr	r0, [pc, #32]	@ (8005ec0 <_scanf_float+0x424>)
 8005e9e:	f000 f9b7 	bl	8006210 <nanf>
 8005ea2:	ed85 0a00 	vstr	s0, [r5]
 8005ea6:	e7d1      	b.n	8005e4c <_scanf_float+0x3b0>
 8005ea8:	4630      	mov	r0, r6
 8005eaa:	4639      	mov	r1, r7
 8005eac:	f7fa fe9c 	bl	8000be8 <__aeabi_d2f>
 8005eb0:	6028      	str	r0, [r5, #0]
 8005eb2:	e7cb      	b.n	8005e4c <_scanf_float+0x3b0>
 8005eb4:	f04f 0900 	mov.w	r9, #0
 8005eb8:	e629      	b.n	8005b0e <_scanf_float+0x72>
 8005eba:	bf00      	nop
 8005ebc:	08009bd4 	.word	0x08009bd4
 8005ec0:	08009f6d 	.word	0x08009f6d

08005ec4 <std>:
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	b510      	push	{r4, lr}
 8005ec8:	4604      	mov	r4, r0
 8005eca:	e9c0 3300 	strd	r3, r3, [r0]
 8005ece:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ed2:	6083      	str	r3, [r0, #8]
 8005ed4:	8181      	strh	r1, [r0, #12]
 8005ed6:	6643      	str	r3, [r0, #100]	@ 0x64
 8005ed8:	81c2      	strh	r2, [r0, #14]
 8005eda:	6183      	str	r3, [r0, #24]
 8005edc:	4619      	mov	r1, r3
 8005ede:	2208      	movs	r2, #8
 8005ee0:	305c      	adds	r0, #92	@ 0x5c
 8005ee2:	f000 f914 	bl	800610e <memset>
 8005ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8005f1c <std+0x58>)
 8005ee8:	6263      	str	r3, [r4, #36]	@ 0x24
 8005eea:	4b0d      	ldr	r3, [pc, #52]	@ (8005f20 <std+0x5c>)
 8005eec:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005eee:	4b0d      	ldr	r3, [pc, #52]	@ (8005f24 <std+0x60>)
 8005ef0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8005f28 <std+0x64>)
 8005ef4:	6323      	str	r3, [r4, #48]	@ 0x30
 8005ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8005f2c <std+0x68>)
 8005ef8:	6224      	str	r4, [r4, #32]
 8005efa:	429c      	cmp	r4, r3
 8005efc:	d006      	beq.n	8005f0c <std+0x48>
 8005efe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005f02:	4294      	cmp	r4, r2
 8005f04:	d002      	beq.n	8005f0c <std+0x48>
 8005f06:	33d0      	adds	r3, #208	@ 0xd0
 8005f08:	429c      	cmp	r4, r3
 8005f0a:	d105      	bne.n	8005f18 <std+0x54>
 8005f0c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f14:	f000 b978 	b.w	8006208 <__retarget_lock_init_recursive>
 8005f18:	bd10      	pop	{r4, pc}
 8005f1a:	bf00      	nop
 8005f1c:	08006089 	.word	0x08006089
 8005f20:	080060ab 	.word	0x080060ab
 8005f24:	080060e3 	.word	0x080060e3
 8005f28:	08006107 	.word	0x08006107
 8005f2c:	20000300 	.word	0x20000300

08005f30 <stdio_exit_handler>:
 8005f30:	4a02      	ldr	r2, [pc, #8]	@ (8005f3c <stdio_exit_handler+0xc>)
 8005f32:	4903      	ldr	r1, [pc, #12]	@ (8005f40 <stdio_exit_handler+0x10>)
 8005f34:	4803      	ldr	r0, [pc, #12]	@ (8005f44 <stdio_exit_handler+0x14>)
 8005f36:	f000 b869 	b.w	800600c <_fwalk_sglue>
 8005f3a:	bf00      	nop
 8005f3c:	2000000c 	.word	0x2000000c
 8005f40:	08008add 	.word	0x08008add
 8005f44:	2000001c 	.word	0x2000001c

08005f48 <cleanup_stdio>:
 8005f48:	6841      	ldr	r1, [r0, #4]
 8005f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8005f7c <cleanup_stdio+0x34>)
 8005f4c:	4299      	cmp	r1, r3
 8005f4e:	b510      	push	{r4, lr}
 8005f50:	4604      	mov	r4, r0
 8005f52:	d001      	beq.n	8005f58 <cleanup_stdio+0x10>
 8005f54:	f002 fdc2 	bl	8008adc <_fflush_r>
 8005f58:	68a1      	ldr	r1, [r4, #8]
 8005f5a:	4b09      	ldr	r3, [pc, #36]	@ (8005f80 <cleanup_stdio+0x38>)
 8005f5c:	4299      	cmp	r1, r3
 8005f5e:	d002      	beq.n	8005f66 <cleanup_stdio+0x1e>
 8005f60:	4620      	mov	r0, r4
 8005f62:	f002 fdbb 	bl	8008adc <_fflush_r>
 8005f66:	68e1      	ldr	r1, [r4, #12]
 8005f68:	4b06      	ldr	r3, [pc, #24]	@ (8005f84 <cleanup_stdio+0x3c>)
 8005f6a:	4299      	cmp	r1, r3
 8005f6c:	d004      	beq.n	8005f78 <cleanup_stdio+0x30>
 8005f6e:	4620      	mov	r0, r4
 8005f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f74:	f002 bdb2 	b.w	8008adc <_fflush_r>
 8005f78:	bd10      	pop	{r4, pc}
 8005f7a:	bf00      	nop
 8005f7c:	20000300 	.word	0x20000300
 8005f80:	20000368 	.word	0x20000368
 8005f84:	200003d0 	.word	0x200003d0

08005f88 <global_stdio_init.part.0>:
 8005f88:	b510      	push	{r4, lr}
 8005f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8005fb8 <global_stdio_init.part.0+0x30>)
 8005f8c:	4c0b      	ldr	r4, [pc, #44]	@ (8005fbc <global_stdio_init.part.0+0x34>)
 8005f8e:	4a0c      	ldr	r2, [pc, #48]	@ (8005fc0 <global_stdio_init.part.0+0x38>)
 8005f90:	601a      	str	r2, [r3, #0]
 8005f92:	4620      	mov	r0, r4
 8005f94:	2200      	movs	r2, #0
 8005f96:	2104      	movs	r1, #4
 8005f98:	f7ff ff94 	bl	8005ec4 <std>
 8005f9c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	2109      	movs	r1, #9
 8005fa4:	f7ff ff8e 	bl	8005ec4 <std>
 8005fa8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005fac:	2202      	movs	r2, #2
 8005fae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fb2:	2112      	movs	r1, #18
 8005fb4:	f7ff bf86 	b.w	8005ec4 <std>
 8005fb8:	20000438 	.word	0x20000438
 8005fbc:	20000300 	.word	0x20000300
 8005fc0:	08005f31 	.word	0x08005f31

08005fc4 <__sfp_lock_acquire>:
 8005fc4:	4801      	ldr	r0, [pc, #4]	@ (8005fcc <__sfp_lock_acquire+0x8>)
 8005fc6:	f000 b920 	b.w	800620a <__retarget_lock_acquire_recursive>
 8005fca:	bf00      	nop
 8005fcc:	20000441 	.word	0x20000441

08005fd0 <__sfp_lock_release>:
 8005fd0:	4801      	ldr	r0, [pc, #4]	@ (8005fd8 <__sfp_lock_release+0x8>)
 8005fd2:	f000 b91b 	b.w	800620c <__retarget_lock_release_recursive>
 8005fd6:	bf00      	nop
 8005fd8:	20000441 	.word	0x20000441

08005fdc <__sinit>:
 8005fdc:	b510      	push	{r4, lr}
 8005fde:	4604      	mov	r4, r0
 8005fe0:	f7ff fff0 	bl	8005fc4 <__sfp_lock_acquire>
 8005fe4:	6a23      	ldr	r3, [r4, #32]
 8005fe6:	b11b      	cbz	r3, 8005ff0 <__sinit+0x14>
 8005fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fec:	f7ff bff0 	b.w	8005fd0 <__sfp_lock_release>
 8005ff0:	4b04      	ldr	r3, [pc, #16]	@ (8006004 <__sinit+0x28>)
 8005ff2:	6223      	str	r3, [r4, #32]
 8005ff4:	4b04      	ldr	r3, [pc, #16]	@ (8006008 <__sinit+0x2c>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1f5      	bne.n	8005fe8 <__sinit+0xc>
 8005ffc:	f7ff ffc4 	bl	8005f88 <global_stdio_init.part.0>
 8006000:	e7f2      	b.n	8005fe8 <__sinit+0xc>
 8006002:	bf00      	nop
 8006004:	08005f49 	.word	0x08005f49
 8006008:	20000438 	.word	0x20000438

0800600c <_fwalk_sglue>:
 800600c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006010:	4607      	mov	r7, r0
 8006012:	4688      	mov	r8, r1
 8006014:	4614      	mov	r4, r2
 8006016:	2600      	movs	r6, #0
 8006018:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800601c:	f1b9 0901 	subs.w	r9, r9, #1
 8006020:	d505      	bpl.n	800602e <_fwalk_sglue+0x22>
 8006022:	6824      	ldr	r4, [r4, #0]
 8006024:	2c00      	cmp	r4, #0
 8006026:	d1f7      	bne.n	8006018 <_fwalk_sglue+0xc>
 8006028:	4630      	mov	r0, r6
 800602a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800602e:	89ab      	ldrh	r3, [r5, #12]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d907      	bls.n	8006044 <_fwalk_sglue+0x38>
 8006034:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006038:	3301      	adds	r3, #1
 800603a:	d003      	beq.n	8006044 <_fwalk_sglue+0x38>
 800603c:	4629      	mov	r1, r5
 800603e:	4638      	mov	r0, r7
 8006040:	47c0      	blx	r8
 8006042:	4306      	orrs	r6, r0
 8006044:	3568      	adds	r5, #104	@ 0x68
 8006046:	e7e9      	b.n	800601c <_fwalk_sglue+0x10>

08006048 <siprintf>:
 8006048:	b40e      	push	{r1, r2, r3}
 800604a:	b500      	push	{lr}
 800604c:	b09c      	sub	sp, #112	@ 0x70
 800604e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006050:	9002      	str	r0, [sp, #8]
 8006052:	9006      	str	r0, [sp, #24]
 8006054:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006058:	4809      	ldr	r0, [pc, #36]	@ (8006080 <siprintf+0x38>)
 800605a:	9107      	str	r1, [sp, #28]
 800605c:	9104      	str	r1, [sp, #16]
 800605e:	4909      	ldr	r1, [pc, #36]	@ (8006084 <siprintf+0x3c>)
 8006060:	f853 2b04 	ldr.w	r2, [r3], #4
 8006064:	9105      	str	r1, [sp, #20]
 8006066:	6800      	ldr	r0, [r0, #0]
 8006068:	9301      	str	r3, [sp, #4]
 800606a:	a902      	add	r1, sp, #8
 800606c:	f002 fbb6 	bl	80087dc <_svfiprintf_r>
 8006070:	9b02      	ldr	r3, [sp, #8]
 8006072:	2200      	movs	r2, #0
 8006074:	701a      	strb	r2, [r3, #0]
 8006076:	b01c      	add	sp, #112	@ 0x70
 8006078:	f85d eb04 	ldr.w	lr, [sp], #4
 800607c:	b003      	add	sp, #12
 800607e:	4770      	bx	lr
 8006080:	20000018 	.word	0x20000018
 8006084:	ffff0208 	.word	0xffff0208

08006088 <__sread>:
 8006088:	b510      	push	{r4, lr}
 800608a:	460c      	mov	r4, r1
 800608c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006090:	f000 f86c 	bl	800616c <_read_r>
 8006094:	2800      	cmp	r0, #0
 8006096:	bfab      	itete	ge
 8006098:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800609a:	89a3      	ldrhlt	r3, [r4, #12]
 800609c:	181b      	addge	r3, r3, r0
 800609e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80060a2:	bfac      	ite	ge
 80060a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80060a6:	81a3      	strhlt	r3, [r4, #12]
 80060a8:	bd10      	pop	{r4, pc}

080060aa <__swrite>:
 80060aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060ae:	461f      	mov	r7, r3
 80060b0:	898b      	ldrh	r3, [r1, #12]
 80060b2:	05db      	lsls	r3, r3, #23
 80060b4:	4605      	mov	r5, r0
 80060b6:	460c      	mov	r4, r1
 80060b8:	4616      	mov	r6, r2
 80060ba:	d505      	bpl.n	80060c8 <__swrite+0x1e>
 80060bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060c0:	2302      	movs	r3, #2
 80060c2:	2200      	movs	r2, #0
 80060c4:	f000 f840 	bl	8006148 <_lseek_r>
 80060c8:	89a3      	ldrh	r3, [r4, #12]
 80060ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80060d2:	81a3      	strh	r3, [r4, #12]
 80060d4:	4632      	mov	r2, r6
 80060d6:	463b      	mov	r3, r7
 80060d8:	4628      	mov	r0, r5
 80060da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060de:	f000 b857 	b.w	8006190 <_write_r>

080060e2 <__sseek>:
 80060e2:	b510      	push	{r4, lr}
 80060e4:	460c      	mov	r4, r1
 80060e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060ea:	f000 f82d 	bl	8006148 <_lseek_r>
 80060ee:	1c43      	adds	r3, r0, #1
 80060f0:	89a3      	ldrh	r3, [r4, #12]
 80060f2:	bf15      	itete	ne
 80060f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80060f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80060fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80060fe:	81a3      	strheq	r3, [r4, #12]
 8006100:	bf18      	it	ne
 8006102:	81a3      	strhne	r3, [r4, #12]
 8006104:	bd10      	pop	{r4, pc}

08006106 <__sclose>:
 8006106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800610a:	f000 b80d 	b.w	8006128 <_close_r>

0800610e <memset>:
 800610e:	4402      	add	r2, r0
 8006110:	4603      	mov	r3, r0
 8006112:	4293      	cmp	r3, r2
 8006114:	d100      	bne.n	8006118 <memset+0xa>
 8006116:	4770      	bx	lr
 8006118:	f803 1b01 	strb.w	r1, [r3], #1
 800611c:	e7f9      	b.n	8006112 <memset+0x4>
	...

08006120 <_localeconv_r>:
 8006120:	4800      	ldr	r0, [pc, #0]	@ (8006124 <_localeconv_r+0x4>)
 8006122:	4770      	bx	lr
 8006124:	20000158 	.word	0x20000158

08006128 <_close_r>:
 8006128:	b538      	push	{r3, r4, r5, lr}
 800612a:	4d06      	ldr	r5, [pc, #24]	@ (8006144 <_close_r+0x1c>)
 800612c:	2300      	movs	r3, #0
 800612e:	4604      	mov	r4, r0
 8006130:	4608      	mov	r0, r1
 8006132:	602b      	str	r3, [r5, #0]
 8006134:	f7fb fbe5 	bl	8001902 <_close>
 8006138:	1c43      	adds	r3, r0, #1
 800613a:	d102      	bne.n	8006142 <_close_r+0x1a>
 800613c:	682b      	ldr	r3, [r5, #0]
 800613e:	b103      	cbz	r3, 8006142 <_close_r+0x1a>
 8006140:	6023      	str	r3, [r4, #0]
 8006142:	bd38      	pop	{r3, r4, r5, pc}
 8006144:	2000043c 	.word	0x2000043c

08006148 <_lseek_r>:
 8006148:	b538      	push	{r3, r4, r5, lr}
 800614a:	4d07      	ldr	r5, [pc, #28]	@ (8006168 <_lseek_r+0x20>)
 800614c:	4604      	mov	r4, r0
 800614e:	4608      	mov	r0, r1
 8006150:	4611      	mov	r1, r2
 8006152:	2200      	movs	r2, #0
 8006154:	602a      	str	r2, [r5, #0]
 8006156:	461a      	mov	r2, r3
 8006158:	f7fb fbfa 	bl	8001950 <_lseek>
 800615c:	1c43      	adds	r3, r0, #1
 800615e:	d102      	bne.n	8006166 <_lseek_r+0x1e>
 8006160:	682b      	ldr	r3, [r5, #0]
 8006162:	b103      	cbz	r3, 8006166 <_lseek_r+0x1e>
 8006164:	6023      	str	r3, [r4, #0]
 8006166:	bd38      	pop	{r3, r4, r5, pc}
 8006168:	2000043c 	.word	0x2000043c

0800616c <_read_r>:
 800616c:	b538      	push	{r3, r4, r5, lr}
 800616e:	4d07      	ldr	r5, [pc, #28]	@ (800618c <_read_r+0x20>)
 8006170:	4604      	mov	r4, r0
 8006172:	4608      	mov	r0, r1
 8006174:	4611      	mov	r1, r2
 8006176:	2200      	movs	r2, #0
 8006178:	602a      	str	r2, [r5, #0]
 800617a:	461a      	mov	r2, r3
 800617c:	f7fb fb88 	bl	8001890 <_read>
 8006180:	1c43      	adds	r3, r0, #1
 8006182:	d102      	bne.n	800618a <_read_r+0x1e>
 8006184:	682b      	ldr	r3, [r5, #0]
 8006186:	b103      	cbz	r3, 800618a <_read_r+0x1e>
 8006188:	6023      	str	r3, [r4, #0]
 800618a:	bd38      	pop	{r3, r4, r5, pc}
 800618c:	2000043c 	.word	0x2000043c

08006190 <_write_r>:
 8006190:	b538      	push	{r3, r4, r5, lr}
 8006192:	4d07      	ldr	r5, [pc, #28]	@ (80061b0 <_write_r+0x20>)
 8006194:	4604      	mov	r4, r0
 8006196:	4608      	mov	r0, r1
 8006198:	4611      	mov	r1, r2
 800619a:	2200      	movs	r2, #0
 800619c:	602a      	str	r2, [r5, #0]
 800619e:	461a      	mov	r2, r3
 80061a0:	f7fb fb93 	bl	80018ca <_write>
 80061a4:	1c43      	adds	r3, r0, #1
 80061a6:	d102      	bne.n	80061ae <_write_r+0x1e>
 80061a8:	682b      	ldr	r3, [r5, #0]
 80061aa:	b103      	cbz	r3, 80061ae <_write_r+0x1e>
 80061ac:	6023      	str	r3, [r4, #0]
 80061ae:	bd38      	pop	{r3, r4, r5, pc}
 80061b0:	2000043c 	.word	0x2000043c

080061b4 <__errno>:
 80061b4:	4b01      	ldr	r3, [pc, #4]	@ (80061bc <__errno+0x8>)
 80061b6:	6818      	ldr	r0, [r3, #0]
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	20000018 	.word	0x20000018

080061c0 <__libc_init_array>:
 80061c0:	b570      	push	{r4, r5, r6, lr}
 80061c2:	4d0d      	ldr	r5, [pc, #52]	@ (80061f8 <__libc_init_array+0x38>)
 80061c4:	4c0d      	ldr	r4, [pc, #52]	@ (80061fc <__libc_init_array+0x3c>)
 80061c6:	1b64      	subs	r4, r4, r5
 80061c8:	10a4      	asrs	r4, r4, #2
 80061ca:	2600      	movs	r6, #0
 80061cc:	42a6      	cmp	r6, r4
 80061ce:	d109      	bne.n	80061e4 <__libc_init_array+0x24>
 80061d0:	4d0b      	ldr	r5, [pc, #44]	@ (8006200 <__libc_init_array+0x40>)
 80061d2:	4c0c      	ldr	r4, [pc, #48]	@ (8006204 <__libc_init_array+0x44>)
 80061d4:	f003 fc78 	bl	8009ac8 <_init>
 80061d8:	1b64      	subs	r4, r4, r5
 80061da:	10a4      	asrs	r4, r4, #2
 80061dc:	2600      	movs	r6, #0
 80061de:	42a6      	cmp	r6, r4
 80061e0:	d105      	bne.n	80061ee <__libc_init_array+0x2e>
 80061e2:	bd70      	pop	{r4, r5, r6, pc}
 80061e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80061e8:	4798      	blx	r3
 80061ea:	3601      	adds	r6, #1
 80061ec:	e7ee      	b.n	80061cc <__libc_init_array+0xc>
 80061ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80061f2:	4798      	blx	r3
 80061f4:	3601      	adds	r6, #1
 80061f6:	e7f2      	b.n	80061de <__libc_init_array+0x1e>
 80061f8:	08009fd8 	.word	0x08009fd8
 80061fc:	08009fd8 	.word	0x08009fd8
 8006200:	08009fd8 	.word	0x08009fd8
 8006204:	08009fdc 	.word	0x08009fdc

08006208 <__retarget_lock_init_recursive>:
 8006208:	4770      	bx	lr

0800620a <__retarget_lock_acquire_recursive>:
 800620a:	4770      	bx	lr

0800620c <__retarget_lock_release_recursive>:
 800620c:	4770      	bx	lr
	...

08006210 <nanf>:
 8006210:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006218 <nanf+0x8>
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	7fc00000 	.word	0x7fc00000

0800621c <quorem>:
 800621c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006220:	6903      	ldr	r3, [r0, #16]
 8006222:	690c      	ldr	r4, [r1, #16]
 8006224:	42a3      	cmp	r3, r4
 8006226:	4607      	mov	r7, r0
 8006228:	db7e      	blt.n	8006328 <quorem+0x10c>
 800622a:	3c01      	subs	r4, #1
 800622c:	f101 0814 	add.w	r8, r1, #20
 8006230:	00a3      	lsls	r3, r4, #2
 8006232:	f100 0514 	add.w	r5, r0, #20
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800623c:	9301      	str	r3, [sp, #4]
 800623e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006242:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006246:	3301      	adds	r3, #1
 8006248:	429a      	cmp	r2, r3
 800624a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800624e:	fbb2 f6f3 	udiv	r6, r2, r3
 8006252:	d32e      	bcc.n	80062b2 <quorem+0x96>
 8006254:	f04f 0a00 	mov.w	sl, #0
 8006258:	46c4      	mov	ip, r8
 800625a:	46ae      	mov	lr, r5
 800625c:	46d3      	mov	fp, sl
 800625e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006262:	b298      	uxth	r0, r3
 8006264:	fb06 a000 	mla	r0, r6, r0, sl
 8006268:	0c02      	lsrs	r2, r0, #16
 800626a:	0c1b      	lsrs	r3, r3, #16
 800626c:	fb06 2303 	mla	r3, r6, r3, r2
 8006270:	f8de 2000 	ldr.w	r2, [lr]
 8006274:	b280      	uxth	r0, r0
 8006276:	b292      	uxth	r2, r2
 8006278:	1a12      	subs	r2, r2, r0
 800627a:	445a      	add	r2, fp
 800627c:	f8de 0000 	ldr.w	r0, [lr]
 8006280:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006284:	b29b      	uxth	r3, r3
 8006286:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800628a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800628e:	b292      	uxth	r2, r2
 8006290:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006294:	45e1      	cmp	r9, ip
 8006296:	f84e 2b04 	str.w	r2, [lr], #4
 800629a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800629e:	d2de      	bcs.n	800625e <quorem+0x42>
 80062a0:	9b00      	ldr	r3, [sp, #0]
 80062a2:	58eb      	ldr	r3, [r5, r3]
 80062a4:	b92b      	cbnz	r3, 80062b2 <quorem+0x96>
 80062a6:	9b01      	ldr	r3, [sp, #4]
 80062a8:	3b04      	subs	r3, #4
 80062aa:	429d      	cmp	r5, r3
 80062ac:	461a      	mov	r2, r3
 80062ae:	d32f      	bcc.n	8006310 <quorem+0xf4>
 80062b0:	613c      	str	r4, [r7, #16]
 80062b2:	4638      	mov	r0, r7
 80062b4:	f001 f9c4 	bl	8007640 <__mcmp>
 80062b8:	2800      	cmp	r0, #0
 80062ba:	db25      	blt.n	8006308 <quorem+0xec>
 80062bc:	4629      	mov	r1, r5
 80062be:	2000      	movs	r0, #0
 80062c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80062c4:	f8d1 c000 	ldr.w	ip, [r1]
 80062c8:	fa1f fe82 	uxth.w	lr, r2
 80062cc:	fa1f f38c 	uxth.w	r3, ip
 80062d0:	eba3 030e 	sub.w	r3, r3, lr
 80062d4:	4403      	add	r3, r0
 80062d6:	0c12      	lsrs	r2, r2, #16
 80062d8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80062dc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062e6:	45c1      	cmp	r9, r8
 80062e8:	f841 3b04 	str.w	r3, [r1], #4
 80062ec:	ea4f 4022 	mov.w	r0, r2, asr #16
 80062f0:	d2e6      	bcs.n	80062c0 <quorem+0xa4>
 80062f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80062f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062fa:	b922      	cbnz	r2, 8006306 <quorem+0xea>
 80062fc:	3b04      	subs	r3, #4
 80062fe:	429d      	cmp	r5, r3
 8006300:	461a      	mov	r2, r3
 8006302:	d30b      	bcc.n	800631c <quorem+0x100>
 8006304:	613c      	str	r4, [r7, #16]
 8006306:	3601      	adds	r6, #1
 8006308:	4630      	mov	r0, r6
 800630a:	b003      	add	sp, #12
 800630c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006310:	6812      	ldr	r2, [r2, #0]
 8006312:	3b04      	subs	r3, #4
 8006314:	2a00      	cmp	r2, #0
 8006316:	d1cb      	bne.n	80062b0 <quorem+0x94>
 8006318:	3c01      	subs	r4, #1
 800631a:	e7c6      	b.n	80062aa <quorem+0x8e>
 800631c:	6812      	ldr	r2, [r2, #0]
 800631e:	3b04      	subs	r3, #4
 8006320:	2a00      	cmp	r2, #0
 8006322:	d1ef      	bne.n	8006304 <quorem+0xe8>
 8006324:	3c01      	subs	r4, #1
 8006326:	e7ea      	b.n	80062fe <quorem+0xe2>
 8006328:	2000      	movs	r0, #0
 800632a:	e7ee      	b.n	800630a <quorem+0xee>
 800632c:	0000      	movs	r0, r0
	...

08006330 <_dtoa_r>:
 8006330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006334:	69c7      	ldr	r7, [r0, #28]
 8006336:	b099      	sub	sp, #100	@ 0x64
 8006338:	ed8d 0b02 	vstr	d0, [sp, #8]
 800633c:	ec55 4b10 	vmov	r4, r5, d0
 8006340:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006342:	9109      	str	r1, [sp, #36]	@ 0x24
 8006344:	4683      	mov	fp, r0
 8006346:	920e      	str	r2, [sp, #56]	@ 0x38
 8006348:	9313      	str	r3, [sp, #76]	@ 0x4c
 800634a:	b97f      	cbnz	r7, 800636c <_dtoa_r+0x3c>
 800634c:	2010      	movs	r0, #16
 800634e:	f000 fdfd 	bl	8006f4c <malloc>
 8006352:	4602      	mov	r2, r0
 8006354:	f8cb 001c 	str.w	r0, [fp, #28]
 8006358:	b920      	cbnz	r0, 8006364 <_dtoa_r+0x34>
 800635a:	4ba7      	ldr	r3, [pc, #668]	@ (80065f8 <_dtoa_r+0x2c8>)
 800635c:	21ef      	movs	r1, #239	@ 0xef
 800635e:	48a7      	ldr	r0, [pc, #668]	@ (80065fc <_dtoa_r+0x2cc>)
 8006360:	f002 fc36 	bl	8008bd0 <__assert_func>
 8006364:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006368:	6007      	str	r7, [r0, #0]
 800636a:	60c7      	str	r7, [r0, #12]
 800636c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006370:	6819      	ldr	r1, [r3, #0]
 8006372:	b159      	cbz	r1, 800638c <_dtoa_r+0x5c>
 8006374:	685a      	ldr	r2, [r3, #4]
 8006376:	604a      	str	r2, [r1, #4]
 8006378:	2301      	movs	r3, #1
 800637a:	4093      	lsls	r3, r2
 800637c:	608b      	str	r3, [r1, #8]
 800637e:	4658      	mov	r0, fp
 8006380:	f000 feda 	bl	8007138 <_Bfree>
 8006384:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006388:	2200      	movs	r2, #0
 800638a:	601a      	str	r2, [r3, #0]
 800638c:	1e2b      	subs	r3, r5, #0
 800638e:	bfb9      	ittee	lt
 8006390:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006394:	9303      	strlt	r3, [sp, #12]
 8006396:	2300      	movge	r3, #0
 8006398:	6033      	strge	r3, [r6, #0]
 800639a:	9f03      	ldr	r7, [sp, #12]
 800639c:	4b98      	ldr	r3, [pc, #608]	@ (8006600 <_dtoa_r+0x2d0>)
 800639e:	bfbc      	itt	lt
 80063a0:	2201      	movlt	r2, #1
 80063a2:	6032      	strlt	r2, [r6, #0]
 80063a4:	43bb      	bics	r3, r7
 80063a6:	d112      	bne.n	80063ce <_dtoa_r+0x9e>
 80063a8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80063aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80063ae:	6013      	str	r3, [r2, #0]
 80063b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80063b4:	4323      	orrs	r3, r4
 80063b6:	f000 854d 	beq.w	8006e54 <_dtoa_r+0xb24>
 80063ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80063bc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006614 <_dtoa_r+0x2e4>
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f000 854f 	beq.w	8006e64 <_dtoa_r+0xb34>
 80063c6:	f10a 0303 	add.w	r3, sl, #3
 80063ca:	f000 bd49 	b.w	8006e60 <_dtoa_r+0xb30>
 80063ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 80063d2:	2200      	movs	r2, #0
 80063d4:	ec51 0b17 	vmov	r0, r1, d7
 80063d8:	2300      	movs	r3, #0
 80063da:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80063de:	f7fa fb73 	bl	8000ac8 <__aeabi_dcmpeq>
 80063e2:	4680      	mov	r8, r0
 80063e4:	b158      	cbz	r0, 80063fe <_dtoa_r+0xce>
 80063e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80063e8:	2301      	movs	r3, #1
 80063ea:	6013      	str	r3, [r2, #0]
 80063ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80063ee:	b113      	cbz	r3, 80063f6 <_dtoa_r+0xc6>
 80063f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80063f2:	4b84      	ldr	r3, [pc, #528]	@ (8006604 <_dtoa_r+0x2d4>)
 80063f4:	6013      	str	r3, [r2, #0]
 80063f6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006618 <_dtoa_r+0x2e8>
 80063fa:	f000 bd33 	b.w	8006e64 <_dtoa_r+0xb34>
 80063fe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006402:	aa16      	add	r2, sp, #88	@ 0x58
 8006404:	a917      	add	r1, sp, #92	@ 0x5c
 8006406:	4658      	mov	r0, fp
 8006408:	f001 fa3a 	bl	8007880 <__d2b>
 800640c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006410:	4681      	mov	r9, r0
 8006412:	2e00      	cmp	r6, #0
 8006414:	d077      	beq.n	8006506 <_dtoa_r+0x1d6>
 8006416:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006418:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800641c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006420:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006424:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006428:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800642c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006430:	4619      	mov	r1, r3
 8006432:	2200      	movs	r2, #0
 8006434:	4b74      	ldr	r3, [pc, #464]	@ (8006608 <_dtoa_r+0x2d8>)
 8006436:	f7f9 ff27 	bl	8000288 <__aeabi_dsub>
 800643a:	a369      	add	r3, pc, #420	@ (adr r3, 80065e0 <_dtoa_r+0x2b0>)
 800643c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006440:	f7fa f8da 	bl	80005f8 <__aeabi_dmul>
 8006444:	a368      	add	r3, pc, #416	@ (adr r3, 80065e8 <_dtoa_r+0x2b8>)
 8006446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644a:	f7f9 ff1f 	bl	800028c <__adddf3>
 800644e:	4604      	mov	r4, r0
 8006450:	4630      	mov	r0, r6
 8006452:	460d      	mov	r5, r1
 8006454:	f7fa f866 	bl	8000524 <__aeabi_i2d>
 8006458:	a365      	add	r3, pc, #404	@ (adr r3, 80065f0 <_dtoa_r+0x2c0>)
 800645a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645e:	f7fa f8cb 	bl	80005f8 <__aeabi_dmul>
 8006462:	4602      	mov	r2, r0
 8006464:	460b      	mov	r3, r1
 8006466:	4620      	mov	r0, r4
 8006468:	4629      	mov	r1, r5
 800646a:	f7f9 ff0f 	bl	800028c <__adddf3>
 800646e:	4604      	mov	r4, r0
 8006470:	460d      	mov	r5, r1
 8006472:	f7fa fb71 	bl	8000b58 <__aeabi_d2iz>
 8006476:	2200      	movs	r2, #0
 8006478:	4607      	mov	r7, r0
 800647a:	2300      	movs	r3, #0
 800647c:	4620      	mov	r0, r4
 800647e:	4629      	mov	r1, r5
 8006480:	f7fa fb2c 	bl	8000adc <__aeabi_dcmplt>
 8006484:	b140      	cbz	r0, 8006498 <_dtoa_r+0x168>
 8006486:	4638      	mov	r0, r7
 8006488:	f7fa f84c 	bl	8000524 <__aeabi_i2d>
 800648c:	4622      	mov	r2, r4
 800648e:	462b      	mov	r3, r5
 8006490:	f7fa fb1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006494:	b900      	cbnz	r0, 8006498 <_dtoa_r+0x168>
 8006496:	3f01      	subs	r7, #1
 8006498:	2f16      	cmp	r7, #22
 800649a:	d851      	bhi.n	8006540 <_dtoa_r+0x210>
 800649c:	4b5b      	ldr	r3, [pc, #364]	@ (800660c <_dtoa_r+0x2dc>)
 800649e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80064a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80064aa:	f7fa fb17 	bl	8000adc <__aeabi_dcmplt>
 80064ae:	2800      	cmp	r0, #0
 80064b0:	d048      	beq.n	8006544 <_dtoa_r+0x214>
 80064b2:	3f01      	subs	r7, #1
 80064b4:	2300      	movs	r3, #0
 80064b6:	9312      	str	r3, [sp, #72]	@ 0x48
 80064b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80064ba:	1b9b      	subs	r3, r3, r6
 80064bc:	1e5a      	subs	r2, r3, #1
 80064be:	bf44      	itt	mi
 80064c0:	f1c3 0801 	rsbmi	r8, r3, #1
 80064c4:	2300      	movmi	r3, #0
 80064c6:	9208      	str	r2, [sp, #32]
 80064c8:	bf54      	ite	pl
 80064ca:	f04f 0800 	movpl.w	r8, #0
 80064ce:	9308      	strmi	r3, [sp, #32]
 80064d0:	2f00      	cmp	r7, #0
 80064d2:	db39      	blt.n	8006548 <_dtoa_r+0x218>
 80064d4:	9b08      	ldr	r3, [sp, #32]
 80064d6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80064d8:	443b      	add	r3, r7
 80064da:	9308      	str	r3, [sp, #32]
 80064dc:	2300      	movs	r3, #0
 80064de:	930a      	str	r3, [sp, #40]	@ 0x28
 80064e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064e2:	2b09      	cmp	r3, #9
 80064e4:	d864      	bhi.n	80065b0 <_dtoa_r+0x280>
 80064e6:	2b05      	cmp	r3, #5
 80064e8:	bfc4      	itt	gt
 80064ea:	3b04      	subgt	r3, #4
 80064ec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80064ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064f0:	f1a3 0302 	sub.w	r3, r3, #2
 80064f4:	bfcc      	ite	gt
 80064f6:	2400      	movgt	r4, #0
 80064f8:	2401      	movle	r4, #1
 80064fa:	2b03      	cmp	r3, #3
 80064fc:	d863      	bhi.n	80065c6 <_dtoa_r+0x296>
 80064fe:	e8df f003 	tbb	[pc, r3]
 8006502:	372a      	.short	0x372a
 8006504:	5535      	.short	0x5535
 8006506:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800650a:	441e      	add	r6, r3
 800650c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006510:	2b20      	cmp	r3, #32
 8006512:	bfc1      	itttt	gt
 8006514:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006518:	409f      	lslgt	r7, r3
 800651a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800651e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006522:	bfd6      	itet	le
 8006524:	f1c3 0320 	rsble	r3, r3, #32
 8006528:	ea47 0003 	orrgt.w	r0, r7, r3
 800652c:	fa04 f003 	lslle.w	r0, r4, r3
 8006530:	f7f9 ffe8 	bl	8000504 <__aeabi_ui2d>
 8006534:	2201      	movs	r2, #1
 8006536:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800653a:	3e01      	subs	r6, #1
 800653c:	9214      	str	r2, [sp, #80]	@ 0x50
 800653e:	e777      	b.n	8006430 <_dtoa_r+0x100>
 8006540:	2301      	movs	r3, #1
 8006542:	e7b8      	b.n	80064b6 <_dtoa_r+0x186>
 8006544:	9012      	str	r0, [sp, #72]	@ 0x48
 8006546:	e7b7      	b.n	80064b8 <_dtoa_r+0x188>
 8006548:	427b      	negs	r3, r7
 800654a:	930a      	str	r3, [sp, #40]	@ 0x28
 800654c:	2300      	movs	r3, #0
 800654e:	eba8 0807 	sub.w	r8, r8, r7
 8006552:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006554:	e7c4      	b.n	80064e0 <_dtoa_r+0x1b0>
 8006556:	2300      	movs	r3, #0
 8006558:	930b      	str	r3, [sp, #44]	@ 0x2c
 800655a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800655c:	2b00      	cmp	r3, #0
 800655e:	dc35      	bgt.n	80065cc <_dtoa_r+0x29c>
 8006560:	2301      	movs	r3, #1
 8006562:	9300      	str	r3, [sp, #0]
 8006564:	9307      	str	r3, [sp, #28]
 8006566:	461a      	mov	r2, r3
 8006568:	920e      	str	r2, [sp, #56]	@ 0x38
 800656a:	e00b      	b.n	8006584 <_dtoa_r+0x254>
 800656c:	2301      	movs	r3, #1
 800656e:	e7f3      	b.n	8006558 <_dtoa_r+0x228>
 8006570:	2300      	movs	r3, #0
 8006572:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006574:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006576:	18fb      	adds	r3, r7, r3
 8006578:	9300      	str	r3, [sp, #0]
 800657a:	3301      	adds	r3, #1
 800657c:	2b01      	cmp	r3, #1
 800657e:	9307      	str	r3, [sp, #28]
 8006580:	bfb8      	it	lt
 8006582:	2301      	movlt	r3, #1
 8006584:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006588:	2100      	movs	r1, #0
 800658a:	2204      	movs	r2, #4
 800658c:	f102 0514 	add.w	r5, r2, #20
 8006590:	429d      	cmp	r5, r3
 8006592:	d91f      	bls.n	80065d4 <_dtoa_r+0x2a4>
 8006594:	6041      	str	r1, [r0, #4]
 8006596:	4658      	mov	r0, fp
 8006598:	f000 fd8e 	bl	80070b8 <_Balloc>
 800659c:	4682      	mov	sl, r0
 800659e:	2800      	cmp	r0, #0
 80065a0:	d13c      	bne.n	800661c <_dtoa_r+0x2ec>
 80065a2:	4b1b      	ldr	r3, [pc, #108]	@ (8006610 <_dtoa_r+0x2e0>)
 80065a4:	4602      	mov	r2, r0
 80065a6:	f240 11af 	movw	r1, #431	@ 0x1af
 80065aa:	e6d8      	b.n	800635e <_dtoa_r+0x2e>
 80065ac:	2301      	movs	r3, #1
 80065ae:	e7e0      	b.n	8006572 <_dtoa_r+0x242>
 80065b0:	2401      	movs	r4, #1
 80065b2:	2300      	movs	r3, #0
 80065b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80065b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80065b8:	f04f 33ff 	mov.w	r3, #4294967295
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	9307      	str	r3, [sp, #28]
 80065c0:	2200      	movs	r2, #0
 80065c2:	2312      	movs	r3, #18
 80065c4:	e7d0      	b.n	8006568 <_dtoa_r+0x238>
 80065c6:	2301      	movs	r3, #1
 80065c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065ca:	e7f5      	b.n	80065b8 <_dtoa_r+0x288>
 80065cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065ce:	9300      	str	r3, [sp, #0]
 80065d0:	9307      	str	r3, [sp, #28]
 80065d2:	e7d7      	b.n	8006584 <_dtoa_r+0x254>
 80065d4:	3101      	adds	r1, #1
 80065d6:	0052      	lsls	r2, r2, #1
 80065d8:	e7d8      	b.n	800658c <_dtoa_r+0x25c>
 80065da:	bf00      	nop
 80065dc:	f3af 8000 	nop.w
 80065e0:	636f4361 	.word	0x636f4361
 80065e4:	3fd287a7 	.word	0x3fd287a7
 80065e8:	8b60c8b3 	.word	0x8b60c8b3
 80065ec:	3fc68a28 	.word	0x3fc68a28
 80065f0:	509f79fb 	.word	0x509f79fb
 80065f4:	3fd34413 	.word	0x3fd34413
 80065f8:	08009be6 	.word	0x08009be6
 80065fc:	08009bfd 	.word	0x08009bfd
 8006600:	7ff00000 	.word	0x7ff00000
 8006604:	08009bb1 	.word	0x08009bb1
 8006608:	3ff80000 	.word	0x3ff80000
 800660c:	08009cf8 	.word	0x08009cf8
 8006610:	08009c55 	.word	0x08009c55
 8006614:	08009be2 	.word	0x08009be2
 8006618:	08009bb0 	.word	0x08009bb0
 800661c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006620:	6018      	str	r0, [r3, #0]
 8006622:	9b07      	ldr	r3, [sp, #28]
 8006624:	2b0e      	cmp	r3, #14
 8006626:	f200 80a4 	bhi.w	8006772 <_dtoa_r+0x442>
 800662a:	2c00      	cmp	r4, #0
 800662c:	f000 80a1 	beq.w	8006772 <_dtoa_r+0x442>
 8006630:	2f00      	cmp	r7, #0
 8006632:	dd33      	ble.n	800669c <_dtoa_r+0x36c>
 8006634:	4bad      	ldr	r3, [pc, #692]	@ (80068ec <_dtoa_r+0x5bc>)
 8006636:	f007 020f 	and.w	r2, r7, #15
 800663a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800663e:	ed93 7b00 	vldr	d7, [r3]
 8006642:	05f8      	lsls	r0, r7, #23
 8006644:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006648:	ea4f 1427 	mov.w	r4, r7, asr #4
 800664c:	d516      	bpl.n	800667c <_dtoa_r+0x34c>
 800664e:	4ba8      	ldr	r3, [pc, #672]	@ (80068f0 <_dtoa_r+0x5c0>)
 8006650:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006654:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006658:	f7fa f8f8 	bl	800084c <__aeabi_ddiv>
 800665c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006660:	f004 040f 	and.w	r4, r4, #15
 8006664:	2603      	movs	r6, #3
 8006666:	4da2      	ldr	r5, [pc, #648]	@ (80068f0 <_dtoa_r+0x5c0>)
 8006668:	b954      	cbnz	r4, 8006680 <_dtoa_r+0x350>
 800666a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800666e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006672:	f7fa f8eb 	bl	800084c <__aeabi_ddiv>
 8006676:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800667a:	e028      	b.n	80066ce <_dtoa_r+0x39e>
 800667c:	2602      	movs	r6, #2
 800667e:	e7f2      	b.n	8006666 <_dtoa_r+0x336>
 8006680:	07e1      	lsls	r1, r4, #31
 8006682:	d508      	bpl.n	8006696 <_dtoa_r+0x366>
 8006684:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006688:	e9d5 2300 	ldrd	r2, r3, [r5]
 800668c:	f7f9 ffb4 	bl	80005f8 <__aeabi_dmul>
 8006690:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006694:	3601      	adds	r6, #1
 8006696:	1064      	asrs	r4, r4, #1
 8006698:	3508      	adds	r5, #8
 800669a:	e7e5      	b.n	8006668 <_dtoa_r+0x338>
 800669c:	f000 80d2 	beq.w	8006844 <_dtoa_r+0x514>
 80066a0:	427c      	negs	r4, r7
 80066a2:	4b92      	ldr	r3, [pc, #584]	@ (80068ec <_dtoa_r+0x5bc>)
 80066a4:	4d92      	ldr	r5, [pc, #584]	@ (80068f0 <_dtoa_r+0x5c0>)
 80066a6:	f004 020f 	and.w	r2, r4, #15
 80066aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80066b6:	f7f9 ff9f 	bl	80005f8 <__aeabi_dmul>
 80066ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066be:	1124      	asrs	r4, r4, #4
 80066c0:	2300      	movs	r3, #0
 80066c2:	2602      	movs	r6, #2
 80066c4:	2c00      	cmp	r4, #0
 80066c6:	f040 80b2 	bne.w	800682e <_dtoa_r+0x4fe>
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1d3      	bne.n	8006676 <_dtoa_r+0x346>
 80066ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80066d0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	f000 80b7 	beq.w	8006848 <_dtoa_r+0x518>
 80066da:	4b86      	ldr	r3, [pc, #536]	@ (80068f4 <_dtoa_r+0x5c4>)
 80066dc:	2200      	movs	r2, #0
 80066de:	4620      	mov	r0, r4
 80066e0:	4629      	mov	r1, r5
 80066e2:	f7fa f9fb 	bl	8000adc <__aeabi_dcmplt>
 80066e6:	2800      	cmp	r0, #0
 80066e8:	f000 80ae 	beq.w	8006848 <_dtoa_r+0x518>
 80066ec:	9b07      	ldr	r3, [sp, #28]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f000 80aa 	beq.w	8006848 <_dtoa_r+0x518>
 80066f4:	9b00      	ldr	r3, [sp, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	dd37      	ble.n	800676a <_dtoa_r+0x43a>
 80066fa:	1e7b      	subs	r3, r7, #1
 80066fc:	9304      	str	r3, [sp, #16]
 80066fe:	4620      	mov	r0, r4
 8006700:	4b7d      	ldr	r3, [pc, #500]	@ (80068f8 <_dtoa_r+0x5c8>)
 8006702:	2200      	movs	r2, #0
 8006704:	4629      	mov	r1, r5
 8006706:	f7f9 ff77 	bl	80005f8 <__aeabi_dmul>
 800670a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800670e:	9c00      	ldr	r4, [sp, #0]
 8006710:	3601      	adds	r6, #1
 8006712:	4630      	mov	r0, r6
 8006714:	f7f9 ff06 	bl	8000524 <__aeabi_i2d>
 8006718:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800671c:	f7f9 ff6c 	bl	80005f8 <__aeabi_dmul>
 8006720:	4b76      	ldr	r3, [pc, #472]	@ (80068fc <_dtoa_r+0x5cc>)
 8006722:	2200      	movs	r2, #0
 8006724:	f7f9 fdb2 	bl	800028c <__adddf3>
 8006728:	4605      	mov	r5, r0
 800672a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800672e:	2c00      	cmp	r4, #0
 8006730:	f040 808d 	bne.w	800684e <_dtoa_r+0x51e>
 8006734:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006738:	4b71      	ldr	r3, [pc, #452]	@ (8006900 <_dtoa_r+0x5d0>)
 800673a:	2200      	movs	r2, #0
 800673c:	f7f9 fda4 	bl	8000288 <__aeabi_dsub>
 8006740:	4602      	mov	r2, r0
 8006742:	460b      	mov	r3, r1
 8006744:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006748:	462a      	mov	r2, r5
 800674a:	4633      	mov	r3, r6
 800674c:	f7fa f9e4 	bl	8000b18 <__aeabi_dcmpgt>
 8006750:	2800      	cmp	r0, #0
 8006752:	f040 828b 	bne.w	8006c6c <_dtoa_r+0x93c>
 8006756:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800675a:	462a      	mov	r2, r5
 800675c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006760:	f7fa f9bc 	bl	8000adc <__aeabi_dcmplt>
 8006764:	2800      	cmp	r0, #0
 8006766:	f040 8128 	bne.w	80069ba <_dtoa_r+0x68a>
 800676a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800676e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006772:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006774:	2b00      	cmp	r3, #0
 8006776:	f2c0 815a 	blt.w	8006a2e <_dtoa_r+0x6fe>
 800677a:	2f0e      	cmp	r7, #14
 800677c:	f300 8157 	bgt.w	8006a2e <_dtoa_r+0x6fe>
 8006780:	4b5a      	ldr	r3, [pc, #360]	@ (80068ec <_dtoa_r+0x5bc>)
 8006782:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006786:	ed93 7b00 	vldr	d7, [r3]
 800678a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800678c:	2b00      	cmp	r3, #0
 800678e:	ed8d 7b00 	vstr	d7, [sp]
 8006792:	da03      	bge.n	800679c <_dtoa_r+0x46c>
 8006794:	9b07      	ldr	r3, [sp, #28]
 8006796:	2b00      	cmp	r3, #0
 8006798:	f340 8101 	ble.w	800699e <_dtoa_r+0x66e>
 800679c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80067a0:	4656      	mov	r6, sl
 80067a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067a6:	4620      	mov	r0, r4
 80067a8:	4629      	mov	r1, r5
 80067aa:	f7fa f84f 	bl	800084c <__aeabi_ddiv>
 80067ae:	f7fa f9d3 	bl	8000b58 <__aeabi_d2iz>
 80067b2:	4680      	mov	r8, r0
 80067b4:	f7f9 feb6 	bl	8000524 <__aeabi_i2d>
 80067b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067bc:	f7f9 ff1c 	bl	80005f8 <__aeabi_dmul>
 80067c0:	4602      	mov	r2, r0
 80067c2:	460b      	mov	r3, r1
 80067c4:	4620      	mov	r0, r4
 80067c6:	4629      	mov	r1, r5
 80067c8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80067cc:	f7f9 fd5c 	bl	8000288 <__aeabi_dsub>
 80067d0:	f806 4b01 	strb.w	r4, [r6], #1
 80067d4:	9d07      	ldr	r5, [sp, #28]
 80067d6:	eba6 040a 	sub.w	r4, r6, sl
 80067da:	42a5      	cmp	r5, r4
 80067dc:	4602      	mov	r2, r0
 80067de:	460b      	mov	r3, r1
 80067e0:	f040 8117 	bne.w	8006a12 <_dtoa_r+0x6e2>
 80067e4:	f7f9 fd52 	bl	800028c <__adddf3>
 80067e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067ec:	4604      	mov	r4, r0
 80067ee:	460d      	mov	r5, r1
 80067f0:	f7fa f992 	bl	8000b18 <__aeabi_dcmpgt>
 80067f4:	2800      	cmp	r0, #0
 80067f6:	f040 80f9 	bne.w	80069ec <_dtoa_r+0x6bc>
 80067fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067fe:	4620      	mov	r0, r4
 8006800:	4629      	mov	r1, r5
 8006802:	f7fa f961 	bl	8000ac8 <__aeabi_dcmpeq>
 8006806:	b118      	cbz	r0, 8006810 <_dtoa_r+0x4e0>
 8006808:	f018 0f01 	tst.w	r8, #1
 800680c:	f040 80ee 	bne.w	80069ec <_dtoa_r+0x6bc>
 8006810:	4649      	mov	r1, r9
 8006812:	4658      	mov	r0, fp
 8006814:	f000 fc90 	bl	8007138 <_Bfree>
 8006818:	2300      	movs	r3, #0
 800681a:	7033      	strb	r3, [r6, #0]
 800681c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800681e:	3701      	adds	r7, #1
 8006820:	601f      	str	r7, [r3, #0]
 8006822:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006824:	2b00      	cmp	r3, #0
 8006826:	f000 831d 	beq.w	8006e64 <_dtoa_r+0xb34>
 800682a:	601e      	str	r6, [r3, #0]
 800682c:	e31a      	b.n	8006e64 <_dtoa_r+0xb34>
 800682e:	07e2      	lsls	r2, r4, #31
 8006830:	d505      	bpl.n	800683e <_dtoa_r+0x50e>
 8006832:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006836:	f7f9 fedf 	bl	80005f8 <__aeabi_dmul>
 800683a:	3601      	adds	r6, #1
 800683c:	2301      	movs	r3, #1
 800683e:	1064      	asrs	r4, r4, #1
 8006840:	3508      	adds	r5, #8
 8006842:	e73f      	b.n	80066c4 <_dtoa_r+0x394>
 8006844:	2602      	movs	r6, #2
 8006846:	e742      	b.n	80066ce <_dtoa_r+0x39e>
 8006848:	9c07      	ldr	r4, [sp, #28]
 800684a:	9704      	str	r7, [sp, #16]
 800684c:	e761      	b.n	8006712 <_dtoa_r+0x3e2>
 800684e:	4b27      	ldr	r3, [pc, #156]	@ (80068ec <_dtoa_r+0x5bc>)
 8006850:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006852:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006856:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800685a:	4454      	add	r4, sl
 800685c:	2900      	cmp	r1, #0
 800685e:	d053      	beq.n	8006908 <_dtoa_r+0x5d8>
 8006860:	4928      	ldr	r1, [pc, #160]	@ (8006904 <_dtoa_r+0x5d4>)
 8006862:	2000      	movs	r0, #0
 8006864:	f7f9 fff2 	bl	800084c <__aeabi_ddiv>
 8006868:	4633      	mov	r3, r6
 800686a:	462a      	mov	r2, r5
 800686c:	f7f9 fd0c 	bl	8000288 <__aeabi_dsub>
 8006870:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006874:	4656      	mov	r6, sl
 8006876:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800687a:	f7fa f96d 	bl	8000b58 <__aeabi_d2iz>
 800687e:	4605      	mov	r5, r0
 8006880:	f7f9 fe50 	bl	8000524 <__aeabi_i2d>
 8006884:	4602      	mov	r2, r0
 8006886:	460b      	mov	r3, r1
 8006888:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800688c:	f7f9 fcfc 	bl	8000288 <__aeabi_dsub>
 8006890:	3530      	adds	r5, #48	@ 0x30
 8006892:	4602      	mov	r2, r0
 8006894:	460b      	mov	r3, r1
 8006896:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800689a:	f806 5b01 	strb.w	r5, [r6], #1
 800689e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80068a2:	f7fa f91b 	bl	8000adc <__aeabi_dcmplt>
 80068a6:	2800      	cmp	r0, #0
 80068a8:	d171      	bne.n	800698e <_dtoa_r+0x65e>
 80068aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80068ae:	4911      	ldr	r1, [pc, #68]	@ (80068f4 <_dtoa_r+0x5c4>)
 80068b0:	2000      	movs	r0, #0
 80068b2:	f7f9 fce9 	bl	8000288 <__aeabi_dsub>
 80068b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80068ba:	f7fa f90f 	bl	8000adc <__aeabi_dcmplt>
 80068be:	2800      	cmp	r0, #0
 80068c0:	f040 8095 	bne.w	80069ee <_dtoa_r+0x6be>
 80068c4:	42a6      	cmp	r6, r4
 80068c6:	f43f af50 	beq.w	800676a <_dtoa_r+0x43a>
 80068ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80068ce:	4b0a      	ldr	r3, [pc, #40]	@ (80068f8 <_dtoa_r+0x5c8>)
 80068d0:	2200      	movs	r2, #0
 80068d2:	f7f9 fe91 	bl	80005f8 <__aeabi_dmul>
 80068d6:	4b08      	ldr	r3, [pc, #32]	@ (80068f8 <_dtoa_r+0x5c8>)
 80068d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80068dc:	2200      	movs	r2, #0
 80068de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068e2:	f7f9 fe89 	bl	80005f8 <__aeabi_dmul>
 80068e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068ea:	e7c4      	b.n	8006876 <_dtoa_r+0x546>
 80068ec:	08009cf8 	.word	0x08009cf8
 80068f0:	08009cd0 	.word	0x08009cd0
 80068f4:	3ff00000 	.word	0x3ff00000
 80068f8:	40240000 	.word	0x40240000
 80068fc:	401c0000 	.word	0x401c0000
 8006900:	40140000 	.word	0x40140000
 8006904:	3fe00000 	.word	0x3fe00000
 8006908:	4631      	mov	r1, r6
 800690a:	4628      	mov	r0, r5
 800690c:	f7f9 fe74 	bl	80005f8 <__aeabi_dmul>
 8006910:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006914:	9415      	str	r4, [sp, #84]	@ 0x54
 8006916:	4656      	mov	r6, sl
 8006918:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800691c:	f7fa f91c 	bl	8000b58 <__aeabi_d2iz>
 8006920:	4605      	mov	r5, r0
 8006922:	f7f9 fdff 	bl	8000524 <__aeabi_i2d>
 8006926:	4602      	mov	r2, r0
 8006928:	460b      	mov	r3, r1
 800692a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800692e:	f7f9 fcab 	bl	8000288 <__aeabi_dsub>
 8006932:	3530      	adds	r5, #48	@ 0x30
 8006934:	f806 5b01 	strb.w	r5, [r6], #1
 8006938:	4602      	mov	r2, r0
 800693a:	460b      	mov	r3, r1
 800693c:	42a6      	cmp	r6, r4
 800693e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006942:	f04f 0200 	mov.w	r2, #0
 8006946:	d124      	bne.n	8006992 <_dtoa_r+0x662>
 8006948:	4bac      	ldr	r3, [pc, #688]	@ (8006bfc <_dtoa_r+0x8cc>)
 800694a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800694e:	f7f9 fc9d 	bl	800028c <__adddf3>
 8006952:	4602      	mov	r2, r0
 8006954:	460b      	mov	r3, r1
 8006956:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800695a:	f7fa f8dd 	bl	8000b18 <__aeabi_dcmpgt>
 800695e:	2800      	cmp	r0, #0
 8006960:	d145      	bne.n	80069ee <_dtoa_r+0x6be>
 8006962:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006966:	49a5      	ldr	r1, [pc, #660]	@ (8006bfc <_dtoa_r+0x8cc>)
 8006968:	2000      	movs	r0, #0
 800696a:	f7f9 fc8d 	bl	8000288 <__aeabi_dsub>
 800696e:	4602      	mov	r2, r0
 8006970:	460b      	mov	r3, r1
 8006972:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006976:	f7fa f8b1 	bl	8000adc <__aeabi_dcmplt>
 800697a:	2800      	cmp	r0, #0
 800697c:	f43f aef5 	beq.w	800676a <_dtoa_r+0x43a>
 8006980:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006982:	1e73      	subs	r3, r6, #1
 8006984:	9315      	str	r3, [sp, #84]	@ 0x54
 8006986:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800698a:	2b30      	cmp	r3, #48	@ 0x30
 800698c:	d0f8      	beq.n	8006980 <_dtoa_r+0x650>
 800698e:	9f04      	ldr	r7, [sp, #16]
 8006990:	e73e      	b.n	8006810 <_dtoa_r+0x4e0>
 8006992:	4b9b      	ldr	r3, [pc, #620]	@ (8006c00 <_dtoa_r+0x8d0>)
 8006994:	f7f9 fe30 	bl	80005f8 <__aeabi_dmul>
 8006998:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800699c:	e7bc      	b.n	8006918 <_dtoa_r+0x5e8>
 800699e:	d10c      	bne.n	80069ba <_dtoa_r+0x68a>
 80069a0:	4b98      	ldr	r3, [pc, #608]	@ (8006c04 <_dtoa_r+0x8d4>)
 80069a2:	2200      	movs	r2, #0
 80069a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80069a8:	f7f9 fe26 	bl	80005f8 <__aeabi_dmul>
 80069ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069b0:	f7fa f8a8 	bl	8000b04 <__aeabi_dcmpge>
 80069b4:	2800      	cmp	r0, #0
 80069b6:	f000 8157 	beq.w	8006c68 <_dtoa_r+0x938>
 80069ba:	2400      	movs	r4, #0
 80069bc:	4625      	mov	r5, r4
 80069be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80069c0:	43db      	mvns	r3, r3
 80069c2:	9304      	str	r3, [sp, #16]
 80069c4:	4656      	mov	r6, sl
 80069c6:	2700      	movs	r7, #0
 80069c8:	4621      	mov	r1, r4
 80069ca:	4658      	mov	r0, fp
 80069cc:	f000 fbb4 	bl	8007138 <_Bfree>
 80069d0:	2d00      	cmp	r5, #0
 80069d2:	d0dc      	beq.n	800698e <_dtoa_r+0x65e>
 80069d4:	b12f      	cbz	r7, 80069e2 <_dtoa_r+0x6b2>
 80069d6:	42af      	cmp	r7, r5
 80069d8:	d003      	beq.n	80069e2 <_dtoa_r+0x6b2>
 80069da:	4639      	mov	r1, r7
 80069dc:	4658      	mov	r0, fp
 80069de:	f000 fbab 	bl	8007138 <_Bfree>
 80069e2:	4629      	mov	r1, r5
 80069e4:	4658      	mov	r0, fp
 80069e6:	f000 fba7 	bl	8007138 <_Bfree>
 80069ea:	e7d0      	b.n	800698e <_dtoa_r+0x65e>
 80069ec:	9704      	str	r7, [sp, #16]
 80069ee:	4633      	mov	r3, r6
 80069f0:	461e      	mov	r6, r3
 80069f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80069f6:	2a39      	cmp	r2, #57	@ 0x39
 80069f8:	d107      	bne.n	8006a0a <_dtoa_r+0x6da>
 80069fa:	459a      	cmp	sl, r3
 80069fc:	d1f8      	bne.n	80069f0 <_dtoa_r+0x6c0>
 80069fe:	9a04      	ldr	r2, [sp, #16]
 8006a00:	3201      	adds	r2, #1
 8006a02:	9204      	str	r2, [sp, #16]
 8006a04:	2230      	movs	r2, #48	@ 0x30
 8006a06:	f88a 2000 	strb.w	r2, [sl]
 8006a0a:	781a      	ldrb	r2, [r3, #0]
 8006a0c:	3201      	adds	r2, #1
 8006a0e:	701a      	strb	r2, [r3, #0]
 8006a10:	e7bd      	b.n	800698e <_dtoa_r+0x65e>
 8006a12:	4b7b      	ldr	r3, [pc, #492]	@ (8006c00 <_dtoa_r+0x8d0>)
 8006a14:	2200      	movs	r2, #0
 8006a16:	f7f9 fdef 	bl	80005f8 <__aeabi_dmul>
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	4604      	mov	r4, r0
 8006a20:	460d      	mov	r5, r1
 8006a22:	f7fa f851 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a26:	2800      	cmp	r0, #0
 8006a28:	f43f aebb 	beq.w	80067a2 <_dtoa_r+0x472>
 8006a2c:	e6f0      	b.n	8006810 <_dtoa_r+0x4e0>
 8006a2e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006a30:	2a00      	cmp	r2, #0
 8006a32:	f000 80db 	beq.w	8006bec <_dtoa_r+0x8bc>
 8006a36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a38:	2a01      	cmp	r2, #1
 8006a3a:	f300 80bf 	bgt.w	8006bbc <_dtoa_r+0x88c>
 8006a3e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006a40:	2a00      	cmp	r2, #0
 8006a42:	f000 80b7 	beq.w	8006bb4 <_dtoa_r+0x884>
 8006a46:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006a4a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006a4c:	4646      	mov	r6, r8
 8006a4e:	9a08      	ldr	r2, [sp, #32]
 8006a50:	2101      	movs	r1, #1
 8006a52:	441a      	add	r2, r3
 8006a54:	4658      	mov	r0, fp
 8006a56:	4498      	add	r8, r3
 8006a58:	9208      	str	r2, [sp, #32]
 8006a5a:	f000 fc6b 	bl	8007334 <__i2b>
 8006a5e:	4605      	mov	r5, r0
 8006a60:	b15e      	cbz	r6, 8006a7a <_dtoa_r+0x74a>
 8006a62:	9b08      	ldr	r3, [sp, #32]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	dd08      	ble.n	8006a7a <_dtoa_r+0x74a>
 8006a68:	42b3      	cmp	r3, r6
 8006a6a:	9a08      	ldr	r2, [sp, #32]
 8006a6c:	bfa8      	it	ge
 8006a6e:	4633      	movge	r3, r6
 8006a70:	eba8 0803 	sub.w	r8, r8, r3
 8006a74:	1af6      	subs	r6, r6, r3
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	9308      	str	r3, [sp, #32]
 8006a7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a7c:	b1f3      	cbz	r3, 8006abc <_dtoa_r+0x78c>
 8006a7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f000 80b7 	beq.w	8006bf4 <_dtoa_r+0x8c4>
 8006a86:	b18c      	cbz	r4, 8006aac <_dtoa_r+0x77c>
 8006a88:	4629      	mov	r1, r5
 8006a8a:	4622      	mov	r2, r4
 8006a8c:	4658      	mov	r0, fp
 8006a8e:	f000 fd11 	bl	80074b4 <__pow5mult>
 8006a92:	464a      	mov	r2, r9
 8006a94:	4601      	mov	r1, r0
 8006a96:	4605      	mov	r5, r0
 8006a98:	4658      	mov	r0, fp
 8006a9a:	f000 fc61 	bl	8007360 <__multiply>
 8006a9e:	4649      	mov	r1, r9
 8006aa0:	9004      	str	r0, [sp, #16]
 8006aa2:	4658      	mov	r0, fp
 8006aa4:	f000 fb48 	bl	8007138 <_Bfree>
 8006aa8:	9b04      	ldr	r3, [sp, #16]
 8006aaa:	4699      	mov	r9, r3
 8006aac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006aae:	1b1a      	subs	r2, r3, r4
 8006ab0:	d004      	beq.n	8006abc <_dtoa_r+0x78c>
 8006ab2:	4649      	mov	r1, r9
 8006ab4:	4658      	mov	r0, fp
 8006ab6:	f000 fcfd 	bl	80074b4 <__pow5mult>
 8006aba:	4681      	mov	r9, r0
 8006abc:	2101      	movs	r1, #1
 8006abe:	4658      	mov	r0, fp
 8006ac0:	f000 fc38 	bl	8007334 <__i2b>
 8006ac4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ac6:	4604      	mov	r4, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	f000 81cf 	beq.w	8006e6c <_dtoa_r+0xb3c>
 8006ace:	461a      	mov	r2, r3
 8006ad0:	4601      	mov	r1, r0
 8006ad2:	4658      	mov	r0, fp
 8006ad4:	f000 fcee 	bl	80074b4 <__pow5mult>
 8006ad8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	4604      	mov	r4, r0
 8006ade:	f300 8095 	bgt.w	8006c0c <_dtoa_r+0x8dc>
 8006ae2:	9b02      	ldr	r3, [sp, #8]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f040 8087 	bne.w	8006bf8 <_dtoa_r+0x8c8>
 8006aea:	9b03      	ldr	r3, [sp, #12]
 8006aec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f040 8089 	bne.w	8006c08 <_dtoa_r+0x8d8>
 8006af6:	9b03      	ldr	r3, [sp, #12]
 8006af8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006afc:	0d1b      	lsrs	r3, r3, #20
 8006afe:	051b      	lsls	r3, r3, #20
 8006b00:	b12b      	cbz	r3, 8006b0e <_dtoa_r+0x7de>
 8006b02:	9b08      	ldr	r3, [sp, #32]
 8006b04:	3301      	adds	r3, #1
 8006b06:	9308      	str	r3, [sp, #32]
 8006b08:	f108 0801 	add.w	r8, r8, #1
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	f000 81b0 	beq.w	8006e78 <_dtoa_r+0xb48>
 8006b18:	6923      	ldr	r3, [r4, #16]
 8006b1a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006b1e:	6918      	ldr	r0, [r3, #16]
 8006b20:	f000 fbbc 	bl	800729c <__hi0bits>
 8006b24:	f1c0 0020 	rsb	r0, r0, #32
 8006b28:	9b08      	ldr	r3, [sp, #32]
 8006b2a:	4418      	add	r0, r3
 8006b2c:	f010 001f 	ands.w	r0, r0, #31
 8006b30:	d077      	beq.n	8006c22 <_dtoa_r+0x8f2>
 8006b32:	f1c0 0320 	rsb	r3, r0, #32
 8006b36:	2b04      	cmp	r3, #4
 8006b38:	dd6b      	ble.n	8006c12 <_dtoa_r+0x8e2>
 8006b3a:	9b08      	ldr	r3, [sp, #32]
 8006b3c:	f1c0 001c 	rsb	r0, r0, #28
 8006b40:	4403      	add	r3, r0
 8006b42:	4480      	add	r8, r0
 8006b44:	4406      	add	r6, r0
 8006b46:	9308      	str	r3, [sp, #32]
 8006b48:	f1b8 0f00 	cmp.w	r8, #0
 8006b4c:	dd05      	ble.n	8006b5a <_dtoa_r+0x82a>
 8006b4e:	4649      	mov	r1, r9
 8006b50:	4642      	mov	r2, r8
 8006b52:	4658      	mov	r0, fp
 8006b54:	f000 fd08 	bl	8007568 <__lshift>
 8006b58:	4681      	mov	r9, r0
 8006b5a:	9b08      	ldr	r3, [sp, #32]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	dd05      	ble.n	8006b6c <_dtoa_r+0x83c>
 8006b60:	4621      	mov	r1, r4
 8006b62:	461a      	mov	r2, r3
 8006b64:	4658      	mov	r0, fp
 8006b66:	f000 fcff 	bl	8007568 <__lshift>
 8006b6a:	4604      	mov	r4, r0
 8006b6c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d059      	beq.n	8006c26 <_dtoa_r+0x8f6>
 8006b72:	4621      	mov	r1, r4
 8006b74:	4648      	mov	r0, r9
 8006b76:	f000 fd63 	bl	8007640 <__mcmp>
 8006b7a:	2800      	cmp	r0, #0
 8006b7c:	da53      	bge.n	8006c26 <_dtoa_r+0x8f6>
 8006b7e:	1e7b      	subs	r3, r7, #1
 8006b80:	9304      	str	r3, [sp, #16]
 8006b82:	4649      	mov	r1, r9
 8006b84:	2300      	movs	r3, #0
 8006b86:	220a      	movs	r2, #10
 8006b88:	4658      	mov	r0, fp
 8006b8a:	f000 faf7 	bl	800717c <__multadd>
 8006b8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b90:	4681      	mov	r9, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	f000 8172 	beq.w	8006e7c <_dtoa_r+0xb4c>
 8006b98:	2300      	movs	r3, #0
 8006b9a:	4629      	mov	r1, r5
 8006b9c:	220a      	movs	r2, #10
 8006b9e:	4658      	mov	r0, fp
 8006ba0:	f000 faec 	bl	800717c <__multadd>
 8006ba4:	9b00      	ldr	r3, [sp, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	4605      	mov	r5, r0
 8006baa:	dc67      	bgt.n	8006c7c <_dtoa_r+0x94c>
 8006bac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	dc41      	bgt.n	8006c36 <_dtoa_r+0x906>
 8006bb2:	e063      	b.n	8006c7c <_dtoa_r+0x94c>
 8006bb4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006bb6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006bba:	e746      	b.n	8006a4a <_dtoa_r+0x71a>
 8006bbc:	9b07      	ldr	r3, [sp, #28]
 8006bbe:	1e5c      	subs	r4, r3, #1
 8006bc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bc2:	42a3      	cmp	r3, r4
 8006bc4:	bfbf      	itttt	lt
 8006bc6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006bc8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006bca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006bcc:	1ae3      	sublt	r3, r4, r3
 8006bce:	bfb4      	ite	lt
 8006bd0:	18d2      	addlt	r2, r2, r3
 8006bd2:	1b1c      	subge	r4, r3, r4
 8006bd4:	9b07      	ldr	r3, [sp, #28]
 8006bd6:	bfbc      	itt	lt
 8006bd8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006bda:	2400      	movlt	r4, #0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	bfb5      	itete	lt
 8006be0:	eba8 0603 	sublt.w	r6, r8, r3
 8006be4:	9b07      	ldrge	r3, [sp, #28]
 8006be6:	2300      	movlt	r3, #0
 8006be8:	4646      	movge	r6, r8
 8006bea:	e730      	b.n	8006a4e <_dtoa_r+0x71e>
 8006bec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006bee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006bf0:	4646      	mov	r6, r8
 8006bf2:	e735      	b.n	8006a60 <_dtoa_r+0x730>
 8006bf4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006bf6:	e75c      	b.n	8006ab2 <_dtoa_r+0x782>
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	e788      	b.n	8006b0e <_dtoa_r+0x7de>
 8006bfc:	3fe00000 	.word	0x3fe00000
 8006c00:	40240000 	.word	0x40240000
 8006c04:	40140000 	.word	0x40140000
 8006c08:	9b02      	ldr	r3, [sp, #8]
 8006c0a:	e780      	b.n	8006b0e <_dtoa_r+0x7de>
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c10:	e782      	b.n	8006b18 <_dtoa_r+0x7e8>
 8006c12:	d099      	beq.n	8006b48 <_dtoa_r+0x818>
 8006c14:	9a08      	ldr	r2, [sp, #32]
 8006c16:	331c      	adds	r3, #28
 8006c18:	441a      	add	r2, r3
 8006c1a:	4498      	add	r8, r3
 8006c1c:	441e      	add	r6, r3
 8006c1e:	9208      	str	r2, [sp, #32]
 8006c20:	e792      	b.n	8006b48 <_dtoa_r+0x818>
 8006c22:	4603      	mov	r3, r0
 8006c24:	e7f6      	b.n	8006c14 <_dtoa_r+0x8e4>
 8006c26:	9b07      	ldr	r3, [sp, #28]
 8006c28:	9704      	str	r7, [sp, #16]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	dc20      	bgt.n	8006c70 <_dtoa_r+0x940>
 8006c2e:	9300      	str	r3, [sp, #0]
 8006c30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	dd1e      	ble.n	8006c74 <_dtoa_r+0x944>
 8006c36:	9b00      	ldr	r3, [sp, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	f47f aec0 	bne.w	80069be <_dtoa_r+0x68e>
 8006c3e:	4621      	mov	r1, r4
 8006c40:	2205      	movs	r2, #5
 8006c42:	4658      	mov	r0, fp
 8006c44:	f000 fa9a 	bl	800717c <__multadd>
 8006c48:	4601      	mov	r1, r0
 8006c4a:	4604      	mov	r4, r0
 8006c4c:	4648      	mov	r0, r9
 8006c4e:	f000 fcf7 	bl	8007640 <__mcmp>
 8006c52:	2800      	cmp	r0, #0
 8006c54:	f77f aeb3 	ble.w	80069be <_dtoa_r+0x68e>
 8006c58:	4656      	mov	r6, sl
 8006c5a:	2331      	movs	r3, #49	@ 0x31
 8006c5c:	f806 3b01 	strb.w	r3, [r6], #1
 8006c60:	9b04      	ldr	r3, [sp, #16]
 8006c62:	3301      	adds	r3, #1
 8006c64:	9304      	str	r3, [sp, #16]
 8006c66:	e6ae      	b.n	80069c6 <_dtoa_r+0x696>
 8006c68:	9c07      	ldr	r4, [sp, #28]
 8006c6a:	9704      	str	r7, [sp, #16]
 8006c6c:	4625      	mov	r5, r4
 8006c6e:	e7f3      	b.n	8006c58 <_dtoa_r+0x928>
 8006c70:	9b07      	ldr	r3, [sp, #28]
 8006c72:	9300      	str	r3, [sp, #0]
 8006c74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	f000 8104 	beq.w	8006e84 <_dtoa_r+0xb54>
 8006c7c:	2e00      	cmp	r6, #0
 8006c7e:	dd05      	ble.n	8006c8c <_dtoa_r+0x95c>
 8006c80:	4629      	mov	r1, r5
 8006c82:	4632      	mov	r2, r6
 8006c84:	4658      	mov	r0, fp
 8006c86:	f000 fc6f 	bl	8007568 <__lshift>
 8006c8a:	4605      	mov	r5, r0
 8006c8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d05a      	beq.n	8006d48 <_dtoa_r+0xa18>
 8006c92:	6869      	ldr	r1, [r5, #4]
 8006c94:	4658      	mov	r0, fp
 8006c96:	f000 fa0f 	bl	80070b8 <_Balloc>
 8006c9a:	4606      	mov	r6, r0
 8006c9c:	b928      	cbnz	r0, 8006caa <_dtoa_r+0x97a>
 8006c9e:	4b84      	ldr	r3, [pc, #528]	@ (8006eb0 <_dtoa_r+0xb80>)
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006ca6:	f7ff bb5a 	b.w	800635e <_dtoa_r+0x2e>
 8006caa:	692a      	ldr	r2, [r5, #16]
 8006cac:	3202      	adds	r2, #2
 8006cae:	0092      	lsls	r2, r2, #2
 8006cb0:	f105 010c 	add.w	r1, r5, #12
 8006cb4:	300c      	adds	r0, #12
 8006cb6:	f001 ff75 	bl	8008ba4 <memcpy>
 8006cba:	2201      	movs	r2, #1
 8006cbc:	4631      	mov	r1, r6
 8006cbe:	4658      	mov	r0, fp
 8006cc0:	f000 fc52 	bl	8007568 <__lshift>
 8006cc4:	f10a 0301 	add.w	r3, sl, #1
 8006cc8:	9307      	str	r3, [sp, #28]
 8006cca:	9b00      	ldr	r3, [sp, #0]
 8006ccc:	4453      	add	r3, sl
 8006cce:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006cd0:	9b02      	ldr	r3, [sp, #8]
 8006cd2:	f003 0301 	and.w	r3, r3, #1
 8006cd6:	462f      	mov	r7, r5
 8006cd8:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cda:	4605      	mov	r5, r0
 8006cdc:	9b07      	ldr	r3, [sp, #28]
 8006cde:	4621      	mov	r1, r4
 8006ce0:	3b01      	subs	r3, #1
 8006ce2:	4648      	mov	r0, r9
 8006ce4:	9300      	str	r3, [sp, #0]
 8006ce6:	f7ff fa99 	bl	800621c <quorem>
 8006cea:	4639      	mov	r1, r7
 8006cec:	9002      	str	r0, [sp, #8]
 8006cee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006cf2:	4648      	mov	r0, r9
 8006cf4:	f000 fca4 	bl	8007640 <__mcmp>
 8006cf8:	462a      	mov	r2, r5
 8006cfa:	9008      	str	r0, [sp, #32]
 8006cfc:	4621      	mov	r1, r4
 8006cfe:	4658      	mov	r0, fp
 8006d00:	f000 fcba 	bl	8007678 <__mdiff>
 8006d04:	68c2      	ldr	r2, [r0, #12]
 8006d06:	4606      	mov	r6, r0
 8006d08:	bb02      	cbnz	r2, 8006d4c <_dtoa_r+0xa1c>
 8006d0a:	4601      	mov	r1, r0
 8006d0c:	4648      	mov	r0, r9
 8006d0e:	f000 fc97 	bl	8007640 <__mcmp>
 8006d12:	4602      	mov	r2, r0
 8006d14:	4631      	mov	r1, r6
 8006d16:	4658      	mov	r0, fp
 8006d18:	920e      	str	r2, [sp, #56]	@ 0x38
 8006d1a:	f000 fa0d 	bl	8007138 <_Bfree>
 8006d1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006d22:	9e07      	ldr	r6, [sp, #28]
 8006d24:	ea43 0102 	orr.w	r1, r3, r2
 8006d28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d2a:	4319      	orrs	r1, r3
 8006d2c:	d110      	bne.n	8006d50 <_dtoa_r+0xa20>
 8006d2e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006d32:	d029      	beq.n	8006d88 <_dtoa_r+0xa58>
 8006d34:	9b08      	ldr	r3, [sp, #32]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	dd02      	ble.n	8006d40 <_dtoa_r+0xa10>
 8006d3a:	9b02      	ldr	r3, [sp, #8]
 8006d3c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006d40:	9b00      	ldr	r3, [sp, #0]
 8006d42:	f883 8000 	strb.w	r8, [r3]
 8006d46:	e63f      	b.n	80069c8 <_dtoa_r+0x698>
 8006d48:	4628      	mov	r0, r5
 8006d4a:	e7bb      	b.n	8006cc4 <_dtoa_r+0x994>
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	e7e1      	b.n	8006d14 <_dtoa_r+0x9e4>
 8006d50:	9b08      	ldr	r3, [sp, #32]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	db04      	blt.n	8006d60 <_dtoa_r+0xa30>
 8006d56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006d58:	430b      	orrs	r3, r1
 8006d5a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006d5c:	430b      	orrs	r3, r1
 8006d5e:	d120      	bne.n	8006da2 <_dtoa_r+0xa72>
 8006d60:	2a00      	cmp	r2, #0
 8006d62:	dded      	ble.n	8006d40 <_dtoa_r+0xa10>
 8006d64:	4649      	mov	r1, r9
 8006d66:	2201      	movs	r2, #1
 8006d68:	4658      	mov	r0, fp
 8006d6a:	f000 fbfd 	bl	8007568 <__lshift>
 8006d6e:	4621      	mov	r1, r4
 8006d70:	4681      	mov	r9, r0
 8006d72:	f000 fc65 	bl	8007640 <__mcmp>
 8006d76:	2800      	cmp	r0, #0
 8006d78:	dc03      	bgt.n	8006d82 <_dtoa_r+0xa52>
 8006d7a:	d1e1      	bne.n	8006d40 <_dtoa_r+0xa10>
 8006d7c:	f018 0f01 	tst.w	r8, #1
 8006d80:	d0de      	beq.n	8006d40 <_dtoa_r+0xa10>
 8006d82:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006d86:	d1d8      	bne.n	8006d3a <_dtoa_r+0xa0a>
 8006d88:	9a00      	ldr	r2, [sp, #0]
 8006d8a:	2339      	movs	r3, #57	@ 0x39
 8006d8c:	7013      	strb	r3, [r2, #0]
 8006d8e:	4633      	mov	r3, r6
 8006d90:	461e      	mov	r6, r3
 8006d92:	3b01      	subs	r3, #1
 8006d94:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006d98:	2a39      	cmp	r2, #57	@ 0x39
 8006d9a:	d052      	beq.n	8006e42 <_dtoa_r+0xb12>
 8006d9c:	3201      	adds	r2, #1
 8006d9e:	701a      	strb	r2, [r3, #0]
 8006da0:	e612      	b.n	80069c8 <_dtoa_r+0x698>
 8006da2:	2a00      	cmp	r2, #0
 8006da4:	dd07      	ble.n	8006db6 <_dtoa_r+0xa86>
 8006da6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006daa:	d0ed      	beq.n	8006d88 <_dtoa_r+0xa58>
 8006dac:	9a00      	ldr	r2, [sp, #0]
 8006dae:	f108 0301 	add.w	r3, r8, #1
 8006db2:	7013      	strb	r3, [r2, #0]
 8006db4:	e608      	b.n	80069c8 <_dtoa_r+0x698>
 8006db6:	9b07      	ldr	r3, [sp, #28]
 8006db8:	9a07      	ldr	r2, [sp, #28]
 8006dba:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006dbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d028      	beq.n	8006e16 <_dtoa_r+0xae6>
 8006dc4:	4649      	mov	r1, r9
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	220a      	movs	r2, #10
 8006dca:	4658      	mov	r0, fp
 8006dcc:	f000 f9d6 	bl	800717c <__multadd>
 8006dd0:	42af      	cmp	r7, r5
 8006dd2:	4681      	mov	r9, r0
 8006dd4:	f04f 0300 	mov.w	r3, #0
 8006dd8:	f04f 020a 	mov.w	r2, #10
 8006ddc:	4639      	mov	r1, r7
 8006dde:	4658      	mov	r0, fp
 8006de0:	d107      	bne.n	8006df2 <_dtoa_r+0xac2>
 8006de2:	f000 f9cb 	bl	800717c <__multadd>
 8006de6:	4607      	mov	r7, r0
 8006de8:	4605      	mov	r5, r0
 8006dea:	9b07      	ldr	r3, [sp, #28]
 8006dec:	3301      	adds	r3, #1
 8006dee:	9307      	str	r3, [sp, #28]
 8006df0:	e774      	b.n	8006cdc <_dtoa_r+0x9ac>
 8006df2:	f000 f9c3 	bl	800717c <__multadd>
 8006df6:	4629      	mov	r1, r5
 8006df8:	4607      	mov	r7, r0
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	220a      	movs	r2, #10
 8006dfe:	4658      	mov	r0, fp
 8006e00:	f000 f9bc 	bl	800717c <__multadd>
 8006e04:	4605      	mov	r5, r0
 8006e06:	e7f0      	b.n	8006dea <_dtoa_r+0xaba>
 8006e08:	9b00      	ldr	r3, [sp, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	bfcc      	ite	gt
 8006e0e:	461e      	movgt	r6, r3
 8006e10:	2601      	movle	r6, #1
 8006e12:	4456      	add	r6, sl
 8006e14:	2700      	movs	r7, #0
 8006e16:	4649      	mov	r1, r9
 8006e18:	2201      	movs	r2, #1
 8006e1a:	4658      	mov	r0, fp
 8006e1c:	f000 fba4 	bl	8007568 <__lshift>
 8006e20:	4621      	mov	r1, r4
 8006e22:	4681      	mov	r9, r0
 8006e24:	f000 fc0c 	bl	8007640 <__mcmp>
 8006e28:	2800      	cmp	r0, #0
 8006e2a:	dcb0      	bgt.n	8006d8e <_dtoa_r+0xa5e>
 8006e2c:	d102      	bne.n	8006e34 <_dtoa_r+0xb04>
 8006e2e:	f018 0f01 	tst.w	r8, #1
 8006e32:	d1ac      	bne.n	8006d8e <_dtoa_r+0xa5e>
 8006e34:	4633      	mov	r3, r6
 8006e36:	461e      	mov	r6, r3
 8006e38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e3c:	2a30      	cmp	r2, #48	@ 0x30
 8006e3e:	d0fa      	beq.n	8006e36 <_dtoa_r+0xb06>
 8006e40:	e5c2      	b.n	80069c8 <_dtoa_r+0x698>
 8006e42:	459a      	cmp	sl, r3
 8006e44:	d1a4      	bne.n	8006d90 <_dtoa_r+0xa60>
 8006e46:	9b04      	ldr	r3, [sp, #16]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	9304      	str	r3, [sp, #16]
 8006e4c:	2331      	movs	r3, #49	@ 0x31
 8006e4e:	f88a 3000 	strb.w	r3, [sl]
 8006e52:	e5b9      	b.n	80069c8 <_dtoa_r+0x698>
 8006e54:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006e56:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006eb4 <_dtoa_r+0xb84>
 8006e5a:	b11b      	cbz	r3, 8006e64 <_dtoa_r+0xb34>
 8006e5c:	f10a 0308 	add.w	r3, sl, #8
 8006e60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006e62:	6013      	str	r3, [r2, #0]
 8006e64:	4650      	mov	r0, sl
 8006e66:	b019      	add	sp, #100	@ 0x64
 8006e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	f77f ae37 	ble.w	8006ae2 <_dtoa_r+0x7b2>
 8006e74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e76:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e78:	2001      	movs	r0, #1
 8006e7a:	e655      	b.n	8006b28 <_dtoa_r+0x7f8>
 8006e7c:	9b00      	ldr	r3, [sp, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	f77f aed6 	ble.w	8006c30 <_dtoa_r+0x900>
 8006e84:	4656      	mov	r6, sl
 8006e86:	4621      	mov	r1, r4
 8006e88:	4648      	mov	r0, r9
 8006e8a:	f7ff f9c7 	bl	800621c <quorem>
 8006e8e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006e92:	f806 8b01 	strb.w	r8, [r6], #1
 8006e96:	9b00      	ldr	r3, [sp, #0]
 8006e98:	eba6 020a 	sub.w	r2, r6, sl
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	ddb3      	ble.n	8006e08 <_dtoa_r+0xad8>
 8006ea0:	4649      	mov	r1, r9
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	220a      	movs	r2, #10
 8006ea6:	4658      	mov	r0, fp
 8006ea8:	f000 f968 	bl	800717c <__multadd>
 8006eac:	4681      	mov	r9, r0
 8006eae:	e7ea      	b.n	8006e86 <_dtoa_r+0xb56>
 8006eb0:	08009c55 	.word	0x08009c55
 8006eb4:	08009bd9 	.word	0x08009bd9

08006eb8 <_free_r>:
 8006eb8:	b538      	push	{r3, r4, r5, lr}
 8006eba:	4605      	mov	r5, r0
 8006ebc:	2900      	cmp	r1, #0
 8006ebe:	d041      	beq.n	8006f44 <_free_r+0x8c>
 8006ec0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ec4:	1f0c      	subs	r4, r1, #4
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	bfb8      	it	lt
 8006eca:	18e4      	addlt	r4, r4, r3
 8006ecc:	f000 f8e8 	bl	80070a0 <__malloc_lock>
 8006ed0:	4a1d      	ldr	r2, [pc, #116]	@ (8006f48 <_free_r+0x90>)
 8006ed2:	6813      	ldr	r3, [r2, #0]
 8006ed4:	b933      	cbnz	r3, 8006ee4 <_free_r+0x2c>
 8006ed6:	6063      	str	r3, [r4, #4]
 8006ed8:	6014      	str	r4, [r2, #0]
 8006eda:	4628      	mov	r0, r5
 8006edc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ee0:	f000 b8e4 	b.w	80070ac <__malloc_unlock>
 8006ee4:	42a3      	cmp	r3, r4
 8006ee6:	d908      	bls.n	8006efa <_free_r+0x42>
 8006ee8:	6820      	ldr	r0, [r4, #0]
 8006eea:	1821      	adds	r1, r4, r0
 8006eec:	428b      	cmp	r3, r1
 8006eee:	bf01      	itttt	eq
 8006ef0:	6819      	ldreq	r1, [r3, #0]
 8006ef2:	685b      	ldreq	r3, [r3, #4]
 8006ef4:	1809      	addeq	r1, r1, r0
 8006ef6:	6021      	streq	r1, [r4, #0]
 8006ef8:	e7ed      	b.n	8006ed6 <_free_r+0x1e>
 8006efa:	461a      	mov	r2, r3
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	b10b      	cbz	r3, 8006f04 <_free_r+0x4c>
 8006f00:	42a3      	cmp	r3, r4
 8006f02:	d9fa      	bls.n	8006efa <_free_r+0x42>
 8006f04:	6811      	ldr	r1, [r2, #0]
 8006f06:	1850      	adds	r0, r2, r1
 8006f08:	42a0      	cmp	r0, r4
 8006f0a:	d10b      	bne.n	8006f24 <_free_r+0x6c>
 8006f0c:	6820      	ldr	r0, [r4, #0]
 8006f0e:	4401      	add	r1, r0
 8006f10:	1850      	adds	r0, r2, r1
 8006f12:	4283      	cmp	r3, r0
 8006f14:	6011      	str	r1, [r2, #0]
 8006f16:	d1e0      	bne.n	8006eda <_free_r+0x22>
 8006f18:	6818      	ldr	r0, [r3, #0]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	6053      	str	r3, [r2, #4]
 8006f1e:	4408      	add	r0, r1
 8006f20:	6010      	str	r0, [r2, #0]
 8006f22:	e7da      	b.n	8006eda <_free_r+0x22>
 8006f24:	d902      	bls.n	8006f2c <_free_r+0x74>
 8006f26:	230c      	movs	r3, #12
 8006f28:	602b      	str	r3, [r5, #0]
 8006f2a:	e7d6      	b.n	8006eda <_free_r+0x22>
 8006f2c:	6820      	ldr	r0, [r4, #0]
 8006f2e:	1821      	adds	r1, r4, r0
 8006f30:	428b      	cmp	r3, r1
 8006f32:	bf04      	itt	eq
 8006f34:	6819      	ldreq	r1, [r3, #0]
 8006f36:	685b      	ldreq	r3, [r3, #4]
 8006f38:	6063      	str	r3, [r4, #4]
 8006f3a:	bf04      	itt	eq
 8006f3c:	1809      	addeq	r1, r1, r0
 8006f3e:	6021      	streq	r1, [r4, #0]
 8006f40:	6054      	str	r4, [r2, #4]
 8006f42:	e7ca      	b.n	8006eda <_free_r+0x22>
 8006f44:	bd38      	pop	{r3, r4, r5, pc}
 8006f46:	bf00      	nop
 8006f48:	20000448 	.word	0x20000448

08006f4c <malloc>:
 8006f4c:	4b02      	ldr	r3, [pc, #8]	@ (8006f58 <malloc+0xc>)
 8006f4e:	4601      	mov	r1, r0
 8006f50:	6818      	ldr	r0, [r3, #0]
 8006f52:	f000 b825 	b.w	8006fa0 <_malloc_r>
 8006f56:	bf00      	nop
 8006f58:	20000018 	.word	0x20000018

08006f5c <sbrk_aligned>:
 8006f5c:	b570      	push	{r4, r5, r6, lr}
 8006f5e:	4e0f      	ldr	r6, [pc, #60]	@ (8006f9c <sbrk_aligned+0x40>)
 8006f60:	460c      	mov	r4, r1
 8006f62:	6831      	ldr	r1, [r6, #0]
 8006f64:	4605      	mov	r5, r0
 8006f66:	b911      	cbnz	r1, 8006f6e <sbrk_aligned+0x12>
 8006f68:	f001 fe0c 	bl	8008b84 <_sbrk_r>
 8006f6c:	6030      	str	r0, [r6, #0]
 8006f6e:	4621      	mov	r1, r4
 8006f70:	4628      	mov	r0, r5
 8006f72:	f001 fe07 	bl	8008b84 <_sbrk_r>
 8006f76:	1c43      	adds	r3, r0, #1
 8006f78:	d103      	bne.n	8006f82 <sbrk_aligned+0x26>
 8006f7a:	f04f 34ff 	mov.w	r4, #4294967295
 8006f7e:	4620      	mov	r0, r4
 8006f80:	bd70      	pop	{r4, r5, r6, pc}
 8006f82:	1cc4      	adds	r4, r0, #3
 8006f84:	f024 0403 	bic.w	r4, r4, #3
 8006f88:	42a0      	cmp	r0, r4
 8006f8a:	d0f8      	beq.n	8006f7e <sbrk_aligned+0x22>
 8006f8c:	1a21      	subs	r1, r4, r0
 8006f8e:	4628      	mov	r0, r5
 8006f90:	f001 fdf8 	bl	8008b84 <_sbrk_r>
 8006f94:	3001      	adds	r0, #1
 8006f96:	d1f2      	bne.n	8006f7e <sbrk_aligned+0x22>
 8006f98:	e7ef      	b.n	8006f7a <sbrk_aligned+0x1e>
 8006f9a:	bf00      	nop
 8006f9c:	20000444 	.word	0x20000444

08006fa0 <_malloc_r>:
 8006fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fa4:	1ccd      	adds	r5, r1, #3
 8006fa6:	f025 0503 	bic.w	r5, r5, #3
 8006faa:	3508      	adds	r5, #8
 8006fac:	2d0c      	cmp	r5, #12
 8006fae:	bf38      	it	cc
 8006fb0:	250c      	movcc	r5, #12
 8006fb2:	2d00      	cmp	r5, #0
 8006fb4:	4606      	mov	r6, r0
 8006fb6:	db01      	blt.n	8006fbc <_malloc_r+0x1c>
 8006fb8:	42a9      	cmp	r1, r5
 8006fba:	d904      	bls.n	8006fc6 <_malloc_r+0x26>
 8006fbc:	230c      	movs	r3, #12
 8006fbe:	6033      	str	r3, [r6, #0]
 8006fc0:	2000      	movs	r0, #0
 8006fc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800709c <_malloc_r+0xfc>
 8006fca:	f000 f869 	bl	80070a0 <__malloc_lock>
 8006fce:	f8d8 3000 	ldr.w	r3, [r8]
 8006fd2:	461c      	mov	r4, r3
 8006fd4:	bb44      	cbnz	r4, 8007028 <_malloc_r+0x88>
 8006fd6:	4629      	mov	r1, r5
 8006fd8:	4630      	mov	r0, r6
 8006fda:	f7ff ffbf 	bl	8006f5c <sbrk_aligned>
 8006fde:	1c43      	adds	r3, r0, #1
 8006fe0:	4604      	mov	r4, r0
 8006fe2:	d158      	bne.n	8007096 <_malloc_r+0xf6>
 8006fe4:	f8d8 4000 	ldr.w	r4, [r8]
 8006fe8:	4627      	mov	r7, r4
 8006fea:	2f00      	cmp	r7, #0
 8006fec:	d143      	bne.n	8007076 <_malloc_r+0xd6>
 8006fee:	2c00      	cmp	r4, #0
 8006ff0:	d04b      	beq.n	800708a <_malloc_r+0xea>
 8006ff2:	6823      	ldr	r3, [r4, #0]
 8006ff4:	4639      	mov	r1, r7
 8006ff6:	4630      	mov	r0, r6
 8006ff8:	eb04 0903 	add.w	r9, r4, r3
 8006ffc:	f001 fdc2 	bl	8008b84 <_sbrk_r>
 8007000:	4581      	cmp	r9, r0
 8007002:	d142      	bne.n	800708a <_malloc_r+0xea>
 8007004:	6821      	ldr	r1, [r4, #0]
 8007006:	1a6d      	subs	r5, r5, r1
 8007008:	4629      	mov	r1, r5
 800700a:	4630      	mov	r0, r6
 800700c:	f7ff ffa6 	bl	8006f5c <sbrk_aligned>
 8007010:	3001      	adds	r0, #1
 8007012:	d03a      	beq.n	800708a <_malloc_r+0xea>
 8007014:	6823      	ldr	r3, [r4, #0]
 8007016:	442b      	add	r3, r5
 8007018:	6023      	str	r3, [r4, #0]
 800701a:	f8d8 3000 	ldr.w	r3, [r8]
 800701e:	685a      	ldr	r2, [r3, #4]
 8007020:	bb62      	cbnz	r2, 800707c <_malloc_r+0xdc>
 8007022:	f8c8 7000 	str.w	r7, [r8]
 8007026:	e00f      	b.n	8007048 <_malloc_r+0xa8>
 8007028:	6822      	ldr	r2, [r4, #0]
 800702a:	1b52      	subs	r2, r2, r5
 800702c:	d420      	bmi.n	8007070 <_malloc_r+0xd0>
 800702e:	2a0b      	cmp	r2, #11
 8007030:	d917      	bls.n	8007062 <_malloc_r+0xc2>
 8007032:	1961      	adds	r1, r4, r5
 8007034:	42a3      	cmp	r3, r4
 8007036:	6025      	str	r5, [r4, #0]
 8007038:	bf18      	it	ne
 800703a:	6059      	strne	r1, [r3, #4]
 800703c:	6863      	ldr	r3, [r4, #4]
 800703e:	bf08      	it	eq
 8007040:	f8c8 1000 	streq.w	r1, [r8]
 8007044:	5162      	str	r2, [r4, r5]
 8007046:	604b      	str	r3, [r1, #4]
 8007048:	4630      	mov	r0, r6
 800704a:	f000 f82f 	bl	80070ac <__malloc_unlock>
 800704e:	f104 000b 	add.w	r0, r4, #11
 8007052:	1d23      	adds	r3, r4, #4
 8007054:	f020 0007 	bic.w	r0, r0, #7
 8007058:	1ac2      	subs	r2, r0, r3
 800705a:	bf1c      	itt	ne
 800705c:	1a1b      	subne	r3, r3, r0
 800705e:	50a3      	strne	r3, [r4, r2]
 8007060:	e7af      	b.n	8006fc2 <_malloc_r+0x22>
 8007062:	6862      	ldr	r2, [r4, #4]
 8007064:	42a3      	cmp	r3, r4
 8007066:	bf0c      	ite	eq
 8007068:	f8c8 2000 	streq.w	r2, [r8]
 800706c:	605a      	strne	r2, [r3, #4]
 800706e:	e7eb      	b.n	8007048 <_malloc_r+0xa8>
 8007070:	4623      	mov	r3, r4
 8007072:	6864      	ldr	r4, [r4, #4]
 8007074:	e7ae      	b.n	8006fd4 <_malloc_r+0x34>
 8007076:	463c      	mov	r4, r7
 8007078:	687f      	ldr	r7, [r7, #4]
 800707a:	e7b6      	b.n	8006fea <_malloc_r+0x4a>
 800707c:	461a      	mov	r2, r3
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	42a3      	cmp	r3, r4
 8007082:	d1fb      	bne.n	800707c <_malloc_r+0xdc>
 8007084:	2300      	movs	r3, #0
 8007086:	6053      	str	r3, [r2, #4]
 8007088:	e7de      	b.n	8007048 <_malloc_r+0xa8>
 800708a:	230c      	movs	r3, #12
 800708c:	6033      	str	r3, [r6, #0]
 800708e:	4630      	mov	r0, r6
 8007090:	f000 f80c 	bl	80070ac <__malloc_unlock>
 8007094:	e794      	b.n	8006fc0 <_malloc_r+0x20>
 8007096:	6005      	str	r5, [r0, #0]
 8007098:	e7d6      	b.n	8007048 <_malloc_r+0xa8>
 800709a:	bf00      	nop
 800709c:	20000448 	.word	0x20000448

080070a0 <__malloc_lock>:
 80070a0:	4801      	ldr	r0, [pc, #4]	@ (80070a8 <__malloc_lock+0x8>)
 80070a2:	f7ff b8b2 	b.w	800620a <__retarget_lock_acquire_recursive>
 80070a6:	bf00      	nop
 80070a8:	20000440 	.word	0x20000440

080070ac <__malloc_unlock>:
 80070ac:	4801      	ldr	r0, [pc, #4]	@ (80070b4 <__malloc_unlock+0x8>)
 80070ae:	f7ff b8ad 	b.w	800620c <__retarget_lock_release_recursive>
 80070b2:	bf00      	nop
 80070b4:	20000440 	.word	0x20000440

080070b8 <_Balloc>:
 80070b8:	b570      	push	{r4, r5, r6, lr}
 80070ba:	69c6      	ldr	r6, [r0, #28]
 80070bc:	4604      	mov	r4, r0
 80070be:	460d      	mov	r5, r1
 80070c0:	b976      	cbnz	r6, 80070e0 <_Balloc+0x28>
 80070c2:	2010      	movs	r0, #16
 80070c4:	f7ff ff42 	bl	8006f4c <malloc>
 80070c8:	4602      	mov	r2, r0
 80070ca:	61e0      	str	r0, [r4, #28]
 80070cc:	b920      	cbnz	r0, 80070d8 <_Balloc+0x20>
 80070ce:	4b18      	ldr	r3, [pc, #96]	@ (8007130 <_Balloc+0x78>)
 80070d0:	4818      	ldr	r0, [pc, #96]	@ (8007134 <_Balloc+0x7c>)
 80070d2:	216b      	movs	r1, #107	@ 0x6b
 80070d4:	f001 fd7c 	bl	8008bd0 <__assert_func>
 80070d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070dc:	6006      	str	r6, [r0, #0]
 80070de:	60c6      	str	r6, [r0, #12]
 80070e0:	69e6      	ldr	r6, [r4, #28]
 80070e2:	68f3      	ldr	r3, [r6, #12]
 80070e4:	b183      	cbz	r3, 8007108 <_Balloc+0x50>
 80070e6:	69e3      	ldr	r3, [r4, #28]
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80070ee:	b9b8      	cbnz	r0, 8007120 <_Balloc+0x68>
 80070f0:	2101      	movs	r1, #1
 80070f2:	fa01 f605 	lsl.w	r6, r1, r5
 80070f6:	1d72      	adds	r2, r6, #5
 80070f8:	0092      	lsls	r2, r2, #2
 80070fa:	4620      	mov	r0, r4
 80070fc:	f001 fd86 	bl	8008c0c <_calloc_r>
 8007100:	b160      	cbz	r0, 800711c <_Balloc+0x64>
 8007102:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007106:	e00e      	b.n	8007126 <_Balloc+0x6e>
 8007108:	2221      	movs	r2, #33	@ 0x21
 800710a:	2104      	movs	r1, #4
 800710c:	4620      	mov	r0, r4
 800710e:	f001 fd7d 	bl	8008c0c <_calloc_r>
 8007112:	69e3      	ldr	r3, [r4, #28]
 8007114:	60f0      	str	r0, [r6, #12]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d1e4      	bne.n	80070e6 <_Balloc+0x2e>
 800711c:	2000      	movs	r0, #0
 800711e:	bd70      	pop	{r4, r5, r6, pc}
 8007120:	6802      	ldr	r2, [r0, #0]
 8007122:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007126:	2300      	movs	r3, #0
 8007128:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800712c:	e7f7      	b.n	800711e <_Balloc+0x66>
 800712e:	bf00      	nop
 8007130:	08009be6 	.word	0x08009be6
 8007134:	08009c66 	.word	0x08009c66

08007138 <_Bfree>:
 8007138:	b570      	push	{r4, r5, r6, lr}
 800713a:	69c6      	ldr	r6, [r0, #28]
 800713c:	4605      	mov	r5, r0
 800713e:	460c      	mov	r4, r1
 8007140:	b976      	cbnz	r6, 8007160 <_Bfree+0x28>
 8007142:	2010      	movs	r0, #16
 8007144:	f7ff ff02 	bl	8006f4c <malloc>
 8007148:	4602      	mov	r2, r0
 800714a:	61e8      	str	r0, [r5, #28]
 800714c:	b920      	cbnz	r0, 8007158 <_Bfree+0x20>
 800714e:	4b09      	ldr	r3, [pc, #36]	@ (8007174 <_Bfree+0x3c>)
 8007150:	4809      	ldr	r0, [pc, #36]	@ (8007178 <_Bfree+0x40>)
 8007152:	218f      	movs	r1, #143	@ 0x8f
 8007154:	f001 fd3c 	bl	8008bd0 <__assert_func>
 8007158:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800715c:	6006      	str	r6, [r0, #0]
 800715e:	60c6      	str	r6, [r0, #12]
 8007160:	b13c      	cbz	r4, 8007172 <_Bfree+0x3a>
 8007162:	69eb      	ldr	r3, [r5, #28]
 8007164:	6862      	ldr	r2, [r4, #4]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800716c:	6021      	str	r1, [r4, #0]
 800716e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007172:	bd70      	pop	{r4, r5, r6, pc}
 8007174:	08009be6 	.word	0x08009be6
 8007178:	08009c66 	.word	0x08009c66

0800717c <__multadd>:
 800717c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007180:	690d      	ldr	r5, [r1, #16]
 8007182:	4607      	mov	r7, r0
 8007184:	460c      	mov	r4, r1
 8007186:	461e      	mov	r6, r3
 8007188:	f101 0c14 	add.w	ip, r1, #20
 800718c:	2000      	movs	r0, #0
 800718e:	f8dc 3000 	ldr.w	r3, [ip]
 8007192:	b299      	uxth	r1, r3
 8007194:	fb02 6101 	mla	r1, r2, r1, r6
 8007198:	0c1e      	lsrs	r6, r3, #16
 800719a:	0c0b      	lsrs	r3, r1, #16
 800719c:	fb02 3306 	mla	r3, r2, r6, r3
 80071a0:	b289      	uxth	r1, r1
 80071a2:	3001      	adds	r0, #1
 80071a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80071a8:	4285      	cmp	r5, r0
 80071aa:	f84c 1b04 	str.w	r1, [ip], #4
 80071ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80071b2:	dcec      	bgt.n	800718e <__multadd+0x12>
 80071b4:	b30e      	cbz	r6, 80071fa <__multadd+0x7e>
 80071b6:	68a3      	ldr	r3, [r4, #8]
 80071b8:	42ab      	cmp	r3, r5
 80071ba:	dc19      	bgt.n	80071f0 <__multadd+0x74>
 80071bc:	6861      	ldr	r1, [r4, #4]
 80071be:	4638      	mov	r0, r7
 80071c0:	3101      	adds	r1, #1
 80071c2:	f7ff ff79 	bl	80070b8 <_Balloc>
 80071c6:	4680      	mov	r8, r0
 80071c8:	b928      	cbnz	r0, 80071d6 <__multadd+0x5a>
 80071ca:	4602      	mov	r2, r0
 80071cc:	4b0c      	ldr	r3, [pc, #48]	@ (8007200 <__multadd+0x84>)
 80071ce:	480d      	ldr	r0, [pc, #52]	@ (8007204 <__multadd+0x88>)
 80071d0:	21ba      	movs	r1, #186	@ 0xba
 80071d2:	f001 fcfd 	bl	8008bd0 <__assert_func>
 80071d6:	6922      	ldr	r2, [r4, #16]
 80071d8:	3202      	adds	r2, #2
 80071da:	f104 010c 	add.w	r1, r4, #12
 80071de:	0092      	lsls	r2, r2, #2
 80071e0:	300c      	adds	r0, #12
 80071e2:	f001 fcdf 	bl	8008ba4 <memcpy>
 80071e6:	4621      	mov	r1, r4
 80071e8:	4638      	mov	r0, r7
 80071ea:	f7ff ffa5 	bl	8007138 <_Bfree>
 80071ee:	4644      	mov	r4, r8
 80071f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80071f4:	3501      	adds	r5, #1
 80071f6:	615e      	str	r6, [r3, #20]
 80071f8:	6125      	str	r5, [r4, #16]
 80071fa:	4620      	mov	r0, r4
 80071fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007200:	08009c55 	.word	0x08009c55
 8007204:	08009c66 	.word	0x08009c66

08007208 <__s2b>:
 8007208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800720c:	460c      	mov	r4, r1
 800720e:	4615      	mov	r5, r2
 8007210:	461f      	mov	r7, r3
 8007212:	2209      	movs	r2, #9
 8007214:	3308      	adds	r3, #8
 8007216:	4606      	mov	r6, r0
 8007218:	fb93 f3f2 	sdiv	r3, r3, r2
 800721c:	2100      	movs	r1, #0
 800721e:	2201      	movs	r2, #1
 8007220:	429a      	cmp	r2, r3
 8007222:	db09      	blt.n	8007238 <__s2b+0x30>
 8007224:	4630      	mov	r0, r6
 8007226:	f7ff ff47 	bl	80070b8 <_Balloc>
 800722a:	b940      	cbnz	r0, 800723e <__s2b+0x36>
 800722c:	4602      	mov	r2, r0
 800722e:	4b19      	ldr	r3, [pc, #100]	@ (8007294 <__s2b+0x8c>)
 8007230:	4819      	ldr	r0, [pc, #100]	@ (8007298 <__s2b+0x90>)
 8007232:	21d3      	movs	r1, #211	@ 0xd3
 8007234:	f001 fccc 	bl	8008bd0 <__assert_func>
 8007238:	0052      	lsls	r2, r2, #1
 800723a:	3101      	adds	r1, #1
 800723c:	e7f0      	b.n	8007220 <__s2b+0x18>
 800723e:	9b08      	ldr	r3, [sp, #32]
 8007240:	6143      	str	r3, [r0, #20]
 8007242:	2d09      	cmp	r5, #9
 8007244:	f04f 0301 	mov.w	r3, #1
 8007248:	6103      	str	r3, [r0, #16]
 800724a:	dd16      	ble.n	800727a <__s2b+0x72>
 800724c:	f104 0909 	add.w	r9, r4, #9
 8007250:	46c8      	mov	r8, r9
 8007252:	442c      	add	r4, r5
 8007254:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007258:	4601      	mov	r1, r0
 800725a:	3b30      	subs	r3, #48	@ 0x30
 800725c:	220a      	movs	r2, #10
 800725e:	4630      	mov	r0, r6
 8007260:	f7ff ff8c 	bl	800717c <__multadd>
 8007264:	45a0      	cmp	r8, r4
 8007266:	d1f5      	bne.n	8007254 <__s2b+0x4c>
 8007268:	f1a5 0408 	sub.w	r4, r5, #8
 800726c:	444c      	add	r4, r9
 800726e:	1b2d      	subs	r5, r5, r4
 8007270:	1963      	adds	r3, r4, r5
 8007272:	42bb      	cmp	r3, r7
 8007274:	db04      	blt.n	8007280 <__s2b+0x78>
 8007276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800727a:	340a      	adds	r4, #10
 800727c:	2509      	movs	r5, #9
 800727e:	e7f6      	b.n	800726e <__s2b+0x66>
 8007280:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007284:	4601      	mov	r1, r0
 8007286:	3b30      	subs	r3, #48	@ 0x30
 8007288:	220a      	movs	r2, #10
 800728a:	4630      	mov	r0, r6
 800728c:	f7ff ff76 	bl	800717c <__multadd>
 8007290:	e7ee      	b.n	8007270 <__s2b+0x68>
 8007292:	bf00      	nop
 8007294:	08009c55 	.word	0x08009c55
 8007298:	08009c66 	.word	0x08009c66

0800729c <__hi0bits>:
 800729c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80072a0:	4603      	mov	r3, r0
 80072a2:	bf36      	itet	cc
 80072a4:	0403      	lslcc	r3, r0, #16
 80072a6:	2000      	movcs	r0, #0
 80072a8:	2010      	movcc	r0, #16
 80072aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80072ae:	bf3c      	itt	cc
 80072b0:	021b      	lslcc	r3, r3, #8
 80072b2:	3008      	addcc	r0, #8
 80072b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072b8:	bf3c      	itt	cc
 80072ba:	011b      	lslcc	r3, r3, #4
 80072bc:	3004      	addcc	r0, #4
 80072be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072c2:	bf3c      	itt	cc
 80072c4:	009b      	lslcc	r3, r3, #2
 80072c6:	3002      	addcc	r0, #2
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	db05      	blt.n	80072d8 <__hi0bits+0x3c>
 80072cc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80072d0:	f100 0001 	add.w	r0, r0, #1
 80072d4:	bf08      	it	eq
 80072d6:	2020      	moveq	r0, #32
 80072d8:	4770      	bx	lr

080072da <__lo0bits>:
 80072da:	6803      	ldr	r3, [r0, #0]
 80072dc:	4602      	mov	r2, r0
 80072de:	f013 0007 	ands.w	r0, r3, #7
 80072e2:	d00b      	beq.n	80072fc <__lo0bits+0x22>
 80072e4:	07d9      	lsls	r1, r3, #31
 80072e6:	d421      	bmi.n	800732c <__lo0bits+0x52>
 80072e8:	0798      	lsls	r0, r3, #30
 80072ea:	bf49      	itett	mi
 80072ec:	085b      	lsrmi	r3, r3, #1
 80072ee:	089b      	lsrpl	r3, r3, #2
 80072f0:	2001      	movmi	r0, #1
 80072f2:	6013      	strmi	r3, [r2, #0]
 80072f4:	bf5c      	itt	pl
 80072f6:	6013      	strpl	r3, [r2, #0]
 80072f8:	2002      	movpl	r0, #2
 80072fa:	4770      	bx	lr
 80072fc:	b299      	uxth	r1, r3
 80072fe:	b909      	cbnz	r1, 8007304 <__lo0bits+0x2a>
 8007300:	0c1b      	lsrs	r3, r3, #16
 8007302:	2010      	movs	r0, #16
 8007304:	b2d9      	uxtb	r1, r3
 8007306:	b909      	cbnz	r1, 800730c <__lo0bits+0x32>
 8007308:	3008      	adds	r0, #8
 800730a:	0a1b      	lsrs	r3, r3, #8
 800730c:	0719      	lsls	r1, r3, #28
 800730e:	bf04      	itt	eq
 8007310:	091b      	lsreq	r3, r3, #4
 8007312:	3004      	addeq	r0, #4
 8007314:	0799      	lsls	r1, r3, #30
 8007316:	bf04      	itt	eq
 8007318:	089b      	lsreq	r3, r3, #2
 800731a:	3002      	addeq	r0, #2
 800731c:	07d9      	lsls	r1, r3, #31
 800731e:	d403      	bmi.n	8007328 <__lo0bits+0x4e>
 8007320:	085b      	lsrs	r3, r3, #1
 8007322:	f100 0001 	add.w	r0, r0, #1
 8007326:	d003      	beq.n	8007330 <__lo0bits+0x56>
 8007328:	6013      	str	r3, [r2, #0]
 800732a:	4770      	bx	lr
 800732c:	2000      	movs	r0, #0
 800732e:	4770      	bx	lr
 8007330:	2020      	movs	r0, #32
 8007332:	4770      	bx	lr

08007334 <__i2b>:
 8007334:	b510      	push	{r4, lr}
 8007336:	460c      	mov	r4, r1
 8007338:	2101      	movs	r1, #1
 800733a:	f7ff febd 	bl	80070b8 <_Balloc>
 800733e:	4602      	mov	r2, r0
 8007340:	b928      	cbnz	r0, 800734e <__i2b+0x1a>
 8007342:	4b05      	ldr	r3, [pc, #20]	@ (8007358 <__i2b+0x24>)
 8007344:	4805      	ldr	r0, [pc, #20]	@ (800735c <__i2b+0x28>)
 8007346:	f240 1145 	movw	r1, #325	@ 0x145
 800734a:	f001 fc41 	bl	8008bd0 <__assert_func>
 800734e:	2301      	movs	r3, #1
 8007350:	6144      	str	r4, [r0, #20]
 8007352:	6103      	str	r3, [r0, #16]
 8007354:	bd10      	pop	{r4, pc}
 8007356:	bf00      	nop
 8007358:	08009c55 	.word	0x08009c55
 800735c:	08009c66 	.word	0x08009c66

08007360 <__multiply>:
 8007360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007364:	4614      	mov	r4, r2
 8007366:	690a      	ldr	r2, [r1, #16]
 8007368:	6923      	ldr	r3, [r4, #16]
 800736a:	429a      	cmp	r2, r3
 800736c:	bfa8      	it	ge
 800736e:	4623      	movge	r3, r4
 8007370:	460f      	mov	r7, r1
 8007372:	bfa4      	itt	ge
 8007374:	460c      	movge	r4, r1
 8007376:	461f      	movge	r7, r3
 8007378:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800737c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007380:	68a3      	ldr	r3, [r4, #8]
 8007382:	6861      	ldr	r1, [r4, #4]
 8007384:	eb0a 0609 	add.w	r6, sl, r9
 8007388:	42b3      	cmp	r3, r6
 800738a:	b085      	sub	sp, #20
 800738c:	bfb8      	it	lt
 800738e:	3101      	addlt	r1, #1
 8007390:	f7ff fe92 	bl	80070b8 <_Balloc>
 8007394:	b930      	cbnz	r0, 80073a4 <__multiply+0x44>
 8007396:	4602      	mov	r2, r0
 8007398:	4b44      	ldr	r3, [pc, #272]	@ (80074ac <__multiply+0x14c>)
 800739a:	4845      	ldr	r0, [pc, #276]	@ (80074b0 <__multiply+0x150>)
 800739c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80073a0:	f001 fc16 	bl	8008bd0 <__assert_func>
 80073a4:	f100 0514 	add.w	r5, r0, #20
 80073a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80073ac:	462b      	mov	r3, r5
 80073ae:	2200      	movs	r2, #0
 80073b0:	4543      	cmp	r3, r8
 80073b2:	d321      	bcc.n	80073f8 <__multiply+0x98>
 80073b4:	f107 0114 	add.w	r1, r7, #20
 80073b8:	f104 0214 	add.w	r2, r4, #20
 80073bc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80073c0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80073c4:	9302      	str	r3, [sp, #8]
 80073c6:	1b13      	subs	r3, r2, r4
 80073c8:	3b15      	subs	r3, #21
 80073ca:	f023 0303 	bic.w	r3, r3, #3
 80073ce:	3304      	adds	r3, #4
 80073d0:	f104 0715 	add.w	r7, r4, #21
 80073d4:	42ba      	cmp	r2, r7
 80073d6:	bf38      	it	cc
 80073d8:	2304      	movcc	r3, #4
 80073da:	9301      	str	r3, [sp, #4]
 80073dc:	9b02      	ldr	r3, [sp, #8]
 80073de:	9103      	str	r1, [sp, #12]
 80073e0:	428b      	cmp	r3, r1
 80073e2:	d80c      	bhi.n	80073fe <__multiply+0x9e>
 80073e4:	2e00      	cmp	r6, #0
 80073e6:	dd03      	ble.n	80073f0 <__multiply+0x90>
 80073e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d05b      	beq.n	80074a8 <__multiply+0x148>
 80073f0:	6106      	str	r6, [r0, #16]
 80073f2:	b005      	add	sp, #20
 80073f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073f8:	f843 2b04 	str.w	r2, [r3], #4
 80073fc:	e7d8      	b.n	80073b0 <__multiply+0x50>
 80073fe:	f8b1 a000 	ldrh.w	sl, [r1]
 8007402:	f1ba 0f00 	cmp.w	sl, #0
 8007406:	d024      	beq.n	8007452 <__multiply+0xf2>
 8007408:	f104 0e14 	add.w	lr, r4, #20
 800740c:	46a9      	mov	r9, r5
 800740e:	f04f 0c00 	mov.w	ip, #0
 8007412:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007416:	f8d9 3000 	ldr.w	r3, [r9]
 800741a:	fa1f fb87 	uxth.w	fp, r7
 800741e:	b29b      	uxth	r3, r3
 8007420:	fb0a 330b 	mla	r3, sl, fp, r3
 8007424:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007428:	f8d9 7000 	ldr.w	r7, [r9]
 800742c:	4463      	add	r3, ip
 800742e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007432:	fb0a c70b 	mla	r7, sl, fp, ip
 8007436:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800743a:	b29b      	uxth	r3, r3
 800743c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007440:	4572      	cmp	r2, lr
 8007442:	f849 3b04 	str.w	r3, [r9], #4
 8007446:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800744a:	d8e2      	bhi.n	8007412 <__multiply+0xb2>
 800744c:	9b01      	ldr	r3, [sp, #4]
 800744e:	f845 c003 	str.w	ip, [r5, r3]
 8007452:	9b03      	ldr	r3, [sp, #12]
 8007454:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007458:	3104      	adds	r1, #4
 800745a:	f1b9 0f00 	cmp.w	r9, #0
 800745e:	d021      	beq.n	80074a4 <__multiply+0x144>
 8007460:	682b      	ldr	r3, [r5, #0]
 8007462:	f104 0c14 	add.w	ip, r4, #20
 8007466:	46ae      	mov	lr, r5
 8007468:	f04f 0a00 	mov.w	sl, #0
 800746c:	f8bc b000 	ldrh.w	fp, [ip]
 8007470:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007474:	fb09 770b 	mla	r7, r9, fp, r7
 8007478:	4457      	add	r7, sl
 800747a:	b29b      	uxth	r3, r3
 800747c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007480:	f84e 3b04 	str.w	r3, [lr], #4
 8007484:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007488:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800748c:	f8be 3000 	ldrh.w	r3, [lr]
 8007490:	fb09 330a 	mla	r3, r9, sl, r3
 8007494:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007498:	4562      	cmp	r2, ip
 800749a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800749e:	d8e5      	bhi.n	800746c <__multiply+0x10c>
 80074a0:	9f01      	ldr	r7, [sp, #4]
 80074a2:	51eb      	str	r3, [r5, r7]
 80074a4:	3504      	adds	r5, #4
 80074a6:	e799      	b.n	80073dc <__multiply+0x7c>
 80074a8:	3e01      	subs	r6, #1
 80074aa:	e79b      	b.n	80073e4 <__multiply+0x84>
 80074ac:	08009c55 	.word	0x08009c55
 80074b0:	08009c66 	.word	0x08009c66

080074b4 <__pow5mult>:
 80074b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074b8:	4615      	mov	r5, r2
 80074ba:	f012 0203 	ands.w	r2, r2, #3
 80074be:	4607      	mov	r7, r0
 80074c0:	460e      	mov	r6, r1
 80074c2:	d007      	beq.n	80074d4 <__pow5mult+0x20>
 80074c4:	4c25      	ldr	r4, [pc, #148]	@ (800755c <__pow5mult+0xa8>)
 80074c6:	3a01      	subs	r2, #1
 80074c8:	2300      	movs	r3, #0
 80074ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80074ce:	f7ff fe55 	bl	800717c <__multadd>
 80074d2:	4606      	mov	r6, r0
 80074d4:	10ad      	asrs	r5, r5, #2
 80074d6:	d03d      	beq.n	8007554 <__pow5mult+0xa0>
 80074d8:	69fc      	ldr	r4, [r7, #28]
 80074da:	b97c      	cbnz	r4, 80074fc <__pow5mult+0x48>
 80074dc:	2010      	movs	r0, #16
 80074de:	f7ff fd35 	bl	8006f4c <malloc>
 80074e2:	4602      	mov	r2, r0
 80074e4:	61f8      	str	r0, [r7, #28]
 80074e6:	b928      	cbnz	r0, 80074f4 <__pow5mult+0x40>
 80074e8:	4b1d      	ldr	r3, [pc, #116]	@ (8007560 <__pow5mult+0xac>)
 80074ea:	481e      	ldr	r0, [pc, #120]	@ (8007564 <__pow5mult+0xb0>)
 80074ec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80074f0:	f001 fb6e 	bl	8008bd0 <__assert_func>
 80074f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80074f8:	6004      	str	r4, [r0, #0]
 80074fa:	60c4      	str	r4, [r0, #12]
 80074fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007500:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007504:	b94c      	cbnz	r4, 800751a <__pow5mult+0x66>
 8007506:	f240 2171 	movw	r1, #625	@ 0x271
 800750a:	4638      	mov	r0, r7
 800750c:	f7ff ff12 	bl	8007334 <__i2b>
 8007510:	2300      	movs	r3, #0
 8007512:	f8c8 0008 	str.w	r0, [r8, #8]
 8007516:	4604      	mov	r4, r0
 8007518:	6003      	str	r3, [r0, #0]
 800751a:	f04f 0900 	mov.w	r9, #0
 800751e:	07eb      	lsls	r3, r5, #31
 8007520:	d50a      	bpl.n	8007538 <__pow5mult+0x84>
 8007522:	4631      	mov	r1, r6
 8007524:	4622      	mov	r2, r4
 8007526:	4638      	mov	r0, r7
 8007528:	f7ff ff1a 	bl	8007360 <__multiply>
 800752c:	4631      	mov	r1, r6
 800752e:	4680      	mov	r8, r0
 8007530:	4638      	mov	r0, r7
 8007532:	f7ff fe01 	bl	8007138 <_Bfree>
 8007536:	4646      	mov	r6, r8
 8007538:	106d      	asrs	r5, r5, #1
 800753a:	d00b      	beq.n	8007554 <__pow5mult+0xa0>
 800753c:	6820      	ldr	r0, [r4, #0]
 800753e:	b938      	cbnz	r0, 8007550 <__pow5mult+0x9c>
 8007540:	4622      	mov	r2, r4
 8007542:	4621      	mov	r1, r4
 8007544:	4638      	mov	r0, r7
 8007546:	f7ff ff0b 	bl	8007360 <__multiply>
 800754a:	6020      	str	r0, [r4, #0]
 800754c:	f8c0 9000 	str.w	r9, [r0]
 8007550:	4604      	mov	r4, r0
 8007552:	e7e4      	b.n	800751e <__pow5mult+0x6a>
 8007554:	4630      	mov	r0, r6
 8007556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800755a:	bf00      	nop
 800755c:	08009cc0 	.word	0x08009cc0
 8007560:	08009be6 	.word	0x08009be6
 8007564:	08009c66 	.word	0x08009c66

08007568 <__lshift>:
 8007568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800756c:	460c      	mov	r4, r1
 800756e:	6849      	ldr	r1, [r1, #4]
 8007570:	6923      	ldr	r3, [r4, #16]
 8007572:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007576:	68a3      	ldr	r3, [r4, #8]
 8007578:	4607      	mov	r7, r0
 800757a:	4691      	mov	r9, r2
 800757c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007580:	f108 0601 	add.w	r6, r8, #1
 8007584:	42b3      	cmp	r3, r6
 8007586:	db0b      	blt.n	80075a0 <__lshift+0x38>
 8007588:	4638      	mov	r0, r7
 800758a:	f7ff fd95 	bl	80070b8 <_Balloc>
 800758e:	4605      	mov	r5, r0
 8007590:	b948      	cbnz	r0, 80075a6 <__lshift+0x3e>
 8007592:	4602      	mov	r2, r0
 8007594:	4b28      	ldr	r3, [pc, #160]	@ (8007638 <__lshift+0xd0>)
 8007596:	4829      	ldr	r0, [pc, #164]	@ (800763c <__lshift+0xd4>)
 8007598:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800759c:	f001 fb18 	bl	8008bd0 <__assert_func>
 80075a0:	3101      	adds	r1, #1
 80075a2:	005b      	lsls	r3, r3, #1
 80075a4:	e7ee      	b.n	8007584 <__lshift+0x1c>
 80075a6:	2300      	movs	r3, #0
 80075a8:	f100 0114 	add.w	r1, r0, #20
 80075ac:	f100 0210 	add.w	r2, r0, #16
 80075b0:	4618      	mov	r0, r3
 80075b2:	4553      	cmp	r3, sl
 80075b4:	db33      	blt.n	800761e <__lshift+0xb6>
 80075b6:	6920      	ldr	r0, [r4, #16]
 80075b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80075bc:	f104 0314 	add.w	r3, r4, #20
 80075c0:	f019 091f 	ands.w	r9, r9, #31
 80075c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80075c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80075cc:	d02b      	beq.n	8007626 <__lshift+0xbe>
 80075ce:	f1c9 0e20 	rsb	lr, r9, #32
 80075d2:	468a      	mov	sl, r1
 80075d4:	2200      	movs	r2, #0
 80075d6:	6818      	ldr	r0, [r3, #0]
 80075d8:	fa00 f009 	lsl.w	r0, r0, r9
 80075dc:	4310      	orrs	r0, r2
 80075de:	f84a 0b04 	str.w	r0, [sl], #4
 80075e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80075e6:	459c      	cmp	ip, r3
 80075e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80075ec:	d8f3      	bhi.n	80075d6 <__lshift+0x6e>
 80075ee:	ebac 0304 	sub.w	r3, ip, r4
 80075f2:	3b15      	subs	r3, #21
 80075f4:	f023 0303 	bic.w	r3, r3, #3
 80075f8:	3304      	adds	r3, #4
 80075fa:	f104 0015 	add.w	r0, r4, #21
 80075fe:	4584      	cmp	ip, r0
 8007600:	bf38      	it	cc
 8007602:	2304      	movcc	r3, #4
 8007604:	50ca      	str	r2, [r1, r3]
 8007606:	b10a      	cbz	r2, 800760c <__lshift+0xa4>
 8007608:	f108 0602 	add.w	r6, r8, #2
 800760c:	3e01      	subs	r6, #1
 800760e:	4638      	mov	r0, r7
 8007610:	612e      	str	r6, [r5, #16]
 8007612:	4621      	mov	r1, r4
 8007614:	f7ff fd90 	bl	8007138 <_Bfree>
 8007618:	4628      	mov	r0, r5
 800761a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800761e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007622:	3301      	adds	r3, #1
 8007624:	e7c5      	b.n	80075b2 <__lshift+0x4a>
 8007626:	3904      	subs	r1, #4
 8007628:	f853 2b04 	ldr.w	r2, [r3], #4
 800762c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007630:	459c      	cmp	ip, r3
 8007632:	d8f9      	bhi.n	8007628 <__lshift+0xc0>
 8007634:	e7ea      	b.n	800760c <__lshift+0xa4>
 8007636:	bf00      	nop
 8007638:	08009c55 	.word	0x08009c55
 800763c:	08009c66 	.word	0x08009c66

08007640 <__mcmp>:
 8007640:	690a      	ldr	r2, [r1, #16]
 8007642:	4603      	mov	r3, r0
 8007644:	6900      	ldr	r0, [r0, #16]
 8007646:	1a80      	subs	r0, r0, r2
 8007648:	b530      	push	{r4, r5, lr}
 800764a:	d10e      	bne.n	800766a <__mcmp+0x2a>
 800764c:	3314      	adds	r3, #20
 800764e:	3114      	adds	r1, #20
 8007650:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007654:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007658:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800765c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007660:	4295      	cmp	r5, r2
 8007662:	d003      	beq.n	800766c <__mcmp+0x2c>
 8007664:	d205      	bcs.n	8007672 <__mcmp+0x32>
 8007666:	f04f 30ff 	mov.w	r0, #4294967295
 800766a:	bd30      	pop	{r4, r5, pc}
 800766c:	42a3      	cmp	r3, r4
 800766e:	d3f3      	bcc.n	8007658 <__mcmp+0x18>
 8007670:	e7fb      	b.n	800766a <__mcmp+0x2a>
 8007672:	2001      	movs	r0, #1
 8007674:	e7f9      	b.n	800766a <__mcmp+0x2a>
	...

08007678 <__mdiff>:
 8007678:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800767c:	4689      	mov	r9, r1
 800767e:	4606      	mov	r6, r0
 8007680:	4611      	mov	r1, r2
 8007682:	4648      	mov	r0, r9
 8007684:	4614      	mov	r4, r2
 8007686:	f7ff ffdb 	bl	8007640 <__mcmp>
 800768a:	1e05      	subs	r5, r0, #0
 800768c:	d112      	bne.n	80076b4 <__mdiff+0x3c>
 800768e:	4629      	mov	r1, r5
 8007690:	4630      	mov	r0, r6
 8007692:	f7ff fd11 	bl	80070b8 <_Balloc>
 8007696:	4602      	mov	r2, r0
 8007698:	b928      	cbnz	r0, 80076a6 <__mdiff+0x2e>
 800769a:	4b3f      	ldr	r3, [pc, #252]	@ (8007798 <__mdiff+0x120>)
 800769c:	f240 2137 	movw	r1, #567	@ 0x237
 80076a0:	483e      	ldr	r0, [pc, #248]	@ (800779c <__mdiff+0x124>)
 80076a2:	f001 fa95 	bl	8008bd0 <__assert_func>
 80076a6:	2301      	movs	r3, #1
 80076a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80076ac:	4610      	mov	r0, r2
 80076ae:	b003      	add	sp, #12
 80076b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076b4:	bfbc      	itt	lt
 80076b6:	464b      	movlt	r3, r9
 80076b8:	46a1      	movlt	r9, r4
 80076ba:	4630      	mov	r0, r6
 80076bc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80076c0:	bfba      	itte	lt
 80076c2:	461c      	movlt	r4, r3
 80076c4:	2501      	movlt	r5, #1
 80076c6:	2500      	movge	r5, #0
 80076c8:	f7ff fcf6 	bl	80070b8 <_Balloc>
 80076cc:	4602      	mov	r2, r0
 80076ce:	b918      	cbnz	r0, 80076d8 <__mdiff+0x60>
 80076d0:	4b31      	ldr	r3, [pc, #196]	@ (8007798 <__mdiff+0x120>)
 80076d2:	f240 2145 	movw	r1, #581	@ 0x245
 80076d6:	e7e3      	b.n	80076a0 <__mdiff+0x28>
 80076d8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80076dc:	6926      	ldr	r6, [r4, #16]
 80076de:	60c5      	str	r5, [r0, #12]
 80076e0:	f109 0310 	add.w	r3, r9, #16
 80076e4:	f109 0514 	add.w	r5, r9, #20
 80076e8:	f104 0e14 	add.w	lr, r4, #20
 80076ec:	f100 0b14 	add.w	fp, r0, #20
 80076f0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80076f4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80076f8:	9301      	str	r3, [sp, #4]
 80076fa:	46d9      	mov	r9, fp
 80076fc:	f04f 0c00 	mov.w	ip, #0
 8007700:	9b01      	ldr	r3, [sp, #4]
 8007702:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007706:	f853 af04 	ldr.w	sl, [r3, #4]!
 800770a:	9301      	str	r3, [sp, #4]
 800770c:	fa1f f38a 	uxth.w	r3, sl
 8007710:	4619      	mov	r1, r3
 8007712:	b283      	uxth	r3, r0
 8007714:	1acb      	subs	r3, r1, r3
 8007716:	0c00      	lsrs	r0, r0, #16
 8007718:	4463      	add	r3, ip
 800771a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800771e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007722:	b29b      	uxth	r3, r3
 8007724:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007728:	4576      	cmp	r6, lr
 800772a:	f849 3b04 	str.w	r3, [r9], #4
 800772e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007732:	d8e5      	bhi.n	8007700 <__mdiff+0x88>
 8007734:	1b33      	subs	r3, r6, r4
 8007736:	3b15      	subs	r3, #21
 8007738:	f023 0303 	bic.w	r3, r3, #3
 800773c:	3415      	adds	r4, #21
 800773e:	3304      	adds	r3, #4
 8007740:	42a6      	cmp	r6, r4
 8007742:	bf38      	it	cc
 8007744:	2304      	movcc	r3, #4
 8007746:	441d      	add	r5, r3
 8007748:	445b      	add	r3, fp
 800774a:	461e      	mov	r6, r3
 800774c:	462c      	mov	r4, r5
 800774e:	4544      	cmp	r4, r8
 8007750:	d30e      	bcc.n	8007770 <__mdiff+0xf8>
 8007752:	f108 0103 	add.w	r1, r8, #3
 8007756:	1b49      	subs	r1, r1, r5
 8007758:	f021 0103 	bic.w	r1, r1, #3
 800775c:	3d03      	subs	r5, #3
 800775e:	45a8      	cmp	r8, r5
 8007760:	bf38      	it	cc
 8007762:	2100      	movcc	r1, #0
 8007764:	440b      	add	r3, r1
 8007766:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800776a:	b191      	cbz	r1, 8007792 <__mdiff+0x11a>
 800776c:	6117      	str	r7, [r2, #16]
 800776e:	e79d      	b.n	80076ac <__mdiff+0x34>
 8007770:	f854 1b04 	ldr.w	r1, [r4], #4
 8007774:	46e6      	mov	lr, ip
 8007776:	0c08      	lsrs	r0, r1, #16
 8007778:	fa1c fc81 	uxtah	ip, ip, r1
 800777c:	4471      	add	r1, lr
 800777e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007782:	b289      	uxth	r1, r1
 8007784:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007788:	f846 1b04 	str.w	r1, [r6], #4
 800778c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007790:	e7dd      	b.n	800774e <__mdiff+0xd6>
 8007792:	3f01      	subs	r7, #1
 8007794:	e7e7      	b.n	8007766 <__mdiff+0xee>
 8007796:	bf00      	nop
 8007798:	08009c55 	.word	0x08009c55
 800779c:	08009c66 	.word	0x08009c66

080077a0 <__ulp>:
 80077a0:	b082      	sub	sp, #8
 80077a2:	ed8d 0b00 	vstr	d0, [sp]
 80077a6:	9a01      	ldr	r2, [sp, #4]
 80077a8:	4b0f      	ldr	r3, [pc, #60]	@ (80077e8 <__ulp+0x48>)
 80077aa:	4013      	ands	r3, r2
 80077ac:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	dc08      	bgt.n	80077c6 <__ulp+0x26>
 80077b4:	425b      	negs	r3, r3
 80077b6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80077ba:	ea4f 5223 	mov.w	r2, r3, asr #20
 80077be:	da04      	bge.n	80077ca <__ulp+0x2a>
 80077c0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80077c4:	4113      	asrs	r3, r2
 80077c6:	2200      	movs	r2, #0
 80077c8:	e008      	b.n	80077dc <__ulp+0x3c>
 80077ca:	f1a2 0314 	sub.w	r3, r2, #20
 80077ce:	2b1e      	cmp	r3, #30
 80077d0:	bfda      	itte	le
 80077d2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80077d6:	40da      	lsrle	r2, r3
 80077d8:	2201      	movgt	r2, #1
 80077da:	2300      	movs	r3, #0
 80077dc:	4619      	mov	r1, r3
 80077de:	4610      	mov	r0, r2
 80077e0:	ec41 0b10 	vmov	d0, r0, r1
 80077e4:	b002      	add	sp, #8
 80077e6:	4770      	bx	lr
 80077e8:	7ff00000 	.word	0x7ff00000

080077ec <__b2d>:
 80077ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077f0:	6906      	ldr	r6, [r0, #16]
 80077f2:	f100 0814 	add.w	r8, r0, #20
 80077f6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80077fa:	1f37      	subs	r7, r6, #4
 80077fc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007800:	4610      	mov	r0, r2
 8007802:	f7ff fd4b 	bl	800729c <__hi0bits>
 8007806:	f1c0 0320 	rsb	r3, r0, #32
 800780a:	280a      	cmp	r0, #10
 800780c:	600b      	str	r3, [r1, #0]
 800780e:	491b      	ldr	r1, [pc, #108]	@ (800787c <__b2d+0x90>)
 8007810:	dc15      	bgt.n	800783e <__b2d+0x52>
 8007812:	f1c0 0c0b 	rsb	ip, r0, #11
 8007816:	fa22 f30c 	lsr.w	r3, r2, ip
 800781a:	45b8      	cmp	r8, r7
 800781c:	ea43 0501 	orr.w	r5, r3, r1
 8007820:	bf34      	ite	cc
 8007822:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007826:	2300      	movcs	r3, #0
 8007828:	3015      	adds	r0, #21
 800782a:	fa02 f000 	lsl.w	r0, r2, r0
 800782e:	fa23 f30c 	lsr.w	r3, r3, ip
 8007832:	4303      	orrs	r3, r0
 8007834:	461c      	mov	r4, r3
 8007836:	ec45 4b10 	vmov	d0, r4, r5
 800783a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800783e:	45b8      	cmp	r8, r7
 8007840:	bf3a      	itte	cc
 8007842:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007846:	f1a6 0708 	subcc.w	r7, r6, #8
 800784a:	2300      	movcs	r3, #0
 800784c:	380b      	subs	r0, #11
 800784e:	d012      	beq.n	8007876 <__b2d+0x8a>
 8007850:	f1c0 0120 	rsb	r1, r0, #32
 8007854:	fa23 f401 	lsr.w	r4, r3, r1
 8007858:	4082      	lsls	r2, r0
 800785a:	4322      	orrs	r2, r4
 800785c:	4547      	cmp	r7, r8
 800785e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007862:	bf8c      	ite	hi
 8007864:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007868:	2200      	movls	r2, #0
 800786a:	4083      	lsls	r3, r0
 800786c:	40ca      	lsrs	r2, r1
 800786e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007872:	4313      	orrs	r3, r2
 8007874:	e7de      	b.n	8007834 <__b2d+0x48>
 8007876:	ea42 0501 	orr.w	r5, r2, r1
 800787a:	e7db      	b.n	8007834 <__b2d+0x48>
 800787c:	3ff00000 	.word	0x3ff00000

08007880 <__d2b>:
 8007880:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007884:	460f      	mov	r7, r1
 8007886:	2101      	movs	r1, #1
 8007888:	ec59 8b10 	vmov	r8, r9, d0
 800788c:	4616      	mov	r6, r2
 800788e:	f7ff fc13 	bl	80070b8 <_Balloc>
 8007892:	4604      	mov	r4, r0
 8007894:	b930      	cbnz	r0, 80078a4 <__d2b+0x24>
 8007896:	4602      	mov	r2, r0
 8007898:	4b23      	ldr	r3, [pc, #140]	@ (8007928 <__d2b+0xa8>)
 800789a:	4824      	ldr	r0, [pc, #144]	@ (800792c <__d2b+0xac>)
 800789c:	f240 310f 	movw	r1, #783	@ 0x30f
 80078a0:	f001 f996 	bl	8008bd0 <__assert_func>
 80078a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80078a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80078ac:	b10d      	cbz	r5, 80078b2 <__d2b+0x32>
 80078ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80078b2:	9301      	str	r3, [sp, #4]
 80078b4:	f1b8 0300 	subs.w	r3, r8, #0
 80078b8:	d023      	beq.n	8007902 <__d2b+0x82>
 80078ba:	4668      	mov	r0, sp
 80078bc:	9300      	str	r3, [sp, #0]
 80078be:	f7ff fd0c 	bl	80072da <__lo0bits>
 80078c2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80078c6:	b1d0      	cbz	r0, 80078fe <__d2b+0x7e>
 80078c8:	f1c0 0320 	rsb	r3, r0, #32
 80078cc:	fa02 f303 	lsl.w	r3, r2, r3
 80078d0:	430b      	orrs	r3, r1
 80078d2:	40c2      	lsrs	r2, r0
 80078d4:	6163      	str	r3, [r4, #20]
 80078d6:	9201      	str	r2, [sp, #4]
 80078d8:	9b01      	ldr	r3, [sp, #4]
 80078da:	61a3      	str	r3, [r4, #24]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	bf0c      	ite	eq
 80078e0:	2201      	moveq	r2, #1
 80078e2:	2202      	movne	r2, #2
 80078e4:	6122      	str	r2, [r4, #16]
 80078e6:	b1a5      	cbz	r5, 8007912 <__d2b+0x92>
 80078e8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80078ec:	4405      	add	r5, r0
 80078ee:	603d      	str	r5, [r7, #0]
 80078f0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80078f4:	6030      	str	r0, [r6, #0]
 80078f6:	4620      	mov	r0, r4
 80078f8:	b003      	add	sp, #12
 80078fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078fe:	6161      	str	r1, [r4, #20]
 8007900:	e7ea      	b.n	80078d8 <__d2b+0x58>
 8007902:	a801      	add	r0, sp, #4
 8007904:	f7ff fce9 	bl	80072da <__lo0bits>
 8007908:	9b01      	ldr	r3, [sp, #4]
 800790a:	6163      	str	r3, [r4, #20]
 800790c:	3020      	adds	r0, #32
 800790e:	2201      	movs	r2, #1
 8007910:	e7e8      	b.n	80078e4 <__d2b+0x64>
 8007912:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007916:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800791a:	6038      	str	r0, [r7, #0]
 800791c:	6918      	ldr	r0, [r3, #16]
 800791e:	f7ff fcbd 	bl	800729c <__hi0bits>
 8007922:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007926:	e7e5      	b.n	80078f4 <__d2b+0x74>
 8007928:	08009c55 	.word	0x08009c55
 800792c:	08009c66 	.word	0x08009c66

08007930 <__ratio>:
 8007930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007934:	b085      	sub	sp, #20
 8007936:	e9cd 1000 	strd	r1, r0, [sp]
 800793a:	a902      	add	r1, sp, #8
 800793c:	f7ff ff56 	bl	80077ec <__b2d>
 8007940:	9800      	ldr	r0, [sp, #0]
 8007942:	a903      	add	r1, sp, #12
 8007944:	ec55 4b10 	vmov	r4, r5, d0
 8007948:	f7ff ff50 	bl	80077ec <__b2d>
 800794c:	9b01      	ldr	r3, [sp, #4]
 800794e:	6919      	ldr	r1, [r3, #16]
 8007950:	9b00      	ldr	r3, [sp, #0]
 8007952:	691b      	ldr	r3, [r3, #16]
 8007954:	1ac9      	subs	r1, r1, r3
 8007956:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800795a:	1a9b      	subs	r3, r3, r2
 800795c:	ec5b ab10 	vmov	sl, fp, d0
 8007960:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007964:	2b00      	cmp	r3, #0
 8007966:	bfce      	itee	gt
 8007968:	462a      	movgt	r2, r5
 800796a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800796e:	465a      	movle	r2, fp
 8007970:	462f      	mov	r7, r5
 8007972:	46d9      	mov	r9, fp
 8007974:	bfcc      	ite	gt
 8007976:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800797a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800797e:	464b      	mov	r3, r9
 8007980:	4652      	mov	r2, sl
 8007982:	4620      	mov	r0, r4
 8007984:	4639      	mov	r1, r7
 8007986:	f7f8 ff61 	bl	800084c <__aeabi_ddiv>
 800798a:	ec41 0b10 	vmov	d0, r0, r1
 800798e:	b005      	add	sp, #20
 8007990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007994 <__copybits>:
 8007994:	3901      	subs	r1, #1
 8007996:	b570      	push	{r4, r5, r6, lr}
 8007998:	1149      	asrs	r1, r1, #5
 800799a:	6914      	ldr	r4, [r2, #16]
 800799c:	3101      	adds	r1, #1
 800799e:	f102 0314 	add.w	r3, r2, #20
 80079a2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80079a6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80079aa:	1f05      	subs	r5, r0, #4
 80079ac:	42a3      	cmp	r3, r4
 80079ae:	d30c      	bcc.n	80079ca <__copybits+0x36>
 80079b0:	1aa3      	subs	r3, r4, r2
 80079b2:	3b11      	subs	r3, #17
 80079b4:	f023 0303 	bic.w	r3, r3, #3
 80079b8:	3211      	adds	r2, #17
 80079ba:	42a2      	cmp	r2, r4
 80079bc:	bf88      	it	hi
 80079be:	2300      	movhi	r3, #0
 80079c0:	4418      	add	r0, r3
 80079c2:	2300      	movs	r3, #0
 80079c4:	4288      	cmp	r0, r1
 80079c6:	d305      	bcc.n	80079d4 <__copybits+0x40>
 80079c8:	bd70      	pop	{r4, r5, r6, pc}
 80079ca:	f853 6b04 	ldr.w	r6, [r3], #4
 80079ce:	f845 6f04 	str.w	r6, [r5, #4]!
 80079d2:	e7eb      	b.n	80079ac <__copybits+0x18>
 80079d4:	f840 3b04 	str.w	r3, [r0], #4
 80079d8:	e7f4      	b.n	80079c4 <__copybits+0x30>

080079da <__any_on>:
 80079da:	f100 0214 	add.w	r2, r0, #20
 80079de:	6900      	ldr	r0, [r0, #16]
 80079e0:	114b      	asrs	r3, r1, #5
 80079e2:	4298      	cmp	r0, r3
 80079e4:	b510      	push	{r4, lr}
 80079e6:	db11      	blt.n	8007a0c <__any_on+0x32>
 80079e8:	dd0a      	ble.n	8007a00 <__any_on+0x26>
 80079ea:	f011 011f 	ands.w	r1, r1, #31
 80079ee:	d007      	beq.n	8007a00 <__any_on+0x26>
 80079f0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80079f4:	fa24 f001 	lsr.w	r0, r4, r1
 80079f8:	fa00 f101 	lsl.w	r1, r0, r1
 80079fc:	428c      	cmp	r4, r1
 80079fe:	d10b      	bne.n	8007a18 <__any_on+0x3e>
 8007a00:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d803      	bhi.n	8007a10 <__any_on+0x36>
 8007a08:	2000      	movs	r0, #0
 8007a0a:	bd10      	pop	{r4, pc}
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	e7f7      	b.n	8007a00 <__any_on+0x26>
 8007a10:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007a14:	2900      	cmp	r1, #0
 8007a16:	d0f5      	beq.n	8007a04 <__any_on+0x2a>
 8007a18:	2001      	movs	r0, #1
 8007a1a:	e7f6      	b.n	8007a0a <__any_on+0x30>

08007a1c <sulp>:
 8007a1c:	b570      	push	{r4, r5, r6, lr}
 8007a1e:	4604      	mov	r4, r0
 8007a20:	460d      	mov	r5, r1
 8007a22:	ec45 4b10 	vmov	d0, r4, r5
 8007a26:	4616      	mov	r6, r2
 8007a28:	f7ff feba 	bl	80077a0 <__ulp>
 8007a2c:	ec51 0b10 	vmov	r0, r1, d0
 8007a30:	b17e      	cbz	r6, 8007a52 <sulp+0x36>
 8007a32:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007a36:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	dd09      	ble.n	8007a52 <sulp+0x36>
 8007a3e:	051b      	lsls	r3, r3, #20
 8007a40:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007a44:	2400      	movs	r4, #0
 8007a46:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007a4a:	4622      	mov	r2, r4
 8007a4c:	462b      	mov	r3, r5
 8007a4e:	f7f8 fdd3 	bl	80005f8 <__aeabi_dmul>
 8007a52:	ec41 0b10 	vmov	d0, r0, r1
 8007a56:	bd70      	pop	{r4, r5, r6, pc}

08007a58 <_strtod_l>:
 8007a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a5c:	b09f      	sub	sp, #124	@ 0x7c
 8007a5e:	460c      	mov	r4, r1
 8007a60:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007a62:	2200      	movs	r2, #0
 8007a64:	921a      	str	r2, [sp, #104]	@ 0x68
 8007a66:	9005      	str	r0, [sp, #20]
 8007a68:	f04f 0a00 	mov.w	sl, #0
 8007a6c:	f04f 0b00 	mov.w	fp, #0
 8007a70:	460a      	mov	r2, r1
 8007a72:	9219      	str	r2, [sp, #100]	@ 0x64
 8007a74:	7811      	ldrb	r1, [r2, #0]
 8007a76:	292b      	cmp	r1, #43	@ 0x2b
 8007a78:	d04a      	beq.n	8007b10 <_strtod_l+0xb8>
 8007a7a:	d838      	bhi.n	8007aee <_strtod_l+0x96>
 8007a7c:	290d      	cmp	r1, #13
 8007a7e:	d832      	bhi.n	8007ae6 <_strtod_l+0x8e>
 8007a80:	2908      	cmp	r1, #8
 8007a82:	d832      	bhi.n	8007aea <_strtod_l+0x92>
 8007a84:	2900      	cmp	r1, #0
 8007a86:	d03b      	beq.n	8007b00 <_strtod_l+0xa8>
 8007a88:	2200      	movs	r2, #0
 8007a8a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007a8c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007a8e:	782a      	ldrb	r2, [r5, #0]
 8007a90:	2a30      	cmp	r2, #48	@ 0x30
 8007a92:	f040 80b3 	bne.w	8007bfc <_strtod_l+0x1a4>
 8007a96:	786a      	ldrb	r2, [r5, #1]
 8007a98:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007a9c:	2a58      	cmp	r2, #88	@ 0x58
 8007a9e:	d16e      	bne.n	8007b7e <_strtod_l+0x126>
 8007aa0:	9302      	str	r3, [sp, #8]
 8007aa2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007aa4:	9301      	str	r3, [sp, #4]
 8007aa6:	ab1a      	add	r3, sp, #104	@ 0x68
 8007aa8:	9300      	str	r3, [sp, #0]
 8007aaa:	4a8e      	ldr	r2, [pc, #568]	@ (8007ce4 <_strtod_l+0x28c>)
 8007aac:	9805      	ldr	r0, [sp, #20]
 8007aae:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007ab0:	a919      	add	r1, sp, #100	@ 0x64
 8007ab2:	f001 f927 	bl	8008d04 <__gethex>
 8007ab6:	f010 060f 	ands.w	r6, r0, #15
 8007aba:	4604      	mov	r4, r0
 8007abc:	d005      	beq.n	8007aca <_strtod_l+0x72>
 8007abe:	2e06      	cmp	r6, #6
 8007ac0:	d128      	bne.n	8007b14 <_strtod_l+0xbc>
 8007ac2:	3501      	adds	r5, #1
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	9519      	str	r5, [sp, #100]	@ 0x64
 8007ac8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007aca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	f040 858e 	bne.w	80085ee <_strtod_l+0xb96>
 8007ad2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ad4:	b1cb      	cbz	r3, 8007b0a <_strtod_l+0xb2>
 8007ad6:	4652      	mov	r2, sl
 8007ad8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007adc:	ec43 2b10 	vmov	d0, r2, r3
 8007ae0:	b01f      	add	sp, #124	@ 0x7c
 8007ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ae6:	2920      	cmp	r1, #32
 8007ae8:	d1ce      	bne.n	8007a88 <_strtod_l+0x30>
 8007aea:	3201      	adds	r2, #1
 8007aec:	e7c1      	b.n	8007a72 <_strtod_l+0x1a>
 8007aee:	292d      	cmp	r1, #45	@ 0x2d
 8007af0:	d1ca      	bne.n	8007a88 <_strtod_l+0x30>
 8007af2:	2101      	movs	r1, #1
 8007af4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007af6:	1c51      	adds	r1, r2, #1
 8007af8:	9119      	str	r1, [sp, #100]	@ 0x64
 8007afa:	7852      	ldrb	r2, [r2, #1]
 8007afc:	2a00      	cmp	r2, #0
 8007afe:	d1c5      	bne.n	8007a8c <_strtod_l+0x34>
 8007b00:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007b02:	9419      	str	r4, [sp, #100]	@ 0x64
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	f040 8570 	bne.w	80085ea <_strtod_l+0xb92>
 8007b0a:	4652      	mov	r2, sl
 8007b0c:	465b      	mov	r3, fp
 8007b0e:	e7e5      	b.n	8007adc <_strtod_l+0x84>
 8007b10:	2100      	movs	r1, #0
 8007b12:	e7ef      	b.n	8007af4 <_strtod_l+0x9c>
 8007b14:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007b16:	b13a      	cbz	r2, 8007b28 <_strtod_l+0xd0>
 8007b18:	2135      	movs	r1, #53	@ 0x35
 8007b1a:	a81c      	add	r0, sp, #112	@ 0x70
 8007b1c:	f7ff ff3a 	bl	8007994 <__copybits>
 8007b20:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007b22:	9805      	ldr	r0, [sp, #20]
 8007b24:	f7ff fb08 	bl	8007138 <_Bfree>
 8007b28:	3e01      	subs	r6, #1
 8007b2a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007b2c:	2e04      	cmp	r6, #4
 8007b2e:	d806      	bhi.n	8007b3e <_strtod_l+0xe6>
 8007b30:	e8df f006 	tbb	[pc, r6]
 8007b34:	201d0314 	.word	0x201d0314
 8007b38:	14          	.byte	0x14
 8007b39:	00          	.byte	0x00
 8007b3a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007b3e:	05e1      	lsls	r1, r4, #23
 8007b40:	bf48      	it	mi
 8007b42:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007b46:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007b4a:	0d1b      	lsrs	r3, r3, #20
 8007b4c:	051b      	lsls	r3, r3, #20
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1bb      	bne.n	8007aca <_strtod_l+0x72>
 8007b52:	f7fe fb2f 	bl	80061b4 <__errno>
 8007b56:	2322      	movs	r3, #34	@ 0x22
 8007b58:	6003      	str	r3, [r0, #0]
 8007b5a:	e7b6      	b.n	8007aca <_strtod_l+0x72>
 8007b5c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007b60:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007b64:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007b68:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007b6c:	e7e7      	b.n	8007b3e <_strtod_l+0xe6>
 8007b6e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007cec <_strtod_l+0x294>
 8007b72:	e7e4      	b.n	8007b3e <_strtod_l+0xe6>
 8007b74:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007b78:	f04f 3aff 	mov.w	sl, #4294967295
 8007b7c:	e7df      	b.n	8007b3e <_strtod_l+0xe6>
 8007b7e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007b80:	1c5a      	adds	r2, r3, #1
 8007b82:	9219      	str	r2, [sp, #100]	@ 0x64
 8007b84:	785b      	ldrb	r3, [r3, #1]
 8007b86:	2b30      	cmp	r3, #48	@ 0x30
 8007b88:	d0f9      	beq.n	8007b7e <_strtod_l+0x126>
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d09d      	beq.n	8007aca <_strtod_l+0x72>
 8007b8e:	2301      	movs	r3, #1
 8007b90:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007b94:	930c      	str	r3, [sp, #48]	@ 0x30
 8007b96:	2300      	movs	r3, #0
 8007b98:	9308      	str	r3, [sp, #32]
 8007b9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b9c:	461f      	mov	r7, r3
 8007b9e:	220a      	movs	r2, #10
 8007ba0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007ba2:	7805      	ldrb	r5, [r0, #0]
 8007ba4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007ba8:	b2d9      	uxtb	r1, r3
 8007baa:	2909      	cmp	r1, #9
 8007bac:	d928      	bls.n	8007c00 <_strtod_l+0x1a8>
 8007bae:	494e      	ldr	r1, [pc, #312]	@ (8007ce8 <_strtod_l+0x290>)
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	f000 ffd5 	bl	8008b60 <strncmp>
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	d032      	beq.n	8007c20 <_strtod_l+0x1c8>
 8007bba:	2000      	movs	r0, #0
 8007bbc:	462a      	mov	r2, r5
 8007bbe:	4681      	mov	r9, r0
 8007bc0:	463d      	mov	r5, r7
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2a65      	cmp	r2, #101	@ 0x65
 8007bc6:	d001      	beq.n	8007bcc <_strtod_l+0x174>
 8007bc8:	2a45      	cmp	r2, #69	@ 0x45
 8007bca:	d114      	bne.n	8007bf6 <_strtod_l+0x19e>
 8007bcc:	b91d      	cbnz	r5, 8007bd6 <_strtod_l+0x17e>
 8007bce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007bd0:	4302      	orrs	r2, r0
 8007bd2:	d095      	beq.n	8007b00 <_strtod_l+0xa8>
 8007bd4:	2500      	movs	r5, #0
 8007bd6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007bd8:	1c62      	adds	r2, r4, #1
 8007bda:	9219      	str	r2, [sp, #100]	@ 0x64
 8007bdc:	7862      	ldrb	r2, [r4, #1]
 8007bde:	2a2b      	cmp	r2, #43	@ 0x2b
 8007be0:	d077      	beq.n	8007cd2 <_strtod_l+0x27a>
 8007be2:	2a2d      	cmp	r2, #45	@ 0x2d
 8007be4:	d07b      	beq.n	8007cde <_strtod_l+0x286>
 8007be6:	f04f 0c00 	mov.w	ip, #0
 8007bea:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007bee:	2909      	cmp	r1, #9
 8007bf0:	f240 8082 	bls.w	8007cf8 <_strtod_l+0x2a0>
 8007bf4:	9419      	str	r4, [sp, #100]	@ 0x64
 8007bf6:	f04f 0800 	mov.w	r8, #0
 8007bfa:	e0a2      	b.n	8007d42 <_strtod_l+0x2ea>
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	e7c7      	b.n	8007b90 <_strtod_l+0x138>
 8007c00:	2f08      	cmp	r7, #8
 8007c02:	bfd5      	itete	le
 8007c04:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007c06:	9908      	ldrgt	r1, [sp, #32]
 8007c08:	fb02 3301 	mlale	r3, r2, r1, r3
 8007c0c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007c10:	f100 0001 	add.w	r0, r0, #1
 8007c14:	bfd4      	ite	le
 8007c16:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007c18:	9308      	strgt	r3, [sp, #32]
 8007c1a:	3701      	adds	r7, #1
 8007c1c:	9019      	str	r0, [sp, #100]	@ 0x64
 8007c1e:	e7bf      	b.n	8007ba0 <_strtod_l+0x148>
 8007c20:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c22:	1c5a      	adds	r2, r3, #1
 8007c24:	9219      	str	r2, [sp, #100]	@ 0x64
 8007c26:	785a      	ldrb	r2, [r3, #1]
 8007c28:	b37f      	cbz	r7, 8007c8a <_strtod_l+0x232>
 8007c2a:	4681      	mov	r9, r0
 8007c2c:	463d      	mov	r5, r7
 8007c2e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007c32:	2b09      	cmp	r3, #9
 8007c34:	d912      	bls.n	8007c5c <_strtod_l+0x204>
 8007c36:	2301      	movs	r3, #1
 8007c38:	e7c4      	b.n	8007bc4 <_strtod_l+0x16c>
 8007c3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c3c:	1c5a      	adds	r2, r3, #1
 8007c3e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007c40:	785a      	ldrb	r2, [r3, #1]
 8007c42:	3001      	adds	r0, #1
 8007c44:	2a30      	cmp	r2, #48	@ 0x30
 8007c46:	d0f8      	beq.n	8007c3a <_strtod_l+0x1e2>
 8007c48:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007c4c:	2b08      	cmp	r3, #8
 8007c4e:	f200 84d3 	bhi.w	80085f8 <_strtod_l+0xba0>
 8007c52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c54:	930c      	str	r3, [sp, #48]	@ 0x30
 8007c56:	4681      	mov	r9, r0
 8007c58:	2000      	movs	r0, #0
 8007c5a:	4605      	mov	r5, r0
 8007c5c:	3a30      	subs	r2, #48	@ 0x30
 8007c5e:	f100 0301 	add.w	r3, r0, #1
 8007c62:	d02a      	beq.n	8007cba <_strtod_l+0x262>
 8007c64:	4499      	add	r9, r3
 8007c66:	eb00 0c05 	add.w	ip, r0, r5
 8007c6a:	462b      	mov	r3, r5
 8007c6c:	210a      	movs	r1, #10
 8007c6e:	4563      	cmp	r3, ip
 8007c70:	d10d      	bne.n	8007c8e <_strtod_l+0x236>
 8007c72:	1c69      	adds	r1, r5, #1
 8007c74:	4401      	add	r1, r0
 8007c76:	4428      	add	r0, r5
 8007c78:	2808      	cmp	r0, #8
 8007c7a:	dc16      	bgt.n	8007caa <_strtod_l+0x252>
 8007c7c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007c7e:	230a      	movs	r3, #10
 8007c80:	fb03 2300 	mla	r3, r3, r0, r2
 8007c84:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c86:	2300      	movs	r3, #0
 8007c88:	e018      	b.n	8007cbc <_strtod_l+0x264>
 8007c8a:	4638      	mov	r0, r7
 8007c8c:	e7da      	b.n	8007c44 <_strtod_l+0x1ec>
 8007c8e:	2b08      	cmp	r3, #8
 8007c90:	f103 0301 	add.w	r3, r3, #1
 8007c94:	dc03      	bgt.n	8007c9e <_strtod_l+0x246>
 8007c96:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007c98:	434e      	muls	r6, r1
 8007c9a:	960a      	str	r6, [sp, #40]	@ 0x28
 8007c9c:	e7e7      	b.n	8007c6e <_strtod_l+0x216>
 8007c9e:	2b10      	cmp	r3, #16
 8007ca0:	bfde      	ittt	le
 8007ca2:	9e08      	ldrle	r6, [sp, #32]
 8007ca4:	434e      	mulle	r6, r1
 8007ca6:	9608      	strle	r6, [sp, #32]
 8007ca8:	e7e1      	b.n	8007c6e <_strtod_l+0x216>
 8007caa:	280f      	cmp	r0, #15
 8007cac:	dceb      	bgt.n	8007c86 <_strtod_l+0x22e>
 8007cae:	9808      	ldr	r0, [sp, #32]
 8007cb0:	230a      	movs	r3, #10
 8007cb2:	fb03 2300 	mla	r3, r3, r0, r2
 8007cb6:	9308      	str	r3, [sp, #32]
 8007cb8:	e7e5      	b.n	8007c86 <_strtod_l+0x22e>
 8007cba:	4629      	mov	r1, r5
 8007cbc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007cbe:	1c50      	adds	r0, r2, #1
 8007cc0:	9019      	str	r0, [sp, #100]	@ 0x64
 8007cc2:	7852      	ldrb	r2, [r2, #1]
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	460d      	mov	r5, r1
 8007cc8:	e7b1      	b.n	8007c2e <_strtod_l+0x1d6>
 8007cca:	f04f 0900 	mov.w	r9, #0
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e77d      	b.n	8007bce <_strtod_l+0x176>
 8007cd2:	f04f 0c00 	mov.w	ip, #0
 8007cd6:	1ca2      	adds	r2, r4, #2
 8007cd8:	9219      	str	r2, [sp, #100]	@ 0x64
 8007cda:	78a2      	ldrb	r2, [r4, #2]
 8007cdc:	e785      	b.n	8007bea <_strtod_l+0x192>
 8007cde:	f04f 0c01 	mov.w	ip, #1
 8007ce2:	e7f8      	b.n	8007cd6 <_strtod_l+0x27e>
 8007ce4:	08009dd8 	.word	0x08009dd8
 8007ce8:	08009dc0 	.word	0x08009dc0
 8007cec:	7ff00000 	.word	0x7ff00000
 8007cf0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007cf2:	1c51      	adds	r1, r2, #1
 8007cf4:	9119      	str	r1, [sp, #100]	@ 0x64
 8007cf6:	7852      	ldrb	r2, [r2, #1]
 8007cf8:	2a30      	cmp	r2, #48	@ 0x30
 8007cfa:	d0f9      	beq.n	8007cf0 <_strtod_l+0x298>
 8007cfc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007d00:	2908      	cmp	r1, #8
 8007d02:	f63f af78 	bhi.w	8007bf6 <_strtod_l+0x19e>
 8007d06:	3a30      	subs	r2, #48	@ 0x30
 8007d08:	920e      	str	r2, [sp, #56]	@ 0x38
 8007d0a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007d0c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007d0e:	f04f 080a 	mov.w	r8, #10
 8007d12:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007d14:	1c56      	adds	r6, r2, #1
 8007d16:	9619      	str	r6, [sp, #100]	@ 0x64
 8007d18:	7852      	ldrb	r2, [r2, #1]
 8007d1a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007d1e:	f1be 0f09 	cmp.w	lr, #9
 8007d22:	d939      	bls.n	8007d98 <_strtod_l+0x340>
 8007d24:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007d26:	1a76      	subs	r6, r6, r1
 8007d28:	2e08      	cmp	r6, #8
 8007d2a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007d2e:	dc03      	bgt.n	8007d38 <_strtod_l+0x2e0>
 8007d30:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007d32:	4588      	cmp	r8, r1
 8007d34:	bfa8      	it	ge
 8007d36:	4688      	movge	r8, r1
 8007d38:	f1bc 0f00 	cmp.w	ip, #0
 8007d3c:	d001      	beq.n	8007d42 <_strtod_l+0x2ea>
 8007d3e:	f1c8 0800 	rsb	r8, r8, #0
 8007d42:	2d00      	cmp	r5, #0
 8007d44:	d14e      	bne.n	8007de4 <_strtod_l+0x38c>
 8007d46:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007d48:	4308      	orrs	r0, r1
 8007d4a:	f47f aebe 	bne.w	8007aca <_strtod_l+0x72>
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	f47f aed6 	bne.w	8007b00 <_strtod_l+0xa8>
 8007d54:	2a69      	cmp	r2, #105	@ 0x69
 8007d56:	d028      	beq.n	8007daa <_strtod_l+0x352>
 8007d58:	dc25      	bgt.n	8007da6 <_strtod_l+0x34e>
 8007d5a:	2a49      	cmp	r2, #73	@ 0x49
 8007d5c:	d025      	beq.n	8007daa <_strtod_l+0x352>
 8007d5e:	2a4e      	cmp	r2, #78	@ 0x4e
 8007d60:	f47f aece 	bne.w	8007b00 <_strtod_l+0xa8>
 8007d64:	499b      	ldr	r1, [pc, #620]	@ (8007fd4 <_strtod_l+0x57c>)
 8007d66:	a819      	add	r0, sp, #100	@ 0x64
 8007d68:	f001 f9ee 	bl	8009148 <__match>
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	f43f aec7 	beq.w	8007b00 <_strtod_l+0xa8>
 8007d72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	2b28      	cmp	r3, #40	@ 0x28
 8007d78:	d12e      	bne.n	8007dd8 <_strtod_l+0x380>
 8007d7a:	4997      	ldr	r1, [pc, #604]	@ (8007fd8 <_strtod_l+0x580>)
 8007d7c:	aa1c      	add	r2, sp, #112	@ 0x70
 8007d7e:	a819      	add	r0, sp, #100	@ 0x64
 8007d80:	f001 f9f6 	bl	8009170 <__hexnan>
 8007d84:	2805      	cmp	r0, #5
 8007d86:	d127      	bne.n	8007dd8 <_strtod_l+0x380>
 8007d88:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007d8a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007d8e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007d92:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007d96:	e698      	b.n	8007aca <_strtod_l+0x72>
 8007d98:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007d9a:	fb08 2101 	mla	r1, r8, r1, r2
 8007d9e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007da2:	920e      	str	r2, [sp, #56]	@ 0x38
 8007da4:	e7b5      	b.n	8007d12 <_strtod_l+0x2ba>
 8007da6:	2a6e      	cmp	r2, #110	@ 0x6e
 8007da8:	e7da      	b.n	8007d60 <_strtod_l+0x308>
 8007daa:	498c      	ldr	r1, [pc, #560]	@ (8007fdc <_strtod_l+0x584>)
 8007dac:	a819      	add	r0, sp, #100	@ 0x64
 8007dae:	f001 f9cb 	bl	8009148 <__match>
 8007db2:	2800      	cmp	r0, #0
 8007db4:	f43f aea4 	beq.w	8007b00 <_strtod_l+0xa8>
 8007db8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007dba:	4989      	ldr	r1, [pc, #548]	@ (8007fe0 <_strtod_l+0x588>)
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	a819      	add	r0, sp, #100	@ 0x64
 8007dc0:	9319      	str	r3, [sp, #100]	@ 0x64
 8007dc2:	f001 f9c1 	bl	8009148 <__match>
 8007dc6:	b910      	cbnz	r0, 8007dce <_strtod_l+0x376>
 8007dc8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007dca:	3301      	adds	r3, #1
 8007dcc:	9319      	str	r3, [sp, #100]	@ 0x64
 8007dce:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007ff0 <_strtod_l+0x598>
 8007dd2:	f04f 0a00 	mov.w	sl, #0
 8007dd6:	e678      	b.n	8007aca <_strtod_l+0x72>
 8007dd8:	4882      	ldr	r0, [pc, #520]	@ (8007fe4 <_strtod_l+0x58c>)
 8007dda:	f000 fef1 	bl	8008bc0 <nan>
 8007dde:	ec5b ab10 	vmov	sl, fp, d0
 8007de2:	e672      	b.n	8007aca <_strtod_l+0x72>
 8007de4:	eba8 0309 	sub.w	r3, r8, r9
 8007de8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007dea:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dec:	2f00      	cmp	r7, #0
 8007dee:	bf08      	it	eq
 8007df0:	462f      	moveq	r7, r5
 8007df2:	2d10      	cmp	r5, #16
 8007df4:	462c      	mov	r4, r5
 8007df6:	bfa8      	it	ge
 8007df8:	2410      	movge	r4, #16
 8007dfa:	f7f8 fb83 	bl	8000504 <__aeabi_ui2d>
 8007dfe:	2d09      	cmp	r5, #9
 8007e00:	4682      	mov	sl, r0
 8007e02:	468b      	mov	fp, r1
 8007e04:	dc13      	bgt.n	8007e2e <_strtod_l+0x3d6>
 8007e06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	f43f ae5e 	beq.w	8007aca <_strtod_l+0x72>
 8007e0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e10:	dd78      	ble.n	8007f04 <_strtod_l+0x4ac>
 8007e12:	2b16      	cmp	r3, #22
 8007e14:	dc5f      	bgt.n	8007ed6 <_strtod_l+0x47e>
 8007e16:	4974      	ldr	r1, [pc, #464]	@ (8007fe8 <_strtod_l+0x590>)
 8007e18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007e1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e20:	4652      	mov	r2, sl
 8007e22:	465b      	mov	r3, fp
 8007e24:	f7f8 fbe8 	bl	80005f8 <__aeabi_dmul>
 8007e28:	4682      	mov	sl, r0
 8007e2a:	468b      	mov	fp, r1
 8007e2c:	e64d      	b.n	8007aca <_strtod_l+0x72>
 8007e2e:	4b6e      	ldr	r3, [pc, #440]	@ (8007fe8 <_strtod_l+0x590>)
 8007e30:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007e34:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007e38:	f7f8 fbde 	bl	80005f8 <__aeabi_dmul>
 8007e3c:	4682      	mov	sl, r0
 8007e3e:	9808      	ldr	r0, [sp, #32]
 8007e40:	468b      	mov	fp, r1
 8007e42:	f7f8 fb5f 	bl	8000504 <__aeabi_ui2d>
 8007e46:	4602      	mov	r2, r0
 8007e48:	460b      	mov	r3, r1
 8007e4a:	4650      	mov	r0, sl
 8007e4c:	4659      	mov	r1, fp
 8007e4e:	f7f8 fa1d 	bl	800028c <__adddf3>
 8007e52:	2d0f      	cmp	r5, #15
 8007e54:	4682      	mov	sl, r0
 8007e56:	468b      	mov	fp, r1
 8007e58:	ddd5      	ble.n	8007e06 <_strtod_l+0x3ae>
 8007e5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e5c:	1b2c      	subs	r4, r5, r4
 8007e5e:	441c      	add	r4, r3
 8007e60:	2c00      	cmp	r4, #0
 8007e62:	f340 8096 	ble.w	8007f92 <_strtod_l+0x53a>
 8007e66:	f014 030f 	ands.w	r3, r4, #15
 8007e6a:	d00a      	beq.n	8007e82 <_strtod_l+0x42a>
 8007e6c:	495e      	ldr	r1, [pc, #376]	@ (8007fe8 <_strtod_l+0x590>)
 8007e6e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007e72:	4652      	mov	r2, sl
 8007e74:	465b      	mov	r3, fp
 8007e76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e7a:	f7f8 fbbd 	bl	80005f8 <__aeabi_dmul>
 8007e7e:	4682      	mov	sl, r0
 8007e80:	468b      	mov	fp, r1
 8007e82:	f034 040f 	bics.w	r4, r4, #15
 8007e86:	d073      	beq.n	8007f70 <_strtod_l+0x518>
 8007e88:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007e8c:	dd48      	ble.n	8007f20 <_strtod_l+0x4c8>
 8007e8e:	2400      	movs	r4, #0
 8007e90:	46a0      	mov	r8, r4
 8007e92:	940a      	str	r4, [sp, #40]	@ 0x28
 8007e94:	46a1      	mov	r9, r4
 8007e96:	9a05      	ldr	r2, [sp, #20]
 8007e98:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007ff0 <_strtod_l+0x598>
 8007e9c:	2322      	movs	r3, #34	@ 0x22
 8007e9e:	6013      	str	r3, [r2, #0]
 8007ea0:	f04f 0a00 	mov.w	sl, #0
 8007ea4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	f43f ae0f 	beq.w	8007aca <_strtod_l+0x72>
 8007eac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007eae:	9805      	ldr	r0, [sp, #20]
 8007eb0:	f7ff f942 	bl	8007138 <_Bfree>
 8007eb4:	9805      	ldr	r0, [sp, #20]
 8007eb6:	4649      	mov	r1, r9
 8007eb8:	f7ff f93e 	bl	8007138 <_Bfree>
 8007ebc:	9805      	ldr	r0, [sp, #20]
 8007ebe:	4641      	mov	r1, r8
 8007ec0:	f7ff f93a 	bl	8007138 <_Bfree>
 8007ec4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007ec6:	9805      	ldr	r0, [sp, #20]
 8007ec8:	f7ff f936 	bl	8007138 <_Bfree>
 8007ecc:	9805      	ldr	r0, [sp, #20]
 8007ece:	4621      	mov	r1, r4
 8007ed0:	f7ff f932 	bl	8007138 <_Bfree>
 8007ed4:	e5f9      	b.n	8007aca <_strtod_l+0x72>
 8007ed6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ed8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007edc:	4293      	cmp	r3, r2
 8007ede:	dbbc      	blt.n	8007e5a <_strtod_l+0x402>
 8007ee0:	4c41      	ldr	r4, [pc, #260]	@ (8007fe8 <_strtod_l+0x590>)
 8007ee2:	f1c5 050f 	rsb	r5, r5, #15
 8007ee6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007eea:	4652      	mov	r2, sl
 8007eec:	465b      	mov	r3, fp
 8007eee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ef2:	f7f8 fb81 	bl	80005f8 <__aeabi_dmul>
 8007ef6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ef8:	1b5d      	subs	r5, r3, r5
 8007efa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007efe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007f02:	e78f      	b.n	8007e24 <_strtod_l+0x3cc>
 8007f04:	3316      	adds	r3, #22
 8007f06:	dba8      	blt.n	8007e5a <_strtod_l+0x402>
 8007f08:	4b37      	ldr	r3, [pc, #220]	@ (8007fe8 <_strtod_l+0x590>)
 8007f0a:	eba9 0808 	sub.w	r8, r9, r8
 8007f0e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007f12:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007f16:	4650      	mov	r0, sl
 8007f18:	4659      	mov	r1, fp
 8007f1a:	f7f8 fc97 	bl	800084c <__aeabi_ddiv>
 8007f1e:	e783      	b.n	8007e28 <_strtod_l+0x3d0>
 8007f20:	4b32      	ldr	r3, [pc, #200]	@ (8007fec <_strtod_l+0x594>)
 8007f22:	9308      	str	r3, [sp, #32]
 8007f24:	2300      	movs	r3, #0
 8007f26:	1124      	asrs	r4, r4, #4
 8007f28:	4650      	mov	r0, sl
 8007f2a:	4659      	mov	r1, fp
 8007f2c:	461e      	mov	r6, r3
 8007f2e:	2c01      	cmp	r4, #1
 8007f30:	dc21      	bgt.n	8007f76 <_strtod_l+0x51e>
 8007f32:	b10b      	cbz	r3, 8007f38 <_strtod_l+0x4e0>
 8007f34:	4682      	mov	sl, r0
 8007f36:	468b      	mov	fp, r1
 8007f38:	492c      	ldr	r1, [pc, #176]	@ (8007fec <_strtod_l+0x594>)
 8007f3a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007f3e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007f42:	4652      	mov	r2, sl
 8007f44:	465b      	mov	r3, fp
 8007f46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f4a:	f7f8 fb55 	bl	80005f8 <__aeabi_dmul>
 8007f4e:	4b28      	ldr	r3, [pc, #160]	@ (8007ff0 <_strtod_l+0x598>)
 8007f50:	460a      	mov	r2, r1
 8007f52:	400b      	ands	r3, r1
 8007f54:	4927      	ldr	r1, [pc, #156]	@ (8007ff4 <_strtod_l+0x59c>)
 8007f56:	428b      	cmp	r3, r1
 8007f58:	4682      	mov	sl, r0
 8007f5a:	d898      	bhi.n	8007e8e <_strtod_l+0x436>
 8007f5c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007f60:	428b      	cmp	r3, r1
 8007f62:	bf86      	itte	hi
 8007f64:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007ff8 <_strtod_l+0x5a0>
 8007f68:	f04f 3aff 	movhi.w	sl, #4294967295
 8007f6c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007f70:	2300      	movs	r3, #0
 8007f72:	9308      	str	r3, [sp, #32]
 8007f74:	e07a      	b.n	800806c <_strtod_l+0x614>
 8007f76:	07e2      	lsls	r2, r4, #31
 8007f78:	d505      	bpl.n	8007f86 <_strtod_l+0x52e>
 8007f7a:	9b08      	ldr	r3, [sp, #32]
 8007f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f80:	f7f8 fb3a 	bl	80005f8 <__aeabi_dmul>
 8007f84:	2301      	movs	r3, #1
 8007f86:	9a08      	ldr	r2, [sp, #32]
 8007f88:	3208      	adds	r2, #8
 8007f8a:	3601      	adds	r6, #1
 8007f8c:	1064      	asrs	r4, r4, #1
 8007f8e:	9208      	str	r2, [sp, #32]
 8007f90:	e7cd      	b.n	8007f2e <_strtod_l+0x4d6>
 8007f92:	d0ed      	beq.n	8007f70 <_strtod_l+0x518>
 8007f94:	4264      	negs	r4, r4
 8007f96:	f014 020f 	ands.w	r2, r4, #15
 8007f9a:	d00a      	beq.n	8007fb2 <_strtod_l+0x55a>
 8007f9c:	4b12      	ldr	r3, [pc, #72]	@ (8007fe8 <_strtod_l+0x590>)
 8007f9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fa2:	4650      	mov	r0, sl
 8007fa4:	4659      	mov	r1, fp
 8007fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007faa:	f7f8 fc4f 	bl	800084c <__aeabi_ddiv>
 8007fae:	4682      	mov	sl, r0
 8007fb0:	468b      	mov	fp, r1
 8007fb2:	1124      	asrs	r4, r4, #4
 8007fb4:	d0dc      	beq.n	8007f70 <_strtod_l+0x518>
 8007fb6:	2c1f      	cmp	r4, #31
 8007fb8:	dd20      	ble.n	8007ffc <_strtod_l+0x5a4>
 8007fba:	2400      	movs	r4, #0
 8007fbc:	46a0      	mov	r8, r4
 8007fbe:	940a      	str	r4, [sp, #40]	@ 0x28
 8007fc0:	46a1      	mov	r9, r4
 8007fc2:	9a05      	ldr	r2, [sp, #20]
 8007fc4:	2322      	movs	r3, #34	@ 0x22
 8007fc6:	f04f 0a00 	mov.w	sl, #0
 8007fca:	f04f 0b00 	mov.w	fp, #0
 8007fce:	6013      	str	r3, [r2, #0]
 8007fd0:	e768      	b.n	8007ea4 <_strtod_l+0x44c>
 8007fd2:	bf00      	nop
 8007fd4:	08009bad 	.word	0x08009bad
 8007fd8:	08009dc4 	.word	0x08009dc4
 8007fdc:	08009ba5 	.word	0x08009ba5
 8007fe0:	08009bdc 	.word	0x08009bdc
 8007fe4:	08009f6d 	.word	0x08009f6d
 8007fe8:	08009cf8 	.word	0x08009cf8
 8007fec:	08009cd0 	.word	0x08009cd0
 8007ff0:	7ff00000 	.word	0x7ff00000
 8007ff4:	7ca00000 	.word	0x7ca00000
 8007ff8:	7fefffff 	.word	0x7fefffff
 8007ffc:	f014 0310 	ands.w	r3, r4, #16
 8008000:	bf18      	it	ne
 8008002:	236a      	movne	r3, #106	@ 0x6a
 8008004:	4ea9      	ldr	r6, [pc, #676]	@ (80082ac <_strtod_l+0x854>)
 8008006:	9308      	str	r3, [sp, #32]
 8008008:	4650      	mov	r0, sl
 800800a:	4659      	mov	r1, fp
 800800c:	2300      	movs	r3, #0
 800800e:	07e2      	lsls	r2, r4, #31
 8008010:	d504      	bpl.n	800801c <_strtod_l+0x5c4>
 8008012:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008016:	f7f8 faef 	bl	80005f8 <__aeabi_dmul>
 800801a:	2301      	movs	r3, #1
 800801c:	1064      	asrs	r4, r4, #1
 800801e:	f106 0608 	add.w	r6, r6, #8
 8008022:	d1f4      	bne.n	800800e <_strtod_l+0x5b6>
 8008024:	b10b      	cbz	r3, 800802a <_strtod_l+0x5d2>
 8008026:	4682      	mov	sl, r0
 8008028:	468b      	mov	fp, r1
 800802a:	9b08      	ldr	r3, [sp, #32]
 800802c:	b1b3      	cbz	r3, 800805c <_strtod_l+0x604>
 800802e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008032:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008036:	2b00      	cmp	r3, #0
 8008038:	4659      	mov	r1, fp
 800803a:	dd0f      	ble.n	800805c <_strtod_l+0x604>
 800803c:	2b1f      	cmp	r3, #31
 800803e:	dd55      	ble.n	80080ec <_strtod_l+0x694>
 8008040:	2b34      	cmp	r3, #52	@ 0x34
 8008042:	bfde      	ittt	le
 8008044:	f04f 33ff 	movle.w	r3, #4294967295
 8008048:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800804c:	4093      	lslle	r3, r2
 800804e:	f04f 0a00 	mov.w	sl, #0
 8008052:	bfcc      	ite	gt
 8008054:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008058:	ea03 0b01 	andle.w	fp, r3, r1
 800805c:	2200      	movs	r2, #0
 800805e:	2300      	movs	r3, #0
 8008060:	4650      	mov	r0, sl
 8008062:	4659      	mov	r1, fp
 8008064:	f7f8 fd30 	bl	8000ac8 <__aeabi_dcmpeq>
 8008068:	2800      	cmp	r0, #0
 800806a:	d1a6      	bne.n	8007fba <_strtod_l+0x562>
 800806c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800806e:	9300      	str	r3, [sp, #0]
 8008070:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008072:	9805      	ldr	r0, [sp, #20]
 8008074:	462b      	mov	r3, r5
 8008076:	463a      	mov	r2, r7
 8008078:	f7ff f8c6 	bl	8007208 <__s2b>
 800807c:	900a      	str	r0, [sp, #40]	@ 0x28
 800807e:	2800      	cmp	r0, #0
 8008080:	f43f af05 	beq.w	8007e8e <_strtod_l+0x436>
 8008084:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008086:	2a00      	cmp	r2, #0
 8008088:	eba9 0308 	sub.w	r3, r9, r8
 800808c:	bfa8      	it	ge
 800808e:	2300      	movge	r3, #0
 8008090:	9312      	str	r3, [sp, #72]	@ 0x48
 8008092:	2400      	movs	r4, #0
 8008094:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008098:	9316      	str	r3, [sp, #88]	@ 0x58
 800809a:	46a0      	mov	r8, r4
 800809c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800809e:	9805      	ldr	r0, [sp, #20]
 80080a0:	6859      	ldr	r1, [r3, #4]
 80080a2:	f7ff f809 	bl	80070b8 <_Balloc>
 80080a6:	4681      	mov	r9, r0
 80080a8:	2800      	cmp	r0, #0
 80080aa:	f43f aef4 	beq.w	8007e96 <_strtod_l+0x43e>
 80080ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080b0:	691a      	ldr	r2, [r3, #16]
 80080b2:	3202      	adds	r2, #2
 80080b4:	f103 010c 	add.w	r1, r3, #12
 80080b8:	0092      	lsls	r2, r2, #2
 80080ba:	300c      	adds	r0, #12
 80080bc:	f000 fd72 	bl	8008ba4 <memcpy>
 80080c0:	ec4b ab10 	vmov	d0, sl, fp
 80080c4:	9805      	ldr	r0, [sp, #20]
 80080c6:	aa1c      	add	r2, sp, #112	@ 0x70
 80080c8:	a91b      	add	r1, sp, #108	@ 0x6c
 80080ca:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80080ce:	f7ff fbd7 	bl	8007880 <__d2b>
 80080d2:	901a      	str	r0, [sp, #104]	@ 0x68
 80080d4:	2800      	cmp	r0, #0
 80080d6:	f43f aede 	beq.w	8007e96 <_strtod_l+0x43e>
 80080da:	9805      	ldr	r0, [sp, #20]
 80080dc:	2101      	movs	r1, #1
 80080de:	f7ff f929 	bl	8007334 <__i2b>
 80080e2:	4680      	mov	r8, r0
 80080e4:	b948      	cbnz	r0, 80080fa <_strtod_l+0x6a2>
 80080e6:	f04f 0800 	mov.w	r8, #0
 80080ea:	e6d4      	b.n	8007e96 <_strtod_l+0x43e>
 80080ec:	f04f 32ff 	mov.w	r2, #4294967295
 80080f0:	fa02 f303 	lsl.w	r3, r2, r3
 80080f4:	ea03 0a0a 	and.w	sl, r3, sl
 80080f8:	e7b0      	b.n	800805c <_strtod_l+0x604>
 80080fa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80080fc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80080fe:	2d00      	cmp	r5, #0
 8008100:	bfab      	itete	ge
 8008102:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008104:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008106:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008108:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800810a:	bfac      	ite	ge
 800810c:	18ef      	addge	r7, r5, r3
 800810e:	1b5e      	sublt	r6, r3, r5
 8008110:	9b08      	ldr	r3, [sp, #32]
 8008112:	1aed      	subs	r5, r5, r3
 8008114:	4415      	add	r5, r2
 8008116:	4b66      	ldr	r3, [pc, #408]	@ (80082b0 <_strtod_l+0x858>)
 8008118:	3d01      	subs	r5, #1
 800811a:	429d      	cmp	r5, r3
 800811c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008120:	da50      	bge.n	80081c4 <_strtod_l+0x76c>
 8008122:	1b5b      	subs	r3, r3, r5
 8008124:	2b1f      	cmp	r3, #31
 8008126:	eba2 0203 	sub.w	r2, r2, r3
 800812a:	f04f 0101 	mov.w	r1, #1
 800812e:	dc3d      	bgt.n	80081ac <_strtod_l+0x754>
 8008130:	fa01 f303 	lsl.w	r3, r1, r3
 8008134:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008136:	2300      	movs	r3, #0
 8008138:	9310      	str	r3, [sp, #64]	@ 0x40
 800813a:	18bd      	adds	r5, r7, r2
 800813c:	9b08      	ldr	r3, [sp, #32]
 800813e:	42af      	cmp	r7, r5
 8008140:	4416      	add	r6, r2
 8008142:	441e      	add	r6, r3
 8008144:	463b      	mov	r3, r7
 8008146:	bfa8      	it	ge
 8008148:	462b      	movge	r3, r5
 800814a:	42b3      	cmp	r3, r6
 800814c:	bfa8      	it	ge
 800814e:	4633      	movge	r3, r6
 8008150:	2b00      	cmp	r3, #0
 8008152:	bfc2      	ittt	gt
 8008154:	1aed      	subgt	r5, r5, r3
 8008156:	1af6      	subgt	r6, r6, r3
 8008158:	1aff      	subgt	r7, r7, r3
 800815a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800815c:	2b00      	cmp	r3, #0
 800815e:	dd16      	ble.n	800818e <_strtod_l+0x736>
 8008160:	4641      	mov	r1, r8
 8008162:	9805      	ldr	r0, [sp, #20]
 8008164:	461a      	mov	r2, r3
 8008166:	f7ff f9a5 	bl	80074b4 <__pow5mult>
 800816a:	4680      	mov	r8, r0
 800816c:	2800      	cmp	r0, #0
 800816e:	d0ba      	beq.n	80080e6 <_strtod_l+0x68e>
 8008170:	4601      	mov	r1, r0
 8008172:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008174:	9805      	ldr	r0, [sp, #20]
 8008176:	f7ff f8f3 	bl	8007360 <__multiply>
 800817a:	900e      	str	r0, [sp, #56]	@ 0x38
 800817c:	2800      	cmp	r0, #0
 800817e:	f43f ae8a 	beq.w	8007e96 <_strtod_l+0x43e>
 8008182:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008184:	9805      	ldr	r0, [sp, #20]
 8008186:	f7fe ffd7 	bl	8007138 <_Bfree>
 800818a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800818c:	931a      	str	r3, [sp, #104]	@ 0x68
 800818e:	2d00      	cmp	r5, #0
 8008190:	dc1d      	bgt.n	80081ce <_strtod_l+0x776>
 8008192:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008194:	2b00      	cmp	r3, #0
 8008196:	dd23      	ble.n	80081e0 <_strtod_l+0x788>
 8008198:	4649      	mov	r1, r9
 800819a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800819c:	9805      	ldr	r0, [sp, #20]
 800819e:	f7ff f989 	bl	80074b4 <__pow5mult>
 80081a2:	4681      	mov	r9, r0
 80081a4:	b9e0      	cbnz	r0, 80081e0 <_strtod_l+0x788>
 80081a6:	f04f 0900 	mov.w	r9, #0
 80081aa:	e674      	b.n	8007e96 <_strtod_l+0x43e>
 80081ac:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80081b0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80081b4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80081b8:	35e2      	adds	r5, #226	@ 0xe2
 80081ba:	fa01 f305 	lsl.w	r3, r1, r5
 80081be:	9310      	str	r3, [sp, #64]	@ 0x40
 80081c0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80081c2:	e7ba      	b.n	800813a <_strtod_l+0x6e2>
 80081c4:	2300      	movs	r3, #0
 80081c6:	9310      	str	r3, [sp, #64]	@ 0x40
 80081c8:	2301      	movs	r3, #1
 80081ca:	9313      	str	r3, [sp, #76]	@ 0x4c
 80081cc:	e7b5      	b.n	800813a <_strtod_l+0x6e2>
 80081ce:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80081d0:	9805      	ldr	r0, [sp, #20]
 80081d2:	462a      	mov	r2, r5
 80081d4:	f7ff f9c8 	bl	8007568 <__lshift>
 80081d8:	901a      	str	r0, [sp, #104]	@ 0x68
 80081da:	2800      	cmp	r0, #0
 80081dc:	d1d9      	bne.n	8008192 <_strtod_l+0x73a>
 80081de:	e65a      	b.n	8007e96 <_strtod_l+0x43e>
 80081e0:	2e00      	cmp	r6, #0
 80081e2:	dd07      	ble.n	80081f4 <_strtod_l+0x79c>
 80081e4:	4649      	mov	r1, r9
 80081e6:	9805      	ldr	r0, [sp, #20]
 80081e8:	4632      	mov	r2, r6
 80081ea:	f7ff f9bd 	bl	8007568 <__lshift>
 80081ee:	4681      	mov	r9, r0
 80081f0:	2800      	cmp	r0, #0
 80081f2:	d0d8      	beq.n	80081a6 <_strtod_l+0x74e>
 80081f4:	2f00      	cmp	r7, #0
 80081f6:	dd08      	ble.n	800820a <_strtod_l+0x7b2>
 80081f8:	4641      	mov	r1, r8
 80081fa:	9805      	ldr	r0, [sp, #20]
 80081fc:	463a      	mov	r2, r7
 80081fe:	f7ff f9b3 	bl	8007568 <__lshift>
 8008202:	4680      	mov	r8, r0
 8008204:	2800      	cmp	r0, #0
 8008206:	f43f ae46 	beq.w	8007e96 <_strtod_l+0x43e>
 800820a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800820c:	9805      	ldr	r0, [sp, #20]
 800820e:	464a      	mov	r2, r9
 8008210:	f7ff fa32 	bl	8007678 <__mdiff>
 8008214:	4604      	mov	r4, r0
 8008216:	2800      	cmp	r0, #0
 8008218:	f43f ae3d 	beq.w	8007e96 <_strtod_l+0x43e>
 800821c:	68c3      	ldr	r3, [r0, #12]
 800821e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008220:	2300      	movs	r3, #0
 8008222:	60c3      	str	r3, [r0, #12]
 8008224:	4641      	mov	r1, r8
 8008226:	f7ff fa0b 	bl	8007640 <__mcmp>
 800822a:	2800      	cmp	r0, #0
 800822c:	da46      	bge.n	80082bc <_strtod_l+0x864>
 800822e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008230:	ea53 030a 	orrs.w	r3, r3, sl
 8008234:	d16c      	bne.n	8008310 <_strtod_l+0x8b8>
 8008236:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800823a:	2b00      	cmp	r3, #0
 800823c:	d168      	bne.n	8008310 <_strtod_l+0x8b8>
 800823e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008242:	0d1b      	lsrs	r3, r3, #20
 8008244:	051b      	lsls	r3, r3, #20
 8008246:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800824a:	d961      	bls.n	8008310 <_strtod_l+0x8b8>
 800824c:	6963      	ldr	r3, [r4, #20]
 800824e:	b913      	cbnz	r3, 8008256 <_strtod_l+0x7fe>
 8008250:	6923      	ldr	r3, [r4, #16]
 8008252:	2b01      	cmp	r3, #1
 8008254:	dd5c      	ble.n	8008310 <_strtod_l+0x8b8>
 8008256:	4621      	mov	r1, r4
 8008258:	2201      	movs	r2, #1
 800825a:	9805      	ldr	r0, [sp, #20]
 800825c:	f7ff f984 	bl	8007568 <__lshift>
 8008260:	4641      	mov	r1, r8
 8008262:	4604      	mov	r4, r0
 8008264:	f7ff f9ec 	bl	8007640 <__mcmp>
 8008268:	2800      	cmp	r0, #0
 800826a:	dd51      	ble.n	8008310 <_strtod_l+0x8b8>
 800826c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008270:	9a08      	ldr	r2, [sp, #32]
 8008272:	0d1b      	lsrs	r3, r3, #20
 8008274:	051b      	lsls	r3, r3, #20
 8008276:	2a00      	cmp	r2, #0
 8008278:	d06b      	beq.n	8008352 <_strtod_l+0x8fa>
 800827a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800827e:	d868      	bhi.n	8008352 <_strtod_l+0x8fa>
 8008280:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008284:	f67f ae9d 	bls.w	8007fc2 <_strtod_l+0x56a>
 8008288:	4b0a      	ldr	r3, [pc, #40]	@ (80082b4 <_strtod_l+0x85c>)
 800828a:	4650      	mov	r0, sl
 800828c:	4659      	mov	r1, fp
 800828e:	2200      	movs	r2, #0
 8008290:	f7f8 f9b2 	bl	80005f8 <__aeabi_dmul>
 8008294:	4b08      	ldr	r3, [pc, #32]	@ (80082b8 <_strtod_l+0x860>)
 8008296:	400b      	ands	r3, r1
 8008298:	4682      	mov	sl, r0
 800829a:	468b      	mov	fp, r1
 800829c:	2b00      	cmp	r3, #0
 800829e:	f47f ae05 	bne.w	8007eac <_strtod_l+0x454>
 80082a2:	9a05      	ldr	r2, [sp, #20]
 80082a4:	2322      	movs	r3, #34	@ 0x22
 80082a6:	6013      	str	r3, [r2, #0]
 80082a8:	e600      	b.n	8007eac <_strtod_l+0x454>
 80082aa:	bf00      	nop
 80082ac:	08009df0 	.word	0x08009df0
 80082b0:	fffffc02 	.word	0xfffffc02
 80082b4:	39500000 	.word	0x39500000
 80082b8:	7ff00000 	.word	0x7ff00000
 80082bc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80082c0:	d165      	bne.n	800838e <_strtod_l+0x936>
 80082c2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80082c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80082c8:	b35a      	cbz	r2, 8008322 <_strtod_l+0x8ca>
 80082ca:	4a9f      	ldr	r2, [pc, #636]	@ (8008548 <_strtod_l+0xaf0>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d12b      	bne.n	8008328 <_strtod_l+0x8d0>
 80082d0:	9b08      	ldr	r3, [sp, #32]
 80082d2:	4651      	mov	r1, sl
 80082d4:	b303      	cbz	r3, 8008318 <_strtod_l+0x8c0>
 80082d6:	4b9d      	ldr	r3, [pc, #628]	@ (800854c <_strtod_l+0xaf4>)
 80082d8:	465a      	mov	r2, fp
 80082da:	4013      	ands	r3, r2
 80082dc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80082e0:	f04f 32ff 	mov.w	r2, #4294967295
 80082e4:	d81b      	bhi.n	800831e <_strtod_l+0x8c6>
 80082e6:	0d1b      	lsrs	r3, r3, #20
 80082e8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80082ec:	fa02 f303 	lsl.w	r3, r2, r3
 80082f0:	4299      	cmp	r1, r3
 80082f2:	d119      	bne.n	8008328 <_strtod_l+0x8d0>
 80082f4:	4b96      	ldr	r3, [pc, #600]	@ (8008550 <_strtod_l+0xaf8>)
 80082f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d102      	bne.n	8008302 <_strtod_l+0x8aa>
 80082fc:	3101      	adds	r1, #1
 80082fe:	f43f adca 	beq.w	8007e96 <_strtod_l+0x43e>
 8008302:	4b92      	ldr	r3, [pc, #584]	@ (800854c <_strtod_l+0xaf4>)
 8008304:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008306:	401a      	ands	r2, r3
 8008308:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800830c:	f04f 0a00 	mov.w	sl, #0
 8008310:	9b08      	ldr	r3, [sp, #32]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1b8      	bne.n	8008288 <_strtod_l+0x830>
 8008316:	e5c9      	b.n	8007eac <_strtod_l+0x454>
 8008318:	f04f 33ff 	mov.w	r3, #4294967295
 800831c:	e7e8      	b.n	80082f0 <_strtod_l+0x898>
 800831e:	4613      	mov	r3, r2
 8008320:	e7e6      	b.n	80082f0 <_strtod_l+0x898>
 8008322:	ea53 030a 	orrs.w	r3, r3, sl
 8008326:	d0a1      	beq.n	800826c <_strtod_l+0x814>
 8008328:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800832a:	b1db      	cbz	r3, 8008364 <_strtod_l+0x90c>
 800832c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800832e:	4213      	tst	r3, r2
 8008330:	d0ee      	beq.n	8008310 <_strtod_l+0x8b8>
 8008332:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008334:	9a08      	ldr	r2, [sp, #32]
 8008336:	4650      	mov	r0, sl
 8008338:	4659      	mov	r1, fp
 800833a:	b1bb      	cbz	r3, 800836c <_strtod_l+0x914>
 800833c:	f7ff fb6e 	bl	8007a1c <sulp>
 8008340:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008344:	ec53 2b10 	vmov	r2, r3, d0
 8008348:	f7f7 ffa0 	bl	800028c <__adddf3>
 800834c:	4682      	mov	sl, r0
 800834e:	468b      	mov	fp, r1
 8008350:	e7de      	b.n	8008310 <_strtod_l+0x8b8>
 8008352:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008356:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800835a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800835e:	f04f 3aff 	mov.w	sl, #4294967295
 8008362:	e7d5      	b.n	8008310 <_strtod_l+0x8b8>
 8008364:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008366:	ea13 0f0a 	tst.w	r3, sl
 800836a:	e7e1      	b.n	8008330 <_strtod_l+0x8d8>
 800836c:	f7ff fb56 	bl	8007a1c <sulp>
 8008370:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008374:	ec53 2b10 	vmov	r2, r3, d0
 8008378:	f7f7 ff86 	bl	8000288 <__aeabi_dsub>
 800837c:	2200      	movs	r2, #0
 800837e:	2300      	movs	r3, #0
 8008380:	4682      	mov	sl, r0
 8008382:	468b      	mov	fp, r1
 8008384:	f7f8 fba0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008388:	2800      	cmp	r0, #0
 800838a:	d0c1      	beq.n	8008310 <_strtod_l+0x8b8>
 800838c:	e619      	b.n	8007fc2 <_strtod_l+0x56a>
 800838e:	4641      	mov	r1, r8
 8008390:	4620      	mov	r0, r4
 8008392:	f7ff facd 	bl	8007930 <__ratio>
 8008396:	ec57 6b10 	vmov	r6, r7, d0
 800839a:	2200      	movs	r2, #0
 800839c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80083a0:	4630      	mov	r0, r6
 80083a2:	4639      	mov	r1, r7
 80083a4:	f7f8 fba4 	bl	8000af0 <__aeabi_dcmple>
 80083a8:	2800      	cmp	r0, #0
 80083aa:	d06f      	beq.n	800848c <_strtod_l+0xa34>
 80083ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d17a      	bne.n	80084a8 <_strtod_l+0xa50>
 80083b2:	f1ba 0f00 	cmp.w	sl, #0
 80083b6:	d158      	bne.n	800846a <_strtod_l+0xa12>
 80083b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80083ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d15a      	bne.n	8008478 <_strtod_l+0xa20>
 80083c2:	4b64      	ldr	r3, [pc, #400]	@ (8008554 <_strtod_l+0xafc>)
 80083c4:	2200      	movs	r2, #0
 80083c6:	4630      	mov	r0, r6
 80083c8:	4639      	mov	r1, r7
 80083ca:	f7f8 fb87 	bl	8000adc <__aeabi_dcmplt>
 80083ce:	2800      	cmp	r0, #0
 80083d0:	d159      	bne.n	8008486 <_strtod_l+0xa2e>
 80083d2:	4630      	mov	r0, r6
 80083d4:	4639      	mov	r1, r7
 80083d6:	4b60      	ldr	r3, [pc, #384]	@ (8008558 <_strtod_l+0xb00>)
 80083d8:	2200      	movs	r2, #0
 80083da:	f7f8 f90d 	bl	80005f8 <__aeabi_dmul>
 80083de:	4606      	mov	r6, r0
 80083e0:	460f      	mov	r7, r1
 80083e2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80083e6:	9606      	str	r6, [sp, #24]
 80083e8:	9307      	str	r3, [sp, #28]
 80083ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80083ee:	4d57      	ldr	r5, [pc, #348]	@ (800854c <_strtod_l+0xaf4>)
 80083f0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80083f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80083f6:	401d      	ands	r5, r3
 80083f8:	4b58      	ldr	r3, [pc, #352]	@ (800855c <_strtod_l+0xb04>)
 80083fa:	429d      	cmp	r5, r3
 80083fc:	f040 80b2 	bne.w	8008564 <_strtod_l+0xb0c>
 8008400:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008402:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008406:	ec4b ab10 	vmov	d0, sl, fp
 800840a:	f7ff f9c9 	bl	80077a0 <__ulp>
 800840e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008412:	ec51 0b10 	vmov	r0, r1, d0
 8008416:	f7f8 f8ef 	bl	80005f8 <__aeabi_dmul>
 800841a:	4652      	mov	r2, sl
 800841c:	465b      	mov	r3, fp
 800841e:	f7f7 ff35 	bl	800028c <__adddf3>
 8008422:	460b      	mov	r3, r1
 8008424:	4949      	ldr	r1, [pc, #292]	@ (800854c <_strtod_l+0xaf4>)
 8008426:	4a4e      	ldr	r2, [pc, #312]	@ (8008560 <_strtod_l+0xb08>)
 8008428:	4019      	ands	r1, r3
 800842a:	4291      	cmp	r1, r2
 800842c:	4682      	mov	sl, r0
 800842e:	d942      	bls.n	80084b6 <_strtod_l+0xa5e>
 8008430:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008432:	4b47      	ldr	r3, [pc, #284]	@ (8008550 <_strtod_l+0xaf8>)
 8008434:	429a      	cmp	r2, r3
 8008436:	d103      	bne.n	8008440 <_strtod_l+0x9e8>
 8008438:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800843a:	3301      	adds	r3, #1
 800843c:	f43f ad2b 	beq.w	8007e96 <_strtod_l+0x43e>
 8008440:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008550 <_strtod_l+0xaf8>
 8008444:	f04f 3aff 	mov.w	sl, #4294967295
 8008448:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800844a:	9805      	ldr	r0, [sp, #20]
 800844c:	f7fe fe74 	bl	8007138 <_Bfree>
 8008450:	9805      	ldr	r0, [sp, #20]
 8008452:	4649      	mov	r1, r9
 8008454:	f7fe fe70 	bl	8007138 <_Bfree>
 8008458:	9805      	ldr	r0, [sp, #20]
 800845a:	4641      	mov	r1, r8
 800845c:	f7fe fe6c 	bl	8007138 <_Bfree>
 8008460:	9805      	ldr	r0, [sp, #20]
 8008462:	4621      	mov	r1, r4
 8008464:	f7fe fe68 	bl	8007138 <_Bfree>
 8008468:	e618      	b.n	800809c <_strtod_l+0x644>
 800846a:	f1ba 0f01 	cmp.w	sl, #1
 800846e:	d103      	bne.n	8008478 <_strtod_l+0xa20>
 8008470:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008472:	2b00      	cmp	r3, #0
 8008474:	f43f ada5 	beq.w	8007fc2 <_strtod_l+0x56a>
 8008478:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008528 <_strtod_l+0xad0>
 800847c:	4f35      	ldr	r7, [pc, #212]	@ (8008554 <_strtod_l+0xafc>)
 800847e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008482:	2600      	movs	r6, #0
 8008484:	e7b1      	b.n	80083ea <_strtod_l+0x992>
 8008486:	4f34      	ldr	r7, [pc, #208]	@ (8008558 <_strtod_l+0xb00>)
 8008488:	2600      	movs	r6, #0
 800848a:	e7aa      	b.n	80083e2 <_strtod_l+0x98a>
 800848c:	4b32      	ldr	r3, [pc, #200]	@ (8008558 <_strtod_l+0xb00>)
 800848e:	4630      	mov	r0, r6
 8008490:	4639      	mov	r1, r7
 8008492:	2200      	movs	r2, #0
 8008494:	f7f8 f8b0 	bl	80005f8 <__aeabi_dmul>
 8008498:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800849a:	4606      	mov	r6, r0
 800849c:	460f      	mov	r7, r1
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d09f      	beq.n	80083e2 <_strtod_l+0x98a>
 80084a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80084a6:	e7a0      	b.n	80083ea <_strtod_l+0x992>
 80084a8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008530 <_strtod_l+0xad8>
 80084ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 80084b0:	ec57 6b17 	vmov	r6, r7, d7
 80084b4:	e799      	b.n	80083ea <_strtod_l+0x992>
 80084b6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80084ba:	9b08      	ldr	r3, [sp, #32]
 80084bc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d1c1      	bne.n	8008448 <_strtod_l+0x9f0>
 80084c4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80084c8:	0d1b      	lsrs	r3, r3, #20
 80084ca:	051b      	lsls	r3, r3, #20
 80084cc:	429d      	cmp	r5, r3
 80084ce:	d1bb      	bne.n	8008448 <_strtod_l+0x9f0>
 80084d0:	4630      	mov	r0, r6
 80084d2:	4639      	mov	r1, r7
 80084d4:	f7f8 fbd8 	bl	8000c88 <__aeabi_d2lz>
 80084d8:	f7f8 f860 	bl	800059c <__aeabi_l2d>
 80084dc:	4602      	mov	r2, r0
 80084de:	460b      	mov	r3, r1
 80084e0:	4630      	mov	r0, r6
 80084e2:	4639      	mov	r1, r7
 80084e4:	f7f7 fed0 	bl	8000288 <__aeabi_dsub>
 80084e8:	460b      	mov	r3, r1
 80084ea:	4602      	mov	r2, r0
 80084ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80084f0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80084f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084f6:	ea46 060a 	orr.w	r6, r6, sl
 80084fa:	431e      	orrs	r6, r3
 80084fc:	d06f      	beq.n	80085de <_strtod_l+0xb86>
 80084fe:	a30e      	add	r3, pc, #56	@ (adr r3, 8008538 <_strtod_l+0xae0>)
 8008500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008504:	f7f8 faea 	bl	8000adc <__aeabi_dcmplt>
 8008508:	2800      	cmp	r0, #0
 800850a:	f47f accf 	bne.w	8007eac <_strtod_l+0x454>
 800850e:	a30c      	add	r3, pc, #48	@ (adr r3, 8008540 <_strtod_l+0xae8>)
 8008510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008514:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008518:	f7f8 fafe 	bl	8000b18 <__aeabi_dcmpgt>
 800851c:	2800      	cmp	r0, #0
 800851e:	d093      	beq.n	8008448 <_strtod_l+0x9f0>
 8008520:	e4c4      	b.n	8007eac <_strtod_l+0x454>
 8008522:	bf00      	nop
 8008524:	f3af 8000 	nop.w
 8008528:	00000000 	.word	0x00000000
 800852c:	bff00000 	.word	0xbff00000
 8008530:	00000000 	.word	0x00000000
 8008534:	3ff00000 	.word	0x3ff00000
 8008538:	94a03595 	.word	0x94a03595
 800853c:	3fdfffff 	.word	0x3fdfffff
 8008540:	35afe535 	.word	0x35afe535
 8008544:	3fe00000 	.word	0x3fe00000
 8008548:	000fffff 	.word	0x000fffff
 800854c:	7ff00000 	.word	0x7ff00000
 8008550:	7fefffff 	.word	0x7fefffff
 8008554:	3ff00000 	.word	0x3ff00000
 8008558:	3fe00000 	.word	0x3fe00000
 800855c:	7fe00000 	.word	0x7fe00000
 8008560:	7c9fffff 	.word	0x7c9fffff
 8008564:	9b08      	ldr	r3, [sp, #32]
 8008566:	b323      	cbz	r3, 80085b2 <_strtod_l+0xb5a>
 8008568:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800856c:	d821      	bhi.n	80085b2 <_strtod_l+0xb5a>
 800856e:	a328      	add	r3, pc, #160	@ (adr r3, 8008610 <_strtod_l+0xbb8>)
 8008570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008574:	4630      	mov	r0, r6
 8008576:	4639      	mov	r1, r7
 8008578:	f7f8 faba 	bl	8000af0 <__aeabi_dcmple>
 800857c:	b1a0      	cbz	r0, 80085a8 <_strtod_l+0xb50>
 800857e:	4639      	mov	r1, r7
 8008580:	4630      	mov	r0, r6
 8008582:	f7f8 fb11 	bl	8000ba8 <__aeabi_d2uiz>
 8008586:	2801      	cmp	r0, #1
 8008588:	bf38      	it	cc
 800858a:	2001      	movcc	r0, #1
 800858c:	f7f7 ffba 	bl	8000504 <__aeabi_ui2d>
 8008590:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008592:	4606      	mov	r6, r0
 8008594:	460f      	mov	r7, r1
 8008596:	b9fb      	cbnz	r3, 80085d8 <_strtod_l+0xb80>
 8008598:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800859c:	9014      	str	r0, [sp, #80]	@ 0x50
 800859e:	9315      	str	r3, [sp, #84]	@ 0x54
 80085a0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80085a4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80085a8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80085aa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80085ae:	1b5b      	subs	r3, r3, r5
 80085b0:	9311      	str	r3, [sp, #68]	@ 0x44
 80085b2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80085b6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80085ba:	f7ff f8f1 	bl	80077a0 <__ulp>
 80085be:	4650      	mov	r0, sl
 80085c0:	ec53 2b10 	vmov	r2, r3, d0
 80085c4:	4659      	mov	r1, fp
 80085c6:	f7f8 f817 	bl	80005f8 <__aeabi_dmul>
 80085ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80085ce:	f7f7 fe5d 	bl	800028c <__adddf3>
 80085d2:	4682      	mov	sl, r0
 80085d4:	468b      	mov	fp, r1
 80085d6:	e770      	b.n	80084ba <_strtod_l+0xa62>
 80085d8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80085dc:	e7e0      	b.n	80085a0 <_strtod_l+0xb48>
 80085de:	a30e      	add	r3, pc, #56	@ (adr r3, 8008618 <_strtod_l+0xbc0>)
 80085e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e4:	f7f8 fa7a 	bl	8000adc <__aeabi_dcmplt>
 80085e8:	e798      	b.n	800851c <_strtod_l+0xac4>
 80085ea:	2300      	movs	r3, #0
 80085ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80085ee:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80085f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80085f2:	6013      	str	r3, [r2, #0]
 80085f4:	f7ff ba6d 	b.w	8007ad2 <_strtod_l+0x7a>
 80085f8:	2a65      	cmp	r2, #101	@ 0x65
 80085fa:	f43f ab66 	beq.w	8007cca <_strtod_l+0x272>
 80085fe:	2a45      	cmp	r2, #69	@ 0x45
 8008600:	f43f ab63 	beq.w	8007cca <_strtod_l+0x272>
 8008604:	2301      	movs	r3, #1
 8008606:	f7ff bb9e 	b.w	8007d46 <_strtod_l+0x2ee>
 800860a:	bf00      	nop
 800860c:	f3af 8000 	nop.w
 8008610:	ffc00000 	.word	0xffc00000
 8008614:	41dfffff 	.word	0x41dfffff
 8008618:	94a03595 	.word	0x94a03595
 800861c:	3fcfffff 	.word	0x3fcfffff

08008620 <_strtod_r>:
 8008620:	4b01      	ldr	r3, [pc, #4]	@ (8008628 <_strtod_r+0x8>)
 8008622:	f7ff ba19 	b.w	8007a58 <_strtod_l>
 8008626:	bf00      	nop
 8008628:	20000068 	.word	0x20000068

0800862c <_strtol_l.constprop.0>:
 800862c:	2b24      	cmp	r3, #36	@ 0x24
 800862e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008632:	4686      	mov	lr, r0
 8008634:	4690      	mov	r8, r2
 8008636:	d801      	bhi.n	800863c <_strtol_l.constprop.0+0x10>
 8008638:	2b01      	cmp	r3, #1
 800863a:	d106      	bne.n	800864a <_strtol_l.constprop.0+0x1e>
 800863c:	f7fd fdba 	bl	80061b4 <__errno>
 8008640:	2316      	movs	r3, #22
 8008642:	6003      	str	r3, [r0, #0]
 8008644:	2000      	movs	r0, #0
 8008646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800864a:	4834      	ldr	r0, [pc, #208]	@ (800871c <_strtol_l.constprop.0+0xf0>)
 800864c:	460d      	mov	r5, r1
 800864e:	462a      	mov	r2, r5
 8008650:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008654:	5d06      	ldrb	r6, [r0, r4]
 8008656:	f016 0608 	ands.w	r6, r6, #8
 800865a:	d1f8      	bne.n	800864e <_strtol_l.constprop.0+0x22>
 800865c:	2c2d      	cmp	r4, #45	@ 0x2d
 800865e:	d12d      	bne.n	80086bc <_strtol_l.constprop.0+0x90>
 8008660:	782c      	ldrb	r4, [r5, #0]
 8008662:	2601      	movs	r6, #1
 8008664:	1c95      	adds	r5, r2, #2
 8008666:	f033 0210 	bics.w	r2, r3, #16
 800866a:	d109      	bne.n	8008680 <_strtol_l.constprop.0+0x54>
 800866c:	2c30      	cmp	r4, #48	@ 0x30
 800866e:	d12a      	bne.n	80086c6 <_strtol_l.constprop.0+0x9a>
 8008670:	782a      	ldrb	r2, [r5, #0]
 8008672:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008676:	2a58      	cmp	r2, #88	@ 0x58
 8008678:	d125      	bne.n	80086c6 <_strtol_l.constprop.0+0x9a>
 800867a:	786c      	ldrb	r4, [r5, #1]
 800867c:	2310      	movs	r3, #16
 800867e:	3502      	adds	r5, #2
 8008680:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008684:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008688:	2200      	movs	r2, #0
 800868a:	fbbc f9f3 	udiv	r9, ip, r3
 800868e:	4610      	mov	r0, r2
 8008690:	fb03 ca19 	mls	sl, r3, r9, ip
 8008694:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008698:	2f09      	cmp	r7, #9
 800869a:	d81b      	bhi.n	80086d4 <_strtol_l.constprop.0+0xa8>
 800869c:	463c      	mov	r4, r7
 800869e:	42a3      	cmp	r3, r4
 80086a0:	dd27      	ble.n	80086f2 <_strtol_l.constprop.0+0xc6>
 80086a2:	1c57      	adds	r7, r2, #1
 80086a4:	d007      	beq.n	80086b6 <_strtol_l.constprop.0+0x8a>
 80086a6:	4581      	cmp	r9, r0
 80086a8:	d320      	bcc.n	80086ec <_strtol_l.constprop.0+0xc0>
 80086aa:	d101      	bne.n	80086b0 <_strtol_l.constprop.0+0x84>
 80086ac:	45a2      	cmp	sl, r4
 80086ae:	db1d      	blt.n	80086ec <_strtol_l.constprop.0+0xc0>
 80086b0:	fb00 4003 	mla	r0, r0, r3, r4
 80086b4:	2201      	movs	r2, #1
 80086b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086ba:	e7eb      	b.n	8008694 <_strtol_l.constprop.0+0x68>
 80086bc:	2c2b      	cmp	r4, #43	@ 0x2b
 80086be:	bf04      	itt	eq
 80086c0:	782c      	ldrbeq	r4, [r5, #0]
 80086c2:	1c95      	addeq	r5, r2, #2
 80086c4:	e7cf      	b.n	8008666 <_strtol_l.constprop.0+0x3a>
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d1da      	bne.n	8008680 <_strtol_l.constprop.0+0x54>
 80086ca:	2c30      	cmp	r4, #48	@ 0x30
 80086cc:	bf0c      	ite	eq
 80086ce:	2308      	moveq	r3, #8
 80086d0:	230a      	movne	r3, #10
 80086d2:	e7d5      	b.n	8008680 <_strtol_l.constprop.0+0x54>
 80086d4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80086d8:	2f19      	cmp	r7, #25
 80086da:	d801      	bhi.n	80086e0 <_strtol_l.constprop.0+0xb4>
 80086dc:	3c37      	subs	r4, #55	@ 0x37
 80086de:	e7de      	b.n	800869e <_strtol_l.constprop.0+0x72>
 80086e0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80086e4:	2f19      	cmp	r7, #25
 80086e6:	d804      	bhi.n	80086f2 <_strtol_l.constprop.0+0xc6>
 80086e8:	3c57      	subs	r4, #87	@ 0x57
 80086ea:	e7d8      	b.n	800869e <_strtol_l.constprop.0+0x72>
 80086ec:	f04f 32ff 	mov.w	r2, #4294967295
 80086f0:	e7e1      	b.n	80086b6 <_strtol_l.constprop.0+0x8a>
 80086f2:	1c53      	adds	r3, r2, #1
 80086f4:	d108      	bne.n	8008708 <_strtol_l.constprop.0+0xdc>
 80086f6:	2322      	movs	r3, #34	@ 0x22
 80086f8:	f8ce 3000 	str.w	r3, [lr]
 80086fc:	4660      	mov	r0, ip
 80086fe:	f1b8 0f00 	cmp.w	r8, #0
 8008702:	d0a0      	beq.n	8008646 <_strtol_l.constprop.0+0x1a>
 8008704:	1e69      	subs	r1, r5, #1
 8008706:	e006      	b.n	8008716 <_strtol_l.constprop.0+0xea>
 8008708:	b106      	cbz	r6, 800870c <_strtol_l.constprop.0+0xe0>
 800870a:	4240      	negs	r0, r0
 800870c:	f1b8 0f00 	cmp.w	r8, #0
 8008710:	d099      	beq.n	8008646 <_strtol_l.constprop.0+0x1a>
 8008712:	2a00      	cmp	r2, #0
 8008714:	d1f6      	bne.n	8008704 <_strtol_l.constprop.0+0xd8>
 8008716:	f8c8 1000 	str.w	r1, [r8]
 800871a:	e794      	b.n	8008646 <_strtol_l.constprop.0+0x1a>
 800871c:	08009e19 	.word	0x08009e19

08008720 <_strtol_r>:
 8008720:	f7ff bf84 	b.w	800862c <_strtol_l.constprop.0>

08008724 <__ssputs_r>:
 8008724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008728:	688e      	ldr	r6, [r1, #8]
 800872a:	461f      	mov	r7, r3
 800872c:	42be      	cmp	r6, r7
 800872e:	680b      	ldr	r3, [r1, #0]
 8008730:	4682      	mov	sl, r0
 8008732:	460c      	mov	r4, r1
 8008734:	4690      	mov	r8, r2
 8008736:	d82d      	bhi.n	8008794 <__ssputs_r+0x70>
 8008738:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800873c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008740:	d026      	beq.n	8008790 <__ssputs_r+0x6c>
 8008742:	6965      	ldr	r5, [r4, #20]
 8008744:	6909      	ldr	r1, [r1, #16]
 8008746:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800874a:	eba3 0901 	sub.w	r9, r3, r1
 800874e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008752:	1c7b      	adds	r3, r7, #1
 8008754:	444b      	add	r3, r9
 8008756:	106d      	asrs	r5, r5, #1
 8008758:	429d      	cmp	r5, r3
 800875a:	bf38      	it	cc
 800875c:	461d      	movcc	r5, r3
 800875e:	0553      	lsls	r3, r2, #21
 8008760:	d527      	bpl.n	80087b2 <__ssputs_r+0x8e>
 8008762:	4629      	mov	r1, r5
 8008764:	f7fe fc1c 	bl	8006fa0 <_malloc_r>
 8008768:	4606      	mov	r6, r0
 800876a:	b360      	cbz	r0, 80087c6 <__ssputs_r+0xa2>
 800876c:	6921      	ldr	r1, [r4, #16]
 800876e:	464a      	mov	r2, r9
 8008770:	f000 fa18 	bl	8008ba4 <memcpy>
 8008774:	89a3      	ldrh	r3, [r4, #12]
 8008776:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800877a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800877e:	81a3      	strh	r3, [r4, #12]
 8008780:	6126      	str	r6, [r4, #16]
 8008782:	6165      	str	r5, [r4, #20]
 8008784:	444e      	add	r6, r9
 8008786:	eba5 0509 	sub.w	r5, r5, r9
 800878a:	6026      	str	r6, [r4, #0]
 800878c:	60a5      	str	r5, [r4, #8]
 800878e:	463e      	mov	r6, r7
 8008790:	42be      	cmp	r6, r7
 8008792:	d900      	bls.n	8008796 <__ssputs_r+0x72>
 8008794:	463e      	mov	r6, r7
 8008796:	6820      	ldr	r0, [r4, #0]
 8008798:	4632      	mov	r2, r6
 800879a:	4641      	mov	r1, r8
 800879c:	f000 f9c6 	bl	8008b2c <memmove>
 80087a0:	68a3      	ldr	r3, [r4, #8]
 80087a2:	1b9b      	subs	r3, r3, r6
 80087a4:	60a3      	str	r3, [r4, #8]
 80087a6:	6823      	ldr	r3, [r4, #0]
 80087a8:	4433      	add	r3, r6
 80087aa:	6023      	str	r3, [r4, #0]
 80087ac:	2000      	movs	r0, #0
 80087ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087b2:	462a      	mov	r2, r5
 80087b4:	f000 fd89 	bl	80092ca <_realloc_r>
 80087b8:	4606      	mov	r6, r0
 80087ba:	2800      	cmp	r0, #0
 80087bc:	d1e0      	bne.n	8008780 <__ssputs_r+0x5c>
 80087be:	6921      	ldr	r1, [r4, #16]
 80087c0:	4650      	mov	r0, sl
 80087c2:	f7fe fb79 	bl	8006eb8 <_free_r>
 80087c6:	230c      	movs	r3, #12
 80087c8:	f8ca 3000 	str.w	r3, [sl]
 80087cc:	89a3      	ldrh	r3, [r4, #12]
 80087ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087d2:	81a3      	strh	r3, [r4, #12]
 80087d4:	f04f 30ff 	mov.w	r0, #4294967295
 80087d8:	e7e9      	b.n	80087ae <__ssputs_r+0x8a>
	...

080087dc <_svfiprintf_r>:
 80087dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e0:	4698      	mov	r8, r3
 80087e2:	898b      	ldrh	r3, [r1, #12]
 80087e4:	061b      	lsls	r3, r3, #24
 80087e6:	b09d      	sub	sp, #116	@ 0x74
 80087e8:	4607      	mov	r7, r0
 80087ea:	460d      	mov	r5, r1
 80087ec:	4614      	mov	r4, r2
 80087ee:	d510      	bpl.n	8008812 <_svfiprintf_r+0x36>
 80087f0:	690b      	ldr	r3, [r1, #16]
 80087f2:	b973      	cbnz	r3, 8008812 <_svfiprintf_r+0x36>
 80087f4:	2140      	movs	r1, #64	@ 0x40
 80087f6:	f7fe fbd3 	bl	8006fa0 <_malloc_r>
 80087fa:	6028      	str	r0, [r5, #0]
 80087fc:	6128      	str	r0, [r5, #16]
 80087fe:	b930      	cbnz	r0, 800880e <_svfiprintf_r+0x32>
 8008800:	230c      	movs	r3, #12
 8008802:	603b      	str	r3, [r7, #0]
 8008804:	f04f 30ff 	mov.w	r0, #4294967295
 8008808:	b01d      	add	sp, #116	@ 0x74
 800880a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800880e:	2340      	movs	r3, #64	@ 0x40
 8008810:	616b      	str	r3, [r5, #20]
 8008812:	2300      	movs	r3, #0
 8008814:	9309      	str	r3, [sp, #36]	@ 0x24
 8008816:	2320      	movs	r3, #32
 8008818:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800881c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008820:	2330      	movs	r3, #48	@ 0x30
 8008822:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80089c0 <_svfiprintf_r+0x1e4>
 8008826:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800882a:	f04f 0901 	mov.w	r9, #1
 800882e:	4623      	mov	r3, r4
 8008830:	469a      	mov	sl, r3
 8008832:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008836:	b10a      	cbz	r2, 800883c <_svfiprintf_r+0x60>
 8008838:	2a25      	cmp	r2, #37	@ 0x25
 800883a:	d1f9      	bne.n	8008830 <_svfiprintf_r+0x54>
 800883c:	ebba 0b04 	subs.w	fp, sl, r4
 8008840:	d00b      	beq.n	800885a <_svfiprintf_r+0x7e>
 8008842:	465b      	mov	r3, fp
 8008844:	4622      	mov	r2, r4
 8008846:	4629      	mov	r1, r5
 8008848:	4638      	mov	r0, r7
 800884a:	f7ff ff6b 	bl	8008724 <__ssputs_r>
 800884e:	3001      	adds	r0, #1
 8008850:	f000 80a7 	beq.w	80089a2 <_svfiprintf_r+0x1c6>
 8008854:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008856:	445a      	add	r2, fp
 8008858:	9209      	str	r2, [sp, #36]	@ 0x24
 800885a:	f89a 3000 	ldrb.w	r3, [sl]
 800885e:	2b00      	cmp	r3, #0
 8008860:	f000 809f 	beq.w	80089a2 <_svfiprintf_r+0x1c6>
 8008864:	2300      	movs	r3, #0
 8008866:	f04f 32ff 	mov.w	r2, #4294967295
 800886a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800886e:	f10a 0a01 	add.w	sl, sl, #1
 8008872:	9304      	str	r3, [sp, #16]
 8008874:	9307      	str	r3, [sp, #28]
 8008876:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800887a:	931a      	str	r3, [sp, #104]	@ 0x68
 800887c:	4654      	mov	r4, sl
 800887e:	2205      	movs	r2, #5
 8008880:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008884:	484e      	ldr	r0, [pc, #312]	@ (80089c0 <_svfiprintf_r+0x1e4>)
 8008886:	f7f7 fca3 	bl	80001d0 <memchr>
 800888a:	9a04      	ldr	r2, [sp, #16]
 800888c:	b9d8      	cbnz	r0, 80088c6 <_svfiprintf_r+0xea>
 800888e:	06d0      	lsls	r0, r2, #27
 8008890:	bf44      	itt	mi
 8008892:	2320      	movmi	r3, #32
 8008894:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008898:	0711      	lsls	r1, r2, #28
 800889a:	bf44      	itt	mi
 800889c:	232b      	movmi	r3, #43	@ 0x2b
 800889e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088a2:	f89a 3000 	ldrb.w	r3, [sl]
 80088a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80088a8:	d015      	beq.n	80088d6 <_svfiprintf_r+0xfa>
 80088aa:	9a07      	ldr	r2, [sp, #28]
 80088ac:	4654      	mov	r4, sl
 80088ae:	2000      	movs	r0, #0
 80088b0:	f04f 0c0a 	mov.w	ip, #10
 80088b4:	4621      	mov	r1, r4
 80088b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088ba:	3b30      	subs	r3, #48	@ 0x30
 80088bc:	2b09      	cmp	r3, #9
 80088be:	d94b      	bls.n	8008958 <_svfiprintf_r+0x17c>
 80088c0:	b1b0      	cbz	r0, 80088f0 <_svfiprintf_r+0x114>
 80088c2:	9207      	str	r2, [sp, #28]
 80088c4:	e014      	b.n	80088f0 <_svfiprintf_r+0x114>
 80088c6:	eba0 0308 	sub.w	r3, r0, r8
 80088ca:	fa09 f303 	lsl.w	r3, r9, r3
 80088ce:	4313      	orrs	r3, r2
 80088d0:	9304      	str	r3, [sp, #16]
 80088d2:	46a2      	mov	sl, r4
 80088d4:	e7d2      	b.n	800887c <_svfiprintf_r+0xa0>
 80088d6:	9b03      	ldr	r3, [sp, #12]
 80088d8:	1d19      	adds	r1, r3, #4
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	9103      	str	r1, [sp, #12]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	bfbb      	ittet	lt
 80088e2:	425b      	neglt	r3, r3
 80088e4:	f042 0202 	orrlt.w	r2, r2, #2
 80088e8:	9307      	strge	r3, [sp, #28]
 80088ea:	9307      	strlt	r3, [sp, #28]
 80088ec:	bfb8      	it	lt
 80088ee:	9204      	strlt	r2, [sp, #16]
 80088f0:	7823      	ldrb	r3, [r4, #0]
 80088f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80088f4:	d10a      	bne.n	800890c <_svfiprintf_r+0x130>
 80088f6:	7863      	ldrb	r3, [r4, #1]
 80088f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80088fa:	d132      	bne.n	8008962 <_svfiprintf_r+0x186>
 80088fc:	9b03      	ldr	r3, [sp, #12]
 80088fe:	1d1a      	adds	r2, r3, #4
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	9203      	str	r2, [sp, #12]
 8008904:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008908:	3402      	adds	r4, #2
 800890a:	9305      	str	r3, [sp, #20]
 800890c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80089d0 <_svfiprintf_r+0x1f4>
 8008910:	7821      	ldrb	r1, [r4, #0]
 8008912:	2203      	movs	r2, #3
 8008914:	4650      	mov	r0, sl
 8008916:	f7f7 fc5b 	bl	80001d0 <memchr>
 800891a:	b138      	cbz	r0, 800892c <_svfiprintf_r+0x150>
 800891c:	9b04      	ldr	r3, [sp, #16]
 800891e:	eba0 000a 	sub.w	r0, r0, sl
 8008922:	2240      	movs	r2, #64	@ 0x40
 8008924:	4082      	lsls	r2, r0
 8008926:	4313      	orrs	r3, r2
 8008928:	3401      	adds	r4, #1
 800892a:	9304      	str	r3, [sp, #16]
 800892c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008930:	4824      	ldr	r0, [pc, #144]	@ (80089c4 <_svfiprintf_r+0x1e8>)
 8008932:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008936:	2206      	movs	r2, #6
 8008938:	f7f7 fc4a 	bl	80001d0 <memchr>
 800893c:	2800      	cmp	r0, #0
 800893e:	d036      	beq.n	80089ae <_svfiprintf_r+0x1d2>
 8008940:	4b21      	ldr	r3, [pc, #132]	@ (80089c8 <_svfiprintf_r+0x1ec>)
 8008942:	bb1b      	cbnz	r3, 800898c <_svfiprintf_r+0x1b0>
 8008944:	9b03      	ldr	r3, [sp, #12]
 8008946:	3307      	adds	r3, #7
 8008948:	f023 0307 	bic.w	r3, r3, #7
 800894c:	3308      	adds	r3, #8
 800894e:	9303      	str	r3, [sp, #12]
 8008950:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008952:	4433      	add	r3, r6
 8008954:	9309      	str	r3, [sp, #36]	@ 0x24
 8008956:	e76a      	b.n	800882e <_svfiprintf_r+0x52>
 8008958:	fb0c 3202 	mla	r2, ip, r2, r3
 800895c:	460c      	mov	r4, r1
 800895e:	2001      	movs	r0, #1
 8008960:	e7a8      	b.n	80088b4 <_svfiprintf_r+0xd8>
 8008962:	2300      	movs	r3, #0
 8008964:	3401      	adds	r4, #1
 8008966:	9305      	str	r3, [sp, #20]
 8008968:	4619      	mov	r1, r3
 800896a:	f04f 0c0a 	mov.w	ip, #10
 800896e:	4620      	mov	r0, r4
 8008970:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008974:	3a30      	subs	r2, #48	@ 0x30
 8008976:	2a09      	cmp	r2, #9
 8008978:	d903      	bls.n	8008982 <_svfiprintf_r+0x1a6>
 800897a:	2b00      	cmp	r3, #0
 800897c:	d0c6      	beq.n	800890c <_svfiprintf_r+0x130>
 800897e:	9105      	str	r1, [sp, #20]
 8008980:	e7c4      	b.n	800890c <_svfiprintf_r+0x130>
 8008982:	fb0c 2101 	mla	r1, ip, r1, r2
 8008986:	4604      	mov	r4, r0
 8008988:	2301      	movs	r3, #1
 800898a:	e7f0      	b.n	800896e <_svfiprintf_r+0x192>
 800898c:	ab03      	add	r3, sp, #12
 800898e:	9300      	str	r3, [sp, #0]
 8008990:	462a      	mov	r2, r5
 8008992:	4b0e      	ldr	r3, [pc, #56]	@ (80089cc <_svfiprintf_r+0x1f0>)
 8008994:	a904      	add	r1, sp, #16
 8008996:	4638      	mov	r0, r7
 8008998:	f7fc fcc8 	bl	800532c <_printf_float>
 800899c:	1c42      	adds	r2, r0, #1
 800899e:	4606      	mov	r6, r0
 80089a0:	d1d6      	bne.n	8008950 <_svfiprintf_r+0x174>
 80089a2:	89ab      	ldrh	r3, [r5, #12]
 80089a4:	065b      	lsls	r3, r3, #25
 80089a6:	f53f af2d 	bmi.w	8008804 <_svfiprintf_r+0x28>
 80089aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80089ac:	e72c      	b.n	8008808 <_svfiprintf_r+0x2c>
 80089ae:	ab03      	add	r3, sp, #12
 80089b0:	9300      	str	r3, [sp, #0]
 80089b2:	462a      	mov	r2, r5
 80089b4:	4b05      	ldr	r3, [pc, #20]	@ (80089cc <_svfiprintf_r+0x1f0>)
 80089b6:	a904      	add	r1, sp, #16
 80089b8:	4638      	mov	r0, r7
 80089ba:	f7fc ff4f 	bl	800585c <_printf_i>
 80089be:	e7ed      	b.n	800899c <_svfiprintf_r+0x1c0>
 80089c0:	08009f19 	.word	0x08009f19
 80089c4:	08009f23 	.word	0x08009f23
 80089c8:	0800532d 	.word	0x0800532d
 80089cc:	08008725 	.word	0x08008725
 80089d0:	08009f1f 	.word	0x08009f1f

080089d4 <__sflush_r>:
 80089d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80089d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089dc:	0716      	lsls	r6, r2, #28
 80089de:	4605      	mov	r5, r0
 80089e0:	460c      	mov	r4, r1
 80089e2:	d454      	bmi.n	8008a8e <__sflush_r+0xba>
 80089e4:	684b      	ldr	r3, [r1, #4]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	dc02      	bgt.n	80089f0 <__sflush_r+0x1c>
 80089ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	dd48      	ble.n	8008a82 <__sflush_r+0xae>
 80089f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80089f2:	2e00      	cmp	r6, #0
 80089f4:	d045      	beq.n	8008a82 <__sflush_r+0xae>
 80089f6:	2300      	movs	r3, #0
 80089f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80089fc:	682f      	ldr	r7, [r5, #0]
 80089fe:	6a21      	ldr	r1, [r4, #32]
 8008a00:	602b      	str	r3, [r5, #0]
 8008a02:	d030      	beq.n	8008a66 <__sflush_r+0x92>
 8008a04:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008a06:	89a3      	ldrh	r3, [r4, #12]
 8008a08:	0759      	lsls	r1, r3, #29
 8008a0a:	d505      	bpl.n	8008a18 <__sflush_r+0x44>
 8008a0c:	6863      	ldr	r3, [r4, #4]
 8008a0e:	1ad2      	subs	r2, r2, r3
 8008a10:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a12:	b10b      	cbz	r3, 8008a18 <__sflush_r+0x44>
 8008a14:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008a16:	1ad2      	subs	r2, r2, r3
 8008a18:	2300      	movs	r3, #0
 8008a1a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a1c:	6a21      	ldr	r1, [r4, #32]
 8008a1e:	4628      	mov	r0, r5
 8008a20:	47b0      	blx	r6
 8008a22:	1c43      	adds	r3, r0, #1
 8008a24:	89a3      	ldrh	r3, [r4, #12]
 8008a26:	d106      	bne.n	8008a36 <__sflush_r+0x62>
 8008a28:	6829      	ldr	r1, [r5, #0]
 8008a2a:	291d      	cmp	r1, #29
 8008a2c:	d82b      	bhi.n	8008a86 <__sflush_r+0xb2>
 8008a2e:	4a2a      	ldr	r2, [pc, #168]	@ (8008ad8 <__sflush_r+0x104>)
 8008a30:	410a      	asrs	r2, r1
 8008a32:	07d6      	lsls	r6, r2, #31
 8008a34:	d427      	bmi.n	8008a86 <__sflush_r+0xb2>
 8008a36:	2200      	movs	r2, #0
 8008a38:	6062      	str	r2, [r4, #4]
 8008a3a:	04d9      	lsls	r1, r3, #19
 8008a3c:	6922      	ldr	r2, [r4, #16]
 8008a3e:	6022      	str	r2, [r4, #0]
 8008a40:	d504      	bpl.n	8008a4c <__sflush_r+0x78>
 8008a42:	1c42      	adds	r2, r0, #1
 8008a44:	d101      	bne.n	8008a4a <__sflush_r+0x76>
 8008a46:	682b      	ldr	r3, [r5, #0]
 8008a48:	b903      	cbnz	r3, 8008a4c <__sflush_r+0x78>
 8008a4a:	6560      	str	r0, [r4, #84]	@ 0x54
 8008a4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a4e:	602f      	str	r7, [r5, #0]
 8008a50:	b1b9      	cbz	r1, 8008a82 <__sflush_r+0xae>
 8008a52:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a56:	4299      	cmp	r1, r3
 8008a58:	d002      	beq.n	8008a60 <__sflush_r+0x8c>
 8008a5a:	4628      	mov	r0, r5
 8008a5c:	f7fe fa2c 	bl	8006eb8 <_free_r>
 8008a60:	2300      	movs	r3, #0
 8008a62:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a64:	e00d      	b.n	8008a82 <__sflush_r+0xae>
 8008a66:	2301      	movs	r3, #1
 8008a68:	4628      	mov	r0, r5
 8008a6a:	47b0      	blx	r6
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	1c50      	adds	r0, r2, #1
 8008a70:	d1c9      	bne.n	8008a06 <__sflush_r+0x32>
 8008a72:	682b      	ldr	r3, [r5, #0]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d0c6      	beq.n	8008a06 <__sflush_r+0x32>
 8008a78:	2b1d      	cmp	r3, #29
 8008a7a:	d001      	beq.n	8008a80 <__sflush_r+0xac>
 8008a7c:	2b16      	cmp	r3, #22
 8008a7e:	d11e      	bne.n	8008abe <__sflush_r+0xea>
 8008a80:	602f      	str	r7, [r5, #0]
 8008a82:	2000      	movs	r0, #0
 8008a84:	e022      	b.n	8008acc <__sflush_r+0xf8>
 8008a86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a8a:	b21b      	sxth	r3, r3
 8008a8c:	e01b      	b.n	8008ac6 <__sflush_r+0xf2>
 8008a8e:	690f      	ldr	r7, [r1, #16]
 8008a90:	2f00      	cmp	r7, #0
 8008a92:	d0f6      	beq.n	8008a82 <__sflush_r+0xae>
 8008a94:	0793      	lsls	r3, r2, #30
 8008a96:	680e      	ldr	r6, [r1, #0]
 8008a98:	bf08      	it	eq
 8008a9a:	694b      	ldreq	r3, [r1, #20]
 8008a9c:	600f      	str	r7, [r1, #0]
 8008a9e:	bf18      	it	ne
 8008aa0:	2300      	movne	r3, #0
 8008aa2:	eba6 0807 	sub.w	r8, r6, r7
 8008aa6:	608b      	str	r3, [r1, #8]
 8008aa8:	f1b8 0f00 	cmp.w	r8, #0
 8008aac:	dde9      	ble.n	8008a82 <__sflush_r+0xae>
 8008aae:	6a21      	ldr	r1, [r4, #32]
 8008ab0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008ab2:	4643      	mov	r3, r8
 8008ab4:	463a      	mov	r2, r7
 8008ab6:	4628      	mov	r0, r5
 8008ab8:	47b0      	blx	r6
 8008aba:	2800      	cmp	r0, #0
 8008abc:	dc08      	bgt.n	8008ad0 <__sflush_r+0xfc>
 8008abe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ac2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ac6:	81a3      	strh	r3, [r4, #12]
 8008ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8008acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ad0:	4407      	add	r7, r0
 8008ad2:	eba8 0800 	sub.w	r8, r8, r0
 8008ad6:	e7e7      	b.n	8008aa8 <__sflush_r+0xd4>
 8008ad8:	dfbffffe 	.word	0xdfbffffe

08008adc <_fflush_r>:
 8008adc:	b538      	push	{r3, r4, r5, lr}
 8008ade:	690b      	ldr	r3, [r1, #16]
 8008ae0:	4605      	mov	r5, r0
 8008ae2:	460c      	mov	r4, r1
 8008ae4:	b913      	cbnz	r3, 8008aec <_fflush_r+0x10>
 8008ae6:	2500      	movs	r5, #0
 8008ae8:	4628      	mov	r0, r5
 8008aea:	bd38      	pop	{r3, r4, r5, pc}
 8008aec:	b118      	cbz	r0, 8008af6 <_fflush_r+0x1a>
 8008aee:	6a03      	ldr	r3, [r0, #32]
 8008af0:	b90b      	cbnz	r3, 8008af6 <_fflush_r+0x1a>
 8008af2:	f7fd fa73 	bl	8005fdc <__sinit>
 8008af6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d0f3      	beq.n	8008ae6 <_fflush_r+0xa>
 8008afe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008b00:	07d0      	lsls	r0, r2, #31
 8008b02:	d404      	bmi.n	8008b0e <_fflush_r+0x32>
 8008b04:	0599      	lsls	r1, r3, #22
 8008b06:	d402      	bmi.n	8008b0e <_fflush_r+0x32>
 8008b08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b0a:	f7fd fb7e 	bl	800620a <__retarget_lock_acquire_recursive>
 8008b0e:	4628      	mov	r0, r5
 8008b10:	4621      	mov	r1, r4
 8008b12:	f7ff ff5f 	bl	80089d4 <__sflush_r>
 8008b16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b18:	07da      	lsls	r2, r3, #31
 8008b1a:	4605      	mov	r5, r0
 8008b1c:	d4e4      	bmi.n	8008ae8 <_fflush_r+0xc>
 8008b1e:	89a3      	ldrh	r3, [r4, #12]
 8008b20:	059b      	lsls	r3, r3, #22
 8008b22:	d4e1      	bmi.n	8008ae8 <_fflush_r+0xc>
 8008b24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b26:	f7fd fb71 	bl	800620c <__retarget_lock_release_recursive>
 8008b2a:	e7dd      	b.n	8008ae8 <_fflush_r+0xc>

08008b2c <memmove>:
 8008b2c:	4288      	cmp	r0, r1
 8008b2e:	b510      	push	{r4, lr}
 8008b30:	eb01 0402 	add.w	r4, r1, r2
 8008b34:	d902      	bls.n	8008b3c <memmove+0x10>
 8008b36:	4284      	cmp	r4, r0
 8008b38:	4623      	mov	r3, r4
 8008b3a:	d807      	bhi.n	8008b4c <memmove+0x20>
 8008b3c:	1e43      	subs	r3, r0, #1
 8008b3e:	42a1      	cmp	r1, r4
 8008b40:	d008      	beq.n	8008b54 <memmove+0x28>
 8008b42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b4a:	e7f8      	b.n	8008b3e <memmove+0x12>
 8008b4c:	4402      	add	r2, r0
 8008b4e:	4601      	mov	r1, r0
 8008b50:	428a      	cmp	r2, r1
 8008b52:	d100      	bne.n	8008b56 <memmove+0x2a>
 8008b54:	bd10      	pop	{r4, pc}
 8008b56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b5e:	e7f7      	b.n	8008b50 <memmove+0x24>

08008b60 <strncmp>:
 8008b60:	b510      	push	{r4, lr}
 8008b62:	b16a      	cbz	r2, 8008b80 <strncmp+0x20>
 8008b64:	3901      	subs	r1, #1
 8008b66:	1884      	adds	r4, r0, r2
 8008b68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b6c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d103      	bne.n	8008b7c <strncmp+0x1c>
 8008b74:	42a0      	cmp	r0, r4
 8008b76:	d001      	beq.n	8008b7c <strncmp+0x1c>
 8008b78:	2a00      	cmp	r2, #0
 8008b7a:	d1f5      	bne.n	8008b68 <strncmp+0x8>
 8008b7c:	1ad0      	subs	r0, r2, r3
 8008b7e:	bd10      	pop	{r4, pc}
 8008b80:	4610      	mov	r0, r2
 8008b82:	e7fc      	b.n	8008b7e <strncmp+0x1e>

08008b84 <_sbrk_r>:
 8008b84:	b538      	push	{r3, r4, r5, lr}
 8008b86:	4d06      	ldr	r5, [pc, #24]	@ (8008ba0 <_sbrk_r+0x1c>)
 8008b88:	2300      	movs	r3, #0
 8008b8a:	4604      	mov	r4, r0
 8008b8c:	4608      	mov	r0, r1
 8008b8e:	602b      	str	r3, [r5, #0]
 8008b90:	f7f8 feec 	bl	800196c <_sbrk>
 8008b94:	1c43      	adds	r3, r0, #1
 8008b96:	d102      	bne.n	8008b9e <_sbrk_r+0x1a>
 8008b98:	682b      	ldr	r3, [r5, #0]
 8008b9a:	b103      	cbz	r3, 8008b9e <_sbrk_r+0x1a>
 8008b9c:	6023      	str	r3, [r4, #0]
 8008b9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ba0:	2000043c 	.word	0x2000043c

08008ba4 <memcpy>:
 8008ba4:	440a      	add	r2, r1
 8008ba6:	4291      	cmp	r1, r2
 8008ba8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008bac:	d100      	bne.n	8008bb0 <memcpy+0xc>
 8008bae:	4770      	bx	lr
 8008bb0:	b510      	push	{r4, lr}
 8008bb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bba:	4291      	cmp	r1, r2
 8008bbc:	d1f9      	bne.n	8008bb2 <memcpy+0xe>
 8008bbe:	bd10      	pop	{r4, pc}

08008bc0 <nan>:
 8008bc0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008bc8 <nan+0x8>
 8008bc4:	4770      	bx	lr
 8008bc6:	bf00      	nop
 8008bc8:	00000000 	.word	0x00000000
 8008bcc:	7ff80000 	.word	0x7ff80000

08008bd0 <__assert_func>:
 8008bd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008bd2:	4614      	mov	r4, r2
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	4b09      	ldr	r3, [pc, #36]	@ (8008bfc <__assert_func+0x2c>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4605      	mov	r5, r0
 8008bdc:	68d8      	ldr	r0, [r3, #12]
 8008bde:	b954      	cbnz	r4, 8008bf6 <__assert_func+0x26>
 8008be0:	4b07      	ldr	r3, [pc, #28]	@ (8008c00 <__assert_func+0x30>)
 8008be2:	461c      	mov	r4, r3
 8008be4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008be8:	9100      	str	r1, [sp, #0]
 8008bea:	462b      	mov	r3, r5
 8008bec:	4905      	ldr	r1, [pc, #20]	@ (8008c04 <__assert_func+0x34>)
 8008bee:	f000 fba7 	bl	8009340 <fiprintf>
 8008bf2:	f000 fbb7 	bl	8009364 <abort>
 8008bf6:	4b04      	ldr	r3, [pc, #16]	@ (8008c08 <__assert_func+0x38>)
 8008bf8:	e7f4      	b.n	8008be4 <__assert_func+0x14>
 8008bfa:	bf00      	nop
 8008bfc:	20000018 	.word	0x20000018
 8008c00:	08009f6d 	.word	0x08009f6d
 8008c04:	08009f3f 	.word	0x08009f3f
 8008c08:	08009f32 	.word	0x08009f32

08008c0c <_calloc_r>:
 8008c0c:	b570      	push	{r4, r5, r6, lr}
 8008c0e:	fba1 5402 	umull	r5, r4, r1, r2
 8008c12:	b93c      	cbnz	r4, 8008c24 <_calloc_r+0x18>
 8008c14:	4629      	mov	r1, r5
 8008c16:	f7fe f9c3 	bl	8006fa0 <_malloc_r>
 8008c1a:	4606      	mov	r6, r0
 8008c1c:	b928      	cbnz	r0, 8008c2a <_calloc_r+0x1e>
 8008c1e:	2600      	movs	r6, #0
 8008c20:	4630      	mov	r0, r6
 8008c22:	bd70      	pop	{r4, r5, r6, pc}
 8008c24:	220c      	movs	r2, #12
 8008c26:	6002      	str	r2, [r0, #0]
 8008c28:	e7f9      	b.n	8008c1e <_calloc_r+0x12>
 8008c2a:	462a      	mov	r2, r5
 8008c2c:	4621      	mov	r1, r4
 8008c2e:	f7fd fa6e 	bl	800610e <memset>
 8008c32:	e7f5      	b.n	8008c20 <_calloc_r+0x14>

08008c34 <rshift>:
 8008c34:	6903      	ldr	r3, [r0, #16]
 8008c36:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008c3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c3e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008c42:	f100 0414 	add.w	r4, r0, #20
 8008c46:	dd45      	ble.n	8008cd4 <rshift+0xa0>
 8008c48:	f011 011f 	ands.w	r1, r1, #31
 8008c4c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008c50:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008c54:	d10c      	bne.n	8008c70 <rshift+0x3c>
 8008c56:	f100 0710 	add.w	r7, r0, #16
 8008c5a:	4629      	mov	r1, r5
 8008c5c:	42b1      	cmp	r1, r6
 8008c5e:	d334      	bcc.n	8008cca <rshift+0x96>
 8008c60:	1a9b      	subs	r3, r3, r2
 8008c62:	009b      	lsls	r3, r3, #2
 8008c64:	1eea      	subs	r2, r5, #3
 8008c66:	4296      	cmp	r6, r2
 8008c68:	bf38      	it	cc
 8008c6a:	2300      	movcc	r3, #0
 8008c6c:	4423      	add	r3, r4
 8008c6e:	e015      	b.n	8008c9c <rshift+0x68>
 8008c70:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008c74:	f1c1 0820 	rsb	r8, r1, #32
 8008c78:	40cf      	lsrs	r7, r1
 8008c7a:	f105 0e04 	add.w	lr, r5, #4
 8008c7e:	46a1      	mov	r9, r4
 8008c80:	4576      	cmp	r6, lr
 8008c82:	46f4      	mov	ip, lr
 8008c84:	d815      	bhi.n	8008cb2 <rshift+0x7e>
 8008c86:	1a9a      	subs	r2, r3, r2
 8008c88:	0092      	lsls	r2, r2, #2
 8008c8a:	3a04      	subs	r2, #4
 8008c8c:	3501      	adds	r5, #1
 8008c8e:	42ae      	cmp	r6, r5
 8008c90:	bf38      	it	cc
 8008c92:	2200      	movcc	r2, #0
 8008c94:	18a3      	adds	r3, r4, r2
 8008c96:	50a7      	str	r7, [r4, r2]
 8008c98:	b107      	cbz	r7, 8008c9c <rshift+0x68>
 8008c9a:	3304      	adds	r3, #4
 8008c9c:	1b1a      	subs	r2, r3, r4
 8008c9e:	42a3      	cmp	r3, r4
 8008ca0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008ca4:	bf08      	it	eq
 8008ca6:	2300      	moveq	r3, #0
 8008ca8:	6102      	str	r2, [r0, #16]
 8008caa:	bf08      	it	eq
 8008cac:	6143      	streq	r3, [r0, #20]
 8008cae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008cb2:	f8dc c000 	ldr.w	ip, [ip]
 8008cb6:	fa0c fc08 	lsl.w	ip, ip, r8
 8008cba:	ea4c 0707 	orr.w	r7, ip, r7
 8008cbe:	f849 7b04 	str.w	r7, [r9], #4
 8008cc2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008cc6:	40cf      	lsrs	r7, r1
 8008cc8:	e7da      	b.n	8008c80 <rshift+0x4c>
 8008cca:	f851 cb04 	ldr.w	ip, [r1], #4
 8008cce:	f847 cf04 	str.w	ip, [r7, #4]!
 8008cd2:	e7c3      	b.n	8008c5c <rshift+0x28>
 8008cd4:	4623      	mov	r3, r4
 8008cd6:	e7e1      	b.n	8008c9c <rshift+0x68>

08008cd8 <__hexdig_fun>:
 8008cd8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008cdc:	2b09      	cmp	r3, #9
 8008cde:	d802      	bhi.n	8008ce6 <__hexdig_fun+0xe>
 8008ce0:	3820      	subs	r0, #32
 8008ce2:	b2c0      	uxtb	r0, r0
 8008ce4:	4770      	bx	lr
 8008ce6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008cea:	2b05      	cmp	r3, #5
 8008cec:	d801      	bhi.n	8008cf2 <__hexdig_fun+0x1a>
 8008cee:	3847      	subs	r0, #71	@ 0x47
 8008cf0:	e7f7      	b.n	8008ce2 <__hexdig_fun+0xa>
 8008cf2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008cf6:	2b05      	cmp	r3, #5
 8008cf8:	d801      	bhi.n	8008cfe <__hexdig_fun+0x26>
 8008cfa:	3827      	subs	r0, #39	@ 0x27
 8008cfc:	e7f1      	b.n	8008ce2 <__hexdig_fun+0xa>
 8008cfe:	2000      	movs	r0, #0
 8008d00:	4770      	bx	lr
	...

08008d04 <__gethex>:
 8008d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d08:	b085      	sub	sp, #20
 8008d0a:	468a      	mov	sl, r1
 8008d0c:	9302      	str	r3, [sp, #8]
 8008d0e:	680b      	ldr	r3, [r1, #0]
 8008d10:	9001      	str	r0, [sp, #4]
 8008d12:	4690      	mov	r8, r2
 8008d14:	1c9c      	adds	r4, r3, #2
 8008d16:	46a1      	mov	r9, r4
 8008d18:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008d1c:	2830      	cmp	r0, #48	@ 0x30
 8008d1e:	d0fa      	beq.n	8008d16 <__gethex+0x12>
 8008d20:	eba9 0303 	sub.w	r3, r9, r3
 8008d24:	f1a3 0b02 	sub.w	fp, r3, #2
 8008d28:	f7ff ffd6 	bl	8008cd8 <__hexdig_fun>
 8008d2c:	4605      	mov	r5, r0
 8008d2e:	2800      	cmp	r0, #0
 8008d30:	d168      	bne.n	8008e04 <__gethex+0x100>
 8008d32:	49a0      	ldr	r1, [pc, #640]	@ (8008fb4 <__gethex+0x2b0>)
 8008d34:	2201      	movs	r2, #1
 8008d36:	4648      	mov	r0, r9
 8008d38:	f7ff ff12 	bl	8008b60 <strncmp>
 8008d3c:	4607      	mov	r7, r0
 8008d3e:	2800      	cmp	r0, #0
 8008d40:	d167      	bne.n	8008e12 <__gethex+0x10e>
 8008d42:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008d46:	4626      	mov	r6, r4
 8008d48:	f7ff ffc6 	bl	8008cd8 <__hexdig_fun>
 8008d4c:	2800      	cmp	r0, #0
 8008d4e:	d062      	beq.n	8008e16 <__gethex+0x112>
 8008d50:	4623      	mov	r3, r4
 8008d52:	7818      	ldrb	r0, [r3, #0]
 8008d54:	2830      	cmp	r0, #48	@ 0x30
 8008d56:	4699      	mov	r9, r3
 8008d58:	f103 0301 	add.w	r3, r3, #1
 8008d5c:	d0f9      	beq.n	8008d52 <__gethex+0x4e>
 8008d5e:	f7ff ffbb 	bl	8008cd8 <__hexdig_fun>
 8008d62:	fab0 f580 	clz	r5, r0
 8008d66:	096d      	lsrs	r5, r5, #5
 8008d68:	f04f 0b01 	mov.w	fp, #1
 8008d6c:	464a      	mov	r2, r9
 8008d6e:	4616      	mov	r6, r2
 8008d70:	3201      	adds	r2, #1
 8008d72:	7830      	ldrb	r0, [r6, #0]
 8008d74:	f7ff ffb0 	bl	8008cd8 <__hexdig_fun>
 8008d78:	2800      	cmp	r0, #0
 8008d7a:	d1f8      	bne.n	8008d6e <__gethex+0x6a>
 8008d7c:	498d      	ldr	r1, [pc, #564]	@ (8008fb4 <__gethex+0x2b0>)
 8008d7e:	2201      	movs	r2, #1
 8008d80:	4630      	mov	r0, r6
 8008d82:	f7ff feed 	bl	8008b60 <strncmp>
 8008d86:	2800      	cmp	r0, #0
 8008d88:	d13f      	bne.n	8008e0a <__gethex+0x106>
 8008d8a:	b944      	cbnz	r4, 8008d9e <__gethex+0x9a>
 8008d8c:	1c74      	adds	r4, r6, #1
 8008d8e:	4622      	mov	r2, r4
 8008d90:	4616      	mov	r6, r2
 8008d92:	3201      	adds	r2, #1
 8008d94:	7830      	ldrb	r0, [r6, #0]
 8008d96:	f7ff ff9f 	bl	8008cd8 <__hexdig_fun>
 8008d9a:	2800      	cmp	r0, #0
 8008d9c:	d1f8      	bne.n	8008d90 <__gethex+0x8c>
 8008d9e:	1ba4      	subs	r4, r4, r6
 8008da0:	00a7      	lsls	r7, r4, #2
 8008da2:	7833      	ldrb	r3, [r6, #0]
 8008da4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008da8:	2b50      	cmp	r3, #80	@ 0x50
 8008daa:	d13e      	bne.n	8008e2a <__gethex+0x126>
 8008dac:	7873      	ldrb	r3, [r6, #1]
 8008dae:	2b2b      	cmp	r3, #43	@ 0x2b
 8008db0:	d033      	beq.n	8008e1a <__gethex+0x116>
 8008db2:	2b2d      	cmp	r3, #45	@ 0x2d
 8008db4:	d034      	beq.n	8008e20 <__gethex+0x11c>
 8008db6:	1c71      	adds	r1, r6, #1
 8008db8:	2400      	movs	r4, #0
 8008dba:	7808      	ldrb	r0, [r1, #0]
 8008dbc:	f7ff ff8c 	bl	8008cd8 <__hexdig_fun>
 8008dc0:	1e43      	subs	r3, r0, #1
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	2b18      	cmp	r3, #24
 8008dc6:	d830      	bhi.n	8008e2a <__gethex+0x126>
 8008dc8:	f1a0 0210 	sub.w	r2, r0, #16
 8008dcc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008dd0:	f7ff ff82 	bl	8008cd8 <__hexdig_fun>
 8008dd4:	f100 3cff 	add.w	ip, r0, #4294967295
 8008dd8:	fa5f fc8c 	uxtb.w	ip, ip
 8008ddc:	f1bc 0f18 	cmp.w	ip, #24
 8008de0:	f04f 030a 	mov.w	r3, #10
 8008de4:	d91e      	bls.n	8008e24 <__gethex+0x120>
 8008de6:	b104      	cbz	r4, 8008dea <__gethex+0xe6>
 8008de8:	4252      	negs	r2, r2
 8008dea:	4417      	add	r7, r2
 8008dec:	f8ca 1000 	str.w	r1, [sl]
 8008df0:	b1ed      	cbz	r5, 8008e2e <__gethex+0x12a>
 8008df2:	f1bb 0f00 	cmp.w	fp, #0
 8008df6:	bf0c      	ite	eq
 8008df8:	2506      	moveq	r5, #6
 8008dfa:	2500      	movne	r5, #0
 8008dfc:	4628      	mov	r0, r5
 8008dfe:	b005      	add	sp, #20
 8008e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e04:	2500      	movs	r5, #0
 8008e06:	462c      	mov	r4, r5
 8008e08:	e7b0      	b.n	8008d6c <__gethex+0x68>
 8008e0a:	2c00      	cmp	r4, #0
 8008e0c:	d1c7      	bne.n	8008d9e <__gethex+0x9a>
 8008e0e:	4627      	mov	r7, r4
 8008e10:	e7c7      	b.n	8008da2 <__gethex+0x9e>
 8008e12:	464e      	mov	r6, r9
 8008e14:	462f      	mov	r7, r5
 8008e16:	2501      	movs	r5, #1
 8008e18:	e7c3      	b.n	8008da2 <__gethex+0x9e>
 8008e1a:	2400      	movs	r4, #0
 8008e1c:	1cb1      	adds	r1, r6, #2
 8008e1e:	e7cc      	b.n	8008dba <__gethex+0xb6>
 8008e20:	2401      	movs	r4, #1
 8008e22:	e7fb      	b.n	8008e1c <__gethex+0x118>
 8008e24:	fb03 0002 	mla	r0, r3, r2, r0
 8008e28:	e7ce      	b.n	8008dc8 <__gethex+0xc4>
 8008e2a:	4631      	mov	r1, r6
 8008e2c:	e7de      	b.n	8008dec <__gethex+0xe8>
 8008e2e:	eba6 0309 	sub.w	r3, r6, r9
 8008e32:	3b01      	subs	r3, #1
 8008e34:	4629      	mov	r1, r5
 8008e36:	2b07      	cmp	r3, #7
 8008e38:	dc0a      	bgt.n	8008e50 <__gethex+0x14c>
 8008e3a:	9801      	ldr	r0, [sp, #4]
 8008e3c:	f7fe f93c 	bl	80070b8 <_Balloc>
 8008e40:	4604      	mov	r4, r0
 8008e42:	b940      	cbnz	r0, 8008e56 <__gethex+0x152>
 8008e44:	4b5c      	ldr	r3, [pc, #368]	@ (8008fb8 <__gethex+0x2b4>)
 8008e46:	4602      	mov	r2, r0
 8008e48:	21e4      	movs	r1, #228	@ 0xe4
 8008e4a:	485c      	ldr	r0, [pc, #368]	@ (8008fbc <__gethex+0x2b8>)
 8008e4c:	f7ff fec0 	bl	8008bd0 <__assert_func>
 8008e50:	3101      	adds	r1, #1
 8008e52:	105b      	asrs	r3, r3, #1
 8008e54:	e7ef      	b.n	8008e36 <__gethex+0x132>
 8008e56:	f100 0a14 	add.w	sl, r0, #20
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	4655      	mov	r5, sl
 8008e5e:	469b      	mov	fp, r3
 8008e60:	45b1      	cmp	r9, r6
 8008e62:	d337      	bcc.n	8008ed4 <__gethex+0x1d0>
 8008e64:	f845 bb04 	str.w	fp, [r5], #4
 8008e68:	eba5 050a 	sub.w	r5, r5, sl
 8008e6c:	10ad      	asrs	r5, r5, #2
 8008e6e:	6125      	str	r5, [r4, #16]
 8008e70:	4658      	mov	r0, fp
 8008e72:	f7fe fa13 	bl	800729c <__hi0bits>
 8008e76:	016d      	lsls	r5, r5, #5
 8008e78:	f8d8 6000 	ldr.w	r6, [r8]
 8008e7c:	1a2d      	subs	r5, r5, r0
 8008e7e:	42b5      	cmp	r5, r6
 8008e80:	dd54      	ble.n	8008f2c <__gethex+0x228>
 8008e82:	1bad      	subs	r5, r5, r6
 8008e84:	4629      	mov	r1, r5
 8008e86:	4620      	mov	r0, r4
 8008e88:	f7fe fda7 	bl	80079da <__any_on>
 8008e8c:	4681      	mov	r9, r0
 8008e8e:	b178      	cbz	r0, 8008eb0 <__gethex+0x1ac>
 8008e90:	1e6b      	subs	r3, r5, #1
 8008e92:	1159      	asrs	r1, r3, #5
 8008e94:	f003 021f 	and.w	r2, r3, #31
 8008e98:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008e9c:	f04f 0901 	mov.w	r9, #1
 8008ea0:	fa09 f202 	lsl.w	r2, r9, r2
 8008ea4:	420a      	tst	r2, r1
 8008ea6:	d003      	beq.n	8008eb0 <__gethex+0x1ac>
 8008ea8:	454b      	cmp	r3, r9
 8008eaa:	dc36      	bgt.n	8008f1a <__gethex+0x216>
 8008eac:	f04f 0902 	mov.w	r9, #2
 8008eb0:	4629      	mov	r1, r5
 8008eb2:	4620      	mov	r0, r4
 8008eb4:	f7ff febe 	bl	8008c34 <rshift>
 8008eb8:	442f      	add	r7, r5
 8008eba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008ebe:	42bb      	cmp	r3, r7
 8008ec0:	da42      	bge.n	8008f48 <__gethex+0x244>
 8008ec2:	9801      	ldr	r0, [sp, #4]
 8008ec4:	4621      	mov	r1, r4
 8008ec6:	f7fe f937 	bl	8007138 <_Bfree>
 8008eca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ecc:	2300      	movs	r3, #0
 8008ece:	6013      	str	r3, [r2, #0]
 8008ed0:	25a3      	movs	r5, #163	@ 0xa3
 8008ed2:	e793      	b.n	8008dfc <__gethex+0xf8>
 8008ed4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008ed8:	2a2e      	cmp	r2, #46	@ 0x2e
 8008eda:	d012      	beq.n	8008f02 <__gethex+0x1fe>
 8008edc:	2b20      	cmp	r3, #32
 8008ede:	d104      	bne.n	8008eea <__gethex+0x1e6>
 8008ee0:	f845 bb04 	str.w	fp, [r5], #4
 8008ee4:	f04f 0b00 	mov.w	fp, #0
 8008ee8:	465b      	mov	r3, fp
 8008eea:	7830      	ldrb	r0, [r6, #0]
 8008eec:	9303      	str	r3, [sp, #12]
 8008eee:	f7ff fef3 	bl	8008cd8 <__hexdig_fun>
 8008ef2:	9b03      	ldr	r3, [sp, #12]
 8008ef4:	f000 000f 	and.w	r0, r0, #15
 8008ef8:	4098      	lsls	r0, r3
 8008efa:	ea4b 0b00 	orr.w	fp, fp, r0
 8008efe:	3304      	adds	r3, #4
 8008f00:	e7ae      	b.n	8008e60 <__gethex+0x15c>
 8008f02:	45b1      	cmp	r9, r6
 8008f04:	d8ea      	bhi.n	8008edc <__gethex+0x1d8>
 8008f06:	492b      	ldr	r1, [pc, #172]	@ (8008fb4 <__gethex+0x2b0>)
 8008f08:	9303      	str	r3, [sp, #12]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	4630      	mov	r0, r6
 8008f0e:	f7ff fe27 	bl	8008b60 <strncmp>
 8008f12:	9b03      	ldr	r3, [sp, #12]
 8008f14:	2800      	cmp	r0, #0
 8008f16:	d1e1      	bne.n	8008edc <__gethex+0x1d8>
 8008f18:	e7a2      	b.n	8008e60 <__gethex+0x15c>
 8008f1a:	1ea9      	subs	r1, r5, #2
 8008f1c:	4620      	mov	r0, r4
 8008f1e:	f7fe fd5c 	bl	80079da <__any_on>
 8008f22:	2800      	cmp	r0, #0
 8008f24:	d0c2      	beq.n	8008eac <__gethex+0x1a8>
 8008f26:	f04f 0903 	mov.w	r9, #3
 8008f2a:	e7c1      	b.n	8008eb0 <__gethex+0x1ac>
 8008f2c:	da09      	bge.n	8008f42 <__gethex+0x23e>
 8008f2e:	1b75      	subs	r5, r6, r5
 8008f30:	4621      	mov	r1, r4
 8008f32:	9801      	ldr	r0, [sp, #4]
 8008f34:	462a      	mov	r2, r5
 8008f36:	f7fe fb17 	bl	8007568 <__lshift>
 8008f3a:	1b7f      	subs	r7, r7, r5
 8008f3c:	4604      	mov	r4, r0
 8008f3e:	f100 0a14 	add.w	sl, r0, #20
 8008f42:	f04f 0900 	mov.w	r9, #0
 8008f46:	e7b8      	b.n	8008eba <__gethex+0x1b6>
 8008f48:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008f4c:	42bd      	cmp	r5, r7
 8008f4e:	dd6f      	ble.n	8009030 <__gethex+0x32c>
 8008f50:	1bed      	subs	r5, r5, r7
 8008f52:	42ae      	cmp	r6, r5
 8008f54:	dc34      	bgt.n	8008fc0 <__gethex+0x2bc>
 8008f56:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008f5a:	2b02      	cmp	r3, #2
 8008f5c:	d022      	beq.n	8008fa4 <__gethex+0x2a0>
 8008f5e:	2b03      	cmp	r3, #3
 8008f60:	d024      	beq.n	8008fac <__gethex+0x2a8>
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	d115      	bne.n	8008f92 <__gethex+0x28e>
 8008f66:	42ae      	cmp	r6, r5
 8008f68:	d113      	bne.n	8008f92 <__gethex+0x28e>
 8008f6a:	2e01      	cmp	r6, #1
 8008f6c:	d10b      	bne.n	8008f86 <__gethex+0x282>
 8008f6e:	9a02      	ldr	r2, [sp, #8]
 8008f70:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008f74:	6013      	str	r3, [r2, #0]
 8008f76:	2301      	movs	r3, #1
 8008f78:	6123      	str	r3, [r4, #16]
 8008f7a:	f8ca 3000 	str.w	r3, [sl]
 8008f7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f80:	2562      	movs	r5, #98	@ 0x62
 8008f82:	601c      	str	r4, [r3, #0]
 8008f84:	e73a      	b.n	8008dfc <__gethex+0xf8>
 8008f86:	1e71      	subs	r1, r6, #1
 8008f88:	4620      	mov	r0, r4
 8008f8a:	f7fe fd26 	bl	80079da <__any_on>
 8008f8e:	2800      	cmp	r0, #0
 8008f90:	d1ed      	bne.n	8008f6e <__gethex+0x26a>
 8008f92:	9801      	ldr	r0, [sp, #4]
 8008f94:	4621      	mov	r1, r4
 8008f96:	f7fe f8cf 	bl	8007138 <_Bfree>
 8008f9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	6013      	str	r3, [r2, #0]
 8008fa0:	2550      	movs	r5, #80	@ 0x50
 8008fa2:	e72b      	b.n	8008dfc <__gethex+0xf8>
 8008fa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d1f3      	bne.n	8008f92 <__gethex+0x28e>
 8008faa:	e7e0      	b.n	8008f6e <__gethex+0x26a>
 8008fac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d1dd      	bne.n	8008f6e <__gethex+0x26a>
 8008fb2:	e7ee      	b.n	8008f92 <__gethex+0x28e>
 8008fb4:	08009dc0 	.word	0x08009dc0
 8008fb8:	08009c55 	.word	0x08009c55
 8008fbc:	08009f6e 	.word	0x08009f6e
 8008fc0:	1e6f      	subs	r7, r5, #1
 8008fc2:	f1b9 0f00 	cmp.w	r9, #0
 8008fc6:	d130      	bne.n	800902a <__gethex+0x326>
 8008fc8:	b127      	cbz	r7, 8008fd4 <__gethex+0x2d0>
 8008fca:	4639      	mov	r1, r7
 8008fcc:	4620      	mov	r0, r4
 8008fce:	f7fe fd04 	bl	80079da <__any_on>
 8008fd2:	4681      	mov	r9, r0
 8008fd4:	117a      	asrs	r2, r7, #5
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008fdc:	f007 071f 	and.w	r7, r7, #31
 8008fe0:	40bb      	lsls	r3, r7
 8008fe2:	4213      	tst	r3, r2
 8008fe4:	4629      	mov	r1, r5
 8008fe6:	4620      	mov	r0, r4
 8008fe8:	bf18      	it	ne
 8008fea:	f049 0902 	orrne.w	r9, r9, #2
 8008fee:	f7ff fe21 	bl	8008c34 <rshift>
 8008ff2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008ff6:	1b76      	subs	r6, r6, r5
 8008ff8:	2502      	movs	r5, #2
 8008ffa:	f1b9 0f00 	cmp.w	r9, #0
 8008ffe:	d047      	beq.n	8009090 <__gethex+0x38c>
 8009000:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009004:	2b02      	cmp	r3, #2
 8009006:	d015      	beq.n	8009034 <__gethex+0x330>
 8009008:	2b03      	cmp	r3, #3
 800900a:	d017      	beq.n	800903c <__gethex+0x338>
 800900c:	2b01      	cmp	r3, #1
 800900e:	d109      	bne.n	8009024 <__gethex+0x320>
 8009010:	f019 0f02 	tst.w	r9, #2
 8009014:	d006      	beq.n	8009024 <__gethex+0x320>
 8009016:	f8da 3000 	ldr.w	r3, [sl]
 800901a:	ea49 0903 	orr.w	r9, r9, r3
 800901e:	f019 0f01 	tst.w	r9, #1
 8009022:	d10e      	bne.n	8009042 <__gethex+0x33e>
 8009024:	f045 0510 	orr.w	r5, r5, #16
 8009028:	e032      	b.n	8009090 <__gethex+0x38c>
 800902a:	f04f 0901 	mov.w	r9, #1
 800902e:	e7d1      	b.n	8008fd4 <__gethex+0x2d0>
 8009030:	2501      	movs	r5, #1
 8009032:	e7e2      	b.n	8008ffa <__gethex+0x2f6>
 8009034:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009036:	f1c3 0301 	rsb	r3, r3, #1
 800903a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800903c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800903e:	2b00      	cmp	r3, #0
 8009040:	d0f0      	beq.n	8009024 <__gethex+0x320>
 8009042:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009046:	f104 0314 	add.w	r3, r4, #20
 800904a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800904e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009052:	f04f 0c00 	mov.w	ip, #0
 8009056:	4618      	mov	r0, r3
 8009058:	f853 2b04 	ldr.w	r2, [r3], #4
 800905c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009060:	d01b      	beq.n	800909a <__gethex+0x396>
 8009062:	3201      	adds	r2, #1
 8009064:	6002      	str	r2, [r0, #0]
 8009066:	2d02      	cmp	r5, #2
 8009068:	f104 0314 	add.w	r3, r4, #20
 800906c:	d13c      	bne.n	80090e8 <__gethex+0x3e4>
 800906e:	f8d8 2000 	ldr.w	r2, [r8]
 8009072:	3a01      	subs	r2, #1
 8009074:	42b2      	cmp	r2, r6
 8009076:	d109      	bne.n	800908c <__gethex+0x388>
 8009078:	1171      	asrs	r1, r6, #5
 800907a:	2201      	movs	r2, #1
 800907c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009080:	f006 061f 	and.w	r6, r6, #31
 8009084:	fa02 f606 	lsl.w	r6, r2, r6
 8009088:	421e      	tst	r6, r3
 800908a:	d13a      	bne.n	8009102 <__gethex+0x3fe>
 800908c:	f045 0520 	orr.w	r5, r5, #32
 8009090:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009092:	601c      	str	r4, [r3, #0]
 8009094:	9b02      	ldr	r3, [sp, #8]
 8009096:	601f      	str	r7, [r3, #0]
 8009098:	e6b0      	b.n	8008dfc <__gethex+0xf8>
 800909a:	4299      	cmp	r1, r3
 800909c:	f843 cc04 	str.w	ip, [r3, #-4]
 80090a0:	d8d9      	bhi.n	8009056 <__gethex+0x352>
 80090a2:	68a3      	ldr	r3, [r4, #8]
 80090a4:	459b      	cmp	fp, r3
 80090a6:	db17      	blt.n	80090d8 <__gethex+0x3d4>
 80090a8:	6861      	ldr	r1, [r4, #4]
 80090aa:	9801      	ldr	r0, [sp, #4]
 80090ac:	3101      	adds	r1, #1
 80090ae:	f7fe f803 	bl	80070b8 <_Balloc>
 80090b2:	4681      	mov	r9, r0
 80090b4:	b918      	cbnz	r0, 80090be <__gethex+0x3ba>
 80090b6:	4b1a      	ldr	r3, [pc, #104]	@ (8009120 <__gethex+0x41c>)
 80090b8:	4602      	mov	r2, r0
 80090ba:	2184      	movs	r1, #132	@ 0x84
 80090bc:	e6c5      	b.n	8008e4a <__gethex+0x146>
 80090be:	6922      	ldr	r2, [r4, #16]
 80090c0:	3202      	adds	r2, #2
 80090c2:	f104 010c 	add.w	r1, r4, #12
 80090c6:	0092      	lsls	r2, r2, #2
 80090c8:	300c      	adds	r0, #12
 80090ca:	f7ff fd6b 	bl	8008ba4 <memcpy>
 80090ce:	4621      	mov	r1, r4
 80090d0:	9801      	ldr	r0, [sp, #4]
 80090d2:	f7fe f831 	bl	8007138 <_Bfree>
 80090d6:	464c      	mov	r4, r9
 80090d8:	6923      	ldr	r3, [r4, #16]
 80090da:	1c5a      	adds	r2, r3, #1
 80090dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80090e0:	6122      	str	r2, [r4, #16]
 80090e2:	2201      	movs	r2, #1
 80090e4:	615a      	str	r2, [r3, #20]
 80090e6:	e7be      	b.n	8009066 <__gethex+0x362>
 80090e8:	6922      	ldr	r2, [r4, #16]
 80090ea:	455a      	cmp	r2, fp
 80090ec:	dd0b      	ble.n	8009106 <__gethex+0x402>
 80090ee:	2101      	movs	r1, #1
 80090f0:	4620      	mov	r0, r4
 80090f2:	f7ff fd9f 	bl	8008c34 <rshift>
 80090f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80090fa:	3701      	adds	r7, #1
 80090fc:	42bb      	cmp	r3, r7
 80090fe:	f6ff aee0 	blt.w	8008ec2 <__gethex+0x1be>
 8009102:	2501      	movs	r5, #1
 8009104:	e7c2      	b.n	800908c <__gethex+0x388>
 8009106:	f016 061f 	ands.w	r6, r6, #31
 800910a:	d0fa      	beq.n	8009102 <__gethex+0x3fe>
 800910c:	4453      	add	r3, sl
 800910e:	f1c6 0620 	rsb	r6, r6, #32
 8009112:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009116:	f7fe f8c1 	bl	800729c <__hi0bits>
 800911a:	42b0      	cmp	r0, r6
 800911c:	dbe7      	blt.n	80090ee <__gethex+0x3ea>
 800911e:	e7f0      	b.n	8009102 <__gethex+0x3fe>
 8009120:	08009c55 	.word	0x08009c55

08009124 <L_shift>:
 8009124:	f1c2 0208 	rsb	r2, r2, #8
 8009128:	0092      	lsls	r2, r2, #2
 800912a:	b570      	push	{r4, r5, r6, lr}
 800912c:	f1c2 0620 	rsb	r6, r2, #32
 8009130:	6843      	ldr	r3, [r0, #4]
 8009132:	6804      	ldr	r4, [r0, #0]
 8009134:	fa03 f506 	lsl.w	r5, r3, r6
 8009138:	432c      	orrs	r4, r5
 800913a:	40d3      	lsrs	r3, r2
 800913c:	6004      	str	r4, [r0, #0]
 800913e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009142:	4288      	cmp	r0, r1
 8009144:	d3f4      	bcc.n	8009130 <L_shift+0xc>
 8009146:	bd70      	pop	{r4, r5, r6, pc}

08009148 <__match>:
 8009148:	b530      	push	{r4, r5, lr}
 800914a:	6803      	ldr	r3, [r0, #0]
 800914c:	3301      	adds	r3, #1
 800914e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009152:	b914      	cbnz	r4, 800915a <__match+0x12>
 8009154:	6003      	str	r3, [r0, #0]
 8009156:	2001      	movs	r0, #1
 8009158:	bd30      	pop	{r4, r5, pc}
 800915a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800915e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009162:	2d19      	cmp	r5, #25
 8009164:	bf98      	it	ls
 8009166:	3220      	addls	r2, #32
 8009168:	42a2      	cmp	r2, r4
 800916a:	d0f0      	beq.n	800914e <__match+0x6>
 800916c:	2000      	movs	r0, #0
 800916e:	e7f3      	b.n	8009158 <__match+0x10>

08009170 <__hexnan>:
 8009170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009174:	680b      	ldr	r3, [r1, #0]
 8009176:	6801      	ldr	r1, [r0, #0]
 8009178:	115e      	asrs	r6, r3, #5
 800917a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800917e:	f013 031f 	ands.w	r3, r3, #31
 8009182:	b087      	sub	sp, #28
 8009184:	bf18      	it	ne
 8009186:	3604      	addne	r6, #4
 8009188:	2500      	movs	r5, #0
 800918a:	1f37      	subs	r7, r6, #4
 800918c:	4682      	mov	sl, r0
 800918e:	4690      	mov	r8, r2
 8009190:	9301      	str	r3, [sp, #4]
 8009192:	f846 5c04 	str.w	r5, [r6, #-4]
 8009196:	46b9      	mov	r9, r7
 8009198:	463c      	mov	r4, r7
 800919a:	9502      	str	r5, [sp, #8]
 800919c:	46ab      	mov	fp, r5
 800919e:	784a      	ldrb	r2, [r1, #1]
 80091a0:	1c4b      	adds	r3, r1, #1
 80091a2:	9303      	str	r3, [sp, #12]
 80091a4:	b342      	cbz	r2, 80091f8 <__hexnan+0x88>
 80091a6:	4610      	mov	r0, r2
 80091a8:	9105      	str	r1, [sp, #20]
 80091aa:	9204      	str	r2, [sp, #16]
 80091ac:	f7ff fd94 	bl	8008cd8 <__hexdig_fun>
 80091b0:	2800      	cmp	r0, #0
 80091b2:	d151      	bne.n	8009258 <__hexnan+0xe8>
 80091b4:	9a04      	ldr	r2, [sp, #16]
 80091b6:	9905      	ldr	r1, [sp, #20]
 80091b8:	2a20      	cmp	r2, #32
 80091ba:	d818      	bhi.n	80091ee <__hexnan+0x7e>
 80091bc:	9b02      	ldr	r3, [sp, #8]
 80091be:	459b      	cmp	fp, r3
 80091c0:	dd13      	ble.n	80091ea <__hexnan+0x7a>
 80091c2:	454c      	cmp	r4, r9
 80091c4:	d206      	bcs.n	80091d4 <__hexnan+0x64>
 80091c6:	2d07      	cmp	r5, #7
 80091c8:	dc04      	bgt.n	80091d4 <__hexnan+0x64>
 80091ca:	462a      	mov	r2, r5
 80091cc:	4649      	mov	r1, r9
 80091ce:	4620      	mov	r0, r4
 80091d0:	f7ff ffa8 	bl	8009124 <L_shift>
 80091d4:	4544      	cmp	r4, r8
 80091d6:	d952      	bls.n	800927e <__hexnan+0x10e>
 80091d8:	2300      	movs	r3, #0
 80091da:	f1a4 0904 	sub.w	r9, r4, #4
 80091de:	f844 3c04 	str.w	r3, [r4, #-4]
 80091e2:	f8cd b008 	str.w	fp, [sp, #8]
 80091e6:	464c      	mov	r4, r9
 80091e8:	461d      	mov	r5, r3
 80091ea:	9903      	ldr	r1, [sp, #12]
 80091ec:	e7d7      	b.n	800919e <__hexnan+0x2e>
 80091ee:	2a29      	cmp	r2, #41	@ 0x29
 80091f0:	d157      	bne.n	80092a2 <__hexnan+0x132>
 80091f2:	3102      	adds	r1, #2
 80091f4:	f8ca 1000 	str.w	r1, [sl]
 80091f8:	f1bb 0f00 	cmp.w	fp, #0
 80091fc:	d051      	beq.n	80092a2 <__hexnan+0x132>
 80091fe:	454c      	cmp	r4, r9
 8009200:	d206      	bcs.n	8009210 <__hexnan+0xa0>
 8009202:	2d07      	cmp	r5, #7
 8009204:	dc04      	bgt.n	8009210 <__hexnan+0xa0>
 8009206:	462a      	mov	r2, r5
 8009208:	4649      	mov	r1, r9
 800920a:	4620      	mov	r0, r4
 800920c:	f7ff ff8a 	bl	8009124 <L_shift>
 8009210:	4544      	cmp	r4, r8
 8009212:	d936      	bls.n	8009282 <__hexnan+0x112>
 8009214:	f1a8 0204 	sub.w	r2, r8, #4
 8009218:	4623      	mov	r3, r4
 800921a:	f853 1b04 	ldr.w	r1, [r3], #4
 800921e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009222:	429f      	cmp	r7, r3
 8009224:	d2f9      	bcs.n	800921a <__hexnan+0xaa>
 8009226:	1b3b      	subs	r3, r7, r4
 8009228:	f023 0303 	bic.w	r3, r3, #3
 800922c:	3304      	adds	r3, #4
 800922e:	3401      	adds	r4, #1
 8009230:	3e03      	subs	r6, #3
 8009232:	42b4      	cmp	r4, r6
 8009234:	bf88      	it	hi
 8009236:	2304      	movhi	r3, #4
 8009238:	4443      	add	r3, r8
 800923a:	2200      	movs	r2, #0
 800923c:	f843 2b04 	str.w	r2, [r3], #4
 8009240:	429f      	cmp	r7, r3
 8009242:	d2fb      	bcs.n	800923c <__hexnan+0xcc>
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	b91b      	cbnz	r3, 8009250 <__hexnan+0xe0>
 8009248:	4547      	cmp	r7, r8
 800924a:	d128      	bne.n	800929e <__hexnan+0x12e>
 800924c:	2301      	movs	r3, #1
 800924e:	603b      	str	r3, [r7, #0]
 8009250:	2005      	movs	r0, #5
 8009252:	b007      	add	sp, #28
 8009254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009258:	3501      	adds	r5, #1
 800925a:	2d08      	cmp	r5, #8
 800925c:	f10b 0b01 	add.w	fp, fp, #1
 8009260:	dd06      	ble.n	8009270 <__hexnan+0x100>
 8009262:	4544      	cmp	r4, r8
 8009264:	d9c1      	bls.n	80091ea <__hexnan+0x7a>
 8009266:	2300      	movs	r3, #0
 8009268:	f844 3c04 	str.w	r3, [r4, #-4]
 800926c:	2501      	movs	r5, #1
 800926e:	3c04      	subs	r4, #4
 8009270:	6822      	ldr	r2, [r4, #0]
 8009272:	f000 000f 	and.w	r0, r0, #15
 8009276:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800927a:	6020      	str	r0, [r4, #0]
 800927c:	e7b5      	b.n	80091ea <__hexnan+0x7a>
 800927e:	2508      	movs	r5, #8
 8009280:	e7b3      	b.n	80091ea <__hexnan+0x7a>
 8009282:	9b01      	ldr	r3, [sp, #4]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d0dd      	beq.n	8009244 <__hexnan+0xd4>
 8009288:	f1c3 0320 	rsb	r3, r3, #32
 800928c:	f04f 32ff 	mov.w	r2, #4294967295
 8009290:	40da      	lsrs	r2, r3
 8009292:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009296:	4013      	ands	r3, r2
 8009298:	f846 3c04 	str.w	r3, [r6, #-4]
 800929c:	e7d2      	b.n	8009244 <__hexnan+0xd4>
 800929e:	3f04      	subs	r7, #4
 80092a0:	e7d0      	b.n	8009244 <__hexnan+0xd4>
 80092a2:	2004      	movs	r0, #4
 80092a4:	e7d5      	b.n	8009252 <__hexnan+0xe2>

080092a6 <__ascii_mbtowc>:
 80092a6:	b082      	sub	sp, #8
 80092a8:	b901      	cbnz	r1, 80092ac <__ascii_mbtowc+0x6>
 80092aa:	a901      	add	r1, sp, #4
 80092ac:	b142      	cbz	r2, 80092c0 <__ascii_mbtowc+0x1a>
 80092ae:	b14b      	cbz	r3, 80092c4 <__ascii_mbtowc+0x1e>
 80092b0:	7813      	ldrb	r3, [r2, #0]
 80092b2:	600b      	str	r3, [r1, #0]
 80092b4:	7812      	ldrb	r2, [r2, #0]
 80092b6:	1e10      	subs	r0, r2, #0
 80092b8:	bf18      	it	ne
 80092ba:	2001      	movne	r0, #1
 80092bc:	b002      	add	sp, #8
 80092be:	4770      	bx	lr
 80092c0:	4610      	mov	r0, r2
 80092c2:	e7fb      	b.n	80092bc <__ascii_mbtowc+0x16>
 80092c4:	f06f 0001 	mvn.w	r0, #1
 80092c8:	e7f8      	b.n	80092bc <__ascii_mbtowc+0x16>

080092ca <_realloc_r>:
 80092ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092ce:	4680      	mov	r8, r0
 80092d0:	4615      	mov	r5, r2
 80092d2:	460c      	mov	r4, r1
 80092d4:	b921      	cbnz	r1, 80092e0 <_realloc_r+0x16>
 80092d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092da:	4611      	mov	r1, r2
 80092dc:	f7fd be60 	b.w	8006fa0 <_malloc_r>
 80092e0:	b92a      	cbnz	r2, 80092ee <_realloc_r+0x24>
 80092e2:	f7fd fde9 	bl	8006eb8 <_free_r>
 80092e6:	2400      	movs	r4, #0
 80092e8:	4620      	mov	r0, r4
 80092ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092ee:	f000 f840 	bl	8009372 <_malloc_usable_size_r>
 80092f2:	4285      	cmp	r5, r0
 80092f4:	4606      	mov	r6, r0
 80092f6:	d802      	bhi.n	80092fe <_realloc_r+0x34>
 80092f8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80092fc:	d8f4      	bhi.n	80092e8 <_realloc_r+0x1e>
 80092fe:	4629      	mov	r1, r5
 8009300:	4640      	mov	r0, r8
 8009302:	f7fd fe4d 	bl	8006fa0 <_malloc_r>
 8009306:	4607      	mov	r7, r0
 8009308:	2800      	cmp	r0, #0
 800930a:	d0ec      	beq.n	80092e6 <_realloc_r+0x1c>
 800930c:	42b5      	cmp	r5, r6
 800930e:	462a      	mov	r2, r5
 8009310:	4621      	mov	r1, r4
 8009312:	bf28      	it	cs
 8009314:	4632      	movcs	r2, r6
 8009316:	f7ff fc45 	bl	8008ba4 <memcpy>
 800931a:	4621      	mov	r1, r4
 800931c:	4640      	mov	r0, r8
 800931e:	f7fd fdcb 	bl	8006eb8 <_free_r>
 8009322:	463c      	mov	r4, r7
 8009324:	e7e0      	b.n	80092e8 <_realloc_r+0x1e>

08009326 <__ascii_wctomb>:
 8009326:	4603      	mov	r3, r0
 8009328:	4608      	mov	r0, r1
 800932a:	b141      	cbz	r1, 800933e <__ascii_wctomb+0x18>
 800932c:	2aff      	cmp	r2, #255	@ 0xff
 800932e:	d904      	bls.n	800933a <__ascii_wctomb+0x14>
 8009330:	228a      	movs	r2, #138	@ 0x8a
 8009332:	601a      	str	r2, [r3, #0]
 8009334:	f04f 30ff 	mov.w	r0, #4294967295
 8009338:	4770      	bx	lr
 800933a:	700a      	strb	r2, [r1, #0]
 800933c:	2001      	movs	r0, #1
 800933e:	4770      	bx	lr

08009340 <fiprintf>:
 8009340:	b40e      	push	{r1, r2, r3}
 8009342:	b503      	push	{r0, r1, lr}
 8009344:	4601      	mov	r1, r0
 8009346:	ab03      	add	r3, sp, #12
 8009348:	4805      	ldr	r0, [pc, #20]	@ (8009360 <fiprintf+0x20>)
 800934a:	f853 2b04 	ldr.w	r2, [r3], #4
 800934e:	6800      	ldr	r0, [r0, #0]
 8009350:	9301      	str	r3, [sp, #4]
 8009352:	f000 f83f 	bl	80093d4 <_vfiprintf_r>
 8009356:	b002      	add	sp, #8
 8009358:	f85d eb04 	ldr.w	lr, [sp], #4
 800935c:	b003      	add	sp, #12
 800935e:	4770      	bx	lr
 8009360:	20000018 	.word	0x20000018

08009364 <abort>:
 8009364:	b508      	push	{r3, lr}
 8009366:	2006      	movs	r0, #6
 8009368:	f000 fa08 	bl	800977c <raise>
 800936c:	2001      	movs	r0, #1
 800936e:	f7f8 fa84 	bl	800187a <_exit>

08009372 <_malloc_usable_size_r>:
 8009372:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009376:	1f18      	subs	r0, r3, #4
 8009378:	2b00      	cmp	r3, #0
 800937a:	bfbc      	itt	lt
 800937c:	580b      	ldrlt	r3, [r1, r0]
 800937e:	18c0      	addlt	r0, r0, r3
 8009380:	4770      	bx	lr

08009382 <__sfputc_r>:
 8009382:	6893      	ldr	r3, [r2, #8]
 8009384:	3b01      	subs	r3, #1
 8009386:	2b00      	cmp	r3, #0
 8009388:	b410      	push	{r4}
 800938a:	6093      	str	r3, [r2, #8]
 800938c:	da08      	bge.n	80093a0 <__sfputc_r+0x1e>
 800938e:	6994      	ldr	r4, [r2, #24]
 8009390:	42a3      	cmp	r3, r4
 8009392:	db01      	blt.n	8009398 <__sfputc_r+0x16>
 8009394:	290a      	cmp	r1, #10
 8009396:	d103      	bne.n	80093a0 <__sfputc_r+0x1e>
 8009398:	f85d 4b04 	ldr.w	r4, [sp], #4
 800939c:	f000 b932 	b.w	8009604 <__swbuf_r>
 80093a0:	6813      	ldr	r3, [r2, #0]
 80093a2:	1c58      	adds	r0, r3, #1
 80093a4:	6010      	str	r0, [r2, #0]
 80093a6:	7019      	strb	r1, [r3, #0]
 80093a8:	4608      	mov	r0, r1
 80093aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093ae:	4770      	bx	lr

080093b0 <__sfputs_r>:
 80093b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093b2:	4606      	mov	r6, r0
 80093b4:	460f      	mov	r7, r1
 80093b6:	4614      	mov	r4, r2
 80093b8:	18d5      	adds	r5, r2, r3
 80093ba:	42ac      	cmp	r4, r5
 80093bc:	d101      	bne.n	80093c2 <__sfputs_r+0x12>
 80093be:	2000      	movs	r0, #0
 80093c0:	e007      	b.n	80093d2 <__sfputs_r+0x22>
 80093c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093c6:	463a      	mov	r2, r7
 80093c8:	4630      	mov	r0, r6
 80093ca:	f7ff ffda 	bl	8009382 <__sfputc_r>
 80093ce:	1c43      	adds	r3, r0, #1
 80093d0:	d1f3      	bne.n	80093ba <__sfputs_r+0xa>
 80093d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080093d4 <_vfiprintf_r>:
 80093d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093d8:	460d      	mov	r5, r1
 80093da:	b09d      	sub	sp, #116	@ 0x74
 80093dc:	4614      	mov	r4, r2
 80093de:	4698      	mov	r8, r3
 80093e0:	4606      	mov	r6, r0
 80093e2:	b118      	cbz	r0, 80093ec <_vfiprintf_r+0x18>
 80093e4:	6a03      	ldr	r3, [r0, #32]
 80093e6:	b90b      	cbnz	r3, 80093ec <_vfiprintf_r+0x18>
 80093e8:	f7fc fdf8 	bl	8005fdc <__sinit>
 80093ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80093ee:	07d9      	lsls	r1, r3, #31
 80093f0:	d405      	bmi.n	80093fe <_vfiprintf_r+0x2a>
 80093f2:	89ab      	ldrh	r3, [r5, #12]
 80093f4:	059a      	lsls	r2, r3, #22
 80093f6:	d402      	bmi.n	80093fe <_vfiprintf_r+0x2a>
 80093f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80093fa:	f7fc ff06 	bl	800620a <__retarget_lock_acquire_recursive>
 80093fe:	89ab      	ldrh	r3, [r5, #12]
 8009400:	071b      	lsls	r3, r3, #28
 8009402:	d501      	bpl.n	8009408 <_vfiprintf_r+0x34>
 8009404:	692b      	ldr	r3, [r5, #16]
 8009406:	b99b      	cbnz	r3, 8009430 <_vfiprintf_r+0x5c>
 8009408:	4629      	mov	r1, r5
 800940a:	4630      	mov	r0, r6
 800940c:	f000 f938 	bl	8009680 <__swsetup_r>
 8009410:	b170      	cbz	r0, 8009430 <_vfiprintf_r+0x5c>
 8009412:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009414:	07dc      	lsls	r4, r3, #31
 8009416:	d504      	bpl.n	8009422 <_vfiprintf_r+0x4e>
 8009418:	f04f 30ff 	mov.w	r0, #4294967295
 800941c:	b01d      	add	sp, #116	@ 0x74
 800941e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009422:	89ab      	ldrh	r3, [r5, #12]
 8009424:	0598      	lsls	r0, r3, #22
 8009426:	d4f7      	bmi.n	8009418 <_vfiprintf_r+0x44>
 8009428:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800942a:	f7fc feef 	bl	800620c <__retarget_lock_release_recursive>
 800942e:	e7f3      	b.n	8009418 <_vfiprintf_r+0x44>
 8009430:	2300      	movs	r3, #0
 8009432:	9309      	str	r3, [sp, #36]	@ 0x24
 8009434:	2320      	movs	r3, #32
 8009436:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800943a:	f8cd 800c 	str.w	r8, [sp, #12]
 800943e:	2330      	movs	r3, #48	@ 0x30
 8009440:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80095f0 <_vfiprintf_r+0x21c>
 8009444:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009448:	f04f 0901 	mov.w	r9, #1
 800944c:	4623      	mov	r3, r4
 800944e:	469a      	mov	sl, r3
 8009450:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009454:	b10a      	cbz	r2, 800945a <_vfiprintf_r+0x86>
 8009456:	2a25      	cmp	r2, #37	@ 0x25
 8009458:	d1f9      	bne.n	800944e <_vfiprintf_r+0x7a>
 800945a:	ebba 0b04 	subs.w	fp, sl, r4
 800945e:	d00b      	beq.n	8009478 <_vfiprintf_r+0xa4>
 8009460:	465b      	mov	r3, fp
 8009462:	4622      	mov	r2, r4
 8009464:	4629      	mov	r1, r5
 8009466:	4630      	mov	r0, r6
 8009468:	f7ff ffa2 	bl	80093b0 <__sfputs_r>
 800946c:	3001      	adds	r0, #1
 800946e:	f000 80a7 	beq.w	80095c0 <_vfiprintf_r+0x1ec>
 8009472:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009474:	445a      	add	r2, fp
 8009476:	9209      	str	r2, [sp, #36]	@ 0x24
 8009478:	f89a 3000 	ldrb.w	r3, [sl]
 800947c:	2b00      	cmp	r3, #0
 800947e:	f000 809f 	beq.w	80095c0 <_vfiprintf_r+0x1ec>
 8009482:	2300      	movs	r3, #0
 8009484:	f04f 32ff 	mov.w	r2, #4294967295
 8009488:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800948c:	f10a 0a01 	add.w	sl, sl, #1
 8009490:	9304      	str	r3, [sp, #16]
 8009492:	9307      	str	r3, [sp, #28]
 8009494:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009498:	931a      	str	r3, [sp, #104]	@ 0x68
 800949a:	4654      	mov	r4, sl
 800949c:	2205      	movs	r2, #5
 800949e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094a2:	4853      	ldr	r0, [pc, #332]	@ (80095f0 <_vfiprintf_r+0x21c>)
 80094a4:	f7f6 fe94 	bl	80001d0 <memchr>
 80094a8:	9a04      	ldr	r2, [sp, #16]
 80094aa:	b9d8      	cbnz	r0, 80094e4 <_vfiprintf_r+0x110>
 80094ac:	06d1      	lsls	r1, r2, #27
 80094ae:	bf44      	itt	mi
 80094b0:	2320      	movmi	r3, #32
 80094b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80094b6:	0713      	lsls	r3, r2, #28
 80094b8:	bf44      	itt	mi
 80094ba:	232b      	movmi	r3, #43	@ 0x2b
 80094bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80094c0:	f89a 3000 	ldrb.w	r3, [sl]
 80094c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80094c6:	d015      	beq.n	80094f4 <_vfiprintf_r+0x120>
 80094c8:	9a07      	ldr	r2, [sp, #28]
 80094ca:	4654      	mov	r4, sl
 80094cc:	2000      	movs	r0, #0
 80094ce:	f04f 0c0a 	mov.w	ip, #10
 80094d2:	4621      	mov	r1, r4
 80094d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094d8:	3b30      	subs	r3, #48	@ 0x30
 80094da:	2b09      	cmp	r3, #9
 80094dc:	d94b      	bls.n	8009576 <_vfiprintf_r+0x1a2>
 80094de:	b1b0      	cbz	r0, 800950e <_vfiprintf_r+0x13a>
 80094e0:	9207      	str	r2, [sp, #28]
 80094e2:	e014      	b.n	800950e <_vfiprintf_r+0x13a>
 80094e4:	eba0 0308 	sub.w	r3, r0, r8
 80094e8:	fa09 f303 	lsl.w	r3, r9, r3
 80094ec:	4313      	orrs	r3, r2
 80094ee:	9304      	str	r3, [sp, #16]
 80094f0:	46a2      	mov	sl, r4
 80094f2:	e7d2      	b.n	800949a <_vfiprintf_r+0xc6>
 80094f4:	9b03      	ldr	r3, [sp, #12]
 80094f6:	1d19      	adds	r1, r3, #4
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	9103      	str	r1, [sp, #12]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	bfbb      	ittet	lt
 8009500:	425b      	neglt	r3, r3
 8009502:	f042 0202 	orrlt.w	r2, r2, #2
 8009506:	9307      	strge	r3, [sp, #28]
 8009508:	9307      	strlt	r3, [sp, #28]
 800950a:	bfb8      	it	lt
 800950c:	9204      	strlt	r2, [sp, #16]
 800950e:	7823      	ldrb	r3, [r4, #0]
 8009510:	2b2e      	cmp	r3, #46	@ 0x2e
 8009512:	d10a      	bne.n	800952a <_vfiprintf_r+0x156>
 8009514:	7863      	ldrb	r3, [r4, #1]
 8009516:	2b2a      	cmp	r3, #42	@ 0x2a
 8009518:	d132      	bne.n	8009580 <_vfiprintf_r+0x1ac>
 800951a:	9b03      	ldr	r3, [sp, #12]
 800951c:	1d1a      	adds	r2, r3, #4
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	9203      	str	r2, [sp, #12]
 8009522:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009526:	3402      	adds	r4, #2
 8009528:	9305      	str	r3, [sp, #20]
 800952a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009600 <_vfiprintf_r+0x22c>
 800952e:	7821      	ldrb	r1, [r4, #0]
 8009530:	2203      	movs	r2, #3
 8009532:	4650      	mov	r0, sl
 8009534:	f7f6 fe4c 	bl	80001d0 <memchr>
 8009538:	b138      	cbz	r0, 800954a <_vfiprintf_r+0x176>
 800953a:	9b04      	ldr	r3, [sp, #16]
 800953c:	eba0 000a 	sub.w	r0, r0, sl
 8009540:	2240      	movs	r2, #64	@ 0x40
 8009542:	4082      	lsls	r2, r0
 8009544:	4313      	orrs	r3, r2
 8009546:	3401      	adds	r4, #1
 8009548:	9304      	str	r3, [sp, #16]
 800954a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800954e:	4829      	ldr	r0, [pc, #164]	@ (80095f4 <_vfiprintf_r+0x220>)
 8009550:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009554:	2206      	movs	r2, #6
 8009556:	f7f6 fe3b 	bl	80001d0 <memchr>
 800955a:	2800      	cmp	r0, #0
 800955c:	d03f      	beq.n	80095de <_vfiprintf_r+0x20a>
 800955e:	4b26      	ldr	r3, [pc, #152]	@ (80095f8 <_vfiprintf_r+0x224>)
 8009560:	bb1b      	cbnz	r3, 80095aa <_vfiprintf_r+0x1d6>
 8009562:	9b03      	ldr	r3, [sp, #12]
 8009564:	3307      	adds	r3, #7
 8009566:	f023 0307 	bic.w	r3, r3, #7
 800956a:	3308      	adds	r3, #8
 800956c:	9303      	str	r3, [sp, #12]
 800956e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009570:	443b      	add	r3, r7
 8009572:	9309      	str	r3, [sp, #36]	@ 0x24
 8009574:	e76a      	b.n	800944c <_vfiprintf_r+0x78>
 8009576:	fb0c 3202 	mla	r2, ip, r2, r3
 800957a:	460c      	mov	r4, r1
 800957c:	2001      	movs	r0, #1
 800957e:	e7a8      	b.n	80094d2 <_vfiprintf_r+0xfe>
 8009580:	2300      	movs	r3, #0
 8009582:	3401      	adds	r4, #1
 8009584:	9305      	str	r3, [sp, #20]
 8009586:	4619      	mov	r1, r3
 8009588:	f04f 0c0a 	mov.w	ip, #10
 800958c:	4620      	mov	r0, r4
 800958e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009592:	3a30      	subs	r2, #48	@ 0x30
 8009594:	2a09      	cmp	r2, #9
 8009596:	d903      	bls.n	80095a0 <_vfiprintf_r+0x1cc>
 8009598:	2b00      	cmp	r3, #0
 800959a:	d0c6      	beq.n	800952a <_vfiprintf_r+0x156>
 800959c:	9105      	str	r1, [sp, #20]
 800959e:	e7c4      	b.n	800952a <_vfiprintf_r+0x156>
 80095a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80095a4:	4604      	mov	r4, r0
 80095a6:	2301      	movs	r3, #1
 80095a8:	e7f0      	b.n	800958c <_vfiprintf_r+0x1b8>
 80095aa:	ab03      	add	r3, sp, #12
 80095ac:	9300      	str	r3, [sp, #0]
 80095ae:	462a      	mov	r2, r5
 80095b0:	4b12      	ldr	r3, [pc, #72]	@ (80095fc <_vfiprintf_r+0x228>)
 80095b2:	a904      	add	r1, sp, #16
 80095b4:	4630      	mov	r0, r6
 80095b6:	f7fb feb9 	bl	800532c <_printf_float>
 80095ba:	4607      	mov	r7, r0
 80095bc:	1c78      	adds	r0, r7, #1
 80095be:	d1d6      	bne.n	800956e <_vfiprintf_r+0x19a>
 80095c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80095c2:	07d9      	lsls	r1, r3, #31
 80095c4:	d405      	bmi.n	80095d2 <_vfiprintf_r+0x1fe>
 80095c6:	89ab      	ldrh	r3, [r5, #12]
 80095c8:	059a      	lsls	r2, r3, #22
 80095ca:	d402      	bmi.n	80095d2 <_vfiprintf_r+0x1fe>
 80095cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80095ce:	f7fc fe1d 	bl	800620c <__retarget_lock_release_recursive>
 80095d2:	89ab      	ldrh	r3, [r5, #12]
 80095d4:	065b      	lsls	r3, r3, #25
 80095d6:	f53f af1f 	bmi.w	8009418 <_vfiprintf_r+0x44>
 80095da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80095dc:	e71e      	b.n	800941c <_vfiprintf_r+0x48>
 80095de:	ab03      	add	r3, sp, #12
 80095e0:	9300      	str	r3, [sp, #0]
 80095e2:	462a      	mov	r2, r5
 80095e4:	4b05      	ldr	r3, [pc, #20]	@ (80095fc <_vfiprintf_r+0x228>)
 80095e6:	a904      	add	r1, sp, #16
 80095e8:	4630      	mov	r0, r6
 80095ea:	f7fc f937 	bl	800585c <_printf_i>
 80095ee:	e7e4      	b.n	80095ba <_vfiprintf_r+0x1e6>
 80095f0:	08009f19 	.word	0x08009f19
 80095f4:	08009f23 	.word	0x08009f23
 80095f8:	0800532d 	.word	0x0800532d
 80095fc:	080093b1 	.word	0x080093b1
 8009600:	08009f1f 	.word	0x08009f1f

08009604 <__swbuf_r>:
 8009604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009606:	460e      	mov	r6, r1
 8009608:	4614      	mov	r4, r2
 800960a:	4605      	mov	r5, r0
 800960c:	b118      	cbz	r0, 8009616 <__swbuf_r+0x12>
 800960e:	6a03      	ldr	r3, [r0, #32]
 8009610:	b90b      	cbnz	r3, 8009616 <__swbuf_r+0x12>
 8009612:	f7fc fce3 	bl	8005fdc <__sinit>
 8009616:	69a3      	ldr	r3, [r4, #24]
 8009618:	60a3      	str	r3, [r4, #8]
 800961a:	89a3      	ldrh	r3, [r4, #12]
 800961c:	071a      	lsls	r2, r3, #28
 800961e:	d501      	bpl.n	8009624 <__swbuf_r+0x20>
 8009620:	6923      	ldr	r3, [r4, #16]
 8009622:	b943      	cbnz	r3, 8009636 <__swbuf_r+0x32>
 8009624:	4621      	mov	r1, r4
 8009626:	4628      	mov	r0, r5
 8009628:	f000 f82a 	bl	8009680 <__swsetup_r>
 800962c:	b118      	cbz	r0, 8009636 <__swbuf_r+0x32>
 800962e:	f04f 37ff 	mov.w	r7, #4294967295
 8009632:	4638      	mov	r0, r7
 8009634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009636:	6823      	ldr	r3, [r4, #0]
 8009638:	6922      	ldr	r2, [r4, #16]
 800963a:	1a98      	subs	r0, r3, r2
 800963c:	6963      	ldr	r3, [r4, #20]
 800963e:	b2f6      	uxtb	r6, r6
 8009640:	4283      	cmp	r3, r0
 8009642:	4637      	mov	r7, r6
 8009644:	dc05      	bgt.n	8009652 <__swbuf_r+0x4e>
 8009646:	4621      	mov	r1, r4
 8009648:	4628      	mov	r0, r5
 800964a:	f7ff fa47 	bl	8008adc <_fflush_r>
 800964e:	2800      	cmp	r0, #0
 8009650:	d1ed      	bne.n	800962e <__swbuf_r+0x2a>
 8009652:	68a3      	ldr	r3, [r4, #8]
 8009654:	3b01      	subs	r3, #1
 8009656:	60a3      	str	r3, [r4, #8]
 8009658:	6823      	ldr	r3, [r4, #0]
 800965a:	1c5a      	adds	r2, r3, #1
 800965c:	6022      	str	r2, [r4, #0]
 800965e:	701e      	strb	r6, [r3, #0]
 8009660:	6962      	ldr	r2, [r4, #20]
 8009662:	1c43      	adds	r3, r0, #1
 8009664:	429a      	cmp	r2, r3
 8009666:	d004      	beq.n	8009672 <__swbuf_r+0x6e>
 8009668:	89a3      	ldrh	r3, [r4, #12]
 800966a:	07db      	lsls	r3, r3, #31
 800966c:	d5e1      	bpl.n	8009632 <__swbuf_r+0x2e>
 800966e:	2e0a      	cmp	r6, #10
 8009670:	d1df      	bne.n	8009632 <__swbuf_r+0x2e>
 8009672:	4621      	mov	r1, r4
 8009674:	4628      	mov	r0, r5
 8009676:	f7ff fa31 	bl	8008adc <_fflush_r>
 800967a:	2800      	cmp	r0, #0
 800967c:	d0d9      	beq.n	8009632 <__swbuf_r+0x2e>
 800967e:	e7d6      	b.n	800962e <__swbuf_r+0x2a>

08009680 <__swsetup_r>:
 8009680:	b538      	push	{r3, r4, r5, lr}
 8009682:	4b29      	ldr	r3, [pc, #164]	@ (8009728 <__swsetup_r+0xa8>)
 8009684:	4605      	mov	r5, r0
 8009686:	6818      	ldr	r0, [r3, #0]
 8009688:	460c      	mov	r4, r1
 800968a:	b118      	cbz	r0, 8009694 <__swsetup_r+0x14>
 800968c:	6a03      	ldr	r3, [r0, #32]
 800968e:	b90b      	cbnz	r3, 8009694 <__swsetup_r+0x14>
 8009690:	f7fc fca4 	bl	8005fdc <__sinit>
 8009694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009698:	0719      	lsls	r1, r3, #28
 800969a:	d422      	bmi.n	80096e2 <__swsetup_r+0x62>
 800969c:	06da      	lsls	r2, r3, #27
 800969e:	d407      	bmi.n	80096b0 <__swsetup_r+0x30>
 80096a0:	2209      	movs	r2, #9
 80096a2:	602a      	str	r2, [r5, #0]
 80096a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096a8:	81a3      	strh	r3, [r4, #12]
 80096aa:	f04f 30ff 	mov.w	r0, #4294967295
 80096ae:	e033      	b.n	8009718 <__swsetup_r+0x98>
 80096b0:	0758      	lsls	r0, r3, #29
 80096b2:	d512      	bpl.n	80096da <__swsetup_r+0x5a>
 80096b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80096b6:	b141      	cbz	r1, 80096ca <__swsetup_r+0x4a>
 80096b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80096bc:	4299      	cmp	r1, r3
 80096be:	d002      	beq.n	80096c6 <__swsetup_r+0x46>
 80096c0:	4628      	mov	r0, r5
 80096c2:	f7fd fbf9 	bl	8006eb8 <_free_r>
 80096c6:	2300      	movs	r3, #0
 80096c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80096ca:	89a3      	ldrh	r3, [r4, #12]
 80096cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80096d0:	81a3      	strh	r3, [r4, #12]
 80096d2:	2300      	movs	r3, #0
 80096d4:	6063      	str	r3, [r4, #4]
 80096d6:	6923      	ldr	r3, [r4, #16]
 80096d8:	6023      	str	r3, [r4, #0]
 80096da:	89a3      	ldrh	r3, [r4, #12]
 80096dc:	f043 0308 	orr.w	r3, r3, #8
 80096e0:	81a3      	strh	r3, [r4, #12]
 80096e2:	6923      	ldr	r3, [r4, #16]
 80096e4:	b94b      	cbnz	r3, 80096fa <__swsetup_r+0x7a>
 80096e6:	89a3      	ldrh	r3, [r4, #12]
 80096e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80096ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096f0:	d003      	beq.n	80096fa <__swsetup_r+0x7a>
 80096f2:	4621      	mov	r1, r4
 80096f4:	4628      	mov	r0, r5
 80096f6:	f000 f883 	bl	8009800 <__smakebuf_r>
 80096fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096fe:	f013 0201 	ands.w	r2, r3, #1
 8009702:	d00a      	beq.n	800971a <__swsetup_r+0x9a>
 8009704:	2200      	movs	r2, #0
 8009706:	60a2      	str	r2, [r4, #8]
 8009708:	6962      	ldr	r2, [r4, #20]
 800970a:	4252      	negs	r2, r2
 800970c:	61a2      	str	r2, [r4, #24]
 800970e:	6922      	ldr	r2, [r4, #16]
 8009710:	b942      	cbnz	r2, 8009724 <__swsetup_r+0xa4>
 8009712:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009716:	d1c5      	bne.n	80096a4 <__swsetup_r+0x24>
 8009718:	bd38      	pop	{r3, r4, r5, pc}
 800971a:	0799      	lsls	r1, r3, #30
 800971c:	bf58      	it	pl
 800971e:	6962      	ldrpl	r2, [r4, #20]
 8009720:	60a2      	str	r2, [r4, #8]
 8009722:	e7f4      	b.n	800970e <__swsetup_r+0x8e>
 8009724:	2000      	movs	r0, #0
 8009726:	e7f7      	b.n	8009718 <__swsetup_r+0x98>
 8009728:	20000018 	.word	0x20000018

0800972c <_raise_r>:
 800972c:	291f      	cmp	r1, #31
 800972e:	b538      	push	{r3, r4, r5, lr}
 8009730:	4605      	mov	r5, r0
 8009732:	460c      	mov	r4, r1
 8009734:	d904      	bls.n	8009740 <_raise_r+0x14>
 8009736:	2316      	movs	r3, #22
 8009738:	6003      	str	r3, [r0, #0]
 800973a:	f04f 30ff 	mov.w	r0, #4294967295
 800973e:	bd38      	pop	{r3, r4, r5, pc}
 8009740:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009742:	b112      	cbz	r2, 800974a <_raise_r+0x1e>
 8009744:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009748:	b94b      	cbnz	r3, 800975e <_raise_r+0x32>
 800974a:	4628      	mov	r0, r5
 800974c:	f000 f830 	bl	80097b0 <_getpid_r>
 8009750:	4622      	mov	r2, r4
 8009752:	4601      	mov	r1, r0
 8009754:	4628      	mov	r0, r5
 8009756:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800975a:	f000 b817 	b.w	800978c <_kill_r>
 800975e:	2b01      	cmp	r3, #1
 8009760:	d00a      	beq.n	8009778 <_raise_r+0x4c>
 8009762:	1c59      	adds	r1, r3, #1
 8009764:	d103      	bne.n	800976e <_raise_r+0x42>
 8009766:	2316      	movs	r3, #22
 8009768:	6003      	str	r3, [r0, #0]
 800976a:	2001      	movs	r0, #1
 800976c:	e7e7      	b.n	800973e <_raise_r+0x12>
 800976e:	2100      	movs	r1, #0
 8009770:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009774:	4620      	mov	r0, r4
 8009776:	4798      	blx	r3
 8009778:	2000      	movs	r0, #0
 800977a:	e7e0      	b.n	800973e <_raise_r+0x12>

0800977c <raise>:
 800977c:	4b02      	ldr	r3, [pc, #8]	@ (8009788 <raise+0xc>)
 800977e:	4601      	mov	r1, r0
 8009780:	6818      	ldr	r0, [r3, #0]
 8009782:	f7ff bfd3 	b.w	800972c <_raise_r>
 8009786:	bf00      	nop
 8009788:	20000018 	.word	0x20000018

0800978c <_kill_r>:
 800978c:	b538      	push	{r3, r4, r5, lr}
 800978e:	4d07      	ldr	r5, [pc, #28]	@ (80097ac <_kill_r+0x20>)
 8009790:	2300      	movs	r3, #0
 8009792:	4604      	mov	r4, r0
 8009794:	4608      	mov	r0, r1
 8009796:	4611      	mov	r1, r2
 8009798:	602b      	str	r3, [r5, #0]
 800979a:	f7f8 f85e 	bl	800185a <_kill>
 800979e:	1c43      	adds	r3, r0, #1
 80097a0:	d102      	bne.n	80097a8 <_kill_r+0x1c>
 80097a2:	682b      	ldr	r3, [r5, #0]
 80097a4:	b103      	cbz	r3, 80097a8 <_kill_r+0x1c>
 80097a6:	6023      	str	r3, [r4, #0]
 80097a8:	bd38      	pop	{r3, r4, r5, pc}
 80097aa:	bf00      	nop
 80097ac:	2000043c 	.word	0x2000043c

080097b0 <_getpid_r>:
 80097b0:	f7f8 b84b 	b.w	800184a <_getpid>

080097b4 <__swhatbuf_r>:
 80097b4:	b570      	push	{r4, r5, r6, lr}
 80097b6:	460c      	mov	r4, r1
 80097b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097bc:	2900      	cmp	r1, #0
 80097be:	b096      	sub	sp, #88	@ 0x58
 80097c0:	4615      	mov	r5, r2
 80097c2:	461e      	mov	r6, r3
 80097c4:	da0d      	bge.n	80097e2 <__swhatbuf_r+0x2e>
 80097c6:	89a3      	ldrh	r3, [r4, #12]
 80097c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80097cc:	f04f 0100 	mov.w	r1, #0
 80097d0:	bf14      	ite	ne
 80097d2:	2340      	movne	r3, #64	@ 0x40
 80097d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80097d8:	2000      	movs	r0, #0
 80097da:	6031      	str	r1, [r6, #0]
 80097dc:	602b      	str	r3, [r5, #0]
 80097de:	b016      	add	sp, #88	@ 0x58
 80097e0:	bd70      	pop	{r4, r5, r6, pc}
 80097e2:	466a      	mov	r2, sp
 80097e4:	f000 f848 	bl	8009878 <_fstat_r>
 80097e8:	2800      	cmp	r0, #0
 80097ea:	dbec      	blt.n	80097c6 <__swhatbuf_r+0x12>
 80097ec:	9901      	ldr	r1, [sp, #4]
 80097ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80097f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80097f6:	4259      	negs	r1, r3
 80097f8:	4159      	adcs	r1, r3
 80097fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80097fe:	e7eb      	b.n	80097d8 <__swhatbuf_r+0x24>

08009800 <__smakebuf_r>:
 8009800:	898b      	ldrh	r3, [r1, #12]
 8009802:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009804:	079d      	lsls	r5, r3, #30
 8009806:	4606      	mov	r6, r0
 8009808:	460c      	mov	r4, r1
 800980a:	d507      	bpl.n	800981c <__smakebuf_r+0x1c>
 800980c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009810:	6023      	str	r3, [r4, #0]
 8009812:	6123      	str	r3, [r4, #16]
 8009814:	2301      	movs	r3, #1
 8009816:	6163      	str	r3, [r4, #20]
 8009818:	b003      	add	sp, #12
 800981a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800981c:	ab01      	add	r3, sp, #4
 800981e:	466a      	mov	r2, sp
 8009820:	f7ff ffc8 	bl	80097b4 <__swhatbuf_r>
 8009824:	9f00      	ldr	r7, [sp, #0]
 8009826:	4605      	mov	r5, r0
 8009828:	4639      	mov	r1, r7
 800982a:	4630      	mov	r0, r6
 800982c:	f7fd fbb8 	bl	8006fa0 <_malloc_r>
 8009830:	b948      	cbnz	r0, 8009846 <__smakebuf_r+0x46>
 8009832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009836:	059a      	lsls	r2, r3, #22
 8009838:	d4ee      	bmi.n	8009818 <__smakebuf_r+0x18>
 800983a:	f023 0303 	bic.w	r3, r3, #3
 800983e:	f043 0302 	orr.w	r3, r3, #2
 8009842:	81a3      	strh	r3, [r4, #12]
 8009844:	e7e2      	b.n	800980c <__smakebuf_r+0xc>
 8009846:	89a3      	ldrh	r3, [r4, #12]
 8009848:	6020      	str	r0, [r4, #0]
 800984a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800984e:	81a3      	strh	r3, [r4, #12]
 8009850:	9b01      	ldr	r3, [sp, #4]
 8009852:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009856:	b15b      	cbz	r3, 8009870 <__smakebuf_r+0x70>
 8009858:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800985c:	4630      	mov	r0, r6
 800985e:	f000 f81d 	bl	800989c <_isatty_r>
 8009862:	b128      	cbz	r0, 8009870 <__smakebuf_r+0x70>
 8009864:	89a3      	ldrh	r3, [r4, #12]
 8009866:	f023 0303 	bic.w	r3, r3, #3
 800986a:	f043 0301 	orr.w	r3, r3, #1
 800986e:	81a3      	strh	r3, [r4, #12]
 8009870:	89a3      	ldrh	r3, [r4, #12]
 8009872:	431d      	orrs	r5, r3
 8009874:	81a5      	strh	r5, [r4, #12]
 8009876:	e7cf      	b.n	8009818 <__smakebuf_r+0x18>

08009878 <_fstat_r>:
 8009878:	b538      	push	{r3, r4, r5, lr}
 800987a:	4d07      	ldr	r5, [pc, #28]	@ (8009898 <_fstat_r+0x20>)
 800987c:	2300      	movs	r3, #0
 800987e:	4604      	mov	r4, r0
 8009880:	4608      	mov	r0, r1
 8009882:	4611      	mov	r1, r2
 8009884:	602b      	str	r3, [r5, #0]
 8009886:	f7f8 f848 	bl	800191a <_fstat>
 800988a:	1c43      	adds	r3, r0, #1
 800988c:	d102      	bne.n	8009894 <_fstat_r+0x1c>
 800988e:	682b      	ldr	r3, [r5, #0]
 8009890:	b103      	cbz	r3, 8009894 <_fstat_r+0x1c>
 8009892:	6023      	str	r3, [r4, #0]
 8009894:	bd38      	pop	{r3, r4, r5, pc}
 8009896:	bf00      	nop
 8009898:	2000043c 	.word	0x2000043c

0800989c <_isatty_r>:
 800989c:	b538      	push	{r3, r4, r5, lr}
 800989e:	4d06      	ldr	r5, [pc, #24]	@ (80098b8 <_isatty_r+0x1c>)
 80098a0:	2300      	movs	r3, #0
 80098a2:	4604      	mov	r4, r0
 80098a4:	4608      	mov	r0, r1
 80098a6:	602b      	str	r3, [r5, #0]
 80098a8:	f7f8 f847 	bl	800193a <_isatty>
 80098ac:	1c43      	adds	r3, r0, #1
 80098ae:	d102      	bne.n	80098b6 <_isatty_r+0x1a>
 80098b0:	682b      	ldr	r3, [r5, #0]
 80098b2:	b103      	cbz	r3, 80098b6 <_isatty_r+0x1a>
 80098b4:	6023      	str	r3, [r4, #0]
 80098b6:	bd38      	pop	{r3, r4, r5, pc}
 80098b8:	2000043c 	.word	0x2000043c

080098bc <sqrt>:
 80098bc:	b538      	push	{r3, r4, r5, lr}
 80098be:	ed2d 8b02 	vpush	{d8}
 80098c2:	ec55 4b10 	vmov	r4, r5, d0
 80098c6:	f000 f825 	bl	8009914 <__ieee754_sqrt>
 80098ca:	4622      	mov	r2, r4
 80098cc:	462b      	mov	r3, r5
 80098ce:	4620      	mov	r0, r4
 80098d0:	4629      	mov	r1, r5
 80098d2:	eeb0 8a40 	vmov.f32	s16, s0
 80098d6:	eef0 8a60 	vmov.f32	s17, s1
 80098da:	f7f7 f927 	bl	8000b2c <__aeabi_dcmpun>
 80098de:	b990      	cbnz	r0, 8009906 <sqrt+0x4a>
 80098e0:	2200      	movs	r2, #0
 80098e2:	2300      	movs	r3, #0
 80098e4:	4620      	mov	r0, r4
 80098e6:	4629      	mov	r1, r5
 80098e8:	f7f7 f8f8 	bl	8000adc <__aeabi_dcmplt>
 80098ec:	b158      	cbz	r0, 8009906 <sqrt+0x4a>
 80098ee:	f7fc fc61 	bl	80061b4 <__errno>
 80098f2:	2321      	movs	r3, #33	@ 0x21
 80098f4:	6003      	str	r3, [r0, #0]
 80098f6:	2200      	movs	r2, #0
 80098f8:	2300      	movs	r3, #0
 80098fa:	4610      	mov	r0, r2
 80098fc:	4619      	mov	r1, r3
 80098fe:	f7f6 ffa5 	bl	800084c <__aeabi_ddiv>
 8009902:	ec41 0b18 	vmov	d8, r0, r1
 8009906:	eeb0 0a48 	vmov.f32	s0, s16
 800990a:	eef0 0a68 	vmov.f32	s1, s17
 800990e:	ecbd 8b02 	vpop	{d8}
 8009912:	bd38      	pop	{r3, r4, r5, pc}

08009914 <__ieee754_sqrt>:
 8009914:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009918:	4a68      	ldr	r2, [pc, #416]	@ (8009abc <__ieee754_sqrt+0x1a8>)
 800991a:	ec55 4b10 	vmov	r4, r5, d0
 800991e:	43aa      	bics	r2, r5
 8009920:	462b      	mov	r3, r5
 8009922:	4621      	mov	r1, r4
 8009924:	d110      	bne.n	8009948 <__ieee754_sqrt+0x34>
 8009926:	4622      	mov	r2, r4
 8009928:	4620      	mov	r0, r4
 800992a:	4629      	mov	r1, r5
 800992c:	f7f6 fe64 	bl	80005f8 <__aeabi_dmul>
 8009930:	4602      	mov	r2, r0
 8009932:	460b      	mov	r3, r1
 8009934:	4620      	mov	r0, r4
 8009936:	4629      	mov	r1, r5
 8009938:	f7f6 fca8 	bl	800028c <__adddf3>
 800993c:	4604      	mov	r4, r0
 800993e:	460d      	mov	r5, r1
 8009940:	ec45 4b10 	vmov	d0, r4, r5
 8009944:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009948:	2d00      	cmp	r5, #0
 800994a:	dc0e      	bgt.n	800996a <__ieee754_sqrt+0x56>
 800994c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8009950:	4322      	orrs	r2, r4
 8009952:	d0f5      	beq.n	8009940 <__ieee754_sqrt+0x2c>
 8009954:	b19d      	cbz	r5, 800997e <__ieee754_sqrt+0x6a>
 8009956:	4622      	mov	r2, r4
 8009958:	4620      	mov	r0, r4
 800995a:	4629      	mov	r1, r5
 800995c:	f7f6 fc94 	bl	8000288 <__aeabi_dsub>
 8009960:	4602      	mov	r2, r0
 8009962:	460b      	mov	r3, r1
 8009964:	f7f6 ff72 	bl	800084c <__aeabi_ddiv>
 8009968:	e7e8      	b.n	800993c <__ieee754_sqrt+0x28>
 800996a:	152a      	asrs	r2, r5, #20
 800996c:	d115      	bne.n	800999a <__ieee754_sqrt+0x86>
 800996e:	2000      	movs	r0, #0
 8009970:	e009      	b.n	8009986 <__ieee754_sqrt+0x72>
 8009972:	0acb      	lsrs	r3, r1, #11
 8009974:	3a15      	subs	r2, #21
 8009976:	0549      	lsls	r1, r1, #21
 8009978:	2b00      	cmp	r3, #0
 800997a:	d0fa      	beq.n	8009972 <__ieee754_sqrt+0x5e>
 800997c:	e7f7      	b.n	800996e <__ieee754_sqrt+0x5a>
 800997e:	462a      	mov	r2, r5
 8009980:	e7fa      	b.n	8009978 <__ieee754_sqrt+0x64>
 8009982:	005b      	lsls	r3, r3, #1
 8009984:	3001      	adds	r0, #1
 8009986:	02dc      	lsls	r4, r3, #11
 8009988:	d5fb      	bpl.n	8009982 <__ieee754_sqrt+0x6e>
 800998a:	1e44      	subs	r4, r0, #1
 800998c:	1b12      	subs	r2, r2, r4
 800998e:	f1c0 0420 	rsb	r4, r0, #32
 8009992:	fa21 f404 	lsr.w	r4, r1, r4
 8009996:	4323      	orrs	r3, r4
 8009998:	4081      	lsls	r1, r0
 800999a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800999e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80099a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80099a6:	07d2      	lsls	r2, r2, #31
 80099a8:	bf5c      	itt	pl
 80099aa:	005b      	lslpl	r3, r3, #1
 80099ac:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80099b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80099b4:	bf58      	it	pl
 80099b6:	0049      	lslpl	r1, r1, #1
 80099b8:	2600      	movs	r6, #0
 80099ba:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80099be:	106d      	asrs	r5, r5, #1
 80099c0:	0049      	lsls	r1, r1, #1
 80099c2:	2016      	movs	r0, #22
 80099c4:	4632      	mov	r2, r6
 80099c6:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80099ca:	1917      	adds	r7, r2, r4
 80099cc:	429f      	cmp	r7, r3
 80099ce:	bfde      	ittt	le
 80099d0:	193a      	addle	r2, r7, r4
 80099d2:	1bdb      	suble	r3, r3, r7
 80099d4:	1936      	addle	r6, r6, r4
 80099d6:	0fcf      	lsrs	r7, r1, #31
 80099d8:	3801      	subs	r0, #1
 80099da:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80099de:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80099e2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80099e6:	d1f0      	bne.n	80099ca <__ieee754_sqrt+0xb6>
 80099e8:	4604      	mov	r4, r0
 80099ea:	2720      	movs	r7, #32
 80099ec:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80099f0:	429a      	cmp	r2, r3
 80099f2:	eb00 0e0c 	add.w	lr, r0, ip
 80099f6:	db02      	blt.n	80099fe <__ieee754_sqrt+0xea>
 80099f8:	d113      	bne.n	8009a22 <__ieee754_sqrt+0x10e>
 80099fa:	458e      	cmp	lr, r1
 80099fc:	d811      	bhi.n	8009a22 <__ieee754_sqrt+0x10e>
 80099fe:	f1be 0f00 	cmp.w	lr, #0
 8009a02:	eb0e 000c 	add.w	r0, lr, ip
 8009a06:	da42      	bge.n	8009a8e <__ieee754_sqrt+0x17a>
 8009a08:	2800      	cmp	r0, #0
 8009a0a:	db40      	blt.n	8009a8e <__ieee754_sqrt+0x17a>
 8009a0c:	f102 0801 	add.w	r8, r2, #1
 8009a10:	1a9b      	subs	r3, r3, r2
 8009a12:	458e      	cmp	lr, r1
 8009a14:	bf88      	it	hi
 8009a16:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009a1a:	eba1 010e 	sub.w	r1, r1, lr
 8009a1e:	4464      	add	r4, ip
 8009a20:	4642      	mov	r2, r8
 8009a22:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8009a26:	3f01      	subs	r7, #1
 8009a28:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8009a2c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009a30:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8009a34:	d1dc      	bne.n	80099f0 <__ieee754_sqrt+0xdc>
 8009a36:	4319      	orrs	r1, r3
 8009a38:	d01b      	beq.n	8009a72 <__ieee754_sqrt+0x15e>
 8009a3a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8009ac0 <__ieee754_sqrt+0x1ac>
 8009a3e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8009ac4 <__ieee754_sqrt+0x1b0>
 8009a42:	e9da 0100 	ldrd	r0, r1, [sl]
 8009a46:	e9db 2300 	ldrd	r2, r3, [fp]
 8009a4a:	f7f6 fc1d 	bl	8000288 <__aeabi_dsub>
 8009a4e:	e9da 8900 	ldrd	r8, r9, [sl]
 8009a52:	4602      	mov	r2, r0
 8009a54:	460b      	mov	r3, r1
 8009a56:	4640      	mov	r0, r8
 8009a58:	4649      	mov	r1, r9
 8009a5a:	f7f7 f849 	bl	8000af0 <__aeabi_dcmple>
 8009a5e:	b140      	cbz	r0, 8009a72 <__ieee754_sqrt+0x15e>
 8009a60:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009a64:	e9da 0100 	ldrd	r0, r1, [sl]
 8009a68:	e9db 2300 	ldrd	r2, r3, [fp]
 8009a6c:	d111      	bne.n	8009a92 <__ieee754_sqrt+0x17e>
 8009a6e:	3601      	adds	r6, #1
 8009a70:	463c      	mov	r4, r7
 8009a72:	1072      	asrs	r2, r6, #1
 8009a74:	0863      	lsrs	r3, r4, #1
 8009a76:	07f1      	lsls	r1, r6, #31
 8009a78:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8009a7c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8009a80:	bf48      	it	mi
 8009a82:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8009a86:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	e756      	b.n	800993c <__ieee754_sqrt+0x28>
 8009a8e:	4690      	mov	r8, r2
 8009a90:	e7be      	b.n	8009a10 <__ieee754_sqrt+0xfc>
 8009a92:	f7f6 fbfb 	bl	800028c <__adddf3>
 8009a96:	e9da 8900 	ldrd	r8, r9, [sl]
 8009a9a:	4602      	mov	r2, r0
 8009a9c:	460b      	mov	r3, r1
 8009a9e:	4640      	mov	r0, r8
 8009aa0:	4649      	mov	r1, r9
 8009aa2:	f7f7 f81b 	bl	8000adc <__aeabi_dcmplt>
 8009aa6:	b120      	cbz	r0, 8009ab2 <__ieee754_sqrt+0x19e>
 8009aa8:	1ca0      	adds	r0, r4, #2
 8009aaa:	bf08      	it	eq
 8009aac:	3601      	addeq	r6, #1
 8009aae:	3402      	adds	r4, #2
 8009ab0:	e7df      	b.n	8009a72 <__ieee754_sqrt+0x15e>
 8009ab2:	1c63      	adds	r3, r4, #1
 8009ab4:	f023 0401 	bic.w	r4, r3, #1
 8009ab8:	e7db      	b.n	8009a72 <__ieee754_sqrt+0x15e>
 8009aba:	bf00      	nop
 8009abc:	7ff00000 	.word	0x7ff00000
 8009ac0:	200001e0 	.word	0x200001e0
 8009ac4:	200001d8 	.word	0x200001d8

08009ac8 <_init>:
 8009ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aca:	bf00      	nop
 8009acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ace:	bc08      	pop	{r3}
 8009ad0:	469e      	mov	lr, r3
 8009ad2:	4770      	bx	lr

08009ad4 <_fini>:
 8009ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ad6:	bf00      	nop
 8009ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ada:	bc08      	pop	{r3}
 8009adc:	469e      	mov	lr, r3
 8009ade:	4770      	bx	lr
