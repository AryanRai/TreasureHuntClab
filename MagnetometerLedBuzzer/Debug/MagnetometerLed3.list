
MagnetometerLed3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a98  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000508  08009c28  08009c28  0000ac28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a130  0800a130  0000c1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a130  0800a130  0000b130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a138  0800a138  0000c1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a138  0800a138  0000b138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a13c  0800a13c  0000b13c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800a140  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1e8  2**0
                  CONTENTS
 10 .bss          00000264  200001e8  200001e8  0000c1e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000044c  2000044c  0000c1e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ddd6  00000000  00000000  0000c218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021b3  00000000  00000000  00019fee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e20  00000000  00000000  0001c1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000af7  00000000  00000000  0001cfc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e60f  00000000  00000000  0001dabf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011fc3  00000000  00000000  0003c0ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ba2b4  00000000  00000000  0004e091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00108345  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000050ec  00000000  00000000  00108388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  0010d474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009c10 	.word	0x08009c10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08009c10 	.word	0x08009c10

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <QMC5883L_Init>:

/**
  * @brief Initialize QMC5883L magnetometer
  * @retval HAL status
  */
HAL_StatusTypeDef QMC5883L_Init(void) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af04      	add	r7, sp, #16
    uint8_t data;
    HAL_StatusTypeDef ret;

    // Reset the device
    data = 0x80; // Soft reset
 8000cfa:	2380      	movs	r3, #128	@ 0x80
 8000cfc:	71bb      	strb	r3, [r7, #6]
    ret = HAL_I2C_Mem_Write(&hi2c1, QMC5883L_ADDR, 0x0A, 1, &data, 1, HAL_MAX_DELAY);
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000d02:	9302      	str	r3, [sp, #8]
 8000d04:	2301      	movs	r3, #1
 8000d06:	9301      	str	r3, [sp, #4]
 8000d08:	1dbb      	adds	r3, r7, #6
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	220a      	movs	r2, #10
 8000d10:	211a      	movs	r1, #26
 8000d12:	4814      	ldr	r0, [pc, #80]	@ (8000d64 <QMC5883L_Init+0x70>)
 8000d14:	f001 fac6 	bl	80022a4 <HAL_I2C_Mem_Write>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK) return ret;
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <QMC5883L_Init+0x32>
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	e019      	b.n	8000d5a <QMC5883L_Init+0x66>
    HAL_Delay(10);
 8000d26:	200a      	movs	r0, #10
 8000d28:	f000 ff9c 	bl	8001c64 <HAL_Delay>

    // Configure: Continuous mode, 200 Hz, 8G range, 512 oversampling
    data = 0x1D; // 0b00011101: MODE=01 (continuous), ODR=11 (200 Hz), RNG=10 (8G), OSR=11 (512)
 8000d2c:	231d      	movs	r3, #29
 8000d2e:	71bb      	strb	r3, [r7, #6]
    ret = HAL_I2C_Mem_Write(&hi2c1, QMC5883L_ADDR, QMC5883L_REG_CTRL1, 1, &data, 1, HAL_MAX_DELAY);
 8000d30:	f04f 33ff 	mov.w	r3, #4294967295
 8000d34:	9302      	str	r3, [sp, #8]
 8000d36:	2301      	movs	r3, #1
 8000d38:	9301      	str	r3, [sp, #4]
 8000d3a:	1dbb      	adds	r3, r7, #6
 8000d3c:	9300      	str	r3, [sp, #0]
 8000d3e:	2301      	movs	r3, #1
 8000d40:	2209      	movs	r2, #9
 8000d42:	211a      	movs	r1, #26
 8000d44:	4807      	ldr	r0, [pc, #28]	@ (8000d64 <QMC5883L_Init+0x70>)
 8000d46:	f001 faad 	bl	80022a4 <HAL_I2C_Mem_Write>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK) return ret;
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <QMC5883L_Init+0x64>
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	e000      	b.n	8000d5a <QMC5883L_Init+0x66>

    return HAL_OK;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000204 	.word	0x20000204

08000d68 <QMC5883L_ReadXYZ>:
/**
  * @brief Read X, Y, Z values from QMC5883L
  * @param x, y, z: Pointers to store magnetometer data
  * @retval HAL status
  */
HAL_StatusTypeDef QMC5883L_ReadXYZ(int16_t *x, int16_t *y, int16_t *z) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08c      	sub	sp, #48	@ 0x30
 8000d6c:	af04      	add	r7, sp, #16
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
    uint8_t status;
    HAL_StatusTypeDef ret;

    // Check if data is ready (DRDY bit)
    do {
        ret = HAL_I2C_Mem_Read(&hi2c1, QMC5883L_ADDR, QMC5883L_REG_STATUS, 1, &status, 1, HAL_MAX_DELAY);
 8000d74:	f04f 33ff 	mov.w	r3, #4294967295
 8000d78:	9302      	str	r3, [sp, #8]
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	9301      	str	r3, [sp, #4]
 8000d7e:	f107 0317 	add.w	r3, r7, #23
 8000d82:	9300      	str	r3, [sp, #0]
 8000d84:	2301      	movs	r3, #1
 8000d86:	2206      	movs	r2, #6
 8000d88:	211a      	movs	r1, #26
 8000d8a:	4822      	ldr	r0, [pc, #136]	@ (8000e14 <QMC5883L_ReadXYZ+0xac>)
 8000d8c:	f001 fb9e 	bl	80024cc <HAL_I2C_Mem_Read>
 8000d90:	4603      	mov	r3, r0
 8000d92:	77fb      	strb	r3, [r7, #31]
        if (ret != HAL_OK) return ret;
 8000d94:	7ffb      	ldrb	r3, [r7, #31]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <QMC5883L_ReadXYZ+0x36>
 8000d9a:	7ffb      	ldrb	r3, [r7, #31]
 8000d9c:	e035      	b.n	8000e0a <QMC5883L_ReadXYZ+0xa2>
    } while (!(status & 0x01)); // Wait for DRDY = 1
 8000d9e:	7dfb      	ldrb	r3, [r7, #23]
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d0e5      	beq.n	8000d74 <QMC5883L_ReadXYZ+0xc>

    // Read 6 bytes (X_LSB, X_MSB, Y_LSB, Y_MSB, Z_LSB, Z_MSB)
    ret = HAL_I2C_Mem_Read(&hi2c1, QMC5883L_ADDR, QMC5883L_REG_X_LSB, 1, data, 6, HAL_MAX_DELAY);
 8000da8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dac:	9302      	str	r3, [sp, #8]
 8000dae:	2306      	movs	r3, #6
 8000db0:	9301      	str	r3, [sp, #4]
 8000db2:	f107 0318 	add.w	r3, r7, #24
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	2301      	movs	r3, #1
 8000dba:	2200      	movs	r2, #0
 8000dbc:	211a      	movs	r1, #26
 8000dbe:	4815      	ldr	r0, [pc, #84]	@ (8000e14 <QMC5883L_ReadXYZ+0xac>)
 8000dc0:	f001 fb84 	bl	80024cc <HAL_I2C_Mem_Read>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	77fb      	strb	r3, [r7, #31]
    if (ret != HAL_OK) return ret;
 8000dc8:	7ffb      	ldrb	r3, [r7, #31]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <QMC5883L_ReadXYZ+0x6a>
 8000dce:	7ffb      	ldrb	r3, [r7, #31]
 8000dd0:	e01b      	b.n	8000e0a <QMC5883L_ReadXYZ+0xa2>

    // Combine bytes (2's complement)
    *x = (int16_t)(data[1] << 8 | data[0]);
 8000dd2:	7e7b      	ldrb	r3, [r7, #25]
 8000dd4:	021b      	lsls	r3, r3, #8
 8000dd6:	b21a      	sxth	r2, r3
 8000dd8:	7e3b      	ldrb	r3, [r7, #24]
 8000dda:	b21b      	sxth	r3, r3
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	b21a      	sxth	r2, r3
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)(data[3] << 8 | data[2]);
 8000de4:	7efb      	ldrb	r3, [r7, #27]
 8000de6:	021b      	lsls	r3, r3, #8
 8000de8:	b21a      	sxth	r2, r3
 8000dea:	7ebb      	ldrb	r3, [r7, #26]
 8000dec:	b21b      	sxth	r3, r3
 8000dee:	4313      	orrs	r3, r2
 8000df0:	b21a      	sxth	r2, r3
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)(data[5] << 8 | data[4]);
 8000df6:	7f7b      	ldrb	r3, [r7, #29]
 8000df8:	021b      	lsls	r3, r3, #8
 8000dfa:	b21a      	sxth	r2, r3
 8000dfc:	7f3b      	ldrb	r3, [r7, #28]
 8000dfe:	b21b      	sxth	r3, r3
 8000e00:	4313      	orrs	r3, r2
 8000e02:	b21a      	sxth	r2, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	801a      	strh	r2, [r3, #0]

    return HAL_OK;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3720      	adds	r7, #32
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000204 	.word	0x20000204

08000e18 <USART2_Transmit_Packet>:
/**
  * @brief Transmit magnetometer data over USART2 using custom protocol
  * @param x, y, z: Magnetometer readings
  * @retval None
  */
void USART2_Transmit_Packet(int16_t x, int16_t y, int16_t z) {
 8000e18:	b480      	push	{r7}
 8000e1a:	b089      	sub	sp, #36	@ 0x24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	80fb      	strh	r3, [r7, #6]
 8000e22:	460b      	mov	r3, r1
 8000e24:	80bb      	strh	r3, [r7, #4]
 8000e26:	4613      	mov	r3, r2
 8000e28:	807b      	strh	r3, [r7, #2]
    uint8_t packet[11];
    uint8_t checksum = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	77fb      	strb	r3, [r7, #31]

    // Start Marker
    packet[0] = PROTOCOL_START_MARKER;
 8000e2e:	237e      	movs	r3, #126	@ 0x7e
 8000e30:	723b      	strb	r3, [r7, #8]

    // Length (length + sensor type + sensor ID + payload + checksum)
    packet[1] = 0x0A; // 10 bytes
 8000e32:	230a      	movs	r3, #10
 8000e34:	727b      	strb	r3, [r7, #9]
    checksum += packet[1];
 8000e36:	7a7a      	ldrb	r2, [r7, #9]
 8000e38:	7ffb      	ldrb	r3, [r7, #31]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	77fb      	strb	r3, [r7, #31]

    // Sensor Type
    packet[2] = PROTOCOL_SENSOR_TYPE_MAG;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	72bb      	strb	r3, [r7, #10]
    checksum += packet[2];
 8000e42:	7aba      	ldrb	r2, [r7, #10]
 8000e44:	7ffb      	ldrb	r3, [r7, #31]
 8000e46:	4413      	add	r3, r2
 8000e48:	77fb      	strb	r3, [r7, #31]

    // Sensor ID
    packet[3] = PROTOCOL_SENSOR_ID_QMC;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	72fb      	strb	r3, [r7, #11]
    checksum += packet[3];
 8000e4e:	7afa      	ldrb	r2, [r7, #11]
 8000e50:	7ffb      	ldrb	r3, [r7, #31]
 8000e52:	4413      	add	r3, r2
 8000e54:	77fb      	strb	r3, [r7, #31]

    // Payload: X, Y, Z (little-endian)
    packet[4] = (uint8_t)(x & 0xFF); // X LSB
 8000e56:	88fb      	ldrh	r3, [r7, #6]
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	733b      	strb	r3, [r7, #12]
    packet[5] = (uint8_t)(x >> 8);   // X MSB
 8000e5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e60:	121b      	asrs	r3, r3, #8
 8000e62:	b21b      	sxth	r3, r3
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	737b      	strb	r3, [r7, #13]
    packet[6] = (uint8_t)(y & 0xFF); // Y LSB
 8000e68:	88bb      	ldrh	r3, [r7, #4]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	73bb      	strb	r3, [r7, #14]
    packet[7] = (uint8_t)(y >> 8);   // Y MSB
 8000e6e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e72:	121b      	asrs	r3, r3, #8
 8000e74:	b21b      	sxth	r3, r3
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	73fb      	strb	r3, [r7, #15]
    packet[8] = (uint8_t)(z & 0xFF); // Z LSB
 8000e7a:	887b      	ldrh	r3, [r7, #2]
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	743b      	strb	r3, [r7, #16]
    packet[9] = (uint8_t)(z >> 8);   // Z MSB
 8000e80:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e84:	121b      	asrs	r3, r3, #8
 8000e86:	b21b      	sxth	r3, r3
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	747b      	strb	r3, [r7, #17]
    for (int i = 4; i <= 9; i++) {
 8000e8c:	2304      	movs	r3, #4
 8000e8e:	61bb      	str	r3, [r7, #24]
 8000e90:	e00a      	b.n	8000ea8 <USART2_Transmit_Packet+0x90>
        checksum += packet[i];
 8000e92:	f107 0208 	add.w	r2, r7, #8
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	4413      	add	r3, r2
 8000e9a:	781a      	ldrb	r2, [r3, #0]
 8000e9c:	7ffb      	ldrb	r3, [r7, #31]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	77fb      	strb	r3, [r7, #31]
    for (int i = 4; i <= 9; i++) {
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	61bb      	str	r3, [r7, #24]
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	2b09      	cmp	r3, #9
 8000eac:	ddf1      	ble.n	8000e92 <USART2_Transmit_Packet+0x7a>
    }

    // Checksum
    packet[10] = checksum;
 8000eae:	7ffb      	ldrb	r3, [r7, #31]
 8000eb0:	74bb      	strb	r3, [r7, #18]

    // Transmit packet
    for (int i = 0; i < 11; i++) {
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
 8000eb6:	e010      	b.n	8000eda <USART2_Transmit_Packet+0xc2>
        while (!(USART2->ISR & USART_ISR_TXE_Msk));
 8000eb8:	bf00      	nop
 8000eba:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef0 <USART2_Transmit_Packet+0xd8>)
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d0f9      	beq.n	8000eba <USART2_Transmit_Packet+0xa2>
        USART2->TDR = packet[i];
 8000ec6:	f107 0208 	add.w	r2, r7, #8
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	4413      	add	r3, r2
 8000ece:	781a      	ldrb	r2, [r3, #0]
 8000ed0:	4b07      	ldr	r3, [pc, #28]	@ (8000ef0 <USART2_Transmit_Packet+0xd8>)
 8000ed2:	851a      	strh	r2, [r3, #40]	@ 0x28
    for (int i = 0; i < 11; i++) {
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	2b0a      	cmp	r3, #10
 8000ede:	ddeb      	ble.n	8000eb8 <USART2_Transmit_Packet+0xa0>
    }
}
 8000ee0:	bf00      	nop
 8000ee2:	bf00      	nop
 8000ee4:	3724      	adds	r7, #36	@ 0x24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	40004400 	.word	0x40004400

08000ef4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ef8:	b0ab      	sub	sp, #172	@ 0xac
 8000efa:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
  int16_t x, y, z;
  float magnitude;
  uint32_t dutyCycle = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  const uint32_t maxDuty = 7999; // Matches TIM1 and TIM2 Period
 8000f02:	f641 733f 	movw	r3, #7999	@ 0x1f3f
 8000f06:	67fb      	str	r3, [r7, #124]	@ 0x7c
  char buffer[100];
  HAL_StatusTypeDef ret;
  float prob_small_magnet = 0.0f;
 8000f08:	f04f 0300 	mov.w	r3, #0
 8000f0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  float prob_big_magnet = 0.0f;
 8000f10:	f04f 0300 	mov.w	r3, #0
 8000f14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f18:	f000 fe3e 	bl	8001b98 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f1c:	f000 f99c 	bl	8001258 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f20:	f000 fb30 	bl	8001584 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f24:	f000 f9ec 	bl	8001300 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000f28:	f000 fa2a 	bl	8001380 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f2c:	f000 fab8 	bl	80014a0 <MX_TIM2_Init>
  MX_USART2_Init();
 8000f30:	f000 fb10 	bl	8001554 <MX_USART2_Init>
  /* USER CODE BEGIN 2 */

  // Initialize USART1 using custom serial code
  enableUSART1();
 8000f34:	f000 fbae 	bl	8001694 <enableUSART1>

  // Initialize QMC5883L
  ret = QMC5883L_Init();
 8000f38:	f7ff fedc 	bl	8000cf4 <QMC5883L_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
  if (ret != HAL_OK) {
 8000f42:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d00c      	beq.n	8000f64 <main+0x70>
      sprintf(buffer, "QMC5883L Init Failed: %d\r\n", ret);
 8000f4a:	f897 207b 	ldrb.w	r2, [r7, #123]	@ 0x7b
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	49b0      	ldr	r1, [pc, #704]	@ (8001214 <main+0x320>)
 8000f52:	4618      	mov	r0, r3
 8000f54:	f005 f91c 	bl	8006190 <siprintf>
      send_string(buffer);
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 fbd4 	bl	8001708 <send_string>
      while (1);
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <main+0x6c>
  }

  // Start PWM on TIM1 Channel 3 (LED) and TIM2 Channel 3 (Buzzer)
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000f64:	2108      	movs	r1, #8
 8000f66:	48ac      	ldr	r0, [pc, #688]	@ (8001218 <main+0x324>)
 8000f68:	f003 fb3a 	bl	80045e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000f6c:	2108      	movs	r1, #8
 8000f6e:	48ab      	ldr	r0, [pc, #684]	@ (800121c <main+0x328>)
 8000f70:	f003 fb36 	bl	80045e0 <HAL_TIM_PWM_Start>

  // Send startup message over USART1
  sprintf(buffer, "QMC5883L Initialized, LED and Buzzer PWM Started\r\n");
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	49aa      	ldr	r1, [pc, #680]	@ (8001220 <main+0x32c>)
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f005 f909 	bl	8006190 <siprintf>
  send_string(buffer);
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	4618      	mov	r0, r3
 8000f82:	f000 fbc1 	bl	8001708 <send_string>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // Increment timers
    uartTimer += 10;
 8000f86:	4ba7      	ldr	r3, [pc, #668]	@ (8001224 <main+0x330>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	330a      	adds	r3, #10
 8000f8c:	4aa5      	ldr	r2, [pc, #660]	@ (8001224 <main+0x330>)
 8000f8e:	6013      	str	r3, [r2, #0]
    magTimer += 10;
 8000f90:	4ba5      	ldr	r3, [pc, #660]	@ (8001228 <main+0x334>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	330a      	adds	r3, #10
 8000f96:	4aa4      	ldr	r2, [pc, #656]	@ (8001228 <main+0x334>)
 8000f98:	6013      	str	r3, [r2, #0]

    // Read magnetometer every 200 ms
    if (magTimer >= 200) {
 8000f9a:	4ba3      	ldr	r3, [pc, #652]	@ (8001228 <main+0x334>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2bc7      	cmp	r3, #199	@ 0xc7
 8000fa0:	f240 80f7 	bls.w	8001192 <main+0x29e>
        ret = QMC5883L_ReadXYZ(&x, &y, &z);
 8000fa4:	f107 026a 	add.w	r2, r7, #106	@ 0x6a
 8000fa8:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8000fac:	f107 036e 	add.w	r3, r7, #110	@ 0x6e
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff fed9 	bl	8000d68 <QMC5883L_ReadXYZ>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
        if (ret == HAL_OK) {
 8000fbc:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	f040 80d8 	bne.w	8001176 <main+0x282>
            // Calculate magnetic field magnitude
            magnitude = sqrt((float)(x * x + y * y + z * z));
 8000fc6:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8000fca:	f9b7 206e 	ldrsh.w	r2, [r7, #110]	@ 0x6e
 8000fce:	fb03 f202 	mul.w	r2, r3, r2
 8000fd2:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 8000fd6:	f9b7 106c 	ldrsh.w	r1, [r7, #108]	@ 0x6c
 8000fda:	fb01 f303 	mul.w	r3, r1, r3
 8000fde:	441a      	add	r2, r3
 8000fe0:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	@ 0x6a
 8000fe4:	f9b7 106a 	ldrsh.w	r1, [r7, #106]	@ 0x6a
 8000fe8:	fb01 f303 	mul.w	r3, r1, r3
 8000fec:	4413      	add	r3, r2
 8000fee:	ee07 3a90 	vmov	s15, r3
 8000ff2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ff6:	ee17 0a90 	vmov	r0, s15
 8000ffa:	f7ff faa5 	bl	8000548 <__aeabi_f2d>
 8000ffe:	4602      	mov	r2, r0
 8001000:	460b      	mov	r3, r1
 8001002:	ec43 2b10 	vmov	d0, r2, r3
 8001006:	f008 fcfd 	bl	8009a04 <sqrt>
 800100a:	ec53 2b10 	vmov	r2, r3, d0
 800100e:	4610      	mov	r0, r2
 8001010:	4619      	mov	r1, r3
 8001012:	f7ff fde9 	bl	8000be8 <__aeabi_d2f>
 8001016:	4603      	mov	r3, r0
 8001018:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

            // Map magnitude to duty cycle (inverse relationship)
            if (magnitude <= MAG_MIN_THRESHOLD) {
 800101c:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8001020:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 800122c <main+0x338>
 8001024:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102c:	d803      	bhi.n	8001036 <main+0x142>
                dutyCycle = maxDuty; // Max brightness/loudness
 800102e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001030:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001034:	e023      	b.n	800107e <main+0x18a>
            } else if (magnitude >= MAG_MAX_THRESHOLD) {
 8001036:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800103a:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8001230 <main+0x33c>
 800103e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001046:	db03      	blt.n	8001050 <main+0x15c>
                dutyCycle = 0; // Min brightness/loudness
 8001048:	2300      	movs	r3, #0
 800104a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800104e:	e016      	b.n	800107e <main+0x18a>
            } else {
                // Linear interpolation: dutyCycle = maxDuty * (10000 - mag) / (10000 - 3000)
                dutyCycle = maxDuty * (MAG_MAX_THRESHOLD - magnitude) / (MAG_MAX_THRESHOLD - MAG_MIN_THRESHOLD);
 8001050:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800105a:	eddf 6a75 	vldr	s13, [pc, #468]	@ 8001230 <main+0x33c>
 800105e:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8001062:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001066:	ee27 7a27 	vmul.f32	s14, s14, s15
 800106a:	eddf 6a72 	vldr	s13, [pc, #456]	@ 8001234 <main+0x340>
 800106e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001072:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001076:	ee17 3a90 	vmov	r3, s15
 800107a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            }

            // Set PWM duty cycle for both LED and buzzer
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, dutyCycle); // LED
 800107e:	4b66      	ldr	r3, [pc, #408]	@ (8001218 <main+0x324>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001086:	63da      	str	r2, [r3, #60]	@ 0x3c
            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, dutyCycle); // Buzzer
 8001088:	4b64      	ldr	r3, [pc, #400]	@ (800121c <main+0x328>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001090:	63da      	str	r2, [r3, #60]	@ 0x3c

            // Magnet type prediction
            prob_small_magnet = 0.0f; // Reset before calculation
 8001092:	f04f 0300 	mov.w	r3, #0
 8001096:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            prob_big_magnet = 0.0f;   // Reset before calculation
 800109a:	f04f 0300 	mov.w	r3, #0
 800109e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

            if (magnitude >= MAG_SMALL_LOW_F && magnitude <= MAG_BIG_HIGH_F) { // Overall prediction range [3000, 20000]
 80010a2:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80010a6:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8001238 <main+0x344>
 80010aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b2:	db56      	blt.n	8001162 <main+0x26e>
 80010b4:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80010b8:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 800123c <main+0x348>
 80010bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c4:	d84d      	bhi.n	8001162 <main+0x26e>
                if (magnitude <= MAG_SMALL_HIGH_F) { // Range [3000, 8500]
 80010c6:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80010ca:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8001240 <main+0x34c>
 80010ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d6:	d820      	bhi.n	800111a <main+0x226>
                    // norm_pos is 0 at MAG_SMALL_LOW_F, 1 at MAG_SMALL_HIGH_F
                    float norm_pos = (magnitude - MAG_SMALL_LOW_F) / (MAG_SMALL_HIGH_F - MAG_SMALL_LOW_F);
 80010d8:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80010dc:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8001238 <main+0x344>
 80010e0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80010e4:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8001244 <main+0x350>
 80010e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ec:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
                    prob_small_magnet = 1.0f - 0.5f * norm_pos;
 80010f0:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80010f4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80010f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001100:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001104:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
                    prob_big_magnet = 0.5f * norm_pos;
 8001108:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800110c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001110:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001114:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
 8001118:	e023      	b.n	8001162 <main+0x26e>
                } else { // Range (8500, 20000]
                    // norm_pos is 0 at MAG_BIG_LOW_F, 1 at MAG_BIG_HIGH_F
                    float norm_pos = (magnitude - MAG_BIG_LOW_F) / (MAG_BIG_HIGH_F - MAG_BIG_LOW_F);
 800111a:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800111e:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8001240 <main+0x34c>
 8001122:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001126:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8001248 <main+0x354>
 800112a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800112e:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
                    prob_small_magnet = 0.5f * (1.0f - norm_pos);
 8001132:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001136:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 800113a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800113e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001142:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001146:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
                    prob_big_magnet = 0.5f * norm_pos + 0.5f;
 800114a:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 800114e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001152:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001156:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800115a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800115e:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
                }
            }
            // If magnitude is outside [MAG_SMALL_LOW_F, MAG_BIG_HIGH_F], probabilities remain 0.0f

            // Transmit magnetometer data over USART2
            USART2_Transmit_Packet(x, y, z);
 8001162:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8001166:	f9b7 106c 	ldrsh.w	r1, [r7, #108]	@ 0x6c
 800116a:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	@ 0x6a
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff fe52 	bl	8000e18 <USART2_Transmit_Packet>
 8001174:	e00a      	b.n	800118c <main+0x298>
        } else {
            // Report error over USART1
            sprintf(buffer, "Magnetometer Read Error: %d\r\n", ret);
 8001176:	f897 207b 	ldrb.w	r2, [r7, #123]	@ 0x7b
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	4933      	ldr	r1, [pc, #204]	@ (800124c <main+0x358>)
 800117e:	4618      	mov	r0, r3
 8001180:	f005 f806 	bl	8006190 <siprintf>
            send_string(buffer);
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	4618      	mov	r0, r3
 8001188:	f000 fabe 	bl	8001708 <send_string>
        }
        magTimer = 0; // Reset timer
 800118c:	4b26      	ldr	r3, [pc, #152]	@ (8001228 <main+0x334>)
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
    }

    // Send debug message over USART1 every 1 second
    if (uartTimer >= UART_TX_PERIOD_MS) {
 8001192:	4b24      	ldr	r3, [pc, #144]	@ (8001224 <main+0x330>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800119a:	d337      	bcc.n	800120c <main+0x318>
        sprintf(buffer, "DEBUG: Mag: %.2f, Duty: %lu%%, Pred: %.0f%% M1, %.0f%% M2\r\n", magnitude, (dutyCycle * 100) / maxDuty, prob_small_magnet * 100.0f, prob_big_magnet * 100.0f);
 800119c:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80011a0:	f7ff f9d2 	bl	8000548 <__aeabi_f2d>
 80011a4:	4680      	mov	r8, r0
 80011a6:	4689      	mov	r9, r1
 80011a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80011ac:	2264      	movs	r2, #100	@ 0x64
 80011ae:	fb03 f202 	mul.w	r2, r3, r2
 80011b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80011b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80011b8:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80011bc:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001250 <main+0x35c>
 80011c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011c4:	ee17 0a90 	vmov	r0, s15
 80011c8:	f7ff f9be 	bl	8000548 <__aeabi_f2d>
 80011cc:	4604      	mov	r4, r0
 80011ce:	460d      	mov	r5, r1
 80011d0:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80011d4:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001250 <main+0x35c>
 80011d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011dc:	ee17 0a90 	vmov	r0, s15
 80011e0:	f7ff f9b2 	bl	8000548 <__aeabi_f2d>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	1d38      	adds	r0, r7, #4
 80011ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80011ee:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80011f2:	9600      	str	r6, [sp, #0]
 80011f4:	4642      	mov	r2, r8
 80011f6:	464b      	mov	r3, r9
 80011f8:	4916      	ldr	r1, [pc, #88]	@ (8001254 <main+0x360>)
 80011fa:	f004 ffc9 	bl	8006190 <siprintf>
        send_string(buffer);
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	4618      	mov	r0, r3
 8001202:	f000 fa81 	bl	8001708 <send_string>
        uartTimer = 0; // Reset timer
 8001206:	4b07      	ldr	r3, [pc, #28]	@ (8001224 <main+0x330>)
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
    }

    // Small delay for loop stability
    HAL_Delay(10);
 800120c:	200a      	movs	r0, #10
 800120e:	f000 fd29 	bl	8001c64 <HAL_Delay>
    uartTimer += 10;
 8001212:	e6b8      	b.n	8000f86 <main+0x92>
 8001214:	08009c28 	.word	0x08009c28
 8001218:	20000258 	.word	0x20000258
 800121c:	200002a4 	.word	0x200002a4
 8001220:	08009c44 	.word	0x08009c44
 8001224:	200002f0 	.word	0x200002f0
 8001228:	200002f4 	.word	0x200002f4
 800122c:	453b8000 	.word	0x453b8000
 8001230:	461c4000 	.word	0x461c4000
 8001234:	45dac000 	.word	0x45dac000
 8001238:	44fa0000 	.word	0x44fa0000
 800123c:	469c4000 	.word	0x469c4000
 8001240:	45bb8000 	.word	0x45bb8000
 8001244:	457a0000 	.word	0x457a0000
 8001248:	465ac000 	.word	0x465ac000
 800124c:	08009c78 	.word	0x08009c78
 8001250:	42c80000 	.word	0x42c80000
 8001254:	08009c98 	.word	0x08009c98

08001258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b09e      	sub	sp, #120	@ 0x78
 800125c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001262:	2228      	movs	r2, #40	@ 0x28
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f004 fff5 	bl	8006256 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800126c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800127c:	463b      	mov	r3, r7
 800127e:	223c      	movs	r2, #60	@ 0x3c
 8001280:	2100      	movs	r1, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f004 ffe7 	bl	8006256 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001288:	2302      	movs	r3, #2
 800128a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800128c:	2301      	movs	r3, #1
 800128e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001290:	2310      	movs	r3, #16
 8001292:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001294:	2300      	movs	r3, #0
 8001296:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001298:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800129c:	4618      	mov	r0, r3
 800129e:	f001 fd89 	bl	8002db4 <HAL_RCC_OscConfig>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <SystemClock_Config+0x54>
  {
    Error_Handler();
 80012a8:	f000 f9ee 	bl	8001688 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ac:	230f      	movs	r3, #15
 80012ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012b0:	2300      	movs	r3, #0
 80012b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012c0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80012c4:	2100      	movs	r1, #0
 80012c6:	4618      	mov	r0, r3
 80012c8:	f002 fdb2 	bl	8003e30 <HAL_RCC_ClockConfig>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80012d2:	f000 f9d9 	bl	8001688 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1;
 80012d6:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 80012da:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80012dc:	2300      	movs	r3, #0
 80012de:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80012e0:	2300      	movs	r3, #0
 80012e2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012e4:	463b      	mov	r3, r7
 80012e6:	4618      	mov	r0, r3
 80012e8:	f002 ff72 	bl	80041d0 <HAL_RCCEx_PeriphCLKConfig>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80012f2:	f000 f9c9 	bl	8001688 <Error_Handler>
  }
}
 80012f6:	bf00      	nop
 80012f8:	3778      	adds	r7, #120	@ 0x78
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001304:	4b1b      	ldr	r3, [pc, #108]	@ (8001374 <MX_I2C1_Init+0x74>)
 8001306:	4a1c      	ldr	r2, [pc, #112]	@ (8001378 <MX_I2C1_Init+0x78>)
 8001308:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B; // 100 kHz for 8 MHz HSI
 800130a:	4b1a      	ldr	r3, [pc, #104]	@ (8001374 <MX_I2C1_Init+0x74>)
 800130c:	4a1b      	ldr	r2, [pc, #108]	@ (800137c <MX_I2C1_Init+0x7c>)
 800130e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001310:	4b18      	ldr	r3, [pc, #96]	@ (8001374 <MX_I2C1_Init+0x74>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001316:	4b17      	ldr	r3, [pc, #92]	@ (8001374 <MX_I2C1_Init+0x74>)
 8001318:	2201      	movs	r2, #1
 800131a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800131c:	4b15      	ldr	r3, [pc, #84]	@ (8001374 <MX_I2C1_Init+0x74>)
 800131e:	2200      	movs	r2, #0
 8001320:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001322:	4b14      	ldr	r3, [pc, #80]	@ (8001374 <MX_I2C1_Init+0x74>)
 8001324:	2200      	movs	r2, #0
 8001326:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001328:	4b12      	ldr	r3, [pc, #72]	@ (8001374 <MX_I2C1_Init+0x74>)
 800132a:	2200      	movs	r2, #0
 800132c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800132e:	4b11      	ldr	r3, [pc, #68]	@ (8001374 <MX_I2C1_Init+0x74>)
 8001330:	2200      	movs	r2, #0
 8001332:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001334:	4b0f      	ldr	r3, [pc, #60]	@ (8001374 <MX_I2C1_Init+0x74>)
 8001336:	2200      	movs	r2, #0
 8001338:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800133a:	480e      	ldr	r0, [pc, #56]	@ (8001374 <MX_I2C1_Init+0x74>)
 800133c:	f000 ff16 	bl	800216c <HAL_I2C_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001346:	f000 f99f 	bl	8001688 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800134a:	2100      	movs	r1, #0
 800134c:	4809      	ldr	r0, [pc, #36]	@ (8001374 <MX_I2C1_Init+0x74>)
 800134e:	f001 fc99 	bl	8002c84 <HAL_I2CEx_ConfigAnalogFilter>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001358:	f000 f996 	bl	8001688 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800135c:	2100      	movs	r1, #0
 800135e:	4805      	ldr	r0, [pc, #20]	@ (8001374 <MX_I2C1_Init+0x74>)
 8001360:	f001 fcdb 	bl	8002d1a <HAL_I2CEx_ConfigDigitalFilter>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800136a:	f000 f98d 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000204 	.word	0x20000204
 8001378:	40005400 	.word	0x40005400
 800137c:	00201d2b 	.word	0x00201d2b

08001380 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b096      	sub	sp, #88	@ 0x58
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_Init 0 */
  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001386:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001392:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
 80013a0:	611a      	str	r2, [r3, #16]
 80013a2:	615a      	str	r2, [r3, #20]
 80013a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	222c      	movs	r2, #44	@ 0x2c
 80013aa:	2100      	movs	r1, #0
 80013ac:	4618      	mov	r0, r3
 80013ae:	f004 ff52 	bl	8006256 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013b2:	4b39      	ldr	r3, [pc, #228]	@ (8001498 <MX_TIM1_Init+0x118>)
 80013b4:	4a39      	ldr	r2, [pc, #228]	@ (800149c <MX_TIM1_Init+0x11c>)
 80013b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0; // 8 MHz timer clock
 80013b8:	4b37      	ldr	r3, [pc, #220]	@ (8001498 <MX_TIM1_Init+0x118>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013be:	4b36      	ldr	r3, [pc, #216]	@ (8001498 <MX_TIM1_Init+0x118>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7999; // PWM frequency = 8 MHz / (7999 + 1) = 1 kHz
 80013c4:	4b34      	ldr	r3, [pc, #208]	@ (8001498 <MX_TIM1_Init+0x118>)
 80013c6:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80013ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013cc:	4b32      	ldr	r3, [pc, #200]	@ (8001498 <MX_TIM1_Init+0x118>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013d2:	4b31      	ldr	r3, [pc, #196]	@ (8001498 <MX_TIM1_Init+0x118>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE; // Enable preload
 80013d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001498 <MX_TIM1_Init+0x118>)
 80013da:	2280      	movs	r2, #128	@ 0x80
 80013dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013de:	482e      	ldr	r0, [pc, #184]	@ (8001498 <MX_TIM1_Init+0x118>)
 80013e0:	f003 f8a6 	bl	8004530 <HAL_TIM_PWM_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80013ea:	f000 f94d 	bl	8001688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ee:	2300      	movs	r3, #0
 80013f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f6:	2300      	movs	r3, #0
 80013f8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013fa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80013fe:	4619      	mov	r1, r3
 8001400:	4825      	ldr	r0, [pc, #148]	@ (8001498 <MX_TIM1_Init+0x118>)
 8001402:	f003 fe99 	bl	8005138 <HAL_TIMEx_MasterConfigSynchronization>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800140c:	f000 f93c 	bl	8001688 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001410:	2360      	movs	r3, #96	@ 0x60
 8001412:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0; // Initial duty cycle (0%)
 8001414:	2300      	movs	r3, #0
 8001416:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001418:	2300      	movs	r3, #0
 800141a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800141c:	2300      	movs	r3, #0
 800141e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001420:	2300      	movs	r3, #0
 8001422:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001424:	2300      	movs	r3, #0
 8001426:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001428:	2300      	movs	r3, #0
 800142a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800142c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001430:	2208      	movs	r2, #8
 8001432:	4619      	mov	r1, r3
 8001434:	4818      	ldr	r0, [pc, #96]	@ (8001498 <MX_TIM1_Init+0x118>)
 8001436:	f003 f9d3 	bl	80047e0 <HAL_TIM_PWM_ConfigChannel>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001440:	f000 f922 	bl	8001688 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001444:	2300      	movs	r3, #0
 8001446:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001448:	2300      	movs	r3, #0
 800144a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800144c:	2300      	movs	r3, #0
 800144e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001458:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800145c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001462:	2300      	movs	r3, #0
 8001464:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001466:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800146a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001470:	2300      	movs	r3, #0
 8001472:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	4619      	mov	r1, r3
 8001478:	4807      	ldr	r0, [pc, #28]	@ (8001498 <MX_TIM1_Init+0x118>)
 800147a:	f003 fedd 	bl	8005238 <HAL_TIMEx_ConfigBreakDeadTime>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001484:	f000 f900 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001488:	4803      	ldr	r0, [pc, #12]	@ (8001498 <MX_TIM1_Init+0x118>)
 800148a:	f000 f9f7 	bl	800187c <HAL_TIM_MspPostInit>
}
 800148e:	bf00      	nop
 8001490:	3758      	adds	r7, #88	@ 0x58
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000258 	.word	0x20000258
 800149c:	40012c00 	.word	0x40012c00

080014a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	@ 0x28
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a6:	f107 031c 	add.w	r3, r7, #28
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014b2:	463b      	mov	r3, r7
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
 80014c0:	615a      	str	r2, [r3, #20]
 80014c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014c4:	4b22      	ldr	r3, [pc, #136]	@ (8001550 <MX_TIM2_Init+0xb0>)
 80014c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0; // 8 MHz timer clock
 80014cc:	4b20      	ldr	r3, [pc, #128]	@ (8001550 <MX_TIM2_Init+0xb0>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001550 <MX_TIM2_Init+0xb0>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7999; // PWM frequency = 8 MHz / (7999 + 1) = 1 kHz
 80014d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001550 <MX_TIM2_Init+0xb0>)
 80014da:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80014de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001550 <MX_TIM2_Init+0xb0>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE; // Enable preload
 80014e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001550 <MX_TIM2_Init+0xb0>)
 80014e8:	2280      	movs	r2, #128	@ 0x80
 80014ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014ec:	4818      	ldr	r0, [pc, #96]	@ (8001550 <MX_TIM2_Init+0xb0>)
 80014ee:	f003 f81f 	bl	8004530 <HAL_TIM_PWM_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80014f8:	f000 f8c6 	bl	8001688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001500:	2300      	movs	r3, #0
 8001502:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001504:	f107 031c 	add.w	r3, r7, #28
 8001508:	4619      	mov	r1, r3
 800150a:	4811      	ldr	r0, [pc, #68]	@ (8001550 <MX_TIM2_Init+0xb0>)
 800150c:	f003 fe14 	bl	8005138 <HAL_TIMEx_MasterConfigSynchronization>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001516:	f000 f8b7 	bl	8001688 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800151a:	2360      	movs	r3, #96	@ 0x60
 800151c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0; // Initial duty cycle (0%)
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001522:	2300      	movs	r3, #0
 8001524:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800152a:	463b      	mov	r3, r7
 800152c:	2208      	movs	r2, #8
 800152e:	4619      	mov	r1, r3
 8001530:	4807      	ldr	r0, [pc, #28]	@ (8001550 <MX_TIM2_Init+0xb0>)
 8001532:	f003 f955 	bl	80047e0 <HAL_TIM_PWM_ConfigChannel>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800153c:	f000 f8a4 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001540:	4803      	ldr	r0, [pc, #12]	@ (8001550 <MX_TIM2_Init+0xb0>)
 8001542:	f000 f99b 	bl	800187c <HAL_TIM_MspPostInit>
}
 8001546:	bf00      	nop
 8001548:	3728      	adds	r7, #40	@ 0x28
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200002a4 	.word	0x200002a4

08001554 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  // Enable USART2 clock
  RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8001558:	4b08      	ldr	r3, [pc, #32]	@ (800157c <MX_USART2_Init+0x28>)
 800155a:	69db      	ldr	r3, [r3, #28]
 800155c:	4a07      	ldr	r2, [pc, #28]	@ (800157c <MX_USART2_Init+0x28>)
 800155e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001562:	61d3      	str	r3, [r2, #28]

  // Configure USART2: 115200 baud, 8N1, TX/RX
  USART2->BRR = 0x46; // 8 MHz / 115200 = 69.4, round to 70 (0x46)
 8001564:	4b06      	ldr	r3, [pc, #24]	@ (8001580 <MX_USART2_Init+0x2c>)
 8001566:	2246      	movs	r2, #70	@ 0x46
 8001568:	60da      	str	r2, [r3, #12]
  USART2->CR1 = USART_CR1_RE | USART_CR1_TE | USART_CR1_UE;
 800156a:	4b05      	ldr	r3, [pc, #20]	@ (8001580 <MX_USART2_Init+0x2c>)
 800156c:	220d      	movs	r2, #13
 800156e:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	40021000 	.word	0x40021000
 8001580:	40004400 	.word	0x40004400

08001584 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158a:	f107 030c 	add.w	r3, r7, #12
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
 8001598:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800159a:	4b39      	ldr	r3, [pc, #228]	@ (8001680 <MX_GPIO_Init+0xfc>)
 800159c:	695b      	ldr	r3, [r3, #20]
 800159e:	4a38      	ldr	r2, [pc, #224]	@ (8001680 <MX_GPIO_Init+0xfc>)
 80015a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80015a4:	6153      	str	r3, [r2, #20]
 80015a6:	4b36      	ldr	r3, [pc, #216]	@ (8001680 <MX_GPIO_Init+0xfc>)
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	4b33      	ldr	r3, [pc, #204]	@ (8001680 <MX_GPIO_Init+0xfc>)
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	4a32      	ldr	r2, [pc, #200]	@ (8001680 <MX_GPIO_Init+0xfc>)
 80015b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015bc:	6153      	str	r3, [r2, #20]
 80015be:	4b30      	ldr	r3, [pc, #192]	@ (8001680 <MX_GPIO_Init+0xfc>)
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]

  /* Configure PA10 for TIM1_CH3 (LED) */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	2302      	movs	r3, #2
 80015d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d8:	2300      	movs	r3, #0
 80015da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF6_TIM1; // TIM1_CH3 for PA10
 80015dc:	2306      	movs	r3, #6
 80015de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e0:	f107 030c 	add.w	r3, r7, #12
 80015e4:	4619      	mov	r1, r3
 80015e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ea:	f000 fc45 	bl	8001e78 <HAL_GPIO_Init>

  /* Configure PA9 for TIM2_CH3 (Buzzer) */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2302      	movs	r3, #2
 80015f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fc:	2300      	movs	r3, #0
 80015fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_TIM2; // TIM2_CH3 for PA9
 8001600:	230a      	movs	r3, #10
 8001602:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001604:	f107 030c 	add.w	r3, r7, #12
 8001608:	4619      	mov	r1, r3
 800160a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800160e:	f000 fc33 	bl	8001e78 <HAL_GPIO_Init>

  /* Configure PA15 (SCL) and PA14 (SDA) for I2C1 */
  GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_15;
 8001612:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001616:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD; // Open-drain for I2C
 8001618:	2312      	movs	r3, #18
 800161a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;     // External pull-ups recommended
 800161c:	2301      	movs	r3, #1
 800161e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001620:	2303      	movs	r3, #3
 8001622:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1; // I2C1 SCL/SDA for PA15/PA14
 8001624:	2304      	movs	r3, #4
 8001626:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001628:	f107 030c 	add.w	r3, r7, #12
 800162c:	4619      	mov	r1, r3
 800162e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001632:	f000 fc21 	bl	8001e78 <HAL_GPIO_Init>

  /* Configure PC4 (TX) and PC5 (RX) for USART1 */
  GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 8001636:	2330      	movs	r3, #48	@ 0x30
 8001638:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163a:	2302      	movs	r3, #2
 800163c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001642:	2303      	movs	r3, #3
 8001644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1; // USART1 TX/RX for PC4/PC5
 8001646:	2307      	movs	r3, #7
 8001648:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800164a:	f107 030c 	add.w	r3, r7, #12
 800164e:	4619      	mov	r1, r3
 8001650:	480c      	ldr	r0, [pc, #48]	@ (8001684 <MX_GPIO_Init+0x100>)
 8001652:	f000 fc11 	bl	8001e78 <HAL_GPIO_Init>

  /* Configure PA2 (TX) and PA3 (RX) for USART2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8001656:	230c      	movs	r3, #12
 8001658:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165a:	2302      	movs	r3, #2
 800165c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001662:	2303      	movs	r3, #3
 8001664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2; // USART2 TX/RX for PA2/PA3
 8001666:	2307      	movs	r3, #7
 8001668:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166a:	f107 030c 	add.w	r3, r7, #12
 800166e:	4619      	mov	r1, r3
 8001670:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001674:	f000 fc00 	bl	8001e78 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001678:	bf00      	nop
 800167a:	3720      	adds	r7, #32
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40021000 	.word	0x40021000
 8001684:	48000800 	.word	0x48000800

08001688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800168c:	b672      	cpsid	i
}
 800168e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001690:	bf00      	nop
 8001692:	e7fd      	b.n	8001690 <Error_Handler+0x8>

08001694 <enableUSART1>:
    memset(string, 0, BUFFER);
    i = 0;
}

void enableUSART1()
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
    // Enable GPIO C and USART1's clocks
    RCC->AHBENR |= RCC_AHBENR_GPIOCEN_Msk;
 8001698:	4b18      	ldr	r3, [pc, #96]	@ (80016fc <enableUSART1+0x68>)
 800169a:	695b      	ldr	r3, [r3, #20]
 800169c:	4a17      	ldr	r2, [pc, #92]	@ (80016fc <enableUSART1+0x68>)
 800169e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80016a2:	6153      	str	r3, [r2, #20]
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN_Msk;
 80016a4:	4b15      	ldr	r3, [pc, #84]	@ (80016fc <enableUSART1+0x68>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	4a14      	ldr	r2, [pc, #80]	@ (80016fc <enableUSART1+0x68>)
 80016aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016ae:	6193      	str	r3, [r2, #24]

    // Set GPIO C to use UART as alternate function
    GPIOC->MODER = ALTFUNCTION;
 80016b0:	4b13      	ldr	r3, [pc, #76]	@ (8001700 <enableUSART1+0x6c>)
 80016b2:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 80016b6:	601a      	str	r2, [r3, #0]
    GPIOC->AFR[0] = RXTX;
 80016b8:	4b11      	ldr	r3, [pc, #68]	@ (8001700 <enableUSART1+0x6c>)
 80016ba:	f44f 02ee 	mov.w	r2, #7798784	@ 0x770000
 80016be:	621a      	str	r2, [r3, #32]
    GPIOC->OSPEEDR = HIGHSPEED;
 80016c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001700 <enableUSART1+0x6c>)
 80016c2:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 80016c6:	609a      	str	r2, [r3, #8]

    // Set the baud rate and ready USART 1 for both receive and transmit
    USART1->BRR = BAUDRATE;                   // Baud rate = 115200
 80016c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001704 <enableUSART1+0x70>)
 80016ca:	2246      	movs	r2, #70	@ 0x46
 80016cc:	60da      	str	r2, [r3, #12]
    USART1->CR1 |= USART_CR1_RE_Msk;
 80016ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001704 <enableUSART1+0x70>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a0c      	ldr	r2, [pc, #48]	@ (8001704 <enableUSART1+0x70>)
 80016d4:	f043 0304 	orr.w	r3, r3, #4
 80016d8:	6013      	str	r3, [r2, #0]
    USART1->CR1 |= USART_CR1_TE_Msk;
 80016da:	4b0a      	ldr	r3, [pc, #40]	@ (8001704 <enableUSART1+0x70>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a09      	ldr	r2, [pc, #36]	@ (8001704 <enableUSART1+0x70>)
 80016e0:	f043 0308 	orr.w	r3, r3, #8
 80016e4:	6013      	str	r3, [r2, #0]
    USART1->CR1 |= USART_CR1_UE_Msk;
 80016e6:	4b07      	ldr	r3, [pc, #28]	@ (8001704 <enableUSART1+0x70>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a06      	ldr	r2, [pc, #24]	@ (8001704 <enableUSART1+0x70>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6013      	str	r3, [r2, #0]
}
 80016f2:	bf00      	nop
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	40021000 	.word	0x40021000
 8001700:	48000800 	.word	0x48000800
 8001704:	40013800 	.word	0x40013800

08001708 <send_string>:

        }
    }
}

void send_string(const char *msg) {
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
    while (*msg) {
 8001710:	e00c      	b.n	800172c <send_string+0x24>
        while (!(USART1->ISR & USART_ISR_TXE_Msk));
 8001712:	bf00      	nop
 8001714:	4b0b      	ldr	r3, [pc, #44]	@ (8001744 <send_string+0x3c>)
 8001716:	69db      	ldr	r3, [r3, #28]
 8001718:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0f9      	beq.n	8001714 <send_string+0xc>
        USART1->TDR = *msg++;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	1c5a      	adds	r2, r3, #1
 8001724:	607a      	str	r2, [r7, #4]
 8001726:	781a      	ldrb	r2, [r3, #0]
 8001728:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <send_string+0x3c>)
 800172a:	851a      	strh	r2, [r3, #40]	@ 0x28
    while (*msg) {
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1ee      	bne.n	8001712 <send_string+0xa>
    }
}
 8001734:	bf00      	nop
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	40013800 	.word	0x40013800

08001748 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174e:	4b0f      	ldr	r3, [pc, #60]	@ (800178c <HAL_MspInit+0x44>)
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	4a0e      	ldr	r2, [pc, #56]	@ (800178c <HAL_MspInit+0x44>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6193      	str	r3, [r2, #24]
 800175a:	4b0c      	ldr	r3, [pc, #48]	@ (800178c <HAL_MspInit+0x44>)
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001766:	4b09      	ldr	r3, [pc, #36]	@ (800178c <HAL_MspInit+0x44>)
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	4a08      	ldr	r2, [pc, #32]	@ (800178c <HAL_MspInit+0x44>)
 800176c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001770:	61d3      	str	r3, [r2, #28]
 8001772:	4b06      	ldr	r3, [pc, #24]	@ (800178c <HAL_MspInit+0x44>)
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800177a:	603b      	str	r3, [r7, #0]
 800177c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	40021000 	.word	0x40021000

08001790 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08a      	sub	sp, #40	@ 0x28
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a18      	ldr	r2, [pc, #96]	@ (8001810 <HAL_I2C_MspInit+0x80>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d129      	bne.n	8001806 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b2:	4b18      	ldr	r3, [pc, #96]	@ (8001814 <HAL_I2C_MspInit+0x84>)
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	4a17      	ldr	r2, [pc, #92]	@ (8001814 <HAL_I2C_MspInit+0x84>)
 80017b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017bc:	6153      	str	r3, [r2, #20]
 80017be:	4b15      	ldr	r3, [pc, #84]	@ (8001814 <HAL_I2C_MspInit+0x84>)
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA14     ------> I2C1_SDA
    PA15     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80017ca:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80017ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017d0:	2312      	movs	r3, #18
 80017d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017d8:	2303      	movs	r3, #3
 80017da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017dc:	2304      	movs	r3, #4
 80017de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	4619      	mov	r1, r3
 80017e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017ea:	f000 fb45 	bl	8001e78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017ee:	4b09      	ldr	r3, [pc, #36]	@ (8001814 <HAL_I2C_MspInit+0x84>)
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	4a08      	ldr	r2, [pc, #32]	@ (8001814 <HAL_I2C_MspInit+0x84>)
 80017f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017f8:	61d3      	str	r3, [r2, #28]
 80017fa:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <HAL_I2C_MspInit+0x84>)
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001806:	bf00      	nop
 8001808:	3728      	adds	r7, #40	@ 0x28
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40005400 	.word	0x40005400
 8001814:	40021000 	.word	0x40021000

08001818 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a13      	ldr	r2, [pc, #76]	@ (8001874 <HAL_TIM_PWM_MspInit+0x5c>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d10c      	bne.n	8001844 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800182a:	4b13      	ldr	r3, [pc, #76]	@ (8001878 <HAL_TIM_PWM_MspInit+0x60>)
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	4a12      	ldr	r2, [pc, #72]	@ (8001878 <HAL_TIM_PWM_MspInit+0x60>)
 8001830:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001834:	6193      	str	r3, [r2, #24]
 8001836:	4b10      	ldr	r3, [pc, #64]	@ (8001878 <HAL_TIM_PWM_MspInit+0x60>)
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001842:	e010      	b.n	8001866 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM2)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800184c:	d10b      	bne.n	8001866 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800184e:	4b0a      	ldr	r3, [pc, #40]	@ (8001878 <HAL_TIM_PWM_MspInit+0x60>)
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	4a09      	ldr	r2, [pc, #36]	@ (8001878 <HAL_TIM_PWM_MspInit+0x60>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	61d3      	str	r3, [r2, #28]
 800185a:	4b07      	ldr	r3, [pc, #28]	@ (8001878 <HAL_TIM_PWM_MspInit+0x60>)
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	68bb      	ldr	r3, [r7, #8]
}
 8001866:	bf00      	nop
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	40012c00 	.word	0x40012c00
 8001878:	40021000 	.word	0x40021000

0800187c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b08a      	sub	sp, #40	@ 0x28
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a24      	ldr	r2, [pc, #144]	@ (800192c <HAL_TIM_MspPostInit+0xb0>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d11e      	bne.n	80018dc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189e:	4b24      	ldr	r3, [pc, #144]	@ (8001930 <HAL_TIM_MspPostInit+0xb4>)
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	4a23      	ldr	r2, [pc, #140]	@ (8001930 <HAL_TIM_MspPostInit+0xb4>)
 80018a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018a8:	6153      	str	r3, [r2, #20]
 80018aa:	4b21      	ldr	r3, [pc, #132]	@ (8001930 <HAL_TIM_MspPostInit+0xb4>)
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018bc:	2302      	movs	r3, #2
 80018be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c4:	2300      	movs	r3, #0
 80018c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80018c8:	2306      	movs	r3, #6
 80018ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018cc:	f107 0314 	add.w	r3, r7, #20
 80018d0:	4619      	mov	r1, r3
 80018d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018d6:	f000 facf 	bl	8001e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80018da:	e022      	b.n	8001922 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM2)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018e4:	d11d      	bne.n	8001922 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e6:	4b12      	ldr	r3, [pc, #72]	@ (8001930 <HAL_TIM_MspPostInit+0xb4>)
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	4a11      	ldr	r2, [pc, #68]	@ (8001930 <HAL_TIM_MspPostInit+0xb4>)
 80018ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018f0:	6153      	str	r3, [r2, #20]
 80018f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001930 <HAL_TIM_MspPostInit+0xb4>)
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001904:	2302      	movs	r3, #2
 8001906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190c:	2300      	movs	r3, #0
 800190e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 8001910:	230a      	movs	r3, #10
 8001912:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	4619      	mov	r1, r3
 800191a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800191e:	f000 faab 	bl	8001e78 <HAL_GPIO_Init>
}
 8001922:	bf00      	nop
 8001924:	3728      	adds	r7, #40	@ 0x28
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40012c00 	.word	0x40012c00
 8001930:	40021000 	.word	0x40021000

08001934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001938:	bf00      	nop
 800193a:	e7fd      	b.n	8001938 <NMI_Handler+0x4>

0800193c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001940:	bf00      	nop
 8001942:	e7fd      	b.n	8001940 <HardFault_Handler+0x4>

08001944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <MemManage_Handler+0x4>

0800194c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001950:	bf00      	nop
 8001952:	e7fd      	b.n	8001950 <BusFault_Handler+0x4>

08001954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001958:	bf00      	nop
 800195a:	e7fd      	b.n	8001958 <UsageFault_Handler+0x4>

0800195c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800198a:	f000 f94b 	bl	8001c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}

08001992 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0
  return 1;
 8001996:	2301      	movs	r3, #1
}
 8001998:	4618      	mov	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <_kill>:

int _kill(int pid, int sig)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
 80019aa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019ac:	f004 fca6 	bl	80062fc <__errno>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2216      	movs	r2, #22
 80019b4:	601a      	str	r2, [r3, #0]
  return -1;
 80019b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <_exit>:

void _exit (int status)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019ca:	f04f 31ff 	mov.w	r1, #4294967295
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff ffe7 	bl	80019a2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019d4:	bf00      	nop
 80019d6:	e7fd      	b.n	80019d4 <_exit+0x12>

080019d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
 80019e8:	e00a      	b.n	8001a00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019ea:	f3af 8000 	nop.w
 80019ee:	4601      	mov	r1, r0
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	1c5a      	adds	r2, r3, #1
 80019f4:	60ba      	str	r2, [r7, #8]
 80019f6:	b2ca      	uxtb	r2, r1
 80019f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	3301      	adds	r3, #1
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	697a      	ldr	r2, [r7, #20]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	dbf0      	blt.n	80019ea <_read+0x12>
  }

  return len;
 8001a08:	687b      	ldr	r3, [r7, #4]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b086      	sub	sp, #24
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	60f8      	str	r0, [r7, #12]
 8001a1a:	60b9      	str	r1, [r7, #8]
 8001a1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	e009      	b.n	8001a38 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	1c5a      	adds	r2, r3, #1
 8001a28:	60ba      	str	r2, [r7, #8]
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	3301      	adds	r3, #1
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	dbf1      	blt.n	8001a24 <_write+0x12>
  }
  return len;
 8001a40:	687b      	ldr	r3, [r7, #4]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <_close>:

int _close(int file)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
 8001a6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a72:	605a      	str	r2, [r3, #4]
  return 0;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <_isatty>:

int _isatty(int file)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a8a:	2301      	movs	r3, #1
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
	...

08001ab4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001abc:	4a14      	ldr	r2, [pc, #80]	@ (8001b10 <_sbrk+0x5c>)
 8001abe:	4b15      	ldr	r3, [pc, #84]	@ (8001b14 <_sbrk+0x60>)
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ac8:	4b13      	ldr	r3, [pc, #76]	@ (8001b18 <_sbrk+0x64>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d102      	bne.n	8001ad6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ad0:	4b11      	ldr	r3, [pc, #68]	@ (8001b18 <_sbrk+0x64>)
 8001ad2:	4a12      	ldr	r2, [pc, #72]	@ (8001b1c <_sbrk+0x68>)
 8001ad4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ad6:	4b10      	ldr	r3, [pc, #64]	@ (8001b18 <_sbrk+0x64>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4413      	add	r3, r2
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d207      	bcs.n	8001af4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ae4:	f004 fc0a 	bl	80062fc <__errno>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	220c      	movs	r2, #12
 8001aec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aee:	f04f 33ff 	mov.w	r3, #4294967295
 8001af2:	e009      	b.n	8001b08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001af4:	4b08      	ldr	r3, [pc, #32]	@ (8001b18 <_sbrk+0x64>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001afa:	4b07      	ldr	r3, [pc, #28]	@ (8001b18 <_sbrk+0x64>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4413      	add	r3, r2
 8001b02:	4a05      	ldr	r2, [pc, #20]	@ (8001b18 <_sbrk+0x64>)
 8001b04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b06:	68fb      	ldr	r3, [r7, #12]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3718      	adds	r7, #24
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	2000a000 	.word	0x2000a000
 8001b14:	00000400 	.word	0x00000400
 8001b18:	200002f8 	.word	0x200002f8
 8001b1c:	20000450 	.word	0x20000450

08001b20 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b24:	4b06      	ldr	r3, [pc, #24]	@ (8001b40 <SystemInit+0x20>)
 8001b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b2a:	4a05      	ldr	r2, [pc, #20]	@ (8001b40 <SystemInit+0x20>)
 8001b2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b7c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b48:	f7ff ffea 	bl	8001b20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b4c:	480c      	ldr	r0, [pc, #48]	@ (8001b80 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b4e:	490d      	ldr	r1, [pc, #52]	@ (8001b84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b50:	4a0d      	ldr	r2, [pc, #52]	@ (8001b88 <LoopForever+0xe>)
  movs r3, #0
 8001b52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b54:	e002      	b.n	8001b5c <LoopCopyDataInit>

08001b56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b5a:	3304      	adds	r3, #4

08001b5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b60:	d3f9      	bcc.n	8001b56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b62:	4a0a      	ldr	r2, [pc, #40]	@ (8001b8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b64:	4c0a      	ldr	r4, [pc, #40]	@ (8001b90 <LoopForever+0x16>)
  movs r3, #0
 8001b66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b68:	e001      	b.n	8001b6e <LoopFillZerobss>

08001b6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b6c:	3204      	adds	r2, #4

08001b6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b70:	d3fb      	bcc.n	8001b6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b72:	f004 fbc9 	bl	8006308 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b76:	f7ff f9bd 	bl	8000ef4 <main>

08001b7a <LoopForever>:

LoopForever:
    b LoopForever
 8001b7a:	e7fe      	b.n	8001b7a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b7c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001b80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b84:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001b88:	0800a140 	.word	0x0800a140
  ldr r2, =_sbss
 8001b8c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001b90:	2000044c 	.word	0x2000044c

08001b94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b94:	e7fe      	b.n	8001b94 <ADC1_2_IRQHandler>
	...

08001b98 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b9c:	4b08      	ldr	r3, [pc, #32]	@ (8001bc0 <HAL_Init+0x28>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a07      	ldr	r2, [pc, #28]	@ (8001bc0 <HAL_Init+0x28>)
 8001ba2:	f043 0310 	orr.w	r3, r3, #16
 8001ba6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba8:	2003      	movs	r0, #3
 8001baa:	f000 f931 	bl	8001e10 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bae:	200f      	movs	r0, #15
 8001bb0:	f000 f808 	bl	8001bc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bb4:	f7ff fdc8 	bl	8001748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40022000 	.word	0x40022000

08001bc4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bcc:	4b12      	ldr	r3, [pc, #72]	@ (8001c18 <HAL_InitTick+0x54>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	4b12      	ldr	r3, [pc, #72]	@ (8001c1c <HAL_InitTick+0x58>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be2:	4618      	mov	r0, r3
 8001be4:	f000 f93b 	bl	8001e5e <HAL_SYSTICK_Config>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e00e      	b.n	8001c10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b0f      	cmp	r3, #15
 8001bf6:	d80a      	bhi.n	8001c0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001c00:	f000 f911 	bl	8001e26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c04:	4a06      	ldr	r2, [pc, #24]	@ (8001c20 <HAL_InitTick+0x5c>)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	e000      	b.n	8001c10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20000000 	.word	0x20000000
 8001c1c:	20000008 	.word	0x20000008
 8001c20:	20000004 	.word	0x20000004

08001c24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c28:	4b06      	ldr	r3, [pc, #24]	@ (8001c44 <HAL_IncTick+0x20>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4b06      	ldr	r3, [pc, #24]	@ (8001c48 <HAL_IncTick+0x24>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4413      	add	r3, r2
 8001c34:	4a04      	ldr	r2, [pc, #16]	@ (8001c48 <HAL_IncTick+0x24>)
 8001c36:	6013      	str	r3, [r2, #0]
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	20000008 	.word	0x20000008
 8001c48:	200002fc 	.word	0x200002fc

08001c4c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001c50:	4b03      	ldr	r3, [pc, #12]	@ (8001c60 <HAL_GetTick+0x14>)
 8001c52:	681b      	ldr	r3, [r3, #0]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	200002fc 	.word	0x200002fc

08001c64 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c6c:	f7ff ffee 	bl	8001c4c <HAL_GetTick>
 8001c70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c7c:	d005      	beq.n	8001c8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca8 <HAL_Delay+0x44>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	461a      	mov	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4413      	add	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001c8a:	bf00      	nop
 8001c8c:	f7ff ffde 	bl	8001c4c <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d8f7      	bhi.n	8001c8c <HAL_Delay+0x28>
  {
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	bf00      	nop
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000008 	.word	0x20000008

08001cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cc8:	4013      	ands	r3, r2
 8001cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cde:	4a04      	ldr	r2, [pc, #16]	@ (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	60d3      	str	r3, [r2, #12]
}
 8001ce4:	bf00      	nop
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf8:	4b04      	ldr	r3, [pc, #16]	@ (8001d0c <__NVIC_GetPriorityGrouping+0x18>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	0a1b      	lsrs	r3, r3, #8
 8001cfe:	f003 0307 	and.w	r3, r3, #7
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	6039      	str	r1, [r7, #0]
 8001d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	db0a      	blt.n	8001d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	490c      	ldr	r1, [pc, #48]	@ (8001d5c <__NVIC_SetPriority+0x4c>)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	0112      	lsls	r2, r2, #4
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	440b      	add	r3, r1
 8001d34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d38:	e00a      	b.n	8001d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	4908      	ldr	r1, [pc, #32]	@ (8001d60 <__NVIC_SetPriority+0x50>)
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	3b04      	subs	r3, #4
 8001d48:	0112      	lsls	r2, r2, #4
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	761a      	strb	r2, [r3, #24]
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	e000e100 	.word	0xe000e100
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b089      	sub	sp, #36	@ 0x24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f1c3 0307 	rsb	r3, r3, #7
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	bf28      	it	cs
 8001d82:	2304      	movcs	r3, #4
 8001d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	3304      	adds	r3, #4
 8001d8a:	2b06      	cmp	r3, #6
 8001d8c:	d902      	bls.n	8001d94 <NVIC_EncodePriority+0x30>
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	3b03      	subs	r3, #3
 8001d92:	e000      	b.n	8001d96 <NVIC_EncodePriority+0x32>
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d98:	f04f 32ff 	mov.w	r2, #4294967295
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43da      	mvns	r2, r3
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	401a      	ands	r2, r3
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dac:	f04f 31ff 	mov.w	r1, #4294967295
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	fa01 f303 	lsl.w	r3, r1, r3
 8001db6:	43d9      	mvns	r1, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dbc:	4313      	orrs	r3, r2
         );
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3724      	adds	r7, #36	@ 0x24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
	...

08001dcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ddc:	d301      	bcc.n	8001de2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dde:	2301      	movs	r3, #1
 8001de0:	e00f      	b.n	8001e02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001de2:	4a0a      	ldr	r2, [pc, #40]	@ (8001e0c <SysTick_Config+0x40>)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3b01      	subs	r3, #1
 8001de8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dea:	210f      	movs	r1, #15
 8001dec:	f04f 30ff 	mov.w	r0, #4294967295
 8001df0:	f7ff ff8e 	bl	8001d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001df4:	4b05      	ldr	r3, [pc, #20]	@ (8001e0c <SysTick_Config+0x40>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dfa:	4b04      	ldr	r3, [pc, #16]	@ (8001e0c <SysTick_Config+0x40>)
 8001dfc:	2207      	movs	r2, #7
 8001dfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	e000e010 	.word	0xe000e010

08001e10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f7ff ff47 	bl	8001cac <__NVIC_SetPriorityGrouping>
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b086      	sub	sp, #24
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	60b9      	str	r1, [r7, #8]
 8001e30:	607a      	str	r2, [r7, #4]
 8001e32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e38:	f7ff ff5c 	bl	8001cf4 <__NVIC_GetPriorityGrouping>
 8001e3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	68b9      	ldr	r1, [r7, #8]
 8001e42:	6978      	ldr	r0, [r7, #20]
 8001e44:	f7ff ff8e 	bl	8001d64 <NVIC_EncodePriority>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e4e:	4611      	mov	r1, r2
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff ff5d 	bl	8001d10 <__NVIC_SetPriority>
}
 8001e56:	bf00      	nop
 8001e58:	3718      	adds	r7, #24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b082      	sub	sp, #8
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff ffb0 	bl	8001dcc <SysTick_Config>
 8001e6c:	4603      	mov	r3, r0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b087      	sub	sp, #28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e86:	e154      	b.n	8002132 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	fa01 f303 	lsl.w	r3, r1, r3
 8001e94:	4013      	ands	r3, r2
 8001e96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 8146 	beq.w	800212c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 0303 	and.w	r3, r3, #3
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d005      	beq.n	8001eb8 <HAL_GPIO_Init+0x40>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d130      	bne.n	8001f1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	2203      	movs	r2, #3
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	68da      	ldr	r2, [r3, #12]
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001eee:	2201      	movs	r2, #1
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	4013      	ands	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	091b      	lsrs	r3, r3, #4
 8001f04:	f003 0201 	and.w	r2, r3, #1
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	2b03      	cmp	r3, #3
 8001f24:	d017      	beq.n	8001f56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	2203      	movs	r2, #3
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43db      	mvns	r3, r3
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	689a      	ldr	r2, [r3, #8]
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d123      	bne.n	8001faa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	08da      	lsrs	r2, r3, #3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3208      	adds	r2, #8
 8001f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	220f      	movs	r2, #15
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	4013      	ands	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	691a      	ldr	r2, [r3, #16]
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	08da      	lsrs	r2, r3, #3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3208      	adds	r2, #8
 8001fa4:	6939      	ldr	r1, [r7, #16]
 8001fa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	2203      	movs	r2, #3
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f003 0203 	and.w	r2, r3, #3
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 80a0 	beq.w	800212c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fec:	4b58      	ldr	r3, [pc, #352]	@ (8002150 <HAL_GPIO_Init+0x2d8>)
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	4a57      	ldr	r2, [pc, #348]	@ (8002150 <HAL_GPIO_Init+0x2d8>)
 8001ff2:	f043 0301 	orr.w	r3, r3, #1
 8001ff6:	6193      	str	r3, [r2, #24]
 8001ff8:	4b55      	ldr	r3, [pc, #340]	@ (8002150 <HAL_GPIO_Init+0x2d8>)
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002004:	4a53      	ldr	r2, [pc, #332]	@ (8002154 <HAL_GPIO_Init+0x2dc>)
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	089b      	lsrs	r3, r3, #2
 800200a:	3302      	adds	r3, #2
 800200c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002010:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	f003 0303 	and.w	r3, r3, #3
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	220f      	movs	r2, #15
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	4013      	ands	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800202e:	d019      	beq.n	8002064 <HAL_GPIO_Init+0x1ec>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a49      	ldr	r2, [pc, #292]	@ (8002158 <HAL_GPIO_Init+0x2e0>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d013      	beq.n	8002060 <HAL_GPIO_Init+0x1e8>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a48      	ldr	r2, [pc, #288]	@ (800215c <HAL_GPIO_Init+0x2e4>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d00d      	beq.n	800205c <HAL_GPIO_Init+0x1e4>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a47      	ldr	r2, [pc, #284]	@ (8002160 <HAL_GPIO_Init+0x2e8>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d007      	beq.n	8002058 <HAL_GPIO_Init+0x1e0>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a46      	ldr	r2, [pc, #280]	@ (8002164 <HAL_GPIO_Init+0x2ec>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d101      	bne.n	8002054 <HAL_GPIO_Init+0x1dc>
 8002050:	2304      	movs	r3, #4
 8002052:	e008      	b.n	8002066 <HAL_GPIO_Init+0x1ee>
 8002054:	2305      	movs	r3, #5
 8002056:	e006      	b.n	8002066 <HAL_GPIO_Init+0x1ee>
 8002058:	2303      	movs	r3, #3
 800205a:	e004      	b.n	8002066 <HAL_GPIO_Init+0x1ee>
 800205c:	2302      	movs	r3, #2
 800205e:	e002      	b.n	8002066 <HAL_GPIO_Init+0x1ee>
 8002060:	2301      	movs	r3, #1
 8002062:	e000      	b.n	8002066 <HAL_GPIO_Init+0x1ee>
 8002064:	2300      	movs	r3, #0
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	f002 0203 	and.w	r2, r2, #3
 800206c:	0092      	lsls	r2, r2, #2
 800206e:	4093      	lsls	r3, r2
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	4313      	orrs	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002076:	4937      	ldr	r1, [pc, #220]	@ (8002154 <HAL_GPIO_Init+0x2dc>)
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	089b      	lsrs	r3, r3, #2
 800207c:	3302      	adds	r3, #2
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002084:	4b38      	ldr	r3, [pc, #224]	@ (8002168 <HAL_GPIO_Init+0x2f0>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	43db      	mvns	r3, r3
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4013      	ands	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d003      	beq.n	80020a8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80020a8:	4a2f      	ldr	r2, [pc, #188]	@ (8002168 <HAL_GPIO_Init+0x2f0>)
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020ae:	4b2e      	ldr	r3, [pc, #184]	@ (8002168 <HAL_GPIO_Init+0x2f0>)
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	43db      	mvns	r3, r3
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4013      	ands	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80020d2:	4a25      	ldr	r2, [pc, #148]	@ (8002168 <HAL_GPIO_Init+0x2f0>)
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020d8:	4b23      	ldr	r3, [pc, #140]	@ (8002168 <HAL_GPIO_Init+0x2f0>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	43db      	mvns	r3, r3
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	4013      	ands	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80020fc:	4a1a      	ldr	r2, [pc, #104]	@ (8002168 <HAL_GPIO_Init+0x2f0>)
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002102:	4b19      	ldr	r3, [pc, #100]	@ (8002168 <HAL_GPIO_Init+0x2f0>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	43db      	mvns	r3, r3
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	4013      	ands	r3, r2
 8002110:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	4313      	orrs	r3, r2
 8002124:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002126:	4a10      	ldr	r2, [pc, #64]	@ (8002168 <HAL_GPIO_Init+0x2f0>)
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	3301      	adds	r3, #1
 8002130:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	fa22 f303 	lsr.w	r3, r2, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	f47f aea3 	bne.w	8001e88 <HAL_GPIO_Init+0x10>
  }
}
 8002142:	bf00      	nop
 8002144:	bf00      	nop
 8002146:	371c      	adds	r7, #28
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	40021000 	.word	0x40021000
 8002154:	40010000 	.word	0x40010000
 8002158:	48000400 	.word	0x48000400
 800215c:	48000800 	.word	0x48000800
 8002160:	48000c00 	.word	0x48000c00
 8002164:	48001000 	.word	0x48001000
 8002168:	40010400 	.word	0x40010400

0800216c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e08d      	b.n	800229a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d106      	bne.n	8002198 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff fafc 	bl	8001790 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2224      	movs	r2, #36	@ 0x24
 800219c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0201 	bic.w	r2, r2, #1
 80021ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80021bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d107      	bne.n	80021e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689a      	ldr	r2, [r3, #8]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	e006      	b.n	80021f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80021f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d108      	bne.n	800220e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800220a:	605a      	str	r2, [r3, #4]
 800220c:	e007      	b.n	800221e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800221c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6812      	ldr	r2, [r2, #0]
 8002228:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800222c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002230:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68da      	ldr	r2, [r3, #12]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002240:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	691a      	ldr	r2, [r3, #16]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	430a      	orrs	r2, r1
 800225a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69d9      	ldr	r1, [r3, #28]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a1a      	ldr	r2, [r3, #32]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	430a      	orrs	r2, r1
 800226a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 0201 	orr.w	r2, r2, #1
 800227a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2220      	movs	r2, #32
 8002286:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
	...

080022a4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b088      	sub	sp, #32
 80022a8:	af02      	add	r7, sp, #8
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	4608      	mov	r0, r1
 80022ae:	4611      	mov	r1, r2
 80022b0:	461a      	mov	r2, r3
 80022b2:	4603      	mov	r3, r0
 80022b4:	817b      	strh	r3, [r7, #10]
 80022b6:	460b      	mov	r3, r1
 80022b8:	813b      	strh	r3, [r7, #8]
 80022ba:	4613      	mov	r3, r2
 80022bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b20      	cmp	r3, #32
 80022c8:	f040 80f9 	bne.w	80024be <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022cc:	6a3b      	ldr	r3, [r7, #32]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d002      	beq.n	80022d8 <HAL_I2C_Mem_Write+0x34>
 80022d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d105      	bne.n	80022e4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022de:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e0ed      	b.n	80024c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d101      	bne.n	80022f2 <HAL_I2C_Mem_Write+0x4e>
 80022ee:	2302      	movs	r3, #2
 80022f0:	e0e6      	b.n	80024c0 <HAL_I2C_Mem_Write+0x21c>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022fa:	f7ff fca7 	bl	8001c4c <HAL_GetTick>
 80022fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	2319      	movs	r3, #25
 8002306:	2201      	movs	r2, #1
 8002308:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f000 fac3 	bl	8002898 <I2C_WaitOnFlagUntilTimeout>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e0d1      	b.n	80024c0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2221      	movs	r2, #33	@ 0x21
 8002320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2240      	movs	r2, #64	@ 0x40
 8002328:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2200      	movs	r2, #0
 8002330:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6a3a      	ldr	r2, [r7, #32]
 8002336:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800233c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002344:	88f8      	ldrh	r0, [r7, #6]
 8002346:	893a      	ldrh	r2, [r7, #8]
 8002348:	8979      	ldrh	r1, [r7, #10]
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	9301      	str	r3, [sp, #4]
 800234e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	4603      	mov	r3, r0
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f000 f9d3 	bl	8002700 <I2C_RequestMemoryWrite>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d005      	beq.n	800236c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e0a9      	b.n	80024c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002370:	b29b      	uxth	r3, r3
 8002372:	2bff      	cmp	r3, #255	@ 0xff
 8002374:	d90e      	bls.n	8002394 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	22ff      	movs	r2, #255	@ 0xff
 800237a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002380:	b2da      	uxtb	r2, r3
 8002382:	8979      	ldrh	r1, [r7, #10]
 8002384:	2300      	movs	r3, #0
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f000 fc47 	bl	8002c20 <I2C_TransferConfig>
 8002392:	e00f      	b.n	80023b4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002398:	b29a      	uxth	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	8979      	ldrh	r1, [r7, #10]
 80023a6:	2300      	movs	r3, #0
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f000 fc36 	bl	8002c20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f000 fac6 	bl	800294a <I2C_WaitOnTXISFlagUntilTimeout>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e07b      	b.n	80024c0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023cc:	781a      	ldrb	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d8:	1c5a      	adds	r2, r3, #1
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	3b01      	subs	r3, #1
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023f0:	3b01      	subs	r3, #1
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d034      	beq.n	800246c <HAL_I2C_Mem_Write+0x1c8>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002406:	2b00      	cmp	r3, #0
 8002408:	d130      	bne.n	800246c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002410:	2200      	movs	r2, #0
 8002412:	2180      	movs	r1, #128	@ 0x80
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f000 fa3f 	bl	8002898 <I2C_WaitOnFlagUntilTimeout>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e04d      	b.n	80024c0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002428:	b29b      	uxth	r3, r3
 800242a:	2bff      	cmp	r3, #255	@ 0xff
 800242c:	d90e      	bls.n	800244c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	22ff      	movs	r2, #255	@ 0xff
 8002432:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002438:	b2da      	uxtb	r2, r3
 800243a:	8979      	ldrh	r1, [r7, #10]
 800243c:	2300      	movs	r3, #0
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f000 fbeb 	bl	8002c20 <I2C_TransferConfig>
 800244a:	e00f      	b.n	800246c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002450:	b29a      	uxth	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800245a:	b2da      	uxtb	r2, r3
 800245c:	8979      	ldrh	r1, [r7, #10]
 800245e:	2300      	movs	r3, #0
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f000 fbda 	bl	8002c20 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002470:	b29b      	uxth	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d19e      	bne.n	80023b4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f000 faac 	bl	80029d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e01a      	b.n	80024c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2220      	movs	r2, #32
 8002490:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6859      	ldr	r1, [r3, #4]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	4b0a      	ldr	r3, [pc, #40]	@ (80024c8 <HAL_I2C_Mem_Write+0x224>)
 800249e:	400b      	ands	r3, r1
 80024a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2220      	movs	r2, #32
 80024a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	e000      	b.n	80024c0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80024be:	2302      	movs	r3, #2
  }
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	fe00e800 	.word	0xfe00e800

080024cc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af02      	add	r7, sp, #8
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	4608      	mov	r0, r1
 80024d6:	4611      	mov	r1, r2
 80024d8:	461a      	mov	r2, r3
 80024da:	4603      	mov	r3, r0
 80024dc:	817b      	strh	r3, [r7, #10]
 80024de:	460b      	mov	r3, r1
 80024e0:	813b      	strh	r3, [r7, #8]
 80024e2:	4613      	mov	r3, r2
 80024e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b20      	cmp	r3, #32
 80024f0:	f040 80fd 	bne.w	80026ee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80024f4:	6a3b      	ldr	r3, [r7, #32]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d002      	beq.n	8002500 <HAL_I2C_Mem_Read+0x34>
 80024fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d105      	bne.n	800250c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002506:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e0f1      	b.n	80026f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002512:	2b01      	cmp	r3, #1
 8002514:	d101      	bne.n	800251a <HAL_I2C_Mem_Read+0x4e>
 8002516:	2302      	movs	r3, #2
 8002518:	e0ea      	b.n	80026f0 <HAL_I2C_Mem_Read+0x224>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2201      	movs	r2, #1
 800251e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002522:	f7ff fb93 	bl	8001c4c <HAL_GetTick>
 8002526:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	2319      	movs	r3, #25
 800252e:	2201      	movs	r2, #1
 8002530:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 f9af 	bl	8002898 <I2C_WaitOnFlagUntilTimeout>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e0d5      	b.n	80026f0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2222      	movs	r2, #34	@ 0x22
 8002548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2240      	movs	r2, #64	@ 0x40
 8002550:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6a3a      	ldr	r2, [r7, #32]
 800255e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002564:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800256c:	88f8      	ldrh	r0, [r7, #6]
 800256e:	893a      	ldrh	r2, [r7, #8]
 8002570:	8979      	ldrh	r1, [r7, #10]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	9301      	str	r3, [sp, #4]
 8002576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	4603      	mov	r3, r0
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f000 f913 	bl	80027a8 <I2C_RequestMemoryRead>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d005      	beq.n	8002594 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e0ad      	b.n	80026f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002598:	b29b      	uxth	r3, r3
 800259a:	2bff      	cmp	r3, #255	@ 0xff
 800259c:	d90e      	bls.n	80025bc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2201      	movs	r2, #1
 80025a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	8979      	ldrh	r1, [r7, #10]
 80025ac:	4b52      	ldr	r3, [pc, #328]	@ (80026f8 <HAL_I2C_Mem_Read+0x22c>)
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f000 fb33 	bl	8002c20 <I2C_TransferConfig>
 80025ba:	e00f      	b.n	80025dc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	8979      	ldrh	r1, [r7, #10]
 80025ce:	4b4a      	ldr	r3, [pc, #296]	@ (80026f8 <HAL_I2C_Mem_Read+0x22c>)
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 fb22 	bl	8002c20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025e2:	2200      	movs	r2, #0
 80025e4:	2104      	movs	r1, #4
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f000 f956 	bl	8002898 <I2C_WaitOnFlagUntilTimeout>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e07c      	b.n	80026f0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002608:	1c5a      	adds	r2, r3, #1
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002612:	3b01      	subs	r3, #1
 8002614:	b29a      	uxth	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800261e:	b29b      	uxth	r3, r3
 8002620:	3b01      	subs	r3, #1
 8002622:	b29a      	uxth	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800262c:	b29b      	uxth	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d034      	beq.n	800269c <HAL_I2C_Mem_Read+0x1d0>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002636:	2b00      	cmp	r3, #0
 8002638:	d130      	bne.n	800269c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002640:	2200      	movs	r2, #0
 8002642:	2180      	movs	r1, #128	@ 0x80
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 f927 	bl	8002898 <I2C_WaitOnFlagUntilTimeout>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e04d      	b.n	80026f0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002658:	b29b      	uxth	r3, r3
 800265a:	2bff      	cmp	r3, #255	@ 0xff
 800265c:	d90e      	bls.n	800267c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2201      	movs	r2, #1
 8002662:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002668:	b2da      	uxtb	r2, r3
 800266a:	8979      	ldrh	r1, [r7, #10]
 800266c:	2300      	movs	r3, #0
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f000 fad3 	bl	8002c20 <I2C_TransferConfig>
 800267a:	e00f      	b.n	800269c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002680:	b29a      	uxth	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800268a:	b2da      	uxtb	r2, r3
 800268c:	8979      	ldrh	r1, [r7, #10]
 800268e:	2300      	movs	r3, #0
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f000 fac2 	bl	8002c20 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d19a      	bne.n	80025dc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 f994 	bl	80029d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e01a      	b.n	80026f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2220      	movs	r2, #32
 80026c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6859      	ldr	r1, [r3, #4]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	4b0b      	ldr	r3, [pc, #44]	@ (80026fc <HAL_I2C_Mem_Read+0x230>)
 80026ce:	400b      	ands	r3, r1
 80026d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2220      	movs	r2, #32
 80026d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80026ea:	2300      	movs	r3, #0
 80026ec:	e000      	b.n	80026f0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80026ee:	2302      	movs	r3, #2
  }
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	80002400 	.word	0x80002400
 80026fc:	fe00e800 	.word	0xfe00e800

08002700 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af02      	add	r7, sp, #8
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	4608      	mov	r0, r1
 800270a:	4611      	mov	r1, r2
 800270c:	461a      	mov	r2, r3
 800270e:	4603      	mov	r3, r0
 8002710:	817b      	strh	r3, [r7, #10]
 8002712:	460b      	mov	r3, r1
 8002714:	813b      	strh	r3, [r7, #8]
 8002716:	4613      	mov	r3, r2
 8002718:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800271a:	88fb      	ldrh	r3, [r7, #6]
 800271c:	b2da      	uxtb	r2, r3
 800271e:	8979      	ldrh	r1, [r7, #10]
 8002720:	4b20      	ldr	r3, [pc, #128]	@ (80027a4 <I2C_RequestMemoryWrite+0xa4>)
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f000 fa79 	bl	8002c20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800272e:	69fa      	ldr	r2, [r7, #28]
 8002730:	69b9      	ldr	r1, [r7, #24]
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 f909 	bl	800294a <I2C_WaitOnTXISFlagUntilTimeout>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e02c      	b.n	800279c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002742:	88fb      	ldrh	r3, [r7, #6]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d105      	bne.n	8002754 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002748:	893b      	ldrh	r3, [r7, #8]
 800274a:	b2da      	uxtb	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	629a      	str	r2, [r3, #40]	@ 0x28
 8002752:	e015      	b.n	8002780 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002754:	893b      	ldrh	r3, [r7, #8]
 8002756:	0a1b      	lsrs	r3, r3, #8
 8002758:	b29b      	uxth	r3, r3
 800275a:	b2da      	uxtb	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002762:	69fa      	ldr	r2, [r7, #28]
 8002764:	69b9      	ldr	r1, [r7, #24]
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 f8ef 	bl	800294a <I2C_WaitOnTXISFlagUntilTimeout>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e012      	b.n	800279c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002776:	893b      	ldrh	r3, [r7, #8]
 8002778:	b2da      	uxtb	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	2200      	movs	r2, #0
 8002788:	2180      	movs	r1, #128	@ 0x80
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f000 f884 	bl	8002898 <I2C_WaitOnFlagUntilTimeout>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e000      	b.n	800279c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	80002000 	.word	0x80002000

080027a8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af02      	add	r7, sp, #8
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	4608      	mov	r0, r1
 80027b2:	4611      	mov	r1, r2
 80027b4:	461a      	mov	r2, r3
 80027b6:	4603      	mov	r3, r0
 80027b8:	817b      	strh	r3, [r7, #10]
 80027ba:	460b      	mov	r3, r1
 80027bc:	813b      	strh	r3, [r7, #8]
 80027be:	4613      	mov	r3, r2
 80027c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80027c2:	88fb      	ldrh	r3, [r7, #6]
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	8979      	ldrh	r1, [r7, #10]
 80027c8:	4b20      	ldr	r3, [pc, #128]	@ (800284c <I2C_RequestMemoryRead+0xa4>)
 80027ca:	9300      	str	r3, [sp, #0]
 80027cc:	2300      	movs	r3, #0
 80027ce:	68f8      	ldr	r0, [r7, #12]
 80027d0:	f000 fa26 	bl	8002c20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027d4:	69fa      	ldr	r2, [r7, #28]
 80027d6:	69b9      	ldr	r1, [r7, #24]
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f000 f8b6 	bl	800294a <I2C_WaitOnTXISFlagUntilTimeout>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e02c      	b.n	8002842 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027e8:	88fb      	ldrh	r3, [r7, #6]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d105      	bne.n	80027fa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027ee:	893b      	ldrh	r3, [r7, #8]
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80027f8:	e015      	b.n	8002826 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80027fa:	893b      	ldrh	r3, [r7, #8]
 80027fc:	0a1b      	lsrs	r3, r3, #8
 80027fe:	b29b      	uxth	r3, r3
 8002800:	b2da      	uxtb	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002808:	69fa      	ldr	r2, [r7, #28]
 800280a:	69b9      	ldr	r1, [r7, #24]
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f000 f89c 	bl	800294a <I2C_WaitOnTXISFlagUntilTimeout>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e012      	b.n	8002842 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800281c:	893b      	ldrh	r3, [r7, #8]
 800281e:	b2da      	uxtb	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	2200      	movs	r2, #0
 800282e:	2140      	movs	r1, #64	@ 0x40
 8002830:	68f8      	ldr	r0, [r7, #12]
 8002832:	f000 f831 	bl	8002898 <I2C_WaitOnFlagUntilTimeout>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e000      	b.n	8002842 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	80002000 	.word	0x80002000

08002850 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b02      	cmp	r3, #2
 8002864:	d103      	bne.n	800286e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2200      	movs	r2, #0
 800286c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b01      	cmp	r3, #1
 800287a:	d007      	beq.n	800288c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	699a      	ldr	r2, [r3, #24]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0201 	orr.w	r2, r2, #1
 800288a:	619a      	str	r2, [r3, #24]
  }
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	603b      	str	r3, [r7, #0]
 80028a4:	4613      	mov	r3, r2
 80028a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028a8:	e03b      	b.n	8002922 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	6839      	ldr	r1, [r7, #0]
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 f8d6 	bl	8002a60 <I2C_IsErrorOccurred>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e041      	b.n	8002942 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c4:	d02d      	beq.n	8002922 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028c6:	f7ff f9c1 	bl	8001c4c <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d302      	bcc.n	80028dc <I2C_WaitOnFlagUntilTimeout+0x44>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d122      	bne.n	8002922 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	699a      	ldr	r2, [r3, #24]
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	4013      	ands	r3, r2
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	bf0c      	ite	eq
 80028ec:	2301      	moveq	r3, #1
 80028ee:	2300      	movne	r3, #0
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	461a      	mov	r2, r3
 80028f4:	79fb      	ldrb	r3, [r7, #7]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d113      	bne.n	8002922 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028fe:	f043 0220 	orr.w	r2, r3, #32
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2220      	movs	r2, #32
 800290a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e00f      	b.n	8002942 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	699a      	ldr	r2, [r3, #24]
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	4013      	ands	r3, r2
 800292c:	68ba      	ldr	r2, [r7, #8]
 800292e:	429a      	cmp	r2, r3
 8002930:	bf0c      	ite	eq
 8002932:	2301      	moveq	r3, #1
 8002934:	2300      	movne	r3, #0
 8002936:	b2db      	uxtb	r3, r3
 8002938:	461a      	mov	r2, r3
 800293a:	79fb      	ldrb	r3, [r7, #7]
 800293c:	429a      	cmp	r2, r3
 800293e:	d0b4      	beq.n	80028aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b084      	sub	sp, #16
 800294e:	af00      	add	r7, sp, #0
 8002950:	60f8      	str	r0, [r7, #12]
 8002952:	60b9      	str	r1, [r7, #8]
 8002954:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002956:	e033      	b.n	80029c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	68b9      	ldr	r1, [r7, #8]
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f000 f87f 	bl	8002a60 <I2C_IsErrorOccurred>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e031      	b.n	80029d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002972:	d025      	beq.n	80029c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002974:	f7ff f96a 	bl	8001c4c <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	429a      	cmp	r2, r3
 8002982:	d302      	bcc.n	800298a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d11a      	bne.n	80029c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b02      	cmp	r3, #2
 8002996:	d013      	beq.n	80029c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800299c:	f043 0220 	orr.w	r2, r3, #32
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2220      	movs	r2, #32
 80029a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e007      	b.n	80029d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d1c4      	bne.n	8002958 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029e4:	e02f      	b.n	8002a46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	68b9      	ldr	r1, [r7, #8]
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 f838 	bl	8002a60 <I2C_IsErrorOccurred>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e02d      	b.n	8002a56 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029fa:	f7ff f927 	bl	8001c4c <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d302      	bcc.n	8002a10 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d11a      	bne.n	8002a46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	f003 0320 	and.w	r3, r3, #32
 8002a1a:	2b20      	cmp	r3, #32
 8002a1c:	d013      	beq.n	8002a46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a22:	f043 0220 	orr.w	r2, r3, #32
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e007      	b.n	8002a56 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	f003 0320 	and.w	r3, r3, #32
 8002a50:	2b20      	cmp	r3, #32
 8002a52:	d1c8      	bne.n	80029e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
	...

08002a60 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08a      	sub	sp, #40	@ 0x28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	f003 0310 	and.w	r3, r3, #16
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d068      	beq.n	8002b5e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2210      	movs	r2, #16
 8002a92:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a94:	e049      	b.n	8002b2a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a9c:	d045      	beq.n	8002b2a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a9e:	f7ff f8d5 	bl	8001c4c <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	68ba      	ldr	r2, [r7, #8]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d302      	bcc.n	8002ab4 <I2C_IsErrorOccurred+0x54>
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d13a      	bne.n	8002b2a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002abe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ac6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ad2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ad6:	d121      	bne.n	8002b1c <I2C_IsErrorOccurred+0xbc>
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ade:	d01d      	beq.n	8002b1c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002ae0:	7cfb      	ldrb	r3, [r7, #19]
 8002ae2:	2b20      	cmp	r3, #32
 8002ae4:	d01a      	beq.n	8002b1c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002af4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002af6:	f7ff f8a9 	bl	8001c4c <HAL_GetTick>
 8002afa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002afc:	e00e      	b.n	8002b1c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002afe:	f7ff f8a5 	bl	8001c4c <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b19      	cmp	r3, #25
 8002b0a:	d907      	bls.n	8002b1c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	f043 0320 	orr.w	r3, r3, #32
 8002b12:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002b1a:	e006      	b.n	8002b2a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	f003 0320 	and.w	r3, r3, #32
 8002b26:	2b20      	cmp	r3, #32
 8002b28:	d1e9      	bne.n	8002afe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	f003 0320 	and.w	r3, r3, #32
 8002b34:	2b20      	cmp	r3, #32
 8002b36:	d003      	beq.n	8002b40 <I2C_IsErrorOccurred+0xe0>
 8002b38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0aa      	beq.n	8002a96 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002b40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d103      	bne.n	8002b50 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2220      	movs	r2, #32
 8002b4e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	f043 0304 	orr.w	r3, r3, #4
 8002b56:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00b      	beq.n	8002b88 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002b70:	6a3b      	ldr	r3, [r7, #32]
 8002b72:	f043 0301 	orr.w	r3, r3, #1
 8002b76:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00b      	beq.n	8002baa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002b92:	6a3b      	ldr	r3, [r7, #32]
 8002b94:	f043 0308 	orr.w	r3, r3, #8
 8002b98:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ba2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00b      	beq.n	8002bcc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	f043 0302 	orr.w	r3, r3, #2
 8002bba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bc4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002bcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d01c      	beq.n	8002c0e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f7ff fe3b 	bl	8002850 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6859      	ldr	r1, [r3, #4]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	4b0d      	ldr	r3, [pc, #52]	@ (8002c1c <I2C_IsErrorOccurred+0x1bc>)
 8002be6:	400b      	ands	r3, r1
 8002be8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002c0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3728      	adds	r7, #40	@ 0x28
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	fe00e800 	.word	0xfe00e800

08002c20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b087      	sub	sp, #28
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	607b      	str	r3, [r7, #4]
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	817b      	strh	r3, [r7, #10]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c32:	897b      	ldrh	r3, [r7, #10]
 8002c34:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c38:	7a7b      	ldrb	r3, [r7, #9]
 8002c3a:	041b      	lsls	r3, r3, #16
 8002c3c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c40:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c4e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	6a3b      	ldr	r3, [r7, #32]
 8002c58:	0d5b      	lsrs	r3, r3, #21
 8002c5a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002c5e:	4b08      	ldr	r3, [pc, #32]	@ (8002c80 <I2C_TransferConfig+0x60>)
 8002c60:	430b      	orrs	r3, r1
 8002c62:	43db      	mvns	r3, r3
 8002c64:	ea02 0103 	and.w	r1, r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002c72:	bf00      	nop
 8002c74:	371c      	adds	r7, #28
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	03ff63ff 	.word	0x03ff63ff

08002c84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b20      	cmp	r3, #32
 8002c98:	d138      	bne.n	8002d0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d101      	bne.n	8002ca8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	e032      	b.n	8002d0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2224      	movs	r2, #36	@ 0x24
 8002cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 0201 	bic.w	r2, r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002cd6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6819      	ldr	r1, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f042 0201 	orr.w	r2, r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	e000      	b.n	8002d0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d0c:	2302      	movs	r3, #2
  }
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b085      	sub	sp, #20
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
 8002d22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b20      	cmp	r3, #32
 8002d2e:	d139      	bne.n	8002da4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d101      	bne.n	8002d3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	e033      	b.n	8002da6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2224      	movs	r2, #36	@ 0x24
 8002d4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 0201 	bic.w	r2, r2, #1
 8002d5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002d6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	021b      	lsls	r3, r3, #8
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0201 	orr.w	r2, r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2220      	movs	r2, #32
 8002d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002da0:	2300      	movs	r3, #0
 8002da2:	e000      	b.n	8002da6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002da4:	2302      	movs	r3, #2
  }
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
	...

08002db4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dc0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002dc4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d102      	bne.n	8002dda <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	f001 b823 	b.w	8003e20 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dde:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 817d 	beq.w	80030ea <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002df0:	4bbc      	ldr	r3, [pc, #752]	@ (80030e4 <HAL_RCC_OscConfig+0x330>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 030c 	and.w	r3, r3, #12
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	d00c      	beq.n	8002e16 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002dfc:	4bb9      	ldr	r3, [pc, #740]	@ (80030e4 <HAL_RCC_OscConfig+0x330>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f003 030c 	and.w	r3, r3, #12
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d15c      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x10e>
 8002e08:	4bb6      	ldr	r3, [pc, #728]	@ (80030e4 <HAL_RCC_OscConfig+0x330>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e14:	d155      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x10e>
 8002e16:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e1a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002e22:	fa93 f3a3 	rbit	r3, r3
 8002e26:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e2a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e2e:	fab3 f383 	clz	r3, r3
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	095b      	lsrs	r3, r3, #5
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d102      	bne.n	8002e48 <HAL_RCC_OscConfig+0x94>
 8002e42:	4ba8      	ldr	r3, [pc, #672]	@ (80030e4 <HAL_RCC_OscConfig+0x330>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	e015      	b.n	8002e74 <HAL_RCC_OscConfig+0xc0>
 8002e48:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e4c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e50:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002e54:	fa93 f3a3 	rbit	r3, r3
 8002e58:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002e5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e60:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002e64:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002e68:	fa93 f3a3 	rbit	r3, r3
 8002e6c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002e70:	4b9c      	ldr	r3, [pc, #624]	@ (80030e4 <HAL_RCC_OscConfig+0x330>)
 8002e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e74:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002e78:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002e7c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002e80:	fa92 f2a2 	rbit	r2, r2
 8002e84:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002e88:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002e8c:	fab2 f282 	clz	r2, r2
 8002e90:	b2d2      	uxtb	r2, r2
 8002e92:	f042 0220 	orr.w	r2, r2, #32
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	f002 021f 	and.w	r2, r2, #31
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 811f 	beq.w	80030e8 <HAL_RCC_OscConfig+0x334>
 8002eaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f040 8116 	bne.w	80030e8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	f000 bfaf 	b.w	8003e20 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ec2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ec6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ed2:	d106      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x12e>
 8002ed4:	4b83      	ldr	r3, [pc, #524]	@ (80030e4 <HAL_RCC_OscConfig+0x330>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a82      	ldr	r2, [pc, #520]	@ (80030e4 <HAL_RCC_OscConfig+0x330>)
 8002eda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ede:	6013      	str	r3, [r2, #0]
 8002ee0:	e036      	b.n	8002f50 <HAL_RCC_OscConfig+0x19c>
 8002ee2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ee6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10c      	bne.n	8002f0c <HAL_RCC_OscConfig+0x158>
 8002ef2:	4b7c      	ldr	r3, [pc, #496]	@ (80030e4 <HAL_RCC_OscConfig+0x330>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a7b      	ldr	r2, [pc, #492]	@ (80030e4 <HAL_RCC_OscConfig+0x330>)
 8002ef8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002efc:	6013      	str	r3, [r2, #0]
 8002efe:	4b79      	ldr	r3, [pc, #484]	@ (80030e4 <HAL_RCC_OscConfig+0x330>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a78      	ldr	r2, [pc, #480]	@ (80030e4 <HAL_RCC_OscConfig+0x330>)
 8002f04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	e021      	b.n	8002f50 <HAL_RCC_OscConfig+0x19c>
 8002f0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f10:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f1c:	d10c      	bne.n	8002f38 <HAL_RCC_OscConfig+0x184>
 8002f1e:	4b71      	ldr	r3, [pc, #452]	@ (80030e4 <HAL_RCC_OscConfig+0x330>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a70      	ldr	r2, [pc, #448]	@ (80030e4 <HAL_RCC_OscConfig+0x330>)
 8002f24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f28:	6013      	str	r3, [r2, #0]
 8002f2a:	4b6e      	ldr	r3, [pc, #440]	@ (80030e4 <HAL_RCC_OscConfig+0x330>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a6d      	ldr	r2, [pc, #436]	@ (80030e4 <HAL_RCC_OscConfig+0x330>)
 8002f30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f34:	6013      	str	r3, [r2, #0]
 8002f36:	e00b      	b.n	8002f50 <HAL_RCC_OscConfig+0x19c>
 8002f38:	4b6a      	ldr	r3, [pc, #424]	@ (80030e4 <HAL_RCC_OscConfig+0x330>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a69      	ldr	r2, [pc, #420]	@ (80030e4 <HAL_RCC_OscConfig+0x330>)
 8002f3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f42:	6013      	str	r3, [r2, #0]
 8002f44:	4b67      	ldr	r3, [pc, #412]	@ (80030e4 <HAL_RCC_OscConfig+0x330>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a66      	ldr	r2, [pc, #408]	@ (80030e4 <HAL_RCC_OscConfig+0x330>)
 8002f4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f4e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f50:	4b64      	ldr	r3, [pc, #400]	@ (80030e4 <HAL_RCC_OscConfig+0x330>)
 8002f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f54:	f023 020f 	bic.w	r2, r3, #15
 8002f58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f5c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	495f      	ldr	r1, [pc, #380]	@ (80030e4 <HAL_RCC_OscConfig+0x330>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f6e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d059      	beq.n	800302e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7a:	f7fe fe67 	bl	8001c4c <HAL_GetTick>
 8002f7e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f82:	e00a      	b.n	8002f9a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f84:	f7fe fe62 	bl	8001c4c <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b64      	cmp	r3, #100	@ 0x64
 8002f92:	d902      	bls.n	8002f9a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	f000 bf43 	b.w	8003e20 <HAL_RCC_OscConfig+0x106c>
 8002f9a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f9e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002fa6:	fa93 f3a3 	rbit	r3, r3
 8002faa:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002fae:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb2:	fab3 f383 	clz	r3, r3
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	095b      	lsrs	r3, r3, #5
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	f043 0301 	orr.w	r3, r3, #1
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d102      	bne.n	8002fcc <HAL_RCC_OscConfig+0x218>
 8002fc6:	4b47      	ldr	r3, [pc, #284]	@ (80030e4 <HAL_RCC_OscConfig+0x330>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	e015      	b.n	8002ff8 <HAL_RCC_OscConfig+0x244>
 8002fcc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002fd0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002fd8:	fa93 f3a3 	rbit	r3, r3
 8002fdc:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002fe0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002fe4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002fe8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002fec:	fa93 f3a3 	rbit	r3, r3
 8002ff0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002ff4:	4b3b      	ldr	r3, [pc, #236]	@ (80030e4 <HAL_RCC_OscConfig+0x330>)
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002ffc:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003000:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003004:	fa92 f2a2 	rbit	r2, r2
 8003008:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 800300c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003010:	fab2 f282 	clz	r2, r2
 8003014:	b2d2      	uxtb	r2, r2
 8003016:	f042 0220 	orr.w	r2, r2, #32
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	f002 021f 	and.w	r2, r2, #31
 8003020:	2101      	movs	r1, #1
 8003022:	fa01 f202 	lsl.w	r2, r1, r2
 8003026:	4013      	ands	r3, r2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0ab      	beq.n	8002f84 <HAL_RCC_OscConfig+0x1d0>
 800302c:	e05d      	b.n	80030ea <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302e:	f7fe fe0d 	bl	8001c4c <HAL_GetTick>
 8003032:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003036:	e00a      	b.n	800304e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003038:	f7fe fe08 	bl	8001c4c <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b64      	cmp	r3, #100	@ 0x64
 8003046:	d902      	bls.n	800304e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	f000 bee9 	b.w	8003e20 <HAL_RCC_OscConfig+0x106c>
 800304e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003052:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003056:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800305a:	fa93 f3a3 	rbit	r3, r3
 800305e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8003062:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003066:	fab3 f383 	clz	r3, r3
 800306a:	b2db      	uxtb	r3, r3
 800306c:	095b      	lsrs	r3, r3, #5
 800306e:	b2db      	uxtb	r3, r3
 8003070:	f043 0301 	orr.w	r3, r3, #1
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b01      	cmp	r3, #1
 8003078:	d102      	bne.n	8003080 <HAL_RCC_OscConfig+0x2cc>
 800307a:	4b1a      	ldr	r3, [pc, #104]	@ (80030e4 <HAL_RCC_OscConfig+0x330>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	e015      	b.n	80030ac <HAL_RCC_OscConfig+0x2f8>
 8003080:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003084:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003088:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800308c:	fa93 f3a3 	rbit	r3, r3
 8003090:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003094:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003098:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800309c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80030a0:	fa93 f3a3 	rbit	r3, r3
 80030a4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80030a8:	4b0e      	ldr	r3, [pc, #56]	@ (80030e4 <HAL_RCC_OscConfig+0x330>)
 80030aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ac:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80030b0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80030b4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80030b8:	fa92 f2a2 	rbit	r2, r2
 80030bc:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80030c0:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80030c4:	fab2 f282 	clz	r2, r2
 80030c8:	b2d2      	uxtb	r2, r2
 80030ca:	f042 0220 	orr.w	r2, r2, #32
 80030ce:	b2d2      	uxtb	r2, r2
 80030d0:	f002 021f 	and.w	r2, r2, #31
 80030d4:	2101      	movs	r1, #1
 80030d6:	fa01 f202 	lsl.w	r2, r1, r2
 80030da:	4013      	ands	r3, r2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1ab      	bne.n	8003038 <HAL_RCC_OscConfig+0x284>
 80030e0:	e003      	b.n	80030ea <HAL_RCC_OscConfig+0x336>
 80030e2:	bf00      	nop
 80030e4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 817d 	beq.w	80033fa <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003100:	4ba6      	ldr	r3, [pc, #664]	@ (800339c <HAL_RCC_OscConfig+0x5e8>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f003 030c 	and.w	r3, r3, #12
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00b      	beq.n	8003124 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800310c:	4ba3      	ldr	r3, [pc, #652]	@ (800339c <HAL_RCC_OscConfig+0x5e8>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f003 030c 	and.w	r3, r3, #12
 8003114:	2b08      	cmp	r3, #8
 8003116:	d172      	bne.n	80031fe <HAL_RCC_OscConfig+0x44a>
 8003118:	4ba0      	ldr	r3, [pc, #640]	@ (800339c <HAL_RCC_OscConfig+0x5e8>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d16c      	bne.n	80031fe <HAL_RCC_OscConfig+0x44a>
 8003124:	2302      	movs	r3, #2
 8003126:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800312e:	fa93 f3a3 	rbit	r3, r3
 8003132:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8003136:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800313a:	fab3 f383 	clz	r3, r3
 800313e:	b2db      	uxtb	r3, r3
 8003140:	095b      	lsrs	r3, r3, #5
 8003142:	b2db      	uxtb	r3, r3
 8003144:	f043 0301 	orr.w	r3, r3, #1
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b01      	cmp	r3, #1
 800314c:	d102      	bne.n	8003154 <HAL_RCC_OscConfig+0x3a0>
 800314e:	4b93      	ldr	r3, [pc, #588]	@ (800339c <HAL_RCC_OscConfig+0x5e8>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	e013      	b.n	800317c <HAL_RCC_OscConfig+0x3c8>
 8003154:	2302      	movs	r3, #2
 8003156:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800315e:	fa93 f3a3 	rbit	r3, r3
 8003162:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003166:	2302      	movs	r3, #2
 8003168:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800316c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003170:	fa93 f3a3 	rbit	r3, r3
 8003174:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003178:	4b88      	ldr	r3, [pc, #544]	@ (800339c <HAL_RCC_OscConfig+0x5e8>)
 800317a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317c:	2202      	movs	r2, #2
 800317e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8003182:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003186:	fa92 f2a2 	rbit	r2, r2
 800318a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800318e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8003192:	fab2 f282 	clz	r2, r2
 8003196:	b2d2      	uxtb	r2, r2
 8003198:	f042 0220 	orr.w	r2, r2, #32
 800319c:	b2d2      	uxtb	r2, r2
 800319e:	f002 021f 	and.w	r2, r2, #31
 80031a2:	2101      	movs	r1, #1
 80031a4:	fa01 f202 	lsl.w	r2, r1, r2
 80031a8:	4013      	ands	r3, r2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00a      	beq.n	80031c4 <HAL_RCC_OscConfig+0x410>
 80031ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d002      	beq.n	80031c4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	f000 be2e 	b.w	8003e20 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c4:	4b75      	ldr	r3, [pc, #468]	@ (800339c <HAL_RCC_OscConfig+0x5e8>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	21f8      	movs	r1, #248	@ 0xf8
 80031da:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031de:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80031e2:	fa91 f1a1 	rbit	r1, r1
 80031e6:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80031ea:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80031ee:	fab1 f181 	clz	r1, r1
 80031f2:	b2c9      	uxtb	r1, r1
 80031f4:	408b      	lsls	r3, r1
 80031f6:	4969      	ldr	r1, [pc, #420]	@ (800339c <HAL_RCC_OscConfig+0x5e8>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031fc:	e0fd      	b.n	80033fa <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003202:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 8088 	beq.w	8003320 <HAL_RCC_OscConfig+0x56c>
 8003210:	2301      	movs	r3, #1
 8003212:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003216:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800321a:	fa93 f3a3 	rbit	r3, r3
 800321e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8003222:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003226:	fab3 f383 	clz	r3, r3
 800322a:	b2db      	uxtb	r3, r3
 800322c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003230:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	461a      	mov	r2, r3
 8003238:	2301      	movs	r3, #1
 800323a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800323c:	f7fe fd06 	bl	8001c4c <HAL_GetTick>
 8003240:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003244:	e00a      	b.n	800325c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003246:	f7fe fd01 	bl	8001c4c <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d902      	bls.n	800325c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	f000 bde2 	b.w	8003e20 <HAL_RCC_OscConfig+0x106c>
 800325c:	2302      	movs	r3, #2
 800325e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003262:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8003266:	fa93 f3a3 	rbit	r3, r3
 800326a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800326e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003272:	fab3 f383 	clz	r3, r3
 8003276:	b2db      	uxtb	r3, r3
 8003278:	095b      	lsrs	r3, r3, #5
 800327a:	b2db      	uxtb	r3, r3
 800327c:	f043 0301 	orr.w	r3, r3, #1
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b01      	cmp	r3, #1
 8003284:	d102      	bne.n	800328c <HAL_RCC_OscConfig+0x4d8>
 8003286:	4b45      	ldr	r3, [pc, #276]	@ (800339c <HAL_RCC_OscConfig+0x5e8>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	e013      	b.n	80032b4 <HAL_RCC_OscConfig+0x500>
 800328c:	2302      	movs	r3, #2
 800328e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003292:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8003296:	fa93 f3a3 	rbit	r3, r3
 800329a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800329e:	2302      	movs	r3, #2
 80032a0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80032a4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80032a8:	fa93 f3a3 	rbit	r3, r3
 80032ac:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80032b0:	4b3a      	ldr	r3, [pc, #232]	@ (800339c <HAL_RCC_OscConfig+0x5e8>)
 80032b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b4:	2202      	movs	r2, #2
 80032b6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80032ba:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80032be:	fa92 f2a2 	rbit	r2, r2
 80032c2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80032c6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80032ca:	fab2 f282 	clz	r2, r2
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	f042 0220 	orr.w	r2, r2, #32
 80032d4:	b2d2      	uxtb	r2, r2
 80032d6:	f002 021f 	and.w	r2, r2, #31
 80032da:	2101      	movs	r1, #1
 80032dc:	fa01 f202 	lsl.w	r2, r1, r2
 80032e0:	4013      	ands	r3, r2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0af      	beq.n	8003246 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e6:	4b2d      	ldr	r3, [pc, #180]	@ (800339c <HAL_RCC_OscConfig+0x5e8>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	21f8      	movs	r1, #248	@ 0xf8
 80032fc:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003300:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003304:	fa91 f1a1 	rbit	r1, r1
 8003308:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 800330c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003310:	fab1 f181 	clz	r1, r1
 8003314:	b2c9      	uxtb	r1, r1
 8003316:	408b      	lsls	r3, r1
 8003318:	4920      	ldr	r1, [pc, #128]	@ (800339c <HAL_RCC_OscConfig+0x5e8>)
 800331a:	4313      	orrs	r3, r2
 800331c:	600b      	str	r3, [r1, #0]
 800331e:	e06c      	b.n	80033fa <HAL_RCC_OscConfig+0x646>
 8003320:	2301      	movs	r3, #1
 8003322:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003326:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800332a:	fa93 f3a3 	rbit	r3, r3
 800332e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8003332:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003336:	fab3 f383 	clz	r3, r3
 800333a:	b2db      	uxtb	r3, r3
 800333c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003340:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	461a      	mov	r2, r3
 8003348:	2300      	movs	r3, #0
 800334a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334c:	f7fe fc7e 	bl	8001c4c <HAL_GetTick>
 8003350:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003354:	e00a      	b.n	800336c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003356:	f7fe fc79 	bl	8001c4c <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d902      	bls.n	800336c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	f000 bd5a 	b.w	8003e20 <HAL_RCC_OscConfig+0x106c>
 800336c:	2302      	movs	r3, #2
 800336e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003372:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003376:	fa93 f3a3 	rbit	r3, r3
 800337a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800337e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003382:	fab3 f383 	clz	r3, r3
 8003386:	b2db      	uxtb	r3, r3
 8003388:	095b      	lsrs	r3, r3, #5
 800338a:	b2db      	uxtb	r3, r3
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b01      	cmp	r3, #1
 8003394:	d104      	bne.n	80033a0 <HAL_RCC_OscConfig+0x5ec>
 8003396:	4b01      	ldr	r3, [pc, #4]	@ (800339c <HAL_RCC_OscConfig+0x5e8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	e015      	b.n	80033c8 <HAL_RCC_OscConfig+0x614>
 800339c:	40021000 	.word	0x40021000
 80033a0:	2302      	movs	r3, #2
 80033a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80033aa:	fa93 f3a3 	rbit	r3, r3
 80033ae:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80033b2:	2302      	movs	r3, #2
 80033b4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80033b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80033bc:	fa93 f3a3 	rbit	r3, r3
 80033c0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80033c4:	4bc8      	ldr	r3, [pc, #800]	@ (80036e8 <HAL_RCC_OscConfig+0x934>)
 80033c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c8:	2202      	movs	r2, #2
 80033ca:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80033ce:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80033d2:	fa92 f2a2 	rbit	r2, r2
 80033d6:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80033da:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80033de:	fab2 f282 	clz	r2, r2
 80033e2:	b2d2      	uxtb	r2, r2
 80033e4:	f042 0220 	orr.w	r2, r2, #32
 80033e8:	b2d2      	uxtb	r2, r2
 80033ea:	f002 021f 	and.w	r2, r2, #31
 80033ee:	2101      	movs	r1, #1
 80033f0:	fa01 f202 	lsl.w	r2, r1, r2
 80033f4:	4013      	ands	r3, r2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1ad      	bne.n	8003356 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0308 	and.w	r3, r3, #8
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 8110 	beq.w	8003630 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003410:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003414:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d079      	beq.n	8003514 <HAL_RCC_OscConfig+0x760>
 8003420:	2301      	movs	r3, #1
 8003422:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003426:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800342a:	fa93 f3a3 	rbit	r3, r3
 800342e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003432:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003436:	fab3 f383 	clz	r3, r3
 800343a:	b2db      	uxtb	r3, r3
 800343c:	461a      	mov	r2, r3
 800343e:	4bab      	ldr	r3, [pc, #684]	@ (80036ec <HAL_RCC_OscConfig+0x938>)
 8003440:	4413      	add	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	461a      	mov	r2, r3
 8003446:	2301      	movs	r3, #1
 8003448:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800344a:	f7fe fbff 	bl	8001c4c <HAL_GetTick>
 800344e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003452:	e00a      	b.n	800346a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003454:	f7fe fbfa 	bl	8001c4c <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d902      	bls.n	800346a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	f000 bcdb 	b.w	8003e20 <HAL_RCC_OscConfig+0x106c>
 800346a:	2302      	movs	r3, #2
 800346c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003470:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003474:	fa93 f3a3 	rbit	r3, r3
 8003478:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800347c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003480:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003484:	2202      	movs	r2, #2
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800348c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	fa93 f2a3 	rbit	r2, r3
 8003496:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800349a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80034a8:	2202      	movs	r2, #2
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	fa93 f2a3 	rbit	r2, r3
 80034ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034be:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80034c2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034c4:	4b88      	ldr	r3, [pc, #544]	@ (80036e8 <HAL_RCC_OscConfig+0x934>)
 80034c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034cc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80034d0:	2102      	movs	r1, #2
 80034d2:	6019      	str	r1, [r3, #0]
 80034d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034d8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	fa93 f1a3 	rbit	r1, r3
 80034e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034e6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80034ea:	6019      	str	r1, [r3, #0]
  return result;
 80034ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034f0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	fab3 f383 	clz	r3, r3
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003500:	b2db      	uxtb	r3, r3
 8003502:	f003 031f 	and.w	r3, r3, #31
 8003506:	2101      	movs	r1, #1
 8003508:	fa01 f303 	lsl.w	r3, r1, r3
 800350c:	4013      	ands	r3, r2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0a0      	beq.n	8003454 <HAL_RCC_OscConfig+0x6a0>
 8003512:	e08d      	b.n	8003630 <HAL_RCC_OscConfig+0x87c>
 8003514:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003518:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800351c:	2201      	movs	r2, #1
 800351e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003520:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003524:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	fa93 f2a3 	rbit	r2, r3
 800352e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003532:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003536:	601a      	str	r2, [r3, #0]
  return result;
 8003538:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800353c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003540:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003542:	fab3 f383 	clz	r3, r3
 8003546:	b2db      	uxtb	r3, r3
 8003548:	461a      	mov	r2, r3
 800354a:	4b68      	ldr	r3, [pc, #416]	@ (80036ec <HAL_RCC_OscConfig+0x938>)
 800354c:	4413      	add	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	461a      	mov	r2, r3
 8003552:	2300      	movs	r3, #0
 8003554:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003556:	f7fe fb79 	bl	8001c4c <HAL_GetTick>
 800355a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800355e:	e00a      	b.n	8003576 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003560:	f7fe fb74 	bl	8001c4c <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d902      	bls.n	8003576 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	f000 bc55 	b.w	8003e20 <HAL_RCC_OscConfig+0x106c>
 8003576:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800357a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800357e:	2202      	movs	r2, #2
 8003580:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003582:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003586:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	fa93 f2a3 	rbit	r2, r3
 8003590:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003594:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003598:	601a      	str	r2, [r3, #0]
 800359a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800359e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80035a2:	2202      	movs	r2, #2
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035aa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	fa93 f2a3 	rbit	r2, r3
 80035b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035b8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035c2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80035c6:	2202      	movs	r2, #2
 80035c8:	601a      	str	r2, [r3, #0]
 80035ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035ce:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	fa93 f2a3 	rbit	r2, r3
 80035d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035dc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80035e0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035e2:	4b41      	ldr	r3, [pc, #260]	@ (80036e8 <HAL_RCC_OscConfig+0x934>)
 80035e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035ea:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80035ee:	2102      	movs	r1, #2
 80035f0:	6019      	str	r1, [r3, #0]
 80035f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035f6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	fa93 f1a3 	rbit	r1, r3
 8003600:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003604:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003608:	6019      	str	r1, [r3, #0]
  return result;
 800360a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800360e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	fab3 f383 	clz	r3, r3
 8003618:	b2db      	uxtb	r3, r3
 800361a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800361e:	b2db      	uxtb	r3, r3
 8003620:	f003 031f 	and.w	r3, r3, #31
 8003624:	2101      	movs	r1, #1
 8003626:	fa01 f303 	lsl.w	r3, r1, r3
 800362a:	4013      	ands	r3, r2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d197      	bne.n	8003560 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003630:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003634:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 81a1 	beq.w	8003988 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003646:	2300      	movs	r3, #0
 8003648:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800364c:	4b26      	ldr	r3, [pc, #152]	@ (80036e8 <HAL_RCC_OscConfig+0x934>)
 800364e:	69db      	ldr	r3, [r3, #28]
 8003650:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d116      	bne.n	8003686 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003658:	4b23      	ldr	r3, [pc, #140]	@ (80036e8 <HAL_RCC_OscConfig+0x934>)
 800365a:	69db      	ldr	r3, [r3, #28]
 800365c:	4a22      	ldr	r2, [pc, #136]	@ (80036e8 <HAL_RCC_OscConfig+0x934>)
 800365e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003662:	61d3      	str	r3, [r2, #28]
 8003664:	4b20      	ldr	r3, [pc, #128]	@ (80036e8 <HAL_RCC_OscConfig+0x934>)
 8003666:	69db      	ldr	r3, [r3, #28]
 8003668:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800366c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003670:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800367a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800367e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003680:	2301      	movs	r3, #1
 8003682:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003686:	4b1a      	ldr	r3, [pc, #104]	@ (80036f0 <HAL_RCC_OscConfig+0x93c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800368e:	2b00      	cmp	r3, #0
 8003690:	d11a      	bne.n	80036c8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003692:	4b17      	ldr	r3, [pc, #92]	@ (80036f0 <HAL_RCC_OscConfig+0x93c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a16      	ldr	r2, [pc, #88]	@ (80036f0 <HAL_RCC_OscConfig+0x93c>)
 8003698:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800369c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800369e:	f7fe fad5 	bl	8001c4c <HAL_GetTick>
 80036a2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a6:	e009      	b.n	80036bc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036a8:	f7fe fad0 	bl	8001c4c <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b64      	cmp	r3, #100	@ 0x64
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e3b1      	b.n	8003e20 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036bc:	4b0c      	ldr	r3, [pc, #48]	@ (80036f0 <HAL_RCC_OscConfig+0x93c>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0ef      	beq.n	80036a8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d10d      	bne.n	80036f4 <HAL_RCC_OscConfig+0x940>
 80036d8:	4b03      	ldr	r3, [pc, #12]	@ (80036e8 <HAL_RCC_OscConfig+0x934>)
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	4a02      	ldr	r2, [pc, #8]	@ (80036e8 <HAL_RCC_OscConfig+0x934>)
 80036de:	f043 0301 	orr.w	r3, r3, #1
 80036e2:	6213      	str	r3, [r2, #32]
 80036e4:	e03c      	b.n	8003760 <HAL_RCC_OscConfig+0x9ac>
 80036e6:	bf00      	nop
 80036e8:	40021000 	.word	0x40021000
 80036ec:	10908120 	.word	0x10908120
 80036f0:	40007000 	.word	0x40007000
 80036f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10c      	bne.n	800371e <HAL_RCC_OscConfig+0x96a>
 8003704:	4bc1      	ldr	r3, [pc, #772]	@ (8003a0c <HAL_RCC_OscConfig+0xc58>)
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	4ac0      	ldr	r2, [pc, #768]	@ (8003a0c <HAL_RCC_OscConfig+0xc58>)
 800370a:	f023 0301 	bic.w	r3, r3, #1
 800370e:	6213      	str	r3, [r2, #32]
 8003710:	4bbe      	ldr	r3, [pc, #760]	@ (8003a0c <HAL_RCC_OscConfig+0xc58>)
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	4abd      	ldr	r2, [pc, #756]	@ (8003a0c <HAL_RCC_OscConfig+0xc58>)
 8003716:	f023 0304 	bic.w	r3, r3, #4
 800371a:	6213      	str	r3, [r2, #32]
 800371c:	e020      	b.n	8003760 <HAL_RCC_OscConfig+0x9ac>
 800371e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003722:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	2b05      	cmp	r3, #5
 800372c:	d10c      	bne.n	8003748 <HAL_RCC_OscConfig+0x994>
 800372e:	4bb7      	ldr	r3, [pc, #732]	@ (8003a0c <HAL_RCC_OscConfig+0xc58>)
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	4ab6      	ldr	r2, [pc, #728]	@ (8003a0c <HAL_RCC_OscConfig+0xc58>)
 8003734:	f043 0304 	orr.w	r3, r3, #4
 8003738:	6213      	str	r3, [r2, #32]
 800373a:	4bb4      	ldr	r3, [pc, #720]	@ (8003a0c <HAL_RCC_OscConfig+0xc58>)
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	4ab3      	ldr	r2, [pc, #716]	@ (8003a0c <HAL_RCC_OscConfig+0xc58>)
 8003740:	f043 0301 	orr.w	r3, r3, #1
 8003744:	6213      	str	r3, [r2, #32]
 8003746:	e00b      	b.n	8003760 <HAL_RCC_OscConfig+0x9ac>
 8003748:	4bb0      	ldr	r3, [pc, #704]	@ (8003a0c <HAL_RCC_OscConfig+0xc58>)
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	4aaf      	ldr	r2, [pc, #700]	@ (8003a0c <HAL_RCC_OscConfig+0xc58>)
 800374e:	f023 0301 	bic.w	r3, r3, #1
 8003752:	6213      	str	r3, [r2, #32]
 8003754:	4bad      	ldr	r3, [pc, #692]	@ (8003a0c <HAL_RCC_OscConfig+0xc58>)
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	4aac      	ldr	r2, [pc, #688]	@ (8003a0c <HAL_RCC_OscConfig+0xc58>)
 800375a:	f023 0304 	bic.w	r3, r3, #4
 800375e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003760:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003764:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 8081 	beq.w	8003874 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003772:	f7fe fa6b 	bl	8001c4c <HAL_GetTick>
 8003776:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800377a:	e00b      	b.n	8003794 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800377c:	f7fe fa66 	bl	8001c4c <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	f241 3288 	movw	r2, #5000	@ 0x1388
 800378c:	4293      	cmp	r3, r2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e345      	b.n	8003e20 <HAL_RCC_OscConfig+0x106c>
 8003794:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003798:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800379c:	2202      	movs	r2, #2
 800379e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037a4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	fa93 f2a3 	rbit	r2, r3
 80037ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037b2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037bc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80037c0:	2202      	movs	r2, #2
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037c8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	fa93 f2a3 	rbit	r2, r3
 80037d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037d6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80037da:	601a      	str	r2, [r3, #0]
  return result;
 80037dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037e0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80037e4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e6:	fab3 f383 	clz	r3, r3
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	095b      	lsrs	r3, r3, #5
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	f043 0302 	orr.w	r3, r3, #2
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d102      	bne.n	8003800 <HAL_RCC_OscConfig+0xa4c>
 80037fa:	4b84      	ldr	r3, [pc, #528]	@ (8003a0c <HAL_RCC_OscConfig+0xc58>)
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	e013      	b.n	8003828 <HAL_RCC_OscConfig+0xa74>
 8003800:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003804:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003808:	2202      	movs	r2, #2
 800380a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003810:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	fa93 f2a3 	rbit	r2, r3
 800381a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800381e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	4b79      	ldr	r3, [pc, #484]	@ (8003a0c <HAL_RCC_OscConfig+0xc58>)
 8003826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003828:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800382c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003830:	2102      	movs	r1, #2
 8003832:	6011      	str	r1, [r2, #0]
 8003834:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003838:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800383c:	6812      	ldr	r2, [r2, #0]
 800383e:	fa92 f1a2 	rbit	r1, r2
 8003842:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003846:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800384a:	6011      	str	r1, [r2, #0]
  return result;
 800384c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003850:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003854:	6812      	ldr	r2, [r2, #0]
 8003856:	fab2 f282 	clz	r2, r2
 800385a:	b2d2      	uxtb	r2, r2
 800385c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003860:	b2d2      	uxtb	r2, r2
 8003862:	f002 021f 	and.w	r2, r2, #31
 8003866:	2101      	movs	r1, #1
 8003868:	fa01 f202 	lsl.w	r2, r1, r2
 800386c:	4013      	ands	r3, r2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d084      	beq.n	800377c <HAL_RCC_OscConfig+0x9c8>
 8003872:	e07f      	b.n	8003974 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003874:	f7fe f9ea 	bl	8001c4c <HAL_GetTick>
 8003878:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800387c:	e00b      	b.n	8003896 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800387e:	f7fe f9e5 	bl	8001c4c <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800388e:	4293      	cmp	r3, r2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e2c4      	b.n	8003e20 <HAL_RCC_OscConfig+0x106c>
 8003896:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800389a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800389e:	2202      	movs	r2, #2
 80038a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038a6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	fa93 f2a3 	rbit	r2, r3
 80038b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038b4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038be:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80038c2:	2202      	movs	r2, #2
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038ca:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	fa93 f2a3 	rbit	r2, r3
 80038d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038d8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80038dc:	601a      	str	r2, [r3, #0]
  return result;
 80038de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038e2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80038e6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038e8:	fab3 f383 	clz	r3, r3
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	095b      	lsrs	r3, r3, #5
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	f043 0302 	orr.w	r3, r3, #2
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d102      	bne.n	8003902 <HAL_RCC_OscConfig+0xb4e>
 80038fc:	4b43      	ldr	r3, [pc, #268]	@ (8003a0c <HAL_RCC_OscConfig+0xc58>)
 80038fe:	6a1b      	ldr	r3, [r3, #32]
 8003900:	e013      	b.n	800392a <HAL_RCC_OscConfig+0xb76>
 8003902:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003906:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800390a:	2202      	movs	r2, #2
 800390c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003912:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	fa93 f2a3 	rbit	r2, r3
 800391c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003920:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	4b39      	ldr	r3, [pc, #228]	@ (8003a0c <HAL_RCC_OscConfig+0xc58>)
 8003928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800392e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003932:	2102      	movs	r1, #2
 8003934:	6011      	str	r1, [r2, #0]
 8003936:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800393a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800393e:	6812      	ldr	r2, [r2, #0]
 8003940:	fa92 f1a2 	rbit	r1, r2
 8003944:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003948:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800394c:	6011      	str	r1, [r2, #0]
  return result;
 800394e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003952:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003956:	6812      	ldr	r2, [r2, #0]
 8003958:	fab2 f282 	clz	r2, r2
 800395c:	b2d2      	uxtb	r2, r2
 800395e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003962:	b2d2      	uxtb	r2, r2
 8003964:	f002 021f 	and.w	r2, r2, #31
 8003968:	2101      	movs	r1, #1
 800396a:	fa01 f202 	lsl.w	r2, r1, r2
 800396e:	4013      	ands	r3, r2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d184      	bne.n	800387e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003974:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003978:	2b01      	cmp	r3, #1
 800397a:	d105      	bne.n	8003988 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800397c:	4b23      	ldr	r3, [pc, #140]	@ (8003a0c <HAL_RCC_OscConfig+0xc58>)
 800397e:	69db      	ldr	r3, [r3, #28]
 8003980:	4a22      	ldr	r2, [pc, #136]	@ (8003a0c <HAL_RCC_OscConfig+0xc58>)
 8003982:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003986:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003988:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800398c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	69db      	ldr	r3, [r3, #28]
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 8242 	beq.w	8003e1e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800399a:	4b1c      	ldr	r3, [pc, #112]	@ (8003a0c <HAL_RCC_OscConfig+0xc58>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f003 030c 	and.w	r3, r3, #12
 80039a2:	2b08      	cmp	r3, #8
 80039a4:	f000 8213 	beq.w	8003dce <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	f040 8162 	bne.w	8003c7e <HAL_RCC_OscConfig+0xeca>
 80039ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039be:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80039c2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80039c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039cc:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	fa93 f2a3 	rbit	r2, r3
 80039d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039da:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80039de:	601a      	str	r2, [r3, #0]
  return result;
 80039e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039e4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80039e8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ea:	fab3 f383 	clz	r3, r3
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80039f4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	461a      	mov	r2, r3
 80039fc:	2300      	movs	r3, #0
 80039fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a00:	f7fe f924 	bl	8001c4c <HAL_GetTick>
 8003a04:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a08:	e00c      	b.n	8003a24 <HAL_RCC_OscConfig+0xc70>
 8003a0a:	bf00      	nop
 8003a0c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a10:	f7fe f91c 	bl	8001c4c <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d901      	bls.n	8003a24 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e1fd      	b.n	8003e20 <HAL_RCC_OscConfig+0x106c>
 8003a24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a28:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003a2c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a36:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	fa93 f2a3 	rbit	r2, r3
 8003a40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a44:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003a48:	601a      	str	r2, [r3, #0]
  return result;
 8003a4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a4e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003a52:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a54:	fab3 f383 	clz	r3, r3
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	095b      	lsrs	r3, r3, #5
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	f043 0301 	orr.w	r3, r3, #1
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d102      	bne.n	8003a6e <HAL_RCC_OscConfig+0xcba>
 8003a68:	4bb0      	ldr	r3, [pc, #704]	@ (8003d2c <HAL_RCC_OscConfig+0xf78>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	e027      	b.n	8003abe <HAL_RCC_OscConfig+0xd0a>
 8003a6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a72:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003a76:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a80:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	fa93 f2a3 	rbit	r2, r3
 8003a8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a8e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a98:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003a9c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aa6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	fa93 f2a3 	rbit	r2, r3
 8003ab0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ab4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	4b9c      	ldr	r3, [pc, #624]	@ (8003d2c <HAL_RCC_OscConfig+0xf78>)
 8003abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003abe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ac2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003ac6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003aca:	6011      	str	r1, [r2, #0]
 8003acc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ad0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003ad4:	6812      	ldr	r2, [r2, #0]
 8003ad6:	fa92 f1a2 	rbit	r1, r2
 8003ada:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ade:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003ae2:	6011      	str	r1, [r2, #0]
  return result;
 8003ae4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ae8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003aec:	6812      	ldr	r2, [r2, #0]
 8003aee:	fab2 f282 	clz	r2, r2
 8003af2:	b2d2      	uxtb	r2, r2
 8003af4:	f042 0220 	orr.w	r2, r2, #32
 8003af8:	b2d2      	uxtb	r2, r2
 8003afa:	f002 021f 	and.w	r2, r2, #31
 8003afe:	2101      	movs	r1, #1
 8003b00:	fa01 f202 	lsl.w	r2, r1, r2
 8003b04:	4013      	ands	r3, r2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d182      	bne.n	8003a10 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b0a:	4b88      	ldr	r3, [pc, #544]	@ (8003d2c <HAL_RCC_OscConfig+0xf78>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003b12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b16:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003b1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	430b      	orrs	r3, r1
 8003b2c:	497f      	ldr	r1, [pc, #508]	@ (8003d2c <HAL_RCC_OscConfig+0xf78>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	604b      	str	r3, [r1, #4]
 8003b32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b36:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003b3a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003b3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b44:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	fa93 f2a3 	rbit	r2, r3
 8003b4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b52:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003b56:	601a      	str	r2, [r3, #0]
  return result;
 8003b58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b5c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003b60:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b62:	fab3 f383 	clz	r3, r3
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003b6c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	461a      	mov	r2, r3
 8003b74:	2301      	movs	r3, #1
 8003b76:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b78:	f7fe f868 	bl	8001c4c <HAL_GetTick>
 8003b7c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b80:	e009      	b.n	8003b96 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b82:	f7fe f863 	bl	8001c4c <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e144      	b.n	8003e20 <HAL_RCC_OscConfig+0x106c>
 8003b96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b9a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003b9e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ba2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ba8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	fa93 f2a3 	rbit	r2, r3
 8003bb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bb6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003bba:	601a      	str	r2, [r3, #0]
  return result;
 8003bbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bc0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003bc4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bc6:	fab3 f383 	clz	r3, r3
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	095b      	lsrs	r3, r3, #5
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	f043 0301 	orr.w	r3, r3, #1
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d102      	bne.n	8003be0 <HAL_RCC_OscConfig+0xe2c>
 8003bda:	4b54      	ldr	r3, [pc, #336]	@ (8003d2c <HAL_RCC_OscConfig+0xf78>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	e027      	b.n	8003c30 <HAL_RCC_OscConfig+0xe7c>
 8003be0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003be4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003be8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003bec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bf2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	fa93 f2a3 	rbit	r2, r3
 8003bfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c00:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c0a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003c0e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c18:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	fa93 f2a3 	rbit	r2, r3
 8003c22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c26:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003c2a:	601a      	str	r2, [r3, #0]
 8003c2c:	4b3f      	ldr	r3, [pc, #252]	@ (8003d2c <HAL_RCC_OscConfig+0xf78>)
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c30:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c34:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003c38:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003c3c:	6011      	str	r1, [r2, #0]
 8003c3e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c42:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003c46:	6812      	ldr	r2, [r2, #0]
 8003c48:	fa92 f1a2 	rbit	r1, r2
 8003c4c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c50:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003c54:	6011      	str	r1, [r2, #0]
  return result;
 8003c56:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c5a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003c5e:	6812      	ldr	r2, [r2, #0]
 8003c60:	fab2 f282 	clz	r2, r2
 8003c64:	b2d2      	uxtb	r2, r2
 8003c66:	f042 0220 	orr.w	r2, r2, #32
 8003c6a:	b2d2      	uxtb	r2, r2
 8003c6c:	f002 021f 	and.w	r2, r2, #31
 8003c70:	2101      	movs	r1, #1
 8003c72:	fa01 f202 	lsl.w	r2, r1, r2
 8003c76:	4013      	ands	r3, r2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d082      	beq.n	8003b82 <HAL_RCC_OscConfig+0xdce>
 8003c7c:	e0cf      	b.n	8003e1e <HAL_RCC_OscConfig+0x106a>
 8003c7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c82:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003c86:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003c8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c90:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	fa93 f2a3 	rbit	r2, r3
 8003c9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c9e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003ca2:	601a      	str	r2, [r3, #0]
  return result;
 8003ca4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ca8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003cac:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cae:	fab3 f383 	clz	r3, r3
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003cb8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc4:	f7fd ffc2 	bl	8001c4c <HAL_GetTick>
 8003cc8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ccc:	e009      	b.n	8003ce2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cce:	f7fd ffbd 	bl	8001c4c <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e09e      	b.n	8003e20 <HAL_RCC_OscConfig+0x106c>
 8003ce2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ce6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003cea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003cee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cf4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	fa93 f2a3 	rbit	r2, r3
 8003cfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d02:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003d06:	601a      	str	r2, [r3, #0]
  return result;
 8003d08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d0c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003d10:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d12:	fab3 f383 	clz	r3, r3
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	095b      	lsrs	r3, r3, #5
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	f043 0301 	orr.w	r3, r3, #1
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d104      	bne.n	8003d30 <HAL_RCC_OscConfig+0xf7c>
 8003d26:	4b01      	ldr	r3, [pc, #4]	@ (8003d2c <HAL_RCC_OscConfig+0xf78>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	e029      	b.n	8003d80 <HAL_RCC_OscConfig+0xfcc>
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d34:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003d38:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d42:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	fa93 f2a3 	rbit	r2, r3
 8003d4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d50:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d5a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003d5e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d68:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	fa93 f2a3 	rbit	r2, r3
 8003d72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d76:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	4b2b      	ldr	r3, [pc, #172]	@ (8003e2c <HAL_RCC_OscConfig+0x1078>)
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d80:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003d84:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003d88:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003d8c:	6011      	str	r1, [r2, #0]
 8003d8e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003d92:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003d96:	6812      	ldr	r2, [r2, #0]
 8003d98:	fa92 f1a2 	rbit	r1, r2
 8003d9c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003da0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003da4:	6011      	str	r1, [r2, #0]
  return result;
 8003da6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003daa:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003dae:	6812      	ldr	r2, [r2, #0]
 8003db0:	fab2 f282 	clz	r2, r2
 8003db4:	b2d2      	uxtb	r2, r2
 8003db6:	f042 0220 	orr.w	r2, r2, #32
 8003dba:	b2d2      	uxtb	r2, r2
 8003dbc:	f002 021f 	and.w	r2, r2, #31
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	fa01 f202 	lsl.w	r2, r1, r2
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d180      	bne.n	8003cce <HAL_RCC_OscConfig+0xf1a>
 8003dcc:	e027      	b.n	8003e1e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dd2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d101      	bne.n	8003de2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e01e      	b.n	8003e20 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003de2:	4b12      	ldr	r3, [pc, #72]	@ (8003e2c <HAL_RCC_OscConfig+0x1078>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003dea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003dee:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003df2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003df6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d10b      	bne.n	8003e1a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003e02:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003e06:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003e0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d001      	beq.n	8003e1e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e000      	b.n	8003e20 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	40021000 	.word	0x40021000

08003e30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b09e      	sub	sp, #120	@ 0x78
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d101      	bne.n	8003e48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e162      	b.n	800410e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e48:	4b90      	ldr	r3, [pc, #576]	@ (800408c <HAL_RCC_ClockConfig+0x25c>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d910      	bls.n	8003e78 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e56:	4b8d      	ldr	r3, [pc, #564]	@ (800408c <HAL_RCC_ClockConfig+0x25c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f023 0207 	bic.w	r2, r3, #7
 8003e5e:	498b      	ldr	r1, [pc, #556]	@ (800408c <HAL_RCC_ClockConfig+0x25c>)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e66:	4b89      	ldr	r3, [pc, #548]	@ (800408c <HAL_RCC_ClockConfig+0x25c>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0307 	and.w	r3, r3, #7
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d001      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e14a      	b.n	800410e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d008      	beq.n	8003e96 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e84:	4b82      	ldr	r3, [pc, #520]	@ (8004090 <HAL_RCC_ClockConfig+0x260>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	497f      	ldr	r1, [pc, #508]	@ (8004090 <HAL_RCC_ClockConfig+0x260>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 80dc 	beq.w	800405c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d13c      	bne.n	8003f26 <HAL_RCC_ClockConfig+0xf6>
 8003eac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003eb0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003eb4:	fa93 f3a3 	rbit	r3, r3
 8003eb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003eba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ebc:	fab3 f383 	clz	r3, r3
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	095b      	lsrs	r3, r3, #5
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	f043 0301 	orr.w	r3, r3, #1
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d102      	bne.n	8003ed6 <HAL_RCC_ClockConfig+0xa6>
 8003ed0:	4b6f      	ldr	r3, [pc, #444]	@ (8004090 <HAL_RCC_ClockConfig+0x260>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	e00f      	b.n	8003ef6 <HAL_RCC_ClockConfig+0xc6>
 8003ed6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003eda:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003edc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ede:	fa93 f3a3 	rbit	r3, r3
 8003ee2:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ee4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ee8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003eea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003eec:	fa93 f3a3 	rbit	r3, r3
 8003ef0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ef2:	4b67      	ldr	r3, [pc, #412]	@ (8004090 <HAL_RCC_ClockConfig+0x260>)
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003efa:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003efc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003efe:	fa92 f2a2 	rbit	r2, r2
 8003f02:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003f04:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003f06:	fab2 f282 	clz	r2, r2
 8003f0a:	b2d2      	uxtb	r2, r2
 8003f0c:	f042 0220 	orr.w	r2, r2, #32
 8003f10:	b2d2      	uxtb	r2, r2
 8003f12:	f002 021f 	and.w	r2, r2, #31
 8003f16:	2101      	movs	r1, #1
 8003f18:	fa01 f202 	lsl.w	r2, r1, r2
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d17b      	bne.n	800401a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e0f3      	b.n	800410e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d13c      	bne.n	8003fa8 <HAL_RCC_ClockConfig+0x178>
 8003f2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f32:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f36:	fa93 f3a3 	rbit	r3, r3
 8003f3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003f3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f3e:	fab3 f383 	clz	r3, r3
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	095b      	lsrs	r3, r3, #5
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	f043 0301 	orr.w	r3, r3, #1
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d102      	bne.n	8003f58 <HAL_RCC_ClockConfig+0x128>
 8003f52:	4b4f      	ldr	r3, [pc, #316]	@ (8004090 <HAL_RCC_ClockConfig+0x260>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	e00f      	b.n	8003f78 <HAL_RCC_ClockConfig+0x148>
 8003f58:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f5c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f60:	fa93 f3a3 	rbit	r3, r3
 8003f64:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f6a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f6e:	fa93 f3a3 	rbit	r3, r3
 8003f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f74:	4b46      	ldr	r3, [pc, #280]	@ (8004090 <HAL_RCC_ClockConfig+0x260>)
 8003f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f78:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f7c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003f7e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003f80:	fa92 f2a2 	rbit	r2, r2
 8003f84:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003f86:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f88:	fab2 f282 	clz	r2, r2
 8003f8c:	b2d2      	uxtb	r2, r2
 8003f8e:	f042 0220 	orr.w	r2, r2, #32
 8003f92:	b2d2      	uxtb	r2, r2
 8003f94:	f002 021f 	and.w	r2, r2, #31
 8003f98:	2101      	movs	r1, #1
 8003f9a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d13a      	bne.n	800401a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e0b2      	b.n	800410e <HAL_RCC_ClockConfig+0x2de>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fae:	fa93 f3a3 	rbit	r3, r3
 8003fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fb6:	fab3 f383 	clz	r3, r3
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	095b      	lsrs	r3, r3, #5
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	f043 0301 	orr.w	r3, r3, #1
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d102      	bne.n	8003fd0 <HAL_RCC_ClockConfig+0x1a0>
 8003fca:	4b31      	ldr	r3, [pc, #196]	@ (8004090 <HAL_RCC_ClockConfig+0x260>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	e00d      	b.n	8003fec <HAL_RCC_ClockConfig+0x1bc>
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fd6:	fa93 f3a3 	rbit	r3, r3
 8003fda:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fdc:	2302      	movs	r3, #2
 8003fde:	623b      	str	r3, [r7, #32]
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	fa93 f3a3 	rbit	r3, r3
 8003fe6:	61fb      	str	r3, [r7, #28]
 8003fe8:	4b29      	ldr	r3, [pc, #164]	@ (8004090 <HAL_RCC_ClockConfig+0x260>)
 8003fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fec:	2202      	movs	r2, #2
 8003fee:	61ba      	str	r2, [r7, #24]
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	fa92 f2a2 	rbit	r2, r2
 8003ff6:	617a      	str	r2, [r7, #20]
  return result;
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	fab2 f282 	clz	r2, r2
 8003ffe:	b2d2      	uxtb	r2, r2
 8004000:	f042 0220 	orr.w	r2, r2, #32
 8004004:	b2d2      	uxtb	r2, r2
 8004006:	f002 021f 	and.w	r2, r2, #31
 800400a:	2101      	movs	r1, #1
 800400c:	fa01 f202 	lsl.w	r2, r1, r2
 8004010:	4013      	ands	r3, r2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e079      	b.n	800410e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800401a:	4b1d      	ldr	r3, [pc, #116]	@ (8004090 <HAL_RCC_ClockConfig+0x260>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f023 0203 	bic.w	r2, r3, #3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	491a      	ldr	r1, [pc, #104]	@ (8004090 <HAL_RCC_ClockConfig+0x260>)
 8004028:	4313      	orrs	r3, r2
 800402a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800402c:	f7fd fe0e 	bl	8001c4c <HAL_GetTick>
 8004030:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004032:	e00a      	b.n	800404a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004034:	f7fd fe0a 	bl	8001c4c <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004042:	4293      	cmp	r3, r2
 8004044:	d901      	bls.n	800404a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e061      	b.n	800410e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800404a:	4b11      	ldr	r3, [pc, #68]	@ (8004090 <HAL_RCC_ClockConfig+0x260>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f003 020c 	and.w	r2, r3, #12
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	429a      	cmp	r2, r3
 800405a:	d1eb      	bne.n	8004034 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800405c:	4b0b      	ldr	r3, [pc, #44]	@ (800408c <HAL_RCC_ClockConfig+0x25c>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0307 	and.w	r3, r3, #7
 8004064:	683a      	ldr	r2, [r7, #0]
 8004066:	429a      	cmp	r2, r3
 8004068:	d214      	bcs.n	8004094 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800406a:	4b08      	ldr	r3, [pc, #32]	@ (800408c <HAL_RCC_ClockConfig+0x25c>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f023 0207 	bic.w	r2, r3, #7
 8004072:	4906      	ldr	r1, [pc, #24]	@ (800408c <HAL_RCC_ClockConfig+0x25c>)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	4313      	orrs	r3, r2
 8004078:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800407a:	4b04      	ldr	r3, [pc, #16]	@ (800408c <HAL_RCC_ClockConfig+0x25c>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0307 	and.w	r3, r3, #7
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	429a      	cmp	r2, r3
 8004086:	d005      	beq.n	8004094 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e040      	b.n	800410e <HAL_RCC_ClockConfig+0x2de>
 800408c:	40022000 	.word	0x40022000
 8004090:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b00      	cmp	r3, #0
 800409e:	d008      	beq.n	80040b2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004118 <HAL_RCC_ClockConfig+0x2e8>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	491a      	ldr	r1, [pc, #104]	@ (8004118 <HAL_RCC_ClockConfig+0x2e8>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0308 	and.w	r3, r3, #8
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d009      	beq.n	80040d2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040be:	4b16      	ldr	r3, [pc, #88]	@ (8004118 <HAL_RCC_ClockConfig+0x2e8>)
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	4912      	ldr	r1, [pc, #72]	@ (8004118 <HAL_RCC_ClockConfig+0x2e8>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80040d2:	f000 f829 	bl	8004128 <HAL_RCC_GetSysClockFreq>
 80040d6:	4601      	mov	r1, r0
 80040d8:	4b0f      	ldr	r3, [pc, #60]	@ (8004118 <HAL_RCC_ClockConfig+0x2e8>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040e0:	22f0      	movs	r2, #240	@ 0xf0
 80040e2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	fa92 f2a2 	rbit	r2, r2
 80040ea:	60fa      	str	r2, [r7, #12]
  return result;
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	fab2 f282 	clz	r2, r2
 80040f2:	b2d2      	uxtb	r2, r2
 80040f4:	40d3      	lsrs	r3, r2
 80040f6:	4a09      	ldr	r2, [pc, #36]	@ (800411c <HAL_RCC_ClockConfig+0x2ec>)
 80040f8:	5cd3      	ldrb	r3, [r2, r3]
 80040fa:	fa21 f303 	lsr.w	r3, r1, r3
 80040fe:	4a08      	ldr	r2, [pc, #32]	@ (8004120 <HAL_RCC_ClockConfig+0x2f0>)
 8004100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004102:	4b08      	ldr	r3, [pc, #32]	@ (8004124 <HAL_RCC_ClockConfig+0x2f4>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4618      	mov	r0, r3
 8004108:	f7fd fd5c 	bl	8001bc4 <HAL_InitTick>
  
  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3778      	adds	r7, #120	@ 0x78
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	40021000 	.word	0x40021000
 800411c:	08009cd4 	.word	0x08009cd4
 8004120:	20000000 	.word	0x20000000
 8004124:	20000004 	.word	0x20000004

08004128 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004128:	b480      	push	{r7}
 800412a:	b087      	sub	sp, #28
 800412c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800412e:	2300      	movs	r3, #0
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	2300      	movs	r3, #0
 8004134:	60bb      	str	r3, [r7, #8]
 8004136:	2300      	movs	r3, #0
 8004138:	617b      	str	r3, [r7, #20]
 800413a:	2300      	movs	r3, #0
 800413c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800413e:	2300      	movs	r3, #0
 8004140:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004142:	4b1e      	ldr	r3, [pc, #120]	@ (80041bc <HAL_RCC_GetSysClockFreq+0x94>)
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f003 030c 	and.w	r3, r3, #12
 800414e:	2b04      	cmp	r3, #4
 8004150:	d002      	beq.n	8004158 <HAL_RCC_GetSysClockFreq+0x30>
 8004152:	2b08      	cmp	r3, #8
 8004154:	d003      	beq.n	800415e <HAL_RCC_GetSysClockFreq+0x36>
 8004156:	e026      	b.n	80041a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004158:	4b19      	ldr	r3, [pc, #100]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800415a:	613b      	str	r3, [r7, #16]
      break;
 800415c:	e026      	b.n	80041ac <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	0c9b      	lsrs	r3, r3, #18
 8004162:	f003 030f 	and.w	r3, r3, #15
 8004166:	4a17      	ldr	r2, [pc, #92]	@ (80041c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004168:	5cd3      	ldrb	r3, [r2, r3]
 800416a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800416c:	4b13      	ldr	r3, [pc, #76]	@ (80041bc <HAL_RCC_GetSysClockFreq+0x94>)
 800416e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004170:	f003 030f 	and.w	r3, r3, #15
 8004174:	4a14      	ldr	r2, [pc, #80]	@ (80041c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004176:	5cd3      	ldrb	r3, [r2, r3]
 8004178:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d008      	beq.n	8004196 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004184:	4a0e      	ldr	r2, [pc, #56]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	fbb2 f2f3 	udiv	r2, r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	fb02 f303 	mul.w	r3, r2, r3
 8004192:	617b      	str	r3, [r7, #20]
 8004194:	e004      	b.n	80041a0 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a0c      	ldr	r2, [pc, #48]	@ (80041cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800419a:	fb02 f303 	mul.w	r3, r2, r3
 800419e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	613b      	str	r3, [r7, #16]
      break;
 80041a4:	e002      	b.n	80041ac <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041a6:	4b06      	ldr	r3, [pc, #24]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80041a8:	613b      	str	r3, [r7, #16]
      break;
 80041aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041ac:	693b      	ldr	r3, [r7, #16]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	371c      	adds	r7, #28
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	40021000 	.word	0x40021000
 80041c0:	007a1200 	.word	0x007a1200
 80041c4:	08009ce4 	.word	0x08009ce4
 80041c8:	08009cf4 	.word	0x08009cf4
 80041cc:	003d0900 	.word	0x003d0900

080041d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b092      	sub	sp, #72	@ 0x48
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041d8:	2300      	movs	r3, #0
 80041da:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80041dc:	2300      	movs	r3, #0
 80041de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80041e0:	2300      	movs	r3, #0
 80041e2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f000 80d4 	beq.w	800439c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041f4:	4b4e      	ldr	r3, [pc, #312]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10e      	bne.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004200:	4b4b      	ldr	r3, [pc, #300]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004202:	69db      	ldr	r3, [r3, #28]
 8004204:	4a4a      	ldr	r2, [pc, #296]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004206:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800420a:	61d3      	str	r3, [r2, #28]
 800420c:	4b48      	ldr	r3, [pc, #288]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800420e:	69db      	ldr	r3, [r3, #28]
 8004210:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004214:	60bb      	str	r3, [r7, #8]
 8004216:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004218:	2301      	movs	r3, #1
 800421a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800421e:	4b45      	ldr	r3, [pc, #276]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004226:	2b00      	cmp	r3, #0
 8004228:	d118      	bne.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800422a:	4b42      	ldr	r3, [pc, #264]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a41      	ldr	r2, [pc, #260]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004230:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004234:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004236:	f7fd fd09 	bl	8001c4c <HAL_GetTick>
 800423a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800423c:	e008      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800423e:	f7fd fd05 	bl	8001c4c <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b64      	cmp	r3, #100	@ 0x64
 800424a:	d901      	bls.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e169      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004250:	4b38      	ldr	r3, [pc, #224]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004258:	2b00      	cmp	r3, #0
 800425a:	d0f0      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800425c:	4b34      	ldr	r3, [pc, #208]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004264:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004266:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 8084 	beq.w	8004376 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004276:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004278:	429a      	cmp	r2, r3
 800427a:	d07c      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800427c:	4b2c      	ldr	r3, [pc, #176]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800427e:	6a1b      	ldr	r3, [r3, #32]
 8004280:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004284:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004286:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800428a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800428c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800428e:	fa93 f3a3 	rbit	r3, r3
 8004292:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004296:	fab3 f383 	clz	r3, r3
 800429a:	b2db      	uxtb	r3, r3
 800429c:	461a      	mov	r2, r3
 800429e:	4b26      	ldr	r3, [pc, #152]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80042a0:	4413      	add	r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	461a      	mov	r2, r3
 80042a6:	2301      	movs	r3, #1
 80042a8:	6013      	str	r3, [r2, #0]
 80042aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80042ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042b2:	fa93 f3a3 	rbit	r3, r3
 80042b6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80042b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042ba:	fab3 f383 	clz	r3, r3
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	461a      	mov	r2, r3
 80042c2:	4b1d      	ldr	r3, [pc, #116]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80042c4:	4413      	add	r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	461a      	mov	r2, r3
 80042ca:	2300      	movs	r3, #0
 80042cc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80042ce:	4a18      	ldr	r2, [pc, #96]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042d2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80042d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d04b      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042de:	f7fd fcb5 	bl	8001c4c <HAL_GetTick>
 80042e2:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e4:	e00a      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042e6:	f7fd fcb1 	bl	8001c4c <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d901      	bls.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e113      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80042fc:	2302      	movs	r3, #2
 80042fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004302:	fa93 f3a3 	rbit	r3, r3
 8004306:	627b      	str	r3, [r7, #36]	@ 0x24
 8004308:	2302      	movs	r3, #2
 800430a:	623b      	str	r3, [r7, #32]
 800430c:	6a3b      	ldr	r3, [r7, #32]
 800430e:	fa93 f3a3 	rbit	r3, r3
 8004312:	61fb      	str	r3, [r7, #28]
  return result;
 8004314:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004316:	fab3 f383 	clz	r3, r3
 800431a:	b2db      	uxtb	r3, r3
 800431c:	095b      	lsrs	r3, r3, #5
 800431e:	b2db      	uxtb	r3, r3
 8004320:	f043 0302 	orr.w	r3, r3, #2
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d108      	bne.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800432a:	4b01      	ldr	r3, [pc, #4]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	e00d      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004330:	40021000 	.word	0x40021000
 8004334:	40007000 	.word	0x40007000
 8004338:	10908100 	.word	0x10908100
 800433c:	2302      	movs	r3, #2
 800433e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	fa93 f3a3 	rbit	r3, r3
 8004346:	617b      	str	r3, [r7, #20]
 8004348:	4b78      	ldr	r3, [pc, #480]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800434a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800434c:	2202      	movs	r2, #2
 800434e:	613a      	str	r2, [r7, #16]
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	fa92 f2a2 	rbit	r2, r2
 8004356:	60fa      	str	r2, [r7, #12]
  return result;
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	fab2 f282 	clz	r2, r2
 800435e:	b2d2      	uxtb	r2, r2
 8004360:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004364:	b2d2      	uxtb	r2, r2
 8004366:	f002 021f 	and.w	r2, r2, #31
 800436a:	2101      	movs	r1, #1
 800436c:	fa01 f202 	lsl.w	r2, r1, r2
 8004370:	4013      	ands	r3, r2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0b7      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004376:	4b6d      	ldr	r3, [pc, #436]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	496a      	ldr	r1, [pc, #424]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004384:	4313      	orrs	r3, r2
 8004386:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004388:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800438c:	2b01      	cmp	r3, #1
 800438e:	d105      	bne.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004390:	4b66      	ldr	r3, [pc, #408]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004392:	69db      	ldr	r3, [r3, #28]
 8004394:	4a65      	ldr	r2, [pc, #404]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004396:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800439a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d008      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043a8:	4b60      	ldr	r3, [pc, #384]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ac:	f023 0203 	bic.w	r2, r3, #3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	495d      	ldr	r1, [pc, #372]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d008      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043c6:	4b59      	ldr	r3, [pc, #356]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ca:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	4956      	ldr	r1, [pc, #344]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0304 	and.w	r3, r3, #4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d008      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043e4:	4b51      	ldr	r3, [pc, #324]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	494e      	ldr	r1, [pc, #312]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0320 	and.w	r3, r3, #32
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d008      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004402:	4b4a      	ldr	r3, [pc, #296]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004406:	f023 0210 	bic.w	r2, r3, #16
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	4947      	ldr	r1, [pc, #284]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004410:	4313      	orrs	r3, r2
 8004412:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d008      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004420:	4b42      	ldr	r3, [pc, #264]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800442c:	493f      	ldr	r1, [pc, #252]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800442e:	4313      	orrs	r3, r2
 8004430:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800443a:	2b00      	cmp	r3, #0
 800443c:	d008      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800443e:	4b3b      	ldr	r3, [pc, #236]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004442:	f023 0220 	bic.w	r2, r3, #32
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	4938      	ldr	r1, [pc, #224]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800444c:	4313      	orrs	r3, r2
 800444e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0308 	and.w	r3, r3, #8
 8004458:	2b00      	cmp	r3, #0
 800445a:	d008      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800445c:	4b33      	ldr	r3, [pc, #204]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800445e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004460:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	4930      	ldr	r1, [pc, #192]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800446a:	4313      	orrs	r3, r2
 800446c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0310 	and.w	r3, r3, #16
 8004476:	2b00      	cmp	r3, #0
 8004478:	d008      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800447a:	4b2c      	ldr	r3, [pc, #176]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800447c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800447e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	4929      	ldr	r1, [pc, #164]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004488:	4313      	orrs	r3, r2
 800448a:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004494:	2b00      	cmp	r3, #0
 8004496:	d008      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004498:	4b24      	ldr	r3, [pc, #144]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a4:	4921      	ldr	r1, [pc, #132]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d008      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80044b6:	4b1d      	ldr	r3, [pc, #116]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ba:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c2:	491a      	ldr	r1, [pc, #104]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d008      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80044d4:	4b15      	ldr	r3, [pc, #84]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d8:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e0:	4912      	ldr	r1, [pc, #72]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d008      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80044f2:	4b0e      	ldr	r3, [pc, #56]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044fe:	490b      	ldr	r1, [pc, #44]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004500:	4313      	orrs	r3, r2
 8004502:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d008      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004510:	4b06      	ldr	r3, [pc, #24]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004514:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800451c:	4903      	ldr	r1, [pc, #12]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800451e:	4313      	orrs	r3, r2
 8004520:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3748      	adds	r7, #72	@ 0x48
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	40021000 	.word	0x40021000

08004530 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e049      	b.n	80045d6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d106      	bne.n	800455c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7fd f95e 	bl	8001818 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2202      	movs	r2, #2
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	3304      	adds	r3, #4
 800456c:	4619      	mov	r1, r3
 800456e:	4610      	mov	r0, r2
 8004570:	f000 fa4a 	bl	8004a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3708      	adds	r7, #8
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
	...

080045e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d109      	bne.n	8004604 <HAL_TIM_PWM_Start+0x24>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	bf14      	ite	ne
 80045fc:	2301      	movne	r3, #1
 80045fe:	2300      	moveq	r3, #0
 8004600:	b2db      	uxtb	r3, r3
 8004602:	e03c      	b.n	800467e <HAL_TIM_PWM_Start+0x9e>
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	2b04      	cmp	r3, #4
 8004608:	d109      	bne.n	800461e <HAL_TIM_PWM_Start+0x3e>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b01      	cmp	r3, #1
 8004614:	bf14      	ite	ne
 8004616:	2301      	movne	r3, #1
 8004618:	2300      	moveq	r3, #0
 800461a:	b2db      	uxtb	r3, r3
 800461c:	e02f      	b.n	800467e <HAL_TIM_PWM_Start+0x9e>
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	2b08      	cmp	r3, #8
 8004622:	d109      	bne.n	8004638 <HAL_TIM_PWM_Start+0x58>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b01      	cmp	r3, #1
 800462e:	bf14      	ite	ne
 8004630:	2301      	movne	r3, #1
 8004632:	2300      	moveq	r3, #0
 8004634:	b2db      	uxtb	r3, r3
 8004636:	e022      	b.n	800467e <HAL_TIM_PWM_Start+0x9e>
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	2b0c      	cmp	r3, #12
 800463c:	d109      	bne.n	8004652 <HAL_TIM_PWM_Start+0x72>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b01      	cmp	r3, #1
 8004648:	bf14      	ite	ne
 800464a:	2301      	movne	r3, #1
 800464c:	2300      	moveq	r3, #0
 800464e:	b2db      	uxtb	r3, r3
 8004650:	e015      	b.n	800467e <HAL_TIM_PWM_Start+0x9e>
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	2b10      	cmp	r3, #16
 8004656:	d109      	bne.n	800466c <HAL_TIM_PWM_Start+0x8c>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b01      	cmp	r3, #1
 8004662:	bf14      	ite	ne
 8004664:	2301      	movne	r3, #1
 8004666:	2300      	moveq	r3, #0
 8004668:	b2db      	uxtb	r3, r3
 800466a:	e008      	b.n	800467e <HAL_TIM_PWM_Start+0x9e>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2b01      	cmp	r3, #1
 8004676:	bf14      	ite	ne
 8004678:	2301      	movne	r3, #1
 800467a:	2300      	moveq	r3, #0
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e097      	b.n	80047b6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d104      	bne.n	8004696 <HAL_TIM_PWM_Start+0xb6>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2202      	movs	r2, #2
 8004690:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004694:	e023      	b.n	80046de <HAL_TIM_PWM_Start+0xfe>
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	2b04      	cmp	r3, #4
 800469a:	d104      	bne.n	80046a6 <HAL_TIM_PWM_Start+0xc6>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046a4:	e01b      	b.n	80046de <HAL_TIM_PWM_Start+0xfe>
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	2b08      	cmp	r3, #8
 80046aa:	d104      	bne.n	80046b6 <HAL_TIM_PWM_Start+0xd6>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046b4:	e013      	b.n	80046de <HAL_TIM_PWM_Start+0xfe>
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2b0c      	cmp	r3, #12
 80046ba:	d104      	bne.n	80046c6 <HAL_TIM_PWM_Start+0xe6>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2202      	movs	r2, #2
 80046c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80046c4:	e00b      	b.n	80046de <HAL_TIM_PWM_Start+0xfe>
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	2b10      	cmp	r3, #16
 80046ca:	d104      	bne.n	80046d6 <HAL_TIM_PWM_Start+0xf6>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2202      	movs	r2, #2
 80046d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046d4:	e003      	b.n	80046de <HAL_TIM_PWM_Start+0xfe>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2202      	movs	r2, #2
 80046da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2201      	movs	r2, #1
 80046e4:	6839      	ldr	r1, [r7, #0]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 fd00 	bl	80050ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a33      	ldr	r2, [pc, #204]	@ (80047c0 <HAL_TIM_PWM_Start+0x1e0>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d013      	beq.n	800471e <HAL_TIM_PWM_Start+0x13e>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a32      	ldr	r2, [pc, #200]	@ (80047c4 <HAL_TIM_PWM_Start+0x1e4>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d00e      	beq.n	800471e <HAL_TIM_PWM_Start+0x13e>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a30      	ldr	r2, [pc, #192]	@ (80047c8 <HAL_TIM_PWM_Start+0x1e8>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d009      	beq.n	800471e <HAL_TIM_PWM_Start+0x13e>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a2f      	ldr	r2, [pc, #188]	@ (80047cc <HAL_TIM_PWM_Start+0x1ec>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d004      	beq.n	800471e <HAL_TIM_PWM_Start+0x13e>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a2d      	ldr	r2, [pc, #180]	@ (80047d0 <HAL_TIM_PWM_Start+0x1f0>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d101      	bne.n	8004722 <HAL_TIM_PWM_Start+0x142>
 800471e:	2301      	movs	r3, #1
 8004720:	e000      	b.n	8004724 <HAL_TIM_PWM_Start+0x144>
 8004722:	2300      	movs	r3, #0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d007      	beq.n	8004738 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004736:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a20      	ldr	r2, [pc, #128]	@ (80047c0 <HAL_TIM_PWM_Start+0x1e0>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d018      	beq.n	8004774 <HAL_TIM_PWM_Start+0x194>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800474a:	d013      	beq.n	8004774 <HAL_TIM_PWM_Start+0x194>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a20      	ldr	r2, [pc, #128]	@ (80047d4 <HAL_TIM_PWM_Start+0x1f4>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d00e      	beq.n	8004774 <HAL_TIM_PWM_Start+0x194>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a1f      	ldr	r2, [pc, #124]	@ (80047d8 <HAL_TIM_PWM_Start+0x1f8>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d009      	beq.n	8004774 <HAL_TIM_PWM_Start+0x194>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a17      	ldr	r2, [pc, #92]	@ (80047c4 <HAL_TIM_PWM_Start+0x1e4>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d004      	beq.n	8004774 <HAL_TIM_PWM_Start+0x194>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a16      	ldr	r2, [pc, #88]	@ (80047c8 <HAL_TIM_PWM_Start+0x1e8>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d115      	bne.n	80047a0 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689a      	ldr	r2, [r3, #8]
 800477a:	4b18      	ldr	r3, [pc, #96]	@ (80047dc <HAL_TIM_PWM_Start+0x1fc>)
 800477c:	4013      	ands	r3, r2
 800477e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2b06      	cmp	r3, #6
 8004784:	d015      	beq.n	80047b2 <HAL_TIM_PWM_Start+0x1d2>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800478c:	d011      	beq.n	80047b2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f042 0201 	orr.w	r2, r2, #1
 800479c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800479e:	e008      	b.n	80047b2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f042 0201 	orr.w	r2, r2, #1
 80047ae:	601a      	str	r2, [r3, #0]
 80047b0:	e000      	b.n	80047b4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	40012c00 	.word	0x40012c00
 80047c4:	40013400 	.word	0x40013400
 80047c8:	40014000 	.word	0x40014000
 80047cc:	40014400 	.word	0x40014400
 80047d0:	40014800 	.word	0x40014800
 80047d4:	40000400 	.word	0x40000400
 80047d8:	40000800 	.word	0x40000800
 80047dc:	00010007 	.word	0x00010007

080047e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047ec:	2300      	movs	r3, #0
 80047ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d101      	bne.n	80047fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80047fa:	2302      	movs	r3, #2
 80047fc:	e0ff      	b.n	80049fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b14      	cmp	r3, #20
 800480a:	f200 80f0 	bhi.w	80049ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800480e:	a201      	add	r2, pc, #4	@ (adr r2, 8004814 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004814:	08004869 	.word	0x08004869
 8004818:	080049ef 	.word	0x080049ef
 800481c:	080049ef 	.word	0x080049ef
 8004820:	080049ef 	.word	0x080049ef
 8004824:	080048a9 	.word	0x080048a9
 8004828:	080049ef 	.word	0x080049ef
 800482c:	080049ef 	.word	0x080049ef
 8004830:	080049ef 	.word	0x080049ef
 8004834:	080048eb 	.word	0x080048eb
 8004838:	080049ef 	.word	0x080049ef
 800483c:	080049ef 	.word	0x080049ef
 8004840:	080049ef 	.word	0x080049ef
 8004844:	0800492b 	.word	0x0800492b
 8004848:	080049ef 	.word	0x080049ef
 800484c:	080049ef 	.word	0x080049ef
 8004850:	080049ef 	.word	0x080049ef
 8004854:	0800496d 	.word	0x0800496d
 8004858:	080049ef 	.word	0x080049ef
 800485c:	080049ef 	.word	0x080049ef
 8004860:	080049ef 	.word	0x080049ef
 8004864:	080049ad 	.word	0x080049ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68b9      	ldr	r1, [r7, #8]
 800486e:	4618      	mov	r0, r3
 8004870:	f000 f966 	bl	8004b40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	699a      	ldr	r2, [r3, #24]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f042 0208 	orr.w	r2, r2, #8
 8004882:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	699a      	ldr	r2, [r3, #24]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f022 0204 	bic.w	r2, r2, #4
 8004892:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6999      	ldr	r1, [r3, #24]
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	691a      	ldr	r2, [r3, #16]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	619a      	str	r2, [r3, #24]
      break;
 80048a6:	e0a5      	b.n	80049f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68b9      	ldr	r1, [r7, #8]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 f9d6 	bl	8004c60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	699a      	ldr	r2, [r3, #24]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	699a      	ldr	r2, [r3, #24]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6999      	ldr	r1, [r3, #24]
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	021a      	lsls	r2, r3, #8
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	430a      	orrs	r2, r1
 80048e6:	619a      	str	r2, [r3, #24]
      break;
 80048e8:	e084      	b.n	80049f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68b9      	ldr	r1, [r7, #8]
 80048f0:	4618      	mov	r0, r3
 80048f2:	f000 fa3f 	bl	8004d74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	69da      	ldr	r2, [r3, #28]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f042 0208 	orr.w	r2, r2, #8
 8004904:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	69da      	ldr	r2, [r3, #28]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f022 0204 	bic.w	r2, r2, #4
 8004914:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	69d9      	ldr	r1, [r3, #28]
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	691a      	ldr	r2, [r3, #16]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	430a      	orrs	r2, r1
 8004926:	61da      	str	r2, [r3, #28]
      break;
 8004928:	e064      	b.n	80049f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68b9      	ldr	r1, [r7, #8]
 8004930:	4618      	mov	r0, r3
 8004932:	f000 faa7 	bl	8004e84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	69da      	ldr	r2, [r3, #28]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004944:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	69da      	ldr	r2, [r3, #28]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004954:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	69d9      	ldr	r1, [r3, #28]
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	021a      	lsls	r2, r3, #8
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	61da      	str	r2, [r3, #28]
      break;
 800496a:	e043      	b.n	80049f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68b9      	ldr	r1, [r7, #8]
 8004972:	4618      	mov	r0, r3
 8004974:	f000 faf0 	bl	8004f58 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f042 0208 	orr.w	r2, r2, #8
 8004986:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f022 0204 	bic.w	r2, r2, #4
 8004996:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	691a      	ldr	r2, [r3, #16]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80049aa:	e023      	b.n	80049f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68b9      	ldr	r1, [r7, #8]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 fb34 	bl	8005020 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049c6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049d6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	021a      	lsls	r2, r3, #8
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80049ec:	e002      	b.n	80049f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	75fb      	strb	r3, [r7, #23]
      break;
 80049f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80049fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3718      	adds	r7, #24
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop

08004a08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a42      	ldr	r2, [pc, #264]	@ (8004b24 <TIM_Base_SetConfig+0x11c>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d00f      	beq.n	8004a40 <TIM_Base_SetConfig+0x38>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a26:	d00b      	beq.n	8004a40 <TIM_Base_SetConfig+0x38>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a3f      	ldr	r2, [pc, #252]	@ (8004b28 <TIM_Base_SetConfig+0x120>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d007      	beq.n	8004a40 <TIM_Base_SetConfig+0x38>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a3e      	ldr	r2, [pc, #248]	@ (8004b2c <TIM_Base_SetConfig+0x124>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d003      	beq.n	8004a40 <TIM_Base_SetConfig+0x38>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a3d      	ldr	r2, [pc, #244]	@ (8004b30 <TIM_Base_SetConfig+0x128>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d108      	bne.n	8004a52 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a33      	ldr	r2, [pc, #204]	@ (8004b24 <TIM_Base_SetConfig+0x11c>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d01b      	beq.n	8004a92 <TIM_Base_SetConfig+0x8a>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a60:	d017      	beq.n	8004a92 <TIM_Base_SetConfig+0x8a>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a30      	ldr	r2, [pc, #192]	@ (8004b28 <TIM_Base_SetConfig+0x120>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d013      	beq.n	8004a92 <TIM_Base_SetConfig+0x8a>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a2f      	ldr	r2, [pc, #188]	@ (8004b2c <TIM_Base_SetConfig+0x124>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d00f      	beq.n	8004a92 <TIM_Base_SetConfig+0x8a>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a2e      	ldr	r2, [pc, #184]	@ (8004b30 <TIM_Base_SetConfig+0x128>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d00b      	beq.n	8004a92 <TIM_Base_SetConfig+0x8a>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a2d      	ldr	r2, [pc, #180]	@ (8004b34 <TIM_Base_SetConfig+0x12c>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d007      	beq.n	8004a92 <TIM_Base_SetConfig+0x8a>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a2c      	ldr	r2, [pc, #176]	@ (8004b38 <TIM_Base_SetConfig+0x130>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d003      	beq.n	8004a92 <TIM_Base_SetConfig+0x8a>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a2b      	ldr	r2, [pc, #172]	@ (8004b3c <TIM_Base_SetConfig+0x134>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d108      	bne.n	8004aa4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a16      	ldr	r2, [pc, #88]	@ (8004b24 <TIM_Base_SetConfig+0x11c>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d00f      	beq.n	8004af0 <TIM_Base_SetConfig+0xe8>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a17      	ldr	r2, [pc, #92]	@ (8004b30 <TIM_Base_SetConfig+0x128>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d00b      	beq.n	8004af0 <TIM_Base_SetConfig+0xe8>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a16      	ldr	r2, [pc, #88]	@ (8004b34 <TIM_Base_SetConfig+0x12c>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d007      	beq.n	8004af0 <TIM_Base_SetConfig+0xe8>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a15      	ldr	r2, [pc, #84]	@ (8004b38 <TIM_Base_SetConfig+0x130>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d003      	beq.n	8004af0 <TIM_Base_SetConfig+0xe8>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a14      	ldr	r2, [pc, #80]	@ (8004b3c <TIM_Base_SetConfig+0x134>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d103      	bne.n	8004af8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	691a      	ldr	r2, [r3, #16]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d105      	bne.n	8004b16 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	f023 0201 	bic.w	r2, r3, #1
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	611a      	str	r2, [r3, #16]
  }
}
 8004b16:	bf00      	nop
 8004b18:	3714      	adds	r7, #20
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	40012c00 	.word	0x40012c00
 8004b28:	40000400 	.word	0x40000400
 8004b2c:	40000800 	.word	0x40000800
 8004b30:	40013400 	.word	0x40013400
 8004b34:	40014000 	.word	0x40014000
 8004b38:	40014400 	.word	0x40014400
 8004b3c:	40014800 	.word	0x40014800

08004b40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b087      	sub	sp, #28
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a1b      	ldr	r3, [r3, #32]
 8004b54:	f023 0201 	bic.w	r2, r3, #1
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f023 0303 	bic.w	r3, r3, #3
 8004b7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f023 0302 	bic.w	r3, r3, #2
 8004b8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a2c      	ldr	r2, [pc, #176]	@ (8004c4c <TIM_OC1_SetConfig+0x10c>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d00f      	beq.n	8004bc0 <TIM_OC1_SetConfig+0x80>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a2b      	ldr	r2, [pc, #172]	@ (8004c50 <TIM_OC1_SetConfig+0x110>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d00b      	beq.n	8004bc0 <TIM_OC1_SetConfig+0x80>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a2a      	ldr	r2, [pc, #168]	@ (8004c54 <TIM_OC1_SetConfig+0x114>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d007      	beq.n	8004bc0 <TIM_OC1_SetConfig+0x80>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a29      	ldr	r2, [pc, #164]	@ (8004c58 <TIM_OC1_SetConfig+0x118>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d003      	beq.n	8004bc0 <TIM_OC1_SetConfig+0x80>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a28      	ldr	r2, [pc, #160]	@ (8004c5c <TIM_OC1_SetConfig+0x11c>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d10c      	bne.n	8004bda <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	f023 0308 	bic.w	r3, r3, #8
 8004bc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f023 0304 	bic.w	r3, r3, #4
 8004bd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a1b      	ldr	r2, [pc, #108]	@ (8004c4c <TIM_OC1_SetConfig+0x10c>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d00f      	beq.n	8004c02 <TIM_OC1_SetConfig+0xc2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a1a      	ldr	r2, [pc, #104]	@ (8004c50 <TIM_OC1_SetConfig+0x110>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d00b      	beq.n	8004c02 <TIM_OC1_SetConfig+0xc2>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a19      	ldr	r2, [pc, #100]	@ (8004c54 <TIM_OC1_SetConfig+0x114>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d007      	beq.n	8004c02 <TIM_OC1_SetConfig+0xc2>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a18      	ldr	r2, [pc, #96]	@ (8004c58 <TIM_OC1_SetConfig+0x118>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d003      	beq.n	8004c02 <TIM_OC1_SetConfig+0xc2>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a17      	ldr	r2, [pc, #92]	@ (8004c5c <TIM_OC1_SetConfig+0x11c>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d111      	bne.n	8004c26 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	693a      	ldr	r2, [r7, #16]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	693a      	ldr	r2, [r7, #16]
 8004c2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	685a      	ldr	r2, [r3, #4]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	621a      	str	r2, [r3, #32]
}
 8004c40:	bf00      	nop
 8004c42:	371c      	adds	r7, #28
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	40012c00 	.word	0x40012c00
 8004c50:	40013400 	.word	0x40013400
 8004c54:	40014000 	.word	0x40014000
 8004c58:	40014400 	.word	0x40014400
 8004c5c:	40014800 	.word	0x40014800

08004c60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b087      	sub	sp, #28
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a1b      	ldr	r3, [r3, #32]
 8004c74:	f023 0210 	bic.w	r2, r3, #16
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	021b      	lsls	r3, r3, #8
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	f023 0320 	bic.w	r3, r3, #32
 8004cae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	011b      	lsls	r3, r3, #4
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a28      	ldr	r2, [pc, #160]	@ (8004d60 <TIM_OC2_SetConfig+0x100>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d003      	beq.n	8004ccc <TIM_OC2_SetConfig+0x6c>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a27      	ldr	r2, [pc, #156]	@ (8004d64 <TIM_OC2_SetConfig+0x104>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d10d      	bne.n	8004ce8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	011b      	lsls	r3, r3, #4
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ce6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a1d      	ldr	r2, [pc, #116]	@ (8004d60 <TIM_OC2_SetConfig+0x100>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d00f      	beq.n	8004d10 <TIM_OC2_SetConfig+0xb0>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a1c      	ldr	r2, [pc, #112]	@ (8004d64 <TIM_OC2_SetConfig+0x104>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d00b      	beq.n	8004d10 <TIM_OC2_SetConfig+0xb0>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a1b      	ldr	r2, [pc, #108]	@ (8004d68 <TIM_OC2_SetConfig+0x108>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d007      	beq.n	8004d10 <TIM_OC2_SetConfig+0xb0>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a1a      	ldr	r2, [pc, #104]	@ (8004d6c <TIM_OC2_SetConfig+0x10c>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d003      	beq.n	8004d10 <TIM_OC2_SetConfig+0xb0>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a19      	ldr	r2, [pc, #100]	@ (8004d70 <TIM_OC2_SetConfig+0x110>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d113      	bne.n	8004d38 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d16:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d1e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	695b      	ldr	r3, [r3, #20]
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685a      	ldr	r2, [r3, #4]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	621a      	str	r2, [r3, #32]
}
 8004d52:	bf00      	nop
 8004d54:	371c      	adds	r7, #28
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	40012c00 	.word	0x40012c00
 8004d64:	40013400 	.word	0x40013400
 8004d68:	40014000 	.word	0x40014000
 8004d6c:	40014400 	.word	0x40014400
 8004d70:	40014800 	.word	0x40014800

08004d74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b087      	sub	sp, #28
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a1b      	ldr	r3, [r3, #32]
 8004d88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	69db      	ldr	r3, [r3, #28]
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004da2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f023 0303 	bic.w	r3, r3, #3
 8004dae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004dc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	021b      	lsls	r3, r3, #8
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a27      	ldr	r2, [pc, #156]	@ (8004e70 <TIM_OC3_SetConfig+0xfc>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d003      	beq.n	8004dde <TIM_OC3_SetConfig+0x6a>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a26      	ldr	r2, [pc, #152]	@ (8004e74 <TIM_OC3_SetConfig+0x100>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d10d      	bne.n	8004dfa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004de4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	021b      	lsls	r3, r3, #8
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004df8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a1c      	ldr	r2, [pc, #112]	@ (8004e70 <TIM_OC3_SetConfig+0xfc>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d00f      	beq.n	8004e22 <TIM_OC3_SetConfig+0xae>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a1b      	ldr	r2, [pc, #108]	@ (8004e74 <TIM_OC3_SetConfig+0x100>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d00b      	beq.n	8004e22 <TIM_OC3_SetConfig+0xae>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a1a      	ldr	r2, [pc, #104]	@ (8004e78 <TIM_OC3_SetConfig+0x104>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d007      	beq.n	8004e22 <TIM_OC3_SetConfig+0xae>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a19      	ldr	r2, [pc, #100]	@ (8004e7c <TIM_OC3_SetConfig+0x108>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d003      	beq.n	8004e22 <TIM_OC3_SetConfig+0xae>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a18      	ldr	r2, [pc, #96]	@ (8004e80 <TIM_OC3_SetConfig+0x10c>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d113      	bne.n	8004e4a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	011b      	lsls	r3, r3, #4
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	011b      	lsls	r3, r3, #4
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	685a      	ldr	r2, [r3, #4]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	621a      	str	r2, [r3, #32]
}
 8004e64:	bf00      	nop
 8004e66:	371c      	adds	r7, #28
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	40012c00 	.word	0x40012c00
 8004e74:	40013400 	.word	0x40013400
 8004e78:	40014000 	.word	0x40014000
 8004e7c:	40014400 	.word	0x40014400
 8004e80:	40014800 	.word	0x40014800

08004e84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b087      	sub	sp, #28
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a1b      	ldr	r3, [r3, #32]
 8004e98:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	69db      	ldr	r3, [r3, #28]
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004eb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ebe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	021b      	lsls	r3, r3, #8
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ed2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	031b      	lsls	r3, r3, #12
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a18      	ldr	r2, [pc, #96]	@ (8004f44 <TIM_OC4_SetConfig+0xc0>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d00f      	beq.n	8004f08 <TIM_OC4_SetConfig+0x84>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a17      	ldr	r2, [pc, #92]	@ (8004f48 <TIM_OC4_SetConfig+0xc4>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d00b      	beq.n	8004f08 <TIM_OC4_SetConfig+0x84>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a16      	ldr	r2, [pc, #88]	@ (8004f4c <TIM_OC4_SetConfig+0xc8>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d007      	beq.n	8004f08 <TIM_OC4_SetConfig+0x84>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a15      	ldr	r2, [pc, #84]	@ (8004f50 <TIM_OC4_SetConfig+0xcc>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d003      	beq.n	8004f08 <TIM_OC4_SetConfig+0x84>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a14      	ldr	r2, [pc, #80]	@ (8004f54 <TIM_OC4_SetConfig+0xd0>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d109      	bne.n	8004f1c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	019b      	lsls	r3, r3, #6
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	621a      	str	r2, [r3, #32]
}
 8004f36:	bf00      	nop
 8004f38:	371c      	adds	r7, #28
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	40012c00 	.word	0x40012c00
 8004f48:	40013400 	.word	0x40013400
 8004f4c:	40014000 	.word	0x40014000
 8004f50:	40014400 	.word	0x40014400
 8004f54:	40014800 	.word	0x40014800

08004f58 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b087      	sub	sp, #28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004f9c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	041b      	lsls	r3, r3, #16
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a17      	ldr	r2, [pc, #92]	@ (800500c <TIM_OC5_SetConfig+0xb4>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d00f      	beq.n	8004fd2 <TIM_OC5_SetConfig+0x7a>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a16      	ldr	r2, [pc, #88]	@ (8005010 <TIM_OC5_SetConfig+0xb8>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d00b      	beq.n	8004fd2 <TIM_OC5_SetConfig+0x7a>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a15      	ldr	r2, [pc, #84]	@ (8005014 <TIM_OC5_SetConfig+0xbc>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d007      	beq.n	8004fd2 <TIM_OC5_SetConfig+0x7a>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a14      	ldr	r2, [pc, #80]	@ (8005018 <TIM_OC5_SetConfig+0xc0>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d003      	beq.n	8004fd2 <TIM_OC5_SetConfig+0x7a>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a13      	ldr	r2, [pc, #76]	@ (800501c <TIM_OC5_SetConfig+0xc4>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d109      	bne.n	8004fe6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fd8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	021b      	lsls	r3, r3, #8
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	693a      	ldr	r2, [r7, #16]
 8004ffe:	621a      	str	r2, [r3, #32]
}
 8005000:	bf00      	nop
 8005002:	371c      	adds	r7, #28
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr
 800500c:	40012c00 	.word	0x40012c00
 8005010:	40013400 	.word	0x40013400
 8005014:	40014000 	.word	0x40014000
 8005018:	40014400 	.word	0x40014400
 800501c:	40014800 	.word	0x40014800

08005020 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005020:	b480      	push	{r7}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a1b      	ldr	r3, [r3, #32]
 8005034:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800504e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005052:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	021b      	lsls	r3, r3, #8
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	4313      	orrs	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005066:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	051b      	lsls	r3, r3, #20
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	4313      	orrs	r3, r2
 8005072:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a18      	ldr	r2, [pc, #96]	@ (80050d8 <TIM_OC6_SetConfig+0xb8>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d00f      	beq.n	800509c <TIM_OC6_SetConfig+0x7c>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a17      	ldr	r2, [pc, #92]	@ (80050dc <TIM_OC6_SetConfig+0xbc>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d00b      	beq.n	800509c <TIM_OC6_SetConfig+0x7c>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a16      	ldr	r2, [pc, #88]	@ (80050e0 <TIM_OC6_SetConfig+0xc0>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d007      	beq.n	800509c <TIM_OC6_SetConfig+0x7c>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a15      	ldr	r2, [pc, #84]	@ (80050e4 <TIM_OC6_SetConfig+0xc4>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d003      	beq.n	800509c <TIM_OC6_SetConfig+0x7c>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a14      	ldr	r2, [pc, #80]	@ (80050e8 <TIM_OC6_SetConfig+0xc8>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d109      	bne.n	80050b0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	029b      	lsls	r3, r3, #10
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	685a      	ldr	r2, [r3, #4]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	621a      	str	r2, [r3, #32]
}
 80050ca:	bf00      	nop
 80050cc:	371c      	adds	r7, #28
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	40012c00 	.word	0x40012c00
 80050dc:	40013400 	.word	0x40013400
 80050e0:	40014000 	.word	0x40014000
 80050e4:	40014400 	.word	0x40014400
 80050e8:	40014800 	.word	0x40014800

080050ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b087      	sub	sp, #28
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	f003 031f 	and.w	r3, r3, #31
 80050fe:	2201      	movs	r2, #1
 8005100:	fa02 f303 	lsl.w	r3, r2, r3
 8005104:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6a1a      	ldr	r2, [r3, #32]
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	43db      	mvns	r3, r3
 800510e:	401a      	ands	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6a1a      	ldr	r2, [r3, #32]
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	f003 031f 	and.w	r3, r3, #31
 800511e:	6879      	ldr	r1, [r7, #4]
 8005120:	fa01 f303 	lsl.w	r3, r1, r3
 8005124:	431a      	orrs	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	621a      	str	r2, [r3, #32]
}
 800512a:	bf00      	nop
 800512c:	371c      	adds	r7, #28
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
	...

08005138 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005148:	2b01      	cmp	r3, #1
 800514a:	d101      	bne.n	8005150 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800514c:	2302      	movs	r3, #2
 800514e:	e063      	b.n	8005218 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2202      	movs	r2, #2
 800515c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a2b      	ldr	r2, [pc, #172]	@ (8005224 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d004      	beq.n	8005184 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a2a      	ldr	r2, [pc, #168]	@ (8005228 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d108      	bne.n	8005196 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800518a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	4313      	orrs	r3, r2
 8005194:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800519c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a1b      	ldr	r2, [pc, #108]	@ (8005224 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d018      	beq.n	80051ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051c2:	d013      	beq.n	80051ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a18      	ldr	r2, [pc, #96]	@ (800522c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d00e      	beq.n	80051ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a17      	ldr	r2, [pc, #92]	@ (8005230 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d009      	beq.n	80051ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a12      	ldr	r2, [pc, #72]	@ (8005228 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d004      	beq.n	80051ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a13      	ldr	r2, [pc, #76]	@ (8005234 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d10c      	bne.n	8005206 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	68ba      	ldr	r2, [r7, #8]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2201      	movs	r2, #1
 800520a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3714      	adds	r7, #20
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr
 8005224:	40012c00 	.word	0x40012c00
 8005228:	40013400 	.word	0x40013400
 800522c:	40000400 	.word	0x40000400
 8005230:	40000800 	.word	0x40000800
 8005234:	40014000 	.word	0x40014000

08005238 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005242:	2300      	movs	r3, #0
 8005244:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800524c:	2b01      	cmp	r3, #1
 800524e:	d101      	bne.n	8005254 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005250:	2302      	movs	r3, #2
 8005252:	e065      	b.n	8005320 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	4313      	orrs	r3, r2
 8005268:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	4313      	orrs	r3, r2
 8005276:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	4313      	orrs	r3, r2
 8005284:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4313      	orrs	r3, r2
 8005292:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	4313      	orrs	r3, r2
 80052a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ba:	4313      	orrs	r3, r2
 80052bc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	041b      	lsls	r3, r3, #16
 80052ca:	4313      	orrs	r3, r2
 80052cc:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a16      	ldr	r2, [pc, #88]	@ (800532c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d004      	beq.n	80052e2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a14      	ldr	r2, [pc, #80]	@ (8005330 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d115      	bne.n	800530e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ec:	051b      	lsls	r3, r3, #20
 80052ee:	4313      	orrs	r3, r2
 80052f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	69db      	ldr	r3, [r3, #28]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	4313      	orrs	r3, r2
 800530c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3714      	adds	r7, #20
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr
 800532c:	40012c00 	.word	0x40012c00
 8005330:	40013400 	.word	0x40013400

08005334 <__cvt>:
 8005334:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005338:	ec57 6b10 	vmov	r6, r7, d0
 800533c:	2f00      	cmp	r7, #0
 800533e:	460c      	mov	r4, r1
 8005340:	4619      	mov	r1, r3
 8005342:	463b      	mov	r3, r7
 8005344:	bfbb      	ittet	lt
 8005346:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800534a:	461f      	movlt	r7, r3
 800534c:	2300      	movge	r3, #0
 800534e:	232d      	movlt	r3, #45	@ 0x2d
 8005350:	700b      	strb	r3, [r1, #0]
 8005352:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005354:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005358:	4691      	mov	r9, r2
 800535a:	f023 0820 	bic.w	r8, r3, #32
 800535e:	bfbc      	itt	lt
 8005360:	4632      	movlt	r2, r6
 8005362:	4616      	movlt	r6, r2
 8005364:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005368:	d005      	beq.n	8005376 <__cvt+0x42>
 800536a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800536e:	d100      	bne.n	8005372 <__cvt+0x3e>
 8005370:	3401      	adds	r4, #1
 8005372:	2102      	movs	r1, #2
 8005374:	e000      	b.n	8005378 <__cvt+0x44>
 8005376:	2103      	movs	r1, #3
 8005378:	ab03      	add	r3, sp, #12
 800537a:	9301      	str	r3, [sp, #4]
 800537c:	ab02      	add	r3, sp, #8
 800537e:	9300      	str	r3, [sp, #0]
 8005380:	ec47 6b10 	vmov	d0, r6, r7
 8005384:	4653      	mov	r3, sl
 8005386:	4622      	mov	r2, r4
 8005388:	f001 f876 	bl	8006478 <_dtoa_r>
 800538c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005390:	4605      	mov	r5, r0
 8005392:	d119      	bne.n	80053c8 <__cvt+0x94>
 8005394:	f019 0f01 	tst.w	r9, #1
 8005398:	d00e      	beq.n	80053b8 <__cvt+0x84>
 800539a:	eb00 0904 	add.w	r9, r0, r4
 800539e:	2200      	movs	r2, #0
 80053a0:	2300      	movs	r3, #0
 80053a2:	4630      	mov	r0, r6
 80053a4:	4639      	mov	r1, r7
 80053a6:	f7fb fb8f 	bl	8000ac8 <__aeabi_dcmpeq>
 80053aa:	b108      	cbz	r0, 80053b0 <__cvt+0x7c>
 80053ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80053b0:	2230      	movs	r2, #48	@ 0x30
 80053b2:	9b03      	ldr	r3, [sp, #12]
 80053b4:	454b      	cmp	r3, r9
 80053b6:	d31e      	bcc.n	80053f6 <__cvt+0xc2>
 80053b8:	9b03      	ldr	r3, [sp, #12]
 80053ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80053bc:	1b5b      	subs	r3, r3, r5
 80053be:	4628      	mov	r0, r5
 80053c0:	6013      	str	r3, [r2, #0]
 80053c2:	b004      	add	sp, #16
 80053c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80053cc:	eb00 0904 	add.w	r9, r0, r4
 80053d0:	d1e5      	bne.n	800539e <__cvt+0x6a>
 80053d2:	7803      	ldrb	r3, [r0, #0]
 80053d4:	2b30      	cmp	r3, #48	@ 0x30
 80053d6:	d10a      	bne.n	80053ee <__cvt+0xba>
 80053d8:	2200      	movs	r2, #0
 80053da:	2300      	movs	r3, #0
 80053dc:	4630      	mov	r0, r6
 80053de:	4639      	mov	r1, r7
 80053e0:	f7fb fb72 	bl	8000ac8 <__aeabi_dcmpeq>
 80053e4:	b918      	cbnz	r0, 80053ee <__cvt+0xba>
 80053e6:	f1c4 0401 	rsb	r4, r4, #1
 80053ea:	f8ca 4000 	str.w	r4, [sl]
 80053ee:	f8da 3000 	ldr.w	r3, [sl]
 80053f2:	4499      	add	r9, r3
 80053f4:	e7d3      	b.n	800539e <__cvt+0x6a>
 80053f6:	1c59      	adds	r1, r3, #1
 80053f8:	9103      	str	r1, [sp, #12]
 80053fa:	701a      	strb	r2, [r3, #0]
 80053fc:	e7d9      	b.n	80053b2 <__cvt+0x7e>

080053fe <__exponent>:
 80053fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005400:	2900      	cmp	r1, #0
 8005402:	bfba      	itte	lt
 8005404:	4249      	neglt	r1, r1
 8005406:	232d      	movlt	r3, #45	@ 0x2d
 8005408:	232b      	movge	r3, #43	@ 0x2b
 800540a:	2909      	cmp	r1, #9
 800540c:	7002      	strb	r2, [r0, #0]
 800540e:	7043      	strb	r3, [r0, #1]
 8005410:	dd29      	ble.n	8005466 <__exponent+0x68>
 8005412:	f10d 0307 	add.w	r3, sp, #7
 8005416:	461d      	mov	r5, r3
 8005418:	270a      	movs	r7, #10
 800541a:	461a      	mov	r2, r3
 800541c:	fbb1 f6f7 	udiv	r6, r1, r7
 8005420:	fb07 1416 	mls	r4, r7, r6, r1
 8005424:	3430      	adds	r4, #48	@ 0x30
 8005426:	f802 4c01 	strb.w	r4, [r2, #-1]
 800542a:	460c      	mov	r4, r1
 800542c:	2c63      	cmp	r4, #99	@ 0x63
 800542e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005432:	4631      	mov	r1, r6
 8005434:	dcf1      	bgt.n	800541a <__exponent+0x1c>
 8005436:	3130      	adds	r1, #48	@ 0x30
 8005438:	1e94      	subs	r4, r2, #2
 800543a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800543e:	1c41      	adds	r1, r0, #1
 8005440:	4623      	mov	r3, r4
 8005442:	42ab      	cmp	r3, r5
 8005444:	d30a      	bcc.n	800545c <__exponent+0x5e>
 8005446:	f10d 0309 	add.w	r3, sp, #9
 800544a:	1a9b      	subs	r3, r3, r2
 800544c:	42ac      	cmp	r4, r5
 800544e:	bf88      	it	hi
 8005450:	2300      	movhi	r3, #0
 8005452:	3302      	adds	r3, #2
 8005454:	4403      	add	r3, r0
 8005456:	1a18      	subs	r0, r3, r0
 8005458:	b003      	add	sp, #12
 800545a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800545c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005460:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005464:	e7ed      	b.n	8005442 <__exponent+0x44>
 8005466:	2330      	movs	r3, #48	@ 0x30
 8005468:	3130      	adds	r1, #48	@ 0x30
 800546a:	7083      	strb	r3, [r0, #2]
 800546c:	70c1      	strb	r1, [r0, #3]
 800546e:	1d03      	adds	r3, r0, #4
 8005470:	e7f1      	b.n	8005456 <__exponent+0x58>
	...

08005474 <_printf_float>:
 8005474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005478:	b08d      	sub	sp, #52	@ 0x34
 800547a:	460c      	mov	r4, r1
 800547c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005480:	4616      	mov	r6, r2
 8005482:	461f      	mov	r7, r3
 8005484:	4605      	mov	r5, r0
 8005486:	f000 feef 	bl	8006268 <_localeconv_r>
 800548a:	6803      	ldr	r3, [r0, #0]
 800548c:	9304      	str	r3, [sp, #16]
 800548e:	4618      	mov	r0, r3
 8005490:	f7fa feee 	bl	8000270 <strlen>
 8005494:	2300      	movs	r3, #0
 8005496:	930a      	str	r3, [sp, #40]	@ 0x28
 8005498:	f8d8 3000 	ldr.w	r3, [r8]
 800549c:	9005      	str	r0, [sp, #20]
 800549e:	3307      	adds	r3, #7
 80054a0:	f023 0307 	bic.w	r3, r3, #7
 80054a4:	f103 0208 	add.w	r2, r3, #8
 80054a8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80054ac:	f8d4 b000 	ldr.w	fp, [r4]
 80054b0:	f8c8 2000 	str.w	r2, [r8]
 80054b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80054b8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80054bc:	9307      	str	r3, [sp, #28]
 80054be:	f8cd 8018 	str.w	r8, [sp, #24]
 80054c2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80054c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054ca:	4b9c      	ldr	r3, [pc, #624]	@ (800573c <_printf_float+0x2c8>)
 80054cc:	f04f 32ff 	mov.w	r2, #4294967295
 80054d0:	f7fb fb2c 	bl	8000b2c <__aeabi_dcmpun>
 80054d4:	bb70      	cbnz	r0, 8005534 <_printf_float+0xc0>
 80054d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054da:	4b98      	ldr	r3, [pc, #608]	@ (800573c <_printf_float+0x2c8>)
 80054dc:	f04f 32ff 	mov.w	r2, #4294967295
 80054e0:	f7fb fb06 	bl	8000af0 <__aeabi_dcmple>
 80054e4:	bb30      	cbnz	r0, 8005534 <_printf_float+0xc0>
 80054e6:	2200      	movs	r2, #0
 80054e8:	2300      	movs	r3, #0
 80054ea:	4640      	mov	r0, r8
 80054ec:	4649      	mov	r1, r9
 80054ee:	f7fb faf5 	bl	8000adc <__aeabi_dcmplt>
 80054f2:	b110      	cbz	r0, 80054fa <_printf_float+0x86>
 80054f4:	232d      	movs	r3, #45	@ 0x2d
 80054f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054fa:	4a91      	ldr	r2, [pc, #580]	@ (8005740 <_printf_float+0x2cc>)
 80054fc:	4b91      	ldr	r3, [pc, #580]	@ (8005744 <_printf_float+0x2d0>)
 80054fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005502:	bf94      	ite	ls
 8005504:	4690      	movls	r8, r2
 8005506:	4698      	movhi	r8, r3
 8005508:	2303      	movs	r3, #3
 800550a:	6123      	str	r3, [r4, #16]
 800550c:	f02b 0304 	bic.w	r3, fp, #4
 8005510:	6023      	str	r3, [r4, #0]
 8005512:	f04f 0900 	mov.w	r9, #0
 8005516:	9700      	str	r7, [sp, #0]
 8005518:	4633      	mov	r3, r6
 800551a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800551c:	4621      	mov	r1, r4
 800551e:	4628      	mov	r0, r5
 8005520:	f000 f9d2 	bl	80058c8 <_printf_common>
 8005524:	3001      	adds	r0, #1
 8005526:	f040 808d 	bne.w	8005644 <_printf_float+0x1d0>
 800552a:	f04f 30ff 	mov.w	r0, #4294967295
 800552e:	b00d      	add	sp, #52	@ 0x34
 8005530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005534:	4642      	mov	r2, r8
 8005536:	464b      	mov	r3, r9
 8005538:	4640      	mov	r0, r8
 800553a:	4649      	mov	r1, r9
 800553c:	f7fb faf6 	bl	8000b2c <__aeabi_dcmpun>
 8005540:	b140      	cbz	r0, 8005554 <_printf_float+0xe0>
 8005542:	464b      	mov	r3, r9
 8005544:	2b00      	cmp	r3, #0
 8005546:	bfbc      	itt	lt
 8005548:	232d      	movlt	r3, #45	@ 0x2d
 800554a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800554e:	4a7e      	ldr	r2, [pc, #504]	@ (8005748 <_printf_float+0x2d4>)
 8005550:	4b7e      	ldr	r3, [pc, #504]	@ (800574c <_printf_float+0x2d8>)
 8005552:	e7d4      	b.n	80054fe <_printf_float+0x8a>
 8005554:	6863      	ldr	r3, [r4, #4]
 8005556:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800555a:	9206      	str	r2, [sp, #24]
 800555c:	1c5a      	adds	r2, r3, #1
 800555e:	d13b      	bne.n	80055d8 <_printf_float+0x164>
 8005560:	2306      	movs	r3, #6
 8005562:	6063      	str	r3, [r4, #4]
 8005564:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005568:	2300      	movs	r3, #0
 800556a:	6022      	str	r2, [r4, #0]
 800556c:	9303      	str	r3, [sp, #12]
 800556e:	ab0a      	add	r3, sp, #40	@ 0x28
 8005570:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005574:	ab09      	add	r3, sp, #36	@ 0x24
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	6861      	ldr	r1, [r4, #4]
 800557a:	ec49 8b10 	vmov	d0, r8, r9
 800557e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005582:	4628      	mov	r0, r5
 8005584:	f7ff fed6 	bl	8005334 <__cvt>
 8005588:	9b06      	ldr	r3, [sp, #24]
 800558a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800558c:	2b47      	cmp	r3, #71	@ 0x47
 800558e:	4680      	mov	r8, r0
 8005590:	d129      	bne.n	80055e6 <_printf_float+0x172>
 8005592:	1cc8      	adds	r0, r1, #3
 8005594:	db02      	blt.n	800559c <_printf_float+0x128>
 8005596:	6863      	ldr	r3, [r4, #4]
 8005598:	4299      	cmp	r1, r3
 800559a:	dd41      	ble.n	8005620 <_printf_float+0x1ac>
 800559c:	f1aa 0a02 	sub.w	sl, sl, #2
 80055a0:	fa5f fa8a 	uxtb.w	sl, sl
 80055a4:	3901      	subs	r1, #1
 80055a6:	4652      	mov	r2, sl
 80055a8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80055ac:	9109      	str	r1, [sp, #36]	@ 0x24
 80055ae:	f7ff ff26 	bl	80053fe <__exponent>
 80055b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80055b4:	1813      	adds	r3, r2, r0
 80055b6:	2a01      	cmp	r2, #1
 80055b8:	4681      	mov	r9, r0
 80055ba:	6123      	str	r3, [r4, #16]
 80055bc:	dc02      	bgt.n	80055c4 <_printf_float+0x150>
 80055be:	6822      	ldr	r2, [r4, #0]
 80055c0:	07d2      	lsls	r2, r2, #31
 80055c2:	d501      	bpl.n	80055c8 <_printf_float+0x154>
 80055c4:	3301      	adds	r3, #1
 80055c6:	6123      	str	r3, [r4, #16]
 80055c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d0a2      	beq.n	8005516 <_printf_float+0xa2>
 80055d0:	232d      	movs	r3, #45	@ 0x2d
 80055d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055d6:	e79e      	b.n	8005516 <_printf_float+0xa2>
 80055d8:	9a06      	ldr	r2, [sp, #24]
 80055da:	2a47      	cmp	r2, #71	@ 0x47
 80055dc:	d1c2      	bne.n	8005564 <_printf_float+0xf0>
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1c0      	bne.n	8005564 <_printf_float+0xf0>
 80055e2:	2301      	movs	r3, #1
 80055e4:	e7bd      	b.n	8005562 <_printf_float+0xee>
 80055e6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80055ea:	d9db      	bls.n	80055a4 <_printf_float+0x130>
 80055ec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80055f0:	d118      	bne.n	8005624 <_printf_float+0x1b0>
 80055f2:	2900      	cmp	r1, #0
 80055f4:	6863      	ldr	r3, [r4, #4]
 80055f6:	dd0b      	ble.n	8005610 <_printf_float+0x19c>
 80055f8:	6121      	str	r1, [r4, #16]
 80055fa:	b913      	cbnz	r3, 8005602 <_printf_float+0x18e>
 80055fc:	6822      	ldr	r2, [r4, #0]
 80055fe:	07d0      	lsls	r0, r2, #31
 8005600:	d502      	bpl.n	8005608 <_printf_float+0x194>
 8005602:	3301      	adds	r3, #1
 8005604:	440b      	add	r3, r1
 8005606:	6123      	str	r3, [r4, #16]
 8005608:	65a1      	str	r1, [r4, #88]	@ 0x58
 800560a:	f04f 0900 	mov.w	r9, #0
 800560e:	e7db      	b.n	80055c8 <_printf_float+0x154>
 8005610:	b913      	cbnz	r3, 8005618 <_printf_float+0x1a4>
 8005612:	6822      	ldr	r2, [r4, #0]
 8005614:	07d2      	lsls	r2, r2, #31
 8005616:	d501      	bpl.n	800561c <_printf_float+0x1a8>
 8005618:	3302      	adds	r3, #2
 800561a:	e7f4      	b.n	8005606 <_printf_float+0x192>
 800561c:	2301      	movs	r3, #1
 800561e:	e7f2      	b.n	8005606 <_printf_float+0x192>
 8005620:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005624:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005626:	4299      	cmp	r1, r3
 8005628:	db05      	blt.n	8005636 <_printf_float+0x1c2>
 800562a:	6823      	ldr	r3, [r4, #0]
 800562c:	6121      	str	r1, [r4, #16]
 800562e:	07d8      	lsls	r0, r3, #31
 8005630:	d5ea      	bpl.n	8005608 <_printf_float+0x194>
 8005632:	1c4b      	adds	r3, r1, #1
 8005634:	e7e7      	b.n	8005606 <_printf_float+0x192>
 8005636:	2900      	cmp	r1, #0
 8005638:	bfd4      	ite	le
 800563a:	f1c1 0202 	rsble	r2, r1, #2
 800563e:	2201      	movgt	r2, #1
 8005640:	4413      	add	r3, r2
 8005642:	e7e0      	b.n	8005606 <_printf_float+0x192>
 8005644:	6823      	ldr	r3, [r4, #0]
 8005646:	055a      	lsls	r2, r3, #21
 8005648:	d407      	bmi.n	800565a <_printf_float+0x1e6>
 800564a:	6923      	ldr	r3, [r4, #16]
 800564c:	4642      	mov	r2, r8
 800564e:	4631      	mov	r1, r6
 8005650:	4628      	mov	r0, r5
 8005652:	47b8      	blx	r7
 8005654:	3001      	adds	r0, #1
 8005656:	d12b      	bne.n	80056b0 <_printf_float+0x23c>
 8005658:	e767      	b.n	800552a <_printf_float+0xb6>
 800565a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800565e:	f240 80dd 	bls.w	800581c <_printf_float+0x3a8>
 8005662:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005666:	2200      	movs	r2, #0
 8005668:	2300      	movs	r3, #0
 800566a:	f7fb fa2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800566e:	2800      	cmp	r0, #0
 8005670:	d033      	beq.n	80056da <_printf_float+0x266>
 8005672:	4a37      	ldr	r2, [pc, #220]	@ (8005750 <_printf_float+0x2dc>)
 8005674:	2301      	movs	r3, #1
 8005676:	4631      	mov	r1, r6
 8005678:	4628      	mov	r0, r5
 800567a:	47b8      	blx	r7
 800567c:	3001      	adds	r0, #1
 800567e:	f43f af54 	beq.w	800552a <_printf_float+0xb6>
 8005682:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005686:	4543      	cmp	r3, r8
 8005688:	db02      	blt.n	8005690 <_printf_float+0x21c>
 800568a:	6823      	ldr	r3, [r4, #0]
 800568c:	07d8      	lsls	r0, r3, #31
 800568e:	d50f      	bpl.n	80056b0 <_printf_float+0x23c>
 8005690:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005694:	4631      	mov	r1, r6
 8005696:	4628      	mov	r0, r5
 8005698:	47b8      	blx	r7
 800569a:	3001      	adds	r0, #1
 800569c:	f43f af45 	beq.w	800552a <_printf_float+0xb6>
 80056a0:	f04f 0900 	mov.w	r9, #0
 80056a4:	f108 38ff 	add.w	r8, r8, #4294967295
 80056a8:	f104 0a1a 	add.w	sl, r4, #26
 80056ac:	45c8      	cmp	r8, r9
 80056ae:	dc09      	bgt.n	80056c4 <_printf_float+0x250>
 80056b0:	6823      	ldr	r3, [r4, #0]
 80056b2:	079b      	lsls	r3, r3, #30
 80056b4:	f100 8103 	bmi.w	80058be <_printf_float+0x44a>
 80056b8:	68e0      	ldr	r0, [r4, #12]
 80056ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80056bc:	4298      	cmp	r0, r3
 80056be:	bfb8      	it	lt
 80056c0:	4618      	movlt	r0, r3
 80056c2:	e734      	b.n	800552e <_printf_float+0xba>
 80056c4:	2301      	movs	r3, #1
 80056c6:	4652      	mov	r2, sl
 80056c8:	4631      	mov	r1, r6
 80056ca:	4628      	mov	r0, r5
 80056cc:	47b8      	blx	r7
 80056ce:	3001      	adds	r0, #1
 80056d0:	f43f af2b 	beq.w	800552a <_printf_float+0xb6>
 80056d4:	f109 0901 	add.w	r9, r9, #1
 80056d8:	e7e8      	b.n	80056ac <_printf_float+0x238>
 80056da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056dc:	2b00      	cmp	r3, #0
 80056de:	dc39      	bgt.n	8005754 <_printf_float+0x2e0>
 80056e0:	4a1b      	ldr	r2, [pc, #108]	@ (8005750 <_printf_float+0x2dc>)
 80056e2:	2301      	movs	r3, #1
 80056e4:	4631      	mov	r1, r6
 80056e6:	4628      	mov	r0, r5
 80056e8:	47b8      	blx	r7
 80056ea:	3001      	adds	r0, #1
 80056ec:	f43f af1d 	beq.w	800552a <_printf_float+0xb6>
 80056f0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80056f4:	ea59 0303 	orrs.w	r3, r9, r3
 80056f8:	d102      	bne.n	8005700 <_printf_float+0x28c>
 80056fa:	6823      	ldr	r3, [r4, #0]
 80056fc:	07d9      	lsls	r1, r3, #31
 80056fe:	d5d7      	bpl.n	80056b0 <_printf_float+0x23c>
 8005700:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005704:	4631      	mov	r1, r6
 8005706:	4628      	mov	r0, r5
 8005708:	47b8      	blx	r7
 800570a:	3001      	adds	r0, #1
 800570c:	f43f af0d 	beq.w	800552a <_printf_float+0xb6>
 8005710:	f04f 0a00 	mov.w	sl, #0
 8005714:	f104 0b1a 	add.w	fp, r4, #26
 8005718:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800571a:	425b      	negs	r3, r3
 800571c:	4553      	cmp	r3, sl
 800571e:	dc01      	bgt.n	8005724 <_printf_float+0x2b0>
 8005720:	464b      	mov	r3, r9
 8005722:	e793      	b.n	800564c <_printf_float+0x1d8>
 8005724:	2301      	movs	r3, #1
 8005726:	465a      	mov	r2, fp
 8005728:	4631      	mov	r1, r6
 800572a:	4628      	mov	r0, r5
 800572c:	47b8      	blx	r7
 800572e:	3001      	adds	r0, #1
 8005730:	f43f aefb 	beq.w	800552a <_printf_float+0xb6>
 8005734:	f10a 0a01 	add.w	sl, sl, #1
 8005738:	e7ee      	b.n	8005718 <_printf_float+0x2a4>
 800573a:	bf00      	nop
 800573c:	7fefffff 	.word	0x7fefffff
 8005740:	08009d04 	.word	0x08009d04
 8005744:	08009d08 	.word	0x08009d08
 8005748:	08009d0c 	.word	0x08009d0c
 800574c:	08009d10 	.word	0x08009d10
 8005750:	08009d14 	.word	0x08009d14
 8005754:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005756:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800575a:	4553      	cmp	r3, sl
 800575c:	bfa8      	it	ge
 800575e:	4653      	movge	r3, sl
 8005760:	2b00      	cmp	r3, #0
 8005762:	4699      	mov	r9, r3
 8005764:	dc36      	bgt.n	80057d4 <_printf_float+0x360>
 8005766:	f04f 0b00 	mov.w	fp, #0
 800576a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800576e:	f104 021a 	add.w	r2, r4, #26
 8005772:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005774:	9306      	str	r3, [sp, #24]
 8005776:	eba3 0309 	sub.w	r3, r3, r9
 800577a:	455b      	cmp	r3, fp
 800577c:	dc31      	bgt.n	80057e2 <_printf_float+0x36e>
 800577e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005780:	459a      	cmp	sl, r3
 8005782:	dc3a      	bgt.n	80057fa <_printf_float+0x386>
 8005784:	6823      	ldr	r3, [r4, #0]
 8005786:	07da      	lsls	r2, r3, #31
 8005788:	d437      	bmi.n	80057fa <_printf_float+0x386>
 800578a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800578c:	ebaa 0903 	sub.w	r9, sl, r3
 8005790:	9b06      	ldr	r3, [sp, #24]
 8005792:	ebaa 0303 	sub.w	r3, sl, r3
 8005796:	4599      	cmp	r9, r3
 8005798:	bfa8      	it	ge
 800579a:	4699      	movge	r9, r3
 800579c:	f1b9 0f00 	cmp.w	r9, #0
 80057a0:	dc33      	bgt.n	800580a <_printf_float+0x396>
 80057a2:	f04f 0800 	mov.w	r8, #0
 80057a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057aa:	f104 0b1a 	add.w	fp, r4, #26
 80057ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057b0:	ebaa 0303 	sub.w	r3, sl, r3
 80057b4:	eba3 0309 	sub.w	r3, r3, r9
 80057b8:	4543      	cmp	r3, r8
 80057ba:	f77f af79 	ble.w	80056b0 <_printf_float+0x23c>
 80057be:	2301      	movs	r3, #1
 80057c0:	465a      	mov	r2, fp
 80057c2:	4631      	mov	r1, r6
 80057c4:	4628      	mov	r0, r5
 80057c6:	47b8      	blx	r7
 80057c8:	3001      	adds	r0, #1
 80057ca:	f43f aeae 	beq.w	800552a <_printf_float+0xb6>
 80057ce:	f108 0801 	add.w	r8, r8, #1
 80057d2:	e7ec      	b.n	80057ae <_printf_float+0x33a>
 80057d4:	4642      	mov	r2, r8
 80057d6:	4631      	mov	r1, r6
 80057d8:	4628      	mov	r0, r5
 80057da:	47b8      	blx	r7
 80057dc:	3001      	adds	r0, #1
 80057de:	d1c2      	bne.n	8005766 <_printf_float+0x2f2>
 80057e0:	e6a3      	b.n	800552a <_printf_float+0xb6>
 80057e2:	2301      	movs	r3, #1
 80057e4:	4631      	mov	r1, r6
 80057e6:	4628      	mov	r0, r5
 80057e8:	9206      	str	r2, [sp, #24]
 80057ea:	47b8      	blx	r7
 80057ec:	3001      	adds	r0, #1
 80057ee:	f43f ae9c 	beq.w	800552a <_printf_float+0xb6>
 80057f2:	9a06      	ldr	r2, [sp, #24]
 80057f4:	f10b 0b01 	add.w	fp, fp, #1
 80057f8:	e7bb      	b.n	8005772 <_printf_float+0x2fe>
 80057fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057fe:	4631      	mov	r1, r6
 8005800:	4628      	mov	r0, r5
 8005802:	47b8      	blx	r7
 8005804:	3001      	adds	r0, #1
 8005806:	d1c0      	bne.n	800578a <_printf_float+0x316>
 8005808:	e68f      	b.n	800552a <_printf_float+0xb6>
 800580a:	9a06      	ldr	r2, [sp, #24]
 800580c:	464b      	mov	r3, r9
 800580e:	4442      	add	r2, r8
 8005810:	4631      	mov	r1, r6
 8005812:	4628      	mov	r0, r5
 8005814:	47b8      	blx	r7
 8005816:	3001      	adds	r0, #1
 8005818:	d1c3      	bne.n	80057a2 <_printf_float+0x32e>
 800581a:	e686      	b.n	800552a <_printf_float+0xb6>
 800581c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005820:	f1ba 0f01 	cmp.w	sl, #1
 8005824:	dc01      	bgt.n	800582a <_printf_float+0x3b6>
 8005826:	07db      	lsls	r3, r3, #31
 8005828:	d536      	bpl.n	8005898 <_printf_float+0x424>
 800582a:	2301      	movs	r3, #1
 800582c:	4642      	mov	r2, r8
 800582e:	4631      	mov	r1, r6
 8005830:	4628      	mov	r0, r5
 8005832:	47b8      	blx	r7
 8005834:	3001      	adds	r0, #1
 8005836:	f43f ae78 	beq.w	800552a <_printf_float+0xb6>
 800583a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800583e:	4631      	mov	r1, r6
 8005840:	4628      	mov	r0, r5
 8005842:	47b8      	blx	r7
 8005844:	3001      	adds	r0, #1
 8005846:	f43f ae70 	beq.w	800552a <_printf_float+0xb6>
 800584a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800584e:	2200      	movs	r2, #0
 8005850:	2300      	movs	r3, #0
 8005852:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005856:	f7fb f937 	bl	8000ac8 <__aeabi_dcmpeq>
 800585a:	b9c0      	cbnz	r0, 800588e <_printf_float+0x41a>
 800585c:	4653      	mov	r3, sl
 800585e:	f108 0201 	add.w	r2, r8, #1
 8005862:	4631      	mov	r1, r6
 8005864:	4628      	mov	r0, r5
 8005866:	47b8      	blx	r7
 8005868:	3001      	adds	r0, #1
 800586a:	d10c      	bne.n	8005886 <_printf_float+0x412>
 800586c:	e65d      	b.n	800552a <_printf_float+0xb6>
 800586e:	2301      	movs	r3, #1
 8005870:	465a      	mov	r2, fp
 8005872:	4631      	mov	r1, r6
 8005874:	4628      	mov	r0, r5
 8005876:	47b8      	blx	r7
 8005878:	3001      	adds	r0, #1
 800587a:	f43f ae56 	beq.w	800552a <_printf_float+0xb6>
 800587e:	f108 0801 	add.w	r8, r8, #1
 8005882:	45d0      	cmp	r8, sl
 8005884:	dbf3      	blt.n	800586e <_printf_float+0x3fa>
 8005886:	464b      	mov	r3, r9
 8005888:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800588c:	e6df      	b.n	800564e <_printf_float+0x1da>
 800588e:	f04f 0800 	mov.w	r8, #0
 8005892:	f104 0b1a 	add.w	fp, r4, #26
 8005896:	e7f4      	b.n	8005882 <_printf_float+0x40e>
 8005898:	2301      	movs	r3, #1
 800589a:	4642      	mov	r2, r8
 800589c:	e7e1      	b.n	8005862 <_printf_float+0x3ee>
 800589e:	2301      	movs	r3, #1
 80058a0:	464a      	mov	r2, r9
 80058a2:	4631      	mov	r1, r6
 80058a4:	4628      	mov	r0, r5
 80058a6:	47b8      	blx	r7
 80058a8:	3001      	adds	r0, #1
 80058aa:	f43f ae3e 	beq.w	800552a <_printf_float+0xb6>
 80058ae:	f108 0801 	add.w	r8, r8, #1
 80058b2:	68e3      	ldr	r3, [r4, #12]
 80058b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80058b6:	1a5b      	subs	r3, r3, r1
 80058b8:	4543      	cmp	r3, r8
 80058ba:	dcf0      	bgt.n	800589e <_printf_float+0x42a>
 80058bc:	e6fc      	b.n	80056b8 <_printf_float+0x244>
 80058be:	f04f 0800 	mov.w	r8, #0
 80058c2:	f104 0919 	add.w	r9, r4, #25
 80058c6:	e7f4      	b.n	80058b2 <_printf_float+0x43e>

080058c8 <_printf_common>:
 80058c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058cc:	4616      	mov	r6, r2
 80058ce:	4698      	mov	r8, r3
 80058d0:	688a      	ldr	r2, [r1, #8]
 80058d2:	690b      	ldr	r3, [r1, #16]
 80058d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80058d8:	4293      	cmp	r3, r2
 80058da:	bfb8      	it	lt
 80058dc:	4613      	movlt	r3, r2
 80058de:	6033      	str	r3, [r6, #0]
 80058e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80058e4:	4607      	mov	r7, r0
 80058e6:	460c      	mov	r4, r1
 80058e8:	b10a      	cbz	r2, 80058ee <_printf_common+0x26>
 80058ea:	3301      	adds	r3, #1
 80058ec:	6033      	str	r3, [r6, #0]
 80058ee:	6823      	ldr	r3, [r4, #0]
 80058f0:	0699      	lsls	r1, r3, #26
 80058f2:	bf42      	ittt	mi
 80058f4:	6833      	ldrmi	r3, [r6, #0]
 80058f6:	3302      	addmi	r3, #2
 80058f8:	6033      	strmi	r3, [r6, #0]
 80058fa:	6825      	ldr	r5, [r4, #0]
 80058fc:	f015 0506 	ands.w	r5, r5, #6
 8005900:	d106      	bne.n	8005910 <_printf_common+0x48>
 8005902:	f104 0a19 	add.w	sl, r4, #25
 8005906:	68e3      	ldr	r3, [r4, #12]
 8005908:	6832      	ldr	r2, [r6, #0]
 800590a:	1a9b      	subs	r3, r3, r2
 800590c:	42ab      	cmp	r3, r5
 800590e:	dc26      	bgt.n	800595e <_printf_common+0x96>
 8005910:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005914:	6822      	ldr	r2, [r4, #0]
 8005916:	3b00      	subs	r3, #0
 8005918:	bf18      	it	ne
 800591a:	2301      	movne	r3, #1
 800591c:	0692      	lsls	r2, r2, #26
 800591e:	d42b      	bmi.n	8005978 <_printf_common+0xb0>
 8005920:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005924:	4641      	mov	r1, r8
 8005926:	4638      	mov	r0, r7
 8005928:	47c8      	blx	r9
 800592a:	3001      	adds	r0, #1
 800592c:	d01e      	beq.n	800596c <_printf_common+0xa4>
 800592e:	6823      	ldr	r3, [r4, #0]
 8005930:	6922      	ldr	r2, [r4, #16]
 8005932:	f003 0306 	and.w	r3, r3, #6
 8005936:	2b04      	cmp	r3, #4
 8005938:	bf02      	ittt	eq
 800593a:	68e5      	ldreq	r5, [r4, #12]
 800593c:	6833      	ldreq	r3, [r6, #0]
 800593e:	1aed      	subeq	r5, r5, r3
 8005940:	68a3      	ldr	r3, [r4, #8]
 8005942:	bf0c      	ite	eq
 8005944:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005948:	2500      	movne	r5, #0
 800594a:	4293      	cmp	r3, r2
 800594c:	bfc4      	itt	gt
 800594e:	1a9b      	subgt	r3, r3, r2
 8005950:	18ed      	addgt	r5, r5, r3
 8005952:	2600      	movs	r6, #0
 8005954:	341a      	adds	r4, #26
 8005956:	42b5      	cmp	r5, r6
 8005958:	d11a      	bne.n	8005990 <_printf_common+0xc8>
 800595a:	2000      	movs	r0, #0
 800595c:	e008      	b.n	8005970 <_printf_common+0xa8>
 800595e:	2301      	movs	r3, #1
 8005960:	4652      	mov	r2, sl
 8005962:	4641      	mov	r1, r8
 8005964:	4638      	mov	r0, r7
 8005966:	47c8      	blx	r9
 8005968:	3001      	adds	r0, #1
 800596a:	d103      	bne.n	8005974 <_printf_common+0xac>
 800596c:	f04f 30ff 	mov.w	r0, #4294967295
 8005970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005974:	3501      	adds	r5, #1
 8005976:	e7c6      	b.n	8005906 <_printf_common+0x3e>
 8005978:	18e1      	adds	r1, r4, r3
 800597a:	1c5a      	adds	r2, r3, #1
 800597c:	2030      	movs	r0, #48	@ 0x30
 800597e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005982:	4422      	add	r2, r4
 8005984:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005988:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800598c:	3302      	adds	r3, #2
 800598e:	e7c7      	b.n	8005920 <_printf_common+0x58>
 8005990:	2301      	movs	r3, #1
 8005992:	4622      	mov	r2, r4
 8005994:	4641      	mov	r1, r8
 8005996:	4638      	mov	r0, r7
 8005998:	47c8      	blx	r9
 800599a:	3001      	adds	r0, #1
 800599c:	d0e6      	beq.n	800596c <_printf_common+0xa4>
 800599e:	3601      	adds	r6, #1
 80059a0:	e7d9      	b.n	8005956 <_printf_common+0x8e>
	...

080059a4 <_printf_i>:
 80059a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059a8:	7e0f      	ldrb	r7, [r1, #24]
 80059aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80059ac:	2f78      	cmp	r7, #120	@ 0x78
 80059ae:	4691      	mov	r9, r2
 80059b0:	4680      	mov	r8, r0
 80059b2:	460c      	mov	r4, r1
 80059b4:	469a      	mov	sl, r3
 80059b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80059ba:	d807      	bhi.n	80059cc <_printf_i+0x28>
 80059bc:	2f62      	cmp	r7, #98	@ 0x62
 80059be:	d80a      	bhi.n	80059d6 <_printf_i+0x32>
 80059c0:	2f00      	cmp	r7, #0
 80059c2:	f000 80d2 	beq.w	8005b6a <_printf_i+0x1c6>
 80059c6:	2f58      	cmp	r7, #88	@ 0x58
 80059c8:	f000 80b9 	beq.w	8005b3e <_printf_i+0x19a>
 80059cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80059d4:	e03a      	b.n	8005a4c <_printf_i+0xa8>
 80059d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80059da:	2b15      	cmp	r3, #21
 80059dc:	d8f6      	bhi.n	80059cc <_printf_i+0x28>
 80059de:	a101      	add	r1, pc, #4	@ (adr r1, 80059e4 <_printf_i+0x40>)
 80059e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059e4:	08005a3d 	.word	0x08005a3d
 80059e8:	08005a51 	.word	0x08005a51
 80059ec:	080059cd 	.word	0x080059cd
 80059f0:	080059cd 	.word	0x080059cd
 80059f4:	080059cd 	.word	0x080059cd
 80059f8:	080059cd 	.word	0x080059cd
 80059fc:	08005a51 	.word	0x08005a51
 8005a00:	080059cd 	.word	0x080059cd
 8005a04:	080059cd 	.word	0x080059cd
 8005a08:	080059cd 	.word	0x080059cd
 8005a0c:	080059cd 	.word	0x080059cd
 8005a10:	08005b51 	.word	0x08005b51
 8005a14:	08005a7b 	.word	0x08005a7b
 8005a18:	08005b0b 	.word	0x08005b0b
 8005a1c:	080059cd 	.word	0x080059cd
 8005a20:	080059cd 	.word	0x080059cd
 8005a24:	08005b73 	.word	0x08005b73
 8005a28:	080059cd 	.word	0x080059cd
 8005a2c:	08005a7b 	.word	0x08005a7b
 8005a30:	080059cd 	.word	0x080059cd
 8005a34:	080059cd 	.word	0x080059cd
 8005a38:	08005b13 	.word	0x08005b13
 8005a3c:	6833      	ldr	r3, [r6, #0]
 8005a3e:	1d1a      	adds	r2, r3, #4
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	6032      	str	r2, [r6, #0]
 8005a44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e09d      	b.n	8005b8c <_printf_i+0x1e8>
 8005a50:	6833      	ldr	r3, [r6, #0]
 8005a52:	6820      	ldr	r0, [r4, #0]
 8005a54:	1d19      	adds	r1, r3, #4
 8005a56:	6031      	str	r1, [r6, #0]
 8005a58:	0606      	lsls	r6, r0, #24
 8005a5a:	d501      	bpl.n	8005a60 <_printf_i+0xbc>
 8005a5c:	681d      	ldr	r5, [r3, #0]
 8005a5e:	e003      	b.n	8005a68 <_printf_i+0xc4>
 8005a60:	0645      	lsls	r5, r0, #25
 8005a62:	d5fb      	bpl.n	8005a5c <_printf_i+0xb8>
 8005a64:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005a68:	2d00      	cmp	r5, #0
 8005a6a:	da03      	bge.n	8005a74 <_printf_i+0xd0>
 8005a6c:	232d      	movs	r3, #45	@ 0x2d
 8005a6e:	426d      	negs	r5, r5
 8005a70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a74:	4859      	ldr	r0, [pc, #356]	@ (8005bdc <_printf_i+0x238>)
 8005a76:	230a      	movs	r3, #10
 8005a78:	e011      	b.n	8005a9e <_printf_i+0xfa>
 8005a7a:	6821      	ldr	r1, [r4, #0]
 8005a7c:	6833      	ldr	r3, [r6, #0]
 8005a7e:	0608      	lsls	r0, r1, #24
 8005a80:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a84:	d402      	bmi.n	8005a8c <_printf_i+0xe8>
 8005a86:	0649      	lsls	r1, r1, #25
 8005a88:	bf48      	it	mi
 8005a8a:	b2ad      	uxthmi	r5, r5
 8005a8c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a8e:	4853      	ldr	r0, [pc, #332]	@ (8005bdc <_printf_i+0x238>)
 8005a90:	6033      	str	r3, [r6, #0]
 8005a92:	bf14      	ite	ne
 8005a94:	230a      	movne	r3, #10
 8005a96:	2308      	moveq	r3, #8
 8005a98:	2100      	movs	r1, #0
 8005a9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a9e:	6866      	ldr	r6, [r4, #4]
 8005aa0:	60a6      	str	r6, [r4, #8]
 8005aa2:	2e00      	cmp	r6, #0
 8005aa4:	bfa2      	ittt	ge
 8005aa6:	6821      	ldrge	r1, [r4, #0]
 8005aa8:	f021 0104 	bicge.w	r1, r1, #4
 8005aac:	6021      	strge	r1, [r4, #0]
 8005aae:	b90d      	cbnz	r5, 8005ab4 <_printf_i+0x110>
 8005ab0:	2e00      	cmp	r6, #0
 8005ab2:	d04b      	beq.n	8005b4c <_printf_i+0x1a8>
 8005ab4:	4616      	mov	r6, r2
 8005ab6:	fbb5 f1f3 	udiv	r1, r5, r3
 8005aba:	fb03 5711 	mls	r7, r3, r1, r5
 8005abe:	5dc7      	ldrb	r7, [r0, r7]
 8005ac0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ac4:	462f      	mov	r7, r5
 8005ac6:	42bb      	cmp	r3, r7
 8005ac8:	460d      	mov	r5, r1
 8005aca:	d9f4      	bls.n	8005ab6 <_printf_i+0x112>
 8005acc:	2b08      	cmp	r3, #8
 8005ace:	d10b      	bne.n	8005ae8 <_printf_i+0x144>
 8005ad0:	6823      	ldr	r3, [r4, #0]
 8005ad2:	07df      	lsls	r7, r3, #31
 8005ad4:	d508      	bpl.n	8005ae8 <_printf_i+0x144>
 8005ad6:	6923      	ldr	r3, [r4, #16]
 8005ad8:	6861      	ldr	r1, [r4, #4]
 8005ada:	4299      	cmp	r1, r3
 8005adc:	bfde      	ittt	le
 8005ade:	2330      	movle	r3, #48	@ 0x30
 8005ae0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ae4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ae8:	1b92      	subs	r2, r2, r6
 8005aea:	6122      	str	r2, [r4, #16]
 8005aec:	f8cd a000 	str.w	sl, [sp]
 8005af0:	464b      	mov	r3, r9
 8005af2:	aa03      	add	r2, sp, #12
 8005af4:	4621      	mov	r1, r4
 8005af6:	4640      	mov	r0, r8
 8005af8:	f7ff fee6 	bl	80058c8 <_printf_common>
 8005afc:	3001      	adds	r0, #1
 8005afe:	d14a      	bne.n	8005b96 <_printf_i+0x1f2>
 8005b00:	f04f 30ff 	mov.w	r0, #4294967295
 8005b04:	b004      	add	sp, #16
 8005b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b0a:	6823      	ldr	r3, [r4, #0]
 8005b0c:	f043 0320 	orr.w	r3, r3, #32
 8005b10:	6023      	str	r3, [r4, #0]
 8005b12:	4833      	ldr	r0, [pc, #204]	@ (8005be0 <_printf_i+0x23c>)
 8005b14:	2778      	movs	r7, #120	@ 0x78
 8005b16:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	6831      	ldr	r1, [r6, #0]
 8005b1e:	061f      	lsls	r7, r3, #24
 8005b20:	f851 5b04 	ldr.w	r5, [r1], #4
 8005b24:	d402      	bmi.n	8005b2c <_printf_i+0x188>
 8005b26:	065f      	lsls	r7, r3, #25
 8005b28:	bf48      	it	mi
 8005b2a:	b2ad      	uxthmi	r5, r5
 8005b2c:	6031      	str	r1, [r6, #0]
 8005b2e:	07d9      	lsls	r1, r3, #31
 8005b30:	bf44      	itt	mi
 8005b32:	f043 0320 	orrmi.w	r3, r3, #32
 8005b36:	6023      	strmi	r3, [r4, #0]
 8005b38:	b11d      	cbz	r5, 8005b42 <_printf_i+0x19e>
 8005b3a:	2310      	movs	r3, #16
 8005b3c:	e7ac      	b.n	8005a98 <_printf_i+0xf4>
 8005b3e:	4827      	ldr	r0, [pc, #156]	@ (8005bdc <_printf_i+0x238>)
 8005b40:	e7e9      	b.n	8005b16 <_printf_i+0x172>
 8005b42:	6823      	ldr	r3, [r4, #0]
 8005b44:	f023 0320 	bic.w	r3, r3, #32
 8005b48:	6023      	str	r3, [r4, #0]
 8005b4a:	e7f6      	b.n	8005b3a <_printf_i+0x196>
 8005b4c:	4616      	mov	r6, r2
 8005b4e:	e7bd      	b.n	8005acc <_printf_i+0x128>
 8005b50:	6833      	ldr	r3, [r6, #0]
 8005b52:	6825      	ldr	r5, [r4, #0]
 8005b54:	6961      	ldr	r1, [r4, #20]
 8005b56:	1d18      	adds	r0, r3, #4
 8005b58:	6030      	str	r0, [r6, #0]
 8005b5a:	062e      	lsls	r6, r5, #24
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	d501      	bpl.n	8005b64 <_printf_i+0x1c0>
 8005b60:	6019      	str	r1, [r3, #0]
 8005b62:	e002      	b.n	8005b6a <_printf_i+0x1c6>
 8005b64:	0668      	lsls	r0, r5, #25
 8005b66:	d5fb      	bpl.n	8005b60 <_printf_i+0x1bc>
 8005b68:	8019      	strh	r1, [r3, #0]
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	6123      	str	r3, [r4, #16]
 8005b6e:	4616      	mov	r6, r2
 8005b70:	e7bc      	b.n	8005aec <_printf_i+0x148>
 8005b72:	6833      	ldr	r3, [r6, #0]
 8005b74:	1d1a      	adds	r2, r3, #4
 8005b76:	6032      	str	r2, [r6, #0]
 8005b78:	681e      	ldr	r6, [r3, #0]
 8005b7a:	6862      	ldr	r2, [r4, #4]
 8005b7c:	2100      	movs	r1, #0
 8005b7e:	4630      	mov	r0, r6
 8005b80:	f7fa fb26 	bl	80001d0 <memchr>
 8005b84:	b108      	cbz	r0, 8005b8a <_printf_i+0x1e6>
 8005b86:	1b80      	subs	r0, r0, r6
 8005b88:	6060      	str	r0, [r4, #4]
 8005b8a:	6863      	ldr	r3, [r4, #4]
 8005b8c:	6123      	str	r3, [r4, #16]
 8005b8e:	2300      	movs	r3, #0
 8005b90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b94:	e7aa      	b.n	8005aec <_printf_i+0x148>
 8005b96:	6923      	ldr	r3, [r4, #16]
 8005b98:	4632      	mov	r2, r6
 8005b9a:	4649      	mov	r1, r9
 8005b9c:	4640      	mov	r0, r8
 8005b9e:	47d0      	blx	sl
 8005ba0:	3001      	adds	r0, #1
 8005ba2:	d0ad      	beq.n	8005b00 <_printf_i+0x15c>
 8005ba4:	6823      	ldr	r3, [r4, #0]
 8005ba6:	079b      	lsls	r3, r3, #30
 8005ba8:	d413      	bmi.n	8005bd2 <_printf_i+0x22e>
 8005baa:	68e0      	ldr	r0, [r4, #12]
 8005bac:	9b03      	ldr	r3, [sp, #12]
 8005bae:	4298      	cmp	r0, r3
 8005bb0:	bfb8      	it	lt
 8005bb2:	4618      	movlt	r0, r3
 8005bb4:	e7a6      	b.n	8005b04 <_printf_i+0x160>
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	4632      	mov	r2, r6
 8005bba:	4649      	mov	r1, r9
 8005bbc:	4640      	mov	r0, r8
 8005bbe:	47d0      	blx	sl
 8005bc0:	3001      	adds	r0, #1
 8005bc2:	d09d      	beq.n	8005b00 <_printf_i+0x15c>
 8005bc4:	3501      	adds	r5, #1
 8005bc6:	68e3      	ldr	r3, [r4, #12]
 8005bc8:	9903      	ldr	r1, [sp, #12]
 8005bca:	1a5b      	subs	r3, r3, r1
 8005bcc:	42ab      	cmp	r3, r5
 8005bce:	dcf2      	bgt.n	8005bb6 <_printf_i+0x212>
 8005bd0:	e7eb      	b.n	8005baa <_printf_i+0x206>
 8005bd2:	2500      	movs	r5, #0
 8005bd4:	f104 0619 	add.w	r6, r4, #25
 8005bd8:	e7f5      	b.n	8005bc6 <_printf_i+0x222>
 8005bda:	bf00      	nop
 8005bdc:	08009d16 	.word	0x08009d16
 8005be0:	08009d27 	.word	0x08009d27

08005be4 <_scanf_float>:
 8005be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005be8:	b087      	sub	sp, #28
 8005bea:	4617      	mov	r7, r2
 8005bec:	9303      	str	r3, [sp, #12]
 8005bee:	688b      	ldr	r3, [r1, #8]
 8005bf0:	1e5a      	subs	r2, r3, #1
 8005bf2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005bf6:	bf81      	itttt	hi
 8005bf8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005bfc:	eb03 0b05 	addhi.w	fp, r3, r5
 8005c00:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005c04:	608b      	strhi	r3, [r1, #8]
 8005c06:	680b      	ldr	r3, [r1, #0]
 8005c08:	460a      	mov	r2, r1
 8005c0a:	f04f 0500 	mov.w	r5, #0
 8005c0e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005c12:	f842 3b1c 	str.w	r3, [r2], #28
 8005c16:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005c1a:	4680      	mov	r8, r0
 8005c1c:	460c      	mov	r4, r1
 8005c1e:	bf98      	it	ls
 8005c20:	f04f 0b00 	movls.w	fp, #0
 8005c24:	9201      	str	r2, [sp, #4]
 8005c26:	4616      	mov	r6, r2
 8005c28:	46aa      	mov	sl, r5
 8005c2a:	46a9      	mov	r9, r5
 8005c2c:	9502      	str	r5, [sp, #8]
 8005c2e:	68a2      	ldr	r2, [r4, #8]
 8005c30:	b152      	cbz	r2, 8005c48 <_scanf_float+0x64>
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	2b4e      	cmp	r3, #78	@ 0x4e
 8005c38:	d864      	bhi.n	8005d04 <_scanf_float+0x120>
 8005c3a:	2b40      	cmp	r3, #64	@ 0x40
 8005c3c:	d83c      	bhi.n	8005cb8 <_scanf_float+0xd4>
 8005c3e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005c42:	b2c8      	uxtb	r0, r1
 8005c44:	280e      	cmp	r0, #14
 8005c46:	d93a      	bls.n	8005cbe <_scanf_float+0xda>
 8005c48:	f1b9 0f00 	cmp.w	r9, #0
 8005c4c:	d003      	beq.n	8005c56 <_scanf_float+0x72>
 8005c4e:	6823      	ldr	r3, [r4, #0]
 8005c50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c54:	6023      	str	r3, [r4, #0]
 8005c56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c5a:	f1ba 0f01 	cmp.w	sl, #1
 8005c5e:	f200 8117 	bhi.w	8005e90 <_scanf_float+0x2ac>
 8005c62:	9b01      	ldr	r3, [sp, #4]
 8005c64:	429e      	cmp	r6, r3
 8005c66:	f200 8108 	bhi.w	8005e7a <_scanf_float+0x296>
 8005c6a:	2001      	movs	r0, #1
 8005c6c:	b007      	add	sp, #28
 8005c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c72:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005c76:	2a0d      	cmp	r2, #13
 8005c78:	d8e6      	bhi.n	8005c48 <_scanf_float+0x64>
 8005c7a:	a101      	add	r1, pc, #4	@ (adr r1, 8005c80 <_scanf_float+0x9c>)
 8005c7c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005c80:	08005dc7 	.word	0x08005dc7
 8005c84:	08005c49 	.word	0x08005c49
 8005c88:	08005c49 	.word	0x08005c49
 8005c8c:	08005c49 	.word	0x08005c49
 8005c90:	08005e27 	.word	0x08005e27
 8005c94:	08005dff 	.word	0x08005dff
 8005c98:	08005c49 	.word	0x08005c49
 8005c9c:	08005c49 	.word	0x08005c49
 8005ca0:	08005dd5 	.word	0x08005dd5
 8005ca4:	08005c49 	.word	0x08005c49
 8005ca8:	08005c49 	.word	0x08005c49
 8005cac:	08005c49 	.word	0x08005c49
 8005cb0:	08005c49 	.word	0x08005c49
 8005cb4:	08005d8d 	.word	0x08005d8d
 8005cb8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005cbc:	e7db      	b.n	8005c76 <_scanf_float+0x92>
 8005cbe:	290e      	cmp	r1, #14
 8005cc0:	d8c2      	bhi.n	8005c48 <_scanf_float+0x64>
 8005cc2:	a001      	add	r0, pc, #4	@ (adr r0, 8005cc8 <_scanf_float+0xe4>)
 8005cc4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005cc8:	08005d7d 	.word	0x08005d7d
 8005ccc:	08005c49 	.word	0x08005c49
 8005cd0:	08005d7d 	.word	0x08005d7d
 8005cd4:	08005e13 	.word	0x08005e13
 8005cd8:	08005c49 	.word	0x08005c49
 8005cdc:	08005d25 	.word	0x08005d25
 8005ce0:	08005d63 	.word	0x08005d63
 8005ce4:	08005d63 	.word	0x08005d63
 8005ce8:	08005d63 	.word	0x08005d63
 8005cec:	08005d63 	.word	0x08005d63
 8005cf0:	08005d63 	.word	0x08005d63
 8005cf4:	08005d63 	.word	0x08005d63
 8005cf8:	08005d63 	.word	0x08005d63
 8005cfc:	08005d63 	.word	0x08005d63
 8005d00:	08005d63 	.word	0x08005d63
 8005d04:	2b6e      	cmp	r3, #110	@ 0x6e
 8005d06:	d809      	bhi.n	8005d1c <_scanf_float+0x138>
 8005d08:	2b60      	cmp	r3, #96	@ 0x60
 8005d0a:	d8b2      	bhi.n	8005c72 <_scanf_float+0x8e>
 8005d0c:	2b54      	cmp	r3, #84	@ 0x54
 8005d0e:	d07b      	beq.n	8005e08 <_scanf_float+0x224>
 8005d10:	2b59      	cmp	r3, #89	@ 0x59
 8005d12:	d199      	bne.n	8005c48 <_scanf_float+0x64>
 8005d14:	2d07      	cmp	r5, #7
 8005d16:	d197      	bne.n	8005c48 <_scanf_float+0x64>
 8005d18:	2508      	movs	r5, #8
 8005d1a:	e02c      	b.n	8005d76 <_scanf_float+0x192>
 8005d1c:	2b74      	cmp	r3, #116	@ 0x74
 8005d1e:	d073      	beq.n	8005e08 <_scanf_float+0x224>
 8005d20:	2b79      	cmp	r3, #121	@ 0x79
 8005d22:	e7f6      	b.n	8005d12 <_scanf_float+0x12e>
 8005d24:	6821      	ldr	r1, [r4, #0]
 8005d26:	05c8      	lsls	r0, r1, #23
 8005d28:	d51b      	bpl.n	8005d62 <_scanf_float+0x17e>
 8005d2a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005d2e:	6021      	str	r1, [r4, #0]
 8005d30:	f109 0901 	add.w	r9, r9, #1
 8005d34:	f1bb 0f00 	cmp.w	fp, #0
 8005d38:	d003      	beq.n	8005d42 <_scanf_float+0x15e>
 8005d3a:	3201      	adds	r2, #1
 8005d3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005d40:	60a2      	str	r2, [r4, #8]
 8005d42:	68a3      	ldr	r3, [r4, #8]
 8005d44:	3b01      	subs	r3, #1
 8005d46:	60a3      	str	r3, [r4, #8]
 8005d48:	6923      	ldr	r3, [r4, #16]
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	6123      	str	r3, [r4, #16]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	3b01      	subs	r3, #1
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	607b      	str	r3, [r7, #4]
 8005d56:	f340 8087 	ble.w	8005e68 <_scanf_float+0x284>
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	603b      	str	r3, [r7, #0]
 8005d60:	e765      	b.n	8005c2e <_scanf_float+0x4a>
 8005d62:	eb1a 0105 	adds.w	r1, sl, r5
 8005d66:	f47f af6f 	bne.w	8005c48 <_scanf_float+0x64>
 8005d6a:	6822      	ldr	r2, [r4, #0]
 8005d6c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005d70:	6022      	str	r2, [r4, #0]
 8005d72:	460d      	mov	r5, r1
 8005d74:	468a      	mov	sl, r1
 8005d76:	f806 3b01 	strb.w	r3, [r6], #1
 8005d7a:	e7e2      	b.n	8005d42 <_scanf_float+0x15e>
 8005d7c:	6822      	ldr	r2, [r4, #0]
 8005d7e:	0610      	lsls	r0, r2, #24
 8005d80:	f57f af62 	bpl.w	8005c48 <_scanf_float+0x64>
 8005d84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005d88:	6022      	str	r2, [r4, #0]
 8005d8a:	e7f4      	b.n	8005d76 <_scanf_float+0x192>
 8005d8c:	f1ba 0f00 	cmp.w	sl, #0
 8005d90:	d10e      	bne.n	8005db0 <_scanf_float+0x1cc>
 8005d92:	f1b9 0f00 	cmp.w	r9, #0
 8005d96:	d10e      	bne.n	8005db6 <_scanf_float+0x1d2>
 8005d98:	6822      	ldr	r2, [r4, #0]
 8005d9a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005d9e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005da2:	d108      	bne.n	8005db6 <_scanf_float+0x1d2>
 8005da4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005da8:	6022      	str	r2, [r4, #0]
 8005daa:	f04f 0a01 	mov.w	sl, #1
 8005dae:	e7e2      	b.n	8005d76 <_scanf_float+0x192>
 8005db0:	f1ba 0f02 	cmp.w	sl, #2
 8005db4:	d055      	beq.n	8005e62 <_scanf_float+0x27e>
 8005db6:	2d01      	cmp	r5, #1
 8005db8:	d002      	beq.n	8005dc0 <_scanf_float+0x1dc>
 8005dba:	2d04      	cmp	r5, #4
 8005dbc:	f47f af44 	bne.w	8005c48 <_scanf_float+0x64>
 8005dc0:	3501      	adds	r5, #1
 8005dc2:	b2ed      	uxtb	r5, r5
 8005dc4:	e7d7      	b.n	8005d76 <_scanf_float+0x192>
 8005dc6:	f1ba 0f01 	cmp.w	sl, #1
 8005dca:	f47f af3d 	bne.w	8005c48 <_scanf_float+0x64>
 8005dce:	f04f 0a02 	mov.w	sl, #2
 8005dd2:	e7d0      	b.n	8005d76 <_scanf_float+0x192>
 8005dd4:	b97d      	cbnz	r5, 8005df6 <_scanf_float+0x212>
 8005dd6:	f1b9 0f00 	cmp.w	r9, #0
 8005dda:	f47f af38 	bne.w	8005c4e <_scanf_float+0x6a>
 8005dde:	6822      	ldr	r2, [r4, #0]
 8005de0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005de4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005de8:	f040 8108 	bne.w	8005ffc <_scanf_float+0x418>
 8005dec:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005df0:	6022      	str	r2, [r4, #0]
 8005df2:	2501      	movs	r5, #1
 8005df4:	e7bf      	b.n	8005d76 <_scanf_float+0x192>
 8005df6:	2d03      	cmp	r5, #3
 8005df8:	d0e2      	beq.n	8005dc0 <_scanf_float+0x1dc>
 8005dfa:	2d05      	cmp	r5, #5
 8005dfc:	e7de      	b.n	8005dbc <_scanf_float+0x1d8>
 8005dfe:	2d02      	cmp	r5, #2
 8005e00:	f47f af22 	bne.w	8005c48 <_scanf_float+0x64>
 8005e04:	2503      	movs	r5, #3
 8005e06:	e7b6      	b.n	8005d76 <_scanf_float+0x192>
 8005e08:	2d06      	cmp	r5, #6
 8005e0a:	f47f af1d 	bne.w	8005c48 <_scanf_float+0x64>
 8005e0e:	2507      	movs	r5, #7
 8005e10:	e7b1      	b.n	8005d76 <_scanf_float+0x192>
 8005e12:	6822      	ldr	r2, [r4, #0]
 8005e14:	0591      	lsls	r1, r2, #22
 8005e16:	f57f af17 	bpl.w	8005c48 <_scanf_float+0x64>
 8005e1a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005e1e:	6022      	str	r2, [r4, #0]
 8005e20:	f8cd 9008 	str.w	r9, [sp, #8]
 8005e24:	e7a7      	b.n	8005d76 <_scanf_float+0x192>
 8005e26:	6822      	ldr	r2, [r4, #0]
 8005e28:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005e2c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005e30:	d006      	beq.n	8005e40 <_scanf_float+0x25c>
 8005e32:	0550      	lsls	r0, r2, #21
 8005e34:	f57f af08 	bpl.w	8005c48 <_scanf_float+0x64>
 8005e38:	f1b9 0f00 	cmp.w	r9, #0
 8005e3c:	f000 80de 	beq.w	8005ffc <_scanf_float+0x418>
 8005e40:	0591      	lsls	r1, r2, #22
 8005e42:	bf58      	it	pl
 8005e44:	9902      	ldrpl	r1, [sp, #8]
 8005e46:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005e4a:	bf58      	it	pl
 8005e4c:	eba9 0101 	subpl.w	r1, r9, r1
 8005e50:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005e54:	bf58      	it	pl
 8005e56:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005e5a:	6022      	str	r2, [r4, #0]
 8005e5c:	f04f 0900 	mov.w	r9, #0
 8005e60:	e789      	b.n	8005d76 <_scanf_float+0x192>
 8005e62:	f04f 0a03 	mov.w	sl, #3
 8005e66:	e786      	b.n	8005d76 <_scanf_float+0x192>
 8005e68:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005e6c:	4639      	mov	r1, r7
 8005e6e:	4640      	mov	r0, r8
 8005e70:	4798      	blx	r3
 8005e72:	2800      	cmp	r0, #0
 8005e74:	f43f aedb 	beq.w	8005c2e <_scanf_float+0x4a>
 8005e78:	e6e6      	b.n	8005c48 <_scanf_float+0x64>
 8005e7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005e7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005e82:	463a      	mov	r2, r7
 8005e84:	4640      	mov	r0, r8
 8005e86:	4798      	blx	r3
 8005e88:	6923      	ldr	r3, [r4, #16]
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	6123      	str	r3, [r4, #16]
 8005e8e:	e6e8      	b.n	8005c62 <_scanf_float+0x7e>
 8005e90:	1e6b      	subs	r3, r5, #1
 8005e92:	2b06      	cmp	r3, #6
 8005e94:	d824      	bhi.n	8005ee0 <_scanf_float+0x2fc>
 8005e96:	2d02      	cmp	r5, #2
 8005e98:	d836      	bhi.n	8005f08 <_scanf_float+0x324>
 8005e9a:	9b01      	ldr	r3, [sp, #4]
 8005e9c:	429e      	cmp	r6, r3
 8005e9e:	f67f aee4 	bls.w	8005c6a <_scanf_float+0x86>
 8005ea2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005ea6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005eaa:	463a      	mov	r2, r7
 8005eac:	4640      	mov	r0, r8
 8005eae:	4798      	blx	r3
 8005eb0:	6923      	ldr	r3, [r4, #16]
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	6123      	str	r3, [r4, #16]
 8005eb6:	e7f0      	b.n	8005e9a <_scanf_float+0x2b6>
 8005eb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005ebc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005ec0:	463a      	mov	r2, r7
 8005ec2:	4640      	mov	r0, r8
 8005ec4:	4798      	blx	r3
 8005ec6:	6923      	ldr	r3, [r4, #16]
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	6123      	str	r3, [r4, #16]
 8005ecc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ed0:	fa5f fa8a 	uxtb.w	sl, sl
 8005ed4:	f1ba 0f02 	cmp.w	sl, #2
 8005ed8:	d1ee      	bne.n	8005eb8 <_scanf_float+0x2d4>
 8005eda:	3d03      	subs	r5, #3
 8005edc:	b2ed      	uxtb	r5, r5
 8005ede:	1b76      	subs	r6, r6, r5
 8005ee0:	6823      	ldr	r3, [r4, #0]
 8005ee2:	05da      	lsls	r2, r3, #23
 8005ee4:	d530      	bpl.n	8005f48 <_scanf_float+0x364>
 8005ee6:	055b      	lsls	r3, r3, #21
 8005ee8:	d511      	bpl.n	8005f0e <_scanf_float+0x32a>
 8005eea:	9b01      	ldr	r3, [sp, #4]
 8005eec:	429e      	cmp	r6, r3
 8005eee:	f67f aebc 	bls.w	8005c6a <_scanf_float+0x86>
 8005ef2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005ef6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005efa:	463a      	mov	r2, r7
 8005efc:	4640      	mov	r0, r8
 8005efe:	4798      	blx	r3
 8005f00:	6923      	ldr	r3, [r4, #16]
 8005f02:	3b01      	subs	r3, #1
 8005f04:	6123      	str	r3, [r4, #16]
 8005f06:	e7f0      	b.n	8005eea <_scanf_float+0x306>
 8005f08:	46aa      	mov	sl, r5
 8005f0a:	46b3      	mov	fp, r6
 8005f0c:	e7de      	b.n	8005ecc <_scanf_float+0x2e8>
 8005f0e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005f12:	6923      	ldr	r3, [r4, #16]
 8005f14:	2965      	cmp	r1, #101	@ 0x65
 8005f16:	f103 33ff 	add.w	r3, r3, #4294967295
 8005f1a:	f106 35ff 	add.w	r5, r6, #4294967295
 8005f1e:	6123      	str	r3, [r4, #16]
 8005f20:	d00c      	beq.n	8005f3c <_scanf_float+0x358>
 8005f22:	2945      	cmp	r1, #69	@ 0x45
 8005f24:	d00a      	beq.n	8005f3c <_scanf_float+0x358>
 8005f26:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005f2a:	463a      	mov	r2, r7
 8005f2c:	4640      	mov	r0, r8
 8005f2e:	4798      	blx	r3
 8005f30:	6923      	ldr	r3, [r4, #16]
 8005f32:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005f36:	3b01      	subs	r3, #1
 8005f38:	1eb5      	subs	r5, r6, #2
 8005f3a:	6123      	str	r3, [r4, #16]
 8005f3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005f40:	463a      	mov	r2, r7
 8005f42:	4640      	mov	r0, r8
 8005f44:	4798      	blx	r3
 8005f46:	462e      	mov	r6, r5
 8005f48:	6822      	ldr	r2, [r4, #0]
 8005f4a:	f012 0210 	ands.w	r2, r2, #16
 8005f4e:	d001      	beq.n	8005f54 <_scanf_float+0x370>
 8005f50:	2000      	movs	r0, #0
 8005f52:	e68b      	b.n	8005c6c <_scanf_float+0x88>
 8005f54:	7032      	strb	r2, [r6, #0]
 8005f56:	6823      	ldr	r3, [r4, #0]
 8005f58:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005f5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f60:	d11c      	bne.n	8005f9c <_scanf_float+0x3b8>
 8005f62:	9b02      	ldr	r3, [sp, #8]
 8005f64:	454b      	cmp	r3, r9
 8005f66:	eba3 0209 	sub.w	r2, r3, r9
 8005f6a:	d123      	bne.n	8005fb4 <_scanf_float+0x3d0>
 8005f6c:	9901      	ldr	r1, [sp, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	4640      	mov	r0, r8
 8005f72:	f002 fbf9 	bl	8008768 <_strtod_r>
 8005f76:	9b03      	ldr	r3, [sp, #12]
 8005f78:	6821      	ldr	r1, [r4, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f011 0f02 	tst.w	r1, #2
 8005f80:	ec57 6b10 	vmov	r6, r7, d0
 8005f84:	f103 0204 	add.w	r2, r3, #4
 8005f88:	d01f      	beq.n	8005fca <_scanf_float+0x3e6>
 8005f8a:	9903      	ldr	r1, [sp, #12]
 8005f8c:	600a      	str	r2, [r1, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	e9c3 6700 	strd	r6, r7, [r3]
 8005f94:	68e3      	ldr	r3, [r4, #12]
 8005f96:	3301      	adds	r3, #1
 8005f98:	60e3      	str	r3, [r4, #12]
 8005f9a:	e7d9      	b.n	8005f50 <_scanf_float+0x36c>
 8005f9c:	9b04      	ldr	r3, [sp, #16]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d0e4      	beq.n	8005f6c <_scanf_float+0x388>
 8005fa2:	9905      	ldr	r1, [sp, #20]
 8005fa4:	230a      	movs	r3, #10
 8005fa6:	3101      	adds	r1, #1
 8005fa8:	4640      	mov	r0, r8
 8005faa:	f002 fc5d 	bl	8008868 <_strtol_r>
 8005fae:	9b04      	ldr	r3, [sp, #16]
 8005fb0:	9e05      	ldr	r6, [sp, #20]
 8005fb2:	1ac2      	subs	r2, r0, r3
 8005fb4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005fb8:	429e      	cmp	r6, r3
 8005fba:	bf28      	it	cs
 8005fbc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005fc0:	4910      	ldr	r1, [pc, #64]	@ (8006004 <_scanf_float+0x420>)
 8005fc2:	4630      	mov	r0, r6
 8005fc4:	f000 f8e4 	bl	8006190 <siprintf>
 8005fc8:	e7d0      	b.n	8005f6c <_scanf_float+0x388>
 8005fca:	f011 0f04 	tst.w	r1, #4
 8005fce:	9903      	ldr	r1, [sp, #12]
 8005fd0:	600a      	str	r2, [r1, #0]
 8005fd2:	d1dc      	bne.n	8005f8e <_scanf_float+0x3aa>
 8005fd4:	681d      	ldr	r5, [r3, #0]
 8005fd6:	4632      	mov	r2, r6
 8005fd8:	463b      	mov	r3, r7
 8005fda:	4630      	mov	r0, r6
 8005fdc:	4639      	mov	r1, r7
 8005fde:	f7fa fda5 	bl	8000b2c <__aeabi_dcmpun>
 8005fe2:	b128      	cbz	r0, 8005ff0 <_scanf_float+0x40c>
 8005fe4:	4808      	ldr	r0, [pc, #32]	@ (8006008 <_scanf_float+0x424>)
 8005fe6:	f000 f9b7 	bl	8006358 <nanf>
 8005fea:	ed85 0a00 	vstr	s0, [r5]
 8005fee:	e7d1      	b.n	8005f94 <_scanf_float+0x3b0>
 8005ff0:	4630      	mov	r0, r6
 8005ff2:	4639      	mov	r1, r7
 8005ff4:	f7fa fdf8 	bl	8000be8 <__aeabi_d2f>
 8005ff8:	6028      	str	r0, [r5, #0]
 8005ffa:	e7cb      	b.n	8005f94 <_scanf_float+0x3b0>
 8005ffc:	f04f 0900 	mov.w	r9, #0
 8006000:	e629      	b.n	8005c56 <_scanf_float+0x72>
 8006002:	bf00      	nop
 8006004:	08009d38 	.word	0x08009d38
 8006008:	0800a0cd 	.word	0x0800a0cd

0800600c <std>:
 800600c:	2300      	movs	r3, #0
 800600e:	b510      	push	{r4, lr}
 8006010:	4604      	mov	r4, r0
 8006012:	e9c0 3300 	strd	r3, r3, [r0]
 8006016:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800601a:	6083      	str	r3, [r0, #8]
 800601c:	8181      	strh	r1, [r0, #12]
 800601e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006020:	81c2      	strh	r2, [r0, #14]
 8006022:	6183      	str	r3, [r0, #24]
 8006024:	4619      	mov	r1, r3
 8006026:	2208      	movs	r2, #8
 8006028:	305c      	adds	r0, #92	@ 0x5c
 800602a:	f000 f914 	bl	8006256 <memset>
 800602e:	4b0d      	ldr	r3, [pc, #52]	@ (8006064 <std+0x58>)
 8006030:	6263      	str	r3, [r4, #36]	@ 0x24
 8006032:	4b0d      	ldr	r3, [pc, #52]	@ (8006068 <std+0x5c>)
 8006034:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006036:	4b0d      	ldr	r3, [pc, #52]	@ (800606c <std+0x60>)
 8006038:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800603a:	4b0d      	ldr	r3, [pc, #52]	@ (8006070 <std+0x64>)
 800603c:	6323      	str	r3, [r4, #48]	@ 0x30
 800603e:	4b0d      	ldr	r3, [pc, #52]	@ (8006074 <std+0x68>)
 8006040:	6224      	str	r4, [r4, #32]
 8006042:	429c      	cmp	r4, r3
 8006044:	d006      	beq.n	8006054 <std+0x48>
 8006046:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800604a:	4294      	cmp	r4, r2
 800604c:	d002      	beq.n	8006054 <std+0x48>
 800604e:	33d0      	adds	r3, #208	@ 0xd0
 8006050:	429c      	cmp	r4, r3
 8006052:	d105      	bne.n	8006060 <std+0x54>
 8006054:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800605c:	f000 b978 	b.w	8006350 <__retarget_lock_init_recursive>
 8006060:	bd10      	pop	{r4, pc}
 8006062:	bf00      	nop
 8006064:	080061d1 	.word	0x080061d1
 8006068:	080061f3 	.word	0x080061f3
 800606c:	0800622b 	.word	0x0800622b
 8006070:	0800624f 	.word	0x0800624f
 8006074:	20000300 	.word	0x20000300

08006078 <stdio_exit_handler>:
 8006078:	4a02      	ldr	r2, [pc, #8]	@ (8006084 <stdio_exit_handler+0xc>)
 800607a:	4903      	ldr	r1, [pc, #12]	@ (8006088 <stdio_exit_handler+0x10>)
 800607c:	4803      	ldr	r0, [pc, #12]	@ (800608c <stdio_exit_handler+0x14>)
 800607e:	f000 b869 	b.w	8006154 <_fwalk_sglue>
 8006082:	bf00      	nop
 8006084:	2000000c 	.word	0x2000000c
 8006088:	08008c25 	.word	0x08008c25
 800608c:	2000001c 	.word	0x2000001c

08006090 <cleanup_stdio>:
 8006090:	6841      	ldr	r1, [r0, #4]
 8006092:	4b0c      	ldr	r3, [pc, #48]	@ (80060c4 <cleanup_stdio+0x34>)
 8006094:	4299      	cmp	r1, r3
 8006096:	b510      	push	{r4, lr}
 8006098:	4604      	mov	r4, r0
 800609a:	d001      	beq.n	80060a0 <cleanup_stdio+0x10>
 800609c:	f002 fdc2 	bl	8008c24 <_fflush_r>
 80060a0:	68a1      	ldr	r1, [r4, #8]
 80060a2:	4b09      	ldr	r3, [pc, #36]	@ (80060c8 <cleanup_stdio+0x38>)
 80060a4:	4299      	cmp	r1, r3
 80060a6:	d002      	beq.n	80060ae <cleanup_stdio+0x1e>
 80060a8:	4620      	mov	r0, r4
 80060aa:	f002 fdbb 	bl	8008c24 <_fflush_r>
 80060ae:	68e1      	ldr	r1, [r4, #12]
 80060b0:	4b06      	ldr	r3, [pc, #24]	@ (80060cc <cleanup_stdio+0x3c>)
 80060b2:	4299      	cmp	r1, r3
 80060b4:	d004      	beq.n	80060c0 <cleanup_stdio+0x30>
 80060b6:	4620      	mov	r0, r4
 80060b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060bc:	f002 bdb2 	b.w	8008c24 <_fflush_r>
 80060c0:	bd10      	pop	{r4, pc}
 80060c2:	bf00      	nop
 80060c4:	20000300 	.word	0x20000300
 80060c8:	20000368 	.word	0x20000368
 80060cc:	200003d0 	.word	0x200003d0

080060d0 <global_stdio_init.part.0>:
 80060d0:	b510      	push	{r4, lr}
 80060d2:	4b0b      	ldr	r3, [pc, #44]	@ (8006100 <global_stdio_init.part.0+0x30>)
 80060d4:	4c0b      	ldr	r4, [pc, #44]	@ (8006104 <global_stdio_init.part.0+0x34>)
 80060d6:	4a0c      	ldr	r2, [pc, #48]	@ (8006108 <global_stdio_init.part.0+0x38>)
 80060d8:	601a      	str	r2, [r3, #0]
 80060da:	4620      	mov	r0, r4
 80060dc:	2200      	movs	r2, #0
 80060de:	2104      	movs	r1, #4
 80060e0:	f7ff ff94 	bl	800600c <std>
 80060e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80060e8:	2201      	movs	r2, #1
 80060ea:	2109      	movs	r1, #9
 80060ec:	f7ff ff8e 	bl	800600c <std>
 80060f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80060f4:	2202      	movs	r2, #2
 80060f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060fa:	2112      	movs	r1, #18
 80060fc:	f7ff bf86 	b.w	800600c <std>
 8006100:	20000438 	.word	0x20000438
 8006104:	20000300 	.word	0x20000300
 8006108:	08006079 	.word	0x08006079

0800610c <__sfp_lock_acquire>:
 800610c:	4801      	ldr	r0, [pc, #4]	@ (8006114 <__sfp_lock_acquire+0x8>)
 800610e:	f000 b920 	b.w	8006352 <__retarget_lock_acquire_recursive>
 8006112:	bf00      	nop
 8006114:	20000441 	.word	0x20000441

08006118 <__sfp_lock_release>:
 8006118:	4801      	ldr	r0, [pc, #4]	@ (8006120 <__sfp_lock_release+0x8>)
 800611a:	f000 b91b 	b.w	8006354 <__retarget_lock_release_recursive>
 800611e:	bf00      	nop
 8006120:	20000441 	.word	0x20000441

08006124 <__sinit>:
 8006124:	b510      	push	{r4, lr}
 8006126:	4604      	mov	r4, r0
 8006128:	f7ff fff0 	bl	800610c <__sfp_lock_acquire>
 800612c:	6a23      	ldr	r3, [r4, #32]
 800612e:	b11b      	cbz	r3, 8006138 <__sinit+0x14>
 8006130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006134:	f7ff bff0 	b.w	8006118 <__sfp_lock_release>
 8006138:	4b04      	ldr	r3, [pc, #16]	@ (800614c <__sinit+0x28>)
 800613a:	6223      	str	r3, [r4, #32]
 800613c:	4b04      	ldr	r3, [pc, #16]	@ (8006150 <__sinit+0x2c>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1f5      	bne.n	8006130 <__sinit+0xc>
 8006144:	f7ff ffc4 	bl	80060d0 <global_stdio_init.part.0>
 8006148:	e7f2      	b.n	8006130 <__sinit+0xc>
 800614a:	bf00      	nop
 800614c:	08006091 	.word	0x08006091
 8006150:	20000438 	.word	0x20000438

08006154 <_fwalk_sglue>:
 8006154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006158:	4607      	mov	r7, r0
 800615a:	4688      	mov	r8, r1
 800615c:	4614      	mov	r4, r2
 800615e:	2600      	movs	r6, #0
 8006160:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006164:	f1b9 0901 	subs.w	r9, r9, #1
 8006168:	d505      	bpl.n	8006176 <_fwalk_sglue+0x22>
 800616a:	6824      	ldr	r4, [r4, #0]
 800616c:	2c00      	cmp	r4, #0
 800616e:	d1f7      	bne.n	8006160 <_fwalk_sglue+0xc>
 8006170:	4630      	mov	r0, r6
 8006172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006176:	89ab      	ldrh	r3, [r5, #12]
 8006178:	2b01      	cmp	r3, #1
 800617a:	d907      	bls.n	800618c <_fwalk_sglue+0x38>
 800617c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006180:	3301      	adds	r3, #1
 8006182:	d003      	beq.n	800618c <_fwalk_sglue+0x38>
 8006184:	4629      	mov	r1, r5
 8006186:	4638      	mov	r0, r7
 8006188:	47c0      	blx	r8
 800618a:	4306      	orrs	r6, r0
 800618c:	3568      	adds	r5, #104	@ 0x68
 800618e:	e7e9      	b.n	8006164 <_fwalk_sglue+0x10>

08006190 <siprintf>:
 8006190:	b40e      	push	{r1, r2, r3}
 8006192:	b500      	push	{lr}
 8006194:	b09c      	sub	sp, #112	@ 0x70
 8006196:	ab1d      	add	r3, sp, #116	@ 0x74
 8006198:	9002      	str	r0, [sp, #8]
 800619a:	9006      	str	r0, [sp, #24]
 800619c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80061a0:	4809      	ldr	r0, [pc, #36]	@ (80061c8 <siprintf+0x38>)
 80061a2:	9107      	str	r1, [sp, #28]
 80061a4:	9104      	str	r1, [sp, #16]
 80061a6:	4909      	ldr	r1, [pc, #36]	@ (80061cc <siprintf+0x3c>)
 80061a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80061ac:	9105      	str	r1, [sp, #20]
 80061ae:	6800      	ldr	r0, [r0, #0]
 80061b0:	9301      	str	r3, [sp, #4]
 80061b2:	a902      	add	r1, sp, #8
 80061b4:	f002 fbb6 	bl	8008924 <_svfiprintf_r>
 80061b8:	9b02      	ldr	r3, [sp, #8]
 80061ba:	2200      	movs	r2, #0
 80061bc:	701a      	strb	r2, [r3, #0]
 80061be:	b01c      	add	sp, #112	@ 0x70
 80061c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80061c4:	b003      	add	sp, #12
 80061c6:	4770      	bx	lr
 80061c8:	20000018 	.word	0x20000018
 80061cc:	ffff0208 	.word	0xffff0208

080061d0 <__sread>:
 80061d0:	b510      	push	{r4, lr}
 80061d2:	460c      	mov	r4, r1
 80061d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061d8:	f000 f86c 	bl	80062b4 <_read_r>
 80061dc:	2800      	cmp	r0, #0
 80061de:	bfab      	itete	ge
 80061e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80061e2:	89a3      	ldrhlt	r3, [r4, #12]
 80061e4:	181b      	addge	r3, r3, r0
 80061e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80061ea:	bfac      	ite	ge
 80061ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80061ee:	81a3      	strhlt	r3, [r4, #12]
 80061f0:	bd10      	pop	{r4, pc}

080061f2 <__swrite>:
 80061f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061f6:	461f      	mov	r7, r3
 80061f8:	898b      	ldrh	r3, [r1, #12]
 80061fa:	05db      	lsls	r3, r3, #23
 80061fc:	4605      	mov	r5, r0
 80061fe:	460c      	mov	r4, r1
 8006200:	4616      	mov	r6, r2
 8006202:	d505      	bpl.n	8006210 <__swrite+0x1e>
 8006204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006208:	2302      	movs	r3, #2
 800620a:	2200      	movs	r2, #0
 800620c:	f000 f840 	bl	8006290 <_lseek_r>
 8006210:	89a3      	ldrh	r3, [r4, #12]
 8006212:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006216:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800621a:	81a3      	strh	r3, [r4, #12]
 800621c:	4632      	mov	r2, r6
 800621e:	463b      	mov	r3, r7
 8006220:	4628      	mov	r0, r5
 8006222:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006226:	f000 b857 	b.w	80062d8 <_write_r>

0800622a <__sseek>:
 800622a:	b510      	push	{r4, lr}
 800622c:	460c      	mov	r4, r1
 800622e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006232:	f000 f82d 	bl	8006290 <_lseek_r>
 8006236:	1c43      	adds	r3, r0, #1
 8006238:	89a3      	ldrh	r3, [r4, #12]
 800623a:	bf15      	itete	ne
 800623c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800623e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006242:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006246:	81a3      	strheq	r3, [r4, #12]
 8006248:	bf18      	it	ne
 800624a:	81a3      	strhne	r3, [r4, #12]
 800624c:	bd10      	pop	{r4, pc}

0800624e <__sclose>:
 800624e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006252:	f000 b80d 	b.w	8006270 <_close_r>

08006256 <memset>:
 8006256:	4402      	add	r2, r0
 8006258:	4603      	mov	r3, r0
 800625a:	4293      	cmp	r3, r2
 800625c:	d100      	bne.n	8006260 <memset+0xa>
 800625e:	4770      	bx	lr
 8006260:	f803 1b01 	strb.w	r1, [r3], #1
 8006264:	e7f9      	b.n	800625a <memset+0x4>
	...

08006268 <_localeconv_r>:
 8006268:	4800      	ldr	r0, [pc, #0]	@ (800626c <_localeconv_r+0x4>)
 800626a:	4770      	bx	lr
 800626c:	20000158 	.word	0x20000158

08006270 <_close_r>:
 8006270:	b538      	push	{r3, r4, r5, lr}
 8006272:	4d06      	ldr	r5, [pc, #24]	@ (800628c <_close_r+0x1c>)
 8006274:	2300      	movs	r3, #0
 8006276:	4604      	mov	r4, r0
 8006278:	4608      	mov	r0, r1
 800627a:	602b      	str	r3, [r5, #0]
 800627c:	f7fb fbe5 	bl	8001a4a <_close>
 8006280:	1c43      	adds	r3, r0, #1
 8006282:	d102      	bne.n	800628a <_close_r+0x1a>
 8006284:	682b      	ldr	r3, [r5, #0]
 8006286:	b103      	cbz	r3, 800628a <_close_r+0x1a>
 8006288:	6023      	str	r3, [r4, #0]
 800628a:	bd38      	pop	{r3, r4, r5, pc}
 800628c:	2000043c 	.word	0x2000043c

08006290 <_lseek_r>:
 8006290:	b538      	push	{r3, r4, r5, lr}
 8006292:	4d07      	ldr	r5, [pc, #28]	@ (80062b0 <_lseek_r+0x20>)
 8006294:	4604      	mov	r4, r0
 8006296:	4608      	mov	r0, r1
 8006298:	4611      	mov	r1, r2
 800629a:	2200      	movs	r2, #0
 800629c:	602a      	str	r2, [r5, #0]
 800629e:	461a      	mov	r2, r3
 80062a0:	f7fb fbfa 	bl	8001a98 <_lseek>
 80062a4:	1c43      	adds	r3, r0, #1
 80062a6:	d102      	bne.n	80062ae <_lseek_r+0x1e>
 80062a8:	682b      	ldr	r3, [r5, #0]
 80062aa:	b103      	cbz	r3, 80062ae <_lseek_r+0x1e>
 80062ac:	6023      	str	r3, [r4, #0]
 80062ae:	bd38      	pop	{r3, r4, r5, pc}
 80062b0:	2000043c 	.word	0x2000043c

080062b4 <_read_r>:
 80062b4:	b538      	push	{r3, r4, r5, lr}
 80062b6:	4d07      	ldr	r5, [pc, #28]	@ (80062d4 <_read_r+0x20>)
 80062b8:	4604      	mov	r4, r0
 80062ba:	4608      	mov	r0, r1
 80062bc:	4611      	mov	r1, r2
 80062be:	2200      	movs	r2, #0
 80062c0:	602a      	str	r2, [r5, #0]
 80062c2:	461a      	mov	r2, r3
 80062c4:	f7fb fb88 	bl	80019d8 <_read>
 80062c8:	1c43      	adds	r3, r0, #1
 80062ca:	d102      	bne.n	80062d2 <_read_r+0x1e>
 80062cc:	682b      	ldr	r3, [r5, #0]
 80062ce:	b103      	cbz	r3, 80062d2 <_read_r+0x1e>
 80062d0:	6023      	str	r3, [r4, #0]
 80062d2:	bd38      	pop	{r3, r4, r5, pc}
 80062d4:	2000043c 	.word	0x2000043c

080062d8 <_write_r>:
 80062d8:	b538      	push	{r3, r4, r5, lr}
 80062da:	4d07      	ldr	r5, [pc, #28]	@ (80062f8 <_write_r+0x20>)
 80062dc:	4604      	mov	r4, r0
 80062de:	4608      	mov	r0, r1
 80062e0:	4611      	mov	r1, r2
 80062e2:	2200      	movs	r2, #0
 80062e4:	602a      	str	r2, [r5, #0]
 80062e6:	461a      	mov	r2, r3
 80062e8:	f7fb fb93 	bl	8001a12 <_write>
 80062ec:	1c43      	adds	r3, r0, #1
 80062ee:	d102      	bne.n	80062f6 <_write_r+0x1e>
 80062f0:	682b      	ldr	r3, [r5, #0]
 80062f2:	b103      	cbz	r3, 80062f6 <_write_r+0x1e>
 80062f4:	6023      	str	r3, [r4, #0]
 80062f6:	bd38      	pop	{r3, r4, r5, pc}
 80062f8:	2000043c 	.word	0x2000043c

080062fc <__errno>:
 80062fc:	4b01      	ldr	r3, [pc, #4]	@ (8006304 <__errno+0x8>)
 80062fe:	6818      	ldr	r0, [r3, #0]
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	20000018 	.word	0x20000018

08006308 <__libc_init_array>:
 8006308:	b570      	push	{r4, r5, r6, lr}
 800630a:	4d0d      	ldr	r5, [pc, #52]	@ (8006340 <__libc_init_array+0x38>)
 800630c:	4c0d      	ldr	r4, [pc, #52]	@ (8006344 <__libc_init_array+0x3c>)
 800630e:	1b64      	subs	r4, r4, r5
 8006310:	10a4      	asrs	r4, r4, #2
 8006312:	2600      	movs	r6, #0
 8006314:	42a6      	cmp	r6, r4
 8006316:	d109      	bne.n	800632c <__libc_init_array+0x24>
 8006318:	4d0b      	ldr	r5, [pc, #44]	@ (8006348 <__libc_init_array+0x40>)
 800631a:	4c0c      	ldr	r4, [pc, #48]	@ (800634c <__libc_init_array+0x44>)
 800631c:	f003 fc78 	bl	8009c10 <_init>
 8006320:	1b64      	subs	r4, r4, r5
 8006322:	10a4      	asrs	r4, r4, #2
 8006324:	2600      	movs	r6, #0
 8006326:	42a6      	cmp	r6, r4
 8006328:	d105      	bne.n	8006336 <__libc_init_array+0x2e>
 800632a:	bd70      	pop	{r4, r5, r6, pc}
 800632c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006330:	4798      	blx	r3
 8006332:	3601      	adds	r6, #1
 8006334:	e7ee      	b.n	8006314 <__libc_init_array+0xc>
 8006336:	f855 3b04 	ldr.w	r3, [r5], #4
 800633a:	4798      	blx	r3
 800633c:	3601      	adds	r6, #1
 800633e:	e7f2      	b.n	8006326 <__libc_init_array+0x1e>
 8006340:	0800a138 	.word	0x0800a138
 8006344:	0800a138 	.word	0x0800a138
 8006348:	0800a138 	.word	0x0800a138
 800634c:	0800a13c 	.word	0x0800a13c

08006350 <__retarget_lock_init_recursive>:
 8006350:	4770      	bx	lr

08006352 <__retarget_lock_acquire_recursive>:
 8006352:	4770      	bx	lr

08006354 <__retarget_lock_release_recursive>:
 8006354:	4770      	bx	lr
	...

08006358 <nanf>:
 8006358:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006360 <nanf+0x8>
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	7fc00000 	.word	0x7fc00000

08006364 <quorem>:
 8006364:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006368:	6903      	ldr	r3, [r0, #16]
 800636a:	690c      	ldr	r4, [r1, #16]
 800636c:	42a3      	cmp	r3, r4
 800636e:	4607      	mov	r7, r0
 8006370:	db7e      	blt.n	8006470 <quorem+0x10c>
 8006372:	3c01      	subs	r4, #1
 8006374:	f101 0814 	add.w	r8, r1, #20
 8006378:	00a3      	lsls	r3, r4, #2
 800637a:	f100 0514 	add.w	r5, r0, #20
 800637e:	9300      	str	r3, [sp, #0]
 8006380:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006384:	9301      	str	r3, [sp, #4]
 8006386:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800638a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800638e:	3301      	adds	r3, #1
 8006390:	429a      	cmp	r2, r3
 8006392:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006396:	fbb2 f6f3 	udiv	r6, r2, r3
 800639a:	d32e      	bcc.n	80063fa <quorem+0x96>
 800639c:	f04f 0a00 	mov.w	sl, #0
 80063a0:	46c4      	mov	ip, r8
 80063a2:	46ae      	mov	lr, r5
 80063a4:	46d3      	mov	fp, sl
 80063a6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80063aa:	b298      	uxth	r0, r3
 80063ac:	fb06 a000 	mla	r0, r6, r0, sl
 80063b0:	0c02      	lsrs	r2, r0, #16
 80063b2:	0c1b      	lsrs	r3, r3, #16
 80063b4:	fb06 2303 	mla	r3, r6, r3, r2
 80063b8:	f8de 2000 	ldr.w	r2, [lr]
 80063bc:	b280      	uxth	r0, r0
 80063be:	b292      	uxth	r2, r2
 80063c0:	1a12      	subs	r2, r2, r0
 80063c2:	445a      	add	r2, fp
 80063c4:	f8de 0000 	ldr.w	r0, [lr]
 80063c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80063d2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80063d6:	b292      	uxth	r2, r2
 80063d8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80063dc:	45e1      	cmp	r9, ip
 80063de:	f84e 2b04 	str.w	r2, [lr], #4
 80063e2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80063e6:	d2de      	bcs.n	80063a6 <quorem+0x42>
 80063e8:	9b00      	ldr	r3, [sp, #0]
 80063ea:	58eb      	ldr	r3, [r5, r3]
 80063ec:	b92b      	cbnz	r3, 80063fa <quorem+0x96>
 80063ee:	9b01      	ldr	r3, [sp, #4]
 80063f0:	3b04      	subs	r3, #4
 80063f2:	429d      	cmp	r5, r3
 80063f4:	461a      	mov	r2, r3
 80063f6:	d32f      	bcc.n	8006458 <quorem+0xf4>
 80063f8:	613c      	str	r4, [r7, #16]
 80063fa:	4638      	mov	r0, r7
 80063fc:	f001 f9c4 	bl	8007788 <__mcmp>
 8006400:	2800      	cmp	r0, #0
 8006402:	db25      	blt.n	8006450 <quorem+0xec>
 8006404:	4629      	mov	r1, r5
 8006406:	2000      	movs	r0, #0
 8006408:	f858 2b04 	ldr.w	r2, [r8], #4
 800640c:	f8d1 c000 	ldr.w	ip, [r1]
 8006410:	fa1f fe82 	uxth.w	lr, r2
 8006414:	fa1f f38c 	uxth.w	r3, ip
 8006418:	eba3 030e 	sub.w	r3, r3, lr
 800641c:	4403      	add	r3, r0
 800641e:	0c12      	lsrs	r2, r2, #16
 8006420:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006424:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006428:	b29b      	uxth	r3, r3
 800642a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800642e:	45c1      	cmp	r9, r8
 8006430:	f841 3b04 	str.w	r3, [r1], #4
 8006434:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006438:	d2e6      	bcs.n	8006408 <quorem+0xa4>
 800643a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800643e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006442:	b922      	cbnz	r2, 800644e <quorem+0xea>
 8006444:	3b04      	subs	r3, #4
 8006446:	429d      	cmp	r5, r3
 8006448:	461a      	mov	r2, r3
 800644a:	d30b      	bcc.n	8006464 <quorem+0x100>
 800644c:	613c      	str	r4, [r7, #16]
 800644e:	3601      	adds	r6, #1
 8006450:	4630      	mov	r0, r6
 8006452:	b003      	add	sp, #12
 8006454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006458:	6812      	ldr	r2, [r2, #0]
 800645a:	3b04      	subs	r3, #4
 800645c:	2a00      	cmp	r2, #0
 800645e:	d1cb      	bne.n	80063f8 <quorem+0x94>
 8006460:	3c01      	subs	r4, #1
 8006462:	e7c6      	b.n	80063f2 <quorem+0x8e>
 8006464:	6812      	ldr	r2, [r2, #0]
 8006466:	3b04      	subs	r3, #4
 8006468:	2a00      	cmp	r2, #0
 800646a:	d1ef      	bne.n	800644c <quorem+0xe8>
 800646c:	3c01      	subs	r4, #1
 800646e:	e7ea      	b.n	8006446 <quorem+0xe2>
 8006470:	2000      	movs	r0, #0
 8006472:	e7ee      	b.n	8006452 <quorem+0xee>
 8006474:	0000      	movs	r0, r0
	...

08006478 <_dtoa_r>:
 8006478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800647c:	69c7      	ldr	r7, [r0, #28]
 800647e:	b099      	sub	sp, #100	@ 0x64
 8006480:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006484:	ec55 4b10 	vmov	r4, r5, d0
 8006488:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800648a:	9109      	str	r1, [sp, #36]	@ 0x24
 800648c:	4683      	mov	fp, r0
 800648e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006490:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006492:	b97f      	cbnz	r7, 80064b4 <_dtoa_r+0x3c>
 8006494:	2010      	movs	r0, #16
 8006496:	f000 fdfd 	bl	8007094 <malloc>
 800649a:	4602      	mov	r2, r0
 800649c:	f8cb 001c 	str.w	r0, [fp, #28]
 80064a0:	b920      	cbnz	r0, 80064ac <_dtoa_r+0x34>
 80064a2:	4ba7      	ldr	r3, [pc, #668]	@ (8006740 <_dtoa_r+0x2c8>)
 80064a4:	21ef      	movs	r1, #239	@ 0xef
 80064a6:	48a7      	ldr	r0, [pc, #668]	@ (8006744 <_dtoa_r+0x2cc>)
 80064a8:	f002 fc36 	bl	8008d18 <__assert_func>
 80064ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80064b0:	6007      	str	r7, [r0, #0]
 80064b2:	60c7      	str	r7, [r0, #12]
 80064b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80064b8:	6819      	ldr	r1, [r3, #0]
 80064ba:	b159      	cbz	r1, 80064d4 <_dtoa_r+0x5c>
 80064bc:	685a      	ldr	r2, [r3, #4]
 80064be:	604a      	str	r2, [r1, #4]
 80064c0:	2301      	movs	r3, #1
 80064c2:	4093      	lsls	r3, r2
 80064c4:	608b      	str	r3, [r1, #8]
 80064c6:	4658      	mov	r0, fp
 80064c8:	f000 feda 	bl	8007280 <_Bfree>
 80064cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80064d0:	2200      	movs	r2, #0
 80064d2:	601a      	str	r2, [r3, #0]
 80064d4:	1e2b      	subs	r3, r5, #0
 80064d6:	bfb9      	ittee	lt
 80064d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80064dc:	9303      	strlt	r3, [sp, #12]
 80064de:	2300      	movge	r3, #0
 80064e0:	6033      	strge	r3, [r6, #0]
 80064e2:	9f03      	ldr	r7, [sp, #12]
 80064e4:	4b98      	ldr	r3, [pc, #608]	@ (8006748 <_dtoa_r+0x2d0>)
 80064e6:	bfbc      	itt	lt
 80064e8:	2201      	movlt	r2, #1
 80064ea:	6032      	strlt	r2, [r6, #0]
 80064ec:	43bb      	bics	r3, r7
 80064ee:	d112      	bne.n	8006516 <_dtoa_r+0x9e>
 80064f0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80064f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80064f6:	6013      	str	r3, [r2, #0]
 80064f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80064fc:	4323      	orrs	r3, r4
 80064fe:	f000 854d 	beq.w	8006f9c <_dtoa_r+0xb24>
 8006502:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006504:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800675c <_dtoa_r+0x2e4>
 8006508:	2b00      	cmp	r3, #0
 800650a:	f000 854f 	beq.w	8006fac <_dtoa_r+0xb34>
 800650e:	f10a 0303 	add.w	r3, sl, #3
 8006512:	f000 bd49 	b.w	8006fa8 <_dtoa_r+0xb30>
 8006516:	ed9d 7b02 	vldr	d7, [sp, #8]
 800651a:	2200      	movs	r2, #0
 800651c:	ec51 0b17 	vmov	r0, r1, d7
 8006520:	2300      	movs	r3, #0
 8006522:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006526:	f7fa facf 	bl	8000ac8 <__aeabi_dcmpeq>
 800652a:	4680      	mov	r8, r0
 800652c:	b158      	cbz	r0, 8006546 <_dtoa_r+0xce>
 800652e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006530:	2301      	movs	r3, #1
 8006532:	6013      	str	r3, [r2, #0]
 8006534:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006536:	b113      	cbz	r3, 800653e <_dtoa_r+0xc6>
 8006538:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800653a:	4b84      	ldr	r3, [pc, #528]	@ (800674c <_dtoa_r+0x2d4>)
 800653c:	6013      	str	r3, [r2, #0]
 800653e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006760 <_dtoa_r+0x2e8>
 8006542:	f000 bd33 	b.w	8006fac <_dtoa_r+0xb34>
 8006546:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800654a:	aa16      	add	r2, sp, #88	@ 0x58
 800654c:	a917      	add	r1, sp, #92	@ 0x5c
 800654e:	4658      	mov	r0, fp
 8006550:	f001 fa3a 	bl	80079c8 <__d2b>
 8006554:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006558:	4681      	mov	r9, r0
 800655a:	2e00      	cmp	r6, #0
 800655c:	d077      	beq.n	800664e <_dtoa_r+0x1d6>
 800655e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006560:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006564:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006568:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800656c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006570:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006574:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006578:	4619      	mov	r1, r3
 800657a:	2200      	movs	r2, #0
 800657c:	4b74      	ldr	r3, [pc, #464]	@ (8006750 <_dtoa_r+0x2d8>)
 800657e:	f7f9 fe83 	bl	8000288 <__aeabi_dsub>
 8006582:	a369      	add	r3, pc, #420	@ (adr r3, 8006728 <_dtoa_r+0x2b0>)
 8006584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006588:	f7fa f836 	bl	80005f8 <__aeabi_dmul>
 800658c:	a368      	add	r3, pc, #416	@ (adr r3, 8006730 <_dtoa_r+0x2b8>)
 800658e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006592:	f7f9 fe7b 	bl	800028c <__adddf3>
 8006596:	4604      	mov	r4, r0
 8006598:	4630      	mov	r0, r6
 800659a:	460d      	mov	r5, r1
 800659c:	f7f9 ffc2 	bl	8000524 <__aeabi_i2d>
 80065a0:	a365      	add	r3, pc, #404	@ (adr r3, 8006738 <_dtoa_r+0x2c0>)
 80065a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a6:	f7fa f827 	bl	80005f8 <__aeabi_dmul>
 80065aa:	4602      	mov	r2, r0
 80065ac:	460b      	mov	r3, r1
 80065ae:	4620      	mov	r0, r4
 80065b0:	4629      	mov	r1, r5
 80065b2:	f7f9 fe6b 	bl	800028c <__adddf3>
 80065b6:	4604      	mov	r4, r0
 80065b8:	460d      	mov	r5, r1
 80065ba:	f7fa facd 	bl	8000b58 <__aeabi_d2iz>
 80065be:	2200      	movs	r2, #0
 80065c0:	4607      	mov	r7, r0
 80065c2:	2300      	movs	r3, #0
 80065c4:	4620      	mov	r0, r4
 80065c6:	4629      	mov	r1, r5
 80065c8:	f7fa fa88 	bl	8000adc <__aeabi_dcmplt>
 80065cc:	b140      	cbz	r0, 80065e0 <_dtoa_r+0x168>
 80065ce:	4638      	mov	r0, r7
 80065d0:	f7f9 ffa8 	bl	8000524 <__aeabi_i2d>
 80065d4:	4622      	mov	r2, r4
 80065d6:	462b      	mov	r3, r5
 80065d8:	f7fa fa76 	bl	8000ac8 <__aeabi_dcmpeq>
 80065dc:	b900      	cbnz	r0, 80065e0 <_dtoa_r+0x168>
 80065de:	3f01      	subs	r7, #1
 80065e0:	2f16      	cmp	r7, #22
 80065e2:	d851      	bhi.n	8006688 <_dtoa_r+0x210>
 80065e4:	4b5b      	ldr	r3, [pc, #364]	@ (8006754 <_dtoa_r+0x2dc>)
 80065e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80065ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80065f2:	f7fa fa73 	bl	8000adc <__aeabi_dcmplt>
 80065f6:	2800      	cmp	r0, #0
 80065f8:	d048      	beq.n	800668c <_dtoa_r+0x214>
 80065fa:	3f01      	subs	r7, #1
 80065fc:	2300      	movs	r3, #0
 80065fe:	9312      	str	r3, [sp, #72]	@ 0x48
 8006600:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006602:	1b9b      	subs	r3, r3, r6
 8006604:	1e5a      	subs	r2, r3, #1
 8006606:	bf44      	itt	mi
 8006608:	f1c3 0801 	rsbmi	r8, r3, #1
 800660c:	2300      	movmi	r3, #0
 800660e:	9208      	str	r2, [sp, #32]
 8006610:	bf54      	ite	pl
 8006612:	f04f 0800 	movpl.w	r8, #0
 8006616:	9308      	strmi	r3, [sp, #32]
 8006618:	2f00      	cmp	r7, #0
 800661a:	db39      	blt.n	8006690 <_dtoa_r+0x218>
 800661c:	9b08      	ldr	r3, [sp, #32]
 800661e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006620:	443b      	add	r3, r7
 8006622:	9308      	str	r3, [sp, #32]
 8006624:	2300      	movs	r3, #0
 8006626:	930a      	str	r3, [sp, #40]	@ 0x28
 8006628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800662a:	2b09      	cmp	r3, #9
 800662c:	d864      	bhi.n	80066f8 <_dtoa_r+0x280>
 800662e:	2b05      	cmp	r3, #5
 8006630:	bfc4      	itt	gt
 8006632:	3b04      	subgt	r3, #4
 8006634:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006638:	f1a3 0302 	sub.w	r3, r3, #2
 800663c:	bfcc      	ite	gt
 800663e:	2400      	movgt	r4, #0
 8006640:	2401      	movle	r4, #1
 8006642:	2b03      	cmp	r3, #3
 8006644:	d863      	bhi.n	800670e <_dtoa_r+0x296>
 8006646:	e8df f003 	tbb	[pc, r3]
 800664a:	372a      	.short	0x372a
 800664c:	5535      	.short	0x5535
 800664e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006652:	441e      	add	r6, r3
 8006654:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006658:	2b20      	cmp	r3, #32
 800665a:	bfc1      	itttt	gt
 800665c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006660:	409f      	lslgt	r7, r3
 8006662:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006666:	fa24 f303 	lsrgt.w	r3, r4, r3
 800666a:	bfd6      	itet	le
 800666c:	f1c3 0320 	rsble	r3, r3, #32
 8006670:	ea47 0003 	orrgt.w	r0, r7, r3
 8006674:	fa04 f003 	lslle.w	r0, r4, r3
 8006678:	f7f9 ff44 	bl	8000504 <__aeabi_ui2d>
 800667c:	2201      	movs	r2, #1
 800667e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006682:	3e01      	subs	r6, #1
 8006684:	9214      	str	r2, [sp, #80]	@ 0x50
 8006686:	e777      	b.n	8006578 <_dtoa_r+0x100>
 8006688:	2301      	movs	r3, #1
 800668a:	e7b8      	b.n	80065fe <_dtoa_r+0x186>
 800668c:	9012      	str	r0, [sp, #72]	@ 0x48
 800668e:	e7b7      	b.n	8006600 <_dtoa_r+0x188>
 8006690:	427b      	negs	r3, r7
 8006692:	930a      	str	r3, [sp, #40]	@ 0x28
 8006694:	2300      	movs	r3, #0
 8006696:	eba8 0807 	sub.w	r8, r8, r7
 800669a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800669c:	e7c4      	b.n	8006628 <_dtoa_r+0x1b0>
 800669e:	2300      	movs	r3, #0
 80066a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	dc35      	bgt.n	8006714 <_dtoa_r+0x29c>
 80066a8:	2301      	movs	r3, #1
 80066aa:	9300      	str	r3, [sp, #0]
 80066ac:	9307      	str	r3, [sp, #28]
 80066ae:	461a      	mov	r2, r3
 80066b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80066b2:	e00b      	b.n	80066cc <_dtoa_r+0x254>
 80066b4:	2301      	movs	r3, #1
 80066b6:	e7f3      	b.n	80066a0 <_dtoa_r+0x228>
 80066b8:	2300      	movs	r3, #0
 80066ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80066be:	18fb      	adds	r3, r7, r3
 80066c0:	9300      	str	r3, [sp, #0]
 80066c2:	3301      	adds	r3, #1
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	9307      	str	r3, [sp, #28]
 80066c8:	bfb8      	it	lt
 80066ca:	2301      	movlt	r3, #1
 80066cc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80066d0:	2100      	movs	r1, #0
 80066d2:	2204      	movs	r2, #4
 80066d4:	f102 0514 	add.w	r5, r2, #20
 80066d8:	429d      	cmp	r5, r3
 80066da:	d91f      	bls.n	800671c <_dtoa_r+0x2a4>
 80066dc:	6041      	str	r1, [r0, #4]
 80066de:	4658      	mov	r0, fp
 80066e0:	f000 fd8e 	bl	8007200 <_Balloc>
 80066e4:	4682      	mov	sl, r0
 80066e6:	2800      	cmp	r0, #0
 80066e8:	d13c      	bne.n	8006764 <_dtoa_r+0x2ec>
 80066ea:	4b1b      	ldr	r3, [pc, #108]	@ (8006758 <_dtoa_r+0x2e0>)
 80066ec:	4602      	mov	r2, r0
 80066ee:	f240 11af 	movw	r1, #431	@ 0x1af
 80066f2:	e6d8      	b.n	80064a6 <_dtoa_r+0x2e>
 80066f4:	2301      	movs	r3, #1
 80066f6:	e7e0      	b.n	80066ba <_dtoa_r+0x242>
 80066f8:	2401      	movs	r4, #1
 80066fa:	2300      	movs	r3, #0
 80066fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80066fe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006700:	f04f 33ff 	mov.w	r3, #4294967295
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	9307      	str	r3, [sp, #28]
 8006708:	2200      	movs	r2, #0
 800670a:	2312      	movs	r3, #18
 800670c:	e7d0      	b.n	80066b0 <_dtoa_r+0x238>
 800670e:	2301      	movs	r3, #1
 8006710:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006712:	e7f5      	b.n	8006700 <_dtoa_r+0x288>
 8006714:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006716:	9300      	str	r3, [sp, #0]
 8006718:	9307      	str	r3, [sp, #28]
 800671a:	e7d7      	b.n	80066cc <_dtoa_r+0x254>
 800671c:	3101      	adds	r1, #1
 800671e:	0052      	lsls	r2, r2, #1
 8006720:	e7d8      	b.n	80066d4 <_dtoa_r+0x25c>
 8006722:	bf00      	nop
 8006724:	f3af 8000 	nop.w
 8006728:	636f4361 	.word	0x636f4361
 800672c:	3fd287a7 	.word	0x3fd287a7
 8006730:	8b60c8b3 	.word	0x8b60c8b3
 8006734:	3fc68a28 	.word	0x3fc68a28
 8006738:	509f79fb 	.word	0x509f79fb
 800673c:	3fd34413 	.word	0x3fd34413
 8006740:	08009d4a 	.word	0x08009d4a
 8006744:	08009d61 	.word	0x08009d61
 8006748:	7ff00000 	.word	0x7ff00000
 800674c:	08009d15 	.word	0x08009d15
 8006750:	3ff80000 	.word	0x3ff80000
 8006754:	08009e58 	.word	0x08009e58
 8006758:	08009db9 	.word	0x08009db9
 800675c:	08009d46 	.word	0x08009d46
 8006760:	08009d14 	.word	0x08009d14
 8006764:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006768:	6018      	str	r0, [r3, #0]
 800676a:	9b07      	ldr	r3, [sp, #28]
 800676c:	2b0e      	cmp	r3, #14
 800676e:	f200 80a4 	bhi.w	80068ba <_dtoa_r+0x442>
 8006772:	2c00      	cmp	r4, #0
 8006774:	f000 80a1 	beq.w	80068ba <_dtoa_r+0x442>
 8006778:	2f00      	cmp	r7, #0
 800677a:	dd33      	ble.n	80067e4 <_dtoa_r+0x36c>
 800677c:	4bad      	ldr	r3, [pc, #692]	@ (8006a34 <_dtoa_r+0x5bc>)
 800677e:	f007 020f 	and.w	r2, r7, #15
 8006782:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006786:	ed93 7b00 	vldr	d7, [r3]
 800678a:	05f8      	lsls	r0, r7, #23
 800678c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006790:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006794:	d516      	bpl.n	80067c4 <_dtoa_r+0x34c>
 8006796:	4ba8      	ldr	r3, [pc, #672]	@ (8006a38 <_dtoa_r+0x5c0>)
 8006798:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800679c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80067a0:	f7fa f854 	bl	800084c <__aeabi_ddiv>
 80067a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067a8:	f004 040f 	and.w	r4, r4, #15
 80067ac:	2603      	movs	r6, #3
 80067ae:	4da2      	ldr	r5, [pc, #648]	@ (8006a38 <_dtoa_r+0x5c0>)
 80067b0:	b954      	cbnz	r4, 80067c8 <_dtoa_r+0x350>
 80067b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067ba:	f7fa f847 	bl	800084c <__aeabi_ddiv>
 80067be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067c2:	e028      	b.n	8006816 <_dtoa_r+0x39e>
 80067c4:	2602      	movs	r6, #2
 80067c6:	e7f2      	b.n	80067ae <_dtoa_r+0x336>
 80067c8:	07e1      	lsls	r1, r4, #31
 80067ca:	d508      	bpl.n	80067de <_dtoa_r+0x366>
 80067cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80067d4:	f7f9 ff10 	bl	80005f8 <__aeabi_dmul>
 80067d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067dc:	3601      	adds	r6, #1
 80067de:	1064      	asrs	r4, r4, #1
 80067e0:	3508      	adds	r5, #8
 80067e2:	e7e5      	b.n	80067b0 <_dtoa_r+0x338>
 80067e4:	f000 80d2 	beq.w	800698c <_dtoa_r+0x514>
 80067e8:	427c      	negs	r4, r7
 80067ea:	4b92      	ldr	r3, [pc, #584]	@ (8006a34 <_dtoa_r+0x5bc>)
 80067ec:	4d92      	ldr	r5, [pc, #584]	@ (8006a38 <_dtoa_r+0x5c0>)
 80067ee:	f004 020f 	and.w	r2, r4, #15
 80067f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80067fe:	f7f9 fefb 	bl	80005f8 <__aeabi_dmul>
 8006802:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006806:	1124      	asrs	r4, r4, #4
 8006808:	2300      	movs	r3, #0
 800680a:	2602      	movs	r6, #2
 800680c:	2c00      	cmp	r4, #0
 800680e:	f040 80b2 	bne.w	8006976 <_dtoa_r+0x4fe>
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1d3      	bne.n	80067be <_dtoa_r+0x346>
 8006816:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006818:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800681c:	2b00      	cmp	r3, #0
 800681e:	f000 80b7 	beq.w	8006990 <_dtoa_r+0x518>
 8006822:	4b86      	ldr	r3, [pc, #536]	@ (8006a3c <_dtoa_r+0x5c4>)
 8006824:	2200      	movs	r2, #0
 8006826:	4620      	mov	r0, r4
 8006828:	4629      	mov	r1, r5
 800682a:	f7fa f957 	bl	8000adc <__aeabi_dcmplt>
 800682e:	2800      	cmp	r0, #0
 8006830:	f000 80ae 	beq.w	8006990 <_dtoa_r+0x518>
 8006834:	9b07      	ldr	r3, [sp, #28]
 8006836:	2b00      	cmp	r3, #0
 8006838:	f000 80aa 	beq.w	8006990 <_dtoa_r+0x518>
 800683c:	9b00      	ldr	r3, [sp, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	dd37      	ble.n	80068b2 <_dtoa_r+0x43a>
 8006842:	1e7b      	subs	r3, r7, #1
 8006844:	9304      	str	r3, [sp, #16]
 8006846:	4620      	mov	r0, r4
 8006848:	4b7d      	ldr	r3, [pc, #500]	@ (8006a40 <_dtoa_r+0x5c8>)
 800684a:	2200      	movs	r2, #0
 800684c:	4629      	mov	r1, r5
 800684e:	f7f9 fed3 	bl	80005f8 <__aeabi_dmul>
 8006852:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006856:	9c00      	ldr	r4, [sp, #0]
 8006858:	3601      	adds	r6, #1
 800685a:	4630      	mov	r0, r6
 800685c:	f7f9 fe62 	bl	8000524 <__aeabi_i2d>
 8006860:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006864:	f7f9 fec8 	bl	80005f8 <__aeabi_dmul>
 8006868:	4b76      	ldr	r3, [pc, #472]	@ (8006a44 <_dtoa_r+0x5cc>)
 800686a:	2200      	movs	r2, #0
 800686c:	f7f9 fd0e 	bl	800028c <__adddf3>
 8006870:	4605      	mov	r5, r0
 8006872:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006876:	2c00      	cmp	r4, #0
 8006878:	f040 808d 	bne.w	8006996 <_dtoa_r+0x51e>
 800687c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006880:	4b71      	ldr	r3, [pc, #452]	@ (8006a48 <_dtoa_r+0x5d0>)
 8006882:	2200      	movs	r2, #0
 8006884:	f7f9 fd00 	bl	8000288 <__aeabi_dsub>
 8006888:	4602      	mov	r2, r0
 800688a:	460b      	mov	r3, r1
 800688c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006890:	462a      	mov	r2, r5
 8006892:	4633      	mov	r3, r6
 8006894:	f7fa f940 	bl	8000b18 <__aeabi_dcmpgt>
 8006898:	2800      	cmp	r0, #0
 800689a:	f040 828b 	bne.w	8006db4 <_dtoa_r+0x93c>
 800689e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068a2:	462a      	mov	r2, r5
 80068a4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80068a8:	f7fa f918 	bl	8000adc <__aeabi_dcmplt>
 80068ac:	2800      	cmp	r0, #0
 80068ae:	f040 8128 	bne.w	8006b02 <_dtoa_r+0x68a>
 80068b2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80068b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80068ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f2c0 815a 	blt.w	8006b76 <_dtoa_r+0x6fe>
 80068c2:	2f0e      	cmp	r7, #14
 80068c4:	f300 8157 	bgt.w	8006b76 <_dtoa_r+0x6fe>
 80068c8:	4b5a      	ldr	r3, [pc, #360]	@ (8006a34 <_dtoa_r+0x5bc>)
 80068ca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80068ce:	ed93 7b00 	vldr	d7, [r3]
 80068d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	ed8d 7b00 	vstr	d7, [sp]
 80068da:	da03      	bge.n	80068e4 <_dtoa_r+0x46c>
 80068dc:	9b07      	ldr	r3, [sp, #28]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	f340 8101 	ble.w	8006ae6 <_dtoa_r+0x66e>
 80068e4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80068e8:	4656      	mov	r6, sl
 80068ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068ee:	4620      	mov	r0, r4
 80068f0:	4629      	mov	r1, r5
 80068f2:	f7f9 ffab 	bl	800084c <__aeabi_ddiv>
 80068f6:	f7fa f92f 	bl	8000b58 <__aeabi_d2iz>
 80068fa:	4680      	mov	r8, r0
 80068fc:	f7f9 fe12 	bl	8000524 <__aeabi_i2d>
 8006900:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006904:	f7f9 fe78 	bl	80005f8 <__aeabi_dmul>
 8006908:	4602      	mov	r2, r0
 800690a:	460b      	mov	r3, r1
 800690c:	4620      	mov	r0, r4
 800690e:	4629      	mov	r1, r5
 8006910:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006914:	f7f9 fcb8 	bl	8000288 <__aeabi_dsub>
 8006918:	f806 4b01 	strb.w	r4, [r6], #1
 800691c:	9d07      	ldr	r5, [sp, #28]
 800691e:	eba6 040a 	sub.w	r4, r6, sl
 8006922:	42a5      	cmp	r5, r4
 8006924:	4602      	mov	r2, r0
 8006926:	460b      	mov	r3, r1
 8006928:	f040 8117 	bne.w	8006b5a <_dtoa_r+0x6e2>
 800692c:	f7f9 fcae 	bl	800028c <__adddf3>
 8006930:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006934:	4604      	mov	r4, r0
 8006936:	460d      	mov	r5, r1
 8006938:	f7fa f8ee 	bl	8000b18 <__aeabi_dcmpgt>
 800693c:	2800      	cmp	r0, #0
 800693e:	f040 80f9 	bne.w	8006b34 <_dtoa_r+0x6bc>
 8006942:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006946:	4620      	mov	r0, r4
 8006948:	4629      	mov	r1, r5
 800694a:	f7fa f8bd 	bl	8000ac8 <__aeabi_dcmpeq>
 800694e:	b118      	cbz	r0, 8006958 <_dtoa_r+0x4e0>
 8006950:	f018 0f01 	tst.w	r8, #1
 8006954:	f040 80ee 	bne.w	8006b34 <_dtoa_r+0x6bc>
 8006958:	4649      	mov	r1, r9
 800695a:	4658      	mov	r0, fp
 800695c:	f000 fc90 	bl	8007280 <_Bfree>
 8006960:	2300      	movs	r3, #0
 8006962:	7033      	strb	r3, [r6, #0]
 8006964:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006966:	3701      	adds	r7, #1
 8006968:	601f      	str	r7, [r3, #0]
 800696a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800696c:	2b00      	cmp	r3, #0
 800696e:	f000 831d 	beq.w	8006fac <_dtoa_r+0xb34>
 8006972:	601e      	str	r6, [r3, #0]
 8006974:	e31a      	b.n	8006fac <_dtoa_r+0xb34>
 8006976:	07e2      	lsls	r2, r4, #31
 8006978:	d505      	bpl.n	8006986 <_dtoa_r+0x50e>
 800697a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800697e:	f7f9 fe3b 	bl	80005f8 <__aeabi_dmul>
 8006982:	3601      	adds	r6, #1
 8006984:	2301      	movs	r3, #1
 8006986:	1064      	asrs	r4, r4, #1
 8006988:	3508      	adds	r5, #8
 800698a:	e73f      	b.n	800680c <_dtoa_r+0x394>
 800698c:	2602      	movs	r6, #2
 800698e:	e742      	b.n	8006816 <_dtoa_r+0x39e>
 8006990:	9c07      	ldr	r4, [sp, #28]
 8006992:	9704      	str	r7, [sp, #16]
 8006994:	e761      	b.n	800685a <_dtoa_r+0x3e2>
 8006996:	4b27      	ldr	r3, [pc, #156]	@ (8006a34 <_dtoa_r+0x5bc>)
 8006998:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800699a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800699e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80069a2:	4454      	add	r4, sl
 80069a4:	2900      	cmp	r1, #0
 80069a6:	d053      	beq.n	8006a50 <_dtoa_r+0x5d8>
 80069a8:	4928      	ldr	r1, [pc, #160]	@ (8006a4c <_dtoa_r+0x5d4>)
 80069aa:	2000      	movs	r0, #0
 80069ac:	f7f9 ff4e 	bl	800084c <__aeabi_ddiv>
 80069b0:	4633      	mov	r3, r6
 80069b2:	462a      	mov	r2, r5
 80069b4:	f7f9 fc68 	bl	8000288 <__aeabi_dsub>
 80069b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80069bc:	4656      	mov	r6, sl
 80069be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069c2:	f7fa f8c9 	bl	8000b58 <__aeabi_d2iz>
 80069c6:	4605      	mov	r5, r0
 80069c8:	f7f9 fdac 	bl	8000524 <__aeabi_i2d>
 80069cc:	4602      	mov	r2, r0
 80069ce:	460b      	mov	r3, r1
 80069d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069d4:	f7f9 fc58 	bl	8000288 <__aeabi_dsub>
 80069d8:	3530      	adds	r5, #48	@ 0x30
 80069da:	4602      	mov	r2, r0
 80069dc:	460b      	mov	r3, r1
 80069de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80069e2:	f806 5b01 	strb.w	r5, [r6], #1
 80069e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80069ea:	f7fa f877 	bl	8000adc <__aeabi_dcmplt>
 80069ee:	2800      	cmp	r0, #0
 80069f0:	d171      	bne.n	8006ad6 <_dtoa_r+0x65e>
 80069f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069f6:	4911      	ldr	r1, [pc, #68]	@ (8006a3c <_dtoa_r+0x5c4>)
 80069f8:	2000      	movs	r0, #0
 80069fa:	f7f9 fc45 	bl	8000288 <__aeabi_dsub>
 80069fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006a02:	f7fa f86b 	bl	8000adc <__aeabi_dcmplt>
 8006a06:	2800      	cmp	r0, #0
 8006a08:	f040 8095 	bne.w	8006b36 <_dtoa_r+0x6be>
 8006a0c:	42a6      	cmp	r6, r4
 8006a0e:	f43f af50 	beq.w	80068b2 <_dtoa_r+0x43a>
 8006a12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006a16:	4b0a      	ldr	r3, [pc, #40]	@ (8006a40 <_dtoa_r+0x5c8>)
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f7f9 fded 	bl	80005f8 <__aeabi_dmul>
 8006a1e:	4b08      	ldr	r3, [pc, #32]	@ (8006a40 <_dtoa_r+0x5c8>)
 8006a20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a24:	2200      	movs	r2, #0
 8006a26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a2a:	f7f9 fde5 	bl	80005f8 <__aeabi_dmul>
 8006a2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a32:	e7c4      	b.n	80069be <_dtoa_r+0x546>
 8006a34:	08009e58 	.word	0x08009e58
 8006a38:	08009e30 	.word	0x08009e30
 8006a3c:	3ff00000 	.word	0x3ff00000
 8006a40:	40240000 	.word	0x40240000
 8006a44:	401c0000 	.word	0x401c0000
 8006a48:	40140000 	.word	0x40140000
 8006a4c:	3fe00000 	.word	0x3fe00000
 8006a50:	4631      	mov	r1, r6
 8006a52:	4628      	mov	r0, r5
 8006a54:	f7f9 fdd0 	bl	80005f8 <__aeabi_dmul>
 8006a58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a5c:	9415      	str	r4, [sp, #84]	@ 0x54
 8006a5e:	4656      	mov	r6, sl
 8006a60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a64:	f7fa f878 	bl	8000b58 <__aeabi_d2iz>
 8006a68:	4605      	mov	r5, r0
 8006a6a:	f7f9 fd5b 	bl	8000524 <__aeabi_i2d>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	460b      	mov	r3, r1
 8006a72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a76:	f7f9 fc07 	bl	8000288 <__aeabi_dsub>
 8006a7a:	3530      	adds	r5, #48	@ 0x30
 8006a7c:	f806 5b01 	strb.w	r5, [r6], #1
 8006a80:	4602      	mov	r2, r0
 8006a82:	460b      	mov	r3, r1
 8006a84:	42a6      	cmp	r6, r4
 8006a86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a8a:	f04f 0200 	mov.w	r2, #0
 8006a8e:	d124      	bne.n	8006ada <_dtoa_r+0x662>
 8006a90:	4bac      	ldr	r3, [pc, #688]	@ (8006d44 <_dtoa_r+0x8cc>)
 8006a92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006a96:	f7f9 fbf9 	bl	800028c <__adddf3>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006aa2:	f7fa f839 	bl	8000b18 <__aeabi_dcmpgt>
 8006aa6:	2800      	cmp	r0, #0
 8006aa8:	d145      	bne.n	8006b36 <_dtoa_r+0x6be>
 8006aaa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006aae:	49a5      	ldr	r1, [pc, #660]	@ (8006d44 <_dtoa_r+0x8cc>)
 8006ab0:	2000      	movs	r0, #0
 8006ab2:	f7f9 fbe9 	bl	8000288 <__aeabi_dsub>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	460b      	mov	r3, r1
 8006aba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006abe:	f7fa f80d 	bl	8000adc <__aeabi_dcmplt>
 8006ac2:	2800      	cmp	r0, #0
 8006ac4:	f43f aef5 	beq.w	80068b2 <_dtoa_r+0x43a>
 8006ac8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006aca:	1e73      	subs	r3, r6, #1
 8006acc:	9315      	str	r3, [sp, #84]	@ 0x54
 8006ace:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006ad2:	2b30      	cmp	r3, #48	@ 0x30
 8006ad4:	d0f8      	beq.n	8006ac8 <_dtoa_r+0x650>
 8006ad6:	9f04      	ldr	r7, [sp, #16]
 8006ad8:	e73e      	b.n	8006958 <_dtoa_r+0x4e0>
 8006ada:	4b9b      	ldr	r3, [pc, #620]	@ (8006d48 <_dtoa_r+0x8d0>)
 8006adc:	f7f9 fd8c 	bl	80005f8 <__aeabi_dmul>
 8006ae0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ae4:	e7bc      	b.n	8006a60 <_dtoa_r+0x5e8>
 8006ae6:	d10c      	bne.n	8006b02 <_dtoa_r+0x68a>
 8006ae8:	4b98      	ldr	r3, [pc, #608]	@ (8006d4c <_dtoa_r+0x8d4>)
 8006aea:	2200      	movs	r2, #0
 8006aec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006af0:	f7f9 fd82 	bl	80005f8 <__aeabi_dmul>
 8006af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006af8:	f7fa f804 	bl	8000b04 <__aeabi_dcmpge>
 8006afc:	2800      	cmp	r0, #0
 8006afe:	f000 8157 	beq.w	8006db0 <_dtoa_r+0x938>
 8006b02:	2400      	movs	r4, #0
 8006b04:	4625      	mov	r5, r4
 8006b06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b08:	43db      	mvns	r3, r3
 8006b0a:	9304      	str	r3, [sp, #16]
 8006b0c:	4656      	mov	r6, sl
 8006b0e:	2700      	movs	r7, #0
 8006b10:	4621      	mov	r1, r4
 8006b12:	4658      	mov	r0, fp
 8006b14:	f000 fbb4 	bl	8007280 <_Bfree>
 8006b18:	2d00      	cmp	r5, #0
 8006b1a:	d0dc      	beq.n	8006ad6 <_dtoa_r+0x65e>
 8006b1c:	b12f      	cbz	r7, 8006b2a <_dtoa_r+0x6b2>
 8006b1e:	42af      	cmp	r7, r5
 8006b20:	d003      	beq.n	8006b2a <_dtoa_r+0x6b2>
 8006b22:	4639      	mov	r1, r7
 8006b24:	4658      	mov	r0, fp
 8006b26:	f000 fbab 	bl	8007280 <_Bfree>
 8006b2a:	4629      	mov	r1, r5
 8006b2c:	4658      	mov	r0, fp
 8006b2e:	f000 fba7 	bl	8007280 <_Bfree>
 8006b32:	e7d0      	b.n	8006ad6 <_dtoa_r+0x65e>
 8006b34:	9704      	str	r7, [sp, #16]
 8006b36:	4633      	mov	r3, r6
 8006b38:	461e      	mov	r6, r3
 8006b3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b3e:	2a39      	cmp	r2, #57	@ 0x39
 8006b40:	d107      	bne.n	8006b52 <_dtoa_r+0x6da>
 8006b42:	459a      	cmp	sl, r3
 8006b44:	d1f8      	bne.n	8006b38 <_dtoa_r+0x6c0>
 8006b46:	9a04      	ldr	r2, [sp, #16]
 8006b48:	3201      	adds	r2, #1
 8006b4a:	9204      	str	r2, [sp, #16]
 8006b4c:	2230      	movs	r2, #48	@ 0x30
 8006b4e:	f88a 2000 	strb.w	r2, [sl]
 8006b52:	781a      	ldrb	r2, [r3, #0]
 8006b54:	3201      	adds	r2, #1
 8006b56:	701a      	strb	r2, [r3, #0]
 8006b58:	e7bd      	b.n	8006ad6 <_dtoa_r+0x65e>
 8006b5a:	4b7b      	ldr	r3, [pc, #492]	@ (8006d48 <_dtoa_r+0x8d0>)
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f7f9 fd4b 	bl	80005f8 <__aeabi_dmul>
 8006b62:	2200      	movs	r2, #0
 8006b64:	2300      	movs	r3, #0
 8006b66:	4604      	mov	r4, r0
 8006b68:	460d      	mov	r5, r1
 8006b6a:	f7f9 ffad 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b6e:	2800      	cmp	r0, #0
 8006b70:	f43f aebb 	beq.w	80068ea <_dtoa_r+0x472>
 8006b74:	e6f0      	b.n	8006958 <_dtoa_r+0x4e0>
 8006b76:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006b78:	2a00      	cmp	r2, #0
 8006b7a:	f000 80db 	beq.w	8006d34 <_dtoa_r+0x8bc>
 8006b7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b80:	2a01      	cmp	r2, #1
 8006b82:	f300 80bf 	bgt.w	8006d04 <_dtoa_r+0x88c>
 8006b86:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006b88:	2a00      	cmp	r2, #0
 8006b8a:	f000 80b7 	beq.w	8006cfc <_dtoa_r+0x884>
 8006b8e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006b92:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006b94:	4646      	mov	r6, r8
 8006b96:	9a08      	ldr	r2, [sp, #32]
 8006b98:	2101      	movs	r1, #1
 8006b9a:	441a      	add	r2, r3
 8006b9c:	4658      	mov	r0, fp
 8006b9e:	4498      	add	r8, r3
 8006ba0:	9208      	str	r2, [sp, #32]
 8006ba2:	f000 fc6b 	bl	800747c <__i2b>
 8006ba6:	4605      	mov	r5, r0
 8006ba8:	b15e      	cbz	r6, 8006bc2 <_dtoa_r+0x74a>
 8006baa:	9b08      	ldr	r3, [sp, #32]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	dd08      	ble.n	8006bc2 <_dtoa_r+0x74a>
 8006bb0:	42b3      	cmp	r3, r6
 8006bb2:	9a08      	ldr	r2, [sp, #32]
 8006bb4:	bfa8      	it	ge
 8006bb6:	4633      	movge	r3, r6
 8006bb8:	eba8 0803 	sub.w	r8, r8, r3
 8006bbc:	1af6      	subs	r6, r6, r3
 8006bbe:	1ad3      	subs	r3, r2, r3
 8006bc0:	9308      	str	r3, [sp, #32]
 8006bc2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bc4:	b1f3      	cbz	r3, 8006c04 <_dtoa_r+0x78c>
 8006bc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	f000 80b7 	beq.w	8006d3c <_dtoa_r+0x8c4>
 8006bce:	b18c      	cbz	r4, 8006bf4 <_dtoa_r+0x77c>
 8006bd0:	4629      	mov	r1, r5
 8006bd2:	4622      	mov	r2, r4
 8006bd4:	4658      	mov	r0, fp
 8006bd6:	f000 fd11 	bl	80075fc <__pow5mult>
 8006bda:	464a      	mov	r2, r9
 8006bdc:	4601      	mov	r1, r0
 8006bde:	4605      	mov	r5, r0
 8006be0:	4658      	mov	r0, fp
 8006be2:	f000 fc61 	bl	80074a8 <__multiply>
 8006be6:	4649      	mov	r1, r9
 8006be8:	9004      	str	r0, [sp, #16]
 8006bea:	4658      	mov	r0, fp
 8006bec:	f000 fb48 	bl	8007280 <_Bfree>
 8006bf0:	9b04      	ldr	r3, [sp, #16]
 8006bf2:	4699      	mov	r9, r3
 8006bf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bf6:	1b1a      	subs	r2, r3, r4
 8006bf8:	d004      	beq.n	8006c04 <_dtoa_r+0x78c>
 8006bfa:	4649      	mov	r1, r9
 8006bfc:	4658      	mov	r0, fp
 8006bfe:	f000 fcfd 	bl	80075fc <__pow5mult>
 8006c02:	4681      	mov	r9, r0
 8006c04:	2101      	movs	r1, #1
 8006c06:	4658      	mov	r0, fp
 8006c08:	f000 fc38 	bl	800747c <__i2b>
 8006c0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c0e:	4604      	mov	r4, r0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f000 81cf 	beq.w	8006fb4 <_dtoa_r+0xb3c>
 8006c16:	461a      	mov	r2, r3
 8006c18:	4601      	mov	r1, r0
 8006c1a:	4658      	mov	r0, fp
 8006c1c:	f000 fcee 	bl	80075fc <__pow5mult>
 8006c20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	4604      	mov	r4, r0
 8006c26:	f300 8095 	bgt.w	8006d54 <_dtoa_r+0x8dc>
 8006c2a:	9b02      	ldr	r3, [sp, #8]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f040 8087 	bne.w	8006d40 <_dtoa_r+0x8c8>
 8006c32:	9b03      	ldr	r3, [sp, #12]
 8006c34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	f040 8089 	bne.w	8006d50 <_dtoa_r+0x8d8>
 8006c3e:	9b03      	ldr	r3, [sp, #12]
 8006c40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c44:	0d1b      	lsrs	r3, r3, #20
 8006c46:	051b      	lsls	r3, r3, #20
 8006c48:	b12b      	cbz	r3, 8006c56 <_dtoa_r+0x7de>
 8006c4a:	9b08      	ldr	r3, [sp, #32]
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	9308      	str	r3, [sp, #32]
 8006c50:	f108 0801 	add.w	r8, r8, #1
 8006c54:	2301      	movs	r3, #1
 8006c56:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	f000 81b0 	beq.w	8006fc0 <_dtoa_r+0xb48>
 8006c60:	6923      	ldr	r3, [r4, #16]
 8006c62:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006c66:	6918      	ldr	r0, [r3, #16]
 8006c68:	f000 fbbc 	bl	80073e4 <__hi0bits>
 8006c6c:	f1c0 0020 	rsb	r0, r0, #32
 8006c70:	9b08      	ldr	r3, [sp, #32]
 8006c72:	4418      	add	r0, r3
 8006c74:	f010 001f 	ands.w	r0, r0, #31
 8006c78:	d077      	beq.n	8006d6a <_dtoa_r+0x8f2>
 8006c7a:	f1c0 0320 	rsb	r3, r0, #32
 8006c7e:	2b04      	cmp	r3, #4
 8006c80:	dd6b      	ble.n	8006d5a <_dtoa_r+0x8e2>
 8006c82:	9b08      	ldr	r3, [sp, #32]
 8006c84:	f1c0 001c 	rsb	r0, r0, #28
 8006c88:	4403      	add	r3, r0
 8006c8a:	4480      	add	r8, r0
 8006c8c:	4406      	add	r6, r0
 8006c8e:	9308      	str	r3, [sp, #32]
 8006c90:	f1b8 0f00 	cmp.w	r8, #0
 8006c94:	dd05      	ble.n	8006ca2 <_dtoa_r+0x82a>
 8006c96:	4649      	mov	r1, r9
 8006c98:	4642      	mov	r2, r8
 8006c9a:	4658      	mov	r0, fp
 8006c9c:	f000 fd08 	bl	80076b0 <__lshift>
 8006ca0:	4681      	mov	r9, r0
 8006ca2:	9b08      	ldr	r3, [sp, #32]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	dd05      	ble.n	8006cb4 <_dtoa_r+0x83c>
 8006ca8:	4621      	mov	r1, r4
 8006caa:	461a      	mov	r2, r3
 8006cac:	4658      	mov	r0, fp
 8006cae:	f000 fcff 	bl	80076b0 <__lshift>
 8006cb2:	4604      	mov	r4, r0
 8006cb4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d059      	beq.n	8006d6e <_dtoa_r+0x8f6>
 8006cba:	4621      	mov	r1, r4
 8006cbc:	4648      	mov	r0, r9
 8006cbe:	f000 fd63 	bl	8007788 <__mcmp>
 8006cc2:	2800      	cmp	r0, #0
 8006cc4:	da53      	bge.n	8006d6e <_dtoa_r+0x8f6>
 8006cc6:	1e7b      	subs	r3, r7, #1
 8006cc8:	9304      	str	r3, [sp, #16]
 8006cca:	4649      	mov	r1, r9
 8006ccc:	2300      	movs	r3, #0
 8006cce:	220a      	movs	r2, #10
 8006cd0:	4658      	mov	r0, fp
 8006cd2:	f000 faf7 	bl	80072c4 <__multadd>
 8006cd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006cd8:	4681      	mov	r9, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	f000 8172 	beq.w	8006fc4 <_dtoa_r+0xb4c>
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	4629      	mov	r1, r5
 8006ce4:	220a      	movs	r2, #10
 8006ce6:	4658      	mov	r0, fp
 8006ce8:	f000 faec 	bl	80072c4 <__multadd>
 8006cec:	9b00      	ldr	r3, [sp, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	4605      	mov	r5, r0
 8006cf2:	dc67      	bgt.n	8006dc4 <_dtoa_r+0x94c>
 8006cf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cf6:	2b02      	cmp	r3, #2
 8006cf8:	dc41      	bgt.n	8006d7e <_dtoa_r+0x906>
 8006cfa:	e063      	b.n	8006dc4 <_dtoa_r+0x94c>
 8006cfc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006cfe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006d02:	e746      	b.n	8006b92 <_dtoa_r+0x71a>
 8006d04:	9b07      	ldr	r3, [sp, #28]
 8006d06:	1e5c      	subs	r4, r3, #1
 8006d08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d0a:	42a3      	cmp	r3, r4
 8006d0c:	bfbf      	itttt	lt
 8006d0e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006d10:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006d12:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006d14:	1ae3      	sublt	r3, r4, r3
 8006d16:	bfb4      	ite	lt
 8006d18:	18d2      	addlt	r2, r2, r3
 8006d1a:	1b1c      	subge	r4, r3, r4
 8006d1c:	9b07      	ldr	r3, [sp, #28]
 8006d1e:	bfbc      	itt	lt
 8006d20:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006d22:	2400      	movlt	r4, #0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	bfb5      	itete	lt
 8006d28:	eba8 0603 	sublt.w	r6, r8, r3
 8006d2c:	9b07      	ldrge	r3, [sp, #28]
 8006d2e:	2300      	movlt	r3, #0
 8006d30:	4646      	movge	r6, r8
 8006d32:	e730      	b.n	8006b96 <_dtoa_r+0x71e>
 8006d34:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006d36:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006d38:	4646      	mov	r6, r8
 8006d3a:	e735      	b.n	8006ba8 <_dtoa_r+0x730>
 8006d3c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d3e:	e75c      	b.n	8006bfa <_dtoa_r+0x782>
 8006d40:	2300      	movs	r3, #0
 8006d42:	e788      	b.n	8006c56 <_dtoa_r+0x7de>
 8006d44:	3fe00000 	.word	0x3fe00000
 8006d48:	40240000 	.word	0x40240000
 8006d4c:	40140000 	.word	0x40140000
 8006d50:	9b02      	ldr	r3, [sp, #8]
 8006d52:	e780      	b.n	8006c56 <_dtoa_r+0x7de>
 8006d54:	2300      	movs	r3, #0
 8006d56:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d58:	e782      	b.n	8006c60 <_dtoa_r+0x7e8>
 8006d5a:	d099      	beq.n	8006c90 <_dtoa_r+0x818>
 8006d5c:	9a08      	ldr	r2, [sp, #32]
 8006d5e:	331c      	adds	r3, #28
 8006d60:	441a      	add	r2, r3
 8006d62:	4498      	add	r8, r3
 8006d64:	441e      	add	r6, r3
 8006d66:	9208      	str	r2, [sp, #32]
 8006d68:	e792      	b.n	8006c90 <_dtoa_r+0x818>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	e7f6      	b.n	8006d5c <_dtoa_r+0x8e4>
 8006d6e:	9b07      	ldr	r3, [sp, #28]
 8006d70:	9704      	str	r7, [sp, #16]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	dc20      	bgt.n	8006db8 <_dtoa_r+0x940>
 8006d76:	9300      	str	r3, [sp, #0]
 8006d78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	dd1e      	ble.n	8006dbc <_dtoa_r+0x944>
 8006d7e:	9b00      	ldr	r3, [sp, #0]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f47f aec0 	bne.w	8006b06 <_dtoa_r+0x68e>
 8006d86:	4621      	mov	r1, r4
 8006d88:	2205      	movs	r2, #5
 8006d8a:	4658      	mov	r0, fp
 8006d8c:	f000 fa9a 	bl	80072c4 <__multadd>
 8006d90:	4601      	mov	r1, r0
 8006d92:	4604      	mov	r4, r0
 8006d94:	4648      	mov	r0, r9
 8006d96:	f000 fcf7 	bl	8007788 <__mcmp>
 8006d9a:	2800      	cmp	r0, #0
 8006d9c:	f77f aeb3 	ble.w	8006b06 <_dtoa_r+0x68e>
 8006da0:	4656      	mov	r6, sl
 8006da2:	2331      	movs	r3, #49	@ 0x31
 8006da4:	f806 3b01 	strb.w	r3, [r6], #1
 8006da8:	9b04      	ldr	r3, [sp, #16]
 8006daa:	3301      	adds	r3, #1
 8006dac:	9304      	str	r3, [sp, #16]
 8006dae:	e6ae      	b.n	8006b0e <_dtoa_r+0x696>
 8006db0:	9c07      	ldr	r4, [sp, #28]
 8006db2:	9704      	str	r7, [sp, #16]
 8006db4:	4625      	mov	r5, r4
 8006db6:	e7f3      	b.n	8006da0 <_dtoa_r+0x928>
 8006db8:	9b07      	ldr	r3, [sp, #28]
 8006dba:	9300      	str	r3, [sp, #0]
 8006dbc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f000 8104 	beq.w	8006fcc <_dtoa_r+0xb54>
 8006dc4:	2e00      	cmp	r6, #0
 8006dc6:	dd05      	ble.n	8006dd4 <_dtoa_r+0x95c>
 8006dc8:	4629      	mov	r1, r5
 8006dca:	4632      	mov	r2, r6
 8006dcc:	4658      	mov	r0, fp
 8006dce:	f000 fc6f 	bl	80076b0 <__lshift>
 8006dd2:	4605      	mov	r5, r0
 8006dd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d05a      	beq.n	8006e90 <_dtoa_r+0xa18>
 8006dda:	6869      	ldr	r1, [r5, #4]
 8006ddc:	4658      	mov	r0, fp
 8006dde:	f000 fa0f 	bl	8007200 <_Balloc>
 8006de2:	4606      	mov	r6, r0
 8006de4:	b928      	cbnz	r0, 8006df2 <_dtoa_r+0x97a>
 8006de6:	4b84      	ldr	r3, [pc, #528]	@ (8006ff8 <_dtoa_r+0xb80>)
 8006de8:	4602      	mov	r2, r0
 8006dea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006dee:	f7ff bb5a 	b.w	80064a6 <_dtoa_r+0x2e>
 8006df2:	692a      	ldr	r2, [r5, #16]
 8006df4:	3202      	adds	r2, #2
 8006df6:	0092      	lsls	r2, r2, #2
 8006df8:	f105 010c 	add.w	r1, r5, #12
 8006dfc:	300c      	adds	r0, #12
 8006dfe:	f001 ff75 	bl	8008cec <memcpy>
 8006e02:	2201      	movs	r2, #1
 8006e04:	4631      	mov	r1, r6
 8006e06:	4658      	mov	r0, fp
 8006e08:	f000 fc52 	bl	80076b0 <__lshift>
 8006e0c:	f10a 0301 	add.w	r3, sl, #1
 8006e10:	9307      	str	r3, [sp, #28]
 8006e12:	9b00      	ldr	r3, [sp, #0]
 8006e14:	4453      	add	r3, sl
 8006e16:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e18:	9b02      	ldr	r3, [sp, #8]
 8006e1a:	f003 0301 	and.w	r3, r3, #1
 8006e1e:	462f      	mov	r7, r5
 8006e20:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e22:	4605      	mov	r5, r0
 8006e24:	9b07      	ldr	r3, [sp, #28]
 8006e26:	4621      	mov	r1, r4
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	4648      	mov	r0, r9
 8006e2c:	9300      	str	r3, [sp, #0]
 8006e2e:	f7ff fa99 	bl	8006364 <quorem>
 8006e32:	4639      	mov	r1, r7
 8006e34:	9002      	str	r0, [sp, #8]
 8006e36:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006e3a:	4648      	mov	r0, r9
 8006e3c:	f000 fca4 	bl	8007788 <__mcmp>
 8006e40:	462a      	mov	r2, r5
 8006e42:	9008      	str	r0, [sp, #32]
 8006e44:	4621      	mov	r1, r4
 8006e46:	4658      	mov	r0, fp
 8006e48:	f000 fcba 	bl	80077c0 <__mdiff>
 8006e4c:	68c2      	ldr	r2, [r0, #12]
 8006e4e:	4606      	mov	r6, r0
 8006e50:	bb02      	cbnz	r2, 8006e94 <_dtoa_r+0xa1c>
 8006e52:	4601      	mov	r1, r0
 8006e54:	4648      	mov	r0, r9
 8006e56:	f000 fc97 	bl	8007788 <__mcmp>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	4631      	mov	r1, r6
 8006e5e:	4658      	mov	r0, fp
 8006e60:	920e      	str	r2, [sp, #56]	@ 0x38
 8006e62:	f000 fa0d 	bl	8007280 <_Bfree>
 8006e66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e68:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e6a:	9e07      	ldr	r6, [sp, #28]
 8006e6c:	ea43 0102 	orr.w	r1, r3, r2
 8006e70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e72:	4319      	orrs	r1, r3
 8006e74:	d110      	bne.n	8006e98 <_dtoa_r+0xa20>
 8006e76:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006e7a:	d029      	beq.n	8006ed0 <_dtoa_r+0xa58>
 8006e7c:	9b08      	ldr	r3, [sp, #32]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	dd02      	ble.n	8006e88 <_dtoa_r+0xa10>
 8006e82:	9b02      	ldr	r3, [sp, #8]
 8006e84:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006e88:	9b00      	ldr	r3, [sp, #0]
 8006e8a:	f883 8000 	strb.w	r8, [r3]
 8006e8e:	e63f      	b.n	8006b10 <_dtoa_r+0x698>
 8006e90:	4628      	mov	r0, r5
 8006e92:	e7bb      	b.n	8006e0c <_dtoa_r+0x994>
 8006e94:	2201      	movs	r2, #1
 8006e96:	e7e1      	b.n	8006e5c <_dtoa_r+0x9e4>
 8006e98:	9b08      	ldr	r3, [sp, #32]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	db04      	blt.n	8006ea8 <_dtoa_r+0xa30>
 8006e9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006ea0:	430b      	orrs	r3, r1
 8006ea2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006ea4:	430b      	orrs	r3, r1
 8006ea6:	d120      	bne.n	8006eea <_dtoa_r+0xa72>
 8006ea8:	2a00      	cmp	r2, #0
 8006eaa:	dded      	ble.n	8006e88 <_dtoa_r+0xa10>
 8006eac:	4649      	mov	r1, r9
 8006eae:	2201      	movs	r2, #1
 8006eb0:	4658      	mov	r0, fp
 8006eb2:	f000 fbfd 	bl	80076b0 <__lshift>
 8006eb6:	4621      	mov	r1, r4
 8006eb8:	4681      	mov	r9, r0
 8006eba:	f000 fc65 	bl	8007788 <__mcmp>
 8006ebe:	2800      	cmp	r0, #0
 8006ec0:	dc03      	bgt.n	8006eca <_dtoa_r+0xa52>
 8006ec2:	d1e1      	bne.n	8006e88 <_dtoa_r+0xa10>
 8006ec4:	f018 0f01 	tst.w	r8, #1
 8006ec8:	d0de      	beq.n	8006e88 <_dtoa_r+0xa10>
 8006eca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006ece:	d1d8      	bne.n	8006e82 <_dtoa_r+0xa0a>
 8006ed0:	9a00      	ldr	r2, [sp, #0]
 8006ed2:	2339      	movs	r3, #57	@ 0x39
 8006ed4:	7013      	strb	r3, [r2, #0]
 8006ed6:	4633      	mov	r3, r6
 8006ed8:	461e      	mov	r6, r3
 8006eda:	3b01      	subs	r3, #1
 8006edc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006ee0:	2a39      	cmp	r2, #57	@ 0x39
 8006ee2:	d052      	beq.n	8006f8a <_dtoa_r+0xb12>
 8006ee4:	3201      	adds	r2, #1
 8006ee6:	701a      	strb	r2, [r3, #0]
 8006ee8:	e612      	b.n	8006b10 <_dtoa_r+0x698>
 8006eea:	2a00      	cmp	r2, #0
 8006eec:	dd07      	ble.n	8006efe <_dtoa_r+0xa86>
 8006eee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006ef2:	d0ed      	beq.n	8006ed0 <_dtoa_r+0xa58>
 8006ef4:	9a00      	ldr	r2, [sp, #0]
 8006ef6:	f108 0301 	add.w	r3, r8, #1
 8006efa:	7013      	strb	r3, [r2, #0]
 8006efc:	e608      	b.n	8006b10 <_dtoa_r+0x698>
 8006efe:	9b07      	ldr	r3, [sp, #28]
 8006f00:	9a07      	ldr	r2, [sp, #28]
 8006f02:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006f06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d028      	beq.n	8006f5e <_dtoa_r+0xae6>
 8006f0c:	4649      	mov	r1, r9
 8006f0e:	2300      	movs	r3, #0
 8006f10:	220a      	movs	r2, #10
 8006f12:	4658      	mov	r0, fp
 8006f14:	f000 f9d6 	bl	80072c4 <__multadd>
 8006f18:	42af      	cmp	r7, r5
 8006f1a:	4681      	mov	r9, r0
 8006f1c:	f04f 0300 	mov.w	r3, #0
 8006f20:	f04f 020a 	mov.w	r2, #10
 8006f24:	4639      	mov	r1, r7
 8006f26:	4658      	mov	r0, fp
 8006f28:	d107      	bne.n	8006f3a <_dtoa_r+0xac2>
 8006f2a:	f000 f9cb 	bl	80072c4 <__multadd>
 8006f2e:	4607      	mov	r7, r0
 8006f30:	4605      	mov	r5, r0
 8006f32:	9b07      	ldr	r3, [sp, #28]
 8006f34:	3301      	adds	r3, #1
 8006f36:	9307      	str	r3, [sp, #28]
 8006f38:	e774      	b.n	8006e24 <_dtoa_r+0x9ac>
 8006f3a:	f000 f9c3 	bl	80072c4 <__multadd>
 8006f3e:	4629      	mov	r1, r5
 8006f40:	4607      	mov	r7, r0
 8006f42:	2300      	movs	r3, #0
 8006f44:	220a      	movs	r2, #10
 8006f46:	4658      	mov	r0, fp
 8006f48:	f000 f9bc 	bl	80072c4 <__multadd>
 8006f4c:	4605      	mov	r5, r0
 8006f4e:	e7f0      	b.n	8006f32 <_dtoa_r+0xaba>
 8006f50:	9b00      	ldr	r3, [sp, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	bfcc      	ite	gt
 8006f56:	461e      	movgt	r6, r3
 8006f58:	2601      	movle	r6, #1
 8006f5a:	4456      	add	r6, sl
 8006f5c:	2700      	movs	r7, #0
 8006f5e:	4649      	mov	r1, r9
 8006f60:	2201      	movs	r2, #1
 8006f62:	4658      	mov	r0, fp
 8006f64:	f000 fba4 	bl	80076b0 <__lshift>
 8006f68:	4621      	mov	r1, r4
 8006f6a:	4681      	mov	r9, r0
 8006f6c:	f000 fc0c 	bl	8007788 <__mcmp>
 8006f70:	2800      	cmp	r0, #0
 8006f72:	dcb0      	bgt.n	8006ed6 <_dtoa_r+0xa5e>
 8006f74:	d102      	bne.n	8006f7c <_dtoa_r+0xb04>
 8006f76:	f018 0f01 	tst.w	r8, #1
 8006f7a:	d1ac      	bne.n	8006ed6 <_dtoa_r+0xa5e>
 8006f7c:	4633      	mov	r3, r6
 8006f7e:	461e      	mov	r6, r3
 8006f80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f84:	2a30      	cmp	r2, #48	@ 0x30
 8006f86:	d0fa      	beq.n	8006f7e <_dtoa_r+0xb06>
 8006f88:	e5c2      	b.n	8006b10 <_dtoa_r+0x698>
 8006f8a:	459a      	cmp	sl, r3
 8006f8c:	d1a4      	bne.n	8006ed8 <_dtoa_r+0xa60>
 8006f8e:	9b04      	ldr	r3, [sp, #16]
 8006f90:	3301      	adds	r3, #1
 8006f92:	9304      	str	r3, [sp, #16]
 8006f94:	2331      	movs	r3, #49	@ 0x31
 8006f96:	f88a 3000 	strb.w	r3, [sl]
 8006f9a:	e5b9      	b.n	8006b10 <_dtoa_r+0x698>
 8006f9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006f9e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006ffc <_dtoa_r+0xb84>
 8006fa2:	b11b      	cbz	r3, 8006fac <_dtoa_r+0xb34>
 8006fa4:	f10a 0308 	add.w	r3, sl, #8
 8006fa8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006faa:	6013      	str	r3, [r2, #0]
 8006fac:	4650      	mov	r0, sl
 8006fae:	b019      	add	sp, #100	@ 0x64
 8006fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	f77f ae37 	ble.w	8006c2a <_dtoa_r+0x7b2>
 8006fbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006fbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fc0:	2001      	movs	r0, #1
 8006fc2:	e655      	b.n	8006c70 <_dtoa_r+0x7f8>
 8006fc4:	9b00      	ldr	r3, [sp, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	f77f aed6 	ble.w	8006d78 <_dtoa_r+0x900>
 8006fcc:	4656      	mov	r6, sl
 8006fce:	4621      	mov	r1, r4
 8006fd0:	4648      	mov	r0, r9
 8006fd2:	f7ff f9c7 	bl	8006364 <quorem>
 8006fd6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006fda:	f806 8b01 	strb.w	r8, [r6], #1
 8006fde:	9b00      	ldr	r3, [sp, #0]
 8006fe0:	eba6 020a 	sub.w	r2, r6, sl
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	ddb3      	ble.n	8006f50 <_dtoa_r+0xad8>
 8006fe8:	4649      	mov	r1, r9
 8006fea:	2300      	movs	r3, #0
 8006fec:	220a      	movs	r2, #10
 8006fee:	4658      	mov	r0, fp
 8006ff0:	f000 f968 	bl	80072c4 <__multadd>
 8006ff4:	4681      	mov	r9, r0
 8006ff6:	e7ea      	b.n	8006fce <_dtoa_r+0xb56>
 8006ff8:	08009db9 	.word	0x08009db9
 8006ffc:	08009d3d 	.word	0x08009d3d

08007000 <_free_r>:
 8007000:	b538      	push	{r3, r4, r5, lr}
 8007002:	4605      	mov	r5, r0
 8007004:	2900      	cmp	r1, #0
 8007006:	d041      	beq.n	800708c <_free_r+0x8c>
 8007008:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800700c:	1f0c      	subs	r4, r1, #4
 800700e:	2b00      	cmp	r3, #0
 8007010:	bfb8      	it	lt
 8007012:	18e4      	addlt	r4, r4, r3
 8007014:	f000 f8e8 	bl	80071e8 <__malloc_lock>
 8007018:	4a1d      	ldr	r2, [pc, #116]	@ (8007090 <_free_r+0x90>)
 800701a:	6813      	ldr	r3, [r2, #0]
 800701c:	b933      	cbnz	r3, 800702c <_free_r+0x2c>
 800701e:	6063      	str	r3, [r4, #4]
 8007020:	6014      	str	r4, [r2, #0]
 8007022:	4628      	mov	r0, r5
 8007024:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007028:	f000 b8e4 	b.w	80071f4 <__malloc_unlock>
 800702c:	42a3      	cmp	r3, r4
 800702e:	d908      	bls.n	8007042 <_free_r+0x42>
 8007030:	6820      	ldr	r0, [r4, #0]
 8007032:	1821      	adds	r1, r4, r0
 8007034:	428b      	cmp	r3, r1
 8007036:	bf01      	itttt	eq
 8007038:	6819      	ldreq	r1, [r3, #0]
 800703a:	685b      	ldreq	r3, [r3, #4]
 800703c:	1809      	addeq	r1, r1, r0
 800703e:	6021      	streq	r1, [r4, #0]
 8007040:	e7ed      	b.n	800701e <_free_r+0x1e>
 8007042:	461a      	mov	r2, r3
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	b10b      	cbz	r3, 800704c <_free_r+0x4c>
 8007048:	42a3      	cmp	r3, r4
 800704a:	d9fa      	bls.n	8007042 <_free_r+0x42>
 800704c:	6811      	ldr	r1, [r2, #0]
 800704e:	1850      	adds	r0, r2, r1
 8007050:	42a0      	cmp	r0, r4
 8007052:	d10b      	bne.n	800706c <_free_r+0x6c>
 8007054:	6820      	ldr	r0, [r4, #0]
 8007056:	4401      	add	r1, r0
 8007058:	1850      	adds	r0, r2, r1
 800705a:	4283      	cmp	r3, r0
 800705c:	6011      	str	r1, [r2, #0]
 800705e:	d1e0      	bne.n	8007022 <_free_r+0x22>
 8007060:	6818      	ldr	r0, [r3, #0]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	6053      	str	r3, [r2, #4]
 8007066:	4408      	add	r0, r1
 8007068:	6010      	str	r0, [r2, #0]
 800706a:	e7da      	b.n	8007022 <_free_r+0x22>
 800706c:	d902      	bls.n	8007074 <_free_r+0x74>
 800706e:	230c      	movs	r3, #12
 8007070:	602b      	str	r3, [r5, #0]
 8007072:	e7d6      	b.n	8007022 <_free_r+0x22>
 8007074:	6820      	ldr	r0, [r4, #0]
 8007076:	1821      	adds	r1, r4, r0
 8007078:	428b      	cmp	r3, r1
 800707a:	bf04      	itt	eq
 800707c:	6819      	ldreq	r1, [r3, #0]
 800707e:	685b      	ldreq	r3, [r3, #4]
 8007080:	6063      	str	r3, [r4, #4]
 8007082:	bf04      	itt	eq
 8007084:	1809      	addeq	r1, r1, r0
 8007086:	6021      	streq	r1, [r4, #0]
 8007088:	6054      	str	r4, [r2, #4]
 800708a:	e7ca      	b.n	8007022 <_free_r+0x22>
 800708c:	bd38      	pop	{r3, r4, r5, pc}
 800708e:	bf00      	nop
 8007090:	20000448 	.word	0x20000448

08007094 <malloc>:
 8007094:	4b02      	ldr	r3, [pc, #8]	@ (80070a0 <malloc+0xc>)
 8007096:	4601      	mov	r1, r0
 8007098:	6818      	ldr	r0, [r3, #0]
 800709a:	f000 b825 	b.w	80070e8 <_malloc_r>
 800709e:	bf00      	nop
 80070a0:	20000018 	.word	0x20000018

080070a4 <sbrk_aligned>:
 80070a4:	b570      	push	{r4, r5, r6, lr}
 80070a6:	4e0f      	ldr	r6, [pc, #60]	@ (80070e4 <sbrk_aligned+0x40>)
 80070a8:	460c      	mov	r4, r1
 80070aa:	6831      	ldr	r1, [r6, #0]
 80070ac:	4605      	mov	r5, r0
 80070ae:	b911      	cbnz	r1, 80070b6 <sbrk_aligned+0x12>
 80070b0:	f001 fe0c 	bl	8008ccc <_sbrk_r>
 80070b4:	6030      	str	r0, [r6, #0]
 80070b6:	4621      	mov	r1, r4
 80070b8:	4628      	mov	r0, r5
 80070ba:	f001 fe07 	bl	8008ccc <_sbrk_r>
 80070be:	1c43      	adds	r3, r0, #1
 80070c0:	d103      	bne.n	80070ca <sbrk_aligned+0x26>
 80070c2:	f04f 34ff 	mov.w	r4, #4294967295
 80070c6:	4620      	mov	r0, r4
 80070c8:	bd70      	pop	{r4, r5, r6, pc}
 80070ca:	1cc4      	adds	r4, r0, #3
 80070cc:	f024 0403 	bic.w	r4, r4, #3
 80070d0:	42a0      	cmp	r0, r4
 80070d2:	d0f8      	beq.n	80070c6 <sbrk_aligned+0x22>
 80070d4:	1a21      	subs	r1, r4, r0
 80070d6:	4628      	mov	r0, r5
 80070d8:	f001 fdf8 	bl	8008ccc <_sbrk_r>
 80070dc:	3001      	adds	r0, #1
 80070de:	d1f2      	bne.n	80070c6 <sbrk_aligned+0x22>
 80070e0:	e7ef      	b.n	80070c2 <sbrk_aligned+0x1e>
 80070e2:	bf00      	nop
 80070e4:	20000444 	.word	0x20000444

080070e8 <_malloc_r>:
 80070e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070ec:	1ccd      	adds	r5, r1, #3
 80070ee:	f025 0503 	bic.w	r5, r5, #3
 80070f2:	3508      	adds	r5, #8
 80070f4:	2d0c      	cmp	r5, #12
 80070f6:	bf38      	it	cc
 80070f8:	250c      	movcc	r5, #12
 80070fa:	2d00      	cmp	r5, #0
 80070fc:	4606      	mov	r6, r0
 80070fe:	db01      	blt.n	8007104 <_malloc_r+0x1c>
 8007100:	42a9      	cmp	r1, r5
 8007102:	d904      	bls.n	800710e <_malloc_r+0x26>
 8007104:	230c      	movs	r3, #12
 8007106:	6033      	str	r3, [r6, #0]
 8007108:	2000      	movs	r0, #0
 800710a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800710e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80071e4 <_malloc_r+0xfc>
 8007112:	f000 f869 	bl	80071e8 <__malloc_lock>
 8007116:	f8d8 3000 	ldr.w	r3, [r8]
 800711a:	461c      	mov	r4, r3
 800711c:	bb44      	cbnz	r4, 8007170 <_malloc_r+0x88>
 800711e:	4629      	mov	r1, r5
 8007120:	4630      	mov	r0, r6
 8007122:	f7ff ffbf 	bl	80070a4 <sbrk_aligned>
 8007126:	1c43      	adds	r3, r0, #1
 8007128:	4604      	mov	r4, r0
 800712a:	d158      	bne.n	80071de <_malloc_r+0xf6>
 800712c:	f8d8 4000 	ldr.w	r4, [r8]
 8007130:	4627      	mov	r7, r4
 8007132:	2f00      	cmp	r7, #0
 8007134:	d143      	bne.n	80071be <_malloc_r+0xd6>
 8007136:	2c00      	cmp	r4, #0
 8007138:	d04b      	beq.n	80071d2 <_malloc_r+0xea>
 800713a:	6823      	ldr	r3, [r4, #0]
 800713c:	4639      	mov	r1, r7
 800713e:	4630      	mov	r0, r6
 8007140:	eb04 0903 	add.w	r9, r4, r3
 8007144:	f001 fdc2 	bl	8008ccc <_sbrk_r>
 8007148:	4581      	cmp	r9, r0
 800714a:	d142      	bne.n	80071d2 <_malloc_r+0xea>
 800714c:	6821      	ldr	r1, [r4, #0]
 800714e:	1a6d      	subs	r5, r5, r1
 8007150:	4629      	mov	r1, r5
 8007152:	4630      	mov	r0, r6
 8007154:	f7ff ffa6 	bl	80070a4 <sbrk_aligned>
 8007158:	3001      	adds	r0, #1
 800715a:	d03a      	beq.n	80071d2 <_malloc_r+0xea>
 800715c:	6823      	ldr	r3, [r4, #0]
 800715e:	442b      	add	r3, r5
 8007160:	6023      	str	r3, [r4, #0]
 8007162:	f8d8 3000 	ldr.w	r3, [r8]
 8007166:	685a      	ldr	r2, [r3, #4]
 8007168:	bb62      	cbnz	r2, 80071c4 <_malloc_r+0xdc>
 800716a:	f8c8 7000 	str.w	r7, [r8]
 800716e:	e00f      	b.n	8007190 <_malloc_r+0xa8>
 8007170:	6822      	ldr	r2, [r4, #0]
 8007172:	1b52      	subs	r2, r2, r5
 8007174:	d420      	bmi.n	80071b8 <_malloc_r+0xd0>
 8007176:	2a0b      	cmp	r2, #11
 8007178:	d917      	bls.n	80071aa <_malloc_r+0xc2>
 800717a:	1961      	adds	r1, r4, r5
 800717c:	42a3      	cmp	r3, r4
 800717e:	6025      	str	r5, [r4, #0]
 8007180:	bf18      	it	ne
 8007182:	6059      	strne	r1, [r3, #4]
 8007184:	6863      	ldr	r3, [r4, #4]
 8007186:	bf08      	it	eq
 8007188:	f8c8 1000 	streq.w	r1, [r8]
 800718c:	5162      	str	r2, [r4, r5]
 800718e:	604b      	str	r3, [r1, #4]
 8007190:	4630      	mov	r0, r6
 8007192:	f000 f82f 	bl	80071f4 <__malloc_unlock>
 8007196:	f104 000b 	add.w	r0, r4, #11
 800719a:	1d23      	adds	r3, r4, #4
 800719c:	f020 0007 	bic.w	r0, r0, #7
 80071a0:	1ac2      	subs	r2, r0, r3
 80071a2:	bf1c      	itt	ne
 80071a4:	1a1b      	subne	r3, r3, r0
 80071a6:	50a3      	strne	r3, [r4, r2]
 80071a8:	e7af      	b.n	800710a <_malloc_r+0x22>
 80071aa:	6862      	ldr	r2, [r4, #4]
 80071ac:	42a3      	cmp	r3, r4
 80071ae:	bf0c      	ite	eq
 80071b0:	f8c8 2000 	streq.w	r2, [r8]
 80071b4:	605a      	strne	r2, [r3, #4]
 80071b6:	e7eb      	b.n	8007190 <_malloc_r+0xa8>
 80071b8:	4623      	mov	r3, r4
 80071ba:	6864      	ldr	r4, [r4, #4]
 80071bc:	e7ae      	b.n	800711c <_malloc_r+0x34>
 80071be:	463c      	mov	r4, r7
 80071c0:	687f      	ldr	r7, [r7, #4]
 80071c2:	e7b6      	b.n	8007132 <_malloc_r+0x4a>
 80071c4:	461a      	mov	r2, r3
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	42a3      	cmp	r3, r4
 80071ca:	d1fb      	bne.n	80071c4 <_malloc_r+0xdc>
 80071cc:	2300      	movs	r3, #0
 80071ce:	6053      	str	r3, [r2, #4]
 80071d0:	e7de      	b.n	8007190 <_malloc_r+0xa8>
 80071d2:	230c      	movs	r3, #12
 80071d4:	6033      	str	r3, [r6, #0]
 80071d6:	4630      	mov	r0, r6
 80071d8:	f000 f80c 	bl	80071f4 <__malloc_unlock>
 80071dc:	e794      	b.n	8007108 <_malloc_r+0x20>
 80071de:	6005      	str	r5, [r0, #0]
 80071e0:	e7d6      	b.n	8007190 <_malloc_r+0xa8>
 80071e2:	bf00      	nop
 80071e4:	20000448 	.word	0x20000448

080071e8 <__malloc_lock>:
 80071e8:	4801      	ldr	r0, [pc, #4]	@ (80071f0 <__malloc_lock+0x8>)
 80071ea:	f7ff b8b2 	b.w	8006352 <__retarget_lock_acquire_recursive>
 80071ee:	bf00      	nop
 80071f0:	20000440 	.word	0x20000440

080071f4 <__malloc_unlock>:
 80071f4:	4801      	ldr	r0, [pc, #4]	@ (80071fc <__malloc_unlock+0x8>)
 80071f6:	f7ff b8ad 	b.w	8006354 <__retarget_lock_release_recursive>
 80071fa:	bf00      	nop
 80071fc:	20000440 	.word	0x20000440

08007200 <_Balloc>:
 8007200:	b570      	push	{r4, r5, r6, lr}
 8007202:	69c6      	ldr	r6, [r0, #28]
 8007204:	4604      	mov	r4, r0
 8007206:	460d      	mov	r5, r1
 8007208:	b976      	cbnz	r6, 8007228 <_Balloc+0x28>
 800720a:	2010      	movs	r0, #16
 800720c:	f7ff ff42 	bl	8007094 <malloc>
 8007210:	4602      	mov	r2, r0
 8007212:	61e0      	str	r0, [r4, #28]
 8007214:	b920      	cbnz	r0, 8007220 <_Balloc+0x20>
 8007216:	4b18      	ldr	r3, [pc, #96]	@ (8007278 <_Balloc+0x78>)
 8007218:	4818      	ldr	r0, [pc, #96]	@ (800727c <_Balloc+0x7c>)
 800721a:	216b      	movs	r1, #107	@ 0x6b
 800721c:	f001 fd7c 	bl	8008d18 <__assert_func>
 8007220:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007224:	6006      	str	r6, [r0, #0]
 8007226:	60c6      	str	r6, [r0, #12]
 8007228:	69e6      	ldr	r6, [r4, #28]
 800722a:	68f3      	ldr	r3, [r6, #12]
 800722c:	b183      	cbz	r3, 8007250 <_Balloc+0x50>
 800722e:	69e3      	ldr	r3, [r4, #28]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007236:	b9b8      	cbnz	r0, 8007268 <_Balloc+0x68>
 8007238:	2101      	movs	r1, #1
 800723a:	fa01 f605 	lsl.w	r6, r1, r5
 800723e:	1d72      	adds	r2, r6, #5
 8007240:	0092      	lsls	r2, r2, #2
 8007242:	4620      	mov	r0, r4
 8007244:	f001 fd86 	bl	8008d54 <_calloc_r>
 8007248:	b160      	cbz	r0, 8007264 <_Balloc+0x64>
 800724a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800724e:	e00e      	b.n	800726e <_Balloc+0x6e>
 8007250:	2221      	movs	r2, #33	@ 0x21
 8007252:	2104      	movs	r1, #4
 8007254:	4620      	mov	r0, r4
 8007256:	f001 fd7d 	bl	8008d54 <_calloc_r>
 800725a:	69e3      	ldr	r3, [r4, #28]
 800725c:	60f0      	str	r0, [r6, #12]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d1e4      	bne.n	800722e <_Balloc+0x2e>
 8007264:	2000      	movs	r0, #0
 8007266:	bd70      	pop	{r4, r5, r6, pc}
 8007268:	6802      	ldr	r2, [r0, #0]
 800726a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800726e:	2300      	movs	r3, #0
 8007270:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007274:	e7f7      	b.n	8007266 <_Balloc+0x66>
 8007276:	bf00      	nop
 8007278:	08009d4a 	.word	0x08009d4a
 800727c:	08009dca 	.word	0x08009dca

08007280 <_Bfree>:
 8007280:	b570      	push	{r4, r5, r6, lr}
 8007282:	69c6      	ldr	r6, [r0, #28]
 8007284:	4605      	mov	r5, r0
 8007286:	460c      	mov	r4, r1
 8007288:	b976      	cbnz	r6, 80072a8 <_Bfree+0x28>
 800728a:	2010      	movs	r0, #16
 800728c:	f7ff ff02 	bl	8007094 <malloc>
 8007290:	4602      	mov	r2, r0
 8007292:	61e8      	str	r0, [r5, #28]
 8007294:	b920      	cbnz	r0, 80072a0 <_Bfree+0x20>
 8007296:	4b09      	ldr	r3, [pc, #36]	@ (80072bc <_Bfree+0x3c>)
 8007298:	4809      	ldr	r0, [pc, #36]	@ (80072c0 <_Bfree+0x40>)
 800729a:	218f      	movs	r1, #143	@ 0x8f
 800729c:	f001 fd3c 	bl	8008d18 <__assert_func>
 80072a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072a4:	6006      	str	r6, [r0, #0]
 80072a6:	60c6      	str	r6, [r0, #12]
 80072a8:	b13c      	cbz	r4, 80072ba <_Bfree+0x3a>
 80072aa:	69eb      	ldr	r3, [r5, #28]
 80072ac:	6862      	ldr	r2, [r4, #4]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80072b4:	6021      	str	r1, [r4, #0]
 80072b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80072ba:	bd70      	pop	{r4, r5, r6, pc}
 80072bc:	08009d4a 	.word	0x08009d4a
 80072c0:	08009dca 	.word	0x08009dca

080072c4 <__multadd>:
 80072c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072c8:	690d      	ldr	r5, [r1, #16]
 80072ca:	4607      	mov	r7, r0
 80072cc:	460c      	mov	r4, r1
 80072ce:	461e      	mov	r6, r3
 80072d0:	f101 0c14 	add.w	ip, r1, #20
 80072d4:	2000      	movs	r0, #0
 80072d6:	f8dc 3000 	ldr.w	r3, [ip]
 80072da:	b299      	uxth	r1, r3
 80072dc:	fb02 6101 	mla	r1, r2, r1, r6
 80072e0:	0c1e      	lsrs	r6, r3, #16
 80072e2:	0c0b      	lsrs	r3, r1, #16
 80072e4:	fb02 3306 	mla	r3, r2, r6, r3
 80072e8:	b289      	uxth	r1, r1
 80072ea:	3001      	adds	r0, #1
 80072ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80072f0:	4285      	cmp	r5, r0
 80072f2:	f84c 1b04 	str.w	r1, [ip], #4
 80072f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80072fa:	dcec      	bgt.n	80072d6 <__multadd+0x12>
 80072fc:	b30e      	cbz	r6, 8007342 <__multadd+0x7e>
 80072fe:	68a3      	ldr	r3, [r4, #8]
 8007300:	42ab      	cmp	r3, r5
 8007302:	dc19      	bgt.n	8007338 <__multadd+0x74>
 8007304:	6861      	ldr	r1, [r4, #4]
 8007306:	4638      	mov	r0, r7
 8007308:	3101      	adds	r1, #1
 800730a:	f7ff ff79 	bl	8007200 <_Balloc>
 800730e:	4680      	mov	r8, r0
 8007310:	b928      	cbnz	r0, 800731e <__multadd+0x5a>
 8007312:	4602      	mov	r2, r0
 8007314:	4b0c      	ldr	r3, [pc, #48]	@ (8007348 <__multadd+0x84>)
 8007316:	480d      	ldr	r0, [pc, #52]	@ (800734c <__multadd+0x88>)
 8007318:	21ba      	movs	r1, #186	@ 0xba
 800731a:	f001 fcfd 	bl	8008d18 <__assert_func>
 800731e:	6922      	ldr	r2, [r4, #16]
 8007320:	3202      	adds	r2, #2
 8007322:	f104 010c 	add.w	r1, r4, #12
 8007326:	0092      	lsls	r2, r2, #2
 8007328:	300c      	adds	r0, #12
 800732a:	f001 fcdf 	bl	8008cec <memcpy>
 800732e:	4621      	mov	r1, r4
 8007330:	4638      	mov	r0, r7
 8007332:	f7ff ffa5 	bl	8007280 <_Bfree>
 8007336:	4644      	mov	r4, r8
 8007338:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800733c:	3501      	adds	r5, #1
 800733e:	615e      	str	r6, [r3, #20]
 8007340:	6125      	str	r5, [r4, #16]
 8007342:	4620      	mov	r0, r4
 8007344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007348:	08009db9 	.word	0x08009db9
 800734c:	08009dca 	.word	0x08009dca

08007350 <__s2b>:
 8007350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007354:	460c      	mov	r4, r1
 8007356:	4615      	mov	r5, r2
 8007358:	461f      	mov	r7, r3
 800735a:	2209      	movs	r2, #9
 800735c:	3308      	adds	r3, #8
 800735e:	4606      	mov	r6, r0
 8007360:	fb93 f3f2 	sdiv	r3, r3, r2
 8007364:	2100      	movs	r1, #0
 8007366:	2201      	movs	r2, #1
 8007368:	429a      	cmp	r2, r3
 800736a:	db09      	blt.n	8007380 <__s2b+0x30>
 800736c:	4630      	mov	r0, r6
 800736e:	f7ff ff47 	bl	8007200 <_Balloc>
 8007372:	b940      	cbnz	r0, 8007386 <__s2b+0x36>
 8007374:	4602      	mov	r2, r0
 8007376:	4b19      	ldr	r3, [pc, #100]	@ (80073dc <__s2b+0x8c>)
 8007378:	4819      	ldr	r0, [pc, #100]	@ (80073e0 <__s2b+0x90>)
 800737a:	21d3      	movs	r1, #211	@ 0xd3
 800737c:	f001 fccc 	bl	8008d18 <__assert_func>
 8007380:	0052      	lsls	r2, r2, #1
 8007382:	3101      	adds	r1, #1
 8007384:	e7f0      	b.n	8007368 <__s2b+0x18>
 8007386:	9b08      	ldr	r3, [sp, #32]
 8007388:	6143      	str	r3, [r0, #20]
 800738a:	2d09      	cmp	r5, #9
 800738c:	f04f 0301 	mov.w	r3, #1
 8007390:	6103      	str	r3, [r0, #16]
 8007392:	dd16      	ble.n	80073c2 <__s2b+0x72>
 8007394:	f104 0909 	add.w	r9, r4, #9
 8007398:	46c8      	mov	r8, r9
 800739a:	442c      	add	r4, r5
 800739c:	f818 3b01 	ldrb.w	r3, [r8], #1
 80073a0:	4601      	mov	r1, r0
 80073a2:	3b30      	subs	r3, #48	@ 0x30
 80073a4:	220a      	movs	r2, #10
 80073a6:	4630      	mov	r0, r6
 80073a8:	f7ff ff8c 	bl	80072c4 <__multadd>
 80073ac:	45a0      	cmp	r8, r4
 80073ae:	d1f5      	bne.n	800739c <__s2b+0x4c>
 80073b0:	f1a5 0408 	sub.w	r4, r5, #8
 80073b4:	444c      	add	r4, r9
 80073b6:	1b2d      	subs	r5, r5, r4
 80073b8:	1963      	adds	r3, r4, r5
 80073ba:	42bb      	cmp	r3, r7
 80073bc:	db04      	blt.n	80073c8 <__s2b+0x78>
 80073be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073c2:	340a      	adds	r4, #10
 80073c4:	2509      	movs	r5, #9
 80073c6:	e7f6      	b.n	80073b6 <__s2b+0x66>
 80073c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80073cc:	4601      	mov	r1, r0
 80073ce:	3b30      	subs	r3, #48	@ 0x30
 80073d0:	220a      	movs	r2, #10
 80073d2:	4630      	mov	r0, r6
 80073d4:	f7ff ff76 	bl	80072c4 <__multadd>
 80073d8:	e7ee      	b.n	80073b8 <__s2b+0x68>
 80073da:	bf00      	nop
 80073dc:	08009db9 	.word	0x08009db9
 80073e0:	08009dca 	.word	0x08009dca

080073e4 <__hi0bits>:
 80073e4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80073e8:	4603      	mov	r3, r0
 80073ea:	bf36      	itet	cc
 80073ec:	0403      	lslcc	r3, r0, #16
 80073ee:	2000      	movcs	r0, #0
 80073f0:	2010      	movcc	r0, #16
 80073f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80073f6:	bf3c      	itt	cc
 80073f8:	021b      	lslcc	r3, r3, #8
 80073fa:	3008      	addcc	r0, #8
 80073fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007400:	bf3c      	itt	cc
 8007402:	011b      	lslcc	r3, r3, #4
 8007404:	3004      	addcc	r0, #4
 8007406:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800740a:	bf3c      	itt	cc
 800740c:	009b      	lslcc	r3, r3, #2
 800740e:	3002      	addcc	r0, #2
 8007410:	2b00      	cmp	r3, #0
 8007412:	db05      	blt.n	8007420 <__hi0bits+0x3c>
 8007414:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007418:	f100 0001 	add.w	r0, r0, #1
 800741c:	bf08      	it	eq
 800741e:	2020      	moveq	r0, #32
 8007420:	4770      	bx	lr

08007422 <__lo0bits>:
 8007422:	6803      	ldr	r3, [r0, #0]
 8007424:	4602      	mov	r2, r0
 8007426:	f013 0007 	ands.w	r0, r3, #7
 800742a:	d00b      	beq.n	8007444 <__lo0bits+0x22>
 800742c:	07d9      	lsls	r1, r3, #31
 800742e:	d421      	bmi.n	8007474 <__lo0bits+0x52>
 8007430:	0798      	lsls	r0, r3, #30
 8007432:	bf49      	itett	mi
 8007434:	085b      	lsrmi	r3, r3, #1
 8007436:	089b      	lsrpl	r3, r3, #2
 8007438:	2001      	movmi	r0, #1
 800743a:	6013      	strmi	r3, [r2, #0]
 800743c:	bf5c      	itt	pl
 800743e:	6013      	strpl	r3, [r2, #0]
 8007440:	2002      	movpl	r0, #2
 8007442:	4770      	bx	lr
 8007444:	b299      	uxth	r1, r3
 8007446:	b909      	cbnz	r1, 800744c <__lo0bits+0x2a>
 8007448:	0c1b      	lsrs	r3, r3, #16
 800744a:	2010      	movs	r0, #16
 800744c:	b2d9      	uxtb	r1, r3
 800744e:	b909      	cbnz	r1, 8007454 <__lo0bits+0x32>
 8007450:	3008      	adds	r0, #8
 8007452:	0a1b      	lsrs	r3, r3, #8
 8007454:	0719      	lsls	r1, r3, #28
 8007456:	bf04      	itt	eq
 8007458:	091b      	lsreq	r3, r3, #4
 800745a:	3004      	addeq	r0, #4
 800745c:	0799      	lsls	r1, r3, #30
 800745e:	bf04      	itt	eq
 8007460:	089b      	lsreq	r3, r3, #2
 8007462:	3002      	addeq	r0, #2
 8007464:	07d9      	lsls	r1, r3, #31
 8007466:	d403      	bmi.n	8007470 <__lo0bits+0x4e>
 8007468:	085b      	lsrs	r3, r3, #1
 800746a:	f100 0001 	add.w	r0, r0, #1
 800746e:	d003      	beq.n	8007478 <__lo0bits+0x56>
 8007470:	6013      	str	r3, [r2, #0]
 8007472:	4770      	bx	lr
 8007474:	2000      	movs	r0, #0
 8007476:	4770      	bx	lr
 8007478:	2020      	movs	r0, #32
 800747a:	4770      	bx	lr

0800747c <__i2b>:
 800747c:	b510      	push	{r4, lr}
 800747e:	460c      	mov	r4, r1
 8007480:	2101      	movs	r1, #1
 8007482:	f7ff febd 	bl	8007200 <_Balloc>
 8007486:	4602      	mov	r2, r0
 8007488:	b928      	cbnz	r0, 8007496 <__i2b+0x1a>
 800748a:	4b05      	ldr	r3, [pc, #20]	@ (80074a0 <__i2b+0x24>)
 800748c:	4805      	ldr	r0, [pc, #20]	@ (80074a4 <__i2b+0x28>)
 800748e:	f240 1145 	movw	r1, #325	@ 0x145
 8007492:	f001 fc41 	bl	8008d18 <__assert_func>
 8007496:	2301      	movs	r3, #1
 8007498:	6144      	str	r4, [r0, #20]
 800749a:	6103      	str	r3, [r0, #16]
 800749c:	bd10      	pop	{r4, pc}
 800749e:	bf00      	nop
 80074a0:	08009db9 	.word	0x08009db9
 80074a4:	08009dca 	.word	0x08009dca

080074a8 <__multiply>:
 80074a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ac:	4614      	mov	r4, r2
 80074ae:	690a      	ldr	r2, [r1, #16]
 80074b0:	6923      	ldr	r3, [r4, #16]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	bfa8      	it	ge
 80074b6:	4623      	movge	r3, r4
 80074b8:	460f      	mov	r7, r1
 80074ba:	bfa4      	itt	ge
 80074bc:	460c      	movge	r4, r1
 80074be:	461f      	movge	r7, r3
 80074c0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80074c4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80074c8:	68a3      	ldr	r3, [r4, #8]
 80074ca:	6861      	ldr	r1, [r4, #4]
 80074cc:	eb0a 0609 	add.w	r6, sl, r9
 80074d0:	42b3      	cmp	r3, r6
 80074d2:	b085      	sub	sp, #20
 80074d4:	bfb8      	it	lt
 80074d6:	3101      	addlt	r1, #1
 80074d8:	f7ff fe92 	bl	8007200 <_Balloc>
 80074dc:	b930      	cbnz	r0, 80074ec <__multiply+0x44>
 80074de:	4602      	mov	r2, r0
 80074e0:	4b44      	ldr	r3, [pc, #272]	@ (80075f4 <__multiply+0x14c>)
 80074e2:	4845      	ldr	r0, [pc, #276]	@ (80075f8 <__multiply+0x150>)
 80074e4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80074e8:	f001 fc16 	bl	8008d18 <__assert_func>
 80074ec:	f100 0514 	add.w	r5, r0, #20
 80074f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80074f4:	462b      	mov	r3, r5
 80074f6:	2200      	movs	r2, #0
 80074f8:	4543      	cmp	r3, r8
 80074fa:	d321      	bcc.n	8007540 <__multiply+0x98>
 80074fc:	f107 0114 	add.w	r1, r7, #20
 8007500:	f104 0214 	add.w	r2, r4, #20
 8007504:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007508:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800750c:	9302      	str	r3, [sp, #8]
 800750e:	1b13      	subs	r3, r2, r4
 8007510:	3b15      	subs	r3, #21
 8007512:	f023 0303 	bic.w	r3, r3, #3
 8007516:	3304      	adds	r3, #4
 8007518:	f104 0715 	add.w	r7, r4, #21
 800751c:	42ba      	cmp	r2, r7
 800751e:	bf38      	it	cc
 8007520:	2304      	movcc	r3, #4
 8007522:	9301      	str	r3, [sp, #4]
 8007524:	9b02      	ldr	r3, [sp, #8]
 8007526:	9103      	str	r1, [sp, #12]
 8007528:	428b      	cmp	r3, r1
 800752a:	d80c      	bhi.n	8007546 <__multiply+0x9e>
 800752c:	2e00      	cmp	r6, #0
 800752e:	dd03      	ble.n	8007538 <__multiply+0x90>
 8007530:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007534:	2b00      	cmp	r3, #0
 8007536:	d05b      	beq.n	80075f0 <__multiply+0x148>
 8007538:	6106      	str	r6, [r0, #16]
 800753a:	b005      	add	sp, #20
 800753c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007540:	f843 2b04 	str.w	r2, [r3], #4
 8007544:	e7d8      	b.n	80074f8 <__multiply+0x50>
 8007546:	f8b1 a000 	ldrh.w	sl, [r1]
 800754a:	f1ba 0f00 	cmp.w	sl, #0
 800754e:	d024      	beq.n	800759a <__multiply+0xf2>
 8007550:	f104 0e14 	add.w	lr, r4, #20
 8007554:	46a9      	mov	r9, r5
 8007556:	f04f 0c00 	mov.w	ip, #0
 800755a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800755e:	f8d9 3000 	ldr.w	r3, [r9]
 8007562:	fa1f fb87 	uxth.w	fp, r7
 8007566:	b29b      	uxth	r3, r3
 8007568:	fb0a 330b 	mla	r3, sl, fp, r3
 800756c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007570:	f8d9 7000 	ldr.w	r7, [r9]
 8007574:	4463      	add	r3, ip
 8007576:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800757a:	fb0a c70b 	mla	r7, sl, fp, ip
 800757e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007582:	b29b      	uxth	r3, r3
 8007584:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007588:	4572      	cmp	r2, lr
 800758a:	f849 3b04 	str.w	r3, [r9], #4
 800758e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007592:	d8e2      	bhi.n	800755a <__multiply+0xb2>
 8007594:	9b01      	ldr	r3, [sp, #4]
 8007596:	f845 c003 	str.w	ip, [r5, r3]
 800759a:	9b03      	ldr	r3, [sp, #12]
 800759c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80075a0:	3104      	adds	r1, #4
 80075a2:	f1b9 0f00 	cmp.w	r9, #0
 80075a6:	d021      	beq.n	80075ec <__multiply+0x144>
 80075a8:	682b      	ldr	r3, [r5, #0]
 80075aa:	f104 0c14 	add.w	ip, r4, #20
 80075ae:	46ae      	mov	lr, r5
 80075b0:	f04f 0a00 	mov.w	sl, #0
 80075b4:	f8bc b000 	ldrh.w	fp, [ip]
 80075b8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80075bc:	fb09 770b 	mla	r7, r9, fp, r7
 80075c0:	4457      	add	r7, sl
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80075c8:	f84e 3b04 	str.w	r3, [lr], #4
 80075cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80075d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80075d4:	f8be 3000 	ldrh.w	r3, [lr]
 80075d8:	fb09 330a 	mla	r3, r9, sl, r3
 80075dc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80075e0:	4562      	cmp	r2, ip
 80075e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80075e6:	d8e5      	bhi.n	80075b4 <__multiply+0x10c>
 80075e8:	9f01      	ldr	r7, [sp, #4]
 80075ea:	51eb      	str	r3, [r5, r7]
 80075ec:	3504      	adds	r5, #4
 80075ee:	e799      	b.n	8007524 <__multiply+0x7c>
 80075f0:	3e01      	subs	r6, #1
 80075f2:	e79b      	b.n	800752c <__multiply+0x84>
 80075f4:	08009db9 	.word	0x08009db9
 80075f8:	08009dca 	.word	0x08009dca

080075fc <__pow5mult>:
 80075fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007600:	4615      	mov	r5, r2
 8007602:	f012 0203 	ands.w	r2, r2, #3
 8007606:	4607      	mov	r7, r0
 8007608:	460e      	mov	r6, r1
 800760a:	d007      	beq.n	800761c <__pow5mult+0x20>
 800760c:	4c25      	ldr	r4, [pc, #148]	@ (80076a4 <__pow5mult+0xa8>)
 800760e:	3a01      	subs	r2, #1
 8007610:	2300      	movs	r3, #0
 8007612:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007616:	f7ff fe55 	bl	80072c4 <__multadd>
 800761a:	4606      	mov	r6, r0
 800761c:	10ad      	asrs	r5, r5, #2
 800761e:	d03d      	beq.n	800769c <__pow5mult+0xa0>
 8007620:	69fc      	ldr	r4, [r7, #28]
 8007622:	b97c      	cbnz	r4, 8007644 <__pow5mult+0x48>
 8007624:	2010      	movs	r0, #16
 8007626:	f7ff fd35 	bl	8007094 <malloc>
 800762a:	4602      	mov	r2, r0
 800762c:	61f8      	str	r0, [r7, #28]
 800762e:	b928      	cbnz	r0, 800763c <__pow5mult+0x40>
 8007630:	4b1d      	ldr	r3, [pc, #116]	@ (80076a8 <__pow5mult+0xac>)
 8007632:	481e      	ldr	r0, [pc, #120]	@ (80076ac <__pow5mult+0xb0>)
 8007634:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007638:	f001 fb6e 	bl	8008d18 <__assert_func>
 800763c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007640:	6004      	str	r4, [r0, #0]
 8007642:	60c4      	str	r4, [r0, #12]
 8007644:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007648:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800764c:	b94c      	cbnz	r4, 8007662 <__pow5mult+0x66>
 800764e:	f240 2171 	movw	r1, #625	@ 0x271
 8007652:	4638      	mov	r0, r7
 8007654:	f7ff ff12 	bl	800747c <__i2b>
 8007658:	2300      	movs	r3, #0
 800765a:	f8c8 0008 	str.w	r0, [r8, #8]
 800765e:	4604      	mov	r4, r0
 8007660:	6003      	str	r3, [r0, #0]
 8007662:	f04f 0900 	mov.w	r9, #0
 8007666:	07eb      	lsls	r3, r5, #31
 8007668:	d50a      	bpl.n	8007680 <__pow5mult+0x84>
 800766a:	4631      	mov	r1, r6
 800766c:	4622      	mov	r2, r4
 800766e:	4638      	mov	r0, r7
 8007670:	f7ff ff1a 	bl	80074a8 <__multiply>
 8007674:	4631      	mov	r1, r6
 8007676:	4680      	mov	r8, r0
 8007678:	4638      	mov	r0, r7
 800767a:	f7ff fe01 	bl	8007280 <_Bfree>
 800767e:	4646      	mov	r6, r8
 8007680:	106d      	asrs	r5, r5, #1
 8007682:	d00b      	beq.n	800769c <__pow5mult+0xa0>
 8007684:	6820      	ldr	r0, [r4, #0]
 8007686:	b938      	cbnz	r0, 8007698 <__pow5mult+0x9c>
 8007688:	4622      	mov	r2, r4
 800768a:	4621      	mov	r1, r4
 800768c:	4638      	mov	r0, r7
 800768e:	f7ff ff0b 	bl	80074a8 <__multiply>
 8007692:	6020      	str	r0, [r4, #0]
 8007694:	f8c0 9000 	str.w	r9, [r0]
 8007698:	4604      	mov	r4, r0
 800769a:	e7e4      	b.n	8007666 <__pow5mult+0x6a>
 800769c:	4630      	mov	r0, r6
 800769e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076a2:	bf00      	nop
 80076a4:	08009e24 	.word	0x08009e24
 80076a8:	08009d4a 	.word	0x08009d4a
 80076ac:	08009dca 	.word	0x08009dca

080076b0 <__lshift>:
 80076b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076b4:	460c      	mov	r4, r1
 80076b6:	6849      	ldr	r1, [r1, #4]
 80076b8:	6923      	ldr	r3, [r4, #16]
 80076ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80076be:	68a3      	ldr	r3, [r4, #8]
 80076c0:	4607      	mov	r7, r0
 80076c2:	4691      	mov	r9, r2
 80076c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80076c8:	f108 0601 	add.w	r6, r8, #1
 80076cc:	42b3      	cmp	r3, r6
 80076ce:	db0b      	blt.n	80076e8 <__lshift+0x38>
 80076d0:	4638      	mov	r0, r7
 80076d2:	f7ff fd95 	bl	8007200 <_Balloc>
 80076d6:	4605      	mov	r5, r0
 80076d8:	b948      	cbnz	r0, 80076ee <__lshift+0x3e>
 80076da:	4602      	mov	r2, r0
 80076dc:	4b28      	ldr	r3, [pc, #160]	@ (8007780 <__lshift+0xd0>)
 80076de:	4829      	ldr	r0, [pc, #164]	@ (8007784 <__lshift+0xd4>)
 80076e0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80076e4:	f001 fb18 	bl	8008d18 <__assert_func>
 80076e8:	3101      	adds	r1, #1
 80076ea:	005b      	lsls	r3, r3, #1
 80076ec:	e7ee      	b.n	80076cc <__lshift+0x1c>
 80076ee:	2300      	movs	r3, #0
 80076f0:	f100 0114 	add.w	r1, r0, #20
 80076f4:	f100 0210 	add.w	r2, r0, #16
 80076f8:	4618      	mov	r0, r3
 80076fa:	4553      	cmp	r3, sl
 80076fc:	db33      	blt.n	8007766 <__lshift+0xb6>
 80076fe:	6920      	ldr	r0, [r4, #16]
 8007700:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007704:	f104 0314 	add.w	r3, r4, #20
 8007708:	f019 091f 	ands.w	r9, r9, #31
 800770c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007710:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007714:	d02b      	beq.n	800776e <__lshift+0xbe>
 8007716:	f1c9 0e20 	rsb	lr, r9, #32
 800771a:	468a      	mov	sl, r1
 800771c:	2200      	movs	r2, #0
 800771e:	6818      	ldr	r0, [r3, #0]
 8007720:	fa00 f009 	lsl.w	r0, r0, r9
 8007724:	4310      	orrs	r0, r2
 8007726:	f84a 0b04 	str.w	r0, [sl], #4
 800772a:	f853 2b04 	ldr.w	r2, [r3], #4
 800772e:	459c      	cmp	ip, r3
 8007730:	fa22 f20e 	lsr.w	r2, r2, lr
 8007734:	d8f3      	bhi.n	800771e <__lshift+0x6e>
 8007736:	ebac 0304 	sub.w	r3, ip, r4
 800773a:	3b15      	subs	r3, #21
 800773c:	f023 0303 	bic.w	r3, r3, #3
 8007740:	3304      	adds	r3, #4
 8007742:	f104 0015 	add.w	r0, r4, #21
 8007746:	4584      	cmp	ip, r0
 8007748:	bf38      	it	cc
 800774a:	2304      	movcc	r3, #4
 800774c:	50ca      	str	r2, [r1, r3]
 800774e:	b10a      	cbz	r2, 8007754 <__lshift+0xa4>
 8007750:	f108 0602 	add.w	r6, r8, #2
 8007754:	3e01      	subs	r6, #1
 8007756:	4638      	mov	r0, r7
 8007758:	612e      	str	r6, [r5, #16]
 800775a:	4621      	mov	r1, r4
 800775c:	f7ff fd90 	bl	8007280 <_Bfree>
 8007760:	4628      	mov	r0, r5
 8007762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007766:	f842 0f04 	str.w	r0, [r2, #4]!
 800776a:	3301      	adds	r3, #1
 800776c:	e7c5      	b.n	80076fa <__lshift+0x4a>
 800776e:	3904      	subs	r1, #4
 8007770:	f853 2b04 	ldr.w	r2, [r3], #4
 8007774:	f841 2f04 	str.w	r2, [r1, #4]!
 8007778:	459c      	cmp	ip, r3
 800777a:	d8f9      	bhi.n	8007770 <__lshift+0xc0>
 800777c:	e7ea      	b.n	8007754 <__lshift+0xa4>
 800777e:	bf00      	nop
 8007780:	08009db9 	.word	0x08009db9
 8007784:	08009dca 	.word	0x08009dca

08007788 <__mcmp>:
 8007788:	690a      	ldr	r2, [r1, #16]
 800778a:	4603      	mov	r3, r0
 800778c:	6900      	ldr	r0, [r0, #16]
 800778e:	1a80      	subs	r0, r0, r2
 8007790:	b530      	push	{r4, r5, lr}
 8007792:	d10e      	bne.n	80077b2 <__mcmp+0x2a>
 8007794:	3314      	adds	r3, #20
 8007796:	3114      	adds	r1, #20
 8007798:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800779c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80077a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80077a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80077a8:	4295      	cmp	r5, r2
 80077aa:	d003      	beq.n	80077b4 <__mcmp+0x2c>
 80077ac:	d205      	bcs.n	80077ba <__mcmp+0x32>
 80077ae:	f04f 30ff 	mov.w	r0, #4294967295
 80077b2:	bd30      	pop	{r4, r5, pc}
 80077b4:	42a3      	cmp	r3, r4
 80077b6:	d3f3      	bcc.n	80077a0 <__mcmp+0x18>
 80077b8:	e7fb      	b.n	80077b2 <__mcmp+0x2a>
 80077ba:	2001      	movs	r0, #1
 80077bc:	e7f9      	b.n	80077b2 <__mcmp+0x2a>
	...

080077c0 <__mdiff>:
 80077c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077c4:	4689      	mov	r9, r1
 80077c6:	4606      	mov	r6, r0
 80077c8:	4611      	mov	r1, r2
 80077ca:	4648      	mov	r0, r9
 80077cc:	4614      	mov	r4, r2
 80077ce:	f7ff ffdb 	bl	8007788 <__mcmp>
 80077d2:	1e05      	subs	r5, r0, #0
 80077d4:	d112      	bne.n	80077fc <__mdiff+0x3c>
 80077d6:	4629      	mov	r1, r5
 80077d8:	4630      	mov	r0, r6
 80077da:	f7ff fd11 	bl	8007200 <_Balloc>
 80077de:	4602      	mov	r2, r0
 80077e0:	b928      	cbnz	r0, 80077ee <__mdiff+0x2e>
 80077e2:	4b3f      	ldr	r3, [pc, #252]	@ (80078e0 <__mdiff+0x120>)
 80077e4:	f240 2137 	movw	r1, #567	@ 0x237
 80077e8:	483e      	ldr	r0, [pc, #248]	@ (80078e4 <__mdiff+0x124>)
 80077ea:	f001 fa95 	bl	8008d18 <__assert_func>
 80077ee:	2301      	movs	r3, #1
 80077f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80077f4:	4610      	mov	r0, r2
 80077f6:	b003      	add	sp, #12
 80077f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077fc:	bfbc      	itt	lt
 80077fe:	464b      	movlt	r3, r9
 8007800:	46a1      	movlt	r9, r4
 8007802:	4630      	mov	r0, r6
 8007804:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007808:	bfba      	itte	lt
 800780a:	461c      	movlt	r4, r3
 800780c:	2501      	movlt	r5, #1
 800780e:	2500      	movge	r5, #0
 8007810:	f7ff fcf6 	bl	8007200 <_Balloc>
 8007814:	4602      	mov	r2, r0
 8007816:	b918      	cbnz	r0, 8007820 <__mdiff+0x60>
 8007818:	4b31      	ldr	r3, [pc, #196]	@ (80078e0 <__mdiff+0x120>)
 800781a:	f240 2145 	movw	r1, #581	@ 0x245
 800781e:	e7e3      	b.n	80077e8 <__mdiff+0x28>
 8007820:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007824:	6926      	ldr	r6, [r4, #16]
 8007826:	60c5      	str	r5, [r0, #12]
 8007828:	f109 0310 	add.w	r3, r9, #16
 800782c:	f109 0514 	add.w	r5, r9, #20
 8007830:	f104 0e14 	add.w	lr, r4, #20
 8007834:	f100 0b14 	add.w	fp, r0, #20
 8007838:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800783c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007840:	9301      	str	r3, [sp, #4]
 8007842:	46d9      	mov	r9, fp
 8007844:	f04f 0c00 	mov.w	ip, #0
 8007848:	9b01      	ldr	r3, [sp, #4]
 800784a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800784e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007852:	9301      	str	r3, [sp, #4]
 8007854:	fa1f f38a 	uxth.w	r3, sl
 8007858:	4619      	mov	r1, r3
 800785a:	b283      	uxth	r3, r0
 800785c:	1acb      	subs	r3, r1, r3
 800785e:	0c00      	lsrs	r0, r0, #16
 8007860:	4463      	add	r3, ip
 8007862:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007866:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800786a:	b29b      	uxth	r3, r3
 800786c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007870:	4576      	cmp	r6, lr
 8007872:	f849 3b04 	str.w	r3, [r9], #4
 8007876:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800787a:	d8e5      	bhi.n	8007848 <__mdiff+0x88>
 800787c:	1b33      	subs	r3, r6, r4
 800787e:	3b15      	subs	r3, #21
 8007880:	f023 0303 	bic.w	r3, r3, #3
 8007884:	3415      	adds	r4, #21
 8007886:	3304      	adds	r3, #4
 8007888:	42a6      	cmp	r6, r4
 800788a:	bf38      	it	cc
 800788c:	2304      	movcc	r3, #4
 800788e:	441d      	add	r5, r3
 8007890:	445b      	add	r3, fp
 8007892:	461e      	mov	r6, r3
 8007894:	462c      	mov	r4, r5
 8007896:	4544      	cmp	r4, r8
 8007898:	d30e      	bcc.n	80078b8 <__mdiff+0xf8>
 800789a:	f108 0103 	add.w	r1, r8, #3
 800789e:	1b49      	subs	r1, r1, r5
 80078a0:	f021 0103 	bic.w	r1, r1, #3
 80078a4:	3d03      	subs	r5, #3
 80078a6:	45a8      	cmp	r8, r5
 80078a8:	bf38      	it	cc
 80078aa:	2100      	movcc	r1, #0
 80078ac:	440b      	add	r3, r1
 80078ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80078b2:	b191      	cbz	r1, 80078da <__mdiff+0x11a>
 80078b4:	6117      	str	r7, [r2, #16]
 80078b6:	e79d      	b.n	80077f4 <__mdiff+0x34>
 80078b8:	f854 1b04 	ldr.w	r1, [r4], #4
 80078bc:	46e6      	mov	lr, ip
 80078be:	0c08      	lsrs	r0, r1, #16
 80078c0:	fa1c fc81 	uxtah	ip, ip, r1
 80078c4:	4471      	add	r1, lr
 80078c6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80078ca:	b289      	uxth	r1, r1
 80078cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80078d0:	f846 1b04 	str.w	r1, [r6], #4
 80078d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80078d8:	e7dd      	b.n	8007896 <__mdiff+0xd6>
 80078da:	3f01      	subs	r7, #1
 80078dc:	e7e7      	b.n	80078ae <__mdiff+0xee>
 80078de:	bf00      	nop
 80078e0:	08009db9 	.word	0x08009db9
 80078e4:	08009dca 	.word	0x08009dca

080078e8 <__ulp>:
 80078e8:	b082      	sub	sp, #8
 80078ea:	ed8d 0b00 	vstr	d0, [sp]
 80078ee:	9a01      	ldr	r2, [sp, #4]
 80078f0:	4b0f      	ldr	r3, [pc, #60]	@ (8007930 <__ulp+0x48>)
 80078f2:	4013      	ands	r3, r2
 80078f4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	dc08      	bgt.n	800790e <__ulp+0x26>
 80078fc:	425b      	negs	r3, r3
 80078fe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007902:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007906:	da04      	bge.n	8007912 <__ulp+0x2a>
 8007908:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800790c:	4113      	asrs	r3, r2
 800790e:	2200      	movs	r2, #0
 8007910:	e008      	b.n	8007924 <__ulp+0x3c>
 8007912:	f1a2 0314 	sub.w	r3, r2, #20
 8007916:	2b1e      	cmp	r3, #30
 8007918:	bfda      	itte	le
 800791a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800791e:	40da      	lsrle	r2, r3
 8007920:	2201      	movgt	r2, #1
 8007922:	2300      	movs	r3, #0
 8007924:	4619      	mov	r1, r3
 8007926:	4610      	mov	r0, r2
 8007928:	ec41 0b10 	vmov	d0, r0, r1
 800792c:	b002      	add	sp, #8
 800792e:	4770      	bx	lr
 8007930:	7ff00000 	.word	0x7ff00000

08007934 <__b2d>:
 8007934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007938:	6906      	ldr	r6, [r0, #16]
 800793a:	f100 0814 	add.w	r8, r0, #20
 800793e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007942:	1f37      	subs	r7, r6, #4
 8007944:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007948:	4610      	mov	r0, r2
 800794a:	f7ff fd4b 	bl	80073e4 <__hi0bits>
 800794e:	f1c0 0320 	rsb	r3, r0, #32
 8007952:	280a      	cmp	r0, #10
 8007954:	600b      	str	r3, [r1, #0]
 8007956:	491b      	ldr	r1, [pc, #108]	@ (80079c4 <__b2d+0x90>)
 8007958:	dc15      	bgt.n	8007986 <__b2d+0x52>
 800795a:	f1c0 0c0b 	rsb	ip, r0, #11
 800795e:	fa22 f30c 	lsr.w	r3, r2, ip
 8007962:	45b8      	cmp	r8, r7
 8007964:	ea43 0501 	orr.w	r5, r3, r1
 8007968:	bf34      	ite	cc
 800796a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800796e:	2300      	movcs	r3, #0
 8007970:	3015      	adds	r0, #21
 8007972:	fa02 f000 	lsl.w	r0, r2, r0
 8007976:	fa23 f30c 	lsr.w	r3, r3, ip
 800797a:	4303      	orrs	r3, r0
 800797c:	461c      	mov	r4, r3
 800797e:	ec45 4b10 	vmov	d0, r4, r5
 8007982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007986:	45b8      	cmp	r8, r7
 8007988:	bf3a      	itte	cc
 800798a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800798e:	f1a6 0708 	subcc.w	r7, r6, #8
 8007992:	2300      	movcs	r3, #0
 8007994:	380b      	subs	r0, #11
 8007996:	d012      	beq.n	80079be <__b2d+0x8a>
 8007998:	f1c0 0120 	rsb	r1, r0, #32
 800799c:	fa23 f401 	lsr.w	r4, r3, r1
 80079a0:	4082      	lsls	r2, r0
 80079a2:	4322      	orrs	r2, r4
 80079a4:	4547      	cmp	r7, r8
 80079a6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80079aa:	bf8c      	ite	hi
 80079ac:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80079b0:	2200      	movls	r2, #0
 80079b2:	4083      	lsls	r3, r0
 80079b4:	40ca      	lsrs	r2, r1
 80079b6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80079ba:	4313      	orrs	r3, r2
 80079bc:	e7de      	b.n	800797c <__b2d+0x48>
 80079be:	ea42 0501 	orr.w	r5, r2, r1
 80079c2:	e7db      	b.n	800797c <__b2d+0x48>
 80079c4:	3ff00000 	.word	0x3ff00000

080079c8 <__d2b>:
 80079c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80079cc:	460f      	mov	r7, r1
 80079ce:	2101      	movs	r1, #1
 80079d0:	ec59 8b10 	vmov	r8, r9, d0
 80079d4:	4616      	mov	r6, r2
 80079d6:	f7ff fc13 	bl	8007200 <_Balloc>
 80079da:	4604      	mov	r4, r0
 80079dc:	b930      	cbnz	r0, 80079ec <__d2b+0x24>
 80079de:	4602      	mov	r2, r0
 80079e0:	4b23      	ldr	r3, [pc, #140]	@ (8007a70 <__d2b+0xa8>)
 80079e2:	4824      	ldr	r0, [pc, #144]	@ (8007a74 <__d2b+0xac>)
 80079e4:	f240 310f 	movw	r1, #783	@ 0x30f
 80079e8:	f001 f996 	bl	8008d18 <__assert_func>
 80079ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80079f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80079f4:	b10d      	cbz	r5, 80079fa <__d2b+0x32>
 80079f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80079fa:	9301      	str	r3, [sp, #4]
 80079fc:	f1b8 0300 	subs.w	r3, r8, #0
 8007a00:	d023      	beq.n	8007a4a <__d2b+0x82>
 8007a02:	4668      	mov	r0, sp
 8007a04:	9300      	str	r3, [sp, #0]
 8007a06:	f7ff fd0c 	bl	8007422 <__lo0bits>
 8007a0a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007a0e:	b1d0      	cbz	r0, 8007a46 <__d2b+0x7e>
 8007a10:	f1c0 0320 	rsb	r3, r0, #32
 8007a14:	fa02 f303 	lsl.w	r3, r2, r3
 8007a18:	430b      	orrs	r3, r1
 8007a1a:	40c2      	lsrs	r2, r0
 8007a1c:	6163      	str	r3, [r4, #20]
 8007a1e:	9201      	str	r2, [sp, #4]
 8007a20:	9b01      	ldr	r3, [sp, #4]
 8007a22:	61a3      	str	r3, [r4, #24]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	bf0c      	ite	eq
 8007a28:	2201      	moveq	r2, #1
 8007a2a:	2202      	movne	r2, #2
 8007a2c:	6122      	str	r2, [r4, #16]
 8007a2e:	b1a5      	cbz	r5, 8007a5a <__d2b+0x92>
 8007a30:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007a34:	4405      	add	r5, r0
 8007a36:	603d      	str	r5, [r7, #0]
 8007a38:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007a3c:	6030      	str	r0, [r6, #0]
 8007a3e:	4620      	mov	r0, r4
 8007a40:	b003      	add	sp, #12
 8007a42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a46:	6161      	str	r1, [r4, #20]
 8007a48:	e7ea      	b.n	8007a20 <__d2b+0x58>
 8007a4a:	a801      	add	r0, sp, #4
 8007a4c:	f7ff fce9 	bl	8007422 <__lo0bits>
 8007a50:	9b01      	ldr	r3, [sp, #4]
 8007a52:	6163      	str	r3, [r4, #20]
 8007a54:	3020      	adds	r0, #32
 8007a56:	2201      	movs	r2, #1
 8007a58:	e7e8      	b.n	8007a2c <__d2b+0x64>
 8007a5a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007a5e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007a62:	6038      	str	r0, [r7, #0]
 8007a64:	6918      	ldr	r0, [r3, #16]
 8007a66:	f7ff fcbd 	bl	80073e4 <__hi0bits>
 8007a6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007a6e:	e7e5      	b.n	8007a3c <__d2b+0x74>
 8007a70:	08009db9 	.word	0x08009db9
 8007a74:	08009dca 	.word	0x08009dca

08007a78 <__ratio>:
 8007a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a7c:	b085      	sub	sp, #20
 8007a7e:	e9cd 1000 	strd	r1, r0, [sp]
 8007a82:	a902      	add	r1, sp, #8
 8007a84:	f7ff ff56 	bl	8007934 <__b2d>
 8007a88:	9800      	ldr	r0, [sp, #0]
 8007a8a:	a903      	add	r1, sp, #12
 8007a8c:	ec55 4b10 	vmov	r4, r5, d0
 8007a90:	f7ff ff50 	bl	8007934 <__b2d>
 8007a94:	9b01      	ldr	r3, [sp, #4]
 8007a96:	6919      	ldr	r1, [r3, #16]
 8007a98:	9b00      	ldr	r3, [sp, #0]
 8007a9a:	691b      	ldr	r3, [r3, #16]
 8007a9c:	1ac9      	subs	r1, r1, r3
 8007a9e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007aa2:	1a9b      	subs	r3, r3, r2
 8007aa4:	ec5b ab10 	vmov	sl, fp, d0
 8007aa8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	bfce      	itee	gt
 8007ab0:	462a      	movgt	r2, r5
 8007ab2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007ab6:	465a      	movle	r2, fp
 8007ab8:	462f      	mov	r7, r5
 8007aba:	46d9      	mov	r9, fp
 8007abc:	bfcc      	ite	gt
 8007abe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007ac2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007ac6:	464b      	mov	r3, r9
 8007ac8:	4652      	mov	r2, sl
 8007aca:	4620      	mov	r0, r4
 8007acc:	4639      	mov	r1, r7
 8007ace:	f7f8 febd 	bl	800084c <__aeabi_ddiv>
 8007ad2:	ec41 0b10 	vmov	d0, r0, r1
 8007ad6:	b005      	add	sp, #20
 8007ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007adc <__copybits>:
 8007adc:	3901      	subs	r1, #1
 8007ade:	b570      	push	{r4, r5, r6, lr}
 8007ae0:	1149      	asrs	r1, r1, #5
 8007ae2:	6914      	ldr	r4, [r2, #16]
 8007ae4:	3101      	adds	r1, #1
 8007ae6:	f102 0314 	add.w	r3, r2, #20
 8007aea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007aee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007af2:	1f05      	subs	r5, r0, #4
 8007af4:	42a3      	cmp	r3, r4
 8007af6:	d30c      	bcc.n	8007b12 <__copybits+0x36>
 8007af8:	1aa3      	subs	r3, r4, r2
 8007afa:	3b11      	subs	r3, #17
 8007afc:	f023 0303 	bic.w	r3, r3, #3
 8007b00:	3211      	adds	r2, #17
 8007b02:	42a2      	cmp	r2, r4
 8007b04:	bf88      	it	hi
 8007b06:	2300      	movhi	r3, #0
 8007b08:	4418      	add	r0, r3
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	4288      	cmp	r0, r1
 8007b0e:	d305      	bcc.n	8007b1c <__copybits+0x40>
 8007b10:	bd70      	pop	{r4, r5, r6, pc}
 8007b12:	f853 6b04 	ldr.w	r6, [r3], #4
 8007b16:	f845 6f04 	str.w	r6, [r5, #4]!
 8007b1a:	e7eb      	b.n	8007af4 <__copybits+0x18>
 8007b1c:	f840 3b04 	str.w	r3, [r0], #4
 8007b20:	e7f4      	b.n	8007b0c <__copybits+0x30>

08007b22 <__any_on>:
 8007b22:	f100 0214 	add.w	r2, r0, #20
 8007b26:	6900      	ldr	r0, [r0, #16]
 8007b28:	114b      	asrs	r3, r1, #5
 8007b2a:	4298      	cmp	r0, r3
 8007b2c:	b510      	push	{r4, lr}
 8007b2e:	db11      	blt.n	8007b54 <__any_on+0x32>
 8007b30:	dd0a      	ble.n	8007b48 <__any_on+0x26>
 8007b32:	f011 011f 	ands.w	r1, r1, #31
 8007b36:	d007      	beq.n	8007b48 <__any_on+0x26>
 8007b38:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007b3c:	fa24 f001 	lsr.w	r0, r4, r1
 8007b40:	fa00 f101 	lsl.w	r1, r0, r1
 8007b44:	428c      	cmp	r4, r1
 8007b46:	d10b      	bne.n	8007b60 <__any_on+0x3e>
 8007b48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d803      	bhi.n	8007b58 <__any_on+0x36>
 8007b50:	2000      	movs	r0, #0
 8007b52:	bd10      	pop	{r4, pc}
 8007b54:	4603      	mov	r3, r0
 8007b56:	e7f7      	b.n	8007b48 <__any_on+0x26>
 8007b58:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007b5c:	2900      	cmp	r1, #0
 8007b5e:	d0f5      	beq.n	8007b4c <__any_on+0x2a>
 8007b60:	2001      	movs	r0, #1
 8007b62:	e7f6      	b.n	8007b52 <__any_on+0x30>

08007b64 <sulp>:
 8007b64:	b570      	push	{r4, r5, r6, lr}
 8007b66:	4604      	mov	r4, r0
 8007b68:	460d      	mov	r5, r1
 8007b6a:	ec45 4b10 	vmov	d0, r4, r5
 8007b6e:	4616      	mov	r6, r2
 8007b70:	f7ff feba 	bl	80078e8 <__ulp>
 8007b74:	ec51 0b10 	vmov	r0, r1, d0
 8007b78:	b17e      	cbz	r6, 8007b9a <sulp+0x36>
 8007b7a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007b7e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	dd09      	ble.n	8007b9a <sulp+0x36>
 8007b86:	051b      	lsls	r3, r3, #20
 8007b88:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007b8c:	2400      	movs	r4, #0
 8007b8e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007b92:	4622      	mov	r2, r4
 8007b94:	462b      	mov	r3, r5
 8007b96:	f7f8 fd2f 	bl	80005f8 <__aeabi_dmul>
 8007b9a:	ec41 0b10 	vmov	d0, r0, r1
 8007b9e:	bd70      	pop	{r4, r5, r6, pc}

08007ba0 <_strtod_l>:
 8007ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ba4:	b09f      	sub	sp, #124	@ 0x7c
 8007ba6:	460c      	mov	r4, r1
 8007ba8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007baa:	2200      	movs	r2, #0
 8007bac:	921a      	str	r2, [sp, #104]	@ 0x68
 8007bae:	9005      	str	r0, [sp, #20]
 8007bb0:	f04f 0a00 	mov.w	sl, #0
 8007bb4:	f04f 0b00 	mov.w	fp, #0
 8007bb8:	460a      	mov	r2, r1
 8007bba:	9219      	str	r2, [sp, #100]	@ 0x64
 8007bbc:	7811      	ldrb	r1, [r2, #0]
 8007bbe:	292b      	cmp	r1, #43	@ 0x2b
 8007bc0:	d04a      	beq.n	8007c58 <_strtod_l+0xb8>
 8007bc2:	d838      	bhi.n	8007c36 <_strtod_l+0x96>
 8007bc4:	290d      	cmp	r1, #13
 8007bc6:	d832      	bhi.n	8007c2e <_strtod_l+0x8e>
 8007bc8:	2908      	cmp	r1, #8
 8007bca:	d832      	bhi.n	8007c32 <_strtod_l+0x92>
 8007bcc:	2900      	cmp	r1, #0
 8007bce:	d03b      	beq.n	8007c48 <_strtod_l+0xa8>
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007bd4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007bd6:	782a      	ldrb	r2, [r5, #0]
 8007bd8:	2a30      	cmp	r2, #48	@ 0x30
 8007bda:	f040 80b3 	bne.w	8007d44 <_strtod_l+0x1a4>
 8007bde:	786a      	ldrb	r2, [r5, #1]
 8007be0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007be4:	2a58      	cmp	r2, #88	@ 0x58
 8007be6:	d16e      	bne.n	8007cc6 <_strtod_l+0x126>
 8007be8:	9302      	str	r3, [sp, #8]
 8007bea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007bec:	9301      	str	r3, [sp, #4]
 8007bee:	ab1a      	add	r3, sp, #104	@ 0x68
 8007bf0:	9300      	str	r3, [sp, #0]
 8007bf2:	4a8e      	ldr	r2, [pc, #568]	@ (8007e2c <_strtod_l+0x28c>)
 8007bf4:	9805      	ldr	r0, [sp, #20]
 8007bf6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007bf8:	a919      	add	r1, sp, #100	@ 0x64
 8007bfa:	f001 f927 	bl	8008e4c <__gethex>
 8007bfe:	f010 060f 	ands.w	r6, r0, #15
 8007c02:	4604      	mov	r4, r0
 8007c04:	d005      	beq.n	8007c12 <_strtod_l+0x72>
 8007c06:	2e06      	cmp	r6, #6
 8007c08:	d128      	bne.n	8007c5c <_strtod_l+0xbc>
 8007c0a:	3501      	adds	r5, #1
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	9519      	str	r5, [sp, #100]	@ 0x64
 8007c10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f040 858e 	bne.w	8008736 <_strtod_l+0xb96>
 8007c1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c1c:	b1cb      	cbz	r3, 8007c52 <_strtod_l+0xb2>
 8007c1e:	4652      	mov	r2, sl
 8007c20:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007c24:	ec43 2b10 	vmov	d0, r2, r3
 8007c28:	b01f      	add	sp, #124	@ 0x7c
 8007c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c2e:	2920      	cmp	r1, #32
 8007c30:	d1ce      	bne.n	8007bd0 <_strtod_l+0x30>
 8007c32:	3201      	adds	r2, #1
 8007c34:	e7c1      	b.n	8007bba <_strtod_l+0x1a>
 8007c36:	292d      	cmp	r1, #45	@ 0x2d
 8007c38:	d1ca      	bne.n	8007bd0 <_strtod_l+0x30>
 8007c3a:	2101      	movs	r1, #1
 8007c3c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007c3e:	1c51      	adds	r1, r2, #1
 8007c40:	9119      	str	r1, [sp, #100]	@ 0x64
 8007c42:	7852      	ldrb	r2, [r2, #1]
 8007c44:	2a00      	cmp	r2, #0
 8007c46:	d1c5      	bne.n	8007bd4 <_strtod_l+0x34>
 8007c48:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007c4a:	9419      	str	r4, [sp, #100]	@ 0x64
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f040 8570 	bne.w	8008732 <_strtod_l+0xb92>
 8007c52:	4652      	mov	r2, sl
 8007c54:	465b      	mov	r3, fp
 8007c56:	e7e5      	b.n	8007c24 <_strtod_l+0x84>
 8007c58:	2100      	movs	r1, #0
 8007c5a:	e7ef      	b.n	8007c3c <_strtod_l+0x9c>
 8007c5c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007c5e:	b13a      	cbz	r2, 8007c70 <_strtod_l+0xd0>
 8007c60:	2135      	movs	r1, #53	@ 0x35
 8007c62:	a81c      	add	r0, sp, #112	@ 0x70
 8007c64:	f7ff ff3a 	bl	8007adc <__copybits>
 8007c68:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007c6a:	9805      	ldr	r0, [sp, #20]
 8007c6c:	f7ff fb08 	bl	8007280 <_Bfree>
 8007c70:	3e01      	subs	r6, #1
 8007c72:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007c74:	2e04      	cmp	r6, #4
 8007c76:	d806      	bhi.n	8007c86 <_strtod_l+0xe6>
 8007c78:	e8df f006 	tbb	[pc, r6]
 8007c7c:	201d0314 	.word	0x201d0314
 8007c80:	14          	.byte	0x14
 8007c81:	00          	.byte	0x00
 8007c82:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007c86:	05e1      	lsls	r1, r4, #23
 8007c88:	bf48      	it	mi
 8007c8a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007c8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007c92:	0d1b      	lsrs	r3, r3, #20
 8007c94:	051b      	lsls	r3, r3, #20
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1bb      	bne.n	8007c12 <_strtod_l+0x72>
 8007c9a:	f7fe fb2f 	bl	80062fc <__errno>
 8007c9e:	2322      	movs	r3, #34	@ 0x22
 8007ca0:	6003      	str	r3, [r0, #0]
 8007ca2:	e7b6      	b.n	8007c12 <_strtod_l+0x72>
 8007ca4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007ca8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007cac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007cb0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007cb4:	e7e7      	b.n	8007c86 <_strtod_l+0xe6>
 8007cb6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007e34 <_strtod_l+0x294>
 8007cba:	e7e4      	b.n	8007c86 <_strtod_l+0xe6>
 8007cbc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007cc0:	f04f 3aff 	mov.w	sl, #4294967295
 8007cc4:	e7df      	b.n	8007c86 <_strtod_l+0xe6>
 8007cc6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007cc8:	1c5a      	adds	r2, r3, #1
 8007cca:	9219      	str	r2, [sp, #100]	@ 0x64
 8007ccc:	785b      	ldrb	r3, [r3, #1]
 8007cce:	2b30      	cmp	r3, #48	@ 0x30
 8007cd0:	d0f9      	beq.n	8007cc6 <_strtod_l+0x126>
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d09d      	beq.n	8007c12 <_strtod_l+0x72>
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cda:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007cdc:	930c      	str	r3, [sp, #48]	@ 0x30
 8007cde:	2300      	movs	r3, #0
 8007ce0:	9308      	str	r3, [sp, #32]
 8007ce2:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ce4:	461f      	mov	r7, r3
 8007ce6:	220a      	movs	r2, #10
 8007ce8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007cea:	7805      	ldrb	r5, [r0, #0]
 8007cec:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007cf0:	b2d9      	uxtb	r1, r3
 8007cf2:	2909      	cmp	r1, #9
 8007cf4:	d928      	bls.n	8007d48 <_strtod_l+0x1a8>
 8007cf6:	494e      	ldr	r1, [pc, #312]	@ (8007e30 <_strtod_l+0x290>)
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	f000 ffd5 	bl	8008ca8 <strncmp>
 8007cfe:	2800      	cmp	r0, #0
 8007d00:	d032      	beq.n	8007d68 <_strtod_l+0x1c8>
 8007d02:	2000      	movs	r0, #0
 8007d04:	462a      	mov	r2, r5
 8007d06:	4681      	mov	r9, r0
 8007d08:	463d      	mov	r5, r7
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2a65      	cmp	r2, #101	@ 0x65
 8007d0e:	d001      	beq.n	8007d14 <_strtod_l+0x174>
 8007d10:	2a45      	cmp	r2, #69	@ 0x45
 8007d12:	d114      	bne.n	8007d3e <_strtod_l+0x19e>
 8007d14:	b91d      	cbnz	r5, 8007d1e <_strtod_l+0x17e>
 8007d16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d18:	4302      	orrs	r2, r0
 8007d1a:	d095      	beq.n	8007c48 <_strtod_l+0xa8>
 8007d1c:	2500      	movs	r5, #0
 8007d1e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007d20:	1c62      	adds	r2, r4, #1
 8007d22:	9219      	str	r2, [sp, #100]	@ 0x64
 8007d24:	7862      	ldrb	r2, [r4, #1]
 8007d26:	2a2b      	cmp	r2, #43	@ 0x2b
 8007d28:	d077      	beq.n	8007e1a <_strtod_l+0x27a>
 8007d2a:	2a2d      	cmp	r2, #45	@ 0x2d
 8007d2c:	d07b      	beq.n	8007e26 <_strtod_l+0x286>
 8007d2e:	f04f 0c00 	mov.w	ip, #0
 8007d32:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007d36:	2909      	cmp	r1, #9
 8007d38:	f240 8082 	bls.w	8007e40 <_strtod_l+0x2a0>
 8007d3c:	9419      	str	r4, [sp, #100]	@ 0x64
 8007d3e:	f04f 0800 	mov.w	r8, #0
 8007d42:	e0a2      	b.n	8007e8a <_strtod_l+0x2ea>
 8007d44:	2300      	movs	r3, #0
 8007d46:	e7c7      	b.n	8007cd8 <_strtod_l+0x138>
 8007d48:	2f08      	cmp	r7, #8
 8007d4a:	bfd5      	itete	le
 8007d4c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007d4e:	9908      	ldrgt	r1, [sp, #32]
 8007d50:	fb02 3301 	mlale	r3, r2, r1, r3
 8007d54:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007d58:	f100 0001 	add.w	r0, r0, #1
 8007d5c:	bfd4      	ite	le
 8007d5e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007d60:	9308      	strgt	r3, [sp, #32]
 8007d62:	3701      	adds	r7, #1
 8007d64:	9019      	str	r0, [sp, #100]	@ 0x64
 8007d66:	e7bf      	b.n	8007ce8 <_strtod_l+0x148>
 8007d68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d6a:	1c5a      	adds	r2, r3, #1
 8007d6c:	9219      	str	r2, [sp, #100]	@ 0x64
 8007d6e:	785a      	ldrb	r2, [r3, #1]
 8007d70:	b37f      	cbz	r7, 8007dd2 <_strtod_l+0x232>
 8007d72:	4681      	mov	r9, r0
 8007d74:	463d      	mov	r5, r7
 8007d76:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007d7a:	2b09      	cmp	r3, #9
 8007d7c:	d912      	bls.n	8007da4 <_strtod_l+0x204>
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e7c4      	b.n	8007d0c <_strtod_l+0x16c>
 8007d82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d84:	1c5a      	adds	r2, r3, #1
 8007d86:	9219      	str	r2, [sp, #100]	@ 0x64
 8007d88:	785a      	ldrb	r2, [r3, #1]
 8007d8a:	3001      	adds	r0, #1
 8007d8c:	2a30      	cmp	r2, #48	@ 0x30
 8007d8e:	d0f8      	beq.n	8007d82 <_strtod_l+0x1e2>
 8007d90:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007d94:	2b08      	cmp	r3, #8
 8007d96:	f200 84d3 	bhi.w	8008740 <_strtod_l+0xba0>
 8007d9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d9c:	930c      	str	r3, [sp, #48]	@ 0x30
 8007d9e:	4681      	mov	r9, r0
 8007da0:	2000      	movs	r0, #0
 8007da2:	4605      	mov	r5, r0
 8007da4:	3a30      	subs	r2, #48	@ 0x30
 8007da6:	f100 0301 	add.w	r3, r0, #1
 8007daa:	d02a      	beq.n	8007e02 <_strtod_l+0x262>
 8007dac:	4499      	add	r9, r3
 8007dae:	eb00 0c05 	add.w	ip, r0, r5
 8007db2:	462b      	mov	r3, r5
 8007db4:	210a      	movs	r1, #10
 8007db6:	4563      	cmp	r3, ip
 8007db8:	d10d      	bne.n	8007dd6 <_strtod_l+0x236>
 8007dba:	1c69      	adds	r1, r5, #1
 8007dbc:	4401      	add	r1, r0
 8007dbe:	4428      	add	r0, r5
 8007dc0:	2808      	cmp	r0, #8
 8007dc2:	dc16      	bgt.n	8007df2 <_strtod_l+0x252>
 8007dc4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007dc6:	230a      	movs	r3, #10
 8007dc8:	fb03 2300 	mla	r3, r3, r0, r2
 8007dcc:	930a      	str	r3, [sp, #40]	@ 0x28
 8007dce:	2300      	movs	r3, #0
 8007dd0:	e018      	b.n	8007e04 <_strtod_l+0x264>
 8007dd2:	4638      	mov	r0, r7
 8007dd4:	e7da      	b.n	8007d8c <_strtod_l+0x1ec>
 8007dd6:	2b08      	cmp	r3, #8
 8007dd8:	f103 0301 	add.w	r3, r3, #1
 8007ddc:	dc03      	bgt.n	8007de6 <_strtod_l+0x246>
 8007dde:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007de0:	434e      	muls	r6, r1
 8007de2:	960a      	str	r6, [sp, #40]	@ 0x28
 8007de4:	e7e7      	b.n	8007db6 <_strtod_l+0x216>
 8007de6:	2b10      	cmp	r3, #16
 8007de8:	bfde      	ittt	le
 8007dea:	9e08      	ldrle	r6, [sp, #32]
 8007dec:	434e      	mulle	r6, r1
 8007dee:	9608      	strle	r6, [sp, #32]
 8007df0:	e7e1      	b.n	8007db6 <_strtod_l+0x216>
 8007df2:	280f      	cmp	r0, #15
 8007df4:	dceb      	bgt.n	8007dce <_strtod_l+0x22e>
 8007df6:	9808      	ldr	r0, [sp, #32]
 8007df8:	230a      	movs	r3, #10
 8007dfa:	fb03 2300 	mla	r3, r3, r0, r2
 8007dfe:	9308      	str	r3, [sp, #32]
 8007e00:	e7e5      	b.n	8007dce <_strtod_l+0x22e>
 8007e02:	4629      	mov	r1, r5
 8007e04:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007e06:	1c50      	adds	r0, r2, #1
 8007e08:	9019      	str	r0, [sp, #100]	@ 0x64
 8007e0a:	7852      	ldrb	r2, [r2, #1]
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	460d      	mov	r5, r1
 8007e10:	e7b1      	b.n	8007d76 <_strtod_l+0x1d6>
 8007e12:	f04f 0900 	mov.w	r9, #0
 8007e16:	2301      	movs	r3, #1
 8007e18:	e77d      	b.n	8007d16 <_strtod_l+0x176>
 8007e1a:	f04f 0c00 	mov.w	ip, #0
 8007e1e:	1ca2      	adds	r2, r4, #2
 8007e20:	9219      	str	r2, [sp, #100]	@ 0x64
 8007e22:	78a2      	ldrb	r2, [r4, #2]
 8007e24:	e785      	b.n	8007d32 <_strtod_l+0x192>
 8007e26:	f04f 0c01 	mov.w	ip, #1
 8007e2a:	e7f8      	b.n	8007e1e <_strtod_l+0x27e>
 8007e2c:	08009f38 	.word	0x08009f38
 8007e30:	08009f20 	.word	0x08009f20
 8007e34:	7ff00000 	.word	0x7ff00000
 8007e38:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007e3a:	1c51      	adds	r1, r2, #1
 8007e3c:	9119      	str	r1, [sp, #100]	@ 0x64
 8007e3e:	7852      	ldrb	r2, [r2, #1]
 8007e40:	2a30      	cmp	r2, #48	@ 0x30
 8007e42:	d0f9      	beq.n	8007e38 <_strtod_l+0x298>
 8007e44:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007e48:	2908      	cmp	r1, #8
 8007e4a:	f63f af78 	bhi.w	8007d3e <_strtod_l+0x19e>
 8007e4e:	3a30      	subs	r2, #48	@ 0x30
 8007e50:	920e      	str	r2, [sp, #56]	@ 0x38
 8007e52:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007e54:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007e56:	f04f 080a 	mov.w	r8, #10
 8007e5a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007e5c:	1c56      	adds	r6, r2, #1
 8007e5e:	9619      	str	r6, [sp, #100]	@ 0x64
 8007e60:	7852      	ldrb	r2, [r2, #1]
 8007e62:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007e66:	f1be 0f09 	cmp.w	lr, #9
 8007e6a:	d939      	bls.n	8007ee0 <_strtod_l+0x340>
 8007e6c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007e6e:	1a76      	subs	r6, r6, r1
 8007e70:	2e08      	cmp	r6, #8
 8007e72:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007e76:	dc03      	bgt.n	8007e80 <_strtod_l+0x2e0>
 8007e78:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007e7a:	4588      	cmp	r8, r1
 8007e7c:	bfa8      	it	ge
 8007e7e:	4688      	movge	r8, r1
 8007e80:	f1bc 0f00 	cmp.w	ip, #0
 8007e84:	d001      	beq.n	8007e8a <_strtod_l+0x2ea>
 8007e86:	f1c8 0800 	rsb	r8, r8, #0
 8007e8a:	2d00      	cmp	r5, #0
 8007e8c:	d14e      	bne.n	8007f2c <_strtod_l+0x38c>
 8007e8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007e90:	4308      	orrs	r0, r1
 8007e92:	f47f aebe 	bne.w	8007c12 <_strtod_l+0x72>
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	f47f aed6 	bne.w	8007c48 <_strtod_l+0xa8>
 8007e9c:	2a69      	cmp	r2, #105	@ 0x69
 8007e9e:	d028      	beq.n	8007ef2 <_strtod_l+0x352>
 8007ea0:	dc25      	bgt.n	8007eee <_strtod_l+0x34e>
 8007ea2:	2a49      	cmp	r2, #73	@ 0x49
 8007ea4:	d025      	beq.n	8007ef2 <_strtod_l+0x352>
 8007ea6:	2a4e      	cmp	r2, #78	@ 0x4e
 8007ea8:	f47f aece 	bne.w	8007c48 <_strtod_l+0xa8>
 8007eac:	499b      	ldr	r1, [pc, #620]	@ (800811c <_strtod_l+0x57c>)
 8007eae:	a819      	add	r0, sp, #100	@ 0x64
 8007eb0:	f001 f9ee 	bl	8009290 <__match>
 8007eb4:	2800      	cmp	r0, #0
 8007eb6:	f43f aec7 	beq.w	8007c48 <_strtod_l+0xa8>
 8007eba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	2b28      	cmp	r3, #40	@ 0x28
 8007ec0:	d12e      	bne.n	8007f20 <_strtod_l+0x380>
 8007ec2:	4997      	ldr	r1, [pc, #604]	@ (8008120 <_strtod_l+0x580>)
 8007ec4:	aa1c      	add	r2, sp, #112	@ 0x70
 8007ec6:	a819      	add	r0, sp, #100	@ 0x64
 8007ec8:	f001 f9f6 	bl	80092b8 <__hexnan>
 8007ecc:	2805      	cmp	r0, #5
 8007ece:	d127      	bne.n	8007f20 <_strtod_l+0x380>
 8007ed0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007ed2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007ed6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007eda:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007ede:	e698      	b.n	8007c12 <_strtod_l+0x72>
 8007ee0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007ee2:	fb08 2101 	mla	r1, r8, r1, r2
 8007ee6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007eea:	920e      	str	r2, [sp, #56]	@ 0x38
 8007eec:	e7b5      	b.n	8007e5a <_strtod_l+0x2ba>
 8007eee:	2a6e      	cmp	r2, #110	@ 0x6e
 8007ef0:	e7da      	b.n	8007ea8 <_strtod_l+0x308>
 8007ef2:	498c      	ldr	r1, [pc, #560]	@ (8008124 <_strtod_l+0x584>)
 8007ef4:	a819      	add	r0, sp, #100	@ 0x64
 8007ef6:	f001 f9cb 	bl	8009290 <__match>
 8007efa:	2800      	cmp	r0, #0
 8007efc:	f43f aea4 	beq.w	8007c48 <_strtod_l+0xa8>
 8007f00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007f02:	4989      	ldr	r1, [pc, #548]	@ (8008128 <_strtod_l+0x588>)
 8007f04:	3b01      	subs	r3, #1
 8007f06:	a819      	add	r0, sp, #100	@ 0x64
 8007f08:	9319      	str	r3, [sp, #100]	@ 0x64
 8007f0a:	f001 f9c1 	bl	8009290 <__match>
 8007f0e:	b910      	cbnz	r0, 8007f16 <_strtod_l+0x376>
 8007f10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007f12:	3301      	adds	r3, #1
 8007f14:	9319      	str	r3, [sp, #100]	@ 0x64
 8007f16:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008138 <_strtod_l+0x598>
 8007f1a:	f04f 0a00 	mov.w	sl, #0
 8007f1e:	e678      	b.n	8007c12 <_strtod_l+0x72>
 8007f20:	4882      	ldr	r0, [pc, #520]	@ (800812c <_strtod_l+0x58c>)
 8007f22:	f000 fef1 	bl	8008d08 <nan>
 8007f26:	ec5b ab10 	vmov	sl, fp, d0
 8007f2a:	e672      	b.n	8007c12 <_strtod_l+0x72>
 8007f2c:	eba8 0309 	sub.w	r3, r8, r9
 8007f30:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007f32:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f34:	2f00      	cmp	r7, #0
 8007f36:	bf08      	it	eq
 8007f38:	462f      	moveq	r7, r5
 8007f3a:	2d10      	cmp	r5, #16
 8007f3c:	462c      	mov	r4, r5
 8007f3e:	bfa8      	it	ge
 8007f40:	2410      	movge	r4, #16
 8007f42:	f7f8 fadf 	bl	8000504 <__aeabi_ui2d>
 8007f46:	2d09      	cmp	r5, #9
 8007f48:	4682      	mov	sl, r0
 8007f4a:	468b      	mov	fp, r1
 8007f4c:	dc13      	bgt.n	8007f76 <_strtod_l+0x3d6>
 8007f4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	f43f ae5e 	beq.w	8007c12 <_strtod_l+0x72>
 8007f56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f58:	dd78      	ble.n	800804c <_strtod_l+0x4ac>
 8007f5a:	2b16      	cmp	r3, #22
 8007f5c:	dc5f      	bgt.n	800801e <_strtod_l+0x47e>
 8007f5e:	4974      	ldr	r1, [pc, #464]	@ (8008130 <_strtod_l+0x590>)
 8007f60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007f64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f68:	4652      	mov	r2, sl
 8007f6a:	465b      	mov	r3, fp
 8007f6c:	f7f8 fb44 	bl	80005f8 <__aeabi_dmul>
 8007f70:	4682      	mov	sl, r0
 8007f72:	468b      	mov	fp, r1
 8007f74:	e64d      	b.n	8007c12 <_strtod_l+0x72>
 8007f76:	4b6e      	ldr	r3, [pc, #440]	@ (8008130 <_strtod_l+0x590>)
 8007f78:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007f7c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007f80:	f7f8 fb3a 	bl	80005f8 <__aeabi_dmul>
 8007f84:	4682      	mov	sl, r0
 8007f86:	9808      	ldr	r0, [sp, #32]
 8007f88:	468b      	mov	fp, r1
 8007f8a:	f7f8 fabb 	bl	8000504 <__aeabi_ui2d>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	460b      	mov	r3, r1
 8007f92:	4650      	mov	r0, sl
 8007f94:	4659      	mov	r1, fp
 8007f96:	f7f8 f979 	bl	800028c <__adddf3>
 8007f9a:	2d0f      	cmp	r5, #15
 8007f9c:	4682      	mov	sl, r0
 8007f9e:	468b      	mov	fp, r1
 8007fa0:	ddd5      	ble.n	8007f4e <_strtod_l+0x3ae>
 8007fa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fa4:	1b2c      	subs	r4, r5, r4
 8007fa6:	441c      	add	r4, r3
 8007fa8:	2c00      	cmp	r4, #0
 8007faa:	f340 8096 	ble.w	80080da <_strtod_l+0x53a>
 8007fae:	f014 030f 	ands.w	r3, r4, #15
 8007fb2:	d00a      	beq.n	8007fca <_strtod_l+0x42a>
 8007fb4:	495e      	ldr	r1, [pc, #376]	@ (8008130 <_strtod_l+0x590>)
 8007fb6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007fba:	4652      	mov	r2, sl
 8007fbc:	465b      	mov	r3, fp
 8007fbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fc2:	f7f8 fb19 	bl	80005f8 <__aeabi_dmul>
 8007fc6:	4682      	mov	sl, r0
 8007fc8:	468b      	mov	fp, r1
 8007fca:	f034 040f 	bics.w	r4, r4, #15
 8007fce:	d073      	beq.n	80080b8 <_strtod_l+0x518>
 8007fd0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007fd4:	dd48      	ble.n	8008068 <_strtod_l+0x4c8>
 8007fd6:	2400      	movs	r4, #0
 8007fd8:	46a0      	mov	r8, r4
 8007fda:	940a      	str	r4, [sp, #40]	@ 0x28
 8007fdc:	46a1      	mov	r9, r4
 8007fde:	9a05      	ldr	r2, [sp, #20]
 8007fe0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008138 <_strtod_l+0x598>
 8007fe4:	2322      	movs	r3, #34	@ 0x22
 8007fe6:	6013      	str	r3, [r2, #0]
 8007fe8:	f04f 0a00 	mov.w	sl, #0
 8007fec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	f43f ae0f 	beq.w	8007c12 <_strtod_l+0x72>
 8007ff4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007ff6:	9805      	ldr	r0, [sp, #20]
 8007ff8:	f7ff f942 	bl	8007280 <_Bfree>
 8007ffc:	9805      	ldr	r0, [sp, #20]
 8007ffe:	4649      	mov	r1, r9
 8008000:	f7ff f93e 	bl	8007280 <_Bfree>
 8008004:	9805      	ldr	r0, [sp, #20]
 8008006:	4641      	mov	r1, r8
 8008008:	f7ff f93a 	bl	8007280 <_Bfree>
 800800c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800800e:	9805      	ldr	r0, [sp, #20]
 8008010:	f7ff f936 	bl	8007280 <_Bfree>
 8008014:	9805      	ldr	r0, [sp, #20]
 8008016:	4621      	mov	r1, r4
 8008018:	f7ff f932 	bl	8007280 <_Bfree>
 800801c:	e5f9      	b.n	8007c12 <_strtod_l+0x72>
 800801e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008020:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008024:	4293      	cmp	r3, r2
 8008026:	dbbc      	blt.n	8007fa2 <_strtod_l+0x402>
 8008028:	4c41      	ldr	r4, [pc, #260]	@ (8008130 <_strtod_l+0x590>)
 800802a:	f1c5 050f 	rsb	r5, r5, #15
 800802e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008032:	4652      	mov	r2, sl
 8008034:	465b      	mov	r3, fp
 8008036:	e9d1 0100 	ldrd	r0, r1, [r1]
 800803a:	f7f8 fadd 	bl	80005f8 <__aeabi_dmul>
 800803e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008040:	1b5d      	subs	r5, r3, r5
 8008042:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008046:	e9d4 2300 	ldrd	r2, r3, [r4]
 800804a:	e78f      	b.n	8007f6c <_strtod_l+0x3cc>
 800804c:	3316      	adds	r3, #22
 800804e:	dba8      	blt.n	8007fa2 <_strtod_l+0x402>
 8008050:	4b37      	ldr	r3, [pc, #220]	@ (8008130 <_strtod_l+0x590>)
 8008052:	eba9 0808 	sub.w	r8, r9, r8
 8008056:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800805a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800805e:	4650      	mov	r0, sl
 8008060:	4659      	mov	r1, fp
 8008062:	f7f8 fbf3 	bl	800084c <__aeabi_ddiv>
 8008066:	e783      	b.n	8007f70 <_strtod_l+0x3d0>
 8008068:	4b32      	ldr	r3, [pc, #200]	@ (8008134 <_strtod_l+0x594>)
 800806a:	9308      	str	r3, [sp, #32]
 800806c:	2300      	movs	r3, #0
 800806e:	1124      	asrs	r4, r4, #4
 8008070:	4650      	mov	r0, sl
 8008072:	4659      	mov	r1, fp
 8008074:	461e      	mov	r6, r3
 8008076:	2c01      	cmp	r4, #1
 8008078:	dc21      	bgt.n	80080be <_strtod_l+0x51e>
 800807a:	b10b      	cbz	r3, 8008080 <_strtod_l+0x4e0>
 800807c:	4682      	mov	sl, r0
 800807e:	468b      	mov	fp, r1
 8008080:	492c      	ldr	r1, [pc, #176]	@ (8008134 <_strtod_l+0x594>)
 8008082:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008086:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800808a:	4652      	mov	r2, sl
 800808c:	465b      	mov	r3, fp
 800808e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008092:	f7f8 fab1 	bl	80005f8 <__aeabi_dmul>
 8008096:	4b28      	ldr	r3, [pc, #160]	@ (8008138 <_strtod_l+0x598>)
 8008098:	460a      	mov	r2, r1
 800809a:	400b      	ands	r3, r1
 800809c:	4927      	ldr	r1, [pc, #156]	@ (800813c <_strtod_l+0x59c>)
 800809e:	428b      	cmp	r3, r1
 80080a0:	4682      	mov	sl, r0
 80080a2:	d898      	bhi.n	8007fd6 <_strtod_l+0x436>
 80080a4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80080a8:	428b      	cmp	r3, r1
 80080aa:	bf86      	itte	hi
 80080ac:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008140 <_strtod_l+0x5a0>
 80080b0:	f04f 3aff 	movhi.w	sl, #4294967295
 80080b4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80080b8:	2300      	movs	r3, #0
 80080ba:	9308      	str	r3, [sp, #32]
 80080bc:	e07a      	b.n	80081b4 <_strtod_l+0x614>
 80080be:	07e2      	lsls	r2, r4, #31
 80080c0:	d505      	bpl.n	80080ce <_strtod_l+0x52e>
 80080c2:	9b08      	ldr	r3, [sp, #32]
 80080c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c8:	f7f8 fa96 	bl	80005f8 <__aeabi_dmul>
 80080cc:	2301      	movs	r3, #1
 80080ce:	9a08      	ldr	r2, [sp, #32]
 80080d0:	3208      	adds	r2, #8
 80080d2:	3601      	adds	r6, #1
 80080d4:	1064      	asrs	r4, r4, #1
 80080d6:	9208      	str	r2, [sp, #32]
 80080d8:	e7cd      	b.n	8008076 <_strtod_l+0x4d6>
 80080da:	d0ed      	beq.n	80080b8 <_strtod_l+0x518>
 80080dc:	4264      	negs	r4, r4
 80080de:	f014 020f 	ands.w	r2, r4, #15
 80080e2:	d00a      	beq.n	80080fa <_strtod_l+0x55a>
 80080e4:	4b12      	ldr	r3, [pc, #72]	@ (8008130 <_strtod_l+0x590>)
 80080e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080ea:	4650      	mov	r0, sl
 80080ec:	4659      	mov	r1, fp
 80080ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f2:	f7f8 fbab 	bl	800084c <__aeabi_ddiv>
 80080f6:	4682      	mov	sl, r0
 80080f8:	468b      	mov	fp, r1
 80080fa:	1124      	asrs	r4, r4, #4
 80080fc:	d0dc      	beq.n	80080b8 <_strtod_l+0x518>
 80080fe:	2c1f      	cmp	r4, #31
 8008100:	dd20      	ble.n	8008144 <_strtod_l+0x5a4>
 8008102:	2400      	movs	r4, #0
 8008104:	46a0      	mov	r8, r4
 8008106:	940a      	str	r4, [sp, #40]	@ 0x28
 8008108:	46a1      	mov	r9, r4
 800810a:	9a05      	ldr	r2, [sp, #20]
 800810c:	2322      	movs	r3, #34	@ 0x22
 800810e:	f04f 0a00 	mov.w	sl, #0
 8008112:	f04f 0b00 	mov.w	fp, #0
 8008116:	6013      	str	r3, [r2, #0]
 8008118:	e768      	b.n	8007fec <_strtod_l+0x44c>
 800811a:	bf00      	nop
 800811c:	08009d11 	.word	0x08009d11
 8008120:	08009f24 	.word	0x08009f24
 8008124:	08009d09 	.word	0x08009d09
 8008128:	08009d40 	.word	0x08009d40
 800812c:	0800a0cd 	.word	0x0800a0cd
 8008130:	08009e58 	.word	0x08009e58
 8008134:	08009e30 	.word	0x08009e30
 8008138:	7ff00000 	.word	0x7ff00000
 800813c:	7ca00000 	.word	0x7ca00000
 8008140:	7fefffff 	.word	0x7fefffff
 8008144:	f014 0310 	ands.w	r3, r4, #16
 8008148:	bf18      	it	ne
 800814a:	236a      	movne	r3, #106	@ 0x6a
 800814c:	4ea9      	ldr	r6, [pc, #676]	@ (80083f4 <_strtod_l+0x854>)
 800814e:	9308      	str	r3, [sp, #32]
 8008150:	4650      	mov	r0, sl
 8008152:	4659      	mov	r1, fp
 8008154:	2300      	movs	r3, #0
 8008156:	07e2      	lsls	r2, r4, #31
 8008158:	d504      	bpl.n	8008164 <_strtod_l+0x5c4>
 800815a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800815e:	f7f8 fa4b 	bl	80005f8 <__aeabi_dmul>
 8008162:	2301      	movs	r3, #1
 8008164:	1064      	asrs	r4, r4, #1
 8008166:	f106 0608 	add.w	r6, r6, #8
 800816a:	d1f4      	bne.n	8008156 <_strtod_l+0x5b6>
 800816c:	b10b      	cbz	r3, 8008172 <_strtod_l+0x5d2>
 800816e:	4682      	mov	sl, r0
 8008170:	468b      	mov	fp, r1
 8008172:	9b08      	ldr	r3, [sp, #32]
 8008174:	b1b3      	cbz	r3, 80081a4 <_strtod_l+0x604>
 8008176:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800817a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800817e:	2b00      	cmp	r3, #0
 8008180:	4659      	mov	r1, fp
 8008182:	dd0f      	ble.n	80081a4 <_strtod_l+0x604>
 8008184:	2b1f      	cmp	r3, #31
 8008186:	dd55      	ble.n	8008234 <_strtod_l+0x694>
 8008188:	2b34      	cmp	r3, #52	@ 0x34
 800818a:	bfde      	ittt	le
 800818c:	f04f 33ff 	movle.w	r3, #4294967295
 8008190:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008194:	4093      	lslle	r3, r2
 8008196:	f04f 0a00 	mov.w	sl, #0
 800819a:	bfcc      	ite	gt
 800819c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80081a0:	ea03 0b01 	andle.w	fp, r3, r1
 80081a4:	2200      	movs	r2, #0
 80081a6:	2300      	movs	r3, #0
 80081a8:	4650      	mov	r0, sl
 80081aa:	4659      	mov	r1, fp
 80081ac:	f7f8 fc8c 	bl	8000ac8 <__aeabi_dcmpeq>
 80081b0:	2800      	cmp	r0, #0
 80081b2:	d1a6      	bne.n	8008102 <_strtod_l+0x562>
 80081b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081b6:	9300      	str	r3, [sp, #0]
 80081b8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80081ba:	9805      	ldr	r0, [sp, #20]
 80081bc:	462b      	mov	r3, r5
 80081be:	463a      	mov	r2, r7
 80081c0:	f7ff f8c6 	bl	8007350 <__s2b>
 80081c4:	900a      	str	r0, [sp, #40]	@ 0x28
 80081c6:	2800      	cmp	r0, #0
 80081c8:	f43f af05 	beq.w	8007fd6 <_strtod_l+0x436>
 80081cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081ce:	2a00      	cmp	r2, #0
 80081d0:	eba9 0308 	sub.w	r3, r9, r8
 80081d4:	bfa8      	it	ge
 80081d6:	2300      	movge	r3, #0
 80081d8:	9312      	str	r3, [sp, #72]	@ 0x48
 80081da:	2400      	movs	r4, #0
 80081dc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80081e0:	9316      	str	r3, [sp, #88]	@ 0x58
 80081e2:	46a0      	mov	r8, r4
 80081e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081e6:	9805      	ldr	r0, [sp, #20]
 80081e8:	6859      	ldr	r1, [r3, #4]
 80081ea:	f7ff f809 	bl	8007200 <_Balloc>
 80081ee:	4681      	mov	r9, r0
 80081f0:	2800      	cmp	r0, #0
 80081f2:	f43f aef4 	beq.w	8007fde <_strtod_l+0x43e>
 80081f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081f8:	691a      	ldr	r2, [r3, #16]
 80081fa:	3202      	adds	r2, #2
 80081fc:	f103 010c 	add.w	r1, r3, #12
 8008200:	0092      	lsls	r2, r2, #2
 8008202:	300c      	adds	r0, #12
 8008204:	f000 fd72 	bl	8008cec <memcpy>
 8008208:	ec4b ab10 	vmov	d0, sl, fp
 800820c:	9805      	ldr	r0, [sp, #20]
 800820e:	aa1c      	add	r2, sp, #112	@ 0x70
 8008210:	a91b      	add	r1, sp, #108	@ 0x6c
 8008212:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008216:	f7ff fbd7 	bl	80079c8 <__d2b>
 800821a:	901a      	str	r0, [sp, #104]	@ 0x68
 800821c:	2800      	cmp	r0, #0
 800821e:	f43f aede 	beq.w	8007fde <_strtod_l+0x43e>
 8008222:	9805      	ldr	r0, [sp, #20]
 8008224:	2101      	movs	r1, #1
 8008226:	f7ff f929 	bl	800747c <__i2b>
 800822a:	4680      	mov	r8, r0
 800822c:	b948      	cbnz	r0, 8008242 <_strtod_l+0x6a2>
 800822e:	f04f 0800 	mov.w	r8, #0
 8008232:	e6d4      	b.n	8007fde <_strtod_l+0x43e>
 8008234:	f04f 32ff 	mov.w	r2, #4294967295
 8008238:	fa02 f303 	lsl.w	r3, r2, r3
 800823c:	ea03 0a0a 	and.w	sl, r3, sl
 8008240:	e7b0      	b.n	80081a4 <_strtod_l+0x604>
 8008242:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008244:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008246:	2d00      	cmp	r5, #0
 8008248:	bfab      	itete	ge
 800824a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800824c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800824e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008250:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008252:	bfac      	ite	ge
 8008254:	18ef      	addge	r7, r5, r3
 8008256:	1b5e      	sublt	r6, r3, r5
 8008258:	9b08      	ldr	r3, [sp, #32]
 800825a:	1aed      	subs	r5, r5, r3
 800825c:	4415      	add	r5, r2
 800825e:	4b66      	ldr	r3, [pc, #408]	@ (80083f8 <_strtod_l+0x858>)
 8008260:	3d01      	subs	r5, #1
 8008262:	429d      	cmp	r5, r3
 8008264:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008268:	da50      	bge.n	800830c <_strtod_l+0x76c>
 800826a:	1b5b      	subs	r3, r3, r5
 800826c:	2b1f      	cmp	r3, #31
 800826e:	eba2 0203 	sub.w	r2, r2, r3
 8008272:	f04f 0101 	mov.w	r1, #1
 8008276:	dc3d      	bgt.n	80082f4 <_strtod_l+0x754>
 8008278:	fa01 f303 	lsl.w	r3, r1, r3
 800827c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800827e:	2300      	movs	r3, #0
 8008280:	9310      	str	r3, [sp, #64]	@ 0x40
 8008282:	18bd      	adds	r5, r7, r2
 8008284:	9b08      	ldr	r3, [sp, #32]
 8008286:	42af      	cmp	r7, r5
 8008288:	4416      	add	r6, r2
 800828a:	441e      	add	r6, r3
 800828c:	463b      	mov	r3, r7
 800828e:	bfa8      	it	ge
 8008290:	462b      	movge	r3, r5
 8008292:	42b3      	cmp	r3, r6
 8008294:	bfa8      	it	ge
 8008296:	4633      	movge	r3, r6
 8008298:	2b00      	cmp	r3, #0
 800829a:	bfc2      	ittt	gt
 800829c:	1aed      	subgt	r5, r5, r3
 800829e:	1af6      	subgt	r6, r6, r3
 80082a0:	1aff      	subgt	r7, r7, r3
 80082a2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	dd16      	ble.n	80082d6 <_strtod_l+0x736>
 80082a8:	4641      	mov	r1, r8
 80082aa:	9805      	ldr	r0, [sp, #20]
 80082ac:	461a      	mov	r2, r3
 80082ae:	f7ff f9a5 	bl	80075fc <__pow5mult>
 80082b2:	4680      	mov	r8, r0
 80082b4:	2800      	cmp	r0, #0
 80082b6:	d0ba      	beq.n	800822e <_strtod_l+0x68e>
 80082b8:	4601      	mov	r1, r0
 80082ba:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80082bc:	9805      	ldr	r0, [sp, #20]
 80082be:	f7ff f8f3 	bl	80074a8 <__multiply>
 80082c2:	900e      	str	r0, [sp, #56]	@ 0x38
 80082c4:	2800      	cmp	r0, #0
 80082c6:	f43f ae8a 	beq.w	8007fde <_strtod_l+0x43e>
 80082ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80082cc:	9805      	ldr	r0, [sp, #20]
 80082ce:	f7fe ffd7 	bl	8007280 <_Bfree>
 80082d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80082d6:	2d00      	cmp	r5, #0
 80082d8:	dc1d      	bgt.n	8008316 <_strtod_l+0x776>
 80082da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082dc:	2b00      	cmp	r3, #0
 80082de:	dd23      	ble.n	8008328 <_strtod_l+0x788>
 80082e0:	4649      	mov	r1, r9
 80082e2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80082e4:	9805      	ldr	r0, [sp, #20]
 80082e6:	f7ff f989 	bl	80075fc <__pow5mult>
 80082ea:	4681      	mov	r9, r0
 80082ec:	b9e0      	cbnz	r0, 8008328 <_strtod_l+0x788>
 80082ee:	f04f 0900 	mov.w	r9, #0
 80082f2:	e674      	b.n	8007fde <_strtod_l+0x43e>
 80082f4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80082f8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80082fc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008300:	35e2      	adds	r5, #226	@ 0xe2
 8008302:	fa01 f305 	lsl.w	r3, r1, r5
 8008306:	9310      	str	r3, [sp, #64]	@ 0x40
 8008308:	9113      	str	r1, [sp, #76]	@ 0x4c
 800830a:	e7ba      	b.n	8008282 <_strtod_l+0x6e2>
 800830c:	2300      	movs	r3, #0
 800830e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008310:	2301      	movs	r3, #1
 8008312:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008314:	e7b5      	b.n	8008282 <_strtod_l+0x6e2>
 8008316:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008318:	9805      	ldr	r0, [sp, #20]
 800831a:	462a      	mov	r2, r5
 800831c:	f7ff f9c8 	bl	80076b0 <__lshift>
 8008320:	901a      	str	r0, [sp, #104]	@ 0x68
 8008322:	2800      	cmp	r0, #0
 8008324:	d1d9      	bne.n	80082da <_strtod_l+0x73a>
 8008326:	e65a      	b.n	8007fde <_strtod_l+0x43e>
 8008328:	2e00      	cmp	r6, #0
 800832a:	dd07      	ble.n	800833c <_strtod_l+0x79c>
 800832c:	4649      	mov	r1, r9
 800832e:	9805      	ldr	r0, [sp, #20]
 8008330:	4632      	mov	r2, r6
 8008332:	f7ff f9bd 	bl	80076b0 <__lshift>
 8008336:	4681      	mov	r9, r0
 8008338:	2800      	cmp	r0, #0
 800833a:	d0d8      	beq.n	80082ee <_strtod_l+0x74e>
 800833c:	2f00      	cmp	r7, #0
 800833e:	dd08      	ble.n	8008352 <_strtod_l+0x7b2>
 8008340:	4641      	mov	r1, r8
 8008342:	9805      	ldr	r0, [sp, #20]
 8008344:	463a      	mov	r2, r7
 8008346:	f7ff f9b3 	bl	80076b0 <__lshift>
 800834a:	4680      	mov	r8, r0
 800834c:	2800      	cmp	r0, #0
 800834e:	f43f ae46 	beq.w	8007fde <_strtod_l+0x43e>
 8008352:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008354:	9805      	ldr	r0, [sp, #20]
 8008356:	464a      	mov	r2, r9
 8008358:	f7ff fa32 	bl	80077c0 <__mdiff>
 800835c:	4604      	mov	r4, r0
 800835e:	2800      	cmp	r0, #0
 8008360:	f43f ae3d 	beq.w	8007fde <_strtod_l+0x43e>
 8008364:	68c3      	ldr	r3, [r0, #12]
 8008366:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008368:	2300      	movs	r3, #0
 800836a:	60c3      	str	r3, [r0, #12]
 800836c:	4641      	mov	r1, r8
 800836e:	f7ff fa0b 	bl	8007788 <__mcmp>
 8008372:	2800      	cmp	r0, #0
 8008374:	da46      	bge.n	8008404 <_strtod_l+0x864>
 8008376:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008378:	ea53 030a 	orrs.w	r3, r3, sl
 800837c:	d16c      	bne.n	8008458 <_strtod_l+0x8b8>
 800837e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008382:	2b00      	cmp	r3, #0
 8008384:	d168      	bne.n	8008458 <_strtod_l+0x8b8>
 8008386:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800838a:	0d1b      	lsrs	r3, r3, #20
 800838c:	051b      	lsls	r3, r3, #20
 800838e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008392:	d961      	bls.n	8008458 <_strtod_l+0x8b8>
 8008394:	6963      	ldr	r3, [r4, #20]
 8008396:	b913      	cbnz	r3, 800839e <_strtod_l+0x7fe>
 8008398:	6923      	ldr	r3, [r4, #16]
 800839a:	2b01      	cmp	r3, #1
 800839c:	dd5c      	ble.n	8008458 <_strtod_l+0x8b8>
 800839e:	4621      	mov	r1, r4
 80083a0:	2201      	movs	r2, #1
 80083a2:	9805      	ldr	r0, [sp, #20]
 80083a4:	f7ff f984 	bl	80076b0 <__lshift>
 80083a8:	4641      	mov	r1, r8
 80083aa:	4604      	mov	r4, r0
 80083ac:	f7ff f9ec 	bl	8007788 <__mcmp>
 80083b0:	2800      	cmp	r0, #0
 80083b2:	dd51      	ble.n	8008458 <_strtod_l+0x8b8>
 80083b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80083b8:	9a08      	ldr	r2, [sp, #32]
 80083ba:	0d1b      	lsrs	r3, r3, #20
 80083bc:	051b      	lsls	r3, r3, #20
 80083be:	2a00      	cmp	r2, #0
 80083c0:	d06b      	beq.n	800849a <_strtod_l+0x8fa>
 80083c2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80083c6:	d868      	bhi.n	800849a <_strtod_l+0x8fa>
 80083c8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80083cc:	f67f ae9d 	bls.w	800810a <_strtod_l+0x56a>
 80083d0:	4b0a      	ldr	r3, [pc, #40]	@ (80083fc <_strtod_l+0x85c>)
 80083d2:	4650      	mov	r0, sl
 80083d4:	4659      	mov	r1, fp
 80083d6:	2200      	movs	r2, #0
 80083d8:	f7f8 f90e 	bl	80005f8 <__aeabi_dmul>
 80083dc:	4b08      	ldr	r3, [pc, #32]	@ (8008400 <_strtod_l+0x860>)
 80083de:	400b      	ands	r3, r1
 80083e0:	4682      	mov	sl, r0
 80083e2:	468b      	mov	fp, r1
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f47f ae05 	bne.w	8007ff4 <_strtod_l+0x454>
 80083ea:	9a05      	ldr	r2, [sp, #20]
 80083ec:	2322      	movs	r3, #34	@ 0x22
 80083ee:	6013      	str	r3, [r2, #0]
 80083f0:	e600      	b.n	8007ff4 <_strtod_l+0x454>
 80083f2:	bf00      	nop
 80083f4:	08009f50 	.word	0x08009f50
 80083f8:	fffffc02 	.word	0xfffffc02
 80083fc:	39500000 	.word	0x39500000
 8008400:	7ff00000 	.word	0x7ff00000
 8008404:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008408:	d165      	bne.n	80084d6 <_strtod_l+0x936>
 800840a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800840c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008410:	b35a      	cbz	r2, 800846a <_strtod_l+0x8ca>
 8008412:	4a9f      	ldr	r2, [pc, #636]	@ (8008690 <_strtod_l+0xaf0>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d12b      	bne.n	8008470 <_strtod_l+0x8d0>
 8008418:	9b08      	ldr	r3, [sp, #32]
 800841a:	4651      	mov	r1, sl
 800841c:	b303      	cbz	r3, 8008460 <_strtod_l+0x8c0>
 800841e:	4b9d      	ldr	r3, [pc, #628]	@ (8008694 <_strtod_l+0xaf4>)
 8008420:	465a      	mov	r2, fp
 8008422:	4013      	ands	r3, r2
 8008424:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008428:	f04f 32ff 	mov.w	r2, #4294967295
 800842c:	d81b      	bhi.n	8008466 <_strtod_l+0x8c6>
 800842e:	0d1b      	lsrs	r3, r3, #20
 8008430:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008434:	fa02 f303 	lsl.w	r3, r2, r3
 8008438:	4299      	cmp	r1, r3
 800843a:	d119      	bne.n	8008470 <_strtod_l+0x8d0>
 800843c:	4b96      	ldr	r3, [pc, #600]	@ (8008698 <_strtod_l+0xaf8>)
 800843e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008440:	429a      	cmp	r2, r3
 8008442:	d102      	bne.n	800844a <_strtod_l+0x8aa>
 8008444:	3101      	adds	r1, #1
 8008446:	f43f adca 	beq.w	8007fde <_strtod_l+0x43e>
 800844a:	4b92      	ldr	r3, [pc, #584]	@ (8008694 <_strtod_l+0xaf4>)
 800844c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800844e:	401a      	ands	r2, r3
 8008450:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008454:	f04f 0a00 	mov.w	sl, #0
 8008458:	9b08      	ldr	r3, [sp, #32]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d1b8      	bne.n	80083d0 <_strtod_l+0x830>
 800845e:	e5c9      	b.n	8007ff4 <_strtod_l+0x454>
 8008460:	f04f 33ff 	mov.w	r3, #4294967295
 8008464:	e7e8      	b.n	8008438 <_strtod_l+0x898>
 8008466:	4613      	mov	r3, r2
 8008468:	e7e6      	b.n	8008438 <_strtod_l+0x898>
 800846a:	ea53 030a 	orrs.w	r3, r3, sl
 800846e:	d0a1      	beq.n	80083b4 <_strtod_l+0x814>
 8008470:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008472:	b1db      	cbz	r3, 80084ac <_strtod_l+0x90c>
 8008474:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008476:	4213      	tst	r3, r2
 8008478:	d0ee      	beq.n	8008458 <_strtod_l+0x8b8>
 800847a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800847c:	9a08      	ldr	r2, [sp, #32]
 800847e:	4650      	mov	r0, sl
 8008480:	4659      	mov	r1, fp
 8008482:	b1bb      	cbz	r3, 80084b4 <_strtod_l+0x914>
 8008484:	f7ff fb6e 	bl	8007b64 <sulp>
 8008488:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800848c:	ec53 2b10 	vmov	r2, r3, d0
 8008490:	f7f7 fefc 	bl	800028c <__adddf3>
 8008494:	4682      	mov	sl, r0
 8008496:	468b      	mov	fp, r1
 8008498:	e7de      	b.n	8008458 <_strtod_l+0x8b8>
 800849a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800849e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80084a2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80084a6:	f04f 3aff 	mov.w	sl, #4294967295
 80084aa:	e7d5      	b.n	8008458 <_strtod_l+0x8b8>
 80084ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80084ae:	ea13 0f0a 	tst.w	r3, sl
 80084b2:	e7e1      	b.n	8008478 <_strtod_l+0x8d8>
 80084b4:	f7ff fb56 	bl	8007b64 <sulp>
 80084b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80084bc:	ec53 2b10 	vmov	r2, r3, d0
 80084c0:	f7f7 fee2 	bl	8000288 <__aeabi_dsub>
 80084c4:	2200      	movs	r2, #0
 80084c6:	2300      	movs	r3, #0
 80084c8:	4682      	mov	sl, r0
 80084ca:	468b      	mov	fp, r1
 80084cc:	f7f8 fafc 	bl	8000ac8 <__aeabi_dcmpeq>
 80084d0:	2800      	cmp	r0, #0
 80084d2:	d0c1      	beq.n	8008458 <_strtod_l+0x8b8>
 80084d4:	e619      	b.n	800810a <_strtod_l+0x56a>
 80084d6:	4641      	mov	r1, r8
 80084d8:	4620      	mov	r0, r4
 80084da:	f7ff facd 	bl	8007a78 <__ratio>
 80084de:	ec57 6b10 	vmov	r6, r7, d0
 80084e2:	2200      	movs	r2, #0
 80084e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80084e8:	4630      	mov	r0, r6
 80084ea:	4639      	mov	r1, r7
 80084ec:	f7f8 fb00 	bl	8000af0 <__aeabi_dcmple>
 80084f0:	2800      	cmp	r0, #0
 80084f2:	d06f      	beq.n	80085d4 <_strtod_l+0xa34>
 80084f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d17a      	bne.n	80085f0 <_strtod_l+0xa50>
 80084fa:	f1ba 0f00 	cmp.w	sl, #0
 80084fe:	d158      	bne.n	80085b2 <_strtod_l+0xa12>
 8008500:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008502:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008506:	2b00      	cmp	r3, #0
 8008508:	d15a      	bne.n	80085c0 <_strtod_l+0xa20>
 800850a:	4b64      	ldr	r3, [pc, #400]	@ (800869c <_strtod_l+0xafc>)
 800850c:	2200      	movs	r2, #0
 800850e:	4630      	mov	r0, r6
 8008510:	4639      	mov	r1, r7
 8008512:	f7f8 fae3 	bl	8000adc <__aeabi_dcmplt>
 8008516:	2800      	cmp	r0, #0
 8008518:	d159      	bne.n	80085ce <_strtod_l+0xa2e>
 800851a:	4630      	mov	r0, r6
 800851c:	4639      	mov	r1, r7
 800851e:	4b60      	ldr	r3, [pc, #384]	@ (80086a0 <_strtod_l+0xb00>)
 8008520:	2200      	movs	r2, #0
 8008522:	f7f8 f869 	bl	80005f8 <__aeabi_dmul>
 8008526:	4606      	mov	r6, r0
 8008528:	460f      	mov	r7, r1
 800852a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800852e:	9606      	str	r6, [sp, #24]
 8008530:	9307      	str	r3, [sp, #28]
 8008532:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008536:	4d57      	ldr	r5, [pc, #348]	@ (8008694 <_strtod_l+0xaf4>)
 8008538:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800853c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800853e:	401d      	ands	r5, r3
 8008540:	4b58      	ldr	r3, [pc, #352]	@ (80086a4 <_strtod_l+0xb04>)
 8008542:	429d      	cmp	r5, r3
 8008544:	f040 80b2 	bne.w	80086ac <_strtod_l+0xb0c>
 8008548:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800854a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800854e:	ec4b ab10 	vmov	d0, sl, fp
 8008552:	f7ff f9c9 	bl	80078e8 <__ulp>
 8008556:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800855a:	ec51 0b10 	vmov	r0, r1, d0
 800855e:	f7f8 f84b 	bl	80005f8 <__aeabi_dmul>
 8008562:	4652      	mov	r2, sl
 8008564:	465b      	mov	r3, fp
 8008566:	f7f7 fe91 	bl	800028c <__adddf3>
 800856a:	460b      	mov	r3, r1
 800856c:	4949      	ldr	r1, [pc, #292]	@ (8008694 <_strtod_l+0xaf4>)
 800856e:	4a4e      	ldr	r2, [pc, #312]	@ (80086a8 <_strtod_l+0xb08>)
 8008570:	4019      	ands	r1, r3
 8008572:	4291      	cmp	r1, r2
 8008574:	4682      	mov	sl, r0
 8008576:	d942      	bls.n	80085fe <_strtod_l+0xa5e>
 8008578:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800857a:	4b47      	ldr	r3, [pc, #284]	@ (8008698 <_strtod_l+0xaf8>)
 800857c:	429a      	cmp	r2, r3
 800857e:	d103      	bne.n	8008588 <_strtod_l+0x9e8>
 8008580:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008582:	3301      	adds	r3, #1
 8008584:	f43f ad2b 	beq.w	8007fde <_strtod_l+0x43e>
 8008588:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008698 <_strtod_l+0xaf8>
 800858c:	f04f 3aff 	mov.w	sl, #4294967295
 8008590:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008592:	9805      	ldr	r0, [sp, #20]
 8008594:	f7fe fe74 	bl	8007280 <_Bfree>
 8008598:	9805      	ldr	r0, [sp, #20]
 800859a:	4649      	mov	r1, r9
 800859c:	f7fe fe70 	bl	8007280 <_Bfree>
 80085a0:	9805      	ldr	r0, [sp, #20]
 80085a2:	4641      	mov	r1, r8
 80085a4:	f7fe fe6c 	bl	8007280 <_Bfree>
 80085a8:	9805      	ldr	r0, [sp, #20]
 80085aa:	4621      	mov	r1, r4
 80085ac:	f7fe fe68 	bl	8007280 <_Bfree>
 80085b0:	e618      	b.n	80081e4 <_strtod_l+0x644>
 80085b2:	f1ba 0f01 	cmp.w	sl, #1
 80085b6:	d103      	bne.n	80085c0 <_strtod_l+0xa20>
 80085b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	f43f ada5 	beq.w	800810a <_strtod_l+0x56a>
 80085c0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008670 <_strtod_l+0xad0>
 80085c4:	4f35      	ldr	r7, [pc, #212]	@ (800869c <_strtod_l+0xafc>)
 80085c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80085ca:	2600      	movs	r6, #0
 80085cc:	e7b1      	b.n	8008532 <_strtod_l+0x992>
 80085ce:	4f34      	ldr	r7, [pc, #208]	@ (80086a0 <_strtod_l+0xb00>)
 80085d0:	2600      	movs	r6, #0
 80085d2:	e7aa      	b.n	800852a <_strtod_l+0x98a>
 80085d4:	4b32      	ldr	r3, [pc, #200]	@ (80086a0 <_strtod_l+0xb00>)
 80085d6:	4630      	mov	r0, r6
 80085d8:	4639      	mov	r1, r7
 80085da:	2200      	movs	r2, #0
 80085dc:	f7f8 f80c 	bl	80005f8 <__aeabi_dmul>
 80085e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085e2:	4606      	mov	r6, r0
 80085e4:	460f      	mov	r7, r1
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d09f      	beq.n	800852a <_strtod_l+0x98a>
 80085ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80085ee:	e7a0      	b.n	8008532 <_strtod_l+0x992>
 80085f0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008678 <_strtod_l+0xad8>
 80085f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80085f8:	ec57 6b17 	vmov	r6, r7, d7
 80085fc:	e799      	b.n	8008532 <_strtod_l+0x992>
 80085fe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008602:	9b08      	ldr	r3, [sp, #32]
 8008604:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008608:	2b00      	cmp	r3, #0
 800860a:	d1c1      	bne.n	8008590 <_strtod_l+0x9f0>
 800860c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008610:	0d1b      	lsrs	r3, r3, #20
 8008612:	051b      	lsls	r3, r3, #20
 8008614:	429d      	cmp	r5, r3
 8008616:	d1bb      	bne.n	8008590 <_strtod_l+0x9f0>
 8008618:	4630      	mov	r0, r6
 800861a:	4639      	mov	r1, r7
 800861c:	f7f8 fb34 	bl	8000c88 <__aeabi_d2lz>
 8008620:	f7f7 ffbc 	bl	800059c <__aeabi_l2d>
 8008624:	4602      	mov	r2, r0
 8008626:	460b      	mov	r3, r1
 8008628:	4630      	mov	r0, r6
 800862a:	4639      	mov	r1, r7
 800862c:	f7f7 fe2c 	bl	8000288 <__aeabi_dsub>
 8008630:	460b      	mov	r3, r1
 8008632:	4602      	mov	r2, r0
 8008634:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008638:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800863c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800863e:	ea46 060a 	orr.w	r6, r6, sl
 8008642:	431e      	orrs	r6, r3
 8008644:	d06f      	beq.n	8008726 <_strtod_l+0xb86>
 8008646:	a30e      	add	r3, pc, #56	@ (adr r3, 8008680 <_strtod_l+0xae0>)
 8008648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864c:	f7f8 fa46 	bl	8000adc <__aeabi_dcmplt>
 8008650:	2800      	cmp	r0, #0
 8008652:	f47f accf 	bne.w	8007ff4 <_strtod_l+0x454>
 8008656:	a30c      	add	r3, pc, #48	@ (adr r3, 8008688 <_strtod_l+0xae8>)
 8008658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008660:	f7f8 fa5a 	bl	8000b18 <__aeabi_dcmpgt>
 8008664:	2800      	cmp	r0, #0
 8008666:	d093      	beq.n	8008590 <_strtod_l+0x9f0>
 8008668:	e4c4      	b.n	8007ff4 <_strtod_l+0x454>
 800866a:	bf00      	nop
 800866c:	f3af 8000 	nop.w
 8008670:	00000000 	.word	0x00000000
 8008674:	bff00000 	.word	0xbff00000
 8008678:	00000000 	.word	0x00000000
 800867c:	3ff00000 	.word	0x3ff00000
 8008680:	94a03595 	.word	0x94a03595
 8008684:	3fdfffff 	.word	0x3fdfffff
 8008688:	35afe535 	.word	0x35afe535
 800868c:	3fe00000 	.word	0x3fe00000
 8008690:	000fffff 	.word	0x000fffff
 8008694:	7ff00000 	.word	0x7ff00000
 8008698:	7fefffff 	.word	0x7fefffff
 800869c:	3ff00000 	.word	0x3ff00000
 80086a0:	3fe00000 	.word	0x3fe00000
 80086a4:	7fe00000 	.word	0x7fe00000
 80086a8:	7c9fffff 	.word	0x7c9fffff
 80086ac:	9b08      	ldr	r3, [sp, #32]
 80086ae:	b323      	cbz	r3, 80086fa <_strtod_l+0xb5a>
 80086b0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80086b4:	d821      	bhi.n	80086fa <_strtod_l+0xb5a>
 80086b6:	a328      	add	r3, pc, #160	@ (adr r3, 8008758 <_strtod_l+0xbb8>)
 80086b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086bc:	4630      	mov	r0, r6
 80086be:	4639      	mov	r1, r7
 80086c0:	f7f8 fa16 	bl	8000af0 <__aeabi_dcmple>
 80086c4:	b1a0      	cbz	r0, 80086f0 <_strtod_l+0xb50>
 80086c6:	4639      	mov	r1, r7
 80086c8:	4630      	mov	r0, r6
 80086ca:	f7f8 fa6d 	bl	8000ba8 <__aeabi_d2uiz>
 80086ce:	2801      	cmp	r0, #1
 80086d0:	bf38      	it	cc
 80086d2:	2001      	movcc	r0, #1
 80086d4:	f7f7 ff16 	bl	8000504 <__aeabi_ui2d>
 80086d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086da:	4606      	mov	r6, r0
 80086dc:	460f      	mov	r7, r1
 80086de:	b9fb      	cbnz	r3, 8008720 <_strtod_l+0xb80>
 80086e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80086e4:	9014      	str	r0, [sp, #80]	@ 0x50
 80086e6:	9315      	str	r3, [sp, #84]	@ 0x54
 80086e8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80086ec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80086f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80086f2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80086f6:	1b5b      	subs	r3, r3, r5
 80086f8:	9311      	str	r3, [sp, #68]	@ 0x44
 80086fa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80086fe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008702:	f7ff f8f1 	bl	80078e8 <__ulp>
 8008706:	4650      	mov	r0, sl
 8008708:	ec53 2b10 	vmov	r2, r3, d0
 800870c:	4659      	mov	r1, fp
 800870e:	f7f7 ff73 	bl	80005f8 <__aeabi_dmul>
 8008712:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008716:	f7f7 fdb9 	bl	800028c <__adddf3>
 800871a:	4682      	mov	sl, r0
 800871c:	468b      	mov	fp, r1
 800871e:	e770      	b.n	8008602 <_strtod_l+0xa62>
 8008720:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008724:	e7e0      	b.n	80086e8 <_strtod_l+0xb48>
 8008726:	a30e      	add	r3, pc, #56	@ (adr r3, 8008760 <_strtod_l+0xbc0>)
 8008728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872c:	f7f8 f9d6 	bl	8000adc <__aeabi_dcmplt>
 8008730:	e798      	b.n	8008664 <_strtod_l+0xac4>
 8008732:	2300      	movs	r3, #0
 8008734:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008736:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008738:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800873a:	6013      	str	r3, [r2, #0]
 800873c:	f7ff ba6d 	b.w	8007c1a <_strtod_l+0x7a>
 8008740:	2a65      	cmp	r2, #101	@ 0x65
 8008742:	f43f ab66 	beq.w	8007e12 <_strtod_l+0x272>
 8008746:	2a45      	cmp	r2, #69	@ 0x45
 8008748:	f43f ab63 	beq.w	8007e12 <_strtod_l+0x272>
 800874c:	2301      	movs	r3, #1
 800874e:	f7ff bb9e 	b.w	8007e8e <_strtod_l+0x2ee>
 8008752:	bf00      	nop
 8008754:	f3af 8000 	nop.w
 8008758:	ffc00000 	.word	0xffc00000
 800875c:	41dfffff 	.word	0x41dfffff
 8008760:	94a03595 	.word	0x94a03595
 8008764:	3fcfffff 	.word	0x3fcfffff

08008768 <_strtod_r>:
 8008768:	4b01      	ldr	r3, [pc, #4]	@ (8008770 <_strtod_r+0x8>)
 800876a:	f7ff ba19 	b.w	8007ba0 <_strtod_l>
 800876e:	bf00      	nop
 8008770:	20000068 	.word	0x20000068

08008774 <_strtol_l.constprop.0>:
 8008774:	2b24      	cmp	r3, #36	@ 0x24
 8008776:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800877a:	4686      	mov	lr, r0
 800877c:	4690      	mov	r8, r2
 800877e:	d801      	bhi.n	8008784 <_strtol_l.constprop.0+0x10>
 8008780:	2b01      	cmp	r3, #1
 8008782:	d106      	bne.n	8008792 <_strtol_l.constprop.0+0x1e>
 8008784:	f7fd fdba 	bl	80062fc <__errno>
 8008788:	2316      	movs	r3, #22
 800878a:	6003      	str	r3, [r0, #0]
 800878c:	2000      	movs	r0, #0
 800878e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008792:	4834      	ldr	r0, [pc, #208]	@ (8008864 <_strtol_l.constprop.0+0xf0>)
 8008794:	460d      	mov	r5, r1
 8008796:	462a      	mov	r2, r5
 8008798:	f815 4b01 	ldrb.w	r4, [r5], #1
 800879c:	5d06      	ldrb	r6, [r0, r4]
 800879e:	f016 0608 	ands.w	r6, r6, #8
 80087a2:	d1f8      	bne.n	8008796 <_strtol_l.constprop.0+0x22>
 80087a4:	2c2d      	cmp	r4, #45	@ 0x2d
 80087a6:	d12d      	bne.n	8008804 <_strtol_l.constprop.0+0x90>
 80087a8:	782c      	ldrb	r4, [r5, #0]
 80087aa:	2601      	movs	r6, #1
 80087ac:	1c95      	adds	r5, r2, #2
 80087ae:	f033 0210 	bics.w	r2, r3, #16
 80087b2:	d109      	bne.n	80087c8 <_strtol_l.constprop.0+0x54>
 80087b4:	2c30      	cmp	r4, #48	@ 0x30
 80087b6:	d12a      	bne.n	800880e <_strtol_l.constprop.0+0x9a>
 80087b8:	782a      	ldrb	r2, [r5, #0]
 80087ba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80087be:	2a58      	cmp	r2, #88	@ 0x58
 80087c0:	d125      	bne.n	800880e <_strtol_l.constprop.0+0x9a>
 80087c2:	786c      	ldrb	r4, [r5, #1]
 80087c4:	2310      	movs	r3, #16
 80087c6:	3502      	adds	r5, #2
 80087c8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80087cc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80087d0:	2200      	movs	r2, #0
 80087d2:	fbbc f9f3 	udiv	r9, ip, r3
 80087d6:	4610      	mov	r0, r2
 80087d8:	fb03 ca19 	mls	sl, r3, r9, ip
 80087dc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80087e0:	2f09      	cmp	r7, #9
 80087e2:	d81b      	bhi.n	800881c <_strtol_l.constprop.0+0xa8>
 80087e4:	463c      	mov	r4, r7
 80087e6:	42a3      	cmp	r3, r4
 80087e8:	dd27      	ble.n	800883a <_strtol_l.constprop.0+0xc6>
 80087ea:	1c57      	adds	r7, r2, #1
 80087ec:	d007      	beq.n	80087fe <_strtol_l.constprop.0+0x8a>
 80087ee:	4581      	cmp	r9, r0
 80087f0:	d320      	bcc.n	8008834 <_strtol_l.constprop.0+0xc0>
 80087f2:	d101      	bne.n	80087f8 <_strtol_l.constprop.0+0x84>
 80087f4:	45a2      	cmp	sl, r4
 80087f6:	db1d      	blt.n	8008834 <_strtol_l.constprop.0+0xc0>
 80087f8:	fb00 4003 	mla	r0, r0, r3, r4
 80087fc:	2201      	movs	r2, #1
 80087fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008802:	e7eb      	b.n	80087dc <_strtol_l.constprop.0+0x68>
 8008804:	2c2b      	cmp	r4, #43	@ 0x2b
 8008806:	bf04      	itt	eq
 8008808:	782c      	ldrbeq	r4, [r5, #0]
 800880a:	1c95      	addeq	r5, r2, #2
 800880c:	e7cf      	b.n	80087ae <_strtol_l.constprop.0+0x3a>
 800880e:	2b00      	cmp	r3, #0
 8008810:	d1da      	bne.n	80087c8 <_strtol_l.constprop.0+0x54>
 8008812:	2c30      	cmp	r4, #48	@ 0x30
 8008814:	bf0c      	ite	eq
 8008816:	2308      	moveq	r3, #8
 8008818:	230a      	movne	r3, #10
 800881a:	e7d5      	b.n	80087c8 <_strtol_l.constprop.0+0x54>
 800881c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008820:	2f19      	cmp	r7, #25
 8008822:	d801      	bhi.n	8008828 <_strtol_l.constprop.0+0xb4>
 8008824:	3c37      	subs	r4, #55	@ 0x37
 8008826:	e7de      	b.n	80087e6 <_strtol_l.constprop.0+0x72>
 8008828:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800882c:	2f19      	cmp	r7, #25
 800882e:	d804      	bhi.n	800883a <_strtol_l.constprop.0+0xc6>
 8008830:	3c57      	subs	r4, #87	@ 0x57
 8008832:	e7d8      	b.n	80087e6 <_strtol_l.constprop.0+0x72>
 8008834:	f04f 32ff 	mov.w	r2, #4294967295
 8008838:	e7e1      	b.n	80087fe <_strtol_l.constprop.0+0x8a>
 800883a:	1c53      	adds	r3, r2, #1
 800883c:	d108      	bne.n	8008850 <_strtol_l.constprop.0+0xdc>
 800883e:	2322      	movs	r3, #34	@ 0x22
 8008840:	f8ce 3000 	str.w	r3, [lr]
 8008844:	4660      	mov	r0, ip
 8008846:	f1b8 0f00 	cmp.w	r8, #0
 800884a:	d0a0      	beq.n	800878e <_strtol_l.constprop.0+0x1a>
 800884c:	1e69      	subs	r1, r5, #1
 800884e:	e006      	b.n	800885e <_strtol_l.constprop.0+0xea>
 8008850:	b106      	cbz	r6, 8008854 <_strtol_l.constprop.0+0xe0>
 8008852:	4240      	negs	r0, r0
 8008854:	f1b8 0f00 	cmp.w	r8, #0
 8008858:	d099      	beq.n	800878e <_strtol_l.constprop.0+0x1a>
 800885a:	2a00      	cmp	r2, #0
 800885c:	d1f6      	bne.n	800884c <_strtol_l.constprop.0+0xd8>
 800885e:	f8c8 1000 	str.w	r1, [r8]
 8008862:	e794      	b.n	800878e <_strtol_l.constprop.0+0x1a>
 8008864:	08009f79 	.word	0x08009f79

08008868 <_strtol_r>:
 8008868:	f7ff bf84 	b.w	8008774 <_strtol_l.constprop.0>

0800886c <__ssputs_r>:
 800886c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008870:	688e      	ldr	r6, [r1, #8]
 8008872:	461f      	mov	r7, r3
 8008874:	42be      	cmp	r6, r7
 8008876:	680b      	ldr	r3, [r1, #0]
 8008878:	4682      	mov	sl, r0
 800887a:	460c      	mov	r4, r1
 800887c:	4690      	mov	r8, r2
 800887e:	d82d      	bhi.n	80088dc <__ssputs_r+0x70>
 8008880:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008884:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008888:	d026      	beq.n	80088d8 <__ssputs_r+0x6c>
 800888a:	6965      	ldr	r5, [r4, #20]
 800888c:	6909      	ldr	r1, [r1, #16]
 800888e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008892:	eba3 0901 	sub.w	r9, r3, r1
 8008896:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800889a:	1c7b      	adds	r3, r7, #1
 800889c:	444b      	add	r3, r9
 800889e:	106d      	asrs	r5, r5, #1
 80088a0:	429d      	cmp	r5, r3
 80088a2:	bf38      	it	cc
 80088a4:	461d      	movcc	r5, r3
 80088a6:	0553      	lsls	r3, r2, #21
 80088a8:	d527      	bpl.n	80088fa <__ssputs_r+0x8e>
 80088aa:	4629      	mov	r1, r5
 80088ac:	f7fe fc1c 	bl	80070e8 <_malloc_r>
 80088b0:	4606      	mov	r6, r0
 80088b2:	b360      	cbz	r0, 800890e <__ssputs_r+0xa2>
 80088b4:	6921      	ldr	r1, [r4, #16]
 80088b6:	464a      	mov	r2, r9
 80088b8:	f000 fa18 	bl	8008cec <memcpy>
 80088bc:	89a3      	ldrh	r3, [r4, #12]
 80088be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80088c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088c6:	81a3      	strh	r3, [r4, #12]
 80088c8:	6126      	str	r6, [r4, #16]
 80088ca:	6165      	str	r5, [r4, #20]
 80088cc:	444e      	add	r6, r9
 80088ce:	eba5 0509 	sub.w	r5, r5, r9
 80088d2:	6026      	str	r6, [r4, #0]
 80088d4:	60a5      	str	r5, [r4, #8]
 80088d6:	463e      	mov	r6, r7
 80088d8:	42be      	cmp	r6, r7
 80088da:	d900      	bls.n	80088de <__ssputs_r+0x72>
 80088dc:	463e      	mov	r6, r7
 80088de:	6820      	ldr	r0, [r4, #0]
 80088e0:	4632      	mov	r2, r6
 80088e2:	4641      	mov	r1, r8
 80088e4:	f000 f9c6 	bl	8008c74 <memmove>
 80088e8:	68a3      	ldr	r3, [r4, #8]
 80088ea:	1b9b      	subs	r3, r3, r6
 80088ec:	60a3      	str	r3, [r4, #8]
 80088ee:	6823      	ldr	r3, [r4, #0]
 80088f0:	4433      	add	r3, r6
 80088f2:	6023      	str	r3, [r4, #0]
 80088f4:	2000      	movs	r0, #0
 80088f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088fa:	462a      	mov	r2, r5
 80088fc:	f000 fd89 	bl	8009412 <_realloc_r>
 8008900:	4606      	mov	r6, r0
 8008902:	2800      	cmp	r0, #0
 8008904:	d1e0      	bne.n	80088c8 <__ssputs_r+0x5c>
 8008906:	6921      	ldr	r1, [r4, #16]
 8008908:	4650      	mov	r0, sl
 800890a:	f7fe fb79 	bl	8007000 <_free_r>
 800890e:	230c      	movs	r3, #12
 8008910:	f8ca 3000 	str.w	r3, [sl]
 8008914:	89a3      	ldrh	r3, [r4, #12]
 8008916:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800891a:	81a3      	strh	r3, [r4, #12]
 800891c:	f04f 30ff 	mov.w	r0, #4294967295
 8008920:	e7e9      	b.n	80088f6 <__ssputs_r+0x8a>
	...

08008924 <_svfiprintf_r>:
 8008924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008928:	4698      	mov	r8, r3
 800892a:	898b      	ldrh	r3, [r1, #12]
 800892c:	061b      	lsls	r3, r3, #24
 800892e:	b09d      	sub	sp, #116	@ 0x74
 8008930:	4607      	mov	r7, r0
 8008932:	460d      	mov	r5, r1
 8008934:	4614      	mov	r4, r2
 8008936:	d510      	bpl.n	800895a <_svfiprintf_r+0x36>
 8008938:	690b      	ldr	r3, [r1, #16]
 800893a:	b973      	cbnz	r3, 800895a <_svfiprintf_r+0x36>
 800893c:	2140      	movs	r1, #64	@ 0x40
 800893e:	f7fe fbd3 	bl	80070e8 <_malloc_r>
 8008942:	6028      	str	r0, [r5, #0]
 8008944:	6128      	str	r0, [r5, #16]
 8008946:	b930      	cbnz	r0, 8008956 <_svfiprintf_r+0x32>
 8008948:	230c      	movs	r3, #12
 800894a:	603b      	str	r3, [r7, #0]
 800894c:	f04f 30ff 	mov.w	r0, #4294967295
 8008950:	b01d      	add	sp, #116	@ 0x74
 8008952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008956:	2340      	movs	r3, #64	@ 0x40
 8008958:	616b      	str	r3, [r5, #20]
 800895a:	2300      	movs	r3, #0
 800895c:	9309      	str	r3, [sp, #36]	@ 0x24
 800895e:	2320      	movs	r3, #32
 8008960:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008964:	f8cd 800c 	str.w	r8, [sp, #12]
 8008968:	2330      	movs	r3, #48	@ 0x30
 800896a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008b08 <_svfiprintf_r+0x1e4>
 800896e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008972:	f04f 0901 	mov.w	r9, #1
 8008976:	4623      	mov	r3, r4
 8008978:	469a      	mov	sl, r3
 800897a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800897e:	b10a      	cbz	r2, 8008984 <_svfiprintf_r+0x60>
 8008980:	2a25      	cmp	r2, #37	@ 0x25
 8008982:	d1f9      	bne.n	8008978 <_svfiprintf_r+0x54>
 8008984:	ebba 0b04 	subs.w	fp, sl, r4
 8008988:	d00b      	beq.n	80089a2 <_svfiprintf_r+0x7e>
 800898a:	465b      	mov	r3, fp
 800898c:	4622      	mov	r2, r4
 800898e:	4629      	mov	r1, r5
 8008990:	4638      	mov	r0, r7
 8008992:	f7ff ff6b 	bl	800886c <__ssputs_r>
 8008996:	3001      	adds	r0, #1
 8008998:	f000 80a7 	beq.w	8008aea <_svfiprintf_r+0x1c6>
 800899c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800899e:	445a      	add	r2, fp
 80089a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80089a2:	f89a 3000 	ldrb.w	r3, [sl]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	f000 809f 	beq.w	8008aea <_svfiprintf_r+0x1c6>
 80089ac:	2300      	movs	r3, #0
 80089ae:	f04f 32ff 	mov.w	r2, #4294967295
 80089b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089b6:	f10a 0a01 	add.w	sl, sl, #1
 80089ba:	9304      	str	r3, [sp, #16]
 80089bc:	9307      	str	r3, [sp, #28]
 80089be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80089c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80089c4:	4654      	mov	r4, sl
 80089c6:	2205      	movs	r2, #5
 80089c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089cc:	484e      	ldr	r0, [pc, #312]	@ (8008b08 <_svfiprintf_r+0x1e4>)
 80089ce:	f7f7 fbff 	bl	80001d0 <memchr>
 80089d2:	9a04      	ldr	r2, [sp, #16]
 80089d4:	b9d8      	cbnz	r0, 8008a0e <_svfiprintf_r+0xea>
 80089d6:	06d0      	lsls	r0, r2, #27
 80089d8:	bf44      	itt	mi
 80089da:	2320      	movmi	r3, #32
 80089dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089e0:	0711      	lsls	r1, r2, #28
 80089e2:	bf44      	itt	mi
 80089e4:	232b      	movmi	r3, #43	@ 0x2b
 80089e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089ea:	f89a 3000 	ldrb.w	r3, [sl]
 80089ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80089f0:	d015      	beq.n	8008a1e <_svfiprintf_r+0xfa>
 80089f2:	9a07      	ldr	r2, [sp, #28]
 80089f4:	4654      	mov	r4, sl
 80089f6:	2000      	movs	r0, #0
 80089f8:	f04f 0c0a 	mov.w	ip, #10
 80089fc:	4621      	mov	r1, r4
 80089fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a02:	3b30      	subs	r3, #48	@ 0x30
 8008a04:	2b09      	cmp	r3, #9
 8008a06:	d94b      	bls.n	8008aa0 <_svfiprintf_r+0x17c>
 8008a08:	b1b0      	cbz	r0, 8008a38 <_svfiprintf_r+0x114>
 8008a0a:	9207      	str	r2, [sp, #28]
 8008a0c:	e014      	b.n	8008a38 <_svfiprintf_r+0x114>
 8008a0e:	eba0 0308 	sub.w	r3, r0, r8
 8008a12:	fa09 f303 	lsl.w	r3, r9, r3
 8008a16:	4313      	orrs	r3, r2
 8008a18:	9304      	str	r3, [sp, #16]
 8008a1a:	46a2      	mov	sl, r4
 8008a1c:	e7d2      	b.n	80089c4 <_svfiprintf_r+0xa0>
 8008a1e:	9b03      	ldr	r3, [sp, #12]
 8008a20:	1d19      	adds	r1, r3, #4
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	9103      	str	r1, [sp, #12]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	bfbb      	ittet	lt
 8008a2a:	425b      	neglt	r3, r3
 8008a2c:	f042 0202 	orrlt.w	r2, r2, #2
 8008a30:	9307      	strge	r3, [sp, #28]
 8008a32:	9307      	strlt	r3, [sp, #28]
 8008a34:	bfb8      	it	lt
 8008a36:	9204      	strlt	r2, [sp, #16]
 8008a38:	7823      	ldrb	r3, [r4, #0]
 8008a3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a3c:	d10a      	bne.n	8008a54 <_svfiprintf_r+0x130>
 8008a3e:	7863      	ldrb	r3, [r4, #1]
 8008a40:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a42:	d132      	bne.n	8008aaa <_svfiprintf_r+0x186>
 8008a44:	9b03      	ldr	r3, [sp, #12]
 8008a46:	1d1a      	adds	r2, r3, #4
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	9203      	str	r2, [sp, #12]
 8008a4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a50:	3402      	adds	r4, #2
 8008a52:	9305      	str	r3, [sp, #20]
 8008a54:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008b18 <_svfiprintf_r+0x1f4>
 8008a58:	7821      	ldrb	r1, [r4, #0]
 8008a5a:	2203      	movs	r2, #3
 8008a5c:	4650      	mov	r0, sl
 8008a5e:	f7f7 fbb7 	bl	80001d0 <memchr>
 8008a62:	b138      	cbz	r0, 8008a74 <_svfiprintf_r+0x150>
 8008a64:	9b04      	ldr	r3, [sp, #16]
 8008a66:	eba0 000a 	sub.w	r0, r0, sl
 8008a6a:	2240      	movs	r2, #64	@ 0x40
 8008a6c:	4082      	lsls	r2, r0
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	3401      	adds	r4, #1
 8008a72:	9304      	str	r3, [sp, #16]
 8008a74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a78:	4824      	ldr	r0, [pc, #144]	@ (8008b0c <_svfiprintf_r+0x1e8>)
 8008a7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a7e:	2206      	movs	r2, #6
 8008a80:	f7f7 fba6 	bl	80001d0 <memchr>
 8008a84:	2800      	cmp	r0, #0
 8008a86:	d036      	beq.n	8008af6 <_svfiprintf_r+0x1d2>
 8008a88:	4b21      	ldr	r3, [pc, #132]	@ (8008b10 <_svfiprintf_r+0x1ec>)
 8008a8a:	bb1b      	cbnz	r3, 8008ad4 <_svfiprintf_r+0x1b0>
 8008a8c:	9b03      	ldr	r3, [sp, #12]
 8008a8e:	3307      	adds	r3, #7
 8008a90:	f023 0307 	bic.w	r3, r3, #7
 8008a94:	3308      	adds	r3, #8
 8008a96:	9303      	str	r3, [sp, #12]
 8008a98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a9a:	4433      	add	r3, r6
 8008a9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a9e:	e76a      	b.n	8008976 <_svfiprintf_r+0x52>
 8008aa0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008aa4:	460c      	mov	r4, r1
 8008aa6:	2001      	movs	r0, #1
 8008aa8:	e7a8      	b.n	80089fc <_svfiprintf_r+0xd8>
 8008aaa:	2300      	movs	r3, #0
 8008aac:	3401      	adds	r4, #1
 8008aae:	9305      	str	r3, [sp, #20]
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	f04f 0c0a 	mov.w	ip, #10
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008abc:	3a30      	subs	r2, #48	@ 0x30
 8008abe:	2a09      	cmp	r2, #9
 8008ac0:	d903      	bls.n	8008aca <_svfiprintf_r+0x1a6>
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d0c6      	beq.n	8008a54 <_svfiprintf_r+0x130>
 8008ac6:	9105      	str	r1, [sp, #20]
 8008ac8:	e7c4      	b.n	8008a54 <_svfiprintf_r+0x130>
 8008aca:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ace:	4604      	mov	r4, r0
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	e7f0      	b.n	8008ab6 <_svfiprintf_r+0x192>
 8008ad4:	ab03      	add	r3, sp, #12
 8008ad6:	9300      	str	r3, [sp, #0]
 8008ad8:	462a      	mov	r2, r5
 8008ada:	4b0e      	ldr	r3, [pc, #56]	@ (8008b14 <_svfiprintf_r+0x1f0>)
 8008adc:	a904      	add	r1, sp, #16
 8008ade:	4638      	mov	r0, r7
 8008ae0:	f7fc fcc8 	bl	8005474 <_printf_float>
 8008ae4:	1c42      	adds	r2, r0, #1
 8008ae6:	4606      	mov	r6, r0
 8008ae8:	d1d6      	bne.n	8008a98 <_svfiprintf_r+0x174>
 8008aea:	89ab      	ldrh	r3, [r5, #12]
 8008aec:	065b      	lsls	r3, r3, #25
 8008aee:	f53f af2d 	bmi.w	800894c <_svfiprintf_r+0x28>
 8008af2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008af4:	e72c      	b.n	8008950 <_svfiprintf_r+0x2c>
 8008af6:	ab03      	add	r3, sp, #12
 8008af8:	9300      	str	r3, [sp, #0]
 8008afa:	462a      	mov	r2, r5
 8008afc:	4b05      	ldr	r3, [pc, #20]	@ (8008b14 <_svfiprintf_r+0x1f0>)
 8008afe:	a904      	add	r1, sp, #16
 8008b00:	4638      	mov	r0, r7
 8008b02:	f7fc ff4f 	bl	80059a4 <_printf_i>
 8008b06:	e7ed      	b.n	8008ae4 <_svfiprintf_r+0x1c0>
 8008b08:	0800a079 	.word	0x0800a079
 8008b0c:	0800a083 	.word	0x0800a083
 8008b10:	08005475 	.word	0x08005475
 8008b14:	0800886d 	.word	0x0800886d
 8008b18:	0800a07f 	.word	0x0800a07f

08008b1c <__sflush_r>:
 8008b1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b24:	0716      	lsls	r6, r2, #28
 8008b26:	4605      	mov	r5, r0
 8008b28:	460c      	mov	r4, r1
 8008b2a:	d454      	bmi.n	8008bd6 <__sflush_r+0xba>
 8008b2c:	684b      	ldr	r3, [r1, #4]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	dc02      	bgt.n	8008b38 <__sflush_r+0x1c>
 8008b32:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	dd48      	ble.n	8008bca <__sflush_r+0xae>
 8008b38:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008b3a:	2e00      	cmp	r6, #0
 8008b3c:	d045      	beq.n	8008bca <__sflush_r+0xae>
 8008b3e:	2300      	movs	r3, #0
 8008b40:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008b44:	682f      	ldr	r7, [r5, #0]
 8008b46:	6a21      	ldr	r1, [r4, #32]
 8008b48:	602b      	str	r3, [r5, #0]
 8008b4a:	d030      	beq.n	8008bae <__sflush_r+0x92>
 8008b4c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008b4e:	89a3      	ldrh	r3, [r4, #12]
 8008b50:	0759      	lsls	r1, r3, #29
 8008b52:	d505      	bpl.n	8008b60 <__sflush_r+0x44>
 8008b54:	6863      	ldr	r3, [r4, #4]
 8008b56:	1ad2      	subs	r2, r2, r3
 8008b58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008b5a:	b10b      	cbz	r3, 8008b60 <__sflush_r+0x44>
 8008b5c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008b5e:	1ad2      	subs	r2, r2, r3
 8008b60:	2300      	movs	r3, #0
 8008b62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008b64:	6a21      	ldr	r1, [r4, #32]
 8008b66:	4628      	mov	r0, r5
 8008b68:	47b0      	blx	r6
 8008b6a:	1c43      	adds	r3, r0, #1
 8008b6c:	89a3      	ldrh	r3, [r4, #12]
 8008b6e:	d106      	bne.n	8008b7e <__sflush_r+0x62>
 8008b70:	6829      	ldr	r1, [r5, #0]
 8008b72:	291d      	cmp	r1, #29
 8008b74:	d82b      	bhi.n	8008bce <__sflush_r+0xb2>
 8008b76:	4a2a      	ldr	r2, [pc, #168]	@ (8008c20 <__sflush_r+0x104>)
 8008b78:	410a      	asrs	r2, r1
 8008b7a:	07d6      	lsls	r6, r2, #31
 8008b7c:	d427      	bmi.n	8008bce <__sflush_r+0xb2>
 8008b7e:	2200      	movs	r2, #0
 8008b80:	6062      	str	r2, [r4, #4]
 8008b82:	04d9      	lsls	r1, r3, #19
 8008b84:	6922      	ldr	r2, [r4, #16]
 8008b86:	6022      	str	r2, [r4, #0]
 8008b88:	d504      	bpl.n	8008b94 <__sflush_r+0x78>
 8008b8a:	1c42      	adds	r2, r0, #1
 8008b8c:	d101      	bne.n	8008b92 <__sflush_r+0x76>
 8008b8e:	682b      	ldr	r3, [r5, #0]
 8008b90:	b903      	cbnz	r3, 8008b94 <__sflush_r+0x78>
 8008b92:	6560      	str	r0, [r4, #84]	@ 0x54
 8008b94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b96:	602f      	str	r7, [r5, #0]
 8008b98:	b1b9      	cbz	r1, 8008bca <__sflush_r+0xae>
 8008b9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b9e:	4299      	cmp	r1, r3
 8008ba0:	d002      	beq.n	8008ba8 <__sflush_r+0x8c>
 8008ba2:	4628      	mov	r0, r5
 8008ba4:	f7fe fa2c 	bl	8007000 <_free_r>
 8008ba8:	2300      	movs	r3, #0
 8008baa:	6363      	str	r3, [r4, #52]	@ 0x34
 8008bac:	e00d      	b.n	8008bca <__sflush_r+0xae>
 8008bae:	2301      	movs	r3, #1
 8008bb0:	4628      	mov	r0, r5
 8008bb2:	47b0      	blx	r6
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	1c50      	adds	r0, r2, #1
 8008bb8:	d1c9      	bne.n	8008b4e <__sflush_r+0x32>
 8008bba:	682b      	ldr	r3, [r5, #0]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d0c6      	beq.n	8008b4e <__sflush_r+0x32>
 8008bc0:	2b1d      	cmp	r3, #29
 8008bc2:	d001      	beq.n	8008bc8 <__sflush_r+0xac>
 8008bc4:	2b16      	cmp	r3, #22
 8008bc6:	d11e      	bne.n	8008c06 <__sflush_r+0xea>
 8008bc8:	602f      	str	r7, [r5, #0]
 8008bca:	2000      	movs	r0, #0
 8008bcc:	e022      	b.n	8008c14 <__sflush_r+0xf8>
 8008bce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008bd2:	b21b      	sxth	r3, r3
 8008bd4:	e01b      	b.n	8008c0e <__sflush_r+0xf2>
 8008bd6:	690f      	ldr	r7, [r1, #16]
 8008bd8:	2f00      	cmp	r7, #0
 8008bda:	d0f6      	beq.n	8008bca <__sflush_r+0xae>
 8008bdc:	0793      	lsls	r3, r2, #30
 8008bde:	680e      	ldr	r6, [r1, #0]
 8008be0:	bf08      	it	eq
 8008be2:	694b      	ldreq	r3, [r1, #20]
 8008be4:	600f      	str	r7, [r1, #0]
 8008be6:	bf18      	it	ne
 8008be8:	2300      	movne	r3, #0
 8008bea:	eba6 0807 	sub.w	r8, r6, r7
 8008bee:	608b      	str	r3, [r1, #8]
 8008bf0:	f1b8 0f00 	cmp.w	r8, #0
 8008bf4:	dde9      	ble.n	8008bca <__sflush_r+0xae>
 8008bf6:	6a21      	ldr	r1, [r4, #32]
 8008bf8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008bfa:	4643      	mov	r3, r8
 8008bfc:	463a      	mov	r2, r7
 8008bfe:	4628      	mov	r0, r5
 8008c00:	47b0      	blx	r6
 8008c02:	2800      	cmp	r0, #0
 8008c04:	dc08      	bgt.n	8008c18 <__sflush_r+0xfc>
 8008c06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c0e:	81a3      	strh	r3, [r4, #12]
 8008c10:	f04f 30ff 	mov.w	r0, #4294967295
 8008c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c18:	4407      	add	r7, r0
 8008c1a:	eba8 0800 	sub.w	r8, r8, r0
 8008c1e:	e7e7      	b.n	8008bf0 <__sflush_r+0xd4>
 8008c20:	dfbffffe 	.word	0xdfbffffe

08008c24 <_fflush_r>:
 8008c24:	b538      	push	{r3, r4, r5, lr}
 8008c26:	690b      	ldr	r3, [r1, #16]
 8008c28:	4605      	mov	r5, r0
 8008c2a:	460c      	mov	r4, r1
 8008c2c:	b913      	cbnz	r3, 8008c34 <_fflush_r+0x10>
 8008c2e:	2500      	movs	r5, #0
 8008c30:	4628      	mov	r0, r5
 8008c32:	bd38      	pop	{r3, r4, r5, pc}
 8008c34:	b118      	cbz	r0, 8008c3e <_fflush_r+0x1a>
 8008c36:	6a03      	ldr	r3, [r0, #32]
 8008c38:	b90b      	cbnz	r3, 8008c3e <_fflush_r+0x1a>
 8008c3a:	f7fd fa73 	bl	8006124 <__sinit>
 8008c3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d0f3      	beq.n	8008c2e <_fflush_r+0xa>
 8008c46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008c48:	07d0      	lsls	r0, r2, #31
 8008c4a:	d404      	bmi.n	8008c56 <_fflush_r+0x32>
 8008c4c:	0599      	lsls	r1, r3, #22
 8008c4e:	d402      	bmi.n	8008c56 <_fflush_r+0x32>
 8008c50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c52:	f7fd fb7e 	bl	8006352 <__retarget_lock_acquire_recursive>
 8008c56:	4628      	mov	r0, r5
 8008c58:	4621      	mov	r1, r4
 8008c5a:	f7ff ff5f 	bl	8008b1c <__sflush_r>
 8008c5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c60:	07da      	lsls	r2, r3, #31
 8008c62:	4605      	mov	r5, r0
 8008c64:	d4e4      	bmi.n	8008c30 <_fflush_r+0xc>
 8008c66:	89a3      	ldrh	r3, [r4, #12]
 8008c68:	059b      	lsls	r3, r3, #22
 8008c6a:	d4e1      	bmi.n	8008c30 <_fflush_r+0xc>
 8008c6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c6e:	f7fd fb71 	bl	8006354 <__retarget_lock_release_recursive>
 8008c72:	e7dd      	b.n	8008c30 <_fflush_r+0xc>

08008c74 <memmove>:
 8008c74:	4288      	cmp	r0, r1
 8008c76:	b510      	push	{r4, lr}
 8008c78:	eb01 0402 	add.w	r4, r1, r2
 8008c7c:	d902      	bls.n	8008c84 <memmove+0x10>
 8008c7e:	4284      	cmp	r4, r0
 8008c80:	4623      	mov	r3, r4
 8008c82:	d807      	bhi.n	8008c94 <memmove+0x20>
 8008c84:	1e43      	subs	r3, r0, #1
 8008c86:	42a1      	cmp	r1, r4
 8008c88:	d008      	beq.n	8008c9c <memmove+0x28>
 8008c8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c92:	e7f8      	b.n	8008c86 <memmove+0x12>
 8008c94:	4402      	add	r2, r0
 8008c96:	4601      	mov	r1, r0
 8008c98:	428a      	cmp	r2, r1
 8008c9a:	d100      	bne.n	8008c9e <memmove+0x2a>
 8008c9c:	bd10      	pop	{r4, pc}
 8008c9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ca2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ca6:	e7f7      	b.n	8008c98 <memmove+0x24>

08008ca8 <strncmp>:
 8008ca8:	b510      	push	{r4, lr}
 8008caa:	b16a      	cbz	r2, 8008cc8 <strncmp+0x20>
 8008cac:	3901      	subs	r1, #1
 8008cae:	1884      	adds	r4, r0, r2
 8008cb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cb4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d103      	bne.n	8008cc4 <strncmp+0x1c>
 8008cbc:	42a0      	cmp	r0, r4
 8008cbe:	d001      	beq.n	8008cc4 <strncmp+0x1c>
 8008cc0:	2a00      	cmp	r2, #0
 8008cc2:	d1f5      	bne.n	8008cb0 <strncmp+0x8>
 8008cc4:	1ad0      	subs	r0, r2, r3
 8008cc6:	bd10      	pop	{r4, pc}
 8008cc8:	4610      	mov	r0, r2
 8008cca:	e7fc      	b.n	8008cc6 <strncmp+0x1e>

08008ccc <_sbrk_r>:
 8008ccc:	b538      	push	{r3, r4, r5, lr}
 8008cce:	4d06      	ldr	r5, [pc, #24]	@ (8008ce8 <_sbrk_r+0x1c>)
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	4604      	mov	r4, r0
 8008cd4:	4608      	mov	r0, r1
 8008cd6:	602b      	str	r3, [r5, #0]
 8008cd8:	f7f8 feec 	bl	8001ab4 <_sbrk>
 8008cdc:	1c43      	adds	r3, r0, #1
 8008cde:	d102      	bne.n	8008ce6 <_sbrk_r+0x1a>
 8008ce0:	682b      	ldr	r3, [r5, #0]
 8008ce2:	b103      	cbz	r3, 8008ce6 <_sbrk_r+0x1a>
 8008ce4:	6023      	str	r3, [r4, #0]
 8008ce6:	bd38      	pop	{r3, r4, r5, pc}
 8008ce8:	2000043c 	.word	0x2000043c

08008cec <memcpy>:
 8008cec:	440a      	add	r2, r1
 8008cee:	4291      	cmp	r1, r2
 8008cf0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cf4:	d100      	bne.n	8008cf8 <memcpy+0xc>
 8008cf6:	4770      	bx	lr
 8008cf8:	b510      	push	{r4, lr}
 8008cfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d02:	4291      	cmp	r1, r2
 8008d04:	d1f9      	bne.n	8008cfa <memcpy+0xe>
 8008d06:	bd10      	pop	{r4, pc}

08008d08 <nan>:
 8008d08:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008d10 <nan+0x8>
 8008d0c:	4770      	bx	lr
 8008d0e:	bf00      	nop
 8008d10:	00000000 	.word	0x00000000
 8008d14:	7ff80000 	.word	0x7ff80000

08008d18 <__assert_func>:
 8008d18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d1a:	4614      	mov	r4, r2
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	4b09      	ldr	r3, [pc, #36]	@ (8008d44 <__assert_func+0x2c>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4605      	mov	r5, r0
 8008d24:	68d8      	ldr	r0, [r3, #12]
 8008d26:	b954      	cbnz	r4, 8008d3e <__assert_func+0x26>
 8008d28:	4b07      	ldr	r3, [pc, #28]	@ (8008d48 <__assert_func+0x30>)
 8008d2a:	461c      	mov	r4, r3
 8008d2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d30:	9100      	str	r1, [sp, #0]
 8008d32:	462b      	mov	r3, r5
 8008d34:	4905      	ldr	r1, [pc, #20]	@ (8008d4c <__assert_func+0x34>)
 8008d36:	f000 fba7 	bl	8009488 <fiprintf>
 8008d3a:	f000 fbb7 	bl	80094ac <abort>
 8008d3e:	4b04      	ldr	r3, [pc, #16]	@ (8008d50 <__assert_func+0x38>)
 8008d40:	e7f4      	b.n	8008d2c <__assert_func+0x14>
 8008d42:	bf00      	nop
 8008d44:	20000018 	.word	0x20000018
 8008d48:	0800a0cd 	.word	0x0800a0cd
 8008d4c:	0800a09f 	.word	0x0800a09f
 8008d50:	0800a092 	.word	0x0800a092

08008d54 <_calloc_r>:
 8008d54:	b570      	push	{r4, r5, r6, lr}
 8008d56:	fba1 5402 	umull	r5, r4, r1, r2
 8008d5a:	b93c      	cbnz	r4, 8008d6c <_calloc_r+0x18>
 8008d5c:	4629      	mov	r1, r5
 8008d5e:	f7fe f9c3 	bl	80070e8 <_malloc_r>
 8008d62:	4606      	mov	r6, r0
 8008d64:	b928      	cbnz	r0, 8008d72 <_calloc_r+0x1e>
 8008d66:	2600      	movs	r6, #0
 8008d68:	4630      	mov	r0, r6
 8008d6a:	bd70      	pop	{r4, r5, r6, pc}
 8008d6c:	220c      	movs	r2, #12
 8008d6e:	6002      	str	r2, [r0, #0]
 8008d70:	e7f9      	b.n	8008d66 <_calloc_r+0x12>
 8008d72:	462a      	mov	r2, r5
 8008d74:	4621      	mov	r1, r4
 8008d76:	f7fd fa6e 	bl	8006256 <memset>
 8008d7a:	e7f5      	b.n	8008d68 <_calloc_r+0x14>

08008d7c <rshift>:
 8008d7c:	6903      	ldr	r3, [r0, #16]
 8008d7e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008d82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d86:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008d8a:	f100 0414 	add.w	r4, r0, #20
 8008d8e:	dd45      	ble.n	8008e1c <rshift+0xa0>
 8008d90:	f011 011f 	ands.w	r1, r1, #31
 8008d94:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008d98:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008d9c:	d10c      	bne.n	8008db8 <rshift+0x3c>
 8008d9e:	f100 0710 	add.w	r7, r0, #16
 8008da2:	4629      	mov	r1, r5
 8008da4:	42b1      	cmp	r1, r6
 8008da6:	d334      	bcc.n	8008e12 <rshift+0x96>
 8008da8:	1a9b      	subs	r3, r3, r2
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	1eea      	subs	r2, r5, #3
 8008dae:	4296      	cmp	r6, r2
 8008db0:	bf38      	it	cc
 8008db2:	2300      	movcc	r3, #0
 8008db4:	4423      	add	r3, r4
 8008db6:	e015      	b.n	8008de4 <rshift+0x68>
 8008db8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008dbc:	f1c1 0820 	rsb	r8, r1, #32
 8008dc0:	40cf      	lsrs	r7, r1
 8008dc2:	f105 0e04 	add.w	lr, r5, #4
 8008dc6:	46a1      	mov	r9, r4
 8008dc8:	4576      	cmp	r6, lr
 8008dca:	46f4      	mov	ip, lr
 8008dcc:	d815      	bhi.n	8008dfa <rshift+0x7e>
 8008dce:	1a9a      	subs	r2, r3, r2
 8008dd0:	0092      	lsls	r2, r2, #2
 8008dd2:	3a04      	subs	r2, #4
 8008dd4:	3501      	adds	r5, #1
 8008dd6:	42ae      	cmp	r6, r5
 8008dd8:	bf38      	it	cc
 8008dda:	2200      	movcc	r2, #0
 8008ddc:	18a3      	adds	r3, r4, r2
 8008dde:	50a7      	str	r7, [r4, r2]
 8008de0:	b107      	cbz	r7, 8008de4 <rshift+0x68>
 8008de2:	3304      	adds	r3, #4
 8008de4:	1b1a      	subs	r2, r3, r4
 8008de6:	42a3      	cmp	r3, r4
 8008de8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008dec:	bf08      	it	eq
 8008dee:	2300      	moveq	r3, #0
 8008df0:	6102      	str	r2, [r0, #16]
 8008df2:	bf08      	it	eq
 8008df4:	6143      	streq	r3, [r0, #20]
 8008df6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008dfa:	f8dc c000 	ldr.w	ip, [ip]
 8008dfe:	fa0c fc08 	lsl.w	ip, ip, r8
 8008e02:	ea4c 0707 	orr.w	r7, ip, r7
 8008e06:	f849 7b04 	str.w	r7, [r9], #4
 8008e0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008e0e:	40cf      	lsrs	r7, r1
 8008e10:	e7da      	b.n	8008dc8 <rshift+0x4c>
 8008e12:	f851 cb04 	ldr.w	ip, [r1], #4
 8008e16:	f847 cf04 	str.w	ip, [r7, #4]!
 8008e1a:	e7c3      	b.n	8008da4 <rshift+0x28>
 8008e1c:	4623      	mov	r3, r4
 8008e1e:	e7e1      	b.n	8008de4 <rshift+0x68>

08008e20 <__hexdig_fun>:
 8008e20:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008e24:	2b09      	cmp	r3, #9
 8008e26:	d802      	bhi.n	8008e2e <__hexdig_fun+0xe>
 8008e28:	3820      	subs	r0, #32
 8008e2a:	b2c0      	uxtb	r0, r0
 8008e2c:	4770      	bx	lr
 8008e2e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008e32:	2b05      	cmp	r3, #5
 8008e34:	d801      	bhi.n	8008e3a <__hexdig_fun+0x1a>
 8008e36:	3847      	subs	r0, #71	@ 0x47
 8008e38:	e7f7      	b.n	8008e2a <__hexdig_fun+0xa>
 8008e3a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008e3e:	2b05      	cmp	r3, #5
 8008e40:	d801      	bhi.n	8008e46 <__hexdig_fun+0x26>
 8008e42:	3827      	subs	r0, #39	@ 0x27
 8008e44:	e7f1      	b.n	8008e2a <__hexdig_fun+0xa>
 8008e46:	2000      	movs	r0, #0
 8008e48:	4770      	bx	lr
	...

08008e4c <__gethex>:
 8008e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e50:	b085      	sub	sp, #20
 8008e52:	468a      	mov	sl, r1
 8008e54:	9302      	str	r3, [sp, #8]
 8008e56:	680b      	ldr	r3, [r1, #0]
 8008e58:	9001      	str	r0, [sp, #4]
 8008e5a:	4690      	mov	r8, r2
 8008e5c:	1c9c      	adds	r4, r3, #2
 8008e5e:	46a1      	mov	r9, r4
 8008e60:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008e64:	2830      	cmp	r0, #48	@ 0x30
 8008e66:	d0fa      	beq.n	8008e5e <__gethex+0x12>
 8008e68:	eba9 0303 	sub.w	r3, r9, r3
 8008e6c:	f1a3 0b02 	sub.w	fp, r3, #2
 8008e70:	f7ff ffd6 	bl	8008e20 <__hexdig_fun>
 8008e74:	4605      	mov	r5, r0
 8008e76:	2800      	cmp	r0, #0
 8008e78:	d168      	bne.n	8008f4c <__gethex+0x100>
 8008e7a:	49a0      	ldr	r1, [pc, #640]	@ (80090fc <__gethex+0x2b0>)
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	4648      	mov	r0, r9
 8008e80:	f7ff ff12 	bl	8008ca8 <strncmp>
 8008e84:	4607      	mov	r7, r0
 8008e86:	2800      	cmp	r0, #0
 8008e88:	d167      	bne.n	8008f5a <__gethex+0x10e>
 8008e8a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008e8e:	4626      	mov	r6, r4
 8008e90:	f7ff ffc6 	bl	8008e20 <__hexdig_fun>
 8008e94:	2800      	cmp	r0, #0
 8008e96:	d062      	beq.n	8008f5e <__gethex+0x112>
 8008e98:	4623      	mov	r3, r4
 8008e9a:	7818      	ldrb	r0, [r3, #0]
 8008e9c:	2830      	cmp	r0, #48	@ 0x30
 8008e9e:	4699      	mov	r9, r3
 8008ea0:	f103 0301 	add.w	r3, r3, #1
 8008ea4:	d0f9      	beq.n	8008e9a <__gethex+0x4e>
 8008ea6:	f7ff ffbb 	bl	8008e20 <__hexdig_fun>
 8008eaa:	fab0 f580 	clz	r5, r0
 8008eae:	096d      	lsrs	r5, r5, #5
 8008eb0:	f04f 0b01 	mov.w	fp, #1
 8008eb4:	464a      	mov	r2, r9
 8008eb6:	4616      	mov	r6, r2
 8008eb8:	3201      	adds	r2, #1
 8008eba:	7830      	ldrb	r0, [r6, #0]
 8008ebc:	f7ff ffb0 	bl	8008e20 <__hexdig_fun>
 8008ec0:	2800      	cmp	r0, #0
 8008ec2:	d1f8      	bne.n	8008eb6 <__gethex+0x6a>
 8008ec4:	498d      	ldr	r1, [pc, #564]	@ (80090fc <__gethex+0x2b0>)
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	4630      	mov	r0, r6
 8008eca:	f7ff feed 	bl	8008ca8 <strncmp>
 8008ece:	2800      	cmp	r0, #0
 8008ed0:	d13f      	bne.n	8008f52 <__gethex+0x106>
 8008ed2:	b944      	cbnz	r4, 8008ee6 <__gethex+0x9a>
 8008ed4:	1c74      	adds	r4, r6, #1
 8008ed6:	4622      	mov	r2, r4
 8008ed8:	4616      	mov	r6, r2
 8008eda:	3201      	adds	r2, #1
 8008edc:	7830      	ldrb	r0, [r6, #0]
 8008ede:	f7ff ff9f 	bl	8008e20 <__hexdig_fun>
 8008ee2:	2800      	cmp	r0, #0
 8008ee4:	d1f8      	bne.n	8008ed8 <__gethex+0x8c>
 8008ee6:	1ba4      	subs	r4, r4, r6
 8008ee8:	00a7      	lsls	r7, r4, #2
 8008eea:	7833      	ldrb	r3, [r6, #0]
 8008eec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008ef0:	2b50      	cmp	r3, #80	@ 0x50
 8008ef2:	d13e      	bne.n	8008f72 <__gethex+0x126>
 8008ef4:	7873      	ldrb	r3, [r6, #1]
 8008ef6:	2b2b      	cmp	r3, #43	@ 0x2b
 8008ef8:	d033      	beq.n	8008f62 <__gethex+0x116>
 8008efa:	2b2d      	cmp	r3, #45	@ 0x2d
 8008efc:	d034      	beq.n	8008f68 <__gethex+0x11c>
 8008efe:	1c71      	adds	r1, r6, #1
 8008f00:	2400      	movs	r4, #0
 8008f02:	7808      	ldrb	r0, [r1, #0]
 8008f04:	f7ff ff8c 	bl	8008e20 <__hexdig_fun>
 8008f08:	1e43      	subs	r3, r0, #1
 8008f0a:	b2db      	uxtb	r3, r3
 8008f0c:	2b18      	cmp	r3, #24
 8008f0e:	d830      	bhi.n	8008f72 <__gethex+0x126>
 8008f10:	f1a0 0210 	sub.w	r2, r0, #16
 8008f14:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008f18:	f7ff ff82 	bl	8008e20 <__hexdig_fun>
 8008f1c:	f100 3cff 	add.w	ip, r0, #4294967295
 8008f20:	fa5f fc8c 	uxtb.w	ip, ip
 8008f24:	f1bc 0f18 	cmp.w	ip, #24
 8008f28:	f04f 030a 	mov.w	r3, #10
 8008f2c:	d91e      	bls.n	8008f6c <__gethex+0x120>
 8008f2e:	b104      	cbz	r4, 8008f32 <__gethex+0xe6>
 8008f30:	4252      	negs	r2, r2
 8008f32:	4417      	add	r7, r2
 8008f34:	f8ca 1000 	str.w	r1, [sl]
 8008f38:	b1ed      	cbz	r5, 8008f76 <__gethex+0x12a>
 8008f3a:	f1bb 0f00 	cmp.w	fp, #0
 8008f3e:	bf0c      	ite	eq
 8008f40:	2506      	moveq	r5, #6
 8008f42:	2500      	movne	r5, #0
 8008f44:	4628      	mov	r0, r5
 8008f46:	b005      	add	sp, #20
 8008f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f4c:	2500      	movs	r5, #0
 8008f4e:	462c      	mov	r4, r5
 8008f50:	e7b0      	b.n	8008eb4 <__gethex+0x68>
 8008f52:	2c00      	cmp	r4, #0
 8008f54:	d1c7      	bne.n	8008ee6 <__gethex+0x9a>
 8008f56:	4627      	mov	r7, r4
 8008f58:	e7c7      	b.n	8008eea <__gethex+0x9e>
 8008f5a:	464e      	mov	r6, r9
 8008f5c:	462f      	mov	r7, r5
 8008f5e:	2501      	movs	r5, #1
 8008f60:	e7c3      	b.n	8008eea <__gethex+0x9e>
 8008f62:	2400      	movs	r4, #0
 8008f64:	1cb1      	adds	r1, r6, #2
 8008f66:	e7cc      	b.n	8008f02 <__gethex+0xb6>
 8008f68:	2401      	movs	r4, #1
 8008f6a:	e7fb      	b.n	8008f64 <__gethex+0x118>
 8008f6c:	fb03 0002 	mla	r0, r3, r2, r0
 8008f70:	e7ce      	b.n	8008f10 <__gethex+0xc4>
 8008f72:	4631      	mov	r1, r6
 8008f74:	e7de      	b.n	8008f34 <__gethex+0xe8>
 8008f76:	eba6 0309 	sub.w	r3, r6, r9
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	4629      	mov	r1, r5
 8008f7e:	2b07      	cmp	r3, #7
 8008f80:	dc0a      	bgt.n	8008f98 <__gethex+0x14c>
 8008f82:	9801      	ldr	r0, [sp, #4]
 8008f84:	f7fe f93c 	bl	8007200 <_Balloc>
 8008f88:	4604      	mov	r4, r0
 8008f8a:	b940      	cbnz	r0, 8008f9e <__gethex+0x152>
 8008f8c:	4b5c      	ldr	r3, [pc, #368]	@ (8009100 <__gethex+0x2b4>)
 8008f8e:	4602      	mov	r2, r0
 8008f90:	21e4      	movs	r1, #228	@ 0xe4
 8008f92:	485c      	ldr	r0, [pc, #368]	@ (8009104 <__gethex+0x2b8>)
 8008f94:	f7ff fec0 	bl	8008d18 <__assert_func>
 8008f98:	3101      	adds	r1, #1
 8008f9a:	105b      	asrs	r3, r3, #1
 8008f9c:	e7ef      	b.n	8008f7e <__gethex+0x132>
 8008f9e:	f100 0a14 	add.w	sl, r0, #20
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	4655      	mov	r5, sl
 8008fa6:	469b      	mov	fp, r3
 8008fa8:	45b1      	cmp	r9, r6
 8008faa:	d337      	bcc.n	800901c <__gethex+0x1d0>
 8008fac:	f845 bb04 	str.w	fp, [r5], #4
 8008fb0:	eba5 050a 	sub.w	r5, r5, sl
 8008fb4:	10ad      	asrs	r5, r5, #2
 8008fb6:	6125      	str	r5, [r4, #16]
 8008fb8:	4658      	mov	r0, fp
 8008fba:	f7fe fa13 	bl	80073e4 <__hi0bits>
 8008fbe:	016d      	lsls	r5, r5, #5
 8008fc0:	f8d8 6000 	ldr.w	r6, [r8]
 8008fc4:	1a2d      	subs	r5, r5, r0
 8008fc6:	42b5      	cmp	r5, r6
 8008fc8:	dd54      	ble.n	8009074 <__gethex+0x228>
 8008fca:	1bad      	subs	r5, r5, r6
 8008fcc:	4629      	mov	r1, r5
 8008fce:	4620      	mov	r0, r4
 8008fd0:	f7fe fda7 	bl	8007b22 <__any_on>
 8008fd4:	4681      	mov	r9, r0
 8008fd6:	b178      	cbz	r0, 8008ff8 <__gethex+0x1ac>
 8008fd8:	1e6b      	subs	r3, r5, #1
 8008fda:	1159      	asrs	r1, r3, #5
 8008fdc:	f003 021f 	and.w	r2, r3, #31
 8008fe0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008fe4:	f04f 0901 	mov.w	r9, #1
 8008fe8:	fa09 f202 	lsl.w	r2, r9, r2
 8008fec:	420a      	tst	r2, r1
 8008fee:	d003      	beq.n	8008ff8 <__gethex+0x1ac>
 8008ff0:	454b      	cmp	r3, r9
 8008ff2:	dc36      	bgt.n	8009062 <__gethex+0x216>
 8008ff4:	f04f 0902 	mov.w	r9, #2
 8008ff8:	4629      	mov	r1, r5
 8008ffa:	4620      	mov	r0, r4
 8008ffc:	f7ff febe 	bl	8008d7c <rshift>
 8009000:	442f      	add	r7, r5
 8009002:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009006:	42bb      	cmp	r3, r7
 8009008:	da42      	bge.n	8009090 <__gethex+0x244>
 800900a:	9801      	ldr	r0, [sp, #4]
 800900c:	4621      	mov	r1, r4
 800900e:	f7fe f937 	bl	8007280 <_Bfree>
 8009012:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009014:	2300      	movs	r3, #0
 8009016:	6013      	str	r3, [r2, #0]
 8009018:	25a3      	movs	r5, #163	@ 0xa3
 800901a:	e793      	b.n	8008f44 <__gethex+0xf8>
 800901c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009020:	2a2e      	cmp	r2, #46	@ 0x2e
 8009022:	d012      	beq.n	800904a <__gethex+0x1fe>
 8009024:	2b20      	cmp	r3, #32
 8009026:	d104      	bne.n	8009032 <__gethex+0x1e6>
 8009028:	f845 bb04 	str.w	fp, [r5], #4
 800902c:	f04f 0b00 	mov.w	fp, #0
 8009030:	465b      	mov	r3, fp
 8009032:	7830      	ldrb	r0, [r6, #0]
 8009034:	9303      	str	r3, [sp, #12]
 8009036:	f7ff fef3 	bl	8008e20 <__hexdig_fun>
 800903a:	9b03      	ldr	r3, [sp, #12]
 800903c:	f000 000f 	and.w	r0, r0, #15
 8009040:	4098      	lsls	r0, r3
 8009042:	ea4b 0b00 	orr.w	fp, fp, r0
 8009046:	3304      	adds	r3, #4
 8009048:	e7ae      	b.n	8008fa8 <__gethex+0x15c>
 800904a:	45b1      	cmp	r9, r6
 800904c:	d8ea      	bhi.n	8009024 <__gethex+0x1d8>
 800904e:	492b      	ldr	r1, [pc, #172]	@ (80090fc <__gethex+0x2b0>)
 8009050:	9303      	str	r3, [sp, #12]
 8009052:	2201      	movs	r2, #1
 8009054:	4630      	mov	r0, r6
 8009056:	f7ff fe27 	bl	8008ca8 <strncmp>
 800905a:	9b03      	ldr	r3, [sp, #12]
 800905c:	2800      	cmp	r0, #0
 800905e:	d1e1      	bne.n	8009024 <__gethex+0x1d8>
 8009060:	e7a2      	b.n	8008fa8 <__gethex+0x15c>
 8009062:	1ea9      	subs	r1, r5, #2
 8009064:	4620      	mov	r0, r4
 8009066:	f7fe fd5c 	bl	8007b22 <__any_on>
 800906a:	2800      	cmp	r0, #0
 800906c:	d0c2      	beq.n	8008ff4 <__gethex+0x1a8>
 800906e:	f04f 0903 	mov.w	r9, #3
 8009072:	e7c1      	b.n	8008ff8 <__gethex+0x1ac>
 8009074:	da09      	bge.n	800908a <__gethex+0x23e>
 8009076:	1b75      	subs	r5, r6, r5
 8009078:	4621      	mov	r1, r4
 800907a:	9801      	ldr	r0, [sp, #4]
 800907c:	462a      	mov	r2, r5
 800907e:	f7fe fb17 	bl	80076b0 <__lshift>
 8009082:	1b7f      	subs	r7, r7, r5
 8009084:	4604      	mov	r4, r0
 8009086:	f100 0a14 	add.w	sl, r0, #20
 800908a:	f04f 0900 	mov.w	r9, #0
 800908e:	e7b8      	b.n	8009002 <__gethex+0x1b6>
 8009090:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009094:	42bd      	cmp	r5, r7
 8009096:	dd6f      	ble.n	8009178 <__gethex+0x32c>
 8009098:	1bed      	subs	r5, r5, r7
 800909a:	42ae      	cmp	r6, r5
 800909c:	dc34      	bgt.n	8009108 <__gethex+0x2bc>
 800909e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80090a2:	2b02      	cmp	r3, #2
 80090a4:	d022      	beq.n	80090ec <__gethex+0x2a0>
 80090a6:	2b03      	cmp	r3, #3
 80090a8:	d024      	beq.n	80090f4 <__gethex+0x2a8>
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d115      	bne.n	80090da <__gethex+0x28e>
 80090ae:	42ae      	cmp	r6, r5
 80090b0:	d113      	bne.n	80090da <__gethex+0x28e>
 80090b2:	2e01      	cmp	r6, #1
 80090b4:	d10b      	bne.n	80090ce <__gethex+0x282>
 80090b6:	9a02      	ldr	r2, [sp, #8]
 80090b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80090bc:	6013      	str	r3, [r2, #0]
 80090be:	2301      	movs	r3, #1
 80090c0:	6123      	str	r3, [r4, #16]
 80090c2:	f8ca 3000 	str.w	r3, [sl]
 80090c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090c8:	2562      	movs	r5, #98	@ 0x62
 80090ca:	601c      	str	r4, [r3, #0]
 80090cc:	e73a      	b.n	8008f44 <__gethex+0xf8>
 80090ce:	1e71      	subs	r1, r6, #1
 80090d0:	4620      	mov	r0, r4
 80090d2:	f7fe fd26 	bl	8007b22 <__any_on>
 80090d6:	2800      	cmp	r0, #0
 80090d8:	d1ed      	bne.n	80090b6 <__gethex+0x26a>
 80090da:	9801      	ldr	r0, [sp, #4]
 80090dc:	4621      	mov	r1, r4
 80090de:	f7fe f8cf 	bl	8007280 <_Bfree>
 80090e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80090e4:	2300      	movs	r3, #0
 80090e6:	6013      	str	r3, [r2, #0]
 80090e8:	2550      	movs	r5, #80	@ 0x50
 80090ea:	e72b      	b.n	8008f44 <__gethex+0xf8>
 80090ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d1f3      	bne.n	80090da <__gethex+0x28e>
 80090f2:	e7e0      	b.n	80090b6 <__gethex+0x26a>
 80090f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d1dd      	bne.n	80090b6 <__gethex+0x26a>
 80090fa:	e7ee      	b.n	80090da <__gethex+0x28e>
 80090fc:	08009f20 	.word	0x08009f20
 8009100:	08009db9 	.word	0x08009db9
 8009104:	0800a0ce 	.word	0x0800a0ce
 8009108:	1e6f      	subs	r7, r5, #1
 800910a:	f1b9 0f00 	cmp.w	r9, #0
 800910e:	d130      	bne.n	8009172 <__gethex+0x326>
 8009110:	b127      	cbz	r7, 800911c <__gethex+0x2d0>
 8009112:	4639      	mov	r1, r7
 8009114:	4620      	mov	r0, r4
 8009116:	f7fe fd04 	bl	8007b22 <__any_on>
 800911a:	4681      	mov	r9, r0
 800911c:	117a      	asrs	r2, r7, #5
 800911e:	2301      	movs	r3, #1
 8009120:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009124:	f007 071f 	and.w	r7, r7, #31
 8009128:	40bb      	lsls	r3, r7
 800912a:	4213      	tst	r3, r2
 800912c:	4629      	mov	r1, r5
 800912e:	4620      	mov	r0, r4
 8009130:	bf18      	it	ne
 8009132:	f049 0902 	orrne.w	r9, r9, #2
 8009136:	f7ff fe21 	bl	8008d7c <rshift>
 800913a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800913e:	1b76      	subs	r6, r6, r5
 8009140:	2502      	movs	r5, #2
 8009142:	f1b9 0f00 	cmp.w	r9, #0
 8009146:	d047      	beq.n	80091d8 <__gethex+0x38c>
 8009148:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800914c:	2b02      	cmp	r3, #2
 800914e:	d015      	beq.n	800917c <__gethex+0x330>
 8009150:	2b03      	cmp	r3, #3
 8009152:	d017      	beq.n	8009184 <__gethex+0x338>
 8009154:	2b01      	cmp	r3, #1
 8009156:	d109      	bne.n	800916c <__gethex+0x320>
 8009158:	f019 0f02 	tst.w	r9, #2
 800915c:	d006      	beq.n	800916c <__gethex+0x320>
 800915e:	f8da 3000 	ldr.w	r3, [sl]
 8009162:	ea49 0903 	orr.w	r9, r9, r3
 8009166:	f019 0f01 	tst.w	r9, #1
 800916a:	d10e      	bne.n	800918a <__gethex+0x33e>
 800916c:	f045 0510 	orr.w	r5, r5, #16
 8009170:	e032      	b.n	80091d8 <__gethex+0x38c>
 8009172:	f04f 0901 	mov.w	r9, #1
 8009176:	e7d1      	b.n	800911c <__gethex+0x2d0>
 8009178:	2501      	movs	r5, #1
 800917a:	e7e2      	b.n	8009142 <__gethex+0x2f6>
 800917c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800917e:	f1c3 0301 	rsb	r3, r3, #1
 8009182:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009184:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009186:	2b00      	cmp	r3, #0
 8009188:	d0f0      	beq.n	800916c <__gethex+0x320>
 800918a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800918e:	f104 0314 	add.w	r3, r4, #20
 8009192:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009196:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800919a:	f04f 0c00 	mov.w	ip, #0
 800919e:	4618      	mov	r0, r3
 80091a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80091a4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80091a8:	d01b      	beq.n	80091e2 <__gethex+0x396>
 80091aa:	3201      	adds	r2, #1
 80091ac:	6002      	str	r2, [r0, #0]
 80091ae:	2d02      	cmp	r5, #2
 80091b0:	f104 0314 	add.w	r3, r4, #20
 80091b4:	d13c      	bne.n	8009230 <__gethex+0x3e4>
 80091b6:	f8d8 2000 	ldr.w	r2, [r8]
 80091ba:	3a01      	subs	r2, #1
 80091bc:	42b2      	cmp	r2, r6
 80091be:	d109      	bne.n	80091d4 <__gethex+0x388>
 80091c0:	1171      	asrs	r1, r6, #5
 80091c2:	2201      	movs	r2, #1
 80091c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80091c8:	f006 061f 	and.w	r6, r6, #31
 80091cc:	fa02 f606 	lsl.w	r6, r2, r6
 80091d0:	421e      	tst	r6, r3
 80091d2:	d13a      	bne.n	800924a <__gethex+0x3fe>
 80091d4:	f045 0520 	orr.w	r5, r5, #32
 80091d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091da:	601c      	str	r4, [r3, #0]
 80091dc:	9b02      	ldr	r3, [sp, #8]
 80091de:	601f      	str	r7, [r3, #0]
 80091e0:	e6b0      	b.n	8008f44 <__gethex+0xf8>
 80091e2:	4299      	cmp	r1, r3
 80091e4:	f843 cc04 	str.w	ip, [r3, #-4]
 80091e8:	d8d9      	bhi.n	800919e <__gethex+0x352>
 80091ea:	68a3      	ldr	r3, [r4, #8]
 80091ec:	459b      	cmp	fp, r3
 80091ee:	db17      	blt.n	8009220 <__gethex+0x3d4>
 80091f0:	6861      	ldr	r1, [r4, #4]
 80091f2:	9801      	ldr	r0, [sp, #4]
 80091f4:	3101      	adds	r1, #1
 80091f6:	f7fe f803 	bl	8007200 <_Balloc>
 80091fa:	4681      	mov	r9, r0
 80091fc:	b918      	cbnz	r0, 8009206 <__gethex+0x3ba>
 80091fe:	4b1a      	ldr	r3, [pc, #104]	@ (8009268 <__gethex+0x41c>)
 8009200:	4602      	mov	r2, r0
 8009202:	2184      	movs	r1, #132	@ 0x84
 8009204:	e6c5      	b.n	8008f92 <__gethex+0x146>
 8009206:	6922      	ldr	r2, [r4, #16]
 8009208:	3202      	adds	r2, #2
 800920a:	f104 010c 	add.w	r1, r4, #12
 800920e:	0092      	lsls	r2, r2, #2
 8009210:	300c      	adds	r0, #12
 8009212:	f7ff fd6b 	bl	8008cec <memcpy>
 8009216:	4621      	mov	r1, r4
 8009218:	9801      	ldr	r0, [sp, #4]
 800921a:	f7fe f831 	bl	8007280 <_Bfree>
 800921e:	464c      	mov	r4, r9
 8009220:	6923      	ldr	r3, [r4, #16]
 8009222:	1c5a      	adds	r2, r3, #1
 8009224:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009228:	6122      	str	r2, [r4, #16]
 800922a:	2201      	movs	r2, #1
 800922c:	615a      	str	r2, [r3, #20]
 800922e:	e7be      	b.n	80091ae <__gethex+0x362>
 8009230:	6922      	ldr	r2, [r4, #16]
 8009232:	455a      	cmp	r2, fp
 8009234:	dd0b      	ble.n	800924e <__gethex+0x402>
 8009236:	2101      	movs	r1, #1
 8009238:	4620      	mov	r0, r4
 800923a:	f7ff fd9f 	bl	8008d7c <rshift>
 800923e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009242:	3701      	adds	r7, #1
 8009244:	42bb      	cmp	r3, r7
 8009246:	f6ff aee0 	blt.w	800900a <__gethex+0x1be>
 800924a:	2501      	movs	r5, #1
 800924c:	e7c2      	b.n	80091d4 <__gethex+0x388>
 800924e:	f016 061f 	ands.w	r6, r6, #31
 8009252:	d0fa      	beq.n	800924a <__gethex+0x3fe>
 8009254:	4453      	add	r3, sl
 8009256:	f1c6 0620 	rsb	r6, r6, #32
 800925a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800925e:	f7fe f8c1 	bl	80073e4 <__hi0bits>
 8009262:	42b0      	cmp	r0, r6
 8009264:	dbe7      	blt.n	8009236 <__gethex+0x3ea>
 8009266:	e7f0      	b.n	800924a <__gethex+0x3fe>
 8009268:	08009db9 	.word	0x08009db9

0800926c <L_shift>:
 800926c:	f1c2 0208 	rsb	r2, r2, #8
 8009270:	0092      	lsls	r2, r2, #2
 8009272:	b570      	push	{r4, r5, r6, lr}
 8009274:	f1c2 0620 	rsb	r6, r2, #32
 8009278:	6843      	ldr	r3, [r0, #4]
 800927a:	6804      	ldr	r4, [r0, #0]
 800927c:	fa03 f506 	lsl.w	r5, r3, r6
 8009280:	432c      	orrs	r4, r5
 8009282:	40d3      	lsrs	r3, r2
 8009284:	6004      	str	r4, [r0, #0]
 8009286:	f840 3f04 	str.w	r3, [r0, #4]!
 800928a:	4288      	cmp	r0, r1
 800928c:	d3f4      	bcc.n	8009278 <L_shift+0xc>
 800928e:	bd70      	pop	{r4, r5, r6, pc}

08009290 <__match>:
 8009290:	b530      	push	{r4, r5, lr}
 8009292:	6803      	ldr	r3, [r0, #0]
 8009294:	3301      	adds	r3, #1
 8009296:	f811 4b01 	ldrb.w	r4, [r1], #1
 800929a:	b914      	cbnz	r4, 80092a2 <__match+0x12>
 800929c:	6003      	str	r3, [r0, #0]
 800929e:	2001      	movs	r0, #1
 80092a0:	bd30      	pop	{r4, r5, pc}
 80092a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092a6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80092aa:	2d19      	cmp	r5, #25
 80092ac:	bf98      	it	ls
 80092ae:	3220      	addls	r2, #32
 80092b0:	42a2      	cmp	r2, r4
 80092b2:	d0f0      	beq.n	8009296 <__match+0x6>
 80092b4:	2000      	movs	r0, #0
 80092b6:	e7f3      	b.n	80092a0 <__match+0x10>

080092b8 <__hexnan>:
 80092b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092bc:	680b      	ldr	r3, [r1, #0]
 80092be:	6801      	ldr	r1, [r0, #0]
 80092c0:	115e      	asrs	r6, r3, #5
 80092c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80092c6:	f013 031f 	ands.w	r3, r3, #31
 80092ca:	b087      	sub	sp, #28
 80092cc:	bf18      	it	ne
 80092ce:	3604      	addne	r6, #4
 80092d0:	2500      	movs	r5, #0
 80092d2:	1f37      	subs	r7, r6, #4
 80092d4:	4682      	mov	sl, r0
 80092d6:	4690      	mov	r8, r2
 80092d8:	9301      	str	r3, [sp, #4]
 80092da:	f846 5c04 	str.w	r5, [r6, #-4]
 80092de:	46b9      	mov	r9, r7
 80092e0:	463c      	mov	r4, r7
 80092e2:	9502      	str	r5, [sp, #8]
 80092e4:	46ab      	mov	fp, r5
 80092e6:	784a      	ldrb	r2, [r1, #1]
 80092e8:	1c4b      	adds	r3, r1, #1
 80092ea:	9303      	str	r3, [sp, #12]
 80092ec:	b342      	cbz	r2, 8009340 <__hexnan+0x88>
 80092ee:	4610      	mov	r0, r2
 80092f0:	9105      	str	r1, [sp, #20]
 80092f2:	9204      	str	r2, [sp, #16]
 80092f4:	f7ff fd94 	bl	8008e20 <__hexdig_fun>
 80092f8:	2800      	cmp	r0, #0
 80092fa:	d151      	bne.n	80093a0 <__hexnan+0xe8>
 80092fc:	9a04      	ldr	r2, [sp, #16]
 80092fe:	9905      	ldr	r1, [sp, #20]
 8009300:	2a20      	cmp	r2, #32
 8009302:	d818      	bhi.n	8009336 <__hexnan+0x7e>
 8009304:	9b02      	ldr	r3, [sp, #8]
 8009306:	459b      	cmp	fp, r3
 8009308:	dd13      	ble.n	8009332 <__hexnan+0x7a>
 800930a:	454c      	cmp	r4, r9
 800930c:	d206      	bcs.n	800931c <__hexnan+0x64>
 800930e:	2d07      	cmp	r5, #7
 8009310:	dc04      	bgt.n	800931c <__hexnan+0x64>
 8009312:	462a      	mov	r2, r5
 8009314:	4649      	mov	r1, r9
 8009316:	4620      	mov	r0, r4
 8009318:	f7ff ffa8 	bl	800926c <L_shift>
 800931c:	4544      	cmp	r4, r8
 800931e:	d952      	bls.n	80093c6 <__hexnan+0x10e>
 8009320:	2300      	movs	r3, #0
 8009322:	f1a4 0904 	sub.w	r9, r4, #4
 8009326:	f844 3c04 	str.w	r3, [r4, #-4]
 800932a:	f8cd b008 	str.w	fp, [sp, #8]
 800932e:	464c      	mov	r4, r9
 8009330:	461d      	mov	r5, r3
 8009332:	9903      	ldr	r1, [sp, #12]
 8009334:	e7d7      	b.n	80092e6 <__hexnan+0x2e>
 8009336:	2a29      	cmp	r2, #41	@ 0x29
 8009338:	d157      	bne.n	80093ea <__hexnan+0x132>
 800933a:	3102      	adds	r1, #2
 800933c:	f8ca 1000 	str.w	r1, [sl]
 8009340:	f1bb 0f00 	cmp.w	fp, #0
 8009344:	d051      	beq.n	80093ea <__hexnan+0x132>
 8009346:	454c      	cmp	r4, r9
 8009348:	d206      	bcs.n	8009358 <__hexnan+0xa0>
 800934a:	2d07      	cmp	r5, #7
 800934c:	dc04      	bgt.n	8009358 <__hexnan+0xa0>
 800934e:	462a      	mov	r2, r5
 8009350:	4649      	mov	r1, r9
 8009352:	4620      	mov	r0, r4
 8009354:	f7ff ff8a 	bl	800926c <L_shift>
 8009358:	4544      	cmp	r4, r8
 800935a:	d936      	bls.n	80093ca <__hexnan+0x112>
 800935c:	f1a8 0204 	sub.w	r2, r8, #4
 8009360:	4623      	mov	r3, r4
 8009362:	f853 1b04 	ldr.w	r1, [r3], #4
 8009366:	f842 1f04 	str.w	r1, [r2, #4]!
 800936a:	429f      	cmp	r7, r3
 800936c:	d2f9      	bcs.n	8009362 <__hexnan+0xaa>
 800936e:	1b3b      	subs	r3, r7, r4
 8009370:	f023 0303 	bic.w	r3, r3, #3
 8009374:	3304      	adds	r3, #4
 8009376:	3401      	adds	r4, #1
 8009378:	3e03      	subs	r6, #3
 800937a:	42b4      	cmp	r4, r6
 800937c:	bf88      	it	hi
 800937e:	2304      	movhi	r3, #4
 8009380:	4443      	add	r3, r8
 8009382:	2200      	movs	r2, #0
 8009384:	f843 2b04 	str.w	r2, [r3], #4
 8009388:	429f      	cmp	r7, r3
 800938a:	d2fb      	bcs.n	8009384 <__hexnan+0xcc>
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	b91b      	cbnz	r3, 8009398 <__hexnan+0xe0>
 8009390:	4547      	cmp	r7, r8
 8009392:	d128      	bne.n	80093e6 <__hexnan+0x12e>
 8009394:	2301      	movs	r3, #1
 8009396:	603b      	str	r3, [r7, #0]
 8009398:	2005      	movs	r0, #5
 800939a:	b007      	add	sp, #28
 800939c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a0:	3501      	adds	r5, #1
 80093a2:	2d08      	cmp	r5, #8
 80093a4:	f10b 0b01 	add.w	fp, fp, #1
 80093a8:	dd06      	ble.n	80093b8 <__hexnan+0x100>
 80093aa:	4544      	cmp	r4, r8
 80093ac:	d9c1      	bls.n	8009332 <__hexnan+0x7a>
 80093ae:	2300      	movs	r3, #0
 80093b0:	f844 3c04 	str.w	r3, [r4, #-4]
 80093b4:	2501      	movs	r5, #1
 80093b6:	3c04      	subs	r4, #4
 80093b8:	6822      	ldr	r2, [r4, #0]
 80093ba:	f000 000f 	and.w	r0, r0, #15
 80093be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80093c2:	6020      	str	r0, [r4, #0]
 80093c4:	e7b5      	b.n	8009332 <__hexnan+0x7a>
 80093c6:	2508      	movs	r5, #8
 80093c8:	e7b3      	b.n	8009332 <__hexnan+0x7a>
 80093ca:	9b01      	ldr	r3, [sp, #4]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d0dd      	beq.n	800938c <__hexnan+0xd4>
 80093d0:	f1c3 0320 	rsb	r3, r3, #32
 80093d4:	f04f 32ff 	mov.w	r2, #4294967295
 80093d8:	40da      	lsrs	r2, r3
 80093da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80093de:	4013      	ands	r3, r2
 80093e0:	f846 3c04 	str.w	r3, [r6, #-4]
 80093e4:	e7d2      	b.n	800938c <__hexnan+0xd4>
 80093e6:	3f04      	subs	r7, #4
 80093e8:	e7d0      	b.n	800938c <__hexnan+0xd4>
 80093ea:	2004      	movs	r0, #4
 80093ec:	e7d5      	b.n	800939a <__hexnan+0xe2>

080093ee <__ascii_mbtowc>:
 80093ee:	b082      	sub	sp, #8
 80093f0:	b901      	cbnz	r1, 80093f4 <__ascii_mbtowc+0x6>
 80093f2:	a901      	add	r1, sp, #4
 80093f4:	b142      	cbz	r2, 8009408 <__ascii_mbtowc+0x1a>
 80093f6:	b14b      	cbz	r3, 800940c <__ascii_mbtowc+0x1e>
 80093f8:	7813      	ldrb	r3, [r2, #0]
 80093fa:	600b      	str	r3, [r1, #0]
 80093fc:	7812      	ldrb	r2, [r2, #0]
 80093fe:	1e10      	subs	r0, r2, #0
 8009400:	bf18      	it	ne
 8009402:	2001      	movne	r0, #1
 8009404:	b002      	add	sp, #8
 8009406:	4770      	bx	lr
 8009408:	4610      	mov	r0, r2
 800940a:	e7fb      	b.n	8009404 <__ascii_mbtowc+0x16>
 800940c:	f06f 0001 	mvn.w	r0, #1
 8009410:	e7f8      	b.n	8009404 <__ascii_mbtowc+0x16>

08009412 <_realloc_r>:
 8009412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009416:	4680      	mov	r8, r0
 8009418:	4615      	mov	r5, r2
 800941a:	460c      	mov	r4, r1
 800941c:	b921      	cbnz	r1, 8009428 <_realloc_r+0x16>
 800941e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009422:	4611      	mov	r1, r2
 8009424:	f7fd be60 	b.w	80070e8 <_malloc_r>
 8009428:	b92a      	cbnz	r2, 8009436 <_realloc_r+0x24>
 800942a:	f7fd fde9 	bl	8007000 <_free_r>
 800942e:	2400      	movs	r4, #0
 8009430:	4620      	mov	r0, r4
 8009432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009436:	f000 f840 	bl	80094ba <_malloc_usable_size_r>
 800943a:	4285      	cmp	r5, r0
 800943c:	4606      	mov	r6, r0
 800943e:	d802      	bhi.n	8009446 <_realloc_r+0x34>
 8009440:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009444:	d8f4      	bhi.n	8009430 <_realloc_r+0x1e>
 8009446:	4629      	mov	r1, r5
 8009448:	4640      	mov	r0, r8
 800944a:	f7fd fe4d 	bl	80070e8 <_malloc_r>
 800944e:	4607      	mov	r7, r0
 8009450:	2800      	cmp	r0, #0
 8009452:	d0ec      	beq.n	800942e <_realloc_r+0x1c>
 8009454:	42b5      	cmp	r5, r6
 8009456:	462a      	mov	r2, r5
 8009458:	4621      	mov	r1, r4
 800945a:	bf28      	it	cs
 800945c:	4632      	movcs	r2, r6
 800945e:	f7ff fc45 	bl	8008cec <memcpy>
 8009462:	4621      	mov	r1, r4
 8009464:	4640      	mov	r0, r8
 8009466:	f7fd fdcb 	bl	8007000 <_free_r>
 800946a:	463c      	mov	r4, r7
 800946c:	e7e0      	b.n	8009430 <_realloc_r+0x1e>

0800946e <__ascii_wctomb>:
 800946e:	4603      	mov	r3, r0
 8009470:	4608      	mov	r0, r1
 8009472:	b141      	cbz	r1, 8009486 <__ascii_wctomb+0x18>
 8009474:	2aff      	cmp	r2, #255	@ 0xff
 8009476:	d904      	bls.n	8009482 <__ascii_wctomb+0x14>
 8009478:	228a      	movs	r2, #138	@ 0x8a
 800947a:	601a      	str	r2, [r3, #0]
 800947c:	f04f 30ff 	mov.w	r0, #4294967295
 8009480:	4770      	bx	lr
 8009482:	700a      	strb	r2, [r1, #0]
 8009484:	2001      	movs	r0, #1
 8009486:	4770      	bx	lr

08009488 <fiprintf>:
 8009488:	b40e      	push	{r1, r2, r3}
 800948a:	b503      	push	{r0, r1, lr}
 800948c:	4601      	mov	r1, r0
 800948e:	ab03      	add	r3, sp, #12
 8009490:	4805      	ldr	r0, [pc, #20]	@ (80094a8 <fiprintf+0x20>)
 8009492:	f853 2b04 	ldr.w	r2, [r3], #4
 8009496:	6800      	ldr	r0, [r0, #0]
 8009498:	9301      	str	r3, [sp, #4]
 800949a:	f000 f83f 	bl	800951c <_vfiprintf_r>
 800949e:	b002      	add	sp, #8
 80094a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80094a4:	b003      	add	sp, #12
 80094a6:	4770      	bx	lr
 80094a8:	20000018 	.word	0x20000018

080094ac <abort>:
 80094ac:	b508      	push	{r3, lr}
 80094ae:	2006      	movs	r0, #6
 80094b0:	f000 fa08 	bl	80098c4 <raise>
 80094b4:	2001      	movs	r0, #1
 80094b6:	f7f8 fa84 	bl	80019c2 <_exit>

080094ba <_malloc_usable_size_r>:
 80094ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094be:	1f18      	subs	r0, r3, #4
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	bfbc      	itt	lt
 80094c4:	580b      	ldrlt	r3, [r1, r0]
 80094c6:	18c0      	addlt	r0, r0, r3
 80094c8:	4770      	bx	lr

080094ca <__sfputc_r>:
 80094ca:	6893      	ldr	r3, [r2, #8]
 80094cc:	3b01      	subs	r3, #1
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	b410      	push	{r4}
 80094d2:	6093      	str	r3, [r2, #8]
 80094d4:	da08      	bge.n	80094e8 <__sfputc_r+0x1e>
 80094d6:	6994      	ldr	r4, [r2, #24]
 80094d8:	42a3      	cmp	r3, r4
 80094da:	db01      	blt.n	80094e0 <__sfputc_r+0x16>
 80094dc:	290a      	cmp	r1, #10
 80094de:	d103      	bne.n	80094e8 <__sfputc_r+0x1e>
 80094e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094e4:	f000 b932 	b.w	800974c <__swbuf_r>
 80094e8:	6813      	ldr	r3, [r2, #0]
 80094ea:	1c58      	adds	r0, r3, #1
 80094ec:	6010      	str	r0, [r2, #0]
 80094ee:	7019      	strb	r1, [r3, #0]
 80094f0:	4608      	mov	r0, r1
 80094f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <__sfputs_r>:
 80094f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094fa:	4606      	mov	r6, r0
 80094fc:	460f      	mov	r7, r1
 80094fe:	4614      	mov	r4, r2
 8009500:	18d5      	adds	r5, r2, r3
 8009502:	42ac      	cmp	r4, r5
 8009504:	d101      	bne.n	800950a <__sfputs_r+0x12>
 8009506:	2000      	movs	r0, #0
 8009508:	e007      	b.n	800951a <__sfputs_r+0x22>
 800950a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800950e:	463a      	mov	r2, r7
 8009510:	4630      	mov	r0, r6
 8009512:	f7ff ffda 	bl	80094ca <__sfputc_r>
 8009516:	1c43      	adds	r3, r0, #1
 8009518:	d1f3      	bne.n	8009502 <__sfputs_r+0xa>
 800951a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800951c <_vfiprintf_r>:
 800951c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009520:	460d      	mov	r5, r1
 8009522:	b09d      	sub	sp, #116	@ 0x74
 8009524:	4614      	mov	r4, r2
 8009526:	4698      	mov	r8, r3
 8009528:	4606      	mov	r6, r0
 800952a:	b118      	cbz	r0, 8009534 <_vfiprintf_r+0x18>
 800952c:	6a03      	ldr	r3, [r0, #32]
 800952e:	b90b      	cbnz	r3, 8009534 <_vfiprintf_r+0x18>
 8009530:	f7fc fdf8 	bl	8006124 <__sinit>
 8009534:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009536:	07d9      	lsls	r1, r3, #31
 8009538:	d405      	bmi.n	8009546 <_vfiprintf_r+0x2a>
 800953a:	89ab      	ldrh	r3, [r5, #12]
 800953c:	059a      	lsls	r2, r3, #22
 800953e:	d402      	bmi.n	8009546 <_vfiprintf_r+0x2a>
 8009540:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009542:	f7fc ff06 	bl	8006352 <__retarget_lock_acquire_recursive>
 8009546:	89ab      	ldrh	r3, [r5, #12]
 8009548:	071b      	lsls	r3, r3, #28
 800954a:	d501      	bpl.n	8009550 <_vfiprintf_r+0x34>
 800954c:	692b      	ldr	r3, [r5, #16]
 800954e:	b99b      	cbnz	r3, 8009578 <_vfiprintf_r+0x5c>
 8009550:	4629      	mov	r1, r5
 8009552:	4630      	mov	r0, r6
 8009554:	f000 f938 	bl	80097c8 <__swsetup_r>
 8009558:	b170      	cbz	r0, 8009578 <_vfiprintf_r+0x5c>
 800955a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800955c:	07dc      	lsls	r4, r3, #31
 800955e:	d504      	bpl.n	800956a <_vfiprintf_r+0x4e>
 8009560:	f04f 30ff 	mov.w	r0, #4294967295
 8009564:	b01d      	add	sp, #116	@ 0x74
 8009566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800956a:	89ab      	ldrh	r3, [r5, #12]
 800956c:	0598      	lsls	r0, r3, #22
 800956e:	d4f7      	bmi.n	8009560 <_vfiprintf_r+0x44>
 8009570:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009572:	f7fc feef 	bl	8006354 <__retarget_lock_release_recursive>
 8009576:	e7f3      	b.n	8009560 <_vfiprintf_r+0x44>
 8009578:	2300      	movs	r3, #0
 800957a:	9309      	str	r3, [sp, #36]	@ 0x24
 800957c:	2320      	movs	r3, #32
 800957e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009582:	f8cd 800c 	str.w	r8, [sp, #12]
 8009586:	2330      	movs	r3, #48	@ 0x30
 8009588:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009738 <_vfiprintf_r+0x21c>
 800958c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009590:	f04f 0901 	mov.w	r9, #1
 8009594:	4623      	mov	r3, r4
 8009596:	469a      	mov	sl, r3
 8009598:	f813 2b01 	ldrb.w	r2, [r3], #1
 800959c:	b10a      	cbz	r2, 80095a2 <_vfiprintf_r+0x86>
 800959e:	2a25      	cmp	r2, #37	@ 0x25
 80095a0:	d1f9      	bne.n	8009596 <_vfiprintf_r+0x7a>
 80095a2:	ebba 0b04 	subs.w	fp, sl, r4
 80095a6:	d00b      	beq.n	80095c0 <_vfiprintf_r+0xa4>
 80095a8:	465b      	mov	r3, fp
 80095aa:	4622      	mov	r2, r4
 80095ac:	4629      	mov	r1, r5
 80095ae:	4630      	mov	r0, r6
 80095b0:	f7ff ffa2 	bl	80094f8 <__sfputs_r>
 80095b4:	3001      	adds	r0, #1
 80095b6:	f000 80a7 	beq.w	8009708 <_vfiprintf_r+0x1ec>
 80095ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095bc:	445a      	add	r2, fp
 80095be:	9209      	str	r2, [sp, #36]	@ 0x24
 80095c0:	f89a 3000 	ldrb.w	r3, [sl]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	f000 809f 	beq.w	8009708 <_vfiprintf_r+0x1ec>
 80095ca:	2300      	movs	r3, #0
 80095cc:	f04f 32ff 	mov.w	r2, #4294967295
 80095d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095d4:	f10a 0a01 	add.w	sl, sl, #1
 80095d8:	9304      	str	r3, [sp, #16]
 80095da:	9307      	str	r3, [sp, #28]
 80095dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80095e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80095e2:	4654      	mov	r4, sl
 80095e4:	2205      	movs	r2, #5
 80095e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095ea:	4853      	ldr	r0, [pc, #332]	@ (8009738 <_vfiprintf_r+0x21c>)
 80095ec:	f7f6 fdf0 	bl	80001d0 <memchr>
 80095f0:	9a04      	ldr	r2, [sp, #16]
 80095f2:	b9d8      	cbnz	r0, 800962c <_vfiprintf_r+0x110>
 80095f4:	06d1      	lsls	r1, r2, #27
 80095f6:	bf44      	itt	mi
 80095f8:	2320      	movmi	r3, #32
 80095fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80095fe:	0713      	lsls	r3, r2, #28
 8009600:	bf44      	itt	mi
 8009602:	232b      	movmi	r3, #43	@ 0x2b
 8009604:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009608:	f89a 3000 	ldrb.w	r3, [sl]
 800960c:	2b2a      	cmp	r3, #42	@ 0x2a
 800960e:	d015      	beq.n	800963c <_vfiprintf_r+0x120>
 8009610:	9a07      	ldr	r2, [sp, #28]
 8009612:	4654      	mov	r4, sl
 8009614:	2000      	movs	r0, #0
 8009616:	f04f 0c0a 	mov.w	ip, #10
 800961a:	4621      	mov	r1, r4
 800961c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009620:	3b30      	subs	r3, #48	@ 0x30
 8009622:	2b09      	cmp	r3, #9
 8009624:	d94b      	bls.n	80096be <_vfiprintf_r+0x1a2>
 8009626:	b1b0      	cbz	r0, 8009656 <_vfiprintf_r+0x13a>
 8009628:	9207      	str	r2, [sp, #28]
 800962a:	e014      	b.n	8009656 <_vfiprintf_r+0x13a>
 800962c:	eba0 0308 	sub.w	r3, r0, r8
 8009630:	fa09 f303 	lsl.w	r3, r9, r3
 8009634:	4313      	orrs	r3, r2
 8009636:	9304      	str	r3, [sp, #16]
 8009638:	46a2      	mov	sl, r4
 800963a:	e7d2      	b.n	80095e2 <_vfiprintf_r+0xc6>
 800963c:	9b03      	ldr	r3, [sp, #12]
 800963e:	1d19      	adds	r1, r3, #4
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	9103      	str	r1, [sp, #12]
 8009644:	2b00      	cmp	r3, #0
 8009646:	bfbb      	ittet	lt
 8009648:	425b      	neglt	r3, r3
 800964a:	f042 0202 	orrlt.w	r2, r2, #2
 800964e:	9307      	strge	r3, [sp, #28]
 8009650:	9307      	strlt	r3, [sp, #28]
 8009652:	bfb8      	it	lt
 8009654:	9204      	strlt	r2, [sp, #16]
 8009656:	7823      	ldrb	r3, [r4, #0]
 8009658:	2b2e      	cmp	r3, #46	@ 0x2e
 800965a:	d10a      	bne.n	8009672 <_vfiprintf_r+0x156>
 800965c:	7863      	ldrb	r3, [r4, #1]
 800965e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009660:	d132      	bne.n	80096c8 <_vfiprintf_r+0x1ac>
 8009662:	9b03      	ldr	r3, [sp, #12]
 8009664:	1d1a      	adds	r2, r3, #4
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	9203      	str	r2, [sp, #12]
 800966a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800966e:	3402      	adds	r4, #2
 8009670:	9305      	str	r3, [sp, #20]
 8009672:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009748 <_vfiprintf_r+0x22c>
 8009676:	7821      	ldrb	r1, [r4, #0]
 8009678:	2203      	movs	r2, #3
 800967a:	4650      	mov	r0, sl
 800967c:	f7f6 fda8 	bl	80001d0 <memchr>
 8009680:	b138      	cbz	r0, 8009692 <_vfiprintf_r+0x176>
 8009682:	9b04      	ldr	r3, [sp, #16]
 8009684:	eba0 000a 	sub.w	r0, r0, sl
 8009688:	2240      	movs	r2, #64	@ 0x40
 800968a:	4082      	lsls	r2, r0
 800968c:	4313      	orrs	r3, r2
 800968e:	3401      	adds	r4, #1
 8009690:	9304      	str	r3, [sp, #16]
 8009692:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009696:	4829      	ldr	r0, [pc, #164]	@ (800973c <_vfiprintf_r+0x220>)
 8009698:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800969c:	2206      	movs	r2, #6
 800969e:	f7f6 fd97 	bl	80001d0 <memchr>
 80096a2:	2800      	cmp	r0, #0
 80096a4:	d03f      	beq.n	8009726 <_vfiprintf_r+0x20a>
 80096a6:	4b26      	ldr	r3, [pc, #152]	@ (8009740 <_vfiprintf_r+0x224>)
 80096a8:	bb1b      	cbnz	r3, 80096f2 <_vfiprintf_r+0x1d6>
 80096aa:	9b03      	ldr	r3, [sp, #12]
 80096ac:	3307      	adds	r3, #7
 80096ae:	f023 0307 	bic.w	r3, r3, #7
 80096b2:	3308      	adds	r3, #8
 80096b4:	9303      	str	r3, [sp, #12]
 80096b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096b8:	443b      	add	r3, r7
 80096ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80096bc:	e76a      	b.n	8009594 <_vfiprintf_r+0x78>
 80096be:	fb0c 3202 	mla	r2, ip, r2, r3
 80096c2:	460c      	mov	r4, r1
 80096c4:	2001      	movs	r0, #1
 80096c6:	e7a8      	b.n	800961a <_vfiprintf_r+0xfe>
 80096c8:	2300      	movs	r3, #0
 80096ca:	3401      	adds	r4, #1
 80096cc:	9305      	str	r3, [sp, #20]
 80096ce:	4619      	mov	r1, r3
 80096d0:	f04f 0c0a 	mov.w	ip, #10
 80096d4:	4620      	mov	r0, r4
 80096d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096da:	3a30      	subs	r2, #48	@ 0x30
 80096dc:	2a09      	cmp	r2, #9
 80096de:	d903      	bls.n	80096e8 <_vfiprintf_r+0x1cc>
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d0c6      	beq.n	8009672 <_vfiprintf_r+0x156>
 80096e4:	9105      	str	r1, [sp, #20]
 80096e6:	e7c4      	b.n	8009672 <_vfiprintf_r+0x156>
 80096e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80096ec:	4604      	mov	r4, r0
 80096ee:	2301      	movs	r3, #1
 80096f0:	e7f0      	b.n	80096d4 <_vfiprintf_r+0x1b8>
 80096f2:	ab03      	add	r3, sp, #12
 80096f4:	9300      	str	r3, [sp, #0]
 80096f6:	462a      	mov	r2, r5
 80096f8:	4b12      	ldr	r3, [pc, #72]	@ (8009744 <_vfiprintf_r+0x228>)
 80096fa:	a904      	add	r1, sp, #16
 80096fc:	4630      	mov	r0, r6
 80096fe:	f7fb feb9 	bl	8005474 <_printf_float>
 8009702:	4607      	mov	r7, r0
 8009704:	1c78      	adds	r0, r7, #1
 8009706:	d1d6      	bne.n	80096b6 <_vfiprintf_r+0x19a>
 8009708:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800970a:	07d9      	lsls	r1, r3, #31
 800970c:	d405      	bmi.n	800971a <_vfiprintf_r+0x1fe>
 800970e:	89ab      	ldrh	r3, [r5, #12]
 8009710:	059a      	lsls	r2, r3, #22
 8009712:	d402      	bmi.n	800971a <_vfiprintf_r+0x1fe>
 8009714:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009716:	f7fc fe1d 	bl	8006354 <__retarget_lock_release_recursive>
 800971a:	89ab      	ldrh	r3, [r5, #12]
 800971c:	065b      	lsls	r3, r3, #25
 800971e:	f53f af1f 	bmi.w	8009560 <_vfiprintf_r+0x44>
 8009722:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009724:	e71e      	b.n	8009564 <_vfiprintf_r+0x48>
 8009726:	ab03      	add	r3, sp, #12
 8009728:	9300      	str	r3, [sp, #0]
 800972a:	462a      	mov	r2, r5
 800972c:	4b05      	ldr	r3, [pc, #20]	@ (8009744 <_vfiprintf_r+0x228>)
 800972e:	a904      	add	r1, sp, #16
 8009730:	4630      	mov	r0, r6
 8009732:	f7fc f937 	bl	80059a4 <_printf_i>
 8009736:	e7e4      	b.n	8009702 <_vfiprintf_r+0x1e6>
 8009738:	0800a079 	.word	0x0800a079
 800973c:	0800a083 	.word	0x0800a083
 8009740:	08005475 	.word	0x08005475
 8009744:	080094f9 	.word	0x080094f9
 8009748:	0800a07f 	.word	0x0800a07f

0800974c <__swbuf_r>:
 800974c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800974e:	460e      	mov	r6, r1
 8009750:	4614      	mov	r4, r2
 8009752:	4605      	mov	r5, r0
 8009754:	b118      	cbz	r0, 800975e <__swbuf_r+0x12>
 8009756:	6a03      	ldr	r3, [r0, #32]
 8009758:	b90b      	cbnz	r3, 800975e <__swbuf_r+0x12>
 800975a:	f7fc fce3 	bl	8006124 <__sinit>
 800975e:	69a3      	ldr	r3, [r4, #24]
 8009760:	60a3      	str	r3, [r4, #8]
 8009762:	89a3      	ldrh	r3, [r4, #12]
 8009764:	071a      	lsls	r2, r3, #28
 8009766:	d501      	bpl.n	800976c <__swbuf_r+0x20>
 8009768:	6923      	ldr	r3, [r4, #16]
 800976a:	b943      	cbnz	r3, 800977e <__swbuf_r+0x32>
 800976c:	4621      	mov	r1, r4
 800976e:	4628      	mov	r0, r5
 8009770:	f000 f82a 	bl	80097c8 <__swsetup_r>
 8009774:	b118      	cbz	r0, 800977e <__swbuf_r+0x32>
 8009776:	f04f 37ff 	mov.w	r7, #4294967295
 800977a:	4638      	mov	r0, r7
 800977c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800977e:	6823      	ldr	r3, [r4, #0]
 8009780:	6922      	ldr	r2, [r4, #16]
 8009782:	1a98      	subs	r0, r3, r2
 8009784:	6963      	ldr	r3, [r4, #20]
 8009786:	b2f6      	uxtb	r6, r6
 8009788:	4283      	cmp	r3, r0
 800978a:	4637      	mov	r7, r6
 800978c:	dc05      	bgt.n	800979a <__swbuf_r+0x4e>
 800978e:	4621      	mov	r1, r4
 8009790:	4628      	mov	r0, r5
 8009792:	f7ff fa47 	bl	8008c24 <_fflush_r>
 8009796:	2800      	cmp	r0, #0
 8009798:	d1ed      	bne.n	8009776 <__swbuf_r+0x2a>
 800979a:	68a3      	ldr	r3, [r4, #8]
 800979c:	3b01      	subs	r3, #1
 800979e:	60a3      	str	r3, [r4, #8]
 80097a0:	6823      	ldr	r3, [r4, #0]
 80097a2:	1c5a      	adds	r2, r3, #1
 80097a4:	6022      	str	r2, [r4, #0]
 80097a6:	701e      	strb	r6, [r3, #0]
 80097a8:	6962      	ldr	r2, [r4, #20]
 80097aa:	1c43      	adds	r3, r0, #1
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d004      	beq.n	80097ba <__swbuf_r+0x6e>
 80097b0:	89a3      	ldrh	r3, [r4, #12]
 80097b2:	07db      	lsls	r3, r3, #31
 80097b4:	d5e1      	bpl.n	800977a <__swbuf_r+0x2e>
 80097b6:	2e0a      	cmp	r6, #10
 80097b8:	d1df      	bne.n	800977a <__swbuf_r+0x2e>
 80097ba:	4621      	mov	r1, r4
 80097bc:	4628      	mov	r0, r5
 80097be:	f7ff fa31 	bl	8008c24 <_fflush_r>
 80097c2:	2800      	cmp	r0, #0
 80097c4:	d0d9      	beq.n	800977a <__swbuf_r+0x2e>
 80097c6:	e7d6      	b.n	8009776 <__swbuf_r+0x2a>

080097c8 <__swsetup_r>:
 80097c8:	b538      	push	{r3, r4, r5, lr}
 80097ca:	4b29      	ldr	r3, [pc, #164]	@ (8009870 <__swsetup_r+0xa8>)
 80097cc:	4605      	mov	r5, r0
 80097ce:	6818      	ldr	r0, [r3, #0]
 80097d0:	460c      	mov	r4, r1
 80097d2:	b118      	cbz	r0, 80097dc <__swsetup_r+0x14>
 80097d4:	6a03      	ldr	r3, [r0, #32]
 80097d6:	b90b      	cbnz	r3, 80097dc <__swsetup_r+0x14>
 80097d8:	f7fc fca4 	bl	8006124 <__sinit>
 80097dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097e0:	0719      	lsls	r1, r3, #28
 80097e2:	d422      	bmi.n	800982a <__swsetup_r+0x62>
 80097e4:	06da      	lsls	r2, r3, #27
 80097e6:	d407      	bmi.n	80097f8 <__swsetup_r+0x30>
 80097e8:	2209      	movs	r2, #9
 80097ea:	602a      	str	r2, [r5, #0]
 80097ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097f0:	81a3      	strh	r3, [r4, #12]
 80097f2:	f04f 30ff 	mov.w	r0, #4294967295
 80097f6:	e033      	b.n	8009860 <__swsetup_r+0x98>
 80097f8:	0758      	lsls	r0, r3, #29
 80097fa:	d512      	bpl.n	8009822 <__swsetup_r+0x5a>
 80097fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80097fe:	b141      	cbz	r1, 8009812 <__swsetup_r+0x4a>
 8009800:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009804:	4299      	cmp	r1, r3
 8009806:	d002      	beq.n	800980e <__swsetup_r+0x46>
 8009808:	4628      	mov	r0, r5
 800980a:	f7fd fbf9 	bl	8007000 <_free_r>
 800980e:	2300      	movs	r3, #0
 8009810:	6363      	str	r3, [r4, #52]	@ 0x34
 8009812:	89a3      	ldrh	r3, [r4, #12]
 8009814:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009818:	81a3      	strh	r3, [r4, #12]
 800981a:	2300      	movs	r3, #0
 800981c:	6063      	str	r3, [r4, #4]
 800981e:	6923      	ldr	r3, [r4, #16]
 8009820:	6023      	str	r3, [r4, #0]
 8009822:	89a3      	ldrh	r3, [r4, #12]
 8009824:	f043 0308 	orr.w	r3, r3, #8
 8009828:	81a3      	strh	r3, [r4, #12]
 800982a:	6923      	ldr	r3, [r4, #16]
 800982c:	b94b      	cbnz	r3, 8009842 <__swsetup_r+0x7a>
 800982e:	89a3      	ldrh	r3, [r4, #12]
 8009830:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009834:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009838:	d003      	beq.n	8009842 <__swsetup_r+0x7a>
 800983a:	4621      	mov	r1, r4
 800983c:	4628      	mov	r0, r5
 800983e:	f000 f883 	bl	8009948 <__smakebuf_r>
 8009842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009846:	f013 0201 	ands.w	r2, r3, #1
 800984a:	d00a      	beq.n	8009862 <__swsetup_r+0x9a>
 800984c:	2200      	movs	r2, #0
 800984e:	60a2      	str	r2, [r4, #8]
 8009850:	6962      	ldr	r2, [r4, #20]
 8009852:	4252      	negs	r2, r2
 8009854:	61a2      	str	r2, [r4, #24]
 8009856:	6922      	ldr	r2, [r4, #16]
 8009858:	b942      	cbnz	r2, 800986c <__swsetup_r+0xa4>
 800985a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800985e:	d1c5      	bne.n	80097ec <__swsetup_r+0x24>
 8009860:	bd38      	pop	{r3, r4, r5, pc}
 8009862:	0799      	lsls	r1, r3, #30
 8009864:	bf58      	it	pl
 8009866:	6962      	ldrpl	r2, [r4, #20]
 8009868:	60a2      	str	r2, [r4, #8]
 800986a:	e7f4      	b.n	8009856 <__swsetup_r+0x8e>
 800986c:	2000      	movs	r0, #0
 800986e:	e7f7      	b.n	8009860 <__swsetup_r+0x98>
 8009870:	20000018 	.word	0x20000018

08009874 <_raise_r>:
 8009874:	291f      	cmp	r1, #31
 8009876:	b538      	push	{r3, r4, r5, lr}
 8009878:	4605      	mov	r5, r0
 800987a:	460c      	mov	r4, r1
 800987c:	d904      	bls.n	8009888 <_raise_r+0x14>
 800987e:	2316      	movs	r3, #22
 8009880:	6003      	str	r3, [r0, #0]
 8009882:	f04f 30ff 	mov.w	r0, #4294967295
 8009886:	bd38      	pop	{r3, r4, r5, pc}
 8009888:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800988a:	b112      	cbz	r2, 8009892 <_raise_r+0x1e>
 800988c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009890:	b94b      	cbnz	r3, 80098a6 <_raise_r+0x32>
 8009892:	4628      	mov	r0, r5
 8009894:	f000 f830 	bl	80098f8 <_getpid_r>
 8009898:	4622      	mov	r2, r4
 800989a:	4601      	mov	r1, r0
 800989c:	4628      	mov	r0, r5
 800989e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098a2:	f000 b817 	b.w	80098d4 <_kill_r>
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d00a      	beq.n	80098c0 <_raise_r+0x4c>
 80098aa:	1c59      	adds	r1, r3, #1
 80098ac:	d103      	bne.n	80098b6 <_raise_r+0x42>
 80098ae:	2316      	movs	r3, #22
 80098b0:	6003      	str	r3, [r0, #0]
 80098b2:	2001      	movs	r0, #1
 80098b4:	e7e7      	b.n	8009886 <_raise_r+0x12>
 80098b6:	2100      	movs	r1, #0
 80098b8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80098bc:	4620      	mov	r0, r4
 80098be:	4798      	blx	r3
 80098c0:	2000      	movs	r0, #0
 80098c2:	e7e0      	b.n	8009886 <_raise_r+0x12>

080098c4 <raise>:
 80098c4:	4b02      	ldr	r3, [pc, #8]	@ (80098d0 <raise+0xc>)
 80098c6:	4601      	mov	r1, r0
 80098c8:	6818      	ldr	r0, [r3, #0]
 80098ca:	f7ff bfd3 	b.w	8009874 <_raise_r>
 80098ce:	bf00      	nop
 80098d0:	20000018 	.word	0x20000018

080098d4 <_kill_r>:
 80098d4:	b538      	push	{r3, r4, r5, lr}
 80098d6:	4d07      	ldr	r5, [pc, #28]	@ (80098f4 <_kill_r+0x20>)
 80098d8:	2300      	movs	r3, #0
 80098da:	4604      	mov	r4, r0
 80098dc:	4608      	mov	r0, r1
 80098de:	4611      	mov	r1, r2
 80098e0:	602b      	str	r3, [r5, #0]
 80098e2:	f7f8 f85e 	bl	80019a2 <_kill>
 80098e6:	1c43      	adds	r3, r0, #1
 80098e8:	d102      	bne.n	80098f0 <_kill_r+0x1c>
 80098ea:	682b      	ldr	r3, [r5, #0]
 80098ec:	b103      	cbz	r3, 80098f0 <_kill_r+0x1c>
 80098ee:	6023      	str	r3, [r4, #0]
 80098f0:	bd38      	pop	{r3, r4, r5, pc}
 80098f2:	bf00      	nop
 80098f4:	2000043c 	.word	0x2000043c

080098f8 <_getpid_r>:
 80098f8:	f7f8 b84b 	b.w	8001992 <_getpid>

080098fc <__swhatbuf_r>:
 80098fc:	b570      	push	{r4, r5, r6, lr}
 80098fe:	460c      	mov	r4, r1
 8009900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009904:	2900      	cmp	r1, #0
 8009906:	b096      	sub	sp, #88	@ 0x58
 8009908:	4615      	mov	r5, r2
 800990a:	461e      	mov	r6, r3
 800990c:	da0d      	bge.n	800992a <__swhatbuf_r+0x2e>
 800990e:	89a3      	ldrh	r3, [r4, #12]
 8009910:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009914:	f04f 0100 	mov.w	r1, #0
 8009918:	bf14      	ite	ne
 800991a:	2340      	movne	r3, #64	@ 0x40
 800991c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009920:	2000      	movs	r0, #0
 8009922:	6031      	str	r1, [r6, #0]
 8009924:	602b      	str	r3, [r5, #0]
 8009926:	b016      	add	sp, #88	@ 0x58
 8009928:	bd70      	pop	{r4, r5, r6, pc}
 800992a:	466a      	mov	r2, sp
 800992c:	f000 f848 	bl	80099c0 <_fstat_r>
 8009930:	2800      	cmp	r0, #0
 8009932:	dbec      	blt.n	800990e <__swhatbuf_r+0x12>
 8009934:	9901      	ldr	r1, [sp, #4]
 8009936:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800993a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800993e:	4259      	negs	r1, r3
 8009940:	4159      	adcs	r1, r3
 8009942:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009946:	e7eb      	b.n	8009920 <__swhatbuf_r+0x24>

08009948 <__smakebuf_r>:
 8009948:	898b      	ldrh	r3, [r1, #12]
 800994a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800994c:	079d      	lsls	r5, r3, #30
 800994e:	4606      	mov	r6, r0
 8009950:	460c      	mov	r4, r1
 8009952:	d507      	bpl.n	8009964 <__smakebuf_r+0x1c>
 8009954:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009958:	6023      	str	r3, [r4, #0]
 800995a:	6123      	str	r3, [r4, #16]
 800995c:	2301      	movs	r3, #1
 800995e:	6163      	str	r3, [r4, #20]
 8009960:	b003      	add	sp, #12
 8009962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009964:	ab01      	add	r3, sp, #4
 8009966:	466a      	mov	r2, sp
 8009968:	f7ff ffc8 	bl	80098fc <__swhatbuf_r>
 800996c:	9f00      	ldr	r7, [sp, #0]
 800996e:	4605      	mov	r5, r0
 8009970:	4639      	mov	r1, r7
 8009972:	4630      	mov	r0, r6
 8009974:	f7fd fbb8 	bl	80070e8 <_malloc_r>
 8009978:	b948      	cbnz	r0, 800998e <__smakebuf_r+0x46>
 800997a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800997e:	059a      	lsls	r2, r3, #22
 8009980:	d4ee      	bmi.n	8009960 <__smakebuf_r+0x18>
 8009982:	f023 0303 	bic.w	r3, r3, #3
 8009986:	f043 0302 	orr.w	r3, r3, #2
 800998a:	81a3      	strh	r3, [r4, #12]
 800998c:	e7e2      	b.n	8009954 <__smakebuf_r+0xc>
 800998e:	89a3      	ldrh	r3, [r4, #12]
 8009990:	6020      	str	r0, [r4, #0]
 8009992:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009996:	81a3      	strh	r3, [r4, #12]
 8009998:	9b01      	ldr	r3, [sp, #4]
 800999a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800999e:	b15b      	cbz	r3, 80099b8 <__smakebuf_r+0x70>
 80099a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099a4:	4630      	mov	r0, r6
 80099a6:	f000 f81d 	bl	80099e4 <_isatty_r>
 80099aa:	b128      	cbz	r0, 80099b8 <__smakebuf_r+0x70>
 80099ac:	89a3      	ldrh	r3, [r4, #12]
 80099ae:	f023 0303 	bic.w	r3, r3, #3
 80099b2:	f043 0301 	orr.w	r3, r3, #1
 80099b6:	81a3      	strh	r3, [r4, #12]
 80099b8:	89a3      	ldrh	r3, [r4, #12]
 80099ba:	431d      	orrs	r5, r3
 80099bc:	81a5      	strh	r5, [r4, #12]
 80099be:	e7cf      	b.n	8009960 <__smakebuf_r+0x18>

080099c0 <_fstat_r>:
 80099c0:	b538      	push	{r3, r4, r5, lr}
 80099c2:	4d07      	ldr	r5, [pc, #28]	@ (80099e0 <_fstat_r+0x20>)
 80099c4:	2300      	movs	r3, #0
 80099c6:	4604      	mov	r4, r0
 80099c8:	4608      	mov	r0, r1
 80099ca:	4611      	mov	r1, r2
 80099cc:	602b      	str	r3, [r5, #0]
 80099ce:	f7f8 f848 	bl	8001a62 <_fstat>
 80099d2:	1c43      	adds	r3, r0, #1
 80099d4:	d102      	bne.n	80099dc <_fstat_r+0x1c>
 80099d6:	682b      	ldr	r3, [r5, #0]
 80099d8:	b103      	cbz	r3, 80099dc <_fstat_r+0x1c>
 80099da:	6023      	str	r3, [r4, #0]
 80099dc:	bd38      	pop	{r3, r4, r5, pc}
 80099de:	bf00      	nop
 80099e0:	2000043c 	.word	0x2000043c

080099e4 <_isatty_r>:
 80099e4:	b538      	push	{r3, r4, r5, lr}
 80099e6:	4d06      	ldr	r5, [pc, #24]	@ (8009a00 <_isatty_r+0x1c>)
 80099e8:	2300      	movs	r3, #0
 80099ea:	4604      	mov	r4, r0
 80099ec:	4608      	mov	r0, r1
 80099ee:	602b      	str	r3, [r5, #0]
 80099f0:	f7f8 f847 	bl	8001a82 <_isatty>
 80099f4:	1c43      	adds	r3, r0, #1
 80099f6:	d102      	bne.n	80099fe <_isatty_r+0x1a>
 80099f8:	682b      	ldr	r3, [r5, #0]
 80099fa:	b103      	cbz	r3, 80099fe <_isatty_r+0x1a>
 80099fc:	6023      	str	r3, [r4, #0]
 80099fe:	bd38      	pop	{r3, r4, r5, pc}
 8009a00:	2000043c 	.word	0x2000043c

08009a04 <sqrt>:
 8009a04:	b538      	push	{r3, r4, r5, lr}
 8009a06:	ed2d 8b02 	vpush	{d8}
 8009a0a:	ec55 4b10 	vmov	r4, r5, d0
 8009a0e:	f000 f825 	bl	8009a5c <__ieee754_sqrt>
 8009a12:	4622      	mov	r2, r4
 8009a14:	462b      	mov	r3, r5
 8009a16:	4620      	mov	r0, r4
 8009a18:	4629      	mov	r1, r5
 8009a1a:	eeb0 8a40 	vmov.f32	s16, s0
 8009a1e:	eef0 8a60 	vmov.f32	s17, s1
 8009a22:	f7f7 f883 	bl	8000b2c <__aeabi_dcmpun>
 8009a26:	b990      	cbnz	r0, 8009a4e <sqrt+0x4a>
 8009a28:	2200      	movs	r2, #0
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	4620      	mov	r0, r4
 8009a2e:	4629      	mov	r1, r5
 8009a30:	f7f7 f854 	bl	8000adc <__aeabi_dcmplt>
 8009a34:	b158      	cbz	r0, 8009a4e <sqrt+0x4a>
 8009a36:	f7fc fc61 	bl	80062fc <__errno>
 8009a3a:	2321      	movs	r3, #33	@ 0x21
 8009a3c:	6003      	str	r3, [r0, #0]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	2300      	movs	r3, #0
 8009a42:	4610      	mov	r0, r2
 8009a44:	4619      	mov	r1, r3
 8009a46:	f7f6 ff01 	bl	800084c <__aeabi_ddiv>
 8009a4a:	ec41 0b18 	vmov	d8, r0, r1
 8009a4e:	eeb0 0a48 	vmov.f32	s0, s16
 8009a52:	eef0 0a68 	vmov.f32	s1, s17
 8009a56:	ecbd 8b02 	vpop	{d8}
 8009a5a:	bd38      	pop	{r3, r4, r5, pc}

08009a5c <__ieee754_sqrt>:
 8009a5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a60:	4a68      	ldr	r2, [pc, #416]	@ (8009c04 <__ieee754_sqrt+0x1a8>)
 8009a62:	ec55 4b10 	vmov	r4, r5, d0
 8009a66:	43aa      	bics	r2, r5
 8009a68:	462b      	mov	r3, r5
 8009a6a:	4621      	mov	r1, r4
 8009a6c:	d110      	bne.n	8009a90 <__ieee754_sqrt+0x34>
 8009a6e:	4622      	mov	r2, r4
 8009a70:	4620      	mov	r0, r4
 8009a72:	4629      	mov	r1, r5
 8009a74:	f7f6 fdc0 	bl	80005f8 <__aeabi_dmul>
 8009a78:	4602      	mov	r2, r0
 8009a7a:	460b      	mov	r3, r1
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	4629      	mov	r1, r5
 8009a80:	f7f6 fc04 	bl	800028c <__adddf3>
 8009a84:	4604      	mov	r4, r0
 8009a86:	460d      	mov	r5, r1
 8009a88:	ec45 4b10 	vmov	d0, r4, r5
 8009a8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a90:	2d00      	cmp	r5, #0
 8009a92:	dc0e      	bgt.n	8009ab2 <__ieee754_sqrt+0x56>
 8009a94:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8009a98:	4322      	orrs	r2, r4
 8009a9a:	d0f5      	beq.n	8009a88 <__ieee754_sqrt+0x2c>
 8009a9c:	b19d      	cbz	r5, 8009ac6 <__ieee754_sqrt+0x6a>
 8009a9e:	4622      	mov	r2, r4
 8009aa0:	4620      	mov	r0, r4
 8009aa2:	4629      	mov	r1, r5
 8009aa4:	f7f6 fbf0 	bl	8000288 <__aeabi_dsub>
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	460b      	mov	r3, r1
 8009aac:	f7f6 fece 	bl	800084c <__aeabi_ddiv>
 8009ab0:	e7e8      	b.n	8009a84 <__ieee754_sqrt+0x28>
 8009ab2:	152a      	asrs	r2, r5, #20
 8009ab4:	d115      	bne.n	8009ae2 <__ieee754_sqrt+0x86>
 8009ab6:	2000      	movs	r0, #0
 8009ab8:	e009      	b.n	8009ace <__ieee754_sqrt+0x72>
 8009aba:	0acb      	lsrs	r3, r1, #11
 8009abc:	3a15      	subs	r2, #21
 8009abe:	0549      	lsls	r1, r1, #21
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d0fa      	beq.n	8009aba <__ieee754_sqrt+0x5e>
 8009ac4:	e7f7      	b.n	8009ab6 <__ieee754_sqrt+0x5a>
 8009ac6:	462a      	mov	r2, r5
 8009ac8:	e7fa      	b.n	8009ac0 <__ieee754_sqrt+0x64>
 8009aca:	005b      	lsls	r3, r3, #1
 8009acc:	3001      	adds	r0, #1
 8009ace:	02dc      	lsls	r4, r3, #11
 8009ad0:	d5fb      	bpl.n	8009aca <__ieee754_sqrt+0x6e>
 8009ad2:	1e44      	subs	r4, r0, #1
 8009ad4:	1b12      	subs	r2, r2, r4
 8009ad6:	f1c0 0420 	rsb	r4, r0, #32
 8009ada:	fa21 f404 	lsr.w	r4, r1, r4
 8009ade:	4323      	orrs	r3, r4
 8009ae0:	4081      	lsls	r1, r0
 8009ae2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ae6:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8009aea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009aee:	07d2      	lsls	r2, r2, #31
 8009af0:	bf5c      	itt	pl
 8009af2:	005b      	lslpl	r3, r3, #1
 8009af4:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8009af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009afc:	bf58      	it	pl
 8009afe:	0049      	lslpl	r1, r1, #1
 8009b00:	2600      	movs	r6, #0
 8009b02:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8009b06:	106d      	asrs	r5, r5, #1
 8009b08:	0049      	lsls	r1, r1, #1
 8009b0a:	2016      	movs	r0, #22
 8009b0c:	4632      	mov	r2, r6
 8009b0e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8009b12:	1917      	adds	r7, r2, r4
 8009b14:	429f      	cmp	r7, r3
 8009b16:	bfde      	ittt	le
 8009b18:	193a      	addle	r2, r7, r4
 8009b1a:	1bdb      	suble	r3, r3, r7
 8009b1c:	1936      	addle	r6, r6, r4
 8009b1e:	0fcf      	lsrs	r7, r1, #31
 8009b20:	3801      	subs	r0, #1
 8009b22:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8009b26:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009b2a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009b2e:	d1f0      	bne.n	8009b12 <__ieee754_sqrt+0xb6>
 8009b30:	4604      	mov	r4, r0
 8009b32:	2720      	movs	r7, #32
 8009b34:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	eb00 0e0c 	add.w	lr, r0, ip
 8009b3e:	db02      	blt.n	8009b46 <__ieee754_sqrt+0xea>
 8009b40:	d113      	bne.n	8009b6a <__ieee754_sqrt+0x10e>
 8009b42:	458e      	cmp	lr, r1
 8009b44:	d811      	bhi.n	8009b6a <__ieee754_sqrt+0x10e>
 8009b46:	f1be 0f00 	cmp.w	lr, #0
 8009b4a:	eb0e 000c 	add.w	r0, lr, ip
 8009b4e:	da42      	bge.n	8009bd6 <__ieee754_sqrt+0x17a>
 8009b50:	2800      	cmp	r0, #0
 8009b52:	db40      	blt.n	8009bd6 <__ieee754_sqrt+0x17a>
 8009b54:	f102 0801 	add.w	r8, r2, #1
 8009b58:	1a9b      	subs	r3, r3, r2
 8009b5a:	458e      	cmp	lr, r1
 8009b5c:	bf88      	it	hi
 8009b5e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009b62:	eba1 010e 	sub.w	r1, r1, lr
 8009b66:	4464      	add	r4, ip
 8009b68:	4642      	mov	r2, r8
 8009b6a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8009b6e:	3f01      	subs	r7, #1
 8009b70:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8009b74:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009b78:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8009b7c:	d1dc      	bne.n	8009b38 <__ieee754_sqrt+0xdc>
 8009b7e:	4319      	orrs	r1, r3
 8009b80:	d01b      	beq.n	8009bba <__ieee754_sqrt+0x15e>
 8009b82:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8009c08 <__ieee754_sqrt+0x1ac>
 8009b86:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8009c0c <__ieee754_sqrt+0x1b0>
 8009b8a:	e9da 0100 	ldrd	r0, r1, [sl]
 8009b8e:	e9db 2300 	ldrd	r2, r3, [fp]
 8009b92:	f7f6 fb79 	bl	8000288 <__aeabi_dsub>
 8009b96:	e9da 8900 	ldrd	r8, r9, [sl]
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	460b      	mov	r3, r1
 8009b9e:	4640      	mov	r0, r8
 8009ba0:	4649      	mov	r1, r9
 8009ba2:	f7f6 ffa5 	bl	8000af0 <__aeabi_dcmple>
 8009ba6:	b140      	cbz	r0, 8009bba <__ieee754_sqrt+0x15e>
 8009ba8:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009bac:	e9da 0100 	ldrd	r0, r1, [sl]
 8009bb0:	e9db 2300 	ldrd	r2, r3, [fp]
 8009bb4:	d111      	bne.n	8009bda <__ieee754_sqrt+0x17e>
 8009bb6:	3601      	adds	r6, #1
 8009bb8:	463c      	mov	r4, r7
 8009bba:	1072      	asrs	r2, r6, #1
 8009bbc:	0863      	lsrs	r3, r4, #1
 8009bbe:	07f1      	lsls	r1, r6, #31
 8009bc0:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8009bc4:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8009bc8:	bf48      	it	mi
 8009bca:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8009bce:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	e756      	b.n	8009a84 <__ieee754_sqrt+0x28>
 8009bd6:	4690      	mov	r8, r2
 8009bd8:	e7be      	b.n	8009b58 <__ieee754_sqrt+0xfc>
 8009bda:	f7f6 fb57 	bl	800028c <__adddf3>
 8009bde:	e9da 8900 	ldrd	r8, r9, [sl]
 8009be2:	4602      	mov	r2, r0
 8009be4:	460b      	mov	r3, r1
 8009be6:	4640      	mov	r0, r8
 8009be8:	4649      	mov	r1, r9
 8009bea:	f7f6 ff77 	bl	8000adc <__aeabi_dcmplt>
 8009bee:	b120      	cbz	r0, 8009bfa <__ieee754_sqrt+0x19e>
 8009bf0:	1ca0      	adds	r0, r4, #2
 8009bf2:	bf08      	it	eq
 8009bf4:	3601      	addeq	r6, #1
 8009bf6:	3402      	adds	r4, #2
 8009bf8:	e7df      	b.n	8009bba <__ieee754_sqrt+0x15e>
 8009bfa:	1c63      	adds	r3, r4, #1
 8009bfc:	f023 0401 	bic.w	r4, r3, #1
 8009c00:	e7db      	b.n	8009bba <__ieee754_sqrt+0x15e>
 8009c02:	bf00      	nop
 8009c04:	7ff00000 	.word	0x7ff00000
 8009c08:	200001e0 	.word	0x200001e0
 8009c0c:	200001d8 	.word	0x200001d8

08009c10 <_init>:
 8009c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c12:	bf00      	nop
 8009c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c16:	bc08      	pop	{r3}
 8009c18:	469e      	mov	lr, r3
 8009c1a:	4770      	bx	lr

08009c1c <_fini>:
 8009c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c1e:	bf00      	nop
 8009c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c22:	bc08      	pop	{r3}
 8009c24:	469e      	mov	lr, r3
 8009c26:	4770      	bx	lr
