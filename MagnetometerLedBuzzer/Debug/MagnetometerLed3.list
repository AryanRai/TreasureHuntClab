
MagnetometerLed3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009808  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f0  08009998  08009998  0000a998  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e88  08009e88  0000b1e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009e88  08009e88  0000ae88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e90  08009e90  0000b1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e90  08009e90  0000ae90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009e94  08009e94  0000ae94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08009e98  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1e8  2**0
                  CONTENTS
 10 .bss          00000264  200001e8  200001e8  0000b1e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000044c  2000044c  0000b1e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dc03  00000000  00000000  0000b218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002183  00000000  00000000  00018e1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e10  00000000  00000000  0001afa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aea  00000000  00000000  0001bdb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e5e5  00000000  00000000  0001c89a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011e83  00000000  00000000  0003ae7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ba19f  00000000  00000000  0004cd02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00106ea1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005098  00000000  00000000  00106ee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  0010bf7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009980 	.word	0x08009980

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08009980 	.word	0x08009980

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <QMC5883L_Init>:

/**
  * @brief Initialize QMC5883L magnetometer
  * @retval HAL status
  */
HAL_StatusTypeDef QMC5883L_Init(void) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af04      	add	r7, sp, #16
    uint8_t data;
    HAL_StatusTypeDef ret;

    // Reset the device
    data = 0x80; // Soft reset
 8000cfa:	2380      	movs	r3, #128	@ 0x80
 8000cfc:	71bb      	strb	r3, [r7, #6]
    ret = HAL_I2C_Mem_Write(&hi2c1, QMC5883L_ADDR, 0x0A, 1, &data, 1, HAL_MAX_DELAY);
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000d02:	9302      	str	r3, [sp, #8]
 8000d04:	2301      	movs	r3, #1
 8000d06:	9301      	str	r3, [sp, #4]
 8000d08:	1dbb      	adds	r3, r7, #6
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	220a      	movs	r2, #10
 8000d10:	211a      	movs	r1, #26
 8000d12:	4814      	ldr	r0, [pc, #80]	@ (8000d64 <QMC5883L_Init+0x70>)
 8000d14:	f001 f980 	bl	8002018 <HAL_I2C_Mem_Write>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK) return ret;
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <QMC5883L_Init+0x32>
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	e019      	b.n	8000d5a <QMC5883L_Init+0x66>
    HAL_Delay(10);
 8000d26:	200a      	movs	r0, #10
 8000d28:	f000 fe56 	bl	80019d8 <HAL_Delay>

    // Configure: Continuous mode, 200 Hz, 8G range, 512 oversampling
    data = 0x1D; // 0b00011101: MODE=01 (continuous), ODR=11 (200 Hz), RNG=10 (8G), OSR=11 (512)
 8000d2c:	231d      	movs	r3, #29
 8000d2e:	71bb      	strb	r3, [r7, #6]
    ret = HAL_I2C_Mem_Write(&hi2c1, QMC5883L_ADDR, QMC5883L_REG_CTRL1, 1, &data, 1, HAL_MAX_DELAY);
 8000d30:	f04f 33ff 	mov.w	r3, #4294967295
 8000d34:	9302      	str	r3, [sp, #8]
 8000d36:	2301      	movs	r3, #1
 8000d38:	9301      	str	r3, [sp, #4]
 8000d3a:	1dbb      	adds	r3, r7, #6
 8000d3c:	9300      	str	r3, [sp, #0]
 8000d3e:	2301      	movs	r3, #1
 8000d40:	2209      	movs	r2, #9
 8000d42:	211a      	movs	r1, #26
 8000d44:	4807      	ldr	r0, [pc, #28]	@ (8000d64 <QMC5883L_Init+0x70>)
 8000d46:	f001 f967 	bl	8002018 <HAL_I2C_Mem_Write>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK) return ret;
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <QMC5883L_Init+0x64>
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	e000      	b.n	8000d5a <QMC5883L_Init+0x66>

    return HAL_OK;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000204 	.word	0x20000204

08000d68 <QMC5883L_ReadXYZ>:
/**
  * @brief Read X, Y, Z values from QMC5883L
  * @param x, y, z: Pointers to store magnetometer data
  * @retval HAL status
  */
HAL_StatusTypeDef QMC5883L_ReadXYZ(int16_t *x, int16_t *y, int16_t *z) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08c      	sub	sp, #48	@ 0x30
 8000d6c:	af04      	add	r7, sp, #16
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
    uint8_t status;
    HAL_StatusTypeDef ret;

    // Check if data is ready (DRDY bit)
    do {
        ret = HAL_I2C_Mem_Read(&hi2c1, QMC5883L_ADDR, QMC5883L_REG_STATUS, 1, &status, 1, HAL_MAX_DELAY);
 8000d74:	f04f 33ff 	mov.w	r3, #4294967295
 8000d78:	9302      	str	r3, [sp, #8]
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	9301      	str	r3, [sp, #4]
 8000d7e:	f107 0317 	add.w	r3, r7, #23
 8000d82:	9300      	str	r3, [sp, #0]
 8000d84:	2301      	movs	r3, #1
 8000d86:	2206      	movs	r2, #6
 8000d88:	211a      	movs	r1, #26
 8000d8a:	4822      	ldr	r0, [pc, #136]	@ (8000e14 <QMC5883L_ReadXYZ+0xac>)
 8000d8c:	f001 fa58 	bl	8002240 <HAL_I2C_Mem_Read>
 8000d90:	4603      	mov	r3, r0
 8000d92:	77fb      	strb	r3, [r7, #31]
        if (ret != HAL_OK) return ret;
 8000d94:	7ffb      	ldrb	r3, [r7, #31]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <QMC5883L_ReadXYZ+0x36>
 8000d9a:	7ffb      	ldrb	r3, [r7, #31]
 8000d9c:	e035      	b.n	8000e0a <QMC5883L_ReadXYZ+0xa2>
    } while (!(status & 0x01)); // Wait for DRDY = 1
 8000d9e:	7dfb      	ldrb	r3, [r7, #23]
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d0e5      	beq.n	8000d74 <QMC5883L_ReadXYZ+0xc>

    // Read 6 bytes (X_LSB, X_MSB, Y_LSB, Y_MSB, Z_LSB, Z_MSB)
    ret = HAL_I2C_Mem_Read(&hi2c1, QMC5883L_ADDR, QMC5883L_REG_X_LSB, 1, data, 6, HAL_MAX_DELAY);
 8000da8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dac:	9302      	str	r3, [sp, #8]
 8000dae:	2306      	movs	r3, #6
 8000db0:	9301      	str	r3, [sp, #4]
 8000db2:	f107 0318 	add.w	r3, r7, #24
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	2301      	movs	r3, #1
 8000dba:	2200      	movs	r2, #0
 8000dbc:	211a      	movs	r1, #26
 8000dbe:	4815      	ldr	r0, [pc, #84]	@ (8000e14 <QMC5883L_ReadXYZ+0xac>)
 8000dc0:	f001 fa3e 	bl	8002240 <HAL_I2C_Mem_Read>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	77fb      	strb	r3, [r7, #31]
    if (ret != HAL_OK) return ret;
 8000dc8:	7ffb      	ldrb	r3, [r7, #31]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <QMC5883L_ReadXYZ+0x6a>
 8000dce:	7ffb      	ldrb	r3, [r7, #31]
 8000dd0:	e01b      	b.n	8000e0a <QMC5883L_ReadXYZ+0xa2>

    // Combine bytes (2’s complement)
    *x = (int16_t)(data[1] << 8 | data[0]);
 8000dd2:	7e7b      	ldrb	r3, [r7, #25]
 8000dd4:	021b      	lsls	r3, r3, #8
 8000dd6:	b21a      	sxth	r2, r3
 8000dd8:	7e3b      	ldrb	r3, [r7, #24]
 8000dda:	b21b      	sxth	r3, r3
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	b21a      	sxth	r2, r3
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)(data[3] << 8 | data[2]);
 8000de4:	7efb      	ldrb	r3, [r7, #27]
 8000de6:	021b      	lsls	r3, r3, #8
 8000de8:	b21a      	sxth	r2, r3
 8000dea:	7ebb      	ldrb	r3, [r7, #26]
 8000dec:	b21b      	sxth	r3, r3
 8000dee:	4313      	orrs	r3, r2
 8000df0:	b21a      	sxth	r2, r3
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)(data[5] << 8 | data[4]);
 8000df6:	7f7b      	ldrb	r3, [r7, #29]
 8000df8:	021b      	lsls	r3, r3, #8
 8000dfa:	b21a      	sxth	r2, r3
 8000dfc:	7f3b      	ldrb	r3, [r7, #28]
 8000dfe:	b21b      	sxth	r3, r3
 8000e00:	4313      	orrs	r3, r2
 8000e02:	b21a      	sxth	r2, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	801a      	strh	r2, [r3, #0]

    return HAL_OK;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3720      	adds	r7, #32
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000204 	.word	0x20000204

08000e18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b0a0      	sub	sp, #128	@ 0x80
 8000e1c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  int16_t x, y, z;
  float magnitude;
  uint32_t dutyCycle = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	673b      	str	r3, [r7, #112]	@ 0x70
  const uint32_t maxDuty = 7999; // Matches TIM1 and TIM2 Period
 8000e22:	f641 733f 	movw	r3, #7999	@ 0x1f3f
 8000e26:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e28:	f000 fd70 	bl	800190c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e2c:	f000 f8f6 	bl	800101c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e30:	f000 fa72 	bl	8001318 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e34:	f000 f946 	bl	80010c4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000e38:	f000 f984 	bl	8001144 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000e3c:	f000 fa12 	bl	8001264 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Initialize USART1 using custom serial code
  enableUSART1();
 8000e40:	f000 fae2 	bl	8001408 <enableUSART1>

  // Initialize QMC5883L
  ret = QMC5883L_Init();
 8000e44:	f7ff ff56 	bl	8000cf4 <QMC5883L_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
  if (ret != HAL_OK) {
 8000e4e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d00c      	beq.n	8000e70 <main+0x58>
      sprintf(buffer, "QMC5883L Init Failed: %d\r\n", ret);
 8000e56:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8000e5a:	463b      	mov	r3, r7
 8000e5c:	4964      	ldr	r1, [pc, #400]	@ (8000ff0 <main+0x1d8>)
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f005 f850 	bl	8005f04 <siprintf>
      send_string(buffer);
 8000e64:	463b      	mov	r3, r7
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 fb08 	bl	800147c <send_string>
      while (1);
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <main+0x54>
  }

  // Start PWM on TIM1 Channel 3 (LED) and TIM2 Channel 3 (Buzzer)
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000e70:	2108      	movs	r1, #8
 8000e72:	4860      	ldr	r0, [pc, #384]	@ (8000ff4 <main+0x1dc>)
 8000e74:	f003 fa6e 	bl	8004354 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000e78:	2108      	movs	r1, #8
 8000e7a:	485f      	ldr	r0, [pc, #380]	@ (8000ff8 <main+0x1e0>)
 8000e7c:	f003 fa6a 	bl	8004354 <HAL_TIM_PWM_Start>

  // Send startup message
  sprintf(buffer, "QMC5883L Initialized, LED and Buzzer PWM Started\r\n");
 8000e80:	463b      	mov	r3, r7
 8000e82:	495e      	ldr	r1, [pc, #376]	@ (8000ffc <main+0x1e4>)
 8000e84:	4618      	mov	r0, r3
 8000e86:	f005 f83d 	bl	8005f04 <siprintf>
  send_string(buffer);
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f000 faf5 	bl	800147c <send_string>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // Increment timers
    uartTimer += 10;
 8000e92:	4b5b      	ldr	r3, [pc, #364]	@ (8001000 <main+0x1e8>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	330a      	adds	r3, #10
 8000e98:	4a59      	ldr	r2, [pc, #356]	@ (8001000 <main+0x1e8>)
 8000e9a:	6013      	str	r3, [r2, #0]
    magTimer += 10;
 8000e9c:	4b59      	ldr	r3, [pc, #356]	@ (8001004 <main+0x1ec>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	330a      	adds	r3, #10
 8000ea2:	4a58      	ldr	r2, [pc, #352]	@ (8001004 <main+0x1ec>)
 8000ea4:	6013      	str	r3, [r2, #0]

    // Read magnetometer every 200 ms
    if (magTimer >= 200) {
 8000ea6:	4b57      	ldr	r3, [pc, #348]	@ (8001004 <main+0x1ec>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2bc7      	cmp	r3, #199	@ 0xc7
 8000eac:	d97e      	bls.n	8000fac <main+0x194>
        ret = QMC5883L_ReadXYZ(&x, &y, &z);
 8000eae:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8000eb2:	f107 0166 	add.w	r1, r7, #102	@ 0x66
 8000eb6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff ff54 	bl	8000d68 <QMC5883L_ReadXYZ>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
        if (ret == HAL_OK) {
 8000ec6:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d160      	bne.n	8000f90 <main+0x178>
            // Calculate magnetic field magnitude
            magnitude = sqrt((float)(x * x + y * y + z * z));
 8000ece:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	@ 0x68
 8000ed2:	f9b7 2068 	ldrsh.w	r2, [r7, #104]	@ 0x68
 8000ed6:	fb03 f202 	mul.w	r2, r3, r2
 8000eda:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	@ 0x66
 8000ede:	f9b7 1066 	ldrsh.w	r1, [r7, #102]	@ 0x66
 8000ee2:	fb01 f303 	mul.w	r3, r1, r3
 8000ee6:	441a      	add	r2, r3
 8000ee8:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	@ 0x64
 8000eec:	f9b7 1064 	ldrsh.w	r1, [r7, #100]	@ 0x64
 8000ef0:	fb01 f303 	mul.w	r3, r1, r3
 8000ef4:	4413      	add	r3, r2
 8000ef6:	ee07 3a90 	vmov	s15, r3
 8000efa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000efe:	ee17 0a90 	vmov	r0, s15
 8000f02:	f7ff fb21 	bl	8000548 <__aeabi_f2d>
 8000f06:	4602      	mov	r2, r0
 8000f08:	460b      	mov	r3, r1
 8000f0a:	ec43 2b10 	vmov	d0, r2, r3
 8000f0e:	f008 fc31 	bl	8009774 <sqrt>
 8000f12:	ec53 2b10 	vmov	r2, r3, d0
 8000f16:	4610      	mov	r0, r2
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f7ff fe65 	bl	8000be8 <__aeabi_d2f>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	677b      	str	r3, [r7, #116]	@ 0x74

            // Map magnitude to duty cycle (inverse relationship)
            if (magnitude <= MAG_MIN_THRESHOLD) {
 8000f22:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8000f26:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001008 <main+0x1f0>
 8000f2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f32:	d802      	bhi.n	8000f3a <main+0x122>
                dutyCycle = maxDuty; // Max brightness/loudness
 8000f34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000f36:	673b      	str	r3, [r7, #112]	@ 0x70
 8000f38:	e021      	b.n	8000f7e <main+0x166>
            } else if (magnitude >= MAG_MAX_THRESHOLD) {
 8000f3a:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8000f3e:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800100c <main+0x1f4>
 8000f42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f4a:	db02      	blt.n	8000f52 <main+0x13a>
                dutyCycle = 0; // Min brightness/loudness
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	673b      	str	r3, [r7, #112]	@ 0x70
 8000f50:	e015      	b.n	8000f7e <main+0x166>
            } else {
                // Linear interpolation: dutyCycle = maxDuty * (10000 - mag) / (10000 - 3000)
                dutyCycle = maxDuty * (MAG_MAX_THRESHOLD - magnitude) / (MAG_MAX_THRESHOLD - MAG_MIN_THRESHOLD);
 8000f52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000f54:	ee07 3a90 	vmov	s15, r3
 8000f58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f5c:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 800100c <main+0x1f4>
 8000f60:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8000f64:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000f68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f6c:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8001010 <main+0x1f8>
 8000f70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f78:	ee17 3a90 	vmov	r3, s15
 8000f7c:	673b      	str	r3, [r7, #112]	@ 0x70
            }

            // Set PWM duty cycle for both LED and buzzer
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, dutyCycle); // LED
 8000f7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff4 <main+0x1dc>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000f84:	63da      	str	r2, [r3, #60]	@ 0x3c
            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, dutyCycle); // Buzzer
 8000f86:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff8 <main+0x1e0>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000f8c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f8e:	e00a      	b.n	8000fa6 <main+0x18e>
        } else {
            // Report error but continue
            sprintf(buffer, "Magnetometer Read Error: %d\r\n", ret);
 8000f90:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8000f94:	463b      	mov	r3, r7
 8000f96:	491f      	ldr	r1, [pc, #124]	@ (8001014 <main+0x1fc>)
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f004 ffb3 	bl	8005f04 <siprintf>
            send_string(buffer);
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 fa6b 	bl	800147c <send_string>
        }
        magTimer = 0; // Reset timer
 8000fa6:	4b17      	ldr	r3, [pc, #92]	@ (8001004 <main+0x1ec>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
    }

    // Send UART message every 1 second
    if (uartTimer >= UART_TX_PERIOD_MS) {
 8000fac:	4b14      	ldr	r3, [pc, #80]	@ (8001000 <main+0x1e8>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000fb4:	d317      	bcc.n	8000fe6 <main+0x1ce>
        sprintf(buffer, "DEBUG: Mag: %.2f, Duty: %lu%%\r\n", magnitude, (dutyCycle * 100) / maxDuty);
 8000fb6:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8000fb8:	f7ff fac6 	bl	8000548 <__aeabi_f2d>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8000fc2:	2064      	movs	r0, #100	@ 0x64
 8000fc4:	fb01 f000 	mul.w	r0, r1, r0
 8000fc8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8000fca:	fbb0 f1f1 	udiv	r1, r0, r1
 8000fce:	4638      	mov	r0, r7
 8000fd0:	9100      	str	r1, [sp, #0]
 8000fd2:	4911      	ldr	r1, [pc, #68]	@ (8001018 <main+0x200>)
 8000fd4:	f004 ff96 	bl	8005f04 <siprintf>
        send_string(buffer);
 8000fd8:	463b      	mov	r3, r7
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 fa4e 	bl	800147c <send_string>
        uartTimer = 0; // Reset timer
 8000fe0:	4b07      	ldr	r3, [pc, #28]	@ (8001000 <main+0x1e8>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
    }

    // Small delay for loop stability
    HAL_Delay(10);
 8000fe6:	200a      	movs	r0, #10
 8000fe8:	f000 fcf6 	bl	80019d8 <HAL_Delay>
    uartTimer += 10;
 8000fec:	e751      	b.n	8000e92 <main+0x7a>
 8000fee:	bf00      	nop
 8000ff0:	08009998 	.word	0x08009998
 8000ff4:	20000258 	.word	0x20000258
 8000ff8:	200002a4 	.word	0x200002a4
 8000ffc:	080099b4 	.word	0x080099b4
 8001000:	200002f0 	.word	0x200002f0
 8001004:	200002f4 	.word	0x200002f4
 8001008:	453b8000 	.word	0x453b8000
 800100c:	461c4000 	.word	0x461c4000
 8001010:	45dac000 	.word	0x45dac000
 8001014:	080099e8 	.word	0x080099e8
 8001018:	08009a08 	.word	0x08009a08

0800101c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b09e      	sub	sp, #120	@ 0x78
 8001020:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001022:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001026:	2228      	movs	r2, #40	@ 0x28
 8001028:	2100      	movs	r1, #0
 800102a:	4618      	mov	r0, r3
 800102c:	f004 ffcd 	bl	8005fca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001030:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001040:	463b      	mov	r3, r7
 8001042:	223c      	movs	r2, #60	@ 0x3c
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f004 ffbf 	bl	8005fca <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800104c:	2302      	movs	r3, #2
 800104e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001050:	2301      	movs	r3, #1
 8001052:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001054:	2310      	movs	r3, #16
 8001056:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001058:	2300      	movs	r3, #0
 800105a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800105c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001060:	4618      	mov	r0, r3
 8001062:	f001 fd61 	bl	8002b28 <HAL_RCC_OscConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800106c:	f000 f9c6 	bl	80013fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001070:	230f      	movs	r3, #15
 8001072:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001074:	2300      	movs	r3, #0
 8001076:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001078:	2300      	movs	r3, #0
 800107a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800107c:	2300      	movs	r3, #0
 800107e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001080:	2300      	movs	r3, #0
 8001082:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001084:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f002 fd8a 	bl	8003ba4 <HAL_RCC_ClockConfig>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001096:	f000 f9b1 	bl	80013fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1;
 800109a:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 800109e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80010a4:	2300      	movs	r3, #0
 80010a6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010a8:	463b      	mov	r3, r7
 80010aa:	4618      	mov	r0, r3
 80010ac:	f002 ff4a 	bl	8003f44 <HAL_RCCEx_PeriphCLKConfig>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80010b6:	f000 f9a1 	bl	80013fc <Error_Handler>
  }
}
 80010ba:	bf00      	nop
 80010bc:	3778      	adds	r7, #120	@ 0x78
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001138 <MX_I2C1_Init+0x74>)
 80010ca:	4a1c      	ldr	r2, [pc, #112]	@ (800113c <MX_I2C1_Init+0x78>)
 80010cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B; // 100 kHz for 8 MHz HSI
 80010ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001138 <MX_I2C1_Init+0x74>)
 80010d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001140 <MX_I2C1_Init+0x7c>)
 80010d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010d4:	4b18      	ldr	r3, [pc, #96]	@ (8001138 <MX_I2C1_Init+0x74>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010da:	4b17      	ldr	r3, [pc, #92]	@ (8001138 <MX_I2C1_Init+0x74>)
 80010dc:	2201      	movs	r2, #1
 80010de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010e0:	4b15      	ldr	r3, [pc, #84]	@ (8001138 <MX_I2C1_Init+0x74>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010e6:	4b14      	ldr	r3, [pc, #80]	@ (8001138 <MX_I2C1_Init+0x74>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010ec:	4b12      	ldr	r3, [pc, #72]	@ (8001138 <MX_I2C1_Init+0x74>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010f2:	4b11      	ldr	r3, [pc, #68]	@ (8001138 <MX_I2C1_Init+0x74>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001138 <MX_I2C1_Init+0x74>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010fe:	480e      	ldr	r0, [pc, #56]	@ (8001138 <MX_I2C1_Init+0x74>)
 8001100:	f000 feee 	bl	8001ee0 <HAL_I2C_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800110a:	f000 f977 	bl	80013fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800110e:	2100      	movs	r1, #0
 8001110:	4809      	ldr	r0, [pc, #36]	@ (8001138 <MX_I2C1_Init+0x74>)
 8001112:	f001 fc71 	bl	80029f8 <HAL_I2CEx_ConfigAnalogFilter>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800111c:	f000 f96e 	bl	80013fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001120:	2100      	movs	r1, #0
 8001122:	4805      	ldr	r0, [pc, #20]	@ (8001138 <MX_I2C1_Init+0x74>)
 8001124:	f001 fcb3 	bl	8002a8e <HAL_I2CEx_ConfigDigitalFilter>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800112e:	f000 f965 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000204 	.word	0x20000204
 800113c:	40005400 	.word	0x40005400
 8001140:	00201d2b 	.word	0x00201d2b

08001144 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b096      	sub	sp, #88	@ 0x58
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_Init 0 */
  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800114a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001156:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
 8001164:	611a      	str	r2, [r3, #16]
 8001166:	615a      	str	r2, [r3, #20]
 8001168:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	222c      	movs	r2, #44	@ 0x2c
 800116e:	2100      	movs	r1, #0
 8001170:	4618      	mov	r0, r3
 8001172:	f004 ff2a 	bl	8005fca <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001176:	4b39      	ldr	r3, [pc, #228]	@ (800125c <MX_TIM1_Init+0x118>)
 8001178:	4a39      	ldr	r2, [pc, #228]	@ (8001260 <MX_TIM1_Init+0x11c>)
 800117a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0; // 8 MHz timer clock
 800117c:	4b37      	ldr	r3, [pc, #220]	@ (800125c <MX_TIM1_Init+0x118>)
 800117e:	2200      	movs	r2, #0
 8001180:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001182:	4b36      	ldr	r3, [pc, #216]	@ (800125c <MX_TIM1_Init+0x118>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7999; // PWM frequency = 8 MHz / (7999 + 1) = 1 kHz
 8001188:	4b34      	ldr	r3, [pc, #208]	@ (800125c <MX_TIM1_Init+0x118>)
 800118a:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800118e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001190:	4b32      	ldr	r3, [pc, #200]	@ (800125c <MX_TIM1_Init+0x118>)
 8001192:	2200      	movs	r2, #0
 8001194:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001196:	4b31      	ldr	r3, [pc, #196]	@ (800125c <MX_TIM1_Init+0x118>)
 8001198:	2200      	movs	r2, #0
 800119a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE; // Enable preload
 800119c:	4b2f      	ldr	r3, [pc, #188]	@ (800125c <MX_TIM1_Init+0x118>)
 800119e:	2280      	movs	r2, #128	@ 0x80
 80011a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011a2:	482e      	ldr	r0, [pc, #184]	@ (800125c <MX_TIM1_Init+0x118>)
 80011a4:	f003 f87e 	bl	80042a4 <HAL_TIM_PWM_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80011ae:	f000 f925 	bl	80013fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b2:	2300      	movs	r3, #0
 80011b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011b6:	2300      	movs	r3, #0
 80011b8:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011be:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80011c2:	4619      	mov	r1, r3
 80011c4:	4825      	ldr	r0, [pc, #148]	@ (800125c <MX_TIM1_Init+0x118>)
 80011c6:	f003 fe71 	bl	8004eac <HAL_TIMEx_MasterConfigSynchronization>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80011d0:	f000 f914 	bl	80013fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011d4:	2360      	movs	r3, #96	@ 0x60
 80011d6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0; // Initial duty cycle (0%)
 80011d8:	2300      	movs	r3, #0
 80011da:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011dc:	2300      	movs	r3, #0
 80011de:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011e0:	2300      	movs	r3, #0
 80011e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011e8:	2300      	movs	r3, #0
 80011ea:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011ec:	2300      	movs	r3, #0
 80011ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011f0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011f4:	2208      	movs	r2, #8
 80011f6:	4619      	mov	r1, r3
 80011f8:	4818      	ldr	r0, [pc, #96]	@ (800125c <MX_TIM1_Init+0x118>)
 80011fa:	f003 f9ab 	bl	8004554 <HAL_TIM_PWM_ConfigChannel>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001204:	f000 f8fa 	bl	80013fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001208:	2300      	movs	r3, #0
 800120a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800120c:	2300      	movs	r3, #0
 800120e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800121c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001220:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800122a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800122e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	4619      	mov	r1, r3
 800123c:	4807      	ldr	r0, [pc, #28]	@ (800125c <MX_TIM1_Init+0x118>)
 800123e:	f003 feb5 	bl	8004fac <HAL_TIMEx_ConfigBreakDeadTime>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001248:	f000 f8d8 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800124c:	4803      	ldr	r0, [pc, #12]	@ (800125c <MX_TIM1_Init+0x118>)
 800124e:	f000 f9cf 	bl	80015f0 <HAL_TIM_MspPostInit>
}
 8001252:	bf00      	nop
 8001254:	3758      	adds	r7, #88	@ 0x58
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000258 	.word	0x20000258
 8001260:	40012c00 	.word	0x40012c00

08001264 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08a      	sub	sp, #40	@ 0x28
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800126a:	f107 031c 	add.w	r3, r7, #28
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001276:	463b      	mov	r3, r7
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
 8001284:	615a      	str	r2, [r3, #20]
 8001286:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001288:	4b22      	ldr	r3, [pc, #136]	@ (8001314 <MX_TIM2_Init+0xb0>)
 800128a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800128e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0; // 8 MHz timer clock
 8001290:	4b20      	ldr	r3, [pc, #128]	@ (8001314 <MX_TIM2_Init+0xb0>)
 8001292:	2200      	movs	r2, #0
 8001294:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001296:	4b1f      	ldr	r3, [pc, #124]	@ (8001314 <MX_TIM2_Init+0xb0>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7999; // PWM frequency = 8 MHz / (7999 + 1) = 1 kHz
 800129c:	4b1d      	ldr	r3, [pc, #116]	@ (8001314 <MX_TIM2_Init+0xb0>)
 800129e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80012a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001314 <MX_TIM2_Init+0xb0>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE; // Enable preload
 80012aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001314 <MX_TIM2_Init+0xb0>)
 80012ac:	2280      	movs	r2, #128	@ 0x80
 80012ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012b0:	4818      	ldr	r0, [pc, #96]	@ (8001314 <MX_TIM2_Init+0xb0>)
 80012b2:	f002 fff7 	bl	80042a4 <HAL_TIM_PWM_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80012bc:	f000 f89e 	bl	80013fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012c8:	f107 031c 	add.w	r3, r7, #28
 80012cc:	4619      	mov	r1, r3
 80012ce:	4811      	ldr	r0, [pc, #68]	@ (8001314 <MX_TIM2_Init+0xb0>)
 80012d0:	f003 fdec 	bl	8004eac <HAL_TIMEx_MasterConfigSynchronization>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80012da:	f000 f88f 	bl	80013fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012de:	2360      	movs	r3, #96	@ 0x60
 80012e0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0; // Initial duty cycle (0%)
 80012e2:	2300      	movs	r3, #0
 80012e4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012ee:	463b      	mov	r3, r7
 80012f0:	2208      	movs	r2, #8
 80012f2:	4619      	mov	r1, r3
 80012f4:	4807      	ldr	r0, [pc, #28]	@ (8001314 <MX_TIM2_Init+0xb0>)
 80012f6:	f003 f92d 	bl	8004554 <HAL_TIM_PWM_ConfigChannel>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001300:	f000 f87c 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001304:	4803      	ldr	r0, [pc, #12]	@ (8001314 <MX_TIM2_Init+0xb0>)
 8001306:	f000 f973 	bl	80015f0 <HAL_TIM_MspPostInit>
}
 800130a:	bf00      	nop
 800130c:	3728      	adds	r7, #40	@ 0x28
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	200002a4 	.word	0x200002a4

08001318 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b088      	sub	sp, #32
 800131c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131e:	f107 030c 	add.w	r3, r7, #12
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	60da      	str	r2, [r3, #12]
 800132c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800132e:	4b31      	ldr	r3, [pc, #196]	@ (80013f4 <MX_GPIO_Init+0xdc>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	4a30      	ldr	r2, [pc, #192]	@ (80013f4 <MX_GPIO_Init+0xdc>)
 8001334:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001338:	6153      	str	r3, [r2, #20]
 800133a:	4b2e      	ldr	r3, [pc, #184]	@ (80013f4 <MX_GPIO_Init+0xdc>)
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	4b2b      	ldr	r3, [pc, #172]	@ (80013f4 <MX_GPIO_Init+0xdc>)
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	4a2a      	ldr	r2, [pc, #168]	@ (80013f4 <MX_GPIO_Init+0xdc>)
 800134c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001350:	6153      	str	r3, [r2, #20]
 8001352:	4b28      	ldr	r3, [pc, #160]	@ (80013f4 <MX_GPIO_Init+0xdc>)
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]

  /* Configure PA10 for TIM1_CH3 (LED) */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800135e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001362:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001364:	2302      	movs	r3, #2
 8001366:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136c:	2300      	movs	r3, #0
 800136e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF6_TIM1; // TIM1_CH3 for PA10
 8001370:	2306      	movs	r3, #6
 8001372:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	4619      	mov	r1, r3
 800137a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800137e:	f000 fc35 	bl	8001bec <HAL_GPIO_Init>

  /* Configure PA9 for TIM2_CH3 (Buzzer) */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001382:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001386:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	2302      	movs	r3, #2
 800138a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	2300      	movs	r3, #0
 8001392:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_TIM2; // TIM2_CH3 for PA9
 8001394:	230a      	movs	r3, #10
 8001396:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001398:	f107 030c 	add.w	r3, r7, #12
 800139c:	4619      	mov	r1, r3
 800139e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013a2:	f000 fc23 	bl	8001bec <HAL_GPIO_Init>

  /* Configure PA15 (SCL) and PA14 (SDA) for I2C1 */
  GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_15;
 80013a6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80013aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD; // Open-drain for I2C
 80013ac:	2312      	movs	r3, #18
 80013ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;     // External pull-ups recommended
 80013b0:	2301      	movs	r3, #1
 80013b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013b4:	2303      	movs	r3, #3
 80013b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1; // I2C1 SCL/SDA for PA15/PA14
 80013b8:	2304      	movs	r3, #4
 80013ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	4619      	mov	r1, r3
 80013c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013c6:	f000 fc11 	bl	8001bec <HAL_GPIO_Init>

  /* Configure PC4 (TX) and PC5 (RX) for USART1 */
  GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 80013ca:	2330      	movs	r3, #48	@ 0x30
 80013cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	2302      	movs	r3, #2
 80013d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013d6:	2303      	movs	r3, #3
 80013d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1; // USART1 TX/RX for PC4/PC5
 80013da:	2307      	movs	r3, #7
 80013dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013de:	f107 030c 	add.w	r3, r7, #12
 80013e2:	4619      	mov	r1, r3
 80013e4:	4804      	ldr	r0, [pc, #16]	@ (80013f8 <MX_GPIO_Init+0xe0>)
 80013e6:	f000 fc01 	bl	8001bec <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80013ea:	bf00      	nop
 80013ec:	3720      	adds	r7, #32
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40021000 	.word	0x40021000
 80013f8:	48000800 	.word	0x48000800

080013fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001400:	b672      	cpsid	i
}
 8001402:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <Error_Handler+0x8>

08001408 <enableUSART1>:
    memset(string, 0, BUFFER);
    i = 0;
}

void enableUSART1()
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
    // Enable GPIO C and USART1's clocks
    RCC->AHBENR |= RCC_AHBENR_GPIOCEN_Msk;
 800140c:	4b18      	ldr	r3, [pc, #96]	@ (8001470 <enableUSART1+0x68>)
 800140e:	695b      	ldr	r3, [r3, #20]
 8001410:	4a17      	ldr	r2, [pc, #92]	@ (8001470 <enableUSART1+0x68>)
 8001412:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001416:	6153      	str	r3, [r2, #20]
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN_Msk;
 8001418:	4b15      	ldr	r3, [pc, #84]	@ (8001470 <enableUSART1+0x68>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	4a14      	ldr	r2, [pc, #80]	@ (8001470 <enableUSART1+0x68>)
 800141e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001422:	6193      	str	r3, [r2, #24]

    // Set GPIO C to use UART as alternate function
    GPIOC->MODER = ALTFUNCTION;
 8001424:	4b13      	ldr	r3, [pc, #76]	@ (8001474 <enableUSART1+0x6c>)
 8001426:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 800142a:	601a      	str	r2, [r3, #0]
    GPIOC->AFR[0] = RXTX;
 800142c:	4b11      	ldr	r3, [pc, #68]	@ (8001474 <enableUSART1+0x6c>)
 800142e:	f44f 02ee 	mov.w	r2, #7798784	@ 0x770000
 8001432:	621a      	str	r2, [r3, #32]
    GPIOC->OSPEEDR = HIGHSPEED;
 8001434:	4b0f      	ldr	r3, [pc, #60]	@ (8001474 <enableUSART1+0x6c>)
 8001436:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 800143a:	609a      	str	r2, [r3, #8]

    // Set the baud rate and ready USART 1 for both receive and transmit
    USART1->BRR = BAUDRATE;                   // Baud rate = 115200
 800143c:	4b0e      	ldr	r3, [pc, #56]	@ (8001478 <enableUSART1+0x70>)
 800143e:	2246      	movs	r2, #70	@ 0x46
 8001440:	60da      	str	r2, [r3, #12]
    USART1->CR1 |= USART_CR1_RE_Msk;
 8001442:	4b0d      	ldr	r3, [pc, #52]	@ (8001478 <enableUSART1+0x70>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a0c      	ldr	r2, [pc, #48]	@ (8001478 <enableUSART1+0x70>)
 8001448:	f043 0304 	orr.w	r3, r3, #4
 800144c:	6013      	str	r3, [r2, #0]
    USART1->CR1 |= USART_CR1_TE_Msk;
 800144e:	4b0a      	ldr	r3, [pc, #40]	@ (8001478 <enableUSART1+0x70>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a09      	ldr	r2, [pc, #36]	@ (8001478 <enableUSART1+0x70>)
 8001454:	f043 0308 	orr.w	r3, r3, #8
 8001458:	6013      	str	r3, [r2, #0]
    USART1->CR1 |= USART_CR1_UE_Msk;
 800145a:	4b07      	ldr	r3, [pc, #28]	@ (8001478 <enableUSART1+0x70>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a06      	ldr	r2, [pc, #24]	@ (8001478 <enableUSART1+0x70>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6013      	str	r3, [r2, #0]
}
 8001466:	bf00      	nop
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	40021000 	.word	0x40021000
 8001474:	48000800 	.word	0x48000800
 8001478:	40013800 	.word	0x40013800

0800147c <send_string>:

        }
    }
}

void send_string(const char *msg) {
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
    while (*msg) {
 8001484:	e00c      	b.n	80014a0 <send_string+0x24>
        while (!(USART1->ISR & USART_ISR_TXE_Msk));
 8001486:	bf00      	nop
 8001488:	4b0b      	ldr	r3, [pc, #44]	@ (80014b8 <send_string+0x3c>)
 800148a:	69db      	ldr	r3, [r3, #28]
 800148c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001490:	2b00      	cmp	r3, #0
 8001492:	d0f9      	beq.n	8001488 <send_string+0xc>
        USART1->TDR = *msg++;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	1c5a      	adds	r2, r3, #1
 8001498:	607a      	str	r2, [r7, #4]
 800149a:	781a      	ldrb	r2, [r3, #0]
 800149c:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <send_string+0x3c>)
 800149e:	851a      	strh	r2, [r3, #40]	@ 0x28
    while (*msg) {
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1ee      	bne.n	8001486 <send_string+0xa>
    }
}
 80014a8:	bf00      	nop
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	40013800 	.word	0x40013800

080014bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001500 <HAL_MspInit+0x44>)
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001500 <HAL_MspInit+0x44>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	6193      	str	r3, [r2, #24]
 80014ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001500 <HAL_MspInit+0x44>)
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	607b      	str	r3, [r7, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014da:	4b09      	ldr	r3, [pc, #36]	@ (8001500 <HAL_MspInit+0x44>)
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	4a08      	ldr	r2, [pc, #32]	@ (8001500 <HAL_MspInit+0x44>)
 80014e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014e4:	61d3      	str	r3, [r2, #28]
 80014e6:	4b06      	ldr	r3, [pc, #24]	@ (8001500 <HAL_MspInit+0x44>)
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	40021000 	.word	0x40021000

08001504 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	@ 0x28
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a18      	ldr	r2, [pc, #96]	@ (8001584 <HAL_I2C_MspInit+0x80>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d129      	bne.n	800157a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001526:	4b18      	ldr	r3, [pc, #96]	@ (8001588 <HAL_I2C_MspInit+0x84>)
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	4a17      	ldr	r2, [pc, #92]	@ (8001588 <HAL_I2C_MspInit+0x84>)
 800152c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001530:	6153      	str	r3, [r2, #20]
 8001532:	4b15      	ldr	r3, [pc, #84]	@ (8001588 <HAL_I2C_MspInit+0x84>)
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA14     ------> I2C1_SDA
    PA15     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800153e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001544:	2312      	movs	r3, #18
 8001546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800154c:	2303      	movs	r3, #3
 800154e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001550:	2304      	movs	r3, #4
 8001552:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	4619      	mov	r1, r3
 800155a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800155e:	f000 fb45 	bl	8001bec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001562:	4b09      	ldr	r3, [pc, #36]	@ (8001588 <HAL_I2C_MspInit+0x84>)
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	4a08      	ldr	r2, [pc, #32]	@ (8001588 <HAL_I2C_MspInit+0x84>)
 8001568:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800156c:	61d3      	str	r3, [r2, #28]
 800156e:	4b06      	ldr	r3, [pc, #24]	@ (8001588 <HAL_I2C_MspInit+0x84>)
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800157a:	bf00      	nop
 800157c:	3728      	adds	r7, #40	@ 0x28
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40005400 	.word	0x40005400
 8001588:	40021000 	.word	0x40021000

0800158c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a13      	ldr	r2, [pc, #76]	@ (80015e8 <HAL_TIM_PWM_MspInit+0x5c>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d10c      	bne.n	80015b8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800159e:	4b13      	ldr	r3, [pc, #76]	@ (80015ec <HAL_TIM_PWM_MspInit+0x60>)
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	4a12      	ldr	r2, [pc, #72]	@ (80015ec <HAL_TIM_PWM_MspInit+0x60>)
 80015a4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80015a8:	6193      	str	r3, [r2, #24]
 80015aa:	4b10      	ldr	r3, [pc, #64]	@ (80015ec <HAL_TIM_PWM_MspInit+0x60>)
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015b6:	e010      	b.n	80015da <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM2)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015c0:	d10b      	bne.n	80015da <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015c2:	4b0a      	ldr	r3, [pc, #40]	@ (80015ec <HAL_TIM_PWM_MspInit+0x60>)
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	4a09      	ldr	r2, [pc, #36]	@ (80015ec <HAL_TIM_PWM_MspInit+0x60>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	61d3      	str	r3, [r2, #28]
 80015ce:	4b07      	ldr	r3, [pc, #28]	@ (80015ec <HAL_TIM_PWM_MspInit+0x60>)
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	68bb      	ldr	r3, [r7, #8]
}
 80015da:	bf00      	nop
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	40012c00 	.word	0x40012c00
 80015ec:	40021000 	.word	0x40021000

080015f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	@ 0x28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a24      	ldr	r2, [pc, #144]	@ (80016a0 <HAL_TIM_MspPostInit+0xb0>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d11e      	bne.n	8001650 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001612:	4b24      	ldr	r3, [pc, #144]	@ (80016a4 <HAL_TIM_MspPostInit+0xb4>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	4a23      	ldr	r2, [pc, #140]	@ (80016a4 <HAL_TIM_MspPostInit+0xb4>)
 8001618:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800161c:	6153      	str	r3, [r2, #20]
 800161e:	4b21      	ldr	r3, [pc, #132]	@ (80016a4 <HAL_TIM_MspPostInit+0xb4>)
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800162a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800162e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001638:	2300      	movs	r3, #0
 800163a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800163c:	2306      	movs	r3, #6
 800163e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	4619      	mov	r1, r3
 8001646:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800164a:	f000 facf 	bl	8001bec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800164e:	e022      	b.n	8001696 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM2)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001658:	d11d      	bne.n	8001696 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165a:	4b12      	ldr	r3, [pc, #72]	@ (80016a4 <HAL_TIM_MspPostInit+0xb4>)
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	4a11      	ldr	r2, [pc, #68]	@ (80016a4 <HAL_TIM_MspPostInit+0xb4>)
 8001660:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001664:	6153      	str	r3, [r2, #20]
 8001666:	4b0f      	ldr	r3, [pc, #60]	@ (80016a4 <HAL_TIM_MspPostInit+0xb4>)
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001672:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001678:	2302      	movs	r3, #2
 800167a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001680:	2300      	movs	r3, #0
 8001682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 8001684:	230a      	movs	r3, #10
 8001686:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	4619      	mov	r1, r3
 800168e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001692:	f000 faab 	bl	8001bec <HAL_GPIO_Init>
}
 8001696:	bf00      	nop
 8001698:	3728      	adds	r7, #40	@ 0x28
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40012c00 	.word	0x40012c00
 80016a4:	40021000 	.word	0x40021000

080016a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016ac:	bf00      	nop
 80016ae:	e7fd      	b.n	80016ac <NMI_Handler+0x4>

080016b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b4:	bf00      	nop
 80016b6:	e7fd      	b.n	80016b4 <HardFault_Handler+0x4>

080016b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016bc:	bf00      	nop
 80016be:	e7fd      	b.n	80016bc <MemManage_Handler+0x4>

080016c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c4:	bf00      	nop
 80016c6:	e7fd      	b.n	80016c4 <BusFault_Handler+0x4>

080016c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016cc:	bf00      	nop
 80016ce:	e7fd      	b.n	80016cc <UsageFault_Handler+0x4>

080016d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016fe:	f000 f94b 	bl	8001998 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}

08001706 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0
  return 1;
 800170a:	2301      	movs	r3, #1
}
 800170c:	4618      	mov	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <_kill>:

int _kill(int pid, int sig)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
 800171e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001720:	f004 fca6 	bl	8006070 <__errno>
 8001724:	4603      	mov	r3, r0
 8001726:	2216      	movs	r2, #22
 8001728:	601a      	str	r2, [r3, #0]
  return -1;
 800172a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <_exit>:

void _exit (int status)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800173e:	f04f 31ff 	mov.w	r1, #4294967295
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff ffe7 	bl	8001716 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <_exit+0x12>

0800174c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]
 800175c:	e00a      	b.n	8001774 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800175e:	f3af 8000 	nop.w
 8001762:	4601      	mov	r1, r0
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	1c5a      	adds	r2, r3, #1
 8001768:	60ba      	str	r2, [r7, #8]
 800176a:	b2ca      	uxtb	r2, r1
 800176c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	3301      	adds	r3, #1
 8001772:	617b      	str	r3, [r7, #20]
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	429a      	cmp	r2, r3
 800177a:	dbf0      	blt.n	800175e <_read+0x12>
  }

  return len;
 800177c:	687b      	ldr	r3, [r7, #4]
}
 800177e:	4618      	mov	r0, r3
 8001780:	3718      	adds	r7, #24
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b086      	sub	sp, #24
 800178a:	af00      	add	r7, sp, #0
 800178c:	60f8      	str	r0, [r7, #12]
 800178e:	60b9      	str	r1, [r7, #8]
 8001790:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
 8001796:	e009      	b.n	80017ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	1c5a      	adds	r2, r3, #1
 800179c:	60ba      	str	r2, [r7, #8]
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	3301      	adds	r3, #1
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	dbf1      	blt.n	8001798 <_write+0x12>
  }
  return len;
 80017b4:	687b      	ldr	r3, [r7, #4]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <_close>:

int _close(int file)
{
 80017be:	b480      	push	{r7}
 80017c0:	b083      	sub	sp, #12
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
 80017de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017e6:	605a      	str	r2, [r3, #4]
  return 0;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <_isatty>:

int _isatty(int file)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017fe:	2301      	movs	r3, #1
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
	...

08001828 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001830:	4a14      	ldr	r2, [pc, #80]	@ (8001884 <_sbrk+0x5c>)
 8001832:	4b15      	ldr	r3, [pc, #84]	@ (8001888 <_sbrk+0x60>)
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800183c:	4b13      	ldr	r3, [pc, #76]	@ (800188c <_sbrk+0x64>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d102      	bne.n	800184a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001844:	4b11      	ldr	r3, [pc, #68]	@ (800188c <_sbrk+0x64>)
 8001846:	4a12      	ldr	r2, [pc, #72]	@ (8001890 <_sbrk+0x68>)
 8001848:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800184a:	4b10      	ldr	r3, [pc, #64]	@ (800188c <_sbrk+0x64>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4413      	add	r3, r2
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	429a      	cmp	r2, r3
 8001856:	d207      	bcs.n	8001868 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001858:	f004 fc0a 	bl	8006070 <__errno>
 800185c:	4603      	mov	r3, r0
 800185e:	220c      	movs	r2, #12
 8001860:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001862:	f04f 33ff 	mov.w	r3, #4294967295
 8001866:	e009      	b.n	800187c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001868:	4b08      	ldr	r3, [pc, #32]	@ (800188c <_sbrk+0x64>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800186e:	4b07      	ldr	r3, [pc, #28]	@ (800188c <_sbrk+0x64>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4413      	add	r3, r2
 8001876:	4a05      	ldr	r2, [pc, #20]	@ (800188c <_sbrk+0x64>)
 8001878:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800187a:	68fb      	ldr	r3, [r7, #12]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	2000a000 	.word	0x2000a000
 8001888:	00000400 	.word	0x00000400
 800188c:	200002f8 	.word	0x200002f8
 8001890:	20000450 	.word	0x20000450

08001894 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001898:	4b06      	ldr	r3, [pc, #24]	@ (80018b4 <SystemInit+0x20>)
 800189a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800189e:	4a05      	ldr	r2, [pc, #20]	@ (80018b4 <SystemInit+0x20>)
 80018a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018f0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80018bc:	f7ff ffea 	bl	8001894 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018c0:	480c      	ldr	r0, [pc, #48]	@ (80018f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80018c2:	490d      	ldr	r1, [pc, #52]	@ (80018f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018c4:	4a0d      	ldr	r2, [pc, #52]	@ (80018fc <LoopForever+0xe>)
  movs r3, #0
 80018c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018c8:	e002      	b.n	80018d0 <LoopCopyDataInit>

080018ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ce:	3304      	adds	r3, #4

080018d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018d4:	d3f9      	bcc.n	80018ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001900 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001904 <LoopForever+0x16>)
  movs r3, #0
 80018da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018dc:	e001      	b.n	80018e2 <LoopFillZerobss>

080018de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018e0:	3204      	adds	r2, #4

080018e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018e4:	d3fb      	bcc.n	80018de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018e6:	f004 fbc9 	bl	800607c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018ea:	f7ff fa95 	bl	8000e18 <main>

080018ee <LoopForever>:

LoopForever:
    b LoopForever
 80018ee:	e7fe      	b.n	80018ee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018f0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80018f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018f8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80018fc:	08009e98 	.word	0x08009e98
  ldr r2, =_sbss
 8001900:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001904:	2000044c 	.word	0x2000044c

08001908 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001908:	e7fe      	b.n	8001908 <ADC1_2_IRQHandler>
	...

0800190c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001910:	4b08      	ldr	r3, [pc, #32]	@ (8001934 <HAL_Init+0x28>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a07      	ldr	r2, [pc, #28]	@ (8001934 <HAL_Init+0x28>)
 8001916:	f043 0310 	orr.w	r3, r3, #16
 800191a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800191c:	2003      	movs	r0, #3
 800191e:	f000 f931 	bl	8001b84 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001922:	200f      	movs	r0, #15
 8001924:	f000 f808 	bl	8001938 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001928:	f7ff fdc8 	bl	80014bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40022000 	.word	0x40022000

08001938 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001940:	4b12      	ldr	r3, [pc, #72]	@ (800198c <HAL_InitTick+0x54>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4b12      	ldr	r3, [pc, #72]	@ (8001990 <HAL_InitTick+0x58>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	4619      	mov	r1, r3
 800194a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800194e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001952:	fbb2 f3f3 	udiv	r3, r2, r3
 8001956:	4618      	mov	r0, r3
 8001958:	f000 f93b 	bl	8001bd2 <HAL_SYSTICK_Config>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e00e      	b.n	8001984 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b0f      	cmp	r3, #15
 800196a:	d80a      	bhi.n	8001982 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800196c:	2200      	movs	r2, #0
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	f04f 30ff 	mov.w	r0, #4294967295
 8001974:	f000 f911 	bl	8001b9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001978:	4a06      	ldr	r2, [pc, #24]	@ (8001994 <HAL_InitTick+0x5c>)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800197e:	2300      	movs	r3, #0
 8001980:	e000      	b.n	8001984 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
}
 8001984:	4618      	mov	r0, r3
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000000 	.word	0x20000000
 8001990:	20000008 	.word	0x20000008
 8001994:	20000004 	.word	0x20000004

08001998 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800199c:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <HAL_IncTick+0x20>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	461a      	mov	r2, r3
 80019a2:	4b06      	ldr	r3, [pc, #24]	@ (80019bc <HAL_IncTick+0x24>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4413      	add	r3, r2
 80019a8:	4a04      	ldr	r2, [pc, #16]	@ (80019bc <HAL_IncTick+0x24>)
 80019aa:	6013      	str	r3, [r2, #0]
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	20000008 	.word	0x20000008
 80019bc:	200002fc 	.word	0x200002fc

080019c0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return uwTick;  
 80019c4:	4b03      	ldr	r3, [pc, #12]	@ (80019d4 <HAL_GetTick+0x14>)
 80019c6:	681b      	ldr	r3, [r3, #0]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	200002fc 	.word	0x200002fc

080019d8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019e0:	f7ff ffee 	bl	80019c0 <HAL_GetTick>
 80019e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f0:	d005      	beq.n	80019fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019f2:	4b0a      	ldr	r3, [pc, #40]	@ (8001a1c <HAL_Delay+0x44>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	461a      	mov	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4413      	add	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80019fe:	bf00      	nop
 8001a00:	f7ff ffde 	bl	80019c0 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d8f7      	bhi.n	8001a00 <HAL_Delay+0x28>
  {
  }
}
 8001a10:	bf00      	nop
 8001a12:	bf00      	nop
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000008 	.word	0x20000008

08001a20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a30:	4b0c      	ldr	r3, [pc, #48]	@ (8001a64 <__NVIC_SetPriorityGrouping+0x44>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a36:	68ba      	ldr	r2, [r7, #8]
 8001a38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a52:	4a04      	ldr	r2, [pc, #16]	@ (8001a64 <__NVIC_SetPriorityGrouping+0x44>)
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	60d3      	str	r3, [r2, #12]
}
 8001a58:	bf00      	nop
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a6c:	4b04      	ldr	r3, [pc, #16]	@ (8001a80 <__NVIC_GetPriorityGrouping+0x18>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	0a1b      	lsrs	r3, r3, #8
 8001a72:	f003 0307 	and.w	r3, r3, #7
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	6039      	str	r1, [r7, #0]
 8001a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	db0a      	blt.n	8001aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	490c      	ldr	r1, [pc, #48]	@ (8001ad0 <__NVIC_SetPriority+0x4c>)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	0112      	lsls	r2, r2, #4
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	440b      	add	r3, r1
 8001aa8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aac:	e00a      	b.n	8001ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	4908      	ldr	r1, [pc, #32]	@ (8001ad4 <__NVIC_SetPriority+0x50>)
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	3b04      	subs	r3, #4
 8001abc:	0112      	lsls	r2, r2, #4
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	761a      	strb	r2, [r3, #24]
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	e000e100 	.word	0xe000e100
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b089      	sub	sp, #36	@ 0x24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f1c3 0307 	rsb	r3, r3, #7
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	bf28      	it	cs
 8001af6:	2304      	movcs	r3, #4
 8001af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	3304      	adds	r3, #4
 8001afe:	2b06      	cmp	r3, #6
 8001b00:	d902      	bls.n	8001b08 <NVIC_EncodePriority+0x30>
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	3b03      	subs	r3, #3
 8001b06:	e000      	b.n	8001b0a <NVIC_EncodePriority+0x32>
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43da      	mvns	r2, r3
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	401a      	ands	r2, r3
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b20:	f04f 31ff 	mov.w	r1, #4294967295
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2a:	43d9      	mvns	r1, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b30:	4313      	orrs	r3, r2
         );
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3724      	adds	r7, #36	@ 0x24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
	...

08001b40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b50:	d301      	bcc.n	8001b56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b52:	2301      	movs	r3, #1
 8001b54:	e00f      	b.n	8001b76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b56:	4a0a      	ldr	r2, [pc, #40]	@ (8001b80 <SysTick_Config+0x40>)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b5e:	210f      	movs	r1, #15
 8001b60:	f04f 30ff 	mov.w	r0, #4294967295
 8001b64:	f7ff ff8e 	bl	8001a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b68:	4b05      	ldr	r3, [pc, #20]	@ (8001b80 <SysTick_Config+0x40>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b6e:	4b04      	ldr	r3, [pc, #16]	@ (8001b80 <SysTick_Config+0x40>)
 8001b70:	2207      	movs	r2, #7
 8001b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	e000e010 	.word	0xe000e010

08001b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff ff47 	bl	8001a20 <__NVIC_SetPriorityGrouping>
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b086      	sub	sp, #24
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	607a      	str	r2, [r7, #4]
 8001ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bac:	f7ff ff5c 	bl	8001a68 <__NVIC_GetPriorityGrouping>
 8001bb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	68b9      	ldr	r1, [r7, #8]
 8001bb6:	6978      	ldr	r0, [r7, #20]
 8001bb8:	f7ff ff8e 	bl	8001ad8 <NVIC_EncodePriority>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc2:	4611      	mov	r1, r2
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ff5d 	bl	8001a84 <__NVIC_SetPriority>
}
 8001bca:	bf00      	nop
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff ffb0 	bl	8001b40 <SysTick_Config>
 8001be0:	4603      	mov	r3, r0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b087      	sub	sp, #28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bfa:	e154      	b.n	8001ea6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	2101      	movs	r1, #1
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	fa01 f303 	lsl.w	r3, r1, r3
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f000 8146 	beq.w	8001ea0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 0303 	and.w	r3, r3, #3
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d005      	beq.n	8001c2c <HAL_GPIO_Init+0x40>
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f003 0303 	and.w	r3, r3, #3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d130      	bne.n	8001c8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	2203      	movs	r2, #3
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	4013      	ands	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	68da      	ldr	r2, [r3, #12]
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c62:	2201      	movs	r2, #1
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	091b      	lsrs	r3, r3, #4
 8001c78:	f003 0201 	and.w	r2, r3, #1
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f003 0303 	and.w	r3, r3, #3
 8001c96:	2b03      	cmp	r3, #3
 8001c98:	d017      	beq.n	8001cca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	2203      	movs	r2, #3
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43db      	mvns	r3, r3
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	689a      	ldr	r2, [r3, #8]
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f003 0303 	and.w	r3, r3, #3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d123      	bne.n	8001d1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	08da      	lsrs	r2, r3, #3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3208      	adds	r2, #8
 8001cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	220f      	movs	r2, #15
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	691a      	ldr	r2, [r3, #16]
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	08da      	lsrs	r2, r3, #3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3208      	adds	r2, #8
 8001d18:	6939      	ldr	r1, [r7, #16]
 8001d1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	2203      	movs	r2, #3
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	4013      	ands	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 0203 	and.w	r2, r3, #3
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 80a0 	beq.w	8001ea0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d60:	4b58      	ldr	r3, [pc, #352]	@ (8001ec4 <HAL_GPIO_Init+0x2d8>)
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	4a57      	ldr	r2, [pc, #348]	@ (8001ec4 <HAL_GPIO_Init+0x2d8>)
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	6193      	str	r3, [r2, #24]
 8001d6c:	4b55      	ldr	r3, [pc, #340]	@ (8001ec4 <HAL_GPIO_Init+0x2d8>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d78:	4a53      	ldr	r2, [pc, #332]	@ (8001ec8 <HAL_GPIO_Init+0x2dc>)
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	089b      	lsrs	r3, r3, #2
 8001d7e:	3302      	adds	r3, #2
 8001d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	220f      	movs	r2, #15
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001da2:	d019      	beq.n	8001dd8 <HAL_GPIO_Init+0x1ec>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a49      	ldr	r2, [pc, #292]	@ (8001ecc <HAL_GPIO_Init+0x2e0>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d013      	beq.n	8001dd4 <HAL_GPIO_Init+0x1e8>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a48      	ldr	r2, [pc, #288]	@ (8001ed0 <HAL_GPIO_Init+0x2e4>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d00d      	beq.n	8001dd0 <HAL_GPIO_Init+0x1e4>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a47      	ldr	r2, [pc, #284]	@ (8001ed4 <HAL_GPIO_Init+0x2e8>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d007      	beq.n	8001dcc <HAL_GPIO_Init+0x1e0>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a46      	ldr	r2, [pc, #280]	@ (8001ed8 <HAL_GPIO_Init+0x2ec>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d101      	bne.n	8001dc8 <HAL_GPIO_Init+0x1dc>
 8001dc4:	2304      	movs	r3, #4
 8001dc6:	e008      	b.n	8001dda <HAL_GPIO_Init+0x1ee>
 8001dc8:	2305      	movs	r3, #5
 8001dca:	e006      	b.n	8001dda <HAL_GPIO_Init+0x1ee>
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e004      	b.n	8001dda <HAL_GPIO_Init+0x1ee>
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	e002      	b.n	8001dda <HAL_GPIO_Init+0x1ee>
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e000      	b.n	8001dda <HAL_GPIO_Init+0x1ee>
 8001dd8:	2300      	movs	r3, #0
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	f002 0203 	and.w	r2, r2, #3
 8001de0:	0092      	lsls	r2, r2, #2
 8001de2:	4093      	lsls	r3, r2
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dea:	4937      	ldr	r1, [pc, #220]	@ (8001ec8 <HAL_GPIO_Init+0x2dc>)
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	089b      	lsrs	r3, r3, #2
 8001df0:	3302      	adds	r3, #2
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001df8:	4b38      	ldr	r3, [pc, #224]	@ (8001edc <HAL_GPIO_Init+0x2f0>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	43db      	mvns	r3, r3
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4013      	ands	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e1c:	4a2f      	ldr	r2, [pc, #188]	@ (8001edc <HAL_GPIO_Init+0x2f0>)
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e22:	4b2e      	ldr	r3, [pc, #184]	@ (8001edc <HAL_GPIO_Init+0x2f0>)
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e46:	4a25      	ldr	r2, [pc, #148]	@ (8001edc <HAL_GPIO_Init+0x2f0>)
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e4c:	4b23      	ldr	r3, [pc, #140]	@ (8001edc <HAL_GPIO_Init+0x2f0>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	43db      	mvns	r3, r3
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e70:	4a1a      	ldr	r2, [pc, #104]	@ (8001edc <HAL_GPIO_Init+0x2f0>)
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e76:	4b19      	ldr	r3, [pc, #100]	@ (8001edc <HAL_GPIO_Init+0x2f0>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	4013      	ands	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e9a:	4a10      	ldr	r2, [pc, #64]	@ (8001edc <HAL_GPIO_Init+0x2f0>)
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f47f aea3 	bne.w	8001bfc <HAL_GPIO_Init+0x10>
  }
}
 8001eb6:	bf00      	nop
 8001eb8:	bf00      	nop
 8001eba:	371c      	adds	r7, #28
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40010000 	.word	0x40010000
 8001ecc:	48000400 	.word	0x48000400
 8001ed0:	48000800 	.word	0x48000800
 8001ed4:	48000c00 	.word	0x48000c00
 8001ed8:	48001000 	.word	0x48001000
 8001edc:	40010400 	.word	0x40010400

08001ee0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e08d      	b.n	800200e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d106      	bne.n	8001f0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff fafc 	bl	8001504 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2224      	movs	r2, #36	@ 0x24
 8001f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 0201 	bic.w	r2, r2, #1
 8001f22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f30:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f40:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d107      	bne.n	8001f5a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689a      	ldr	r2, [r3, #8]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	e006      	b.n	8001f68 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001f66:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d108      	bne.n	8001f82 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f7e:	605a      	str	r2, [r3, #4]
 8001f80:	e007      	b.n	8001f92 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6812      	ldr	r2, [r2, #0]
 8001f9c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001fa0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fa4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68da      	ldr	r2, [r3, #12]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fb4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	691a      	ldr	r2, [r3, #16]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	69d9      	ldr	r1, [r3, #28]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a1a      	ldr	r2, [r3, #32]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f042 0201 	orr.w	r2, r2, #1
 8001fee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2220      	movs	r2, #32
 8001ffa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b088      	sub	sp, #32
 800201c:	af02      	add	r7, sp, #8
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	4608      	mov	r0, r1
 8002022:	4611      	mov	r1, r2
 8002024:	461a      	mov	r2, r3
 8002026:	4603      	mov	r3, r0
 8002028:	817b      	strh	r3, [r7, #10]
 800202a:	460b      	mov	r3, r1
 800202c:	813b      	strh	r3, [r7, #8]
 800202e:	4613      	mov	r3, r2
 8002030:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b20      	cmp	r3, #32
 800203c:	f040 80f9 	bne.w	8002232 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002040:	6a3b      	ldr	r3, [r7, #32]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d002      	beq.n	800204c <HAL_I2C_Mem_Write+0x34>
 8002046:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002048:	2b00      	cmp	r3, #0
 800204a:	d105      	bne.n	8002058 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002052:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e0ed      	b.n	8002234 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800205e:	2b01      	cmp	r3, #1
 8002060:	d101      	bne.n	8002066 <HAL_I2C_Mem_Write+0x4e>
 8002062:	2302      	movs	r3, #2
 8002064:	e0e6      	b.n	8002234 <HAL_I2C_Mem_Write+0x21c>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800206e:	f7ff fca7 	bl	80019c0 <HAL_GetTick>
 8002072:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	2319      	movs	r3, #25
 800207a:	2201      	movs	r2, #1
 800207c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002080:	68f8      	ldr	r0, [r7, #12]
 8002082:	f000 fac3 	bl	800260c <I2C_WaitOnFlagUntilTimeout>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e0d1      	b.n	8002234 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2221      	movs	r2, #33	@ 0x21
 8002094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2240      	movs	r2, #64	@ 0x40
 800209c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6a3a      	ldr	r2, [r7, #32]
 80020aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80020b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020b8:	88f8      	ldrh	r0, [r7, #6]
 80020ba:	893a      	ldrh	r2, [r7, #8]
 80020bc:	8979      	ldrh	r1, [r7, #10]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	9301      	str	r3, [sp, #4]
 80020c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	4603      	mov	r3, r0
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f000 f9d3 	bl	8002474 <I2C_RequestMemoryWrite>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d005      	beq.n	80020e0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e0a9      	b.n	8002234 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	2bff      	cmp	r3, #255	@ 0xff
 80020e8:	d90e      	bls.n	8002108 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	22ff      	movs	r2, #255	@ 0xff
 80020ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	8979      	ldrh	r1, [r7, #10]
 80020f8:	2300      	movs	r3, #0
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f000 fc47 	bl	8002994 <I2C_TransferConfig>
 8002106:	e00f      	b.n	8002128 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800210c:	b29a      	uxth	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002116:	b2da      	uxtb	r2, r3
 8002118:	8979      	ldrh	r1, [r7, #10]
 800211a:	2300      	movs	r3, #0
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f000 fc36 	bl	8002994 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f000 fac6 	bl	80026be <I2C_WaitOnTXISFlagUntilTimeout>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e07b      	b.n	8002234 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002140:	781a      	ldrb	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800214c:	1c5a      	adds	r2, r3, #1
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002156:	b29b      	uxth	r3, r3
 8002158:	3b01      	subs	r3, #1
 800215a:	b29a      	uxth	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002164:	3b01      	subs	r3, #1
 8002166:	b29a      	uxth	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002170:	b29b      	uxth	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d034      	beq.n	80021e0 <HAL_I2C_Mem_Write+0x1c8>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800217a:	2b00      	cmp	r3, #0
 800217c:	d130      	bne.n	80021e0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002184:	2200      	movs	r2, #0
 8002186:	2180      	movs	r1, #128	@ 0x80
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f000 fa3f 	bl	800260c <I2C_WaitOnFlagUntilTimeout>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e04d      	b.n	8002234 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800219c:	b29b      	uxth	r3, r3
 800219e:	2bff      	cmp	r3, #255	@ 0xff
 80021a0:	d90e      	bls.n	80021c0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	22ff      	movs	r2, #255	@ 0xff
 80021a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	8979      	ldrh	r1, [r7, #10]
 80021b0:	2300      	movs	r3, #0
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f000 fbeb 	bl	8002994 <I2C_TransferConfig>
 80021be:	e00f      	b.n	80021e0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	8979      	ldrh	r1, [r7, #10]
 80021d2:	2300      	movs	r3, #0
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f000 fbda 	bl	8002994 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d19e      	bne.n	8002128 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f000 faac 	bl	800274c <I2C_WaitOnSTOPFlagUntilTimeout>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e01a      	b.n	8002234 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2220      	movs	r2, #32
 8002204:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6859      	ldr	r1, [r3, #4]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	4b0a      	ldr	r3, [pc, #40]	@ (800223c <HAL_I2C_Mem_Write+0x224>)
 8002212:	400b      	ands	r3, r1
 8002214:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2220      	movs	r2, #32
 800221a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800222e:	2300      	movs	r3, #0
 8002230:	e000      	b.n	8002234 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002232:	2302      	movs	r3, #2
  }
}
 8002234:	4618      	mov	r0, r3
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	fe00e800 	.word	0xfe00e800

08002240 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b088      	sub	sp, #32
 8002244:	af02      	add	r7, sp, #8
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	4608      	mov	r0, r1
 800224a:	4611      	mov	r1, r2
 800224c:	461a      	mov	r2, r3
 800224e:	4603      	mov	r3, r0
 8002250:	817b      	strh	r3, [r7, #10]
 8002252:	460b      	mov	r3, r1
 8002254:	813b      	strh	r3, [r7, #8]
 8002256:	4613      	mov	r3, r2
 8002258:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b20      	cmp	r3, #32
 8002264:	f040 80fd 	bne.w	8002462 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002268:	6a3b      	ldr	r3, [r7, #32]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d002      	beq.n	8002274 <HAL_I2C_Mem_Read+0x34>
 800226e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002270:	2b00      	cmp	r3, #0
 8002272:	d105      	bne.n	8002280 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800227a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e0f1      	b.n	8002464 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002286:	2b01      	cmp	r3, #1
 8002288:	d101      	bne.n	800228e <HAL_I2C_Mem_Read+0x4e>
 800228a:	2302      	movs	r3, #2
 800228c:	e0ea      	b.n	8002464 <HAL_I2C_Mem_Read+0x224>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002296:	f7ff fb93 	bl	80019c0 <HAL_GetTick>
 800229a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	2319      	movs	r3, #25
 80022a2:	2201      	movs	r2, #1
 80022a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f000 f9af 	bl	800260c <I2C_WaitOnFlagUntilTimeout>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e0d5      	b.n	8002464 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2222      	movs	r2, #34	@ 0x22
 80022bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2240      	movs	r2, #64	@ 0x40
 80022c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6a3a      	ldr	r2, [r7, #32]
 80022d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80022d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022e0:	88f8      	ldrh	r0, [r7, #6]
 80022e2:	893a      	ldrh	r2, [r7, #8]
 80022e4:	8979      	ldrh	r1, [r7, #10]
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	9301      	str	r3, [sp, #4]
 80022ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	4603      	mov	r3, r0
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 f913 	bl	800251c <I2C_RequestMemoryRead>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d005      	beq.n	8002308 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e0ad      	b.n	8002464 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800230c:	b29b      	uxth	r3, r3
 800230e:	2bff      	cmp	r3, #255	@ 0xff
 8002310:	d90e      	bls.n	8002330 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2201      	movs	r2, #1
 8002316:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800231c:	b2da      	uxtb	r2, r3
 800231e:	8979      	ldrh	r1, [r7, #10]
 8002320:	4b52      	ldr	r3, [pc, #328]	@ (800246c <HAL_I2C_Mem_Read+0x22c>)
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f000 fb33 	bl	8002994 <I2C_TransferConfig>
 800232e:	e00f      	b.n	8002350 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002334:	b29a      	uxth	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800233e:	b2da      	uxtb	r2, r3
 8002340:	8979      	ldrh	r1, [r7, #10]
 8002342:	4b4a      	ldr	r3, [pc, #296]	@ (800246c <HAL_I2C_Mem_Read+0x22c>)
 8002344:	9300      	str	r3, [sp, #0]
 8002346:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 fb22 	bl	8002994 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	9300      	str	r3, [sp, #0]
 8002354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002356:	2200      	movs	r2, #0
 8002358:	2104      	movs	r1, #4
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f000 f956 	bl	800260c <I2C_WaitOnFlagUntilTimeout>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e07c      	b.n	8002464 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002374:	b2d2      	uxtb	r2, r2
 8002376:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237c:	1c5a      	adds	r2, r3, #1
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002386:	3b01      	subs	r3, #1
 8002388:	b29a      	uxth	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002392:	b29b      	uxth	r3, r3
 8002394:	3b01      	subs	r3, #1
 8002396:	b29a      	uxth	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d034      	beq.n	8002410 <HAL_I2C_Mem_Read+0x1d0>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d130      	bne.n	8002410 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023b4:	2200      	movs	r2, #0
 80023b6:	2180      	movs	r1, #128	@ 0x80
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f000 f927 	bl	800260c <I2C_WaitOnFlagUntilTimeout>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e04d      	b.n	8002464 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	2bff      	cmp	r3, #255	@ 0xff
 80023d0:	d90e      	bls.n	80023f0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2201      	movs	r2, #1
 80023d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	8979      	ldrh	r1, [r7, #10]
 80023e0:	2300      	movs	r3, #0
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f000 fad3 	bl	8002994 <I2C_TransferConfig>
 80023ee:	e00f      	b.n	8002410 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023fe:	b2da      	uxtb	r2, r3
 8002400:	8979      	ldrh	r1, [r7, #10]
 8002402:	2300      	movs	r3, #0
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f000 fac2 	bl	8002994 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002414:	b29b      	uxth	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d19a      	bne.n	8002350 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f000 f994 	bl	800274c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e01a      	b.n	8002464 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2220      	movs	r2, #32
 8002434:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6859      	ldr	r1, [r3, #4]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	4b0b      	ldr	r3, [pc, #44]	@ (8002470 <HAL_I2C_Mem_Read+0x230>)
 8002442:	400b      	ands	r3, r1
 8002444:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2220      	movs	r2, #32
 800244a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800245e:	2300      	movs	r3, #0
 8002460:	e000      	b.n	8002464 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002462:	2302      	movs	r3, #2
  }
}
 8002464:	4618      	mov	r0, r3
 8002466:	3718      	adds	r7, #24
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	80002400 	.word	0x80002400
 8002470:	fe00e800 	.word	0xfe00e800

08002474 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af02      	add	r7, sp, #8
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	4608      	mov	r0, r1
 800247e:	4611      	mov	r1, r2
 8002480:	461a      	mov	r2, r3
 8002482:	4603      	mov	r3, r0
 8002484:	817b      	strh	r3, [r7, #10]
 8002486:	460b      	mov	r3, r1
 8002488:	813b      	strh	r3, [r7, #8]
 800248a:	4613      	mov	r3, r2
 800248c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800248e:	88fb      	ldrh	r3, [r7, #6]
 8002490:	b2da      	uxtb	r2, r3
 8002492:	8979      	ldrh	r1, [r7, #10]
 8002494:	4b20      	ldr	r3, [pc, #128]	@ (8002518 <I2C_RequestMemoryWrite+0xa4>)
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f000 fa79 	bl	8002994 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024a2:	69fa      	ldr	r2, [r7, #28]
 80024a4:	69b9      	ldr	r1, [r7, #24]
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f000 f909 	bl	80026be <I2C_WaitOnTXISFlagUntilTimeout>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e02c      	b.n	8002510 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80024b6:	88fb      	ldrh	r3, [r7, #6]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d105      	bne.n	80024c8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024bc:	893b      	ldrh	r3, [r7, #8]
 80024be:	b2da      	uxtb	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80024c6:	e015      	b.n	80024f4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80024c8:	893b      	ldrh	r3, [r7, #8]
 80024ca:	0a1b      	lsrs	r3, r3, #8
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024d6:	69fa      	ldr	r2, [r7, #28]
 80024d8:	69b9      	ldr	r1, [r7, #24]
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	f000 f8ef 	bl	80026be <I2C_WaitOnTXISFlagUntilTimeout>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e012      	b.n	8002510 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024ea:	893b      	ldrh	r3, [r7, #8]
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	2200      	movs	r2, #0
 80024fc:	2180      	movs	r1, #128	@ 0x80
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 f884 	bl	800260c <I2C_WaitOnFlagUntilTimeout>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e000      	b.n	8002510 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	80002000 	.word	0x80002000

0800251c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af02      	add	r7, sp, #8
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	4608      	mov	r0, r1
 8002526:	4611      	mov	r1, r2
 8002528:	461a      	mov	r2, r3
 800252a:	4603      	mov	r3, r0
 800252c:	817b      	strh	r3, [r7, #10]
 800252e:	460b      	mov	r3, r1
 8002530:	813b      	strh	r3, [r7, #8]
 8002532:	4613      	mov	r3, r2
 8002534:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002536:	88fb      	ldrh	r3, [r7, #6]
 8002538:	b2da      	uxtb	r2, r3
 800253a:	8979      	ldrh	r1, [r7, #10]
 800253c:	4b20      	ldr	r3, [pc, #128]	@ (80025c0 <I2C_RequestMemoryRead+0xa4>)
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	2300      	movs	r3, #0
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 fa26 	bl	8002994 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002548:	69fa      	ldr	r2, [r7, #28]
 800254a:	69b9      	ldr	r1, [r7, #24]
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f000 f8b6 	bl	80026be <I2C_WaitOnTXISFlagUntilTimeout>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e02c      	b.n	80025b6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800255c:	88fb      	ldrh	r3, [r7, #6]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d105      	bne.n	800256e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002562:	893b      	ldrh	r3, [r7, #8]
 8002564:	b2da      	uxtb	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	629a      	str	r2, [r3, #40]	@ 0x28
 800256c:	e015      	b.n	800259a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800256e:	893b      	ldrh	r3, [r7, #8]
 8002570:	0a1b      	lsrs	r3, r3, #8
 8002572:	b29b      	uxth	r3, r3
 8002574:	b2da      	uxtb	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800257c:	69fa      	ldr	r2, [r7, #28]
 800257e:	69b9      	ldr	r1, [r7, #24]
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f000 f89c 	bl	80026be <I2C_WaitOnTXISFlagUntilTimeout>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e012      	b.n	80025b6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002590:	893b      	ldrh	r3, [r7, #8]
 8002592:	b2da      	uxtb	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	2200      	movs	r2, #0
 80025a2:	2140      	movs	r1, #64	@ 0x40
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f000 f831 	bl	800260c <I2C_WaitOnFlagUntilTimeout>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e000      	b.n	80025b6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	80002000 	.word	0x80002000

080025c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d103      	bne.n	80025e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2200      	movs	r2, #0
 80025e0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d007      	beq.n	8002600 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	699a      	ldr	r2, [r3, #24]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f042 0201 	orr.w	r2, r2, #1
 80025fe:	619a      	str	r2, [r3, #24]
  }
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	603b      	str	r3, [r7, #0]
 8002618:	4613      	mov	r3, r2
 800261a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800261c:	e03b      	b.n	8002696 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	6839      	ldr	r1, [r7, #0]
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f000 f8d6 	bl	80027d4 <I2C_IsErrorOccurred>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e041      	b.n	80026b6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002638:	d02d      	beq.n	8002696 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800263a:	f7ff f9c1 	bl	80019c0 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d302      	bcc.n	8002650 <I2C_WaitOnFlagUntilTimeout+0x44>
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d122      	bne.n	8002696 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	699a      	ldr	r2, [r3, #24]
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	4013      	ands	r3, r2
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	429a      	cmp	r2, r3
 800265e:	bf0c      	ite	eq
 8002660:	2301      	moveq	r3, #1
 8002662:	2300      	movne	r3, #0
 8002664:	b2db      	uxtb	r3, r3
 8002666:	461a      	mov	r2, r3
 8002668:	79fb      	ldrb	r3, [r7, #7]
 800266a:	429a      	cmp	r2, r3
 800266c:	d113      	bne.n	8002696 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002672:	f043 0220 	orr.w	r2, r3, #32
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2220      	movs	r2, #32
 800267e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e00f      	b.n	80026b6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	699a      	ldr	r2, [r3, #24]
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	4013      	ands	r3, r2
 80026a0:	68ba      	ldr	r2, [r7, #8]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	bf0c      	ite	eq
 80026a6:	2301      	moveq	r3, #1
 80026a8:	2300      	movne	r3, #0
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	461a      	mov	r2, r3
 80026ae:	79fb      	ldrb	r3, [r7, #7]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d0b4      	beq.n	800261e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b084      	sub	sp, #16
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	60f8      	str	r0, [r7, #12]
 80026c6:	60b9      	str	r1, [r7, #8]
 80026c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026ca:	e033      	b.n	8002734 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	68b9      	ldr	r1, [r7, #8]
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 f87f 	bl	80027d4 <I2C_IsErrorOccurred>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e031      	b.n	8002744 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e6:	d025      	beq.n	8002734 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026e8:	f7ff f96a 	bl	80019c0 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d302      	bcc.n	80026fe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d11a      	bne.n	8002734 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b02      	cmp	r3, #2
 800270a:	d013      	beq.n	8002734 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002710:	f043 0220 	orr.w	r2, r3, #32
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2220      	movs	r2, #32
 800271c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e007      	b.n	8002744 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b02      	cmp	r3, #2
 8002740:	d1c4      	bne.n	80026cc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002758:	e02f      	b.n	80027ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	68b9      	ldr	r1, [r7, #8]
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f000 f838 	bl	80027d4 <I2C_IsErrorOccurred>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e02d      	b.n	80027ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800276e:	f7ff f927 	bl	80019c0 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	68ba      	ldr	r2, [r7, #8]
 800277a:	429a      	cmp	r2, r3
 800277c:	d302      	bcc.n	8002784 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d11a      	bne.n	80027ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	f003 0320 	and.w	r3, r3, #32
 800278e:	2b20      	cmp	r3, #32
 8002790:	d013      	beq.n	80027ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002796:	f043 0220 	orr.w	r2, r3, #32
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2220      	movs	r2, #32
 80027a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e007      	b.n	80027ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	f003 0320 	and.w	r3, r3, #32
 80027c4:	2b20      	cmp	r3, #32
 80027c6:	d1c8      	bne.n	800275a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
	...

080027d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08a      	sub	sp, #40	@ 0x28
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027e0:	2300      	movs	r3, #0
 80027e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80027ee:	2300      	movs	r3, #0
 80027f0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	f003 0310 	and.w	r3, r3, #16
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d068      	beq.n	80028d2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2210      	movs	r2, #16
 8002806:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002808:	e049      	b.n	800289e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002810:	d045      	beq.n	800289e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002812:	f7ff f8d5 	bl	80019c0 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	429a      	cmp	r2, r3
 8002820:	d302      	bcc.n	8002828 <I2C_IsErrorOccurred+0x54>
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d13a      	bne.n	800289e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002832:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800283a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002846:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800284a:	d121      	bne.n	8002890 <I2C_IsErrorOccurred+0xbc>
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002852:	d01d      	beq.n	8002890 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002854:	7cfb      	ldrb	r3, [r7, #19]
 8002856:	2b20      	cmp	r3, #32
 8002858:	d01a      	beq.n	8002890 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002868:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800286a:	f7ff f8a9 	bl	80019c0 <HAL_GetTick>
 800286e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002870:	e00e      	b.n	8002890 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002872:	f7ff f8a5 	bl	80019c0 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b19      	cmp	r3, #25
 800287e:	d907      	bls.n	8002890 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002880:	6a3b      	ldr	r3, [r7, #32]
 8002882:	f043 0320 	orr.w	r3, r3, #32
 8002886:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800288e:	e006      	b.n	800289e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	f003 0320 	and.w	r3, r3, #32
 800289a:	2b20      	cmp	r3, #32
 800289c:	d1e9      	bne.n	8002872 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	f003 0320 	and.w	r3, r3, #32
 80028a8:	2b20      	cmp	r3, #32
 80028aa:	d003      	beq.n	80028b4 <I2C_IsErrorOccurred+0xe0>
 80028ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0aa      	beq.n	800280a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80028b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d103      	bne.n	80028c4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2220      	movs	r2, #32
 80028c2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80028c4:	6a3b      	ldr	r3, [r7, #32]
 80028c6:	f043 0304 	orr.w	r3, r3, #4
 80028ca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00b      	beq.n	80028fc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80028e4:	6a3b      	ldr	r3, [r7, #32]
 80028e6:	f043 0301 	orr.w	r3, r3, #1
 80028ea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00b      	beq.n	800291e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002906:	6a3b      	ldr	r3, [r7, #32]
 8002908:	f043 0308 	orr.w	r3, r3, #8
 800290c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002916:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00b      	beq.n	8002940 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002928:	6a3b      	ldr	r3, [r7, #32]
 800292a:	f043 0302 	orr.w	r3, r3, #2
 800292e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002938:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002940:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002944:	2b00      	cmp	r3, #0
 8002946:	d01c      	beq.n	8002982 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f7ff fe3b 	bl	80025c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6859      	ldr	r1, [r3, #4]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	4b0d      	ldr	r3, [pc, #52]	@ (8002990 <I2C_IsErrorOccurred+0x1bc>)
 800295a:	400b      	ands	r3, r1
 800295c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002962:	6a3b      	ldr	r3, [r7, #32]
 8002964:	431a      	orrs	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2220      	movs	r2, #32
 800296e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002982:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002986:	4618      	mov	r0, r3
 8002988:	3728      	adds	r7, #40	@ 0x28
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	fe00e800 	.word	0xfe00e800

08002994 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002994:	b480      	push	{r7}
 8002996:	b087      	sub	sp, #28
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	607b      	str	r3, [r7, #4]
 800299e:	460b      	mov	r3, r1
 80029a0:	817b      	strh	r3, [r7, #10]
 80029a2:	4613      	mov	r3, r2
 80029a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029a6:	897b      	ldrh	r3, [r7, #10]
 80029a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80029ac:	7a7b      	ldrb	r3, [r7, #9]
 80029ae:	041b      	lsls	r3, r3, #16
 80029b0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029b4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029ba:	6a3b      	ldr	r3, [r7, #32]
 80029bc:	4313      	orrs	r3, r2
 80029be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80029c2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	0d5b      	lsrs	r3, r3, #21
 80029ce:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80029d2:	4b08      	ldr	r3, [pc, #32]	@ (80029f4 <I2C_TransferConfig+0x60>)
 80029d4:	430b      	orrs	r3, r1
 80029d6:	43db      	mvns	r3, r3
 80029d8:	ea02 0103 	and.w	r1, r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80029e6:	bf00      	nop
 80029e8:	371c      	adds	r7, #28
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	03ff63ff 	.word	0x03ff63ff

080029f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b20      	cmp	r3, #32
 8002a0c:	d138      	bne.n	8002a80 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d101      	bne.n	8002a1c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e032      	b.n	8002a82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2224      	movs	r2, #36	@ 0x24
 8002a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 0201 	bic.w	r2, r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002a4a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6819      	ldr	r1, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0201 	orr.w	r2, r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	e000      	b.n	8002a82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a80:	2302      	movs	r3, #2
  }
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b085      	sub	sp, #20
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
 8002a96:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b20      	cmp	r3, #32
 8002aa2:	d139      	bne.n	8002b18 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d101      	bne.n	8002ab2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	e033      	b.n	8002b1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2224      	movs	r2, #36	@ 0x24
 8002abe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0201 	bic.w	r2, r2, #1
 8002ad0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002ae0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	021b      	lsls	r3, r3, #8
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0201 	orr.w	r2, r2, #1
 8002b02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2220      	movs	r2, #32
 8002b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b14:	2300      	movs	r3, #0
 8002b16:	e000      	b.n	8002b1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b18:	2302      	movs	r3, #2
  }
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
	...

08002b28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b34:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b38:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d102      	bne.n	8002b4e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	f001 b823 	b.w	8003b94 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b52:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f000 817d 	beq.w	8002e5e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002b64:	4bbc      	ldr	r3, [pc, #752]	@ (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 030c 	and.w	r3, r3, #12
 8002b6c:	2b04      	cmp	r3, #4
 8002b6e:	d00c      	beq.n	8002b8a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b70:	4bb9      	ldr	r3, [pc, #740]	@ (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f003 030c 	and.w	r3, r3, #12
 8002b78:	2b08      	cmp	r3, #8
 8002b7a:	d15c      	bne.n	8002c36 <HAL_RCC_OscConfig+0x10e>
 8002b7c:	4bb6      	ldr	r3, [pc, #728]	@ (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b88:	d155      	bne.n	8002c36 <HAL_RCC_OscConfig+0x10e>
 8002b8a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b8e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b92:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002b96:	fa93 f3a3 	rbit	r3, r3
 8002b9a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b9e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba2:	fab3 f383 	clz	r3, r3
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	095b      	lsrs	r3, r3, #5
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d102      	bne.n	8002bbc <HAL_RCC_OscConfig+0x94>
 8002bb6:	4ba8      	ldr	r3, [pc, #672]	@ (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	e015      	b.n	8002be8 <HAL_RCC_OscConfig+0xc0>
 8002bbc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bc0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002bc8:	fa93 f3a3 	rbit	r3, r3
 8002bcc:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002bd0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bd4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002bd8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002bdc:	fa93 f3a3 	rbit	r3, r3
 8002be0:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002be4:	4b9c      	ldr	r3, [pc, #624]	@ (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002bec:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002bf0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002bf4:	fa92 f2a2 	rbit	r2, r2
 8002bf8:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002bfc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002c00:	fab2 f282 	clz	r2, r2
 8002c04:	b2d2      	uxtb	r2, r2
 8002c06:	f042 0220 	orr.w	r2, r2, #32
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	f002 021f 	and.w	r2, r2, #31
 8002c10:	2101      	movs	r1, #1
 8002c12:	fa01 f202 	lsl.w	r2, r1, r2
 8002c16:	4013      	ands	r3, r2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 811f 	beq.w	8002e5c <HAL_RCC_OscConfig+0x334>
 8002c1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f040 8116 	bne.w	8002e5c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	f000 bfaf 	b.w	8003b94 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c3a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c46:	d106      	bne.n	8002c56 <HAL_RCC_OscConfig+0x12e>
 8002c48:	4b83      	ldr	r3, [pc, #524]	@ (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a82      	ldr	r2, [pc, #520]	@ (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002c4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c52:	6013      	str	r3, [r2, #0]
 8002c54:	e036      	b.n	8002cc4 <HAL_RCC_OscConfig+0x19c>
 8002c56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10c      	bne.n	8002c80 <HAL_RCC_OscConfig+0x158>
 8002c66:	4b7c      	ldr	r3, [pc, #496]	@ (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a7b      	ldr	r2, [pc, #492]	@ (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002c6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	4b79      	ldr	r3, [pc, #484]	@ (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a78      	ldr	r2, [pc, #480]	@ (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002c78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c7c:	6013      	str	r3, [r2, #0]
 8002c7e:	e021      	b.n	8002cc4 <HAL_RCC_OscConfig+0x19c>
 8002c80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c84:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c90:	d10c      	bne.n	8002cac <HAL_RCC_OscConfig+0x184>
 8002c92:	4b71      	ldr	r3, [pc, #452]	@ (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a70      	ldr	r2, [pc, #448]	@ (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002c98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	4b6e      	ldr	r3, [pc, #440]	@ (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a6d      	ldr	r2, [pc, #436]	@ (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002ca4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ca8:	6013      	str	r3, [r2, #0]
 8002caa:	e00b      	b.n	8002cc4 <HAL_RCC_OscConfig+0x19c>
 8002cac:	4b6a      	ldr	r3, [pc, #424]	@ (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a69      	ldr	r2, [pc, #420]	@ (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002cb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cb6:	6013      	str	r3, [r2, #0]
 8002cb8:	4b67      	ldr	r3, [pc, #412]	@ (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a66      	ldr	r2, [pc, #408]	@ (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002cbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cc2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cc4:	4b64      	ldr	r3, [pc, #400]	@ (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc8:	f023 020f 	bic.w	r2, r3, #15
 8002ccc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	495f      	ldr	r1, [pc, #380]	@ (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ce2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d059      	beq.n	8002da2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cee:	f7fe fe67 	bl	80019c0 <HAL_GetTick>
 8002cf2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cf6:	e00a      	b.n	8002d0e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cf8:	f7fe fe62 	bl	80019c0 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b64      	cmp	r3, #100	@ 0x64
 8002d06:	d902      	bls.n	8002d0e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	f000 bf43 	b.w	8003b94 <HAL_RCC_OscConfig+0x106c>
 8002d0e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d12:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d16:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002d1a:	fa93 f3a3 	rbit	r3, r3
 8002d1e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002d22:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d26:	fab3 f383 	clz	r3, r3
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	095b      	lsrs	r3, r3, #5
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	f043 0301 	orr.w	r3, r3, #1
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d102      	bne.n	8002d40 <HAL_RCC_OscConfig+0x218>
 8002d3a:	4b47      	ldr	r3, [pc, #284]	@ (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	e015      	b.n	8002d6c <HAL_RCC_OscConfig+0x244>
 8002d40:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d44:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d48:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002d4c:	fa93 f3a3 	rbit	r3, r3
 8002d50:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002d54:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d58:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002d5c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002d60:	fa93 f3a3 	rbit	r3, r3
 8002d64:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002d68:	4b3b      	ldr	r3, [pc, #236]	@ (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002d70:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002d74:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002d78:	fa92 f2a2 	rbit	r2, r2
 8002d7c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002d80:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002d84:	fab2 f282 	clz	r2, r2
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	f042 0220 	orr.w	r2, r2, #32
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	f002 021f 	and.w	r2, r2, #31
 8002d94:	2101      	movs	r1, #1
 8002d96:	fa01 f202 	lsl.w	r2, r1, r2
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0ab      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x1d0>
 8002da0:	e05d      	b.n	8002e5e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da2:	f7fe fe0d 	bl	80019c0 <HAL_GetTick>
 8002da6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002daa:	e00a      	b.n	8002dc2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dac:	f7fe fe08 	bl	80019c0 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b64      	cmp	r3, #100	@ 0x64
 8002dba:	d902      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	f000 bee9 	b.w	8003b94 <HAL_RCC_OscConfig+0x106c>
 8002dc2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002dc6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dca:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002dce:	fa93 f3a3 	rbit	r3, r3
 8002dd2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002dd6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dda:	fab3 f383 	clz	r3, r3
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	095b      	lsrs	r3, r3, #5
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	f043 0301 	orr.w	r3, r3, #1
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d102      	bne.n	8002df4 <HAL_RCC_OscConfig+0x2cc>
 8002dee:	4b1a      	ldr	r3, [pc, #104]	@ (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	e015      	b.n	8002e20 <HAL_RCC_OscConfig+0x2f8>
 8002df4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002df8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002e00:	fa93 f3a3 	rbit	r3, r3
 8002e04:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002e08:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e0c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002e10:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002e14:	fa93 f3a3 	rbit	r3, r3
 8002e18:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002e1c:	4b0e      	ldr	r3, [pc, #56]	@ (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e20:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002e24:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002e28:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002e2c:	fa92 f2a2 	rbit	r2, r2
 8002e30:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002e34:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002e38:	fab2 f282 	clz	r2, r2
 8002e3c:	b2d2      	uxtb	r2, r2
 8002e3e:	f042 0220 	orr.w	r2, r2, #32
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	f002 021f 	and.w	r2, r2, #31
 8002e48:	2101      	movs	r1, #1
 8002e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e4e:	4013      	ands	r3, r2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1ab      	bne.n	8002dac <HAL_RCC_OscConfig+0x284>
 8002e54:	e003      	b.n	8002e5e <HAL_RCC_OscConfig+0x336>
 8002e56:	bf00      	nop
 8002e58:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 817d 	beq.w	800316e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e74:	4ba6      	ldr	r3, [pc, #664]	@ (8003110 <HAL_RCC_OscConfig+0x5e8>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f003 030c 	and.w	r3, r3, #12
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00b      	beq.n	8002e98 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e80:	4ba3      	ldr	r3, [pc, #652]	@ (8003110 <HAL_RCC_OscConfig+0x5e8>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f003 030c 	and.w	r3, r3, #12
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	d172      	bne.n	8002f72 <HAL_RCC_OscConfig+0x44a>
 8002e8c:	4ba0      	ldr	r3, [pc, #640]	@ (8003110 <HAL_RCC_OscConfig+0x5e8>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d16c      	bne.n	8002f72 <HAL_RCC_OscConfig+0x44a>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002ea2:	fa93 f3a3 	rbit	r3, r3
 8002ea6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002eaa:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eae:	fab3 f383 	clz	r3, r3
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	095b      	lsrs	r3, r3, #5
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d102      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x3a0>
 8002ec2:	4b93      	ldr	r3, [pc, #588]	@ (8003110 <HAL_RCC_OscConfig+0x5e8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	e013      	b.n	8002ef0 <HAL_RCC_OscConfig+0x3c8>
 8002ec8:	2302      	movs	r3, #2
 8002eca:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ece:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002ed2:	fa93 f3a3 	rbit	r3, r3
 8002ed6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002eda:	2302      	movs	r3, #2
 8002edc:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002ee0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002ee4:	fa93 f3a3 	rbit	r3, r3
 8002ee8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002eec:	4b88      	ldr	r3, [pc, #544]	@ (8003110 <HAL_RCC_OscConfig+0x5e8>)
 8002eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002ef6:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002efa:	fa92 f2a2 	rbit	r2, r2
 8002efe:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002f02:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002f06:	fab2 f282 	clz	r2, r2
 8002f0a:	b2d2      	uxtb	r2, r2
 8002f0c:	f042 0220 	orr.w	r2, r2, #32
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	f002 021f 	and.w	r2, r2, #31
 8002f16:	2101      	movs	r1, #1
 8002f18:	fa01 f202 	lsl.w	r2, r1, r2
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00a      	beq.n	8002f38 <HAL_RCC_OscConfig+0x410>
 8002f22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d002      	beq.n	8002f38 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	f000 be2e 	b.w	8003b94 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f38:	4b75      	ldr	r3, [pc, #468]	@ (8003110 <HAL_RCC_OscConfig+0x5e8>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f44:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	21f8      	movs	r1, #248	@ 0xf8
 8002f4e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f52:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002f56:	fa91 f1a1 	rbit	r1, r1
 8002f5a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002f5e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002f62:	fab1 f181 	clz	r1, r1
 8002f66:	b2c9      	uxtb	r1, r1
 8002f68:	408b      	lsls	r3, r1
 8002f6a:	4969      	ldr	r1, [pc, #420]	@ (8003110 <HAL_RCC_OscConfig+0x5e8>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f70:	e0fd      	b.n	800316e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 8088 	beq.w	8003094 <HAL_RCC_OscConfig+0x56c>
 8002f84:	2301      	movs	r3, #1
 8002f86:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002f8e:	fa93 f3a3 	rbit	r3, r3
 8002f92:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002f96:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f9a:	fab3 f383 	clz	r3, r3
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002fa4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	461a      	mov	r2, r3
 8002fac:	2301      	movs	r3, #1
 8002fae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb0:	f7fe fd06 	bl	80019c0 <HAL_GetTick>
 8002fb4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb8:	e00a      	b.n	8002fd0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fba:	f7fe fd01 	bl	80019c0 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d902      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	f000 bde2 	b.w	8003b94 <HAL_RCC_OscConfig+0x106c>
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002fda:	fa93 f3a3 	rbit	r3, r3
 8002fde:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002fe2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe6:	fab3 f383 	clz	r3, r3
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	095b      	lsrs	r3, r3, #5
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	f043 0301 	orr.w	r3, r3, #1
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d102      	bne.n	8003000 <HAL_RCC_OscConfig+0x4d8>
 8002ffa:	4b45      	ldr	r3, [pc, #276]	@ (8003110 <HAL_RCC_OscConfig+0x5e8>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	e013      	b.n	8003028 <HAL_RCC_OscConfig+0x500>
 8003000:	2302      	movs	r3, #2
 8003002:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003006:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800300a:	fa93 f3a3 	rbit	r3, r3
 800300e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003012:	2302      	movs	r3, #2
 8003014:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003018:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800301c:	fa93 f3a3 	rbit	r3, r3
 8003020:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003024:	4b3a      	ldr	r3, [pc, #232]	@ (8003110 <HAL_RCC_OscConfig+0x5e8>)
 8003026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003028:	2202      	movs	r2, #2
 800302a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800302e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003032:	fa92 f2a2 	rbit	r2, r2
 8003036:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800303a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800303e:	fab2 f282 	clz	r2, r2
 8003042:	b2d2      	uxtb	r2, r2
 8003044:	f042 0220 	orr.w	r2, r2, #32
 8003048:	b2d2      	uxtb	r2, r2
 800304a:	f002 021f 	and.w	r2, r2, #31
 800304e:	2101      	movs	r1, #1
 8003050:	fa01 f202 	lsl.w	r2, r1, r2
 8003054:	4013      	ands	r3, r2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d0af      	beq.n	8002fba <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800305a:	4b2d      	ldr	r3, [pc, #180]	@ (8003110 <HAL_RCC_OscConfig+0x5e8>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003062:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003066:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	21f8      	movs	r1, #248	@ 0xf8
 8003070:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003074:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003078:	fa91 f1a1 	rbit	r1, r1
 800307c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003080:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003084:	fab1 f181 	clz	r1, r1
 8003088:	b2c9      	uxtb	r1, r1
 800308a:	408b      	lsls	r3, r1
 800308c:	4920      	ldr	r1, [pc, #128]	@ (8003110 <HAL_RCC_OscConfig+0x5e8>)
 800308e:	4313      	orrs	r3, r2
 8003090:	600b      	str	r3, [r1, #0]
 8003092:	e06c      	b.n	800316e <HAL_RCC_OscConfig+0x646>
 8003094:	2301      	movs	r3, #1
 8003096:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800309e:	fa93 f3a3 	rbit	r3, r3
 80030a2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80030a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030aa:	fab3 f383 	clz	r3, r3
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80030b4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	461a      	mov	r2, r3
 80030bc:	2300      	movs	r3, #0
 80030be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c0:	f7fe fc7e 	bl	80019c0 <HAL_GetTick>
 80030c4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030c8:	e00a      	b.n	80030e0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030ca:	f7fe fc79 	bl	80019c0 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d902      	bls.n	80030e0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	f000 bd5a 	b.w	8003b94 <HAL_RCC_OscConfig+0x106c>
 80030e0:	2302      	movs	r3, #2
 80030e2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80030ea:	fa93 f3a3 	rbit	r3, r3
 80030ee:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80030f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030f6:	fab3 f383 	clz	r3, r3
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	095b      	lsrs	r3, r3, #5
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	f043 0301 	orr.w	r3, r3, #1
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b01      	cmp	r3, #1
 8003108:	d104      	bne.n	8003114 <HAL_RCC_OscConfig+0x5ec>
 800310a:	4b01      	ldr	r3, [pc, #4]	@ (8003110 <HAL_RCC_OscConfig+0x5e8>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	e015      	b.n	800313c <HAL_RCC_OscConfig+0x614>
 8003110:	40021000 	.word	0x40021000
 8003114:	2302      	movs	r3, #2
 8003116:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800311e:	fa93 f3a3 	rbit	r3, r3
 8003122:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003126:	2302      	movs	r3, #2
 8003128:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800312c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003130:	fa93 f3a3 	rbit	r3, r3
 8003134:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003138:	4bc8      	ldr	r3, [pc, #800]	@ (800345c <HAL_RCC_OscConfig+0x934>)
 800313a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800313c:	2202      	movs	r2, #2
 800313e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003142:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003146:	fa92 f2a2 	rbit	r2, r2
 800314a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800314e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003152:	fab2 f282 	clz	r2, r2
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	f042 0220 	orr.w	r2, r2, #32
 800315c:	b2d2      	uxtb	r2, r2
 800315e:	f002 021f 	and.w	r2, r2, #31
 8003162:	2101      	movs	r1, #1
 8003164:	fa01 f202 	lsl.w	r2, r1, r2
 8003168:	4013      	ands	r3, r2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1ad      	bne.n	80030ca <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800316e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003172:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0308 	and.w	r3, r3, #8
 800317e:	2b00      	cmp	r3, #0
 8003180:	f000 8110 	beq.w	80033a4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003184:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003188:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d079      	beq.n	8003288 <HAL_RCC_OscConfig+0x760>
 8003194:	2301      	movs	r3, #1
 8003196:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800319e:	fa93 f3a3 	rbit	r3, r3
 80031a2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80031a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031aa:	fab3 f383 	clz	r3, r3
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	461a      	mov	r2, r3
 80031b2:	4bab      	ldr	r3, [pc, #684]	@ (8003460 <HAL_RCC_OscConfig+0x938>)
 80031b4:	4413      	add	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	461a      	mov	r2, r3
 80031ba:	2301      	movs	r3, #1
 80031bc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031be:	f7fe fbff 	bl	80019c0 <HAL_GetTick>
 80031c2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031c6:	e00a      	b.n	80031de <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031c8:	f7fe fbfa 	bl	80019c0 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d902      	bls.n	80031de <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	f000 bcdb 	b.w	8003b94 <HAL_RCC_OscConfig+0x106c>
 80031de:	2302      	movs	r3, #2
 80031e0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80031e8:	fa93 f3a3 	rbit	r3, r3
 80031ec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80031f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031f4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80031f8:	2202      	movs	r2, #2
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003200:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	fa93 f2a3 	rbit	r2, r3
 800320a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800320e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003218:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800321c:	2202      	movs	r2, #2
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003224:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	fa93 f2a3 	rbit	r2, r3
 800322e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003232:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003236:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003238:	4b88      	ldr	r3, [pc, #544]	@ (800345c <HAL_RCC_OscConfig+0x934>)
 800323a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800323c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003240:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003244:	2102      	movs	r1, #2
 8003246:	6019      	str	r1, [r3, #0]
 8003248:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800324c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	fa93 f1a3 	rbit	r1, r3
 8003256:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800325a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800325e:	6019      	str	r1, [r3, #0]
  return result;
 8003260:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003264:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	fab3 f383 	clz	r3, r3
 800326e:	b2db      	uxtb	r3, r3
 8003270:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003274:	b2db      	uxtb	r3, r3
 8003276:	f003 031f 	and.w	r3, r3, #31
 800327a:	2101      	movs	r1, #1
 800327c:	fa01 f303 	lsl.w	r3, r1, r3
 8003280:	4013      	ands	r3, r2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0a0      	beq.n	80031c8 <HAL_RCC_OscConfig+0x6a0>
 8003286:	e08d      	b.n	80033a4 <HAL_RCC_OscConfig+0x87c>
 8003288:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800328c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003290:	2201      	movs	r2, #1
 8003292:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003294:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003298:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	fa93 f2a3 	rbit	r2, r3
 80032a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032a6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80032aa:	601a      	str	r2, [r3, #0]
  return result;
 80032ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032b0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80032b4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032b6:	fab3 f383 	clz	r3, r3
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	461a      	mov	r2, r3
 80032be:	4b68      	ldr	r3, [pc, #416]	@ (8003460 <HAL_RCC_OscConfig+0x938>)
 80032c0:	4413      	add	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	461a      	mov	r2, r3
 80032c6:	2300      	movs	r3, #0
 80032c8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ca:	f7fe fb79 	bl	80019c0 <HAL_GetTick>
 80032ce:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d2:	e00a      	b.n	80032ea <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032d4:	f7fe fb74 	bl	80019c0 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d902      	bls.n	80032ea <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	f000 bc55 	b.w	8003b94 <HAL_RCC_OscConfig+0x106c>
 80032ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ee:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80032f2:	2202      	movs	r2, #2
 80032f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032fa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	fa93 f2a3 	rbit	r2, r3
 8003304:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003308:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003312:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003316:	2202      	movs	r2, #2
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800331e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	fa93 f2a3 	rbit	r2, r3
 8003328:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800332c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003336:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800333a:	2202      	movs	r2, #2
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003342:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	fa93 f2a3 	rbit	r2, r3
 800334c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003350:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003354:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003356:	4b41      	ldr	r3, [pc, #260]	@ (800345c <HAL_RCC_OscConfig+0x934>)
 8003358:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800335a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800335e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003362:	2102      	movs	r1, #2
 8003364:	6019      	str	r1, [r3, #0]
 8003366:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800336a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	fa93 f1a3 	rbit	r1, r3
 8003374:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003378:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800337c:	6019      	str	r1, [r3, #0]
  return result;
 800337e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003382:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	fab3 f383 	clz	r3, r3
 800338c:	b2db      	uxtb	r3, r3
 800338e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003392:	b2db      	uxtb	r3, r3
 8003394:	f003 031f 	and.w	r3, r3, #31
 8003398:	2101      	movs	r1, #1
 800339a:	fa01 f303 	lsl.w	r3, r1, r3
 800339e:	4013      	ands	r3, r2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d197      	bne.n	80032d4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 81a1 	beq.w	80036fc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ba:	2300      	movs	r3, #0
 80033bc:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033c0:	4b26      	ldr	r3, [pc, #152]	@ (800345c <HAL_RCC_OscConfig+0x934>)
 80033c2:	69db      	ldr	r3, [r3, #28]
 80033c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d116      	bne.n	80033fa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033cc:	4b23      	ldr	r3, [pc, #140]	@ (800345c <HAL_RCC_OscConfig+0x934>)
 80033ce:	69db      	ldr	r3, [r3, #28]
 80033d0:	4a22      	ldr	r2, [pc, #136]	@ (800345c <HAL_RCC_OscConfig+0x934>)
 80033d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033d6:	61d3      	str	r3, [r2, #28]
 80033d8:	4b20      	ldr	r3, [pc, #128]	@ (800345c <HAL_RCC_OscConfig+0x934>)
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80033e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033e4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ee:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80033f2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80033f4:	2301      	movs	r3, #1
 80033f6:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033fa:	4b1a      	ldr	r3, [pc, #104]	@ (8003464 <HAL_RCC_OscConfig+0x93c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003402:	2b00      	cmp	r3, #0
 8003404:	d11a      	bne.n	800343c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003406:	4b17      	ldr	r3, [pc, #92]	@ (8003464 <HAL_RCC_OscConfig+0x93c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a16      	ldr	r2, [pc, #88]	@ (8003464 <HAL_RCC_OscConfig+0x93c>)
 800340c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003410:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003412:	f7fe fad5 	bl	80019c0 <HAL_GetTick>
 8003416:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800341a:	e009      	b.n	8003430 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800341c:	f7fe fad0 	bl	80019c0 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b64      	cmp	r3, #100	@ 0x64
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e3b1      	b.n	8003b94 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003430:	4b0c      	ldr	r3, [pc, #48]	@ (8003464 <HAL_RCC_OscConfig+0x93c>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0ef      	beq.n	800341c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800343c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003440:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d10d      	bne.n	8003468 <HAL_RCC_OscConfig+0x940>
 800344c:	4b03      	ldr	r3, [pc, #12]	@ (800345c <HAL_RCC_OscConfig+0x934>)
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	4a02      	ldr	r2, [pc, #8]	@ (800345c <HAL_RCC_OscConfig+0x934>)
 8003452:	f043 0301 	orr.w	r3, r3, #1
 8003456:	6213      	str	r3, [r2, #32]
 8003458:	e03c      	b.n	80034d4 <HAL_RCC_OscConfig+0x9ac>
 800345a:	bf00      	nop
 800345c:	40021000 	.word	0x40021000
 8003460:	10908120 	.word	0x10908120
 8003464:	40007000 	.word	0x40007000
 8003468:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800346c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10c      	bne.n	8003492 <HAL_RCC_OscConfig+0x96a>
 8003478:	4bc1      	ldr	r3, [pc, #772]	@ (8003780 <HAL_RCC_OscConfig+0xc58>)
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	4ac0      	ldr	r2, [pc, #768]	@ (8003780 <HAL_RCC_OscConfig+0xc58>)
 800347e:	f023 0301 	bic.w	r3, r3, #1
 8003482:	6213      	str	r3, [r2, #32]
 8003484:	4bbe      	ldr	r3, [pc, #760]	@ (8003780 <HAL_RCC_OscConfig+0xc58>)
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	4abd      	ldr	r2, [pc, #756]	@ (8003780 <HAL_RCC_OscConfig+0xc58>)
 800348a:	f023 0304 	bic.w	r3, r3, #4
 800348e:	6213      	str	r3, [r2, #32]
 8003490:	e020      	b.n	80034d4 <HAL_RCC_OscConfig+0x9ac>
 8003492:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003496:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	2b05      	cmp	r3, #5
 80034a0:	d10c      	bne.n	80034bc <HAL_RCC_OscConfig+0x994>
 80034a2:	4bb7      	ldr	r3, [pc, #732]	@ (8003780 <HAL_RCC_OscConfig+0xc58>)
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	4ab6      	ldr	r2, [pc, #728]	@ (8003780 <HAL_RCC_OscConfig+0xc58>)
 80034a8:	f043 0304 	orr.w	r3, r3, #4
 80034ac:	6213      	str	r3, [r2, #32]
 80034ae:	4bb4      	ldr	r3, [pc, #720]	@ (8003780 <HAL_RCC_OscConfig+0xc58>)
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	4ab3      	ldr	r2, [pc, #716]	@ (8003780 <HAL_RCC_OscConfig+0xc58>)
 80034b4:	f043 0301 	orr.w	r3, r3, #1
 80034b8:	6213      	str	r3, [r2, #32]
 80034ba:	e00b      	b.n	80034d4 <HAL_RCC_OscConfig+0x9ac>
 80034bc:	4bb0      	ldr	r3, [pc, #704]	@ (8003780 <HAL_RCC_OscConfig+0xc58>)
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	4aaf      	ldr	r2, [pc, #700]	@ (8003780 <HAL_RCC_OscConfig+0xc58>)
 80034c2:	f023 0301 	bic.w	r3, r3, #1
 80034c6:	6213      	str	r3, [r2, #32]
 80034c8:	4bad      	ldr	r3, [pc, #692]	@ (8003780 <HAL_RCC_OscConfig+0xc58>)
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	4aac      	ldr	r2, [pc, #688]	@ (8003780 <HAL_RCC_OscConfig+0xc58>)
 80034ce:	f023 0304 	bic.w	r3, r3, #4
 80034d2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 8081 	beq.w	80035e8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e6:	f7fe fa6b 	bl	80019c0 <HAL_GetTick>
 80034ea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ee:	e00b      	b.n	8003508 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034f0:	f7fe fa66 	bl	80019c0 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003500:	4293      	cmp	r3, r2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e345      	b.n	8003b94 <HAL_RCC_OscConfig+0x106c>
 8003508:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800350c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003510:	2202      	movs	r2, #2
 8003512:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003514:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003518:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	fa93 f2a3 	rbit	r2, r3
 8003522:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003526:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003530:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003534:	2202      	movs	r2, #2
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800353c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	fa93 f2a3 	rbit	r2, r3
 8003546:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800354a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800354e:	601a      	str	r2, [r3, #0]
  return result;
 8003550:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003554:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003558:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800355a:	fab3 f383 	clz	r3, r3
 800355e:	b2db      	uxtb	r3, r3
 8003560:	095b      	lsrs	r3, r3, #5
 8003562:	b2db      	uxtb	r3, r3
 8003564:	f043 0302 	orr.w	r3, r3, #2
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d102      	bne.n	8003574 <HAL_RCC_OscConfig+0xa4c>
 800356e:	4b84      	ldr	r3, [pc, #528]	@ (8003780 <HAL_RCC_OscConfig+0xc58>)
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	e013      	b.n	800359c <HAL_RCC_OscConfig+0xa74>
 8003574:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003578:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800357c:	2202      	movs	r2, #2
 800357e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003580:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003584:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	fa93 f2a3 	rbit	r2, r3
 800358e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003592:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	4b79      	ldr	r3, [pc, #484]	@ (8003780 <HAL_RCC_OscConfig+0xc58>)
 800359a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035a0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80035a4:	2102      	movs	r1, #2
 80035a6:	6011      	str	r1, [r2, #0]
 80035a8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035ac:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80035b0:	6812      	ldr	r2, [r2, #0]
 80035b2:	fa92 f1a2 	rbit	r1, r2
 80035b6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035ba:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80035be:	6011      	str	r1, [r2, #0]
  return result;
 80035c0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035c4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80035c8:	6812      	ldr	r2, [r2, #0]
 80035ca:	fab2 f282 	clz	r2, r2
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035d4:	b2d2      	uxtb	r2, r2
 80035d6:	f002 021f 	and.w	r2, r2, #31
 80035da:	2101      	movs	r1, #1
 80035dc:	fa01 f202 	lsl.w	r2, r1, r2
 80035e0:	4013      	ands	r3, r2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d084      	beq.n	80034f0 <HAL_RCC_OscConfig+0x9c8>
 80035e6:	e07f      	b.n	80036e8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035e8:	f7fe f9ea 	bl	80019c0 <HAL_GetTick>
 80035ec:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035f0:	e00b      	b.n	800360a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035f2:	f7fe f9e5 	bl	80019c0 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003602:	4293      	cmp	r3, r2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e2c4      	b.n	8003b94 <HAL_RCC_OscConfig+0x106c>
 800360a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800360e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003612:	2202      	movs	r2, #2
 8003614:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003616:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800361a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	fa93 f2a3 	rbit	r2, r3
 8003624:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003628:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800362c:	601a      	str	r2, [r3, #0]
 800362e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003632:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003636:	2202      	movs	r2, #2
 8003638:	601a      	str	r2, [r3, #0]
 800363a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800363e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	fa93 f2a3 	rbit	r2, r3
 8003648:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800364c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003650:	601a      	str	r2, [r3, #0]
  return result;
 8003652:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003656:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800365a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800365c:	fab3 f383 	clz	r3, r3
 8003660:	b2db      	uxtb	r3, r3
 8003662:	095b      	lsrs	r3, r3, #5
 8003664:	b2db      	uxtb	r3, r3
 8003666:	f043 0302 	orr.w	r3, r3, #2
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d102      	bne.n	8003676 <HAL_RCC_OscConfig+0xb4e>
 8003670:	4b43      	ldr	r3, [pc, #268]	@ (8003780 <HAL_RCC_OscConfig+0xc58>)
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	e013      	b.n	800369e <HAL_RCC_OscConfig+0xb76>
 8003676:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800367a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800367e:	2202      	movs	r2, #2
 8003680:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003682:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003686:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	fa93 f2a3 	rbit	r2, r3
 8003690:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003694:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003698:	601a      	str	r2, [r3, #0]
 800369a:	4b39      	ldr	r3, [pc, #228]	@ (8003780 <HAL_RCC_OscConfig+0xc58>)
 800369c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800369e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036a2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80036a6:	2102      	movs	r1, #2
 80036a8:	6011      	str	r1, [r2, #0]
 80036aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036ae:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80036b2:	6812      	ldr	r2, [r2, #0]
 80036b4:	fa92 f1a2 	rbit	r1, r2
 80036b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036bc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80036c0:	6011      	str	r1, [r2, #0]
  return result;
 80036c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036c6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80036ca:	6812      	ldr	r2, [r2, #0]
 80036cc:	fab2 f282 	clz	r2, r2
 80036d0:	b2d2      	uxtb	r2, r2
 80036d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	f002 021f 	and.w	r2, r2, #31
 80036dc:	2101      	movs	r1, #1
 80036de:	fa01 f202 	lsl.w	r2, r1, r2
 80036e2:	4013      	ands	r3, r2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d184      	bne.n	80035f2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036e8:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d105      	bne.n	80036fc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036f0:	4b23      	ldr	r3, [pc, #140]	@ (8003780 <HAL_RCC_OscConfig+0xc58>)
 80036f2:	69db      	ldr	r3, [r3, #28]
 80036f4:	4a22      	ldr	r2, [pc, #136]	@ (8003780 <HAL_RCC_OscConfig+0xc58>)
 80036f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036fa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003700:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	2b00      	cmp	r3, #0
 800370a:	f000 8242 	beq.w	8003b92 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800370e:	4b1c      	ldr	r3, [pc, #112]	@ (8003780 <HAL_RCC_OscConfig+0xc58>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f003 030c 	and.w	r3, r3, #12
 8003716:	2b08      	cmp	r3, #8
 8003718:	f000 8213 	beq.w	8003b42 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800371c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003720:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	69db      	ldr	r3, [r3, #28]
 8003728:	2b02      	cmp	r3, #2
 800372a:	f040 8162 	bne.w	80039f2 <HAL_RCC_OscConfig+0xeca>
 800372e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003732:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003736:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800373a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003740:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	fa93 f2a3 	rbit	r2, r3
 800374a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800374e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003752:	601a      	str	r2, [r3, #0]
  return result;
 8003754:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003758:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800375c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800375e:	fab3 f383 	clz	r3, r3
 8003762:	b2db      	uxtb	r3, r3
 8003764:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003768:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	461a      	mov	r2, r3
 8003770:	2300      	movs	r3, #0
 8003772:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003774:	f7fe f924 	bl	80019c0 <HAL_GetTick>
 8003778:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800377c:	e00c      	b.n	8003798 <HAL_RCC_OscConfig+0xc70>
 800377e:	bf00      	nop
 8003780:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003784:	f7fe f91c 	bl	80019c0 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d901      	bls.n	8003798 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e1fd      	b.n	8003b94 <HAL_RCC_OscConfig+0x106c>
 8003798:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800379c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80037a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037aa:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	fa93 f2a3 	rbit	r2, r3
 80037b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037b8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80037bc:	601a      	str	r2, [r3, #0]
  return result;
 80037be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037c2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80037c6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037c8:	fab3 f383 	clz	r3, r3
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	095b      	lsrs	r3, r3, #5
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	f043 0301 	orr.w	r3, r3, #1
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d102      	bne.n	80037e2 <HAL_RCC_OscConfig+0xcba>
 80037dc:	4bb0      	ldr	r3, [pc, #704]	@ (8003aa0 <HAL_RCC_OscConfig+0xf78>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	e027      	b.n	8003832 <HAL_RCC_OscConfig+0xd0a>
 80037e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037e6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80037ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037f4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	fa93 f2a3 	rbit	r2, r3
 80037fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003802:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800380c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003810:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800381a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	fa93 f2a3 	rbit	r2, r3
 8003824:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003828:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	4b9c      	ldr	r3, [pc, #624]	@ (8003aa0 <HAL_RCC_OscConfig+0xf78>)
 8003830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003832:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003836:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800383a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800383e:	6011      	str	r1, [r2, #0]
 8003840:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003844:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003848:	6812      	ldr	r2, [r2, #0]
 800384a:	fa92 f1a2 	rbit	r1, r2
 800384e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003852:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003856:	6011      	str	r1, [r2, #0]
  return result;
 8003858:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800385c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003860:	6812      	ldr	r2, [r2, #0]
 8003862:	fab2 f282 	clz	r2, r2
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	f042 0220 	orr.w	r2, r2, #32
 800386c:	b2d2      	uxtb	r2, r2
 800386e:	f002 021f 	and.w	r2, r2, #31
 8003872:	2101      	movs	r1, #1
 8003874:	fa01 f202 	lsl.w	r2, r1, r2
 8003878:	4013      	ands	r3, r2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d182      	bne.n	8003784 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800387e:	4b88      	ldr	r3, [pc, #544]	@ (8003aa0 <HAL_RCC_OscConfig+0xf78>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003886:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800388a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003892:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003896:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	430b      	orrs	r3, r1
 80038a0:	497f      	ldr	r1, [pc, #508]	@ (8003aa0 <HAL_RCC_OscConfig+0xf78>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	604b      	str	r3, [r1, #4]
 80038a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038aa:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80038ae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80038b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038b8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	fa93 f2a3 	rbit	r2, r3
 80038c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038c6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80038ca:	601a      	str	r2, [r3, #0]
  return result;
 80038cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038d0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80038d4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038d6:	fab3 f383 	clz	r3, r3
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80038e0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	461a      	mov	r2, r3
 80038e8:	2301      	movs	r3, #1
 80038ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ec:	f7fe f868 	bl	80019c0 <HAL_GetTick>
 80038f0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038f4:	e009      	b.n	800390a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038f6:	f7fe f863 	bl	80019c0 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e144      	b.n	8003b94 <HAL_RCC_OscConfig+0x106c>
 800390a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800390e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003912:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003916:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003918:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800391c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	fa93 f2a3 	rbit	r2, r3
 8003926:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800392a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800392e:	601a      	str	r2, [r3, #0]
  return result;
 8003930:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003934:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003938:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800393a:	fab3 f383 	clz	r3, r3
 800393e:	b2db      	uxtb	r3, r3
 8003940:	095b      	lsrs	r3, r3, #5
 8003942:	b2db      	uxtb	r3, r3
 8003944:	f043 0301 	orr.w	r3, r3, #1
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b01      	cmp	r3, #1
 800394c:	d102      	bne.n	8003954 <HAL_RCC_OscConfig+0xe2c>
 800394e:	4b54      	ldr	r3, [pc, #336]	@ (8003aa0 <HAL_RCC_OscConfig+0xf78>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	e027      	b.n	80039a4 <HAL_RCC_OscConfig+0xe7c>
 8003954:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003958:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800395c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003960:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003962:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003966:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	fa93 f2a3 	rbit	r2, r3
 8003970:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003974:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003978:	601a      	str	r2, [r3, #0]
 800397a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800397e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003982:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800398c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	fa93 f2a3 	rbit	r2, r3
 8003996:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800399a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	4b3f      	ldr	r3, [pc, #252]	@ (8003aa0 <HAL_RCC_OscConfig+0xf78>)
 80039a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80039a8:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80039ac:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80039b0:	6011      	str	r1, [r2, #0]
 80039b2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80039b6:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80039ba:	6812      	ldr	r2, [r2, #0]
 80039bc:	fa92 f1a2 	rbit	r1, r2
 80039c0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80039c4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80039c8:	6011      	str	r1, [r2, #0]
  return result;
 80039ca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80039ce:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80039d2:	6812      	ldr	r2, [r2, #0]
 80039d4:	fab2 f282 	clz	r2, r2
 80039d8:	b2d2      	uxtb	r2, r2
 80039da:	f042 0220 	orr.w	r2, r2, #32
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	f002 021f 	and.w	r2, r2, #31
 80039e4:	2101      	movs	r1, #1
 80039e6:	fa01 f202 	lsl.w	r2, r1, r2
 80039ea:	4013      	ands	r3, r2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d082      	beq.n	80038f6 <HAL_RCC_OscConfig+0xdce>
 80039f0:	e0cf      	b.n	8003b92 <HAL_RCC_OscConfig+0x106a>
 80039f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039f6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80039fa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80039fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a04:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	fa93 f2a3 	rbit	r2, r3
 8003a0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a12:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003a16:	601a      	str	r2, [r3, #0]
  return result;
 8003a18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a1c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003a20:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a22:	fab3 f383 	clz	r3, r3
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003a2c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	461a      	mov	r2, r3
 8003a34:	2300      	movs	r3, #0
 8003a36:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a38:	f7fd ffc2 	bl	80019c0 <HAL_GetTick>
 8003a3c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a40:	e009      	b.n	8003a56 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a42:	f7fd ffbd 	bl	80019c0 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e09e      	b.n	8003b94 <HAL_RCC_OscConfig+0x106c>
 8003a56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a5a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003a5e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a68:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	fa93 f2a3 	rbit	r2, r3
 8003a72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a76:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003a7a:	601a      	str	r2, [r3, #0]
  return result;
 8003a7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a80:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003a84:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a86:	fab3 f383 	clz	r3, r3
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	095b      	lsrs	r3, r3, #5
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	f043 0301 	orr.w	r3, r3, #1
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d104      	bne.n	8003aa4 <HAL_RCC_OscConfig+0xf7c>
 8003a9a:	4b01      	ldr	r3, [pc, #4]	@ (8003aa0 <HAL_RCC_OscConfig+0xf78>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	e029      	b.n	8003af4 <HAL_RCC_OscConfig+0xfcc>
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aa8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003aac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ab0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ab6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	fa93 f2a3 	rbit	r2, r3
 8003ac0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ac4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003ac8:	601a      	str	r2, [r3, #0]
 8003aca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ace:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003ad2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ad6:	601a      	str	r2, [r3, #0]
 8003ad8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003adc:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	fa93 f2a3 	rbit	r2, r3
 8003ae6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aea:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	4b2b      	ldr	r3, [pc, #172]	@ (8003ba0 <HAL_RCC_OscConfig+0x1078>)
 8003af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003af8:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003afc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003b00:	6011      	str	r1, [r2, #0]
 8003b02:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b06:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003b0a:	6812      	ldr	r2, [r2, #0]
 8003b0c:	fa92 f1a2 	rbit	r1, r2
 8003b10:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b14:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003b18:	6011      	str	r1, [r2, #0]
  return result;
 8003b1a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b1e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003b22:	6812      	ldr	r2, [r2, #0]
 8003b24:	fab2 f282 	clz	r2, r2
 8003b28:	b2d2      	uxtb	r2, r2
 8003b2a:	f042 0220 	orr.w	r2, r2, #32
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	f002 021f 	and.w	r2, r2, #31
 8003b34:	2101      	movs	r1, #1
 8003b36:	fa01 f202 	lsl.w	r2, r1, r2
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d180      	bne.n	8003a42 <HAL_RCC_OscConfig+0xf1a>
 8003b40:	e027      	b.n	8003b92 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b46:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d101      	bne.n	8003b56 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e01e      	b.n	8003b94 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b56:	4b12      	ldr	r3, [pc, #72]	@ (8003ba0 <HAL_RCC_OscConfig+0x1078>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b5e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003b62:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003b66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b6a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d10b      	bne.n	8003b8e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003b76:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003b7a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003b7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d001      	beq.n	8003b92 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e000      	b.n	8003b94 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	40021000 	.word	0x40021000

08003ba4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b09e      	sub	sp, #120	@ 0x78
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d101      	bne.n	8003bbc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e162      	b.n	8003e82 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bbc:	4b90      	ldr	r3, [pc, #576]	@ (8003e00 <HAL_RCC_ClockConfig+0x25c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d910      	bls.n	8003bec <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bca:	4b8d      	ldr	r3, [pc, #564]	@ (8003e00 <HAL_RCC_ClockConfig+0x25c>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f023 0207 	bic.w	r2, r3, #7
 8003bd2:	498b      	ldr	r1, [pc, #556]	@ (8003e00 <HAL_RCC_ClockConfig+0x25c>)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bda:	4b89      	ldr	r3, [pc, #548]	@ (8003e00 <HAL_RCC_ClockConfig+0x25c>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0307 	and.w	r3, r3, #7
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d001      	beq.n	8003bec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e14a      	b.n	8003e82 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d008      	beq.n	8003c0a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bf8:	4b82      	ldr	r3, [pc, #520]	@ (8003e04 <HAL_RCC_ClockConfig+0x260>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	497f      	ldr	r1, [pc, #508]	@ (8003e04 <HAL_RCC_ClockConfig+0x260>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 80dc 	beq.w	8003dd0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d13c      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xf6>
 8003c20:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c24:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c28:	fa93 f3a3 	rbit	r3, r3
 8003c2c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003c2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c30:	fab3 f383 	clz	r3, r3
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	095b      	lsrs	r3, r3, #5
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	f043 0301 	orr.w	r3, r3, #1
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d102      	bne.n	8003c4a <HAL_RCC_ClockConfig+0xa6>
 8003c44:	4b6f      	ldr	r3, [pc, #444]	@ (8003e04 <HAL_RCC_ClockConfig+0x260>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	e00f      	b.n	8003c6a <HAL_RCC_ClockConfig+0xc6>
 8003c4a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c4e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c52:	fa93 f3a3 	rbit	r3, r3
 8003c56:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c58:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c60:	fa93 f3a3 	rbit	r3, r3
 8003c64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c66:	4b67      	ldr	r3, [pc, #412]	@ (8003e04 <HAL_RCC_ClockConfig+0x260>)
 8003c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003c6e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003c70:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c72:	fa92 f2a2 	rbit	r2, r2
 8003c76:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003c78:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003c7a:	fab2 f282 	clz	r2, r2
 8003c7e:	b2d2      	uxtb	r2, r2
 8003c80:	f042 0220 	orr.w	r2, r2, #32
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	f002 021f 	and.w	r2, r2, #31
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c90:	4013      	ands	r3, r2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d17b      	bne.n	8003d8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e0f3      	b.n	8003e82 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d13c      	bne.n	8003d1c <HAL_RCC_ClockConfig+0x178>
 8003ca2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ca6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003caa:	fa93 f3a3 	rbit	r3, r3
 8003cae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003cb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cb2:	fab3 f383 	clz	r3, r3
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	095b      	lsrs	r3, r3, #5
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	f043 0301 	orr.w	r3, r3, #1
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d102      	bne.n	8003ccc <HAL_RCC_ClockConfig+0x128>
 8003cc6:	4b4f      	ldr	r3, [pc, #316]	@ (8003e04 <HAL_RCC_ClockConfig+0x260>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	e00f      	b.n	8003cec <HAL_RCC_ClockConfig+0x148>
 8003ccc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003cd0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cd4:	fa93 f3a3 	rbit	r3, r3
 8003cd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003cde:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ce0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ce2:	fa93 f3a3 	rbit	r3, r3
 8003ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ce8:	4b46      	ldr	r3, [pc, #280]	@ (8003e04 <HAL_RCC_ClockConfig+0x260>)
 8003cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003cf0:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003cf2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003cf4:	fa92 f2a2 	rbit	r2, r2
 8003cf8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003cfa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003cfc:	fab2 f282 	clz	r2, r2
 8003d00:	b2d2      	uxtb	r2, r2
 8003d02:	f042 0220 	orr.w	r2, r2, #32
 8003d06:	b2d2      	uxtb	r2, r2
 8003d08:	f002 021f 	and.w	r2, r2, #31
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d12:	4013      	ands	r3, r2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d13a      	bne.n	8003d8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e0b2      	b.n	8003e82 <HAL_RCC_ClockConfig+0x2de>
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d22:	fa93 f3a3 	rbit	r3, r3
 8003d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d2a:	fab3 f383 	clz	r3, r3
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	095b      	lsrs	r3, r3, #5
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	f043 0301 	orr.w	r3, r3, #1
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d102      	bne.n	8003d44 <HAL_RCC_ClockConfig+0x1a0>
 8003d3e:	4b31      	ldr	r3, [pc, #196]	@ (8003e04 <HAL_RCC_ClockConfig+0x260>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	e00d      	b.n	8003d60 <HAL_RCC_ClockConfig+0x1bc>
 8003d44:	2302      	movs	r3, #2
 8003d46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d4a:	fa93 f3a3 	rbit	r3, r3
 8003d4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d50:	2302      	movs	r3, #2
 8003d52:	623b      	str	r3, [r7, #32]
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	fa93 f3a3 	rbit	r3, r3
 8003d5a:	61fb      	str	r3, [r7, #28]
 8003d5c:	4b29      	ldr	r3, [pc, #164]	@ (8003e04 <HAL_RCC_ClockConfig+0x260>)
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d60:	2202      	movs	r2, #2
 8003d62:	61ba      	str	r2, [r7, #24]
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	fa92 f2a2 	rbit	r2, r2
 8003d6a:	617a      	str	r2, [r7, #20]
  return result;
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	fab2 f282 	clz	r2, r2
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	f042 0220 	orr.w	r2, r2, #32
 8003d78:	b2d2      	uxtb	r2, r2
 8003d7a:	f002 021f 	and.w	r2, r2, #31
 8003d7e:	2101      	movs	r1, #1
 8003d80:	fa01 f202 	lsl.w	r2, r1, r2
 8003d84:	4013      	ands	r3, r2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e079      	b.n	8003e82 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d8e:	4b1d      	ldr	r3, [pc, #116]	@ (8003e04 <HAL_RCC_ClockConfig+0x260>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f023 0203 	bic.w	r2, r3, #3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	491a      	ldr	r1, [pc, #104]	@ (8003e04 <HAL_RCC_ClockConfig+0x260>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003da0:	f7fd fe0e 	bl	80019c0 <HAL_GetTick>
 8003da4:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003da6:	e00a      	b.n	8003dbe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003da8:	f7fd fe0a 	bl	80019c0 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e061      	b.n	8003e82 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dbe:	4b11      	ldr	r3, [pc, #68]	@ (8003e04 <HAL_RCC_ClockConfig+0x260>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f003 020c 	and.w	r2, r3, #12
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d1eb      	bne.n	8003da8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8003e00 <HAL_RCC_ClockConfig+0x25c>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d214      	bcs.n	8003e08 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dde:	4b08      	ldr	r3, [pc, #32]	@ (8003e00 <HAL_RCC_ClockConfig+0x25c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f023 0207 	bic.w	r2, r3, #7
 8003de6:	4906      	ldr	r1, [pc, #24]	@ (8003e00 <HAL_RCC_ClockConfig+0x25c>)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dee:	4b04      	ldr	r3, [pc, #16]	@ (8003e00 <HAL_RCC_ClockConfig+0x25c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0307 	and.w	r3, r3, #7
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d005      	beq.n	8003e08 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e040      	b.n	8003e82 <HAL_RCC_ClockConfig+0x2de>
 8003e00:	40022000 	.word	0x40022000
 8003e04:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0304 	and.w	r3, r3, #4
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d008      	beq.n	8003e26 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e14:	4b1d      	ldr	r3, [pc, #116]	@ (8003e8c <HAL_RCC_ClockConfig+0x2e8>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	491a      	ldr	r1, [pc, #104]	@ (8003e8c <HAL_RCC_ClockConfig+0x2e8>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0308 	and.w	r3, r3, #8
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d009      	beq.n	8003e46 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e32:	4b16      	ldr	r3, [pc, #88]	@ (8003e8c <HAL_RCC_ClockConfig+0x2e8>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	4912      	ldr	r1, [pc, #72]	@ (8003e8c <HAL_RCC_ClockConfig+0x2e8>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003e46:	f000 f829 	bl	8003e9c <HAL_RCC_GetSysClockFreq>
 8003e4a:	4601      	mov	r1, r0
 8003e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8003e8c <HAL_RCC_ClockConfig+0x2e8>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e54:	22f0      	movs	r2, #240	@ 0xf0
 8003e56:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	fa92 f2a2 	rbit	r2, r2
 8003e5e:	60fa      	str	r2, [r7, #12]
  return result;
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	fab2 f282 	clz	r2, r2
 8003e66:	b2d2      	uxtb	r2, r2
 8003e68:	40d3      	lsrs	r3, r2
 8003e6a:	4a09      	ldr	r2, [pc, #36]	@ (8003e90 <HAL_RCC_ClockConfig+0x2ec>)
 8003e6c:	5cd3      	ldrb	r3, [r2, r3]
 8003e6e:	fa21 f303 	lsr.w	r3, r1, r3
 8003e72:	4a08      	ldr	r2, [pc, #32]	@ (8003e94 <HAL_RCC_ClockConfig+0x2f0>)
 8003e74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003e76:	4b08      	ldr	r3, [pc, #32]	@ (8003e98 <HAL_RCC_ClockConfig+0x2f4>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fd fd5c 	bl	8001938 <HAL_InitTick>
  
  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3778      	adds	r7, #120	@ 0x78
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	08009a28 	.word	0x08009a28
 8003e94:	20000000 	.word	0x20000000
 8003e98:	20000004 	.word	0x20000004

08003e9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60fb      	str	r3, [r7, #12]
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	60bb      	str	r3, [r7, #8]
 8003eaa:	2300      	movs	r3, #0
 8003eac:	617b      	str	r3, [r7, #20]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003eb6:	4b1e      	ldr	r3, [pc, #120]	@ (8003f30 <HAL_RCC_GetSysClockFreq+0x94>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f003 030c 	and.w	r3, r3, #12
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	d002      	beq.n	8003ecc <HAL_RCC_GetSysClockFreq+0x30>
 8003ec6:	2b08      	cmp	r3, #8
 8003ec8:	d003      	beq.n	8003ed2 <HAL_RCC_GetSysClockFreq+0x36>
 8003eca:	e026      	b.n	8003f1a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ecc:	4b19      	ldr	r3, [pc, #100]	@ (8003f34 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ece:	613b      	str	r3, [r7, #16]
      break;
 8003ed0:	e026      	b.n	8003f20 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	0c9b      	lsrs	r3, r3, #18
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	4a17      	ldr	r2, [pc, #92]	@ (8003f38 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003edc:	5cd3      	ldrb	r3, [r2, r3]
 8003ede:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003ee0:	4b13      	ldr	r3, [pc, #76]	@ (8003f30 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee4:	f003 030f 	and.w	r3, r3, #15
 8003ee8:	4a14      	ldr	r2, [pc, #80]	@ (8003f3c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003eea:	5cd3      	ldrb	r3, [r2, r3]
 8003eec:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d008      	beq.n	8003f0a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ef8:	4a0e      	ldr	r2, [pc, #56]	@ (8003f34 <HAL_RCC_GetSysClockFreq+0x98>)
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	fb02 f303 	mul.w	r3, r2, r3
 8003f06:	617b      	str	r3, [r7, #20]
 8003f08:	e004      	b.n	8003f14 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a0c      	ldr	r2, [pc, #48]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f0e:	fb02 f303 	mul.w	r3, r2, r3
 8003f12:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	613b      	str	r3, [r7, #16]
      break;
 8003f18:	e002      	b.n	8003f20 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f1a:	4b06      	ldr	r3, [pc, #24]	@ (8003f34 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f1c:	613b      	str	r3, [r7, #16]
      break;
 8003f1e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f20:	693b      	ldr	r3, [r7, #16]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	371c      	adds	r7, #28
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40021000 	.word	0x40021000
 8003f34:	007a1200 	.word	0x007a1200
 8003f38:	08009a38 	.word	0x08009a38
 8003f3c:	08009a48 	.word	0x08009a48
 8003f40:	003d0900 	.word	0x003d0900

08003f44 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b092      	sub	sp, #72	@ 0x48
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003f50:	2300      	movs	r3, #0
 8003f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003f54:	2300      	movs	r3, #0
 8003f56:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 80d4 	beq.w	8004110 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f68:	4b4e      	ldr	r3, [pc, #312]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f6a:	69db      	ldr	r3, [r3, #28]
 8003f6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10e      	bne.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f74:	4b4b      	ldr	r3, [pc, #300]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f76:	69db      	ldr	r3, [r3, #28]
 8003f78:	4a4a      	ldr	r2, [pc, #296]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f7e:	61d3      	str	r3, [r2, #28]
 8003f80:	4b48      	ldr	r3, [pc, #288]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f88:	60bb      	str	r3, [r7, #8]
 8003f8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f92:	4b45      	ldr	r3, [pc, #276]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d118      	bne.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f9e:	4b42      	ldr	r3, [pc, #264]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a41      	ldr	r2, [pc, #260]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fa8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003faa:	f7fd fd09 	bl	80019c0 <HAL_GetTick>
 8003fae:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb0:	e008      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fb2:	f7fd fd05 	bl	80019c0 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b64      	cmp	r3, #100	@ 0x64
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e169      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc4:	4b38      	ldr	r3, [pc, #224]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d0f0      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fd0:	4b34      	ldr	r3, [pc, #208]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 8084 	beq.w	80040ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d07c      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ff0:	4b2c      	ldr	r3, [pc, #176]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ffa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003ffe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004002:	fa93 f3a3 	rbit	r3, r3
 8004006:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800400a:	fab3 f383 	clz	r3, r3
 800400e:	b2db      	uxtb	r3, r3
 8004010:	461a      	mov	r2, r3
 8004012:	4b26      	ldr	r3, [pc, #152]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004014:	4413      	add	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	461a      	mov	r2, r3
 800401a:	2301      	movs	r3, #1
 800401c:	6013      	str	r3, [r2, #0]
 800401e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004022:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004026:	fa93 f3a3 	rbit	r3, r3
 800402a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800402c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800402e:	fab3 f383 	clz	r3, r3
 8004032:	b2db      	uxtb	r3, r3
 8004034:	461a      	mov	r2, r3
 8004036:	4b1d      	ldr	r3, [pc, #116]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004038:	4413      	add	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	461a      	mov	r2, r3
 800403e:	2300      	movs	r3, #0
 8004040:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004042:	4a18      	ldr	r2, [pc, #96]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004046:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004048:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d04b      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004052:	f7fd fcb5 	bl	80019c0 <HAL_GetTick>
 8004056:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004058:	e00a      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800405a:	f7fd fcb1 	bl	80019c0 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004068:	4293      	cmp	r3, r2
 800406a:	d901      	bls.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e113      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004070:	2302      	movs	r3, #2
 8004072:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004076:	fa93 f3a3 	rbit	r3, r3
 800407a:	627b      	str	r3, [r7, #36]	@ 0x24
 800407c:	2302      	movs	r3, #2
 800407e:	623b      	str	r3, [r7, #32]
 8004080:	6a3b      	ldr	r3, [r7, #32]
 8004082:	fa93 f3a3 	rbit	r3, r3
 8004086:	61fb      	str	r3, [r7, #28]
  return result;
 8004088:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800408a:	fab3 f383 	clz	r3, r3
 800408e:	b2db      	uxtb	r3, r3
 8004090:	095b      	lsrs	r3, r3, #5
 8004092:	b2db      	uxtb	r3, r3
 8004094:	f043 0302 	orr.w	r3, r3, #2
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d108      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800409e:	4b01      	ldr	r3, [pc, #4]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	e00d      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80040a4:	40021000 	.word	0x40021000
 80040a8:	40007000 	.word	0x40007000
 80040ac:	10908100 	.word	0x10908100
 80040b0:	2302      	movs	r3, #2
 80040b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	fa93 f3a3 	rbit	r3, r3
 80040ba:	617b      	str	r3, [r7, #20]
 80040bc:	4b78      	ldr	r3, [pc, #480]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c0:	2202      	movs	r2, #2
 80040c2:	613a      	str	r2, [r7, #16]
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	fa92 f2a2 	rbit	r2, r2
 80040ca:	60fa      	str	r2, [r7, #12]
  return result;
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	fab2 f282 	clz	r2, r2
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040d8:	b2d2      	uxtb	r2, r2
 80040da:	f002 021f 	and.w	r2, r2, #31
 80040de:	2101      	movs	r1, #1
 80040e0:	fa01 f202 	lsl.w	r2, r1, r2
 80040e4:	4013      	ands	r3, r2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d0b7      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80040ea:	4b6d      	ldr	r3, [pc, #436]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	496a      	ldr	r1, [pc, #424]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80040fc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004100:	2b01      	cmp	r3, #1
 8004102:	d105      	bne.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004104:	4b66      	ldr	r3, [pc, #408]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004106:	69db      	ldr	r3, [r3, #28]
 8004108:	4a65      	ldr	r2, [pc, #404]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800410a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800410e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	2b00      	cmp	r3, #0
 800411a:	d008      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800411c:	4b60      	ldr	r3, [pc, #384]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800411e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004120:	f023 0203 	bic.w	r2, r3, #3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	495d      	ldr	r1, [pc, #372]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800412a:	4313      	orrs	r3, r2
 800412c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d008      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800413a:	4b59      	ldr	r3, [pc, #356]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800413c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800413e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	4956      	ldr	r1, [pc, #344]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004148:	4313      	orrs	r3, r2
 800414a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0304 	and.w	r3, r3, #4
 8004154:	2b00      	cmp	r3, #0
 8004156:	d008      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004158:	4b51      	ldr	r3, [pc, #324]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800415a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800415c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	494e      	ldr	r1, [pc, #312]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004166:	4313      	orrs	r3, r2
 8004168:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0320 	and.w	r3, r3, #32
 8004172:	2b00      	cmp	r3, #0
 8004174:	d008      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004176:	4b4a      	ldr	r3, [pc, #296]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800417a:	f023 0210 	bic.w	r2, r3, #16
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	4947      	ldr	r1, [pc, #284]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004184:	4313      	orrs	r3, r2
 8004186:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d008      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004194:	4b42      	ldr	r3, [pc, #264]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a0:	493f      	ldr	r1, [pc, #252]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d008      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041b2:	4b3b      	ldr	r3, [pc, #236]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b6:	f023 0220 	bic.w	r2, r3, #32
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	4938      	ldr	r1, [pc, #224]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0308 	and.w	r3, r3, #8
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d008      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041d0:	4b33      	ldr	r3, [pc, #204]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	4930      	ldr	r1, [pc, #192]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0310 	and.w	r3, r3, #16
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d008      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041ee:	4b2c      	ldr	r3, [pc, #176]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	4929      	ldr	r1, [pc, #164]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004208:	2b00      	cmp	r3, #0
 800420a:	d008      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800420c:	4b24      	ldr	r3, [pc, #144]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004218:	4921      	ldr	r1, [pc, #132]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800421a:	4313      	orrs	r3, r2
 800421c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004226:	2b00      	cmp	r3, #0
 8004228:	d008      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800422a:	4b1d      	ldr	r3, [pc, #116]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800422c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800422e:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004236:	491a      	ldr	r1, [pc, #104]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004238:	4313      	orrs	r3, r2
 800423a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004244:	2b00      	cmp	r3, #0
 8004246:	d008      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004248:	4b15      	ldr	r3, [pc, #84]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800424a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424c:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004254:	4912      	ldr	r1, [pc, #72]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004256:	4313      	orrs	r3, r2
 8004258:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d008      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004266:	4b0e      	ldr	r3, [pc, #56]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800426a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004272:	490b      	ldr	r1, [pc, #44]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004274:	4313      	orrs	r3, r2
 8004276:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d008      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004284:	4b06      	ldr	r3, [pc, #24]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004288:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004290:	4903      	ldr	r1, [pc, #12]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004292:	4313      	orrs	r3, r2
 8004294:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3748      	adds	r7, #72	@ 0x48
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	40021000 	.word	0x40021000

080042a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e049      	b.n	800434a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d106      	bne.n	80042d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7fd f95e 	bl	800158c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2202      	movs	r2, #2
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	3304      	adds	r3, #4
 80042e0:	4619      	mov	r1, r3
 80042e2:	4610      	mov	r0, r2
 80042e4:	f000 fa4a 	bl	800477c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
	...

08004354 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d109      	bne.n	8004378 <HAL_TIM_PWM_Start+0x24>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800436a:	b2db      	uxtb	r3, r3
 800436c:	2b01      	cmp	r3, #1
 800436e:	bf14      	ite	ne
 8004370:	2301      	movne	r3, #1
 8004372:	2300      	moveq	r3, #0
 8004374:	b2db      	uxtb	r3, r3
 8004376:	e03c      	b.n	80043f2 <HAL_TIM_PWM_Start+0x9e>
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	2b04      	cmp	r3, #4
 800437c:	d109      	bne.n	8004392 <HAL_TIM_PWM_Start+0x3e>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b01      	cmp	r3, #1
 8004388:	bf14      	ite	ne
 800438a:	2301      	movne	r3, #1
 800438c:	2300      	moveq	r3, #0
 800438e:	b2db      	uxtb	r3, r3
 8004390:	e02f      	b.n	80043f2 <HAL_TIM_PWM_Start+0x9e>
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2b08      	cmp	r3, #8
 8004396:	d109      	bne.n	80043ac <HAL_TIM_PWM_Start+0x58>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	bf14      	ite	ne
 80043a4:	2301      	movne	r3, #1
 80043a6:	2300      	moveq	r3, #0
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	e022      	b.n	80043f2 <HAL_TIM_PWM_Start+0x9e>
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	2b0c      	cmp	r3, #12
 80043b0:	d109      	bne.n	80043c6 <HAL_TIM_PWM_Start+0x72>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	bf14      	ite	ne
 80043be:	2301      	movne	r3, #1
 80043c0:	2300      	moveq	r3, #0
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	e015      	b.n	80043f2 <HAL_TIM_PWM_Start+0x9e>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	2b10      	cmp	r3, #16
 80043ca:	d109      	bne.n	80043e0 <HAL_TIM_PWM_Start+0x8c>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	bf14      	ite	ne
 80043d8:	2301      	movne	r3, #1
 80043da:	2300      	moveq	r3, #0
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	e008      	b.n	80043f2 <HAL_TIM_PWM_Start+0x9e>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	bf14      	ite	ne
 80043ec:	2301      	movne	r3, #1
 80043ee:	2300      	moveq	r3, #0
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e097      	b.n	800452a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d104      	bne.n	800440a <HAL_TIM_PWM_Start+0xb6>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2202      	movs	r2, #2
 8004404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004408:	e023      	b.n	8004452 <HAL_TIM_PWM_Start+0xfe>
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	2b04      	cmp	r3, #4
 800440e:	d104      	bne.n	800441a <HAL_TIM_PWM_Start+0xc6>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2202      	movs	r2, #2
 8004414:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004418:	e01b      	b.n	8004452 <HAL_TIM_PWM_Start+0xfe>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2b08      	cmp	r3, #8
 800441e:	d104      	bne.n	800442a <HAL_TIM_PWM_Start+0xd6>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2202      	movs	r2, #2
 8004424:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004428:	e013      	b.n	8004452 <HAL_TIM_PWM_Start+0xfe>
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	2b0c      	cmp	r3, #12
 800442e:	d104      	bne.n	800443a <HAL_TIM_PWM_Start+0xe6>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2202      	movs	r2, #2
 8004434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004438:	e00b      	b.n	8004452 <HAL_TIM_PWM_Start+0xfe>
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	2b10      	cmp	r3, #16
 800443e:	d104      	bne.n	800444a <HAL_TIM_PWM_Start+0xf6>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2202      	movs	r2, #2
 8004444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004448:	e003      	b.n	8004452 <HAL_TIM_PWM_Start+0xfe>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2202      	movs	r2, #2
 800444e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2201      	movs	r2, #1
 8004458:	6839      	ldr	r1, [r7, #0]
 800445a:	4618      	mov	r0, r3
 800445c:	f000 fd00 	bl	8004e60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a33      	ldr	r2, [pc, #204]	@ (8004534 <HAL_TIM_PWM_Start+0x1e0>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d013      	beq.n	8004492 <HAL_TIM_PWM_Start+0x13e>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a32      	ldr	r2, [pc, #200]	@ (8004538 <HAL_TIM_PWM_Start+0x1e4>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d00e      	beq.n	8004492 <HAL_TIM_PWM_Start+0x13e>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a30      	ldr	r2, [pc, #192]	@ (800453c <HAL_TIM_PWM_Start+0x1e8>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d009      	beq.n	8004492 <HAL_TIM_PWM_Start+0x13e>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a2f      	ldr	r2, [pc, #188]	@ (8004540 <HAL_TIM_PWM_Start+0x1ec>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d004      	beq.n	8004492 <HAL_TIM_PWM_Start+0x13e>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a2d      	ldr	r2, [pc, #180]	@ (8004544 <HAL_TIM_PWM_Start+0x1f0>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d101      	bne.n	8004496 <HAL_TIM_PWM_Start+0x142>
 8004492:	2301      	movs	r3, #1
 8004494:	e000      	b.n	8004498 <HAL_TIM_PWM_Start+0x144>
 8004496:	2300      	movs	r3, #0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d007      	beq.n	80044ac <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044aa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a20      	ldr	r2, [pc, #128]	@ (8004534 <HAL_TIM_PWM_Start+0x1e0>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d018      	beq.n	80044e8 <HAL_TIM_PWM_Start+0x194>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044be:	d013      	beq.n	80044e8 <HAL_TIM_PWM_Start+0x194>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a20      	ldr	r2, [pc, #128]	@ (8004548 <HAL_TIM_PWM_Start+0x1f4>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d00e      	beq.n	80044e8 <HAL_TIM_PWM_Start+0x194>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a1f      	ldr	r2, [pc, #124]	@ (800454c <HAL_TIM_PWM_Start+0x1f8>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d009      	beq.n	80044e8 <HAL_TIM_PWM_Start+0x194>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a17      	ldr	r2, [pc, #92]	@ (8004538 <HAL_TIM_PWM_Start+0x1e4>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d004      	beq.n	80044e8 <HAL_TIM_PWM_Start+0x194>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a16      	ldr	r2, [pc, #88]	@ (800453c <HAL_TIM_PWM_Start+0x1e8>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d115      	bne.n	8004514 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	689a      	ldr	r2, [r3, #8]
 80044ee:	4b18      	ldr	r3, [pc, #96]	@ (8004550 <HAL_TIM_PWM_Start+0x1fc>)
 80044f0:	4013      	ands	r3, r2
 80044f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2b06      	cmp	r3, #6
 80044f8:	d015      	beq.n	8004526 <HAL_TIM_PWM_Start+0x1d2>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004500:	d011      	beq.n	8004526 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f042 0201 	orr.w	r2, r2, #1
 8004510:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004512:	e008      	b.n	8004526 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f042 0201 	orr.w	r2, r2, #1
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	e000      	b.n	8004528 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004526:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	40012c00 	.word	0x40012c00
 8004538:	40013400 	.word	0x40013400
 800453c:	40014000 	.word	0x40014000
 8004540:	40014400 	.word	0x40014400
 8004544:	40014800 	.word	0x40014800
 8004548:	40000400 	.word	0x40000400
 800454c:	40000800 	.word	0x40000800
 8004550:	00010007 	.word	0x00010007

08004554 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004560:	2300      	movs	r3, #0
 8004562:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800456a:	2b01      	cmp	r3, #1
 800456c:	d101      	bne.n	8004572 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800456e:	2302      	movs	r3, #2
 8004570:	e0ff      	b.n	8004772 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b14      	cmp	r3, #20
 800457e:	f200 80f0 	bhi.w	8004762 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004582:	a201      	add	r2, pc, #4	@ (adr r2, 8004588 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004588:	080045dd 	.word	0x080045dd
 800458c:	08004763 	.word	0x08004763
 8004590:	08004763 	.word	0x08004763
 8004594:	08004763 	.word	0x08004763
 8004598:	0800461d 	.word	0x0800461d
 800459c:	08004763 	.word	0x08004763
 80045a0:	08004763 	.word	0x08004763
 80045a4:	08004763 	.word	0x08004763
 80045a8:	0800465f 	.word	0x0800465f
 80045ac:	08004763 	.word	0x08004763
 80045b0:	08004763 	.word	0x08004763
 80045b4:	08004763 	.word	0x08004763
 80045b8:	0800469f 	.word	0x0800469f
 80045bc:	08004763 	.word	0x08004763
 80045c0:	08004763 	.word	0x08004763
 80045c4:	08004763 	.word	0x08004763
 80045c8:	080046e1 	.word	0x080046e1
 80045cc:	08004763 	.word	0x08004763
 80045d0:	08004763 	.word	0x08004763
 80045d4:	08004763 	.word	0x08004763
 80045d8:	08004721 	.word	0x08004721
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68b9      	ldr	r1, [r7, #8]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f000 f966 	bl	80048b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	699a      	ldr	r2, [r3, #24]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f042 0208 	orr.w	r2, r2, #8
 80045f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	699a      	ldr	r2, [r3, #24]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 0204 	bic.w	r2, r2, #4
 8004606:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6999      	ldr	r1, [r3, #24]
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	691a      	ldr	r2, [r3, #16]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	619a      	str	r2, [r3, #24]
      break;
 800461a:	e0a5      	b.n	8004768 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68b9      	ldr	r1, [r7, #8]
 8004622:	4618      	mov	r0, r3
 8004624:	f000 f9d6 	bl	80049d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	699a      	ldr	r2, [r3, #24]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004636:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699a      	ldr	r2, [r3, #24]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004646:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6999      	ldr	r1, [r3, #24]
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	021a      	lsls	r2, r3, #8
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	430a      	orrs	r2, r1
 800465a:	619a      	str	r2, [r3, #24]
      break;
 800465c:	e084      	b.n	8004768 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68b9      	ldr	r1, [r7, #8]
 8004664:	4618      	mov	r0, r3
 8004666:	f000 fa3f 	bl	8004ae8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	69da      	ldr	r2, [r3, #28]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f042 0208 	orr.w	r2, r2, #8
 8004678:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	69da      	ldr	r2, [r3, #28]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 0204 	bic.w	r2, r2, #4
 8004688:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	69d9      	ldr	r1, [r3, #28]
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	691a      	ldr	r2, [r3, #16]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	430a      	orrs	r2, r1
 800469a:	61da      	str	r2, [r3, #28]
      break;
 800469c:	e064      	b.n	8004768 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68b9      	ldr	r1, [r7, #8]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f000 faa7 	bl	8004bf8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	69da      	ldr	r2, [r3, #28]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	69da      	ldr	r2, [r3, #28]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	69d9      	ldr	r1, [r3, #28]
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	021a      	lsls	r2, r3, #8
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	430a      	orrs	r2, r1
 80046dc:	61da      	str	r2, [r3, #28]
      break;
 80046de:	e043      	b.n	8004768 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68b9      	ldr	r1, [r7, #8]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 faf0 	bl	8004ccc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f042 0208 	orr.w	r2, r2, #8
 80046fa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0204 	bic.w	r2, r2, #4
 800470a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	691a      	ldr	r2, [r3, #16]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	430a      	orrs	r2, r1
 800471c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800471e:	e023      	b.n	8004768 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68b9      	ldr	r1, [r7, #8]
 8004726:	4618      	mov	r0, r3
 8004728:	f000 fb34 	bl	8004d94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800473a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800474a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	021a      	lsls	r2, r3, #8
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	430a      	orrs	r2, r1
 800475e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004760:	e002      	b.n	8004768 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	75fb      	strb	r3, [r7, #23]
      break;
 8004766:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004770:	7dfb      	ldrb	r3, [r7, #23]
}
 8004772:	4618      	mov	r0, r3
 8004774:	3718      	adds	r7, #24
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop

0800477c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a42      	ldr	r2, [pc, #264]	@ (8004898 <TIM_Base_SetConfig+0x11c>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d00f      	beq.n	80047b4 <TIM_Base_SetConfig+0x38>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800479a:	d00b      	beq.n	80047b4 <TIM_Base_SetConfig+0x38>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a3f      	ldr	r2, [pc, #252]	@ (800489c <TIM_Base_SetConfig+0x120>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d007      	beq.n	80047b4 <TIM_Base_SetConfig+0x38>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a3e      	ldr	r2, [pc, #248]	@ (80048a0 <TIM_Base_SetConfig+0x124>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d003      	beq.n	80047b4 <TIM_Base_SetConfig+0x38>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a3d      	ldr	r2, [pc, #244]	@ (80048a4 <TIM_Base_SetConfig+0x128>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d108      	bne.n	80047c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a33      	ldr	r2, [pc, #204]	@ (8004898 <TIM_Base_SetConfig+0x11c>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d01b      	beq.n	8004806 <TIM_Base_SetConfig+0x8a>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047d4:	d017      	beq.n	8004806 <TIM_Base_SetConfig+0x8a>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a30      	ldr	r2, [pc, #192]	@ (800489c <TIM_Base_SetConfig+0x120>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d013      	beq.n	8004806 <TIM_Base_SetConfig+0x8a>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a2f      	ldr	r2, [pc, #188]	@ (80048a0 <TIM_Base_SetConfig+0x124>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d00f      	beq.n	8004806 <TIM_Base_SetConfig+0x8a>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a2e      	ldr	r2, [pc, #184]	@ (80048a4 <TIM_Base_SetConfig+0x128>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d00b      	beq.n	8004806 <TIM_Base_SetConfig+0x8a>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a2d      	ldr	r2, [pc, #180]	@ (80048a8 <TIM_Base_SetConfig+0x12c>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d007      	beq.n	8004806 <TIM_Base_SetConfig+0x8a>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a2c      	ldr	r2, [pc, #176]	@ (80048ac <TIM_Base_SetConfig+0x130>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d003      	beq.n	8004806 <TIM_Base_SetConfig+0x8a>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a2b      	ldr	r2, [pc, #172]	@ (80048b0 <TIM_Base_SetConfig+0x134>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d108      	bne.n	8004818 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800480c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	4313      	orrs	r3, r2
 8004816:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	4313      	orrs	r3, r2
 8004824:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a16      	ldr	r2, [pc, #88]	@ (8004898 <TIM_Base_SetConfig+0x11c>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d00f      	beq.n	8004864 <TIM_Base_SetConfig+0xe8>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a17      	ldr	r2, [pc, #92]	@ (80048a4 <TIM_Base_SetConfig+0x128>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d00b      	beq.n	8004864 <TIM_Base_SetConfig+0xe8>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a16      	ldr	r2, [pc, #88]	@ (80048a8 <TIM_Base_SetConfig+0x12c>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d007      	beq.n	8004864 <TIM_Base_SetConfig+0xe8>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a15      	ldr	r2, [pc, #84]	@ (80048ac <TIM_Base_SetConfig+0x130>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d003      	beq.n	8004864 <TIM_Base_SetConfig+0xe8>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a14      	ldr	r2, [pc, #80]	@ (80048b0 <TIM_Base_SetConfig+0x134>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d103      	bne.n	800486c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	691a      	ldr	r2, [r3, #16]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b01      	cmp	r3, #1
 800487c:	d105      	bne.n	800488a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	f023 0201 	bic.w	r2, r3, #1
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	611a      	str	r2, [r3, #16]
  }
}
 800488a:	bf00      	nop
 800488c:	3714      	adds	r7, #20
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	40012c00 	.word	0x40012c00
 800489c:	40000400 	.word	0x40000400
 80048a0:	40000800 	.word	0x40000800
 80048a4:	40013400 	.word	0x40013400
 80048a8:	40014000 	.word	0x40014000
 80048ac:	40014400 	.word	0x40014400
 80048b0:	40014800 	.word	0x40014800

080048b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b087      	sub	sp, #28
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a1b      	ldr	r3, [r3, #32]
 80048c8:	f023 0201 	bic.w	r2, r3, #1
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f023 0303 	bic.w	r3, r3, #3
 80048ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f023 0302 	bic.w	r3, r3, #2
 8004900:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	4313      	orrs	r3, r2
 800490a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a2c      	ldr	r2, [pc, #176]	@ (80049c0 <TIM_OC1_SetConfig+0x10c>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d00f      	beq.n	8004934 <TIM_OC1_SetConfig+0x80>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a2b      	ldr	r2, [pc, #172]	@ (80049c4 <TIM_OC1_SetConfig+0x110>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d00b      	beq.n	8004934 <TIM_OC1_SetConfig+0x80>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a2a      	ldr	r2, [pc, #168]	@ (80049c8 <TIM_OC1_SetConfig+0x114>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d007      	beq.n	8004934 <TIM_OC1_SetConfig+0x80>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a29      	ldr	r2, [pc, #164]	@ (80049cc <TIM_OC1_SetConfig+0x118>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d003      	beq.n	8004934 <TIM_OC1_SetConfig+0x80>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a28      	ldr	r2, [pc, #160]	@ (80049d0 <TIM_OC1_SetConfig+0x11c>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d10c      	bne.n	800494e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f023 0308 	bic.w	r3, r3, #8
 800493a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	4313      	orrs	r3, r2
 8004944:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f023 0304 	bic.w	r3, r3, #4
 800494c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a1b      	ldr	r2, [pc, #108]	@ (80049c0 <TIM_OC1_SetConfig+0x10c>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d00f      	beq.n	8004976 <TIM_OC1_SetConfig+0xc2>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a1a      	ldr	r2, [pc, #104]	@ (80049c4 <TIM_OC1_SetConfig+0x110>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d00b      	beq.n	8004976 <TIM_OC1_SetConfig+0xc2>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a19      	ldr	r2, [pc, #100]	@ (80049c8 <TIM_OC1_SetConfig+0x114>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d007      	beq.n	8004976 <TIM_OC1_SetConfig+0xc2>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a18      	ldr	r2, [pc, #96]	@ (80049cc <TIM_OC1_SetConfig+0x118>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d003      	beq.n	8004976 <TIM_OC1_SetConfig+0xc2>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a17      	ldr	r2, [pc, #92]	@ (80049d0 <TIM_OC1_SetConfig+0x11c>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d111      	bne.n	800499a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800497c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004984:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	4313      	orrs	r3, r2
 800498e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	4313      	orrs	r3, r2
 8004998:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	621a      	str	r2, [r3, #32]
}
 80049b4:	bf00      	nop
 80049b6:	371c      	adds	r7, #28
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr
 80049c0:	40012c00 	.word	0x40012c00
 80049c4:	40013400 	.word	0x40013400
 80049c8:	40014000 	.word	0x40014000
 80049cc:	40014400 	.word	0x40014400
 80049d0:	40014800 	.word	0x40014800

080049d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b087      	sub	sp, #28
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a1b      	ldr	r3, [r3, #32]
 80049e8:	f023 0210 	bic.w	r2, r3, #16
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	021b      	lsls	r3, r3, #8
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	f023 0320 	bic.w	r3, r3, #32
 8004a22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	011b      	lsls	r3, r3, #4
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a28      	ldr	r2, [pc, #160]	@ (8004ad4 <TIM_OC2_SetConfig+0x100>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d003      	beq.n	8004a40 <TIM_OC2_SetConfig+0x6c>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a27      	ldr	r2, [pc, #156]	@ (8004ad8 <TIM_OC2_SetConfig+0x104>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d10d      	bne.n	8004a5c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	011b      	lsls	r3, r3, #4
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a1d      	ldr	r2, [pc, #116]	@ (8004ad4 <TIM_OC2_SetConfig+0x100>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d00f      	beq.n	8004a84 <TIM_OC2_SetConfig+0xb0>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a1c      	ldr	r2, [pc, #112]	@ (8004ad8 <TIM_OC2_SetConfig+0x104>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d00b      	beq.n	8004a84 <TIM_OC2_SetConfig+0xb0>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a1b      	ldr	r2, [pc, #108]	@ (8004adc <TIM_OC2_SetConfig+0x108>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d007      	beq.n	8004a84 <TIM_OC2_SetConfig+0xb0>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a1a      	ldr	r2, [pc, #104]	@ (8004ae0 <TIM_OC2_SetConfig+0x10c>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d003      	beq.n	8004a84 <TIM_OC2_SetConfig+0xb0>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a19      	ldr	r2, [pc, #100]	@ (8004ae4 <TIM_OC2_SetConfig+0x110>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d113      	bne.n	8004aac <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a8a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a92:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	621a      	str	r2, [r3, #32]
}
 8004ac6:	bf00      	nop
 8004ac8:	371c      	adds	r7, #28
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	40012c00 	.word	0x40012c00
 8004ad8:	40013400 	.word	0x40013400
 8004adc:	40014000 	.word	0x40014000
 8004ae0:	40014400 	.word	0x40014400
 8004ae4:	40014800 	.word	0x40014800

08004ae8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b087      	sub	sp, #28
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f023 0303 	bic.w	r3, r3, #3
 8004b22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	021b      	lsls	r3, r3, #8
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a27      	ldr	r2, [pc, #156]	@ (8004be4 <TIM_OC3_SetConfig+0xfc>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d003      	beq.n	8004b52 <TIM_OC3_SetConfig+0x6a>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a26      	ldr	r2, [pc, #152]	@ (8004be8 <TIM_OC3_SetConfig+0x100>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d10d      	bne.n	8004b6e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	021b      	lsls	r3, r3, #8
 8004b60:	697a      	ldr	r2, [r7, #20]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b6c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a1c      	ldr	r2, [pc, #112]	@ (8004be4 <TIM_OC3_SetConfig+0xfc>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d00f      	beq.n	8004b96 <TIM_OC3_SetConfig+0xae>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a1b      	ldr	r2, [pc, #108]	@ (8004be8 <TIM_OC3_SetConfig+0x100>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d00b      	beq.n	8004b96 <TIM_OC3_SetConfig+0xae>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a1a      	ldr	r2, [pc, #104]	@ (8004bec <TIM_OC3_SetConfig+0x104>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d007      	beq.n	8004b96 <TIM_OC3_SetConfig+0xae>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a19      	ldr	r2, [pc, #100]	@ (8004bf0 <TIM_OC3_SetConfig+0x108>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d003      	beq.n	8004b96 <TIM_OC3_SetConfig+0xae>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a18      	ldr	r2, [pc, #96]	@ (8004bf4 <TIM_OC3_SetConfig+0x10c>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d113      	bne.n	8004bbe <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	011b      	lsls	r3, r3, #4
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	011b      	lsls	r3, r3, #4
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685a      	ldr	r2, [r3, #4]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	621a      	str	r2, [r3, #32]
}
 8004bd8:	bf00      	nop
 8004bda:	371c      	adds	r7, #28
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr
 8004be4:	40012c00 	.word	0x40012c00
 8004be8:	40013400 	.word	0x40013400
 8004bec:	40014000 	.word	0x40014000
 8004bf0:	40014400 	.word	0x40014400
 8004bf4:	40014800 	.word	0x40014800

08004bf8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b087      	sub	sp, #28
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a1b      	ldr	r3, [r3, #32]
 8004c0c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	69db      	ldr	r3, [r3, #28]
 8004c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	021b      	lsls	r3, r3, #8
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	031b      	lsls	r3, r3, #12
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a18      	ldr	r2, [pc, #96]	@ (8004cb8 <TIM_OC4_SetConfig+0xc0>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d00f      	beq.n	8004c7c <TIM_OC4_SetConfig+0x84>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a17      	ldr	r2, [pc, #92]	@ (8004cbc <TIM_OC4_SetConfig+0xc4>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d00b      	beq.n	8004c7c <TIM_OC4_SetConfig+0x84>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a16      	ldr	r2, [pc, #88]	@ (8004cc0 <TIM_OC4_SetConfig+0xc8>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d007      	beq.n	8004c7c <TIM_OC4_SetConfig+0x84>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a15      	ldr	r2, [pc, #84]	@ (8004cc4 <TIM_OC4_SetConfig+0xcc>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d003      	beq.n	8004c7c <TIM_OC4_SetConfig+0x84>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a14      	ldr	r2, [pc, #80]	@ (8004cc8 <TIM_OC4_SetConfig+0xd0>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d109      	bne.n	8004c90 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	019b      	lsls	r3, r3, #6
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	621a      	str	r2, [r3, #32]
}
 8004caa:	bf00      	nop
 8004cac:	371c      	adds	r7, #28
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	40012c00 	.word	0x40012c00
 8004cbc:	40013400 	.word	0x40013400
 8004cc0:	40014000 	.word	0x40014000
 8004cc4:	40014400 	.word	0x40014400
 8004cc8:	40014800 	.word	0x40014800

08004ccc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b087      	sub	sp, #28
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a1b      	ldr	r3, [r3, #32]
 8004ce0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004d10:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	041b      	lsls	r3, r3, #16
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a17      	ldr	r2, [pc, #92]	@ (8004d80 <TIM_OC5_SetConfig+0xb4>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d00f      	beq.n	8004d46 <TIM_OC5_SetConfig+0x7a>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a16      	ldr	r2, [pc, #88]	@ (8004d84 <TIM_OC5_SetConfig+0xb8>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d00b      	beq.n	8004d46 <TIM_OC5_SetConfig+0x7a>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a15      	ldr	r2, [pc, #84]	@ (8004d88 <TIM_OC5_SetConfig+0xbc>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d007      	beq.n	8004d46 <TIM_OC5_SetConfig+0x7a>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a14      	ldr	r2, [pc, #80]	@ (8004d8c <TIM_OC5_SetConfig+0xc0>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d003      	beq.n	8004d46 <TIM_OC5_SetConfig+0x7a>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a13      	ldr	r2, [pc, #76]	@ (8004d90 <TIM_OC5_SetConfig+0xc4>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d109      	bne.n	8004d5a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d4c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	021b      	lsls	r3, r3, #8
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	685a      	ldr	r2, [r3, #4]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	621a      	str	r2, [r3, #32]
}
 8004d74:	bf00      	nop
 8004d76:	371c      	adds	r7, #28
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	40012c00 	.word	0x40012c00
 8004d84:	40013400 	.word	0x40013400
 8004d88:	40014000 	.word	0x40014000
 8004d8c:	40014400 	.word	0x40014400
 8004d90:	40014800 	.word	0x40014800

08004d94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b087      	sub	sp, #28
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a1b      	ldr	r3, [r3, #32]
 8004da8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004dc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	021b      	lsls	r3, r3, #8
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004dda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	051b      	lsls	r3, r3, #20
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a18      	ldr	r2, [pc, #96]	@ (8004e4c <TIM_OC6_SetConfig+0xb8>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d00f      	beq.n	8004e10 <TIM_OC6_SetConfig+0x7c>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a17      	ldr	r2, [pc, #92]	@ (8004e50 <TIM_OC6_SetConfig+0xbc>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d00b      	beq.n	8004e10 <TIM_OC6_SetConfig+0x7c>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a16      	ldr	r2, [pc, #88]	@ (8004e54 <TIM_OC6_SetConfig+0xc0>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d007      	beq.n	8004e10 <TIM_OC6_SetConfig+0x7c>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a15      	ldr	r2, [pc, #84]	@ (8004e58 <TIM_OC6_SetConfig+0xc4>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d003      	beq.n	8004e10 <TIM_OC6_SetConfig+0x7c>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a14      	ldr	r2, [pc, #80]	@ (8004e5c <TIM_OC6_SetConfig+0xc8>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d109      	bne.n	8004e24 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e16:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	695b      	ldr	r3, [r3, #20]
 8004e1c:	029b      	lsls	r3, r3, #10
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	685a      	ldr	r2, [r3, #4]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	621a      	str	r2, [r3, #32]
}
 8004e3e:	bf00      	nop
 8004e40:	371c      	adds	r7, #28
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	40012c00 	.word	0x40012c00
 8004e50:	40013400 	.word	0x40013400
 8004e54:	40014000 	.word	0x40014000
 8004e58:	40014400 	.word	0x40014400
 8004e5c:	40014800 	.word	0x40014800

08004e60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b087      	sub	sp, #28
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	f003 031f 	and.w	r3, r3, #31
 8004e72:	2201      	movs	r2, #1
 8004e74:	fa02 f303 	lsl.w	r3, r2, r3
 8004e78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6a1a      	ldr	r2, [r3, #32]
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	43db      	mvns	r3, r3
 8004e82:	401a      	ands	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6a1a      	ldr	r2, [r3, #32]
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	f003 031f 	and.w	r3, r3, #31
 8004e92:	6879      	ldr	r1, [r7, #4]
 8004e94:	fa01 f303 	lsl.w	r3, r1, r3
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	621a      	str	r2, [r3, #32]
}
 8004e9e:	bf00      	nop
 8004ea0:	371c      	adds	r7, #28
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
	...

08004eac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d101      	bne.n	8004ec4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	e063      	b.n	8004f8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a2b      	ldr	r2, [pc, #172]	@ (8004f98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d004      	beq.n	8004ef8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a2a      	ldr	r2, [pc, #168]	@ (8004f9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d108      	bne.n	8004f0a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004efe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f10:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a1b      	ldr	r2, [pc, #108]	@ (8004f98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d018      	beq.n	8004f60 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f36:	d013      	beq.n	8004f60 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a18      	ldr	r2, [pc, #96]	@ (8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d00e      	beq.n	8004f60 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a17      	ldr	r2, [pc, #92]	@ (8004fa4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d009      	beq.n	8004f60 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a12      	ldr	r2, [pc, #72]	@ (8004f9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d004      	beq.n	8004f60 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a13      	ldr	r2, [pc, #76]	@ (8004fa8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d10c      	bne.n	8004f7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3714      	adds	r7, #20
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr
 8004f98:	40012c00 	.word	0x40012c00
 8004f9c:	40013400 	.word	0x40013400
 8004fa0:	40000400 	.word	0x40000400
 8004fa4:	40000800 	.word	0x40000800
 8004fa8:	40014000 	.word	0x40014000

08004fac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d101      	bne.n	8004fc8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	e065      	b.n	8005094 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4313      	orrs	r3, r2
 8005006:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	4313      	orrs	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	4313      	orrs	r3, r2
 8005022:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800502e:	4313      	orrs	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	041b      	lsls	r3, r3, #16
 800503e:	4313      	orrs	r3, r2
 8005040:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a16      	ldr	r2, [pc, #88]	@ (80050a0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d004      	beq.n	8005056 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a14      	ldr	r2, [pc, #80]	@ (80050a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d115      	bne.n	8005082 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005060:	051b      	lsls	r3, r3, #20
 8005062:	4313      	orrs	r3, r2
 8005064:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	69db      	ldr	r3, [r3, #28]
 8005070:	4313      	orrs	r3, r2
 8005072:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	4313      	orrs	r3, r2
 8005080:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3714      	adds	r7, #20
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr
 80050a0:	40012c00 	.word	0x40012c00
 80050a4:	40013400 	.word	0x40013400

080050a8 <__cvt>:
 80050a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050ac:	ec57 6b10 	vmov	r6, r7, d0
 80050b0:	2f00      	cmp	r7, #0
 80050b2:	460c      	mov	r4, r1
 80050b4:	4619      	mov	r1, r3
 80050b6:	463b      	mov	r3, r7
 80050b8:	bfbb      	ittet	lt
 80050ba:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80050be:	461f      	movlt	r7, r3
 80050c0:	2300      	movge	r3, #0
 80050c2:	232d      	movlt	r3, #45	@ 0x2d
 80050c4:	700b      	strb	r3, [r1, #0]
 80050c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80050c8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80050cc:	4691      	mov	r9, r2
 80050ce:	f023 0820 	bic.w	r8, r3, #32
 80050d2:	bfbc      	itt	lt
 80050d4:	4632      	movlt	r2, r6
 80050d6:	4616      	movlt	r6, r2
 80050d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80050dc:	d005      	beq.n	80050ea <__cvt+0x42>
 80050de:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80050e2:	d100      	bne.n	80050e6 <__cvt+0x3e>
 80050e4:	3401      	adds	r4, #1
 80050e6:	2102      	movs	r1, #2
 80050e8:	e000      	b.n	80050ec <__cvt+0x44>
 80050ea:	2103      	movs	r1, #3
 80050ec:	ab03      	add	r3, sp, #12
 80050ee:	9301      	str	r3, [sp, #4]
 80050f0:	ab02      	add	r3, sp, #8
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	ec47 6b10 	vmov	d0, r6, r7
 80050f8:	4653      	mov	r3, sl
 80050fa:	4622      	mov	r2, r4
 80050fc:	f001 f874 	bl	80061e8 <_dtoa_r>
 8005100:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005104:	4605      	mov	r5, r0
 8005106:	d119      	bne.n	800513c <__cvt+0x94>
 8005108:	f019 0f01 	tst.w	r9, #1
 800510c:	d00e      	beq.n	800512c <__cvt+0x84>
 800510e:	eb00 0904 	add.w	r9, r0, r4
 8005112:	2200      	movs	r2, #0
 8005114:	2300      	movs	r3, #0
 8005116:	4630      	mov	r0, r6
 8005118:	4639      	mov	r1, r7
 800511a:	f7fb fcd5 	bl	8000ac8 <__aeabi_dcmpeq>
 800511e:	b108      	cbz	r0, 8005124 <__cvt+0x7c>
 8005120:	f8cd 900c 	str.w	r9, [sp, #12]
 8005124:	2230      	movs	r2, #48	@ 0x30
 8005126:	9b03      	ldr	r3, [sp, #12]
 8005128:	454b      	cmp	r3, r9
 800512a:	d31e      	bcc.n	800516a <__cvt+0xc2>
 800512c:	9b03      	ldr	r3, [sp, #12]
 800512e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005130:	1b5b      	subs	r3, r3, r5
 8005132:	4628      	mov	r0, r5
 8005134:	6013      	str	r3, [r2, #0]
 8005136:	b004      	add	sp, #16
 8005138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800513c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005140:	eb00 0904 	add.w	r9, r0, r4
 8005144:	d1e5      	bne.n	8005112 <__cvt+0x6a>
 8005146:	7803      	ldrb	r3, [r0, #0]
 8005148:	2b30      	cmp	r3, #48	@ 0x30
 800514a:	d10a      	bne.n	8005162 <__cvt+0xba>
 800514c:	2200      	movs	r2, #0
 800514e:	2300      	movs	r3, #0
 8005150:	4630      	mov	r0, r6
 8005152:	4639      	mov	r1, r7
 8005154:	f7fb fcb8 	bl	8000ac8 <__aeabi_dcmpeq>
 8005158:	b918      	cbnz	r0, 8005162 <__cvt+0xba>
 800515a:	f1c4 0401 	rsb	r4, r4, #1
 800515e:	f8ca 4000 	str.w	r4, [sl]
 8005162:	f8da 3000 	ldr.w	r3, [sl]
 8005166:	4499      	add	r9, r3
 8005168:	e7d3      	b.n	8005112 <__cvt+0x6a>
 800516a:	1c59      	adds	r1, r3, #1
 800516c:	9103      	str	r1, [sp, #12]
 800516e:	701a      	strb	r2, [r3, #0]
 8005170:	e7d9      	b.n	8005126 <__cvt+0x7e>

08005172 <__exponent>:
 8005172:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005174:	2900      	cmp	r1, #0
 8005176:	bfba      	itte	lt
 8005178:	4249      	neglt	r1, r1
 800517a:	232d      	movlt	r3, #45	@ 0x2d
 800517c:	232b      	movge	r3, #43	@ 0x2b
 800517e:	2909      	cmp	r1, #9
 8005180:	7002      	strb	r2, [r0, #0]
 8005182:	7043      	strb	r3, [r0, #1]
 8005184:	dd29      	ble.n	80051da <__exponent+0x68>
 8005186:	f10d 0307 	add.w	r3, sp, #7
 800518a:	461d      	mov	r5, r3
 800518c:	270a      	movs	r7, #10
 800518e:	461a      	mov	r2, r3
 8005190:	fbb1 f6f7 	udiv	r6, r1, r7
 8005194:	fb07 1416 	mls	r4, r7, r6, r1
 8005198:	3430      	adds	r4, #48	@ 0x30
 800519a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800519e:	460c      	mov	r4, r1
 80051a0:	2c63      	cmp	r4, #99	@ 0x63
 80051a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80051a6:	4631      	mov	r1, r6
 80051a8:	dcf1      	bgt.n	800518e <__exponent+0x1c>
 80051aa:	3130      	adds	r1, #48	@ 0x30
 80051ac:	1e94      	subs	r4, r2, #2
 80051ae:	f803 1c01 	strb.w	r1, [r3, #-1]
 80051b2:	1c41      	adds	r1, r0, #1
 80051b4:	4623      	mov	r3, r4
 80051b6:	42ab      	cmp	r3, r5
 80051b8:	d30a      	bcc.n	80051d0 <__exponent+0x5e>
 80051ba:	f10d 0309 	add.w	r3, sp, #9
 80051be:	1a9b      	subs	r3, r3, r2
 80051c0:	42ac      	cmp	r4, r5
 80051c2:	bf88      	it	hi
 80051c4:	2300      	movhi	r3, #0
 80051c6:	3302      	adds	r3, #2
 80051c8:	4403      	add	r3, r0
 80051ca:	1a18      	subs	r0, r3, r0
 80051cc:	b003      	add	sp, #12
 80051ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051d0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80051d4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80051d8:	e7ed      	b.n	80051b6 <__exponent+0x44>
 80051da:	2330      	movs	r3, #48	@ 0x30
 80051dc:	3130      	adds	r1, #48	@ 0x30
 80051de:	7083      	strb	r3, [r0, #2]
 80051e0:	70c1      	strb	r1, [r0, #3]
 80051e2:	1d03      	adds	r3, r0, #4
 80051e4:	e7f1      	b.n	80051ca <__exponent+0x58>
	...

080051e8 <_printf_float>:
 80051e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ec:	b08d      	sub	sp, #52	@ 0x34
 80051ee:	460c      	mov	r4, r1
 80051f0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80051f4:	4616      	mov	r6, r2
 80051f6:	461f      	mov	r7, r3
 80051f8:	4605      	mov	r5, r0
 80051fa:	f000 feef 	bl	8005fdc <_localeconv_r>
 80051fe:	6803      	ldr	r3, [r0, #0]
 8005200:	9304      	str	r3, [sp, #16]
 8005202:	4618      	mov	r0, r3
 8005204:	f7fb f834 	bl	8000270 <strlen>
 8005208:	2300      	movs	r3, #0
 800520a:	930a      	str	r3, [sp, #40]	@ 0x28
 800520c:	f8d8 3000 	ldr.w	r3, [r8]
 8005210:	9005      	str	r0, [sp, #20]
 8005212:	3307      	adds	r3, #7
 8005214:	f023 0307 	bic.w	r3, r3, #7
 8005218:	f103 0208 	add.w	r2, r3, #8
 800521c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005220:	f8d4 b000 	ldr.w	fp, [r4]
 8005224:	f8c8 2000 	str.w	r2, [r8]
 8005228:	e9d3 8900 	ldrd	r8, r9, [r3]
 800522c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005230:	9307      	str	r3, [sp, #28]
 8005232:	f8cd 8018 	str.w	r8, [sp, #24]
 8005236:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800523a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800523e:	4b9c      	ldr	r3, [pc, #624]	@ (80054b0 <_printf_float+0x2c8>)
 8005240:	f04f 32ff 	mov.w	r2, #4294967295
 8005244:	f7fb fc72 	bl	8000b2c <__aeabi_dcmpun>
 8005248:	bb70      	cbnz	r0, 80052a8 <_printf_float+0xc0>
 800524a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800524e:	4b98      	ldr	r3, [pc, #608]	@ (80054b0 <_printf_float+0x2c8>)
 8005250:	f04f 32ff 	mov.w	r2, #4294967295
 8005254:	f7fb fc4c 	bl	8000af0 <__aeabi_dcmple>
 8005258:	bb30      	cbnz	r0, 80052a8 <_printf_float+0xc0>
 800525a:	2200      	movs	r2, #0
 800525c:	2300      	movs	r3, #0
 800525e:	4640      	mov	r0, r8
 8005260:	4649      	mov	r1, r9
 8005262:	f7fb fc3b 	bl	8000adc <__aeabi_dcmplt>
 8005266:	b110      	cbz	r0, 800526e <_printf_float+0x86>
 8005268:	232d      	movs	r3, #45	@ 0x2d
 800526a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800526e:	4a91      	ldr	r2, [pc, #580]	@ (80054b4 <_printf_float+0x2cc>)
 8005270:	4b91      	ldr	r3, [pc, #580]	@ (80054b8 <_printf_float+0x2d0>)
 8005272:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005276:	bf94      	ite	ls
 8005278:	4690      	movls	r8, r2
 800527a:	4698      	movhi	r8, r3
 800527c:	2303      	movs	r3, #3
 800527e:	6123      	str	r3, [r4, #16]
 8005280:	f02b 0304 	bic.w	r3, fp, #4
 8005284:	6023      	str	r3, [r4, #0]
 8005286:	f04f 0900 	mov.w	r9, #0
 800528a:	9700      	str	r7, [sp, #0]
 800528c:	4633      	mov	r3, r6
 800528e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005290:	4621      	mov	r1, r4
 8005292:	4628      	mov	r0, r5
 8005294:	f000 f9d2 	bl	800563c <_printf_common>
 8005298:	3001      	adds	r0, #1
 800529a:	f040 808d 	bne.w	80053b8 <_printf_float+0x1d0>
 800529e:	f04f 30ff 	mov.w	r0, #4294967295
 80052a2:	b00d      	add	sp, #52	@ 0x34
 80052a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052a8:	4642      	mov	r2, r8
 80052aa:	464b      	mov	r3, r9
 80052ac:	4640      	mov	r0, r8
 80052ae:	4649      	mov	r1, r9
 80052b0:	f7fb fc3c 	bl	8000b2c <__aeabi_dcmpun>
 80052b4:	b140      	cbz	r0, 80052c8 <_printf_float+0xe0>
 80052b6:	464b      	mov	r3, r9
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	bfbc      	itt	lt
 80052bc:	232d      	movlt	r3, #45	@ 0x2d
 80052be:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80052c2:	4a7e      	ldr	r2, [pc, #504]	@ (80054bc <_printf_float+0x2d4>)
 80052c4:	4b7e      	ldr	r3, [pc, #504]	@ (80054c0 <_printf_float+0x2d8>)
 80052c6:	e7d4      	b.n	8005272 <_printf_float+0x8a>
 80052c8:	6863      	ldr	r3, [r4, #4]
 80052ca:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80052ce:	9206      	str	r2, [sp, #24]
 80052d0:	1c5a      	adds	r2, r3, #1
 80052d2:	d13b      	bne.n	800534c <_printf_float+0x164>
 80052d4:	2306      	movs	r3, #6
 80052d6:	6063      	str	r3, [r4, #4]
 80052d8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80052dc:	2300      	movs	r3, #0
 80052de:	6022      	str	r2, [r4, #0]
 80052e0:	9303      	str	r3, [sp, #12]
 80052e2:	ab0a      	add	r3, sp, #40	@ 0x28
 80052e4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80052e8:	ab09      	add	r3, sp, #36	@ 0x24
 80052ea:	9300      	str	r3, [sp, #0]
 80052ec:	6861      	ldr	r1, [r4, #4]
 80052ee:	ec49 8b10 	vmov	d0, r8, r9
 80052f2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80052f6:	4628      	mov	r0, r5
 80052f8:	f7ff fed6 	bl	80050a8 <__cvt>
 80052fc:	9b06      	ldr	r3, [sp, #24]
 80052fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005300:	2b47      	cmp	r3, #71	@ 0x47
 8005302:	4680      	mov	r8, r0
 8005304:	d129      	bne.n	800535a <_printf_float+0x172>
 8005306:	1cc8      	adds	r0, r1, #3
 8005308:	db02      	blt.n	8005310 <_printf_float+0x128>
 800530a:	6863      	ldr	r3, [r4, #4]
 800530c:	4299      	cmp	r1, r3
 800530e:	dd41      	ble.n	8005394 <_printf_float+0x1ac>
 8005310:	f1aa 0a02 	sub.w	sl, sl, #2
 8005314:	fa5f fa8a 	uxtb.w	sl, sl
 8005318:	3901      	subs	r1, #1
 800531a:	4652      	mov	r2, sl
 800531c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005320:	9109      	str	r1, [sp, #36]	@ 0x24
 8005322:	f7ff ff26 	bl	8005172 <__exponent>
 8005326:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005328:	1813      	adds	r3, r2, r0
 800532a:	2a01      	cmp	r2, #1
 800532c:	4681      	mov	r9, r0
 800532e:	6123      	str	r3, [r4, #16]
 8005330:	dc02      	bgt.n	8005338 <_printf_float+0x150>
 8005332:	6822      	ldr	r2, [r4, #0]
 8005334:	07d2      	lsls	r2, r2, #31
 8005336:	d501      	bpl.n	800533c <_printf_float+0x154>
 8005338:	3301      	adds	r3, #1
 800533a:	6123      	str	r3, [r4, #16]
 800533c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005340:	2b00      	cmp	r3, #0
 8005342:	d0a2      	beq.n	800528a <_printf_float+0xa2>
 8005344:	232d      	movs	r3, #45	@ 0x2d
 8005346:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800534a:	e79e      	b.n	800528a <_printf_float+0xa2>
 800534c:	9a06      	ldr	r2, [sp, #24]
 800534e:	2a47      	cmp	r2, #71	@ 0x47
 8005350:	d1c2      	bne.n	80052d8 <_printf_float+0xf0>
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1c0      	bne.n	80052d8 <_printf_float+0xf0>
 8005356:	2301      	movs	r3, #1
 8005358:	e7bd      	b.n	80052d6 <_printf_float+0xee>
 800535a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800535e:	d9db      	bls.n	8005318 <_printf_float+0x130>
 8005360:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005364:	d118      	bne.n	8005398 <_printf_float+0x1b0>
 8005366:	2900      	cmp	r1, #0
 8005368:	6863      	ldr	r3, [r4, #4]
 800536a:	dd0b      	ble.n	8005384 <_printf_float+0x19c>
 800536c:	6121      	str	r1, [r4, #16]
 800536e:	b913      	cbnz	r3, 8005376 <_printf_float+0x18e>
 8005370:	6822      	ldr	r2, [r4, #0]
 8005372:	07d0      	lsls	r0, r2, #31
 8005374:	d502      	bpl.n	800537c <_printf_float+0x194>
 8005376:	3301      	adds	r3, #1
 8005378:	440b      	add	r3, r1
 800537a:	6123      	str	r3, [r4, #16]
 800537c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800537e:	f04f 0900 	mov.w	r9, #0
 8005382:	e7db      	b.n	800533c <_printf_float+0x154>
 8005384:	b913      	cbnz	r3, 800538c <_printf_float+0x1a4>
 8005386:	6822      	ldr	r2, [r4, #0]
 8005388:	07d2      	lsls	r2, r2, #31
 800538a:	d501      	bpl.n	8005390 <_printf_float+0x1a8>
 800538c:	3302      	adds	r3, #2
 800538e:	e7f4      	b.n	800537a <_printf_float+0x192>
 8005390:	2301      	movs	r3, #1
 8005392:	e7f2      	b.n	800537a <_printf_float+0x192>
 8005394:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005398:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800539a:	4299      	cmp	r1, r3
 800539c:	db05      	blt.n	80053aa <_printf_float+0x1c2>
 800539e:	6823      	ldr	r3, [r4, #0]
 80053a0:	6121      	str	r1, [r4, #16]
 80053a2:	07d8      	lsls	r0, r3, #31
 80053a4:	d5ea      	bpl.n	800537c <_printf_float+0x194>
 80053a6:	1c4b      	adds	r3, r1, #1
 80053a8:	e7e7      	b.n	800537a <_printf_float+0x192>
 80053aa:	2900      	cmp	r1, #0
 80053ac:	bfd4      	ite	le
 80053ae:	f1c1 0202 	rsble	r2, r1, #2
 80053b2:	2201      	movgt	r2, #1
 80053b4:	4413      	add	r3, r2
 80053b6:	e7e0      	b.n	800537a <_printf_float+0x192>
 80053b8:	6823      	ldr	r3, [r4, #0]
 80053ba:	055a      	lsls	r2, r3, #21
 80053bc:	d407      	bmi.n	80053ce <_printf_float+0x1e6>
 80053be:	6923      	ldr	r3, [r4, #16]
 80053c0:	4642      	mov	r2, r8
 80053c2:	4631      	mov	r1, r6
 80053c4:	4628      	mov	r0, r5
 80053c6:	47b8      	blx	r7
 80053c8:	3001      	adds	r0, #1
 80053ca:	d12b      	bne.n	8005424 <_printf_float+0x23c>
 80053cc:	e767      	b.n	800529e <_printf_float+0xb6>
 80053ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80053d2:	f240 80dd 	bls.w	8005590 <_printf_float+0x3a8>
 80053d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80053da:	2200      	movs	r2, #0
 80053dc:	2300      	movs	r3, #0
 80053de:	f7fb fb73 	bl	8000ac8 <__aeabi_dcmpeq>
 80053e2:	2800      	cmp	r0, #0
 80053e4:	d033      	beq.n	800544e <_printf_float+0x266>
 80053e6:	4a37      	ldr	r2, [pc, #220]	@ (80054c4 <_printf_float+0x2dc>)
 80053e8:	2301      	movs	r3, #1
 80053ea:	4631      	mov	r1, r6
 80053ec:	4628      	mov	r0, r5
 80053ee:	47b8      	blx	r7
 80053f0:	3001      	adds	r0, #1
 80053f2:	f43f af54 	beq.w	800529e <_printf_float+0xb6>
 80053f6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80053fa:	4543      	cmp	r3, r8
 80053fc:	db02      	blt.n	8005404 <_printf_float+0x21c>
 80053fe:	6823      	ldr	r3, [r4, #0]
 8005400:	07d8      	lsls	r0, r3, #31
 8005402:	d50f      	bpl.n	8005424 <_printf_float+0x23c>
 8005404:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005408:	4631      	mov	r1, r6
 800540a:	4628      	mov	r0, r5
 800540c:	47b8      	blx	r7
 800540e:	3001      	adds	r0, #1
 8005410:	f43f af45 	beq.w	800529e <_printf_float+0xb6>
 8005414:	f04f 0900 	mov.w	r9, #0
 8005418:	f108 38ff 	add.w	r8, r8, #4294967295
 800541c:	f104 0a1a 	add.w	sl, r4, #26
 8005420:	45c8      	cmp	r8, r9
 8005422:	dc09      	bgt.n	8005438 <_printf_float+0x250>
 8005424:	6823      	ldr	r3, [r4, #0]
 8005426:	079b      	lsls	r3, r3, #30
 8005428:	f100 8103 	bmi.w	8005632 <_printf_float+0x44a>
 800542c:	68e0      	ldr	r0, [r4, #12]
 800542e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005430:	4298      	cmp	r0, r3
 8005432:	bfb8      	it	lt
 8005434:	4618      	movlt	r0, r3
 8005436:	e734      	b.n	80052a2 <_printf_float+0xba>
 8005438:	2301      	movs	r3, #1
 800543a:	4652      	mov	r2, sl
 800543c:	4631      	mov	r1, r6
 800543e:	4628      	mov	r0, r5
 8005440:	47b8      	blx	r7
 8005442:	3001      	adds	r0, #1
 8005444:	f43f af2b 	beq.w	800529e <_printf_float+0xb6>
 8005448:	f109 0901 	add.w	r9, r9, #1
 800544c:	e7e8      	b.n	8005420 <_printf_float+0x238>
 800544e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005450:	2b00      	cmp	r3, #0
 8005452:	dc39      	bgt.n	80054c8 <_printf_float+0x2e0>
 8005454:	4a1b      	ldr	r2, [pc, #108]	@ (80054c4 <_printf_float+0x2dc>)
 8005456:	2301      	movs	r3, #1
 8005458:	4631      	mov	r1, r6
 800545a:	4628      	mov	r0, r5
 800545c:	47b8      	blx	r7
 800545e:	3001      	adds	r0, #1
 8005460:	f43f af1d 	beq.w	800529e <_printf_float+0xb6>
 8005464:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005468:	ea59 0303 	orrs.w	r3, r9, r3
 800546c:	d102      	bne.n	8005474 <_printf_float+0x28c>
 800546e:	6823      	ldr	r3, [r4, #0]
 8005470:	07d9      	lsls	r1, r3, #31
 8005472:	d5d7      	bpl.n	8005424 <_printf_float+0x23c>
 8005474:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005478:	4631      	mov	r1, r6
 800547a:	4628      	mov	r0, r5
 800547c:	47b8      	blx	r7
 800547e:	3001      	adds	r0, #1
 8005480:	f43f af0d 	beq.w	800529e <_printf_float+0xb6>
 8005484:	f04f 0a00 	mov.w	sl, #0
 8005488:	f104 0b1a 	add.w	fp, r4, #26
 800548c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800548e:	425b      	negs	r3, r3
 8005490:	4553      	cmp	r3, sl
 8005492:	dc01      	bgt.n	8005498 <_printf_float+0x2b0>
 8005494:	464b      	mov	r3, r9
 8005496:	e793      	b.n	80053c0 <_printf_float+0x1d8>
 8005498:	2301      	movs	r3, #1
 800549a:	465a      	mov	r2, fp
 800549c:	4631      	mov	r1, r6
 800549e:	4628      	mov	r0, r5
 80054a0:	47b8      	blx	r7
 80054a2:	3001      	adds	r0, #1
 80054a4:	f43f aefb 	beq.w	800529e <_printf_float+0xb6>
 80054a8:	f10a 0a01 	add.w	sl, sl, #1
 80054ac:	e7ee      	b.n	800548c <_printf_float+0x2a4>
 80054ae:	bf00      	nop
 80054b0:	7fefffff 	.word	0x7fefffff
 80054b4:	08009a58 	.word	0x08009a58
 80054b8:	08009a5c 	.word	0x08009a5c
 80054bc:	08009a60 	.word	0x08009a60
 80054c0:	08009a64 	.word	0x08009a64
 80054c4:	08009a68 	.word	0x08009a68
 80054c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80054ca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80054ce:	4553      	cmp	r3, sl
 80054d0:	bfa8      	it	ge
 80054d2:	4653      	movge	r3, sl
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	4699      	mov	r9, r3
 80054d8:	dc36      	bgt.n	8005548 <_printf_float+0x360>
 80054da:	f04f 0b00 	mov.w	fp, #0
 80054de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054e2:	f104 021a 	add.w	r2, r4, #26
 80054e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80054e8:	9306      	str	r3, [sp, #24]
 80054ea:	eba3 0309 	sub.w	r3, r3, r9
 80054ee:	455b      	cmp	r3, fp
 80054f0:	dc31      	bgt.n	8005556 <_printf_float+0x36e>
 80054f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054f4:	459a      	cmp	sl, r3
 80054f6:	dc3a      	bgt.n	800556e <_printf_float+0x386>
 80054f8:	6823      	ldr	r3, [r4, #0]
 80054fa:	07da      	lsls	r2, r3, #31
 80054fc:	d437      	bmi.n	800556e <_printf_float+0x386>
 80054fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005500:	ebaa 0903 	sub.w	r9, sl, r3
 8005504:	9b06      	ldr	r3, [sp, #24]
 8005506:	ebaa 0303 	sub.w	r3, sl, r3
 800550a:	4599      	cmp	r9, r3
 800550c:	bfa8      	it	ge
 800550e:	4699      	movge	r9, r3
 8005510:	f1b9 0f00 	cmp.w	r9, #0
 8005514:	dc33      	bgt.n	800557e <_printf_float+0x396>
 8005516:	f04f 0800 	mov.w	r8, #0
 800551a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800551e:	f104 0b1a 	add.w	fp, r4, #26
 8005522:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005524:	ebaa 0303 	sub.w	r3, sl, r3
 8005528:	eba3 0309 	sub.w	r3, r3, r9
 800552c:	4543      	cmp	r3, r8
 800552e:	f77f af79 	ble.w	8005424 <_printf_float+0x23c>
 8005532:	2301      	movs	r3, #1
 8005534:	465a      	mov	r2, fp
 8005536:	4631      	mov	r1, r6
 8005538:	4628      	mov	r0, r5
 800553a:	47b8      	blx	r7
 800553c:	3001      	adds	r0, #1
 800553e:	f43f aeae 	beq.w	800529e <_printf_float+0xb6>
 8005542:	f108 0801 	add.w	r8, r8, #1
 8005546:	e7ec      	b.n	8005522 <_printf_float+0x33a>
 8005548:	4642      	mov	r2, r8
 800554a:	4631      	mov	r1, r6
 800554c:	4628      	mov	r0, r5
 800554e:	47b8      	blx	r7
 8005550:	3001      	adds	r0, #1
 8005552:	d1c2      	bne.n	80054da <_printf_float+0x2f2>
 8005554:	e6a3      	b.n	800529e <_printf_float+0xb6>
 8005556:	2301      	movs	r3, #1
 8005558:	4631      	mov	r1, r6
 800555a:	4628      	mov	r0, r5
 800555c:	9206      	str	r2, [sp, #24]
 800555e:	47b8      	blx	r7
 8005560:	3001      	adds	r0, #1
 8005562:	f43f ae9c 	beq.w	800529e <_printf_float+0xb6>
 8005566:	9a06      	ldr	r2, [sp, #24]
 8005568:	f10b 0b01 	add.w	fp, fp, #1
 800556c:	e7bb      	b.n	80054e6 <_printf_float+0x2fe>
 800556e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005572:	4631      	mov	r1, r6
 8005574:	4628      	mov	r0, r5
 8005576:	47b8      	blx	r7
 8005578:	3001      	adds	r0, #1
 800557a:	d1c0      	bne.n	80054fe <_printf_float+0x316>
 800557c:	e68f      	b.n	800529e <_printf_float+0xb6>
 800557e:	9a06      	ldr	r2, [sp, #24]
 8005580:	464b      	mov	r3, r9
 8005582:	4442      	add	r2, r8
 8005584:	4631      	mov	r1, r6
 8005586:	4628      	mov	r0, r5
 8005588:	47b8      	blx	r7
 800558a:	3001      	adds	r0, #1
 800558c:	d1c3      	bne.n	8005516 <_printf_float+0x32e>
 800558e:	e686      	b.n	800529e <_printf_float+0xb6>
 8005590:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005594:	f1ba 0f01 	cmp.w	sl, #1
 8005598:	dc01      	bgt.n	800559e <_printf_float+0x3b6>
 800559a:	07db      	lsls	r3, r3, #31
 800559c:	d536      	bpl.n	800560c <_printf_float+0x424>
 800559e:	2301      	movs	r3, #1
 80055a0:	4642      	mov	r2, r8
 80055a2:	4631      	mov	r1, r6
 80055a4:	4628      	mov	r0, r5
 80055a6:	47b8      	blx	r7
 80055a8:	3001      	adds	r0, #1
 80055aa:	f43f ae78 	beq.w	800529e <_printf_float+0xb6>
 80055ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055b2:	4631      	mov	r1, r6
 80055b4:	4628      	mov	r0, r5
 80055b6:	47b8      	blx	r7
 80055b8:	3001      	adds	r0, #1
 80055ba:	f43f ae70 	beq.w	800529e <_printf_float+0xb6>
 80055be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80055c2:	2200      	movs	r2, #0
 80055c4:	2300      	movs	r3, #0
 80055c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055ca:	f7fb fa7d 	bl	8000ac8 <__aeabi_dcmpeq>
 80055ce:	b9c0      	cbnz	r0, 8005602 <_printf_float+0x41a>
 80055d0:	4653      	mov	r3, sl
 80055d2:	f108 0201 	add.w	r2, r8, #1
 80055d6:	4631      	mov	r1, r6
 80055d8:	4628      	mov	r0, r5
 80055da:	47b8      	blx	r7
 80055dc:	3001      	adds	r0, #1
 80055de:	d10c      	bne.n	80055fa <_printf_float+0x412>
 80055e0:	e65d      	b.n	800529e <_printf_float+0xb6>
 80055e2:	2301      	movs	r3, #1
 80055e4:	465a      	mov	r2, fp
 80055e6:	4631      	mov	r1, r6
 80055e8:	4628      	mov	r0, r5
 80055ea:	47b8      	blx	r7
 80055ec:	3001      	adds	r0, #1
 80055ee:	f43f ae56 	beq.w	800529e <_printf_float+0xb6>
 80055f2:	f108 0801 	add.w	r8, r8, #1
 80055f6:	45d0      	cmp	r8, sl
 80055f8:	dbf3      	blt.n	80055e2 <_printf_float+0x3fa>
 80055fa:	464b      	mov	r3, r9
 80055fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005600:	e6df      	b.n	80053c2 <_printf_float+0x1da>
 8005602:	f04f 0800 	mov.w	r8, #0
 8005606:	f104 0b1a 	add.w	fp, r4, #26
 800560a:	e7f4      	b.n	80055f6 <_printf_float+0x40e>
 800560c:	2301      	movs	r3, #1
 800560e:	4642      	mov	r2, r8
 8005610:	e7e1      	b.n	80055d6 <_printf_float+0x3ee>
 8005612:	2301      	movs	r3, #1
 8005614:	464a      	mov	r2, r9
 8005616:	4631      	mov	r1, r6
 8005618:	4628      	mov	r0, r5
 800561a:	47b8      	blx	r7
 800561c:	3001      	adds	r0, #1
 800561e:	f43f ae3e 	beq.w	800529e <_printf_float+0xb6>
 8005622:	f108 0801 	add.w	r8, r8, #1
 8005626:	68e3      	ldr	r3, [r4, #12]
 8005628:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800562a:	1a5b      	subs	r3, r3, r1
 800562c:	4543      	cmp	r3, r8
 800562e:	dcf0      	bgt.n	8005612 <_printf_float+0x42a>
 8005630:	e6fc      	b.n	800542c <_printf_float+0x244>
 8005632:	f04f 0800 	mov.w	r8, #0
 8005636:	f104 0919 	add.w	r9, r4, #25
 800563a:	e7f4      	b.n	8005626 <_printf_float+0x43e>

0800563c <_printf_common>:
 800563c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005640:	4616      	mov	r6, r2
 8005642:	4698      	mov	r8, r3
 8005644:	688a      	ldr	r2, [r1, #8]
 8005646:	690b      	ldr	r3, [r1, #16]
 8005648:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800564c:	4293      	cmp	r3, r2
 800564e:	bfb8      	it	lt
 8005650:	4613      	movlt	r3, r2
 8005652:	6033      	str	r3, [r6, #0]
 8005654:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005658:	4607      	mov	r7, r0
 800565a:	460c      	mov	r4, r1
 800565c:	b10a      	cbz	r2, 8005662 <_printf_common+0x26>
 800565e:	3301      	adds	r3, #1
 8005660:	6033      	str	r3, [r6, #0]
 8005662:	6823      	ldr	r3, [r4, #0]
 8005664:	0699      	lsls	r1, r3, #26
 8005666:	bf42      	ittt	mi
 8005668:	6833      	ldrmi	r3, [r6, #0]
 800566a:	3302      	addmi	r3, #2
 800566c:	6033      	strmi	r3, [r6, #0]
 800566e:	6825      	ldr	r5, [r4, #0]
 8005670:	f015 0506 	ands.w	r5, r5, #6
 8005674:	d106      	bne.n	8005684 <_printf_common+0x48>
 8005676:	f104 0a19 	add.w	sl, r4, #25
 800567a:	68e3      	ldr	r3, [r4, #12]
 800567c:	6832      	ldr	r2, [r6, #0]
 800567e:	1a9b      	subs	r3, r3, r2
 8005680:	42ab      	cmp	r3, r5
 8005682:	dc26      	bgt.n	80056d2 <_printf_common+0x96>
 8005684:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005688:	6822      	ldr	r2, [r4, #0]
 800568a:	3b00      	subs	r3, #0
 800568c:	bf18      	it	ne
 800568e:	2301      	movne	r3, #1
 8005690:	0692      	lsls	r2, r2, #26
 8005692:	d42b      	bmi.n	80056ec <_printf_common+0xb0>
 8005694:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005698:	4641      	mov	r1, r8
 800569a:	4638      	mov	r0, r7
 800569c:	47c8      	blx	r9
 800569e:	3001      	adds	r0, #1
 80056a0:	d01e      	beq.n	80056e0 <_printf_common+0xa4>
 80056a2:	6823      	ldr	r3, [r4, #0]
 80056a4:	6922      	ldr	r2, [r4, #16]
 80056a6:	f003 0306 	and.w	r3, r3, #6
 80056aa:	2b04      	cmp	r3, #4
 80056ac:	bf02      	ittt	eq
 80056ae:	68e5      	ldreq	r5, [r4, #12]
 80056b0:	6833      	ldreq	r3, [r6, #0]
 80056b2:	1aed      	subeq	r5, r5, r3
 80056b4:	68a3      	ldr	r3, [r4, #8]
 80056b6:	bf0c      	ite	eq
 80056b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056bc:	2500      	movne	r5, #0
 80056be:	4293      	cmp	r3, r2
 80056c0:	bfc4      	itt	gt
 80056c2:	1a9b      	subgt	r3, r3, r2
 80056c4:	18ed      	addgt	r5, r5, r3
 80056c6:	2600      	movs	r6, #0
 80056c8:	341a      	adds	r4, #26
 80056ca:	42b5      	cmp	r5, r6
 80056cc:	d11a      	bne.n	8005704 <_printf_common+0xc8>
 80056ce:	2000      	movs	r0, #0
 80056d0:	e008      	b.n	80056e4 <_printf_common+0xa8>
 80056d2:	2301      	movs	r3, #1
 80056d4:	4652      	mov	r2, sl
 80056d6:	4641      	mov	r1, r8
 80056d8:	4638      	mov	r0, r7
 80056da:	47c8      	blx	r9
 80056dc:	3001      	adds	r0, #1
 80056de:	d103      	bne.n	80056e8 <_printf_common+0xac>
 80056e0:	f04f 30ff 	mov.w	r0, #4294967295
 80056e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056e8:	3501      	adds	r5, #1
 80056ea:	e7c6      	b.n	800567a <_printf_common+0x3e>
 80056ec:	18e1      	adds	r1, r4, r3
 80056ee:	1c5a      	adds	r2, r3, #1
 80056f0:	2030      	movs	r0, #48	@ 0x30
 80056f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80056f6:	4422      	add	r2, r4
 80056f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80056fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005700:	3302      	adds	r3, #2
 8005702:	e7c7      	b.n	8005694 <_printf_common+0x58>
 8005704:	2301      	movs	r3, #1
 8005706:	4622      	mov	r2, r4
 8005708:	4641      	mov	r1, r8
 800570a:	4638      	mov	r0, r7
 800570c:	47c8      	blx	r9
 800570e:	3001      	adds	r0, #1
 8005710:	d0e6      	beq.n	80056e0 <_printf_common+0xa4>
 8005712:	3601      	adds	r6, #1
 8005714:	e7d9      	b.n	80056ca <_printf_common+0x8e>
	...

08005718 <_printf_i>:
 8005718:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800571c:	7e0f      	ldrb	r7, [r1, #24]
 800571e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005720:	2f78      	cmp	r7, #120	@ 0x78
 8005722:	4691      	mov	r9, r2
 8005724:	4680      	mov	r8, r0
 8005726:	460c      	mov	r4, r1
 8005728:	469a      	mov	sl, r3
 800572a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800572e:	d807      	bhi.n	8005740 <_printf_i+0x28>
 8005730:	2f62      	cmp	r7, #98	@ 0x62
 8005732:	d80a      	bhi.n	800574a <_printf_i+0x32>
 8005734:	2f00      	cmp	r7, #0
 8005736:	f000 80d2 	beq.w	80058de <_printf_i+0x1c6>
 800573a:	2f58      	cmp	r7, #88	@ 0x58
 800573c:	f000 80b9 	beq.w	80058b2 <_printf_i+0x19a>
 8005740:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005744:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005748:	e03a      	b.n	80057c0 <_printf_i+0xa8>
 800574a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800574e:	2b15      	cmp	r3, #21
 8005750:	d8f6      	bhi.n	8005740 <_printf_i+0x28>
 8005752:	a101      	add	r1, pc, #4	@ (adr r1, 8005758 <_printf_i+0x40>)
 8005754:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005758:	080057b1 	.word	0x080057b1
 800575c:	080057c5 	.word	0x080057c5
 8005760:	08005741 	.word	0x08005741
 8005764:	08005741 	.word	0x08005741
 8005768:	08005741 	.word	0x08005741
 800576c:	08005741 	.word	0x08005741
 8005770:	080057c5 	.word	0x080057c5
 8005774:	08005741 	.word	0x08005741
 8005778:	08005741 	.word	0x08005741
 800577c:	08005741 	.word	0x08005741
 8005780:	08005741 	.word	0x08005741
 8005784:	080058c5 	.word	0x080058c5
 8005788:	080057ef 	.word	0x080057ef
 800578c:	0800587f 	.word	0x0800587f
 8005790:	08005741 	.word	0x08005741
 8005794:	08005741 	.word	0x08005741
 8005798:	080058e7 	.word	0x080058e7
 800579c:	08005741 	.word	0x08005741
 80057a0:	080057ef 	.word	0x080057ef
 80057a4:	08005741 	.word	0x08005741
 80057a8:	08005741 	.word	0x08005741
 80057ac:	08005887 	.word	0x08005887
 80057b0:	6833      	ldr	r3, [r6, #0]
 80057b2:	1d1a      	adds	r2, r3, #4
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	6032      	str	r2, [r6, #0]
 80057b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80057bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80057c0:	2301      	movs	r3, #1
 80057c2:	e09d      	b.n	8005900 <_printf_i+0x1e8>
 80057c4:	6833      	ldr	r3, [r6, #0]
 80057c6:	6820      	ldr	r0, [r4, #0]
 80057c8:	1d19      	adds	r1, r3, #4
 80057ca:	6031      	str	r1, [r6, #0]
 80057cc:	0606      	lsls	r6, r0, #24
 80057ce:	d501      	bpl.n	80057d4 <_printf_i+0xbc>
 80057d0:	681d      	ldr	r5, [r3, #0]
 80057d2:	e003      	b.n	80057dc <_printf_i+0xc4>
 80057d4:	0645      	lsls	r5, r0, #25
 80057d6:	d5fb      	bpl.n	80057d0 <_printf_i+0xb8>
 80057d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80057dc:	2d00      	cmp	r5, #0
 80057de:	da03      	bge.n	80057e8 <_printf_i+0xd0>
 80057e0:	232d      	movs	r3, #45	@ 0x2d
 80057e2:	426d      	negs	r5, r5
 80057e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057e8:	4859      	ldr	r0, [pc, #356]	@ (8005950 <_printf_i+0x238>)
 80057ea:	230a      	movs	r3, #10
 80057ec:	e011      	b.n	8005812 <_printf_i+0xfa>
 80057ee:	6821      	ldr	r1, [r4, #0]
 80057f0:	6833      	ldr	r3, [r6, #0]
 80057f2:	0608      	lsls	r0, r1, #24
 80057f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80057f8:	d402      	bmi.n	8005800 <_printf_i+0xe8>
 80057fa:	0649      	lsls	r1, r1, #25
 80057fc:	bf48      	it	mi
 80057fe:	b2ad      	uxthmi	r5, r5
 8005800:	2f6f      	cmp	r7, #111	@ 0x6f
 8005802:	4853      	ldr	r0, [pc, #332]	@ (8005950 <_printf_i+0x238>)
 8005804:	6033      	str	r3, [r6, #0]
 8005806:	bf14      	ite	ne
 8005808:	230a      	movne	r3, #10
 800580a:	2308      	moveq	r3, #8
 800580c:	2100      	movs	r1, #0
 800580e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005812:	6866      	ldr	r6, [r4, #4]
 8005814:	60a6      	str	r6, [r4, #8]
 8005816:	2e00      	cmp	r6, #0
 8005818:	bfa2      	ittt	ge
 800581a:	6821      	ldrge	r1, [r4, #0]
 800581c:	f021 0104 	bicge.w	r1, r1, #4
 8005820:	6021      	strge	r1, [r4, #0]
 8005822:	b90d      	cbnz	r5, 8005828 <_printf_i+0x110>
 8005824:	2e00      	cmp	r6, #0
 8005826:	d04b      	beq.n	80058c0 <_printf_i+0x1a8>
 8005828:	4616      	mov	r6, r2
 800582a:	fbb5 f1f3 	udiv	r1, r5, r3
 800582e:	fb03 5711 	mls	r7, r3, r1, r5
 8005832:	5dc7      	ldrb	r7, [r0, r7]
 8005834:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005838:	462f      	mov	r7, r5
 800583a:	42bb      	cmp	r3, r7
 800583c:	460d      	mov	r5, r1
 800583e:	d9f4      	bls.n	800582a <_printf_i+0x112>
 8005840:	2b08      	cmp	r3, #8
 8005842:	d10b      	bne.n	800585c <_printf_i+0x144>
 8005844:	6823      	ldr	r3, [r4, #0]
 8005846:	07df      	lsls	r7, r3, #31
 8005848:	d508      	bpl.n	800585c <_printf_i+0x144>
 800584a:	6923      	ldr	r3, [r4, #16]
 800584c:	6861      	ldr	r1, [r4, #4]
 800584e:	4299      	cmp	r1, r3
 8005850:	bfde      	ittt	le
 8005852:	2330      	movle	r3, #48	@ 0x30
 8005854:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005858:	f106 36ff 	addle.w	r6, r6, #4294967295
 800585c:	1b92      	subs	r2, r2, r6
 800585e:	6122      	str	r2, [r4, #16]
 8005860:	f8cd a000 	str.w	sl, [sp]
 8005864:	464b      	mov	r3, r9
 8005866:	aa03      	add	r2, sp, #12
 8005868:	4621      	mov	r1, r4
 800586a:	4640      	mov	r0, r8
 800586c:	f7ff fee6 	bl	800563c <_printf_common>
 8005870:	3001      	adds	r0, #1
 8005872:	d14a      	bne.n	800590a <_printf_i+0x1f2>
 8005874:	f04f 30ff 	mov.w	r0, #4294967295
 8005878:	b004      	add	sp, #16
 800587a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800587e:	6823      	ldr	r3, [r4, #0]
 8005880:	f043 0320 	orr.w	r3, r3, #32
 8005884:	6023      	str	r3, [r4, #0]
 8005886:	4833      	ldr	r0, [pc, #204]	@ (8005954 <_printf_i+0x23c>)
 8005888:	2778      	movs	r7, #120	@ 0x78
 800588a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800588e:	6823      	ldr	r3, [r4, #0]
 8005890:	6831      	ldr	r1, [r6, #0]
 8005892:	061f      	lsls	r7, r3, #24
 8005894:	f851 5b04 	ldr.w	r5, [r1], #4
 8005898:	d402      	bmi.n	80058a0 <_printf_i+0x188>
 800589a:	065f      	lsls	r7, r3, #25
 800589c:	bf48      	it	mi
 800589e:	b2ad      	uxthmi	r5, r5
 80058a0:	6031      	str	r1, [r6, #0]
 80058a2:	07d9      	lsls	r1, r3, #31
 80058a4:	bf44      	itt	mi
 80058a6:	f043 0320 	orrmi.w	r3, r3, #32
 80058aa:	6023      	strmi	r3, [r4, #0]
 80058ac:	b11d      	cbz	r5, 80058b6 <_printf_i+0x19e>
 80058ae:	2310      	movs	r3, #16
 80058b0:	e7ac      	b.n	800580c <_printf_i+0xf4>
 80058b2:	4827      	ldr	r0, [pc, #156]	@ (8005950 <_printf_i+0x238>)
 80058b4:	e7e9      	b.n	800588a <_printf_i+0x172>
 80058b6:	6823      	ldr	r3, [r4, #0]
 80058b8:	f023 0320 	bic.w	r3, r3, #32
 80058bc:	6023      	str	r3, [r4, #0]
 80058be:	e7f6      	b.n	80058ae <_printf_i+0x196>
 80058c0:	4616      	mov	r6, r2
 80058c2:	e7bd      	b.n	8005840 <_printf_i+0x128>
 80058c4:	6833      	ldr	r3, [r6, #0]
 80058c6:	6825      	ldr	r5, [r4, #0]
 80058c8:	6961      	ldr	r1, [r4, #20]
 80058ca:	1d18      	adds	r0, r3, #4
 80058cc:	6030      	str	r0, [r6, #0]
 80058ce:	062e      	lsls	r6, r5, #24
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	d501      	bpl.n	80058d8 <_printf_i+0x1c0>
 80058d4:	6019      	str	r1, [r3, #0]
 80058d6:	e002      	b.n	80058de <_printf_i+0x1c6>
 80058d8:	0668      	lsls	r0, r5, #25
 80058da:	d5fb      	bpl.n	80058d4 <_printf_i+0x1bc>
 80058dc:	8019      	strh	r1, [r3, #0]
 80058de:	2300      	movs	r3, #0
 80058e0:	6123      	str	r3, [r4, #16]
 80058e2:	4616      	mov	r6, r2
 80058e4:	e7bc      	b.n	8005860 <_printf_i+0x148>
 80058e6:	6833      	ldr	r3, [r6, #0]
 80058e8:	1d1a      	adds	r2, r3, #4
 80058ea:	6032      	str	r2, [r6, #0]
 80058ec:	681e      	ldr	r6, [r3, #0]
 80058ee:	6862      	ldr	r2, [r4, #4]
 80058f0:	2100      	movs	r1, #0
 80058f2:	4630      	mov	r0, r6
 80058f4:	f7fa fc6c 	bl	80001d0 <memchr>
 80058f8:	b108      	cbz	r0, 80058fe <_printf_i+0x1e6>
 80058fa:	1b80      	subs	r0, r0, r6
 80058fc:	6060      	str	r0, [r4, #4]
 80058fe:	6863      	ldr	r3, [r4, #4]
 8005900:	6123      	str	r3, [r4, #16]
 8005902:	2300      	movs	r3, #0
 8005904:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005908:	e7aa      	b.n	8005860 <_printf_i+0x148>
 800590a:	6923      	ldr	r3, [r4, #16]
 800590c:	4632      	mov	r2, r6
 800590e:	4649      	mov	r1, r9
 8005910:	4640      	mov	r0, r8
 8005912:	47d0      	blx	sl
 8005914:	3001      	adds	r0, #1
 8005916:	d0ad      	beq.n	8005874 <_printf_i+0x15c>
 8005918:	6823      	ldr	r3, [r4, #0]
 800591a:	079b      	lsls	r3, r3, #30
 800591c:	d413      	bmi.n	8005946 <_printf_i+0x22e>
 800591e:	68e0      	ldr	r0, [r4, #12]
 8005920:	9b03      	ldr	r3, [sp, #12]
 8005922:	4298      	cmp	r0, r3
 8005924:	bfb8      	it	lt
 8005926:	4618      	movlt	r0, r3
 8005928:	e7a6      	b.n	8005878 <_printf_i+0x160>
 800592a:	2301      	movs	r3, #1
 800592c:	4632      	mov	r2, r6
 800592e:	4649      	mov	r1, r9
 8005930:	4640      	mov	r0, r8
 8005932:	47d0      	blx	sl
 8005934:	3001      	adds	r0, #1
 8005936:	d09d      	beq.n	8005874 <_printf_i+0x15c>
 8005938:	3501      	adds	r5, #1
 800593a:	68e3      	ldr	r3, [r4, #12]
 800593c:	9903      	ldr	r1, [sp, #12]
 800593e:	1a5b      	subs	r3, r3, r1
 8005940:	42ab      	cmp	r3, r5
 8005942:	dcf2      	bgt.n	800592a <_printf_i+0x212>
 8005944:	e7eb      	b.n	800591e <_printf_i+0x206>
 8005946:	2500      	movs	r5, #0
 8005948:	f104 0619 	add.w	r6, r4, #25
 800594c:	e7f5      	b.n	800593a <_printf_i+0x222>
 800594e:	bf00      	nop
 8005950:	08009a6a 	.word	0x08009a6a
 8005954:	08009a7b 	.word	0x08009a7b

08005958 <_scanf_float>:
 8005958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800595c:	b087      	sub	sp, #28
 800595e:	4617      	mov	r7, r2
 8005960:	9303      	str	r3, [sp, #12]
 8005962:	688b      	ldr	r3, [r1, #8]
 8005964:	1e5a      	subs	r2, r3, #1
 8005966:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800596a:	bf81      	itttt	hi
 800596c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005970:	eb03 0b05 	addhi.w	fp, r3, r5
 8005974:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005978:	608b      	strhi	r3, [r1, #8]
 800597a:	680b      	ldr	r3, [r1, #0]
 800597c:	460a      	mov	r2, r1
 800597e:	f04f 0500 	mov.w	r5, #0
 8005982:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005986:	f842 3b1c 	str.w	r3, [r2], #28
 800598a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800598e:	4680      	mov	r8, r0
 8005990:	460c      	mov	r4, r1
 8005992:	bf98      	it	ls
 8005994:	f04f 0b00 	movls.w	fp, #0
 8005998:	9201      	str	r2, [sp, #4]
 800599a:	4616      	mov	r6, r2
 800599c:	46aa      	mov	sl, r5
 800599e:	46a9      	mov	r9, r5
 80059a0:	9502      	str	r5, [sp, #8]
 80059a2:	68a2      	ldr	r2, [r4, #8]
 80059a4:	b152      	cbz	r2, 80059bc <_scanf_float+0x64>
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	2b4e      	cmp	r3, #78	@ 0x4e
 80059ac:	d864      	bhi.n	8005a78 <_scanf_float+0x120>
 80059ae:	2b40      	cmp	r3, #64	@ 0x40
 80059b0:	d83c      	bhi.n	8005a2c <_scanf_float+0xd4>
 80059b2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80059b6:	b2c8      	uxtb	r0, r1
 80059b8:	280e      	cmp	r0, #14
 80059ba:	d93a      	bls.n	8005a32 <_scanf_float+0xda>
 80059bc:	f1b9 0f00 	cmp.w	r9, #0
 80059c0:	d003      	beq.n	80059ca <_scanf_float+0x72>
 80059c2:	6823      	ldr	r3, [r4, #0]
 80059c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059c8:	6023      	str	r3, [r4, #0]
 80059ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80059ce:	f1ba 0f01 	cmp.w	sl, #1
 80059d2:	f200 8117 	bhi.w	8005c04 <_scanf_float+0x2ac>
 80059d6:	9b01      	ldr	r3, [sp, #4]
 80059d8:	429e      	cmp	r6, r3
 80059da:	f200 8108 	bhi.w	8005bee <_scanf_float+0x296>
 80059de:	2001      	movs	r0, #1
 80059e0:	b007      	add	sp, #28
 80059e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059e6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80059ea:	2a0d      	cmp	r2, #13
 80059ec:	d8e6      	bhi.n	80059bc <_scanf_float+0x64>
 80059ee:	a101      	add	r1, pc, #4	@ (adr r1, 80059f4 <_scanf_float+0x9c>)
 80059f0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80059f4:	08005b3b 	.word	0x08005b3b
 80059f8:	080059bd 	.word	0x080059bd
 80059fc:	080059bd 	.word	0x080059bd
 8005a00:	080059bd 	.word	0x080059bd
 8005a04:	08005b9b 	.word	0x08005b9b
 8005a08:	08005b73 	.word	0x08005b73
 8005a0c:	080059bd 	.word	0x080059bd
 8005a10:	080059bd 	.word	0x080059bd
 8005a14:	08005b49 	.word	0x08005b49
 8005a18:	080059bd 	.word	0x080059bd
 8005a1c:	080059bd 	.word	0x080059bd
 8005a20:	080059bd 	.word	0x080059bd
 8005a24:	080059bd 	.word	0x080059bd
 8005a28:	08005b01 	.word	0x08005b01
 8005a2c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005a30:	e7db      	b.n	80059ea <_scanf_float+0x92>
 8005a32:	290e      	cmp	r1, #14
 8005a34:	d8c2      	bhi.n	80059bc <_scanf_float+0x64>
 8005a36:	a001      	add	r0, pc, #4	@ (adr r0, 8005a3c <_scanf_float+0xe4>)
 8005a38:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005a3c:	08005af1 	.word	0x08005af1
 8005a40:	080059bd 	.word	0x080059bd
 8005a44:	08005af1 	.word	0x08005af1
 8005a48:	08005b87 	.word	0x08005b87
 8005a4c:	080059bd 	.word	0x080059bd
 8005a50:	08005a99 	.word	0x08005a99
 8005a54:	08005ad7 	.word	0x08005ad7
 8005a58:	08005ad7 	.word	0x08005ad7
 8005a5c:	08005ad7 	.word	0x08005ad7
 8005a60:	08005ad7 	.word	0x08005ad7
 8005a64:	08005ad7 	.word	0x08005ad7
 8005a68:	08005ad7 	.word	0x08005ad7
 8005a6c:	08005ad7 	.word	0x08005ad7
 8005a70:	08005ad7 	.word	0x08005ad7
 8005a74:	08005ad7 	.word	0x08005ad7
 8005a78:	2b6e      	cmp	r3, #110	@ 0x6e
 8005a7a:	d809      	bhi.n	8005a90 <_scanf_float+0x138>
 8005a7c:	2b60      	cmp	r3, #96	@ 0x60
 8005a7e:	d8b2      	bhi.n	80059e6 <_scanf_float+0x8e>
 8005a80:	2b54      	cmp	r3, #84	@ 0x54
 8005a82:	d07b      	beq.n	8005b7c <_scanf_float+0x224>
 8005a84:	2b59      	cmp	r3, #89	@ 0x59
 8005a86:	d199      	bne.n	80059bc <_scanf_float+0x64>
 8005a88:	2d07      	cmp	r5, #7
 8005a8a:	d197      	bne.n	80059bc <_scanf_float+0x64>
 8005a8c:	2508      	movs	r5, #8
 8005a8e:	e02c      	b.n	8005aea <_scanf_float+0x192>
 8005a90:	2b74      	cmp	r3, #116	@ 0x74
 8005a92:	d073      	beq.n	8005b7c <_scanf_float+0x224>
 8005a94:	2b79      	cmp	r3, #121	@ 0x79
 8005a96:	e7f6      	b.n	8005a86 <_scanf_float+0x12e>
 8005a98:	6821      	ldr	r1, [r4, #0]
 8005a9a:	05c8      	lsls	r0, r1, #23
 8005a9c:	d51b      	bpl.n	8005ad6 <_scanf_float+0x17e>
 8005a9e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005aa2:	6021      	str	r1, [r4, #0]
 8005aa4:	f109 0901 	add.w	r9, r9, #1
 8005aa8:	f1bb 0f00 	cmp.w	fp, #0
 8005aac:	d003      	beq.n	8005ab6 <_scanf_float+0x15e>
 8005aae:	3201      	adds	r2, #1
 8005ab0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005ab4:	60a2      	str	r2, [r4, #8]
 8005ab6:	68a3      	ldr	r3, [r4, #8]
 8005ab8:	3b01      	subs	r3, #1
 8005aba:	60a3      	str	r3, [r4, #8]
 8005abc:	6923      	ldr	r3, [r4, #16]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	6123      	str	r3, [r4, #16]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	607b      	str	r3, [r7, #4]
 8005aca:	f340 8087 	ble.w	8005bdc <_scanf_float+0x284>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	603b      	str	r3, [r7, #0]
 8005ad4:	e765      	b.n	80059a2 <_scanf_float+0x4a>
 8005ad6:	eb1a 0105 	adds.w	r1, sl, r5
 8005ada:	f47f af6f 	bne.w	80059bc <_scanf_float+0x64>
 8005ade:	6822      	ldr	r2, [r4, #0]
 8005ae0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005ae4:	6022      	str	r2, [r4, #0]
 8005ae6:	460d      	mov	r5, r1
 8005ae8:	468a      	mov	sl, r1
 8005aea:	f806 3b01 	strb.w	r3, [r6], #1
 8005aee:	e7e2      	b.n	8005ab6 <_scanf_float+0x15e>
 8005af0:	6822      	ldr	r2, [r4, #0]
 8005af2:	0610      	lsls	r0, r2, #24
 8005af4:	f57f af62 	bpl.w	80059bc <_scanf_float+0x64>
 8005af8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005afc:	6022      	str	r2, [r4, #0]
 8005afe:	e7f4      	b.n	8005aea <_scanf_float+0x192>
 8005b00:	f1ba 0f00 	cmp.w	sl, #0
 8005b04:	d10e      	bne.n	8005b24 <_scanf_float+0x1cc>
 8005b06:	f1b9 0f00 	cmp.w	r9, #0
 8005b0a:	d10e      	bne.n	8005b2a <_scanf_float+0x1d2>
 8005b0c:	6822      	ldr	r2, [r4, #0]
 8005b0e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005b12:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005b16:	d108      	bne.n	8005b2a <_scanf_float+0x1d2>
 8005b18:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005b1c:	6022      	str	r2, [r4, #0]
 8005b1e:	f04f 0a01 	mov.w	sl, #1
 8005b22:	e7e2      	b.n	8005aea <_scanf_float+0x192>
 8005b24:	f1ba 0f02 	cmp.w	sl, #2
 8005b28:	d055      	beq.n	8005bd6 <_scanf_float+0x27e>
 8005b2a:	2d01      	cmp	r5, #1
 8005b2c:	d002      	beq.n	8005b34 <_scanf_float+0x1dc>
 8005b2e:	2d04      	cmp	r5, #4
 8005b30:	f47f af44 	bne.w	80059bc <_scanf_float+0x64>
 8005b34:	3501      	adds	r5, #1
 8005b36:	b2ed      	uxtb	r5, r5
 8005b38:	e7d7      	b.n	8005aea <_scanf_float+0x192>
 8005b3a:	f1ba 0f01 	cmp.w	sl, #1
 8005b3e:	f47f af3d 	bne.w	80059bc <_scanf_float+0x64>
 8005b42:	f04f 0a02 	mov.w	sl, #2
 8005b46:	e7d0      	b.n	8005aea <_scanf_float+0x192>
 8005b48:	b97d      	cbnz	r5, 8005b6a <_scanf_float+0x212>
 8005b4a:	f1b9 0f00 	cmp.w	r9, #0
 8005b4e:	f47f af38 	bne.w	80059c2 <_scanf_float+0x6a>
 8005b52:	6822      	ldr	r2, [r4, #0]
 8005b54:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005b58:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005b5c:	f040 8108 	bne.w	8005d70 <_scanf_float+0x418>
 8005b60:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005b64:	6022      	str	r2, [r4, #0]
 8005b66:	2501      	movs	r5, #1
 8005b68:	e7bf      	b.n	8005aea <_scanf_float+0x192>
 8005b6a:	2d03      	cmp	r5, #3
 8005b6c:	d0e2      	beq.n	8005b34 <_scanf_float+0x1dc>
 8005b6e:	2d05      	cmp	r5, #5
 8005b70:	e7de      	b.n	8005b30 <_scanf_float+0x1d8>
 8005b72:	2d02      	cmp	r5, #2
 8005b74:	f47f af22 	bne.w	80059bc <_scanf_float+0x64>
 8005b78:	2503      	movs	r5, #3
 8005b7a:	e7b6      	b.n	8005aea <_scanf_float+0x192>
 8005b7c:	2d06      	cmp	r5, #6
 8005b7e:	f47f af1d 	bne.w	80059bc <_scanf_float+0x64>
 8005b82:	2507      	movs	r5, #7
 8005b84:	e7b1      	b.n	8005aea <_scanf_float+0x192>
 8005b86:	6822      	ldr	r2, [r4, #0]
 8005b88:	0591      	lsls	r1, r2, #22
 8005b8a:	f57f af17 	bpl.w	80059bc <_scanf_float+0x64>
 8005b8e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005b92:	6022      	str	r2, [r4, #0]
 8005b94:	f8cd 9008 	str.w	r9, [sp, #8]
 8005b98:	e7a7      	b.n	8005aea <_scanf_float+0x192>
 8005b9a:	6822      	ldr	r2, [r4, #0]
 8005b9c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005ba0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005ba4:	d006      	beq.n	8005bb4 <_scanf_float+0x25c>
 8005ba6:	0550      	lsls	r0, r2, #21
 8005ba8:	f57f af08 	bpl.w	80059bc <_scanf_float+0x64>
 8005bac:	f1b9 0f00 	cmp.w	r9, #0
 8005bb0:	f000 80de 	beq.w	8005d70 <_scanf_float+0x418>
 8005bb4:	0591      	lsls	r1, r2, #22
 8005bb6:	bf58      	it	pl
 8005bb8:	9902      	ldrpl	r1, [sp, #8]
 8005bba:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005bbe:	bf58      	it	pl
 8005bc0:	eba9 0101 	subpl.w	r1, r9, r1
 8005bc4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005bc8:	bf58      	it	pl
 8005bca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005bce:	6022      	str	r2, [r4, #0]
 8005bd0:	f04f 0900 	mov.w	r9, #0
 8005bd4:	e789      	b.n	8005aea <_scanf_float+0x192>
 8005bd6:	f04f 0a03 	mov.w	sl, #3
 8005bda:	e786      	b.n	8005aea <_scanf_float+0x192>
 8005bdc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005be0:	4639      	mov	r1, r7
 8005be2:	4640      	mov	r0, r8
 8005be4:	4798      	blx	r3
 8005be6:	2800      	cmp	r0, #0
 8005be8:	f43f aedb 	beq.w	80059a2 <_scanf_float+0x4a>
 8005bec:	e6e6      	b.n	80059bc <_scanf_float+0x64>
 8005bee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005bf2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005bf6:	463a      	mov	r2, r7
 8005bf8:	4640      	mov	r0, r8
 8005bfa:	4798      	blx	r3
 8005bfc:	6923      	ldr	r3, [r4, #16]
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	6123      	str	r3, [r4, #16]
 8005c02:	e6e8      	b.n	80059d6 <_scanf_float+0x7e>
 8005c04:	1e6b      	subs	r3, r5, #1
 8005c06:	2b06      	cmp	r3, #6
 8005c08:	d824      	bhi.n	8005c54 <_scanf_float+0x2fc>
 8005c0a:	2d02      	cmp	r5, #2
 8005c0c:	d836      	bhi.n	8005c7c <_scanf_float+0x324>
 8005c0e:	9b01      	ldr	r3, [sp, #4]
 8005c10:	429e      	cmp	r6, r3
 8005c12:	f67f aee4 	bls.w	80059de <_scanf_float+0x86>
 8005c16:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005c1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005c1e:	463a      	mov	r2, r7
 8005c20:	4640      	mov	r0, r8
 8005c22:	4798      	blx	r3
 8005c24:	6923      	ldr	r3, [r4, #16]
 8005c26:	3b01      	subs	r3, #1
 8005c28:	6123      	str	r3, [r4, #16]
 8005c2a:	e7f0      	b.n	8005c0e <_scanf_float+0x2b6>
 8005c2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005c30:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005c34:	463a      	mov	r2, r7
 8005c36:	4640      	mov	r0, r8
 8005c38:	4798      	blx	r3
 8005c3a:	6923      	ldr	r3, [r4, #16]
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	6123      	str	r3, [r4, #16]
 8005c40:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c44:	fa5f fa8a 	uxtb.w	sl, sl
 8005c48:	f1ba 0f02 	cmp.w	sl, #2
 8005c4c:	d1ee      	bne.n	8005c2c <_scanf_float+0x2d4>
 8005c4e:	3d03      	subs	r5, #3
 8005c50:	b2ed      	uxtb	r5, r5
 8005c52:	1b76      	subs	r6, r6, r5
 8005c54:	6823      	ldr	r3, [r4, #0]
 8005c56:	05da      	lsls	r2, r3, #23
 8005c58:	d530      	bpl.n	8005cbc <_scanf_float+0x364>
 8005c5a:	055b      	lsls	r3, r3, #21
 8005c5c:	d511      	bpl.n	8005c82 <_scanf_float+0x32a>
 8005c5e:	9b01      	ldr	r3, [sp, #4]
 8005c60:	429e      	cmp	r6, r3
 8005c62:	f67f aebc 	bls.w	80059de <_scanf_float+0x86>
 8005c66:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005c6a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005c6e:	463a      	mov	r2, r7
 8005c70:	4640      	mov	r0, r8
 8005c72:	4798      	blx	r3
 8005c74:	6923      	ldr	r3, [r4, #16]
 8005c76:	3b01      	subs	r3, #1
 8005c78:	6123      	str	r3, [r4, #16]
 8005c7a:	e7f0      	b.n	8005c5e <_scanf_float+0x306>
 8005c7c:	46aa      	mov	sl, r5
 8005c7e:	46b3      	mov	fp, r6
 8005c80:	e7de      	b.n	8005c40 <_scanf_float+0x2e8>
 8005c82:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005c86:	6923      	ldr	r3, [r4, #16]
 8005c88:	2965      	cmp	r1, #101	@ 0x65
 8005c8a:	f103 33ff 	add.w	r3, r3, #4294967295
 8005c8e:	f106 35ff 	add.w	r5, r6, #4294967295
 8005c92:	6123      	str	r3, [r4, #16]
 8005c94:	d00c      	beq.n	8005cb0 <_scanf_float+0x358>
 8005c96:	2945      	cmp	r1, #69	@ 0x45
 8005c98:	d00a      	beq.n	8005cb0 <_scanf_float+0x358>
 8005c9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005c9e:	463a      	mov	r2, r7
 8005ca0:	4640      	mov	r0, r8
 8005ca2:	4798      	blx	r3
 8005ca4:	6923      	ldr	r3, [r4, #16]
 8005ca6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005caa:	3b01      	subs	r3, #1
 8005cac:	1eb5      	subs	r5, r6, #2
 8005cae:	6123      	str	r3, [r4, #16]
 8005cb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005cb4:	463a      	mov	r2, r7
 8005cb6:	4640      	mov	r0, r8
 8005cb8:	4798      	blx	r3
 8005cba:	462e      	mov	r6, r5
 8005cbc:	6822      	ldr	r2, [r4, #0]
 8005cbe:	f012 0210 	ands.w	r2, r2, #16
 8005cc2:	d001      	beq.n	8005cc8 <_scanf_float+0x370>
 8005cc4:	2000      	movs	r0, #0
 8005cc6:	e68b      	b.n	80059e0 <_scanf_float+0x88>
 8005cc8:	7032      	strb	r2, [r6, #0]
 8005cca:	6823      	ldr	r3, [r4, #0]
 8005ccc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005cd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cd4:	d11c      	bne.n	8005d10 <_scanf_float+0x3b8>
 8005cd6:	9b02      	ldr	r3, [sp, #8]
 8005cd8:	454b      	cmp	r3, r9
 8005cda:	eba3 0209 	sub.w	r2, r3, r9
 8005cde:	d123      	bne.n	8005d28 <_scanf_float+0x3d0>
 8005ce0:	9901      	ldr	r1, [sp, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	4640      	mov	r0, r8
 8005ce6:	f002 fbf7 	bl	80084d8 <_strtod_r>
 8005cea:	9b03      	ldr	r3, [sp, #12]
 8005cec:	6821      	ldr	r1, [r4, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f011 0f02 	tst.w	r1, #2
 8005cf4:	ec57 6b10 	vmov	r6, r7, d0
 8005cf8:	f103 0204 	add.w	r2, r3, #4
 8005cfc:	d01f      	beq.n	8005d3e <_scanf_float+0x3e6>
 8005cfe:	9903      	ldr	r1, [sp, #12]
 8005d00:	600a      	str	r2, [r1, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	e9c3 6700 	strd	r6, r7, [r3]
 8005d08:	68e3      	ldr	r3, [r4, #12]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	60e3      	str	r3, [r4, #12]
 8005d0e:	e7d9      	b.n	8005cc4 <_scanf_float+0x36c>
 8005d10:	9b04      	ldr	r3, [sp, #16]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d0e4      	beq.n	8005ce0 <_scanf_float+0x388>
 8005d16:	9905      	ldr	r1, [sp, #20]
 8005d18:	230a      	movs	r3, #10
 8005d1a:	3101      	adds	r1, #1
 8005d1c:	4640      	mov	r0, r8
 8005d1e:	f002 fc5b 	bl	80085d8 <_strtol_r>
 8005d22:	9b04      	ldr	r3, [sp, #16]
 8005d24:	9e05      	ldr	r6, [sp, #20]
 8005d26:	1ac2      	subs	r2, r0, r3
 8005d28:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005d2c:	429e      	cmp	r6, r3
 8005d2e:	bf28      	it	cs
 8005d30:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005d34:	4910      	ldr	r1, [pc, #64]	@ (8005d78 <_scanf_float+0x420>)
 8005d36:	4630      	mov	r0, r6
 8005d38:	f000 f8e4 	bl	8005f04 <siprintf>
 8005d3c:	e7d0      	b.n	8005ce0 <_scanf_float+0x388>
 8005d3e:	f011 0f04 	tst.w	r1, #4
 8005d42:	9903      	ldr	r1, [sp, #12]
 8005d44:	600a      	str	r2, [r1, #0]
 8005d46:	d1dc      	bne.n	8005d02 <_scanf_float+0x3aa>
 8005d48:	681d      	ldr	r5, [r3, #0]
 8005d4a:	4632      	mov	r2, r6
 8005d4c:	463b      	mov	r3, r7
 8005d4e:	4630      	mov	r0, r6
 8005d50:	4639      	mov	r1, r7
 8005d52:	f7fa feeb 	bl	8000b2c <__aeabi_dcmpun>
 8005d56:	b128      	cbz	r0, 8005d64 <_scanf_float+0x40c>
 8005d58:	4808      	ldr	r0, [pc, #32]	@ (8005d7c <_scanf_float+0x424>)
 8005d5a:	f000 f9b7 	bl	80060cc <nanf>
 8005d5e:	ed85 0a00 	vstr	s0, [r5]
 8005d62:	e7d1      	b.n	8005d08 <_scanf_float+0x3b0>
 8005d64:	4630      	mov	r0, r6
 8005d66:	4639      	mov	r1, r7
 8005d68:	f7fa ff3e 	bl	8000be8 <__aeabi_d2f>
 8005d6c:	6028      	str	r0, [r5, #0]
 8005d6e:	e7cb      	b.n	8005d08 <_scanf_float+0x3b0>
 8005d70:	f04f 0900 	mov.w	r9, #0
 8005d74:	e629      	b.n	80059ca <_scanf_float+0x72>
 8005d76:	bf00      	nop
 8005d78:	08009a8c 	.word	0x08009a8c
 8005d7c:	08009e25 	.word	0x08009e25

08005d80 <std>:
 8005d80:	2300      	movs	r3, #0
 8005d82:	b510      	push	{r4, lr}
 8005d84:	4604      	mov	r4, r0
 8005d86:	e9c0 3300 	strd	r3, r3, [r0]
 8005d8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d8e:	6083      	str	r3, [r0, #8]
 8005d90:	8181      	strh	r1, [r0, #12]
 8005d92:	6643      	str	r3, [r0, #100]	@ 0x64
 8005d94:	81c2      	strh	r2, [r0, #14]
 8005d96:	6183      	str	r3, [r0, #24]
 8005d98:	4619      	mov	r1, r3
 8005d9a:	2208      	movs	r2, #8
 8005d9c:	305c      	adds	r0, #92	@ 0x5c
 8005d9e:	f000 f914 	bl	8005fca <memset>
 8005da2:	4b0d      	ldr	r3, [pc, #52]	@ (8005dd8 <std+0x58>)
 8005da4:	6263      	str	r3, [r4, #36]	@ 0x24
 8005da6:	4b0d      	ldr	r3, [pc, #52]	@ (8005ddc <std+0x5c>)
 8005da8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005daa:	4b0d      	ldr	r3, [pc, #52]	@ (8005de0 <std+0x60>)
 8005dac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005dae:	4b0d      	ldr	r3, [pc, #52]	@ (8005de4 <std+0x64>)
 8005db0:	6323      	str	r3, [r4, #48]	@ 0x30
 8005db2:	4b0d      	ldr	r3, [pc, #52]	@ (8005de8 <std+0x68>)
 8005db4:	6224      	str	r4, [r4, #32]
 8005db6:	429c      	cmp	r4, r3
 8005db8:	d006      	beq.n	8005dc8 <std+0x48>
 8005dba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005dbe:	4294      	cmp	r4, r2
 8005dc0:	d002      	beq.n	8005dc8 <std+0x48>
 8005dc2:	33d0      	adds	r3, #208	@ 0xd0
 8005dc4:	429c      	cmp	r4, r3
 8005dc6:	d105      	bne.n	8005dd4 <std+0x54>
 8005dc8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dd0:	f000 b978 	b.w	80060c4 <__retarget_lock_init_recursive>
 8005dd4:	bd10      	pop	{r4, pc}
 8005dd6:	bf00      	nop
 8005dd8:	08005f45 	.word	0x08005f45
 8005ddc:	08005f67 	.word	0x08005f67
 8005de0:	08005f9f 	.word	0x08005f9f
 8005de4:	08005fc3 	.word	0x08005fc3
 8005de8:	20000300 	.word	0x20000300

08005dec <stdio_exit_handler>:
 8005dec:	4a02      	ldr	r2, [pc, #8]	@ (8005df8 <stdio_exit_handler+0xc>)
 8005dee:	4903      	ldr	r1, [pc, #12]	@ (8005dfc <stdio_exit_handler+0x10>)
 8005df0:	4803      	ldr	r0, [pc, #12]	@ (8005e00 <stdio_exit_handler+0x14>)
 8005df2:	f000 b869 	b.w	8005ec8 <_fwalk_sglue>
 8005df6:	bf00      	nop
 8005df8:	2000000c 	.word	0x2000000c
 8005dfc:	08008995 	.word	0x08008995
 8005e00:	2000001c 	.word	0x2000001c

08005e04 <cleanup_stdio>:
 8005e04:	6841      	ldr	r1, [r0, #4]
 8005e06:	4b0c      	ldr	r3, [pc, #48]	@ (8005e38 <cleanup_stdio+0x34>)
 8005e08:	4299      	cmp	r1, r3
 8005e0a:	b510      	push	{r4, lr}
 8005e0c:	4604      	mov	r4, r0
 8005e0e:	d001      	beq.n	8005e14 <cleanup_stdio+0x10>
 8005e10:	f002 fdc0 	bl	8008994 <_fflush_r>
 8005e14:	68a1      	ldr	r1, [r4, #8]
 8005e16:	4b09      	ldr	r3, [pc, #36]	@ (8005e3c <cleanup_stdio+0x38>)
 8005e18:	4299      	cmp	r1, r3
 8005e1a:	d002      	beq.n	8005e22 <cleanup_stdio+0x1e>
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	f002 fdb9 	bl	8008994 <_fflush_r>
 8005e22:	68e1      	ldr	r1, [r4, #12]
 8005e24:	4b06      	ldr	r3, [pc, #24]	@ (8005e40 <cleanup_stdio+0x3c>)
 8005e26:	4299      	cmp	r1, r3
 8005e28:	d004      	beq.n	8005e34 <cleanup_stdio+0x30>
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e30:	f002 bdb0 	b.w	8008994 <_fflush_r>
 8005e34:	bd10      	pop	{r4, pc}
 8005e36:	bf00      	nop
 8005e38:	20000300 	.word	0x20000300
 8005e3c:	20000368 	.word	0x20000368
 8005e40:	200003d0 	.word	0x200003d0

08005e44 <global_stdio_init.part.0>:
 8005e44:	b510      	push	{r4, lr}
 8005e46:	4b0b      	ldr	r3, [pc, #44]	@ (8005e74 <global_stdio_init.part.0+0x30>)
 8005e48:	4c0b      	ldr	r4, [pc, #44]	@ (8005e78 <global_stdio_init.part.0+0x34>)
 8005e4a:	4a0c      	ldr	r2, [pc, #48]	@ (8005e7c <global_stdio_init.part.0+0x38>)
 8005e4c:	601a      	str	r2, [r3, #0]
 8005e4e:	4620      	mov	r0, r4
 8005e50:	2200      	movs	r2, #0
 8005e52:	2104      	movs	r1, #4
 8005e54:	f7ff ff94 	bl	8005d80 <std>
 8005e58:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	2109      	movs	r1, #9
 8005e60:	f7ff ff8e 	bl	8005d80 <std>
 8005e64:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005e68:	2202      	movs	r2, #2
 8005e6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e6e:	2112      	movs	r1, #18
 8005e70:	f7ff bf86 	b.w	8005d80 <std>
 8005e74:	20000438 	.word	0x20000438
 8005e78:	20000300 	.word	0x20000300
 8005e7c:	08005ded 	.word	0x08005ded

08005e80 <__sfp_lock_acquire>:
 8005e80:	4801      	ldr	r0, [pc, #4]	@ (8005e88 <__sfp_lock_acquire+0x8>)
 8005e82:	f000 b920 	b.w	80060c6 <__retarget_lock_acquire_recursive>
 8005e86:	bf00      	nop
 8005e88:	20000441 	.word	0x20000441

08005e8c <__sfp_lock_release>:
 8005e8c:	4801      	ldr	r0, [pc, #4]	@ (8005e94 <__sfp_lock_release+0x8>)
 8005e8e:	f000 b91b 	b.w	80060c8 <__retarget_lock_release_recursive>
 8005e92:	bf00      	nop
 8005e94:	20000441 	.word	0x20000441

08005e98 <__sinit>:
 8005e98:	b510      	push	{r4, lr}
 8005e9a:	4604      	mov	r4, r0
 8005e9c:	f7ff fff0 	bl	8005e80 <__sfp_lock_acquire>
 8005ea0:	6a23      	ldr	r3, [r4, #32]
 8005ea2:	b11b      	cbz	r3, 8005eac <__sinit+0x14>
 8005ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ea8:	f7ff bff0 	b.w	8005e8c <__sfp_lock_release>
 8005eac:	4b04      	ldr	r3, [pc, #16]	@ (8005ec0 <__sinit+0x28>)
 8005eae:	6223      	str	r3, [r4, #32]
 8005eb0:	4b04      	ldr	r3, [pc, #16]	@ (8005ec4 <__sinit+0x2c>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d1f5      	bne.n	8005ea4 <__sinit+0xc>
 8005eb8:	f7ff ffc4 	bl	8005e44 <global_stdio_init.part.0>
 8005ebc:	e7f2      	b.n	8005ea4 <__sinit+0xc>
 8005ebe:	bf00      	nop
 8005ec0:	08005e05 	.word	0x08005e05
 8005ec4:	20000438 	.word	0x20000438

08005ec8 <_fwalk_sglue>:
 8005ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ecc:	4607      	mov	r7, r0
 8005ece:	4688      	mov	r8, r1
 8005ed0:	4614      	mov	r4, r2
 8005ed2:	2600      	movs	r6, #0
 8005ed4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ed8:	f1b9 0901 	subs.w	r9, r9, #1
 8005edc:	d505      	bpl.n	8005eea <_fwalk_sglue+0x22>
 8005ede:	6824      	ldr	r4, [r4, #0]
 8005ee0:	2c00      	cmp	r4, #0
 8005ee2:	d1f7      	bne.n	8005ed4 <_fwalk_sglue+0xc>
 8005ee4:	4630      	mov	r0, r6
 8005ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005eea:	89ab      	ldrh	r3, [r5, #12]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d907      	bls.n	8005f00 <_fwalk_sglue+0x38>
 8005ef0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	d003      	beq.n	8005f00 <_fwalk_sglue+0x38>
 8005ef8:	4629      	mov	r1, r5
 8005efa:	4638      	mov	r0, r7
 8005efc:	47c0      	blx	r8
 8005efe:	4306      	orrs	r6, r0
 8005f00:	3568      	adds	r5, #104	@ 0x68
 8005f02:	e7e9      	b.n	8005ed8 <_fwalk_sglue+0x10>

08005f04 <siprintf>:
 8005f04:	b40e      	push	{r1, r2, r3}
 8005f06:	b500      	push	{lr}
 8005f08:	b09c      	sub	sp, #112	@ 0x70
 8005f0a:	ab1d      	add	r3, sp, #116	@ 0x74
 8005f0c:	9002      	str	r0, [sp, #8]
 8005f0e:	9006      	str	r0, [sp, #24]
 8005f10:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005f14:	4809      	ldr	r0, [pc, #36]	@ (8005f3c <siprintf+0x38>)
 8005f16:	9107      	str	r1, [sp, #28]
 8005f18:	9104      	str	r1, [sp, #16]
 8005f1a:	4909      	ldr	r1, [pc, #36]	@ (8005f40 <siprintf+0x3c>)
 8005f1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f20:	9105      	str	r1, [sp, #20]
 8005f22:	6800      	ldr	r0, [r0, #0]
 8005f24:	9301      	str	r3, [sp, #4]
 8005f26:	a902      	add	r1, sp, #8
 8005f28:	f002 fbb4 	bl	8008694 <_svfiprintf_r>
 8005f2c:	9b02      	ldr	r3, [sp, #8]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	701a      	strb	r2, [r3, #0]
 8005f32:	b01c      	add	sp, #112	@ 0x70
 8005f34:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f38:	b003      	add	sp, #12
 8005f3a:	4770      	bx	lr
 8005f3c:	20000018 	.word	0x20000018
 8005f40:	ffff0208 	.word	0xffff0208

08005f44 <__sread>:
 8005f44:	b510      	push	{r4, lr}
 8005f46:	460c      	mov	r4, r1
 8005f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f4c:	f000 f86c 	bl	8006028 <_read_r>
 8005f50:	2800      	cmp	r0, #0
 8005f52:	bfab      	itete	ge
 8005f54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005f56:	89a3      	ldrhlt	r3, [r4, #12]
 8005f58:	181b      	addge	r3, r3, r0
 8005f5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005f5e:	bfac      	ite	ge
 8005f60:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005f62:	81a3      	strhlt	r3, [r4, #12]
 8005f64:	bd10      	pop	{r4, pc}

08005f66 <__swrite>:
 8005f66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f6a:	461f      	mov	r7, r3
 8005f6c:	898b      	ldrh	r3, [r1, #12]
 8005f6e:	05db      	lsls	r3, r3, #23
 8005f70:	4605      	mov	r5, r0
 8005f72:	460c      	mov	r4, r1
 8005f74:	4616      	mov	r6, r2
 8005f76:	d505      	bpl.n	8005f84 <__swrite+0x1e>
 8005f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f7c:	2302      	movs	r3, #2
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f000 f840 	bl	8006004 <_lseek_r>
 8005f84:	89a3      	ldrh	r3, [r4, #12]
 8005f86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f8e:	81a3      	strh	r3, [r4, #12]
 8005f90:	4632      	mov	r2, r6
 8005f92:	463b      	mov	r3, r7
 8005f94:	4628      	mov	r0, r5
 8005f96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f9a:	f000 b857 	b.w	800604c <_write_r>

08005f9e <__sseek>:
 8005f9e:	b510      	push	{r4, lr}
 8005fa0:	460c      	mov	r4, r1
 8005fa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fa6:	f000 f82d 	bl	8006004 <_lseek_r>
 8005faa:	1c43      	adds	r3, r0, #1
 8005fac:	89a3      	ldrh	r3, [r4, #12]
 8005fae:	bf15      	itete	ne
 8005fb0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005fb2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005fb6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005fba:	81a3      	strheq	r3, [r4, #12]
 8005fbc:	bf18      	it	ne
 8005fbe:	81a3      	strhne	r3, [r4, #12]
 8005fc0:	bd10      	pop	{r4, pc}

08005fc2 <__sclose>:
 8005fc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fc6:	f000 b80d 	b.w	8005fe4 <_close_r>

08005fca <memset>:
 8005fca:	4402      	add	r2, r0
 8005fcc:	4603      	mov	r3, r0
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d100      	bne.n	8005fd4 <memset+0xa>
 8005fd2:	4770      	bx	lr
 8005fd4:	f803 1b01 	strb.w	r1, [r3], #1
 8005fd8:	e7f9      	b.n	8005fce <memset+0x4>
	...

08005fdc <_localeconv_r>:
 8005fdc:	4800      	ldr	r0, [pc, #0]	@ (8005fe0 <_localeconv_r+0x4>)
 8005fde:	4770      	bx	lr
 8005fe0:	20000158 	.word	0x20000158

08005fe4 <_close_r>:
 8005fe4:	b538      	push	{r3, r4, r5, lr}
 8005fe6:	4d06      	ldr	r5, [pc, #24]	@ (8006000 <_close_r+0x1c>)
 8005fe8:	2300      	movs	r3, #0
 8005fea:	4604      	mov	r4, r0
 8005fec:	4608      	mov	r0, r1
 8005fee:	602b      	str	r3, [r5, #0]
 8005ff0:	f7fb fbe5 	bl	80017be <_close>
 8005ff4:	1c43      	adds	r3, r0, #1
 8005ff6:	d102      	bne.n	8005ffe <_close_r+0x1a>
 8005ff8:	682b      	ldr	r3, [r5, #0]
 8005ffa:	b103      	cbz	r3, 8005ffe <_close_r+0x1a>
 8005ffc:	6023      	str	r3, [r4, #0]
 8005ffe:	bd38      	pop	{r3, r4, r5, pc}
 8006000:	2000043c 	.word	0x2000043c

08006004 <_lseek_r>:
 8006004:	b538      	push	{r3, r4, r5, lr}
 8006006:	4d07      	ldr	r5, [pc, #28]	@ (8006024 <_lseek_r+0x20>)
 8006008:	4604      	mov	r4, r0
 800600a:	4608      	mov	r0, r1
 800600c:	4611      	mov	r1, r2
 800600e:	2200      	movs	r2, #0
 8006010:	602a      	str	r2, [r5, #0]
 8006012:	461a      	mov	r2, r3
 8006014:	f7fb fbfa 	bl	800180c <_lseek>
 8006018:	1c43      	adds	r3, r0, #1
 800601a:	d102      	bne.n	8006022 <_lseek_r+0x1e>
 800601c:	682b      	ldr	r3, [r5, #0]
 800601e:	b103      	cbz	r3, 8006022 <_lseek_r+0x1e>
 8006020:	6023      	str	r3, [r4, #0]
 8006022:	bd38      	pop	{r3, r4, r5, pc}
 8006024:	2000043c 	.word	0x2000043c

08006028 <_read_r>:
 8006028:	b538      	push	{r3, r4, r5, lr}
 800602a:	4d07      	ldr	r5, [pc, #28]	@ (8006048 <_read_r+0x20>)
 800602c:	4604      	mov	r4, r0
 800602e:	4608      	mov	r0, r1
 8006030:	4611      	mov	r1, r2
 8006032:	2200      	movs	r2, #0
 8006034:	602a      	str	r2, [r5, #0]
 8006036:	461a      	mov	r2, r3
 8006038:	f7fb fb88 	bl	800174c <_read>
 800603c:	1c43      	adds	r3, r0, #1
 800603e:	d102      	bne.n	8006046 <_read_r+0x1e>
 8006040:	682b      	ldr	r3, [r5, #0]
 8006042:	b103      	cbz	r3, 8006046 <_read_r+0x1e>
 8006044:	6023      	str	r3, [r4, #0]
 8006046:	bd38      	pop	{r3, r4, r5, pc}
 8006048:	2000043c 	.word	0x2000043c

0800604c <_write_r>:
 800604c:	b538      	push	{r3, r4, r5, lr}
 800604e:	4d07      	ldr	r5, [pc, #28]	@ (800606c <_write_r+0x20>)
 8006050:	4604      	mov	r4, r0
 8006052:	4608      	mov	r0, r1
 8006054:	4611      	mov	r1, r2
 8006056:	2200      	movs	r2, #0
 8006058:	602a      	str	r2, [r5, #0]
 800605a:	461a      	mov	r2, r3
 800605c:	f7fb fb93 	bl	8001786 <_write>
 8006060:	1c43      	adds	r3, r0, #1
 8006062:	d102      	bne.n	800606a <_write_r+0x1e>
 8006064:	682b      	ldr	r3, [r5, #0]
 8006066:	b103      	cbz	r3, 800606a <_write_r+0x1e>
 8006068:	6023      	str	r3, [r4, #0]
 800606a:	bd38      	pop	{r3, r4, r5, pc}
 800606c:	2000043c 	.word	0x2000043c

08006070 <__errno>:
 8006070:	4b01      	ldr	r3, [pc, #4]	@ (8006078 <__errno+0x8>)
 8006072:	6818      	ldr	r0, [r3, #0]
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	20000018 	.word	0x20000018

0800607c <__libc_init_array>:
 800607c:	b570      	push	{r4, r5, r6, lr}
 800607e:	4d0d      	ldr	r5, [pc, #52]	@ (80060b4 <__libc_init_array+0x38>)
 8006080:	4c0d      	ldr	r4, [pc, #52]	@ (80060b8 <__libc_init_array+0x3c>)
 8006082:	1b64      	subs	r4, r4, r5
 8006084:	10a4      	asrs	r4, r4, #2
 8006086:	2600      	movs	r6, #0
 8006088:	42a6      	cmp	r6, r4
 800608a:	d109      	bne.n	80060a0 <__libc_init_array+0x24>
 800608c:	4d0b      	ldr	r5, [pc, #44]	@ (80060bc <__libc_init_array+0x40>)
 800608e:	4c0c      	ldr	r4, [pc, #48]	@ (80060c0 <__libc_init_array+0x44>)
 8006090:	f003 fc76 	bl	8009980 <_init>
 8006094:	1b64      	subs	r4, r4, r5
 8006096:	10a4      	asrs	r4, r4, #2
 8006098:	2600      	movs	r6, #0
 800609a:	42a6      	cmp	r6, r4
 800609c:	d105      	bne.n	80060aa <__libc_init_array+0x2e>
 800609e:	bd70      	pop	{r4, r5, r6, pc}
 80060a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80060a4:	4798      	blx	r3
 80060a6:	3601      	adds	r6, #1
 80060a8:	e7ee      	b.n	8006088 <__libc_init_array+0xc>
 80060aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80060ae:	4798      	blx	r3
 80060b0:	3601      	adds	r6, #1
 80060b2:	e7f2      	b.n	800609a <__libc_init_array+0x1e>
 80060b4:	08009e90 	.word	0x08009e90
 80060b8:	08009e90 	.word	0x08009e90
 80060bc:	08009e90 	.word	0x08009e90
 80060c0:	08009e94 	.word	0x08009e94

080060c4 <__retarget_lock_init_recursive>:
 80060c4:	4770      	bx	lr

080060c6 <__retarget_lock_acquire_recursive>:
 80060c6:	4770      	bx	lr

080060c8 <__retarget_lock_release_recursive>:
 80060c8:	4770      	bx	lr
	...

080060cc <nanf>:
 80060cc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80060d4 <nanf+0x8>
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	7fc00000 	.word	0x7fc00000

080060d8 <quorem>:
 80060d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060dc:	6903      	ldr	r3, [r0, #16]
 80060de:	690c      	ldr	r4, [r1, #16]
 80060e0:	42a3      	cmp	r3, r4
 80060e2:	4607      	mov	r7, r0
 80060e4:	db7e      	blt.n	80061e4 <quorem+0x10c>
 80060e6:	3c01      	subs	r4, #1
 80060e8:	f101 0814 	add.w	r8, r1, #20
 80060ec:	00a3      	lsls	r3, r4, #2
 80060ee:	f100 0514 	add.w	r5, r0, #20
 80060f2:	9300      	str	r3, [sp, #0]
 80060f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060f8:	9301      	str	r3, [sp, #4]
 80060fa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80060fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006102:	3301      	adds	r3, #1
 8006104:	429a      	cmp	r2, r3
 8006106:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800610a:	fbb2 f6f3 	udiv	r6, r2, r3
 800610e:	d32e      	bcc.n	800616e <quorem+0x96>
 8006110:	f04f 0a00 	mov.w	sl, #0
 8006114:	46c4      	mov	ip, r8
 8006116:	46ae      	mov	lr, r5
 8006118:	46d3      	mov	fp, sl
 800611a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800611e:	b298      	uxth	r0, r3
 8006120:	fb06 a000 	mla	r0, r6, r0, sl
 8006124:	0c02      	lsrs	r2, r0, #16
 8006126:	0c1b      	lsrs	r3, r3, #16
 8006128:	fb06 2303 	mla	r3, r6, r3, r2
 800612c:	f8de 2000 	ldr.w	r2, [lr]
 8006130:	b280      	uxth	r0, r0
 8006132:	b292      	uxth	r2, r2
 8006134:	1a12      	subs	r2, r2, r0
 8006136:	445a      	add	r2, fp
 8006138:	f8de 0000 	ldr.w	r0, [lr]
 800613c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006140:	b29b      	uxth	r3, r3
 8006142:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006146:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800614a:	b292      	uxth	r2, r2
 800614c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006150:	45e1      	cmp	r9, ip
 8006152:	f84e 2b04 	str.w	r2, [lr], #4
 8006156:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800615a:	d2de      	bcs.n	800611a <quorem+0x42>
 800615c:	9b00      	ldr	r3, [sp, #0]
 800615e:	58eb      	ldr	r3, [r5, r3]
 8006160:	b92b      	cbnz	r3, 800616e <quorem+0x96>
 8006162:	9b01      	ldr	r3, [sp, #4]
 8006164:	3b04      	subs	r3, #4
 8006166:	429d      	cmp	r5, r3
 8006168:	461a      	mov	r2, r3
 800616a:	d32f      	bcc.n	80061cc <quorem+0xf4>
 800616c:	613c      	str	r4, [r7, #16]
 800616e:	4638      	mov	r0, r7
 8006170:	f001 f9c2 	bl	80074f8 <__mcmp>
 8006174:	2800      	cmp	r0, #0
 8006176:	db25      	blt.n	80061c4 <quorem+0xec>
 8006178:	4629      	mov	r1, r5
 800617a:	2000      	movs	r0, #0
 800617c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006180:	f8d1 c000 	ldr.w	ip, [r1]
 8006184:	fa1f fe82 	uxth.w	lr, r2
 8006188:	fa1f f38c 	uxth.w	r3, ip
 800618c:	eba3 030e 	sub.w	r3, r3, lr
 8006190:	4403      	add	r3, r0
 8006192:	0c12      	lsrs	r2, r2, #16
 8006194:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006198:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800619c:	b29b      	uxth	r3, r3
 800619e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061a2:	45c1      	cmp	r9, r8
 80061a4:	f841 3b04 	str.w	r3, [r1], #4
 80061a8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80061ac:	d2e6      	bcs.n	800617c <quorem+0xa4>
 80061ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061b6:	b922      	cbnz	r2, 80061c2 <quorem+0xea>
 80061b8:	3b04      	subs	r3, #4
 80061ba:	429d      	cmp	r5, r3
 80061bc:	461a      	mov	r2, r3
 80061be:	d30b      	bcc.n	80061d8 <quorem+0x100>
 80061c0:	613c      	str	r4, [r7, #16]
 80061c2:	3601      	adds	r6, #1
 80061c4:	4630      	mov	r0, r6
 80061c6:	b003      	add	sp, #12
 80061c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061cc:	6812      	ldr	r2, [r2, #0]
 80061ce:	3b04      	subs	r3, #4
 80061d0:	2a00      	cmp	r2, #0
 80061d2:	d1cb      	bne.n	800616c <quorem+0x94>
 80061d4:	3c01      	subs	r4, #1
 80061d6:	e7c6      	b.n	8006166 <quorem+0x8e>
 80061d8:	6812      	ldr	r2, [r2, #0]
 80061da:	3b04      	subs	r3, #4
 80061dc:	2a00      	cmp	r2, #0
 80061de:	d1ef      	bne.n	80061c0 <quorem+0xe8>
 80061e0:	3c01      	subs	r4, #1
 80061e2:	e7ea      	b.n	80061ba <quorem+0xe2>
 80061e4:	2000      	movs	r0, #0
 80061e6:	e7ee      	b.n	80061c6 <quorem+0xee>

080061e8 <_dtoa_r>:
 80061e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ec:	69c7      	ldr	r7, [r0, #28]
 80061ee:	b099      	sub	sp, #100	@ 0x64
 80061f0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80061f4:	ec55 4b10 	vmov	r4, r5, d0
 80061f8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80061fa:	9109      	str	r1, [sp, #36]	@ 0x24
 80061fc:	4683      	mov	fp, r0
 80061fe:	920e      	str	r2, [sp, #56]	@ 0x38
 8006200:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006202:	b97f      	cbnz	r7, 8006224 <_dtoa_r+0x3c>
 8006204:	2010      	movs	r0, #16
 8006206:	f000 fdfd 	bl	8006e04 <malloc>
 800620a:	4602      	mov	r2, r0
 800620c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006210:	b920      	cbnz	r0, 800621c <_dtoa_r+0x34>
 8006212:	4ba7      	ldr	r3, [pc, #668]	@ (80064b0 <_dtoa_r+0x2c8>)
 8006214:	21ef      	movs	r1, #239	@ 0xef
 8006216:	48a7      	ldr	r0, [pc, #668]	@ (80064b4 <_dtoa_r+0x2cc>)
 8006218:	f002 fc36 	bl	8008a88 <__assert_func>
 800621c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006220:	6007      	str	r7, [r0, #0]
 8006222:	60c7      	str	r7, [r0, #12]
 8006224:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006228:	6819      	ldr	r1, [r3, #0]
 800622a:	b159      	cbz	r1, 8006244 <_dtoa_r+0x5c>
 800622c:	685a      	ldr	r2, [r3, #4]
 800622e:	604a      	str	r2, [r1, #4]
 8006230:	2301      	movs	r3, #1
 8006232:	4093      	lsls	r3, r2
 8006234:	608b      	str	r3, [r1, #8]
 8006236:	4658      	mov	r0, fp
 8006238:	f000 feda 	bl	8006ff0 <_Bfree>
 800623c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006240:	2200      	movs	r2, #0
 8006242:	601a      	str	r2, [r3, #0]
 8006244:	1e2b      	subs	r3, r5, #0
 8006246:	bfb9      	ittee	lt
 8006248:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800624c:	9303      	strlt	r3, [sp, #12]
 800624e:	2300      	movge	r3, #0
 8006250:	6033      	strge	r3, [r6, #0]
 8006252:	9f03      	ldr	r7, [sp, #12]
 8006254:	4b98      	ldr	r3, [pc, #608]	@ (80064b8 <_dtoa_r+0x2d0>)
 8006256:	bfbc      	itt	lt
 8006258:	2201      	movlt	r2, #1
 800625a:	6032      	strlt	r2, [r6, #0]
 800625c:	43bb      	bics	r3, r7
 800625e:	d112      	bne.n	8006286 <_dtoa_r+0x9e>
 8006260:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006262:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006266:	6013      	str	r3, [r2, #0]
 8006268:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800626c:	4323      	orrs	r3, r4
 800626e:	f000 854d 	beq.w	8006d0c <_dtoa_r+0xb24>
 8006272:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006274:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80064cc <_dtoa_r+0x2e4>
 8006278:	2b00      	cmp	r3, #0
 800627a:	f000 854f 	beq.w	8006d1c <_dtoa_r+0xb34>
 800627e:	f10a 0303 	add.w	r3, sl, #3
 8006282:	f000 bd49 	b.w	8006d18 <_dtoa_r+0xb30>
 8006286:	ed9d 7b02 	vldr	d7, [sp, #8]
 800628a:	2200      	movs	r2, #0
 800628c:	ec51 0b17 	vmov	r0, r1, d7
 8006290:	2300      	movs	r3, #0
 8006292:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006296:	f7fa fc17 	bl	8000ac8 <__aeabi_dcmpeq>
 800629a:	4680      	mov	r8, r0
 800629c:	b158      	cbz	r0, 80062b6 <_dtoa_r+0xce>
 800629e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80062a0:	2301      	movs	r3, #1
 80062a2:	6013      	str	r3, [r2, #0]
 80062a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80062a6:	b113      	cbz	r3, 80062ae <_dtoa_r+0xc6>
 80062a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80062aa:	4b84      	ldr	r3, [pc, #528]	@ (80064bc <_dtoa_r+0x2d4>)
 80062ac:	6013      	str	r3, [r2, #0]
 80062ae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80064d0 <_dtoa_r+0x2e8>
 80062b2:	f000 bd33 	b.w	8006d1c <_dtoa_r+0xb34>
 80062b6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80062ba:	aa16      	add	r2, sp, #88	@ 0x58
 80062bc:	a917      	add	r1, sp, #92	@ 0x5c
 80062be:	4658      	mov	r0, fp
 80062c0:	f001 fa3a 	bl	8007738 <__d2b>
 80062c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80062c8:	4681      	mov	r9, r0
 80062ca:	2e00      	cmp	r6, #0
 80062cc:	d077      	beq.n	80063be <_dtoa_r+0x1d6>
 80062ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80062d0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80062d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80062dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80062e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80062e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80062e8:	4619      	mov	r1, r3
 80062ea:	2200      	movs	r2, #0
 80062ec:	4b74      	ldr	r3, [pc, #464]	@ (80064c0 <_dtoa_r+0x2d8>)
 80062ee:	f7f9 ffcb 	bl	8000288 <__aeabi_dsub>
 80062f2:	a369      	add	r3, pc, #420	@ (adr r3, 8006498 <_dtoa_r+0x2b0>)
 80062f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f8:	f7fa f97e 	bl	80005f8 <__aeabi_dmul>
 80062fc:	a368      	add	r3, pc, #416	@ (adr r3, 80064a0 <_dtoa_r+0x2b8>)
 80062fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006302:	f7f9 ffc3 	bl	800028c <__adddf3>
 8006306:	4604      	mov	r4, r0
 8006308:	4630      	mov	r0, r6
 800630a:	460d      	mov	r5, r1
 800630c:	f7fa f90a 	bl	8000524 <__aeabi_i2d>
 8006310:	a365      	add	r3, pc, #404	@ (adr r3, 80064a8 <_dtoa_r+0x2c0>)
 8006312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006316:	f7fa f96f 	bl	80005f8 <__aeabi_dmul>
 800631a:	4602      	mov	r2, r0
 800631c:	460b      	mov	r3, r1
 800631e:	4620      	mov	r0, r4
 8006320:	4629      	mov	r1, r5
 8006322:	f7f9 ffb3 	bl	800028c <__adddf3>
 8006326:	4604      	mov	r4, r0
 8006328:	460d      	mov	r5, r1
 800632a:	f7fa fc15 	bl	8000b58 <__aeabi_d2iz>
 800632e:	2200      	movs	r2, #0
 8006330:	4607      	mov	r7, r0
 8006332:	2300      	movs	r3, #0
 8006334:	4620      	mov	r0, r4
 8006336:	4629      	mov	r1, r5
 8006338:	f7fa fbd0 	bl	8000adc <__aeabi_dcmplt>
 800633c:	b140      	cbz	r0, 8006350 <_dtoa_r+0x168>
 800633e:	4638      	mov	r0, r7
 8006340:	f7fa f8f0 	bl	8000524 <__aeabi_i2d>
 8006344:	4622      	mov	r2, r4
 8006346:	462b      	mov	r3, r5
 8006348:	f7fa fbbe 	bl	8000ac8 <__aeabi_dcmpeq>
 800634c:	b900      	cbnz	r0, 8006350 <_dtoa_r+0x168>
 800634e:	3f01      	subs	r7, #1
 8006350:	2f16      	cmp	r7, #22
 8006352:	d851      	bhi.n	80063f8 <_dtoa_r+0x210>
 8006354:	4b5b      	ldr	r3, [pc, #364]	@ (80064c4 <_dtoa_r+0x2dc>)
 8006356:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800635a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006362:	f7fa fbbb 	bl	8000adc <__aeabi_dcmplt>
 8006366:	2800      	cmp	r0, #0
 8006368:	d048      	beq.n	80063fc <_dtoa_r+0x214>
 800636a:	3f01      	subs	r7, #1
 800636c:	2300      	movs	r3, #0
 800636e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006370:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006372:	1b9b      	subs	r3, r3, r6
 8006374:	1e5a      	subs	r2, r3, #1
 8006376:	bf44      	itt	mi
 8006378:	f1c3 0801 	rsbmi	r8, r3, #1
 800637c:	2300      	movmi	r3, #0
 800637e:	9208      	str	r2, [sp, #32]
 8006380:	bf54      	ite	pl
 8006382:	f04f 0800 	movpl.w	r8, #0
 8006386:	9308      	strmi	r3, [sp, #32]
 8006388:	2f00      	cmp	r7, #0
 800638a:	db39      	blt.n	8006400 <_dtoa_r+0x218>
 800638c:	9b08      	ldr	r3, [sp, #32]
 800638e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006390:	443b      	add	r3, r7
 8006392:	9308      	str	r3, [sp, #32]
 8006394:	2300      	movs	r3, #0
 8006396:	930a      	str	r3, [sp, #40]	@ 0x28
 8006398:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800639a:	2b09      	cmp	r3, #9
 800639c:	d864      	bhi.n	8006468 <_dtoa_r+0x280>
 800639e:	2b05      	cmp	r3, #5
 80063a0:	bfc4      	itt	gt
 80063a2:	3b04      	subgt	r3, #4
 80063a4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80063a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063a8:	f1a3 0302 	sub.w	r3, r3, #2
 80063ac:	bfcc      	ite	gt
 80063ae:	2400      	movgt	r4, #0
 80063b0:	2401      	movle	r4, #1
 80063b2:	2b03      	cmp	r3, #3
 80063b4:	d863      	bhi.n	800647e <_dtoa_r+0x296>
 80063b6:	e8df f003 	tbb	[pc, r3]
 80063ba:	372a      	.short	0x372a
 80063bc:	5535      	.short	0x5535
 80063be:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80063c2:	441e      	add	r6, r3
 80063c4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80063c8:	2b20      	cmp	r3, #32
 80063ca:	bfc1      	itttt	gt
 80063cc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80063d0:	409f      	lslgt	r7, r3
 80063d2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80063d6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80063da:	bfd6      	itet	le
 80063dc:	f1c3 0320 	rsble	r3, r3, #32
 80063e0:	ea47 0003 	orrgt.w	r0, r7, r3
 80063e4:	fa04 f003 	lslle.w	r0, r4, r3
 80063e8:	f7fa f88c 	bl	8000504 <__aeabi_ui2d>
 80063ec:	2201      	movs	r2, #1
 80063ee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80063f2:	3e01      	subs	r6, #1
 80063f4:	9214      	str	r2, [sp, #80]	@ 0x50
 80063f6:	e777      	b.n	80062e8 <_dtoa_r+0x100>
 80063f8:	2301      	movs	r3, #1
 80063fa:	e7b8      	b.n	800636e <_dtoa_r+0x186>
 80063fc:	9012      	str	r0, [sp, #72]	@ 0x48
 80063fe:	e7b7      	b.n	8006370 <_dtoa_r+0x188>
 8006400:	427b      	negs	r3, r7
 8006402:	930a      	str	r3, [sp, #40]	@ 0x28
 8006404:	2300      	movs	r3, #0
 8006406:	eba8 0807 	sub.w	r8, r8, r7
 800640a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800640c:	e7c4      	b.n	8006398 <_dtoa_r+0x1b0>
 800640e:	2300      	movs	r3, #0
 8006410:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006412:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006414:	2b00      	cmp	r3, #0
 8006416:	dc35      	bgt.n	8006484 <_dtoa_r+0x29c>
 8006418:	2301      	movs	r3, #1
 800641a:	9300      	str	r3, [sp, #0]
 800641c:	9307      	str	r3, [sp, #28]
 800641e:	461a      	mov	r2, r3
 8006420:	920e      	str	r2, [sp, #56]	@ 0x38
 8006422:	e00b      	b.n	800643c <_dtoa_r+0x254>
 8006424:	2301      	movs	r3, #1
 8006426:	e7f3      	b.n	8006410 <_dtoa_r+0x228>
 8006428:	2300      	movs	r3, #0
 800642a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800642c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800642e:	18fb      	adds	r3, r7, r3
 8006430:	9300      	str	r3, [sp, #0]
 8006432:	3301      	adds	r3, #1
 8006434:	2b01      	cmp	r3, #1
 8006436:	9307      	str	r3, [sp, #28]
 8006438:	bfb8      	it	lt
 800643a:	2301      	movlt	r3, #1
 800643c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006440:	2100      	movs	r1, #0
 8006442:	2204      	movs	r2, #4
 8006444:	f102 0514 	add.w	r5, r2, #20
 8006448:	429d      	cmp	r5, r3
 800644a:	d91f      	bls.n	800648c <_dtoa_r+0x2a4>
 800644c:	6041      	str	r1, [r0, #4]
 800644e:	4658      	mov	r0, fp
 8006450:	f000 fd8e 	bl	8006f70 <_Balloc>
 8006454:	4682      	mov	sl, r0
 8006456:	2800      	cmp	r0, #0
 8006458:	d13c      	bne.n	80064d4 <_dtoa_r+0x2ec>
 800645a:	4b1b      	ldr	r3, [pc, #108]	@ (80064c8 <_dtoa_r+0x2e0>)
 800645c:	4602      	mov	r2, r0
 800645e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006462:	e6d8      	b.n	8006216 <_dtoa_r+0x2e>
 8006464:	2301      	movs	r3, #1
 8006466:	e7e0      	b.n	800642a <_dtoa_r+0x242>
 8006468:	2401      	movs	r4, #1
 800646a:	2300      	movs	r3, #0
 800646c:	9309      	str	r3, [sp, #36]	@ 0x24
 800646e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006470:	f04f 33ff 	mov.w	r3, #4294967295
 8006474:	9300      	str	r3, [sp, #0]
 8006476:	9307      	str	r3, [sp, #28]
 8006478:	2200      	movs	r2, #0
 800647a:	2312      	movs	r3, #18
 800647c:	e7d0      	b.n	8006420 <_dtoa_r+0x238>
 800647e:	2301      	movs	r3, #1
 8006480:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006482:	e7f5      	b.n	8006470 <_dtoa_r+0x288>
 8006484:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006486:	9300      	str	r3, [sp, #0]
 8006488:	9307      	str	r3, [sp, #28]
 800648a:	e7d7      	b.n	800643c <_dtoa_r+0x254>
 800648c:	3101      	adds	r1, #1
 800648e:	0052      	lsls	r2, r2, #1
 8006490:	e7d8      	b.n	8006444 <_dtoa_r+0x25c>
 8006492:	bf00      	nop
 8006494:	f3af 8000 	nop.w
 8006498:	636f4361 	.word	0x636f4361
 800649c:	3fd287a7 	.word	0x3fd287a7
 80064a0:	8b60c8b3 	.word	0x8b60c8b3
 80064a4:	3fc68a28 	.word	0x3fc68a28
 80064a8:	509f79fb 	.word	0x509f79fb
 80064ac:	3fd34413 	.word	0x3fd34413
 80064b0:	08009a9e 	.word	0x08009a9e
 80064b4:	08009ab5 	.word	0x08009ab5
 80064b8:	7ff00000 	.word	0x7ff00000
 80064bc:	08009a69 	.word	0x08009a69
 80064c0:	3ff80000 	.word	0x3ff80000
 80064c4:	08009bb0 	.word	0x08009bb0
 80064c8:	08009b0d 	.word	0x08009b0d
 80064cc:	08009a9a 	.word	0x08009a9a
 80064d0:	08009a68 	.word	0x08009a68
 80064d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80064d8:	6018      	str	r0, [r3, #0]
 80064da:	9b07      	ldr	r3, [sp, #28]
 80064dc:	2b0e      	cmp	r3, #14
 80064de:	f200 80a4 	bhi.w	800662a <_dtoa_r+0x442>
 80064e2:	2c00      	cmp	r4, #0
 80064e4:	f000 80a1 	beq.w	800662a <_dtoa_r+0x442>
 80064e8:	2f00      	cmp	r7, #0
 80064ea:	dd33      	ble.n	8006554 <_dtoa_r+0x36c>
 80064ec:	4bad      	ldr	r3, [pc, #692]	@ (80067a4 <_dtoa_r+0x5bc>)
 80064ee:	f007 020f 	and.w	r2, r7, #15
 80064f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064f6:	ed93 7b00 	vldr	d7, [r3]
 80064fa:	05f8      	lsls	r0, r7, #23
 80064fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006500:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006504:	d516      	bpl.n	8006534 <_dtoa_r+0x34c>
 8006506:	4ba8      	ldr	r3, [pc, #672]	@ (80067a8 <_dtoa_r+0x5c0>)
 8006508:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800650c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006510:	f7fa f99c 	bl	800084c <__aeabi_ddiv>
 8006514:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006518:	f004 040f 	and.w	r4, r4, #15
 800651c:	2603      	movs	r6, #3
 800651e:	4da2      	ldr	r5, [pc, #648]	@ (80067a8 <_dtoa_r+0x5c0>)
 8006520:	b954      	cbnz	r4, 8006538 <_dtoa_r+0x350>
 8006522:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006526:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800652a:	f7fa f98f 	bl	800084c <__aeabi_ddiv>
 800652e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006532:	e028      	b.n	8006586 <_dtoa_r+0x39e>
 8006534:	2602      	movs	r6, #2
 8006536:	e7f2      	b.n	800651e <_dtoa_r+0x336>
 8006538:	07e1      	lsls	r1, r4, #31
 800653a:	d508      	bpl.n	800654e <_dtoa_r+0x366>
 800653c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006540:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006544:	f7fa f858 	bl	80005f8 <__aeabi_dmul>
 8006548:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800654c:	3601      	adds	r6, #1
 800654e:	1064      	asrs	r4, r4, #1
 8006550:	3508      	adds	r5, #8
 8006552:	e7e5      	b.n	8006520 <_dtoa_r+0x338>
 8006554:	f000 80d2 	beq.w	80066fc <_dtoa_r+0x514>
 8006558:	427c      	negs	r4, r7
 800655a:	4b92      	ldr	r3, [pc, #584]	@ (80067a4 <_dtoa_r+0x5bc>)
 800655c:	4d92      	ldr	r5, [pc, #584]	@ (80067a8 <_dtoa_r+0x5c0>)
 800655e:	f004 020f 	and.w	r2, r4, #15
 8006562:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800656e:	f7fa f843 	bl	80005f8 <__aeabi_dmul>
 8006572:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006576:	1124      	asrs	r4, r4, #4
 8006578:	2300      	movs	r3, #0
 800657a:	2602      	movs	r6, #2
 800657c:	2c00      	cmp	r4, #0
 800657e:	f040 80b2 	bne.w	80066e6 <_dtoa_r+0x4fe>
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1d3      	bne.n	800652e <_dtoa_r+0x346>
 8006586:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006588:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800658c:	2b00      	cmp	r3, #0
 800658e:	f000 80b7 	beq.w	8006700 <_dtoa_r+0x518>
 8006592:	4b86      	ldr	r3, [pc, #536]	@ (80067ac <_dtoa_r+0x5c4>)
 8006594:	2200      	movs	r2, #0
 8006596:	4620      	mov	r0, r4
 8006598:	4629      	mov	r1, r5
 800659a:	f7fa fa9f 	bl	8000adc <__aeabi_dcmplt>
 800659e:	2800      	cmp	r0, #0
 80065a0:	f000 80ae 	beq.w	8006700 <_dtoa_r+0x518>
 80065a4:	9b07      	ldr	r3, [sp, #28]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f000 80aa 	beq.w	8006700 <_dtoa_r+0x518>
 80065ac:	9b00      	ldr	r3, [sp, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	dd37      	ble.n	8006622 <_dtoa_r+0x43a>
 80065b2:	1e7b      	subs	r3, r7, #1
 80065b4:	9304      	str	r3, [sp, #16]
 80065b6:	4620      	mov	r0, r4
 80065b8:	4b7d      	ldr	r3, [pc, #500]	@ (80067b0 <_dtoa_r+0x5c8>)
 80065ba:	2200      	movs	r2, #0
 80065bc:	4629      	mov	r1, r5
 80065be:	f7fa f81b 	bl	80005f8 <__aeabi_dmul>
 80065c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065c6:	9c00      	ldr	r4, [sp, #0]
 80065c8:	3601      	adds	r6, #1
 80065ca:	4630      	mov	r0, r6
 80065cc:	f7f9 ffaa 	bl	8000524 <__aeabi_i2d>
 80065d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065d4:	f7fa f810 	bl	80005f8 <__aeabi_dmul>
 80065d8:	4b76      	ldr	r3, [pc, #472]	@ (80067b4 <_dtoa_r+0x5cc>)
 80065da:	2200      	movs	r2, #0
 80065dc:	f7f9 fe56 	bl	800028c <__adddf3>
 80065e0:	4605      	mov	r5, r0
 80065e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80065e6:	2c00      	cmp	r4, #0
 80065e8:	f040 808d 	bne.w	8006706 <_dtoa_r+0x51e>
 80065ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065f0:	4b71      	ldr	r3, [pc, #452]	@ (80067b8 <_dtoa_r+0x5d0>)
 80065f2:	2200      	movs	r2, #0
 80065f4:	f7f9 fe48 	bl	8000288 <__aeabi_dsub>
 80065f8:	4602      	mov	r2, r0
 80065fa:	460b      	mov	r3, r1
 80065fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006600:	462a      	mov	r2, r5
 8006602:	4633      	mov	r3, r6
 8006604:	f7fa fa88 	bl	8000b18 <__aeabi_dcmpgt>
 8006608:	2800      	cmp	r0, #0
 800660a:	f040 828b 	bne.w	8006b24 <_dtoa_r+0x93c>
 800660e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006612:	462a      	mov	r2, r5
 8006614:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006618:	f7fa fa60 	bl	8000adc <__aeabi_dcmplt>
 800661c:	2800      	cmp	r0, #0
 800661e:	f040 8128 	bne.w	8006872 <_dtoa_r+0x68a>
 8006622:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006626:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800662a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800662c:	2b00      	cmp	r3, #0
 800662e:	f2c0 815a 	blt.w	80068e6 <_dtoa_r+0x6fe>
 8006632:	2f0e      	cmp	r7, #14
 8006634:	f300 8157 	bgt.w	80068e6 <_dtoa_r+0x6fe>
 8006638:	4b5a      	ldr	r3, [pc, #360]	@ (80067a4 <_dtoa_r+0x5bc>)
 800663a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800663e:	ed93 7b00 	vldr	d7, [r3]
 8006642:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006644:	2b00      	cmp	r3, #0
 8006646:	ed8d 7b00 	vstr	d7, [sp]
 800664a:	da03      	bge.n	8006654 <_dtoa_r+0x46c>
 800664c:	9b07      	ldr	r3, [sp, #28]
 800664e:	2b00      	cmp	r3, #0
 8006650:	f340 8101 	ble.w	8006856 <_dtoa_r+0x66e>
 8006654:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006658:	4656      	mov	r6, sl
 800665a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800665e:	4620      	mov	r0, r4
 8006660:	4629      	mov	r1, r5
 8006662:	f7fa f8f3 	bl	800084c <__aeabi_ddiv>
 8006666:	f7fa fa77 	bl	8000b58 <__aeabi_d2iz>
 800666a:	4680      	mov	r8, r0
 800666c:	f7f9 ff5a 	bl	8000524 <__aeabi_i2d>
 8006670:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006674:	f7f9 ffc0 	bl	80005f8 <__aeabi_dmul>
 8006678:	4602      	mov	r2, r0
 800667a:	460b      	mov	r3, r1
 800667c:	4620      	mov	r0, r4
 800667e:	4629      	mov	r1, r5
 8006680:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006684:	f7f9 fe00 	bl	8000288 <__aeabi_dsub>
 8006688:	f806 4b01 	strb.w	r4, [r6], #1
 800668c:	9d07      	ldr	r5, [sp, #28]
 800668e:	eba6 040a 	sub.w	r4, r6, sl
 8006692:	42a5      	cmp	r5, r4
 8006694:	4602      	mov	r2, r0
 8006696:	460b      	mov	r3, r1
 8006698:	f040 8117 	bne.w	80068ca <_dtoa_r+0x6e2>
 800669c:	f7f9 fdf6 	bl	800028c <__adddf3>
 80066a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80066a4:	4604      	mov	r4, r0
 80066a6:	460d      	mov	r5, r1
 80066a8:	f7fa fa36 	bl	8000b18 <__aeabi_dcmpgt>
 80066ac:	2800      	cmp	r0, #0
 80066ae:	f040 80f9 	bne.w	80068a4 <_dtoa_r+0x6bc>
 80066b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80066b6:	4620      	mov	r0, r4
 80066b8:	4629      	mov	r1, r5
 80066ba:	f7fa fa05 	bl	8000ac8 <__aeabi_dcmpeq>
 80066be:	b118      	cbz	r0, 80066c8 <_dtoa_r+0x4e0>
 80066c0:	f018 0f01 	tst.w	r8, #1
 80066c4:	f040 80ee 	bne.w	80068a4 <_dtoa_r+0x6bc>
 80066c8:	4649      	mov	r1, r9
 80066ca:	4658      	mov	r0, fp
 80066cc:	f000 fc90 	bl	8006ff0 <_Bfree>
 80066d0:	2300      	movs	r3, #0
 80066d2:	7033      	strb	r3, [r6, #0]
 80066d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80066d6:	3701      	adds	r7, #1
 80066d8:	601f      	str	r7, [r3, #0]
 80066da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f000 831d 	beq.w	8006d1c <_dtoa_r+0xb34>
 80066e2:	601e      	str	r6, [r3, #0]
 80066e4:	e31a      	b.n	8006d1c <_dtoa_r+0xb34>
 80066e6:	07e2      	lsls	r2, r4, #31
 80066e8:	d505      	bpl.n	80066f6 <_dtoa_r+0x50e>
 80066ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 80066ee:	f7f9 ff83 	bl	80005f8 <__aeabi_dmul>
 80066f2:	3601      	adds	r6, #1
 80066f4:	2301      	movs	r3, #1
 80066f6:	1064      	asrs	r4, r4, #1
 80066f8:	3508      	adds	r5, #8
 80066fa:	e73f      	b.n	800657c <_dtoa_r+0x394>
 80066fc:	2602      	movs	r6, #2
 80066fe:	e742      	b.n	8006586 <_dtoa_r+0x39e>
 8006700:	9c07      	ldr	r4, [sp, #28]
 8006702:	9704      	str	r7, [sp, #16]
 8006704:	e761      	b.n	80065ca <_dtoa_r+0x3e2>
 8006706:	4b27      	ldr	r3, [pc, #156]	@ (80067a4 <_dtoa_r+0x5bc>)
 8006708:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800670a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800670e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006712:	4454      	add	r4, sl
 8006714:	2900      	cmp	r1, #0
 8006716:	d053      	beq.n	80067c0 <_dtoa_r+0x5d8>
 8006718:	4928      	ldr	r1, [pc, #160]	@ (80067bc <_dtoa_r+0x5d4>)
 800671a:	2000      	movs	r0, #0
 800671c:	f7fa f896 	bl	800084c <__aeabi_ddiv>
 8006720:	4633      	mov	r3, r6
 8006722:	462a      	mov	r2, r5
 8006724:	f7f9 fdb0 	bl	8000288 <__aeabi_dsub>
 8006728:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800672c:	4656      	mov	r6, sl
 800672e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006732:	f7fa fa11 	bl	8000b58 <__aeabi_d2iz>
 8006736:	4605      	mov	r5, r0
 8006738:	f7f9 fef4 	bl	8000524 <__aeabi_i2d>
 800673c:	4602      	mov	r2, r0
 800673e:	460b      	mov	r3, r1
 8006740:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006744:	f7f9 fda0 	bl	8000288 <__aeabi_dsub>
 8006748:	3530      	adds	r5, #48	@ 0x30
 800674a:	4602      	mov	r2, r0
 800674c:	460b      	mov	r3, r1
 800674e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006752:	f806 5b01 	strb.w	r5, [r6], #1
 8006756:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800675a:	f7fa f9bf 	bl	8000adc <__aeabi_dcmplt>
 800675e:	2800      	cmp	r0, #0
 8006760:	d171      	bne.n	8006846 <_dtoa_r+0x65e>
 8006762:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006766:	4911      	ldr	r1, [pc, #68]	@ (80067ac <_dtoa_r+0x5c4>)
 8006768:	2000      	movs	r0, #0
 800676a:	f7f9 fd8d 	bl	8000288 <__aeabi_dsub>
 800676e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006772:	f7fa f9b3 	bl	8000adc <__aeabi_dcmplt>
 8006776:	2800      	cmp	r0, #0
 8006778:	f040 8095 	bne.w	80068a6 <_dtoa_r+0x6be>
 800677c:	42a6      	cmp	r6, r4
 800677e:	f43f af50 	beq.w	8006622 <_dtoa_r+0x43a>
 8006782:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006786:	4b0a      	ldr	r3, [pc, #40]	@ (80067b0 <_dtoa_r+0x5c8>)
 8006788:	2200      	movs	r2, #0
 800678a:	f7f9 ff35 	bl	80005f8 <__aeabi_dmul>
 800678e:	4b08      	ldr	r3, [pc, #32]	@ (80067b0 <_dtoa_r+0x5c8>)
 8006790:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006794:	2200      	movs	r2, #0
 8006796:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800679a:	f7f9 ff2d 	bl	80005f8 <__aeabi_dmul>
 800679e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067a2:	e7c4      	b.n	800672e <_dtoa_r+0x546>
 80067a4:	08009bb0 	.word	0x08009bb0
 80067a8:	08009b88 	.word	0x08009b88
 80067ac:	3ff00000 	.word	0x3ff00000
 80067b0:	40240000 	.word	0x40240000
 80067b4:	401c0000 	.word	0x401c0000
 80067b8:	40140000 	.word	0x40140000
 80067bc:	3fe00000 	.word	0x3fe00000
 80067c0:	4631      	mov	r1, r6
 80067c2:	4628      	mov	r0, r5
 80067c4:	f7f9 ff18 	bl	80005f8 <__aeabi_dmul>
 80067c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80067cc:	9415      	str	r4, [sp, #84]	@ 0x54
 80067ce:	4656      	mov	r6, sl
 80067d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067d4:	f7fa f9c0 	bl	8000b58 <__aeabi_d2iz>
 80067d8:	4605      	mov	r5, r0
 80067da:	f7f9 fea3 	bl	8000524 <__aeabi_i2d>
 80067de:	4602      	mov	r2, r0
 80067e0:	460b      	mov	r3, r1
 80067e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067e6:	f7f9 fd4f 	bl	8000288 <__aeabi_dsub>
 80067ea:	3530      	adds	r5, #48	@ 0x30
 80067ec:	f806 5b01 	strb.w	r5, [r6], #1
 80067f0:	4602      	mov	r2, r0
 80067f2:	460b      	mov	r3, r1
 80067f4:	42a6      	cmp	r6, r4
 80067f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80067fa:	f04f 0200 	mov.w	r2, #0
 80067fe:	d124      	bne.n	800684a <_dtoa_r+0x662>
 8006800:	4bac      	ldr	r3, [pc, #688]	@ (8006ab4 <_dtoa_r+0x8cc>)
 8006802:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006806:	f7f9 fd41 	bl	800028c <__adddf3>
 800680a:	4602      	mov	r2, r0
 800680c:	460b      	mov	r3, r1
 800680e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006812:	f7fa f981 	bl	8000b18 <__aeabi_dcmpgt>
 8006816:	2800      	cmp	r0, #0
 8006818:	d145      	bne.n	80068a6 <_dtoa_r+0x6be>
 800681a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800681e:	49a5      	ldr	r1, [pc, #660]	@ (8006ab4 <_dtoa_r+0x8cc>)
 8006820:	2000      	movs	r0, #0
 8006822:	f7f9 fd31 	bl	8000288 <__aeabi_dsub>
 8006826:	4602      	mov	r2, r0
 8006828:	460b      	mov	r3, r1
 800682a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800682e:	f7fa f955 	bl	8000adc <__aeabi_dcmplt>
 8006832:	2800      	cmp	r0, #0
 8006834:	f43f aef5 	beq.w	8006622 <_dtoa_r+0x43a>
 8006838:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800683a:	1e73      	subs	r3, r6, #1
 800683c:	9315      	str	r3, [sp, #84]	@ 0x54
 800683e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006842:	2b30      	cmp	r3, #48	@ 0x30
 8006844:	d0f8      	beq.n	8006838 <_dtoa_r+0x650>
 8006846:	9f04      	ldr	r7, [sp, #16]
 8006848:	e73e      	b.n	80066c8 <_dtoa_r+0x4e0>
 800684a:	4b9b      	ldr	r3, [pc, #620]	@ (8006ab8 <_dtoa_r+0x8d0>)
 800684c:	f7f9 fed4 	bl	80005f8 <__aeabi_dmul>
 8006850:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006854:	e7bc      	b.n	80067d0 <_dtoa_r+0x5e8>
 8006856:	d10c      	bne.n	8006872 <_dtoa_r+0x68a>
 8006858:	4b98      	ldr	r3, [pc, #608]	@ (8006abc <_dtoa_r+0x8d4>)
 800685a:	2200      	movs	r2, #0
 800685c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006860:	f7f9 feca 	bl	80005f8 <__aeabi_dmul>
 8006864:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006868:	f7fa f94c 	bl	8000b04 <__aeabi_dcmpge>
 800686c:	2800      	cmp	r0, #0
 800686e:	f000 8157 	beq.w	8006b20 <_dtoa_r+0x938>
 8006872:	2400      	movs	r4, #0
 8006874:	4625      	mov	r5, r4
 8006876:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006878:	43db      	mvns	r3, r3
 800687a:	9304      	str	r3, [sp, #16]
 800687c:	4656      	mov	r6, sl
 800687e:	2700      	movs	r7, #0
 8006880:	4621      	mov	r1, r4
 8006882:	4658      	mov	r0, fp
 8006884:	f000 fbb4 	bl	8006ff0 <_Bfree>
 8006888:	2d00      	cmp	r5, #0
 800688a:	d0dc      	beq.n	8006846 <_dtoa_r+0x65e>
 800688c:	b12f      	cbz	r7, 800689a <_dtoa_r+0x6b2>
 800688e:	42af      	cmp	r7, r5
 8006890:	d003      	beq.n	800689a <_dtoa_r+0x6b2>
 8006892:	4639      	mov	r1, r7
 8006894:	4658      	mov	r0, fp
 8006896:	f000 fbab 	bl	8006ff0 <_Bfree>
 800689a:	4629      	mov	r1, r5
 800689c:	4658      	mov	r0, fp
 800689e:	f000 fba7 	bl	8006ff0 <_Bfree>
 80068a2:	e7d0      	b.n	8006846 <_dtoa_r+0x65e>
 80068a4:	9704      	str	r7, [sp, #16]
 80068a6:	4633      	mov	r3, r6
 80068a8:	461e      	mov	r6, r3
 80068aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068ae:	2a39      	cmp	r2, #57	@ 0x39
 80068b0:	d107      	bne.n	80068c2 <_dtoa_r+0x6da>
 80068b2:	459a      	cmp	sl, r3
 80068b4:	d1f8      	bne.n	80068a8 <_dtoa_r+0x6c0>
 80068b6:	9a04      	ldr	r2, [sp, #16]
 80068b8:	3201      	adds	r2, #1
 80068ba:	9204      	str	r2, [sp, #16]
 80068bc:	2230      	movs	r2, #48	@ 0x30
 80068be:	f88a 2000 	strb.w	r2, [sl]
 80068c2:	781a      	ldrb	r2, [r3, #0]
 80068c4:	3201      	adds	r2, #1
 80068c6:	701a      	strb	r2, [r3, #0]
 80068c8:	e7bd      	b.n	8006846 <_dtoa_r+0x65e>
 80068ca:	4b7b      	ldr	r3, [pc, #492]	@ (8006ab8 <_dtoa_r+0x8d0>)
 80068cc:	2200      	movs	r2, #0
 80068ce:	f7f9 fe93 	bl	80005f8 <__aeabi_dmul>
 80068d2:	2200      	movs	r2, #0
 80068d4:	2300      	movs	r3, #0
 80068d6:	4604      	mov	r4, r0
 80068d8:	460d      	mov	r5, r1
 80068da:	f7fa f8f5 	bl	8000ac8 <__aeabi_dcmpeq>
 80068de:	2800      	cmp	r0, #0
 80068e0:	f43f aebb 	beq.w	800665a <_dtoa_r+0x472>
 80068e4:	e6f0      	b.n	80066c8 <_dtoa_r+0x4e0>
 80068e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80068e8:	2a00      	cmp	r2, #0
 80068ea:	f000 80db 	beq.w	8006aa4 <_dtoa_r+0x8bc>
 80068ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068f0:	2a01      	cmp	r2, #1
 80068f2:	f300 80bf 	bgt.w	8006a74 <_dtoa_r+0x88c>
 80068f6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80068f8:	2a00      	cmp	r2, #0
 80068fa:	f000 80b7 	beq.w	8006a6c <_dtoa_r+0x884>
 80068fe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006902:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006904:	4646      	mov	r6, r8
 8006906:	9a08      	ldr	r2, [sp, #32]
 8006908:	2101      	movs	r1, #1
 800690a:	441a      	add	r2, r3
 800690c:	4658      	mov	r0, fp
 800690e:	4498      	add	r8, r3
 8006910:	9208      	str	r2, [sp, #32]
 8006912:	f000 fc6b 	bl	80071ec <__i2b>
 8006916:	4605      	mov	r5, r0
 8006918:	b15e      	cbz	r6, 8006932 <_dtoa_r+0x74a>
 800691a:	9b08      	ldr	r3, [sp, #32]
 800691c:	2b00      	cmp	r3, #0
 800691e:	dd08      	ble.n	8006932 <_dtoa_r+0x74a>
 8006920:	42b3      	cmp	r3, r6
 8006922:	9a08      	ldr	r2, [sp, #32]
 8006924:	bfa8      	it	ge
 8006926:	4633      	movge	r3, r6
 8006928:	eba8 0803 	sub.w	r8, r8, r3
 800692c:	1af6      	subs	r6, r6, r3
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	9308      	str	r3, [sp, #32]
 8006932:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006934:	b1f3      	cbz	r3, 8006974 <_dtoa_r+0x78c>
 8006936:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006938:	2b00      	cmp	r3, #0
 800693a:	f000 80b7 	beq.w	8006aac <_dtoa_r+0x8c4>
 800693e:	b18c      	cbz	r4, 8006964 <_dtoa_r+0x77c>
 8006940:	4629      	mov	r1, r5
 8006942:	4622      	mov	r2, r4
 8006944:	4658      	mov	r0, fp
 8006946:	f000 fd11 	bl	800736c <__pow5mult>
 800694a:	464a      	mov	r2, r9
 800694c:	4601      	mov	r1, r0
 800694e:	4605      	mov	r5, r0
 8006950:	4658      	mov	r0, fp
 8006952:	f000 fc61 	bl	8007218 <__multiply>
 8006956:	4649      	mov	r1, r9
 8006958:	9004      	str	r0, [sp, #16]
 800695a:	4658      	mov	r0, fp
 800695c:	f000 fb48 	bl	8006ff0 <_Bfree>
 8006960:	9b04      	ldr	r3, [sp, #16]
 8006962:	4699      	mov	r9, r3
 8006964:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006966:	1b1a      	subs	r2, r3, r4
 8006968:	d004      	beq.n	8006974 <_dtoa_r+0x78c>
 800696a:	4649      	mov	r1, r9
 800696c:	4658      	mov	r0, fp
 800696e:	f000 fcfd 	bl	800736c <__pow5mult>
 8006972:	4681      	mov	r9, r0
 8006974:	2101      	movs	r1, #1
 8006976:	4658      	mov	r0, fp
 8006978:	f000 fc38 	bl	80071ec <__i2b>
 800697c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800697e:	4604      	mov	r4, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	f000 81cf 	beq.w	8006d24 <_dtoa_r+0xb3c>
 8006986:	461a      	mov	r2, r3
 8006988:	4601      	mov	r1, r0
 800698a:	4658      	mov	r0, fp
 800698c:	f000 fcee 	bl	800736c <__pow5mult>
 8006990:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006992:	2b01      	cmp	r3, #1
 8006994:	4604      	mov	r4, r0
 8006996:	f300 8095 	bgt.w	8006ac4 <_dtoa_r+0x8dc>
 800699a:	9b02      	ldr	r3, [sp, #8]
 800699c:	2b00      	cmp	r3, #0
 800699e:	f040 8087 	bne.w	8006ab0 <_dtoa_r+0x8c8>
 80069a2:	9b03      	ldr	r3, [sp, #12]
 80069a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f040 8089 	bne.w	8006ac0 <_dtoa_r+0x8d8>
 80069ae:	9b03      	ldr	r3, [sp, #12]
 80069b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80069b4:	0d1b      	lsrs	r3, r3, #20
 80069b6:	051b      	lsls	r3, r3, #20
 80069b8:	b12b      	cbz	r3, 80069c6 <_dtoa_r+0x7de>
 80069ba:	9b08      	ldr	r3, [sp, #32]
 80069bc:	3301      	adds	r3, #1
 80069be:	9308      	str	r3, [sp, #32]
 80069c0:	f108 0801 	add.w	r8, r8, #1
 80069c4:	2301      	movs	r3, #1
 80069c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80069c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f000 81b0 	beq.w	8006d30 <_dtoa_r+0xb48>
 80069d0:	6923      	ldr	r3, [r4, #16]
 80069d2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80069d6:	6918      	ldr	r0, [r3, #16]
 80069d8:	f000 fbbc 	bl	8007154 <__hi0bits>
 80069dc:	f1c0 0020 	rsb	r0, r0, #32
 80069e0:	9b08      	ldr	r3, [sp, #32]
 80069e2:	4418      	add	r0, r3
 80069e4:	f010 001f 	ands.w	r0, r0, #31
 80069e8:	d077      	beq.n	8006ada <_dtoa_r+0x8f2>
 80069ea:	f1c0 0320 	rsb	r3, r0, #32
 80069ee:	2b04      	cmp	r3, #4
 80069f0:	dd6b      	ble.n	8006aca <_dtoa_r+0x8e2>
 80069f2:	9b08      	ldr	r3, [sp, #32]
 80069f4:	f1c0 001c 	rsb	r0, r0, #28
 80069f8:	4403      	add	r3, r0
 80069fa:	4480      	add	r8, r0
 80069fc:	4406      	add	r6, r0
 80069fe:	9308      	str	r3, [sp, #32]
 8006a00:	f1b8 0f00 	cmp.w	r8, #0
 8006a04:	dd05      	ble.n	8006a12 <_dtoa_r+0x82a>
 8006a06:	4649      	mov	r1, r9
 8006a08:	4642      	mov	r2, r8
 8006a0a:	4658      	mov	r0, fp
 8006a0c:	f000 fd08 	bl	8007420 <__lshift>
 8006a10:	4681      	mov	r9, r0
 8006a12:	9b08      	ldr	r3, [sp, #32]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	dd05      	ble.n	8006a24 <_dtoa_r+0x83c>
 8006a18:	4621      	mov	r1, r4
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	4658      	mov	r0, fp
 8006a1e:	f000 fcff 	bl	8007420 <__lshift>
 8006a22:	4604      	mov	r4, r0
 8006a24:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d059      	beq.n	8006ade <_dtoa_r+0x8f6>
 8006a2a:	4621      	mov	r1, r4
 8006a2c:	4648      	mov	r0, r9
 8006a2e:	f000 fd63 	bl	80074f8 <__mcmp>
 8006a32:	2800      	cmp	r0, #0
 8006a34:	da53      	bge.n	8006ade <_dtoa_r+0x8f6>
 8006a36:	1e7b      	subs	r3, r7, #1
 8006a38:	9304      	str	r3, [sp, #16]
 8006a3a:	4649      	mov	r1, r9
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	220a      	movs	r2, #10
 8006a40:	4658      	mov	r0, fp
 8006a42:	f000 faf7 	bl	8007034 <__multadd>
 8006a46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a48:	4681      	mov	r9, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f000 8172 	beq.w	8006d34 <_dtoa_r+0xb4c>
 8006a50:	2300      	movs	r3, #0
 8006a52:	4629      	mov	r1, r5
 8006a54:	220a      	movs	r2, #10
 8006a56:	4658      	mov	r0, fp
 8006a58:	f000 faec 	bl	8007034 <__multadd>
 8006a5c:	9b00      	ldr	r3, [sp, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	4605      	mov	r5, r0
 8006a62:	dc67      	bgt.n	8006b34 <_dtoa_r+0x94c>
 8006a64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	dc41      	bgt.n	8006aee <_dtoa_r+0x906>
 8006a6a:	e063      	b.n	8006b34 <_dtoa_r+0x94c>
 8006a6c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006a6e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006a72:	e746      	b.n	8006902 <_dtoa_r+0x71a>
 8006a74:	9b07      	ldr	r3, [sp, #28]
 8006a76:	1e5c      	subs	r4, r3, #1
 8006a78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a7a:	42a3      	cmp	r3, r4
 8006a7c:	bfbf      	itttt	lt
 8006a7e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006a80:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006a82:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006a84:	1ae3      	sublt	r3, r4, r3
 8006a86:	bfb4      	ite	lt
 8006a88:	18d2      	addlt	r2, r2, r3
 8006a8a:	1b1c      	subge	r4, r3, r4
 8006a8c:	9b07      	ldr	r3, [sp, #28]
 8006a8e:	bfbc      	itt	lt
 8006a90:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006a92:	2400      	movlt	r4, #0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	bfb5      	itete	lt
 8006a98:	eba8 0603 	sublt.w	r6, r8, r3
 8006a9c:	9b07      	ldrge	r3, [sp, #28]
 8006a9e:	2300      	movlt	r3, #0
 8006aa0:	4646      	movge	r6, r8
 8006aa2:	e730      	b.n	8006906 <_dtoa_r+0x71e>
 8006aa4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006aa6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006aa8:	4646      	mov	r6, r8
 8006aaa:	e735      	b.n	8006918 <_dtoa_r+0x730>
 8006aac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006aae:	e75c      	b.n	800696a <_dtoa_r+0x782>
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	e788      	b.n	80069c6 <_dtoa_r+0x7de>
 8006ab4:	3fe00000 	.word	0x3fe00000
 8006ab8:	40240000 	.word	0x40240000
 8006abc:	40140000 	.word	0x40140000
 8006ac0:	9b02      	ldr	r3, [sp, #8]
 8006ac2:	e780      	b.n	80069c6 <_dtoa_r+0x7de>
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ac8:	e782      	b.n	80069d0 <_dtoa_r+0x7e8>
 8006aca:	d099      	beq.n	8006a00 <_dtoa_r+0x818>
 8006acc:	9a08      	ldr	r2, [sp, #32]
 8006ace:	331c      	adds	r3, #28
 8006ad0:	441a      	add	r2, r3
 8006ad2:	4498      	add	r8, r3
 8006ad4:	441e      	add	r6, r3
 8006ad6:	9208      	str	r2, [sp, #32]
 8006ad8:	e792      	b.n	8006a00 <_dtoa_r+0x818>
 8006ada:	4603      	mov	r3, r0
 8006adc:	e7f6      	b.n	8006acc <_dtoa_r+0x8e4>
 8006ade:	9b07      	ldr	r3, [sp, #28]
 8006ae0:	9704      	str	r7, [sp, #16]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	dc20      	bgt.n	8006b28 <_dtoa_r+0x940>
 8006ae6:	9300      	str	r3, [sp, #0]
 8006ae8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	dd1e      	ble.n	8006b2c <_dtoa_r+0x944>
 8006aee:	9b00      	ldr	r3, [sp, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f47f aec0 	bne.w	8006876 <_dtoa_r+0x68e>
 8006af6:	4621      	mov	r1, r4
 8006af8:	2205      	movs	r2, #5
 8006afa:	4658      	mov	r0, fp
 8006afc:	f000 fa9a 	bl	8007034 <__multadd>
 8006b00:	4601      	mov	r1, r0
 8006b02:	4604      	mov	r4, r0
 8006b04:	4648      	mov	r0, r9
 8006b06:	f000 fcf7 	bl	80074f8 <__mcmp>
 8006b0a:	2800      	cmp	r0, #0
 8006b0c:	f77f aeb3 	ble.w	8006876 <_dtoa_r+0x68e>
 8006b10:	4656      	mov	r6, sl
 8006b12:	2331      	movs	r3, #49	@ 0x31
 8006b14:	f806 3b01 	strb.w	r3, [r6], #1
 8006b18:	9b04      	ldr	r3, [sp, #16]
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	9304      	str	r3, [sp, #16]
 8006b1e:	e6ae      	b.n	800687e <_dtoa_r+0x696>
 8006b20:	9c07      	ldr	r4, [sp, #28]
 8006b22:	9704      	str	r7, [sp, #16]
 8006b24:	4625      	mov	r5, r4
 8006b26:	e7f3      	b.n	8006b10 <_dtoa_r+0x928>
 8006b28:	9b07      	ldr	r3, [sp, #28]
 8006b2a:	9300      	str	r3, [sp, #0]
 8006b2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	f000 8104 	beq.w	8006d3c <_dtoa_r+0xb54>
 8006b34:	2e00      	cmp	r6, #0
 8006b36:	dd05      	ble.n	8006b44 <_dtoa_r+0x95c>
 8006b38:	4629      	mov	r1, r5
 8006b3a:	4632      	mov	r2, r6
 8006b3c:	4658      	mov	r0, fp
 8006b3e:	f000 fc6f 	bl	8007420 <__lshift>
 8006b42:	4605      	mov	r5, r0
 8006b44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d05a      	beq.n	8006c00 <_dtoa_r+0xa18>
 8006b4a:	6869      	ldr	r1, [r5, #4]
 8006b4c:	4658      	mov	r0, fp
 8006b4e:	f000 fa0f 	bl	8006f70 <_Balloc>
 8006b52:	4606      	mov	r6, r0
 8006b54:	b928      	cbnz	r0, 8006b62 <_dtoa_r+0x97a>
 8006b56:	4b84      	ldr	r3, [pc, #528]	@ (8006d68 <_dtoa_r+0xb80>)
 8006b58:	4602      	mov	r2, r0
 8006b5a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006b5e:	f7ff bb5a 	b.w	8006216 <_dtoa_r+0x2e>
 8006b62:	692a      	ldr	r2, [r5, #16]
 8006b64:	3202      	adds	r2, #2
 8006b66:	0092      	lsls	r2, r2, #2
 8006b68:	f105 010c 	add.w	r1, r5, #12
 8006b6c:	300c      	adds	r0, #12
 8006b6e:	f001 ff75 	bl	8008a5c <memcpy>
 8006b72:	2201      	movs	r2, #1
 8006b74:	4631      	mov	r1, r6
 8006b76:	4658      	mov	r0, fp
 8006b78:	f000 fc52 	bl	8007420 <__lshift>
 8006b7c:	f10a 0301 	add.w	r3, sl, #1
 8006b80:	9307      	str	r3, [sp, #28]
 8006b82:	9b00      	ldr	r3, [sp, #0]
 8006b84:	4453      	add	r3, sl
 8006b86:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b88:	9b02      	ldr	r3, [sp, #8]
 8006b8a:	f003 0301 	and.w	r3, r3, #1
 8006b8e:	462f      	mov	r7, r5
 8006b90:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b92:	4605      	mov	r5, r0
 8006b94:	9b07      	ldr	r3, [sp, #28]
 8006b96:	4621      	mov	r1, r4
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	4648      	mov	r0, r9
 8006b9c:	9300      	str	r3, [sp, #0]
 8006b9e:	f7ff fa9b 	bl	80060d8 <quorem>
 8006ba2:	4639      	mov	r1, r7
 8006ba4:	9002      	str	r0, [sp, #8]
 8006ba6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006baa:	4648      	mov	r0, r9
 8006bac:	f000 fca4 	bl	80074f8 <__mcmp>
 8006bb0:	462a      	mov	r2, r5
 8006bb2:	9008      	str	r0, [sp, #32]
 8006bb4:	4621      	mov	r1, r4
 8006bb6:	4658      	mov	r0, fp
 8006bb8:	f000 fcba 	bl	8007530 <__mdiff>
 8006bbc:	68c2      	ldr	r2, [r0, #12]
 8006bbe:	4606      	mov	r6, r0
 8006bc0:	bb02      	cbnz	r2, 8006c04 <_dtoa_r+0xa1c>
 8006bc2:	4601      	mov	r1, r0
 8006bc4:	4648      	mov	r0, r9
 8006bc6:	f000 fc97 	bl	80074f8 <__mcmp>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	4631      	mov	r1, r6
 8006bce:	4658      	mov	r0, fp
 8006bd0:	920e      	str	r2, [sp, #56]	@ 0x38
 8006bd2:	f000 fa0d 	bl	8006ff0 <_Bfree>
 8006bd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bd8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006bda:	9e07      	ldr	r6, [sp, #28]
 8006bdc:	ea43 0102 	orr.w	r1, r3, r2
 8006be0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006be2:	4319      	orrs	r1, r3
 8006be4:	d110      	bne.n	8006c08 <_dtoa_r+0xa20>
 8006be6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006bea:	d029      	beq.n	8006c40 <_dtoa_r+0xa58>
 8006bec:	9b08      	ldr	r3, [sp, #32]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	dd02      	ble.n	8006bf8 <_dtoa_r+0xa10>
 8006bf2:	9b02      	ldr	r3, [sp, #8]
 8006bf4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006bf8:	9b00      	ldr	r3, [sp, #0]
 8006bfa:	f883 8000 	strb.w	r8, [r3]
 8006bfe:	e63f      	b.n	8006880 <_dtoa_r+0x698>
 8006c00:	4628      	mov	r0, r5
 8006c02:	e7bb      	b.n	8006b7c <_dtoa_r+0x994>
 8006c04:	2201      	movs	r2, #1
 8006c06:	e7e1      	b.n	8006bcc <_dtoa_r+0x9e4>
 8006c08:	9b08      	ldr	r3, [sp, #32]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	db04      	blt.n	8006c18 <_dtoa_r+0xa30>
 8006c0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006c10:	430b      	orrs	r3, r1
 8006c12:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006c14:	430b      	orrs	r3, r1
 8006c16:	d120      	bne.n	8006c5a <_dtoa_r+0xa72>
 8006c18:	2a00      	cmp	r2, #0
 8006c1a:	dded      	ble.n	8006bf8 <_dtoa_r+0xa10>
 8006c1c:	4649      	mov	r1, r9
 8006c1e:	2201      	movs	r2, #1
 8006c20:	4658      	mov	r0, fp
 8006c22:	f000 fbfd 	bl	8007420 <__lshift>
 8006c26:	4621      	mov	r1, r4
 8006c28:	4681      	mov	r9, r0
 8006c2a:	f000 fc65 	bl	80074f8 <__mcmp>
 8006c2e:	2800      	cmp	r0, #0
 8006c30:	dc03      	bgt.n	8006c3a <_dtoa_r+0xa52>
 8006c32:	d1e1      	bne.n	8006bf8 <_dtoa_r+0xa10>
 8006c34:	f018 0f01 	tst.w	r8, #1
 8006c38:	d0de      	beq.n	8006bf8 <_dtoa_r+0xa10>
 8006c3a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006c3e:	d1d8      	bne.n	8006bf2 <_dtoa_r+0xa0a>
 8006c40:	9a00      	ldr	r2, [sp, #0]
 8006c42:	2339      	movs	r3, #57	@ 0x39
 8006c44:	7013      	strb	r3, [r2, #0]
 8006c46:	4633      	mov	r3, r6
 8006c48:	461e      	mov	r6, r3
 8006c4a:	3b01      	subs	r3, #1
 8006c4c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006c50:	2a39      	cmp	r2, #57	@ 0x39
 8006c52:	d052      	beq.n	8006cfa <_dtoa_r+0xb12>
 8006c54:	3201      	adds	r2, #1
 8006c56:	701a      	strb	r2, [r3, #0]
 8006c58:	e612      	b.n	8006880 <_dtoa_r+0x698>
 8006c5a:	2a00      	cmp	r2, #0
 8006c5c:	dd07      	ble.n	8006c6e <_dtoa_r+0xa86>
 8006c5e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006c62:	d0ed      	beq.n	8006c40 <_dtoa_r+0xa58>
 8006c64:	9a00      	ldr	r2, [sp, #0]
 8006c66:	f108 0301 	add.w	r3, r8, #1
 8006c6a:	7013      	strb	r3, [r2, #0]
 8006c6c:	e608      	b.n	8006880 <_dtoa_r+0x698>
 8006c6e:	9b07      	ldr	r3, [sp, #28]
 8006c70:	9a07      	ldr	r2, [sp, #28]
 8006c72:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006c76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d028      	beq.n	8006cce <_dtoa_r+0xae6>
 8006c7c:	4649      	mov	r1, r9
 8006c7e:	2300      	movs	r3, #0
 8006c80:	220a      	movs	r2, #10
 8006c82:	4658      	mov	r0, fp
 8006c84:	f000 f9d6 	bl	8007034 <__multadd>
 8006c88:	42af      	cmp	r7, r5
 8006c8a:	4681      	mov	r9, r0
 8006c8c:	f04f 0300 	mov.w	r3, #0
 8006c90:	f04f 020a 	mov.w	r2, #10
 8006c94:	4639      	mov	r1, r7
 8006c96:	4658      	mov	r0, fp
 8006c98:	d107      	bne.n	8006caa <_dtoa_r+0xac2>
 8006c9a:	f000 f9cb 	bl	8007034 <__multadd>
 8006c9e:	4607      	mov	r7, r0
 8006ca0:	4605      	mov	r5, r0
 8006ca2:	9b07      	ldr	r3, [sp, #28]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	9307      	str	r3, [sp, #28]
 8006ca8:	e774      	b.n	8006b94 <_dtoa_r+0x9ac>
 8006caa:	f000 f9c3 	bl	8007034 <__multadd>
 8006cae:	4629      	mov	r1, r5
 8006cb0:	4607      	mov	r7, r0
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	220a      	movs	r2, #10
 8006cb6:	4658      	mov	r0, fp
 8006cb8:	f000 f9bc 	bl	8007034 <__multadd>
 8006cbc:	4605      	mov	r5, r0
 8006cbe:	e7f0      	b.n	8006ca2 <_dtoa_r+0xaba>
 8006cc0:	9b00      	ldr	r3, [sp, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	bfcc      	ite	gt
 8006cc6:	461e      	movgt	r6, r3
 8006cc8:	2601      	movle	r6, #1
 8006cca:	4456      	add	r6, sl
 8006ccc:	2700      	movs	r7, #0
 8006cce:	4649      	mov	r1, r9
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	4658      	mov	r0, fp
 8006cd4:	f000 fba4 	bl	8007420 <__lshift>
 8006cd8:	4621      	mov	r1, r4
 8006cda:	4681      	mov	r9, r0
 8006cdc:	f000 fc0c 	bl	80074f8 <__mcmp>
 8006ce0:	2800      	cmp	r0, #0
 8006ce2:	dcb0      	bgt.n	8006c46 <_dtoa_r+0xa5e>
 8006ce4:	d102      	bne.n	8006cec <_dtoa_r+0xb04>
 8006ce6:	f018 0f01 	tst.w	r8, #1
 8006cea:	d1ac      	bne.n	8006c46 <_dtoa_r+0xa5e>
 8006cec:	4633      	mov	r3, r6
 8006cee:	461e      	mov	r6, r3
 8006cf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cf4:	2a30      	cmp	r2, #48	@ 0x30
 8006cf6:	d0fa      	beq.n	8006cee <_dtoa_r+0xb06>
 8006cf8:	e5c2      	b.n	8006880 <_dtoa_r+0x698>
 8006cfa:	459a      	cmp	sl, r3
 8006cfc:	d1a4      	bne.n	8006c48 <_dtoa_r+0xa60>
 8006cfe:	9b04      	ldr	r3, [sp, #16]
 8006d00:	3301      	adds	r3, #1
 8006d02:	9304      	str	r3, [sp, #16]
 8006d04:	2331      	movs	r3, #49	@ 0x31
 8006d06:	f88a 3000 	strb.w	r3, [sl]
 8006d0a:	e5b9      	b.n	8006880 <_dtoa_r+0x698>
 8006d0c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006d0e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006d6c <_dtoa_r+0xb84>
 8006d12:	b11b      	cbz	r3, 8006d1c <_dtoa_r+0xb34>
 8006d14:	f10a 0308 	add.w	r3, sl, #8
 8006d18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006d1a:	6013      	str	r3, [r2, #0]
 8006d1c:	4650      	mov	r0, sl
 8006d1e:	b019      	add	sp, #100	@ 0x64
 8006d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	f77f ae37 	ble.w	800699a <_dtoa_r+0x7b2>
 8006d2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d30:	2001      	movs	r0, #1
 8006d32:	e655      	b.n	80069e0 <_dtoa_r+0x7f8>
 8006d34:	9b00      	ldr	r3, [sp, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f77f aed6 	ble.w	8006ae8 <_dtoa_r+0x900>
 8006d3c:	4656      	mov	r6, sl
 8006d3e:	4621      	mov	r1, r4
 8006d40:	4648      	mov	r0, r9
 8006d42:	f7ff f9c9 	bl	80060d8 <quorem>
 8006d46:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006d4a:	f806 8b01 	strb.w	r8, [r6], #1
 8006d4e:	9b00      	ldr	r3, [sp, #0]
 8006d50:	eba6 020a 	sub.w	r2, r6, sl
 8006d54:	4293      	cmp	r3, r2
 8006d56:	ddb3      	ble.n	8006cc0 <_dtoa_r+0xad8>
 8006d58:	4649      	mov	r1, r9
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	220a      	movs	r2, #10
 8006d5e:	4658      	mov	r0, fp
 8006d60:	f000 f968 	bl	8007034 <__multadd>
 8006d64:	4681      	mov	r9, r0
 8006d66:	e7ea      	b.n	8006d3e <_dtoa_r+0xb56>
 8006d68:	08009b0d 	.word	0x08009b0d
 8006d6c:	08009a91 	.word	0x08009a91

08006d70 <_free_r>:
 8006d70:	b538      	push	{r3, r4, r5, lr}
 8006d72:	4605      	mov	r5, r0
 8006d74:	2900      	cmp	r1, #0
 8006d76:	d041      	beq.n	8006dfc <_free_r+0x8c>
 8006d78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d7c:	1f0c      	subs	r4, r1, #4
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	bfb8      	it	lt
 8006d82:	18e4      	addlt	r4, r4, r3
 8006d84:	f000 f8e8 	bl	8006f58 <__malloc_lock>
 8006d88:	4a1d      	ldr	r2, [pc, #116]	@ (8006e00 <_free_r+0x90>)
 8006d8a:	6813      	ldr	r3, [r2, #0]
 8006d8c:	b933      	cbnz	r3, 8006d9c <_free_r+0x2c>
 8006d8e:	6063      	str	r3, [r4, #4]
 8006d90:	6014      	str	r4, [r2, #0]
 8006d92:	4628      	mov	r0, r5
 8006d94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d98:	f000 b8e4 	b.w	8006f64 <__malloc_unlock>
 8006d9c:	42a3      	cmp	r3, r4
 8006d9e:	d908      	bls.n	8006db2 <_free_r+0x42>
 8006da0:	6820      	ldr	r0, [r4, #0]
 8006da2:	1821      	adds	r1, r4, r0
 8006da4:	428b      	cmp	r3, r1
 8006da6:	bf01      	itttt	eq
 8006da8:	6819      	ldreq	r1, [r3, #0]
 8006daa:	685b      	ldreq	r3, [r3, #4]
 8006dac:	1809      	addeq	r1, r1, r0
 8006dae:	6021      	streq	r1, [r4, #0]
 8006db0:	e7ed      	b.n	8006d8e <_free_r+0x1e>
 8006db2:	461a      	mov	r2, r3
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	b10b      	cbz	r3, 8006dbc <_free_r+0x4c>
 8006db8:	42a3      	cmp	r3, r4
 8006dba:	d9fa      	bls.n	8006db2 <_free_r+0x42>
 8006dbc:	6811      	ldr	r1, [r2, #0]
 8006dbe:	1850      	adds	r0, r2, r1
 8006dc0:	42a0      	cmp	r0, r4
 8006dc2:	d10b      	bne.n	8006ddc <_free_r+0x6c>
 8006dc4:	6820      	ldr	r0, [r4, #0]
 8006dc6:	4401      	add	r1, r0
 8006dc8:	1850      	adds	r0, r2, r1
 8006dca:	4283      	cmp	r3, r0
 8006dcc:	6011      	str	r1, [r2, #0]
 8006dce:	d1e0      	bne.n	8006d92 <_free_r+0x22>
 8006dd0:	6818      	ldr	r0, [r3, #0]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	6053      	str	r3, [r2, #4]
 8006dd6:	4408      	add	r0, r1
 8006dd8:	6010      	str	r0, [r2, #0]
 8006dda:	e7da      	b.n	8006d92 <_free_r+0x22>
 8006ddc:	d902      	bls.n	8006de4 <_free_r+0x74>
 8006dde:	230c      	movs	r3, #12
 8006de0:	602b      	str	r3, [r5, #0]
 8006de2:	e7d6      	b.n	8006d92 <_free_r+0x22>
 8006de4:	6820      	ldr	r0, [r4, #0]
 8006de6:	1821      	adds	r1, r4, r0
 8006de8:	428b      	cmp	r3, r1
 8006dea:	bf04      	itt	eq
 8006dec:	6819      	ldreq	r1, [r3, #0]
 8006dee:	685b      	ldreq	r3, [r3, #4]
 8006df0:	6063      	str	r3, [r4, #4]
 8006df2:	bf04      	itt	eq
 8006df4:	1809      	addeq	r1, r1, r0
 8006df6:	6021      	streq	r1, [r4, #0]
 8006df8:	6054      	str	r4, [r2, #4]
 8006dfa:	e7ca      	b.n	8006d92 <_free_r+0x22>
 8006dfc:	bd38      	pop	{r3, r4, r5, pc}
 8006dfe:	bf00      	nop
 8006e00:	20000448 	.word	0x20000448

08006e04 <malloc>:
 8006e04:	4b02      	ldr	r3, [pc, #8]	@ (8006e10 <malloc+0xc>)
 8006e06:	4601      	mov	r1, r0
 8006e08:	6818      	ldr	r0, [r3, #0]
 8006e0a:	f000 b825 	b.w	8006e58 <_malloc_r>
 8006e0e:	bf00      	nop
 8006e10:	20000018 	.word	0x20000018

08006e14 <sbrk_aligned>:
 8006e14:	b570      	push	{r4, r5, r6, lr}
 8006e16:	4e0f      	ldr	r6, [pc, #60]	@ (8006e54 <sbrk_aligned+0x40>)
 8006e18:	460c      	mov	r4, r1
 8006e1a:	6831      	ldr	r1, [r6, #0]
 8006e1c:	4605      	mov	r5, r0
 8006e1e:	b911      	cbnz	r1, 8006e26 <sbrk_aligned+0x12>
 8006e20:	f001 fe0c 	bl	8008a3c <_sbrk_r>
 8006e24:	6030      	str	r0, [r6, #0]
 8006e26:	4621      	mov	r1, r4
 8006e28:	4628      	mov	r0, r5
 8006e2a:	f001 fe07 	bl	8008a3c <_sbrk_r>
 8006e2e:	1c43      	adds	r3, r0, #1
 8006e30:	d103      	bne.n	8006e3a <sbrk_aligned+0x26>
 8006e32:	f04f 34ff 	mov.w	r4, #4294967295
 8006e36:	4620      	mov	r0, r4
 8006e38:	bd70      	pop	{r4, r5, r6, pc}
 8006e3a:	1cc4      	adds	r4, r0, #3
 8006e3c:	f024 0403 	bic.w	r4, r4, #3
 8006e40:	42a0      	cmp	r0, r4
 8006e42:	d0f8      	beq.n	8006e36 <sbrk_aligned+0x22>
 8006e44:	1a21      	subs	r1, r4, r0
 8006e46:	4628      	mov	r0, r5
 8006e48:	f001 fdf8 	bl	8008a3c <_sbrk_r>
 8006e4c:	3001      	adds	r0, #1
 8006e4e:	d1f2      	bne.n	8006e36 <sbrk_aligned+0x22>
 8006e50:	e7ef      	b.n	8006e32 <sbrk_aligned+0x1e>
 8006e52:	bf00      	nop
 8006e54:	20000444 	.word	0x20000444

08006e58 <_malloc_r>:
 8006e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e5c:	1ccd      	adds	r5, r1, #3
 8006e5e:	f025 0503 	bic.w	r5, r5, #3
 8006e62:	3508      	adds	r5, #8
 8006e64:	2d0c      	cmp	r5, #12
 8006e66:	bf38      	it	cc
 8006e68:	250c      	movcc	r5, #12
 8006e6a:	2d00      	cmp	r5, #0
 8006e6c:	4606      	mov	r6, r0
 8006e6e:	db01      	blt.n	8006e74 <_malloc_r+0x1c>
 8006e70:	42a9      	cmp	r1, r5
 8006e72:	d904      	bls.n	8006e7e <_malloc_r+0x26>
 8006e74:	230c      	movs	r3, #12
 8006e76:	6033      	str	r3, [r6, #0]
 8006e78:	2000      	movs	r0, #0
 8006e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f54 <_malloc_r+0xfc>
 8006e82:	f000 f869 	bl	8006f58 <__malloc_lock>
 8006e86:	f8d8 3000 	ldr.w	r3, [r8]
 8006e8a:	461c      	mov	r4, r3
 8006e8c:	bb44      	cbnz	r4, 8006ee0 <_malloc_r+0x88>
 8006e8e:	4629      	mov	r1, r5
 8006e90:	4630      	mov	r0, r6
 8006e92:	f7ff ffbf 	bl	8006e14 <sbrk_aligned>
 8006e96:	1c43      	adds	r3, r0, #1
 8006e98:	4604      	mov	r4, r0
 8006e9a:	d158      	bne.n	8006f4e <_malloc_r+0xf6>
 8006e9c:	f8d8 4000 	ldr.w	r4, [r8]
 8006ea0:	4627      	mov	r7, r4
 8006ea2:	2f00      	cmp	r7, #0
 8006ea4:	d143      	bne.n	8006f2e <_malloc_r+0xd6>
 8006ea6:	2c00      	cmp	r4, #0
 8006ea8:	d04b      	beq.n	8006f42 <_malloc_r+0xea>
 8006eaa:	6823      	ldr	r3, [r4, #0]
 8006eac:	4639      	mov	r1, r7
 8006eae:	4630      	mov	r0, r6
 8006eb0:	eb04 0903 	add.w	r9, r4, r3
 8006eb4:	f001 fdc2 	bl	8008a3c <_sbrk_r>
 8006eb8:	4581      	cmp	r9, r0
 8006eba:	d142      	bne.n	8006f42 <_malloc_r+0xea>
 8006ebc:	6821      	ldr	r1, [r4, #0]
 8006ebe:	1a6d      	subs	r5, r5, r1
 8006ec0:	4629      	mov	r1, r5
 8006ec2:	4630      	mov	r0, r6
 8006ec4:	f7ff ffa6 	bl	8006e14 <sbrk_aligned>
 8006ec8:	3001      	adds	r0, #1
 8006eca:	d03a      	beq.n	8006f42 <_malloc_r+0xea>
 8006ecc:	6823      	ldr	r3, [r4, #0]
 8006ece:	442b      	add	r3, r5
 8006ed0:	6023      	str	r3, [r4, #0]
 8006ed2:	f8d8 3000 	ldr.w	r3, [r8]
 8006ed6:	685a      	ldr	r2, [r3, #4]
 8006ed8:	bb62      	cbnz	r2, 8006f34 <_malloc_r+0xdc>
 8006eda:	f8c8 7000 	str.w	r7, [r8]
 8006ede:	e00f      	b.n	8006f00 <_malloc_r+0xa8>
 8006ee0:	6822      	ldr	r2, [r4, #0]
 8006ee2:	1b52      	subs	r2, r2, r5
 8006ee4:	d420      	bmi.n	8006f28 <_malloc_r+0xd0>
 8006ee6:	2a0b      	cmp	r2, #11
 8006ee8:	d917      	bls.n	8006f1a <_malloc_r+0xc2>
 8006eea:	1961      	adds	r1, r4, r5
 8006eec:	42a3      	cmp	r3, r4
 8006eee:	6025      	str	r5, [r4, #0]
 8006ef0:	bf18      	it	ne
 8006ef2:	6059      	strne	r1, [r3, #4]
 8006ef4:	6863      	ldr	r3, [r4, #4]
 8006ef6:	bf08      	it	eq
 8006ef8:	f8c8 1000 	streq.w	r1, [r8]
 8006efc:	5162      	str	r2, [r4, r5]
 8006efe:	604b      	str	r3, [r1, #4]
 8006f00:	4630      	mov	r0, r6
 8006f02:	f000 f82f 	bl	8006f64 <__malloc_unlock>
 8006f06:	f104 000b 	add.w	r0, r4, #11
 8006f0a:	1d23      	adds	r3, r4, #4
 8006f0c:	f020 0007 	bic.w	r0, r0, #7
 8006f10:	1ac2      	subs	r2, r0, r3
 8006f12:	bf1c      	itt	ne
 8006f14:	1a1b      	subne	r3, r3, r0
 8006f16:	50a3      	strne	r3, [r4, r2]
 8006f18:	e7af      	b.n	8006e7a <_malloc_r+0x22>
 8006f1a:	6862      	ldr	r2, [r4, #4]
 8006f1c:	42a3      	cmp	r3, r4
 8006f1e:	bf0c      	ite	eq
 8006f20:	f8c8 2000 	streq.w	r2, [r8]
 8006f24:	605a      	strne	r2, [r3, #4]
 8006f26:	e7eb      	b.n	8006f00 <_malloc_r+0xa8>
 8006f28:	4623      	mov	r3, r4
 8006f2a:	6864      	ldr	r4, [r4, #4]
 8006f2c:	e7ae      	b.n	8006e8c <_malloc_r+0x34>
 8006f2e:	463c      	mov	r4, r7
 8006f30:	687f      	ldr	r7, [r7, #4]
 8006f32:	e7b6      	b.n	8006ea2 <_malloc_r+0x4a>
 8006f34:	461a      	mov	r2, r3
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	42a3      	cmp	r3, r4
 8006f3a:	d1fb      	bne.n	8006f34 <_malloc_r+0xdc>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	6053      	str	r3, [r2, #4]
 8006f40:	e7de      	b.n	8006f00 <_malloc_r+0xa8>
 8006f42:	230c      	movs	r3, #12
 8006f44:	6033      	str	r3, [r6, #0]
 8006f46:	4630      	mov	r0, r6
 8006f48:	f000 f80c 	bl	8006f64 <__malloc_unlock>
 8006f4c:	e794      	b.n	8006e78 <_malloc_r+0x20>
 8006f4e:	6005      	str	r5, [r0, #0]
 8006f50:	e7d6      	b.n	8006f00 <_malloc_r+0xa8>
 8006f52:	bf00      	nop
 8006f54:	20000448 	.word	0x20000448

08006f58 <__malloc_lock>:
 8006f58:	4801      	ldr	r0, [pc, #4]	@ (8006f60 <__malloc_lock+0x8>)
 8006f5a:	f7ff b8b4 	b.w	80060c6 <__retarget_lock_acquire_recursive>
 8006f5e:	bf00      	nop
 8006f60:	20000440 	.word	0x20000440

08006f64 <__malloc_unlock>:
 8006f64:	4801      	ldr	r0, [pc, #4]	@ (8006f6c <__malloc_unlock+0x8>)
 8006f66:	f7ff b8af 	b.w	80060c8 <__retarget_lock_release_recursive>
 8006f6a:	bf00      	nop
 8006f6c:	20000440 	.word	0x20000440

08006f70 <_Balloc>:
 8006f70:	b570      	push	{r4, r5, r6, lr}
 8006f72:	69c6      	ldr	r6, [r0, #28]
 8006f74:	4604      	mov	r4, r0
 8006f76:	460d      	mov	r5, r1
 8006f78:	b976      	cbnz	r6, 8006f98 <_Balloc+0x28>
 8006f7a:	2010      	movs	r0, #16
 8006f7c:	f7ff ff42 	bl	8006e04 <malloc>
 8006f80:	4602      	mov	r2, r0
 8006f82:	61e0      	str	r0, [r4, #28]
 8006f84:	b920      	cbnz	r0, 8006f90 <_Balloc+0x20>
 8006f86:	4b18      	ldr	r3, [pc, #96]	@ (8006fe8 <_Balloc+0x78>)
 8006f88:	4818      	ldr	r0, [pc, #96]	@ (8006fec <_Balloc+0x7c>)
 8006f8a:	216b      	movs	r1, #107	@ 0x6b
 8006f8c:	f001 fd7c 	bl	8008a88 <__assert_func>
 8006f90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f94:	6006      	str	r6, [r0, #0]
 8006f96:	60c6      	str	r6, [r0, #12]
 8006f98:	69e6      	ldr	r6, [r4, #28]
 8006f9a:	68f3      	ldr	r3, [r6, #12]
 8006f9c:	b183      	cbz	r3, 8006fc0 <_Balloc+0x50>
 8006f9e:	69e3      	ldr	r3, [r4, #28]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006fa6:	b9b8      	cbnz	r0, 8006fd8 <_Balloc+0x68>
 8006fa8:	2101      	movs	r1, #1
 8006faa:	fa01 f605 	lsl.w	r6, r1, r5
 8006fae:	1d72      	adds	r2, r6, #5
 8006fb0:	0092      	lsls	r2, r2, #2
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	f001 fd86 	bl	8008ac4 <_calloc_r>
 8006fb8:	b160      	cbz	r0, 8006fd4 <_Balloc+0x64>
 8006fba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006fbe:	e00e      	b.n	8006fde <_Balloc+0x6e>
 8006fc0:	2221      	movs	r2, #33	@ 0x21
 8006fc2:	2104      	movs	r1, #4
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	f001 fd7d 	bl	8008ac4 <_calloc_r>
 8006fca:	69e3      	ldr	r3, [r4, #28]
 8006fcc:	60f0      	str	r0, [r6, #12]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1e4      	bne.n	8006f9e <_Balloc+0x2e>
 8006fd4:	2000      	movs	r0, #0
 8006fd6:	bd70      	pop	{r4, r5, r6, pc}
 8006fd8:	6802      	ldr	r2, [r0, #0]
 8006fda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006fde:	2300      	movs	r3, #0
 8006fe0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006fe4:	e7f7      	b.n	8006fd6 <_Balloc+0x66>
 8006fe6:	bf00      	nop
 8006fe8:	08009a9e 	.word	0x08009a9e
 8006fec:	08009b1e 	.word	0x08009b1e

08006ff0 <_Bfree>:
 8006ff0:	b570      	push	{r4, r5, r6, lr}
 8006ff2:	69c6      	ldr	r6, [r0, #28]
 8006ff4:	4605      	mov	r5, r0
 8006ff6:	460c      	mov	r4, r1
 8006ff8:	b976      	cbnz	r6, 8007018 <_Bfree+0x28>
 8006ffa:	2010      	movs	r0, #16
 8006ffc:	f7ff ff02 	bl	8006e04 <malloc>
 8007000:	4602      	mov	r2, r0
 8007002:	61e8      	str	r0, [r5, #28]
 8007004:	b920      	cbnz	r0, 8007010 <_Bfree+0x20>
 8007006:	4b09      	ldr	r3, [pc, #36]	@ (800702c <_Bfree+0x3c>)
 8007008:	4809      	ldr	r0, [pc, #36]	@ (8007030 <_Bfree+0x40>)
 800700a:	218f      	movs	r1, #143	@ 0x8f
 800700c:	f001 fd3c 	bl	8008a88 <__assert_func>
 8007010:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007014:	6006      	str	r6, [r0, #0]
 8007016:	60c6      	str	r6, [r0, #12]
 8007018:	b13c      	cbz	r4, 800702a <_Bfree+0x3a>
 800701a:	69eb      	ldr	r3, [r5, #28]
 800701c:	6862      	ldr	r2, [r4, #4]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007024:	6021      	str	r1, [r4, #0]
 8007026:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800702a:	bd70      	pop	{r4, r5, r6, pc}
 800702c:	08009a9e 	.word	0x08009a9e
 8007030:	08009b1e 	.word	0x08009b1e

08007034 <__multadd>:
 8007034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007038:	690d      	ldr	r5, [r1, #16]
 800703a:	4607      	mov	r7, r0
 800703c:	460c      	mov	r4, r1
 800703e:	461e      	mov	r6, r3
 8007040:	f101 0c14 	add.w	ip, r1, #20
 8007044:	2000      	movs	r0, #0
 8007046:	f8dc 3000 	ldr.w	r3, [ip]
 800704a:	b299      	uxth	r1, r3
 800704c:	fb02 6101 	mla	r1, r2, r1, r6
 8007050:	0c1e      	lsrs	r6, r3, #16
 8007052:	0c0b      	lsrs	r3, r1, #16
 8007054:	fb02 3306 	mla	r3, r2, r6, r3
 8007058:	b289      	uxth	r1, r1
 800705a:	3001      	adds	r0, #1
 800705c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007060:	4285      	cmp	r5, r0
 8007062:	f84c 1b04 	str.w	r1, [ip], #4
 8007066:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800706a:	dcec      	bgt.n	8007046 <__multadd+0x12>
 800706c:	b30e      	cbz	r6, 80070b2 <__multadd+0x7e>
 800706e:	68a3      	ldr	r3, [r4, #8]
 8007070:	42ab      	cmp	r3, r5
 8007072:	dc19      	bgt.n	80070a8 <__multadd+0x74>
 8007074:	6861      	ldr	r1, [r4, #4]
 8007076:	4638      	mov	r0, r7
 8007078:	3101      	adds	r1, #1
 800707a:	f7ff ff79 	bl	8006f70 <_Balloc>
 800707e:	4680      	mov	r8, r0
 8007080:	b928      	cbnz	r0, 800708e <__multadd+0x5a>
 8007082:	4602      	mov	r2, r0
 8007084:	4b0c      	ldr	r3, [pc, #48]	@ (80070b8 <__multadd+0x84>)
 8007086:	480d      	ldr	r0, [pc, #52]	@ (80070bc <__multadd+0x88>)
 8007088:	21ba      	movs	r1, #186	@ 0xba
 800708a:	f001 fcfd 	bl	8008a88 <__assert_func>
 800708e:	6922      	ldr	r2, [r4, #16]
 8007090:	3202      	adds	r2, #2
 8007092:	f104 010c 	add.w	r1, r4, #12
 8007096:	0092      	lsls	r2, r2, #2
 8007098:	300c      	adds	r0, #12
 800709a:	f001 fcdf 	bl	8008a5c <memcpy>
 800709e:	4621      	mov	r1, r4
 80070a0:	4638      	mov	r0, r7
 80070a2:	f7ff ffa5 	bl	8006ff0 <_Bfree>
 80070a6:	4644      	mov	r4, r8
 80070a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80070ac:	3501      	adds	r5, #1
 80070ae:	615e      	str	r6, [r3, #20]
 80070b0:	6125      	str	r5, [r4, #16]
 80070b2:	4620      	mov	r0, r4
 80070b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070b8:	08009b0d 	.word	0x08009b0d
 80070bc:	08009b1e 	.word	0x08009b1e

080070c0 <__s2b>:
 80070c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070c4:	460c      	mov	r4, r1
 80070c6:	4615      	mov	r5, r2
 80070c8:	461f      	mov	r7, r3
 80070ca:	2209      	movs	r2, #9
 80070cc:	3308      	adds	r3, #8
 80070ce:	4606      	mov	r6, r0
 80070d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80070d4:	2100      	movs	r1, #0
 80070d6:	2201      	movs	r2, #1
 80070d8:	429a      	cmp	r2, r3
 80070da:	db09      	blt.n	80070f0 <__s2b+0x30>
 80070dc:	4630      	mov	r0, r6
 80070de:	f7ff ff47 	bl	8006f70 <_Balloc>
 80070e2:	b940      	cbnz	r0, 80070f6 <__s2b+0x36>
 80070e4:	4602      	mov	r2, r0
 80070e6:	4b19      	ldr	r3, [pc, #100]	@ (800714c <__s2b+0x8c>)
 80070e8:	4819      	ldr	r0, [pc, #100]	@ (8007150 <__s2b+0x90>)
 80070ea:	21d3      	movs	r1, #211	@ 0xd3
 80070ec:	f001 fccc 	bl	8008a88 <__assert_func>
 80070f0:	0052      	lsls	r2, r2, #1
 80070f2:	3101      	adds	r1, #1
 80070f4:	e7f0      	b.n	80070d8 <__s2b+0x18>
 80070f6:	9b08      	ldr	r3, [sp, #32]
 80070f8:	6143      	str	r3, [r0, #20]
 80070fa:	2d09      	cmp	r5, #9
 80070fc:	f04f 0301 	mov.w	r3, #1
 8007100:	6103      	str	r3, [r0, #16]
 8007102:	dd16      	ble.n	8007132 <__s2b+0x72>
 8007104:	f104 0909 	add.w	r9, r4, #9
 8007108:	46c8      	mov	r8, r9
 800710a:	442c      	add	r4, r5
 800710c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007110:	4601      	mov	r1, r0
 8007112:	3b30      	subs	r3, #48	@ 0x30
 8007114:	220a      	movs	r2, #10
 8007116:	4630      	mov	r0, r6
 8007118:	f7ff ff8c 	bl	8007034 <__multadd>
 800711c:	45a0      	cmp	r8, r4
 800711e:	d1f5      	bne.n	800710c <__s2b+0x4c>
 8007120:	f1a5 0408 	sub.w	r4, r5, #8
 8007124:	444c      	add	r4, r9
 8007126:	1b2d      	subs	r5, r5, r4
 8007128:	1963      	adds	r3, r4, r5
 800712a:	42bb      	cmp	r3, r7
 800712c:	db04      	blt.n	8007138 <__s2b+0x78>
 800712e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007132:	340a      	adds	r4, #10
 8007134:	2509      	movs	r5, #9
 8007136:	e7f6      	b.n	8007126 <__s2b+0x66>
 8007138:	f814 3b01 	ldrb.w	r3, [r4], #1
 800713c:	4601      	mov	r1, r0
 800713e:	3b30      	subs	r3, #48	@ 0x30
 8007140:	220a      	movs	r2, #10
 8007142:	4630      	mov	r0, r6
 8007144:	f7ff ff76 	bl	8007034 <__multadd>
 8007148:	e7ee      	b.n	8007128 <__s2b+0x68>
 800714a:	bf00      	nop
 800714c:	08009b0d 	.word	0x08009b0d
 8007150:	08009b1e 	.word	0x08009b1e

08007154 <__hi0bits>:
 8007154:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007158:	4603      	mov	r3, r0
 800715a:	bf36      	itet	cc
 800715c:	0403      	lslcc	r3, r0, #16
 800715e:	2000      	movcs	r0, #0
 8007160:	2010      	movcc	r0, #16
 8007162:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007166:	bf3c      	itt	cc
 8007168:	021b      	lslcc	r3, r3, #8
 800716a:	3008      	addcc	r0, #8
 800716c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007170:	bf3c      	itt	cc
 8007172:	011b      	lslcc	r3, r3, #4
 8007174:	3004      	addcc	r0, #4
 8007176:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800717a:	bf3c      	itt	cc
 800717c:	009b      	lslcc	r3, r3, #2
 800717e:	3002      	addcc	r0, #2
 8007180:	2b00      	cmp	r3, #0
 8007182:	db05      	blt.n	8007190 <__hi0bits+0x3c>
 8007184:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007188:	f100 0001 	add.w	r0, r0, #1
 800718c:	bf08      	it	eq
 800718e:	2020      	moveq	r0, #32
 8007190:	4770      	bx	lr

08007192 <__lo0bits>:
 8007192:	6803      	ldr	r3, [r0, #0]
 8007194:	4602      	mov	r2, r0
 8007196:	f013 0007 	ands.w	r0, r3, #7
 800719a:	d00b      	beq.n	80071b4 <__lo0bits+0x22>
 800719c:	07d9      	lsls	r1, r3, #31
 800719e:	d421      	bmi.n	80071e4 <__lo0bits+0x52>
 80071a0:	0798      	lsls	r0, r3, #30
 80071a2:	bf49      	itett	mi
 80071a4:	085b      	lsrmi	r3, r3, #1
 80071a6:	089b      	lsrpl	r3, r3, #2
 80071a8:	2001      	movmi	r0, #1
 80071aa:	6013      	strmi	r3, [r2, #0]
 80071ac:	bf5c      	itt	pl
 80071ae:	6013      	strpl	r3, [r2, #0]
 80071b0:	2002      	movpl	r0, #2
 80071b2:	4770      	bx	lr
 80071b4:	b299      	uxth	r1, r3
 80071b6:	b909      	cbnz	r1, 80071bc <__lo0bits+0x2a>
 80071b8:	0c1b      	lsrs	r3, r3, #16
 80071ba:	2010      	movs	r0, #16
 80071bc:	b2d9      	uxtb	r1, r3
 80071be:	b909      	cbnz	r1, 80071c4 <__lo0bits+0x32>
 80071c0:	3008      	adds	r0, #8
 80071c2:	0a1b      	lsrs	r3, r3, #8
 80071c4:	0719      	lsls	r1, r3, #28
 80071c6:	bf04      	itt	eq
 80071c8:	091b      	lsreq	r3, r3, #4
 80071ca:	3004      	addeq	r0, #4
 80071cc:	0799      	lsls	r1, r3, #30
 80071ce:	bf04      	itt	eq
 80071d0:	089b      	lsreq	r3, r3, #2
 80071d2:	3002      	addeq	r0, #2
 80071d4:	07d9      	lsls	r1, r3, #31
 80071d6:	d403      	bmi.n	80071e0 <__lo0bits+0x4e>
 80071d8:	085b      	lsrs	r3, r3, #1
 80071da:	f100 0001 	add.w	r0, r0, #1
 80071de:	d003      	beq.n	80071e8 <__lo0bits+0x56>
 80071e0:	6013      	str	r3, [r2, #0]
 80071e2:	4770      	bx	lr
 80071e4:	2000      	movs	r0, #0
 80071e6:	4770      	bx	lr
 80071e8:	2020      	movs	r0, #32
 80071ea:	4770      	bx	lr

080071ec <__i2b>:
 80071ec:	b510      	push	{r4, lr}
 80071ee:	460c      	mov	r4, r1
 80071f0:	2101      	movs	r1, #1
 80071f2:	f7ff febd 	bl	8006f70 <_Balloc>
 80071f6:	4602      	mov	r2, r0
 80071f8:	b928      	cbnz	r0, 8007206 <__i2b+0x1a>
 80071fa:	4b05      	ldr	r3, [pc, #20]	@ (8007210 <__i2b+0x24>)
 80071fc:	4805      	ldr	r0, [pc, #20]	@ (8007214 <__i2b+0x28>)
 80071fe:	f240 1145 	movw	r1, #325	@ 0x145
 8007202:	f001 fc41 	bl	8008a88 <__assert_func>
 8007206:	2301      	movs	r3, #1
 8007208:	6144      	str	r4, [r0, #20]
 800720a:	6103      	str	r3, [r0, #16]
 800720c:	bd10      	pop	{r4, pc}
 800720e:	bf00      	nop
 8007210:	08009b0d 	.word	0x08009b0d
 8007214:	08009b1e 	.word	0x08009b1e

08007218 <__multiply>:
 8007218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800721c:	4614      	mov	r4, r2
 800721e:	690a      	ldr	r2, [r1, #16]
 8007220:	6923      	ldr	r3, [r4, #16]
 8007222:	429a      	cmp	r2, r3
 8007224:	bfa8      	it	ge
 8007226:	4623      	movge	r3, r4
 8007228:	460f      	mov	r7, r1
 800722a:	bfa4      	itt	ge
 800722c:	460c      	movge	r4, r1
 800722e:	461f      	movge	r7, r3
 8007230:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007234:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007238:	68a3      	ldr	r3, [r4, #8]
 800723a:	6861      	ldr	r1, [r4, #4]
 800723c:	eb0a 0609 	add.w	r6, sl, r9
 8007240:	42b3      	cmp	r3, r6
 8007242:	b085      	sub	sp, #20
 8007244:	bfb8      	it	lt
 8007246:	3101      	addlt	r1, #1
 8007248:	f7ff fe92 	bl	8006f70 <_Balloc>
 800724c:	b930      	cbnz	r0, 800725c <__multiply+0x44>
 800724e:	4602      	mov	r2, r0
 8007250:	4b44      	ldr	r3, [pc, #272]	@ (8007364 <__multiply+0x14c>)
 8007252:	4845      	ldr	r0, [pc, #276]	@ (8007368 <__multiply+0x150>)
 8007254:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007258:	f001 fc16 	bl	8008a88 <__assert_func>
 800725c:	f100 0514 	add.w	r5, r0, #20
 8007260:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007264:	462b      	mov	r3, r5
 8007266:	2200      	movs	r2, #0
 8007268:	4543      	cmp	r3, r8
 800726a:	d321      	bcc.n	80072b0 <__multiply+0x98>
 800726c:	f107 0114 	add.w	r1, r7, #20
 8007270:	f104 0214 	add.w	r2, r4, #20
 8007274:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007278:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800727c:	9302      	str	r3, [sp, #8]
 800727e:	1b13      	subs	r3, r2, r4
 8007280:	3b15      	subs	r3, #21
 8007282:	f023 0303 	bic.w	r3, r3, #3
 8007286:	3304      	adds	r3, #4
 8007288:	f104 0715 	add.w	r7, r4, #21
 800728c:	42ba      	cmp	r2, r7
 800728e:	bf38      	it	cc
 8007290:	2304      	movcc	r3, #4
 8007292:	9301      	str	r3, [sp, #4]
 8007294:	9b02      	ldr	r3, [sp, #8]
 8007296:	9103      	str	r1, [sp, #12]
 8007298:	428b      	cmp	r3, r1
 800729a:	d80c      	bhi.n	80072b6 <__multiply+0x9e>
 800729c:	2e00      	cmp	r6, #0
 800729e:	dd03      	ble.n	80072a8 <__multiply+0x90>
 80072a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d05b      	beq.n	8007360 <__multiply+0x148>
 80072a8:	6106      	str	r6, [r0, #16]
 80072aa:	b005      	add	sp, #20
 80072ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072b0:	f843 2b04 	str.w	r2, [r3], #4
 80072b4:	e7d8      	b.n	8007268 <__multiply+0x50>
 80072b6:	f8b1 a000 	ldrh.w	sl, [r1]
 80072ba:	f1ba 0f00 	cmp.w	sl, #0
 80072be:	d024      	beq.n	800730a <__multiply+0xf2>
 80072c0:	f104 0e14 	add.w	lr, r4, #20
 80072c4:	46a9      	mov	r9, r5
 80072c6:	f04f 0c00 	mov.w	ip, #0
 80072ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 80072ce:	f8d9 3000 	ldr.w	r3, [r9]
 80072d2:	fa1f fb87 	uxth.w	fp, r7
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	fb0a 330b 	mla	r3, sl, fp, r3
 80072dc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80072e0:	f8d9 7000 	ldr.w	r7, [r9]
 80072e4:	4463      	add	r3, ip
 80072e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80072ea:	fb0a c70b 	mla	r7, sl, fp, ip
 80072ee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80072f8:	4572      	cmp	r2, lr
 80072fa:	f849 3b04 	str.w	r3, [r9], #4
 80072fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007302:	d8e2      	bhi.n	80072ca <__multiply+0xb2>
 8007304:	9b01      	ldr	r3, [sp, #4]
 8007306:	f845 c003 	str.w	ip, [r5, r3]
 800730a:	9b03      	ldr	r3, [sp, #12]
 800730c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007310:	3104      	adds	r1, #4
 8007312:	f1b9 0f00 	cmp.w	r9, #0
 8007316:	d021      	beq.n	800735c <__multiply+0x144>
 8007318:	682b      	ldr	r3, [r5, #0]
 800731a:	f104 0c14 	add.w	ip, r4, #20
 800731e:	46ae      	mov	lr, r5
 8007320:	f04f 0a00 	mov.w	sl, #0
 8007324:	f8bc b000 	ldrh.w	fp, [ip]
 8007328:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800732c:	fb09 770b 	mla	r7, r9, fp, r7
 8007330:	4457      	add	r7, sl
 8007332:	b29b      	uxth	r3, r3
 8007334:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007338:	f84e 3b04 	str.w	r3, [lr], #4
 800733c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007340:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007344:	f8be 3000 	ldrh.w	r3, [lr]
 8007348:	fb09 330a 	mla	r3, r9, sl, r3
 800734c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007350:	4562      	cmp	r2, ip
 8007352:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007356:	d8e5      	bhi.n	8007324 <__multiply+0x10c>
 8007358:	9f01      	ldr	r7, [sp, #4]
 800735a:	51eb      	str	r3, [r5, r7]
 800735c:	3504      	adds	r5, #4
 800735e:	e799      	b.n	8007294 <__multiply+0x7c>
 8007360:	3e01      	subs	r6, #1
 8007362:	e79b      	b.n	800729c <__multiply+0x84>
 8007364:	08009b0d 	.word	0x08009b0d
 8007368:	08009b1e 	.word	0x08009b1e

0800736c <__pow5mult>:
 800736c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007370:	4615      	mov	r5, r2
 8007372:	f012 0203 	ands.w	r2, r2, #3
 8007376:	4607      	mov	r7, r0
 8007378:	460e      	mov	r6, r1
 800737a:	d007      	beq.n	800738c <__pow5mult+0x20>
 800737c:	4c25      	ldr	r4, [pc, #148]	@ (8007414 <__pow5mult+0xa8>)
 800737e:	3a01      	subs	r2, #1
 8007380:	2300      	movs	r3, #0
 8007382:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007386:	f7ff fe55 	bl	8007034 <__multadd>
 800738a:	4606      	mov	r6, r0
 800738c:	10ad      	asrs	r5, r5, #2
 800738e:	d03d      	beq.n	800740c <__pow5mult+0xa0>
 8007390:	69fc      	ldr	r4, [r7, #28]
 8007392:	b97c      	cbnz	r4, 80073b4 <__pow5mult+0x48>
 8007394:	2010      	movs	r0, #16
 8007396:	f7ff fd35 	bl	8006e04 <malloc>
 800739a:	4602      	mov	r2, r0
 800739c:	61f8      	str	r0, [r7, #28]
 800739e:	b928      	cbnz	r0, 80073ac <__pow5mult+0x40>
 80073a0:	4b1d      	ldr	r3, [pc, #116]	@ (8007418 <__pow5mult+0xac>)
 80073a2:	481e      	ldr	r0, [pc, #120]	@ (800741c <__pow5mult+0xb0>)
 80073a4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80073a8:	f001 fb6e 	bl	8008a88 <__assert_func>
 80073ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80073b0:	6004      	str	r4, [r0, #0]
 80073b2:	60c4      	str	r4, [r0, #12]
 80073b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80073b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80073bc:	b94c      	cbnz	r4, 80073d2 <__pow5mult+0x66>
 80073be:	f240 2171 	movw	r1, #625	@ 0x271
 80073c2:	4638      	mov	r0, r7
 80073c4:	f7ff ff12 	bl	80071ec <__i2b>
 80073c8:	2300      	movs	r3, #0
 80073ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80073ce:	4604      	mov	r4, r0
 80073d0:	6003      	str	r3, [r0, #0]
 80073d2:	f04f 0900 	mov.w	r9, #0
 80073d6:	07eb      	lsls	r3, r5, #31
 80073d8:	d50a      	bpl.n	80073f0 <__pow5mult+0x84>
 80073da:	4631      	mov	r1, r6
 80073dc:	4622      	mov	r2, r4
 80073de:	4638      	mov	r0, r7
 80073e0:	f7ff ff1a 	bl	8007218 <__multiply>
 80073e4:	4631      	mov	r1, r6
 80073e6:	4680      	mov	r8, r0
 80073e8:	4638      	mov	r0, r7
 80073ea:	f7ff fe01 	bl	8006ff0 <_Bfree>
 80073ee:	4646      	mov	r6, r8
 80073f0:	106d      	asrs	r5, r5, #1
 80073f2:	d00b      	beq.n	800740c <__pow5mult+0xa0>
 80073f4:	6820      	ldr	r0, [r4, #0]
 80073f6:	b938      	cbnz	r0, 8007408 <__pow5mult+0x9c>
 80073f8:	4622      	mov	r2, r4
 80073fa:	4621      	mov	r1, r4
 80073fc:	4638      	mov	r0, r7
 80073fe:	f7ff ff0b 	bl	8007218 <__multiply>
 8007402:	6020      	str	r0, [r4, #0]
 8007404:	f8c0 9000 	str.w	r9, [r0]
 8007408:	4604      	mov	r4, r0
 800740a:	e7e4      	b.n	80073d6 <__pow5mult+0x6a>
 800740c:	4630      	mov	r0, r6
 800740e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007412:	bf00      	nop
 8007414:	08009b78 	.word	0x08009b78
 8007418:	08009a9e 	.word	0x08009a9e
 800741c:	08009b1e 	.word	0x08009b1e

08007420 <__lshift>:
 8007420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007424:	460c      	mov	r4, r1
 8007426:	6849      	ldr	r1, [r1, #4]
 8007428:	6923      	ldr	r3, [r4, #16]
 800742a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800742e:	68a3      	ldr	r3, [r4, #8]
 8007430:	4607      	mov	r7, r0
 8007432:	4691      	mov	r9, r2
 8007434:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007438:	f108 0601 	add.w	r6, r8, #1
 800743c:	42b3      	cmp	r3, r6
 800743e:	db0b      	blt.n	8007458 <__lshift+0x38>
 8007440:	4638      	mov	r0, r7
 8007442:	f7ff fd95 	bl	8006f70 <_Balloc>
 8007446:	4605      	mov	r5, r0
 8007448:	b948      	cbnz	r0, 800745e <__lshift+0x3e>
 800744a:	4602      	mov	r2, r0
 800744c:	4b28      	ldr	r3, [pc, #160]	@ (80074f0 <__lshift+0xd0>)
 800744e:	4829      	ldr	r0, [pc, #164]	@ (80074f4 <__lshift+0xd4>)
 8007450:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007454:	f001 fb18 	bl	8008a88 <__assert_func>
 8007458:	3101      	adds	r1, #1
 800745a:	005b      	lsls	r3, r3, #1
 800745c:	e7ee      	b.n	800743c <__lshift+0x1c>
 800745e:	2300      	movs	r3, #0
 8007460:	f100 0114 	add.w	r1, r0, #20
 8007464:	f100 0210 	add.w	r2, r0, #16
 8007468:	4618      	mov	r0, r3
 800746a:	4553      	cmp	r3, sl
 800746c:	db33      	blt.n	80074d6 <__lshift+0xb6>
 800746e:	6920      	ldr	r0, [r4, #16]
 8007470:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007474:	f104 0314 	add.w	r3, r4, #20
 8007478:	f019 091f 	ands.w	r9, r9, #31
 800747c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007480:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007484:	d02b      	beq.n	80074de <__lshift+0xbe>
 8007486:	f1c9 0e20 	rsb	lr, r9, #32
 800748a:	468a      	mov	sl, r1
 800748c:	2200      	movs	r2, #0
 800748e:	6818      	ldr	r0, [r3, #0]
 8007490:	fa00 f009 	lsl.w	r0, r0, r9
 8007494:	4310      	orrs	r0, r2
 8007496:	f84a 0b04 	str.w	r0, [sl], #4
 800749a:	f853 2b04 	ldr.w	r2, [r3], #4
 800749e:	459c      	cmp	ip, r3
 80074a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80074a4:	d8f3      	bhi.n	800748e <__lshift+0x6e>
 80074a6:	ebac 0304 	sub.w	r3, ip, r4
 80074aa:	3b15      	subs	r3, #21
 80074ac:	f023 0303 	bic.w	r3, r3, #3
 80074b0:	3304      	adds	r3, #4
 80074b2:	f104 0015 	add.w	r0, r4, #21
 80074b6:	4584      	cmp	ip, r0
 80074b8:	bf38      	it	cc
 80074ba:	2304      	movcc	r3, #4
 80074bc:	50ca      	str	r2, [r1, r3]
 80074be:	b10a      	cbz	r2, 80074c4 <__lshift+0xa4>
 80074c0:	f108 0602 	add.w	r6, r8, #2
 80074c4:	3e01      	subs	r6, #1
 80074c6:	4638      	mov	r0, r7
 80074c8:	612e      	str	r6, [r5, #16]
 80074ca:	4621      	mov	r1, r4
 80074cc:	f7ff fd90 	bl	8006ff0 <_Bfree>
 80074d0:	4628      	mov	r0, r5
 80074d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80074da:	3301      	adds	r3, #1
 80074dc:	e7c5      	b.n	800746a <__lshift+0x4a>
 80074de:	3904      	subs	r1, #4
 80074e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80074e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80074e8:	459c      	cmp	ip, r3
 80074ea:	d8f9      	bhi.n	80074e0 <__lshift+0xc0>
 80074ec:	e7ea      	b.n	80074c4 <__lshift+0xa4>
 80074ee:	bf00      	nop
 80074f0:	08009b0d 	.word	0x08009b0d
 80074f4:	08009b1e 	.word	0x08009b1e

080074f8 <__mcmp>:
 80074f8:	690a      	ldr	r2, [r1, #16]
 80074fa:	4603      	mov	r3, r0
 80074fc:	6900      	ldr	r0, [r0, #16]
 80074fe:	1a80      	subs	r0, r0, r2
 8007500:	b530      	push	{r4, r5, lr}
 8007502:	d10e      	bne.n	8007522 <__mcmp+0x2a>
 8007504:	3314      	adds	r3, #20
 8007506:	3114      	adds	r1, #20
 8007508:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800750c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007510:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007514:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007518:	4295      	cmp	r5, r2
 800751a:	d003      	beq.n	8007524 <__mcmp+0x2c>
 800751c:	d205      	bcs.n	800752a <__mcmp+0x32>
 800751e:	f04f 30ff 	mov.w	r0, #4294967295
 8007522:	bd30      	pop	{r4, r5, pc}
 8007524:	42a3      	cmp	r3, r4
 8007526:	d3f3      	bcc.n	8007510 <__mcmp+0x18>
 8007528:	e7fb      	b.n	8007522 <__mcmp+0x2a>
 800752a:	2001      	movs	r0, #1
 800752c:	e7f9      	b.n	8007522 <__mcmp+0x2a>
	...

08007530 <__mdiff>:
 8007530:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007534:	4689      	mov	r9, r1
 8007536:	4606      	mov	r6, r0
 8007538:	4611      	mov	r1, r2
 800753a:	4648      	mov	r0, r9
 800753c:	4614      	mov	r4, r2
 800753e:	f7ff ffdb 	bl	80074f8 <__mcmp>
 8007542:	1e05      	subs	r5, r0, #0
 8007544:	d112      	bne.n	800756c <__mdiff+0x3c>
 8007546:	4629      	mov	r1, r5
 8007548:	4630      	mov	r0, r6
 800754a:	f7ff fd11 	bl	8006f70 <_Balloc>
 800754e:	4602      	mov	r2, r0
 8007550:	b928      	cbnz	r0, 800755e <__mdiff+0x2e>
 8007552:	4b3f      	ldr	r3, [pc, #252]	@ (8007650 <__mdiff+0x120>)
 8007554:	f240 2137 	movw	r1, #567	@ 0x237
 8007558:	483e      	ldr	r0, [pc, #248]	@ (8007654 <__mdiff+0x124>)
 800755a:	f001 fa95 	bl	8008a88 <__assert_func>
 800755e:	2301      	movs	r3, #1
 8007560:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007564:	4610      	mov	r0, r2
 8007566:	b003      	add	sp, #12
 8007568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800756c:	bfbc      	itt	lt
 800756e:	464b      	movlt	r3, r9
 8007570:	46a1      	movlt	r9, r4
 8007572:	4630      	mov	r0, r6
 8007574:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007578:	bfba      	itte	lt
 800757a:	461c      	movlt	r4, r3
 800757c:	2501      	movlt	r5, #1
 800757e:	2500      	movge	r5, #0
 8007580:	f7ff fcf6 	bl	8006f70 <_Balloc>
 8007584:	4602      	mov	r2, r0
 8007586:	b918      	cbnz	r0, 8007590 <__mdiff+0x60>
 8007588:	4b31      	ldr	r3, [pc, #196]	@ (8007650 <__mdiff+0x120>)
 800758a:	f240 2145 	movw	r1, #581	@ 0x245
 800758e:	e7e3      	b.n	8007558 <__mdiff+0x28>
 8007590:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007594:	6926      	ldr	r6, [r4, #16]
 8007596:	60c5      	str	r5, [r0, #12]
 8007598:	f109 0310 	add.w	r3, r9, #16
 800759c:	f109 0514 	add.w	r5, r9, #20
 80075a0:	f104 0e14 	add.w	lr, r4, #20
 80075a4:	f100 0b14 	add.w	fp, r0, #20
 80075a8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80075ac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80075b0:	9301      	str	r3, [sp, #4]
 80075b2:	46d9      	mov	r9, fp
 80075b4:	f04f 0c00 	mov.w	ip, #0
 80075b8:	9b01      	ldr	r3, [sp, #4]
 80075ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 80075be:	f853 af04 	ldr.w	sl, [r3, #4]!
 80075c2:	9301      	str	r3, [sp, #4]
 80075c4:	fa1f f38a 	uxth.w	r3, sl
 80075c8:	4619      	mov	r1, r3
 80075ca:	b283      	uxth	r3, r0
 80075cc:	1acb      	subs	r3, r1, r3
 80075ce:	0c00      	lsrs	r0, r0, #16
 80075d0:	4463      	add	r3, ip
 80075d2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80075d6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80075da:	b29b      	uxth	r3, r3
 80075dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80075e0:	4576      	cmp	r6, lr
 80075e2:	f849 3b04 	str.w	r3, [r9], #4
 80075e6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80075ea:	d8e5      	bhi.n	80075b8 <__mdiff+0x88>
 80075ec:	1b33      	subs	r3, r6, r4
 80075ee:	3b15      	subs	r3, #21
 80075f0:	f023 0303 	bic.w	r3, r3, #3
 80075f4:	3415      	adds	r4, #21
 80075f6:	3304      	adds	r3, #4
 80075f8:	42a6      	cmp	r6, r4
 80075fa:	bf38      	it	cc
 80075fc:	2304      	movcc	r3, #4
 80075fe:	441d      	add	r5, r3
 8007600:	445b      	add	r3, fp
 8007602:	461e      	mov	r6, r3
 8007604:	462c      	mov	r4, r5
 8007606:	4544      	cmp	r4, r8
 8007608:	d30e      	bcc.n	8007628 <__mdiff+0xf8>
 800760a:	f108 0103 	add.w	r1, r8, #3
 800760e:	1b49      	subs	r1, r1, r5
 8007610:	f021 0103 	bic.w	r1, r1, #3
 8007614:	3d03      	subs	r5, #3
 8007616:	45a8      	cmp	r8, r5
 8007618:	bf38      	it	cc
 800761a:	2100      	movcc	r1, #0
 800761c:	440b      	add	r3, r1
 800761e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007622:	b191      	cbz	r1, 800764a <__mdiff+0x11a>
 8007624:	6117      	str	r7, [r2, #16]
 8007626:	e79d      	b.n	8007564 <__mdiff+0x34>
 8007628:	f854 1b04 	ldr.w	r1, [r4], #4
 800762c:	46e6      	mov	lr, ip
 800762e:	0c08      	lsrs	r0, r1, #16
 8007630:	fa1c fc81 	uxtah	ip, ip, r1
 8007634:	4471      	add	r1, lr
 8007636:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800763a:	b289      	uxth	r1, r1
 800763c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007640:	f846 1b04 	str.w	r1, [r6], #4
 8007644:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007648:	e7dd      	b.n	8007606 <__mdiff+0xd6>
 800764a:	3f01      	subs	r7, #1
 800764c:	e7e7      	b.n	800761e <__mdiff+0xee>
 800764e:	bf00      	nop
 8007650:	08009b0d 	.word	0x08009b0d
 8007654:	08009b1e 	.word	0x08009b1e

08007658 <__ulp>:
 8007658:	b082      	sub	sp, #8
 800765a:	ed8d 0b00 	vstr	d0, [sp]
 800765e:	9a01      	ldr	r2, [sp, #4]
 8007660:	4b0f      	ldr	r3, [pc, #60]	@ (80076a0 <__ulp+0x48>)
 8007662:	4013      	ands	r3, r2
 8007664:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007668:	2b00      	cmp	r3, #0
 800766a:	dc08      	bgt.n	800767e <__ulp+0x26>
 800766c:	425b      	negs	r3, r3
 800766e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007672:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007676:	da04      	bge.n	8007682 <__ulp+0x2a>
 8007678:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800767c:	4113      	asrs	r3, r2
 800767e:	2200      	movs	r2, #0
 8007680:	e008      	b.n	8007694 <__ulp+0x3c>
 8007682:	f1a2 0314 	sub.w	r3, r2, #20
 8007686:	2b1e      	cmp	r3, #30
 8007688:	bfda      	itte	le
 800768a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800768e:	40da      	lsrle	r2, r3
 8007690:	2201      	movgt	r2, #1
 8007692:	2300      	movs	r3, #0
 8007694:	4619      	mov	r1, r3
 8007696:	4610      	mov	r0, r2
 8007698:	ec41 0b10 	vmov	d0, r0, r1
 800769c:	b002      	add	sp, #8
 800769e:	4770      	bx	lr
 80076a0:	7ff00000 	.word	0x7ff00000

080076a4 <__b2d>:
 80076a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076a8:	6906      	ldr	r6, [r0, #16]
 80076aa:	f100 0814 	add.w	r8, r0, #20
 80076ae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80076b2:	1f37      	subs	r7, r6, #4
 80076b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80076b8:	4610      	mov	r0, r2
 80076ba:	f7ff fd4b 	bl	8007154 <__hi0bits>
 80076be:	f1c0 0320 	rsb	r3, r0, #32
 80076c2:	280a      	cmp	r0, #10
 80076c4:	600b      	str	r3, [r1, #0]
 80076c6:	491b      	ldr	r1, [pc, #108]	@ (8007734 <__b2d+0x90>)
 80076c8:	dc15      	bgt.n	80076f6 <__b2d+0x52>
 80076ca:	f1c0 0c0b 	rsb	ip, r0, #11
 80076ce:	fa22 f30c 	lsr.w	r3, r2, ip
 80076d2:	45b8      	cmp	r8, r7
 80076d4:	ea43 0501 	orr.w	r5, r3, r1
 80076d8:	bf34      	ite	cc
 80076da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80076de:	2300      	movcs	r3, #0
 80076e0:	3015      	adds	r0, #21
 80076e2:	fa02 f000 	lsl.w	r0, r2, r0
 80076e6:	fa23 f30c 	lsr.w	r3, r3, ip
 80076ea:	4303      	orrs	r3, r0
 80076ec:	461c      	mov	r4, r3
 80076ee:	ec45 4b10 	vmov	d0, r4, r5
 80076f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076f6:	45b8      	cmp	r8, r7
 80076f8:	bf3a      	itte	cc
 80076fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80076fe:	f1a6 0708 	subcc.w	r7, r6, #8
 8007702:	2300      	movcs	r3, #0
 8007704:	380b      	subs	r0, #11
 8007706:	d012      	beq.n	800772e <__b2d+0x8a>
 8007708:	f1c0 0120 	rsb	r1, r0, #32
 800770c:	fa23 f401 	lsr.w	r4, r3, r1
 8007710:	4082      	lsls	r2, r0
 8007712:	4322      	orrs	r2, r4
 8007714:	4547      	cmp	r7, r8
 8007716:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800771a:	bf8c      	ite	hi
 800771c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007720:	2200      	movls	r2, #0
 8007722:	4083      	lsls	r3, r0
 8007724:	40ca      	lsrs	r2, r1
 8007726:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800772a:	4313      	orrs	r3, r2
 800772c:	e7de      	b.n	80076ec <__b2d+0x48>
 800772e:	ea42 0501 	orr.w	r5, r2, r1
 8007732:	e7db      	b.n	80076ec <__b2d+0x48>
 8007734:	3ff00000 	.word	0x3ff00000

08007738 <__d2b>:
 8007738:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800773c:	460f      	mov	r7, r1
 800773e:	2101      	movs	r1, #1
 8007740:	ec59 8b10 	vmov	r8, r9, d0
 8007744:	4616      	mov	r6, r2
 8007746:	f7ff fc13 	bl	8006f70 <_Balloc>
 800774a:	4604      	mov	r4, r0
 800774c:	b930      	cbnz	r0, 800775c <__d2b+0x24>
 800774e:	4602      	mov	r2, r0
 8007750:	4b23      	ldr	r3, [pc, #140]	@ (80077e0 <__d2b+0xa8>)
 8007752:	4824      	ldr	r0, [pc, #144]	@ (80077e4 <__d2b+0xac>)
 8007754:	f240 310f 	movw	r1, #783	@ 0x30f
 8007758:	f001 f996 	bl	8008a88 <__assert_func>
 800775c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007760:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007764:	b10d      	cbz	r5, 800776a <__d2b+0x32>
 8007766:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800776a:	9301      	str	r3, [sp, #4]
 800776c:	f1b8 0300 	subs.w	r3, r8, #0
 8007770:	d023      	beq.n	80077ba <__d2b+0x82>
 8007772:	4668      	mov	r0, sp
 8007774:	9300      	str	r3, [sp, #0]
 8007776:	f7ff fd0c 	bl	8007192 <__lo0bits>
 800777a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800777e:	b1d0      	cbz	r0, 80077b6 <__d2b+0x7e>
 8007780:	f1c0 0320 	rsb	r3, r0, #32
 8007784:	fa02 f303 	lsl.w	r3, r2, r3
 8007788:	430b      	orrs	r3, r1
 800778a:	40c2      	lsrs	r2, r0
 800778c:	6163      	str	r3, [r4, #20]
 800778e:	9201      	str	r2, [sp, #4]
 8007790:	9b01      	ldr	r3, [sp, #4]
 8007792:	61a3      	str	r3, [r4, #24]
 8007794:	2b00      	cmp	r3, #0
 8007796:	bf0c      	ite	eq
 8007798:	2201      	moveq	r2, #1
 800779a:	2202      	movne	r2, #2
 800779c:	6122      	str	r2, [r4, #16]
 800779e:	b1a5      	cbz	r5, 80077ca <__d2b+0x92>
 80077a0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80077a4:	4405      	add	r5, r0
 80077a6:	603d      	str	r5, [r7, #0]
 80077a8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80077ac:	6030      	str	r0, [r6, #0]
 80077ae:	4620      	mov	r0, r4
 80077b0:	b003      	add	sp, #12
 80077b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077b6:	6161      	str	r1, [r4, #20]
 80077b8:	e7ea      	b.n	8007790 <__d2b+0x58>
 80077ba:	a801      	add	r0, sp, #4
 80077bc:	f7ff fce9 	bl	8007192 <__lo0bits>
 80077c0:	9b01      	ldr	r3, [sp, #4]
 80077c2:	6163      	str	r3, [r4, #20]
 80077c4:	3020      	adds	r0, #32
 80077c6:	2201      	movs	r2, #1
 80077c8:	e7e8      	b.n	800779c <__d2b+0x64>
 80077ca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80077ce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80077d2:	6038      	str	r0, [r7, #0]
 80077d4:	6918      	ldr	r0, [r3, #16]
 80077d6:	f7ff fcbd 	bl	8007154 <__hi0bits>
 80077da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80077de:	e7e5      	b.n	80077ac <__d2b+0x74>
 80077e0:	08009b0d 	.word	0x08009b0d
 80077e4:	08009b1e 	.word	0x08009b1e

080077e8 <__ratio>:
 80077e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ec:	b085      	sub	sp, #20
 80077ee:	e9cd 1000 	strd	r1, r0, [sp]
 80077f2:	a902      	add	r1, sp, #8
 80077f4:	f7ff ff56 	bl	80076a4 <__b2d>
 80077f8:	9800      	ldr	r0, [sp, #0]
 80077fa:	a903      	add	r1, sp, #12
 80077fc:	ec55 4b10 	vmov	r4, r5, d0
 8007800:	f7ff ff50 	bl	80076a4 <__b2d>
 8007804:	9b01      	ldr	r3, [sp, #4]
 8007806:	6919      	ldr	r1, [r3, #16]
 8007808:	9b00      	ldr	r3, [sp, #0]
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	1ac9      	subs	r1, r1, r3
 800780e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007812:	1a9b      	subs	r3, r3, r2
 8007814:	ec5b ab10 	vmov	sl, fp, d0
 8007818:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800781c:	2b00      	cmp	r3, #0
 800781e:	bfce      	itee	gt
 8007820:	462a      	movgt	r2, r5
 8007822:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007826:	465a      	movle	r2, fp
 8007828:	462f      	mov	r7, r5
 800782a:	46d9      	mov	r9, fp
 800782c:	bfcc      	ite	gt
 800782e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007832:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007836:	464b      	mov	r3, r9
 8007838:	4652      	mov	r2, sl
 800783a:	4620      	mov	r0, r4
 800783c:	4639      	mov	r1, r7
 800783e:	f7f9 f805 	bl	800084c <__aeabi_ddiv>
 8007842:	ec41 0b10 	vmov	d0, r0, r1
 8007846:	b005      	add	sp, #20
 8007848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800784c <__copybits>:
 800784c:	3901      	subs	r1, #1
 800784e:	b570      	push	{r4, r5, r6, lr}
 8007850:	1149      	asrs	r1, r1, #5
 8007852:	6914      	ldr	r4, [r2, #16]
 8007854:	3101      	adds	r1, #1
 8007856:	f102 0314 	add.w	r3, r2, #20
 800785a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800785e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007862:	1f05      	subs	r5, r0, #4
 8007864:	42a3      	cmp	r3, r4
 8007866:	d30c      	bcc.n	8007882 <__copybits+0x36>
 8007868:	1aa3      	subs	r3, r4, r2
 800786a:	3b11      	subs	r3, #17
 800786c:	f023 0303 	bic.w	r3, r3, #3
 8007870:	3211      	adds	r2, #17
 8007872:	42a2      	cmp	r2, r4
 8007874:	bf88      	it	hi
 8007876:	2300      	movhi	r3, #0
 8007878:	4418      	add	r0, r3
 800787a:	2300      	movs	r3, #0
 800787c:	4288      	cmp	r0, r1
 800787e:	d305      	bcc.n	800788c <__copybits+0x40>
 8007880:	bd70      	pop	{r4, r5, r6, pc}
 8007882:	f853 6b04 	ldr.w	r6, [r3], #4
 8007886:	f845 6f04 	str.w	r6, [r5, #4]!
 800788a:	e7eb      	b.n	8007864 <__copybits+0x18>
 800788c:	f840 3b04 	str.w	r3, [r0], #4
 8007890:	e7f4      	b.n	800787c <__copybits+0x30>

08007892 <__any_on>:
 8007892:	f100 0214 	add.w	r2, r0, #20
 8007896:	6900      	ldr	r0, [r0, #16]
 8007898:	114b      	asrs	r3, r1, #5
 800789a:	4298      	cmp	r0, r3
 800789c:	b510      	push	{r4, lr}
 800789e:	db11      	blt.n	80078c4 <__any_on+0x32>
 80078a0:	dd0a      	ble.n	80078b8 <__any_on+0x26>
 80078a2:	f011 011f 	ands.w	r1, r1, #31
 80078a6:	d007      	beq.n	80078b8 <__any_on+0x26>
 80078a8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80078ac:	fa24 f001 	lsr.w	r0, r4, r1
 80078b0:	fa00 f101 	lsl.w	r1, r0, r1
 80078b4:	428c      	cmp	r4, r1
 80078b6:	d10b      	bne.n	80078d0 <__any_on+0x3e>
 80078b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80078bc:	4293      	cmp	r3, r2
 80078be:	d803      	bhi.n	80078c8 <__any_on+0x36>
 80078c0:	2000      	movs	r0, #0
 80078c2:	bd10      	pop	{r4, pc}
 80078c4:	4603      	mov	r3, r0
 80078c6:	e7f7      	b.n	80078b8 <__any_on+0x26>
 80078c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80078cc:	2900      	cmp	r1, #0
 80078ce:	d0f5      	beq.n	80078bc <__any_on+0x2a>
 80078d0:	2001      	movs	r0, #1
 80078d2:	e7f6      	b.n	80078c2 <__any_on+0x30>

080078d4 <sulp>:
 80078d4:	b570      	push	{r4, r5, r6, lr}
 80078d6:	4604      	mov	r4, r0
 80078d8:	460d      	mov	r5, r1
 80078da:	ec45 4b10 	vmov	d0, r4, r5
 80078de:	4616      	mov	r6, r2
 80078e0:	f7ff feba 	bl	8007658 <__ulp>
 80078e4:	ec51 0b10 	vmov	r0, r1, d0
 80078e8:	b17e      	cbz	r6, 800790a <sulp+0x36>
 80078ea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80078ee:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	dd09      	ble.n	800790a <sulp+0x36>
 80078f6:	051b      	lsls	r3, r3, #20
 80078f8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80078fc:	2400      	movs	r4, #0
 80078fe:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007902:	4622      	mov	r2, r4
 8007904:	462b      	mov	r3, r5
 8007906:	f7f8 fe77 	bl	80005f8 <__aeabi_dmul>
 800790a:	ec41 0b10 	vmov	d0, r0, r1
 800790e:	bd70      	pop	{r4, r5, r6, pc}

08007910 <_strtod_l>:
 8007910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007914:	b09f      	sub	sp, #124	@ 0x7c
 8007916:	460c      	mov	r4, r1
 8007918:	9217      	str	r2, [sp, #92]	@ 0x5c
 800791a:	2200      	movs	r2, #0
 800791c:	921a      	str	r2, [sp, #104]	@ 0x68
 800791e:	9005      	str	r0, [sp, #20]
 8007920:	f04f 0a00 	mov.w	sl, #0
 8007924:	f04f 0b00 	mov.w	fp, #0
 8007928:	460a      	mov	r2, r1
 800792a:	9219      	str	r2, [sp, #100]	@ 0x64
 800792c:	7811      	ldrb	r1, [r2, #0]
 800792e:	292b      	cmp	r1, #43	@ 0x2b
 8007930:	d04a      	beq.n	80079c8 <_strtod_l+0xb8>
 8007932:	d838      	bhi.n	80079a6 <_strtod_l+0x96>
 8007934:	290d      	cmp	r1, #13
 8007936:	d832      	bhi.n	800799e <_strtod_l+0x8e>
 8007938:	2908      	cmp	r1, #8
 800793a:	d832      	bhi.n	80079a2 <_strtod_l+0x92>
 800793c:	2900      	cmp	r1, #0
 800793e:	d03b      	beq.n	80079b8 <_strtod_l+0xa8>
 8007940:	2200      	movs	r2, #0
 8007942:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007944:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007946:	782a      	ldrb	r2, [r5, #0]
 8007948:	2a30      	cmp	r2, #48	@ 0x30
 800794a:	f040 80b3 	bne.w	8007ab4 <_strtod_l+0x1a4>
 800794e:	786a      	ldrb	r2, [r5, #1]
 8007950:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007954:	2a58      	cmp	r2, #88	@ 0x58
 8007956:	d16e      	bne.n	8007a36 <_strtod_l+0x126>
 8007958:	9302      	str	r3, [sp, #8]
 800795a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800795c:	9301      	str	r3, [sp, #4]
 800795e:	ab1a      	add	r3, sp, #104	@ 0x68
 8007960:	9300      	str	r3, [sp, #0]
 8007962:	4a8e      	ldr	r2, [pc, #568]	@ (8007b9c <_strtod_l+0x28c>)
 8007964:	9805      	ldr	r0, [sp, #20]
 8007966:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007968:	a919      	add	r1, sp, #100	@ 0x64
 800796a:	f001 f927 	bl	8008bbc <__gethex>
 800796e:	f010 060f 	ands.w	r6, r0, #15
 8007972:	4604      	mov	r4, r0
 8007974:	d005      	beq.n	8007982 <_strtod_l+0x72>
 8007976:	2e06      	cmp	r6, #6
 8007978:	d128      	bne.n	80079cc <_strtod_l+0xbc>
 800797a:	3501      	adds	r5, #1
 800797c:	2300      	movs	r3, #0
 800797e:	9519      	str	r5, [sp, #100]	@ 0x64
 8007980:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007982:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007984:	2b00      	cmp	r3, #0
 8007986:	f040 858e 	bne.w	80084a6 <_strtod_l+0xb96>
 800798a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800798c:	b1cb      	cbz	r3, 80079c2 <_strtod_l+0xb2>
 800798e:	4652      	mov	r2, sl
 8007990:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007994:	ec43 2b10 	vmov	d0, r2, r3
 8007998:	b01f      	add	sp, #124	@ 0x7c
 800799a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800799e:	2920      	cmp	r1, #32
 80079a0:	d1ce      	bne.n	8007940 <_strtod_l+0x30>
 80079a2:	3201      	adds	r2, #1
 80079a4:	e7c1      	b.n	800792a <_strtod_l+0x1a>
 80079a6:	292d      	cmp	r1, #45	@ 0x2d
 80079a8:	d1ca      	bne.n	8007940 <_strtod_l+0x30>
 80079aa:	2101      	movs	r1, #1
 80079ac:	910b      	str	r1, [sp, #44]	@ 0x2c
 80079ae:	1c51      	adds	r1, r2, #1
 80079b0:	9119      	str	r1, [sp, #100]	@ 0x64
 80079b2:	7852      	ldrb	r2, [r2, #1]
 80079b4:	2a00      	cmp	r2, #0
 80079b6:	d1c5      	bne.n	8007944 <_strtod_l+0x34>
 80079b8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80079ba:	9419      	str	r4, [sp, #100]	@ 0x64
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f040 8570 	bne.w	80084a2 <_strtod_l+0xb92>
 80079c2:	4652      	mov	r2, sl
 80079c4:	465b      	mov	r3, fp
 80079c6:	e7e5      	b.n	8007994 <_strtod_l+0x84>
 80079c8:	2100      	movs	r1, #0
 80079ca:	e7ef      	b.n	80079ac <_strtod_l+0x9c>
 80079cc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80079ce:	b13a      	cbz	r2, 80079e0 <_strtod_l+0xd0>
 80079d0:	2135      	movs	r1, #53	@ 0x35
 80079d2:	a81c      	add	r0, sp, #112	@ 0x70
 80079d4:	f7ff ff3a 	bl	800784c <__copybits>
 80079d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80079da:	9805      	ldr	r0, [sp, #20]
 80079dc:	f7ff fb08 	bl	8006ff0 <_Bfree>
 80079e0:	3e01      	subs	r6, #1
 80079e2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80079e4:	2e04      	cmp	r6, #4
 80079e6:	d806      	bhi.n	80079f6 <_strtod_l+0xe6>
 80079e8:	e8df f006 	tbb	[pc, r6]
 80079ec:	201d0314 	.word	0x201d0314
 80079f0:	14          	.byte	0x14
 80079f1:	00          	.byte	0x00
 80079f2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80079f6:	05e1      	lsls	r1, r4, #23
 80079f8:	bf48      	it	mi
 80079fa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80079fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007a02:	0d1b      	lsrs	r3, r3, #20
 8007a04:	051b      	lsls	r3, r3, #20
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d1bb      	bne.n	8007982 <_strtod_l+0x72>
 8007a0a:	f7fe fb31 	bl	8006070 <__errno>
 8007a0e:	2322      	movs	r3, #34	@ 0x22
 8007a10:	6003      	str	r3, [r0, #0]
 8007a12:	e7b6      	b.n	8007982 <_strtod_l+0x72>
 8007a14:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007a18:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007a1c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007a20:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007a24:	e7e7      	b.n	80079f6 <_strtod_l+0xe6>
 8007a26:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007ba4 <_strtod_l+0x294>
 8007a2a:	e7e4      	b.n	80079f6 <_strtod_l+0xe6>
 8007a2c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007a30:	f04f 3aff 	mov.w	sl, #4294967295
 8007a34:	e7df      	b.n	80079f6 <_strtod_l+0xe6>
 8007a36:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a38:	1c5a      	adds	r2, r3, #1
 8007a3a:	9219      	str	r2, [sp, #100]	@ 0x64
 8007a3c:	785b      	ldrb	r3, [r3, #1]
 8007a3e:	2b30      	cmp	r3, #48	@ 0x30
 8007a40:	d0f9      	beq.n	8007a36 <_strtod_l+0x126>
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d09d      	beq.n	8007982 <_strtod_l+0x72>
 8007a46:	2301      	movs	r3, #1
 8007a48:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a4c:	930c      	str	r3, [sp, #48]	@ 0x30
 8007a4e:	2300      	movs	r3, #0
 8007a50:	9308      	str	r3, [sp, #32]
 8007a52:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a54:	461f      	mov	r7, r3
 8007a56:	220a      	movs	r2, #10
 8007a58:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007a5a:	7805      	ldrb	r5, [r0, #0]
 8007a5c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007a60:	b2d9      	uxtb	r1, r3
 8007a62:	2909      	cmp	r1, #9
 8007a64:	d928      	bls.n	8007ab8 <_strtod_l+0x1a8>
 8007a66:	494e      	ldr	r1, [pc, #312]	@ (8007ba0 <_strtod_l+0x290>)
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f000 ffd5 	bl	8008a18 <strncmp>
 8007a6e:	2800      	cmp	r0, #0
 8007a70:	d032      	beq.n	8007ad8 <_strtod_l+0x1c8>
 8007a72:	2000      	movs	r0, #0
 8007a74:	462a      	mov	r2, r5
 8007a76:	4681      	mov	r9, r0
 8007a78:	463d      	mov	r5, r7
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2a65      	cmp	r2, #101	@ 0x65
 8007a7e:	d001      	beq.n	8007a84 <_strtod_l+0x174>
 8007a80:	2a45      	cmp	r2, #69	@ 0x45
 8007a82:	d114      	bne.n	8007aae <_strtod_l+0x19e>
 8007a84:	b91d      	cbnz	r5, 8007a8e <_strtod_l+0x17e>
 8007a86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a88:	4302      	orrs	r2, r0
 8007a8a:	d095      	beq.n	80079b8 <_strtod_l+0xa8>
 8007a8c:	2500      	movs	r5, #0
 8007a8e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007a90:	1c62      	adds	r2, r4, #1
 8007a92:	9219      	str	r2, [sp, #100]	@ 0x64
 8007a94:	7862      	ldrb	r2, [r4, #1]
 8007a96:	2a2b      	cmp	r2, #43	@ 0x2b
 8007a98:	d077      	beq.n	8007b8a <_strtod_l+0x27a>
 8007a9a:	2a2d      	cmp	r2, #45	@ 0x2d
 8007a9c:	d07b      	beq.n	8007b96 <_strtod_l+0x286>
 8007a9e:	f04f 0c00 	mov.w	ip, #0
 8007aa2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007aa6:	2909      	cmp	r1, #9
 8007aa8:	f240 8082 	bls.w	8007bb0 <_strtod_l+0x2a0>
 8007aac:	9419      	str	r4, [sp, #100]	@ 0x64
 8007aae:	f04f 0800 	mov.w	r8, #0
 8007ab2:	e0a2      	b.n	8007bfa <_strtod_l+0x2ea>
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	e7c7      	b.n	8007a48 <_strtod_l+0x138>
 8007ab8:	2f08      	cmp	r7, #8
 8007aba:	bfd5      	itete	le
 8007abc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007abe:	9908      	ldrgt	r1, [sp, #32]
 8007ac0:	fb02 3301 	mlale	r3, r2, r1, r3
 8007ac4:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007ac8:	f100 0001 	add.w	r0, r0, #1
 8007acc:	bfd4      	ite	le
 8007ace:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007ad0:	9308      	strgt	r3, [sp, #32]
 8007ad2:	3701      	adds	r7, #1
 8007ad4:	9019      	str	r0, [sp, #100]	@ 0x64
 8007ad6:	e7bf      	b.n	8007a58 <_strtod_l+0x148>
 8007ad8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ada:	1c5a      	adds	r2, r3, #1
 8007adc:	9219      	str	r2, [sp, #100]	@ 0x64
 8007ade:	785a      	ldrb	r2, [r3, #1]
 8007ae0:	b37f      	cbz	r7, 8007b42 <_strtod_l+0x232>
 8007ae2:	4681      	mov	r9, r0
 8007ae4:	463d      	mov	r5, r7
 8007ae6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007aea:	2b09      	cmp	r3, #9
 8007aec:	d912      	bls.n	8007b14 <_strtod_l+0x204>
 8007aee:	2301      	movs	r3, #1
 8007af0:	e7c4      	b.n	8007a7c <_strtod_l+0x16c>
 8007af2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007af4:	1c5a      	adds	r2, r3, #1
 8007af6:	9219      	str	r2, [sp, #100]	@ 0x64
 8007af8:	785a      	ldrb	r2, [r3, #1]
 8007afa:	3001      	adds	r0, #1
 8007afc:	2a30      	cmp	r2, #48	@ 0x30
 8007afe:	d0f8      	beq.n	8007af2 <_strtod_l+0x1e2>
 8007b00:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007b04:	2b08      	cmp	r3, #8
 8007b06:	f200 84d3 	bhi.w	80084b0 <_strtod_l+0xba0>
 8007b0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007b0c:	930c      	str	r3, [sp, #48]	@ 0x30
 8007b0e:	4681      	mov	r9, r0
 8007b10:	2000      	movs	r0, #0
 8007b12:	4605      	mov	r5, r0
 8007b14:	3a30      	subs	r2, #48	@ 0x30
 8007b16:	f100 0301 	add.w	r3, r0, #1
 8007b1a:	d02a      	beq.n	8007b72 <_strtod_l+0x262>
 8007b1c:	4499      	add	r9, r3
 8007b1e:	eb00 0c05 	add.w	ip, r0, r5
 8007b22:	462b      	mov	r3, r5
 8007b24:	210a      	movs	r1, #10
 8007b26:	4563      	cmp	r3, ip
 8007b28:	d10d      	bne.n	8007b46 <_strtod_l+0x236>
 8007b2a:	1c69      	adds	r1, r5, #1
 8007b2c:	4401      	add	r1, r0
 8007b2e:	4428      	add	r0, r5
 8007b30:	2808      	cmp	r0, #8
 8007b32:	dc16      	bgt.n	8007b62 <_strtod_l+0x252>
 8007b34:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007b36:	230a      	movs	r3, #10
 8007b38:	fb03 2300 	mla	r3, r3, r0, r2
 8007b3c:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b3e:	2300      	movs	r3, #0
 8007b40:	e018      	b.n	8007b74 <_strtod_l+0x264>
 8007b42:	4638      	mov	r0, r7
 8007b44:	e7da      	b.n	8007afc <_strtod_l+0x1ec>
 8007b46:	2b08      	cmp	r3, #8
 8007b48:	f103 0301 	add.w	r3, r3, #1
 8007b4c:	dc03      	bgt.n	8007b56 <_strtod_l+0x246>
 8007b4e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007b50:	434e      	muls	r6, r1
 8007b52:	960a      	str	r6, [sp, #40]	@ 0x28
 8007b54:	e7e7      	b.n	8007b26 <_strtod_l+0x216>
 8007b56:	2b10      	cmp	r3, #16
 8007b58:	bfde      	ittt	le
 8007b5a:	9e08      	ldrle	r6, [sp, #32]
 8007b5c:	434e      	mulle	r6, r1
 8007b5e:	9608      	strle	r6, [sp, #32]
 8007b60:	e7e1      	b.n	8007b26 <_strtod_l+0x216>
 8007b62:	280f      	cmp	r0, #15
 8007b64:	dceb      	bgt.n	8007b3e <_strtod_l+0x22e>
 8007b66:	9808      	ldr	r0, [sp, #32]
 8007b68:	230a      	movs	r3, #10
 8007b6a:	fb03 2300 	mla	r3, r3, r0, r2
 8007b6e:	9308      	str	r3, [sp, #32]
 8007b70:	e7e5      	b.n	8007b3e <_strtod_l+0x22e>
 8007b72:	4629      	mov	r1, r5
 8007b74:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007b76:	1c50      	adds	r0, r2, #1
 8007b78:	9019      	str	r0, [sp, #100]	@ 0x64
 8007b7a:	7852      	ldrb	r2, [r2, #1]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	460d      	mov	r5, r1
 8007b80:	e7b1      	b.n	8007ae6 <_strtod_l+0x1d6>
 8007b82:	f04f 0900 	mov.w	r9, #0
 8007b86:	2301      	movs	r3, #1
 8007b88:	e77d      	b.n	8007a86 <_strtod_l+0x176>
 8007b8a:	f04f 0c00 	mov.w	ip, #0
 8007b8e:	1ca2      	adds	r2, r4, #2
 8007b90:	9219      	str	r2, [sp, #100]	@ 0x64
 8007b92:	78a2      	ldrb	r2, [r4, #2]
 8007b94:	e785      	b.n	8007aa2 <_strtod_l+0x192>
 8007b96:	f04f 0c01 	mov.w	ip, #1
 8007b9a:	e7f8      	b.n	8007b8e <_strtod_l+0x27e>
 8007b9c:	08009c90 	.word	0x08009c90
 8007ba0:	08009c78 	.word	0x08009c78
 8007ba4:	7ff00000 	.word	0x7ff00000
 8007ba8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007baa:	1c51      	adds	r1, r2, #1
 8007bac:	9119      	str	r1, [sp, #100]	@ 0x64
 8007bae:	7852      	ldrb	r2, [r2, #1]
 8007bb0:	2a30      	cmp	r2, #48	@ 0x30
 8007bb2:	d0f9      	beq.n	8007ba8 <_strtod_l+0x298>
 8007bb4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007bb8:	2908      	cmp	r1, #8
 8007bba:	f63f af78 	bhi.w	8007aae <_strtod_l+0x19e>
 8007bbe:	3a30      	subs	r2, #48	@ 0x30
 8007bc0:	920e      	str	r2, [sp, #56]	@ 0x38
 8007bc2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007bc4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007bc6:	f04f 080a 	mov.w	r8, #10
 8007bca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007bcc:	1c56      	adds	r6, r2, #1
 8007bce:	9619      	str	r6, [sp, #100]	@ 0x64
 8007bd0:	7852      	ldrb	r2, [r2, #1]
 8007bd2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007bd6:	f1be 0f09 	cmp.w	lr, #9
 8007bda:	d939      	bls.n	8007c50 <_strtod_l+0x340>
 8007bdc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007bde:	1a76      	subs	r6, r6, r1
 8007be0:	2e08      	cmp	r6, #8
 8007be2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007be6:	dc03      	bgt.n	8007bf0 <_strtod_l+0x2e0>
 8007be8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007bea:	4588      	cmp	r8, r1
 8007bec:	bfa8      	it	ge
 8007bee:	4688      	movge	r8, r1
 8007bf0:	f1bc 0f00 	cmp.w	ip, #0
 8007bf4:	d001      	beq.n	8007bfa <_strtod_l+0x2ea>
 8007bf6:	f1c8 0800 	rsb	r8, r8, #0
 8007bfa:	2d00      	cmp	r5, #0
 8007bfc:	d14e      	bne.n	8007c9c <_strtod_l+0x38c>
 8007bfe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007c00:	4308      	orrs	r0, r1
 8007c02:	f47f aebe 	bne.w	8007982 <_strtod_l+0x72>
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	f47f aed6 	bne.w	80079b8 <_strtod_l+0xa8>
 8007c0c:	2a69      	cmp	r2, #105	@ 0x69
 8007c0e:	d028      	beq.n	8007c62 <_strtod_l+0x352>
 8007c10:	dc25      	bgt.n	8007c5e <_strtod_l+0x34e>
 8007c12:	2a49      	cmp	r2, #73	@ 0x49
 8007c14:	d025      	beq.n	8007c62 <_strtod_l+0x352>
 8007c16:	2a4e      	cmp	r2, #78	@ 0x4e
 8007c18:	f47f aece 	bne.w	80079b8 <_strtod_l+0xa8>
 8007c1c:	499b      	ldr	r1, [pc, #620]	@ (8007e8c <_strtod_l+0x57c>)
 8007c1e:	a819      	add	r0, sp, #100	@ 0x64
 8007c20:	f001 f9ee 	bl	8009000 <__match>
 8007c24:	2800      	cmp	r0, #0
 8007c26:	f43f aec7 	beq.w	80079b8 <_strtod_l+0xa8>
 8007c2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	2b28      	cmp	r3, #40	@ 0x28
 8007c30:	d12e      	bne.n	8007c90 <_strtod_l+0x380>
 8007c32:	4997      	ldr	r1, [pc, #604]	@ (8007e90 <_strtod_l+0x580>)
 8007c34:	aa1c      	add	r2, sp, #112	@ 0x70
 8007c36:	a819      	add	r0, sp, #100	@ 0x64
 8007c38:	f001 f9f6 	bl	8009028 <__hexnan>
 8007c3c:	2805      	cmp	r0, #5
 8007c3e:	d127      	bne.n	8007c90 <_strtod_l+0x380>
 8007c40:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007c42:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007c46:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007c4a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007c4e:	e698      	b.n	8007982 <_strtod_l+0x72>
 8007c50:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007c52:	fb08 2101 	mla	r1, r8, r1, r2
 8007c56:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007c5a:	920e      	str	r2, [sp, #56]	@ 0x38
 8007c5c:	e7b5      	b.n	8007bca <_strtod_l+0x2ba>
 8007c5e:	2a6e      	cmp	r2, #110	@ 0x6e
 8007c60:	e7da      	b.n	8007c18 <_strtod_l+0x308>
 8007c62:	498c      	ldr	r1, [pc, #560]	@ (8007e94 <_strtod_l+0x584>)
 8007c64:	a819      	add	r0, sp, #100	@ 0x64
 8007c66:	f001 f9cb 	bl	8009000 <__match>
 8007c6a:	2800      	cmp	r0, #0
 8007c6c:	f43f aea4 	beq.w	80079b8 <_strtod_l+0xa8>
 8007c70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c72:	4989      	ldr	r1, [pc, #548]	@ (8007e98 <_strtod_l+0x588>)
 8007c74:	3b01      	subs	r3, #1
 8007c76:	a819      	add	r0, sp, #100	@ 0x64
 8007c78:	9319      	str	r3, [sp, #100]	@ 0x64
 8007c7a:	f001 f9c1 	bl	8009000 <__match>
 8007c7e:	b910      	cbnz	r0, 8007c86 <_strtod_l+0x376>
 8007c80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c82:	3301      	adds	r3, #1
 8007c84:	9319      	str	r3, [sp, #100]	@ 0x64
 8007c86:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007ea8 <_strtod_l+0x598>
 8007c8a:	f04f 0a00 	mov.w	sl, #0
 8007c8e:	e678      	b.n	8007982 <_strtod_l+0x72>
 8007c90:	4882      	ldr	r0, [pc, #520]	@ (8007e9c <_strtod_l+0x58c>)
 8007c92:	f000 fef1 	bl	8008a78 <nan>
 8007c96:	ec5b ab10 	vmov	sl, fp, d0
 8007c9a:	e672      	b.n	8007982 <_strtod_l+0x72>
 8007c9c:	eba8 0309 	sub.w	r3, r8, r9
 8007ca0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007ca2:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ca4:	2f00      	cmp	r7, #0
 8007ca6:	bf08      	it	eq
 8007ca8:	462f      	moveq	r7, r5
 8007caa:	2d10      	cmp	r5, #16
 8007cac:	462c      	mov	r4, r5
 8007cae:	bfa8      	it	ge
 8007cb0:	2410      	movge	r4, #16
 8007cb2:	f7f8 fc27 	bl	8000504 <__aeabi_ui2d>
 8007cb6:	2d09      	cmp	r5, #9
 8007cb8:	4682      	mov	sl, r0
 8007cba:	468b      	mov	fp, r1
 8007cbc:	dc13      	bgt.n	8007ce6 <_strtod_l+0x3d6>
 8007cbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	f43f ae5e 	beq.w	8007982 <_strtod_l+0x72>
 8007cc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cc8:	dd78      	ble.n	8007dbc <_strtod_l+0x4ac>
 8007cca:	2b16      	cmp	r3, #22
 8007ccc:	dc5f      	bgt.n	8007d8e <_strtod_l+0x47e>
 8007cce:	4974      	ldr	r1, [pc, #464]	@ (8007ea0 <_strtod_l+0x590>)
 8007cd0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007cd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cd8:	4652      	mov	r2, sl
 8007cda:	465b      	mov	r3, fp
 8007cdc:	f7f8 fc8c 	bl	80005f8 <__aeabi_dmul>
 8007ce0:	4682      	mov	sl, r0
 8007ce2:	468b      	mov	fp, r1
 8007ce4:	e64d      	b.n	8007982 <_strtod_l+0x72>
 8007ce6:	4b6e      	ldr	r3, [pc, #440]	@ (8007ea0 <_strtod_l+0x590>)
 8007ce8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007cec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007cf0:	f7f8 fc82 	bl	80005f8 <__aeabi_dmul>
 8007cf4:	4682      	mov	sl, r0
 8007cf6:	9808      	ldr	r0, [sp, #32]
 8007cf8:	468b      	mov	fp, r1
 8007cfa:	f7f8 fc03 	bl	8000504 <__aeabi_ui2d>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	460b      	mov	r3, r1
 8007d02:	4650      	mov	r0, sl
 8007d04:	4659      	mov	r1, fp
 8007d06:	f7f8 fac1 	bl	800028c <__adddf3>
 8007d0a:	2d0f      	cmp	r5, #15
 8007d0c:	4682      	mov	sl, r0
 8007d0e:	468b      	mov	fp, r1
 8007d10:	ddd5      	ble.n	8007cbe <_strtod_l+0x3ae>
 8007d12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d14:	1b2c      	subs	r4, r5, r4
 8007d16:	441c      	add	r4, r3
 8007d18:	2c00      	cmp	r4, #0
 8007d1a:	f340 8096 	ble.w	8007e4a <_strtod_l+0x53a>
 8007d1e:	f014 030f 	ands.w	r3, r4, #15
 8007d22:	d00a      	beq.n	8007d3a <_strtod_l+0x42a>
 8007d24:	495e      	ldr	r1, [pc, #376]	@ (8007ea0 <_strtod_l+0x590>)
 8007d26:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007d2a:	4652      	mov	r2, sl
 8007d2c:	465b      	mov	r3, fp
 8007d2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d32:	f7f8 fc61 	bl	80005f8 <__aeabi_dmul>
 8007d36:	4682      	mov	sl, r0
 8007d38:	468b      	mov	fp, r1
 8007d3a:	f034 040f 	bics.w	r4, r4, #15
 8007d3e:	d073      	beq.n	8007e28 <_strtod_l+0x518>
 8007d40:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007d44:	dd48      	ble.n	8007dd8 <_strtod_l+0x4c8>
 8007d46:	2400      	movs	r4, #0
 8007d48:	46a0      	mov	r8, r4
 8007d4a:	940a      	str	r4, [sp, #40]	@ 0x28
 8007d4c:	46a1      	mov	r9, r4
 8007d4e:	9a05      	ldr	r2, [sp, #20]
 8007d50:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007ea8 <_strtod_l+0x598>
 8007d54:	2322      	movs	r3, #34	@ 0x22
 8007d56:	6013      	str	r3, [r2, #0]
 8007d58:	f04f 0a00 	mov.w	sl, #0
 8007d5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	f43f ae0f 	beq.w	8007982 <_strtod_l+0x72>
 8007d64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007d66:	9805      	ldr	r0, [sp, #20]
 8007d68:	f7ff f942 	bl	8006ff0 <_Bfree>
 8007d6c:	9805      	ldr	r0, [sp, #20]
 8007d6e:	4649      	mov	r1, r9
 8007d70:	f7ff f93e 	bl	8006ff0 <_Bfree>
 8007d74:	9805      	ldr	r0, [sp, #20]
 8007d76:	4641      	mov	r1, r8
 8007d78:	f7ff f93a 	bl	8006ff0 <_Bfree>
 8007d7c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007d7e:	9805      	ldr	r0, [sp, #20]
 8007d80:	f7ff f936 	bl	8006ff0 <_Bfree>
 8007d84:	9805      	ldr	r0, [sp, #20]
 8007d86:	4621      	mov	r1, r4
 8007d88:	f7ff f932 	bl	8006ff0 <_Bfree>
 8007d8c:	e5f9      	b.n	8007982 <_strtod_l+0x72>
 8007d8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d90:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007d94:	4293      	cmp	r3, r2
 8007d96:	dbbc      	blt.n	8007d12 <_strtod_l+0x402>
 8007d98:	4c41      	ldr	r4, [pc, #260]	@ (8007ea0 <_strtod_l+0x590>)
 8007d9a:	f1c5 050f 	rsb	r5, r5, #15
 8007d9e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007da2:	4652      	mov	r2, sl
 8007da4:	465b      	mov	r3, fp
 8007da6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007daa:	f7f8 fc25 	bl	80005f8 <__aeabi_dmul>
 8007dae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007db0:	1b5d      	subs	r5, r3, r5
 8007db2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007db6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007dba:	e78f      	b.n	8007cdc <_strtod_l+0x3cc>
 8007dbc:	3316      	adds	r3, #22
 8007dbe:	dba8      	blt.n	8007d12 <_strtod_l+0x402>
 8007dc0:	4b37      	ldr	r3, [pc, #220]	@ (8007ea0 <_strtod_l+0x590>)
 8007dc2:	eba9 0808 	sub.w	r8, r9, r8
 8007dc6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007dca:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007dce:	4650      	mov	r0, sl
 8007dd0:	4659      	mov	r1, fp
 8007dd2:	f7f8 fd3b 	bl	800084c <__aeabi_ddiv>
 8007dd6:	e783      	b.n	8007ce0 <_strtod_l+0x3d0>
 8007dd8:	4b32      	ldr	r3, [pc, #200]	@ (8007ea4 <_strtod_l+0x594>)
 8007dda:	9308      	str	r3, [sp, #32]
 8007ddc:	2300      	movs	r3, #0
 8007dde:	1124      	asrs	r4, r4, #4
 8007de0:	4650      	mov	r0, sl
 8007de2:	4659      	mov	r1, fp
 8007de4:	461e      	mov	r6, r3
 8007de6:	2c01      	cmp	r4, #1
 8007de8:	dc21      	bgt.n	8007e2e <_strtod_l+0x51e>
 8007dea:	b10b      	cbz	r3, 8007df0 <_strtod_l+0x4e0>
 8007dec:	4682      	mov	sl, r0
 8007dee:	468b      	mov	fp, r1
 8007df0:	492c      	ldr	r1, [pc, #176]	@ (8007ea4 <_strtod_l+0x594>)
 8007df2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007df6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007dfa:	4652      	mov	r2, sl
 8007dfc:	465b      	mov	r3, fp
 8007dfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e02:	f7f8 fbf9 	bl	80005f8 <__aeabi_dmul>
 8007e06:	4b28      	ldr	r3, [pc, #160]	@ (8007ea8 <_strtod_l+0x598>)
 8007e08:	460a      	mov	r2, r1
 8007e0a:	400b      	ands	r3, r1
 8007e0c:	4927      	ldr	r1, [pc, #156]	@ (8007eac <_strtod_l+0x59c>)
 8007e0e:	428b      	cmp	r3, r1
 8007e10:	4682      	mov	sl, r0
 8007e12:	d898      	bhi.n	8007d46 <_strtod_l+0x436>
 8007e14:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007e18:	428b      	cmp	r3, r1
 8007e1a:	bf86      	itte	hi
 8007e1c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007eb0 <_strtod_l+0x5a0>
 8007e20:	f04f 3aff 	movhi.w	sl, #4294967295
 8007e24:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007e28:	2300      	movs	r3, #0
 8007e2a:	9308      	str	r3, [sp, #32]
 8007e2c:	e07a      	b.n	8007f24 <_strtod_l+0x614>
 8007e2e:	07e2      	lsls	r2, r4, #31
 8007e30:	d505      	bpl.n	8007e3e <_strtod_l+0x52e>
 8007e32:	9b08      	ldr	r3, [sp, #32]
 8007e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e38:	f7f8 fbde 	bl	80005f8 <__aeabi_dmul>
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	9a08      	ldr	r2, [sp, #32]
 8007e40:	3208      	adds	r2, #8
 8007e42:	3601      	adds	r6, #1
 8007e44:	1064      	asrs	r4, r4, #1
 8007e46:	9208      	str	r2, [sp, #32]
 8007e48:	e7cd      	b.n	8007de6 <_strtod_l+0x4d6>
 8007e4a:	d0ed      	beq.n	8007e28 <_strtod_l+0x518>
 8007e4c:	4264      	negs	r4, r4
 8007e4e:	f014 020f 	ands.w	r2, r4, #15
 8007e52:	d00a      	beq.n	8007e6a <_strtod_l+0x55a>
 8007e54:	4b12      	ldr	r3, [pc, #72]	@ (8007ea0 <_strtod_l+0x590>)
 8007e56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e5a:	4650      	mov	r0, sl
 8007e5c:	4659      	mov	r1, fp
 8007e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e62:	f7f8 fcf3 	bl	800084c <__aeabi_ddiv>
 8007e66:	4682      	mov	sl, r0
 8007e68:	468b      	mov	fp, r1
 8007e6a:	1124      	asrs	r4, r4, #4
 8007e6c:	d0dc      	beq.n	8007e28 <_strtod_l+0x518>
 8007e6e:	2c1f      	cmp	r4, #31
 8007e70:	dd20      	ble.n	8007eb4 <_strtod_l+0x5a4>
 8007e72:	2400      	movs	r4, #0
 8007e74:	46a0      	mov	r8, r4
 8007e76:	940a      	str	r4, [sp, #40]	@ 0x28
 8007e78:	46a1      	mov	r9, r4
 8007e7a:	9a05      	ldr	r2, [sp, #20]
 8007e7c:	2322      	movs	r3, #34	@ 0x22
 8007e7e:	f04f 0a00 	mov.w	sl, #0
 8007e82:	f04f 0b00 	mov.w	fp, #0
 8007e86:	6013      	str	r3, [r2, #0]
 8007e88:	e768      	b.n	8007d5c <_strtod_l+0x44c>
 8007e8a:	bf00      	nop
 8007e8c:	08009a65 	.word	0x08009a65
 8007e90:	08009c7c 	.word	0x08009c7c
 8007e94:	08009a5d 	.word	0x08009a5d
 8007e98:	08009a94 	.word	0x08009a94
 8007e9c:	08009e25 	.word	0x08009e25
 8007ea0:	08009bb0 	.word	0x08009bb0
 8007ea4:	08009b88 	.word	0x08009b88
 8007ea8:	7ff00000 	.word	0x7ff00000
 8007eac:	7ca00000 	.word	0x7ca00000
 8007eb0:	7fefffff 	.word	0x7fefffff
 8007eb4:	f014 0310 	ands.w	r3, r4, #16
 8007eb8:	bf18      	it	ne
 8007eba:	236a      	movne	r3, #106	@ 0x6a
 8007ebc:	4ea9      	ldr	r6, [pc, #676]	@ (8008164 <_strtod_l+0x854>)
 8007ebe:	9308      	str	r3, [sp, #32]
 8007ec0:	4650      	mov	r0, sl
 8007ec2:	4659      	mov	r1, fp
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	07e2      	lsls	r2, r4, #31
 8007ec8:	d504      	bpl.n	8007ed4 <_strtod_l+0x5c4>
 8007eca:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007ece:	f7f8 fb93 	bl	80005f8 <__aeabi_dmul>
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	1064      	asrs	r4, r4, #1
 8007ed6:	f106 0608 	add.w	r6, r6, #8
 8007eda:	d1f4      	bne.n	8007ec6 <_strtod_l+0x5b6>
 8007edc:	b10b      	cbz	r3, 8007ee2 <_strtod_l+0x5d2>
 8007ede:	4682      	mov	sl, r0
 8007ee0:	468b      	mov	fp, r1
 8007ee2:	9b08      	ldr	r3, [sp, #32]
 8007ee4:	b1b3      	cbz	r3, 8007f14 <_strtod_l+0x604>
 8007ee6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007eea:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	4659      	mov	r1, fp
 8007ef2:	dd0f      	ble.n	8007f14 <_strtod_l+0x604>
 8007ef4:	2b1f      	cmp	r3, #31
 8007ef6:	dd55      	ble.n	8007fa4 <_strtod_l+0x694>
 8007ef8:	2b34      	cmp	r3, #52	@ 0x34
 8007efa:	bfde      	ittt	le
 8007efc:	f04f 33ff 	movle.w	r3, #4294967295
 8007f00:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007f04:	4093      	lslle	r3, r2
 8007f06:	f04f 0a00 	mov.w	sl, #0
 8007f0a:	bfcc      	ite	gt
 8007f0c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007f10:	ea03 0b01 	andle.w	fp, r3, r1
 8007f14:	2200      	movs	r2, #0
 8007f16:	2300      	movs	r3, #0
 8007f18:	4650      	mov	r0, sl
 8007f1a:	4659      	mov	r1, fp
 8007f1c:	f7f8 fdd4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f20:	2800      	cmp	r0, #0
 8007f22:	d1a6      	bne.n	8007e72 <_strtod_l+0x562>
 8007f24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f26:	9300      	str	r3, [sp, #0]
 8007f28:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007f2a:	9805      	ldr	r0, [sp, #20]
 8007f2c:	462b      	mov	r3, r5
 8007f2e:	463a      	mov	r2, r7
 8007f30:	f7ff f8c6 	bl	80070c0 <__s2b>
 8007f34:	900a      	str	r0, [sp, #40]	@ 0x28
 8007f36:	2800      	cmp	r0, #0
 8007f38:	f43f af05 	beq.w	8007d46 <_strtod_l+0x436>
 8007f3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f3e:	2a00      	cmp	r2, #0
 8007f40:	eba9 0308 	sub.w	r3, r9, r8
 8007f44:	bfa8      	it	ge
 8007f46:	2300      	movge	r3, #0
 8007f48:	9312      	str	r3, [sp, #72]	@ 0x48
 8007f4a:	2400      	movs	r4, #0
 8007f4c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007f50:	9316      	str	r3, [sp, #88]	@ 0x58
 8007f52:	46a0      	mov	r8, r4
 8007f54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f56:	9805      	ldr	r0, [sp, #20]
 8007f58:	6859      	ldr	r1, [r3, #4]
 8007f5a:	f7ff f809 	bl	8006f70 <_Balloc>
 8007f5e:	4681      	mov	r9, r0
 8007f60:	2800      	cmp	r0, #0
 8007f62:	f43f aef4 	beq.w	8007d4e <_strtod_l+0x43e>
 8007f66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f68:	691a      	ldr	r2, [r3, #16]
 8007f6a:	3202      	adds	r2, #2
 8007f6c:	f103 010c 	add.w	r1, r3, #12
 8007f70:	0092      	lsls	r2, r2, #2
 8007f72:	300c      	adds	r0, #12
 8007f74:	f000 fd72 	bl	8008a5c <memcpy>
 8007f78:	ec4b ab10 	vmov	d0, sl, fp
 8007f7c:	9805      	ldr	r0, [sp, #20]
 8007f7e:	aa1c      	add	r2, sp, #112	@ 0x70
 8007f80:	a91b      	add	r1, sp, #108	@ 0x6c
 8007f82:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007f86:	f7ff fbd7 	bl	8007738 <__d2b>
 8007f8a:	901a      	str	r0, [sp, #104]	@ 0x68
 8007f8c:	2800      	cmp	r0, #0
 8007f8e:	f43f aede 	beq.w	8007d4e <_strtod_l+0x43e>
 8007f92:	9805      	ldr	r0, [sp, #20]
 8007f94:	2101      	movs	r1, #1
 8007f96:	f7ff f929 	bl	80071ec <__i2b>
 8007f9a:	4680      	mov	r8, r0
 8007f9c:	b948      	cbnz	r0, 8007fb2 <_strtod_l+0x6a2>
 8007f9e:	f04f 0800 	mov.w	r8, #0
 8007fa2:	e6d4      	b.n	8007d4e <_strtod_l+0x43e>
 8007fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8007fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8007fac:	ea03 0a0a 	and.w	sl, r3, sl
 8007fb0:	e7b0      	b.n	8007f14 <_strtod_l+0x604>
 8007fb2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007fb4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007fb6:	2d00      	cmp	r5, #0
 8007fb8:	bfab      	itete	ge
 8007fba:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007fbc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007fbe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007fc0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007fc2:	bfac      	ite	ge
 8007fc4:	18ef      	addge	r7, r5, r3
 8007fc6:	1b5e      	sublt	r6, r3, r5
 8007fc8:	9b08      	ldr	r3, [sp, #32]
 8007fca:	1aed      	subs	r5, r5, r3
 8007fcc:	4415      	add	r5, r2
 8007fce:	4b66      	ldr	r3, [pc, #408]	@ (8008168 <_strtod_l+0x858>)
 8007fd0:	3d01      	subs	r5, #1
 8007fd2:	429d      	cmp	r5, r3
 8007fd4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007fd8:	da50      	bge.n	800807c <_strtod_l+0x76c>
 8007fda:	1b5b      	subs	r3, r3, r5
 8007fdc:	2b1f      	cmp	r3, #31
 8007fde:	eba2 0203 	sub.w	r2, r2, r3
 8007fe2:	f04f 0101 	mov.w	r1, #1
 8007fe6:	dc3d      	bgt.n	8008064 <_strtod_l+0x754>
 8007fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8007fec:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007fee:	2300      	movs	r3, #0
 8007ff0:	9310      	str	r3, [sp, #64]	@ 0x40
 8007ff2:	18bd      	adds	r5, r7, r2
 8007ff4:	9b08      	ldr	r3, [sp, #32]
 8007ff6:	42af      	cmp	r7, r5
 8007ff8:	4416      	add	r6, r2
 8007ffa:	441e      	add	r6, r3
 8007ffc:	463b      	mov	r3, r7
 8007ffe:	bfa8      	it	ge
 8008000:	462b      	movge	r3, r5
 8008002:	42b3      	cmp	r3, r6
 8008004:	bfa8      	it	ge
 8008006:	4633      	movge	r3, r6
 8008008:	2b00      	cmp	r3, #0
 800800a:	bfc2      	ittt	gt
 800800c:	1aed      	subgt	r5, r5, r3
 800800e:	1af6      	subgt	r6, r6, r3
 8008010:	1aff      	subgt	r7, r7, r3
 8008012:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008014:	2b00      	cmp	r3, #0
 8008016:	dd16      	ble.n	8008046 <_strtod_l+0x736>
 8008018:	4641      	mov	r1, r8
 800801a:	9805      	ldr	r0, [sp, #20]
 800801c:	461a      	mov	r2, r3
 800801e:	f7ff f9a5 	bl	800736c <__pow5mult>
 8008022:	4680      	mov	r8, r0
 8008024:	2800      	cmp	r0, #0
 8008026:	d0ba      	beq.n	8007f9e <_strtod_l+0x68e>
 8008028:	4601      	mov	r1, r0
 800802a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800802c:	9805      	ldr	r0, [sp, #20]
 800802e:	f7ff f8f3 	bl	8007218 <__multiply>
 8008032:	900e      	str	r0, [sp, #56]	@ 0x38
 8008034:	2800      	cmp	r0, #0
 8008036:	f43f ae8a 	beq.w	8007d4e <_strtod_l+0x43e>
 800803a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800803c:	9805      	ldr	r0, [sp, #20]
 800803e:	f7fe ffd7 	bl	8006ff0 <_Bfree>
 8008042:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008044:	931a      	str	r3, [sp, #104]	@ 0x68
 8008046:	2d00      	cmp	r5, #0
 8008048:	dc1d      	bgt.n	8008086 <_strtod_l+0x776>
 800804a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800804c:	2b00      	cmp	r3, #0
 800804e:	dd23      	ble.n	8008098 <_strtod_l+0x788>
 8008050:	4649      	mov	r1, r9
 8008052:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008054:	9805      	ldr	r0, [sp, #20]
 8008056:	f7ff f989 	bl	800736c <__pow5mult>
 800805a:	4681      	mov	r9, r0
 800805c:	b9e0      	cbnz	r0, 8008098 <_strtod_l+0x788>
 800805e:	f04f 0900 	mov.w	r9, #0
 8008062:	e674      	b.n	8007d4e <_strtod_l+0x43e>
 8008064:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008068:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800806c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008070:	35e2      	adds	r5, #226	@ 0xe2
 8008072:	fa01 f305 	lsl.w	r3, r1, r5
 8008076:	9310      	str	r3, [sp, #64]	@ 0x40
 8008078:	9113      	str	r1, [sp, #76]	@ 0x4c
 800807a:	e7ba      	b.n	8007ff2 <_strtod_l+0x6e2>
 800807c:	2300      	movs	r3, #0
 800807e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008080:	2301      	movs	r3, #1
 8008082:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008084:	e7b5      	b.n	8007ff2 <_strtod_l+0x6e2>
 8008086:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008088:	9805      	ldr	r0, [sp, #20]
 800808a:	462a      	mov	r2, r5
 800808c:	f7ff f9c8 	bl	8007420 <__lshift>
 8008090:	901a      	str	r0, [sp, #104]	@ 0x68
 8008092:	2800      	cmp	r0, #0
 8008094:	d1d9      	bne.n	800804a <_strtod_l+0x73a>
 8008096:	e65a      	b.n	8007d4e <_strtod_l+0x43e>
 8008098:	2e00      	cmp	r6, #0
 800809a:	dd07      	ble.n	80080ac <_strtod_l+0x79c>
 800809c:	4649      	mov	r1, r9
 800809e:	9805      	ldr	r0, [sp, #20]
 80080a0:	4632      	mov	r2, r6
 80080a2:	f7ff f9bd 	bl	8007420 <__lshift>
 80080a6:	4681      	mov	r9, r0
 80080a8:	2800      	cmp	r0, #0
 80080aa:	d0d8      	beq.n	800805e <_strtod_l+0x74e>
 80080ac:	2f00      	cmp	r7, #0
 80080ae:	dd08      	ble.n	80080c2 <_strtod_l+0x7b2>
 80080b0:	4641      	mov	r1, r8
 80080b2:	9805      	ldr	r0, [sp, #20]
 80080b4:	463a      	mov	r2, r7
 80080b6:	f7ff f9b3 	bl	8007420 <__lshift>
 80080ba:	4680      	mov	r8, r0
 80080bc:	2800      	cmp	r0, #0
 80080be:	f43f ae46 	beq.w	8007d4e <_strtod_l+0x43e>
 80080c2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80080c4:	9805      	ldr	r0, [sp, #20]
 80080c6:	464a      	mov	r2, r9
 80080c8:	f7ff fa32 	bl	8007530 <__mdiff>
 80080cc:	4604      	mov	r4, r0
 80080ce:	2800      	cmp	r0, #0
 80080d0:	f43f ae3d 	beq.w	8007d4e <_strtod_l+0x43e>
 80080d4:	68c3      	ldr	r3, [r0, #12]
 80080d6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80080d8:	2300      	movs	r3, #0
 80080da:	60c3      	str	r3, [r0, #12]
 80080dc:	4641      	mov	r1, r8
 80080de:	f7ff fa0b 	bl	80074f8 <__mcmp>
 80080e2:	2800      	cmp	r0, #0
 80080e4:	da46      	bge.n	8008174 <_strtod_l+0x864>
 80080e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080e8:	ea53 030a 	orrs.w	r3, r3, sl
 80080ec:	d16c      	bne.n	80081c8 <_strtod_l+0x8b8>
 80080ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d168      	bne.n	80081c8 <_strtod_l+0x8b8>
 80080f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80080fa:	0d1b      	lsrs	r3, r3, #20
 80080fc:	051b      	lsls	r3, r3, #20
 80080fe:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008102:	d961      	bls.n	80081c8 <_strtod_l+0x8b8>
 8008104:	6963      	ldr	r3, [r4, #20]
 8008106:	b913      	cbnz	r3, 800810e <_strtod_l+0x7fe>
 8008108:	6923      	ldr	r3, [r4, #16]
 800810a:	2b01      	cmp	r3, #1
 800810c:	dd5c      	ble.n	80081c8 <_strtod_l+0x8b8>
 800810e:	4621      	mov	r1, r4
 8008110:	2201      	movs	r2, #1
 8008112:	9805      	ldr	r0, [sp, #20]
 8008114:	f7ff f984 	bl	8007420 <__lshift>
 8008118:	4641      	mov	r1, r8
 800811a:	4604      	mov	r4, r0
 800811c:	f7ff f9ec 	bl	80074f8 <__mcmp>
 8008120:	2800      	cmp	r0, #0
 8008122:	dd51      	ble.n	80081c8 <_strtod_l+0x8b8>
 8008124:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008128:	9a08      	ldr	r2, [sp, #32]
 800812a:	0d1b      	lsrs	r3, r3, #20
 800812c:	051b      	lsls	r3, r3, #20
 800812e:	2a00      	cmp	r2, #0
 8008130:	d06b      	beq.n	800820a <_strtod_l+0x8fa>
 8008132:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008136:	d868      	bhi.n	800820a <_strtod_l+0x8fa>
 8008138:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800813c:	f67f ae9d 	bls.w	8007e7a <_strtod_l+0x56a>
 8008140:	4b0a      	ldr	r3, [pc, #40]	@ (800816c <_strtod_l+0x85c>)
 8008142:	4650      	mov	r0, sl
 8008144:	4659      	mov	r1, fp
 8008146:	2200      	movs	r2, #0
 8008148:	f7f8 fa56 	bl	80005f8 <__aeabi_dmul>
 800814c:	4b08      	ldr	r3, [pc, #32]	@ (8008170 <_strtod_l+0x860>)
 800814e:	400b      	ands	r3, r1
 8008150:	4682      	mov	sl, r0
 8008152:	468b      	mov	fp, r1
 8008154:	2b00      	cmp	r3, #0
 8008156:	f47f ae05 	bne.w	8007d64 <_strtod_l+0x454>
 800815a:	9a05      	ldr	r2, [sp, #20]
 800815c:	2322      	movs	r3, #34	@ 0x22
 800815e:	6013      	str	r3, [r2, #0]
 8008160:	e600      	b.n	8007d64 <_strtod_l+0x454>
 8008162:	bf00      	nop
 8008164:	08009ca8 	.word	0x08009ca8
 8008168:	fffffc02 	.word	0xfffffc02
 800816c:	39500000 	.word	0x39500000
 8008170:	7ff00000 	.word	0x7ff00000
 8008174:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008178:	d165      	bne.n	8008246 <_strtod_l+0x936>
 800817a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800817c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008180:	b35a      	cbz	r2, 80081da <_strtod_l+0x8ca>
 8008182:	4a9f      	ldr	r2, [pc, #636]	@ (8008400 <_strtod_l+0xaf0>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d12b      	bne.n	80081e0 <_strtod_l+0x8d0>
 8008188:	9b08      	ldr	r3, [sp, #32]
 800818a:	4651      	mov	r1, sl
 800818c:	b303      	cbz	r3, 80081d0 <_strtod_l+0x8c0>
 800818e:	4b9d      	ldr	r3, [pc, #628]	@ (8008404 <_strtod_l+0xaf4>)
 8008190:	465a      	mov	r2, fp
 8008192:	4013      	ands	r3, r2
 8008194:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008198:	f04f 32ff 	mov.w	r2, #4294967295
 800819c:	d81b      	bhi.n	80081d6 <_strtod_l+0x8c6>
 800819e:	0d1b      	lsrs	r3, r3, #20
 80081a0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80081a4:	fa02 f303 	lsl.w	r3, r2, r3
 80081a8:	4299      	cmp	r1, r3
 80081aa:	d119      	bne.n	80081e0 <_strtod_l+0x8d0>
 80081ac:	4b96      	ldr	r3, [pc, #600]	@ (8008408 <_strtod_l+0xaf8>)
 80081ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d102      	bne.n	80081ba <_strtod_l+0x8aa>
 80081b4:	3101      	adds	r1, #1
 80081b6:	f43f adca 	beq.w	8007d4e <_strtod_l+0x43e>
 80081ba:	4b92      	ldr	r3, [pc, #584]	@ (8008404 <_strtod_l+0xaf4>)
 80081bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80081be:	401a      	ands	r2, r3
 80081c0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80081c4:	f04f 0a00 	mov.w	sl, #0
 80081c8:	9b08      	ldr	r3, [sp, #32]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d1b8      	bne.n	8008140 <_strtod_l+0x830>
 80081ce:	e5c9      	b.n	8007d64 <_strtod_l+0x454>
 80081d0:	f04f 33ff 	mov.w	r3, #4294967295
 80081d4:	e7e8      	b.n	80081a8 <_strtod_l+0x898>
 80081d6:	4613      	mov	r3, r2
 80081d8:	e7e6      	b.n	80081a8 <_strtod_l+0x898>
 80081da:	ea53 030a 	orrs.w	r3, r3, sl
 80081de:	d0a1      	beq.n	8008124 <_strtod_l+0x814>
 80081e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80081e2:	b1db      	cbz	r3, 800821c <_strtod_l+0x90c>
 80081e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80081e6:	4213      	tst	r3, r2
 80081e8:	d0ee      	beq.n	80081c8 <_strtod_l+0x8b8>
 80081ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081ec:	9a08      	ldr	r2, [sp, #32]
 80081ee:	4650      	mov	r0, sl
 80081f0:	4659      	mov	r1, fp
 80081f2:	b1bb      	cbz	r3, 8008224 <_strtod_l+0x914>
 80081f4:	f7ff fb6e 	bl	80078d4 <sulp>
 80081f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80081fc:	ec53 2b10 	vmov	r2, r3, d0
 8008200:	f7f8 f844 	bl	800028c <__adddf3>
 8008204:	4682      	mov	sl, r0
 8008206:	468b      	mov	fp, r1
 8008208:	e7de      	b.n	80081c8 <_strtod_l+0x8b8>
 800820a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800820e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008212:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008216:	f04f 3aff 	mov.w	sl, #4294967295
 800821a:	e7d5      	b.n	80081c8 <_strtod_l+0x8b8>
 800821c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800821e:	ea13 0f0a 	tst.w	r3, sl
 8008222:	e7e1      	b.n	80081e8 <_strtod_l+0x8d8>
 8008224:	f7ff fb56 	bl	80078d4 <sulp>
 8008228:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800822c:	ec53 2b10 	vmov	r2, r3, d0
 8008230:	f7f8 f82a 	bl	8000288 <__aeabi_dsub>
 8008234:	2200      	movs	r2, #0
 8008236:	2300      	movs	r3, #0
 8008238:	4682      	mov	sl, r0
 800823a:	468b      	mov	fp, r1
 800823c:	f7f8 fc44 	bl	8000ac8 <__aeabi_dcmpeq>
 8008240:	2800      	cmp	r0, #0
 8008242:	d0c1      	beq.n	80081c8 <_strtod_l+0x8b8>
 8008244:	e619      	b.n	8007e7a <_strtod_l+0x56a>
 8008246:	4641      	mov	r1, r8
 8008248:	4620      	mov	r0, r4
 800824a:	f7ff facd 	bl	80077e8 <__ratio>
 800824e:	ec57 6b10 	vmov	r6, r7, d0
 8008252:	2200      	movs	r2, #0
 8008254:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008258:	4630      	mov	r0, r6
 800825a:	4639      	mov	r1, r7
 800825c:	f7f8 fc48 	bl	8000af0 <__aeabi_dcmple>
 8008260:	2800      	cmp	r0, #0
 8008262:	d06f      	beq.n	8008344 <_strtod_l+0xa34>
 8008264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008266:	2b00      	cmp	r3, #0
 8008268:	d17a      	bne.n	8008360 <_strtod_l+0xa50>
 800826a:	f1ba 0f00 	cmp.w	sl, #0
 800826e:	d158      	bne.n	8008322 <_strtod_l+0xa12>
 8008270:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008272:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008276:	2b00      	cmp	r3, #0
 8008278:	d15a      	bne.n	8008330 <_strtod_l+0xa20>
 800827a:	4b64      	ldr	r3, [pc, #400]	@ (800840c <_strtod_l+0xafc>)
 800827c:	2200      	movs	r2, #0
 800827e:	4630      	mov	r0, r6
 8008280:	4639      	mov	r1, r7
 8008282:	f7f8 fc2b 	bl	8000adc <__aeabi_dcmplt>
 8008286:	2800      	cmp	r0, #0
 8008288:	d159      	bne.n	800833e <_strtod_l+0xa2e>
 800828a:	4630      	mov	r0, r6
 800828c:	4639      	mov	r1, r7
 800828e:	4b60      	ldr	r3, [pc, #384]	@ (8008410 <_strtod_l+0xb00>)
 8008290:	2200      	movs	r2, #0
 8008292:	f7f8 f9b1 	bl	80005f8 <__aeabi_dmul>
 8008296:	4606      	mov	r6, r0
 8008298:	460f      	mov	r7, r1
 800829a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800829e:	9606      	str	r6, [sp, #24]
 80082a0:	9307      	str	r3, [sp, #28]
 80082a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80082a6:	4d57      	ldr	r5, [pc, #348]	@ (8008404 <_strtod_l+0xaf4>)
 80082a8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80082ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082ae:	401d      	ands	r5, r3
 80082b0:	4b58      	ldr	r3, [pc, #352]	@ (8008414 <_strtod_l+0xb04>)
 80082b2:	429d      	cmp	r5, r3
 80082b4:	f040 80b2 	bne.w	800841c <_strtod_l+0xb0c>
 80082b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082ba:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80082be:	ec4b ab10 	vmov	d0, sl, fp
 80082c2:	f7ff f9c9 	bl	8007658 <__ulp>
 80082c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80082ca:	ec51 0b10 	vmov	r0, r1, d0
 80082ce:	f7f8 f993 	bl	80005f8 <__aeabi_dmul>
 80082d2:	4652      	mov	r2, sl
 80082d4:	465b      	mov	r3, fp
 80082d6:	f7f7 ffd9 	bl	800028c <__adddf3>
 80082da:	460b      	mov	r3, r1
 80082dc:	4949      	ldr	r1, [pc, #292]	@ (8008404 <_strtod_l+0xaf4>)
 80082de:	4a4e      	ldr	r2, [pc, #312]	@ (8008418 <_strtod_l+0xb08>)
 80082e0:	4019      	ands	r1, r3
 80082e2:	4291      	cmp	r1, r2
 80082e4:	4682      	mov	sl, r0
 80082e6:	d942      	bls.n	800836e <_strtod_l+0xa5e>
 80082e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80082ea:	4b47      	ldr	r3, [pc, #284]	@ (8008408 <_strtod_l+0xaf8>)
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d103      	bne.n	80082f8 <_strtod_l+0x9e8>
 80082f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80082f2:	3301      	adds	r3, #1
 80082f4:	f43f ad2b 	beq.w	8007d4e <_strtod_l+0x43e>
 80082f8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008408 <_strtod_l+0xaf8>
 80082fc:	f04f 3aff 	mov.w	sl, #4294967295
 8008300:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008302:	9805      	ldr	r0, [sp, #20]
 8008304:	f7fe fe74 	bl	8006ff0 <_Bfree>
 8008308:	9805      	ldr	r0, [sp, #20]
 800830a:	4649      	mov	r1, r9
 800830c:	f7fe fe70 	bl	8006ff0 <_Bfree>
 8008310:	9805      	ldr	r0, [sp, #20]
 8008312:	4641      	mov	r1, r8
 8008314:	f7fe fe6c 	bl	8006ff0 <_Bfree>
 8008318:	9805      	ldr	r0, [sp, #20]
 800831a:	4621      	mov	r1, r4
 800831c:	f7fe fe68 	bl	8006ff0 <_Bfree>
 8008320:	e618      	b.n	8007f54 <_strtod_l+0x644>
 8008322:	f1ba 0f01 	cmp.w	sl, #1
 8008326:	d103      	bne.n	8008330 <_strtod_l+0xa20>
 8008328:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800832a:	2b00      	cmp	r3, #0
 800832c:	f43f ada5 	beq.w	8007e7a <_strtod_l+0x56a>
 8008330:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80083e0 <_strtod_l+0xad0>
 8008334:	4f35      	ldr	r7, [pc, #212]	@ (800840c <_strtod_l+0xafc>)
 8008336:	ed8d 7b06 	vstr	d7, [sp, #24]
 800833a:	2600      	movs	r6, #0
 800833c:	e7b1      	b.n	80082a2 <_strtod_l+0x992>
 800833e:	4f34      	ldr	r7, [pc, #208]	@ (8008410 <_strtod_l+0xb00>)
 8008340:	2600      	movs	r6, #0
 8008342:	e7aa      	b.n	800829a <_strtod_l+0x98a>
 8008344:	4b32      	ldr	r3, [pc, #200]	@ (8008410 <_strtod_l+0xb00>)
 8008346:	4630      	mov	r0, r6
 8008348:	4639      	mov	r1, r7
 800834a:	2200      	movs	r2, #0
 800834c:	f7f8 f954 	bl	80005f8 <__aeabi_dmul>
 8008350:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008352:	4606      	mov	r6, r0
 8008354:	460f      	mov	r7, r1
 8008356:	2b00      	cmp	r3, #0
 8008358:	d09f      	beq.n	800829a <_strtod_l+0x98a>
 800835a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800835e:	e7a0      	b.n	80082a2 <_strtod_l+0x992>
 8008360:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80083e8 <_strtod_l+0xad8>
 8008364:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008368:	ec57 6b17 	vmov	r6, r7, d7
 800836c:	e799      	b.n	80082a2 <_strtod_l+0x992>
 800836e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008372:	9b08      	ldr	r3, [sp, #32]
 8008374:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008378:	2b00      	cmp	r3, #0
 800837a:	d1c1      	bne.n	8008300 <_strtod_l+0x9f0>
 800837c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008380:	0d1b      	lsrs	r3, r3, #20
 8008382:	051b      	lsls	r3, r3, #20
 8008384:	429d      	cmp	r5, r3
 8008386:	d1bb      	bne.n	8008300 <_strtod_l+0x9f0>
 8008388:	4630      	mov	r0, r6
 800838a:	4639      	mov	r1, r7
 800838c:	f7f8 fc7c 	bl	8000c88 <__aeabi_d2lz>
 8008390:	f7f8 f904 	bl	800059c <__aeabi_l2d>
 8008394:	4602      	mov	r2, r0
 8008396:	460b      	mov	r3, r1
 8008398:	4630      	mov	r0, r6
 800839a:	4639      	mov	r1, r7
 800839c:	f7f7 ff74 	bl	8000288 <__aeabi_dsub>
 80083a0:	460b      	mov	r3, r1
 80083a2:	4602      	mov	r2, r0
 80083a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80083a8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80083ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083ae:	ea46 060a 	orr.w	r6, r6, sl
 80083b2:	431e      	orrs	r6, r3
 80083b4:	d06f      	beq.n	8008496 <_strtod_l+0xb86>
 80083b6:	a30e      	add	r3, pc, #56	@ (adr r3, 80083f0 <_strtod_l+0xae0>)
 80083b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083bc:	f7f8 fb8e 	bl	8000adc <__aeabi_dcmplt>
 80083c0:	2800      	cmp	r0, #0
 80083c2:	f47f accf 	bne.w	8007d64 <_strtod_l+0x454>
 80083c6:	a30c      	add	r3, pc, #48	@ (adr r3, 80083f8 <_strtod_l+0xae8>)
 80083c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80083d0:	f7f8 fba2 	bl	8000b18 <__aeabi_dcmpgt>
 80083d4:	2800      	cmp	r0, #0
 80083d6:	d093      	beq.n	8008300 <_strtod_l+0x9f0>
 80083d8:	e4c4      	b.n	8007d64 <_strtod_l+0x454>
 80083da:	bf00      	nop
 80083dc:	f3af 8000 	nop.w
 80083e0:	00000000 	.word	0x00000000
 80083e4:	bff00000 	.word	0xbff00000
 80083e8:	00000000 	.word	0x00000000
 80083ec:	3ff00000 	.word	0x3ff00000
 80083f0:	94a03595 	.word	0x94a03595
 80083f4:	3fdfffff 	.word	0x3fdfffff
 80083f8:	35afe535 	.word	0x35afe535
 80083fc:	3fe00000 	.word	0x3fe00000
 8008400:	000fffff 	.word	0x000fffff
 8008404:	7ff00000 	.word	0x7ff00000
 8008408:	7fefffff 	.word	0x7fefffff
 800840c:	3ff00000 	.word	0x3ff00000
 8008410:	3fe00000 	.word	0x3fe00000
 8008414:	7fe00000 	.word	0x7fe00000
 8008418:	7c9fffff 	.word	0x7c9fffff
 800841c:	9b08      	ldr	r3, [sp, #32]
 800841e:	b323      	cbz	r3, 800846a <_strtod_l+0xb5a>
 8008420:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008424:	d821      	bhi.n	800846a <_strtod_l+0xb5a>
 8008426:	a328      	add	r3, pc, #160	@ (adr r3, 80084c8 <_strtod_l+0xbb8>)
 8008428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842c:	4630      	mov	r0, r6
 800842e:	4639      	mov	r1, r7
 8008430:	f7f8 fb5e 	bl	8000af0 <__aeabi_dcmple>
 8008434:	b1a0      	cbz	r0, 8008460 <_strtod_l+0xb50>
 8008436:	4639      	mov	r1, r7
 8008438:	4630      	mov	r0, r6
 800843a:	f7f8 fbb5 	bl	8000ba8 <__aeabi_d2uiz>
 800843e:	2801      	cmp	r0, #1
 8008440:	bf38      	it	cc
 8008442:	2001      	movcc	r0, #1
 8008444:	f7f8 f85e 	bl	8000504 <__aeabi_ui2d>
 8008448:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800844a:	4606      	mov	r6, r0
 800844c:	460f      	mov	r7, r1
 800844e:	b9fb      	cbnz	r3, 8008490 <_strtod_l+0xb80>
 8008450:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008454:	9014      	str	r0, [sp, #80]	@ 0x50
 8008456:	9315      	str	r3, [sp, #84]	@ 0x54
 8008458:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800845c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008460:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008462:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008466:	1b5b      	subs	r3, r3, r5
 8008468:	9311      	str	r3, [sp, #68]	@ 0x44
 800846a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800846e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008472:	f7ff f8f1 	bl	8007658 <__ulp>
 8008476:	4650      	mov	r0, sl
 8008478:	ec53 2b10 	vmov	r2, r3, d0
 800847c:	4659      	mov	r1, fp
 800847e:	f7f8 f8bb 	bl	80005f8 <__aeabi_dmul>
 8008482:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008486:	f7f7 ff01 	bl	800028c <__adddf3>
 800848a:	4682      	mov	sl, r0
 800848c:	468b      	mov	fp, r1
 800848e:	e770      	b.n	8008372 <_strtod_l+0xa62>
 8008490:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008494:	e7e0      	b.n	8008458 <_strtod_l+0xb48>
 8008496:	a30e      	add	r3, pc, #56	@ (adr r3, 80084d0 <_strtod_l+0xbc0>)
 8008498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849c:	f7f8 fb1e 	bl	8000adc <__aeabi_dcmplt>
 80084a0:	e798      	b.n	80083d4 <_strtod_l+0xac4>
 80084a2:	2300      	movs	r3, #0
 80084a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80084a6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80084a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80084aa:	6013      	str	r3, [r2, #0]
 80084ac:	f7ff ba6d 	b.w	800798a <_strtod_l+0x7a>
 80084b0:	2a65      	cmp	r2, #101	@ 0x65
 80084b2:	f43f ab66 	beq.w	8007b82 <_strtod_l+0x272>
 80084b6:	2a45      	cmp	r2, #69	@ 0x45
 80084b8:	f43f ab63 	beq.w	8007b82 <_strtod_l+0x272>
 80084bc:	2301      	movs	r3, #1
 80084be:	f7ff bb9e 	b.w	8007bfe <_strtod_l+0x2ee>
 80084c2:	bf00      	nop
 80084c4:	f3af 8000 	nop.w
 80084c8:	ffc00000 	.word	0xffc00000
 80084cc:	41dfffff 	.word	0x41dfffff
 80084d0:	94a03595 	.word	0x94a03595
 80084d4:	3fcfffff 	.word	0x3fcfffff

080084d8 <_strtod_r>:
 80084d8:	4b01      	ldr	r3, [pc, #4]	@ (80084e0 <_strtod_r+0x8>)
 80084da:	f7ff ba19 	b.w	8007910 <_strtod_l>
 80084de:	bf00      	nop
 80084e0:	20000068 	.word	0x20000068

080084e4 <_strtol_l.constprop.0>:
 80084e4:	2b24      	cmp	r3, #36	@ 0x24
 80084e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084ea:	4686      	mov	lr, r0
 80084ec:	4690      	mov	r8, r2
 80084ee:	d801      	bhi.n	80084f4 <_strtol_l.constprop.0+0x10>
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d106      	bne.n	8008502 <_strtol_l.constprop.0+0x1e>
 80084f4:	f7fd fdbc 	bl	8006070 <__errno>
 80084f8:	2316      	movs	r3, #22
 80084fa:	6003      	str	r3, [r0, #0]
 80084fc:	2000      	movs	r0, #0
 80084fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008502:	4834      	ldr	r0, [pc, #208]	@ (80085d4 <_strtol_l.constprop.0+0xf0>)
 8008504:	460d      	mov	r5, r1
 8008506:	462a      	mov	r2, r5
 8008508:	f815 4b01 	ldrb.w	r4, [r5], #1
 800850c:	5d06      	ldrb	r6, [r0, r4]
 800850e:	f016 0608 	ands.w	r6, r6, #8
 8008512:	d1f8      	bne.n	8008506 <_strtol_l.constprop.0+0x22>
 8008514:	2c2d      	cmp	r4, #45	@ 0x2d
 8008516:	d12d      	bne.n	8008574 <_strtol_l.constprop.0+0x90>
 8008518:	782c      	ldrb	r4, [r5, #0]
 800851a:	2601      	movs	r6, #1
 800851c:	1c95      	adds	r5, r2, #2
 800851e:	f033 0210 	bics.w	r2, r3, #16
 8008522:	d109      	bne.n	8008538 <_strtol_l.constprop.0+0x54>
 8008524:	2c30      	cmp	r4, #48	@ 0x30
 8008526:	d12a      	bne.n	800857e <_strtol_l.constprop.0+0x9a>
 8008528:	782a      	ldrb	r2, [r5, #0]
 800852a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800852e:	2a58      	cmp	r2, #88	@ 0x58
 8008530:	d125      	bne.n	800857e <_strtol_l.constprop.0+0x9a>
 8008532:	786c      	ldrb	r4, [r5, #1]
 8008534:	2310      	movs	r3, #16
 8008536:	3502      	adds	r5, #2
 8008538:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800853c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008540:	2200      	movs	r2, #0
 8008542:	fbbc f9f3 	udiv	r9, ip, r3
 8008546:	4610      	mov	r0, r2
 8008548:	fb03 ca19 	mls	sl, r3, r9, ip
 800854c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008550:	2f09      	cmp	r7, #9
 8008552:	d81b      	bhi.n	800858c <_strtol_l.constprop.0+0xa8>
 8008554:	463c      	mov	r4, r7
 8008556:	42a3      	cmp	r3, r4
 8008558:	dd27      	ble.n	80085aa <_strtol_l.constprop.0+0xc6>
 800855a:	1c57      	adds	r7, r2, #1
 800855c:	d007      	beq.n	800856e <_strtol_l.constprop.0+0x8a>
 800855e:	4581      	cmp	r9, r0
 8008560:	d320      	bcc.n	80085a4 <_strtol_l.constprop.0+0xc0>
 8008562:	d101      	bne.n	8008568 <_strtol_l.constprop.0+0x84>
 8008564:	45a2      	cmp	sl, r4
 8008566:	db1d      	blt.n	80085a4 <_strtol_l.constprop.0+0xc0>
 8008568:	fb00 4003 	mla	r0, r0, r3, r4
 800856c:	2201      	movs	r2, #1
 800856e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008572:	e7eb      	b.n	800854c <_strtol_l.constprop.0+0x68>
 8008574:	2c2b      	cmp	r4, #43	@ 0x2b
 8008576:	bf04      	itt	eq
 8008578:	782c      	ldrbeq	r4, [r5, #0]
 800857a:	1c95      	addeq	r5, r2, #2
 800857c:	e7cf      	b.n	800851e <_strtol_l.constprop.0+0x3a>
 800857e:	2b00      	cmp	r3, #0
 8008580:	d1da      	bne.n	8008538 <_strtol_l.constprop.0+0x54>
 8008582:	2c30      	cmp	r4, #48	@ 0x30
 8008584:	bf0c      	ite	eq
 8008586:	2308      	moveq	r3, #8
 8008588:	230a      	movne	r3, #10
 800858a:	e7d5      	b.n	8008538 <_strtol_l.constprop.0+0x54>
 800858c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008590:	2f19      	cmp	r7, #25
 8008592:	d801      	bhi.n	8008598 <_strtol_l.constprop.0+0xb4>
 8008594:	3c37      	subs	r4, #55	@ 0x37
 8008596:	e7de      	b.n	8008556 <_strtol_l.constprop.0+0x72>
 8008598:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800859c:	2f19      	cmp	r7, #25
 800859e:	d804      	bhi.n	80085aa <_strtol_l.constprop.0+0xc6>
 80085a0:	3c57      	subs	r4, #87	@ 0x57
 80085a2:	e7d8      	b.n	8008556 <_strtol_l.constprop.0+0x72>
 80085a4:	f04f 32ff 	mov.w	r2, #4294967295
 80085a8:	e7e1      	b.n	800856e <_strtol_l.constprop.0+0x8a>
 80085aa:	1c53      	adds	r3, r2, #1
 80085ac:	d108      	bne.n	80085c0 <_strtol_l.constprop.0+0xdc>
 80085ae:	2322      	movs	r3, #34	@ 0x22
 80085b0:	f8ce 3000 	str.w	r3, [lr]
 80085b4:	4660      	mov	r0, ip
 80085b6:	f1b8 0f00 	cmp.w	r8, #0
 80085ba:	d0a0      	beq.n	80084fe <_strtol_l.constprop.0+0x1a>
 80085bc:	1e69      	subs	r1, r5, #1
 80085be:	e006      	b.n	80085ce <_strtol_l.constprop.0+0xea>
 80085c0:	b106      	cbz	r6, 80085c4 <_strtol_l.constprop.0+0xe0>
 80085c2:	4240      	negs	r0, r0
 80085c4:	f1b8 0f00 	cmp.w	r8, #0
 80085c8:	d099      	beq.n	80084fe <_strtol_l.constprop.0+0x1a>
 80085ca:	2a00      	cmp	r2, #0
 80085cc:	d1f6      	bne.n	80085bc <_strtol_l.constprop.0+0xd8>
 80085ce:	f8c8 1000 	str.w	r1, [r8]
 80085d2:	e794      	b.n	80084fe <_strtol_l.constprop.0+0x1a>
 80085d4:	08009cd1 	.word	0x08009cd1

080085d8 <_strtol_r>:
 80085d8:	f7ff bf84 	b.w	80084e4 <_strtol_l.constprop.0>

080085dc <__ssputs_r>:
 80085dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085e0:	688e      	ldr	r6, [r1, #8]
 80085e2:	461f      	mov	r7, r3
 80085e4:	42be      	cmp	r6, r7
 80085e6:	680b      	ldr	r3, [r1, #0]
 80085e8:	4682      	mov	sl, r0
 80085ea:	460c      	mov	r4, r1
 80085ec:	4690      	mov	r8, r2
 80085ee:	d82d      	bhi.n	800864c <__ssputs_r+0x70>
 80085f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80085f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80085f8:	d026      	beq.n	8008648 <__ssputs_r+0x6c>
 80085fa:	6965      	ldr	r5, [r4, #20]
 80085fc:	6909      	ldr	r1, [r1, #16]
 80085fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008602:	eba3 0901 	sub.w	r9, r3, r1
 8008606:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800860a:	1c7b      	adds	r3, r7, #1
 800860c:	444b      	add	r3, r9
 800860e:	106d      	asrs	r5, r5, #1
 8008610:	429d      	cmp	r5, r3
 8008612:	bf38      	it	cc
 8008614:	461d      	movcc	r5, r3
 8008616:	0553      	lsls	r3, r2, #21
 8008618:	d527      	bpl.n	800866a <__ssputs_r+0x8e>
 800861a:	4629      	mov	r1, r5
 800861c:	f7fe fc1c 	bl	8006e58 <_malloc_r>
 8008620:	4606      	mov	r6, r0
 8008622:	b360      	cbz	r0, 800867e <__ssputs_r+0xa2>
 8008624:	6921      	ldr	r1, [r4, #16]
 8008626:	464a      	mov	r2, r9
 8008628:	f000 fa18 	bl	8008a5c <memcpy>
 800862c:	89a3      	ldrh	r3, [r4, #12]
 800862e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008636:	81a3      	strh	r3, [r4, #12]
 8008638:	6126      	str	r6, [r4, #16]
 800863a:	6165      	str	r5, [r4, #20]
 800863c:	444e      	add	r6, r9
 800863e:	eba5 0509 	sub.w	r5, r5, r9
 8008642:	6026      	str	r6, [r4, #0]
 8008644:	60a5      	str	r5, [r4, #8]
 8008646:	463e      	mov	r6, r7
 8008648:	42be      	cmp	r6, r7
 800864a:	d900      	bls.n	800864e <__ssputs_r+0x72>
 800864c:	463e      	mov	r6, r7
 800864e:	6820      	ldr	r0, [r4, #0]
 8008650:	4632      	mov	r2, r6
 8008652:	4641      	mov	r1, r8
 8008654:	f000 f9c6 	bl	80089e4 <memmove>
 8008658:	68a3      	ldr	r3, [r4, #8]
 800865a:	1b9b      	subs	r3, r3, r6
 800865c:	60a3      	str	r3, [r4, #8]
 800865e:	6823      	ldr	r3, [r4, #0]
 8008660:	4433      	add	r3, r6
 8008662:	6023      	str	r3, [r4, #0]
 8008664:	2000      	movs	r0, #0
 8008666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800866a:	462a      	mov	r2, r5
 800866c:	f000 fd89 	bl	8009182 <_realloc_r>
 8008670:	4606      	mov	r6, r0
 8008672:	2800      	cmp	r0, #0
 8008674:	d1e0      	bne.n	8008638 <__ssputs_r+0x5c>
 8008676:	6921      	ldr	r1, [r4, #16]
 8008678:	4650      	mov	r0, sl
 800867a:	f7fe fb79 	bl	8006d70 <_free_r>
 800867e:	230c      	movs	r3, #12
 8008680:	f8ca 3000 	str.w	r3, [sl]
 8008684:	89a3      	ldrh	r3, [r4, #12]
 8008686:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800868a:	81a3      	strh	r3, [r4, #12]
 800868c:	f04f 30ff 	mov.w	r0, #4294967295
 8008690:	e7e9      	b.n	8008666 <__ssputs_r+0x8a>
	...

08008694 <_svfiprintf_r>:
 8008694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008698:	4698      	mov	r8, r3
 800869a:	898b      	ldrh	r3, [r1, #12]
 800869c:	061b      	lsls	r3, r3, #24
 800869e:	b09d      	sub	sp, #116	@ 0x74
 80086a0:	4607      	mov	r7, r0
 80086a2:	460d      	mov	r5, r1
 80086a4:	4614      	mov	r4, r2
 80086a6:	d510      	bpl.n	80086ca <_svfiprintf_r+0x36>
 80086a8:	690b      	ldr	r3, [r1, #16]
 80086aa:	b973      	cbnz	r3, 80086ca <_svfiprintf_r+0x36>
 80086ac:	2140      	movs	r1, #64	@ 0x40
 80086ae:	f7fe fbd3 	bl	8006e58 <_malloc_r>
 80086b2:	6028      	str	r0, [r5, #0]
 80086b4:	6128      	str	r0, [r5, #16]
 80086b6:	b930      	cbnz	r0, 80086c6 <_svfiprintf_r+0x32>
 80086b8:	230c      	movs	r3, #12
 80086ba:	603b      	str	r3, [r7, #0]
 80086bc:	f04f 30ff 	mov.w	r0, #4294967295
 80086c0:	b01d      	add	sp, #116	@ 0x74
 80086c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086c6:	2340      	movs	r3, #64	@ 0x40
 80086c8:	616b      	str	r3, [r5, #20]
 80086ca:	2300      	movs	r3, #0
 80086cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80086ce:	2320      	movs	r3, #32
 80086d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80086d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80086d8:	2330      	movs	r3, #48	@ 0x30
 80086da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008878 <_svfiprintf_r+0x1e4>
 80086de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80086e2:	f04f 0901 	mov.w	r9, #1
 80086e6:	4623      	mov	r3, r4
 80086e8:	469a      	mov	sl, r3
 80086ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086ee:	b10a      	cbz	r2, 80086f4 <_svfiprintf_r+0x60>
 80086f0:	2a25      	cmp	r2, #37	@ 0x25
 80086f2:	d1f9      	bne.n	80086e8 <_svfiprintf_r+0x54>
 80086f4:	ebba 0b04 	subs.w	fp, sl, r4
 80086f8:	d00b      	beq.n	8008712 <_svfiprintf_r+0x7e>
 80086fa:	465b      	mov	r3, fp
 80086fc:	4622      	mov	r2, r4
 80086fe:	4629      	mov	r1, r5
 8008700:	4638      	mov	r0, r7
 8008702:	f7ff ff6b 	bl	80085dc <__ssputs_r>
 8008706:	3001      	adds	r0, #1
 8008708:	f000 80a7 	beq.w	800885a <_svfiprintf_r+0x1c6>
 800870c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800870e:	445a      	add	r2, fp
 8008710:	9209      	str	r2, [sp, #36]	@ 0x24
 8008712:	f89a 3000 	ldrb.w	r3, [sl]
 8008716:	2b00      	cmp	r3, #0
 8008718:	f000 809f 	beq.w	800885a <_svfiprintf_r+0x1c6>
 800871c:	2300      	movs	r3, #0
 800871e:	f04f 32ff 	mov.w	r2, #4294967295
 8008722:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008726:	f10a 0a01 	add.w	sl, sl, #1
 800872a:	9304      	str	r3, [sp, #16]
 800872c:	9307      	str	r3, [sp, #28]
 800872e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008732:	931a      	str	r3, [sp, #104]	@ 0x68
 8008734:	4654      	mov	r4, sl
 8008736:	2205      	movs	r2, #5
 8008738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800873c:	484e      	ldr	r0, [pc, #312]	@ (8008878 <_svfiprintf_r+0x1e4>)
 800873e:	f7f7 fd47 	bl	80001d0 <memchr>
 8008742:	9a04      	ldr	r2, [sp, #16]
 8008744:	b9d8      	cbnz	r0, 800877e <_svfiprintf_r+0xea>
 8008746:	06d0      	lsls	r0, r2, #27
 8008748:	bf44      	itt	mi
 800874a:	2320      	movmi	r3, #32
 800874c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008750:	0711      	lsls	r1, r2, #28
 8008752:	bf44      	itt	mi
 8008754:	232b      	movmi	r3, #43	@ 0x2b
 8008756:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800875a:	f89a 3000 	ldrb.w	r3, [sl]
 800875e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008760:	d015      	beq.n	800878e <_svfiprintf_r+0xfa>
 8008762:	9a07      	ldr	r2, [sp, #28]
 8008764:	4654      	mov	r4, sl
 8008766:	2000      	movs	r0, #0
 8008768:	f04f 0c0a 	mov.w	ip, #10
 800876c:	4621      	mov	r1, r4
 800876e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008772:	3b30      	subs	r3, #48	@ 0x30
 8008774:	2b09      	cmp	r3, #9
 8008776:	d94b      	bls.n	8008810 <_svfiprintf_r+0x17c>
 8008778:	b1b0      	cbz	r0, 80087a8 <_svfiprintf_r+0x114>
 800877a:	9207      	str	r2, [sp, #28]
 800877c:	e014      	b.n	80087a8 <_svfiprintf_r+0x114>
 800877e:	eba0 0308 	sub.w	r3, r0, r8
 8008782:	fa09 f303 	lsl.w	r3, r9, r3
 8008786:	4313      	orrs	r3, r2
 8008788:	9304      	str	r3, [sp, #16]
 800878a:	46a2      	mov	sl, r4
 800878c:	e7d2      	b.n	8008734 <_svfiprintf_r+0xa0>
 800878e:	9b03      	ldr	r3, [sp, #12]
 8008790:	1d19      	adds	r1, r3, #4
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	9103      	str	r1, [sp, #12]
 8008796:	2b00      	cmp	r3, #0
 8008798:	bfbb      	ittet	lt
 800879a:	425b      	neglt	r3, r3
 800879c:	f042 0202 	orrlt.w	r2, r2, #2
 80087a0:	9307      	strge	r3, [sp, #28]
 80087a2:	9307      	strlt	r3, [sp, #28]
 80087a4:	bfb8      	it	lt
 80087a6:	9204      	strlt	r2, [sp, #16]
 80087a8:	7823      	ldrb	r3, [r4, #0]
 80087aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80087ac:	d10a      	bne.n	80087c4 <_svfiprintf_r+0x130>
 80087ae:	7863      	ldrb	r3, [r4, #1]
 80087b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80087b2:	d132      	bne.n	800881a <_svfiprintf_r+0x186>
 80087b4:	9b03      	ldr	r3, [sp, #12]
 80087b6:	1d1a      	adds	r2, r3, #4
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	9203      	str	r2, [sp, #12]
 80087bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80087c0:	3402      	adds	r4, #2
 80087c2:	9305      	str	r3, [sp, #20]
 80087c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008888 <_svfiprintf_r+0x1f4>
 80087c8:	7821      	ldrb	r1, [r4, #0]
 80087ca:	2203      	movs	r2, #3
 80087cc:	4650      	mov	r0, sl
 80087ce:	f7f7 fcff 	bl	80001d0 <memchr>
 80087d2:	b138      	cbz	r0, 80087e4 <_svfiprintf_r+0x150>
 80087d4:	9b04      	ldr	r3, [sp, #16]
 80087d6:	eba0 000a 	sub.w	r0, r0, sl
 80087da:	2240      	movs	r2, #64	@ 0x40
 80087dc:	4082      	lsls	r2, r0
 80087de:	4313      	orrs	r3, r2
 80087e0:	3401      	adds	r4, #1
 80087e2:	9304      	str	r3, [sp, #16]
 80087e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087e8:	4824      	ldr	r0, [pc, #144]	@ (800887c <_svfiprintf_r+0x1e8>)
 80087ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80087ee:	2206      	movs	r2, #6
 80087f0:	f7f7 fcee 	bl	80001d0 <memchr>
 80087f4:	2800      	cmp	r0, #0
 80087f6:	d036      	beq.n	8008866 <_svfiprintf_r+0x1d2>
 80087f8:	4b21      	ldr	r3, [pc, #132]	@ (8008880 <_svfiprintf_r+0x1ec>)
 80087fa:	bb1b      	cbnz	r3, 8008844 <_svfiprintf_r+0x1b0>
 80087fc:	9b03      	ldr	r3, [sp, #12]
 80087fe:	3307      	adds	r3, #7
 8008800:	f023 0307 	bic.w	r3, r3, #7
 8008804:	3308      	adds	r3, #8
 8008806:	9303      	str	r3, [sp, #12]
 8008808:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800880a:	4433      	add	r3, r6
 800880c:	9309      	str	r3, [sp, #36]	@ 0x24
 800880e:	e76a      	b.n	80086e6 <_svfiprintf_r+0x52>
 8008810:	fb0c 3202 	mla	r2, ip, r2, r3
 8008814:	460c      	mov	r4, r1
 8008816:	2001      	movs	r0, #1
 8008818:	e7a8      	b.n	800876c <_svfiprintf_r+0xd8>
 800881a:	2300      	movs	r3, #0
 800881c:	3401      	adds	r4, #1
 800881e:	9305      	str	r3, [sp, #20]
 8008820:	4619      	mov	r1, r3
 8008822:	f04f 0c0a 	mov.w	ip, #10
 8008826:	4620      	mov	r0, r4
 8008828:	f810 2b01 	ldrb.w	r2, [r0], #1
 800882c:	3a30      	subs	r2, #48	@ 0x30
 800882e:	2a09      	cmp	r2, #9
 8008830:	d903      	bls.n	800883a <_svfiprintf_r+0x1a6>
 8008832:	2b00      	cmp	r3, #0
 8008834:	d0c6      	beq.n	80087c4 <_svfiprintf_r+0x130>
 8008836:	9105      	str	r1, [sp, #20]
 8008838:	e7c4      	b.n	80087c4 <_svfiprintf_r+0x130>
 800883a:	fb0c 2101 	mla	r1, ip, r1, r2
 800883e:	4604      	mov	r4, r0
 8008840:	2301      	movs	r3, #1
 8008842:	e7f0      	b.n	8008826 <_svfiprintf_r+0x192>
 8008844:	ab03      	add	r3, sp, #12
 8008846:	9300      	str	r3, [sp, #0]
 8008848:	462a      	mov	r2, r5
 800884a:	4b0e      	ldr	r3, [pc, #56]	@ (8008884 <_svfiprintf_r+0x1f0>)
 800884c:	a904      	add	r1, sp, #16
 800884e:	4638      	mov	r0, r7
 8008850:	f7fc fcca 	bl	80051e8 <_printf_float>
 8008854:	1c42      	adds	r2, r0, #1
 8008856:	4606      	mov	r6, r0
 8008858:	d1d6      	bne.n	8008808 <_svfiprintf_r+0x174>
 800885a:	89ab      	ldrh	r3, [r5, #12]
 800885c:	065b      	lsls	r3, r3, #25
 800885e:	f53f af2d 	bmi.w	80086bc <_svfiprintf_r+0x28>
 8008862:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008864:	e72c      	b.n	80086c0 <_svfiprintf_r+0x2c>
 8008866:	ab03      	add	r3, sp, #12
 8008868:	9300      	str	r3, [sp, #0]
 800886a:	462a      	mov	r2, r5
 800886c:	4b05      	ldr	r3, [pc, #20]	@ (8008884 <_svfiprintf_r+0x1f0>)
 800886e:	a904      	add	r1, sp, #16
 8008870:	4638      	mov	r0, r7
 8008872:	f7fc ff51 	bl	8005718 <_printf_i>
 8008876:	e7ed      	b.n	8008854 <_svfiprintf_r+0x1c0>
 8008878:	08009dd1 	.word	0x08009dd1
 800887c:	08009ddb 	.word	0x08009ddb
 8008880:	080051e9 	.word	0x080051e9
 8008884:	080085dd 	.word	0x080085dd
 8008888:	08009dd7 	.word	0x08009dd7

0800888c <__sflush_r>:
 800888c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008894:	0716      	lsls	r6, r2, #28
 8008896:	4605      	mov	r5, r0
 8008898:	460c      	mov	r4, r1
 800889a:	d454      	bmi.n	8008946 <__sflush_r+0xba>
 800889c:	684b      	ldr	r3, [r1, #4]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	dc02      	bgt.n	80088a8 <__sflush_r+0x1c>
 80088a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	dd48      	ble.n	800893a <__sflush_r+0xae>
 80088a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80088aa:	2e00      	cmp	r6, #0
 80088ac:	d045      	beq.n	800893a <__sflush_r+0xae>
 80088ae:	2300      	movs	r3, #0
 80088b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80088b4:	682f      	ldr	r7, [r5, #0]
 80088b6:	6a21      	ldr	r1, [r4, #32]
 80088b8:	602b      	str	r3, [r5, #0]
 80088ba:	d030      	beq.n	800891e <__sflush_r+0x92>
 80088bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80088be:	89a3      	ldrh	r3, [r4, #12]
 80088c0:	0759      	lsls	r1, r3, #29
 80088c2:	d505      	bpl.n	80088d0 <__sflush_r+0x44>
 80088c4:	6863      	ldr	r3, [r4, #4]
 80088c6:	1ad2      	subs	r2, r2, r3
 80088c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80088ca:	b10b      	cbz	r3, 80088d0 <__sflush_r+0x44>
 80088cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80088ce:	1ad2      	subs	r2, r2, r3
 80088d0:	2300      	movs	r3, #0
 80088d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80088d4:	6a21      	ldr	r1, [r4, #32]
 80088d6:	4628      	mov	r0, r5
 80088d8:	47b0      	blx	r6
 80088da:	1c43      	adds	r3, r0, #1
 80088dc:	89a3      	ldrh	r3, [r4, #12]
 80088de:	d106      	bne.n	80088ee <__sflush_r+0x62>
 80088e0:	6829      	ldr	r1, [r5, #0]
 80088e2:	291d      	cmp	r1, #29
 80088e4:	d82b      	bhi.n	800893e <__sflush_r+0xb2>
 80088e6:	4a2a      	ldr	r2, [pc, #168]	@ (8008990 <__sflush_r+0x104>)
 80088e8:	410a      	asrs	r2, r1
 80088ea:	07d6      	lsls	r6, r2, #31
 80088ec:	d427      	bmi.n	800893e <__sflush_r+0xb2>
 80088ee:	2200      	movs	r2, #0
 80088f0:	6062      	str	r2, [r4, #4]
 80088f2:	04d9      	lsls	r1, r3, #19
 80088f4:	6922      	ldr	r2, [r4, #16]
 80088f6:	6022      	str	r2, [r4, #0]
 80088f8:	d504      	bpl.n	8008904 <__sflush_r+0x78>
 80088fa:	1c42      	adds	r2, r0, #1
 80088fc:	d101      	bne.n	8008902 <__sflush_r+0x76>
 80088fe:	682b      	ldr	r3, [r5, #0]
 8008900:	b903      	cbnz	r3, 8008904 <__sflush_r+0x78>
 8008902:	6560      	str	r0, [r4, #84]	@ 0x54
 8008904:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008906:	602f      	str	r7, [r5, #0]
 8008908:	b1b9      	cbz	r1, 800893a <__sflush_r+0xae>
 800890a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800890e:	4299      	cmp	r1, r3
 8008910:	d002      	beq.n	8008918 <__sflush_r+0x8c>
 8008912:	4628      	mov	r0, r5
 8008914:	f7fe fa2c 	bl	8006d70 <_free_r>
 8008918:	2300      	movs	r3, #0
 800891a:	6363      	str	r3, [r4, #52]	@ 0x34
 800891c:	e00d      	b.n	800893a <__sflush_r+0xae>
 800891e:	2301      	movs	r3, #1
 8008920:	4628      	mov	r0, r5
 8008922:	47b0      	blx	r6
 8008924:	4602      	mov	r2, r0
 8008926:	1c50      	adds	r0, r2, #1
 8008928:	d1c9      	bne.n	80088be <__sflush_r+0x32>
 800892a:	682b      	ldr	r3, [r5, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d0c6      	beq.n	80088be <__sflush_r+0x32>
 8008930:	2b1d      	cmp	r3, #29
 8008932:	d001      	beq.n	8008938 <__sflush_r+0xac>
 8008934:	2b16      	cmp	r3, #22
 8008936:	d11e      	bne.n	8008976 <__sflush_r+0xea>
 8008938:	602f      	str	r7, [r5, #0]
 800893a:	2000      	movs	r0, #0
 800893c:	e022      	b.n	8008984 <__sflush_r+0xf8>
 800893e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008942:	b21b      	sxth	r3, r3
 8008944:	e01b      	b.n	800897e <__sflush_r+0xf2>
 8008946:	690f      	ldr	r7, [r1, #16]
 8008948:	2f00      	cmp	r7, #0
 800894a:	d0f6      	beq.n	800893a <__sflush_r+0xae>
 800894c:	0793      	lsls	r3, r2, #30
 800894e:	680e      	ldr	r6, [r1, #0]
 8008950:	bf08      	it	eq
 8008952:	694b      	ldreq	r3, [r1, #20]
 8008954:	600f      	str	r7, [r1, #0]
 8008956:	bf18      	it	ne
 8008958:	2300      	movne	r3, #0
 800895a:	eba6 0807 	sub.w	r8, r6, r7
 800895e:	608b      	str	r3, [r1, #8]
 8008960:	f1b8 0f00 	cmp.w	r8, #0
 8008964:	dde9      	ble.n	800893a <__sflush_r+0xae>
 8008966:	6a21      	ldr	r1, [r4, #32]
 8008968:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800896a:	4643      	mov	r3, r8
 800896c:	463a      	mov	r2, r7
 800896e:	4628      	mov	r0, r5
 8008970:	47b0      	blx	r6
 8008972:	2800      	cmp	r0, #0
 8008974:	dc08      	bgt.n	8008988 <__sflush_r+0xfc>
 8008976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800897a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800897e:	81a3      	strh	r3, [r4, #12]
 8008980:	f04f 30ff 	mov.w	r0, #4294967295
 8008984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008988:	4407      	add	r7, r0
 800898a:	eba8 0800 	sub.w	r8, r8, r0
 800898e:	e7e7      	b.n	8008960 <__sflush_r+0xd4>
 8008990:	dfbffffe 	.word	0xdfbffffe

08008994 <_fflush_r>:
 8008994:	b538      	push	{r3, r4, r5, lr}
 8008996:	690b      	ldr	r3, [r1, #16]
 8008998:	4605      	mov	r5, r0
 800899a:	460c      	mov	r4, r1
 800899c:	b913      	cbnz	r3, 80089a4 <_fflush_r+0x10>
 800899e:	2500      	movs	r5, #0
 80089a0:	4628      	mov	r0, r5
 80089a2:	bd38      	pop	{r3, r4, r5, pc}
 80089a4:	b118      	cbz	r0, 80089ae <_fflush_r+0x1a>
 80089a6:	6a03      	ldr	r3, [r0, #32]
 80089a8:	b90b      	cbnz	r3, 80089ae <_fflush_r+0x1a>
 80089aa:	f7fd fa75 	bl	8005e98 <__sinit>
 80089ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d0f3      	beq.n	800899e <_fflush_r+0xa>
 80089b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80089b8:	07d0      	lsls	r0, r2, #31
 80089ba:	d404      	bmi.n	80089c6 <_fflush_r+0x32>
 80089bc:	0599      	lsls	r1, r3, #22
 80089be:	d402      	bmi.n	80089c6 <_fflush_r+0x32>
 80089c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089c2:	f7fd fb80 	bl	80060c6 <__retarget_lock_acquire_recursive>
 80089c6:	4628      	mov	r0, r5
 80089c8:	4621      	mov	r1, r4
 80089ca:	f7ff ff5f 	bl	800888c <__sflush_r>
 80089ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80089d0:	07da      	lsls	r2, r3, #31
 80089d2:	4605      	mov	r5, r0
 80089d4:	d4e4      	bmi.n	80089a0 <_fflush_r+0xc>
 80089d6:	89a3      	ldrh	r3, [r4, #12]
 80089d8:	059b      	lsls	r3, r3, #22
 80089da:	d4e1      	bmi.n	80089a0 <_fflush_r+0xc>
 80089dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089de:	f7fd fb73 	bl	80060c8 <__retarget_lock_release_recursive>
 80089e2:	e7dd      	b.n	80089a0 <_fflush_r+0xc>

080089e4 <memmove>:
 80089e4:	4288      	cmp	r0, r1
 80089e6:	b510      	push	{r4, lr}
 80089e8:	eb01 0402 	add.w	r4, r1, r2
 80089ec:	d902      	bls.n	80089f4 <memmove+0x10>
 80089ee:	4284      	cmp	r4, r0
 80089f0:	4623      	mov	r3, r4
 80089f2:	d807      	bhi.n	8008a04 <memmove+0x20>
 80089f4:	1e43      	subs	r3, r0, #1
 80089f6:	42a1      	cmp	r1, r4
 80089f8:	d008      	beq.n	8008a0c <memmove+0x28>
 80089fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a02:	e7f8      	b.n	80089f6 <memmove+0x12>
 8008a04:	4402      	add	r2, r0
 8008a06:	4601      	mov	r1, r0
 8008a08:	428a      	cmp	r2, r1
 8008a0a:	d100      	bne.n	8008a0e <memmove+0x2a>
 8008a0c:	bd10      	pop	{r4, pc}
 8008a0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a16:	e7f7      	b.n	8008a08 <memmove+0x24>

08008a18 <strncmp>:
 8008a18:	b510      	push	{r4, lr}
 8008a1a:	b16a      	cbz	r2, 8008a38 <strncmp+0x20>
 8008a1c:	3901      	subs	r1, #1
 8008a1e:	1884      	adds	r4, r0, r2
 8008a20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a24:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d103      	bne.n	8008a34 <strncmp+0x1c>
 8008a2c:	42a0      	cmp	r0, r4
 8008a2e:	d001      	beq.n	8008a34 <strncmp+0x1c>
 8008a30:	2a00      	cmp	r2, #0
 8008a32:	d1f5      	bne.n	8008a20 <strncmp+0x8>
 8008a34:	1ad0      	subs	r0, r2, r3
 8008a36:	bd10      	pop	{r4, pc}
 8008a38:	4610      	mov	r0, r2
 8008a3a:	e7fc      	b.n	8008a36 <strncmp+0x1e>

08008a3c <_sbrk_r>:
 8008a3c:	b538      	push	{r3, r4, r5, lr}
 8008a3e:	4d06      	ldr	r5, [pc, #24]	@ (8008a58 <_sbrk_r+0x1c>)
 8008a40:	2300      	movs	r3, #0
 8008a42:	4604      	mov	r4, r0
 8008a44:	4608      	mov	r0, r1
 8008a46:	602b      	str	r3, [r5, #0]
 8008a48:	f7f8 feee 	bl	8001828 <_sbrk>
 8008a4c:	1c43      	adds	r3, r0, #1
 8008a4e:	d102      	bne.n	8008a56 <_sbrk_r+0x1a>
 8008a50:	682b      	ldr	r3, [r5, #0]
 8008a52:	b103      	cbz	r3, 8008a56 <_sbrk_r+0x1a>
 8008a54:	6023      	str	r3, [r4, #0]
 8008a56:	bd38      	pop	{r3, r4, r5, pc}
 8008a58:	2000043c 	.word	0x2000043c

08008a5c <memcpy>:
 8008a5c:	440a      	add	r2, r1
 8008a5e:	4291      	cmp	r1, r2
 8008a60:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a64:	d100      	bne.n	8008a68 <memcpy+0xc>
 8008a66:	4770      	bx	lr
 8008a68:	b510      	push	{r4, lr}
 8008a6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a72:	4291      	cmp	r1, r2
 8008a74:	d1f9      	bne.n	8008a6a <memcpy+0xe>
 8008a76:	bd10      	pop	{r4, pc}

08008a78 <nan>:
 8008a78:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008a80 <nan+0x8>
 8008a7c:	4770      	bx	lr
 8008a7e:	bf00      	nop
 8008a80:	00000000 	.word	0x00000000
 8008a84:	7ff80000 	.word	0x7ff80000

08008a88 <__assert_func>:
 8008a88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a8a:	4614      	mov	r4, r2
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	4b09      	ldr	r3, [pc, #36]	@ (8008ab4 <__assert_func+0x2c>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4605      	mov	r5, r0
 8008a94:	68d8      	ldr	r0, [r3, #12]
 8008a96:	b954      	cbnz	r4, 8008aae <__assert_func+0x26>
 8008a98:	4b07      	ldr	r3, [pc, #28]	@ (8008ab8 <__assert_func+0x30>)
 8008a9a:	461c      	mov	r4, r3
 8008a9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008aa0:	9100      	str	r1, [sp, #0]
 8008aa2:	462b      	mov	r3, r5
 8008aa4:	4905      	ldr	r1, [pc, #20]	@ (8008abc <__assert_func+0x34>)
 8008aa6:	f000 fba7 	bl	80091f8 <fiprintf>
 8008aaa:	f000 fbb7 	bl	800921c <abort>
 8008aae:	4b04      	ldr	r3, [pc, #16]	@ (8008ac0 <__assert_func+0x38>)
 8008ab0:	e7f4      	b.n	8008a9c <__assert_func+0x14>
 8008ab2:	bf00      	nop
 8008ab4:	20000018 	.word	0x20000018
 8008ab8:	08009e25 	.word	0x08009e25
 8008abc:	08009df7 	.word	0x08009df7
 8008ac0:	08009dea 	.word	0x08009dea

08008ac4 <_calloc_r>:
 8008ac4:	b570      	push	{r4, r5, r6, lr}
 8008ac6:	fba1 5402 	umull	r5, r4, r1, r2
 8008aca:	b93c      	cbnz	r4, 8008adc <_calloc_r+0x18>
 8008acc:	4629      	mov	r1, r5
 8008ace:	f7fe f9c3 	bl	8006e58 <_malloc_r>
 8008ad2:	4606      	mov	r6, r0
 8008ad4:	b928      	cbnz	r0, 8008ae2 <_calloc_r+0x1e>
 8008ad6:	2600      	movs	r6, #0
 8008ad8:	4630      	mov	r0, r6
 8008ada:	bd70      	pop	{r4, r5, r6, pc}
 8008adc:	220c      	movs	r2, #12
 8008ade:	6002      	str	r2, [r0, #0]
 8008ae0:	e7f9      	b.n	8008ad6 <_calloc_r+0x12>
 8008ae2:	462a      	mov	r2, r5
 8008ae4:	4621      	mov	r1, r4
 8008ae6:	f7fd fa70 	bl	8005fca <memset>
 8008aea:	e7f5      	b.n	8008ad8 <_calloc_r+0x14>

08008aec <rshift>:
 8008aec:	6903      	ldr	r3, [r0, #16]
 8008aee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008af2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008af6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008afa:	f100 0414 	add.w	r4, r0, #20
 8008afe:	dd45      	ble.n	8008b8c <rshift+0xa0>
 8008b00:	f011 011f 	ands.w	r1, r1, #31
 8008b04:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008b08:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008b0c:	d10c      	bne.n	8008b28 <rshift+0x3c>
 8008b0e:	f100 0710 	add.w	r7, r0, #16
 8008b12:	4629      	mov	r1, r5
 8008b14:	42b1      	cmp	r1, r6
 8008b16:	d334      	bcc.n	8008b82 <rshift+0x96>
 8008b18:	1a9b      	subs	r3, r3, r2
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	1eea      	subs	r2, r5, #3
 8008b1e:	4296      	cmp	r6, r2
 8008b20:	bf38      	it	cc
 8008b22:	2300      	movcc	r3, #0
 8008b24:	4423      	add	r3, r4
 8008b26:	e015      	b.n	8008b54 <rshift+0x68>
 8008b28:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008b2c:	f1c1 0820 	rsb	r8, r1, #32
 8008b30:	40cf      	lsrs	r7, r1
 8008b32:	f105 0e04 	add.w	lr, r5, #4
 8008b36:	46a1      	mov	r9, r4
 8008b38:	4576      	cmp	r6, lr
 8008b3a:	46f4      	mov	ip, lr
 8008b3c:	d815      	bhi.n	8008b6a <rshift+0x7e>
 8008b3e:	1a9a      	subs	r2, r3, r2
 8008b40:	0092      	lsls	r2, r2, #2
 8008b42:	3a04      	subs	r2, #4
 8008b44:	3501      	adds	r5, #1
 8008b46:	42ae      	cmp	r6, r5
 8008b48:	bf38      	it	cc
 8008b4a:	2200      	movcc	r2, #0
 8008b4c:	18a3      	adds	r3, r4, r2
 8008b4e:	50a7      	str	r7, [r4, r2]
 8008b50:	b107      	cbz	r7, 8008b54 <rshift+0x68>
 8008b52:	3304      	adds	r3, #4
 8008b54:	1b1a      	subs	r2, r3, r4
 8008b56:	42a3      	cmp	r3, r4
 8008b58:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008b5c:	bf08      	it	eq
 8008b5e:	2300      	moveq	r3, #0
 8008b60:	6102      	str	r2, [r0, #16]
 8008b62:	bf08      	it	eq
 8008b64:	6143      	streq	r3, [r0, #20]
 8008b66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b6a:	f8dc c000 	ldr.w	ip, [ip]
 8008b6e:	fa0c fc08 	lsl.w	ip, ip, r8
 8008b72:	ea4c 0707 	orr.w	r7, ip, r7
 8008b76:	f849 7b04 	str.w	r7, [r9], #4
 8008b7a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008b7e:	40cf      	lsrs	r7, r1
 8008b80:	e7da      	b.n	8008b38 <rshift+0x4c>
 8008b82:	f851 cb04 	ldr.w	ip, [r1], #4
 8008b86:	f847 cf04 	str.w	ip, [r7, #4]!
 8008b8a:	e7c3      	b.n	8008b14 <rshift+0x28>
 8008b8c:	4623      	mov	r3, r4
 8008b8e:	e7e1      	b.n	8008b54 <rshift+0x68>

08008b90 <__hexdig_fun>:
 8008b90:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008b94:	2b09      	cmp	r3, #9
 8008b96:	d802      	bhi.n	8008b9e <__hexdig_fun+0xe>
 8008b98:	3820      	subs	r0, #32
 8008b9a:	b2c0      	uxtb	r0, r0
 8008b9c:	4770      	bx	lr
 8008b9e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008ba2:	2b05      	cmp	r3, #5
 8008ba4:	d801      	bhi.n	8008baa <__hexdig_fun+0x1a>
 8008ba6:	3847      	subs	r0, #71	@ 0x47
 8008ba8:	e7f7      	b.n	8008b9a <__hexdig_fun+0xa>
 8008baa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008bae:	2b05      	cmp	r3, #5
 8008bb0:	d801      	bhi.n	8008bb6 <__hexdig_fun+0x26>
 8008bb2:	3827      	subs	r0, #39	@ 0x27
 8008bb4:	e7f1      	b.n	8008b9a <__hexdig_fun+0xa>
 8008bb6:	2000      	movs	r0, #0
 8008bb8:	4770      	bx	lr
	...

08008bbc <__gethex>:
 8008bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bc0:	b085      	sub	sp, #20
 8008bc2:	468a      	mov	sl, r1
 8008bc4:	9302      	str	r3, [sp, #8]
 8008bc6:	680b      	ldr	r3, [r1, #0]
 8008bc8:	9001      	str	r0, [sp, #4]
 8008bca:	4690      	mov	r8, r2
 8008bcc:	1c9c      	adds	r4, r3, #2
 8008bce:	46a1      	mov	r9, r4
 8008bd0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008bd4:	2830      	cmp	r0, #48	@ 0x30
 8008bd6:	d0fa      	beq.n	8008bce <__gethex+0x12>
 8008bd8:	eba9 0303 	sub.w	r3, r9, r3
 8008bdc:	f1a3 0b02 	sub.w	fp, r3, #2
 8008be0:	f7ff ffd6 	bl	8008b90 <__hexdig_fun>
 8008be4:	4605      	mov	r5, r0
 8008be6:	2800      	cmp	r0, #0
 8008be8:	d168      	bne.n	8008cbc <__gethex+0x100>
 8008bea:	49a0      	ldr	r1, [pc, #640]	@ (8008e6c <__gethex+0x2b0>)
 8008bec:	2201      	movs	r2, #1
 8008bee:	4648      	mov	r0, r9
 8008bf0:	f7ff ff12 	bl	8008a18 <strncmp>
 8008bf4:	4607      	mov	r7, r0
 8008bf6:	2800      	cmp	r0, #0
 8008bf8:	d167      	bne.n	8008cca <__gethex+0x10e>
 8008bfa:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008bfe:	4626      	mov	r6, r4
 8008c00:	f7ff ffc6 	bl	8008b90 <__hexdig_fun>
 8008c04:	2800      	cmp	r0, #0
 8008c06:	d062      	beq.n	8008cce <__gethex+0x112>
 8008c08:	4623      	mov	r3, r4
 8008c0a:	7818      	ldrb	r0, [r3, #0]
 8008c0c:	2830      	cmp	r0, #48	@ 0x30
 8008c0e:	4699      	mov	r9, r3
 8008c10:	f103 0301 	add.w	r3, r3, #1
 8008c14:	d0f9      	beq.n	8008c0a <__gethex+0x4e>
 8008c16:	f7ff ffbb 	bl	8008b90 <__hexdig_fun>
 8008c1a:	fab0 f580 	clz	r5, r0
 8008c1e:	096d      	lsrs	r5, r5, #5
 8008c20:	f04f 0b01 	mov.w	fp, #1
 8008c24:	464a      	mov	r2, r9
 8008c26:	4616      	mov	r6, r2
 8008c28:	3201      	adds	r2, #1
 8008c2a:	7830      	ldrb	r0, [r6, #0]
 8008c2c:	f7ff ffb0 	bl	8008b90 <__hexdig_fun>
 8008c30:	2800      	cmp	r0, #0
 8008c32:	d1f8      	bne.n	8008c26 <__gethex+0x6a>
 8008c34:	498d      	ldr	r1, [pc, #564]	@ (8008e6c <__gethex+0x2b0>)
 8008c36:	2201      	movs	r2, #1
 8008c38:	4630      	mov	r0, r6
 8008c3a:	f7ff feed 	bl	8008a18 <strncmp>
 8008c3e:	2800      	cmp	r0, #0
 8008c40:	d13f      	bne.n	8008cc2 <__gethex+0x106>
 8008c42:	b944      	cbnz	r4, 8008c56 <__gethex+0x9a>
 8008c44:	1c74      	adds	r4, r6, #1
 8008c46:	4622      	mov	r2, r4
 8008c48:	4616      	mov	r6, r2
 8008c4a:	3201      	adds	r2, #1
 8008c4c:	7830      	ldrb	r0, [r6, #0]
 8008c4e:	f7ff ff9f 	bl	8008b90 <__hexdig_fun>
 8008c52:	2800      	cmp	r0, #0
 8008c54:	d1f8      	bne.n	8008c48 <__gethex+0x8c>
 8008c56:	1ba4      	subs	r4, r4, r6
 8008c58:	00a7      	lsls	r7, r4, #2
 8008c5a:	7833      	ldrb	r3, [r6, #0]
 8008c5c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008c60:	2b50      	cmp	r3, #80	@ 0x50
 8008c62:	d13e      	bne.n	8008ce2 <__gethex+0x126>
 8008c64:	7873      	ldrb	r3, [r6, #1]
 8008c66:	2b2b      	cmp	r3, #43	@ 0x2b
 8008c68:	d033      	beq.n	8008cd2 <__gethex+0x116>
 8008c6a:	2b2d      	cmp	r3, #45	@ 0x2d
 8008c6c:	d034      	beq.n	8008cd8 <__gethex+0x11c>
 8008c6e:	1c71      	adds	r1, r6, #1
 8008c70:	2400      	movs	r4, #0
 8008c72:	7808      	ldrb	r0, [r1, #0]
 8008c74:	f7ff ff8c 	bl	8008b90 <__hexdig_fun>
 8008c78:	1e43      	subs	r3, r0, #1
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	2b18      	cmp	r3, #24
 8008c7e:	d830      	bhi.n	8008ce2 <__gethex+0x126>
 8008c80:	f1a0 0210 	sub.w	r2, r0, #16
 8008c84:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008c88:	f7ff ff82 	bl	8008b90 <__hexdig_fun>
 8008c8c:	f100 3cff 	add.w	ip, r0, #4294967295
 8008c90:	fa5f fc8c 	uxtb.w	ip, ip
 8008c94:	f1bc 0f18 	cmp.w	ip, #24
 8008c98:	f04f 030a 	mov.w	r3, #10
 8008c9c:	d91e      	bls.n	8008cdc <__gethex+0x120>
 8008c9e:	b104      	cbz	r4, 8008ca2 <__gethex+0xe6>
 8008ca0:	4252      	negs	r2, r2
 8008ca2:	4417      	add	r7, r2
 8008ca4:	f8ca 1000 	str.w	r1, [sl]
 8008ca8:	b1ed      	cbz	r5, 8008ce6 <__gethex+0x12a>
 8008caa:	f1bb 0f00 	cmp.w	fp, #0
 8008cae:	bf0c      	ite	eq
 8008cb0:	2506      	moveq	r5, #6
 8008cb2:	2500      	movne	r5, #0
 8008cb4:	4628      	mov	r0, r5
 8008cb6:	b005      	add	sp, #20
 8008cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cbc:	2500      	movs	r5, #0
 8008cbe:	462c      	mov	r4, r5
 8008cc0:	e7b0      	b.n	8008c24 <__gethex+0x68>
 8008cc2:	2c00      	cmp	r4, #0
 8008cc4:	d1c7      	bne.n	8008c56 <__gethex+0x9a>
 8008cc6:	4627      	mov	r7, r4
 8008cc8:	e7c7      	b.n	8008c5a <__gethex+0x9e>
 8008cca:	464e      	mov	r6, r9
 8008ccc:	462f      	mov	r7, r5
 8008cce:	2501      	movs	r5, #1
 8008cd0:	e7c3      	b.n	8008c5a <__gethex+0x9e>
 8008cd2:	2400      	movs	r4, #0
 8008cd4:	1cb1      	adds	r1, r6, #2
 8008cd6:	e7cc      	b.n	8008c72 <__gethex+0xb6>
 8008cd8:	2401      	movs	r4, #1
 8008cda:	e7fb      	b.n	8008cd4 <__gethex+0x118>
 8008cdc:	fb03 0002 	mla	r0, r3, r2, r0
 8008ce0:	e7ce      	b.n	8008c80 <__gethex+0xc4>
 8008ce2:	4631      	mov	r1, r6
 8008ce4:	e7de      	b.n	8008ca4 <__gethex+0xe8>
 8008ce6:	eba6 0309 	sub.w	r3, r6, r9
 8008cea:	3b01      	subs	r3, #1
 8008cec:	4629      	mov	r1, r5
 8008cee:	2b07      	cmp	r3, #7
 8008cf0:	dc0a      	bgt.n	8008d08 <__gethex+0x14c>
 8008cf2:	9801      	ldr	r0, [sp, #4]
 8008cf4:	f7fe f93c 	bl	8006f70 <_Balloc>
 8008cf8:	4604      	mov	r4, r0
 8008cfa:	b940      	cbnz	r0, 8008d0e <__gethex+0x152>
 8008cfc:	4b5c      	ldr	r3, [pc, #368]	@ (8008e70 <__gethex+0x2b4>)
 8008cfe:	4602      	mov	r2, r0
 8008d00:	21e4      	movs	r1, #228	@ 0xe4
 8008d02:	485c      	ldr	r0, [pc, #368]	@ (8008e74 <__gethex+0x2b8>)
 8008d04:	f7ff fec0 	bl	8008a88 <__assert_func>
 8008d08:	3101      	adds	r1, #1
 8008d0a:	105b      	asrs	r3, r3, #1
 8008d0c:	e7ef      	b.n	8008cee <__gethex+0x132>
 8008d0e:	f100 0a14 	add.w	sl, r0, #20
 8008d12:	2300      	movs	r3, #0
 8008d14:	4655      	mov	r5, sl
 8008d16:	469b      	mov	fp, r3
 8008d18:	45b1      	cmp	r9, r6
 8008d1a:	d337      	bcc.n	8008d8c <__gethex+0x1d0>
 8008d1c:	f845 bb04 	str.w	fp, [r5], #4
 8008d20:	eba5 050a 	sub.w	r5, r5, sl
 8008d24:	10ad      	asrs	r5, r5, #2
 8008d26:	6125      	str	r5, [r4, #16]
 8008d28:	4658      	mov	r0, fp
 8008d2a:	f7fe fa13 	bl	8007154 <__hi0bits>
 8008d2e:	016d      	lsls	r5, r5, #5
 8008d30:	f8d8 6000 	ldr.w	r6, [r8]
 8008d34:	1a2d      	subs	r5, r5, r0
 8008d36:	42b5      	cmp	r5, r6
 8008d38:	dd54      	ble.n	8008de4 <__gethex+0x228>
 8008d3a:	1bad      	subs	r5, r5, r6
 8008d3c:	4629      	mov	r1, r5
 8008d3e:	4620      	mov	r0, r4
 8008d40:	f7fe fda7 	bl	8007892 <__any_on>
 8008d44:	4681      	mov	r9, r0
 8008d46:	b178      	cbz	r0, 8008d68 <__gethex+0x1ac>
 8008d48:	1e6b      	subs	r3, r5, #1
 8008d4a:	1159      	asrs	r1, r3, #5
 8008d4c:	f003 021f 	and.w	r2, r3, #31
 8008d50:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008d54:	f04f 0901 	mov.w	r9, #1
 8008d58:	fa09 f202 	lsl.w	r2, r9, r2
 8008d5c:	420a      	tst	r2, r1
 8008d5e:	d003      	beq.n	8008d68 <__gethex+0x1ac>
 8008d60:	454b      	cmp	r3, r9
 8008d62:	dc36      	bgt.n	8008dd2 <__gethex+0x216>
 8008d64:	f04f 0902 	mov.w	r9, #2
 8008d68:	4629      	mov	r1, r5
 8008d6a:	4620      	mov	r0, r4
 8008d6c:	f7ff febe 	bl	8008aec <rshift>
 8008d70:	442f      	add	r7, r5
 8008d72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d76:	42bb      	cmp	r3, r7
 8008d78:	da42      	bge.n	8008e00 <__gethex+0x244>
 8008d7a:	9801      	ldr	r0, [sp, #4]
 8008d7c:	4621      	mov	r1, r4
 8008d7e:	f7fe f937 	bl	8006ff0 <_Bfree>
 8008d82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d84:	2300      	movs	r3, #0
 8008d86:	6013      	str	r3, [r2, #0]
 8008d88:	25a3      	movs	r5, #163	@ 0xa3
 8008d8a:	e793      	b.n	8008cb4 <__gethex+0xf8>
 8008d8c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008d90:	2a2e      	cmp	r2, #46	@ 0x2e
 8008d92:	d012      	beq.n	8008dba <__gethex+0x1fe>
 8008d94:	2b20      	cmp	r3, #32
 8008d96:	d104      	bne.n	8008da2 <__gethex+0x1e6>
 8008d98:	f845 bb04 	str.w	fp, [r5], #4
 8008d9c:	f04f 0b00 	mov.w	fp, #0
 8008da0:	465b      	mov	r3, fp
 8008da2:	7830      	ldrb	r0, [r6, #0]
 8008da4:	9303      	str	r3, [sp, #12]
 8008da6:	f7ff fef3 	bl	8008b90 <__hexdig_fun>
 8008daa:	9b03      	ldr	r3, [sp, #12]
 8008dac:	f000 000f 	and.w	r0, r0, #15
 8008db0:	4098      	lsls	r0, r3
 8008db2:	ea4b 0b00 	orr.w	fp, fp, r0
 8008db6:	3304      	adds	r3, #4
 8008db8:	e7ae      	b.n	8008d18 <__gethex+0x15c>
 8008dba:	45b1      	cmp	r9, r6
 8008dbc:	d8ea      	bhi.n	8008d94 <__gethex+0x1d8>
 8008dbe:	492b      	ldr	r1, [pc, #172]	@ (8008e6c <__gethex+0x2b0>)
 8008dc0:	9303      	str	r3, [sp, #12]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	4630      	mov	r0, r6
 8008dc6:	f7ff fe27 	bl	8008a18 <strncmp>
 8008dca:	9b03      	ldr	r3, [sp, #12]
 8008dcc:	2800      	cmp	r0, #0
 8008dce:	d1e1      	bne.n	8008d94 <__gethex+0x1d8>
 8008dd0:	e7a2      	b.n	8008d18 <__gethex+0x15c>
 8008dd2:	1ea9      	subs	r1, r5, #2
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	f7fe fd5c 	bl	8007892 <__any_on>
 8008dda:	2800      	cmp	r0, #0
 8008ddc:	d0c2      	beq.n	8008d64 <__gethex+0x1a8>
 8008dde:	f04f 0903 	mov.w	r9, #3
 8008de2:	e7c1      	b.n	8008d68 <__gethex+0x1ac>
 8008de4:	da09      	bge.n	8008dfa <__gethex+0x23e>
 8008de6:	1b75      	subs	r5, r6, r5
 8008de8:	4621      	mov	r1, r4
 8008dea:	9801      	ldr	r0, [sp, #4]
 8008dec:	462a      	mov	r2, r5
 8008dee:	f7fe fb17 	bl	8007420 <__lshift>
 8008df2:	1b7f      	subs	r7, r7, r5
 8008df4:	4604      	mov	r4, r0
 8008df6:	f100 0a14 	add.w	sl, r0, #20
 8008dfa:	f04f 0900 	mov.w	r9, #0
 8008dfe:	e7b8      	b.n	8008d72 <__gethex+0x1b6>
 8008e00:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008e04:	42bd      	cmp	r5, r7
 8008e06:	dd6f      	ble.n	8008ee8 <__gethex+0x32c>
 8008e08:	1bed      	subs	r5, r5, r7
 8008e0a:	42ae      	cmp	r6, r5
 8008e0c:	dc34      	bgt.n	8008e78 <__gethex+0x2bc>
 8008e0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008e12:	2b02      	cmp	r3, #2
 8008e14:	d022      	beq.n	8008e5c <__gethex+0x2a0>
 8008e16:	2b03      	cmp	r3, #3
 8008e18:	d024      	beq.n	8008e64 <__gethex+0x2a8>
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d115      	bne.n	8008e4a <__gethex+0x28e>
 8008e1e:	42ae      	cmp	r6, r5
 8008e20:	d113      	bne.n	8008e4a <__gethex+0x28e>
 8008e22:	2e01      	cmp	r6, #1
 8008e24:	d10b      	bne.n	8008e3e <__gethex+0x282>
 8008e26:	9a02      	ldr	r2, [sp, #8]
 8008e28:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008e2c:	6013      	str	r3, [r2, #0]
 8008e2e:	2301      	movs	r3, #1
 8008e30:	6123      	str	r3, [r4, #16]
 8008e32:	f8ca 3000 	str.w	r3, [sl]
 8008e36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e38:	2562      	movs	r5, #98	@ 0x62
 8008e3a:	601c      	str	r4, [r3, #0]
 8008e3c:	e73a      	b.n	8008cb4 <__gethex+0xf8>
 8008e3e:	1e71      	subs	r1, r6, #1
 8008e40:	4620      	mov	r0, r4
 8008e42:	f7fe fd26 	bl	8007892 <__any_on>
 8008e46:	2800      	cmp	r0, #0
 8008e48:	d1ed      	bne.n	8008e26 <__gethex+0x26a>
 8008e4a:	9801      	ldr	r0, [sp, #4]
 8008e4c:	4621      	mov	r1, r4
 8008e4e:	f7fe f8cf 	bl	8006ff0 <_Bfree>
 8008e52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e54:	2300      	movs	r3, #0
 8008e56:	6013      	str	r3, [r2, #0]
 8008e58:	2550      	movs	r5, #80	@ 0x50
 8008e5a:	e72b      	b.n	8008cb4 <__gethex+0xf8>
 8008e5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d1f3      	bne.n	8008e4a <__gethex+0x28e>
 8008e62:	e7e0      	b.n	8008e26 <__gethex+0x26a>
 8008e64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d1dd      	bne.n	8008e26 <__gethex+0x26a>
 8008e6a:	e7ee      	b.n	8008e4a <__gethex+0x28e>
 8008e6c:	08009c78 	.word	0x08009c78
 8008e70:	08009b0d 	.word	0x08009b0d
 8008e74:	08009e26 	.word	0x08009e26
 8008e78:	1e6f      	subs	r7, r5, #1
 8008e7a:	f1b9 0f00 	cmp.w	r9, #0
 8008e7e:	d130      	bne.n	8008ee2 <__gethex+0x326>
 8008e80:	b127      	cbz	r7, 8008e8c <__gethex+0x2d0>
 8008e82:	4639      	mov	r1, r7
 8008e84:	4620      	mov	r0, r4
 8008e86:	f7fe fd04 	bl	8007892 <__any_on>
 8008e8a:	4681      	mov	r9, r0
 8008e8c:	117a      	asrs	r2, r7, #5
 8008e8e:	2301      	movs	r3, #1
 8008e90:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008e94:	f007 071f 	and.w	r7, r7, #31
 8008e98:	40bb      	lsls	r3, r7
 8008e9a:	4213      	tst	r3, r2
 8008e9c:	4629      	mov	r1, r5
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	bf18      	it	ne
 8008ea2:	f049 0902 	orrne.w	r9, r9, #2
 8008ea6:	f7ff fe21 	bl	8008aec <rshift>
 8008eaa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008eae:	1b76      	subs	r6, r6, r5
 8008eb0:	2502      	movs	r5, #2
 8008eb2:	f1b9 0f00 	cmp.w	r9, #0
 8008eb6:	d047      	beq.n	8008f48 <__gethex+0x38c>
 8008eb8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008ebc:	2b02      	cmp	r3, #2
 8008ebe:	d015      	beq.n	8008eec <__gethex+0x330>
 8008ec0:	2b03      	cmp	r3, #3
 8008ec2:	d017      	beq.n	8008ef4 <__gethex+0x338>
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d109      	bne.n	8008edc <__gethex+0x320>
 8008ec8:	f019 0f02 	tst.w	r9, #2
 8008ecc:	d006      	beq.n	8008edc <__gethex+0x320>
 8008ece:	f8da 3000 	ldr.w	r3, [sl]
 8008ed2:	ea49 0903 	orr.w	r9, r9, r3
 8008ed6:	f019 0f01 	tst.w	r9, #1
 8008eda:	d10e      	bne.n	8008efa <__gethex+0x33e>
 8008edc:	f045 0510 	orr.w	r5, r5, #16
 8008ee0:	e032      	b.n	8008f48 <__gethex+0x38c>
 8008ee2:	f04f 0901 	mov.w	r9, #1
 8008ee6:	e7d1      	b.n	8008e8c <__gethex+0x2d0>
 8008ee8:	2501      	movs	r5, #1
 8008eea:	e7e2      	b.n	8008eb2 <__gethex+0x2f6>
 8008eec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008eee:	f1c3 0301 	rsb	r3, r3, #1
 8008ef2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008ef4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d0f0      	beq.n	8008edc <__gethex+0x320>
 8008efa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008efe:	f104 0314 	add.w	r3, r4, #20
 8008f02:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008f06:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008f0a:	f04f 0c00 	mov.w	ip, #0
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f14:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008f18:	d01b      	beq.n	8008f52 <__gethex+0x396>
 8008f1a:	3201      	adds	r2, #1
 8008f1c:	6002      	str	r2, [r0, #0]
 8008f1e:	2d02      	cmp	r5, #2
 8008f20:	f104 0314 	add.w	r3, r4, #20
 8008f24:	d13c      	bne.n	8008fa0 <__gethex+0x3e4>
 8008f26:	f8d8 2000 	ldr.w	r2, [r8]
 8008f2a:	3a01      	subs	r2, #1
 8008f2c:	42b2      	cmp	r2, r6
 8008f2e:	d109      	bne.n	8008f44 <__gethex+0x388>
 8008f30:	1171      	asrs	r1, r6, #5
 8008f32:	2201      	movs	r2, #1
 8008f34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008f38:	f006 061f 	and.w	r6, r6, #31
 8008f3c:	fa02 f606 	lsl.w	r6, r2, r6
 8008f40:	421e      	tst	r6, r3
 8008f42:	d13a      	bne.n	8008fba <__gethex+0x3fe>
 8008f44:	f045 0520 	orr.w	r5, r5, #32
 8008f48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f4a:	601c      	str	r4, [r3, #0]
 8008f4c:	9b02      	ldr	r3, [sp, #8]
 8008f4e:	601f      	str	r7, [r3, #0]
 8008f50:	e6b0      	b.n	8008cb4 <__gethex+0xf8>
 8008f52:	4299      	cmp	r1, r3
 8008f54:	f843 cc04 	str.w	ip, [r3, #-4]
 8008f58:	d8d9      	bhi.n	8008f0e <__gethex+0x352>
 8008f5a:	68a3      	ldr	r3, [r4, #8]
 8008f5c:	459b      	cmp	fp, r3
 8008f5e:	db17      	blt.n	8008f90 <__gethex+0x3d4>
 8008f60:	6861      	ldr	r1, [r4, #4]
 8008f62:	9801      	ldr	r0, [sp, #4]
 8008f64:	3101      	adds	r1, #1
 8008f66:	f7fe f803 	bl	8006f70 <_Balloc>
 8008f6a:	4681      	mov	r9, r0
 8008f6c:	b918      	cbnz	r0, 8008f76 <__gethex+0x3ba>
 8008f6e:	4b1a      	ldr	r3, [pc, #104]	@ (8008fd8 <__gethex+0x41c>)
 8008f70:	4602      	mov	r2, r0
 8008f72:	2184      	movs	r1, #132	@ 0x84
 8008f74:	e6c5      	b.n	8008d02 <__gethex+0x146>
 8008f76:	6922      	ldr	r2, [r4, #16]
 8008f78:	3202      	adds	r2, #2
 8008f7a:	f104 010c 	add.w	r1, r4, #12
 8008f7e:	0092      	lsls	r2, r2, #2
 8008f80:	300c      	adds	r0, #12
 8008f82:	f7ff fd6b 	bl	8008a5c <memcpy>
 8008f86:	4621      	mov	r1, r4
 8008f88:	9801      	ldr	r0, [sp, #4]
 8008f8a:	f7fe f831 	bl	8006ff0 <_Bfree>
 8008f8e:	464c      	mov	r4, r9
 8008f90:	6923      	ldr	r3, [r4, #16]
 8008f92:	1c5a      	adds	r2, r3, #1
 8008f94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008f98:	6122      	str	r2, [r4, #16]
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	615a      	str	r2, [r3, #20]
 8008f9e:	e7be      	b.n	8008f1e <__gethex+0x362>
 8008fa0:	6922      	ldr	r2, [r4, #16]
 8008fa2:	455a      	cmp	r2, fp
 8008fa4:	dd0b      	ble.n	8008fbe <__gethex+0x402>
 8008fa6:	2101      	movs	r1, #1
 8008fa8:	4620      	mov	r0, r4
 8008faa:	f7ff fd9f 	bl	8008aec <rshift>
 8008fae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008fb2:	3701      	adds	r7, #1
 8008fb4:	42bb      	cmp	r3, r7
 8008fb6:	f6ff aee0 	blt.w	8008d7a <__gethex+0x1be>
 8008fba:	2501      	movs	r5, #1
 8008fbc:	e7c2      	b.n	8008f44 <__gethex+0x388>
 8008fbe:	f016 061f 	ands.w	r6, r6, #31
 8008fc2:	d0fa      	beq.n	8008fba <__gethex+0x3fe>
 8008fc4:	4453      	add	r3, sl
 8008fc6:	f1c6 0620 	rsb	r6, r6, #32
 8008fca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008fce:	f7fe f8c1 	bl	8007154 <__hi0bits>
 8008fd2:	42b0      	cmp	r0, r6
 8008fd4:	dbe7      	blt.n	8008fa6 <__gethex+0x3ea>
 8008fd6:	e7f0      	b.n	8008fba <__gethex+0x3fe>
 8008fd8:	08009b0d 	.word	0x08009b0d

08008fdc <L_shift>:
 8008fdc:	f1c2 0208 	rsb	r2, r2, #8
 8008fe0:	0092      	lsls	r2, r2, #2
 8008fe2:	b570      	push	{r4, r5, r6, lr}
 8008fe4:	f1c2 0620 	rsb	r6, r2, #32
 8008fe8:	6843      	ldr	r3, [r0, #4]
 8008fea:	6804      	ldr	r4, [r0, #0]
 8008fec:	fa03 f506 	lsl.w	r5, r3, r6
 8008ff0:	432c      	orrs	r4, r5
 8008ff2:	40d3      	lsrs	r3, r2
 8008ff4:	6004      	str	r4, [r0, #0]
 8008ff6:	f840 3f04 	str.w	r3, [r0, #4]!
 8008ffa:	4288      	cmp	r0, r1
 8008ffc:	d3f4      	bcc.n	8008fe8 <L_shift+0xc>
 8008ffe:	bd70      	pop	{r4, r5, r6, pc}

08009000 <__match>:
 8009000:	b530      	push	{r4, r5, lr}
 8009002:	6803      	ldr	r3, [r0, #0]
 8009004:	3301      	adds	r3, #1
 8009006:	f811 4b01 	ldrb.w	r4, [r1], #1
 800900a:	b914      	cbnz	r4, 8009012 <__match+0x12>
 800900c:	6003      	str	r3, [r0, #0]
 800900e:	2001      	movs	r0, #1
 8009010:	bd30      	pop	{r4, r5, pc}
 8009012:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009016:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800901a:	2d19      	cmp	r5, #25
 800901c:	bf98      	it	ls
 800901e:	3220      	addls	r2, #32
 8009020:	42a2      	cmp	r2, r4
 8009022:	d0f0      	beq.n	8009006 <__match+0x6>
 8009024:	2000      	movs	r0, #0
 8009026:	e7f3      	b.n	8009010 <__match+0x10>

08009028 <__hexnan>:
 8009028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800902c:	680b      	ldr	r3, [r1, #0]
 800902e:	6801      	ldr	r1, [r0, #0]
 8009030:	115e      	asrs	r6, r3, #5
 8009032:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009036:	f013 031f 	ands.w	r3, r3, #31
 800903a:	b087      	sub	sp, #28
 800903c:	bf18      	it	ne
 800903e:	3604      	addne	r6, #4
 8009040:	2500      	movs	r5, #0
 8009042:	1f37      	subs	r7, r6, #4
 8009044:	4682      	mov	sl, r0
 8009046:	4690      	mov	r8, r2
 8009048:	9301      	str	r3, [sp, #4]
 800904a:	f846 5c04 	str.w	r5, [r6, #-4]
 800904e:	46b9      	mov	r9, r7
 8009050:	463c      	mov	r4, r7
 8009052:	9502      	str	r5, [sp, #8]
 8009054:	46ab      	mov	fp, r5
 8009056:	784a      	ldrb	r2, [r1, #1]
 8009058:	1c4b      	adds	r3, r1, #1
 800905a:	9303      	str	r3, [sp, #12]
 800905c:	b342      	cbz	r2, 80090b0 <__hexnan+0x88>
 800905e:	4610      	mov	r0, r2
 8009060:	9105      	str	r1, [sp, #20]
 8009062:	9204      	str	r2, [sp, #16]
 8009064:	f7ff fd94 	bl	8008b90 <__hexdig_fun>
 8009068:	2800      	cmp	r0, #0
 800906a:	d151      	bne.n	8009110 <__hexnan+0xe8>
 800906c:	9a04      	ldr	r2, [sp, #16]
 800906e:	9905      	ldr	r1, [sp, #20]
 8009070:	2a20      	cmp	r2, #32
 8009072:	d818      	bhi.n	80090a6 <__hexnan+0x7e>
 8009074:	9b02      	ldr	r3, [sp, #8]
 8009076:	459b      	cmp	fp, r3
 8009078:	dd13      	ble.n	80090a2 <__hexnan+0x7a>
 800907a:	454c      	cmp	r4, r9
 800907c:	d206      	bcs.n	800908c <__hexnan+0x64>
 800907e:	2d07      	cmp	r5, #7
 8009080:	dc04      	bgt.n	800908c <__hexnan+0x64>
 8009082:	462a      	mov	r2, r5
 8009084:	4649      	mov	r1, r9
 8009086:	4620      	mov	r0, r4
 8009088:	f7ff ffa8 	bl	8008fdc <L_shift>
 800908c:	4544      	cmp	r4, r8
 800908e:	d952      	bls.n	8009136 <__hexnan+0x10e>
 8009090:	2300      	movs	r3, #0
 8009092:	f1a4 0904 	sub.w	r9, r4, #4
 8009096:	f844 3c04 	str.w	r3, [r4, #-4]
 800909a:	f8cd b008 	str.w	fp, [sp, #8]
 800909e:	464c      	mov	r4, r9
 80090a0:	461d      	mov	r5, r3
 80090a2:	9903      	ldr	r1, [sp, #12]
 80090a4:	e7d7      	b.n	8009056 <__hexnan+0x2e>
 80090a6:	2a29      	cmp	r2, #41	@ 0x29
 80090a8:	d157      	bne.n	800915a <__hexnan+0x132>
 80090aa:	3102      	adds	r1, #2
 80090ac:	f8ca 1000 	str.w	r1, [sl]
 80090b0:	f1bb 0f00 	cmp.w	fp, #0
 80090b4:	d051      	beq.n	800915a <__hexnan+0x132>
 80090b6:	454c      	cmp	r4, r9
 80090b8:	d206      	bcs.n	80090c8 <__hexnan+0xa0>
 80090ba:	2d07      	cmp	r5, #7
 80090bc:	dc04      	bgt.n	80090c8 <__hexnan+0xa0>
 80090be:	462a      	mov	r2, r5
 80090c0:	4649      	mov	r1, r9
 80090c2:	4620      	mov	r0, r4
 80090c4:	f7ff ff8a 	bl	8008fdc <L_shift>
 80090c8:	4544      	cmp	r4, r8
 80090ca:	d936      	bls.n	800913a <__hexnan+0x112>
 80090cc:	f1a8 0204 	sub.w	r2, r8, #4
 80090d0:	4623      	mov	r3, r4
 80090d2:	f853 1b04 	ldr.w	r1, [r3], #4
 80090d6:	f842 1f04 	str.w	r1, [r2, #4]!
 80090da:	429f      	cmp	r7, r3
 80090dc:	d2f9      	bcs.n	80090d2 <__hexnan+0xaa>
 80090de:	1b3b      	subs	r3, r7, r4
 80090e0:	f023 0303 	bic.w	r3, r3, #3
 80090e4:	3304      	adds	r3, #4
 80090e6:	3401      	adds	r4, #1
 80090e8:	3e03      	subs	r6, #3
 80090ea:	42b4      	cmp	r4, r6
 80090ec:	bf88      	it	hi
 80090ee:	2304      	movhi	r3, #4
 80090f0:	4443      	add	r3, r8
 80090f2:	2200      	movs	r2, #0
 80090f4:	f843 2b04 	str.w	r2, [r3], #4
 80090f8:	429f      	cmp	r7, r3
 80090fa:	d2fb      	bcs.n	80090f4 <__hexnan+0xcc>
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	b91b      	cbnz	r3, 8009108 <__hexnan+0xe0>
 8009100:	4547      	cmp	r7, r8
 8009102:	d128      	bne.n	8009156 <__hexnan+0x12e>
 8009104:	2301      	movs	r3, #1
 8009106:	603b      	str	r3, [r7, #0]
 8009108:	2005      	movs	r0, #5
 800910a:	b007      	add	sp, #28
 800910c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009110:	3501      	adds	r5, #1
 8009112:	2d08      	cmp	r5, #8
 8009114:	f10b 0b01 	add.w	fp, fp, #1
 8009118:	dd06      	ble.n	8009128 <__hexnan+0x100>
 800911a:	4544      	cmp	r4, r8
 800911c:	d9c1      	bls.n	80090a2 <__hexnan+0x7a>
 800911e:	2300      	movs	r3, #0
 8009120:	f844 3c04 	str.w	r3, [r4, #-4]
 8009124:	2501      	movs	r5, #1
 8009126:	3c04      	subs	r4, #4
 8009128:	6822      	ldr	r2, [r4, #0]
 800912a:	f000 000f 	and.w	r0, r0, #15
 800912e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009132:	6020      	str	r0, [r4, #0]
 8009134:	e7b5      	b.n	80090a2 <__hexnan+0x7a>
 8009136:	2508      	movs	r5, #8
 8009138:	e7b3      	b.n	80090a2 <__hexnan+0x7a>
 800913a:	9b01      	ldr	r3, [sp, #4]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d0dd      	beq.n	80090fc <__hexnan+0xd4>
 8009140:	f1c3 0320 	rsb	r3, r3, #32
 8009144:	f04f 32ff 	mov.w	r2, #4294967295
 8009148:	40da      	lsrs	r2, r3
 800914a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800914e:	4013      	ands	r3, r2
 8009150:	f846 3c04 	str.w	r3, [r6, #-4]
 8009154:	e7d2      	b.n	80090fc <__hexnan+0xd4>
 8009156:	3f04      	subs	r7, #4
 8009158:	e7d0      	b.n	80090fc <__hexnan+0xd4>
 800915a:	2004      	movs	r0, #4
 800915c:	e7d5      	b.n	800910a <__hexnan+0xe2>

0800915e <__ascii_mbtowc>:
 800915e:	b082      	sub	sp, #8
 8009160:	b901      	cbnz	r1, 8009164 <__ascii_mbtowc+0x6>
 8009162:	a901      	add	r1, sp, #4
 8009164:	b142      	cbz	r2, 8009178 <__ascii_mbtowc+0x1a>
 8009166:	b14b      	cbz	r3, 800917c <__ascii_mbtowc+0x1e>
 8009168:	7813      	ldrb	r3, [r2, #0]
 800916a:	600b      	str	r3, [r1, #0]
 800916c:	7812      	ldrb	r2, [r2, #0]
 800916e:	1e10      	subs	r0, r2, #0
 8009170:	bf18      	it	ne
 8009172:	2001      	movne	r0, #1
 8009174:	b002      	add	sp, #8
 8009176:	4770      	bx	lr
 8009178:	4610      	mov	r0, r2
 800917a:	e7fb      	b.n	8009174 <__ascii_mbtowc+0x16>
 800917c:	f06f 0001 	mvn.w	r0, #1
 8009180:	e7f8      	b.n	8009174 <__ascii_mbtowc+0x16>

08009182 <_realloc_r>:
 8009182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009186:	4680      	mov	r8, r0
 8009188:	4615      	mov	r5, r2
 800918a:	460c      	mov	r4, r1
 800918c:	b921      	cbnz	r1, 8009198 <_realloc_r+0x16>
 800918e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009192:	4611      	mov	r1, r2
 8009194:	f7fd be60 	b.w	8006e58 <_malloc_r>
 8009198:	b92a      	cbnz	r2, 80091a6 <_realloc_r+0x24>
 800919a:	f7fd fde9 	bl	8006d70 <_free_r>
 800919e:	2400      	movs	r4, #0
 80091a0:	4620      	mov	r0, r4
 80091a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091a6:	f000 f840 	bl	800922a <_malloc_usable_size_r>
 80091aa:	4285      	cmp	r5, r0
 80091ac:	4606      	mov	r6, r0
 80091ae:	d802      	bhi.n	80091b6 <_realloc_r+0x34>
 80091b0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80091b4:	d8f4      	bhi.n	80091a0 <_realloc_r+0x1e>
 80091b6:	4629      	mov	r1, r5
 80091b8:	4640      	mov	r0, r8
 80091ba:	f7fd fe4d 	bl	8006e58 <_malloc_r>
 80091be:	4607      	mov	r7, r0
 80091c0:	2800      	cmp	r0, #0
 80091c2:	d0ec      	beq.n	800919e <_realloc_r+0x1c>
 80091c4:	42b5      	cmp	r5, r6
 80091c6:	462a      	mov	r2, r5
 80091c8:	4621      	mov	r1, r4
 80091ca:	bf28      	it	cs
 80091cc:	4632      	movcs	r2, r6
 80091ce:	f7ff fc45 	bl	8008a5c <memcpy>
 80091d2:	4621      	mov	r1, r4
 80091d4:	4640      	mov	r0, r8
 80091d6:	f7fd fdcb 	bl	8006d70 <_free_r>
 80091da:	463c      	mov	r4, r7
 80091dc:	e7e0      	b.n	80091a0 <_realloc_r+0x1e>

080091de <__ascii_wctomb>:
 80091de:	4603      	mov	r3, r0
 80091e0:	4608      	mov	r0, r1
 80091e2:	b141      	cbz	r1, 80091f6 <__ascii_wctomb+0x18>
 80091e4:	2aff      	cmp	r2, #255	@ 0xff
 80091e6:	d904      	bls.n	80091f2 <__ascii_wctomb+0x14>
 80091e8:	228a      	movs	r2, #138	@ 0x8a
 80091ea:	601a      	str	r2, [r3, #0]
 80091ec:	f04f 30ff 	mov.w	r0, #4294967295
 80091f0:	4770      	bx	lr
 80091f2:	700a      	strb	r2, [r1, #0]
 80091f4:	2001      	movs	r0, #1
 80091f6:	4770      	bx	lr

080091f8 <fiprintf>:
 80091f8:	b40e      	push	{r1, r2, r3}
 80091fa:	b503      	push	{r0, r1, lr}
 80091fc:	4601      	mov	r1, r0
 80091fe:	ab03      	add	r3, sp, #12
 8009200:	4805      	ldr	r0, [pc, #20]	@ (8009218 <fiprintf+0x20>)
 8009202:	f853 2b04 	ldr.w	r2, [r3], #4
 8009206:	6800      	ldr	r0, [r0, #0]
 8009208:	9301      	str	r3, [sp, #4]
 800920a:	f000 f83f 	bl	800928c <_vfiprintf_r>
 800920e:	b002      	add	sp, #8
 8009210:	f85d eb04 	ldr.w	lr, [sp], #4
 8009214:	b003      	add	sp, #12
 8009216:	4770      	bx	lr
 8009218:	20000018 	.word	0x20000018

0800921c <abort>:
 800921c:	b508      	push	{r3, lr}
 800921e:	2006      	movs	r0, #6
 8009220:	f000 fa08 	bl	8009634 <raise>
 8009224:	2001      	movs	r0, #1
 8009226:	f7f8 fa86 	bl	8001736 <_exit>

0800922a <_malloc_usable_size_r>:
 800922a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800922e:	1f18      	subs	r0, r3, #4
 8009230:	2b00      	cmp	r3, #0
 8009232:	bfbc      	itt	lt
 8009234:	580b      	ldrlt	r3, [r1, r0]
 8009236:	18c0      	addlt	r0, r0, r3
 8009238:	4770      	bx	lr

0800923a <__sfputc_r>:
 800923a:	6893      	ldr	r3, [r2, #8]
 800923c:	3b01      	subs	r3, #1
 800923e:	2b00      	cmp	r3, #0
 8009240:	b410      	push	{r4}
 8009242:	6093      	str	r3, [r2, #8]
 8009244:	da08      	bge.n	8009258 <__sfputc_r+0x1e>
 8009246:	6994      	ldr	r4, [r2, #24]
 8009248:	42a3      	cmp	r3, r4
 800924a:	db01      	blt.n	8009250 <__sfputc_r+0x16>
 800924c:	290a      	cmp	r1, #10
 800924e:	d103      	bne.n	8009258 <__sfputc_r+0x1e>
 8009250:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009254:	f000 b932 	b.w	80094bc <__swbuf_r>
 8009258:	6813      	ldr	r3, [r2, #0]
 800925a:	1c58      	adds	r0, r3, #1
 800925c:	6010      	str	r0, [r2, #0]
 800925e:	7019      	strb	r1, [r3, #0]
 8009260:	4608      	mov	r0, r1
 8009262:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009266:	4770      	bx	lr

08009268 <__sfputs_r>:
 8009268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800926a:	4606      	mov	r6, r0
 800926c:	460f      	mov	r7, r1
 800926e:	4614      	mov	r4, r2
 8009270:	18d5      	adds	r5, r2, r3
 8009272:	42ac      	cmp	r4, r5
 8009274:	d101      	bne.n	800927a <__sfputs_r+0x12>
 8009276:	2000      	movs	r0, #0
 8009278:	e007      	b.n	800928a <__sfputs_r+0x22>
 800927a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800927e:	463a      	mov	r2, r7
 8009280:	4630      	mov	r0, r6
 8009282:	f7ff ffda 	bl	800923a <__sfputc_r>
 8009286:	1c43      	adds	r3, r0, #1
 8009288:	d1f3      	bne.n	8009272 <__sfputs_r+0xa>
 800928a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800928c <_vfiprintf_r>:
 800928c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009290:	460d      	mov	r5, r1
 8009292:	b09d      	sub	sp, #116	@ 0x74
 8009294:	4614      	mov	r4, r2
 8009296:	4698      	mov	r8, r3
 8009298:	4606      	mov	r6, r0
 800929a:	b118      	cbz	r0, 80092a4 <_vfiprintf_r+0x18>
 800929c:	6a03      	ldr	r3, [r0, #32]
 800929e:	b90b      	cbnz	r3, 80092a4 <_vfiprintf_r+0x18>
 80092a0:	f7fc fdfa 	bl	8005e98 <__sinit>
 80092a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80092a6:	07d9      	lsls	r1, r3, #31
 80092a8:	d405      	bmi.n	80092b6 <_vfiprintf_r+0x2a>
 80092aa:	89ab      	ldrh	r3, [r5, #12]
 80092ac:	059a      	lsls	r2, r3, #22
 80092ae:	d402      	bmi.n	80092b6 <_vfiprintf_r+0x2a>
 80092b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80092b2:	f7fc ff08 	bl	80060c6 <__retarget_lock_acquire_recursive>
 80092b6:	89ab      	ldrh	r3, [r5, #12]
 80092b8:	071b      	lsls	r3, r3, #28
 80092ba:	d501      	bpl.n	80092c0 <_vfiprintf_r+0x34>
 80092bc:	692b      	ldr	r3, [r5, #16]
 80092be:	b99b      	cbnz	r3, 80092e8 <_vfiprintf_r+0x5c>
 80092c0:	4629      	mov	r1, r5
 80092c2:	4630      	mov	r0, r6
 80092c4:	f000 f938 	bl	8009538 <__swsetup_r>
 80092c8:	b170      	cbz	r0, 80092e8 <_vfiprintf_r+0x5c>
 80092ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80092cc:	07dc      	lsls	r4, r3, #31
 80092ce:	d504      	bpl.n	80092da <_vfiprintf_r+0x4e>
 80092d0:	f04f 30ff 	mov.w	r0, #4294967295
 80092d4:	b01d      	add	sp, #116	@ 0x74
 80092d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092da:	89ab      	ldrh	r3, [r5, #12]
 80092dc:	0598      	lsls	r0, r3, #22
 80092de:	d4f7      	bmi.n	80092d0 <_vfiprintf_r+0x44>
 80092e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80092e2:	f7fc fef1 	bl	80060c8 <__retarget_lock_release_recursive>
 80092e6:	e7f3      	b.n	80092d0 <_vfiprintf_r+0x44>
 80092e8:	2300      	movs	r3, #0
 80092ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80092ec:	2320      	movs	r3, #32
 80092ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80092f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80092f6:	2330      	movs	r3, #48	@ 0x30
 80092f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80094a8 <_vfiprintf_r+0x21c>
 80092fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009300:	f04f 0901 	mov.w	r9, #1
 8009304:	4623      	mov	r3, r4
 8009306:	469a      	mov	sl, r3
 8009308:	f813 2b01 	ldrb.w	r2, [r3], #1
 800930c:	b10a      	cbz	r2, 8009312 <_vfiprintf_r+0x86>
 800930e:	2a25      	cmp	r2, #37	@ 0x25
 8009310:	d1f9      	bne.n	8009306 <_vfiprintf_r+0x7a>
 8009312:	ebba 0b04 	subs.w	fp, sl, r4
 8009316:	d00b      	beq.n	8009330 <_vfiprintf_r+0xa4>
 8009318:	465b      	mov	r3, fp
 800931a:	4622      	mov	r2, r4
 800931c:	4629      	mov	r1, r5
 800931e:	4630      	mov	r0, r6
 8009320:	f7ff ffa2 	bl	8009268 <__sfputs_r>
 8009324:	3001      	adds	r0, #1
 8009326:	f000 80a7 	beq.w	8009478 <_vfiprintf_r+0x1ec>
 800932a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800932c:	445a      	add	r2, fp
 800932e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009330:	f89a 3000 	ldrb.w	r3, [sl]
 8009334:	2b00      	cmp	r3, #0
 8009336:	f000 809f 	beq.w	8009478 <_vfiprintf_r+0x1ec>
 800933a:	2300      	movs	r3, #0
 800933c:	f04f 32ff 	mov.w	r2, #4294967295
 8009340:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009344:	f10a 0a01 	add.w	sl, sl, #1
 8009348:	9304      	str	r3, [sp, #16]
 800934a:	9307      	str	r3, [sp, #28]
 800934c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009350:	931a      	str	r3, [sp, #104]	@ 0x68
 8009352:	4654      	mov	r4, sl
 8009354:	2205      	movs	r2, #5
 8009356:	f814 1b01 	ldrb.w	r1, [r4], #1
 800935a:	4853      	ldr	r0, [pc, #332]	@ (80094a8 <_vfiprintf_r+0x21c>)
 800935c:	f7f6 ff38 	bl	80001d0 <memchr>
 8009360:	9a04      	ldr	r2, [sp, #16]
 8009362:	b9d8      	cbnz	r0, 800939c <_vfiprintf_r+0x110>
 8009364:	06d1      	lsls	r1, r2, #27
 8009366:	bf44      	itt	mi
 8009368:	2320      	movmi	r3, #32
 800936a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800936e:	0713      	lsls	r3, r2, #28
 8009370:	bf44      	itt	mi
 8009372:	232b      	movmi	r3, #43	@ 0x2b
 8009374:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009378:	f89a 3000 	ldrb.w	r3, [sl]
 800937c:	2b2a      	cmp	r3, #42	@ 0x2a
 800937e:	d015      	beq.n	80093ac <_vfiprintf_r+0x120>
 8009380:	9a07      	ldr	r2, [sp, #28]
 8009382:	4654      	mov	r4, sl
 8009384:	2000      	movs	r0, #0
 8009386:	f04f 0c0a 	mov.w	ip, #10
 800938a:	4621      	mov	r1, r4
 800938c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009390:	3b30      	subs	r3, #48	@ 0x30
 8009392:	2b09      	cmp	r3, #9
 8009394:	d94b      	bls.n	800942e <_vfiprintf_r+0x1a2>
 8009396:	b1b0      	cbz	r0, 80093c6 <_vfiprintf_r+0x13a>
 8009398:	9207      	str	r2, [sp, #28]
 800939a:	e014      	b.n	80093c6 <_vfiprintf_r+0x13a>
 800939c:	eba0 0308 	sub.w	r3, r0, r8
 80093a0:	fa09 f303 	lsl.w	r3, r9, r3
 80093a4:	4313      	orrs	r3, r2
 80093a6:	9304      	str	r3, [sp, #16]
 80093a8:	46a2      	mov	sl, r4
 80093aa:	e7d2      	b.n	8009352 <_vfiprintf_r+0xc6>
 80093ac:	9b03      	ldr	r3, [sp, #12]
 80093ae:	1d19      	adds	r1, r3, #4
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	9103      	str	r1, [sp, #12]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	bfbb      	ittet	lt
 80093b8:	425b      	neglt	r3, r3
 80093ba:	f042 0202 	orrlt.w	r2, r2, #2
 80093be:	9307      	strge	r3, [sp, #28]
 80093c0:	9307      	strlt	r3, [sp, #28]
 80093c2:	bfb8      	it	lt
 80093c4:	9204      	strlt	r2, [sp, #16]
 80093c6:	7823      	ldrb	r3, [r4, #0]
 80093c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80093ca:	d10a      	bne.n	80093e2 <_vfiprintf_r+0x156>
 80093cc:	7863      	ldrb	r3, [r4, #1]
 80093ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80093d0:	d132      	bne.n	8009438 <_vfiprintf_r+0x1ac>
 80093d2:	9b03      	ldr	r3, [sp, #12]
 80093d4:	1d1a      	adds	r2, r3, #4
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	9203      	str	r2, [sp, #12]
 80093da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80093de:	3402      	adds	r4, #2
 80093e0:	9305      	str	r3, [sp, #20]
 80093e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80094b8 <_vfiprintf_r+0x22c>
 80093e6:	7821      	ldrb	r1, [r4, #0]
 80093e8:	2203      	movs	r2, #3
 80093ea:	4650      	mov	r0, sl
 80093ec:	f7f6 fef0 	bl	80001d0 <memchr>
 80093f0:	b138      	cbz	r0, 8009402 <_vfiprintf_r+0x176>
 80093f2:	9b04      	ldr	r3, [sp, #16]
 80093f4:	eba0 000a 	sub.w	r0, r0, sl
 80093f8:	2240      	movs	r2, #64	@ 0x40
 80093fa:	4082      	lsls	r2, r0
 80093fc:	4313      	orrs	r3, r2
 80093fe:	3401      	adds	r4, #1
 8009400:	9304      	str	r3, [sp, #16]
 8009402:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009406:	4829      	ldr	r0, [pc, #164]	@ (80094ac <_vfiprintf_r+0x220>)
 8009408:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800940c:	2206      	movs	r2, #6
 800940e:	f7f6 fedf 	bl	80001d0 <memchr>
 8009412:	2800      	cmp	r0, #0
 8009414:	d03f      	beq.n	8009496 <_vfiprintf_r+0x20a>
 8009416:	4b26      	ldr	r3, [pc, #152]	@ (80094b0 <_vfiprintf_r+0x224>)
 8009418:	bb1b      	cbnz	r3, 8009462 <_vfiprintf_r+0x1d6>
 800941a:	9b03      	ldr	r3, [sp, #12]
 800941c:	3307      	adds	r3, #7
 800941e:	f023 0307 	bic.w	r3, r3, #7
 8009422:	3308      	adds	r3, #8
 8009424:	9303      	str	r3, [sp, #12]
 8009426:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009428:	443b      	add	r3, r7
 800942a:	9309      	str	r3, [sp, #36]	@ 0x24
 800942c:	e76a      	b.n	8009304 <_vfiprintf_r+0x78>
 800942e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009432:	460c      	mov	r4, r1
 8009434:	2001      	movs	r0, #1
 8009436:	e7a8      	b.n	800938a <_vfiprintf_r+0xfe>
 8009438:	2300      	movs	r3, #0
 800943a:	3401      	adds	r4, #1
 800943c:	9305      	str	r3, [sp, #20]
 800943e:	4619      	mov	r1, r3
 8009440:	f04f 0c0a 	mov.w	ip, #10
 8009444:	4620      	mov	r0, r4
 8009446:	f810 2b01 	ldrb.w	r2, [r0], #1
 800944a:	3a30      	subs	r2, #48	@ 0x30
 800944c:	2a09      	cmp	r2, #9
 800944e:	d903      	bls.n	8009458 <_vfiprintf_r+0x1cc>
 8009450:	2b00      	cmp	r3, #0
 8009452:	d0c6      	beq.n	80093e2 <_vfiprintf_r+0x156>
 8009454:	9105      	str	r1, [sp, #20]
 8009456:	e7c4      	b.n	80093e2 <_vfiprintf_r+0x156>
 8009458:	fb0c 2101 	mla	r1, ip, r1, r2
 800945c:	4604      	mov	r4, r0
 800945e:	2301      	movs	r3, #1
 8009460:	e7f0      	b.n	8009444 <_vfiprintf_r+0x1b8>
 8009462:	ab03      	add	r3, sp, #12
 8009464:	9300      	str	r3, [sp, #0]
 8009466:	462a      	mov	r2, r5
 8009468:	4b12      	ldr	r3, [pc, #72]	@ (80094b4 <_vfiprintf_r+0x228>)
 800946a:	a904      	add	r1, sp, #16
 800946c:	4630      	mov	r0, r6
 800946e:	f7fb febb 	bl	80051e8 <_printf_float>
 8009472:	4607      	mov	r7, r0
 8009474:	1c78      	adds	r0, r7, #1
 8009476:	d1d6      	bne.n	8009426 <_vfiprintf_r+0x19a>
 8009478:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800947a:	07d9      	lsls	r1, r3, #31
 800947c:	d405      	bmi.n	800948a <_vfiprintf_r+0x1fe>
 800947e:	89ab      	ldrh	r3, [r5, #12]
 8009480:	059a      	lsls	r2, r3, #22
 8009482:	d402      	bmi.n	800948a <_vfiprintf_r+0x1fe>
 8009484:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009486:	f7fc fe1f 	bl	80060c8 <__retarget_lock_release_recursive>
 800948a:	89ab      	ldrh	r3, [r5, #12]
 800948c:	065b      	lsls	r3, r3, #25
 800948e:	f53f af1f 	bmi.w	80092d0 <_vfiprintf_r+0x44>
 8009492:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009494:	e71e      	b.n	80092d4 <_vfiprintf_r+0x48>
 8009496:	ab03      	add	r3, sp, #12
 8009498:	9300      	str	r3, [sp, #0]
 800949a:	462a      	mov	r2, r5
 800949c:	4b05      	ldr	r3, [pc, #20]	@ (80094b4 <_vfiprintf_r+0x228>)
 800949e:	a904      	add	r1, sp, #16
 80094a0:	4630      	mov	r0, r6
 80094a2:	f7fc f939 	bl	8005718 <_printf_i>
 80094a6:	e7e4      	b.n	8009472 <_vfiprintf_r+0x1e6>
 80094a8:	08009dd1 	.word	0x08009dd1
 80094ac:	08009ddb 	.word	0x08009ddb
 80094b0:	080051e9 	.word	0x080051e9
 80094b4:	08009269 	.word	0x08009269
 80094b8:	08009dd7 	.word	0x08009dd7

080094bc <__swbuf_r>:
 80094bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094be:	460e      	mov	r6, r1
 80094c0:	4614      	mov	r4, r2
 80094c2:	4605      	mov	r5, r0
 80094c4:	b118      	cbz	r0, 80094ce <__swbuf_r+0x12>
 80094c6:	6a03      	ldr	r3, [r0, #32]
 80094c8:	b90b      	cbnz	r3, 80094ce <__swbuf_r+0x12>
 80094ca:	f7fc fce5 	bl	8005e98 <__sinit>
 80094ce:	69a3      	ldr	r3, [r4, #24]
 80094d0:	60a3      	str	r3, [r4, #8]
 80094d2:	89a3      	ldrh	r3, [r4, #12]
 80094d4:	071a      	lsls	r2, r3, #28
 80094d6:	d501      	bpl.n	80094dc <__swbuf_r+0x20>
 80094d8:	6923      	ldr	r3, [r4, #16]
 80094da:	b943      	cbnz	r3, 80094ee <__swbuf_r+0x32>
 80094dc:	4621      	mov	r1, r4
 80094de:	4628      	mov	r0, r5
 80094e0:	f000 f82a 	bl	8009538 <__swsetup_r>
 80094e4:	b118      	cbz	r0, 80094ee <__swbuf_r+0x32>
 80094e6:	f04f 37ff 	mov.w	r7, #4294967295
 80094ea:	4638      	mov	r0, r7
 80094ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094ee:	6823      	ldr	r3, [r4, #0]
 80094f0:	6922      	ldr	r2, [r4, #16]
 80094f2:	1a98      	subs	r0, r3, r2
 80094f4:	6963      	ldr	r3, [r4, #20]
 80094f6:	b2f6      	uxtb	r6, r6
 80094f8:	4283      	cmp	r3, r0
 80094fa:	4637      	mov	r7, r6
 80094fc:	dc05      	bgt.n	800950a <__swbuf_r+0x4e>
 80094fe:	4621      	mov	r1, r4
 8009500:	4628      	mov	r0, r5
 8009502:	f7ff fa47 	bl	8008994 <_fflush_r>
 8009506:	2800      	cmp	r0, #0
 8009508:	d1ed      	bne.n	80094e6 <__swbuf_r+0x2a>
 800950a:	68a3      	ldr	r3, [r4, #8]
 800950c:	3b01      	subs	r3, #1
 800950e:	60a3      	str	r3, [r4, #8]
 8009510:	6823      	ldr	r3, [r4, #0]
 8009512:	1c5a      	adds	r2, r3, #1
 8009514:	6022      	str	r2, [r4, #0]
 8009516:	701e      	strb	r6, [r3, #0]
 8009518:	6962      	ldr	r2, [r4, #20]
 800951a:	1c43      	adds	r3, r0, #1
 800951c:	429a      	cmp	r2, r3
 800951e:	d004      	beq.n	800952a <__swbuf_r+0x6e>
 8009520:	89a3      	ldrh	r3, [r4, #12]
 8009522:	07db      	lsls	r3, r3, #31
 8009524:	d5e1      	bpl.n	80094ea <__swbuf_r+0x2e>
 8009526:	2e0a      	cmp	r6, #10
 8009528:	d1df      	bne.n	80094ea <__swbuf_r+0x2e>
 800952a:	4621      	mov	r1, r4
 800952c:	4628      	mov	r0, r5
 800952e:	f7ff fa31 	bl	8008994 <_fflush_r>
 8009532:	2800      	cmp	r0, #0
 8009534:	d0d9      	beq.n	80094ea <__swbuf_r+0x2e>
 8009536:	e7d6      	b.n	80094e6 <__swbuf_r+0x2a>

08009538 <__swsetup_r>:
 8009538:	b538      	push	{r3, r4, r5, lr}
 800953a:	4b29      	ldr	r3, [pc, #164]	@ (80095e0 <__swsetup_r+0xa8>)
 800953c:	4605      	mov	r5, r0
 800953e:	6818      	ldr	r0, [r3, #0]
 8009540:	460c      	mov	r4, r1
 8009542:	b118      	cbz	r0, 800954c <__swsetup_r+0x14>
 8009544:	6a03      	ldr	r3, [r0, #32]
 8009546:	b90b      	cbnz	r3, 800954c <__swsetup_r+0x14>
 8009548:	f7fc fca6 	bl	8005e98 <__sinit>
 800954c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009550:	0719      	lsls	r1, r3, #28
 8009552:	d422      	bmi.n	800959a <__swsetup_r+0x62>
 8009554:	06da      	lsls	r2, r3, #27
 8009556:	d407      	bmi.n	8009568 <__swsetup_r+0x30>
 8009558:	2209      	movs	r2, #9
 800955a:	602a      	str	r2, [r5, #0]
 800955c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009560:	81a3      	strh	r3, [r4, #12]
 8009562:	f04f 30ff 	mov.w	r0, #4294967295
 8009566:	e033      	b.n	80095d0 <__swsetup_r+0x98>
 8009568:	0758      	lsls	r0, r3, #29
 800956a:	d512      	bpl.n	8009592 <__swsetup_r+0x5a>
 800956c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800956e:	b141      	cbz	r1, 8009582 <__swsetup_r+0x4a>
 8009570:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009574:	4299      	cmp	r1, r3
 8009576:	d002      	beq.n	800957e <__swsetup_r+0x46>
 8009578:	4628      	mov	r0, r5
 800957a:	f7fd fbf9 	bl	8006d70 <_free_r>
 800957e:	2300      	movs	r3, #0
 8009580:	6363      	str	r3, [r4, #52]	@ 0x34
 8009582:	89a3      	ldrh	r3, [r4, #12]
 8009584:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009588:	81a3      	strh	r3, [r4, #12]
 800958a:	2300      	movs	r3, #0
 800958c:	6063      	str	r3, [r4, #4]
 800958e:	6923      	ldr	r3, [r4, #16]
 8009590:	6023      	str	r3, [r4, #0]
 8009592:	89a3      	ldrh	r3, [r4, #12]
 8009594:	f043 0308 	orr.w	r3, r3, #8
 8009598:	81a3      	strh	r3, [r4, #12]
 800959a:	6923      	ldr	r3, [r4, #16]
 800959c:	b94b      	cbnz	r3, 80095b2 <__swsetup_r+0x7a>
 800959e:	89a3      	ldrh	r3, [r4, #12]
 80095a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80095a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095a8:	d003      	beq.n	80095b2 <__swsetup_r+0x7a>
 80095aa:	4621      	mov	r1, r4
 80095ac:	4628      	mov	r0, r5
 80095ae:	f000 f883 	bl	80096b8 <__smakebuf_r>
 80095b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095b6:	f013 0201 	ands.w	r2, r3, #1
 80095ba:	d00a      	beq.n	80095d2 <__swsetup_r+0x9a>
 80095bc:	2200      	movs	r2, #0
 80095be:	60a2      	str	r2, [r4, #8]
 80095c0:	6962      	ldr	r2, [r4, #20]
 80095c2:	4252      	negs	r2, r2
 80095c4:	61a2      	str	r2, [r4, #24]
 80095c6:	6922      	ldr	r2, [r4, #16]
 80095c8:	b942      	cbnz	r2, 80095dc <__swsetup_r+0xa4>
 80095ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80095ce:	d1c5      	bne.n	800955c <__swsetup_r+0x24>
 80095d0:	bd38      	pop	{r3, r4, r5, pc}
 80095d2:	0799      	lsls	r1, r3, #30
 80095d4:	bf58      	it	pl
 80095d6:	6962      	ldrpl	r2, [r4, #20]
 80095d8:	60a2      	str	r2, [r4, #8]
 80095da:	e7f4      	b.n	80095c6 <__swsetup_r+0x8e>
 80095dc:	2000      	movs	r0, #0
 80095de:	e7f7      	b.n	80095d0 <__swsetup_r+0x98>
 80095e0:	20000018 	.word	0x20000018

080095e4 <_raise_r>:
 80095e4:	291f      	cmp	r1, #31
 80095e6:	b538      	push	{r3, r4, r5, lr}
 80095e8:	4605      	mov	r5, r0
 80095ea:	460c      	mov	r4, r1
 80095ec:	d904      	bls.n	80095f8 <_raise_r+0x14>
 80095ee:	2316      	movs	r3, #22
 80095f0:	6003      	str	r3, [r0, #0]
 80095f2:	f04f 30ff 	mov.w	r0, #4294967295
 80095f6:	bd38      	pop	{r3, r4, r5, pc}
 80095f8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80095fa:	b112      	cbz	r2, 8009602 <_raise_r+0x1e>
 80095fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009600:	b94b      	cbnz	r3, 8009616 <_raise_r+0x32>
 8009602:	4628      	mov	r0, r5
 8009604:	f000 f830 	bl	8009668 <_getpid_r>
 8009608:	4622      	mov	r2, r4
 800960a:	4601      	mov	r1, r0
 800960c:	4628      	mov	r0, r5
 800960e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009612:	f000 b817 	b.w	8009644 <_kill_r>
 8009616:	2b01      	cmp	r3, #1
 8009618:	d00a      	beq.n	8009630 <_raise_r+0x4c>
 800961a:	1c59      	adds	r1, r3, #1
 800961c:	d103      	bne.n	8009626 <_raise_r+0x42>
 800961e:	2316      	movs	r3, #22
 8009620:	6003      	str	r3, [r0, #0]
 8009622:	2001      	movs	r0, #1
 8009624:	e7e7      	b.n	80095f6 <_raise_r+0x12>
 8009626:	2100      	movs	r1, #0
 8009628:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800962c:	4620      	mov	r0, r4
 800962e:	4798      	blx	r3
 8009630:	2000      	movs	r0, #0
 8009632:	e7e0      	b.n	80095f6 <_raise_r+0x12>

08009634 <raise>:
 8009634:	4b02      	ldr	r3, [pc, #8]	@ (8009640 <raise+0xc>)
 8009636:	4601      	mov	r1, r0
 8009638:	6818      	ldr	r0, [r3, #0]
 800963a:	f7ff bfd3 	b.w	80095e4 <_raise_r>
 800963e:	bf00      	nop
 8009640:	20000018 	.word	0x20000018

08009644 <_kill_r>:
 8009644:	b538      	push	{r3, r4, r5, lr}
 8009646:	4d07      	ldr	r5, [pc, #28]	@ (8009664 <_kill_r+0x20>)
 8009648:	2300      	movs	r3, #0
 800964a:	4604      	mov	r4, r0
 800964c:	4608      	mov	r0, r1
 800964e:	4611      	mov	r1, r2
 8009650:	602b      	str	r3, [r5, #0]
 8009652:	f7f8 f860 	bl	8001716 <_kill>
 8009656:	1c43      	adds	r3, r0, #1
 8009658:	d102      	bne.n	8009660 <_kill_r+0x1c>
 800965a:	682b      	ldr	r3, [r5, #0]
 800965c:	b103      	cbz	r3, 8009660 <_kill_r+0x1c>
 800965e:	6023      	str	r3, [r4, #0]
 8009660:	bd38      	pop	{r3, r4, r5, pc}
 8009662:	bf00      	nop
 8009664:	2000043c 	.word	0x2000043c

08009668 <_getpid_r>:
 8009668:	f7f8 b84d 	b.w	8001706 <_getpid>

0800966c <__swhatbuf_r>:
 800966c:	b570      	push	{r4, r5, r6, lr}
 800966e:	460c      	mov	r4, r1
 8009670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009674:	2900      	cmp	r1, #0
 8009676:	b096      	sub	sp, #88	@ 0x58
 8009678:	4615      	mov	r5, r2
 800967a:	461e      	mov	r6, r3
 800967c:	da0d      	bge.n	800969a <__swhatbuf_r+0x2e>
 800967e:	89a3      	ldrh	r3, [r4, #12]
 8009680:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009684:	f04f 0100 	mov.w	r1, #0
 8009688:	bf14      	ite	ne
 800968a:	2340      	movne	r3, #64	@ 0x40
 800968c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009690:	2000      	movs	r0, #0
 8009692:	6031      	str	r1, [r6, #0]
 8009694:	602b      	str	r3, [r5, #0]
 8009696:	b016      	add	sp, #88	@ 0x58
 8009698:	bd70      	pop	{r4, r5, r6, pc}
 800969a:	466a      	mov	r2, sp
 800969c:	f000 f848 	bl	8009730 <_fstat_r>
 80096a0:	2800      	cmp	r0, #0
 80096a2:	dbec      	blt.n	800967e <__swhatbuf_r+0x12>
 80096a4:	9901      	ldr	r1, [sp, #4]
 80096a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80096aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80096ae:	4259      	negs	r1, r3
 80096b0:	4159      	adcs	r1, r3
 80096b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80096b6:	e7eb      	b.n	8009690 <__swhatbuf_r+0x24>

080096b8 <__smakebuf_r>:
 80096b8:	898b      	ldrh	r3, [r1, #12]
 80096ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096bc:	079d      	lsls	r5, r3, #30
 80096be:	4606      	mov	r6, r0
 80096c0:	460c      	mov	r4, r1
 80096c2:	d507      	bpl.n	80096d4 <__smakebuf_r+0x1c>
 80096c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80096c8:	6023      	str	r3, [r4, #0]
 80096ca:	6123      	str	r3, [r4, #16]
 80096cc:	2301      	movs	r3, #1
 80096ce:	6163      	str	r3, [r4, #20]
 80096d0:	b003      	add	sp, #12
 80096d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096d4:	ab01      	add	r3, sp, #4
 80096d6:	466a      	mov	r2, sp
 80096d8:	f7ff ffc8 	bl	800966c <__swhatbuf_r>
 80096dc:	9f00      	ldr	r7, [sp, #0]
 80096de:	4605      	mov	r5, r0
 80096e0:	4639      	mov	r1, r7
 80096e2:	4630      	mov	r0, r6
 80096e4:	f7fd fbb8 	bl	8006e58 <_malloc_r>
 80096e8:	b948      	cbnz	r0, 80096fe <__smakebuf_r+0x46>
 80096ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096ee:	059a      	lsls	r2, r3, #22
 80096f0:	d4ee      	bmi.n	80096d0 <__smakebuf_r+0x18>
 80096f2:	f023 0303 	bic.w	r3, r3, #3
 80096f6:	f043 0302 	orr.w	r3, r3, #2
 80096fa:	81a3      	strh	r3, [r4, #12]
 80096fc:	e7e2      	b.n	80096c4 <__smakebuf_r+0xc>
 80096fe:	89a3      	ldrh	r3, [r4, #12]
 8009700:	6020      	str	r0, [r4, #0]
 8009702:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009706:	81a3      	strh	r3, [r4, #12]
 8009708:	9b01      	ldr	r3, [sp, #4]
 800970a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800970e:	b15b      	cbz	r3, 8009728 <__smakebuf_r+0x70>
 8009710:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009714:	4630      	mov	r0, r6
 8009716:	f000 f81d 	bl	8009754 <_isatty_r>
 800971a:	b128      	cbz	r0, 8009728 <__smakebuf_r+0x70>
 800971c:	89a3      	ldrh	r3, [r4, #12]
 800971e:	f023 0303 	bic.w	r3, r3, #3
 8009722:	f043 0301 	orr.w	r3, r3, #1
 8009726:	81a3      	strh	r3, [r4, #12]
 8009728:	89a3      	ldrh	r3, [r4, #12]
 800972a:	431d      	orrs	r5, r3
 800972c:	81a5      	strh	r5, [r4, #12]
 800972e:	e7cf      	b.n	80096d0 <__smakebuf_r+0x18>

08009730 <_fstat_r>:
 8009730:	b538      	push	{r3, r4, r5, lr}
 8009732:	4d07      	ldr	r5, [pc, #28]	@ (8009750 <_fstat_r+0x20>)
 8009734:	2300      	movs	r3, #0
 8009736:	4604      	mov	r4, r0
 8009738:	4608      	mov	r0, r1
 800973a:	4611      	mov	r1, r2
 800973c:	602b      	str	r3, [r5, #0]
 800973e:	f7f8 f84a 	bl	80017d6 <_fstat>
 8009742:	1c43      	adds	r3, r0, #1
 8009744:	d102      	bne.n	800974c <_fstat_r+0x1c>
 8009746:	682b      	ldr	r3, [r5, #0]
 8009748:	b103      	cbz	r3, 800974c <_fstat_r+0x1c>
 800974a:	6023      	str	r3, [r4, #0]
 800974c:	bd38      	pop	{r3, r4, r5, pc}
 800974e:	bf00      	nop
 8009750:	2000043c 	.word	0x2000043c

08009754 <_isatty_r>:
 8009754:	b538      	push	{r3, r4, r5, lr}
 8009756:	4d06      	ldr	r5, [pc, #24]	@ (8009770 <_isatty_r+0x1c>)
 8009758:	2300      	movs	r3, #0
 800975a:	4604      	mov	r4, r0
 800975c:	4608      	mov	r0, r1
 800975e:	602b      	str	r3, [r5, #0]
 8009760:	f7f8 f849 	bl	80017f6 <_isatty>
 8009764:	1c43      	adds	r3, r0, #1
 8009766:	d102      	bne.n	800976e <_isatty_r+0x1a>
 8009768:	682b      	ldr	r3, [r5, #0]
 800976a:	b103      	cbz	r3, 800976e <_isatty_r+0x1a>
 800976c:	6023      	str	r3, [r4, #0]
 800976e:	bd38      	pop	{r3, r4, r5, pc}
 8009770:	2000043c 	.word	0x2000043c

08009774 <sqrt>:
 8009774:	b538      	push	{r3, r4, r5, lr}
 8009776:	ed2d 8b02 	vpush	{d8}
 800977a:	ec55 4b10 	vmov	r4, r5, d0
 800977e:	f000 f825 	bl	80097cc <__ieee754_sqrt>
 8009782:	4622      	mov	r2, r4
 8009784:	462b      	mov	r3, r5
 8009786:	4620      	mov	r0, r4
 8009788:	4629      	mov	r1, r5
 800978a:	eeb0 8a40 	vmov.f32	s16, s0
 800978e:	eef0 8a60 	vmov.f32	s17, s1
 8009792:	f7f7 f9cb 	bl	8000b2c <__aeabi_dcmpun>
 8009796:	b990      	cbnz	r0, 80097be <sqrt+0x4a>
 8009798:	2200      	movs	r2, #0
 800979a:	2300      	movs	r3, #0
 800979c:	4620      	mov	r0, r4
 800979e:	4629      	mov	r1, r5
 80097a0:	f7f7 f99c 	bl	8000adc <__aeabi_dcmplt>
 80097a4:	b158      	cbz	r0, 80097be <sqrt+0x4a>
 80097a6:	f7fc fc63 	bl	8006070 <__errno>
 80097aa:	2321      	movs	r3, #33	@ 0x21
 80097ac:	6003      	str	r3, [r0, #0]
 80097ae:	2200      	movs	r2, #0
 80097b0:	2300      	movs	r3, #0
 80097b2:	4610      	mov	r0, r2
 80097b4:	4619      	mov	r1, r3
 80097b6:	f7f7 f849 	bl	800084c <__aeabi_ddiv>
 80097ba:	ec41 0b18 	vmov	d8, r0, r1
 80097be:	eeb0 0a48 	vmov.f32	s0, s16
 80097c2:	eef0 0a68 	vmov.f32	s1, s17
 80097c6:	ecbd 8b02 	vpop	{d8}
 80097ca:	bd38      	pop	{r3, r4, r5, pc}

080097cc <__ieee754_sqrt>:
 80097cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097d0:	4a68      	ldr	r2, [pc, #416]	@ (8009974 <__ieee754_sqrt+0x1a8>)
 80097d2:	ec55 4b10 	vmov	r4, r5, d0
 80097d6:	43aa      	bics	r2, r5
 80097d8:	462b      	mov	r3, r5
 80097da:	4621      	mov	r1, r4
 80097dc:	d110      	bne.n	8009800 <__ieee754_sqrt+0x34>
 80097de:	4622      	mov	r2, r4
 80097e0:	4620      	mov	r0, r4
 80097e2:	4629      	mov	r1, r5
 80097e4:	f7f6 ff08 	bl	80005f8 <__aeabi_dmul>
 80097e8:	4602      	mov	r2, r0
 80097ea:	460b      	mov	r3, r1
 80097ec:	4620      	mov	r0, r4
 80097ee:	4629      	mov	r1, r5
 80097f0:	f7f6 fd4c 	bl	800028c <__adddf3>
 80097f4:	4604      	mov	r4, r0
 80097f6:	460d      	mov	r5, r1
 80097f8:	ec45 4b10 	vmov	d0, r4, r5
 80097fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009800:	2d00      	cmp	r5, #0
 8009802:	dc0e      	bgt.n	8009822 <__ieee754_sqrt+0x56>
 8009804:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8009808:	4322      	orrs	r2, r4
 800980a:	d0f5      	beq.n	80097f8 <__ieee754_sqrt+0x2c>
 800980c:	b19d      	cbz	r5, 8009836 <__ieee754_sqrt+0x6a>
 800980e:	4622      	mov	r2, r4
 8009810:	4620      	mov	r0, r4
 8009812:	4629      	mov	r1, r5
 8009814:	f7f6 fd38 	bl	8000288 <__aeabi_dsub>
 8009818:	4602      	mov	r2, r0
 800981a:	460b      	mov	r3, r1
 800981c:	f7f7 f816 	bl	800084c <__aeabi_ddiv>
 8009820:	e7e8      	b.n	80097f4 <__ieee754_sqrt+0x28>
 8009822:	152a      	asrs	r2, r5, #20
 8009824:	d115      	bne.n	8009852 <__ieee754_sqrt+0x86>
 8009826:	2000      	movs	r0, #0
 8009828:	e009      	b.n	800983e <__ieee754_sqrt+0x72>
 800982a:	0acb      	lsrs	r3, r1, #11
 800982c:	3a15      	subs	r2, #21
 800982e:	0549      	lsls	r1, r1, #21
 8009830:	2b00      	cmp	r3, #0
 8009832:	d0fa      	beq.n	800982a <__ieee754_sqrt+0x5e>
 8009834:	e7f7      	b.n	8009826 <__ieee754_sqrt+0x5a>
 8009836:	462a      	mov	r2, r5
 8009838:	e7fa      	b.n	8009830 <__ieee754_sqrt+0x64>
 800983a:	005b      	lsls	r3, r3, #1
 800983c:	3001      	adds	r0, #1
 800983e:	02dc      	lsls	r4, r3, #11
 8009840:	d5fb      	bpl.n	800983a <__ieee754_sqrt+0x6e>
 8009842:	1e44      	subs	r4, r0, #1
 8009844:	1b12      	subs	r2, r2, r4
 8009846:	f1c0 0420 	rsb	r4, r0, #32
 800984a:	fa21 f404 	lsr.w	r4, r1, r4
 800984e:	4323      	orrs	r3, r4
 8009850:	4081      	lsls	r1, r0
 8009852:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009856:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800985a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800985e:	07d2      	lsls	r2, r2, #31
 8009860:	bf5c      	itt	pl
 8009862:	005b      	lslpl	r3, r3, #1
 8009864:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8009868:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800986c:	bf58      	it	pl
 800986e:	0049      	lslpl	r1, r1, #1
 8009870:	2600      	movs	r6, #0
 8009872:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8009876:	106d      	asrs	r5, r5, #1
 8009878:	0049      	lsls	r1, r1, #1
 800987a:	2016      	movs	r0, #22
 800987c:	4632      	mov	r2, r6
 800987e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8009882:	1917      	adds	r7, r2, r4
 8009884:	429f      	cmp	r7, r3
 8009886:	bfde      	ittt	le
 8009888:	193a      	addle	r2, r7, r4
 800988a:	1bdb      	suble	r3, r3, r7
 800988c:	1936      	addle	r6, r6, r4
 800988e:	0fcf      	lsrs	r7, r1, #31
 8009890:	3801      	subs	r0, #1
 8009892:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8009896:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800989a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800989e:	d1f0      	bne.n	8009882 <__ieee754_sqrt+0xb6>
 80098a0:	4604      	mov	r4, r0
 80098a2:	2720      	movs	r7, #32
 80098a4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80098a8:	429a      	cmp	r2, r3
 80098aa:	eb00 0e0c 	add.w	lr, r0, ip
 80098ae:	db02      	blt.n	80098b6 <__ieee754_sqrt+0xea>
 80098b0:	d113      	bne.n	80098da <__ieee754_sqrt+0x10e>
 80098b2:	458e      	cmp	lr, r1
 80098b4:	d811      	bhi.n	80098da <__ieee754_sqrt+0x10e>
 80098b6:	f1be 0f00 	cmp.w	lr, #0
 80098ba:	eb0e 000c 	add.w	r0, lr, ip
 80098be:	da42      	bge.n	8009946 <__ieee754_sqrt+0x17a>
 80098c0:	2800      	cmp	r0, #0
 80098c2:	db40      	blt.n	8009946 <__ieee754_sqrt+0x17a>
 80098c4:	f102 0801 	add.w	r8, r2, #1
 80098c8:	1a9b      	subs	r3, r3, r2
 80098ca:	458e      	cmp	lr, r1
 80098cc:	bf88      	it	hi
 80098ce:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80098d2:	eba1 010e 	sub.w	r1, r1, lr
 80098d6:	4464      	add	r4, ip
 80098d8:	4642      	mov	r2, r8
 80098da:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80098de:	3f01      	subs	r7, #1
 80098e0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80098e4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80098e8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80098ec:	d1dc      	bne.n	80098a8 <__ieee754_sqrt+0xdc>
 80098ee:	4319      	orrs	r1, r3
 80098f0:	d01b      	beq.n	800992a <__ieee754_sqrt+0x15e>
 80098f2:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8009978 <__ieee754_sqrt+0x1ac>
 80098f6:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800997c <__ieee754_sqrt+0x1b0>
 80098fa:	e9da 0100 	ldrd	r0, r1, [sl]
 80098fe:	e9db 2300 	ldrd	r2, r3, [fp]
 8009902:	f7f6 fcc1 	bl	8000288 <__aeabi_dsub>
 8009906:	e9da 8900 	ldrd	r8, r9, [sl]
 800990a:	4602      	mov	r2, r0
 800990c:	460b      	mov	r3, r1
 800990e:	4640      	mov	r0, r8
 8009910:	4649      	mov	r1, r9
 8009912:	f7f7 f8ed 	bl	8000af0 <__aeabi_dcmple>
 8009916:	b140      	cbz	r0, 800992a <__ieee754_sqrt+0x15e>
 8009918:	f1b4 3fff 	cmp.w	r4, #4294967295
 800991c:	e9da 0100 	ldrd	r0, r1, [sl]
 8009920:	e9db 2300 	ldrd	r2, r3, [fp]
 8009924:	d111      	bne.n	800994a <__ieee754_sqrt+0x17e>
 8009926:	3601      	adds	r6, #1
 8009928:	463c      	mov	r4, r7
 800992a:	1072      	asrs	r2, r6, #1
 800992c:	0863      	lsrs	r3, r4, #1
 800992e:	07f1      	lsls	r1, r6, #31
 8009930:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8009934:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8009938:	bf48      	it	mi
 800993a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800993e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8009942:	4618      	mov	r0, r3
 8009944:	e756      	b.n	80097f4 <__ieee754_sqrt+0x28>
 8009946:	4690      	mov	r8, r2
 8009948:	e7be      	b.n	80098c8 <__ieee754_sqrt+0xfc>
 800994a:	f7f6 fc9f 	bl	800028c <__adddf3>
 800994e:	e9da 8900 	ldrd	r8, r9, [sl]
 8009952:	4602      	mov	r2, r0
 8009954:	460b      	mov	r3, r1
 8009956:	4640      	mov	r0, r8
 8009958:	4649      	mov	r1, r9
 800995a:	f7f7 f8bf 	bl	8000adc <__aeabi_dcmplt>
 800995e:	b120      	cbz	r0, 800996a <__ieee754_sqrt+0x19e>
 8009960:	1ca0      	adds	r0, r4, #2
 8009962:	bf08      	it	eq
 8009964:	3601      	addeq	r6, #1
 8009966:	3402      	adds	r4, #2
 8009968:	e7df      	b.n	800992a <__ieee754_sqrt+0x15e>
 800996a:	1c63      	adds	r3, r4, #1
 800996c:	f023 0401 	bic.w	r4, r3, #1
 8009970:	e7db      	b.n	800992a <__ieee754_sqrt+0x15e>
 8009972:	bf00      	nop
 8009974:	7ff00000 	.word	0x7ff00000
 8009978:	200001e0 	.word	0x200001e0
 800997c:	200001d8 	.word	0x200001d8

08009980 <_init>:
 8009980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009982:	bf00      	nop
 8009984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009986:	bc08      	pop	{r3}
 8009988:	469e      	mov	lr, r3
 800998a:	4770      	bx	lr

0800998c <_fini>:
 800998c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800998e:	bf00      	nop
 8009990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009992:	bc08      	pop	{r3}
 8009994:	469e      	mov	lr, r3
 8009996:	4770      	bx	lr
