
MainBoard2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004858  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  080049e8  080049e8  000059e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bf4  08004bf4  00006174  2**0
                  CONTENTS
  4 .ARM          00000008  08004bf4  08004bf4  00005bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bfc  08004bfc  00006174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bfc  08004bfc  00005bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c00  08004c00  00005c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000174  20000000  08004c04  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006174  2**0
                  CONTENTS
 10 .bss          000002e4  20000174  20000174  00006174  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000458  20000458  00006174  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006174  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bc82  00000000  00000000  000061a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ecf  00000000  00000000  00011e26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b98  00000000  00000000  00013cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008e2  00000000  00000000  00014890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d2e8  00000000  00000000  00015172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d577  00000000  00000000  0003245a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b6e76  00000000  00000000  0003f9d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f6847  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000034d8  00000000  00000000  000f688c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  000f9d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000174 	.word	0x20000174
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080049d0 	.word	0x080049d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000178 	.word	0x20000178
 80001cc:	080049d0 	.word	0x080049d0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	db0b      	blt.n	80002ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	f003 021f 	and.w	r2, r3, #31
 80002a8:	4907      	ldr	r1, [pc, #28]	@ (80002c8 <__NVIC_EnableIRQ+0x38>)
 80002aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ae:	095b      	lsrs	r3, r3, #5
 80002b0:	2001      	movs	r0, #1
 80002b2:	fa00 f202 	lsl.w	r2, r0, r2
 80002b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002ba:	bf00      	nop
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	e000e100 	.word	0xe000e100

080002cc <initialise_touch>:
#include "stm32f303xc.h"

extern GameState game;
extern GameTriggers triggers;

void initialise_touch(void (*_callback_function)) {
 80002cc:	b480      	push	{r7}
 80002ce:	b085      	sub	sp, #20
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
    // Enable clocks
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOEEN;
 80002d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000310 <initialise_touch+0x44>)
 80002d6:	695b      	ldr	r3, [r3, #20]
 80002d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000310 <initialise_touch+0x44>)
 80002da:	f443 1308 	orr.w	r3, r3, #2228224	@ 0x220000
 80002de:	6153      	str	r3, [r2, #20]
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80002e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000310 <initialise_touch+0x44>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	4a0a      	ldr	r2, [pc, #40]	@ (8000310 <initialise_touch+0x44>)
 80002e6:	f043 0301 	orr.w	r3, r3, #1
 80002ea:	6193      	str	r3, [r2, #24]

    // Configure PE8–PE11 as output
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 80002ec:	4b09      	ldr	r3, [pc, #36]	@ (8000314 <initialise_touch+0x48>)
 80002ee:	60fb      	str	r3, [r7, #12]
	*led_output_registers = 0x5555;
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	f245 5255 	movw	r2, #21845	@ 0x5555
 80002f6:	801a      	strh	r2, [r3, #0]

    // Set PA1–PA6 as inputs
	uint16_t *touch_registers = ((uint16_t *)&(GPIOA->MODER));
 80002f8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002fc:	60bb      	str	r3, [r7, #8]
	*touch_registers = 0x0000;
 80002fe:	68bb      	ldr	r3, [r7, #8]
 8000300:	2200      	movs	r2, #0
 8000302:	801a      	strh	r2, [r3, #0]
}
 8000304:	bf00      	nop
 8000306:	3714      	adds	r7, #20
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr
 8000310:	40021000 	.word	0x40021000
 8000314:	48001002 	.word	0x48001002

08000318 <enable_touch_interrupts>:

void enable_touch_interrupts() {
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800031c:	b672      	cpsid	i
}
 800031e:	bf00      	nop
	__disable_irq();

    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000320:	4b18      	ldr	r3, [pc, #96]	@ (8000384 <enable_touch_interrupts+0x6c>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	4a17      	ldr	r2, [pc, #92]	@ (8000384 <enable_touch_interrupts+0x6c>)
 8000326:	f043 0301 	orr.w	r3, r3, #1
 800032a:	6193      	str	r3, [r2, #24]

    // Map EXTI lines 0–3 to PA1–PA3
    SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PA | SYSCFG_EXTICR1_EXTI2_PA | SYSCFG_EXTICR1_EXTI3_PA;
 800032c:	4b16      	ldr	r3, [pc, #88]	@ (8000388 <enable_touch_interrupts+0x70>)
 800032e:	2200      	movs	r2, #0
 8000330:	609a      	str	r2, [r3, #8]
    // Map EXTI lines 4–7 to PA4–PA6
    SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI4_PA | SYSCFG_EXTICR2_EXTI5_PA | SYSCFG_EXTICR2_EXTI6_PA;
 8000332:	4b15      	ldr	r3, [pc, #84]	@ (8000388 <enable_touch_interrupts+0x70>)
 8000334:	2200      	movs	r2, #0
 8000336:	60da      	str	r2, [r3, #12]

	// Trigger on rising edge and stop falling edge
	EXTI->RTSR |= EXTI_RTSR_TR1 | EXTI_RTSR_TR2 | EXTI_RTSR_TR3 | EXTI_RTSR_TR4 | EXTI_RTSR_TR5 | EXTI_RTSR_TR6;
 8000338:	4b14      	ldr	r3, [pc, #80]	@ (800038c <enable_touch_interrupts+0x74>)
 800033a:	689b      	ldr	r3, [r3, #8]
 800033c:	4a13      	ldr	r2, [pc, #76]	@ (800038c <enable_touch_interrupts+0x74>)
 800033e:	f043 037e 	orr.w	r3, r3, #126	@ 0x7e
 8000342:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(EXTI_FTSR_TR1 | EXTI_FTSR_TR2 | EXTI_FTSR_TR3 |
 8000344:	4b11      	ldr	r3, [pc, #68]	@ (800038c <enable_touch_interrupts+0x74>)
 8000346:	68db      	ldr	r3, [r3, #12]
 8000348:	4a10      	ldr	r2, [pc, #64]	@ (800038c <enable_touch_interrupts+0x74>)
 800034a:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 800034e:	60d3      	str	r3, [r2, #12]
	                EXTI_FTSR_TR4 | EXTI_FTSR_TR5 | EXTI_FTSR_TR6);

	// Unmask EXTI line 1
	EXTI->IMR |= EXTI_IMR_MR1 | EXTI_IMR_MR2 | EXTI_IMR_MR3 | EXTI_IMR_MR4 | EXTI_IMR_MR5 | EXTI_IMR_MR6;
 8000350:	4b0e      	ldr	r3, [pc, #56]	@ (800038c <enable_touch_interrupts+0x74>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a0d      	ldr	r2, [pc, #52]	@ (800038c <enable_touch_interrupts+0x74>)
 8000356:	f043 037e 	orr.w	r3, r3, #126	@ 0x7e
 800035a:	6013      	str	r3, [r2, #0]

    // Enable NVIC IRQs for EXTI1–EXTI3 and EXTI4–9 (shared)
    NVIC_EnableIRQ(EXTI1_IRQn);
 800035c:	2007      	movs	r0, #7
 800035e:	f7ff ff97 	bl	8000290 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8000362:	2008      	movs	r0, #8
 8000364:	f7ff ff94 	bl	8000290 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(EXTI3_IRQn);
 8000368:	2009      	movs	r0, #9
 800036a:	f7ff ff91 	bl	8000290 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(EXTI4_IRQn);
 800036e:	200a      	movs	r0, #10
 8000370:	f7ff ff8e 	bl	8000290 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000374:	2017      	movs	r0, #23
 8000376:	f7ff ff8b 	bl	8000290 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800037a:	b662      	cpsie	i
}
 800037c:	bf00      	nop
	__enable_irq();
}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	40021000 	.word	0x40021000
 8000388:	40010000 	.word	0x40010000
 800038c:	40010400 	.word	0x40010400

08000390 <touch_register_callback>:


static void (*touch_callback)(uint8_t pad, GameTriggers *trigger) = 0;

void touch_register_callback(void (*callback)(uint8_t pad, GameTriggers *trigger)) {
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
    touch_callback = callback;
 8000398:	4a04      	ldr	r2, [pc, #16]	@ (80003ac <touch_register_callback+0x1c>)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	6013      	str	r3, [r2, #0]
}
 800039e:	bf00      	nop
 80003a0:	370c      	adds	r7, #12
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	20000190 	.word	0x20000190

080003b0 <display_number>:

void display_number(uint8_t n) {
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	71fb      	strb	r3, [r7, #7]
    // Display `n` on PE8–PE11 (4-bit binary)
    GPIOE->ODR &= ~(0xF << 8);        // Clear PE8–11
 80003ba:	4b0a      	ldr	r3, [pc, #40]	@ (80003e4 <display_number+0x34>)
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	4a09      	ldr	r2, [pc, #36]	@ (80003e4 <display_number+0x34>)
 80003c0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80003c4:	6153      	str	r3, [r2, #20]
    GPIOE->ODR |= ((n & 0xF) << 8);   // Set new value
 80003c6:	4b07      	ldr	r3, [pc, #28]	@ (80003e4 <display_number+0x34>)
 80003c8:	695a      	ldr	r2, [r3, #20]
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	021b      	lsls	r3, r3, #8
 80003ce:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80003d2:	4904      	ldr	r1, [pc, #16]	@ (80003e4 <display_number+0x34>)
 80003d4:	4313      	orrs	r3, r2
 80003d6:	614b      	str	r3, [r1, #20]
}
 80003d8:	bf00      	nop
 80003da:	370c      	adds	r7, #12
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr
 80003e4:	48001000 	.word	0x48001000

080003e8 <EXTI1_IRQHandler>:

// Interrupt handlers
void EXTI1_IRQHandler(void) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
    if (EXTI->PR & EXTI_PR_PR1) {
 80003ec:	4b0b      	ldr	r3, [pc, #44]	@ (800041c <EXTI1_IRQHandler+0x34>)
 80003ee:	695b      	ldr	r3, [r3, #20]
 80003f0:	f003 0302 	and.w	r3, r3, #2
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d00e      	beq.n	8000416 <EXTI1_IRQHandler+0x2e>
        EXTI->PR |= EXTI_PR_PR1;
 80003f8:	4b08      	ldr	r3, [pc, #32]	@ (800041c <EXTI1_IRQHandler+0x34>)
 80003fa:	695b      	ldr	r3, [r3, #20]
 80003fc:	4a07      	ldr	r2, [pc, #28]	@ (800041c <EXTI1_IRQHandler+0x34>)
 80003fe:	f043 0302 	orr.w	r3, r3, #2
 8000402:	6153      	str	r3, [r2, #20]
        if (touch_callback) touch_callback(1, &triggers);
 8000404:	4b06      	ldr	r3, [pc, #24]	@ (8000420 <EXTI1_IRQHandler+0x38>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	2b00      	cmp	r3, #0
 800040a:	d004      	beq.n	8000416 <EXTI1_IRQHandler+0x2e>
 800040c:	4b04      	ldr	r3, [pc, #16]	@ (8000420 <EXTI1_IRQHandler+0x38>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4904      	ldr	r1, [pc, #16]	@ (8000424 <EXTI1_IRQHandler+0x3c>)
 8000412:	2001      	movs	r0, #1
 8000414:	4798      	blx	r3
    }
}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	40010400 	.word	0x40010400
 8000420:	20000190 	.word	0x20000190
 8000424:	20000044 	.word	0x20000044

08000428 <EXTI2_TSC_IRQHandler>:
void EXTI2_TSC_IRQHandler(void) {
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
    if (EXTI->PR & EXTI_PR_PR2) {
 800042c:	4b0b      	ldr	r3, [pc, #44]	@ (800045c <EXTI2_TSC_IRQHandler+0x34>)
 800042e:	695b      	ldr	r3, [r3, #20]
 8000430:	f003 0304 	and.w	r3, r3, #4
 8000434:	2b00      	cmp	r3, #0
 8000436:	d00e      	beq.n	8000456 <EXTI2_TSC_IRQHandler+0x2e>
        EXTI->PR |= EXTI_PR_PR2;
 8000438:	4b08      	ldr	r3, [pc, #32]	@ (800045c <EXTI2_TSC_IRQHandler+0x34>)
 800043a:	695b      	ldr	r3, [r3, #20]
 800043c:	4a07      	ldr	r2, [pc, #28]	@ (800045c <EXTI2_TSC_IRQHandler+0x34>)
 800043e:	f043 0304 	orr.w	r3, r3, #4
 8000442:	6153      	str	r3, [r2, #20]
        if (touch_callback) touch_callback(2, &triggers);
 8000444:	4b06      	ldr	r3, [pc, #24]	@ (8000460 <EXTI2_TSC_IRQHandler+0x38>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d004      	beq.n	8000456 <EXTI2_TSC_IRQHandler+0x2e>
 800044c:	4b04      	ldr	r3, [pc, #16]	@ (8000460 <EXTI2_TSC_IRQHandler+0x38>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4904      	ldr	r1, [pc, #16]	@ (8000464 <EXTI2_TSC_IRQHandler+0x3c>)
 8000452:	2002      	movs	r0, #2
 8000454:	4798      	blx	r3
    }
}
 8000456:	bf00      	nop
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	40010400 	.word	0x40010400
 8000460:	20000190 	.word	0x20000190
 8000464:	20000044 	.word	0x20000044

08000468 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void) {
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
    if (EXTI->PR & EXTI_PR_PR3) {
 800046c:	4b0b      	ldr	r3, [pc, #44]	@ (800049c <EXTI3_IRQHandler+0x34>)
 800046e:	695b      	ldr	r3, [r3, #20]
 8000470:	f003 0308 	and.w	r3, r3, #8
 8000474:	2b00      	cmp	r3, #0
 8000476:	d00e      	beq.n	8000496 <EXTI3_IRQHandler+0x2e>
        EXTI->PR |= EXTI_PR_PR3;
 8000478:	4b08      	ldr	r3, [pc, #32]	@ (800049c <EXTI3_IRQHandler+0x34>)
 800047a:	695b      	ldr	r3, [r3, #20]
 800047c:	4a07      	ldr	r2, [pc, #28]	@ (800049c <EXTI3_IRQHandler+0x34>)
 800047e:	f043 0308 	orr.w	r3, r3, #8
 8000482:	6153      	str	r3, [r2, #20]
        if (touch_callback) touch_callback(3, &triggers);
 8000484:	4b06      	ldr	r3, [pc, #24]	@ (80004a0 <EXTI3_IRQHandler+0x38>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d004      	beq.n	8000496 <EXTI3_IRQHandler+0x2e>
 800048c:	4b04      	ldr	r3, [pc, #16]	@ (80004a0 <EXTI3_IRQHandler+0x38>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4904      	ldr	r1, [pc, #16]	@ (80004a4 <EXTI3_IRQHandler+0x3c>)
 8000492:	2003      	movs	r0, #3
 8000494:	4798      	blx	r3
    }
}
 8000496:	bf00      	nop
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	40010400 	.word	0x40010400
 80004a0:	20000190 	.word	0x20000190
 80004a4:	20000044 	.word	0x20000044

080004a8 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
    if (EXTI->PR & EXTI_PR_PR4) {
 80004ac:	4b0b      	ldr	r3, [pc, #44]	@ (80004dc <EXTI4_IRQHandler+0x34>)
 80004ae:	695b      	ldr	r3, [r3, #20]
 80004b0:	f003 0310 	and.w	r3, r3, #16
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d00e      	beq.n	80004d6 <EXTI4_IRQHandler+0x2e>
        EXTI->PR |= EXTI_PR_PR4;
 80004b8:	4b08      	ldr	r3, [pc, #32]	@ (80004dc <EXTI4_IRQHandler+0x34>)
 80004ba:	695b      	ldr	r3, [r3, #20]
 80004bc:	4a07      	ldr	r2, [pc, #28]	@ (80004dc <EXTI4_IRQHandler+0x34>)
 80004be:	f043 0310 	orr.w	r3, r3, #16
 80004c2:	6153      	str	r3, [r2, #20]
        if (touch_callback) touch_callback(4, &triggers);
 80004c4:	4b06      	ldr	r3, [pc, #24]	@ (80004e0 <EXTI4_IRQHandler+0x38>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d004      	beq.n	80004d6 <EXTI4_IRQHandler+0x2e>
 80004cc:	4b04      	ldr	r3, [pc, #16]	@ (80004e0 <EXTI4_IRQHandler+0x38>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4904      	ldr	r1, [pc, #16]	@ (80004e4 <EXTI4_IRQHandler+0x3c>)
 80004d2:	2004      	movs	r0, #4
 80004d4:	4798      	blx	r3
    }
}
 80004d6:	bf00      	nop
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	40010400 	.word	0x40010400
 80004e0:	20000190 	.word	0x20000190
 80004e4:	20000044 	.word	0x20000044

080004e8 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
    for (int i = 5; i <= 6; i++) {
 80004ee:	2305      	movs	r3, #5
 80004f0:	607b      	str	r3, [r7, #4]
 80004f2:	e020      	b.n	8000536 <EXTI9_5_IRQHandler+0x4e>
        if (EXTI->PR & (1 << i)) {
 80004f4:	4b14      	ldr	r3, [pc, #80]	@ (8000548 <EXTI9_5_IRQHandler+0x60>)
 80004f6:	695b      	ldr	r3, [r3, #20]
 80004f8:	2101      	movs	r1, #1
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000500:	4013      	ands	r3, r2
 8000502:	2b00      	cmp	r3, #0
 8000504:	d014      	beq.n	8000530 <EXTI9_5_IRQHandler+0x48>
            EXTI->PR |= (1 << i);
 8000506:	4b10      	ldr	r3, [pc, #64]	@ (8000548 <EXTI9_5_IRQHandler+0x60>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	2101      	movs	r1, #1
 800050c:	687a      	ldr	r2, [r7, #4]
 800050e:	fa01 f202 	lsl.w	r2, r1, r2
 8000512:	4611      	mov	r1, r2
 8000514:	4a0c      	ldr	r2, [pc, #48]	@ (8000548 <EXTI9_5_IRQHandler+0x60>)
 8000516:	430b      	orrs	r3, r1
 8000518:	6153      	str	r3, [r2, #20]
            if (touch_callback) touch_callback(i, &triggers);
 800051a:	4b0c      	ldr	r3, [pc, #48]	@ (800054c <EXTI9_5_IRQHandler+0x64>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d006      	beq.n	8000530 <EXTI9_5_IRQHandler+0x48>
 8000522:	4b0a      	ldr	r3, [pc, #40]	@ (800054c <EXTI9_5_IRQHandler+0x64>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	687a      	ldr	r2, [r7, #4]
 8000528:	b2d2      	uxtb	r2, r2
 800052a:	4909      	ldr	r1, [pc, #36]	@ (8000550 <EXTI9_5_IRQHandler+0x68>)
 800052c:	4610      	mov	r0, r2
 800052e:	4798      	blx	r3
    for (int i = 5; i <= 6; i++) {
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	3301      	adds	r3, #1
 8000534:	607b      	str	r3, [r7, #4]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2b06      	cmp	r3, #6
 800053a:	dddb      	ble.n	80004f4 <EXTI9_5_IRQHandler+0xc>
        }
    }
}
 800053c:	bf00      	nop
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40010400 	.word	0x40010400
 800054c:	20000190 	.word	0x20000190
 8000550:	20000044 	.word	0x20000044

08000554 <transmit_game_state>:
};


// =================================== Game Functions ====================================
// Prints via UART game state
void transmit_game_state() {
 8000554:	b580      	push	{r7, lr}
 8000556:	b090      	sub	sp, #64	@ 0x40
 8000558:	af00      	add	r7, sp, #0
    char buffer[64];
    sprintf(buffer, "DIGS REMAINING:%d TREASURES:%d\r\n\n", game.digs_remaining, game.items_left_to_find);
 800055a:	4b08      	ldr	r3, [pc, #32]	@ (800057c <transmit_game_state+0x28>)
 800055c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800055e:	4b07      	ldr	r3, [pc, #28]	@ (800057c <transmit_game_state+0x28>)
 8000560:	69db      	ldr	r3, [r3, #28]
 8000562:	4638      	mov	r0, r7
 8000564:	4906      	ldr	r1, [pc, #24]	@ (8000580 <transmit_game_state+0x2c>)
 8000566:	f003 fd93 	bl	8004090 <siprintf>
    serial_output_string(buffer, &USART1_PORT);
 800056a:	463b      	mov	r3, r7
 800056c:	4905      	ldr	r1, [pc, #20]	@ (8000584 <transmit_game_state+0x30>)
 800056e:	4618      	mov	r0, r3
 8000570:	f000 fdbd 	bl	80010ee <serial_output_string>
}
 8000574:	bf00      	nop
 8000576:	3740      	adds	r7, #64	@ 0x40
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	2000000c 	.word	0x2000000c
 8000580:	080049e8 	.word	0x080049e8
 8000584:	20000064 	.word	0x20000064

08000588 <fn_a>:

// Timer callback
static void fn_a(const TimerSel sel, GameState *game) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b092      	sub	sp, #72	@ 0x48
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	6039      	str	r1, [r7, #0]
 8000592:	71fb      	strb	r3, [r7, #7]
	game->game_time_remaining = game->game_time_remaining - 1;
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000598:	1e5a      	subs	r2, r3, #1
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	62da      	str	r2, [r3, #44]	@ 0x2c
    char buffer[64];
    sprintf(buffer, "TIME REMAINING:%d\r\n", game->game_time_remaining);
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80005a2:	f107 0308 	add.w	r3, r7, #8
 80005a6:	4907      	ldr	r1, [pc, #28]	@ (80005c4 <fn_a+0x3c>)
 80005a8:	4618      	mov	r0, r3
 80005aa:	f003 fd71 	bl	8004090 <siprintf>
    serial_output_string(buffer, &USART1_PORT);
 80005ae:	f107 0308 	add.w	r3, r7, #8
 80005b2:	4905      	ldr	r1, [pc, #20]	@ (80005c8 <fn_a+0x40>)
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 fd9a 	bl	80010ee <serial_output_string>
}
 80005ba:	bf00      	nop
 80005bc:	3748      	adds	r7, #72	@ 0x48
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	08004a0c 	.word	0x08004a0c
 80005c8:	20000064 	.word	0x20000064

080005cc <start_game>:

// --- Start Game Signal (from USART or button) ---
void start_game(GameState *game) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	// Restart game state
    game->game_over = 0;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2200      	movs	r2, #0
 80005d8:	631a      	str	r2, [r3, #48]	@ 0x30
    game->game_time_remaining = 240;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	22f0      	movs	r2, #240	@ 0xf0
 80005de:	62da      	str	r2, [r3, #44]	@ 0x2c
    game->digs_remaining = 4;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2204      	movs	r2, #4
 80005e4:	625a      	str	r2, [r3, #36]	@ 0x24

    int count = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 6; i++) {
 80005ea:	2300      	movs	r3, #0
 80005ec:	613b      	str	r3, [r7, #16]
 80005ee:	e00b      	b.n	8000608 <start_game+0x3c>
        if (game->correct_servos[i] != 0) {
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	693a      	ldr	r2, [r7, #16]
 80005f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d002      	beq.n	8000602 <start_game+0x36>
            count++;
 80005fc:	697b      	ldr	r3, [r7, #20]
 80005fe:	3301      	adds	r3, #1
 8000600:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 6; i++) {
 8000602:	693b      	ldr	r3, [r7, #16]
 8000604:	3301      	adds	r3, #1
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	693b      	ldr	r3, [r7, #16]
 800060a:	2b05      	cmp	r3, #5
 800060c:	ddf0      	ble.n	80005f0 <start_game+0x24>
        }
    }
    game->total_items_to_find = count;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	697a      	ldr	r2, [r7, #20]
 8000612:	635a      	str	r2, [r3, #52]	@ 0x34

    // Calibrate: Set all servos to 0°
    for (uint8_t servoId = 1; servoId <= 6; servoId++)
 8000614:	2301      	movs	r3, #1
 8000616:	73fb      	strb	r3, [r7, #15]
 8000618:	e007      	b.n	800062a <start_game+0x5e>
    {
      SetServoAngle(servoId, 0);
 800061a:	7bfb      	ldrb	r3, [r7, #15]
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f000 f8b2 	bl	8000788 <SetServoAngle>
    for (uint8_t servoId = 1; servoId <= 6; servoId++)
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	3301      	adds	r3, #1
 8000628:	73fb      	strb	r3, [r7, #15]
 800062a:	7bfb      	ldrb	r3, [r7, #15]
 800062c:	2b06      	cmp	r3, #6
 800062e:	d9f4      	bls.n	800061a <start_game+0x4e>
    }

    // Init game timer
    timer_init();
 8000630:	f000 ffa2 	bl	8001578 <timer_init>
    const TimerSel tim_a = TIMER_SEL_3;
 8000634:	2301      	movs	r3, #1
 8000636:	73bb      	strb	r3, [r7, #14]
    timer_prescaler_set(tim_a, 11999);
 8000638:	7bbb      	ldrb	r3, [r7, #14]
 800063a:	f642 61df 	movw	r1, #11999	@ 0x2edf
 800063e:	4618      	mov	r0, r3
 8000640:	f001 f87e 	bl	8001740 <timer_prescaler_set>
    timer_period_set(tim_a, 3999);
 8000644:	7bbb      	ldrb	r3, [r7, #14]
 8000646:	f640 719f 	movw	r1, #3999	@ 0xf9f
 800064a:	4618      	mov	r0, r3
 800064c:	f001 f854 	bl	80016f8 <timer_period_set>
    timer_silent_set(tim_a, false);
 8000650:	7bbb      	ldrb	r3, [r7, #14]
 8000652:	2100      	movs	r1, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f001 f835 	bl	80016c4 <timer_silent_set>
    timer_recur_set(tim_a, true);
 800065a:	7bbb      	ldrb	r3, [r7, #14]
 800065c:	2101      	movs	r1, #1
 800065e:	4618      	mov	r0, r3
 8000660:	f001 f8b2 	bl	80017c8 <timer_recur_set>
    timer_callback_set(tim_a, &fn_a);
 8000664:	7bbb      	ldrb	r3, [r7, #14]
 8000666:	4909      	ldr	r1, [pc, #36]	@ (800068c <start_game+0xc0>)
 8000668:	4618      	mov	r0, r3
 800066a:	f001 f931 	bl	80018d0 <timer_callback_set>
    timer_enable_set(tim_a, true);
 800066e:	7bbb      	ldrb	r3, [r7, #14]
 8000670:	2101      	movs	r1, #1
 8000672:	4618      	mov	r0, r3
 8000674:	f000 ffe2 	bl	800163c <timer_enable_set>

    serial_output_string("Game Started\r\n\n", &USART1_PORT);
 8000678:	4905      	ldr	r1, [pc, #20]	@ (8000690 <start_game+0xc4>)
 800067a:	4806      	ldr	r0, [pc, #24]	@ (8000694 <start_game+0xc8>)
 800067c:	f000 fd37 	bl	80010ee <serial_output_string>

    transmit_game_state();
 8000680:	f7ff ff68 	bl	8000554 <transmit_game_state>

}
 8000684:	bf00      	nop
 8000686:	3718      	adds	r7, #24
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	08000589 	.word	0x08000589
 8000690:	20000064 	.word	0x20000064
 8000694:	08004a20 	.word	0x08004a20

08000698 <check_game_over>:
		transmit_game_state();
	}
}

//Check for game over conditions
uint8_t check_game_over(GameState *game) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
    if (game->digs_remaining == 0 || game->game_time_remaining == 0 || game->items_left_to_find == 0) {
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d007      	beq.n	80006b8 <check_game_over+0x20>
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d003      	beq.n	80006b8 <check_game_over+0x20>
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	69db      	ldr	r3, [r3, #28]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d120      	bne.n	80006fa <check_game_over+0x62>
  	    const TimerSel tim_a = TIMER_SEL_3;
 80006b8:	2301      	movs	r3, #1
 80006ba:	73fb      	strb	r3, [r7, #15]

  	    if (game->items_left_to_find == 0) {
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	69db      	ldr	r3, [r3, #28]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d109      	bne.n	80006d8 <check_game_over+0x40>
      	  	timer_enable_set(tim_a, false);
 80006c4:	7bfb      	ldrb	r3, [r7, #15]
 80006c6:	2100      	movs	r1, #0
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 ffb7 	bl	800163c <timer_enable_set>

      		serial_output_string((char *) "You Win!\n", &USART1_PORT);
 80006ce:	490d      	ldr	r1, [pc, #52]	@ (8000704 <check_game_over+0x6c>)
 80006d0:	480d      	ldr	r0, [pc, #52]	@ (8000708 <check_game_over+0x70>)
 80006d2:	f000 fd0c 	bl	80010ee <serial_output_string>
 80006d6:	e008      	b.n	80006ea <check_game_over+0x52>

      	}
      	else {
      	  	timer_enable_set(tim_a, false);
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 ffad 	bl	800163c <timer_enable_set>

      		serial_output_string((char *) "Game Over\n", &USART1_PORT);
 80006e2:	4908      	ldr	r1, [pc, #32]	@ (8000704 <check_game_over+0x6c>)
 80006e4:	4809      	ldr	r0, [pc, #36]	@ (800070c <check_game_over+0x74>)
 80006e6:	f000 fd02 	bl	80010ee <serial_output_string>
      	}

      	display_number(0);
 80006ea:	2000      	movs	r0, #0
 80006ec:	f7ff fe60 	bl	80003b0 <display_number>
        game->game_over = 1;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2201      	movs	r2, #1
 80006f4:	631a      	str	r2, [r3, #48]	@ 0x30
        //timer_disable();
        return 1;
 80006f6:	2301      	movs	r3, #1
 80006f8:	e000      	b.n	80006fc <check_game_over+0x64>
    }
    return 0;
 80006fa:	2300      	movs	r3, #0
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3710      	adds	r7, #16
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000064 	.word	0x20000064
 8000708:	08004a30 	.word	0x08004a30
 800070c:	08004a3c 	.word	0x08004a3c

08000710 <handle_touch>:
pad_dug[triggers.servo_controlled] = true;
*/
// =================================== Callback Functions ===================================

// Each EXTI handler calls this with the corresponding pin number
void handle_touch(uint8_t pad, GameTriggers *trigger) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	6039      	str	r1, [r7, #0]
 800071a:	71fb      	strb	r3, [r7, #7]
	display_number(pad);
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff fe46 	bl	80003b0 <display_number>
	trigger->touchpad_pressed = pad;
 8000724:	79fa      	ldrb	r2, [r7, #7]
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	601a      	str	r2, [r3, #0]
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <output_callback>:

// Transmit callback
void output_callback() {
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0
	return;
 8000736:	bf00      	nop
}
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <input_callback>:

// Receive callback
void input_callback(char *data, uint32_t len) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	6039      	str	r1, [r7, #0]
	// Check for game start input
	char compare[] = "game start";
 800074a:	4a0d      	ldr	r2, [pc, #52]	@ (8000780 <input_callback+0x40>)
 800074c:	f107 0308 	add.w	r3, r7, #8
 8000750:	ca07      	ldmia	r2, {r0, r1, r2}
 8000752:	c303      	stmia	r3!, {r0, r1}
 8000754:	801a      	strh	r2, [r3, #0]
 8000756:	3302      	adds	r3, #2
 8000758:	0c12      	lsrs	r2, r2, #16
 800075a:	701a      	strb	r2, [r3, #0]
	uint16_t test = strcmp(data, compare);
 800075c:	f107 0308 	add.w	r3, r7, #8
 8000760:	4619      	mov	r1, r3
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f7ff fd34 	bl	80001d0 <strcmp>
 8000768:	4603      	mov	r3, r0
 800076a:	82fb      	strh	r3, [r7, #22]
	if (!test) {
 800076c:	8afb      	ldrh	r3, [r7, #22]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d102      	bne.n	8000778 <input_callback+0x38>
		start_game(&game);
 8000772:	4804      	ldr	r0, [pc, #16]	@ (8000784 <input_callback+0x44>)
 8000774:	f7ff ff2a 	bl	80005cc <start_game>
	}
}
 8000778:	bf00      	nop
 800077a:	3718      	adds	r7, #24
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	08004a48 	.word	0x08004a48
 8000784:	2000000c 	.word	0x2000000c

08000788 <SetServoAngle>:

void SetServoAngle(uint8_t servoId, uint16_t angle)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b094      	sub	sp, #80	@ 0x50
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	460a      	mov	r2, r1
 8000792:	71fb      	strb	r3, [r7, #7]
 8000794:	4613      	mov	r3, r2
 8000796:	80bb      	strh	r3, [r7, #4]
  if (angle > 180) angle = 180;
 8000798:	88bb      	ldrh	r3, [r7, #4]
 800079a:	2bb4      	cmp	r3, #180	@ 0xb4
 800079c:	d901      	bls.n	80007a2 <SetServoAngle+0x1a>
 800079e:	23b4      	movs	r3, #180	@ 0xb4
 80007a0:	80bb      	strh	r3, [r7, #4]
  uint32_t pulse = PWM_MIN_PULSE + (angle * (PWM_MAX_PULSE - PWM_MIN_PULSE) / 180);
 80007a2:	88bb      	ldrh	r3, [r7, #4]
 80007a4:	22c8      	movs	r2, #200	@ 0xc8
 80007a6:	fb02 f303 	mul.w	r3, r2, r3
 80007aa:	4a26      	ldr	r2, [pc, #152]	@ (8000844 <SetServoAngle+0xbc>)
 80007ac:	fb82 1203 	smull	r1, r2, r2, r3
 80007b0:	441a      	add	r2, r3
 80007b2:	11d2      	asrs	r2, r2, #7
 80007b4:	17db      	asrs	r3, r3, #31
 80007b6:	1ad3      	subs	r3, r2, r3
 80007b8:	3332      	adds	r3, #50	@ 0x32
 80007ba:	64fb      	str	r3, [r7, #76]	@ 0x4c

  switch (servoId)
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	3b01      	subs	r3, #1
 80007c0:	2b05      	cmp	r3, #5
 80007c2:	d82d      	bhi.n	8000820 <SetServoAngle+0x98>
 80007c4:	a201      	add	r2, pc, #4	@ (adr r2, 80007cc <SetServoAngle+0x44>)
 80007c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ca:	bf00      	nop
 80007cc:	080007e5 	.word	0x080007e5
 80007d0:	080007ef 	.word	0x080007ef
 80007d4:	080007f9 	.word	0x080007f9
 80007d8:	08000803 	.word	0x08000803
 80007dc:	0800080d 	.word	0x0800080d
 80007e0:	08000817 	.word	0x08000817
  {
    case 1: __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse); break; // PE2
 80007e4:	4b18      	ldr	r3, [pc, #96]	@ (8000848 <SetServoAngle+0xc0>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80007ea:	635a      	str	r2, [r3, #52]	@ 0x34
 80007ec:	e019      	b.n	8000822 <SetServoAngle+0x9a>
    case 2: __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulse); break; // PE3
 80007ee:	4b16      	ldr	r3, [pc, #88]	@ (8000848 <SetServoAngle+0xc0>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80007f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80007f6:	e014      	b.n	8000822 <SetServoAngle+0x9a>
    case 3: __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse); break; // PA0
 80007f8:	4b14      	ldr	r3, [pc, #80]	@ (800084c <SetServoAngle+0xc4>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80007fe:	635a      	str	r2, [r3, #52]	@ 0x34
 8000800:	e00f      	b.n	8000822 <SetServoAngle+0x9a>
    case 4: __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pulse); break; // PA1
 8000802:	4b12      	ldr	r3, [pc, #72]	@ (800084c <SetServoAngle+0xc4>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000808:	639a      	str	r2, [r3, #56]	@ 0x38
 800080a:	e00a      	b.n	8000822 <SetServoAngle+0x9a>
    case 5: __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pulse); break; // PD12
 800080c:	4b10      	ldr	r3, [pc, #64]	@ (8000850 <SetServoAngle+0xc8>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000812:	635a      	str	r2, [r3, #52]	@ 0x34
 8000814:	e005      	b.n	8000822 <SetServoAngle+0x9a>
    case 6: __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, pulse); break; // PD13
 8000816:	4b0e      	ldr	r3, [pc, #56]	@ (8000850 <SetServoAngle+0xc8>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800081c:	639a      	str	r2, [r3, #56]	@ 0x38
 800081e:	e000      	b.n	8000822 <SetServoAngle+0x9a>
    default: break;
 8000820:	bf00      	nop
  }

  // Log action
  char txBuffer[64];
  sprintf(txBuffer, "Setting Servo %d to %d°\r\n", servoId, angle);
 8000822:	79fa      	ldrb	r2, [r7, #7]
 8000824:	88bb      	ldrh	r3, [r7, #4]
 8000826:	f107 000c 	add.w	r0, r7, #12
 800082a:	490a      	ldr	r1, [pc, #40]	@ (8000854 <SetServoAngle+0xcc>)
 800082c:	f003 fc30 	bl	8004090 <siprintf>
  serial_output_string(txBuffer, &USART1_PORT);
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	4908      	ldr	r1, [pc, #32]	@ (8000858 <SetServoAngle+0xd0>)
 8000836:	4618      	mov	r0, r3
 8000838:	f000 fc59 	bl	80010ee <serial_output_string>
}
 800083c:	bf00      	nop
 800083e:	3750      	adds	r7, #80	@ 0x50
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	b60b60b7 	.word	0xb60b60b7
 8000848:	200001e0 	.word	0x200001e0
 800084c:	20000194 	.word	0x20000194
 8000850:	2000022c 	.word	0x2000022c
 8000854:	08004a54 	.word	0x08004a54
 8000858:	20000064 	.word	0x20000064

0800085c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b0a6      	sub	sp, #152	@ 0x98
 8000860:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000862:	f001 f8bd 	bl	80019e0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000866:	f000 f925 	bl	8000ab4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800086a:	f000 fa99 	bl	8000da0 <MX_GPIO_Init>
  MX_TIM2_Init();
 800086e:	f000 f965 	bl	8000b3c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000872:	f000 f9c9 	bl	8000c08 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000876:	f000 fa2d 	bl	8000cd4 <MX_TIM4_Init>
  enable_interupt(touch_pads_pb, 7, RISING_EDGE, 0, &touch_pad_handler); // PB7
  enable_interupt(touch_pads_pb, 13, RISING_EDGE, 0, &touch_pad_handler); // PB13
  */

  // Initialize servos: Start PWM
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // Servo 1: PE2
 800087a:	2100      	movs	r1, #0
 800087c:	487b      	ldr	r0, [pc, #492]	@ (8000a6c <main+0x210>)
 800087e:	f002 fddb 	bl	8003438 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // Servo 2: PE3
 8000882:	2104      	movs	r1, #4
 8000884:	4879      	ldr	r0, [pc, #484]	@ (8000a6c <main+0x210>)
 8000886:	f002 fdd7 	bl	8003438 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // Servo 3: PA0
 800088a:	2100      	movs	r1, #0
 800088c:	4878      	ldr	r0, [pc, #480]	@ (8000a70 <main+0x214>)
 800088e:	f002 fdd3 	bl	8003438 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // Servo 4: PA1
 8000892:	2104      	movs	r1, #4
 8000894:	4876      	ldr	r0, [pc, #472]	@ (8000a70 <main+0x214>)
 8000896:	f002 fdcf 	bl	8003438 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); // Servo 5: PD12
 800089a:	2100      	movs	r1, #0
 800089c:	4875      	ldr	r0, [pc, #468]	@ (8000a74 <main+0x218>)
 800089e:	f002 fdcb 	bl	8003438 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); // Servo 6: PD13
 80008a2:	2104      	movs	r1, #4
 80008a4:	4873      	ldr	r0, [pc, #460]	@ (8000a74 <main+0x218>)
 80008a6:	f002 fdc7 	bl	8003438 <HAL_TIM_PWM_Start>

  // Serial Init
  serial_initialise(115200, &USART1_PORT, &output_callback, &input_callback);
 80008aa:	4b73      	ldr	r3, [pc, #460]	@ (8000a78 <main+0x21c>)
 80008ac:	4a73      	ldr	r2, [pc, #460]	@ (8000a7c <main+0x220>)
 80008ae:	4974      	ldr	r1, [pc, #464]	@ (8000a80 <main+0x224>)
 80008b0:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 80008b4:	f000 fb9e 	bl	8000ff4 <serial_initialise>

  enable_interrupts(&USART1_PORT);
 80008b8:	4871      	ldr	r0, [pc, #452]	@ (8000a80 <main+0x224>)
 80008ba:	f000 fc3b 	bl	8001134 <enable_interrupts>

  // Touch Init
  initialise_touch();
 80008be:	f7ff fd05 	bl	80002cc <initialise_touch>
  enable_touch_interrupts();
 80008c2:	f7ff fd29 	bl	8000318 <enable_touch_interrupts>
  //touch_register_callback((touch_callback_t)handle_touch, &triggers);
  touch_register_callback(handle_touch);
 80008c6:	486f      	ldr	r0, [pc, #444]	@ (8000a84 <main+0x228>)
 80008c8:	f7ff fd62 	bl	8000390 <touch_register_callback>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Wait for game start
	  if (game.game_over) {
 80008cc:	4b6e      	ldr	r3, [pc, #440]	@ (8000a88 <main+0x22c>)
 80008ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	f040 80c7 	bne.w	8000a64 <main+0x208>
		  continue;
	  }

	  int check = check_game_over(&game);
 80008d6:	486c      	ldr	r0, [pc, #432]	@ (8000a88 <main+0x22c>)
 80008d8:	f7ff fede 	bl	8000698 <check_game_over>
 80008dc:	4603      	mov	r3, r0
 80008de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	  if (check == 1) {
 80008e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	f000 80be 	beq.w	8000a68 <main+0x20c>
		  continue;
	  }

	  if (triggers.touchpad_pressed != -1) {
 80008ec:	4b67      	ldr	r3, [pc, #412]	@ (8000a8c <main+0x230>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008f4:	d0ea      	beq.n	80008cc <main+0x70>
		  triggers.servo_controlled = triggers.touchpad_pressed;
 80008f6:	4b65      	ldr	r3, [pc, #404]	@ (8000a8c <main+0x230>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a64      	ldr	r2, [pc, #400]	@ (8000a8c <main+0x230>)
 80008fc:	60d3      	str	r3, [r2, #12]
	      transmit_game_state();
 80008fe:	f7ff fe29 	bl	8000554 <transmit_game_state>

	      char buffer[64];
	      sprintf(buffer, "touchpad %d chosen, door %d being controlled!\r\n", triggers.touchpad_pressed,  triggers.servo_controlled);
 8000902:	4b62      	ldr	r3, [pc, #392]	@ (8000a8c <main+0x230>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	4b61      	ldr	r3, [pc, #388]	@ (8000a8c <main+0x230>)
 8000908:	68db      	ldr	r3, [r3, #12]
 800090a:	1d38      	adds	r0, r7, #4
 800090c:	4960      	ldr	r1, [pc, #384]	@ (8000a90 <main+0x234>)
 800090e:	f003 fbbf 	bl	8004090 <siprintf>
	      serial_output_string(buffer, &USART1_PORT);
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	495a      	ldr	r1, [pc, #360]	@ (8000a80 <main+0x224>)
 8000916:	4618      	mov	r0, r3
 8000918:	f000 fbe9 	bl	80010ee <serial_output_string>

	      if (triggers.servo_controlled != -1 && triggers.servo_controlled != last_servo_selection) {
 800091c:	4b5b      	ldr	r3, [pc, #364]	@ (8000a8c <main+0x230>)
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000924:	f000 8099 	beq.w	8000a5a <main+0x1fe>
 8000928:	4b58      	ldr	r3, [pc, #352]	@ (8000a8c <main+0x230>)
 800092a:	68da      	ldr	r2, [r3, #12]
 800092c:	4b59      	ldr	r3, [pc, #356]	@ (8000a94 <main+0x238>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	429a      	cmp	r2, r3
 8000932:	f000 8092 	beq.w	8000a5a <main+0x1fe>
	    	  // Map EXTI line to touch sensor index (0-5)
	    	  static const uint8_t touch_pins[6] = {7, 6, 5, 4, 3, 13}; // PB7, PB6, PB5, PB4, PB3, PB13
	    	  static const uint8_t touch_ports[6] = {1, 1, 1, 1, 1, 1}; // GPIOB=1
	    	  uint8_t touch_index = 255;
 8000936:	23ff      	movs	r3, #255	@ 0xff
 8000938:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

	    	  for (uint8_t i = 0; i < 6; i++)
 800093c:	2300      	movs	r3, #0
 800093e:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 8000942:	e017      	b.n	8000974 <main+0x118>
	    	  {
	    	    if (triggers.touchpad_pressed == touch_pins[i] && touch_ports[i] == 1) // All on GPIOB
 8000944:	4b51      	ldr	r3, [pc, #324]	@ (8000a8c <main+0x230>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 800094c:	4952      	ldr	r1, [pc, #328]	@ (8000a98 <main+0x23c>)
 800094e:	5c8a      	ldrb	r2, [r1, r2]
 8000950:	4293      	cmp	r3, r2
 8000952:	d10a      	bne.n	800096a <main+0x10e>
 8000954:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8000958:	4a50      	ldr	r2, [pc, #320]	@ (8000a9c <main+0x240>)
 800095a:	5cd3      	ldrb	r3, [r2, r3]
 800095c:	2b01      	cmp	r3, #1
 800095e:	d104      	bne.n	800096a <main+0x10e>
	    	    {
	    	      touch_index = i;
 8000960:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8000964:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	    	      break;
 8000968:	e008      	b.n	800097c <main+0x120>
	    	  for (uint8_t i = 0; i < 6; i++)
 800096a:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800096e:	3301      	adds	r3, #1
 8000970:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 8000974:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8000978:	2b05      	cmp	r3, #5
 800097a:	d9e3      	bls.n	8000944 <main+0xe8>
	    	    }
	    	  }

	    	  if (touch_index < 6)
 800097c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8000980:	2b05      	cmp	r3, #5
 8000982:	d84a      	bhi.n	8000a1a <main+0x1be>
	    	  {
	    	    uint8_t servoId = touch_to_servo_map[touch_index];
 8000984:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8000988:	4a45      	ldr	r2, [pc, #276]	@ (8000aa0 <main+0x244>)
 800098a:	5cd3      	ldrb	r3, [r2, r3]
 800098c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
	    	    if (servoId >= 1 && servoId <= 6)
 8000990:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000994:	2b00      	cmp	r3, #0
 8000996:	d040      	beq.n	8000a1a <main+0x1be>
 8000998:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800099c:	2b06      	cmp	r3, #6
 800099e:	d83c      	bhi.n	8000a1a <main+0x1be>
	    	    {
	    	      // Toggle servo state
	    	      uint8_t servoIndex = servoId - 1; // Array index (0-5)
 80009a0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80009a4:	3b01      	subs	r3, #1
 80009a6:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
	    	      servo_states[servoIndex] = !servo_states[servoIndex];
 80009aa:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80009ae:	4a3d      	ldr	r2, [pc, #244]	@ (8000aa4 <main+0x248>)
 80009b0:	5cd3      	ldrb	r3, [r2, r3]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	bf0c      	ite	eq
 80009b6:	2301      	moveq	r3, #1
 80009b8:	2300      	movne	r3, #0
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80009c0:	4611      	mov	r1, r2
 80009c2:	4a38      	ldr	r2, [pc, #224]	@ (8000aa4 <main+0x248>)
 80009c4:	54d1      	strb	r1, [r2, r3]
	    	      uint16_t angle = servo_states[servoIndex] ? 90 : 0;
 80009c6:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80009ca:	4a36      	ldr	r2, [pc, #216]	@ (8000aa4 <main+0x248>)
 80009cc:	5cd3      	ldrb	r3, [r2, r3]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <main+0x17a>
 80009d2:	235a      	movs	r3, #90	@ 0x5a
 80009d4:	e000      	b.n	80009d8 <main+0x17c>
 80009d6:	2300      	movs	r3, #0
 80009d8:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84

	    	      char txBuffer[64];
	    	      sprintf(txBuffer, "Touch detected on PB%d, toggling Servo %d to %d°\r\n\n",
	    	              touch_pins[touch_index], servoId, angle);
 80009dc:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80009e0:	4a2d      	ldr	r2, [pc, #180]	@ (8000a98 <main+0x23c>)
 80009e2:	5cd3      	ldrb	r3, [r2, r3]
	    	      sprintf(txBuffer, "Touch detected on PB%d, toggling Servo %d to %d°\r\n\n",
 80009e4:	4619      	mov	r1, r3
 80009e6:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 80009ea:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 80009ee:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 80009f2:	9300      	str	r3, [sp, #0]
 80009f4:	4613      	mov	r3, r2
 80009f6:	460a      	mov	r2, r1
 80009f8:	492b      	ldr	r1, [pc, #172]	@ (8000aa8 <main+0x24c>)
 80009fa:	f003 fb49 	bl	8004090 <siprintf>
	    	      serial_output_string(txBuffer, &USART1_PORT);
 80009fe:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000a02:	491f      	ldr	r1, [pc, #124]	@ (8000a80 <main+0x224>)
 8000a04:	4618      	mov	r0, r3
 8000a06:	f000 fb72 	bl	80010ee <serial_output_string>

	    	      SetServoAngle(servoId, angle);
 8000a0a:	f8b7 2084 	ldrh.w	r2, [r7, #132]	@ 0x84
 8000a0e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000a12:	4611      	mov	r1, r2
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff feb7 	bl	8000788 <SetServoAngle>
	            	 game.peeks_used++;
	           		 serial_output_string((char *) "PEEK ONLY\r\n\n", &USART1_PORT);

	             }
				*/
	        	 triggers.touchpad_pressed = -1;
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a8c <main+0x230>)
 8000a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a20:	601a      	str	r2, [r3, #0]
	        	 last_servo_selection = triggers.servo_controlled;
 8000a22:	4b1a      	ldr	r3, [pc, #104]	@ (8000a8c <main+0x230>)
 8000a24:	68db      	ldr	r3, [r3, #12]
 8000a26:	4a1b      	ldr	r2, [pc, #108]	@ (8000a94 <main+0x238>)
 8000a28:	6013      	str	r3, [r2, #0]
	        	 triggers.servo_controlled = -1;
 8000a2a:	4b18      	ldr	r3, [pc, #96]	@ (8000a8c <main+0x230>)
 8000a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a30:	60da      	str	r2, [r3, #12]

	        	 char yes[64];
	        	 sprintf(yes, "touchpad reset to %d, servo %d, previous servo %d\r\n\n", triggers.touchpad_pressed, triggers.servo_controlled, last_servo_selection);
 8000a32:	4b16      	ldr	r3, [pc, #88]	@ (8000a8c <main+0x230>)
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	4b15      	ldr	r3, [pc, #84]	@ (8000a8c <main+0x230>)
 8000a38:	68d9      	ldr	r1, [r3, #12]
 8000a3a:	4b16      	ldr	r3, [pc, #88]	@ (8000a94 <main+0x238>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8000a42:	9300      	str	r3, [sp, #0]
 8000a44:	460b      	mov	r3, r1
 8000a46:	4919      	ldr	r1, [pc, #100]	@ (8000aac <main+0x250>)
 8000a48:	f003 fb22 	bl	8004090 <siprintf>
	        	 serial_output_string(yes, &USART1_PORT);
 8000a4c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000a50:	490b      	ldr	r1, [pc, #44]	@ (8000a80 <main+0x224>)
 8000a52:	4618      	mov	r0, r3
 8000a54:	f000 fb4b 	bl	80010ee <serial_output_string>
	      if (triggers.servo_controlled != -1 && triggers.servo_controlled != last_servo_selection) {
 8000a58:	e007      	b.n	8000a6a <main+0x20e>
	         } else {
	        	 serial_output_string((char *) "invalid choice", &USART1_PORT);
 8000a5a:	4909      	ldr	r1, [pc, #36]	@ (8000a80 <main+0x224>)
 8000a5c:	4814      	ldr	r0, [pc, #80]	@ (8000ab0 <main+0x254>)
 8000a5e:	f000 fb46 	bl	80010ee <serial_output_string>
 8000a62:	e733      	b.n	80008cc <main+0x70>
		  continue;
 8000a64:	bf00      	nop
 8000a66:	e731      	b.n	80008cc <main+0x70>
		  continue;
 8000a68:	bf00      	nop
  {
 8000a6a:	e72f      	b.n	80008cc <main+0x70>
 8000a6c:	200001e0 	.word	0x200001e0
 8000a70:	20000194 	.word	0x20000194
 8000a74:	2000022c 	.word	0x2000022c
 8000a78:	08000741 	.word	0x08000741
 8000a7c:	08000733 	.word	0x08000733
 8000a80:	20000064 	.word	0x20000064
 8000a84:	08000711 	.word	0x08000711
 8000a88:	2000000c 	.word	0x2000000c
 8000a8c:	20000044 	.word	0x20000044
 8000a90:	08004a70 	.word	0x08004a70
 8000a94:	20000008 	.word	0x20000008
 8000a98:	08004b20 	.word	0x08004b20
 8000a9c:	08004b28 	.word	0x08004b28
 8000aa0:	20000000 	.word	0x20000000
 8000aa4:	20000278 	.word	0x20000278
 8000aa8:	08004aa0 	.word	0x08004aa0
 8000aac:	08004ad8 	.word	0x08004ad8
 8000ab0:	08004b10 	.word	0x08004b10

08000ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b090      	sub	sp, #64	@ 0x40
 8000ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aba:	f107 0318 	add.w	r3, r7, #24
 8000abe:	2228      	movs	r2, #40	@ 0x28
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f003 fb04 	bl	80040d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
 8000ad4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ada:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000ade:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ae8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000aec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000aee:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af4:	f107 0318 	add.w	r3, r7, #24
 8000af8:	4618      	mov	r0, r3
 8000afa:	f001 fa37 	bl	8001f6c <HAL_RCC_OscConfig>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000b04:	f000 f9f0 	bl	8000ee8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b08:	230f      	movs	r3, #15
 8000b0a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	2101      	movs	r1, #1
 8000b22:	4618      	mov	r0, r3
 8000b24:	f002 fa60 	bl	8002fe8 <HAL_RCC_ClockConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000b2e:	f000 f9db 	bl	8000ee8 <Error_Handler>
  }
}
 8000b32:	bf00      	nop
 8000b34:	3740      	adds	r7, #64	@ 0x40
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	@ 0x28
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b42:	f107 031c 	add.w	r3, r7, #28
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b4e:	463b      	mov	r3, r7
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
 8000b5c:	615a      	str	r2, [r3, #20]
 8000b5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b60:	4b28      	ldr	r3, [pc, #160]	@ (8000c04 <MX_TIM2_Init+0xc8>)
 8000b62:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 479; // 48 MHz / 480 = 100 kHz
 8000b68:	4b26      	ldr	r3, [pc, #152]	@ (8000c04 <MX_TIM2_Init+0xc8>)
 8000b6a:	f240 12df 	movw	r2, #479	@ 0x1df
 8000b6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b70:	4b24      	ldr	r3, [pc, #144]	@ (8000c04 <MX_TIM2_Init+0xc8>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = PWM_PERIOD_TICKS - 1; // 20 ms
 8000b76:	4b23      	ldr	r3, [pc, #140]	@ (8000c04 <MX_TIM2_Init+0xc8>)
 8000b78:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000b7c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b7e:	4b21      	ldr	r3, [pc, #132]	@ (8000c04 <MX_TIM2_Init+0xc8>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b84:	4b1f      	ldr	r3, [pc, #124]	@ (8000c04 <MX_TIM2_Init+0xc8>)
 8000b86:	2280      	movs	r2, #128	@ 0x80
 8000b88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b8a:	481e      	ldr	r0, [pc, #120]	@ (8000c04 <MX_TIM2_Init+0xc8>)
 8000b8c:	f002 fbfc 	bl	8003388 <HAL_TIM_PWM_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8000b96:	f000 f9a7 	bl	8000ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ba2:	f107 031c 	add.w	r3, r7, #28
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4816      	ldr	r0, [pc, #88]	@ (8000c04 <MX_TIM2_Init+0xc8>)
 8000baa:	f003 f9f1 	bl	8003f90 <HAL_TIMEx_MasterConfigSynchronization>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000bb4:	f000 f998 	bl	8000ee8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bb8:	2360      	movs	r3, #96	@ 0x60
 8000bba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bc8:	463b      	mov	r3, r7
 8000bca:	2200      	movs	r2, #0
 8000bcc:	4619      	mov	r1, r3
 8000bce:	480d      	ldr	r0, [pc, #52]	@ (8000c04 <MX_TIM2_Init+0xc8>)
 8000bd0:	f002 fd32 	bl	8003638 <HAL_TIM_PWM_ConfigChannel>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000bda:	f000 f985 	bl	8000ee8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bde:	463b      	mov	r3, r7
 8000be0:	2204      	movs	r2, #4
 8000be2:	4619      	mov	r1, r3
 8000be4:	4807      	ldr	r0, [pc, #28]	@ (8000c04 <MX_TIM2_Init+0xc8>)
 8000be6:	f002 fd27 	bl	8003638 <HAL_TIM_PWM_ConfigChannel>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8000bf0:	f000 f97a 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bf4:	4803      	ldr	r0, [pc, #12]	@ (8000c04 <MX_TIM2_Init+0xc8>)
 8000bf6:	f000 fba7 	bl	8001348 <HAL_TIM_MspPostInit>
}
 8000bfa:	bf00      	nop
 8000bfc:	3728      	adds	r7, #40	@ 0x28
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000194 	.word	0x20000194

08000c08 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08a      	sub	sp, #40	@ 0x28
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_Init 0 */
  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c0e:	f107 031c 	add.w	r3, r7, #28
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c1a:	463b      	mov	r3, r7
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
 8000c28:	615a      	str	r2, [r3, #20]
 8000c2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c2c:	4b27      	ldr	r3, [pc, #156]	@ (8000ccc <MX_TIM3_Init+0xc4>)
 8000c2e:	4a28      	ldr	r2, [pc, #160]	@ (8000cd0 <MX_TIM3_Init+0xc8>)
 8000c30:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 479; // 48 MHz / 480 = 100 kHz
 8000c32:	4b26      	ldr	r3, [pc, #152]	@ (8000ccc <MX_TIM3_Init+0xc4>)
 8000c34:	f240 12df 	movw	r2, #479	@ 0x1df
 8000c38:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3a:	4b24      	ldr	r3, [pc, #144]	@ (8000ccc <MX_TIM3_Init+0xc4>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = PWM_PERIOD_TICKS - 1; // 20 ms
 8000c40:	4b22      	ldr	r3, [pc, #136]	@ (8000ccc <MX_TIM3_Init+0xc4>)
 8000c42:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000c46:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c48:	4b20      	ldr	r3, [pc, #128]	@ (8000ccc <MX_TIM3_Init+0xc4>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c4e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ccc <MX_TIM3_Init+0xc4>)
 8000c50:	2280      	movs	r2, #128	@ 0x80
 8000c52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c54:	481d      	ldr	r0, [pc, #116]	@ (8000ccc <MX_TIM3_Init+0xc4>)
 8000c56:	f002 fb97 	bl	8003388 <HAL_TIM_PWM_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8000c60:	f000 f942 	bl	8000ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c6c:	f107 031c 	add.w	r3, r7, #28
 8000c70:	4619      	mov	r1, r3
 8000c72:	4816      	ldr	r0, [pc, #88]	@ (8000ccc <MX_TIM3_Init+0xc4>)
 8000c74:	f003 f98c 	bl	8003f90 <HAL_TIMEx_MasterConfigSynchronization>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000c7e:	f000 f933 	bl	8000ee8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c82:	2360      	movs	r3, #96	@ 0x60
 8000c84:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c92:	463b      	mov	r3, r7
 8000c94:	2200      	movs	r2, #0
 8000c96:	4619      	mov	r1, r3
 8000c98:	480c      	ldr	r0, [pc, #48]	@ (8000ccc <MX_TIM3_Init+0xc4>)
 8000c9a:	f002 fccd 	bl	8003638 <HAL_TIM_PWM_ConfigChannel>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8000ca4:	f000 f920 	bl	8000ee8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ca8:	463b      	mov	r3, r7
 8000caa:	2204      	movs	r2, #4
 8000cac:	4619      	mov	r1, r3
 8000cae:	4807      	ldr	r0, [pc, #28]	@ (8000ccc <MX_TIM3_Init+0xc4>)
 8000cb0:	f002 fcc2 	bl	8003638 <HAL_TIM_PWM_ConfigChannel>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8000cba:	f000 f915 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cbe:	4803      	ldr	r0, [pc, #12]	@ (8000ccc <MX_TIM3_Init+0xc4>)
 8000cc0:	f000 fb42 	bl	8001348 <HAL_TIM_MspPostInit>
}
 8000cc4:	bf00      	nop
 8000cc6:	3728      	adds	r7, #40	@ 0x28
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	200001e0 	.word	0x200001e0
 8000cd0:	40000400 	.word	0x40000400

08000cd4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08a      	sub	sp, #40	@ 0x28
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_Init 0 */
  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cda:	f107 031c 	add.w	r3, r7, #28
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ce6:	463b      	mov	r3, r7
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
 8000cf4:	615a      	str	r2, [r3, #20]
 8000cf6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */
  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cf8:	4b27      	ldr	r3, [pc, #156]	@ (8000d98 <MX_TIM4_Init+0xc4>)
 8000cfa:	4a28      	ldr	r2, [pc, #160]	@ (8000d9c <MX_TIM4_Init+0xc8>)
 8000cfc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 479; // 48 MHz / 480 = 100 kHz
 8000cfe:	4b26      	ldr	r3, [pc, #152]	@ (8000d98 <MX_TIM4_Init+0xc4>)
 8000d00:	f240 12df 	movw	r2, #479	@ 0x1df
 8000d04:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d06:	4b24      	ldr	r3, [pc, #144]	@ (8000d98 <MX_TIM4_Init+0xc4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = PWM_PERIOD_TICKS - 1; // 20 ms
 8000d0c:	4b22      	ldr	r3, [pc, #136]	@ (8000d98 <MX_TIM4_Init+0xc4>)
 8000d0e:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000d12:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d14:	4b20      	ldr	r3, [pc, #128]	@ (8000d98 <MX_TIM4_Init+0xc4>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000d98 <MX_TIM4_Init+0xc4>)
 8000d1c:	2280      	movs	r2, #128	@ 0x80
 8000d1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d20:	481d      	ldr	r0, [pc, #116]	@ (8000d98 <MX_TIM4_Init+0xc4>)
 8000d22:	f002 fb31 	bl	8003388 <HAL_TIM_PWM_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8000d2c:	f000 f8dc 	bl	8000ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d34:	2300      	movs	r3, #0
 8000d36:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d38:	f107 031c 	add.w	r3, r7, #28
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4816      	ldr	r0, [pc, #88]	@ (8000d98 <MX_TIM4_Init+0xc4>)
 8000d40:	f003 f926 	bl	8003f90 <HAL_TIMEx_MasterConfigSynchronization>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8000d4a:	f000 f8cd 	bl	8000ee8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d4e:	2360      	movs	r3, #96	@ 0x60
 8000d50:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d5e:	463b      	mov	r3, r7
 8000d60:	2200      	movs	r2, #0
 8000d62:	4619      	mov	r1, r3
 8000d64:	480c      	ldr	r0, [pc, #48]	@ (8000d98 <MX_TIM4_Init+0xc4>)
 8000d66:	f002 fc67 	bl	8003638 <HAL_TIM_PWM_ConfigChannel>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8000d70:	f000 f8ba 	bl	8000ee8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d74:	463b      	mov	r3, r7
 8000d76:	2204      	movs	r2, #4
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4807      	ldr	r0, [pc, #28]	@ (8000d98 <MX_TIM4_Init+0xc4>)
 8000d7c:	f002 fc5c 	bl	8003638 <HAL_TIM_PWM_ConfigChannel>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8000d86:	f000 f8af 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d8a:	4803      	ldr	r0, [pc, #12]	@ (8000d98 <MX_TIM4_Init+0xc4>)
 8000d8c:	f000 fadc 	bl	8001348 <HAL_TIM_MspPostInit>
}
 8000d90:	bf00      	nop
 8000d92:	3728      	adds	r7, #40	@ 0x28
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	2000022c 	.word	0x2000022c
 8000d9c:	40000800 	.word	0x40000800

08000da0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08a      	sub	sp, #40	@ 0x28
 8000da4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da6:	f107 0314 	add.w	r3, r7, #20
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]
 8000db4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	4b47      	ldr	r3, [pc, #284]	@ (8000ed4 <MX_GPIO_Init+0x134>)
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	4a46      	ldr	r2, [pc, #280]	@ (8000ed4 <MX_GPIO_Init+0x134>)
 8000dbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dc0:	6153      	str	r3, [r2, #20]
 8000dc2:	4b44      	ldr	r3, [pc, #272]	@ (8000ed4 <MX_GPIO_Init+0x134>)
 8000dc4:	695b      	ldr	r3, [r3, #20]
 8000dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dce:	4b41      	ldr	r3, [pc, #260]	@ (8000ed4 <MX_GPIO_Init+0x134>)
 8000dd0:	695b      	ldr	r3, [r3, #20]
 8000dd2:	4a40      	ldr	r2, [pc, #256]	@ (8000ed4 <MX_GPIO_Init+0x134>)
 8000dd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000dd8:	6153      	str	r3, [r2, #20]
 8000dda:	4b3e      	ldr	r3, [pc, #248]	@ (8000ed4 <MX_GPIO_Init+0x134>)
 8000ddc:	695b      	ldr	r3, [r3, #20]
 8000dde:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de6:	4b3b      	ldr	r3, [pc, #236]	@ (8000ed4 <MX_GPIO_Init+0x134>)
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	4a3a      	ldr	r2, [pc, #232]	@ (8000ed4 <MX_GPIO_Init+0x134>)
 8000dec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000df0:	6153      	str	r3, [r2, #20]
 8000df2:	4b38      	ldr	r3, [pc, #224]	@ (8000ed4 <MX_GPIO_Init+0x134>)
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dfe:	4b35      	ldr	r3, [pc, #212]	@ (8000ed4 <MX_GPIO_Init+0x134>)
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	4a34      	ldr	r2, [pc, #208]	@ (8000ed4 <MX_GPIO_Init+0x134>)
 8000e04:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000e08:	6153      	str	r3, [r2, #20]
 8000e0a:	4b32      	ldr	r3, [pc, #200]	@ (8000ed4 <MX_GPIO_Init+0x134>)
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e16:	4b2f      	ldr	r3, [pc, #188]	@ (8000ed4 <MX_GPIO_Init+0x134>)
 8000e18:	695b      	ldr	r3, [r3, #20]
 8000e1a:	4a2e      	ldr	r2, [pc, #184]	@ (8000ed4 <MX_GPIO_Init+0x134>)
 8000e1c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e20:	6153      	str	r3, [r2, #20]
 8000e22:	4b2c      	ldr	r3, [pc, #176]	@ (8000ed4 <MX_GPIO_Init+0x134>)
 8000e24:	695b      	ldr	r3, [r3, #20]
 8000e26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e2a:	603b      	str	r3, [r7, #0]
 8000e2c:	683b      	ldr	r3, [r7, #0]

  /* Configure PB3-PB7, PB13 for touch sensors */
  GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_13;
 8000e2e:	f242 03f8 	movw	r3, #8440	@ 0x20f8
 8000e32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e34:	2300      	movs	r3, #0
 8000e36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN; // Ensure low when not touched
 8000e38:	2302      	movs	r3, #2
 8000e3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	4619      	mov	r1, r3
 8000e42:	4825      	ldr	r0, [pc, #148]	@ (8000ed8 <MX_GPIO_Init+0x138>)
 8000e44:	f000 ff18 	bl	8001c78 <HAL_GPIO_Init>

  /* Configure PC4 (TX), PC5 (RX) for USART1 */
  GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 8000e48:	2330      	movs	r3, #48	@ 0x30
 8000e4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e54:	2303      	movs	r3, #3
 8000e56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e58:	2307      	movs	r3, #7
 8000e5a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	4619      	mov	r1, r3
 8000e62:	481e      	ldr	r0, [pc, #120]	@ (8000edc <MX_GPIO_Init+0x13c>)
 8000e64:	f000 ff08 	bl	8001c78 <HAL_GPIO_Init>

  /* Configure PA0, PA1 for TIM2_CH1-2 (Servos 3-4) */
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e74:	2300      	movs	r3, #0
 8000e76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	4619      	mov	r1, r3
 8000e82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e86:	f000 fef7 	bl	8001c78 <HAL_GPIO_Init>

  /* Configure PE2, PE3 for TIM3_CH1-2 (Servos 1-2) */
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8000e8a:	230c      	movs	r3, #12
 8000e8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	480e      	ldr	r0, [pc, #56]	@ (8000ee0 <MX_GPIO_Init+0x140>)
 8000ea6:	f000 fee7 	bl	8001c78 <HAL_GPIO_Init>

  /* Configure PD12, PD13 for TIM4_CH1-2 (Servos 5-6) */
  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 8000eaa:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000eae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4807      	ldr	r0, [pc, #28]	@ (8000ee4 <MX_GPIO_Init+0x144>)
 8000ec8:	f000 fed6 	bl	8001c78 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ecc:	bf00      	nop
 8000ece:	3728      	adds	r7, #40	@ 0x28
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	48000400 	.word	0x48000400
 8000edc:	48000800 	.word	0x48000800
 8000ee0:	48001000 	.word	0x48001000
 8000ee4:	48000c00 	.word	0x48000c00

08000ee8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000eec:	b672      	cpsid	i
}
 8000eee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <Error_Handler+0x8>

08000ef4 <__NVIC_EnableIRQ>:
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	db0b      	blt.n	8000f1e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	f003 021f 	and.w	r2, r3, #31
 8000f0c:	4907      	ldr	r1, [pc, #28]	@ (8000f2c <__NVIC_EnableIRQ+0x38>)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	095b      	lsrs	r3, r3, #5
 8000f14:	2001      	movs	r0, #1
 8000f16:	fa00 f202 	lsl.w	r2, r0, r2
 8000f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000e100 	.word	0xe000e100

08000f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	6039      	str	r1, [r7, #0]
 8000f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	db0a      	blt.n	8000f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	490c      	ldr	r1, [pc, #48]	@ (8000f7c <__NVIC_SetPriority+0x4c>)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	0112      	lsls	r2, r2, #4
 8000f50:	b2d2      	uxtb	r2, r2
 8000f52:	440b      	add	r3, r1
 8000f54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f58:	e00a      	b.n	8000f70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	4908      	ldr	r1, [pc, #32]	@ (8000f80 <__NVIC_SetPriority+0x50>)
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	f003 030f 	and.w	r3, r3, #15
 8000f66:	3b04      	subs	r3, #4
 8000f68:	0112      	lsls	r2, r2, #4
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	761a      	strb	r2, [r3, #24]
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000e100 	.word	0xe000e100
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <calculate_brr>:
};



// Calculate baud rate register value based on system clock
static uint32_t calculate_brr(uint32_t baud_rate, uint32_t pclk_freq) {
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
    return (pclk_freq + (baud_rate / 2)) / baud_rate;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	085a      	lsrs	r2, r3, #1
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	441a      	add	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <get_pclk_freq>:

// Get the appropriate peripheral clock frequency
static uint32_t get_pclk_freq(uint8_t bus) {
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
    // For STM32F303, we need to check the actual clock configuration
    uint32_t sysclk = 8000000; // Default HSI frequency
 8000fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe8 <get_pclk_freq+0x40>)
 8000fb4:	60fb      	str	r3, [r7, #12]

    // Check if HSE or PLL is being used (simplified)
    if (RCC->CFGR & RCC_CFGR_SWS_PLL) {
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000fec <get_pclk_freq+0x44>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f003 0308 	and.w	r3, r3, #8
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d002      	beq.n	8000fc8 <get_pclk_freq+0x20>
        // PLL is active - typical configuration might be 72MHz
        sysclk = 48000000;
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff0 <get_pclk_freq+0x48>)
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	e007      	b.n	8000fd8 <get_pclk_freq+0x30>
    } else if (RCC->CFGR & RCC_CFGR_SWS_HSE) {
 8000fc8:	4b08      	ldr	r3, [pc, #32]	@ (8000fec <get_pclk_freq+0x44>)
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 0304 	and.w	r3, r3, #4
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <get_pclk_freq+0x30>
        // HSE is active - typically 8MHz external crystal
        sysclk = 8000000;
 8000fd4:	4b04      	ldr	r3, [pc, #16]	@ (8000fe8 <get_pclk_freq+0x40>)
 8000fd6:	60fb      	str	r3, [r7, #12]
    }

    return sysclk;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	007a1200 	.word	0x007a1200
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	02dc6c00 	.word	0x02dc6c00

08000ff4 <serial_initialise>:
		0x00 						// default function pointer is NULL
};


// InitialiseSerial - Initialise the serial port // Input: baud_rate is from an enumerated set
void serial_initialise(uint32_t baud_rate, SerialPort *serial_port, void (*output_callback_function)(void), void (*input_callback_function)(char *, uint32_t)) {
 8000ff4:	b590      	push	{r4, r7, lr}
 8000ff6:	b087      	sub	sp, #28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
 8001000:	603b      	str	r3, [r7, #0]

	serial_port->output_callback = output_callback_function;
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	625a      	str	r2, [r3, #36]	@ 0x24
	serial_port->receive_callback = input_callback_function;
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	683a      	ldr	r2, [r7, #0]
 800100c:	629a      	str	r2, [r3, #40]	@ 0x28

	// Enable clock power, system configuration clock and GPIOC
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800100e:	4b2a      	ldr	r3, [pc, #168]	@ (80010b8 <serial_initialise+0xc4>)
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	4a29      	ldr	r2, [pc, #164]	@ (80010b8 <serial_initialise+0xc4>)
 8001014:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001018:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800101a:	4b27      	ldr	r3, [pc, #156]	@ (80010b8 <serial_initialise+0xc4>)
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	4a26      	ldr	r2, [pc, #152]	@ (80010b8 <serial_initialise+0xc4>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6193      	str	r3, [r2, #24]

	// Enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	691a      	ldr	r2, [r3, #16]
 800102a:	4b23      	ldr	r3, [pc, #140]	@ (80010b8 <serial_initialise+0xc4>)
 800102c:	695b      	ldr	r3, [r3, #20]
 800102e:	4922      	ldr	r1, [pc, #136]	@ (80010b8 <serial_initialise+0xc4>)
 8001030:	4313      	orrs	r3, r2
 8001032:	614b      	str	r3, [r1, #20]

	// Set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	68ba      	ldr	r2, [r7, #8]
 800103a:	6952      	ldr	r2, [r2, #20]
 800103c:	601a      	str	r2, [r3, #0]

	// Enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	6992      	ldr	r2, [r2, #24]
 8001046:	609a      	str	r2, [r3, #8]

	// Set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	69d9      	ldr	r1, [r3, #28]
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	6a1a      	ldr	r2, [r3, #32]
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	430a      	orrs	r2, r1
 8001058:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	6a19      	ldr	r1, [r3, #32]
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	430a      	orrs	r2, r1
 800106a:	625a      	str	r2, [r3, #36]	@ 0x24

	// Enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	68da      	ldr	r2, [r3, #12]
 8001070:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <serial_initialise+0xc4>)
 8001072:	69db      	ldr	r3, [r3, #28]
 8001074:	4910      	ldr	r1, [pc, #64]	@ (80010b8 <serial_initialise+0xc4>)
 8001076:	4313      	orrs	r3, r2
 8001078:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	689a      	ldr	r2, [r3, #8]
 800107e:	4b0e      	ldr	r3, [pc, #56]	@ (80010b8 <serial_initialise+0xc4>)
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	490d      	ldr	r1, [pc, #52]	@ (80010b8 <serial_initialise+0xc4>)
 8001084:	4313      	orrs	r3, r2
 8001086:	618b      	str	r3, [r1, #24]


	// Get a pointer to the 16 bits of the BRR register that we want to change
    uint32_t pclk = get_pclk_freq(2);
 8001088:	2002      	movs	r0, #2
 800108a:	f7ff ff8d 	bl	8000fa8 <get_pclk_freq>
 800108e:	6178      	str	r0, [r7, #20]
    serial_port->UART->BRR = calculate_brr(baud_rate, pclk);
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	681c      	ldr	r4, [r3, #0]
 8001094:	6979      	ldr	r1, [r7, #20]
 8001096:	68f8      	ldr	r0, [r7, #12]
 8001098:	f7ff ff74 	bl	8000f84 <calculate_brr>
 800109c:	4603      	mov	r3, r0
 800109e:	60e3      	str	r3, [r4, #12]
		*baud_rate_config = 0x46;
		break;
	}
*/
	// Enable serial port for tx and rx
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f042 020d 	orr.w	r2, r2, #13
 80010ae:	601a      	str	r2, [r3, #0]
}
 80010b0:	bf00      	nop
 80010b2:	371c      	adds	r7, #28
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd90      	pop	{r4, r7, pc}
 80010b8:	40021000 	.word	0x40021000

080010bc <serial_output_char>:


// Output char using polling
void serial_output_char(char data, SerialPort *serial_port) {
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	6039      	str	r1, [r7, #0]
 80010c6:	71fb      	strb	r3, [r7, #7]

	while((serial_port->UART->ISR & USART_ISR_TXE) == 0){
 80010c8:	bf00      	nop
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	69db      	ldr	r3, [r3, #28]
 80010d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d0f8      	beq.n	80010ca <serial_output_char+0xe>
	}

	serial_port->UART->TDR = data;
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	79fa      	ldrb	r2, [r7, #7]
 80010de:	b292      	uxth	r2, r2
 80010e0:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <serial_output_string>:


// Output string using polling
void serial_output_string(char *string, SerialPort *serial_port) {
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b084      	sub	sp, #16
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
 80010f6:	6039      	str	r1, [r7, #0]

	uint32_t count = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60fb      	str	r3, [r7, #12]
	while(*string) {
 80010fc:	e00b      	b.n	8001116 <serial_output_string+0x28>
		serial_output_char(*string, serial_port);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	6839      	ldr	r1, [r7, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ffd9 	bl	80010bc <serial_output_char>
		count++;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	3301      	adds	r3, #1
 800110e:	60fb      	str	r3, [r7, #12]
		string++;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3301      	adds	r3, #1
 8001114:	607b      	str	r3, [r7, #4]
	while(*string) {
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1ef      	bne.n	80010fe <serial_output_string+0x10>
	}

	// Callback function pointer call
	if (serial_port->output_callback != NULL)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001122:	2b00      	cmp	r3, #0
 8001124:	d002      	beq.n	800112c <serial_output_string+0x3e>
		serial_port->output_callback();
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800112a:	4798      	blx	r3
}
 800112c:	bf00      	nop
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <enable_interrupts>:


// Enable interrupts needed for UART
void enable_interrupts(SerialPort *serial_port) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800113c:	b672      	cpsid	i
}
 800113e:	bf00      	nop
	__disable_irq();

	// Interrupt upon receiving data
	serial_port->UART->CR1 |= USART_CR1_RXNEIE_Msk;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f042 0220 	orr.w	r2, r2, #32
 800114e:	601a      	str	r2, [r3, #0]
	//serial_port->UART->CR1 |= USART_CR1_TXEIE_MSK;

	// Set priority and enable interrupts
	NVIC_SetPriority(USART1_IRQn, 1);
 8001150:	2101      	movs	r1, #1
 8001152:	2025      	movs	r0, #37	@ 0x25
 8001154:	f7ff feec 	bl	8000f30 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn);
 8001158:	2025      	movs	r0, #37	@ 0x25
 800115a:	f7ff fecb 	bl	8000ef4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800115e:	b662      	cpsie	i
}
 8001160:	bf00      	nop

	__enable_irq();
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <USART1_IRQHandler>:


// Function executed when interrupt called
// Double buffer implementation
void USART1_IRQHandler() {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
	// Check and handle overrun or frame errors
	if ((USART1_PORT.UART->ISR & USART_ISR_FE_Msk) || (USART1_PORT.UART->ISR & USART_ISR_ORE_Msk)) {
 8001172:	4b3c      	ldr	r3, [pc, #240]	@ (8001264 <USART1_IRQHandler+0xf8>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	69db      	ldr	r3, [r3, #28]
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d106      	bne.n	800118e <USART1_IRQHandler+0x22>
 8001180:	4b38      	ldr	r3, [pc, #224]	@ (8001264 <USART1_IRQHandler+0xf8>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	f003 0308 	and.w	r3, r3, #8
 800118a:	2b00      	cmp	r3, #0
 800118c:	d004      	beq.n	8001198 <USART1_IRQHandler+0x2c>

		USART1_PORT.UART->ICR = USART_ICR_ORECF | USART_ICR_FECF;
 800118e:	4b35      	ldr	r3, [pc, #212]	@ (8001264 <USART1_IRQHandler+0xf8>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	220a      	movs	r2, #10
 8001194:	621a      	str	r2, [r3, #32]

		return;
 8001196:	e061      	b.n	800125c <USART1_IRQHandler+0xf0>
	}

	// Check and handle for full buffer
	if (COUNTER == BUFFER_SIZE) {
 8001198:	4b33      	ldr	r3, [pc, #204]	@ (8001268 <USART1_IRQHandler+0xfc>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b40      	cmp	r3, #64	@ 0x40
 800119e:	d10d      	bne.n	80011bc <USART1_IRQHandler+0x50>
		COUNTER = 0;
 80011a0:	4b31      	ldr	r3, [pc, #196]	@ (8001268 <USART1_IRQHandler+0xfc>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]

		memset(DOUBLE_INPUT_BUFFER[ACTIVE_RX_BUFFER], '\0', BUFFER_SIZE);
 80011a6:	4b31      	ldr	r3, [pc, #196]	@ (800126c <USART1_IRQHandler+0x100>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	019b      	lsls	r3, r3, #6
 80011ac:	4a30      	ldr	r2, [pc, #192]	@ (8001270 <USART1_IRQHandler+0x104>)
 80011ae:	4413      	add	r3, r2
 80011b0:	2240      	movs	r2, #64	@ 0x40
 80011b2:	2100      	movs	r1, #0
 80011b4:	4618      	mov	r0, r3
 80011b6:	f002 ff8b 	bl	80040d0 <memset>

		return;
 80011ba:	e04f      	b.n	800125c <USART1_IRQHandler+0xf0>
	}

	if (USART1_PORT.UART->ISR & USART_ISR_RXNE_Msk) {
 80011bc:	4b29      	ldr	r3, [pc, #164]	@ (8001264 <USART1_IRQHandler+0xf8>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	f003 0320 	and.w	r3, r3, #32
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d048      	beq.n	800125c <USART1_IRQHandler+0xf0>
		char received = USART1_PORT.UART->RDR;
 80011ca:	4b26      	ldr	r3, [pc, #152]	@ (8001264 <USART1_IRQHandler+0xf8>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	71fb      	strb	r3, [r7, #7]

		// Store char
		DOUBLE_INPUT_BUFFER[ACTIVE_RX_BUFFER][COUNTER] = received;
 80011d4:	4b25      	ldr	r3, [pc, #148]	@ (800126c <USART1_IRQHandler+0x100>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	461a      	mov	r2, r3
 80011da:	4b23      	ldr	r3, [pc, #140]	@ (8001268 <USART1_IRQHandler+0xfc>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4924      	ldr	r1, [pc, #144]	@ (8001270 <USART1_IRQHandler+0x104>)
 80011e0:	0192      	lsls	r2, r2, #6
 80011e2:	440a      	add	r2, r1
 80011e4:	4413      	add	r3, r2
 80011e6:	79fa      	ldrb	r2, [r7, #7]
 80011e8:	701a      	strb	r2, [r3, #0]
		COUNTER++;
 80011ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001268 <USART1_IRQHandler+0xfc>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	3301      	adds	r3, #1
 80011f0:	4a1d      	ldr	r2, [pc, #116]	@ (8001268 <USART1_IRQHandler+0xfc>)
 80011f2:	6013      	str	r3, [r2, #0]

		// If termination character, NULL append and exit
		if (received == TERMINATE) {
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	2b0d      	cmp	r3, #13
 80011f8:	d12f      	bne.n	800125a <USART1_IRQHandler+0xee>
			DOUBLE_INPUT_BUFFER[ACTIVE_RX_BUFFER][COUNTER - 1] = '\0';
 80011fa:	4b1c      	ldr	r3, [pc, #112]	@ (800126c <USART1_IRQHandler+0x100>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	461a      	mov	r2, r3
 8001200:	4b19      	ldr	r3, [pc, #100]	@ (8001268 <USART1_IRQHandler+0xfc>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	3b01      	subs	r3, #1
 8001206:	491a      	ldr	r1, [pc, #104]	@ (8001270 <USART1_IRQHandler+0x104>)
 8001208:	0192      	lsls	r2, r2, #6
 800120a:	440a      	add	r2, r1
 800120c:	4413      	add	r3, r2
 800120e:	2200      	movs	r2, #0
 8001210:	701a      	strb	r2, [r3, #0]

			// Swap buffer
			uint8_t current = ACTIVE_RX_BUFFER;
 8001212:	4b16      	ldr	r3, [pc, #88]	@ (800126c <USART1_IRQHandler+0x100>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	71bb      	strb	r3, [r7, #6]
			ACTIVE_RX_BUFFER ^= 1;
 8001218:	4b14      	ldr	r3, [pc, #80]	@ (800126c <USART1_IRQHandler+0x100>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	f083 0301 	eor.w	r3, r3, #1
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4b12      	ldr	r3, [pc, #72]	@ (800126c <USART1_IRQHandler+0x100>)
 8001224:	701a      	strb	r2, [r3, #0]

			if (USART1_PORT.receive_callback != NULL) {
 8001226:	4b0f      	ldr	r3, [pc, #60]	@ (8001264 <USART1_IRQHandler+0xf8>)
 8001228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800122a:	2b00      	cmp	r3, #0
 800122c:	d009      	beq.n	8001242 <USART1_IRQHandler+0xd6>
				// Callback function pointer call
				USART1_PORT.receive_callback(DOUBLE_INPUT_BUFFER[current], COUNTER);
 800122e:	4b0d      	ldr	r3, [pc, #52]	@ (8001264 <USART1_IRQHandler+0xf8>)
 8001230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001232:	79ba      	ldrb	r2, [r7, #6]
 8001234:	0192      	lsls	r2, r2, #6
 8001236:	490e      	ldr	r1, [pc, #56]	@ (8001270 <USART1_IRQHandler+0x104>)
 8001238:	440a      	add	r2, r1
 800123a:	490b      	ldr	r1, [pc, #44]	@ (8001268 <USART1_IRQHandler+0xfc>)
 800123c:	6809      	ldr	r1, [r1, #0]
 800123e:	4610      	mov	r0, r2
 8001240:	4798      	blx	r3
			}

			// Reset counter and buffer after input finish
			COUNTER = 0;
 8001242:	4b09      	ldr	r3, [pc, #36]	@ (8001268 <USART1_IRQHandler+0xfc>)
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
			memset(DOUBLE_INPUT_BUFFER[current], '\0', BUFFER_SIZE);
 8001248:	79bb      	ldrb	r3, [r7, #6]
 800124a:	019b      	lsls	r3, r3, #6
 800124c:	4a08      	ldr	r2, [pc, #32]	@ (8001270 <USART1_IRQHandler+0x104>)
 800124e:	4413      	add	r3, r2
 8001250:	2240      	movs	r2, #64	@ 0x40
 8001252:	2100      	movs	r1, #0
 8001254:	4618      	mov	r0, r3
 8001256:	f002 ff3b 	bl	80040d0 <memset>
		}
		return;
 800125a:	bf00      	nop
	}

}
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000064 	.word	0x20000064
 8001268:	20000300 	.word	0x20000300
 800126c:	20000304 	.word	0x20000304
 8001270:	20000280 	.word	0x20000280

08001274 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127a:	4b0f      	ldr	r3, [pc, #60]	@ (80012b8 <HAL_MspInit+0x44>)
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	4a0e      	ldr	r2, [pc, #56]	@ (80012b8 <HAL_MspInit+0x44>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6193      	str	r3, [r2, #24]
 8001286:	4b0c      	ldr	r3, [pc, #48]	@ (80012b8 <HAL_MspInit+0x44>)
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001292:	4b09      	ldr	r3, [pc, #36]	@ (80012b8 <HAL_MspInit+0x44>)
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	4a08      	ldr	r2, [pc, #32]	@ (80012b8 <HAL_MspInit+0x44>)
 8001298:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800129c:	61d3      	str	r3, [r2, #28]
 800129e:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <HAL_MspInit+0x44>)
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	40021000 	.word	0x40021000

080012bc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80012bc:	b480      	push	{r7}
 80012be:	b087      	sub	sp, #28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012cc:	d10c      	bne.n	80012e8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012ce:	4b1b      	ldr	r3, [pc, #108]	@ (800133c <HAL_TIM_PWM_MspInit+0x80>)
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	4a1a      	ldr	r2, [pc, #104]	@ (800133c <HAL_TIM_PWM_MspInit+0x80>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	61d3      	str	r3, [r2, #28]
 80012da:	4b18      	ldr	r3, [pc, #96]	@ (800133c <HAL_TIM_PWM_MspInit+0x80>)
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80012e6:	e022      	b.n	800132e <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a14      	ldr	r2, [pc, #80]	@ (8001340 <HAL_TIM_PWM_MspInit+0x84>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d10c      	bne.n	800130c <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012f2:	4b12      	ldr	r3, [pc, #72]	@ (800133c <HAL_TIM_PWM_MspInit+0x80>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	4a11      	ldr	r2, [pc, #68]	@ (800133c <HAL_TIM_PWM_MspInit+0x80>)
 80012f8:	f043 0302 	orr.w	r3, r3, #2
 80012fc:	61d3      	str	r3, [r2, #28]
 80012fe:	4b0f      	ldr	r3, [pc, #60]	@ (800133c <HAL_TIM_PWM_MspInit+0x80>)
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	613b      	str	r3, [r7, #16]
 8001308:	693b      	ldr	r3, [r7, #16]
}
 800130a:	e010      	b.n	800132e <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM4)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a0c      	ldr	r2, [pc, #48]	@ (8001344 <HAL_TIM_PWM_MspInit+0x88>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d10b      	bne.n	800132e <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001316:	4b09      	ldr	r3, [pc, #36]	@ (800133c <HAL_TIM_PWM_MspInit+0x80>)
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	4a08      	ldr	r2, [pc, #32]	@ (800133c <HAL_TIM_PWM_MspInit+0x80>)
 800131c:	f043 0304 	orr.w	r3, r3, #4
 8001320:	61d3      	str	r3, [r2, #28]
 8001322:	4b06      	ldr	r3, [pc, #24]	@ (800133c <HAL_TIM_PWM_MspInit+0x80>)
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	f003 0304 	and.w	r3, r3, #4
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
}
 800132e:	bf00      	nop
 8001330:	371c      	adds	r7, #28
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40021000 	.word	0x40021000
 8001340:	40000400 	.word	0x40000400
 8001344:	40000800 	.word	0x40000800

08001348 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08a      	sub	sp, #40	@ 0x28
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001368:	d11d      	bne.n	80013a6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	4b33      	ldr	r3, [pc, #204]	@ (8001438 <HAL_TIM_MspPostInit+0xf0>)
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	4a32      	ldr	r2, [pc, #200]	@ (8001438 <HAL_TIM_MspPostInit+0xf0>)
 8001370:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001374:	6153      	str	r3, [r2, #20]
 8001376:	4b30      	ldr	r3, [pc, #192]	@ (8001438 <HAL_TIM_MspPostInit+0xf0>)
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001382:	2303      	movs	r3, #3
 8001384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001386:	2302      	movs	r3, #2
 8001388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138e:	2300      	movs	r3, #0
 8001390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001392:	2301      	movs	r3, #1
 8001394:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	4619      	mov	r1, r3
 800139c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013a0:	f000 fc6a 	bl	8001c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80013a4:	e043      	b.n	800142e <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM3)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a24      	ldr	r2, [pc, #144]	@ (800143c <HAL_TIM_MspPostInit+0xf4>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d11c      	bne.n	80013ea <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013b0:	4b21      	ldr	r3, [pc, #132]	@ (8001438 <HAL_TIM_MspPostInit+0xf0>)
 80013b2:	695b      	ldr	r3, [r3, #20]
 80013b4:	4a20      	ldr	r2, [pc, #128]	@ (8001438 <HAL_TIM_MspPostInit+0xf0>)
 80013b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013ba:	6153      	str	r3, [r2, #20]
 80013bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001438 <HAL_TIM_MspPostInit+0xf0>)
 80013be:	695b      	ldr	r3, [r3, #20]
 80013c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013c8:	230c      	movs	r3, #12
 80013ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d4:	2300      	movs	r3, #0
 80013d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013d8:	2302      	movs	r3, #2
 80013da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	4619      	mov	r1, r3
 80013e2:	4817      	ldr	r0, [pc, #92]	@ (8001440 <HAL_TIM_MspPostInit+0xf8>)
 80013e4:	f000 fc48 	bl	8001c78 <HAL_GPIO_Init>
}
 80013e8:	e021      	b.n	800142e <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM4)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a15      	ldr	r2, [pc, #84]	@ (8001444 <HAL_TIM_MspPostInit+0xfc>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d11c      	bne.n	800142e <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f4:	4b10      	ldr	r3, [pc, #64]	@ (8001438 <HAL_TIM_MspPostInit+0xf0>)
 80013f6:	695b      	ldr	r3, [r3, #20]
 80013f8:	4a0f      	ldr	r2, [pc, #60]	@ (8001438 <HAL_TIM_MspPostInit+0xf0>)
 80013fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80013fe:	6153      	str	r3, [r2, #20]
 8001400:	4b0d      	ldr	r3, [pc, #52]	@ (8001438 <HAL_TIM_MspPostInit+0xf0>)
 8001402:	695b      	ldr	r3, [r3, #20]
 8001404:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800140c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001410:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	2302      	movs	r3, #2
 8001414:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	2300      	movs	r3, #0
 800141c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800141e:	2302      	movs	r3, #2
 8001420:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001422:	f107 0314 	add.w	r3, r7, #20
 8001426:	4619      	mov	r1, r3
 8001428:	4807      	ldr	r0, [pc, #28]	@ (8001448 <HAL_TIM_MspPostInit+0x100>)
 800142a:	f000 fc25 	bl	8001c78 <HAL_GPIO_Init>
}
 800142e:	bf00      	nop
 8001430:	3728      	adds	r7, #40	@ 0x28
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40021000 	.word	0x40021000
 800143c:	40000400 	.word	0x40000400
 8001440:	48001000 	.word	0x48001000
 8001444:	40000800 	.word	0x40000800
 8001448:	48000c00 	.word	0x48000c00

0800144c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001450:	bf00      	nop
 8001452:	e7fd      	b.n	8001450 <NMI_Handler+0x4>

08001454 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <HardFault_Handler+0x4>

0800145c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <MemManage_Handler+0x4>

08001464 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001468:	bf00      	nop
 800146a:	e7fd      	b.n	8001468 <BusFault_Handler+0x4>

0800146c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001470:	bf00      	nop
 8001472:	e7fd      	b.n	8001470 <UsageFault_Handler+0x4>

08001474 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a2:	f000 fae3 	bl	8001a6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014b4:	4a14      	ldr	r2, [pc, #80]	@ (8001508 <_sbrk+0x5c>)
 80014b6:	4b15      	ldr	r3, [pc, #84]	@ (800150c <_sbrk+0x60>)
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014c0:	4b13      	ldr	r3, [pc, #76]	@ (8001510 <_sbrk+0x64>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d102      	bne.n	80014ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014c8:	4b11      	ldr	r3, [pc, #68]	@ (8001510 <_sbrk+0x64>)
 80014ca:	4a12      	ldr	r2, [pc, #72]	@ (8001514 <_sbrk+0x68>)
 80014cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ce:	4b10      	ldr	r3, [pc, #64]	@ (8001510 <_sbrk+0x64>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d207      	bcs.n	80014ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014dc:	f002 fe00 	bl	80040e0 <__errno>
 80014e0:	4603      	mov	r3, r0
 80014e2:	220c      	movs	r2, #12
 80014e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014e6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ea:	e009      	b.n	8001500 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014ec:	4b08      	ldr	r3, [pc, #32]	@ (8001510 <_sbrk+0x64>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014f2:	4b07      	ldr	r3, [pc, #28]	@ (8001510 <_sbrk+0x64>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	4a05      	ldr	r2, [pc, #20]	@ (8001510 <_sbrk+0x64>)
 80014fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014fe:	68fb      	ldr	r3, [r7, #12]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3718      	adds	r7, #24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	2000a000 	.word	0x2000a000
 800150c:	00000400 	.word	0x00000400
 8001510:	20000308 	.word	0x20000308
 8001514:	20000458 	.word	0x20000458

08001518 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800151c:	4b06      	ldr	r3, [pc, #24]	@ (8001538 <SystemInit+0x20>)
 800151e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001522:	4a05      	ldr	r2, [pc, #20]	@ (8001538 <SystemInit+0x20>)
 8001524:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001528:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <__NVIC_EnableIRQ>:
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154a:	2b00      	cmp	r3, #0
 800154c:	db0b      	blt.n	8001566 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	f003 021f 	and.w	r2, r3, #31
 8001554:	4907      	ldr	r1, [pc, #28]	@ (8001574 <__NVIC_EnableIRQ+0x38>)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	095b      	lsrs	r3, r3, #5
 800155c:	2001      	movs	r0, #1
 800155e:	fa00 f202 	lsl.w	r2, r0, r2
 8001562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000e100 	.word	0xe000e100

08001578 <timer_init>:


// ===== INITIALISATION =====


void timer_init(void) {
 8001578:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800157c:	b088      	sub	sp, #32
 800157e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001580:	b672      	cpsid	i
}
 8001582:	bf00      	nop
    __disable_irq();

    // enable all clocks
    for (uintmax_t i = 0; i < _TIMER_COUNT; i++) {
 8001584:	f04f 0200 	mov.w	r2, #0
 8001588:	f04f 0300 	mov.w	r3, #0
 800158c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001590:	e018      	b.n	80015c4 <timer_init+0x4c>
        const TimerClockEnable en = CLOCK_ENABLES[i];
 8001592:	4927      	ldr	r1, [pc, #156]	@ (8001630 <timer_init+0xb8>)
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4613      	mov	r3, r2
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	4413      	add	r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	18ca      	adds	r2, r1, r3
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80015a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *en.reg |=  en.mask;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6819      	ldr	r1, [r3, #0]
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	430a      	orrs	r2, r1
 80015b2:	601a      	str	r2, [r3, #0]
    for (uintmax_t i = 0; i < _TIMER_COUNT; i++) {
 80015b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015b8:	f112 0801 	adds.w	r8, r2, #1
 80015bc:	f143 0900 	adc.w	r9, r3, #0
 80015c0:	e9c7 8906 	strd	r8, r9, [r7, #24]
 80015c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015c8:	2a08      	cmp	r2, #8
 80015ca:	f173 0300 	sbcs.w	r3, r3, #0
 80015ce:	d3e0      	bcc.n	8001592 <timer_init+0x1a>
    }

    // enable irq events
    for (uintmax_t i = 0; i < _TIMER_COUNT; i++) {
 80015d0:	f04f 0200 	mov.w	r2, #0
 80015d4:	f04f 0300 	mov.w	r3, #0
 80015d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80015dc:	e01a      	b.n	8001614 <timer_init+0x9c>
        RAWS[i]->DIER |= TIM_DIER_UIE;
 80015de:	4a15      	ldr	r2, [pc, #84]	@ (8001634 <timer_init+0xbc>)
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e6:	68da      	ldr	r2, [r3, #12]
 80015e8:	4912      	ldr	r1, [pc, #72]	@ (8001634 <timer_init+0xbc>)
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80015f0:	f042 0201 	orr.w	r2, r2, #1
 80015f4:	60da      	str	r2, [r3, #12]
        NVIC_EnableIRQ(IRQ_NUMS[i]);
 80015f6:	4a10      	ldr	r2, [pc, #64]	@ (8001638 <timer_init+0xc0>)
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	4413      	add	r3, r2
 80015fc:	f993 3000 	ldrsb.w	r3, [r3]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff9b 	bl	800153c <__NVIC_EnableIRQ>
    for (uintmax_t i = 0; i < _TIMER_COUNT; i++) {
 8001606:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800160a:	1c54      	adds	r4, r2, #1
 800160c:	f143 0500 	adc.w	r5, r3, #0
 8001610:	e9c7 4504 	strd	r4, r5, [r7, #16]
 8001614:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001618:	2a08      	cmp	r2, #8
 800161a:	f173 0300 	sbcs.w	r3, r3, #0
 800161e:	d3de      	bcc.n	80015de <timer_init+0x66>
  __ASM volatile ("cpsie i" : : : "memory");
 8001620:	b662      	cpsie	i
}
 8001622:	bf00      	nop
    }

    __enable_irq();
}
 8001624:	bf00      	nop
 8001626:	3720      	adds	r7, #32
 8001628:	46bd      	mov	sp, r7
 800162a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800162e:	bf00      	nop
 8001630:	08004b40 	.word	0x08004b40
 8001634:	20000094 	.word	0x20000094
 8001638:	200000b4 	.word	0x200000b4

0800163c <timer_enable_set>:


// ===== CONTROL =====


void timer_enable_set(const TimerSel sel, const bool enable) {
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	460a      	mov	r2, r1
 8001646:	71fb      	strb	r3, [r7, #7]
 8001648:	4613      	mov	r3, r2
 800164a:	71bb      	strb	r3, [r7, #6]
    TimerRaw *raw = RAWS[sel];
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	4a1b      	ldr	r2, [pc, #108]	@ (80016bc <timer_enable_set+0x80>)
 8001650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001654:	60fb      	str	r3, [r7, #12]

    // clear interrupt flag in case event was already waiting
    raw->SR &= ~TIM_SR_UIF;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	f023 0201 	bic.w	r2, r3, #1
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	611a      	str	r2, [r3, #16]

    timer_counter_reset(sel);
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	4618      	mov	r0, r3
 8001666:	f000 f8c9 	bl	80017fc <timer_counter_reset>
    // HACK: After writes to `PSC`, `ARR`, and `CNT,
    // there seems to be a hardware bug that causes the `UIF` flag
    // to be set immediately.
    //
    // To avoid this, manually generate the interrupt, and then clear it
    raw->EGR |=  TIM_EGR_UG;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	f043 0201 	orr.w	r2, r3, #1
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	615a      	str	r2, [r3, #20]
    raw->SR  &= ~TIM_SR_UIF;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	f023 0201 	bic.w	r2, r3, #1
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	611a      	str	r2, [r3, #16]

    // Need to set `.enable` after the irq has fired
    // So if we are enabling, it dummy fires while `enable=false`,
    // which is ignored by the handler

    STATES[sel].enable = enable;
 8001682:	79fa      	ldrb	r2, [r7, #7]
 8001684:	490e      	ldr	r1, [pc, #56]	@ (80016c0 <timer_enable_set+0x84>)
 8001686:	4613      	mov	r3, r2
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	4413      	add	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	440b      	add	r3, r1
 8001690:	79ba      	ldrb	r2, [r7, #6]
 8001692:	701a      	strb	r2, [r3, #0]
    if (enable)
 8001694:	79bb      	ldrb	r3, [r7, #6]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d006      	beq.n	80016a8 <timer_enable_set+0x6c>
        raw->CR1 |=  TIM_CR1_CEN;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f043 0201 	orr.w	r2, r3, #1
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	601a      	str	r2, [r3, #0]
    else
        raw->CR1 &= ~TIM_CR1_CEN;

}
 80016a6:	e005      	b.n	80016b4 <timer_enable_set+0x78>
        raw->CR1 &= ~TIM_CR1_CEN;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f023 0201 	bic.w	r2, r3, #1
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	601a      	str	r2, [r3, #0]
}
 80016b4:	bf00      	nop
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20000094 	.word	0x20000094
 80016c0:	200000bc 	.word	0x200000bc

080016c4 <timer_silent_set>:
    // detect if the bit is masked on
    const TimerClockEnable en = CLOCK_ENABLES[sel];
    return *en.reg & en.mask;
}

void timer_silent_set(const TimerSel sel, const bool silent) {
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	460a      	mov	r2, r1
 80016ce:	71fb      	strb	r3, [r7, #7]
 80016d0:	4613      	mov	r3, r2
 80016d2:	71bb      	strb	r3, [r7, #6]
    STATES[sel].silent = silent;
 80016d4:	79fa      	ldrb	r2, [r7, #7]
 80016d6:	4907      	ldr	r1, [pc, #28]	@ (80016f4 <timer_silent_set+0x30>)
 80016d8:	4613      	mov	r3, r2
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	4413      	add	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	440b      	add	r3, r1
 80016e2:	3301      	adds	r3, #1
 80016e4:	79ba      	ldrb	r2, [r7, #6]
 80016e6:	701a      	strb	r2, [r3, #0]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	200000bc 	.word	0x200000bc

080016f8 <timer_period_set>:


// ===== PERIOD =====


void timer_period_set(const TimerSel sel, const TimerPeriod period) {
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	460a      	mov	r2, r1
 8001702:	71fb      	strb	r3, [r7, #7]
 8001704:	4613      	mov	r3, r2
 8001706:	80bb      	strh	r3, [r7, #4]
    STATES[sel].period = period;
 8001708:	79fa      	ldrb	r2, [r7, #7]
 800170a:	490b      	ldr	r1, [pc, #44]	@ (8001738 <timer_period_set+0x40>)
 800170c:	4613      	mov	r3, r2
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	4413      	add	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	440b      	add	r3, r1
 8001716:	3304      	adds	r3, #4
 8001718:	88ba      	ldrh	r2, [r7, #4]
 800171a:	801a      	strh	r2, [r3, #0]
    TimerRaw *raw = RAWS[sel];
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	4a07      	ldr	r2, [pc, #28]	@ (800173c <timer_period_set+0x44>)
 8001720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001724:	60fb      	str	r3, [r7, #12]
    raw->ARR = period;
 8001726:	88ba      	ldrh	r2, [r7, #4]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800172c:	bf00      	nop
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	200000bc 	.word	0x200000bc
 800173c:	20000094 	.word	0x20000094

08001740 <timer_prescaler_set>:
TimerPeriod timer_period_get(const TimerSel sel) {
    return STATES[sel].period;
}


void timer_prescaler_set(const TimerSel sel, const TimerPrescale scale) {
 8001740:	b4b0      	push	{r4, r5, r7}
 8001742:	b087      	sub	sp, #28
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	460a      	mov	r2, r1
 800174a:	71fb      	strb	r3, [r7, #7]
 800174c:	4613      	mov	r3, r2
 800174e:	80bb      	strh	r3, [r7, #4]
    STATES[sel].prescale = scale;
 8001750:	79fa      	ldrb	r2, [r7, #7]
 8001752:	491b      	ldr	r1, [pc, #108]	@ (80017c0 <timer_prescaler_set+0x80>)
 8001754:	4613      	mov	r3, r2
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	4413      	add	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	440b      	add	r3, r1
 800175e:	3306      	adds	r3, #6
 8001760:	88ba      	ldrh	r2, [r7, #4]
 8001762:	801a      	strh	r2, [r3, #0]
    TimerRaw *const raw = RAWS[sel];
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	4a17      	ldr	r2, [pc, #92]	@ (80017c4 <timer_prescaler_set+0x84>)
 8001768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800176c:	60fb      	str	r3, [r7, #12]
    raw->PSC = scale;
 800176e:	88ba      	ldrh	r2, [r7, #4]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	629a      	str	r2, [r3, #40]	@ 0x28

    // changing the prescaler will not take effect until counter overflow
    // so set reload to `1` and counter to `0`, to immediately overflow
    // and apply changes
    const uint32_t arr = raw->ARR;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001778:	60bb      	str	r3, [r7, #8]
    raw->ARR = 1;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2201      	movs	r2, #1
 800177e:	62da      	str	r2, [r3, #44]	@ 0x2c
    raw->CNT = 0;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2200      	movs	r2, #0
 8001784:	625a      	str	r2, [r3, #36]	@ 0x24
    // spin to give time for changes to take affect
    for (uintmax_t i = 0; i < 8; i++)
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	f04f 0300 	mov.w	r3, #0
 800178e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001792:	e007      	b.n	80017a4 <timer_prescaler_set+0x64>
        asm("NOP");
 8001794:	bf00      	nop
    for (uintmax_t i = 0; i < 8; i++)
 8001796:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800179a:	1c54      	adds	r4, r2, #1
 800179c:	f143 0500 	adc.w	r5, r3, #0
 80017a0:	e9c7 4504 	strd	r4, r5, [r7, #16]
 80017a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80017a8:	2a08      	cmp	r2, #8
 80017aa:	f173 0300 	sbcs.w	r3, r3, #0
 80017ae:	d3f1      	bcc.n	8001794 <timer_prescaler_set+0x54>
    raw->ARR = arr;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	68ba      	ldr	r2, [r7, #8]
 80017b4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80017b6:	bf00      	nop
 80017b8:	371c      	adds	r7, #28
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bcb0      	pop	{r4, r5, r7}
 80017be:	4770      	bx	lr
 80017c0:	200000bc 	.word	0x200000bc
 80017c4:	20000094 	.word	0x20000094

080017c8 <timer_recur_set>:
TimerPrescale timer_prescale_get(const TimerSel sel) {
    return STATES[sel].prescale;
}

// TODO: See TIM->CR1->OPM for oneshot mode
void timer_recur_set(const TimerSel sel, const bool recur) {
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	460a      	mov	r2, r1
 80017d2:	71fb      	strb	r3, [r7, #7]
 80017d4:	4613      	mov	r3, r2
 80017d6:	71bb      	strb	r3, [r7, #6]
    STATES[sel].recur = recur;
 80017d8:	79fa      	ldrb	r2, [r7, #7]
 80017da:	4907      	ldr	r1, [pc, #28]	@ (80017f8 <timer_recur_set+0x30>)
 80017dc:	4613      	mov	r3, r2
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	4413      	add	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	440b      	add	r3, r1
 80017e6:	3302      	adds	r3, #2
 80017e8:	79ba      	ldrb	r2, [r7, #6]
 80017ea:	701a      	strb	r2, [r3, #0]
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	200000bc 	.word	0x200000bc

080017fc <timer_counter_reset>:
bool timer_recur_get(const TimerSel sel) {
    return STATES[sel].recur;
}


void timer_counter_reset(const TimerSel sel) {
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	71fb      	strb	r3, [r7, #7]
    RAWS[sel]->CNT = 0;
 8001806:	79fb      	ldrb	r3, [r7, #7]
 8001808:	4a05      	ldr	r2, [pc, #20]	@ (8001820 <timer_counter_reset+0x24>)
 800180a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800180e:	2200      	movs	r2, #0
 8001810:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	20000094 	.word	0x20000094

08001824 <_timer_interrupt_handler>:

// ===== CALLBACKS =====


/// The callback handler called by our IRQ handlers
static void _timer_interrupt_handler(const TimerSel sel, GameState *game) {
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	6039      	str	r1, [r7, #0]
 800182e:	71fb      	strb	r3, [r7, #7]
    TimerRaw *raw = RAWS[sel];
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	4a25      	ldr	r2, [pc, #148]	@ (80018c8 <_timer_interrupt_handler+0xa4>)
 8001834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001838:	617b      	str	r3, [r7, #20]

    // check it was definitely this timer that fired
    // since multiple timers can share one event
    if (!(raw->SR & TIM_SR_UIF))
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b00      	cmp	r3, #0
 8001844:	d03a      	beq.n	80018bc <_timer_interrupt_handler+0x98>
        return;

    // clear interrupt flag so it doesn't get called again
    raw->SR &= ~TIM_SR_UIF;
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	f023 0201 	bic.w	r2, r3, #1
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	611a      	str	r2, [r3, #16]

    TimerState *const state = &STATES[sel];
 8001852:	79fa      	ldrb	r2, [r7, #7]
 8001854:	4613      	mov	r3, r2
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	4413      	add	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4a1b      	ldr	r2, [pc, #108]	@ (80018cc <_timer_interrupt_handler+0xa8>)
 800185e:	4413      	add	r3, r2
 8001860:	613b      	str	r3, [r7, #16]

    // We may get a dummy fire when enabling the timer, see `timer_enable_set()`
    if (!state->enable)
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	f083 0301 	eor.w	r3, r3, #1
 800186a:	b2db      	uxtb	r3, r3
 800186c:	2b00      	cmp	r3, #0
 800186e:	d127      	bne.n	80018c0 <_timer_interrupt_handler+0x9c>
        return;

    // update silent for future firings
    const bool was_silent = state->silent;
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	785b      	ldrb	r3, [r3, #1]
 8001874:	73fb      	strb	r3, [r7, #15]
    state->silent = !state->recur;
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	789b      	ldrb	r3, [r3, #2]
 800187a:	2b00      	cmp	r3, #0
 800187c:	bf14      	ite	ne
 800187e:	2301      	movne	r3, #1
 8001880:	2300      	moveq	r3, #0
 8001882:	b2db      	uxtb	r3, r3
 8001884:	f083 0301 	eor.w	r3, r3, #1
 8001888:	b2db      	uxtb	r3, r3
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	b2da      	uxtb	r2, r3
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	705a      	strb	r2, [r3, #1]

    // call callback if enabled and has been set
    // do this after setting silent, so the callback
    // can un-silence itself
    if (!was_silent && state->callback != NULL)
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	f083 0301 	eor.w	r3, r3, #1
 800189a:	b2db      	uxtb	r3, r3
 800189c:	2b00      	cmp	r3, #0
 800189e:	d008      	beq.n	80018b2 <_timer_interrupt_handler+0x8e>
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d004      	beq.n	80018b2 <_timer_interrupt_handler+0x8e>
        state->callback(sel);
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	79fa      	ldrb	r2, [r7, #7]
 80018ae:	4610      	mov	r0, r2
 80018b0:	4798      	blx	r3

    // TODO: should not be using this, use auto reload
    // reset counter
    timer_counter_reset(sel);
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff ffa1 	bl	80017fc <timer_counter_reset>
 80018ba:	e002      	b.n	80018c2 <_timer_interrupt_handler+0x9e>
        return;
 80018bc:	bf00      	nop
 80018be:	e000      	b.n	80018c2 <_timer_interrupt_handler+0x9e>
        return;
 80018c0:	bf00      	nop
}
 80018c2:	3718      	adds	r7, #24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000094 	.word	0x20000094
 80018cc:	200000bc 	.word	0x200000bc

080018d0 <timer_callback_set>:

void timer_callback_set(const TimerSel sel, TimerCallbackFn *const callback) {
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	6039      	str	r1, [r7, #0]
 80018da:	71fb      	strb	r3, [r7, #7]
    STATES[sel].callback = callback;
 80018dc:	79fa      	ldrb	r2, [r7, #7]
 80018de:	4907      	ldr	r1, [pc, #28]	@ (80018fc <timer_callback_set+0x2c>)
 80018e0:	4613      	mov	r3, r2
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	4413      	add	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	440b      	add	r3, r1
 80018ea:	3308      	adds	r3, #8
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	601a      	str	r2, [r3, #0]
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	200000bc 	.word	0x200000bc

08001900 <TIM2_IRQHandler>:
// NOTE: IRQ handlers seem to be added by overriding the weakly linked
// default handler. Some are also shared for multiple events


// TIM2 global interrupt
void TIM2_IRQHandler(void) {
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
    _timer_interrupt_handler(TIMER_SEL_2, &game);
 8001904:	4902      	ldr	r1, [pc, #8]	@ (8001910 <TIM2_IRQHandler+0x10>)
 8001906:	2000      	movs	r0, #0
 8001908:	f7ff ff8c 	bl	8001824 <_timer_interrupt_handler>
}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}
 8001910:	2000000c 	.word	0x2000000c

08001914 <TIM3_IRQHandler>:
// TIM3 global interrupt
void TIM3_IRQHandler(void) {
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
    _timer_interrupt_handler(TIMER_SEL_3, &game);
 8001918:	4902      	ldr	r1, [pc, #8]	@ (8001924 <TIM3_IRQHandler+0x10>)
 800191a:	2001      	movs	r0, #1
 800191c:	f7ff ff82 	bl	8001824 <_timer_interrupt_handler>
}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}
 8001924:	2000000c 	.word	0x2000000c

08001928 <TIM4_IRQHandler>:
// TIM4 global interrupt
void TIM4_IRQHandler(void) {
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
    _timer_interrupt_handler(TIMER_SEL_4, &game);
 800192c:	4902      	ldr	r1, [pc, #8]	@ (8001938 <TIM4_IRQHandler+0x10>)
 800192e:	2002      	movs	r0, #2
 8001930:	f7ff ff78 	bl	8001824 <_timer_interrupt_handler>
}
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}
 8001938:	2000000c 	.word	0x2000000c

0800193c <TIM7_IRQHandler>:
// TIM6 global and DAC12 underrun interrupts
void TIM6_DACUNDER_IRQHandler(void) {
    _timer_interrupt_handler(TIMER_SEL_6, &game);
}
// TIM7 global interrupt
void TIM7_IRQHandler(void) {
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
    _timer_interrupt_handler(TIMER_SEL_7, &game);
 8001940:	4902      	ldr	r1, [pc, #8]	@ (800194c <TIM7_IRQHandler+0x10>)
 8001942:	2004      	movs	r0, #4
 8001944:	f7ff ff6e 	bl	8001824 <_timer_interrupt_handler>
}
 8001948:	bf00      	nop
 800194a:	bd80      	pop	{r7, pc}
 800194c:	2000000c 	.word	0x2000000c

08001950 <TIM1_BRK_TIM15_IRQHandler>:
// TIM1 Break/TIM15 global interrupts
void TIM1_BRK_TIM15_IRQHandler(void) {
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
    _timer_interrupt_handler(TIMER_SEL_15, &game);
 8001954:	4902      	ldr	r1, [pc, #8]	@ (8001960 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001956:	2005      	movs	r0, #5
 8001958:	f7ff ff64 	bl	8001824 <_timer_interrupt_handler>
}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}
 8001960:	2000000c 	.word	0x2000000c

08001964 <TIM1_UP_TIM16_IRQHandler>:
// TIM1 Update/TIM16 global interrupts
void TIM1_UP_TIM16_IRQHandler(void) {
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
    _timer_interrupt_handler(TIMER_SEL_16, &game);
 8001968:	4902      	ldr	r1, [pc, #8]	@ (8001974 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800196a:	2006      	movs	r0, #6
 800196c:	f7ff ff5a 	bl	8001824 <_timer_interrupt_handler>
}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}
 8001974:	2000000c 	.word	0x2000000c

08001978 <TIM1_TRG_COM_TIM17_IRQHandler>:
// TIM1 trigger and commutation/TIM17 interrupts
void TIM1_TRG_COM_TIM17_IRQHandler(void) {
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
    _timer_interrupt_handler(TIMER_SEL_17, &game);
 800197c:	4902      	ldr	r1, [pc, #8]	@ (8001988 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800197e:	2007      	movs	r0, #7
 8001980:	f7ff ff50 	bl	8001824 <_timer_interrupt_handler>
}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}
 8001988:	2000000c 	.word	0x2000000c

0800198c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800198c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019c4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001990:	f7ff fdc2 	bl	8001518 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001994:	480c      	ldr	r0, [pc, #48]	@ (80019c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001996:	490d      	ldr	r1, [pc, #52]	@ (80019cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001998:	4a0d      	ldr	r2, [pc, #52]	@ (80019d0 <LoopForever+0xe>)
  movs r3, #0
 800199a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800199c:	e002      	b.n	80019a4 <LoopCopyDataInit>

0800199e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800199e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019a2:	3304      	adds	r3, #4

080019a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a8:	d3f9      	bcc.n	800199e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019aa:	4a0a      	ldr	r2, [pc, #40]	@ (80019d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019ac:	4c0a      	ldr	r4, [pc, #40]	@ (80019d8 <LoopForever+0x16>)
  movs r3, #0
 80019ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019b0:	e001      	b.n	80019b6 <LoopFillZerobss>

080019b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019b4:	3204      	adds	r2, #4

080019b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b8:	d3fb      	bcc.n	80019b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ba:	f002 fb97 	bl	80040ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019be:	f7fe ff4d 	bl	800085c <main>

080019c2 <LoopForever>:

LoopForever:
    b LoopForever
 80019c2:	e7fe      	b.n	80019c2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80019c4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80019c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019cc:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 80019d0:	08004c04 	.word	0x08004c04
  ldr r2, =_sbss
 80019d4:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 80019d8:	20000458 	.word	0x20000458

080019dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019dc:	e7fe      	b.n	80019dc <ADC1_2_IRQHandler>
	...

080019e0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019e4:	4b08      	ldr	r3, [pc, #32]	@ (8001a08 <HAL_Init+0x28>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a07      	ldr	r2, [pc, #28]	@ (8001a08 <HAL_Init+0x28>)
 80019ea:	f043 0310 	orr.w	r3, r3, #16
 80019ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f0:	2003      	movs	r0, #3
 80019f2:	f000 f90d 	bl	8001c10 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019f6:	200f      	movs	r0, #15
 80019f8:	f000 f808 	bl	8001a0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019fc:	f7ff fc3a 	bl	8001274 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40022000 	.word	0x40022000

08001a0c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a14:	4b12      	ldr	r3, [pc, #72]	@ (8001a60 <HAL_InitTick+0x54>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4b12      	ldr	r3, [pc, #72]	@ (8001a64 <HAL_InitTick+0x58>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f000 f917 	bl	8001c5e <HAL_SYSTICK_Config>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e00e      	b.n	8001a58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b0f      	cmp	r3, #15
 8001a3e:	d80a      	bhi.n	8001a56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a40:	2200      	movs	r2, #0
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	f04f 30ff 	mov.w	r0, #4294967295
 8001a48:	f000 f8ed 	bl	8001c26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a4c:	4a06      	ldr	r2, [pc, #24]	@ (8001a68 <HAL_InitTick+0x5c>)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
 8001a54:	e000      	b.n	8001a58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20000090 	.word	0x20000090
 8001a64:	20000120 	.word	0x20000120
 8001a68:	2000011c 	.word	0x2000011c

08001a6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a70:	4b06      	ldr	r3, [pc, #24]	@ (8001a8c <HAL_IncTick+0x20>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	461a      	mov	r2, r3
 8001a76:	4b06      	ldr	r3, [pc, #24]	@ (8001a90 <HAL_IncTick+0x24>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	4a04      	ldr	r2, [pc, #16]	@ (8001a90 <HAL_IncTick+0x24>)
 8001a7e:	6013      	str	r3, [r2, #0]
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	20000120 	.word	0x20000120
 8001a90:	2000030c 	.word	0x2000030c

08001a94 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return uwTick;  
 8001a98:	4b03      	ldr	r3, [pc, #12]	@ (8001aa8 <HAL_GetTick+0x14>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	2000030c 	.word	0x2000030c

08001aac <__NVIC_SetPriorityGrouping>:
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001abc:	4b0c      	ldr	r3, [pc, #48]	@ (8001af0 <__NVIC_SetPriorityGrouping+0x44>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ac2:	68ba      	ldr	r2, [r7, #8]
 8001ac4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ac8:	4013      	ands	r3, r2
 8001aca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ad4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ad8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ade:	4a04      	ldr	r2, [pc, #16]	@ (8001af0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	60d3      	str	r3, [r2, #12]
}
 8001ae4:	bf00      	nop
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <__NVIC_GetPriorityGrouping>:
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001af8:	4b04      	ldr	r3, [pc, #16]	@ (8001b0c <__NVIC_GetPriorityGrouping+0x18>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	0a1b      	lsrs	r3, r3, #8
 8001afe:	f003 0307 	and.w	r3, r3, #7
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <__NVIC_SetPriority>:
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	6039      	str	r1, [r7, #0]
 8001b1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	db0a      	blt.n	8001b3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	490c      	ldr	r1, [pc, #48]	@ (8001b5c <__NVIC_SetPriority+0x4c>)
 8001b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2e:	0112      	lsls	r2, r2, #4
 8001b30:	b2d2      	uxtb	r2, r2
 8001b32:	440b      	add	r3, r1
 8001b34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001b38:	e00a      	b.n	8001b50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	4908      	ldr	r1, [pc, #32]	@ (8001b60 <__NVIC_SetPriority+0x50>)
 8001b40:	79fb      	ldrb	r3, [r7, #7]
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	3b04      	subs	r3, #4
 8001b48:	0112      	lsls	r2, r2, #4
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	440b      	add	r3, r1
 8001b4e:	761a      	strb	r2, [r3, #24]
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	e000e100 	.word	0xe000e100
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b089      	sub	sp, #36	@ 0x24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f1c3 0307 	rsb	r3, r3, #7
 8001b7e:	2b04      	cmp	r3, #4
 8001b80:	bf28      	it	cs
 8001b82:	2304      	movcs	r3, #4
 8001b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3304      	adds	r3, #4
 8001b8a:	2b06      	cmp	r3, #6
 8001b8c:	d902      	bls.n	8001b94 <NVIC_EncodePriority+0x30>
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	3b03      	subs	r3, #3
 8001b92:	e000      	b.n	8001b96 <NVIC_EncodePriority+0x32>
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b98:	f04f 32ff 	mov.w	r2, #4294967295
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43da      	mvns	r2, r3
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	401a      	ands	r2, r3
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bac:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb6:	43d9      	mvns	r1, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bbc:	4313      	orrs	r3, r2
         );
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3724      	adds	r7, #36	@ 0x24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
	...

08001bcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bdc:	d301      	bcc.n	8001be2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bde:	2301      	movs	r3, #1
 8001be0:	e00f      	b.n	8001c02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001be2:	4a0a      	ldr	r2, [pc, #40]	@ (8001c0c <SysTick_Config+0x40>)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bea:	210f      	movs	r1, #15
 8001bec:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf0:	f7ff ff8e 	bl	8001b10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bf4:	4b05      	ldr	r3, [pc, #20]	@ (8001c0c <SysTick_Config+0x40>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bfa:	4b04      	ldr	r3, [pc, #16]	@ (8001c0c <SysTick_Config+0x40>)
 8001bfc:	2207      	movs	r2, #7
 8001bfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	e000e010 	.word	0xe000e010

08001c10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f7ff ff47 	bl	8001aac <__NVIC_SetPriorityGrouping>
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b086      	sub	sp, #24
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	60b9      	str	r1, [r7, #8]
 8001c30:	607a      	str	r2, [r7, #4]
 8001c32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c38:	f7ff ff5c 	bl	8001af4 <__NVIC_GetPriorityGrouping>
 8001c3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	68b9      	ldr	r1, [r7, #8]
 8001c42:	6978      	ldr	r0, [r7, #20]
 8001c44:	f7ff ff8e 	bl	8001b64 <NVIC_EncodePriority>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c4e:	4611      	mov	r1, r2
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff ff5d 	bl	8001b10 <__NVIC_SetPriority>
}
 8001c56:	bf00      	nop
 8001c58:	3718      	adds	r7, #24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7ff ffb0 	bl	8001bcc <SysTick_Config>
 8001c6c:	4603      	mov	r3, r0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b087      	sub	sp, #28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c86:	e154      	b.n	8001f32 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	fa01 f303 	lsl.w	r3, r1, r3
 8001c94:	4013      	ands	r3, r2
 8001c96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f000 8146 	beq.w	8001f2c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 0303 	and.w	r3, r3, #3
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d005      	beq.n	8001cb8 <HAL_GPIO_Init+0x40>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d130      	bne.n	8001d1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	2203      	movs	r2, #3
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	68da      	ldr	r2, [r3, #12]
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cee:	2201      	movs	r2, #1
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	091b      	lsrs	r3, r3, #4
 8001d04:	f003 0201 	and.w	r2, r3, #1
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	2b03      	cmp	r3, #3
 8001d24:	d017      	beq.n	8001d56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	2203      	movs	r2, #3
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43db      	mvns	r3, r3
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d123      	bne.n	8001daa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	08da      	lsrs	r2, r3, #3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3208      	adds	r2, #8
 8001d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	220f      	movs	r2, #15
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	4013      	ands	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	691a      	ldr	r2, [r3, #16]
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	08da      	lsrs	r2, r3, #3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3208      	adds	r2, #8
 8001da4:	6939      	ldr	r1, [r7, #16]
 8001da6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	2203      	movs	r2, #3
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 0203 	and.w	r2, r3, #3
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f000 80a0 	beq.w	8001f2c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dec:	4b58      	ldr	r3, [pc, #352]	@ (8001f50 <HAL_GPIO_Init+0x2d8>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	4a57      	ldr	r2, [pc, #348]	@ (8001f50 <HAL_GPIO_Init+0x2d8>)
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	6193      	str	r3, [r2, #24]
 8001df8:	4b55      	ldr	r3, [pc, #340]	@ (8001f50 <HAL_GPIO_Init+0x2d8>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	60bb      	str	r3, [r7, #8]
 8001e02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e04:	4a53      	ldr	r2, [pc, #332]	@ (8001f54 <HAL_GPIO_Init+0x2dc>)
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	089b      	lsrs	r3, r3, #2
 8001e0a:	3302      	adds	r3, #2
 8001e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	f003 0303 	and.w	r3, r3, #3
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	220f      	movs	r2, #15
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4013      	ands	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e2e:	d019      	beq.n	8001e64 <HAL_GPIO_Init+0x1ec>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a49      	ldr	r2, [pc, #292]	@ (8001f58 <HAL_GPIO_Init+0x2e0>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d013      	beq.n	8001e60 <HAL_GPIO_Init+0x1e8>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a48      	ldr	r2, [pc, #288]	@ (8001f5c <HAL_GPIO_Init+0x2e4>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d00d      	beq.n	8001e5c <HAL_GPIO_Init+0x1e4>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a47      	ldr	r2, [pc, #284]	@ (8001f60 <HAL_GPIO_Init+0x2e8>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d007      	beq.n	8001e58 <HAL_GPIO_Init+0x1e0>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a46      	ldr	r2, [pc, #280]	@ (8001f64 <HAL_GPIO_Init+0x2ec>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d101      	bne.n	8001e54 <HAL_GPIO_Init+0x1dc>
 8001e50:	2304      	movs	r3, #4
 8001e52:	e008      	b.n	8001e66 <HAL_GPIO_Init+0x1ee>
 8001e54:	2305      	movs	r3, #5
 8001e56:	e006      	b.n	8001e66 <HAL_GPIO_Init+0x1ee>
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e004      	b.n	8001e66 <HAL_GPIO_Init+0x1ee>
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	e002      	b.n	8001e66 <HAL_GPIO_Init+0x1ee>
 8001e60:	2301      	movs	r3, #1
 8001e62:	e000      	b.n	8001e66 <HAL_GPIO_Init+0x1ee>
 8001e64:	2300      	movs	r3, #0
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	f002 0203 	and.w	r2, r2, #3
 8001e6c:	0092      	lsls	r2, r2, #2
 8001e6e:	4093      	lsls	r3, r2
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e76:	4937      	ldr	r1, [pc, #220]	@ (8001f54 <HAL_GPIO_Init+0x2dc>)
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	089b      	lsrs	r3, r3, #2
 8001e7c:	3302      	adds	r3, #2
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e84:	4b38      	ldr	r3, [pc, #224]	@ (8001f68 <HAL_GPIO_Init+0x2f0>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4013      	ands	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ea8:	4a2f      	ldr	r2, [pc, #188]	@ (8001f68 <HAL_GPIO_Init+0x2f0>)
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001eae:	4b2e      	ldr	r3, [pc, #184]	@ (8001f68 <HAL_GPIO_Init+0x2f0>)
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ed2:	4a25      	ldr	r2, [pc, #148]	@ (8001f68 <HAL_GPIO_Init+0x2f0>)
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ed8:	4b23      	ldr	r3, [pc, #140]	@ (8001f68 <HAL_GPIO_Init+0x2f0>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001efc:	4a1a      	ldr	r2, [pc, #104]	@ (8001f68 <HAL_GPIO_Init+0x2f0>)
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f02:	4b19      	ldr	r3, [pc, #100]	@ (8001f68 <HAL_GPIO_Init+0x2f0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f26:	4a10      	ldr	r2, [pc, #64]	@ (8001f68 <HAL_GPIO_Init+0x2f0>)
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f47f aea3 	bne.w	8001c88 <HAL_GPIO_Init+0x10>
  }
}
 8001f42:	bf00      	nop
 8001f44:	bf00      	nop
 8001f46:	371c      	adds	r7, #28
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	40021000 	.word	0x40021000
 8001f54:	40010000 	.word	0x40010000
 8001f58:	48000400 	.word	0x48000400
 8001f5c:	48000800 	.word	0x48000800
 8001f60:	48000c00 	.word	0x48000c00
 8001f64:	48001000 	.word	0x48001000
 8001f68:	40010400 	.word	0x40010400

08001f6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f78:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f7c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d102      	bne.n	8001f92 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	f001 b823 	b.w	8002fd8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f96:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 817d 	beq.w	80022a2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001fa8:	4bbc      	ldr	r3, [pc, #752]	@ (800229c <HAL_RCC_OscConfig+0x330>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 030c 	and.w	r3, r3, #12
 8001fb0:	2b04      	cmp	r3, #4
 8001fb2:	d00c      	beq.n	8001fce <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fb4:	4bb9      	ldr	r3, [pc, #740]	@ (800229c <HAL_RCC_OscConfig+0x330>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 030c 	and.w	r3, r3, #12
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	d15c      	bne.n	800207a <HAL_RCC_OscConfig+0x10e>
 8001fc0:	4bb6      	ldr	r3, [pc, #728]	@ (800229c <HAL_RCC_OscConfig+0x330>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fcc:	d155      	bne.n	800207a <HAL_RCC_OscConfig+0x10e>
 8001fce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001fd2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001fda:	fa93 f3a3 	rbit	r3, r3
 8001fde:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001fe2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe6:	fab3 f383 	clz	r3, r3
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	095b      	lsrs	r3, r3, #5
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d102      	bne.n	8002000 <HAL_RCC_OscConfig+0x94>
 8001ffa:	4ba8      	ldr	r3, [pc, #672]	@ (800229c <HAL_RCC_OscConfig+0x330>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	e015      	b.n	800202c <HAL_RCC_OscConfig+0xc0>
 8002000:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002004:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002008:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800200c:	fa93 f3a3 	rbit	r3, r3
 8002010:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002014:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002018:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800201c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002020:	fa93 f3a3 	rbit	r3, r3
 8002024:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002028:	4b9c      	ldr	r3, [pc, #624]	@ (800229c <HAL_RCC_OscConfig+0x330>)
 800202a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800202c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002030:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002034:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002038:	fa92 f2a2 	rbit	r2, r2
 800203c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002040:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002044:	fab2 f282 	clz	r2, r2
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	f042 0220 	orr.w	r2, r2, #32
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	f002 021f 	and.w	r2, r2, #31
 8002054:	2101      	movs	r1, #1
 8002056:	fa01 f202 	lsl.w	r2, r1, r2
 800205a:	4013      	ands	r3, r2
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 811f 	beq.w	80022a0 <HAL_RCC_OscConfig+0x334>
 8002062:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002066:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	f040 8116 	bne.w	80022a0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	f000 bfaf 	b.w	8002fd8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800207a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800207e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800208a:	d106      	bne.n	800209a <HAL_RCC_OscConfig+0x12e>
 800208c:	4b83      	ldr	r3, [pc, #524]	@ (800229c <HAL_RCC_OscConfig+0x330>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a82      	ldr	r2, [pc, #520]	@ (800229c <HAL_RCC_OscConfig+0x330>)
 8002092:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002096:	6013      	str	r3, [r2, #0]
 8002098:	e036      	b.n	8002108 <HAL_RCC_OscConfig+0x19c>
 800209a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800209e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d10c      	bne.n	80020c4 <HAL_RCC_OscConfig+0x158>
 80020aa:	4b7c      	ldr	r3, [pc, #496]	@ (800229c <HAL_RCC_OscConfig+0x330>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a7b      	ldr	r2, [pc, #492]	@ (800229c <HAL_RCC_OscConfig+0x330>)
 80020b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	4b79      	ldr	r3, [pc, #484]	@ (800229c <HAL_RCC_OscConfig+0x330>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a78      	ldr	r2, [pc, #480]	@ (800229c <HAL_RCC_OscConfig+0x330>)
 80020bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	e021      	b.n	8002108 <HAL_RCC_OscConfig+0x19c>
 80020c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020d4:	d10c      	bne.n	80020f0 <HAL_RCC_OscConfig+0x184>
 80020d6:	4b71      	ldr	r3, [pc, #452]	@ (800229c <HAL_RCC_OscConfig+0x330>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a70      	ldr	r2, [pc, #448]	@ (800229c <HAL_RCC_OscConfig+0x330>)
 80020dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	4b6e      	ldr	r3, [pc, #440]	@ (800229c <HAL_RCC_OscConfig+0x330>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a6d      	ldr	r2, [pc, #436]	@ (800229c <HAL_RCC_OscConfig+0x330>)
 80020e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	e00b      	b.n	8002108 <HAL_RCC_OscConfig+0x19c>
 80020f0:	4b6a      	ldr	r3, [pc, #424]	@ (800229c <HAL_RCC_OscConfig+0x330>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a69      	ldr	r2, [pc, #420]	@ (800229c <HAL_RCC_OscConfig+0x330>)
 80020f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020fa:	6013      	str	r3, [r2, #0]
 80020fc:	4b67      	ldr	r3, [pc, #412]	@ (800229c <HAL_RCC_OscConfig+0x330>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a66      	ldr	r2, [pc, #408]	@ (800229c <HAL_RCC_OscConfig+0x330>)
 8002102:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002106:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002108:	4b64      	ldr	r3, [pc, #400]	@ (800229c <HAL_RCC_OscConfig+0x330>)
 800210a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800210c:	f023 020f 	bic.w	r2, r3, #15
 8002110:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002114:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	495f      	ldr	r1, [pc, #380]	@ (800229c <HAL_RCC_OscConfig+0x330>)
 800211e:	4313      	orrs	r3, r2
 8002120:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002122:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002126:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d059      	beq.n	80021e6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002132:	f7ff fcaf 	bl	8001a94 <HAL_GetTick>
 8002136:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213a:	e00a      	b.n	8002152 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800213c:	f7ff fcaa 	bl	8001a94 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b64      	cmp	r3, #100	@ 0x64
 800214a:	d902      	bls.n	8002152 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	f000 bf43 	b.w	8002fd8 <HAL_RCC_OscConfig+0x106c>
 8002152:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002156:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800215e:	fa93 f3a3 	rbit	r3, r3
 8002162:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002166:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216a:	fab3 f383 	clz	r3, r3
 800216e:	b2db      	uxtb	r3, r3
 8002170:	095b      	lsrs	r3, r3, #5
 8002172:	b2db      	uxtb	r3, r3
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b01      	cmp	r3, #1
 800217c:	d102      	bne.n	8002184 <HAL_RCC_OscConfig+0x218>
 800217e:	4b47      	ldr	r3, [pc, #284]	@ (800229c <HAL_RCC_OscConfig+0x330>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	e015      	b.n	80021b0 <HAL_RCC_OscConfig+0x244>
 8002184:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002188:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002190:	fa93 f3a3 	rbit	r3, r3
 8002194:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002198:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800219c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80021a0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80021a4:	fa93 f3a3 	rbit	r3, r3
 80021a8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80021ac:	4b3b      	ldr	r3, [pc, #236]	@ (800229c <HAL_RCC_OscConfig+0x330>)
 80021ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80021b4:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80021b8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80021bc:	fa92 f2a2 	rbit	r2, r2
 80021c0:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80021c4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80021c8:	fab2 f282 	clz	r2, r2
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	f042 0220 	orr.w	r2, r2, #32
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	f002 021f 	and.w	r2, r2, #31
 80021d8:	2101      	movs	r1, #1
 80021da:	fa01 f202 	lsl.w	r2, r1, r2
 80021de:	4013      	ands	r3, r2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0ab      	beq.n	800213c <HAL_RCC_OscConfig+0x1d0>
 80021e4:	e05d      	b.n	80022a2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e6:	f7ff fc55 	bl	8001a94 <HAL_GetTick>
 80021ea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ee:	e00a      	b.n	8002206 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021f0:	f7ff fc50 	bl	8001a94 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b64      	cmp	r3, #100	@ 0x64
 80021fe:	d902      	bls.n	8002206 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	f000 bee9 	b.w	8002fd8 <HAL_RCC_OscConfig+0x106c>
 8002206:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800220a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002212:	fa93 f3a3 	rbit	r3, r3
 8002216:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800221a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800221e:	fab3 f383 	clz	r3, r3
 8002222:	b2db      	uxtb	r3, r3
 8002224:	095b      	lsrs	r3, r3, #5
 8002226:	b2db      	uxtb	r3, r3
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b01      	cmp	r3, #1
 8002230:	d102      	bne.n	8002238 <HAL_RCC_OscConfig+0x2cc>
 8002232:	4b1a      	ldr	r3, [pc, #104]	@ (800229c <HAL_RCC_OscConfig+0x330>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	e015      	b.n	8002264 <HAL_RCC_OscConfig+0x2f8>
 8002238:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800223c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002240:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002244:	fa93 f3a3 	rbit	r3, r3
 8002248:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800224c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002250:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002254:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002258:	fa93 f3a3 	rbit	r3, r3
 800225c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002260:	4b0e      	ldr	r3, [pc, #56]	@ (800229c <HAL_RCC_OscConfig+0x330>)
 8002262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002264:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002268:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800226c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002270:	fa92 f2a2 	rbit	r2, r2
 8002274:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002278:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800227c:	fab2 f282 	clz	r2, r2
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	f042 0220 	orr.w	r2, r2, #32
 8002286:	b2d2      	uxtb	r2, r2
 8002288:	f002 021f 	and.w	r2, r2, #31
 800228c:	2101      	movs	r1, #1
 800228e:	fa01 f202 	lsl.w	r2, r1, r2
 8002292:	4013      	ands	r3, r2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1ab      	bne.n	80021f0 <HAL_RCC_OscConfig+0x284>
 8002298:	e003      	b.n	80022a2 <HAL_RCC_OscConfig+0x336>
 800229a:	bf00      	nop
 800229c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f000 817d 	beq.w	80025b2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80022b8:	4ba6      	ldr	r3, [pc, #664]	@ (8002554 <HAL_RCC_OscConfig+0x5e8>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 030c 	and.w	r3, r3, #12
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00b      	beq.n	80022dc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80022c4:	4ba3      	ldr	r3, [pc, #652]	@ (8002554 <HAL_RCC_OscConfig+0x5e8>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 030c 	and.w	r3, r3, #12
 80022cc:	2b08      	cmp	r3, #8
 80022ce:	d172      	bne.n	80023b6 <HAL_RCC_OscConfig+0x44a>
 80022d0:	4ba0      	ldr	r3, [pc, #640]	@ (8002554 <HAL_RCC_OscConfig+0x5e8>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d16c      	bne.n	80023b6 <HAL_RCC_OscConfig+0x44a>
 80022dc:	2302      	movs	r3, #2
 80022de:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80022e6:	fa93 f3a3 	rbit	r3, r3
 80022ea:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80022ee:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022f2:	fab3 f383 	clz	r3, r3
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	095b      	lsrs	r3, r3, #5
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	f043 0301 	orr.w	r3, r3, #1
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b01      	cmp	r3, #1
 8002304:	d102      	bne.n	800230c <HAL_RCC_OscConfig+0x3a0>
 8002306:	4b93      	ldr	r3, [pc, #588]	@ (8002554 <HAL_RCC_OscConfig+0x5e8>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	e013      	b.n	8002334 <HAL_RCC_OscConfig+0x3c8>
 800230c:	2302      	movs	r3, #2
 800230e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002312:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002316:	fa93 f3a3 	rbit	r3, r3
 800231a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800231e:	2302      	movs	r3, #2
 8002320:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002324:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002328:	fa93 f3a3 	rbit	r3, r3
 800232c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002330:	4b88      	ldr	r3, [pc, #544]	@ (8002554 <HAL_RCC_OscConfig+0x5e8>)
 8002332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002334:	2202      	movs	r2, #2
 8002336:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800233a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800233e:	fa92 f2a2 	rbit	r2, r2
 8002342:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002346:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800234a:	fab2 f282 	clz	r2, r2
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	f042 0220 	orr.w	r2, r2, #32
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	f002 021f 	and.w	r2, r2, #31
 800235a:	2101      	movs	r1, #1
 800235c:	fa01 f202 	lsl.w	r2, r1, r2
 8002360:	4013      	ands	r3, r2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00a      	beq.n	800237c <HAL_RCC_OscConfig+0x410>
 8002366:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800236a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d002      	beq.n	800237c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	f000 be2e 	b.w	8002fd8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237c:	4b75      	ldr	r3, [pc, #468]	@ (8002554 <HAL_RCC_OscConfig+0x5e8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002384:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002388:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	21f8      	movs	r1, #248	@ 0xf8
 8002392:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002396:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800239a:	fa91 f1a1 	rbit	r1, r1
 800239e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80023a2:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80023a6:	fab1 f181 	clz	r1, r1
 80023aa:	b2c9      	uxtb	r1, r1
 80023ac:	408b      	lsls	r3, r1
 80023ae:	4969      	ldr	r1, [pc, #420]	@ (8002554 <HAL_RCC_OscConfig+0x5e8>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023b4:	e0fd      	b.n	80025b2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 8088 	beq.w	80024d8 <HAL_RCC_OscConfig+0x56c>
 80023c8:	2301      	movs	r3, #1
 80023ca:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ce:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80023d2:	fa93 f3a3 	rbit	r3, r3
 80023d6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80023da:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023de:	fab3 f383 	clz	r3, r3
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80023e8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	461a      	mov	r2, r3
 80023f0:	2301      	movs	r3, #1
 80023f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f4:	f7ff fb4e 	bl	8001a94 <HAL_GetTick>
 80023f8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023fc:	e00a      	b.n	8002414 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023fe:	f7ff fb49 	bl	8001a94 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d902      	bls.n	8002414 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	f000 bde2 	b.w	8002fd8 <HAL_RCC_OscConfig+0x106c>
 8002414:	2302      	movs	r3, #2
 8002416:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800241e:	fa93 f3a3 	rbit	r3, r3
 8002422:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002426:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800242a:	fab3 f383 	clz	r3, r3
 800242e:	b2db      	uxtb	r3, r3
 8002430:	095b      	lsrs	r3, r3, #5
 8002432:	b2db      	uxtb	r3, r3
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b01      	cmp	r3, #1
 800243c:	d102      	bne.n	8002444 <HAL_RCC_OscConfig+0x4d8>
 800243e:	4b45      	ldr	r3, [pc, #276]	@ (8002554 <HAL_RCC_OscConfig+0x5e8>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	e013      	b.n	800246c <HAL_RCC_OscConfig+0x500>
 8002444:	2302      	movs	r3, #2
 8002446:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800244e:	fa93 f3a3 	rbit	r3, r3
 8002452:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002456:	2302      	movs	r3, #2
 8002458:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800245c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002460:	fa93 f3a3 	rbit	r3, r3
 8002464:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002468:	4b3a      	ldr	r3, [pc, #232]	@ (8002554 <HAL_RCC_OscConfig+0x5e8>)
 800246a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246c:	2202      	movs	r2, #2
 800246e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002472:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002476:	fa92 f2a2 	rbit	r2, r2
 800247a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800247e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002482:	fab2 f282 	clz	r2, r2
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	f042 0220 	orr.w	r2, r2, #32
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	f002 021f 	and.w	r2, r2, #31
 8002492:	2101      	movs	r1, #1
 8002494:	fa01 f202 	lsl.w	r2, r1, r2
 8002498:	4013      	ands	r3, r2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0af      	beq.n	80023fe <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800249e:	4b2d      	ldr	r3, [pc, #180]	@ (8002554 <HAL_RCC_OscConfig+0x5e8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	21f8      	movs	r1, #248	@ 0xf8
 80024b4:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b8:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80024bc:	fa91 f1a1 	rbit	r1, r1
 80024c0:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80024c4:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80024c8:	fab1 f181 	clz	r1, r1
 80024cc:	b2c9      	uxtb	r1, r1
 80024ce:	408b      	lsls	r3, r1
 80024d0:	4920      	ldr	r1, [pc, #128]	@ (8002554 <HAL_RCC_OscConfig+0x5e8>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	600b      	str	r3, [r1, #0]
 80024d6:	e06c      	b.n	80025b2 <HAL_RCC_OscConfig+0x646>
 80024d8:	2301      	movs	r3, #1
 80024da:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024de:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80024e2:	fa93 f3a3 	rbit	r3, r3
 80024e6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80024ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ee:	fab3 f383 	clz	r3, r3
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80024f8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	461a      	mov	r2, r3
 8002500:	2300      	movs	r3, #0
 8002502:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002504:	f7ff fac6 	bl	8001a94 <HAL_GetTick>
 8002508:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250c:	e00a      	b.n	8002524 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800250e:	f7ff fac1 	bl	8001a94 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d902      	bls.n	8002524 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	f000 bd5a 	b.w	8002fd8 <HAL_RCC_OscConfig+0x106c>
 8002524:	2302      	movs	r3, #2
 8002526:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800252e:	fa93 f3a3 	rbit	r3, r3
 8002532:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002536:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800253a:	fab3 f383 	clz	r3, r3
 800253e:	b2db      	uxtb	r3, r3
 8002540:	095b      	lsrs	r3, r3, #5
 8002542:	b2db      	uxtb	r3, r3
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b01      	cmp	r3, #1
 800254c:	d104      	bne.n	8002558 <HAL_RCC_OscConfig+0x5ec>
 800254e:	4b01      	ldr	r3, [pc, #4]	@ (8002554 <HAL_RCC_OscConfig+0x5e8>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	e015      	b.n	8002580 <HAL_RCC_OscConfig+0x614>
 8002554:	40021000 	.word	0x40021000
 8002558:	2302      	movs	r3, #2
 800255a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002562:	fa93 f3a3 	rbit	r3, r3
 8002566:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800256a:	2302      	movs	r3, #2
 800256c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002570:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002574:	fa93 f3a3 	rbit	r3, r3
 8002578:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800257c:	4bc8      	ldr	r3, [pc, #800]	@ (80028a0 <HAL_RCC_OscConfig+0x934>)
 800257e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002580:	2202      	movs	r2, #2
 8002582:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002586:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800258a:	fa92 f2a2 	rbit	r2, r2
 800258e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002592:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002596:	fab2 f282 	clz	r2, r2
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	f042 0220 	orr.w	r2, r2, #32
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	f002 021f 	and.w	r2, r2, #31
 80025a6:	2101      	movs	r1, #1
 80025a8:	fa01 f202 	lsl.w	r2, r1, r2
 80025ac:	4013      	ands	r3, r2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1ad      	bne.n	800250e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 8110 	beq.w	80027e8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d079      	beq.n	80026cc <HAL_RCC_OscConfig+0x760>
 80025d8:	2301      	movs	r3, #1
 80025da:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025de:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80025e2:	fa93 f3a3 	rbit	r3, r3
 80025e6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80025ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ee:	fab3 f383 	clz	r3, r3
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	461a      	mov	r2, r3
 80025f6:	4bab      	ldr	r3, [pc, #684]	@ (80028a4 <HAL_RCC_OscConfig+0x938>)
 80025f8:	4413      	add	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	461a      	mov	r2, r3
 80025fe:	2301      	movs	r3, #1
 8002600:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002602:	f7ff fa47 	bl	8001a94 <HAL_GetTick>
 8002606:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800260a:	e00a      	b.n	8002622 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800260c:	f7ff fa42 	bl	8001a94 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d902      	bls.n	8002622 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	f000 bcdb 	b.w	8002fd8 <HAL_RCC_OscConfig+0x106c>
 8002622:	2302      	movs	r3, #2
 8002624:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002628:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800262c:	fa93 f3a3 	rbit	r3, r3
 8002630:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002634:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002638:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800263c:	2202      	movs	r2, #2
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002644:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	fa93 f2a3 	rbit	r2, r3
 800264e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002652:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800265c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002660:	2202      	movs	r2, #2
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002668:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	fa93 f2a3 	rbit	r2, r3
 8002672:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002676:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800267a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800267c:	4b88      	ldr	r3, [pc, #544]	@ (80028a0 <HAL_RCC_OscConfig+0x934>)
 800267e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002680:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002684:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002688:	2102      	movs	r1, #2
 800268a:	6019      	str	r1, [r3, #0]
 800268c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002690:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	fa93 f1a3 	rbit	r1, r3
 800269a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800269e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80026a2:	6019      	str	r1, [r3, #0]
  return result;
 80026a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	fab3 f383 	clz	r3, r3
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	f003 031f 	and.w	r3, r3, #31
 80026be:	2101      	movs	r1, #1
 80026c0:	fa01 f303 	lsl.w	r3, r1, r3
 80026c4:	4013      	ands	r3, r2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0a0      	beq.n	800260c <HAL_RCC_OscConfig+0x6a0>
 80026ca:	e08d      	b.n	80027e8 <HAL_RCC_OscConfig+0x87c>
 80026cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80026d4:	2201      	movs	r2, #1
 80026d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026dc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	fa93 f2a3 	rbit	r2, r3
 80026e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ea:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80026ee:	601a      	str	r2, [r3, #0]
  return result;
 80026f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80026f8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026fa:	fab3 f383 	clz	r3, r3
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	461a      	mov	r2, r3
 8002702:	4b68      	ldr	r3, [pc, #416]	@ (80028a4 <HAL_RCC_OscConfig+0x938>)
 8002704:	4413      	add	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	461a      	mov	r2, r3
 800270a:	2300      	movs	r3, #0
 800270c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800270e:	f7ff f9c1 	bl	8001a94 <HAL_GetTick>
 8002712:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002716:	e00a      	b.n	800272e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002718:	f7ff f9bc 	bl	8001a94 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d902      	bls.n	800272e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	f000 bc55 	b.w	8002fd8 <HAL_RCC_OscConfig+0x106c>
 800272e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002732:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002736:	2202      	movs	r2, #2
 8002738:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800273e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	fa93 f2a3 	rbit	r2, r3
 8002748:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800274c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002756:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800275a:	2202      	movs	r2, #2
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002762:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	fa93 f2a3 	rbit	r2, r3
 800276c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002770:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800277a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800277e:	2202      	movs	r2, #2
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002786:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	fa93 f2a3 	rbit	r2, r3
 8002790:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002794:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002798:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800279a:	4b41      	ldr	r3, [pc, #260]	@ (80028a0 <HAL_RCC_OscConfig+0x934>)
 800279c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800279e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80027a6:	2102      	movs	r1, #2
 80027a8:	6019      	str	r1, [r3, #0]
 80027aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ae:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	fa93 f1a3 	rbit	r1, r3
 80027b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027bc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027c0:	6019      	str	r1, [r3, #0]
  return result;
 80027c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027c6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	fab3 f383 	clz	r3, r3
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	f003 031f 	and.w	r3, r3, #31
 80027dc:	2101      	movs	r1, #1
 80027de:	fa01 f303 	lsl.w	r3, r1, r3
 80027e2:	4013      	ands	r3, r2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d197      	bne.n	8002718 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 81a1 	beq.w	8002b40 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027fe:	2300      	movs	r3, #0
 8002800:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002804:	4b26      	ldr	r3, [pc, #152]	@ (80028a0 <HAL_RCC_OscConfig+0x934>)
 8002806:	69db      	ldr	r3, [r3, #28]
 8002808:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d116      	bne.n	800283e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002810:	4b23      	ldr	r3, [pc, #140]	@ (80028a0 <HAL_RCC_OscConfig+0x934>)
 8002812:	69db      	ldr	r3, [r3, #28]
 8002814:	4a22      	ldr	r2, [pc, #136]	@ (80028a0 <HAL_RCC_OscConfig+0x934>)
 8002816:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800281a:	61d3      	str	r3, [r2, #28]
 800281c:	4b20      	ldr	r3, [pc, #128]	@ (80028a0 <HAL_RCC_OscConfig+0x934>)
 800281e:	69db      	ldr	r3, [r3, #28]
 8002820:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002824:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002828:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800282c:	601a      	str	r2, [r3, #0]
 800282e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002832:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002836:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002838:	2301      	movs	r3, #1
 800283a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800283e:	4b1a      	ldr	r3, [pc, #104]	@ (80028a8 <HAL_RCC_OscConfig+0x93c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002846:	2b00      	cmp	r3, #0
 8002848:	d11a      	bne.n	8002880 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800284a:	4b17      	ldr	r3, [pc, #92]	@ (80028a8 <HAL_RCC_OscConfig+0x93c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a16      	ldr	r2, [pc, #88]	@ (80028a8 <HAL_RCC_OscConfig+0x93c>)
 8002850:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002854:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002856:	f7ff f91d 	bl	8001a94 <HAL_GetTick>
 800285a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800285e:	e009      	b.n	8002874 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002860:	f7ff f918 	bl	8001a94 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b64      	cmp	r3, #100	@ 0x64
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e3b1      	b.n	8002fd8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002874:	4b0c      	ldr	r3, [pc, #48]	@ (80028a8 <HAL_RCC_OscConfig+0x93c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0ef      	beq.n	8002860 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002880:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002884:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d10d      	bne.n	80028ac <HAL_RCC_OscConfig+0x940>
 8002890:	4b03      	ldr	r3, [pc, #12]	@ (80028a0 <HAL_RCC_OscConfig+0x934>)
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	4a02      	ldr	r2, [pc, #8]	@ (80028a0 <HAL_RCC_OscConfig+0x934>)
 8002896:	f043 0301 	orr.w	r3, r3, #1
 800289a:	6213      	str	r3, [r2, #32]
 800289c:	e03c      	b.n	8002918 <HAL_RCC_OscConfig+0x9ac>
 800289e:	bf00      	nop
 80028a0:	40021000 	.word	0x40021000
 80028a4:	10908120 	.word	0x10908120
 80028a8:	40007000 	.word	0x40007000
 80028ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10c      	bne.n	80028d6 <HAL_RCC_OscConfig+0x96a>
 80028bc:	4bc1      	ldr	r3, [pc, #772]	@ (8002bc4 <HAL_RCC_OscConfig+0xc58>)
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	4ac0      	ldr	r2, [pc, #768]	@ (8002bc4 <HAL_RCC_OscConfig+0xc58>)
 80028c2:	f023 0301 	bic.w	r3, r3, #1
 80028c6:	6213      	str	r3, [r2, #32]
 80028c8:	4bbe      	ldr	r3, [pc, #760]	@ (8002bc4 <HAL_RCC_OscConfig+0xc58>)
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	4abd      	ldr	r2, [pc, #756]	@ (8002bc4 <HAL_RCC_OscConfig+0xc58>)
 80028ce:	f023 0304 	bic.w	r3, r3, #4
 80028d2:	6213      	str	r3, [r2, #32]
 80028d4:	e020      	b.n	8002918 <HAL_RCC_OscConfig+0x9ac>
 80028d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	2b05      	cmp	r3, #5
 80028e4:	d10c      	bne.n	8002900 <HAL_RCC_OscConfig+0x994>
 80028e6:	4bb7      	ldr	r3, [pc, #732]	@ (8002bc4 <HAL_RCC_OscConfig+0xc58>)
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	4ab6      	ldr	r2, [pc, #728]	@ (8002bc4 <HAL_RCC_OscConfig+0xc58>)
 80028ec:	f043 0304 	orr.w	r3, r3, #4
 80028f0:	6213      	str	r3, [r2, #32]
 80028f2:	4bb4      	ldr	r3, [pc, #720]	@ (8002bc4 <HAL_RCC_OscConfig+0xc58>)
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	4ab3      	ldr	r2, [pc, #716]	@ (8002bc4 <HAL_RCC_OscConfig+0xc58>)
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	6213      	str	r3, [r2, #32]
 80028fe:	e00b      	b.n	8002918 <HAL_RCC_OscConfig+0x9ac>
 8002900:	4bb0      	ldr	r3, [pc, #704]	@ (8002bc4 <HAL_RCC_OscConfig+0xc58>)
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	4aaf      	ldr	r2, [pc, #700]	@ (8002bc4 <HAL_RCC_OscConfig+0xc58>)
 8002906:	f023 0301 	bic.w	r3, r3, #1
 800290a:	6213      	str	r3, [r2, #32]
 800290c:	4bad      	ldr	r3, [pc, #692]	@ (8002bc4 <HAL_RCC_OscConfig+0xc58>)
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	4aac      	ldr	r2, [pc, #688]	@ (8002bc4 <HAL_RCC_OscConfig+0xc58>)
 8002912:	f023 0304 	bic.w	r3, r3, #4
 8002916:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002918:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800291c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 8081 	beq.w	8002a2c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800292a:	f7ff f8b3 	bl	8001a94 <HAL_GetTick>
 800292e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002932:	e00b      	b.n	800294c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002934:	f7ff f8ae 	bl	8001a94 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002944:	4293      	cmp	r3, r2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e345      	b.n	8002fd8 <HAL_RCC_OscConfig+0x106c>
 800294c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002950:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002954:	2202      	movs	r2, #2
 8002956:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002958:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800295c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	fa93 f2a3 	rbit	r2, r3
 8002966:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800296a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002974:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002978:	2202      	movs	r2, #2
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002980:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	fa93 f2a3 	rbit	r2, r3
 800298a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800298e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002992:	601a      	str	r2, [r3, #0]
  return result;
 8002994:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002998:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800299c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800299e:	fab3 f383 	clz	r3, r3
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	095b      	lsrs	r3, r3, #5
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	f043 0302 	orr.w	r3, r3, #2
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d102      	bne.n	80029b8 <HAL_RCC_OscConfig+0xa4c>
 80029b2:	4b84      	ldr	r3, [pc, #528]	@ (8002bc4 <HAL_RCC_OscConfig+0xc58>)
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	e013      	b.n	80029e0 <HAL_RCC_OscConfig+0xa74>
 80029b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029bc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80029c0:	2202      	movs	r2, #2
 80029c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	fa93 f2a3 	rbit	r2, r3
 80029d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	4b79      	ldr	r3, [pc, #484]	@ (8002bc4 <HAL_RCC_OscConfig+0xc58>)
 80029de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029e4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80029e8:	2102      	movs	r1, #2
 80029ea:	6011      	str	r1, [r2, #0]
 80029ec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029f0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80029f4:	6812      	ldr	r2, [r2, #0]
 80029f6:	fa92 f1a2 	rbit	r1, r2
 80029fa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029fe:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002a02:	6011      	str	r1, [r2, #0]
  return result;
 8002a04:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a08:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002a0c:	6812      	ldr	r2, [r2, #0]
 8002a0e:	fab2 f282 	clz	r2, r2
 8002a12:	b2d2      	uxtb	r2, r2
 8002a14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a18:	b2d2      	uxtb	r2, r2
 8002a1a:	f002 021f 	and.w	r2, r2, #31
 8002a1e:	2101      	movs	r1, #1
 8002a20:	fa01 f202 	lsl.w	r2, r1, r2
 8002a24:	4013      	ands	r3, r2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d084      	beq.n	8002934 <HAL_RCC_OscConfig+0x9c8>
 8002a2a:	e07f      	b.n	8002b2c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a2c:	f7ff f832 	bl	8001a94 <HAL_GetTick>
 8002a30:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a34:	e00b      	b.n	8002a4e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a36:	f7ff f82d 	bl	8001a94 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e2c4      	b.n	8002fd8 <HAL_RCC_OscConfig+0x106c>
 8002a4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a52:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002a56:	2202      	movs	r2, #2
 8002a58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a5e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	fa93 f2a3 	rbit	r2, r3
 8002a68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a6c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a76:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a82:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	fa93 f2a3 	rbit	r2, r3
 8002a8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a90:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002a94:	601a      	str	r2, [r3, #0]
  return result;
 8002a96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a9a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002a9e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aa0:	fab3 f383 	clz	r3, r3
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	095b      	lsrs	r3, r3, #5
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	f043 0302 	orr.w	r3, r3, #2
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d102      	bne.n	8002aba <HAL_RCC_OscConfig+0xb4e>
 8002ab4:	4b43      	ldr	r3, [pc, #268]	@ (8002bc4 <HAL_RCC_OscConfig+0xc58>)
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	e013      	b.n	8002ae2 <HAL_RCC_OscConfig+0xb76>
 8002aba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002abe:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aca:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	fa93 f2a3 	rbit	r2, r3
 8002ad4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	4b39      	ldr	r3, [pc, #228]	@ (8002bc4 <HAL_RCC_OscConfig+0xc58>)
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ae6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002aea:	2102      	movs	r1, #2
 8002aec:	6011      	str	r1, [r2, #0]
 8002aee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002af2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002af6:	6812      	ldr	r2, [r2, #0]
 8002af8:	fa92 f1a2 	rbit	r1, r2
 8002afc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b00:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002b04:	6011      	str	r1, [r2, #0]
  return result;
 8002b06:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b0a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002b0e:	6812      	ldr	r2, [r2, #0]
 8002b10:	fab2 f282 	clz	r2, r2
 8002b14:	b2d2      	uxtb	r2, r2
 8002b16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	f002 021f 	and.w	r2, r2, #31
 8002b20:	2101      	movs	r1, #1
 8002b22:	fa01 f202 	lsl.w	r2, r1, r2
 8002b26:	4013      	ands	r3, r2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d184      	bne.n	8002a36 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b2c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d105      	bne.n	8002b40 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b34:	4b23      	ldr	r3, [pc, #140]	@ (8002bc4 <HAL_RCC_OscConfig+0xc58>)
 8002b36:	69db      	ldr	r3, [r3, #28]
 8002b38:	4a22      	ldr	r2, [pc, #136]	@ (8002bc4 <HAL_RCC_OscConfig+0xc58>)
 8002b3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b3e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b44:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f000 8242 	beq.w	8002fd6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b52:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc4 <HAL_RCC_OscConfig+0xc58>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f003 030c 	and.w	r3, r3, #12
 8002b5a:	2b08      	cmp	r3, #8
 8002b5c:	f000 8213 	beq.w	8002f86 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b64:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	69db      	ldr	r3, [r3, #28]
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	f040 8162 	bne.w	8002e36 <HAL_RCC_OscConfig+0xeca>
 8002b72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b76:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002b7a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b84:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	fa93 f2a3 	rbit	r2, r3
 8002b8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b92:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002b96:	601a      	str	r2, [r3, #0]
  return result;
 8002b98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b9c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002ba0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba2:	fab3 f383 	clz	r3, r3
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002bac:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb8:	f7fe ff6c 	bl	8001a94 <HAL_GetTick>
 8002bbc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bc0:	e00c      	b.n	8002bdc <HAL_RCC_OscConfig+0xc70>
 8002bc2:	bf00      	nop
 8002bc4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bc8:	f7fe ff64 	bl	8001a94 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e1fd      	b.n	8002fd8 <HAL_RCC_OscConfig+0x106c>
 8002bdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002be4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002be8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bee:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	fa93 f2a3 	rbit	r2, r3
 8002bf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bfc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002c00:	601a      	str	r2, [r3, #0]
  return result;
 8002c02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c06:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002c0a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c0c:	fab3 f383 	clz	r3, r3
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	095b      	lsrs	r3, r3, #5
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	f043 0301 	orr.w	r3, r3, #1
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d102      	bne.n	8002c26 <HAL_RCC_OscConfig+0xcba>
 8002c20:	4bb0      	ldr	r3, [pc, #704]	@ (8002ee4 <HAL_RCC_OscConfig+0xf78>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	e027      	b.n	8002c76 <HAL_RCC_OscConfig+0xd0a>
 8002c26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c2a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002c2e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c38:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	fa93 f2a3 	rbit	r2, r3
 8002c42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c46:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c50:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002c54:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c5e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	fa93 f2a3 	rbit	r2, r3
 8002c68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c6c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	4b9c      	ldr	r3, [pc, #624]	@ (8002ee4 <HAL_RCC_OscConfig+0xf78>)
 8002c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c76:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c7a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002c7e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002c82:	6011      	str	r1, [r2, #0]
 8002c84:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c88:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002c8c:	6812      	ldr	r2, [r2, #0]
 8002c8e:	fa92 f1a2 	rbit	r1, r2
 8002c92:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c96:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002c9a:	6011      	str	r1, [r2, #0]
  return result;
 8002c9c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ca0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002ca4:	6812      	ldr	r2, [r2, #0]
 8002ca6:	fab2 f282 	clz	r2, r2
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	f042 0220 	orr.w	r2, r2, #32
 8002cb0:	b2d2      	uxtb	r2, r2
 8002cb2:	f002 021f 	and.w	r2, r2, #31
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d182      	bne.n	8002bc8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cc2:	4b88      	ldr	r3, [pc, #544]	@ (8002ee4 <HAL_RCC_OscConfig+0xf78>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002cca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002cd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cda:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	430b      	orrs	r3, r1
 8002ce4:	497f      	ldr	r1, [pc, #508]	@ (8002ee4 <HAL_RCC_OscConfig+0xf78>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	604b      	str	r3, [r1, #4]
 8002cea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cee:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002cf2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002cf6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cfc:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	fa93 f2a3 	rbit	r2, r3
 8002d06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d0a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002d0e:	601a      	str	r2, [r3, #0]
  return result;
 8002d10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d14:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002d18:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d1a:	fab3 f383 	clz	r3, r3
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d24:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d30:	f7fe feb0 	bl	8001a94 <HAL_GetTick>
 8002d34:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d38:	e009      	b.n	8002d4e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d3a:	f7fe feab 	bl	8001a94 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e144      	b.n	8002fd8 <HAL_RCC_OscConfig+0x106c>
 8002d4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d52:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002d56:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d60:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	fa93 f2a3 	rbit	r2, r3
 8002d6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d6e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002d72:	601a      	str	r2, [r3, #0]
  return result;
 8002d74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d78:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002d7c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d7e:	fab3 f383 	clz	r3, r3
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	095b      	lsrs	r3, r3, #5
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d102      	bne.n	8002d98 <HAL_RCC_OscConfig+0xe2c>
 8002d92:	4b54      	ldr	r3, [pc, #336]	@ (8002ee4 <HAL_RCC_OscConfig+0xf78>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	e027      	b.n	8002de8 <HAL_RCC_OscConfig+0xe7c>
 8002d98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d9c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002da0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002da4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002daa:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	fa93 f2a3 	rbit	r2, r3
 8002db4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002db8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dc2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002dc6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dd0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	fa93 f2a3 	rbit	r2, r3
 8002dda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dde:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	4b3f      	ldr	r3, [pc, #252]	@ (8002ee4 <HAL_RCC_OscConfig+0xf78>)
 8002de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002dec:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002df0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002df4:	6011      	str	r1, [r2, #0]
 8002df6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002dfa:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002dfe:	6812      	ldr	r2, [r2, #0]
 8002e00:	fa92 f1a2 	rbit	r1, r2
 8002e04:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e08:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002e0c:	6011      	str	r1, [r2, #0]
  return result;
 8002e0e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e12:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002e16:	6812      	ldr	r2, [r2, #0]
 8002e18:	fab2 f282 	clz	r2, r2
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	f042 0220 	orr.w	r2, r2, #32
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	f002 021f 	and.w	r2, r2, #31
 8002e28:	2101      	movs	r1, #1
 8002e2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e2e:	4013      	ands	r3, r2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d082      	beq.n	8002d3a <HAL_RCC_OscConfig+0xdce>
 8002e34:	e0cf      	b.n	8002fd6 <HAL_RCC_OscConfig+0x106a>
 8002e36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e3a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002e3e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e48:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	fa93 f2a3 	rbit	r2, r3
 8002e52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e56:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002e5a:	601a      	str	r2, [r3, #0]
  return result;
 8002e5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e60:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002e64:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e66:	fab3 f383 	clz	r3, r3
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002e70:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	461a      	mov	r2, r3
 8002e78:	2300      	movs	r3, #0
 8002e7a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7c:	f7fe fe0a 	bl	8001a94 <HAL_GetTick>
 8002e80:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e84:	e009      	b.n	8002e9a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e86:	f7fe fe05 	bl	8001a94 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e09e      	b.n	8002fd8 <HAL_RCC_OscConfig+0x106c>
 8002e9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e9e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002ea2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ea6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eac:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	fa93 f2a3 	rbit	r2, r3
 8002eb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eba:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002ebe:	601a      	str	r2, [r3, #0]
  return result;
 8002ec0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ec4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002ec8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eca:	fab3 f383 	clz	r3, r3
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	095b      	lsrs	r3, r3, #5
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	f043 0301 	orr.w	r3, r3, #1
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d104      	bne.n	8002ee8 <HAL_RCC_OscConfig+0xf7c>
 8002ede:	4b01      	ldr	r3, [pc, #4]	@ (8002ee4 <HAL_RCC_OscConfig+0xf78>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	e029      	b.n	8002f38 <HAL_RCC_OscConfig+0xfcc>
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eec:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002ef0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ef4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002efa:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	fa93 f2a3 	rbit	r2, r3
 8002f04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f08:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f12:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002f16:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f20:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	fa93 f2a3 	rbit	r2, r3
 8002f2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f2e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	4b2b      	ldr	r3, [pc, #172]	@ (8002fe4 <HAL_RCC_OscConfig+0x1078>)
 8002f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f38:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f3c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002f40:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002f44:	6011      	str	r1, [r2, #0]
 8002f46:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f4a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002f4e:	6812      	ldr	r2, [r2, #0]
 8002f50:	fa92 f1a2 	rbit	r1, r2
 8002f54:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f58:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002f5c:	6011      	str	r1, [r2, #0]
  return result;
 8002f5e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f62:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002f66:	6812      	ldr	r2, [r2, #0]
 8002f68:	fab2 f282 	clz	r2, r2
 8002f6c:	b2d2      	uxtb	r2, r2
 8002f6e:	f042 0220 	orr.w	r2, r2, #32
 8002f72:	b2d2      	uxtb	r2, r2
 8002f74:	f002 021f 	and.w	r2, r2, #31
 8002f78:	2101      	movs	r1, #1
 8002f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f7e:	4013      	ands	r3, r2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d180      	bne.n	8002e86 <HAL_RCC_OscConfig+0xf1a>
 8002f84:	e027      	b.n	8002fd6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d101      	bne.n	8002f9a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e01e      	b.n	8002fd8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f9a:	4b12      	ldr	r3, [pc, #72]	@ (8002fe4 <HAL_RCC_OscConfig+0x1078>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002fa2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002fa6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002faa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d10b      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002fba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002fbe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002fc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fc6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d001      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e000      	b.n	8002fd8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40021000 	.word	0x40021000

08002fe8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b09e      	sub	sp, #120	@ 0x78
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e162      	b.n	80032c6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003000:	4b90      	ldr	r3, [pc, #576]	@ (8003244 <HAL_RCC_ClockConfig+0x25c>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	429a      	cmp	r2, r3
 800300c:	d910      	bls.n	8003030 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300e:	4b8d      	ldr	r3, [pc, #564]	@ (8003244 <HAL_RCC_ClockConfig+0x25c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f023 0207 	bic.w	r2, r3, #7
 8003016:	498b      	ldr	r1, [pc, #556]	@ (8003244 <HAL_RCC_ClockConfig+0x25c>)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	4313      	orrs	r3, r2
 800301c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800301e:	4b89      	ldr	r3, [pc, #548]	@ (8003244 <HAL_RCC_ClockConfig+0x25c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	429a      	cmp	r2, r3
 800302a:	d001      	beq.n	8003030 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e14a      	b.n	80032c6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d008      	beq.n	800304e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800303c:	4b82      	ldr	r3, [pc, #520]	@ (8003248 <HAL_RCC_ClockConfig+0x260>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	497f      	ldr	r1, [pc, #508]	@ (8003248 <HAL_RCC_ClockConfig+0x260>)
 800304a:	4313      	orrs	r3, r2
 800304c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 80dc 	beq.w	8003214 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d13c      	bne.n	80030de <HAL_RCC_ClockConfig+0xf6>
 8003064:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003068:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800306c:	fa93 f3a3 	rbit	r3, r3
 8003070:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003072:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003074:	fab3 f383 	clz	r3, r3
 8003078:	b2db      	uxtb	r3, r3
 800307a:	095b      	lsrs	r3, r3, #5
 800307c:	b2db      	uxtb	r3, r3
 800307e:	f043 0301 	orr.w	r3, r3, #1
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b01      	cmp	r3, #1
 8003086:	d102      	bne.n	800308e <HAL_RCC_ClockConfig+0xa6>
 8003088:	4b6f      	ldr	r3, [pc, #444]	@ (8003248 <HAL_RCC_ClockConfig+0x260>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	e00f      	b.n	80030ae <HAL_RCC_ClockConfig+0xc6>
 800308e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003092:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003094:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003096:	fa93 f3a3 	rbit	r3, r3
 800309a:	667b      	str	r3, [r7, #100]	@ 0x64
 800309c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80030a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80030a4:	fa93 f3a3 	rbit	r3, r3
 80030a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80030aa:	4b67      	ldr	r3, [pc, #412]	@ (8003248 <HAL_RCC_ClockConfig+0x260>)
 80030ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ae:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80030b2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80030b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80030b6:	fa92 f2a2 	rbit	r2, r2
 80030ba:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80030bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80030be:	fab2 f282 	clz	r2, r2
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	f042 0220 	orr.w	r2, r2, #32
 80030c8:	b2d2      	uxtb	r2, r2
 80030ca:	f002 021f 	and.w	r2, r2, #31
 80030ce:	2101      	movs	r1, #1
 80030d0:	fa01 f202 	lsl.w	r2, r1, r2
 80030d4:	4013      	ands	r3, r2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d17b      	bne.n	80031d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e0f3      	b.n	80032c6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d13c      	bne.n	8003160 <HAL_RCC_ClockConfig+0x178>
 80030e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030ea:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030ee:	fa93 f3a3 	rbit	r3, r3
 80030f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80030f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f6:	fab3 f383 	clz	r3, r3
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	095b      	lsrs	r3, r3, #5
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	f043 0301 	orr.w	r3, r3, #1
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b01      	cmp	r3, #1
 8003108:	d102      	bne.n	8003110 <HAL_RCC_ClockConfig+0x128>
 800310a:	4b4f      	ldr	r3, [pc, #316]	@ (8003248 <HAL_RCC_ClockConfig+0x260>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	e00f      	b.n	8003130 <HAL_RCC_ClockConfig+0x148>
 8003110:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003114:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003116:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003118:	fa93 f3a3 	rbit	r3, r3
 800311c:	647b      	str	r3, [r7, #68]	@ 0x44
 800311e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003122:	643b      	str	r3, [r7, #64]	@ 0x40
 8003124:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003126:	fa93 f3a3 	rbit	r3, r3
 800312a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800312c:	4b46      	ldr	r3, [pc, #280]	@ (8003248 <HAL_RCC_ClockConfig+0x260>)
 800312e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003130:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003134:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003136:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003138:	fa92 f2a2 	rbit	r2, r2
 800313c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800313e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003140:	fab2 f282 	clz	r2, r2
 8003144:	b2d2      	uxtb	r2, r2
 8003146:	f042 0220 	orr.w	r2, r2, #32
 800314a:	b2d2      	uxtb	r2, r2
 800314c:	f002 021f 	and.w	r2, r2, #31
 8003150:	2101      	movs	r1, #1
 8003152:	fa01 f202 	lsl.w	r2, r1, r2
 8003156:	4013      	ands	r3, r2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d13a      	bne.n	80031d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e0b2      	b.n	80032c6 <HAL_RCC_ClockConfig+0x2de>
 8003160:	2302      	movs	r3, #2
 8003162:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003166:	fa93 f3a3 	rbit	r3, r3
 800316a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800316c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800316e:	fab3 f383 	clz	r3, r3
 8003172:	b2db      	uxtb	r3, r3
 8003174:	095b      	lsrs	r3, r3, #5
 8003176:	b2db      	uxtb	r3, r3
 8003178:	f043 0301 	orr.w	r3, r3, #1
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b01      	cmp	r3, #1
 8003180:	d102      	bne.n	8003188 <HAL_RCC_ClockConfig+0x1a0>
 8003182:	4b31      	ldr	r3, [pc, #196]	@ (8003248 <HAL_RCC_ClockConfig+0x260>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	e00d      	b.n	80031a4 <HAL_RCC_ClockConfig+0x1bc>
 8003188:	2302      	movs	r3, #2
 800318a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800318e:	fa93 f3a3 	rbit	r3, r3
 8003192:	627b      	str	r3, [r7, #36]	@ 0x24
 8003194:	2302      	movs	r3, #2
 8003196:	623b      	str	r3, [r7, #32]
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	fa93 f3a3 	rbit	r3, r3
 800319e:	61fb      	str	r3, [r7, #28]
 80031a0:	4b29      	ldr	r3, [pc, #164]	@ (8003248 <HAL_RCC_ClockConfig+0x260>)
 80031a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a4:	2202      	movs	r2, #2
 80031a6:	61ba      	str	r2, [r7, #24]
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	fa92 f2a2 	rbit	r2, r2
 80031ae:	617a      	str	r2, [r7, #20]
  return result;
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	fab2 f282 	clz	r2, r2
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	f042 0220 	orr.w	r2, r2, #32
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	f002 021f 	and.w	r2, r2, #31
 80031c2:	2101      	movs	r1, #1
 80031c4:	fa01 f202 	lsl.w	r2, r1, r2
 80031c8:	4013      	ands	r3, r2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e079      	b.n	80032c6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031d2:	4b1d      	ldr	r3, [pc, #116]	@ (8003248 <HAL_RCC_ClockConfig+0x260>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f023 0203 	bic.w	r2, r3, #3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	491a      	ldr	r1, [pc, #104]	@ (8003248 <HAL_RCC_ClockConfig+0x260>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031e4:	f7fe fc56 	bl	8001a94 <HAL_GetTick>
 80031e8:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ea:	e00a      	b.n	8003202 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ec:	f7fe fc52 	bl	8001a94 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e061      	b.n	80032c6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003202:	4b11      	ldr	r3, [pc, #68]	@ (8003248 <HAL_RCC_ClockConfig+0x260>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f003 020c 	and.w	r2, r3, #12
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	429a      	cmp	r2, r3
 8003212:	d1eb      	bne.n	80031ec <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003214:	4b0b      	ldr	r3, [pc, #44]	@ (8003244 <HAL_RCC_ClockConfig+0x25c>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	d214      	bcs.n	800324c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003222:	4b08      	ldr	r3, [pc, #32]	@ (8003244 <HAL_RCC_ClockConfig+0x25c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f023 0207 	bic.w	r2, r3, #7
 800322a:	4906      	ldr	r1, [pc, #24]	@ (8003244 <HAL_RCC_ClockConfig+0x25c>)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	4313      	orrs	r3, r2
 8003230:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003232:	4b04      	ldr	r3, [pc, #16]	@ (8003244 <HAL_RCC_ClockConfig+0x25c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0307 	and.w	r3, r3, #7
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	429a      	cmp	r2, r3
 800323e:	d005      	beq.n	800324c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e040      	b.n	80032c6 <HAL_RCC_ClockConfig+0x2de>
 8003244:	40022000 	.word	0x40022000
 8003248:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b00      	cmp	r3, #0
 8003256:	d008      	beq.n	800326a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003258:	4b1d      	ldr	r3, [pc, #116]	@ (80032d0 <HAL_RCC_ClockConfig+0x2e8>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	491a      	ldr	r1, [pc, #104]	@ (80032d0 <HAL_RCC_ClockConfig+0x2e8>)
 8003266:	4313      	orrs	r3, r2
 8003268:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	2b00      	cmp	r3, #0
 8003274:	d009      	beq.n	800328a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003276:	4b16      	ldr	r3, [pc, #88]	@ (80032d0 <HAL_RCC_ClockConfig+0x2e8>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	4912      	ldr	r1, [pc, #72]	@ (80032d0 <HAL_RCC_ClockConfig+0x2e8>)
 8003286:	4313      	orrs	r3, r2
 8003288:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800328a:	f000 f829 	bl	80032e0 <HAL_RCC_GetSysClockFreq>
 800328e:	4601      	mov	r1, r0
 8003290:	4b0f      	ldr	r3, [pc, #60]	@ (80032d0 <HAL_RCC_ClockConfig+0x2e8>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003298:	22f0      	movs	r2, #240	@ 0xf0
 800329a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	fa92 f2a2 	rbit	r2, r2
 80032a2:	60fa      	str	r2, [r7, #12]
  return result;
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	fab2 f282 	clz	r2, r2
 80032aa:	b2d2      	uxtb	r2, r2
 80032ac:	40d3      	lsrs	r3, r2
 80032ae:	4a09      	ldr	r2, [pc, #36]	@ (80032d4 <HAL_RCC_ClockConfig+0x2ec>)
 80032b0:	5cd3      	ldrb	r3, [r2, r3]
 80032b2:	fa21 f303 	lsr.w	r3, r1, r3
 80032b6:	4a08      	ldr	r2, [pc, #32]	@ (80032d8 <HAL_RCC_ClockConfig+0x2f0>)
 80032b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80032ba:	4b08      	ldr	r3, [pc, #32]	@ (80032dc <HAL_RCC_ClockConfig+0x2f4>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fe fba4 	bl	8001a0c <HAL_InitTick>
  
  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3778      	adds	r7, #120	@ 0x78
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	40021000 	.word	0x40021000
 80032d4:	08004b30 	.word	0x08004b30
 80032d8:	20000090 	.word	0x20000090
 80032dc:	2000011c 	.word	0x2000011c

080032e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b087      	sub	sp, #28
 80032e4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	2300      	movs	r3, #0
 80032ec:	60bb      	str	r3, [r7, #8]
 80032ee:	2300      	movs	r3, #0
 80032f0:	617b      	str	r3, [r7, #20]
 80032f2:	2300      	movs	r3, #0
 80032f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80032fa:	4b1e      	ldr	r3, [pc, #120]	@ (8003374 <HAL_RCC_GetSysClockFreq+0x94>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f003 030c 	and.w	r3, r3, #12
 8003306:	2b04      	cmp	r3, #4
 8003308:	d002      	beq.n	8003310 <HAL_RCC_GetSysClockFreq+0x30>
 800330a:	2b08      	cmp	r3, #8
 800330c:	d003      	beq.n	8003316 <HAL_RCC_GetSysClockFreq+0x36>
 800330e:	e026      	b.n	800335e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003310:	4b19      	ldr	r3, [pc, #100]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x98>)
 8003312:	613b      	str	r3, [r7, #16]
      break;
 8003314:	e026      	b.n	8003364 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	0c9b      	lsrs	r3, r3, #18
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	4a17      	ldr	r2, [pc, #92]	@ (800337c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003320:	5cd3      	ldrb	r3, [r2, r3]
 8003322:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003324:	4b13      	ldr	r3, [pc, #76]	@ (8003374 <HAL_RCC_GetSysClockFreq+0x94>)
 8003326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003328:	f003 030f 	and.w	r3, r3, #15
 800332c:	4a14      	ldr	r2, [pc, #80]	@ (8003380 <HAL_RCC_GetSysClockFreq+0xa0>)
 800332e:	5cd3      	ldrb	r3, [r2, r3]
 8003330:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d008      	beq.n	800334e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800333c:	4a0e      	ldr	r2, [pc, #56]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x98>)
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	fbb2 f2f3 	udiv	r2, r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	fb02 f303 	mul.w	r3, r2, r3
 800334a:	617b      	str	r3, [r7, #20]
 800334c:	e004      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a0c      	ldr	r2, [pc, #48]	@ (8003384 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003352:	fb02 f303 	mul.w	r3, r2, r3
 8003356:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	613b      	str	r3, [r7, #16]
      break;
 800335c:	e002      	b.n	8003364 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800335e:	4b06      	ldr	r3, [pc, #24]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x98>)
 8003360:	613b      	str	r3, [r7, #16]
      break;
 8003362:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003364:	693b      	ldr	r3, [r7, #16]
}
 8003366:	4618      	mov	r0, r3
 8003368:	371c      	adds	r7, #28
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	40021000 	.word	0x40021000
 8003378:	007a1200 	.word	0x007a1200
 800337c:	08004ba0 	.word	0x08004ba0
 8003380:	08004bb0 	.word	0x08004bb0
 8003384:	003d0900 	.word	0x003d0900

08003388 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e049      	b.n	800342e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d106      	bne.n	80033b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7fd ff84 	bl	80012bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2202      	movs	r2, #2
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3304      	adds	r3, #4
 80033c4:	4619      	mov	r1, r3
 80033c6:	4610      	mov	r0, r2
 80033c8:	f000 fa4a 	bl	8003860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
	...

08003438 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d109      	bne.n	800345c <HAL_TIM_PWM_Start+0x24>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b01      	cmp	r3, #1
 8003452:	bf14      	ite	ne
 8003454:	2301      	movne	r3, #1
 8003456:	2300      	moveq	r3, #0
 8003458:	b2db      	uxtb	r3, r3
 800345a:	e03c      	b.n	80034d6 <HAL_TIM_PWM_Start+0x9e>
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	2b04      	cmp	r3, #4
 8003460:	d109      	bne.n	8003476 <HAL_TIM_PWM_Start+0x3e>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b01      	cmp	r3, #1
 800346c:	bf14      	ite	ne
 800346e:	2301      	movne	r3, #1
 8003470:	2300      	moveq	r3, #0
 8003472:	b2db      	uxtb	r3, r3
 8003474:	e02f      	b.n	80034d6 <HAL_TIM_PWM_Start+0x9e>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	2b08      	cmp	r3, #8
 800347a:	d109      	bne.n	8003490 <HAL_TIM_PWM_Start+0x58>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b01      	cmp	r3, #1
 8003486:	bf14      	ite	ne
 8003488:	2301      	movne	r3, #1
 800348a:	2300      	moveq	r3, #0
 800348c:	b2db      	uxtb	r3, r3
 800348e:	e022      	b.n	80034d6 <HAL_TIM_PWM_Start+0x9e>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	2b0c      	cmp	r3, #12
 8003494:	d109      	bne.n	80034aa <HAL_TIM_PWM_Start+0x72>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b01      	cmp	r3, #1
 80034a0:	bf14      	ite	ne
 80034a2:	2301      	movne	r3, #1
 80034a4:	2300      	moveq	r3, #0
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	e015      	b.n	80034d6 <HAL_TIM_PWM_Start+0x9e>
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	2b10      	cmp	r3, #16
 80034ae:	d109      	bne.n	80034c4 <HAL_TIM_PWM_Start+0x8c>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	bf14      	ite	ne
 80034bc:	2301      	movne	r3, #1
 80034be:	2300      	moveq	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	e008      	b.n	80034d6 <HAL_TIM_PWM_Start+0x9e>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	bf14      	ite	ne
 80034d0:	2301      	movne	r3, #1
 80034d2:	2300      	moveq	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e097      	b.n	800360e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d104      	bne.n	80034ee <HAL_TIM_PWM_Start+0xb6>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2202      	movs	r2, #2
 80034e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034ec:	e023      	b.n	8003536 <HAL_TIM_PWM_Start+0xfe>
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	2b04      	cmp	r3, #4
 80034f2:	d104      	bne.n	80034fe <HAL_TIM_PWM_Start+0xc6>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2202      	movs	r2, #2
 80034f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034fc:	e01b      	b.n	8003536 <HAL_TIM_PWM_Start+0xfe>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	2b08      	cmp	r3, #8
 8003502:	d104      	bne.n	800350e <HAL_TIM_PWM_Start+0xd6>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2202      	movs	r2, #2
 8003508:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800350c:	e013      	b.n	8003536 <HAL_TIM_PWM_Start+0xfe>
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	2b0c      	cmp	r3, #12
 8003512:	d104      	bne.n	800351e <HAL_TIM_PWM_Start+0xe6>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2202      	movs	r2, #2
 8003518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800351c:	e00b      	b.n	8003536 <HAL_TIM_PWM_Start+0xfe>
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	2b10      	cmp	r3, #16
 8003522:	d104      	bne.n	800352e <HAL_TIM_PWM_Start+0xf6>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2202      	movs	r2, #2
 8003528:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800352c:	e003      	b.n	8003536 <HAL_TIM_PWM_Start+0xfe>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2202      	movs	r2, #2
 8003532:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2201      	movs	r2, #1
 800353c:	6839      	ldr	r1, [r7, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f000 fd00 	bl	8003f44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a33      	ldr	r2, [pc, #204]	@ (8003618 <HAL_TIM_PWM_Start+0x1e0>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d013      	beq.n	8003576 <HAL_TIM_PWM_Start+0x13e>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a32      	ldr	r2, [pc, #200]	@ (800361c <HAL_TIM_PWM_Start+0x1e4>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d00e      	beq.n	8003576 <HAL_TIM_PWM_Start+0x13e>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a30      	ldr	r2, [pc, #192]	@ (8003620 <HAL_TIM_PWM_Start+0x1e8>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d009      	beq.n	8003576 <HAL_TIM_PWM_Start+0x13e>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a2f      	ldr	r2, [pc, #188]	@ (8003624 <HAL_TIM_PWM_Start+0x1ec>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d004      	beq.n	8003576 <HAL_TIM_PWM_Start+0x13e>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a2d      	ldr	r2, [pc, #180]	@ (8003628 <HAL_TIM_PWM_Start+0x1f0>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d101      	bne.n	800357a <HAL_TIM_PWM_Start+0x142>
 8003576:	2301      	movs	r3, #1
 8003578:	e000      	b.n	800357c <HAL_TIM_PWM_Start+0x144>
 800357a:	2300      	movs	r3, #0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d007      	beq.n	8003590 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800358e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a20      	ldr	r2, [pc, #128]	@ (8003618 <HAL_TIM_PWM_Start+0x1e0>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d018      	beq.n	80035cc <HAL_TIM_PWM_Start+0x194>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035a2:	d013      	beq.n	80035cc <HAL_TIM_PWM_Start+0x194>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a20      	ldr	r2, [pc, #128]	@ (800362c <HAL_TIM_PWM_Start+0x1f4>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d00e      	beq.n	80035cc <HAL_TIM_PWM_Start+0x194>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a1f      	ldr	r2, [pc, #124]	@ (8003630 <HAL_TIM_PWM_Start+0x1f8>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d009      	beq.n	80035cc <HAL_TIM_PWM_Start+0x194>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a17      	ldr	r2, [pc, #92]	@ (800361c <HAL_TIM_PWM_Start+0x1e4>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d004      	beq.n	80035cc <HAL_TIM_PWM_Start+0x194>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a16      	ldr	r2, [pc, #88]	@ (8003620 <HAL_TIM_PWM_Start+0x1e8>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d115      	bne.n	80035f8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689a      	ldr	r2, [r3, #8]
 80035d2:	4b18      	ldr	r3, [pc, #96]	@ (8003634 <HAL_TIM_PWM_Start+0x1fc>)
 80035d4:	4013      	ands	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2b06      	cmp	r3, #6
 80035dc:	d015      	beq.n	800360a <HAL_TIM_PWM_Start+0x1d2>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035e4:	d011      	beq.n	800360a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f042 0201 	orr.w	r2, r2, #1
 80035f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035f6:	e008      	b.n	800360a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f042 0201 	orr.w	r2, r2, #1
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	e000      	b.n	800360c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800360a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	40012c00 	.word	0x40012c00
 800361c:	40013400 	.word	0x40013400
 8003620:	40014000 	.word	0x40014000
 8003624:	40014400 	.word	0x40014400
 8003628:	40014800 	.word	0x40014800
 800362c:	40000400 	.word	0x40000400
 8003630:	40000800 	.word	0x40000800
 8003634:	00010007 	.word	0x00010007

08003638 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003644:	2300      	movs	r3, #0
 8003646:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800364e:	2b01      	cmp	r3, #1
 8003650:	d101      	bne.n	8003656 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003652:	2302      	movs	r3, #2
 8003654:	e0ff      	b.n	8003856 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b14      	cmp	r3, #20
 8003662:	f200 80f0 	bhi.w	8003846 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003666:	a201      	add	r2, pc, #4	@ (adr r2, 800366c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366c:	080036c1 	.word	0x080036c1
 8003670:	08003847 	.word	0x08003847
 8003674:	08003847 	.word	0x08003847
 8003678:	08003847 	.word	0x08003847
 800367c:	08003701 	.word	0x08003701
 8003680:	08003847 	.word	0x08003847
 8003684:	08003847 	.word	0x08003847
 8003688:	08003847 	.word	0x08003847
 800368c:	08003743 	.word	0x08003743
 8003690:	08003847 	.word	0x08003847
 8003694:	08003847 	.word	0x08003847
 8003698:	08003847 	.word	0x08003847
 800369c:	08003783 	.word	0x08003783
 80036a0:	08003847 	.word	0x08003847
 80036a4:	08003847 	.word	0x08003847
 80036a8:	08003847 	.word	0x08003847
 80036ac:	080037c5 	.word	0x080037c5
 80036b0:	08003847 	.word	0x08003847
 80036b4:	08003847 	.word	0x08003847
 80036b8:	08003847 	.word	0x08003847
 80036bc:	08003805 	.word	0x08003805
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68b9      	ldr	r1, [r7, #8]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f000 f966 	bl	8003998 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699a      	ldr	r2, [r3, #24]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0208 	orr.w	r2, r2, #8
 80036da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	699a      	ldr	r2, [r3, #24]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 0204 	bic.w	r2, r2, #4
 80036ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6999      	ldr	r1, [r3, #24]
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	691a      	ldr	r2, [r3, #16]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	430a      	orrs	r2, r1
 80036fc:	619a      	str	r2, [r3, #24]
      break;
 80036fe:	e0a5      	b.n	800384c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68b9      	ldr	r1, [r7, #8]
 8003706:	4618      	mov	r0, r3
 8003708:	f000 f9d6 	bl	8003ab8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	699a      	ldr	r2, [r3, #24]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800371a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699a      	ldr	r2, [r3, #24]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800372a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6999      	ldr	r1, [r3, #24]
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	021a      	lsls	r2, r3, #8
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	619a      	str	r2, [r3, #24]
      break;
 8003740:	e084      	b.n	800384c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68b9      	ldr	r1, [r7, #8]
 8003748:	4618      	mov	r0, r3
 800374a:	f000 fa3f 	bl	8003bcc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	69da      	ldr	r2, [r3, #28]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f042 0208 	orr.w	r2, r2, #8
 800375c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	69da      	ldr	r2, [r3, #28]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0204 	bic.w	r2, r2, #4
 800376c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	69d9      	ldr	r1, [r3, #28]
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	691a      	ldr	r2, [r3, #16]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	430a      	orrs	r2, r1
 800377e:	61da      	str	r2, [r3, #28]
      break;
 8003780:	e064      	b.n	800384c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68b9      	ldr	r1, [r7, #8]
 8003788:	4618      	mov	r0, r3
 800378a:	f000 faa7 	bl	8003cdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	69da      	ldr	r2, [r3, #28]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800379c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	69da      	ldr	r2, [r3, #28]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	69d9      	ldr	r1, [r3, #28]
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	021a      	lsls	r2, r3, #8
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	61da      	str	r2, [r3, #28]
      break;
 80037c2:	e043      	b.n	800384c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68b9      	ldr	r1, [r7, #8]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 faf0 	bl	8003db0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0208 	orr.w	r2, r2, #8
 80037de:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 0204 	bic.w	r2, r2, #4
 80037ee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	691a      	ldr	r2, [r3, #16]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	430a      	orrs	r2, r1
 8003800:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003802:	e023      	b.n	800384c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68b9      	ldr	r1, [r7, #8]
 800380a:	4618      	mov	r0, r3
 800380c:	f000 fb34 	bl	8003e78 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800381e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800382e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	021a      	lsls	r2, r3, #8
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003844:	e002      	b.n	800384c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	75fb      	strb	r3, [r7, #23]
      break;
 800384a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003854:	7dfb      	ldrb	r3, [r7, #23]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop

08003860 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a42      	ldr	r2, [pc, #264]	@ (800397c <TIM_Base_SetConfig+0x11c>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d00f      	beq.n	8003898 <TIM_Base_SetConfig+0x38>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800387e:	d00b      	beq.n	8003898 <TIM_Base_SetConfig+0x38>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a3f      	ldr	r2, [pc, #252]	@ (8003980 <TIM_Base_SetConfig+0x120>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d007      	beq.n	8003898 <TIM_Base_SetConfig+0x38>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a3e      	ldr	r2, [pc, #248]	@ (8003984 <TIM_Base_SetConfig+0x124>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d003      	beq.n	8003898 <TIM_Base_SetConfig+0x38>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a3d      	ldr	r2, [pc, #244]	@ (8003988 <TIM_Base_SetConfig+0x128>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d108      	bne.n	80038aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800389e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a33      	ldr	r2, [pc, #204]	@ (800397c <TIM_Base_SetConfig+0x11c>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d01b      	beq.n	80038ea <TIM_Base_SetConfig+0x8a>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038b8:	d017      	beq.n	80038ea <TIM_Base_SetConfig+0x8a>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a30      	ldr	r2, [pc, #192]	@ (8003980 <TIM_Base_SetConfig+0x120>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d013      	beq.n	80038ea <TIM_Base_SetConfig+0x8a>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a2f      	ldr	r2, [pc, #188]	@ (8003984 <TIM_Base_SetConfig+0x124>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d00f      	beq.n	80038ea <TIM_Base_SetConfig+0x8a>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a2e      	ldr	r2, [pc, #184]	@ (8003988 <TIM_Base_SetConfig+0x128>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d00b      	beq.n	80038ea <TIM_Base_SetConfig+0x8a>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a2d      	ldr	r2, [pc, #180]	@ (800398c <TIM_Base_SetConfig+0x12c>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d007      	beq.n	80038ea <TIM_Base_SetConfig+0x8a>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a2c      	ldr	r2, [pc, #176]	@ (8003990 <TIM_Base_SetConfig+0x130>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d003      	beq.n	80038ea <TIM_Base_SetConfig+0x8a>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a2b      	ldr	r2, [pc, #172]	@ (8003994 <TIM_Base_SetConfig+0x134>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d108      	bne.n	80038fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	4313      	orrs	r3, r2
 8003908:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	689a      	ldr	r2, [r3, #8]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a16      	ldr	r2, [pc, #88]	@ (800397c <TIM_Base_SetConfig+0x11c>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d00f      	beq.n	8003948 <TIM_Base_SetConfig+0xe8>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a17      	ldr	r2, [pc, #92]	@ (8003988 <TIM_Base_SetConfig+0x128>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d00b      	beq.n	8003948 <TIM_Base_SetConfig+0xe8>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a16      	ldr	r2, [pc, #88]	@ (800398c <TIM_Base_SetConfig+0x12c>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d007      	beq.n	8003948 <TIM_Base_SetConfig+0xe8>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a15      	ldr	r2, [pc, #84]	@ (8003990 <TIM_Base_SetConfig+0x130>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d003      	beq.n	8003948 <TIM_Base_SetConfig+0xe8>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a14      	ldr	r2, [pc, #80]	@ (8003994 <TIM_Base_SetConfig+0x134>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d103      	bne.n	8003950 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	691a      	ldr	r2, [r3, #16]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b01      	cmp	r3, #1
 8003960:	d105      	bne.n	800396e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f023 0201 	bic.w	r2, r3, #1
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	611a      	str	r2, [r3, #16]
  }
}
 800396e:	bf00      	nop
 8003970:	3714      	adds	r7, #20
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	40012c00 	.word	0x40012c00
 8003980:	40000400 	.word	0x40000400
 8003984:	40000800 	.word	0x40000800
 8003988:	40013400 	.word	0x40013400
 800398c:	40014000 	.word	0x40014000
 8003990:	40014400 	.word	0x40014400
 8003994:	40014800 	.word	0x40014800

08003998 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003998:	b480      	push	{r7}
 800399a:	b087      	sub	sp, #28
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	f023 0201 	bic.w	r2, r3, #1
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f023 0303 	bic.w	r3, r3, #3
 80039d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	4313      	orrs	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f023 0302 	bic.w	r3, r3, #2
 80039e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a2c      	ldr	r2, [pc, #176]	@ (8003aa4 <TIM_OC1_SetConfig+0x10c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d00f      	beq.n	8003a18 <TIM_OC1_SetConfig+0x80>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a2b      	ldr	r2, [pc, #172]	@ (8003aa8 <TIM_OC1_SetConfig+0x110>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d00b      	beq.n	8003a18 <TIM_OC1_SetConfig+0x80>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a2a      	ldr	r2, [pc, #168]	@ (8003aac <TIM_OC1_SetConfig+0x114>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d007      	beq.n	8003a18 <TIM_OC1_SetConfig+0x80>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a29      	ldr	r2, [pc, #164]	@ (8003ab0 <TIM_OC1_SetConfig+0x118>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d003      	beq.n	8003a18 <TIM_OC1_SetConfig+0x80>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a28      	ldr	r2, [pc, #160]	@ (8003ab4 <TIM_OC1_SetConfig+0x11c>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d10c      	bne.n	8003a32 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	f023 0308 	bic.w	r3, r3, #8
 8003a1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f023 0304 	bic.w	r3, r3, #4
 8003a30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a1b      	ldr	r2, [pc, #108]	@ (8003aa4 <TIM_OC1_SetConfig+0x10c>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d00f      	beq.n	8003a5a <TIM_OC1_SetConfig+0xc2>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a1a      	ldr	r2, [pc, #104]	@ (8003aa8 <TIM_OC1_SetConfig+0x110>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d00b      	beq.n	8003a5a <TIM_OC1_SetConfig+0xc2>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a19      	ldr	r2, [pc, #100]	@ (8003aac <TIM_OC1_SetConfig+0x114>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d007      	beq.n	8003a5a <TIM_OC1_SetConfig+0xc2>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a18      	ldr	r2, [pc, #96]	@ (8003ab0 <TIM_OC1_SetConfig+0x118>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d003      	beq.n	8003a5a <TIM_OC1_SetConfig+0xc2>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a17      	ldr	r2, [pc, #92]	@ (8003ab4 <TIM_OC1_SetConfig+0x11c>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d111      	bne.n	8003a7e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	621a      	str	r2, [r3, #32]
}
 8003a98:	bf00      	nop
 8003a9a:	371c      	adds	r7, #28
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr
 8003aa4:	40012c00 	.word	0x40012c00
 8003aa8:	40013400 	.word	0x40013400
 8003aac:	40014000 	.word	0x40014000
 8003ab0:	40014400 	.word	0x40014400
 8003ab4:	40014800 	.word	0x40014800

08003ab8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b087      	sub	sp, #28
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	f023 0210 	bic.w	r2, r3, #16
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ae6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003af2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	021b      	lsls	r3, r3, #8
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f023 0320 	bic.w	r3, r3, #32
 8003b06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	011b      	lsls	r3, r3, #4
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a28      	ldr	r2, [pc, #160]	@ (8003bb8 <TIM_OC2_SetConfig+0x100>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d003      	beq.n	8003b24 <TIM_OC2_SetConfig+0x6c>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a27      	ldr	r2, [pc, #156]	@ (8003bbc <TIM_OC2_SetConfig+0x104>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d10d      	bne.n	8003b40 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	011b      	lsls	r3, r3, #4
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a1d      	ldr	r2, [pc, #116]	@ (8003bb8 <TIM_OC2_SetConfig+0x100>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d00f      	beq.n	8003b68 <TIM_OC2_SetConfig+0xb0>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a1c      	ldr	r2, [pc, #112]	@ (8003bbc <TIM_OC2_SetConfig+0x104>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d00b      	beq.n	8003b68 <TIM_OC2_SetConfig+0xb0>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a1b      	ldr	r2, [pc, #108]	@ (8003bc0 <TIM_OC2_SetConfig+0x108>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d007      	beq.n	8003b68 <TIM_OC2_SetConfig+0xb0>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a1a      	ldr	r2, [pc, #104]	@ (8003bc4 <TIM_OC2_SetConfig+0x10c>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d003      	beq.n	8003b68 <TIM_OC2_SetConfig+0xb0>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a19      	ldr	r2, [pc, #100]	@ (8003bc8 <TIM_OC2_SetConfig+0x110>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d113      	bne.n	8003b90 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b6e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b76:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	621a      	str	r2, [r3, #32]
}
 8003baa:	bf00      	nop
 8003bac:	371c      	adds	r7, #28
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	40012c00 	.word	0x40012c00
 8003bbc:	40013400 	.word	0x40013400
 8003bc0:	40014000 	.word	0x40014000
 8003bc4:	40014400 	.word	0x40014400
 8003bc8:	40014800 	.word	0x40014800

08003bcc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b087      	sub	sp, #28
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f023 0303 	bic.w	r3, r3, #3
 8003c06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	021b      	lsls	r3, r3, #8
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a27      	ldr	r2, [pc, #156]	@ (8003cc8 <TIM_OC3_SetConfig+0xfc>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d003      	beq.n	8003c36 <TIM_OC3_SetConfig+0x6a>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a26      	ldr	r2, [pc, #152]	@ (8003ccc <TIM_OC3_SetConfig+0x100>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d10d      	bne.n	8003c52 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	021b      	lsls	r3, r3, #8
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c50:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a1c      	ldr	r2, [pc, #112]	@ (8003cc8 <TIM_OC3_SetConfig+0xfc>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d00f      	beq.n	8003c7a <TIM_OC3_SetConfig+0xae>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a1b      	ldr	r2, [pc, #108]	@ (8003ccc <TIM_OC3_SetConfig+0x100>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d00b      	beq.n	8003c7a <TIM_OC3_SetConfig+0xae>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a1a      	ldr	r2, [pc, #104]	@ (8003cd0 <TIM_OC3_SetConfig+0x104>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d007      	beq.n	8003c7a <TIM_OC3_SetConfig+0xae>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a19      	ldr	r2, [pc, #100]	@ (8003cd4 <TIM_OC3_SetConfig+0x108>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d003      	beq.n	8003c7a <TIM_OC3_SetConfig+0xae>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a18      	ldr	r2, [pc, #96]	@ (8003cd8 <TIM_OC3_SetConfig+0x10c>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d113      	bne.n	8003ca2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	011b      	lsls	r3, r3, #4
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	011b      	lsls	r3, r3, #4
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	621a      	str	r2, [r3, #32]
}
 8003cbc:	bf00      	nop
 8003cbe:	371c      	adds	r7, #28
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	40012c00 	.word	0x40012c00
 8003ccc:	40013400 	.word	0x40013400
 8003cd0:	40014000 	.word	0x40014000
 8003cd4:	40014400 	.word	0x40014400
 8003cd8:	40014800 	.word	0x40014800

08003cdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b087      	sub	sp, #28
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	021b      	lsls	r3, r3, #8
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	031b      	lsls	r3, r3, #12
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a18      	ldr	r2, [pc, #96]	@ (8003d9c <TIM_OC4_SetConfig+0xc0>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d00f      	beq.n	8003d60 <TIM_OC4_SetConfig+0x84>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a17      	ldr	r2, [pc, #92]	@ (8003da0 <TIM_OC4_SetConfig+0xc4>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d00b      	beq.n	8003d60 <TIM_OC4_SetConfig+0x84>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a16      	ldr	r2, [pc, #88]	@ (8003da4 <TIM_OC4_SetConfig+0xc8>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d007      	beq.n	8003d60 <TIM_OC4_SetConfig+0x84>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a15      	ldr	r2, [pc, #84]	@ (8003da8 <TIM_OC4_SetConfig+0xcc>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d003      	beq.n	8003d60 <TIM_OC4_SetConfig+0x84>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a14      	ldr	r2, [pc, #80]	@ (8003dac <TIM_OC4_SetConfig+0xd0>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d109      	bne.n	8003d74 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	019b      	lsls	r3, r3, #6
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	621a      	str	r2, [r3, #32]
}
 8003d8e:	bf00      	nop
 8003d90:	371c      	adds	r7, #28
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	40012c00 	.word	0x40012c00
 8003da0:	40013400 	.word	0x40013400
 8003da4:	40014000 	.word	0x40014000
 8003da8:	40014400 	.word	0x40014400
 8003dac:	40014800 	.word	0x40014800

08003db0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b087      	sub	sp, #28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003df4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	041b      	lsls	r3, r3, #16
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a17      	ldr	r2, [pc, #92]	@ (8003e64 <TIM_OC5_SetConfig+0xb4>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d00f      	beq.n	8003e2a <TIM_OC5_SetConfig+0x7a>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a16      	ldr	r2, [pc, #88]	@ (8003e68 <TIM_OC5_SetConfig+0xb8>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d00b      	beq.n	8003e2a <TIM_OC5_SetConfig+0x7a>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a15      	ldr	r2, [pc, #84]	@ (8003e6c <TIM_OC5_SetConfig+0xbc>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d007      	beq.n	8003e2a <TIM_OC5_SetConfig+0x7a>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a14      	ldr	r2, [pc, #80]	@ (8003e70 <TIM_OC5_SetConfig+0xc0>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d003      	beq.n	8003e2a <TIM_OC5_SetConfig+0x7a>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a13      	ldr	r2, [pc, #76]	@ (8003e74 <TIM_OC5_SetConfig+0xc4>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d109      	bne.n	8003e3e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e30:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	021b      	lsls	r3, r3, #8
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685a      	ldr	r2, [r3, #4]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	621a      	str	r2, [r3, #32]
}
 8003e58:	bf00      	nop
 8003e5a:	371c      	adds	r7, #28
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	40012c00 	.word	0x40012c00
 8003e68:	40013400 	.word	0x40013400
 8003e6c:	40014000 	.word	0x40014000
 8003e70:	40014400 	.word	0x40014400
 8003e74:	40014800 	.word	0x40014800

08003e78 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b087      	sub	sp, #28
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ea6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003eaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	021b      	lsls	r3, r3, #8
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003ebe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	051b      	lsls	r3, r3, #20
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a18      	ldr	r2, [pc, #96]	@ (8003f30 <TIM_OC6_SetConfig+0xb8>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d00f      	beq.n	8003ef4 <TIM_OC6_SetConfig+0x7c>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a17      	ldr	r2, [pc, #92]	@ (8003f34 <TIM_OC6_SetConfig+0xbc>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d00b      	beq.n	8003ef4 <TIM_OC6_SetConfig+0x7c>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a16      	ldr	r2, [pc, #88]	@ (8003f38 <TIM_OC6_SetConfig+0xc0>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d007      	beq.n	8003ef4 <TIM_OC6_SetConfig+0x7c>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a15      	ldr	r2, [pc, #84]	@ (8003f3c <TIM_OC6_SetConfig+0xc4>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d003      	beq.n	8003ef4 <TIM_OC6_SetConfig+0x7c>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a14      	ldr	r2, [pc, #80]	@ (8003f40 <TIM_OC6_SetConfig+0xc8>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d109      	bne.n	8003f08 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003efa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	029b      	lsls	r3, r3, #10
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	621a      	str	r2, [r3, #32]
}
 8003f22:	bf00      	nop
 8003f24:	371c      	adds	r7, #28
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40012c00 	.word	0x40012c00
 8003f34:	40013400 	.word	0x40013400
 8003f38:	40014000 	.word	0x40014000
 8003f3c:	40014400 	.word	0x40014400
 8003f40:	40014800 	.word	0x40014800

08003f44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b087      	sub	sp, #28
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	f003 031f 	and.w	r3, r3, #31
 8003f56:	2201      	movs	r2, #1
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6a1a      	ldr	r2, [r3, #32]
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	43db      	mvns	r3, r3
 8003f66:	401a      	ands	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a1a      	ldr	r2, [r3, #32]
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	f003 031f 	and.w	r3, r3, #31
 8003f76:	6879      	ldr	r1, [r7, #4]
 8003f78:	fa01 f303 	lsl.w	r3, r1, r3
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	621a      	str	r2, [r3, #32]
}
 8003f82:	bf00      	nop
 8003f84:	371c      	adds	r7, #28
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
	...

08003f90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d101      	bne.n	8003fa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	e063      	b.n	8004070 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a2b      	ldr	r2, [pc, #172]	@ (800407c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d004      	beq.n	8003fdc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a2a      	ldr	r2, [pc, #168]	@ (8004080 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d108      	bne.n	8003fee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003fe2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ff4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a1b      	ldr	r2, [pc, #108]	@ (800407c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d018      	beq.n	8004044 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800401a:	d013      	beq.n	8004044 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a18      	ldr	r2, [pc, #96]	@ (8004084 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d00e      	beq.n	8004044 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a17      	ldr	r2, [pc, #92]	@ (8004088 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d009      	beq.n	8004044 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a12      	ldr	r2, [pc, #72]	@ (8004080 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d004      	beq.n	8004044 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a13      	ldr	r2, [pc, #76]	@ (800408c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d10c      	bne.n	800405e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800404a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	4313      	orrs	r3, r2
 8004054:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3714      	adds	r7, #20
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr
 800407c:	40012c00 	.word	0x40012c00
 8004080:	40013400 	.word	0x40013400
 8004084:	40000400 	.word	0x40000400
 8004088:	40000800 	.word	0x40000800
 800408c:	40014000 	.word	0x40014000

08004090 <siprintf>:
 8004090:	b40e      	push	{r1, r2, r3}
 8004092:	b500      	push	{lr}
 8004094:	b09c      	sub	sp, #112	@ 0x70
 8004096:	ab1d      	add	r3, sp, #116	@ 0x74
 8004098:	9002      	str	r0, [sp, #8]
 800409a:	9006      	str	r0, [sp, #24]
 800409c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80040a0:	4809      	ldr	r0, [pc, #36]	@ (80040c8 <siprintf+0x38>)
 80040a2:	9107      	str	r1, [sp, #28]
 80040a4:	9104      	str	r1, [sp, #16]
 80040a6:	4909      	ldr	r1, [pc, #36]	@ (80040cc <siprintf+0x3c>)
 80040a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80040ac:	9105      	str	r1, [sp, #20]
 80040ae:	6800      	ldr	r0, [r0, #0]
 80040b0:	9301      	str	r3, [sp, #4]
 80040b2:	a902      	add	r1, sp, #8
 80040b4:	f000 f994 	bl	80043e0 <_svfiprintf_r>
 80040b8:	9b02      	ldr	r3, [sp, #8]
 80040ba:	2200      	movs	r2, #0
 80040bc:	701a      	strb	r2, [r3, #0]
 80040be:	b01c      	add	sp, #112	@ 0x70
 80040c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80040c4:	b003      	add	sp, #12
 80040c6:	4770      	bx	lr
 80040c8:	20000124 	.word	0x20000124
 80040cc:	ffff0208 	.word	0xffff0208

080040d0 <memset>:
 80040d0:	4402      	add	r2, r0
 80040d2:	4603      	mov	r3, r0
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d100      	bne.n	80040da <memset+0xa>
 80040d8:	4770      	bx	lr
 80040da:	f803 1b01 	strb.w	r1, [r3], #1
 80040de:	e7f9      	b.n	80040d4 <memset+0x4>

080040e0 <__errno>:
 80040e0:	4b01      	ldr	r3, [pc, #4]	@ (80040e8 <__errno+0x8>)
 80040e2:	6818      	ldr	r0, [r3, #0]
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	20000124 	.word	0x20000124

080040ec <__libc_init_array>:
 80040ec:	b570      	push	{r4, r5, r6, lr}
 80040ee:	4d0d      	ldr	r5, [pc, #52]	@ (8004124 <__libc_init_array+0x38>)
 80040f0:	4c0d      	ldr	r4, [pc, #52]	@ (8004128 <__libc_init_array+0x3c>)
 80040f2:	1b64      	subs	r4, r4, r5
 80040f4:	10a4      	asrs	r4, r4, #2
 80040f6:	2600      	movs	r6, #0
 80040f8:	42a6      	cmp	r6, r4
 80040fa:	d109      	bne.n	8004110 <__libc_init_array+0x24>
 80040fc:	4d0b      	ldr	r5, [pc, #44]	@ (800412c <__libc_init_array+0x40>)
 80040fe:	4c0c      	ldr	r4, [pc, #48]	@ (8004130 <__libc_init_array+0x44>)
 8004100:	f000 fc66 	bl	80049d0 <_init>
 8004104:	1b64      	subs	r4, r4, r5
 8004106:	10a4      	asrs	r4, r4, #2
 8004108:	2600      	movs	r6, #0
 800410a:	42a6      	cmp	r6, r4
 800410c:	d105      	bne.n	800411a <__libc_init_array+0x2e>
 800410e:	bd70      	pop	{r4, r5, r6, pc}
 8004110:	f855 3b04 	ldr.w	r3, [r5], #4
 8004114:	4798      	blx	r3
 8004116:	3601      	adds	r6, #1
 8004118:	e7ee      	b.n	80040f8 <__libc_init_array+0xc>
 800411a:	f855 3b04 	ldr.w	r3, [r5], #4
 800411e:	4798      	blx	r3
 8004120:	3601      	adds	r6, #1
 8004122:	e7f2      	b.n	800410a <__libc_init_array+0x1e>
 8004124:	08004bfc 	.word	0x08004bfc
 8004128:	08004bfc 	.word	0x08004bfc
 800412c:	08004bfc 	.word	0x08004bfc
 8004130:	08004c00 	.word	0x08004c00

08004134 <__retarget_lock_acquire_recursive>:
 8004134:	4770      	bx	lr

08004136 <__retarget_lock_release_recursive>:
 8004136:	4770      	bx	lr

08004138 <_free_r>:
 8004138:	b538      	push	{r3, r4, r5, lr}
 800413a:	4605      	mov	r5, r0
 800413c:	2900      	cmp	r1, #0
 800413e:	d041      	beq.n	80041c4 <_free_r+0x8c>
 8004140:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004144:	1f0c      	subs	r4, r1, #4
 8004146:	2b00      	cmp	r3, #0
 8004148:	bfb8      	it	lt
 800414a:	18e4      	addlt	r4, r4, r3
 800414c:	f000 f8e0 	bl	8004310 <__malloc_lock>
 8004150:	4a1d      	ldr	r2, [pc, #116]	@ (80041c8 <_free_r+0x90>)
 8004152:	6813      	ldr	r3, [r2, #0]
 8004154:	b933      	cbnz	r3, 8004164 <_free_r+0x2c>
 8004156:	6063      	str	r3, [r4, #4]
 8004158:	6014      	str	r4, [r2, #0]
 800415a:	4628      	mov	r0, r5
 800415c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004160:	f000 b8dc 	b.w	800431c <__malloc_unlock>
 8004164:	42a3      	cmp	r3, r4
 8004166:	d908      	bls.n	800417a <_free_r+0x42>
 8004168:	6820      	ldr	r0, [r4, #0]
 800416a:	1821      	adds	r1, r4, r0
 800416c:	428b      	cmp	r3, r1
 800416e:	bf01      	itttt	eq
 8004170:	6819      	ldreq	r1, [r3, #0]
 8004172:	685b      	ldreq	r3, [r3, #4]
 8004174:	1809      	addeq	r1, r1, r0
 8004176:	6021      	streq	r1, [r4, #0]
 8004178:	e7ed      	b.n	8004156 <_free_r+0x1e>
 800417a:	461a      	mov	r2, r3
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	b10b      	cbz	r3, 8004184 <_free_r+0x4c>
 8004180:	42a3      	cmp	r3, r4
 8004182:	d9fa      	bls.n	800417a <_free_r+0x42>
 8004184:	6811      	ldr	r1, [r2, #0]
 8004186:	1850      	adds	r0, r2, r1
 8004188:	42a0      	cmp	r0, r4
 800418a:	d10b      	bne.n	80041a4 <_free_r+0x6c>
 800418c:	6820      	ldr	r0, [r4, #0]
 800418e:	4401      	add	r1, r0
 8004190:	1850      	adds	r0, r2, r1
 8004192:	4283      	cmp	r3, r0
 8004194:	6011      	str	r1, [r2, #0]
 8004196:	d1e0      	bne.n	800415a <_free_r+0x22>
 8004198:	6818      	ldr	r0, [r3, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	6053      	str	r3, [r2, #4]
 800419e:	4408      	add	r0, r1
 80041a0:	6010      	str	r0, [r2, #0]
 80041a2:	e7da      	b.n	800415a <_free_r+0x22>
 80041a4:	d902      	bls.n	80041ac <_free_r+0x74>
 80041a6:	230c      	movs	r3, #12
 80041a8:	602b      	str	r3, [r5, #0]
 80041aa:	e7d6      	b.n	800415a <_free_r+0x22>
 80041ac:	6820      	ldr	r0, [r4, #0]
 80041ae:	1821      	adds	r1, r4, r0
 80041b0:	428b      	cmp	r3, r1
 80041b2:	bf04      	itt	eq
 80041b4:	6819      	ldreq	r1, [r3, #0]
 80041b6:	685b      	ldreq	r3, [r3, #4]
 80041b8:	6063      	str	r3, [r4, #4]
 80041ba:	bf04      	itt	eq
 80041bc:	1809      	addeq	r1, r1, r0
 80041be:	6021      	streq	r1, [r4, #0]
 80041c0:	6054      	str	r4, [r2, #4]
 80041c2:	e7ca      	b.n	800415a <_free_r+0x22>
 80041c4:	bd38      	pop	{r3, r4, r5, pc}
 80041c6:	bf00      	nop
 80041c8:	20000454 	.word	0x20000454

080041cc <sbrk_aligned>:
 80041cc:	b570      	push	{r4, r5, r6, lr}
 80041ce:	4e0f      	ldr	r6, [pc, #60]	@ (800420c <sbrk_aligned+0x40>)
 80041d0:	460c      	mov	r4, r1
 80041d2:	6831      	ldr	r1, [r6, #0]
 80041d4:	4605      	mov	r5, r0
 80041d6:	b911      	cbnz	r1, 80041de <sbrk_aligned+0x12>
 80041d8:	f000 fba6 	bl	8004928 <_sbrk_r>
 80041dc:	6030      	str	r0, [r6, #0]
 80041de:	4621      	mov	r1, r4
 80041e0:	4628      	mov	r0, r5
 80041e2:	f000 fba1 	bl	8004928 <_sbrk_r>
 80041e6:	1c43      	adds	r3, r0, #1
 80041e8:	d103      	bne.n	80041f2 <sbrk_aligned+0x26>
 80041ea:	f04f 34ff 	mov.w	r4, #4294967295
 80041ee:	4620      	mov	r0, r4
 80041f0:	bd70      	pop	{r4, r5, r6, pc}
 80041f2:	1cc4      	adds	r4, r0, #3
 80041f4:	f024 0403 	bic.w	r4, r4, #3
 80041f8:	42a0      	cmp	r0, r4
 80041fa:	d0f8      	beq.n	80041ee <sbrk_aligned+0x22>
 80041fc:	1a21      	subs	r1, r4, r0
 80041fe:	4628      	mov	r0, r5
 8004200:	f000 fb92 	bl	8004928 <_sbrk_r>
 8004204:	3001      	adds	r0, #1
 8004206:	d1f2      	bne.n	80041ee <sbrk_aligned+0x22>
 8004208:	e7ef      	b.n	80041ea <sbrk_aligned+0x1e>
 800420a:	bf00      	nop
 800420c:	20000450 	.word	0x20000450

08004210 <_malloc_r>:
 8004210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004214:	1ccd      	adds	r5, r1, #3
 8004216:	f025 0503 	bic.w	r5, r5, #3
 800421a:	3508      	adds	r5, #8
 800421c:	2d0c      	cmp	r5, #12
 800421e:	bf38      	it	cc
 8004220:	250c      	movcc	r5, #12
 8004222:	2d00      	cmp	r5, #0
 8004224:	4606      	mov	r6, r0
 8004226:	db01      	blt.n	800422c <_malloc_r+0x1c>
 8004228:	42a9      	cmp	r1, r5
 800422a:	d904      	bls.n	8004236 <_malloc_r+0x26>
 800422c:	230c      	movs	r3, #12
 800422e:	6033      	str	r3, [r6, #0]
 8004230:	2000      	movs	r0, #0
 8004232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004236:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800430c <_malloc_r+0xfc>
 800423a:	f000 f869 	bl	8004310 <__malloc_lock>
 800423e:	f8d8 3000 	ldr.w	r3, [r8]
 8004242:	461c      	mov	r4, r3
 8004244:	bb44      	cbnz	r4, 8004298 <_malloc_r+0x88>
 8004246:	4629      	mov	r1, r5
 8004248:	4630      	mov	r0, r6
 800424a:	f7ff ffbf 	bl	80041cc <sbrk_aligned>
 800424e:	1c43      	adds	r3, r0, #1
 8004250:	4604      	mov	r4, r0
 8004252:	d158      	bne.n	8004306 <_malloc_r+0xf6>
 8004254:	f8d8 4000 	ldr.w	r4, [r8]
 8004258:	4627      	mov	r7, r4
 800425a:	2f00      	cmp	r7, #0
 800425c:	d143      	bne.n	80042e6 <_malloc_r+0xd6>
 800425e:	2c00      	cmp	r4, #0
 8004260:	d04b      	beq.n	80042fa <_malloc_r+0xea>
 8004262:	6823      	ldr	r3, [r4, #0]
 8004264:	4639      	mov	r1, r7
 8004266:	4630      	mov	r0, r6
 8004268:	eb04 0903 	add.w	r9, r4, r3
 800426c:	f000 fb5c 	bl	8004928 <_sbrk_r>
 8004270:	4581      	cmp	r9, r0
 8004272:	d142      	bne.n	80042fa <_malloc_r+0xea>
 8004274:	6821      	ldr	r1, [r4, #0]
 8004276:	1a6d      	subs	r5, r5, r1
 8004278:	4629      	mov	r1, r5
 800427a:	4630      	mov	r0, r6
 800427c:	f7ff ffa6 	bl	80041cc <sbrk_aligned>
 8004280:	3001      	adds	r0, #1
 8004282:	d03a      	beq.n	80042fa <_malloc_r+0xea>
 8004284:	6823      	ldr	r3, [r4, #0]
 8004286:	442b      	add	r3, r5
 8004288:	6023      	str	r3, [r4, #0]
 800428a:	f8d8 3000 	ldr.w	r3, [r8]
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	bb62      	cbnz	r2, 80042ec <_malloc_r+0xdc>
 8004292:	f8c8 7000 	str.w	r7, [r8]
 8004296:	e00f      	b.n	80042b8 <_malloc_r+0xa8>
 8004298:	6822      	ldr	r2, [r4, #0]
 800429a:	1b52      	subs	r2, r2, r5
 800429c:	d420      	bmi.n	80042e0 <_malloc_r+0xd0>
 800429e:	2a0b      	cmp	r2, #11
 80042a0:	d917      	bls.n	80042d2 <_malloc_r+0xc2>
 80042a2:	1961      	adds	r1, r4, r5
 80042a4:	42a3      	cmp	r3, r4
 80042a6:	6025      	str	r5, [r4, #0]
 80042a8:	bf18      	it	ne
 80042aa:	6059      	strne	r1, [r3, #4]
 80042ac:	6863      	ldr	r3, [r4, #4]
 80042ae:	bf08      	it	eq
 80042b0:	f8c8 1000 	streq.w	r1, [r8]
 80042b4:	5162      	str	r2, [r4, r5]
 80042b6:	604b      	str	r3, [r1, #4]
 80042b8:	4630      	mov	r0, r6
 80042ba:	f000 f82f 	bl	800431c <__malloc_unlock>
 80042be:	f104 000b 	add.w	r0, r4, #11
 80042c2:	1d23      	adds	r3, r4, #4
 80042c4:	f020 0007 	bic.w	r0, r0, #7
 80042c8:	1ac2      	subs	r2, r0, r3
 80042ca:	bf1c      	itt	ne
 80042cc:	1a1b      	subne	r3, r3, r0
 80042ce:	50a3      	strne	r3, [r4, r2]
 80042d0:	e7af      	b.n	8004232 <_malloc_r+0x22>
 80042d2:	6862      	ldr	r2, [r4, #4]
 80042d4:	42a3      	cmp	r3, r4
 80042d6:	bf0c      	ite	eq
 80042d8:	f8c8 2000 	streq.w	r2, [r8]
 80042dc:	605a      	strne	r2, [r3, #4]
 80042de:	e7eb      	b.n	80042b8 <_malloc_r+0xa8>
 80042e0:	4623      	mov	r3, r4
 80042e2:	6864      	ldr	r4, [r4, #4]
 80042e4:	e7ae      	b.n	8004244 <_malloc_r+0x34>
 80042e6:	463c      	mov	r4, r7
 80042e8:	687f      	ldr	r7, [r7, #4]
 80042ea:	e7b6      	b.n	800425a <_malloc_r+0x4a>
 80042ec:	461a      	mov	r2, r3
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	42a3      	cmp	r3, r4
 80042f2:	d1fb      	bne.n	80042ec <_malloc_r+0xdc>
 80042f4:	2300      	movs	r3, #0
 80042f6:	6053      	str	r3, [r2, #4]
 80042f8:	e7de      	b.n	80042b8 <_malloc_r+0xa8>
 80042fa:	230c      	movs	r3, #12
 80042fc:	6033      	str	r3, [r6, #0]
 80042fe:	4630      	mov	r0, r6
 8004300:	f000 f80c 	bl	800431c <__malloc_unlock>
 8004304:	e794      	b.n	8004230 <_malloc_r+0x20>
 8004306:	6005      	str	r5, [r0, #0]
 8004308:	e7d6      	b.n	80042b8 <_malloc_r+0xa8>
 800430a:	bf00      	nop
 800430c:	20000454 	.word	0x20000454

08004310 <__malloc_lock>:
 8004310:	4801      	ldr	r0, [pc, #4]	@ (8004318 <__malloc_lock+0x8>)
 8004312:	f7ff bf0f 	b.w	8004134 <__retarget_lock_acquire_recursive>
 8004316:	bf00      	nop
 8004318:	2000044c 	.word	0x2000044c

0800431c <__malloc_unlock>:
 800431c:	4801      	ldr	r0, [pc, #4]	@ (8004324 <__malloc_unlock+0x8>)
 800431e:	f7ff bf0a 	b.w	8004136 <__retarget_lock_release_recursive>
 8004322:	bf00      	nop
 8004324:	2000044c 	.word	0x2000044c

08004328 <__ssputs_r>:
 8004328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800432c:	688e      	ldr	r6, [r1, #8]
 800432e:	461f      	mov	r7, r3
 8004330:	42be      	cmp	r6, r7
 8004332:	680b      	ldr	r3, [r1, #0]
 8004334:	4682      	mov	sl, r0
 8004336:	460c      	mov	r4, r1
 8004338:	4690      	mov	r8, r2
 800433a:	d82d      	bhi.n	8004398 <__ssputs_r+0x70>
 800433c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004340:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004344:	d026      	beq.n	8004394 <__ssputs_r+0x6c>
 8004346:	6965      	ldr	r5, [r4, #20]
 8004348:	6909      	ldr	r1, [r1, #16]
 800434a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800434e:	eba3 0901 	sub.w	r9, r3, r1
 8004352:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004356:	1c7b      	adds	r3, r7, #1
 8004358:	444b      	add	r3, r9
 800435a:	106d      	asrs	r5, r5, #1
 800435c:	429d      	cmp	r5, r3
 800435e:	bf38      	it	cc
 8004360:	461d      	movcc	r5, r3
 8004362:	0553      	lsls	r3, r2, #21
 8004364:	d527      	bpl.n	80043b6 <__ssputs_r+0x8e>
 8004366:	4629      	mov	r1, r5
 8004368:	f7ff ff52 	bl	8004210 <_malloc_r>
 800436c:	4606      	mov	r6, r0
 800436e:	b360      	cbz	r0, 80043ca <__ssputs_r+0xa2>
 8004370:	6921      	ldr	r1, [r4, #16]
 8004372:	464a      	mov	r2, r9
 8004374:	f000 fae8 	bl	8004948 <memcpy>
 8004378:	89a3      	ldrh	r3, [r4, #12]
 800437a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800437e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004382:	81a3      	strh	r3, [r4, #12]
 8004384:	6126      	str	r6, [r4, #16]
 8004386:	6165      	str	r5, [r4, #20]
 8004388:	444e      	add	r6, r9
 800438a:	eba5 0509 	sub.w	r5, r5, r9
 800438e:	6026      	str	r6, [r4, #0]
 8004390:	60a5      	str	r5, [r4, #8]
 8004392:	463e      	mov	r6, r7
 8004394:	42be      	cmp	r6, r7
 8004396:	d900      	bls.n	800439a <__ssputs_r+0x72>
 8004398:	463e      	mov	r6, r7
 800439a:	6820      	ldr	r0, [r4, #0]
 800439c:	4632      	mov	r2, r6
 800439e:	4641      	mov	r1, r8
 80043a0:	f000 faa8 	bl	80048f4 <memmove>
 80043a4:	68a3      	ldr	r3, [r4, #8]
 80043a6:	1b9b      	subs	r3, r3, r6
 80043a8:	60a3      	str	r3, [r4, #8]
 80043aa:	6823      	ldr	r3, [r4, #0]
 80043ac:	4433      	add	r3, r6
 80043ae:	6023      	str	r3, [r4, #0]
 80043b0:	2000      	movs	r0, #0
 80043b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043b6:	462a      	mov	r2, r5
 80043b8:	f000 fad4 	bl	8004964 <_realloc_r>
 80043bc:	4606      	mov	r6, r0
 80043be:	2800      	cmp	r0, #0
 80043c0:	d1e0      	bne.n	8004384 <__ssputs_r+0x5c>
 80043c2:	6921      	ldr	r1, [r4, #16]
 80043c4:	4650      	mov	r0, sl
 80043c6:	f7ff feb7 	bl	8004138 <_free_r>
 80043ca:	230c      	movs	r3, #12
 80043cc:	f8ca 3000 	str.w	r3, [sl]
 80043d0:	89a3      	ldrh	r3, [r4, #12]
 80043d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043d6:	81a3      	strh	r3, [r4, #12]
 80043d8:	f04f 30ff 	mov.w	r0, #4294967295
 80043dc:	e7e9      	b.n	80043b2 <__ssputs_r+0x8a>
	...

080043e0 <_svfiprintf_r>:
 80043e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043e4:	4698      	mov	r8, r3
 80043e6:	898b      	ldrh	r3, [r1, #12]
 80043e8:	061b      	lsls	r3, r3, #24
 80043ea:	b09d      	sub	sp, #116	@ 0x74
 80043ec:	4607      	mov	r7, r0
 80043ee:	460d      	mov	r5, r1
 80043f0:	4614      	mov	r4, r2
 80043f2:	d510      	bpl.n	8004416 <_svfiprintf_r+0x36>
 80043f4:	690b      	ldr	r3, [r1, #16]
 80043f6:	b973      	cbnz	r3, 8004416 <_svfiprintf_r+0x36>
 80043f8:	2140      	movs	r1, #64	@ 0x40
 80043fa:	f7ff ff09 	bl	8004210 <_malloc_r>
 80043fe:	6028      	str	r0, [r5, #0]
 8004400:	6128      	str	r0, [r5, #16]
 8004402:	b930      	cbnz	r0, 8004412 <_svfiprintf_r+0x32>
 8004404:	230c      	movs	r3, #12
 8004406:	603b      	str	r3, [r7, #0]
 8004408:	f04f 30ff 	mov.w	r0, #4294967295
 800440c:	b01d      	add	sp, #116	@ 0x74
 800440e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004412:	2340      	movs	r3, #64	@ 0x40
 8004414:	616b      	str	r3, [r5, #20]
 8004416:	2300      	movs	r3, #0
 8004418:	9309      	str	r3, [sp, #36]	@ 0x24
 800441a:	2320      	movs	r3, #32
 800441c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004420:	f8cd 800c 	str.w	r8, [sp, #12]
 8004424:	2330      	movs	r3, #48	@ 0x30
 8004426:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80045c4 <_svfiprintf_r+0x1e4>
 800442a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800442e:	f04f 0901 	mov.w	r9, #1
 8004432:	4623      	mov	r3, r4
 8004434:	469a      	mov	sl, r3
 8004436:	f813 2b01 	ldrb.w	r2, [r3], #1
 800443a:	b10a      	cbz	r2, 8004440 <_svfiprintf_r+0x60>
 800443c:	2a25      	cmp	r2, #37	@ 0x25
 800443e:	d1f9      	bne.n	8004434 <_svfiprintf_r+0x54>
 8004440:	ebba 0b04 	subs.w	fp, sl, r4
 8004444:	d00b      	beq.n	800445e <_svfiprintf_r+0x7e>
 8004446:	465b      	mov	r3, fp
 8004448:	4622      	mov	r2, r4
 800444a:	4629      	mov	r1, r5
 800444c:	4638      	mov	r0, r7
 800444e:	f7ff ff6b 	bl	8004328 <__ssputs_r>
 8004452:	3001      	adds	r0, #1
 8004454:	f000 80a7 	beq.w	80045a6 <_svfiprintf_r+0x1c6>
 8004458:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800445a:	445a      	add	r2, fp
 800445c:	9209      	str	r2, [sp, #36]	@ 0x24
 800445e:	f89a 3000 	ldrb.w	r3, [sl]
 8004462:	2b00      	cmp	r3, #0
 8004464:	f000 809f 	beq.w	80045a6 <_svfiprintf_r+0x1c6>
 8004468:	2300      	movs	r3, #0
 800446a:	f04f 32ff 	mov.w	r2, #4294967295
 800446e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004472:	f10a 0a01 	add.w	sl, sl, #1
 8004476:	9304      	str	r3, [sp, #16]
 8004478:	9307      	str	r3, [sp, #28]
 800447a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800447e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004480:	4654      	mov	r4, sl
 8004482:	2205      	movs	r2, #5
 8004484:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004488:	484e      	ldr	r0, [pc, #312]	@ (80045c4 <_svfiprintf_r+0x1e4>)
 800448a:	f7fb feb1 	bl	80001f0 <memchr>
 800448e:	9a04      	ldr	r2, [sp, #16]
 8004490:	b9d8      	cbnz	r0, 80044ca <_svfiprintf_r+0xea>
 8004492:	06d0      	lsls	r0, r2, #27
 8004494:	bf44      	itt	mi
 8004496:	2320      	movmi	r3, #32
 8004498:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800449c:	0711      	lsls	r1, r2, #28
 800449e:	bf44      	itt	mi
 80044a0:	232b      	movmi	r3, #43	@ 0x2b
 80044a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044a6:	f89a 3000 	ldrb.w	r3, [sl]
 80044aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80044ac:	d015      	beq.n	80044da <_svfiprintf_r+0xfa>
 80044ae:	9a07      	ldr	r2, [sp, #28]
 80044b0:	4654      	mov	r4, sl
 80044b2:	2000      	movs	r0, #0
 80044b4:	f04f 0c0a 	mov.w	ip, #10
 80044b8:	4621      	mov	r1, r4
 80044ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044be:	3b30      	subs	r3, #48	@ 0x30
 80044c0:	2b09      	cmp	r3, #9
 80044c2:	d94b      	bls.n	800455c <_svfiprintf_r+0x17c>
 80044c4:	b1b0      	cbz	r0, 80044f4 <_svfiprintf_r+0x114>
 80044c6:	9207      	str	r2, [sp, #28]
 80044c8:	e014      	b.n	80044f4 <_svfiprintf_r+0x114>
 80044ca:	eba0 0308 	sub.w	r3, r0, r8
 80044ce:	fa09 f303 	lsl.w	r3, r9, r3
 80044d2:	4313      	orrs	r3, r2
 80044d4:	9304      	str	r3, [sp, #16]
 80044d6:	46a2      	mov	sl, r4
 80044d8:	e7d2      	b.n	8004480 <_svfiprintf_r+0xa0>
 80044da:	9b03      	ldr	r3, [sp, #12]
 80044dc:	1d19      	adds	r1, r3, #4
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	9103      	str	r1, [sp, #12]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	bfbb      	ittet	lt
 80044e6:	425b      	neglt	r3, r3
 80044e8:	f042 0202 	orrlt.w	r2, r2, #2
 80044ec:	9307      	strge	r3, [sp, #28]
 80044ee:	9307      	strlt	r3, [sp, #28]
 80044f0:	bfb8      	it	lt
 80044f2:	9204      	strlt	r2, [sp, #16]
 80044f4:	7823      	ldrb	r3, [r4, #0]
 80044f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80044f8:	d10a      	bne.n	8004510 <_svfiprintf_r+0x130>
 80044fa:	7863      	ldrb	r3, [r4, #1]
 80044fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80044fe:	d132      	bne.n	8004566 <_svfiprintf_r+0x186>
 8004500:	9b03      	ldr	r3, [sp, #12]
 8004502:	1d1a      	adds	r2, r3, #4
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	9203      	str	r2, [sp, #12]
 8004508:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800450c:	3402      	adds	r4, #2
 800450e:	9305      	str	r3, [sp, #20]
 8004510:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80045d4 <_svfiprintf_r+0x1f4>
 8004514:	7821      	ldrb	r1, [r4, #0]
 8004516:	2203      	movs	r2, #3
 8004518:	4650      	mov	r0, sl
 800451a:	f7fb fe69 	bl	80001f0 <memchr>
 800451e:	b138      	cbz	r0, 8004530 <_svfiprintf_r+0x150>
 8004520:	9b04      	ldr	r3, [sp, #16]
 8004522:	eba0 000a 	sub.w	r0, r0, sl
 8004526:	2240      	movs	r2, #64	@ 0x40
 8004528:	4082      	lsls	r2, r0
 800452a:	4313      	orrs	r3, r2
 800452c:	3401      	adds	r4, #1
 800452e:	9304      	str	r3, [sp, #16]
 8004530:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004534:	4824      	ldr	r0, [pc, #144]	@ (80045c8 <_svfiprintf_r+0x1e8>)
 8004536:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800453a:	2206      	movs	r2, #6
 800453c:	f7fb fe58 	bl	80001f0 <memchr>
 8004540:	2800      	cmp	r0, #0
 8004542:	d036      	beq.n	80045b2 <_svfiprintf_r+0x1d2>
 8004544:	4b21      	ldr	r3, [pc, #132]	@ (80045cc <_svfiprintf_r+0x1ec>)
 8004546:	bb1b      	cbnz	r3, 8004590 <_svfiprintf_r+0x1b0>
 8004548:	9b03      	ldr	r3, [sp, #12]
 800454a:	3307      	adds	r3, #7
 800454c:	f023 0307 	bic.w	r3, r3, #7
 8004550:	3308      	adds	r3, #8
 8004552:	9303      	str	r3, [sp, #12]
 8004554:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004556:	4433      	add	r3, r6
 8004558:	9309      	str	r3, [sp, #36]	@ 0x24
 800455a:	e76a      	b.n	8004432 <_svfiprintf_r+0x52>
 800455c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004560:	460c      	mov	r4, r1
 8004562:	2001      	movs	r0, #1
 8004564:	e7a8      	b.n	80044b8 <_svfiprintf_r+0xd8>
 8004566:	2300      	movs	r3, #0
 8004568:	3401      	adds	r4, #1
 800456a:	9305      	str	r3, [sp, #20]
 800456c:	4619      	mov	r1, r3
 800456e:	f04f 0c0a 	mov.w	ip, #10
 8004572:	4620      	mov	r0, r4
 8004574:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004578:	3a30      	subs	r2, #48	@ 0x30
 800457a:	2a09      	cmp	r2, #9
 800457c:	d903      	bls.n	8004586 <_svfiprintf_r+0x1a6>
 800457e:	2b00      	cmp	r3, #0
 8004580:	d0c6      	beq.n	8004510 <_svfiprintf_r+0x130>
 8004582:	9105      	str	r1, [sp, #20]
 8004584:	e7c4      	b.n	8004510 <_svfiprintf_r+0x130>
 8004586:	fb0c 2101 	mla	r1, ip, r1, r2
 800458a:	4604      	mov	r4, r0
 800458c:	2301      	movs	r3, #1
 800458e:	e7f0      	b.n	8004572 <_svfiprintf_r+0x192>
 8004590:	ab03      	add	r3, sp, #12
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	462a      	mov	r2, r5
 8004596:	4b0e      	ldr	r3, [pc, #56]	@ (80045d0 <_svfiprintf_r+0x1f0>)
 8004598:	a904      	add	r1, sp, #16
 800459a:	4638      	mov	r0, r7
 800459c:	f3af 8000 	nop.w
 80045a0:	1c42      	adds	r2, r0, #1
 80045a2:	4606      	mov	r6, r0
 80045a4:	d1d6      	bne.n	8004554 <_svfiprintf_r+0x174>
 80045a6:	89ab      	ldrh	r3, [r5, #12]
 80045a8:	065b      	lsls	r3, r3, #25
 80045aa:	f53f af2d 	bmi.w	8004408 <_svfiprintf_r+0x28>
 80045ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80045b0:	e72c      	b.n	800440c <_svfiprintf_r+0x2c>
 80045b2:	ab03      	add	r3, sp, #12
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	462a      	mov	r2, r5
 80045b8:	4b05      	ldr	r3, [pc, #20]	@ (80045d0 <_svfiprintf_r+0x1f0>)
 80045ba:	a904      	add	r1, sp, #16
 80045bc:	4638      	mov	r0, r7
 80045be:	f000 f879 	bl	80046b4 <_printf_i>
 80045c2:	e7ed      	b.n	80045a0 <_svfiprintf_r+0x1c0>
 80045c4:	08004bc0 	.word	0x08004bc0
 80045c8:	08004bca 	.word	0x08004bca
 80045cc:	00000000 	.word	0x00000000
 80045d0:	08004329 	.word	0x08004329
 80045d4:	08004bc6 	.word	0x08004bc6

080045d8 <_printf_common>:
 80045d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045dc:	4616      	mov	r6, r2
 80045de:	4698      	mov	r8, r3
 80045e0:	688a      	ldr	r2, [r1, #8]
 80045e2:	690b      	ldr	r3, [r1, #16]
 80045e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80045e8:	4293      	cmp	r3, r2
 80045ea:	bfb8      	it	lt
 80045ec:	4613      	movlt	r3, r2
 80045ee:	6033      	str	r3, [r6, #0]
 80045f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80045f4:	4607      	mov	r7, r0
 80045f6:	460c      	mov	r4, r1
 80045f8:	b10a      	cbz	r2, 80045fe <_printf_common+0x26>
 80045fa:	3301      	adds	r3, #1
 80045fc:	6033      	str	r3, [r6, #0]
 80045fe:	6823      	ldr	r3, [r4, #0]
 8004600:	0699      	lsls	r1, r3, #26
 8004602:	bf42      	ittt	mi
 8004604:	6833      	ldrmi	r3, [r6, #0]
 8004606:	3302      	addmi	r3, #2
 8004608:	6033      	strmi	r3, [r6, #0]
 800460a:	6825      	ldr	r5, [r4, #0]
 800460c:	f015 0506 	ands.w	r5, r5, #6
 8004610:	d106      	bne.n	8004620 <_printf_common+0x48>
 8004612:	f104 0a19 	add.w	sl, r4, #25
 8004616:	68e3      	ldr	r3, [r4, #12]
 8004618:	6832      	ldr	r2, [r6, #0]
 800461a:	1a9b      	subs	r3, r3, r2
 800461c:	42ab      	cmp	r3, r5
 800461e:	dc26      	bgt.n	800466e <_printf_common+0x96>
 8004620:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004624:	6822      	ldr	r2, [r4, #0]
 8004626:	3b00      	subs	r3, #0
 8004628:	bf18      	it	ne
 800462a:	2301      	movne	r3, #1
 800462c:	0692      	lsls	r2, r2, #26
 800462e:	d42b      	bmi.n	8004688 <_printf_common+0xb0>
 8004630:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004634:	4641      	mov	r1, r8
 8004636:	4638      	mov	r0, r7
 8004638:	47c8      	blx	r9
 800463a:	3001      	adds	r0, #1
 800463c:	d01e      	beq.n	800467c <_printf_common+0xa4>
 800463e:	6823      	ldr	r3, [r4, #0]
 8004640:	6922      	ldr	r2, [r4, #16]
 8004642:	f003 0306 	and.w	r3, r3, #6
 8004646:	2b04      	cmp	r3, #4
 8004648:	bf02      	ittt	eq
 800464a:	68e5      	ldreq	r5, [r4, #12]
 800464c:	6833      	ldreq	r3, [r6, #0]
 800464e:	1aed      	subeq	r5, r5, r3
 8004650:	68a3      	ldr	r3, [r4, #8]
 8004652:	bf0c      	ite	eq
 8004654:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004658:	2500      	movne	r5, #0
 800465a:	4293      	cmp	r3, r2
 800465c:	bfc4      	itt	gt
 800465e:	1a9b      	subgt	r3, r3, r2
 8004660:	18ed      	addgt	r5, r5, r3
 8004662:	2600      	movs	r6, #0
 8004664:	341a      	adds	r4, #26
 8004666:	42b5      	cmp	r5, r6
 8004668:	d11a      	bne.n	80046a0 <_printf_common+0xc8>
 800466a:	2000      	movs	r0, #0
 800466c:	e008      	b.n	8004680 <_printf_common+0xa8>
 800466e:	2301      	movs	r3, #1
 8004670:	4652      	mov	r2, sl
 8004672:	4641      	mov	r1, r8
 8004674:	4638      	mov	r0, r7
 8004676:	47c8      	blx	r9
 8004678:	3001      	adds	r0, #1
 800467a:	d103      	bne.n	8004684 <_printf_common+0xac>
 800467c:	f04f 30ff 	mov.w	r0, #4294967295
 8004680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004684:	3501      	adds	r5, #1
 8004686:	e7c6      	b.n	8004616 <_printf_common+0x3e>
 8004688:	18e1      	adds	r1, r4, r3
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	2030      	movs	r0, #48	@ 0x30
 800468e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004692:	4422      	add	r2, r4
 8004694:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004698:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800469c:	3302      	adds	r3, #2
 800469e:	e7c7      	b.n	8004630 <_printf_common+0x58>
 80046a0:	2301      	movs	r3, #1
 80046a2:	4622      	mov	r2, r4
 80046a4:	4641      	mov	r1, r8
 80046a6:	4638      	mov	r0, r7
 80046a8:	47c8      	blx	r9
 80046aa:	3001      	adds	r0, #1
 80046ac:	d0e6      	beq.n	800467c <_printf_common+0xa4>
 80046ae:	3601      	adds	r6, #1
 80046b0:	e7d9      	b.n	8004666 <_printf_common+0x8e>
	...

080046b4 <_printf_i>:
 80046b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046b8:	7e0f      	ldrb	r7, [r1, #24]
 80046ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80046bc:	2f78      	cmp	r7, #120	@ 0x78
 80046be:	4691      	mov	r9, r2
 80046c0:	4680      	mov	r8, r0
 80046c2:	460c      	mov	r4, r1
 80046c4:	469a      	mov	sl, r3
 80046c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80046ca:	d807      	bhi.n	80046dc <_printf_i+0x28>
 80046cc:	2f62      	cmp	r7, #98	@ 0x62
 80046ce:	d80a      	bhi.n	80046e6 <_printf_i+0x32>
 80046d0:	2f00      	cmp	r7, #0
 80046d2:	f000 80d2 	beq.w	800487a <_printf_i+0x1c6>
 80046d6:	2f58      	cmp	r7, #88	@ 0x58
 80046d8:	f000 80b9 	beq.w	800484e <_printf_i+0x19a>
 80046dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80046e4:	e03a      	b.n	800475c <_printf_i+0xa8>
 80046e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80046ea:	2b15      	cmp	r3, #21
 80046ec:	d8f6      	bhi.n	80046dc <_printf_i+0x28>
 80046ee:	a101      	add	r1, pc, #4	@ (adr r1, 80046f4 <_printf_i+0x40>)
 80046f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046f4:	0800474d 	.word	0x0800474d
 80046f8:	08004761 	.word	0x08004761
 80046fc:	080046dd 	.word	0x080046dd
 8004700:	080046dd 	.word	0x080046dd
 8004704:	080046dd 	.word	0x080046dd
 8004708:	080046dd 	.word	0x080046dd
 800470c:	08004761 	.word	0x08004761
 8004710:	080046dd 	.word	0x080046dd
 8004714:	080046dd 	.word	0x080046dd
 8004718:	080046dd 	.word	0x080046dd
 800471c:	080046dd 	.word	0x080046dd
 8004720:	08004861 	.word	0x08004861
 8004724:	0800478b 	.word	0x0800478b
 8004728:	0800481b 	.word	0x0800481b
 800472c:	080046dd 	.word	0x080046dd
 8004730:	080046dd 	.word	0x080046dd
 8004734:	08004883 	.word	0x08004883
 8004738:	080046dd 	.word	0x080046dd
 800473c:	0800478b 	.word	0x0800478b
 8004740:	080046dd 	.word	0x080046dd
 8004744:	080046dd 	.word	0x080046dd
 8004748:	08004823 	.word	0x08004823
 800474c:	6833      	ldr	r3, [r6, #0]
 800474e:	1d1a      	adds	r2, r3, #4
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6032      	str	r2, [r6, #0]
 8004754:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004758:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800475c:	2301      	movs	r3, #1
 800475e:	e09d      	b.n	800489c <_printf_i+0x1e8>
 8004760:	6833      	ldr	r3, [r6, #0]
 8004762:	6820      	ldr	r0, [r4, #0]
 8004764:	1d19      	adds	r1, r3, #4
 8004766:	6031      	str	r1, [r6, #0]
 8004768:	0606      	lsls	r6, r0, #24
 800476a:	d501      	bpl.n	8004770 <_printf_i+0xbc>
 800476c:	681d      	ldr	r5, [r3, #0]
 800476e:	e003      	b.n	8004778 <_printf_i+0xc4>
 8004770:	0645      	lsls	r5, r0, #25
 8004772:	d5fb      	bpl.n	800476c <_printf_i+0xb8>
 8004774:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004778:	2d00      	cmp	r5, #0
 800477a:	da03      	bge.n	8004784 <_printf_i+0xd0>
 800477c:	232d      	movs	r3, #45	@ 0x2d
 800477e:	426d      	negs	r5, r5
 8004780:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004784:	4859      	ldr	r0, [pc, #356]	@ (80048ec <_printf_i+0x238>)
 8004786:	230a      	movs	r3, #10
 8004788:	e011      	b.n	80047ae <_printf_i+0xfa>
 800478a:	6821      	ldr	r1, [r4, #0]
 800478c:	6833      	ldr	r3, [r6, #0]
 800478e:	0608      	lsls	r0, r1, #24
 8004790:	f853 5b04 	ldr.w	r5, [r3], #4
 8004794:	d402      	bmi.n	800479c <_printf_i+0xe8>
 8004796:	0649      	lsls	r1, r1, #25
 8004798:	bf48      	it	mi
 800479a:	b2ad      	uxthmi	r5, r5
 800479c:	2f6f      	cmp	r7, #111	@ 0x6f
 800479e:	4853      	ldr	r0, [pc, #332]	@ (80048ec <_printf_i+0x238>)
 80047a0:	6033      	str	r3, [r6, #0]
 80047a2:	bf14      	ite	ne
 80047a4:	230a      	movne	r3, #10
 80047a6:	2308      	moveq	r3, #8
 80047a8:	2100      	movs	r1, #0
 80047aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80047ae:	6866      	ldr	r6, [r4, #4]
 80047b0:	60a6      	str	r6, [r4, #8]
 80047b2:	2e00      	cmp	r6, #0
 80047b4:	bfa2      	ittt	ge
 80047b6:	6821      	ldrge	r1, [r4, #0]
 80047b8:	f021 0104 	bicge.w	r1, r1, #4
 80047bc:	6021      	strge	r1, [r4, #0]
 80047be:	b90d      	cbnz	r5, 80047c4 <_printf_i+0x110>
 80047c0:	2e00      	cmp	r6, #0
 80047c2:	d04b      	beq.n	800485c <_printf_i+0x1a8>
 80047c4:	4616      	mov	r6, r2
 80047c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80047ca:	fb03 5711 	mls	r7, r3, r1, r5
 80047ce:	5dc7      	ldrb	r7, [r0, r7]
 80047d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80047d4:	462f      	mov	r7, r5
 80047d6:	42bb      	cmp	r3, r7
 80047d8:	460d      	mov	r5, r1
 80047da:	d9f4      	bls.n	80047c6 <_printf_i+0x112>
 80047dc:	2b08      	cmp	r3, #8
 80047de:	d10b      	bne.n	80047f8 <_printf_i+0x144>
 80047e0:	6823      	ldr	r3, [r4, #0]
 80047e2:	07df      	lsls	r7, r3, #31
 80047e4:	d508      	bpl.n	80047f8 <_printf_i+0x144>
 80047e6:	6923      	ldr	r3, [r4, #16]
 80047e8:	6861      	ldr	r1, [r4, #4]
 80047ea:	4299      	cmp	r1, r3
 80047ec:	bfde      	ittt	le
 80047ee:	2330      	movle	r3, #48	@ 0x30
 80047f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80047f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80047f8:	1b92      	subs	r2, r2, r6
 80047fa:	6122      	str	r2, [r4, #16]
 80047fc:	f8cd a000 	str.w	sl, [sp]
 8004800:	464b      	mov	r3, r9
 8004802:	aa03      	add	r2, sp, #12
 8004804:	4621      	mov	r1, r4
 8004806:	4640      	mov	r0, r8
 8004808:	f7ff fee6 	bl	80045d8 <_printf_common>
 800480c:	3001      	adds	r0, #1
 800480e:	d14a      	bne.n	80048a6 <_printf_i+0x1f2>
 8004810:	f04f 30ff 	mov.w	r0, #4294967295
 8004814:	b004      	add	sp, #16
 8004816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800481a:	6823      	ldr	r3, [r4, #0]
 800481c:	f043 0320 	orr.w	r3, r3, #32
 8004820:	6023      	str	r3, [r4, #0]
 8004822:	4833      	ldr	r0, [pc, #204]	@ (80048f0 <_printf_i+0x23c>)
 8004824:	2778      	movs	r7, #120	@ 0x78
 8004826:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800482a:	6823      	ldr	r3, [r4, #0]
 800482c:	6831      	ldr	r1, [r6, #0]
 800482e:	061f      	lsls	r7, r3, #24
 8004830:	f851 5b04 	ldr.w	r5, [r1], #4
 8004834:	d402      	bmi.n	800483c <_printf_i+0x188>
 8004836:	065f      	lsls	r7, r3, #25
 8004838:	bf48      	it	mi
 800483a:	b2ad      	uxthmi	r5, r5
 800483c:	6031      	str	r1, [r6, #0]
 800483e:	07d9      	lsls	r1, r3, #31
 8004840:	bf44      	itt	mi
 8004842:	f043 0320 	orrmi.w	r3, r3, #32
 8004846:	6023      	strmi	r3, [r4, #0]
 8004848:	b11d      	cbz	r5, 8004852 <_printf_i+0x19e>
 800484a:	2310      	movs	r3, #16
 800484c:	e7ac      	b.n	80047a8 <_printf_i+0xf4>
 800484e:	4827      	ldr	r0, [pc, #156]	@ (80048ec <_printf_i+0x238>)
 8004850:	e7e9      	b.n	8004826 <_printf_i+0x172>
 8004852:	6823      	ldr	r3, [r4, #0]
 8004854:	f023 0320 	bic.w	r3, r3, #32
 8004858:	6023      	str	r3, [r4, #0]
 800485a:	e7f6      	b.n	800484a <_printf_i+0x196>
 800485c:	4616      	mov	r6, r2
 800485e:	e7bd      	b.n	80047dc <_printf_i+0x128>
 8004860:	6833      	ldr	r3, [r6, #0]
 8004862:	6825      	ldr	r5, [r4, #0]
 8004864:	6961      	ldr	r1, [r4, #20]
 8004866:	1d18      	adds	r0, r3, #4
 8004868:	6030      	str	r0, [r6, #0]
 800486a:	062e      	lsls	r6, r5, #24
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	d501      	bpl.n	8004874 <_printf_i+0x1c0>
 8004870:	6019      	str	r1, [r3, #0]
 8004872:	e002      	b.n	800487a <_printf_i+0x1c6>
 8004874:	0668      	lsls	r0, r5, #25
 8004876:	d5fb      	bpl.n	8004870 <_printf_i+0x1bc>
 8004878:	8019      	strh	r1, [r3, #0]
 800487a:	2300      	movs	r3, #0
 800487c:	6123      	str	r3, [r4, #16]
 800487e:	4616      	mov	r6, r2
 8004880:	e7bc      	b.n	80047fc <_printf_i+0x148>
 8004882:	6833      	ldr	r3, [r6, #0]
 8004884:	1d1a      	adds	r2, r3, #4
 8004886:	6032      	str	r2, [r6, #0]
 8004888:	681e      	ldr	r6, [r3, #0]
 800488a:	6862      	ldr	r2, [r4, #4]
 800488c:	2100      	movs	r1, #0
 800488e:	4630      	mov	r0, r6
 8004890:	f7fb fcae 	bl	80001f0 <memchr>
 8004894:	b108      	cbz	r0, 800489a <_printf_i+0x1e6>
 8004896:	1b80      	subs	r0, r0, r6
 8004898:	6060      	str	r0, [r4, #4]
 800489a:	6863      	ldr	r3, [r4, #4]
 800489c:	6123      	str	r3, [r4, #16]
 800489e:	2300      	movs	r3, #0
 80048a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048a4:	e7aa      	b.n	80047fc <_printf_i+0x148>
 80048a6:	6923      	ldr	r3, [r4, #16]
 80048a8:	4632      	mov	r2, r6
 80048aa:	4649      	mov	r1, r9
 80048ac:	4640      	mov	r0, r8
 80048ae:	47d0      	blx	sl
 80048b0:	3001      	adds	r0, #1
 80048b2:	d0ad      	beq.n	8004810 <_printf_i+0x15c>
 80048b4:	6823      	ldr	r3, [r4, #0]
 80048b6:	079b      	lsls	r3, r3, #30
 80048b8:	d413      	bmi.n	80048e2 <_printf_i+0x22e>
 80048ba:	68e0      	ldr	r0, [r4, #12]
 80048bc:	9b03      	ldr	r3, [sp, #12]
 80048be:	4298      	cmp	r0, r3
 80048c0:	bfb8      	it	lt
 80048c2:	4618      	movlt	r0, r3
 80048c4:	e7a6      	b.n	8004814 <_printf_i+0x160>
 80048c6:	2301      	movs	r3, #1
 80048c8:	4632      	mov	r2, r6
 80048ca:	4649      	mov	r1, r9
 80048cc:	4640      	mov	r0, r8
 80048ce:	47d0      	blx	sl
 80048d0:	3001      	adds	r0, #1
 80048d2:	d09d      	beq.n	8004810 <_printf_i+0x15c>
 80048d4:	3501      	adds	r5, #1
 80048d6:	68e3      	ldr	r3, [r4, #12]
 80048d8:	9903      	ldr	r1, [sp, #12]
 80048da:	1a5b      	subs	r3, r3, r1
 80048dc:	42ab      	cmp	r3, r5
 80048de:	dcf2      	bgt.n	80048c6 <_printf_i+0x212>
 80048e0:	e7eb      	b.n	80048ba <_printf_i+0x206>
 80048e2:	2500      	movs	r5, #0
 80048e4:	f104 0619 	add.w	r6, r4, #25
 80048e8:	e7f5      	b.n	80048d6 <_printf_i+0x222>
 80048ea:	bf00      	nop
 80048ec:	08004bd1 	.word	0x08004bd1
 80048f0:	08004be2 	.word	0x08004be2

080048f4 <memmove>:
 80048f4:	4288      	cmp	r0, r1
 80048f6:	b510      	push	{r4, lr}
 80048f8:	eb01 0402 	add.w	r4, r1, r2
 80048fc:	d902      	bls.n	8004904 <memmove+0x10>
 80048fe:	4284      	cmp	r4, r0
 8004900:	4623      	mov	r3, r4
 8004902:	d807      	bhi.n	8004914 <memmove+0x20>
 8004904:	1e43      	subs	r3, r0, #1
 8004906:	42a1      	cmp	r1, r4
 8004908:	d008      	beq.n	800491c <memmove+0x28>
 800490a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800490e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004912:	e7f8      	b.n	8004906 <memmove+0x12>
 8004914:	4402      	add	r2, r0
 8004916:	4601      	mov	r1, r0
 8004918:	428a      	cmp	r2, r1
 800491a:	d100      	bne.n	800491e <memmove+0x2a>
 800491c:	bd10      	pop	{r4, pc}
 800491e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004922:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004926:	e7f7      	b.n	8004918 <memmove+0x24>

08004928 <_sbrk_r>:
 8004928:	b538      	push	{r3, r4, r5, lr}
 800492a:	4d06      	ldr	r5, [pc, #24]	@ (8004944 <_sbrk_r+0x1c>)
 800492c:	2300      	movs	r3, #0
 800492e:	4604      	mov	r4, r0
 8004930:	4608      	mov	r0, r1
 8004932:	602b      	str	r3, [r5, #0]
 8004934:	f7fc fdba 	bl	80014ac <_sbrk>
 8004938:	1c43      	adds	r3, r0, #1
 800493a:	d102      	bne.n	8004942 <_sbrk_r+0x1a>
 800493c:	682b      	ldr	r3, [r5, #0]
 800493e:	b103      	cbz	r3, 8004942 <_sbrk_r+0x1a>
 8004940:	6023      	str	r3, [r4, #0]
 8004942:	bd38      	pop	{r3, r4, r5, pc}
 8004944:	20000448 	.word	0x20000448

08004948 <memcpy>:
 8004948:	440a      	add	r2, r1
 800494a:	4291      	cmp	r1, r2
 800494c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004950:	d100      	bne.n	8004954 <memcpy+0xc>
 8004952:	4770      	bx	lr
 8004954:	b510      	push	{r4, lr}
 8004956:	f811 4b01 	ldrb.w	r4, [r1], #1
 800495a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800495e:	4291      	cmp	r1, r2
 8004960:	d1f9      	bne.n	8004956 <memcpy+0xe>
 8004962:	bd10      	pop	{r4, pc}

08004964 <_realloc_r>:
 8004964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004968:	4680      	mov	r8, r0
 800496a:	4615      	mov	r5, r2
 800496c:	460c      	mov	r4, r1
 800496e:	b921      	cbnz	r1, 800497a <_realloc_r+0x16>
 8004970:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004974:	4611      	mov	r1, r2
 8004976:	f7ff bc4b 	b.w	8004210 <_malloc_r>
 800497a:	b92a      	cbnz	r2, 8004988 <_realloc_r+0x24>
 800497c:	f7ff fbdc 	bl	8004138 <_free_r>
 8004980:	2400      	movs	r4, #0
 8004982:	4620      	mov	r0, r4
 8004984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004988:	f000 f81a 	bl	80049c0 <_malloc_usable_size_r>
 800498c:	4285      	cmp	r5, r0
 800498e:	4606      	mov	r6, r0
 8004990:	d802      	bhi.n	8004998 <_realloc_r+0x34>
 8004992:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004996:	d8f4      	bhi.n	8004982 <_realloc_r+0x1e>
 8004998:	4629      	mov	r1, r5
 800499a:	4640      	mov	r0, r8
 800499c:	f7ff fc38 	bl	8004210 <_malloc_r>
 80049a0:	4607      	mov	r7, r0
 80049a2:	2800      	cmp	r0, #0
 80049a4:	d0ec      	beq.n	8004980 <_realloc_r+0x1c>
 80049a6:	42b5      	cmp	r5, r6
 80049a8:	462a      	mov	r2, r5
 80049aa:	4621      	mov	r1, r4
 80049ac:	bf28      	it	cs
 80049ae:	4632      	movcs	r2, r6
 80049b0:	f7ff ffca 	bl	8004948 <memcpy>
 80049b4:	4621      	mov	r1, r4
 80049b6:	4640      	mov	r0, r8
 80049b8:	f7ff fbbe 	bl	8004138 <_free_r>
 80049bc:	463c      	mov	r4, r7
 80049be:	e7e0      	b.n	8004982 <_realloc_r+0x1e>

080049c0 <_malloc_usable_size_r>:
 80049c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049c4:	1f18      	subs	r0, r3, #4
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	bfbc      	itt	lt
 80049ca:	580b      	ldrlt	r3, [r1, r0]
 80049cc:	18c0      	addlt	r0, r0, r3
 80049ce:	4770      	bx	lr

080049d0 <_init>:
 80049d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d2:	bf00      	nop
 80049d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049d6:	bc08      	pop	{r3}
 80049d8:	469e      	mov	lr, r3
 80049da:	4770      	bx	lr

080049dc <_fini>:
 80049dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049de:	bf00      	nop
 80049e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049e2:	bc08      	pop	{r3}
 80049e4:	469e      	mov	lr, r3
 80049e6:	4770      	bx	lr
