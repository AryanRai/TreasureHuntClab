
MainBoard2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e9c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  0800502c  0800502c  0000602c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005328  08005328  00007178  2**0
                  CONTENTS
  4 .ARM          00000008  08005328  08005328  00006328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005330  08005330  00007178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005330  08005330  00006330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005334  08005334  00006334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000178  20000000  08005338  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007178  2**0
                  CONTENTS
 10 .bss          00000328  20000178  20000178  00007178  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004a0  200004a0  00007178  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007178  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ca22  00000000  00000000  000071a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f89  00000000  00000000  00013bca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000be8  00000000  00000000  00015b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000925  00000000  00000000  00016740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dd85  00000000  00000000  00017065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000daa3  00000000  00000000  00034dea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b70fd  00000000  00000000  0004288d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f998a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003684  00000000  00000000  000f99d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008e  00000000  00000000  000fd054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000178 	.word	0x20000178
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005014 	.word	0x08005014

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000017c 	.word	0x2000017c
 80001cc:	08005014 	.word	0x08005014

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	db0b      	blt.n	80002ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	f003 021f 	and.w	r2, r3, #31
 80002a8:	4907      	ldr	r1, [pc, #28]	@ (80002c8 <__NVIC_EnableIRQ+0x38>)
 80002aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ae:	095b      	lsrs	r3, r3, #5
 80002b0:	2001      	movs	r0, #1
 80002b2:	fa00 f202 	lsl.w	r2, r0, r2
 80002b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002ba:	bf00      	nop
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	e000e100 	.word	0xe000e100

080002cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	4603      	mov	r3, r0
 80002d4:	6039      	str	r1, [r7, #0]
 80002d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	db0a      	blt.n	80002f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e0:	683b      	ldr	r3, [r7, #0]
 80002e2:	b2da      	uxtb	r2, r3
 80002e4:	490c      	ldr	r1, [pc, #48]	@ (8000318 <__NVIC_SetPriority+0x4c>)
 80002e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ea:	0112      	lsls	r2, r2, #4
 80002ec:	b2d2      	uxtb	r2, r2
 80002ee:	440b      	add	r3, r1
 80002f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002f4:	e00a      	b.n	800030c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	b2da      	uxtb	r2, r3
 80002fa:	4908      	ldr	r1, [pc, #32]	@ (800031c <__NVIC_SetPriority+0x50>)
 80002fc:	79fb      	ldrb	r3, [r7, #7]
 80002fe:	f003 030f 	and.w	r3, r3, #15
 8000302:	3b04      	subs	r3, #4
 8000304:	0112      	lsls	r2, r2, #4
 8000306:	b2d2      	uxtb	r2, r2
 8000308:	440b      	add	r3, r1
 800030a:	761a      	strb	r2, [r3, #24]
}
 800030c:	bf00      	nop
 800030e:	370c      	adds	r7, #12
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr
 8000318:	e000e100 	.word	0xe000e100
 800031c:	e000ed00 	.word	0xe000ed00

08000320 <create_mask>:
 	uint8_t PIN_UPPER;

 } GPIO;


 uint32_t create_mask(uint8_t start, uint8_t end) {
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	4603      	mov	r3, r0
 8000328:	460a      	mov	r2, r1
 800032a:	71fb      	strb	r3, [r7, #7]
 800032c:	4613      	mov	r3, r2
 800032e:	71bb      	strb	r3, [r7, #6]
 	//Bitwise-logic trick to get 1's mask between start and end index
 	return ((1 << (end + 1)) - 1) ^ ((1 << start) - 1);                      // XOR to get the range
 8000330:	79bb      	ldrb	r3, [r7, #6]
 8000332:	3301      	adds	r3, #1
 8000334:	2201      	movs	r2, #1
 8000336:	fa02 f303 	lsl.w	r3, r2, r3
 800033a:	1e5a      	subs	r2, r3, #1
 800033c:	79fb      	ldrb	r3, [r7, #7]
 800033e:	2101      	movs	r1, #1
 8000340:	fa01 f303 	lsl.w	r3, r1, r3
 8000344:	3b01      	subs	r3, #1
 8000346:	4053      	eors	r3, r2
 }
 8000348:	4618      	mov	r0, r3
 800034a:	370c      	adds	r7, #12
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr

08000354 <init_port>:



 GPIO *init_port(port_name_link name, port_mode mode, uint8_t pin_lower, uint8_t pin_upper){
 8000354:	b590      	push	{r4, r7, lr}
 8000356:	b089      	sub	sp, #36	@ 0x24
 8000358:	af00      	add	r7, sp, #0
 800035a:	4604      	mov	r4, r0
 800035c:	4608      	mov	r0, r1
 800035e:	4611      	mov	r1, r2
 8000360:	461a      	mov	r2, r3
 8000362:	4623      	mov	r3, r4
 8000364:	71fb      	strb	r3, [r7, #7]
 8000366:	4603      	mov	r3, r0
 8000368:	71bb      	strb	r3, [r7, #6]
 800036a:	460b      	mov	r3, r1
 800036c:	717b      	strb	r3, [r7, #5]
 800036e:	4613      	mov	r3, r2
 8000370:	713b      	strb	r3, [r7, #4]

 	GPIO *port_pt = malloc(sizeof(GPIO)); //Pointer to Port
 8000372:	200c      	movs	r0, #12
 8000374:	f004 f9a6 	bl	80046c4 <malloc>
 8000378:	4603      	mov	r3, r0
 800037a:	617b      	str	r3, [r7, #20]

 	port_pt->PORT_IND = name;
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	79fa      	ldrb	r2, [r7, #7]
 8000380:	701a      	strb	r2, [r3, #0]
 	port_pt->PORT_ADR = adr_link[name];
 8000382:	79fb      	ldrb	r3, [r7, #7]
 8000384:	4a50      	ldr	r2, [pc, #320]	@ (80004c8 <init_port+0x174>)
 8000386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800038a:	461a      	mov	r2, r3
 800038c:	697b      	ldr	r3, [r7, #20]
 800038e:	605a      	str	r2, [r3, #4]
 	port_pt->MODE = mode;
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	79ba      	ldrb	r2, [r7, #6]
 8000394:	721a      	strb	r2, [r3, #8]
 	port_pt->PIN_LOWER = pin_lower;
 8000396:	697b      	ldr	r3, [r7, #20]
 8000398:	797a      	ldrb	r2, [r7, #5]
 800039a:	725a      	strb	r2, [r3, #9]
 	port_pt->PIN_UPPER = pin_upper;
 800039c:	697b      	ldr	r3, [r7, #20]
 800039e:	793a      	ldrb	r2, [r7, #4]
 80003a0:	729a      	strb	r2, [r3, #10]

 	//Enable clock for portX
 	uint32_t clock_en_mask = clock_mask_link[name];
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	4a49      	ldr	r2, [pc, #292]	@ (80004cc <init_port+0x178>)
 80003a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003aa:	613b      	str	r3, [r7, #16]
 	RCC->AHBENR |= clock_en_mask;
 80003ac:	4b48      	ldr	r3, [pc, #288]	@ (80004d0 <init_port+0x17c>)
 80003ae:	695a      	ldr	r2, [r3, #20]
 80003b0:	4947      	ldr	r1, [pc, #284]	@ (80004d0 <init_port+0x17c>)
 80003b2:	693b      	ldr	r3, [r7, #16]
 80003b4:	4313      	orrs	r3, r2
 80003b6:	614b      	str	r3, [r1, #20]


 	uint32_t *port_mode_reg = ((uint32_t *) &(port_pt->PORT_ADR->MODER));
 80003b8:	697b      	ldr	r3, [r7, #20]
 80003ba:	685b      	ldr	r3, [r3, #4]
 80003bc:	60fb      	str	r3, [r7, #12]

 	//Generate mode-mask

 	//First mask away the selected section (pin_range)
 	uint32_t temp_mask = create_mask(pin_lower*2, pin_upper*2 + 1);
 80003be:	797b      	ldrb	r3, [r7, #5]
 80003c0:	005b      	lsls	r3, r3, #1
 80003c2:	b2da      	uxtb	r2, r3
 80003c4:	793b      	ldrb	r3, [r7, #4]
 80003c6:	005b      	lsls	r3, r3, #1
 80003c8:	b2db      	uxtb	r3, r3
 80003ca:	3301      	adds	r3, #1
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	4619      	mov	r1, r3
 80003d0:	4610      	mov	r0, r2
 80003d2:	f7ff ffa5 	bl	8000320 <create_mask>
 80003d6:	61f8      	str	r0, [r7, #28]

 	//Sets the pin_range section to 0
 	*port_mode_reg &= ~temp_mask;
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	681a      	ldr	r2, [r3, #0]
 80003dc:	69fb      	ldr	r3, [r7, #28]
 80003de:	43db      	mvns	r3, r3
 80003e0:	401a      	ands	r2, r3
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	601a      	str	r2, [r3, #0]


 	//Input-mode is enabled when each pin is 0b00 so no more masking is required

 	if (mode == OUTPUT){
 80003e6:	79bb      	ldrb	r3, [r7, #6]
 80003e8:	2b01      	cmp	r3, #1
 80003ea:	d11f      	bne.n	800042c <init_port+0xd8>

 		//Similar idea to clear-mask, except shifting by 2 each time (0b01010101...)
 		uint32_t first_mask = (1 << pin_lower*2);
 80003ec:	797b      	ldrb	r3, [r7, #5]
 80003ee:	005b      	lsls	r3, r3, #1
 80003f0:	2201      	movs	r2, #1
 80003f2:	fa02 f303 	lsl.w	r3, r2, r3
 80003f6:	60bb      	str	r3, [r7, #8]

 		temp_mask = first_mask;
 80003f8:	68bb      	ldr	r3, [r7, #8]
 80003fa:	61fb      	str	r3, [r7, #28]
 		for (uint8_t i=pin_lower; i<pin_upper+1; i++){
 80003fc:	797b      	ldrb	r3, [r7, #5]
 80003fe:	76fb      	strb	r3, [r7, #27]
 8000400:	e009      	b.n	8000416 <init_port+0xc2>
 			temp_mask <<= 2;
 8000402:	69fb      	ldr	r3, [r7, #28]
 8000404:	009b      	lsls	r3, r3, #2
 8000406:	61fb      	str	r3, [r7, #28]
 			temp_mask |= first_mask;
 8000408:	69fa      	ldr	r2, [r7, #28]
 800040a:	68bb      	ldr	r3, [r7, #8]
 800040c:	4313      	orrs	r3, r2
 800040e:	61fb      	str	r3, [r7, #28]
 		for (uint8_t i=pin_lower; i<pin_upper+1; i++){
 8000410:	7efb      	ldrb	r3, [r7, #27]
 8000412:	3301      	adds	r3, #1
 8000414:	76fb      	strb	r3, [r7, #27]
 8000416:	793a      	ldrb	r2, [r7, #4]
 8000418:	7efb      	ldrb	r3, [r7, #27]
 800041a:	429a      	cmp	r2, r3
 800041c:	d2f1      	bcs.n	8000402 <init_port+0xae>
 		}

 		*port_mode_reg |=temp_mask;
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	69fb      	ldr	r3, [r7, #28]
 8000424:	431a      	orrs	r2, r3
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	e047      	b.n	80004bc <init_port+0x168>

 	} else if (mode == ANALOG){
 800042c:	79bb      	ldrb	r3, [r7, #6]
 800042e:	2b02      	cmp	r3, #2
 8000430:	d144      	bne.n	80004bc <init_port+0x168>
 		//All 1s for analog mode (conveniently same as clear-mask)

 		*port_mode_reg |= temp_mask;
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	681a      	ldr	r2, [r3, #0]
 8000436:	69fb      	ldr	r3, [r7, #28]
 8000438:	431a      	orrs	r2, r3
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	601a      	str	r2, [r3, #0]

 		//ONLY AVAILABLE FOR PA0 - PA3 !!!!!!

 		// enable the clock for ADC1
		RCC->AHBENR |= RCC_AHBENR_ADC12EN;
 800043e:	4b24      	ldr	r3, [pc, #144]	@ (80004d0 <init_port+0x17c>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	4a23      	ldr	r2, [pc, #140]	@ (80004d0 <init_port+0x17c>)
 8000444:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000448:	6153      	str	r3, [r2, #20]

		// set to synchronise the ADC with the clock
		ADC12_COMMON->CCR |= ADC12_CCR_CKMODE_0;
 800044a:	4b22      	ldr	r3, [pc, #136]	@ (80004d4 <init_port+0x180>)
 800044c:	689b      	ldr	r3, [r3, #8]
 800044e:	4a21      	ldr	r2, [pc, #132]	@ (80004d4 <init_port+0x180>)
 8000450:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000454:	6093      	str	r3, [r2, #8]

		// ADEN must be = 0 for configuration (is the default)
		ADC2->CR &= ~ADC_CR_ADVREGEN; // clear voltage regulator enable
 8000456:	4b20      	ldr	r3, [pc, #128]	@ (80004d8 <init_port+0x184>)
 8000458:	689b      	ldr	r3, [r3, #8]
 800045a:	4a1f      	ldr	r2, [pc, #124]	@ (80004d8 <init_port+0x184>)
 800045c:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8000460:	6093      	str	r3, [r2, #8]
		ADC2->CR |= ADC_CR_ADVREGEN_0; // set ADVREGEN TO 01
 8000462:	4b1d      	ldr	r3, [pc, #116]	@ (80004d8 <init_port+0x184>)
 8000464:	689b      	ldr	r3, [r3, #8]
 8000466:	4a1c      	ldr	r2, [pc, #112]	@ (80004d8 <init_port+0x184>)
 8000468:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800046c:	6093      	str	r3, [r2, #8]
		ADC2->CR &= ~ADC_CR_ADCALDIF; // clear bit to enable Single-ended-input
 800046e:	4b1a      	ldr	r3, [pc, #104]	@ (80004d8 <init_port+0x184>)
 8000470:	689b      	ldr	r3, [r3, #8]
 8000472:	4a19      	ldr	r2, [pc, #100]	@ (80004d8 <init_port+0x184>)
 8000474:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8000478:	6093      	str	r3, [r2, #8]

		// calibrate the ADC (self calibration routine)
		ADC2->CR |= ADC_CR_ADCAL;
 800047a:	4b17      	ldr	r3, [pc, #92]	@ (80004d8 <init_port+0x184>)
 800047c:	689b      	ldr	r3, [r3, #8]
 800047e:	4a16      	ldr	r2, [pc, #88]	@ (80004d8 <init_port+0x184>)
 8000480:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000484:	6093      	str	r3, [r2, #8]
		while((ADC2->CR & ADC_CR_ADCAL) == ADC_CR_ADCAL); // Waiting for the calibration to finish
 8000486:	bf00      	nop
 8000488:	4b13      	ldr	r3, [pc, #76]	@ (80004d8 <init_port+0x184>)
 800048a:	689b      	ldr	r3, [r3, #8]
 800048c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8000490:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000494:	d0f8      	beq.n	8000488 <init_port+0x134>


		// single shot mode
		ADC2->CFGR &= ~ADC_CFGR_CONT;
 8000496:	4b10      	ldr	r3, [pc, #64]	@ (80004d8 <init_port+0x184>)
 8000498:	68db      	ldr	r3, [r3, #12]
 800049a:	4a0f      	ldr	r2, [pc, #60]	@ (80004d8 <init_port+0x184>)
 800049c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80004a0:	60d3      	str	r3, [r2, #12]

		// Enable the ADC
		ADC2->CR |= ADC_CR_ADEN;
 80004a2:	4b0d      	ldr	r3, [pc, #52]	@ (80004d8 <init_port+0x184>)
 80004a4:	689b      	ldr	r3, [r3, #8]
 80004a6:	4a0c      	ldr	r2, [pc, #48]	@ (80004d8 <init_port+0x184>)
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	6093      	str	r3, [r2, #8]

		// Wait the ADC to be ready.
		while (!(ADC2->ISR & ADC_ISR_ADRDY));
 80004ae:	bf00      	nop
 80004b0:	4b09      	ldr	r3, [pc, #36]	@ (80004d8 <init_port+0x184>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	f003 0301 	and.w	r3, r3, #1
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d0f9      	beq.n	80004b0 <init_port+0x15c>

 	}


 	//Port has been initialised!! - return the port-struct
 	return port_pt;
 80004bc:	697b      	ldr	r3, [r7, #20]
 }
 80004be:	4618      	mov	r0, r3
 80004c0:	3724      	adds	r7, #36	@ 0x24
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd90      	pop	{r4, r7, pc}
 80004c6:	bf00      	nop
 80004c8:	0800520c 	.word	0x0800520c
 80004cc:	08005220 	.word	0x08005220
 80004d0:	40021000 	.word	0x40021000
 80004d4:	50000300 	.word	0x50000300
 80004d8:	50000100 	.word	0x50000100

080004dc <EXTI0_IRQHandler>:

 //Pointers to callback-funcitons (for each of 16 pins)
 void (*EXTI_Callbacks[16])(uint8_t pin_index) = {0x00};
 //Wish this wasn't necessary, but each handler function has to be defined seperately
 //Is there a better way to do this? There doesn't seem to be a generic IQRHandler..
 void EXTI0_IRQHandler(void) {EXTI->PR |= (1 << 0); if (EXTI_Callbacks[0]) EXTI_Callbacks[0](0);}
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
 80004e0:	4b07      	ldr	r3, [pc, #28]	@ (8000500 <EXTI0_IRQHandler+0x24>)
 80004e2:	695b      	ldr	r3, [r3, #20]
 80004e4:	4a06      	ldr	r2, [pc, #24]	@ (8000500 <EXTI0_IRQHandler+0x24>)
 80004e6:	f043 0301 	orr.w	r3, r3, #1
 80004ea:	6153      	str	r3, [r2, #20]
 80004ec:	4b05      	ldr	r3, [pc, #20]	@ (8000504 <EXTI0_IRQHandler+0x28>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d003      	beq.n	80004fc <EXTI0_IRQHandler+0x20>
 80004f4:	4b03      	ldr	r3, [pc, #12]	@ (8000504 <EXTI0_IRQHandler+0x28>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	2000      	movs	r0, #0
 80004fa:	4798      	blx	r3
 80004fc:	bf00      	nop
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40010400 	.word	0x40010400
 8000504:	20000194 	.word	0x20000194

08000508 <EXTI1_IRQHandler>:
 void EXTI1_IRQHandler(void) {EXTI->PR |= (1 << 1); if (EXTI_Callbacks[1]) EXTI_Callbacks[1](1);}
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
 800050c:	4b07      	ldr	r3, [pc, #28]	@ (800052c <EXTI1_IRQHandler+0x24>)
 800050e:	695b      	ldr	r3, [r3, #20]
 8000510:	4a06      	ldr	r2, [pc, #24]	@ (800052c <EXTI1_IRQHandler+0x24>)
 8000512:	f043 0302 	orr.w	r3, r3, #2
 8000516:	6153      	str	r3, [r2, #20]
 8000518:	4b05      	ldr	r3, [pc, #20]	@ (8000530 <EXTI1_IRQHandler+0x28>)
 800051a:	685b      	ldr	r3, [r3, #4]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d003      	beq.n	8000528 <EXTI1_IRQHandler+0x20>
 8000520:	4b03      	ldr	r3, [pc, #12]	@ (8000530 <EXTI1_IRQHandler+0x28>)
 8000522:	685b      	ldr	r3, [r3, #4]
 8000524:	2001      	movs	r0, #1
 8000526:	4798      	blx	r3
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40010400 	.word	0x40010400
 8000530:	20000194 	.word	0x20000194

08000534 <EXTI2_TSC_IRQHandler>:
 void EXTI2_TSC_IRQHandler(void) {EXTI->PR |= (1 << 2); if (EXTI_Callbacks[2]) EXTI_Callbacks[2](2);}
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
 8000538:	4b07      	ldr	r3, [pc, #28]	@ (8000558 <EXTI2_TSC_IRQHandler+0x24>)
 800053a:	695b      	ldr	r3, [r3, #20]
 800053c:	4a06      	ldr	r2, [pc, #24]	@ (8000558 <EXTI2_TSC_IRQHandler+0x24>)
 800053e:	f043 0304 	orr.w	r3, r3, #4
 8000542:	6153      	str	r3, [r2, #20]
 8000544:	4b05      	ldr	r3, [pc, #20]	@ (800055c <EXTI2_TSC_IRQHandler+0x28>)
 8000546:	689b      	ldr	r3, [r3, #8]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d003      	beq.n	8000554 <EXTI2_TSC_IRQHandler+0x20>
 800054c:	4b03      	ldr	r3, [pc, #12]	@ (800055c <EXTI2_TSC_IRQHandler+0x28>)
 800054e:	689b      	ldr	r3, [r3, #8]
 8000550:	2002      	movs	r0, #2
 8000552:	4798      	blx	r3
 8000554:	bf00      	nop
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40010400 	.word	0x40010400
 800055c:	20000194 	.word	0x20000194

08000560 <EXTI3_IRQHandler>:
 void EXTI3_IRQHandler(void) {EXTI->PR |= (1 << 3); if (EXTI_Callbacks[3]) EXTI_Callbacks[3](3);}
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
 8000564:	4b07      	ldr	r3, [pc, #28]	@ (8000584 <EXTI3_IRQHandler+0x24>)
 8000566:	695b      	ldr	r3, [r3, #20]
 8000568:	4a06      	ldr	r2, [pc, #24]	@ (8000584 <EXTI3_IRQHandler+0x24>)
 800056a:	f043 0308 	orr.w	r3, r3, #8
 800056e:	6153      	str	r3, [r2, #20]
 8000570:	4b05      	ldr	r3, [pc, #20]	@ (8000588 <EXTI3_IRQHandler+0x28>)
 8000572:	68db      	ldr	r3, [r3, #12]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d003      	beq.n	8000580 <EXTI3_IRQHandler+0x20>
 8000578:	4b03      	ldr	r3, [pc, #12]	@ (8000588 <EXTI3_IRQHandler+0x28>)
 800057a:	68db      	ldr	r3, [r3, #12]
 800057c:	2003      	movs	r0, #3
 800057e:	4798      	blx	r3
 8000580:	bf00      	nop
 8000582:	bd80      	pop	{r7, pc}
 8000584:	40010400 	.word	0x40010400
 8000588:	20000194 	.word	0x20000194

0800058c <EXTI4_IRQHandler>:
 void EXTI4_IRQHandler(void) {EXTI->PR |= (1 << 4); if (EXTI_Callbacks[4]) EXTI_Callbacks[4](4);}
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
 8000590:	4b07      	ldr	r3, [pc, #28]	@ (80005b0 <EXTI4_IRQHandler+0x24>)
 8000592:	695b      	ldr	r3, [r3, #20]
 8000594:	4a06      	ldr	r2, [pc, #24]	@ (80005b0 <EXTI4_IRQHandler+0x24>)
 8000596:	f043 0310 	orr.w	r3, r3, #16
 800059a:	6153      	str	r3, [r2, #20]
 800059c:	4b05      	ldr	r3, [pc, #20]	@ (80005b4 <EXTI4_IRQHandler+0x28>)
 800059e:	691b      	ldr	r3, [r3, #16]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d003      	beq.n	80005ac <EXTI4_IRQHandler+0x20>
 80005a4:	4b03      	ldr	r3, [pc, #12]	@ (80005b4 <EXTI4_IRQHandler+0x28>)
 80005a6:	691b      	ldr	r3, [r3, #16]
 80005a8:	2004      	movs	r0, #4
 80005aa:	4798      	blx	r3
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40010400 	.word	0x40010400
 80005b4:	20000194 	.word	0x20000194

080005b8 <EXTI9_5_IRQHandler>:
 //Must find which pin in 5-9 range triggered handler
 void EXTI9_5_IRQHandler(void) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
     for (uint8_t i = 5; i <= 9; i++) {
 80005be:	2305      	movs	r3, #5
 80005c0:	71fb      	strb	r3, [r7, #7]
 80005c2:	e022      	b.n	800060a <EXTI9_5_IRQHandler+0x52>
         if (EXTI->PR & (1 << i)) {
 80005c4:	4b15      	ldr	r3, [pc, #84]	@ (800061c <EXTI9_5_IRQHandler+0x64>)
 80005c6:	695b      	ldr	r3, [r3, #20]
 80005c8:	79fa      	ldrb	r2, [r7, #7]
 80005ca:	2101      	movs	r1, #1
 80005cc:	fa01 f202 	lsl.w	r2, r1, r2
 80005d0:	4013      	ands	r3, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d016      	beq.n	8000604 <EXTI9_5_IRQHandler+0x4c>
             EXTI->PR |= (1 << i);  // Clear pending flag
 80005d6:	4b11      	ldr	r3, [pc, #68]	@ (800061c <EXTI9_5_IRQHandler+0x64>)
 80005d8:	695b      	ldr	r3, [r3, #20]
 80005da:	79fa      	ldrb	r2, [r7, #7]
 80005dc:	2101      	movs	r1, #1
 80005de:	fa01 f202 	lsl.w	r2, r1, r2
 80005e2:	4611      	mov	r1, r2
 80005e4:	4a0d      	ldr	r2, [pc, #52]	@ (800061c <EXTI9_5_IRQHandler+0x64>)
 80005e6:	430b      	orrs	r3, r1
 80005e8:	6153      	str	r3, [r2, #20]
             if (EXTI_Callbacks[i]) EXTI_Callbacks[i](i);  // Call user-defined function
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	4a0c      	ldr	r2, [pc, #48]	@ (8000620 <EXTI9_5_IRQHandler+0x68>)
 80005ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d006      	beq.n	8000604 <EXTI9_5_IRQHandler+0x4c>
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	4a09      	ldr	r2, [pc, #36]	@ (8000620 <EXTI9_5_IRQHandler+0x68>)
 80005fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005fe:	79fa      	ldrb	r2, [r7, #7]
 8000600:	4610      	mov	r0, r2
 8000602:	4798      	blx	r3
     for (uint8_t i = 5; i <= 9; i++) {
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	3301      	adds	r3, #1
 8000608:	71fb      	strb	r3, [r7, #7]
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	2b09      	cmp	r3, #9
 800060e:	d9d9      	bls.n	80005c4 <EXTI9_5_IRQHandler+0xc>
         }
     }
 }
 8000610:	bf00      	nop
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40010400 	.word	0x40010400
 8000620:	20000194 	.word	0x20000194

08000624 <EXTI15_10_IRQHandler>:

 void EXTI15_10_IRQHandler(void) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
     for (uint8_t i = 10; i <= 15; i++) {
 800062a:	230a      	movs	r3, #10
 800062c:	71fb      	strb	r3, [r7, #7]
 800062e:	e022      	b.n	8000676 <EXTI15_10_IRQHandler+0x52>
         if (EXTI->PR & (1 << i)) {
 8000630:	4b15      	ldr	r3, [pc, #84]	@ (8000688 <EXTI15_10_IRQHandler+0x64>)
 8000632:	695b      	ldr	r3, [r3, #20]
 8000634:	79fa      	ldrb	r2, [r7, #7]
 8000636:	2101      	movs	r1, #1
 8000638:	fa01 f202 	lsl.w	r2, r1, r2
 800063c:	4013      	ands	r3, r2
 800063e:	2b00      	cmp	r3, #0
 8000640:	d016      	beq.n	8000670 <EXTI15_10_IRQHandler+0x4c>
             EXTI->PR |= (1 << i);  // Clear pending flag
 8000642:	4b11      	ldr	r3, [pc, #68]	@ (8000688 <EXTI15_10_IRQHandler+0x64>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	79fa      	ldrb	r2, [r7, #7]
 8000648:	2101      	movs	r1, #1
 800064a:	fa01 f202 	lsl.w	r2, r1, r2
 800064e:	4611      	mov	r1, r2
 8000650:	4a0d      	ldr	r2, [pc, #52]	@ (8000688 <EXTI15_10_IRQHandler+0x64>)
 8000652:	430b      	orrs	r3, r1
 8000654:	6153      	str	r3, [r2, #20]
             if (EXTI_Callbacks[i]) EXTI_Callbacks[i](i);  // Call user-defined function
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	4a0c      	ldr	r2, [pc, #48]	@ (800068c <EXTI15_10_IRQHandler+0x68>)
 800065a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d006      	beq.n	8000670 <EXTI15_10_IRQHandler+0x4c>
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	4a09      	ldr	r2, [pc, #36]	@ (800068c <EXTI15_10_IRQHandler+0x68>)
 8000666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800066a:	79fa      	ldrb	r2, [r7, #7]
 800066c:	4610      	mov	r0, r2
 800066e:	4798      	blx	r3
     for (uint8_t i = 10; i <= 15; i++) {
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	3301      	adds	r3, #1
 8000674:	71fb      	strb	r3, [r7, #7]
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	2b0f      	cmp	r3, #15
 800067a:	d9d9      	bls.n	8000630 <EXTI15_10_IRQHandler+0xc>
         }
     }
 }
 800067c:	bf00      	nop
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40010400 	.word	0x40010400
 800068c:	20000194 	.word	0x20000194

08000690 <enable_interupt>:



 void enable_interupt(GPIO *port_pt, uint8_t pin_index,
 					trigger_type trigger, uint8_t priority,
 					void (*interupt_handler)(uint8_t pin_index)){
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	4608      	mov	r0, r1
 800069a:	4611      	mov	r1, r2
 800069c:	461a      	mov	r2, r3
 800069e:	4603      	mov	r3, r0
 80006a0:	70fb      	strb	r3, [r7, #3]
 80006a2:	460b      	mov	r3, r1
 80006a4:	70bb      	strb	r3, [r7, #2]
 80006a6:	4613      	mov	r3, r2
 80006a8:	707b      	strb	r3, [r7, #1]

 	//Link interupt_handler function to appropriate EXTI_Callback
 	EXTI_Callbacks[pin_index] = interupt_handler;
 80006aa:	78fb      	ldrb	r3, [r7, #3]
 80006ac:	493b      	ldr	r1, [pc, #236]	@ (800079c <enable_interupt+0x10c>)
 80006ae:	69ba      	ldr	r2, [r7, #24]
 80006b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b4:	b672      	cpsid	i
}
 80006b6:	bf00      	nop
 	// Disable the interrupts while messing around with the settings
 	//  otherwise can lead to strange behaviour
 	__disable_irq();

 	// Enable the system configuration controller (SYSCFG in RCC)
 	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80006b8:	4b39      	ldr	r3, [pc, #228]	@ (80007a0 <enable_interupt+0x110>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	4a38      	ldr	r2, [pc, #224]	@ (80007a0 <enable_interupt+0x110>)
 80006be:	f043 0301 	orr.w	r3, r3, #1
 80006c2:	6193      	str	r3, [r2, #24]

 	//Tell pin-0 multiplexer to target selected-port (PORT_IND)

 	//If pin 0-3 or 12-15 :

 	uint32_t exticr_shift = 4 * (pin_index % 4);
 80006c4:	78fb      	ldrb	r3, [r7, #3]
 80006c6:	f003 0303 	and.w	r3, r3, #3
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	60fb      	str	r3, [r7, #12]
 	SYSCFG->EXTICR[pin_index / 4] &= ~(0xF << exticr_shift); // clear old bits
 80006ce:	4a35      	ldr	r2, [pc, #212]	@ (80007a4 <enable_interupt+0x114>)
 80006d0:	78fb      	ldrb	r3, [r7, #3]
 80006d2:	089b      	lsrs	r3, r3, #2
 80006d4:	b2d8      	uxtb	r0, r3
 80006d6:	4603      	mov	r3, r0
 80006d8:	3302      	adds	r3, #2
 80006da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006de:	210f      	movs	r1, #15
 80006e0:	68fa      	ldr	r2, [r7, #12]
 80006e2:	fa01 f202 	lsl.w	r2, r1, r2
 80006e6:	43d2      	mvns	r2, r2
 80006e8:	492e      	ldr	r1, [pc, #184]	@ (80007a4 <enable_interupt+0x114>)
 80006ea:	401a      	ands	r2, r3
 80006ec:	1c83      	adds	r3, r0, #2
 80006ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 	SYSCFG->EXTICR[pin_index / 4] |= (port_pt->PORT_IND << exticr_shift); // set new bits
 80006f2:	4a2c      	ldr	r2, [pc, #176]	@ (80007a4 <enable_interupt+0x114>)
 80006f4:	78fb      	ldrb	r3, [r7, #3]
 80006f6:	089b      	lsrs	r3, r3, #2
 80006f8:	b2d8      	uxtb	r0, r3
 80006fa:	4603      	mov	r3, r0
 80006fc:	3302      	adds	r3, #2
 80006fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000702:	687a      	ldr	r2, [r7, #4]
 8000704:	7812      	ldrb	r2, [r2, #0]
 8000706:	4611      	mov	r1, r2
 8000708:	68fa      	ldr	r2, [r7, #12]
 800070a:	fa01 f202 	lsl.w	r2, r1, r2
 800070e:	4925      	ldr	r1, [pc, #148]	@ (80007a4 <enable_interupt+0x114>)
 8000710:	431a      	orrs	r2, r3
 8000712:	1c83      	adds	r3, r0, #2
 8000714:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

 	//  Select interrupt on rising/falling edge (pins are consecutive bits)
 	if (trigger==RISING_EDGE){
 8000718:	78bb      	ldrb	r3, [r7, #2]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d10a      	bne.n	8000734 <enable_interupt+0xa4>
 		//Set rising-edge
 		EXTI->RTSR |= (1 << pin_index);
 800071e:	4b22      	ldr	r3, [pc, #136]	@ (80007a8 <enable_interupt+0x118>)
 8000720:	689b      	ldr	r3, [r3, #8]
 8000722:	78fa      	ldrb	r2, [r7, #3]
 8000724:	2101      	movs	r1, #1
 8000726:	fa01 f202 	lsl.w	r2, r1, r2
 800072a:	4611      	mov	r1, r2
 800072c:	4a1e      	ldr	r2, [pc, #120]	@ (80007a8 <enable_interupt+0x118>)
 800072e:	430b      	orrs	r3, r1
 8000730:	6093      	str	r3, [r2, #8]
 8000732:	e009      	b.n	8000748 <enable_interupt+0xb8>
 	} else{
 		//Set falling-edge
 		EXTI->FTSR |= (1 << pin_index);
 8000734:	4b1c      	ldr	r3, [pc, #112]	@ (80007a8 <enable_interupt+0x118>)
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	78fa      	ldrb	r2, [r7, #3]
 800073a:	2101      	movs	r1, #1
 800073c:	fa01 f202 	lsl.w	r2, r1, r2
 8000740:	4611      	mov	r1, r2
 8000742:	4a19      	ldr	r2, [pc, #100]	@ (80007a8 <enable_interupt+0x118>)
 8000744:	430b      	orrs	r3, r1
 8000746:	60d3      	str	r3, [r2, #12]
 	}


 	// set the interrupt from EXTI line x as 'not masked' - as in, enable it.
 	EXTI->IMR |= (1 << pin_index);
 8000748:	4b17      	ldr	r3, [pc, #92]	@ (80007a8 <enable_interupt+0x118>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	78fa      	ldrb	r2, [r7, #3]
 800074e:	2101      	movs	r1, #1
 8000750:	fa01 f202 	lsl.w	r2, r1, r2
 8000754:	4611      	mov	r1, r2
 8000756:	4a14      	ldr	r2, [pc, #80]	@ (80007a8 <enable_interupt+0x118>)
 8000758:	430b      	orrs	r3, r1
 800075a:	6013      	str	r3, [r2, #0]

 	// Tell the NVIC module that EXTIx interrupts should be handled

 	//Pins 0-4 have a seperate request-num (from 6-10),
 	//pins 5-9 are all at 23, and pins 10-15 are at 40
 	uint8_t req_num = (pin_index <= 4) ? (6 + pin_index) :
 800075c:	78fb      	ldrb	r3, [r7, #3]
 800075e:	2b04      	cmp	r3, #4
 8000760:	d803      	bhi.n	800076a <enable_interupt+0xda>
 8000762:	78fb      	ldrb	r3, [r7, #3]
 8000764:	3306      	adds	r3, #6
 8000766:	b2db      	uxtb	r3, r3
 8000768:	e005      	b.n	8000776 <enable_interupt+0xe6>
 800076a:	78fb      	ldrb	r3, [r7, #3]
 800076c:	2b09      	cmp	r3, #9
 800076e:	d801      	bhi.n	8000774 <enable_interupt+0xe4>
 8000770:	2317      	movs	r3, #23
 8000772:	e000      	b.n	8000776 <enable_interupt+0xe6>
 8000774:	2328      	movs	r3, #40	@ 0x28
 8000776:	72fb      	strb	r3, [r7, #11]
 					  (pin_index <= 9) ? 23 : 40;

 	NVIC_SetPriority(req_num, priority);  // Set Priority
 8000778:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800077c:	787a      	ldrb	r2, [r7, #1]
 800077e:	4611      	mov	r1, r2
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff fda3 	bl	80002cc <__NVIC_SetPriority>
 	NVIC_EnableIRQ(req_num);
 8000786:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff fd80 	bl	8000290 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000790:	b662      	cpsie	i
}
 8000792:	bf00      	nop

 	// Re-enable all interrupts (now that we are finished)
 	__enable_irq();

 }
 8000794:	bf00      	nop
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000194 	.word	0x20000194
 80007a0:	40021000 	.word	0x40021000
 80007a4:	40010000 	.word	0x40010000
 80007a8:	40010400 	.word	0x40010400

080007ac <transmit_game_state>:
// Track which touchpads have been used (true = used, false = available)
bool touchpad_used[6] = {false, false, false, false, false, false};
bool touch_enabled = true;
// =================================== Game Functions ====================================
// Prints via UART game state
void transmit_game_state() {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b090      	sub	sp, #64	@ 0x40
 80007b0:	af00      	add	r7, sp, #0
    char buffer[64];
    sprintf(buffer, "DIGS REMAINING:%d TREASURES:%d\r\n\n", game.digs_remaining, game.items_left_to_find);
 80007b2:	4b08      	ldr	r3, [pc, #32]	@ (80007d4 <transmit_game_state+0x28>)
 80007b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80007b6:	4b07      	ldr	r3, [pc, #28]	@ (80007d4 <transmit_game_state+0x28>)
 80007b8:	69db      	ldr	r3, [r3, #28]
 80007ba:	4638      	mov	r0, r7
 80007bc:	4906      	ldr	r1, [pc, #24]	@ (80007d8 <transmit_game_state+0x2c>)
 80007be:	f004 f837 	bl	8004830 <siprintf>
    serial_output_string(buffer, &USART1_PORT);
 80007c2:	463b      	mov	r3, r7
 80007c4:	4905      	ldr	r1, [pc, #20]	@ (80007dc <transmit_game_state+0x30>)
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 ffab 	bl	8001722 <serial_output_string>
}
 80007cc:	bf00      	nop
 80007ce:	3740      	adds	r7, #64	@ 0x40
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	2000000c 	.word	0x2000000c
 80007d8:	0800502c 	.word	0x0800502c
 80007dc:	20000068 	.word	0x20000068

080007e0 <fn_a>:

// Timer callback
static void fn_a(const TimerSel sel, GameState *game) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b092      	sub	sp, #72	@ 0x48
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	6039      	str	r1, [r7, #0]
 80007ea:	71fb      	strb	r3, [r7, #7]
	game->game_time_remaining = game->game_time_remaining - 1;
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007f0:	1e5a      	subs	r2, r3, #1
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	62da      	str	r2, [r3, #44]	@ 0x2c
    char buffer[64];
    sprintf(buffer, "TIME REMAINING:%d\r\n", game->game_time_remaining);
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80007fa:	f107 0308 	add.w	r3, r7, #8
 80007fe:	4907      	ldr	r1, [pc, #28]	@ (800081c <fn_a+0x3c>)
 8000800:	4618      	mov	r0, r3
 8000802:	f004 f815 	bl	8004830 <siprintf>
    serial_output_string(buffer, &USART1_PORT);
 8000806:	f107 0308 	add.w	r3, r7, #8
 800080a:	4905      	ldr	r1, [pc, #20]	@ (8000820 <fn_a+0x40>)
 800080c:	4618      	mov	r0, r3
 800080e:	f000 ff88 	bl	8001722 <serial_output_string>
}
 8000812:	bf00      	nop
 8000814:	3748      	adds	r7, #72	@ 0x48
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	08005050 	.word	0x08005050
 8000820:	20000068 	.word	0x20000068

08000824 <reset_touchpads>:

// Add this function to reset all touchpads (for game start)
void reset_touchpads(void) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
    // Reset tracking array
    for (int i = 0; i < 6; i++) {
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	e007      	b.n	8000840 <reset_touchpads+0x1c>
        touchpad_used[i] = false;
 8000830:	4a1a      	ldr	r2, [pc, #104]	@ (800089c <reset_touchpads+0x78>)
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	4413      	add	r3, r2
 8000836:	2200      	movs	r2, #0
 8000838:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 6; i++) {
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	3301      	adds	r3, #1
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	2b05      	cmp	r3, #5
 8000844:	ddf4      	ble.n	8000830 <reset_touchpads+0xc>
    }

    // Re-enable all touchpad interrupts
    static const uint8_t touch_pins[6] = {7, 6, 5, 4, 3, 13};
    for (int i = 0; i < 6; i++) {
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	e01b      	b.n	8000884 <reset_touchpads+0x60>
        uint8_t pin_num = touch_pins[i];
 800084c:	4a14      	ldr	r2, [pc, #80]	@ (80008a0 <reset_touchpads+0x7c>)
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	4413      	add	r3, r2
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	71fb      	strb	r3, [r7, #7]
        EXTI->IMR |= (1 << pin_num);   // Unmask (enable) the interrupt
 8000856:	4b13      	ldr	r3, [pc, #76]	@ (80008a4 <reset_touchpads+0x80>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	79fa      	ldrb	r2, [r7, #7]
 800085c:	2101      	movs	r1, #1
 800085e:	fa01 f202 	lsl.w	r2, r1, r2
 8000862:	4611      	mov	r1, r2
 8000864:	4a0f      	ldr	r2, [pc, #60]	@ (80008a4 <reset_touchpads+0x80>)
 8000866:	430b      	orrs	r3, r1
 8000868:	6013      	str	r3, [r2, #0]
        EXTI->PR |= (1 << pin_num);    // Clear any pending interrupt
 800086a:	4b0e      	ldr	r3, [pc, #56]	@ (80008a4 <reset_touchpads+0x80>)
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	79fa      	ldrb	r2, [r7, #7]
 8000870:	2101      	movs	r1, #1
 8000872:	fa01 f202 	lsl.w	r2, r1, r2
 8000876:	4611      	mov	r1, r2
 8000878:	4a0a      	ldr	r2, [pc, #40]	@ (80008a4 <reset_touchpads+0x80>)
 800087a:	430b      	orrs	r3, r1
 800087c:	6153      	str	r3, [r2, #20]
    for (int i = 0; i < 6; i++) {
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	3301      	adds	r3, #1
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	2b05      	cmp	r3, #5
 8000888:	dde0      	ble.n	800084c <reset_touchpads+0x28>
    }

    serial_output_string("All touchpads re-enabled\r\n", &USART1_PORT);
 800088a:	4907      	ldr	r1, [pc, #28]	@ (80008a8 <reset_touchpads+0x84>)
 800088c:	4807      	ldr	r0, [pc, #28]	@ (80008ac <reset_touchpads+0x88>)
 800088e:	f000 ff48 	bl	8001722 <serial_output_string>
}
 8000892:	bf00      	nop
 8000894:	3710      	adds	r7, #16
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200002c0 	.word	0x200002c0
 80008a0:	08005234 	.word	0x08005234
 80008a4:	40010400 	.word	0x40010400
 80008a8:	20000068 	.word	0x20000068
 80008ac:	08005064 	.word	0x08005064

080008b0 <disable_touchpad>:

// Add this function to disable a specific touchpad
void disable_touchpad(uint8_t touchpad_index) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b094      	sub	sp, #80	@ 0x50
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]
    if (touchpad_index < 6) {
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	2b05      	cmp	r3, #5
 80008be:	d830      	bhi.n	8000922 <disable_touchpad+0x72>
        touchpad_used[touchpad_index] = true;
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	4a1a      	ldr	r2, [pc, #104]	@ (800092c <disable_touchpad+0x7c>)
 80008c4:	2101      	movs	r1, #1
 80008c6:	54d1      	strb	r1, [r2, r3]

        // Map touchpad index to actual pin numbers
        static const uint8_t touch_pins[6] = {7, 6, 5, 4, 3, 13}; // PB7, PB6, PB5, PB4, PB3, PB13
        uint8_t pin_num = touch_pins[touchpad_index];
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	4a19      	ldr	r2, [pc, #100]	@ (8000930 <disable_touchpad+0x80>)
 80008cc:	5cd3      	ldrb	r3, [r2, r3]
 80008ce:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

        // Disable the interrupt for this specific pin
        EXTI->IMR &= ~(1 << pin_num);  // Mask (disable) the interrupt
 80008d2:	4b18      	ldr	r3, [pc, #96]	@ (8000934 <disable_touchpad+0x84>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80008da:	2101      	movs	r1, #1
 80008dc:	fa01 f202 	lsl.w	r2, r1, r2
 80008e0:	43d2      	mvns	r2, r2
 80008e2:	4611      	mov	r1, r2
 80008e4:	4a13      	ldr	r2, [pc, #76]	@ (8000934 <disable_touchpad+0x84>)
 80008e6:	400b      	ands	r3, r1
 80008e8:	6013      	str	r3, [r2, #0]
        EXTI->PR |= (1 << pin_num);    // Clear any pending interrupt
 80008ea:	4b12      	ldr	r3, [pc, #72]	@ (8000934 <disable_touchpad+0x84>)
 80008ec:	695b      	ldr	r3, [r3, #20]
 80008ee:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80008f2:	2101      	movs	r1, #1
 80008f4:	fa01 f202 	lsl.w	r2, r1, r2
 80008f8:	4611      	mov	r1, r2
 80008fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000934 <disable_touchpad+0x84>)
 80008fc:	430b      	orrs	r3, r1
 80008fe:	6153      	str	r3, [r2, #20]

        char buffer[64];
        sprintf(buffer, "Touchpad %d (PB%d) disabled - already used\r\n", touch_pins[touchpad_index], pin_num);
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	4a0b      	ldr	r2, [pc, #44]	@ (8000930 <disable_touchpad+0x80>)
 8000904:	5cd3      	ldrb	r3, [r2, r3]
 8000906:	461a      	mov	r2, r3
 8000908:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800090c:	f107 000c 	add.w	r0, r7, #12
 8000910:	4909      	ldr	r1, [pc, #36]	@ (8000938 <disable_touchpad+0x88>)
 8000912:	f003 ff8d 	bl	8004830 <siprintf>
        serial_output_string(buffer, &USART1_PORT);
 8000916:	f107 030c 	add.w	r3, r7, #12
 800091a:	4908      	ldr	r1, [pc, #32]	@ (800093c <disable_touchpad+0x8c>)
 800091c:	4618      	mov	r0, r3
 800091e:	f000 ff00 	bl	8001722 <serial_output_string>
    }
}
 8000922:	bf00      	nop
 8000924:	3750      	adds	r7, #80	@ 0x50
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200002c0 	.word	0x200002c0
 8000930:	0800523c 	.word	0x0800523c
 8000934:	40010400 	.word	0x40010400
 8000938:	08005080 	.word	0x08005080
 800093c:	20000068 	.word	0x20000068

08000940 <start_game>:

// --- Start Game Signal (from USART or button) ---
void start_game(GameState *game) {
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
	// Restart game state
    game->game_over = 0;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2200      	movs	r2, #0
 800094c:	631a      	str	r2, [r3, #48]	@ 0x30
    game->game_time_remaining = 240;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	22f0      	movs	r2, #240	@ 0xf0
 8000952:	62da      	str	r2, [r3, #44]	@ 0x2c
    game->digs_remaining = 4;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2204      	movs	r2, #4
 8000958:	625a      	str	r2, [r3, #36]	@ 0x24

    int count = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 6; i++) {
 800095e:	2300      	movs	r3, #0
 8000960:	613b      	str	r3, [r7, #16]
 8000962:	e00b      	b.n	800097c <start_game+0x3c>
        if (game->correct_servos[i] != 0) {
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	693a      	ldr	r2, [r7, #16]
 8000968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d002      	beq.n	8000976 <start_game+0x36>
            count++;
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	3301      	adds	r3, #1
 8000974:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 6; i++) {
 8000976:	693b      	ldr	r3, [r7, #16]
 8000978:	3301      	adds	r3, #1
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]
 800097e:	2b05      	cmp	r3, #5
 8000980:	ddf0      	ble.n	8000964 <start_game+0x24>
        }
    }
    game->total_items_to_find = count;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	697a      	ldr	r2, [r7, #20]
 8000986:	635a      	str	r2, [r3, #52]	@ 0x34

    // Calibrate: Set all servos to 0°
    for (uint8_t servoId = 1; servoId <= 6; servoId++)
 8000988:	2301      	movs	r3, #1
 800098a:	73fb      	strb	r3, [r7, #15]
 800098c:	e007      	b.n	800099e <start_game+0x5e>
    {
      SetServoAngle(servoId, 0);
 800098e:	7bfb      	ldrb	r3, [r7, #15]
 8000990:	2100      	movs	r1, #0
 8000992:	4618      	mov	r0, r3
 8000994:	f000 f924 	bl	8000be0 <SetServoAngle>
    for (uint8_t servoId = 1; servoId <= 6; servoId++)
 8000998:	7bfb      	ldrb	r3, [r7, #15]
 800099a:	3301      	adds	r3, #1
 800099c:	73fb      	strb	r3, [r7, #15]
 800099e:	7bfb      	ldrb	r3, [r7, #15]
 80009a0:	2b06      	cmp	r3, #6
 80009a2:	d9f4      	bls.n	800098e <start_game+0x4e>
    }

    reset_touchpads();
 80009a4:	f7ff ff3e 	bl	8000824 <reset_touchpads>

    // Init game timer
    timer_init();
 80009a8:	f001 f900 	bl	8001bac <timer_init>
    const TimerSel tim_a = TIMER_SEL_7;
 80009ac:	2304      	movs	r3, #4
 80009ae:	73bb      	strb	r3, [r7, #14]
    timer_prescaler_set(tim_a, 11999);
 80009b0:	7bbb      	ldrb	r3, [r7, #14]
 80009b2:	f642 61df 	movw	r1, #11999	@ 0x2edf
 80009b6:	4618      	mov	r0, r3
 80009b8:	f001 f9dc 	bl	8001d74 <timer_prescaler_set>
    timer_period_set(tim_a, 3999);
 80009bc:	7bbb      	ldrb	r3, [r7, #14]
 80009be:	f640 719f 	movw	r1, #3999	@ 0xf9f
 80009c2:	4618      	mov	r0, r3
 80009c4:	f001 f9b2 	bl	8001d2c <timer_period_set>
    timer_silent_set(tim_a, false);
 80009c8:	7bbb      	ldrb	r3, [r7, #14]
 80009ca:	2100      	movs	r1, #0
 80009cc:	4618      	mov	r0, r3
 80009ce:	f001 f993 	bl	8001cf8 <timer_silent_set>
    timer_recur_set(tim_a, true);
 80009d2:	7bbb      	ldrb	r3, [r7, #14]
 80009d4:	2101      	movs	r1, #1
 80009d6:	4618      	mov	r0, r3
 80009d8:	f001 fa10 	bl	8001dfc <timer_recur_set>
    timer_callback_set(tim_a, &fn_a);
 80009dc:	7bbb      	ldrb	r3, [r7, #14]
 80009de:	4909      	ldr	r1, [pc, #36]	@ (8000a04 <start_game+0xc4>)
 80009e0:	4618      	mov	r0, r3
 80009e2:	f001 fa8f 	bl	8001f04 <timer_callback_set>
    timer_enable_set(tim_a, true);
 80009e6:	7bbb      	ldrb	r3, [r7, #14]
 80009e8:	2101      	movs	r1, #1
 80009ea:	4618      	mov	r0, r3
 80009ec:	f001 f940 	bl	8001c70 <timer_enable_set>

    serial_output_string("Game Started\r\n\n", &USART1_PORT);
 80009f0:	4905      	ldr	r1, [pc, #20]	@ (8000a08 <start_game+0xc8>)
 80009f2:	4806      	ldr	r0, [pc, #24]	@ (8000a0c <start_game+0xcc>)
 80009f4:	f000 fe95 	bl	8001722 <serial_output_string>

    transmit_game_state();
 80009f8:	f7ff fed8 	bl	80007ac <transmit_game_state>

}
 80009fc:	bf00      	nop
 80009fe:	3718      	adds	r7, #24
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	080007e1 	.word	0x080007e1
 8000a08:	20000068 	.word	0x20000068
 8000a0c:	080050b0 	.word	0x080050b0

08000a10 <update_game_state>:

// Game variable update function
void update_game_state(uint8_t result, GameState *game, GameTriggers *triggers) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
 8000a1c:	73fb      	strb	r3, [r7, #15]
	// Update game state depending if successful dig
	if (result == 1) {
 8000a1e:	7bfb      	ldrb	r3, [r7, #15]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d116      	bne.n	8000a52 <update_game_state+0x42>
		game->items_found++;
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	1c5a      	adds	r2, r3, #1
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	619a      	str	r2, [r3, #24]
		game->digs_remaining--;
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a32:	1e5a      	subs	r2, r3, #1
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	625a      	str	r2, [r3, #36]	@ 0x24
		game->digs_taken--;
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	6a1b      	ldr	r3, [r3, #32]
 8000a3c:	1e5a      	subs	r2, r3, #1
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	621a      	str	r2, [r3, #32]
		game->items_left_to_find--;
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	69db      	ldr	r3, [r3, #28]
 8000a46:	1e5a      	subs	r2, r3, #1
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	61da      	str	r2, [r3, #28]
		transmit_game_state();
 8000a4c:	f7ff feae 	bl	80007ac <transmit_game_state>
	} else {
		game->digs_remaining--;
		game->digs_taken--;
		transmit_game_state();
	}
}
 8000a50:	e00b      	b.n	8000a6a <update_game_state+0x5a>
		game->digs_remaining--;
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a56:	1e5a      	subs	r2, r3, #1
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	625a      	str	r2, [r3, #36]	@ 0x24
		game->digs_taken--;
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	6a1b      	ldr	r3, [r3, #32]
 8000a60:	1e5a      	subs	r2, r3, #1
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	621a      	str	r2, [r3, #32]
		transmit_game_state();
 8000a66:	f7ff fea1 	bl	80007ac <transmit_game_state>
}
 8000a6a:	bf00      	nop
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
	...

08000a74 <check_game_over>:

//Check for game over conditions
uint8_t check_game_over(GameState *game) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
    if (game->digs_remaining == 0 || game->game_time_remaining == 1 || game->items_left_to_find == 0) {
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d007      	beq.n	8000a94 <check_game_over+0x20>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d003      	beq.n	8000a94 <check_game_over+0x20>
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	69db      	ldr	r3, [r3, #28]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d11d      	bne.n	8000ad0 <check_game_over+0x5c>
  	    const TimerSel tim_a = TIMER_SEL_7;
 8000a94:	2304      	movs	r3, #4
 8000a96:	73fb      	strb	r3, [r7, #15]

  	    if (game->items_left_to_find == 0) {
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	69db      	ldr	r3, [r3, #28]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d109      	bne.n	8000ab4 <check_game_over+0x40>
      	  	timer_enable_set(tim_a, false);
 8000aa0:	7bfb      	ldrb	r3, [r7, #15]
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f001 f8e3 	bl	8001c70 <timer_enable_set>

      		serial_output_string((char *) "You Win!\n", &USART1_PORT);
 8000aaa:	490c      	ldr	r1, [pc, #48]	@ (8000adc <check_game_over+0x68>)
 8000aac:	480c      	ldr	r0, [pc, #48]	@ (8000ae0 <check_game_over+0x6c>)
 8000aae:	f000 fe38 	bl	8001722 <serial_output_string>
 8000ab2:	e008      	b.n	8000ac6 <check_game_over+0x52>

      	}
      	else {
      	  	timer_enable_set(tim_a, false);
 8000ab4:	7bfb      	ldrb	r3, [r7, #15]
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f001 f8d9 	bl	8001c70 <timer_enable_set>

      		serial_output_string((char *) "Game Over\n", &USART1_PORT);
 8000abe:	4907      	ldr	r1, [pc, #28]	@ (8000adc <check_game_over+0x68>)
 8000ac0:	4808      	ldr	r0, [pc, #32]	@ (8000ae4 <check_game_over+0x70>)
 8000ac2:	f000 fe2e 	bl	8001722 <serial_output_string>
      	}

        game->game_over = 1;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2201      	movs	r2, #1
 8000aca:	631a      	str	r2, [r3, #48]	@ 0x30
        return 1;
 8000acc:	2301      	movs	r3, #1
 8000ace:	e000      	b.n	8000ad2 <check_game_over+0x5e>
    }
    return 0;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000068 	.word	0x20000068
 8000ae0:	080050c0 	.word	0x080050c0
 8000ae4:	080050cc 	.word	0x080050cc

08000ae8 <handle_touch>:


// =================================== Callback Functions ===================================

// Each EXTI handler calls this with the corresponding pin number
void handle_touch(uint8_t pad) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b094      	sub	sp, #80	@ 0x50
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	71fb      	strb	r3, [r7, #7]
	if (touch_enabled){
 8000af2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b70 <handle_touch+0x88>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d037      	beq.n	8000b6a <handle_touch+0x82>
		// Map pin number to touchpad index
		static const uint8_t touch_pins[6] = {7, 6, 5, 4, 3, 13}; // PB7, PB6, PB5, PB4, PB3, PB13
		uint8_t touchpad_index = 255; // Invalid index
 8000afa:	23ff      	movs	r3, #255	@ 0xff
 8000afc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

		for (uint8_t i = 0; i < 6; i++) {
 8000b00:	2300      	movs	r3, #0
 8000b02:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8000b06:	e010      	b.n	8000b2a <handle_touch+0x42>
			if (pad == touch_pins[i]) {
 8000b08:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000b0c:	4a19      	ldr	r2, [pc, #100]	@ (8000b74 <handle_touch+0x8c>)
 8000b0e:	5cd3      	ldrb	r3, [r2, r3]
 8000b10:	79fa      	ldrb	r2, [r7, #7]
 8000b12:	429a      	cmp	r2, r3
 8000b14:	d104      	bne.n	8000b20 <handle_touch+0x38>
				touchpad_index = i;
 8000b16:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000b1a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
				break;
 8000b1e:	e008      	b.n	8000b32 <handle_touch+0x4a>
		for (uint8_t i = 0; i < 6; i++) {
 8000b20:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000b24:	3301      	adds	r3, #1
 8000b26:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8000b2a:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000b2e:	2b05      	cmp	r3, #5
 8000b30:	d9ea      	bls.n	8000b08 <handle_touch+0x20>
			}
		}

		// Check if this touchpad has already been used
		if (touchpad_index < 6 && touchpad_used[touchpad_index]) {
 8000b32:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000b36:	2b05      	cmp	r3, #5
 8000b38:	d814      	bhi.n	8000b64 <handle_touch+0x7c>
 8000b3a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000b3e:	4a0e      	ldr	r2, [pc, #56]	@ (8000b78 <handle_touch+0x90>)
 8000b40:	5cd3      	ldrb	r3, [r2, r3]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d00e      	beq.n	8000b64 <handle_touch+0x7c>
			char buffer[64];
			sprintf(buffer, "Touchpad %d already used - ignoring\r\n", touchpad_index);
 8000b46:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8000b4a:	f107 030c 	add.w	r3, r7, #12
 8000b4e:	490b      	ldr	r1, [pc, #44]	@ (8000b7c <handle_touch+0x94>)
 8000b50:	4618      	mov	r0, r3
 8000b52:	f003 fe6d 	bl	8004830 <siprintf>
			serial_output_string(buffer, &USART1_PORT);
 8000b56:	f107 030c 	add.w	r3, r7, #12
 8000b5a:	4909      	ldr	r1, [pc, #36]	@ (8000b80 <handle_touch+0x98>)
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f000 fde0 	bl	8001722 <serial_output_string>
 8000b62:	e002      	b.n	8000b6a <handle_touch+0x82>
			return; // Ignore this touch
		}

		// If we get here, the touchpad is valid and hasn't been used
		triggers.touchpad_pressed = pad;
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	4a07      	ldr	r2, [pc, #28]	@ (8000b84 <handle_touch+0x9c>)
 8000b68:	6013      	str	r3, [r2, #0]
	}
}
 8000b6a:	3750      	adds	r7, #80	@ 0x50
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000064 	.word	0x20000064
 8000b74:	08005244 	.word	0x08005244
 8000b78:	200002c0 	.word	0x200002c0
 8000b7c:	080050d8 	.word	0x080050d8
 8000b80:	20000068 	.word	0x20000068
 8000b84:	20000044 	.word	0x20000044

08000b88 <output_callback>:

// Transmit callback
void output_callback() {
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
	return;
 8000b8c:	bf00      	nop
}
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
	...

08000b98 <input_callback>:

// Receive callback
void input_callback(char *data, uint32_t len) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
	// Check for game start input
	char compare[] = "game start";
 8000ba2:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd8 <input_callback+0x40>)
 8000ba4:	f107 0308 	add.w	r3, r7, #8
 8000ba8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000baa:	c303      	stmia	r3!, {r0, r1}
 8000bac:	801a      	strh	r2, [r3, #0]
 8000bae:	3302      	adds	r3, #2
 8000bb0:	0c12      	lsrs	r2, r2, #16
 8000bb2:	701a      	strb	r2, [r3, #0]
	uint16_t test = strcmp(data, compare);
 8000bb4:	f107 0308 	add.w	r3, r7, #8
 8000bb8:	4619      	mov	r1, r3
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff fb08 	bl	80001d0 <strcmp>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	82fb      	strh	r3, [r7, #22]
	if (!test) {
 8000bc4:	8afb      	ldrh	r3, [r7, #22]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d102      	bne.n	8000bd0 <input_callback+0x38>
		start_game(&game);
 8000bca:	4804      	ldr	r0, [pc, #16]	@ (8000bdc <input_callback+0x44>)
 8000bcc:	f7ff feb8 	bl	8000940 <start_game>
	}
}
 8000bd0:	bf00      	nop
 8000bd2:	3718      	adds	r7, #24
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	08005100 	.word	0x08005100
 8000bdc:	2000000c 	.word	0x2000000c

08000be0 <SetServoAngle>:

void SetServoAngle(uint8_t servoId, uint16_t angle)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b094      	sub	sp, #80	@ 0x50
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	460a      	mov	r2, r1
 8000bea:	71fb      	strb	r3, [r7, #7]
 8000bec:	4613      	mov	r3, r2
 8000bee:	80bb      	strh	r3, [r7, #4]
  if (angle > 180) angle = 180;
 8000bf0:	88bb      	ldrh	r3, [r7, #4]
 8000bf2:	2bb4      	cmp	r3, #180	@ 0xb4
 8000bf4:	d901      	bls.n	8000bfa <SetServoAngle+0x1a>
 8000bf6:	23b4      	movs	r3, #180	@ 0xb4
 8000bf8:	80bb      	strh	r3, [r7, #4]
  uint32_t pulse = PWM_MIN_PULSE + (angle * (PWM_MAX_PULSE - PWM_MIN_PULSE) / 180);
 8000bfa:	88bb      	ldrh	r3, [r7, #4]
 8000bfc:	22c8      	movs	r2, #200	@ 0xc8
 8000bfe:	fb02 f303 	mul.w	r3, r2, r3
 8000c02:	4a26      	ldr	r2, [pc, #152]	@ (8000c9c <SetServoAngle+0xbc>)
 8000c04:	fb82 1203 	smull	r1, r2, r2, r3
 8000c08:	441a      	add	r2, r3
 8000c0a:	11d2      	asrs	r2, r2, #7
 8000c0c:	17db      	asrs	r3, r3, #31
 8000c0e:	1ad3      	subs	r3, r2, r3
 8000c10:	3332      	adds	r3, #50	@ 0x32
 8000c12:	64fb      	str	r3, [r7, #76]	@ 0x4c

  switch (servoId)
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	2b05      	cmp	r3, #5
 8000c1a:	d82d      	bhi.n	8000c78 <SetServoAngle+0x98>
 8000c1c:	a201      	add	r2, pc, #4	@ (adr r2, 8000c24 <SetServoAngle+0x44>)
 8000c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c22:	bf00      	nop
 8000c24:	08000c3d 	.word	0x08000c3d
 8000c28:	08000c47 	.word	0x08000c47
 8000c2c:	08000c51 	.word	0x08000c51
 8000c30:	08000c5b 	.word	0x08000c5b
 8000c34:	08000c65 	.word	0x08000c65
 8000c38:	08000c6f 	.word	0x08000c6f
  {
    case 1: __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse); break; // PE2
 8000c3c:	4b18      	ldr	r3, [pc, #96]	@ (8000ca0 <SetServoAngle+0xc0>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000c42:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c44:	e019      	b.n	8000c7a <SetServoAngle+0x9a>
    case 2: __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulse); break; // PE3
 8000c46:	4b16      	ldr	r3, [pc, #88]	@ (8000ca0 <SetServoAngle+0xc0>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000c4c:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c4e:	e014      	b.n	8000c7a <SetServoAngle+0x9a>
    case 3: __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse); break; // PA0
 8000c50:	4b14      	ldr	r3, [pc, #80]	@ (8000ca4 <SetServoAngle+0xc4>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000c56:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c58:	e00f      	b.n	8000c7a <SetServoAngle+0x9a>
    case 4: __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pulse); break; // PA1
 8000c5a:	4b12      	ldr	r3, [pc, #72]	@ (8000ca4 <SetServoAngle+0xc4>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000c60:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c62:	e00a      	b.n	8000c7a <SetServoAngle+0x9a>
    case 5: __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pulse); break; // PD12
 8000c64:	4b10      	ldr	r3, [pc, #64]	@ (8000ca8 <SetServoAngle+0xc8>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000c6a:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c6c:	e005      	b.n	8000c7a <SetServoAngle+0x9a>
    case 6: __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, pulse); break; // PD13
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca8 <SetServoAngle+0xc8>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000c74:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c76:	e000      	b.n	8000c7a <SetServoAngle+0x9a>
    default: break;
 8000c78:	bf00      	nop
  }

  // Log action
  char txBuffer[64];
  sprintf(txBuffer, "Setting Servo %d to %d°\r\n", servoId, angle);
 8000c7a:	79fa      	ldrb	r2, [r7, #7]
 8000c7c:	88bb      	ldrh	r3, [r7, #4]
 8000c7e:	f107 000c 	add.w	r0, r7, #12
 8000c82:	490a      	ldr	r1, [pc, #40]	@ (8000cac <SetServoAngle+0xcc>)
 8000c84:	f003 fdd4 	bl	8004830 <siprintf>
  serial_output_string(txBuffer, &USART1_PORT);
 8000c88:	f107 030c 	add.w	r3, r7, #12
 8000c8c:	4908      	ldr	r1, [pc, #32]	@ (8000cb0 <SetServoAngle+0xd0>)
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 fd47 	bl	8001722 <serial_output_string>
}
 8000c94:	bf00      	nop
 8000c96:	3750      	adds	r7, #80	@ 0x50
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	b60b60b7 	.word	0xb60b60b7
 8000ca0:	20000220 	.word	0x20000220
 8000ca4:	200001d4 	.word	0x200001d4
 8000ca8:	2000026c 	.word	0x2000026c
 8000cac:	0800510c 	.word	0x0800510c
 8000cb0:	20000068 	.word	0x20000068

08000cb4 <get_servo>:
  * @retval None
  */


void get_servo(uint8_t pin_index)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b096      	sub	sp, #88	@ 0x58
 8000cb8:	af02      	add	r7, sp, #8
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
  // Map EXTI line to touch sensor index (0-5)
  static const uint8_t touch_pins[6] = {7, 6, 5, 4, 3, 13}; // PB7, PB6, PB5, PB4, PB3, PB13
  static const uint8_t touch_ports[6] = {1, 1, 1, 1, 1, 1}; // GPIOB=1
  uint8_t touch_index = 255;
 8000cbe:	23ff      	movs	r3, #255	@ 0xff
 8000cc0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  for (uint8_t i = 0; i < 6; i++)
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8000cca:	e016      	b.n	8000cfa <get_servo+0x46>
  {
    if (pin_index == touch_pins[i] && touch_ports[i] == 1) // All on GPIOB
 8000ccc:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000cd0:	4a35      	ldr	r2, [pc, #212]	@ (8000da8 <get_servo+0xf4>)
 8000cd2:	5cd3      	ldrb	r3, [r2, r3]
 8000cd4:	79fa      	ldrb	r2, [r7, #7]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d10a      	bne.n	8000cf0 <get_servo+0x3c>
 8000cda:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000cde:	4a33      	ldr	r2, [pc, #204]	@ (8000dac <get_servo+0xf8>)
 8000ce0:	5cd3      	ldrb	r3, [r2, r3]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d104      	bne.n	8000cf0 <get_servo+0x3c>
    {
      touch_index = i;
 8000ce6:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000cea:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      break;
 8000cee:	e008      	b.n	8000d02 <get_servo+0x4e>
  for (uint8_t i = 0; i < 6; i++)
 8000cf0:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8000cfa:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000cfe:	2b05      	cmp	r3, #5
 8000d00:	d9e4      	bls.n	8000ccc <get_servo+0x18>
    }
  }

  if (touch_index < 6)
 8000d02:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000d06:	2b05      	cmp	r3, #5
 8000d08:	d84a      	bhi.n	8000da0 <get_servo+0xec>
  {
    uint8_t servoId = touch_to_servo_map[touch_index];
 8000d0a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000d0e:	4a28      	ldr	r2, [pc, #160]	@ (8000db0 <get_servo+0xfc>)
 8000d10:	5cd3      	ldrb	r3, [r2, r3]
 8000d12:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
    if (servoId >= 1 && servoId <= 6)
 8000d16:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d040      	beq.n	8000da0 <get_servo+0xec>
 8000d1e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000d22:	2b06      	cmp	r3, #6
 8000d24:	d83c      	bhi.n	8000da0 <get_servo+0xec>
    {
      // Toggle servo state
      uint8_t servoIndex = servoId - 1; // Array index (0-5)
 8000d26:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
      servo_states[servoIndex] = !servo_states[servoIndex];
 8000d30:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000d34:	4a1f      	ldr	r2, [pc, #124]	@ (8000db4 <get_servo+0x100>)
 8000d36:	5cd3      	ldrb	r3, [r2, r3]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	bf0c      	ite	eq
 8000d3c:	2301      	moveq	r3, #1
 8000d3e:	2300      	movne	r3, #0
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000d46:	4611      	mov	r1, r2
 8000d48:	4a1a      	ldr	r2, [pc, #104]	@ (8000db4 <get_servo+0x100>)
 8000d4a:	54d1      	strb	r1, [r2, r3]
      uint16_t angle = servo_states[servoIndex] ? 90 : 0;
 8000d4c:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000d50:	4a18      	ldr	r2, [pc, #96]	@ (8000db4 <get_servo+0x100>)
 8000d52:	5cd3      	ldrb	r3, [r2, r3]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <get_servo+0xa8>
 8000d58:	235a      	movs	r3, #90	@ 0x5a
 8000d5a:	e000      	b.n	8000d5e <get_servo+0xaa>
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      char txBuffer[64];
      sprintf(txBuffer, "Touch detected on PB%d, toggling Servo %d to %d°\r\n\n",
              touch_pins[touch_index], servoId, angle);
 8000d62:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000d66:	4a10      	ldr	r2, [pc, #64]	@ (8000da8 <get_servo+0xf4>)
 8000d68:	5cd3      	ldrb	r3, [r2, r3]
      sprintf(txBuffer, "Touch detected on PB%d, toggling Servo %d to %d°\r\n\n",
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8000d70:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8000d74:	f107 0008 	add.w	r0, r7, #8
 8000d78:	9300      	str	r3, [sp, #0]
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	460a      	mov	r2, r1
 8000d7e:	490e      	ldr	r1, [pc, #56]	@ (8000db8 <get_servo+0x104>)
 8000d80:	f003 fd56 	bl	8004830 <siprintf>
      serial_output_string(txBuffer, &USART1_PORT);
 8000d84:	f107 0308 	add.w	r3, r7, #8
 8000d88:	490c      	ldr	r1, [pc, #48]	@ (8000dbc <get_servo+0x108>)
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 fcc9 	bl	8001722 <serial_output_string>


      SetServoAngle(servoId, angle);
 8000d90:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8000d94:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000d98:	4611      	mov	r1, r2
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff ff20 	bl	8000be0 <SetServoAngle>
    }
  }
}
 8000da0:	bf00      	nop
 8000da2:	3750      	adds	r7, #80	@ 0x50
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	0800524c 	.word	0x0800524c
 8000dac:	08005254 	.word	0x08005254
 8000db0:	20000000 	.word	0x20000000
 8000db4:	200002b8 	.word	0x200002b8
 8000db8:	08005128 	.word	0x08005128
 8000dbc:	20000068 	.word	0x20000068

08000dc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b0a8      	sub	sp, #160	@ 0xa0
 8000dc4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc6:	f001 f925 	bl	8002014 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dca:	f000 f98d 	bl	80010e8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dce:	f000 fb01 	bl	80013d4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000dd2:	f000 f9cd 	bl	8001170 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000dd6:	f000 fa31 	bl	800123c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000dda:	f000 fa95 	bl	8001308 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  //HAL_UART_Receive_IT(&huart1, &rx_data, 1);

  // Initialize touch sensors
  GPIO *touch_pads_pb = init_port(B, INPUT, 3, 13); // PB3-PB7, PB13
 8000dde:	230d      	movs	r3, #13
 8000de0:	2203      	movs	r2, #3
 8000de2:	2100      	movs	r1, #0
 8000de4:	2001      	movs	r0, #1
 8000de6:	f7ff fab5 	bl	8000354 <init_port>
 8000dea:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
  // Enable interrupts for touch sensors
  enable_interupt(touch_pads_pb, 3, RISING_EDGE, 0, &handle_touch); // PB3
 8000dee:	4bab      	ldr	r3, [pc, #684]	@ (800109c <main+0x2dc>)
 8000df0:	9300      	str	r3, [sp, #0]
 8000df2:	2300      	movs	r3, #0
 8000df4:	2200      	movs	r2, #0
 8000df6:	2103      	movs	r1, #3
 8000df8:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8000dfc:	f7ff fc48 	bl	8000690 <enable_interupt>
  enable_interupt(touch_pads_pb, 4, RISING_EDGE, 0, &handle_touch); // PB4
 8000e00:	4ba6      	ldr	r3, [pc, #664]	@ (800109c <main+0x2dc>)
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	2300      	movs	r3, #0
 8000e06:	2200      	movs	r2, #0
 8000e08:	2104      	movs	r1, #4
 8000e0a:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8000e0e:	f7ff fc3f 	bl	8000690 <enable_interupt>
  enable_interupt(touch_pads_pb, 5, RISING_EDGE, 0, &handle_touch); // PB5
 8000e12:	4ba2      	ldr	r3, [pc, #648]	@ (800109c <main+0x2dc>)
 8000e14:	9300      	str	r3, [sp, #0]
 8000e16:	2300      	movs	r3, #0
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2105      	movs	r1, #5
 8000e1c:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8000e20:	f7ff fc36 	bl	8000690 <enable_interupt>
  enable_interupt(touch_pads_pb, 6, RISING_EDGE, 0, &handle_touch); // PB6
 8000e24:	4b9d      	ldr	r3, [pc, #628]	@ (800109c <main+0x2dc>)
 8000e26:	9300      	str	r3, [sp, #0]
 8000e28:	2300      	movs	r3, #0
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2106      	movs	r1, #6
 8000e2e:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8000e32:	f7ff fc2d 	bl	8000690 <enable_interupt>
  enable_interupt(touch_pads_pb, 7, RISING_EDGE, 0, &handle_touch); // PB7
 8000e36:	4b99      	ldr	r3, [pc, #612]	@ (800109c <main+0x2dc>)
 8000e38:	9300      	str	r3, [sp, #0]
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2107      	movs	r1, #7
 8000e40:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8000e44:	f7ff fc24 	bl	8000690 <enable_interupt>
  enable_interupt(touch_pads_pb, 13, RISING_EDGE, 0, &handle_touch); // PB13
 8000e48:	4b94      	ldr	r3, [pc, #592]	@ (800109c <main+0x2dc>)
 8000e4a:	9300      	str	r3, [sp, #0]
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	2200      	movs	r2, #0
 8000e50:	210d      	movs	r1, #13
 8000e52:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8000e56:	f7ff fc1b 	bl	8000690 <enable_interupt>

  // Initialize servos: Start PWM
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // Servo 1: PE2
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	4890      	ldr	r0, [pc, #576]	@ (80010a0 <main+0x2e0>)
 8000e5e:	f002 fe05 	bl	8003a6c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // Servo 2: PE3
 8000e62:	2104      	movs	r1, #4
 8000e64:	488e      	ldr	r0, [pc, #568]	@ (80010a0 <main+0x2e0>)
 8000e66:	f002 fe01 	bl	8003a6c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // Servo 3: PA0
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	488d      	ldr	r0, [pc, #564]	@ (80010a4 <main+0x2e4>)
 8000e6e:	f002 fdfd 	bl	8003a6c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // Servo 4: PA1
 8000e72:	2104      	movs	r1, #4
 8000e74:	488b      	ldr	r0, [pc, #556]	@ (80010a4 <main+0x2e4>)
 8000e76:	f002 fdf9 	bl	8003a6c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); // Servo 5: PD12
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	488a      	ldr	r0, [pc, #552]	@ (80010a8 <main+0x2e8>)
 8000e7e:	f002 fdf5 	bl	8003a6c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); // Servo 6: PD13
 8000e82:	2104      	movs	r1, #4
 8000e84:	4888      	ldr	r0, [pc, #544]	@ (80010a8 <main+0x2e8>)
 8000e86:	f002 fdf1 	bl	8003a6c <HAL_TIM_PWM_Start>

  // Serial Init
  serial_initialise(115200, &USART1_PORT, &output_callback, &input_callback);
 8000e8a:	4b88      	ldr	r3, [pc, #544]	@ (80010ac <main+0x2ec>)
 8000e8c:	4a88      	ldr	r2, [pc, #544]	@ (80010b0 <main+0x2f0>)
 8000e8e:	4989      	ldr	r1, [pc, #548]	@ (80010b4 <main+0x2f4>)
 8000e90:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 8000e94:	f000 fbc8 	bl	8001628 <serial_initialise>

  enable_interrupts(&USART1_PORT);
 8000e98:	4886      	ldr	r0, [pc, #536]	@ (80010b4 <main+0x2f4>)
 8000e9a:	f000 fc65 	bl	8001768 <enable_interrupts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Wait for game start
	  if (game.game_over) {
 8000e9e:	4b86      	ldr	r3, [pc, #536]	@ (80010b8 <main+0x2f8>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	f040 80f6 	bne.w	8001094 <main+0x2d4>
		  continue;
	  }

	  int check = check_game_over(&game);
 8000ea8:	4883      	ldr	r0, [pc, #524]	@ (80010b8 <main+0x2f8>)
 8000eaa:	f7ff fde3 	bl	8000a74 <check_game_over>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	  if (check == 1) {
 8000eb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	f000 80ed 	beq.w	8001098 <main+0x2d8>
		  continue;
	  }

	  if (triggers.touchpad_pressed != -1) {
 8000ebe:	4b7f      	ldr	r3, [pc, #508]	@ (80010bc <main+0x2fc>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec6:	f000 80e1 	beq.w	800108c <main+0x2cc>
		  triggers.servo_controlled = triggers.touchpad_pressed;
 8000eca:	4b7c      	ldr	r3, [pc, #496]	@ (80010bc <main+0x2fc>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a7b      	ldr	r2, [pc, #492]	@ (80010bc <main+0x2fc>)
 8000ed0:	60d3      	str	r3, [r2, #12]

	      transmit_game_state();
 8000ed2:	f7ff fc6b 	bl	80007ac <transmit_game_state>

	      char buffer[64];
	      sprintf(buffer, "touchpad %d chosen, door %d being controlled!\r\n", triggers.touchpad_pressed,  triggers.servo_controlled);
 8000ed6:	4b79      	ldr	r3, [pc, #484]	@ (80010bc <main+0x2fc>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	4b78      	ldr	r3, [pc, #480]	@ (80010bc <main+0x2fc>)
 8000edc:	68db      	ldr	r3, [r3, #12]
 8000ede:	4638      	mov	r0, r7
 8000ee0:	4977      	ldr	r1, [pc, #476]	@ (80010c0 <main+0x300>)
 8000ee2:	f003 fca5 	bl	8004830 <siprintf>
	      serial_output_string(buffer, &USART1_PORT);
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	4972      	ldr	r1, [pc, #456]	@ (80010b4 <main+0x2f4>)
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 fc19 	bl	8001722 <serial_output_string>

	      if (triggers.servo_controlled != -1 && triggers.servo_controlled != last_servo_selection) {
 8000ef0:	4b72      	ldr	r3, [pc, #456]	@ (80010bc <main+0x2fc>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef8:	f000 80c4 	beq.w	8001084 <main+0x2c4>
 8000efc:	4b6f      	ldr	r3, [pc, #444]	@ (80010bc <main+0x2fc>)
 8000efe:	68da      	ldr	r2, [r3, #12]
 8000f00:	4b70      	ldr	r3, [pc, #448]	@ (80010c4 <main+0x304>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	f000 80bd 	beq.w	8001084 <main+0x2c4>

	          // Get touchpad index for disabling
	          static const uint8_t touch_pins[6] = {7, 6, 5, 4, 3, 13};
	          uint8_t touchpad_index = 255;
 8000f0a:	23ff      	movs	r3, #255	@ 0xff
 8000f0c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	          for (uint8_t i = 0; i < 6; i++) {
 8000f10:	2300      	movs	r3, #0
 8000f12:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000f16:	e011      	b.n	8000f3c <main+0x17c>
	              if (triggers.touchpad_pressed == touch_pins[i]) {
 8000f18:	4b68      	ldr	r3, [pc, #416]	@ (80010bc <main+0x2fc>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 8000f20:	4969      	ldr	r1, [pc, #420]	@ (80010c8 <main+0x308>)
 8000f22:	5c8a      	ldrb	r2, [r1, r2]
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d104      	bne.n	8000f32 <main+0x172>
	                  touchpad_index = i;
 8000f28:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000f2c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	                  break;
 8000f30:	e008      	b.n	8000f44 <main+0x184>
	          for (uint8_t i = 0; i < 6; i++) {
 8000f32:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000f36:	3301      	adds	r3, #1
 8000f38:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000f3c:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000f40:	2b05      	cmp	r3, #5
 8000f42:	d9e9      	bls.n	8000f18 <main+0x158>
	              }
	          }

	    	  get_servo(triggers.touchpad_pressed);
 8000f44:	4b5d      	ldr	r3, [pc, #372]	@ (80010bc <main+0x2fc>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff feb2 	bl	8000cb4 <get_servo>

	          // Disable this touchpad after use
	          if (touchpad_index < 6) {
 8000f50:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000f54:	2b05      	cmp	r3, #5
 8000f56:	d804      	bhi.n	8000f62 <main+0x1a2>
	              disable_touchpad(touchpad_index);
 8000f58:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fca7 	bl	80008b0 <disable_touchpad>
	          }


	    	  // Run peek loop for short time
	    	  uint32_t peek_start = HAL_GetTick();
 8000f62:	f001 f8b1 	bl	80020c8 <HAL_GetTick>
 8000f66:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
	    	  bool committed_dig = false;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95


	    	  while (HAL_GetTick() - peek_start < 6000) {
 8000f70:	e018      	b.n	8000fa4 <main+0x1e4>
	    		  touch_enabled = false;
 8000f72:	4b56      	ldr	r3, [pc, #344]	@ (80010cc <main+0x30c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]

	        	  //door_manager_update(manager);

	        	  //float trimpot = map_range((float)analog_out[0], 0.0f, 4095.0f, 0.0f, 100.0f);

	        	  float trimpot = 0;
 8000f78:	f04f 0300 	mov.w	r3, #0
 8000f7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	        	  if (trimpot >= triggers.peek_threshold) {
 8000f80:	4b4e      	ldr	r3, [pc, #312]	@ (80010bc <main+0x2fc>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	ee07 3a90 	vmov	s15, r3
 8000f88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f8c:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8000f90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f98:	da00      	bge.n	8000f9c <main+0x1dc>
 8000f9a:	e003      	b.n	8000fa4 <main+0x1e4>
	        		  committed_dig = true;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
	        		  break;
 8000fa2:	e009      	b.n	8000fb8 <main+0x1f8>
	    	  while (HAL_GetTick() - peek_start < 6000) {
 8000fa4:	f001 f890 	bl	80020c8 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	f241 726f 	movw	r2, #5999	@ 0x176f
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d9dc      	bls.n	8000f72 <main+0x1b2>
	        	  }
	           }
	    	   // Now process peek or dig
	    	   if (committed_dig) {
 8000fb8:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d038      	beq.n	8001032 <main+0x272>
	    		   // Dig
	        	   bool success = false;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
	        	   for (int i = 0; i < 6; i++) {
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000fcc:	e011      	b.n	8000ff2 <main+0x232>
	        		   if (game.correct_servos[i] == triggers.servo_controlled) {
 8000fce:	4a3a      	ldr	r2, [pc, #232]	@ (80010b8 <main+0x2f8>)
 8000fd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000fd4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fd8:	4b38      	ldr	r3, [pc, #224]	@ (80010bc <main+0x2fc>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d103      	bne.n	8000fe8 <main+0x228>
	        		   success = true;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
	        	       break;
 8000fe6:	e008      	b.n	8000ffa <main+0x23a>
	        	   for (int i = 0; i < 6; i++) {
 8000fe8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000fec:	3301      	adds	r3, #1
 8000fee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000ff2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000ff6:	2b05      	cmp	r3, #5
 8000ff8:	dde9      	ble.n	8000fce <main+0x20e>
	        	        }
	        	    }

	        	    update_game_state(success ? 1 : 0, &game, &triggers);
 8000ffa:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 8000ffe:	4a2f      	ldr	r2, [pc, #188]	@ (80010bc <main+0x2fc>)
 8001000:	492d      	ldr	r1, [pc, #180]	@ (80010b8 <main+0x2f8>)
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fd04 	bl	8000a10 <update_game_state>
	        	    char idk[64];
	        	    sprintf(idk, "DIG %s at pad %d\r\n\n", success ? "SUCCESS" : "FAIL", triggers.servo_controlled);
 8001008:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <main+0x254>
 8001010:	4a2f      	ldr	r2, [pc, #188]	@ (80010d0 <main+0x310>)
 8001012:	e000      	b.n	8001016 <main+0x256>
 8001014:	4a2f      	ldr	r2, [pc, #188]	@ (80010d4 <main+0x314>)
 8001016:	4b29      	ldr	r3, [pc, #164]	@ (80010bc <main+0x2fc>)
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 800101e:	492e      	ldr	r1, [pc, #184]	@ (80010d8 <main+0x318>)
 8001020:	f003 fc06 	bl	8004830 <siprintf>
	        	    serial_output_string(idk, &USART1_PORT);
 8001024:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001028:	4922      	ldr	r1, [pc, #136]	@ (80010b4 <main+0x2f4>)
 800102a:	4618      	mov	r0, r3
 800102c:	f000 fb79 	bl	8001722 <serial_output_string>
 8001030:	e008      	b.n	8001044 <main+0x284>

	             } else {
	            	 game.peeks_used++;
 8001032:	4b21      	ldr	r3, [pc, #132]	@ (80010b8 <main+0x2f8>)
 8001034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001036:	3301      	adds	r3, #1
 8001038:	4a1f      	ldr	r2, [pc, #124]	@ (80010b8 <main+0x2f8>)
 800103a:	6293      	str	r3, [r2, #40]	@ 0x28
	           		 serial_output_string((char *) "PEEK ONLY\r\n\n", &USART1_PORT);
 800103c:	491d      	ldr	r1, [pc, #116]	@ (80010b4 <main+0x2f4>)
 800103e:	4827      	ldr	r0, [pc, #156]	@ (80010dc <main+0x31c>)
 8001040:	f000 fb6f 	bl	8001722 <serial_output_string>

	             }

	        	 triggers.touchpad_pressed = -1;
 8001044:	4b1d      	ldr	r3, [pc, #116]	@ (80010bc <main+0x2fc>)
 8001046:	f04f 32ff 	mov.w	r2, #4294967295
 800104a:	601a      	str	r2, [r3, #0]
	        	 last_servo_selection = triggers.servo_controlled;
 800104c:	4b1b      	ldr	r3, [pc, #108]	@ (80010bc <main+0x2fc>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	4a1c      	ldr	r2, [pc, #112]	@ (80010c4 <main+0x304>)
 8001052:	6013      	str	r3, [r2, #0]
	        	 triggers.servo_controlled = -1;
 8001054:	4b19      	ldr	r3, [pc, #100]	@ (80010bc <main+0x2fc>)
 8001056:	f04f 32ff 	mov.w	r2, #4294967295
 800105a:	60da      	str	r2, [r3, #12]

	        	 char yes[64];
	        	 sprintf(yes, "touchpad reset to %d, servo %d, previous servo %d\r\n\n", triggers.touchpad_pressed, triggers.servo_controlled, last_servo_selection);
 800105c:	4b17      	ldr	r3, [pc, #92]	@ (80010bc <main+0x2fc>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	4b16      	ldr	r3, [pc, #88]	@ (80010bc <main+0x2fc>)
 8001062:	68d9      	ldr	r1, [r3, #12]
 8001064:	4b17      	ldr	r3, [pc, #92]	@ (80010c4 <main+0x304>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	460b      	mov	r3, r1
 8001070:	491b      	ldr	r1, [pc, #108]	@ (80010e0 <main+0x320>)
 8001072:	f003 fbdd 	bl	8004830 <siprintf>
	        	 serial_output_string(yes, &USART1_PORT);
 8001076:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800107a:	490e      	ldr	r1, [pc, #56]	@ (80010b4 <main+0x2f4>)
 800107c:	4618      	mov	r0, r3
 800107e:	f000 fb50 	bl	8001722 <serial_output_string>
	      if (triggers.servo_controlled != -1 && triggers.servo_controlled != last_servo_selection) {
 8001082:	e003      	b.n	800108c <main+0x2cc>
	         } else {
	        	 serial_output_string((char *) "invalid choice", &USART1_PORT);
 8001084:	490b      	ldr	r1, [pc, #44]	@ (80010b4 <main+0x2f4>)
 8001086:	4817      	ldr	r0, [pc, #92]	@ (80010e4 <main+0x324>)
 8001088:	f000 fb4b 	bl	8001722 <serial_output_string>
	         }

	     }
	  touch_enabled = true;
 800108c:	4b0f      	ldr	r3, [pc, #60]	@ (80010cc <main+0x30c>)
 800108e:	2201      	movs	r2, #1
 8001090:	701a      	strb	r2, [r3, #0]
 8001092:	e704      	b.n	8000e9e <main+0xde>
		  continue;
 8001094:	bf00      	nop
 8001096:	e702      	b.n	8000e9e <main+0xde>
		  continue;
 8001098:	bf00      	nop
  {
 800109a:	e700      	b.n	8000e9e <main+0xde>
 800109c:	08000ae9 	.word	0x08000ae9
 80010a0:	20000220 	.word	0x20000220
 80010a4:	200001d4 	.word	0x200001d4
 80010a8:	2000026c 	.word	0x2000026c
 80010ac:	08000b99 	.word	0x08000b99
 80010b0:	08000b89 	.word	0x08000b89
 80010b4:	20000068 	.word	0x20000068
 80010b8:	2000000c 	.word	0x2000000c
 80010bc:	20000044 	.word	0x20000044
 80010c0:	08005160 	.word	0x08005160
 80010c4:	20000008 	.word	0x20000008
 80010c8:	0800525c 	.word	0x0800525c
 80010cc:	20000064 	.word	0x20000064
 80010d0:	08005190 	.word	0x08005190
 80010d4:	08005198 	.word	0x08005198
 80010d8:	080051a0 	.word	0x080051a0
 80010dc:	080051b4 	.word	0x080051b4
 80010e0:	080051c4 	.word	0x080051c4
 80010e4:	080051fc 	.word	0x080051fc

080010e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b090      	sub	sp, #64	@ 0x40
 80010ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ee:	f107 0318 	add.w	r3, r7, #24
 80010f2:	2228      	movs	r2, #40	@ 0x28
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f003 fbba 	bl	8004870 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
 8001108:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800110a:	2301      	movs	r3, #1
 800110c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800110e:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001112:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001114:	2300      	movs	r3, #0
 8001116:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001118:	2302      	movs	r3, #2
 800111a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800111c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001120:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001122:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001126:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001128:	f107 0318 	add.w	r3, r7, #24
 800112c:	4618      	mov	r0, r3
 800112e:	f001 fa37 	bl	80025a0 <HAL_RCC_OscConfig>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001138:	f000 f9f0 	bl	800151c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800113c:	230f      	movs	r3, #15
 800113e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001140:	2302      	movs	r3, #2
 8001142:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001144:	2300      	movs	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001148:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800114c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2101      	movs	r1, #1
 8001156:	4618      	mov	r0, r3
 8001158:	f002 fa60 	bl	800361c <HAL_RCC_ClockConfig>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001162:	f000 f9db 	bl	800151c <Error_Handler>
  }
}
 8001166:	bf00      	nop
 8001168:	3740      	adds	r7, #64	@ 0x40
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	@ 0x28
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001182:	463b      	mov	r3, r7
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
 8001190:	615a      	str	r2, [r3, #20]
 8001192:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001194:	4b28      	ldr	r3, [pc, #160]	@ (8001238 <MX_TIM2_Init+0xc8>)
 8001196:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800119a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 479; // 48 MHz / 480 = 100 kHz
 800119c:	4b26      	ldr	r3, [pc, #152]	@ (8001238 <MX_TIM2_Init+0xc8>)
 800119e:	f240 12df 	movw	r2, #479	@ 0x1df
 80011a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a4:	4b24      	ldr	r3, [pc, #144]	@ (8001238 <MX_TIM2_Init+0xc8>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = PWM_PERIOD_TICKS - 1; // 20 ms
 80011aa:	4b23      	ldr	r3, [pc, #140]	@ (8001238 <MX_TIM2_Init+0xc8>)
 80011ac:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80011b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b2:	4b21      	ldr	r3, [pc, #132]	@ (8001238 <MX_TIM2_Init+0xc8>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001238 <MX_TIM2_Init+0xc8>)
 80011ba:	2280      	movs	r2, #128	@ 0x80
 80011bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011be:	481e      	ldr	r0, [pc, #120]	@ (8001238 <MX_TIM2_Init+0xc8>)
 80011c0:	f002 fbfc 	bl	80039bc <HAL_TIM_PWM_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 80011ca:	f000 f9a7 	bl	800151c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d2:	2300      	movs	r3, #0
 80011d4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011d6:	f107 031c 	add.w	r3, r7, #28
 80011da:	4619      	mov	r1, r3
 80011dc:	4816      	ldr	r0, [pc, #88]	@ (8001238 <MX_TIM2_Init+0xc8>)
 80011de:	f003 f9f1 	bl	80045c4 <HAL_TIMEx_MasterConfigSynchronization>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80011e8:	f000 f998 	bl	800151c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ec:	2360      	movs	r3, #96	@ 0x60
 80011ee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011fc:	463b      	mov	r3, r7
 80011fe:	2200      	movs	r2, #0
 8001200:	4619      	mov	r1, r3
 8001202:	480d      	ldr	r0, [pc, #52]	@ (8001238 <MX_TIM2_Init+0xc8>)
 8001204:	f002 fd32 	bl	8003c6c <HAL_TIM_PWM_ConfigChannel>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800120e:	f000 f985 	bl	800151c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001212:	463b      	mov	r3, r7
 8001214:	2204      	movs	r2, #4
 8001216:	4619      	mov	r1, r3
 8001218:	4807      	ldr	r0, [pc, #28]	@ (8001238 <MX_TIM2_Init+0xc8>)
 800121a:	f002 fd27 	bl	8003c6c <HAL_TIM_PWM_ConfigChannel>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8001224:	f000 f97a 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001228:	4803      	ldr	r0, [pc, #12]	@ (8001238 <MX_TIM2_Init+0xc8>)
 800122a:	f000 fba7 	bl	800197c <HAL_TIM_MspPostInit>
}
 800122e:	bf00      	nop
 8001230:	3728      	adds	r7, #40	@ 0x28
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	200001d4 	.word	0x200001d4

0800123c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	@ 0x28
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_Init 0 */
  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001242:	f107 031c 	add.w	r3, r7, #28
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800124e:	463b      	mov	r3, r7
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
 800125c:	615a      	str	r2, [r3, #20]
 800125e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001260:	4b27      	ldr	r3, [pc, #156]	@ (8001300 <MX_TIM3_Init+0xc4>)
 8001262:	4a28      	ldr	r2, [pc, #160]	@ (8001304 <MX_TIM3_Init+0xc8>)
 8001264:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 479; // 48 MHz / 480 = 100 kHz
 8001266:	4b26      	ldr	r3, [pc, #152]	@ (8001300 <MX_TIM3_Init+0xc4>)
 8001268:	f240 12df 	movw	r2, #479	@ 0x1df
 800126c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126e:	4b24      	ldr	r3, [pc, #144]	@ (8001300 <MX_TIM3_Init+0xc4>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = PWM_PERIOD_TICKS - 1; // 20 ms
 8001274:	4b22      	ldr	r3, [pc, #136]	@ (8001300 <MX_TIM3_Init+0xc4>)
 8001276:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800127a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127c:	4b20      	ldr	r3, [pc, #128]	@ (8001300 <MX_TIM3_Init+0xc4>)
 800127e:	2200      	movs	r2, #0
 8001280:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001282:	4b1f      	ldr	r3, [pc, #124]	@ (8001300 <MX_TIM3_Init+0xc4>)
 8001284:	2280      	movs	r2, #128	@ 0x80
 8001286:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001288:	481d      	ldr	r0, [pc, #116]	@ (8001300 <MX_TIM3_Init+0xc4>)
 800128a:	f002 fb97 	bl	80039bc <HAL_TIM_PWM_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8001294:	f000 f942 	bl	800151c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129c:	2300      	movs	r3, #0
 800129e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012a0:	f107 031c 	add.w	r3, r7, #28
 80012a4:	4619      	mov	r1, r3
 80012a6:	4816      	ldr	r0, [pc, #88]	@ (8001300 <MX_TIM3_Init+0xc4>)
 80012a8:	f003 f98c 	bl	80045c4 <HAL_TIMEx_MasterConfigSynchronization>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80012b2:	f000 f933 	bl	800151c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012b6:	2360      	movs	r3, #96	@ 0x60
 80012b8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012c6:	463b      	mov	r3, r7
 80012c8:	2200      	movs	r2, #0
 80012ca:	4619      	mov	r1, r3
 80012cc:	480c      	ldr	r0, [pc, #48]	@ (8001300 <MX_TIM3_Init+0xc4>)
 80012ce:	f002 fccd 	bl	8003c6c <HAL_TIM_PWM_ConfigChannel>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 80012d8:	f000 f920 	bl	800151c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012dc:	463b      	mov	r3, r7
 80012de:	2204      	movs	r2, #4
 80012e0:	4619      	mov	r1, r3
 80012e2:	4807      	ldr	r0, [pc, #28]	@ (8001300 <MX_TIM3_Init+0xc4>)
 80012e4:	f002 fcc2 	bl	8003c6c <HAL_TIM_PWM_ConfigChannel>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 80012ee:	f000 f915 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012f2:	4803      	ldr	r0, [pc, #12]	@ (8001300 <MX_TIM3_Init+0xc4>)
 80012f4:	f000 fb42 	bl	800197c <HAL_TIM_MspPostInit>
}
 80012f8:	bf00      	nop
 80012fa:	3728      	adds	r7, #40	@ 0x28
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000220 	.word	0x20000220
 8001304:	40000400 	.word	0x40000400

08001308 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	@ 0x28
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_Init 0 */
  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800130e:	f107 031c 	add.w	r3, r7, #28
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800131a:	463b      	mov	r3, r7
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
 8001328:	615a      	str	r2, [r3, #20]
 800132a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */
  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800132c:	4b27      	ldr	r3, [pc, #156]	@ (80013cc <MX_TIM4_Init+0xc4>)
 800132e:	4a28      	ldr	r2, [pc, #160]	@ (80013d0 <MX_TIM4_Init+0xc8>)
 8001330:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 479; // 48 MHz / 480 = 100 kHz
 8001332:	4b26      	ldr	r3, [pc, #152]	@ (80013cc <MX_TIM4_Init+0xc4>)
 8001334:	f240 12df 	movw	r2, #479	@ 0x1df
 8001338:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800133a:	4b24      	ldr	r3, [pc, #144]	@ (80013cc <MX_TIM4_Init+0xc4>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = PWM_PERIOD_TICKS - 1; // 20 ms
 8001340:	4b22      	ldr	r3, [pc, #136]	@ (80013cc <MX_TIM4_Init+0xc4>)
 8001342:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001346:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001348:	4b20      	ldr	r3, [pc, #128]	@ (80013cc <MX_TIM4_Init+0xc4>)
 800134a:	2200      	movs	r2, #0
 800134c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800134e:	4b1f      	ldr	r3, [pc, #124]	@ (80013cc <MX_TIM4_Init+0xc4>)
 8001350:	2280      	movs	r2, #128	@ 0x80
 8001352:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001354:	481d      	ldr	r0, [pc, #116]	@ (80013cc <MX_TIM4_Init+0xc4>)
 8001356:	f002 fb31 	bl	80039bc <HAL_TIM_PWM_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8001360:	f000 f8dc 	bl	800151c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001364:	2300      	movs	r3, #0
 8001366:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800136c:	f107 031c 	add.w	r3, r7, #28
 8001370:	4619      	mov	r1, r3
 8001372:	4816      	ldr	r0, [pc, #88]	@ (80013cc <MX_TIM4_Init+0xc4>)
 8001374:	f003 f926 	bl	80045c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 800137e:	f000 f8cd 	bl	800151c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001382:	2360      	movs	r3, #96	@ 0x60
 8001384:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001392:	463b      	mov	r3, r7
 8001394:	2200      	movs	r2, #0
 8001396:	4619      	mov	r1, r3
 8001398:	480c      	ldr	r0, [pc, #48]	@ (80013cc <MX_TIM4_Init+0xc4>)
 800139a:	f002 fc67 	bl	8003c6c <HAL_TIM_PWM_ConfigChannel>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 80013a4:	f000 f8ba 	bl	800151c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013a8:	463b      	mov	r3, r7
 80013aa:	2204      	movs	r2, #4
 80013ac:	4619      	mov	r1, r3
 80013ae:	4807      	ldr	r0, [pc, #28]	@ (80013cc <MX_TIM4_Init+0xc4>)
 80013b0:	f002 fc5c 	bl	8003c6c <HAL_TIM_PWM_ConfigChannel>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 80013ba:	f000 f8af 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80013be:	4803      	ldr	r0, [pc, #12]	@ (80013cc <MX_TIM4_Init+0xc4>)
 80013c0:	f000 fadc 	bl	800197c <HAL_TIM_MspPostInit>
}
 80013c4:	bf00      	nop
 80013c6:	3728      	adds	r7, #40	@ 0x28
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	2000026c 	.word	0x2000026c
 80013d0:	40000800 	.word	0x40000800

080013d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	@ 0x28
 80013d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013da:	f107 0314 	add.w	r3, r7, #20
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]
 80013e8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ea:	4b47      	ldr	r3, [pc, #284]	@ (8001508 <MX_GPIO_Init+0x134>)
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	4a46      	ldr	r2, [pc, #280]	@ (8001508 <MX_GPIO_Init+0x134>)
 80013f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013f4:	6153      	str	r3, [r2, #20]
 80013f6:	4b44      	ldr	r3, [pc, #272]	@ (8001508 <MX_GPIO_Init+0x134>)
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001402:	4b41      	ldr	r3, [pc, #260]	@ (8001508 <MX_GPIO_Init+0x134>)
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	4a40      	ldr	r2, [pc, #256]	@ (8001508 <MX_GPIO_Init+0x134>)
 8001408:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800140c:	6153      	str	r3, [r2, #20]
 800140e:	4b3e      	ldr	r3, [pc, #248]	@ (8001508 <MX_GPIO_Init+0x134>)
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800141a:	4b3b      	ldr	r3, [pc, #236]	@ (8001508 <MX_GPIO_Init+0x134>)
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	4a3a      	ldr	r2, [pc, #232]	@ (8001508 <MX_GPIO_Init+0x134>)
 8001420:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001424:	6153      	str	r3, [r2, #20]
 8001426:	4b38      	ldr	r3, [pc, #224]	@ (8001508 <MX_GPIO_Init+0x134>)
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001432:	4b35      	ldr	r3, [pc, #212]	@ (8001508 <MX_GPIO_Init+0x134>)
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	4a34      	ldr	r2, [pc, #208]	@ (8001508 <MX_GPIO_Init+0x134>)
 8001438:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800143c:	6153      	str	r3, [r2, #20]
 800143e:	4b32      	ldr	r3, [pc, #200]	@ (8001508 <MX_GPIO_Init+0x134>)
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800144a:	4b2f      	ldr	r3, [pc, #188]	@ (8001508 <MX_GPIO_Init+0x134>)
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	4a2e      	ldr	r2, [pc, #184]	@ (8001508 <MX_GPIO_Init+0x134>)
 8001450:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001454:	6153      	str	r3, [r2, #20]
 8001456:	4b2c      	ldr	r3, [pc, #176]	@ (8001508 <MX_GPIO_Init+0x134>)
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	683b      	ldr	r3, [r7, #0]

  /* Configure PB3-PB7, PB13 for touch sensors */
  GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_13;
 8001462:	f242 03f8 	movw	r3, #8440	@ 0x20f8
 8001466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001468:	2300      	movs	r3, #0
 800146a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN; // Ensure low when not touched
 800146c:	2302      	movs	r3, #2
 800146e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	4619      	mov	r1, r3
 8001476:	4825      	ldr	r0, [pc, #148]	@ (800150c <MX_GPIO_Init+0x138>)
 8001478:	f000 ff18 	bl	80022ac <HAL_GPIO_Init>

  /* Configure PC4 (TX), PC5 (RX) for USART1 */
  GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 800147c:	2330      	movs	r3, #48	@ 0x30
 800147e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001488:	2303      	movs	r3, #3
 800148a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800148c:	2307      	movs	r3, #7
 800148e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	4619      	mov	r1, r3
 8001496:	481e      	ldr	r0, [pc, #120]	@ (8001510 <MX_GPIO_Init+0x13c>)
 8001498:	f000 ff08 	bl	80022ac <HAL_GPIO_Init>

  /* Configure PA0, PA1 for TIM2_CH1-2 (Servos 3-4) */
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800149c:	2303      	movs	r3, #3
 800149e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a0:	2302      	movs	r3, #2
 80014a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	2300      	movs	r3, #0
 80014aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014ac:	2301      	movs	r3, #1
 80014ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	4619      	mov	r1, r3
 80014b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014ba:	f000 fef7 	bl	80022ac <HAL_GPIO_Init>

  /* Configure PE2, PE3 for TIM3_CH1-2 (Servos 1-2) */
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 80014be:	230c      	movs	r3, #12
 80014c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	2300      	movs	r3, #0
 80014cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014ce:	2302      	movs	r3, #2
 80014d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	4619      	mov	r1, r3
 80014d8:	480e      	ldr	r0, [pc, #56]	@ (8001514 <MX_GPIO_Init+0x140>)
 80014da:	f000 fee7 	bl	80022ac <HAL_GPIO_Init>

  /* Configure PD12, PD13 for TIM4_CH1-2 (Servos 5-6) */
  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 80014de:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80014e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2300      	movs	r3, #0
 80014ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014f0:	2302      	movs	r3, #2
 80014f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	4619      	mov	r1, r3
 80014fa:	4807      	ldr	r0, [pc, #28]	@ (8001518 <MX_GPIO_Init+0x144>)
 80014fc:	f000 fed6 	bl	80022ac <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001500:	bf00      	nop
 8001502:	3728      	adds	r7, #40	@ 0x28
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40021000 	.word	0x40021000
 800150c:	48000400 	.word	0x48000400
 8001510:	48000800 	.word	0x48000800
 8001514:	48001000 	.word	0x48001000
 8001518:	48000c00 	.word	0x48000c00

0800151c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001520:	b672      	cpsid	i
}
 8001522:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001524:	bf00      	nop
 8001526:	e7fd      	b.n	8001524 <Error_Handler+0x8>

08001528 <__NVIC_EnableIRQ>:
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	2b00      	cmp	r3, #0
 8001538:	db0b      	blt.n	8001552 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	f003 021f 	and.w	r2, r3, #31
 8001540:	4907      	ldr	r1, [pc, #28]	@ (8001560 <__NVIC_EnableIRQ+0x38>)
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	095b      	lsrs	r3, r3, #5
 8001548:	2001      	movs	r0, #1
 800154a:	fa00 f202 	lsl.w	r2, r0, r2
 800154e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	e000e100 	.word	0xe000e100

08001564 <__NVIC_SetPriority>:
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	6039      	str	r1, [r7, #0]
 800156e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001574:	2b00      	cmp	r3, #0
 8001576:	db0a      	blt.n	800158e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	b2da      	uxtb	r2, r3
 800157c:	490c      	ldr	r1, [pc, #48]	@ (80015b0 <__NVIC_SetPriority+0x4c>)
 800157e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001582:	0112      	lsls	r2, r2, #4
 8001584:	b2d2      	uxtb	r2, r2
 8001586:	440b      	add	r3, r1
 8001588:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800158c:	e00a      	b.n	80015a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	b2da      	uxtb	r2, r3
 8001592:	4908      	ldr	r1, [pc, #32]	@ (80015b4 <__NVIC_SetPriority+0x50>)
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	f003 030f 	and.w	r3, r3, #15
 800159a:	3b04      	subs	r3, #4
 800159c:	0112      	lsls	r2, r2, #4
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	440b      	add	r3, r1
 80015a2:	761a      	strb	r2, [r3, #24]
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	e000e100 	.word	0xe000e100
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <calculate_brr>:
};



// Calculate baud rate register value based on system clock
static uint32_t calculate_brr(uint32_t baud_rate, uint32_t pclk_freq) {
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
    return (pclk_freq + (baud_rate / 2)) / baud_rate;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	085a      	lsrs	r2, r3, #1
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	441a      	add	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <get_pclk_freq>:

// Get the appropriate peripheral clock frequency
static uint32_t get_pclk_freq(uint8_t bus) {
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	71fb      	strb	r3, [r7, #7]
    // For STM32F303, we need to check the actual clock configuration
    uint32_t sysclk = 8000000; // Default HSI frequency
 80015e6:	4b0d      	ldr	r3, [pc, #52]	@ (800161c <get_pclk_freq+0x40>)
 80015e8:	60fb      	str	r3, [r7, #12]

    // Check if HSE or PLL is being used (simplified)
    if (RCC->CFGR & RCC_CFGR_SWS_PLL) {
 80015ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001620 <get_pclk_freq+0x44>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f003 0308 	and.w	r3, r3, #8
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d002      	beq.n	80015fc <get_pclk_freq+0x20>
        // PLL is active - typical configuration might be 72MHz
        sysclk = 48000000;
 80015f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001624 <get_pclk_freq+0x48>)
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	e007      	b.n	800160c <get_pclk_freq+0x30>
    } else if (RCC->CFGR & RCC_CFGR_SWS_HSE) {
 80015fc:	4b08      	ldr	r3, [pc, #32]	@ (8001620 <get_pclk_freq+0x44>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <get_pclk_freq+0x30>
        // HSE is active - typically 8MHz external crystal
        sysclk = 8000000;
 8001608:	4b04      	ldr	r3, [pc, #16]	@ (800161c <get_pclk_freq+0x40>)
 800160a:	60fb      	str	r3, [r7, #12]
    }

    return sysclk;
 800160c:	68fb      	ldr	r3, [r7, #12]
}
 800160e:	4618      	mov	r0, r3
 8001610:	3714      	adds	r7, #20
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	007a1200 	.word	0x007a1200
 8001620:	40021000 	.word	0x40021000
 8001624:	02dc6c00 	.word	0x02dc6c00

08001628 <serial_initialise>:
		0x00 						// default function pointer is NULL
};


// InitialiseSerial - Initialise the serial port // Input: baud_rate is from an enumerated set
void serial_initialise(uint32_t baud_rate, SerialPort *serial_port, void (*output_callback_function)(void), void (*input_callback_function)(char *, uint32_t)) {
 8001628:	b590      	push	{r4, r7, lr}
 800162a:	b087      	sub	sp, #28
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
 8001634:	603b      	str	r3, [r7, #0]

	serial_port->output_callback = output_callback_function;
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	625a      	str	r2, [r3, #36]	@ 0x24
	serial_port->receive_callback = input_callback_function;
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	629a      	str	r2, [r3, #40]	@ 0x28

	// Enable clock power, system configuration clock and GPIOC
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001642:	4b2a      	ldr	r3, [pc, #168]	@ (80016ec <serial_initialise+0xc4>)
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	4a29      	ldr	r2, [pc, #164]	@ (80016ec <serial_initialise+0xc4>)
 8001648:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800164c:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800164e:	4b27      	ldr	r3, [pc, #156]	@ (80016ec <serial_initialise+0xc4>)
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	4a26      	ldr	r2, [pc, #152]	@ (80016ec <serial_initialise+0xc4>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	6193      	str	r3, [r2, #24]

	// Enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	691a      	ldr	r2, [r3, #16]
 800165e:	4b23      	ldr	r3, [pc, #140]	@ (80016ec <serial_initialise+0xc4>)
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	4922      	ldr	r1, [pc, #136]	@ (80016ec <serial_initialise+0xc4>)
 8001664:	4313      	orrs	r3, r2
 8001666:	614b      	str	r3, [r1, #20]

	// Set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	68ba      	ldr	r2, [r7, #8]
 800166e:	6952      	ldr	r2, [r2, #20]
 8001670:	601a      	str	r2, [r3, #0]

	// Enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	68ba      	ldr	r2, [r7, #8]
 8001678:	6992      	ldr	r2, [r2, #24]
 800167a:	609a      	str	r2, [r3, #8]

	// Set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	69d9      	ldr	r1, [r3, #28]
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	6a1a      	ldr	r2, [r3, #32]
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	430a      	orrs	r2, r1
 800168c:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	6a19      	ldr	r1, [r3, #32]
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	430a      	orrs	r2, r1
 800169e:	625a      	str	r2, [r3, #36]	@ 0x24

	// Enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	68da      	ldr	r2, [r3, #12]
 80016a4:	4b11      	ldr	r3, [pc, #68]	@ (80016ec <serial_initialise+0xc4>)
 80016a6:	69db      	ldr	r3, [r3, #28]
 80016a8:	4910      	ldr	r1, [pc, #64]	@ (80016ec <serial_initialise+0xc4>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	689a      	ldr	r2, [r3, #8]
 80016b2:	4b0e      	ldr	r3, [pc, #56]	@ (80016ec <serial_initialise+0xc4>)
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	490d      	ldr	r1, [pc, #52]	@ (80016ec <serial_initialise+0xc4>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	618b      	str	r3, [r1, #24]


	// Get a pointer to the 16 bits of the BRR register that we want to change
    uint32_t pclk = get_pclk_freq(2);
 80016bc:	2002      	movs	r0, #2
 80016be:	f7ff ff8d 	bl	80015dc <get_pclk_freq>
 80016c2:	6178      	str	r0, [r7, #20]
    serial_port->UART->BRR = calculate_brr(baud_rate, pclk);
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	681c      	ldr	r4, [r3, #0]
 80016c8:	6979      	ldr	r1, [r7, #20]
 80016ca:	68f8      	ldr	r0, [r7, #12]
 80016cc:	f7ff ff74 	bl	80015b8 <calculate_brr>
 80016d0:	4603      	mov	r3, r0
 80016d2:	60e3      	str	r3, [r4, #12]

	//uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!

	// Enable serial port for tx and rx
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f042 020d 	orr.w	r2, r2, #13
 80016e2:	601a      	str	r2, [r3, #0]
}
 80016e4:	bf00      	nop
 80016e6:	371c      	adds	r7, #28
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd90      	pop	{r4, r7, pc}
 80016ec:	40021000 	.word	0x40021000

080016f0 <serial_output_char>:


// Output char using polling
void serial_output_char(char data, SerialPort *serial_port) {
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	6039      	str	r1, [r7, #0]
 80016fa:	71fb      	strb	r3, [r7, #7]

	while((serial_port->UART->ISR & USART_ISR_TXE) == 0){
 80016fc:	bf00      	nop
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	69db      	ldr	r3, [r3, #28]
 8001704:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0f8      	beq.n	80016fe <serial_output_char+0xe>
	}

	serial_port->UART->TDR = data;
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	79fa      	ldrb	r2, [r7, #7]
 8001712:	b292      	uxth	r2, r2
 8001714:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <serial_output_string>:


// Output string using polling
void serial_output_string(char *string, SerialPort *serial_port) {
 8001722:	b580      	push	{r7, lr}
 8001724:	b084      	sub	sp, #16
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
 800172a:	6039      	str	r1, [r7, #0]

	uint32_t count = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	60fb      	str	r3, [r7, #12]
	while(*string) {
 8001730:	e00b      	b.n	800174a <serial_output_string+0x28>
		serial_output_char(*string, serial_port);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	6839      	ldr	r1, [r7, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ffd9 	bl	80016f0 <serial_output_char>
		count++;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	3301      	adds	r3, #1
 8001742:	60fb      	str	r3, [r7, #12]
		string++;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3301      	adds	r3, #1
 8001748:	607b      	str	r3, [r7, #4]
	while(*string) {
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1ef      	bne.n	8001732 <serial_output_string+0x10>
	}

	// Callback function pointer call
	if (serial_port->output_callback != NULL)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001756:	2b00      	cmp	r3, #0
 8001758:	d002      	beq.n	8001760 <serial_output_string+0x3e>
		serial_port->output_callback();
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800175e:	4798      	blx	r3
}
 8001760:	bf00      	nop
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <enable_interrupts>:


// Enable interrupts needed for UART
void enable_interrupts(SerialPort *serial_port) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8001770:	b672      	cpsid	i
}
 8001772:	bf00      	nop
	__disable_irq();

	// Interrupt upon receiving data
	serial_port->UART->CR1 |= USART_CR1_RXNEIE_Msk;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f042 0220 	orr.w	r2, r2, #32
 8001782:	601a      	str	r2, [r3, #0]
	//serial_port->UART->CR1 |= USART_CR1_TXEIE_MSK;

	// Set priority and enable interrupts
	NVIC_SetPriority(USART1_IRQn, 1);
 8001784:	2101      	movs	r1, #1
 8001786:	2025      	movs	r0, #37	@ 0x25
 8001788:	f7ff feec 	bl	8001564 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn);
 800178c:	2025      	movs	r0, #37	@ 0x25
 800178e:	f7ff fecb 	bl	8001528 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001792:	b662      	cpsie	i
}
 8001794:	bf00      	nop

	__enable_irq();
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <USART1_IRQHandler>:


// Function executed when interrupt called
// Double buffer implementation
void USART1_IRQHandler() {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
	// Check and handle overrun or frame errors
	if ((USART1_PORT.UART->ISR & USART_ISR_FE_Msk) || (USART1_PORT.UART->ISR & USART_ISR_ORE_Msk)) {
 80017a6:	4b3c      	ldr	r3, [pc, #240]	@ (8001898 <USART1_IRQHandler+0xf8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	69db      	ldr	r3, [r3, #28]
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d106      	bne.n	80017c2 <USART1_IRQHandler+0x22>
 80017b4:	4b38      	ldr	r3, [pc, #224]	@ (8001898 <USART1_IRQHandler+0xf8>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	f003 0308 	and.w	r3, r3, #8
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d004      	beq.n	80017cc <USART1_IRQHandler+0x2c>

		USART1_PORT.UART->ICR = USART_ICR_ORECF | USART_ICR_FECF;
 80017c2:	4b35      	ldr	r3, [pc, #212]	@ (8001898 <USART1_IRQHandler+0xf8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	220a      	movs	r2, #10
 80017c8:	621a      	str	r2, [r3, #32]

		return;
 80017ca:	e061      	b.n	8001890 <USART1_IRQHandler+0xf0>
	}

	// Check and handle for full buffer
	if (COUNTER == BUFFER_SIZE) {
 80017cc:	4b33      	ldr	r3, [pc, #204]	@ (800189c <USART1_IRQHandler+0xfc>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b40      	cmp	r3, #64	@ 0x40
 80017d2:	d10d      	bne.n	80017f0 <USART1_IRQHandler+0x50>
		COUNTER = 0;
 80017d4:	4b31      	ldr	r3, [pc, #196]	@ (800189c <USART1_IRQHandler+0xfc>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]

		memset(DOUBLE_INPUT_BUFFER[ACTIVE_RX_BUFFER], '\0', BUFFER_SIZE);
 80017da:	4b31      	ldr	r3, [pc, #196]	@ (80018a0 <USART1_IRQHandler+0x100>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	019b      	lsls	r3, r3, #6
 80017e0:	4a30      	ldr	r2, [pc, #192]	@ (80018a4 <USART1_IRQHandler+0x104>)
 80017e2:	4413      	add	r3, r2
 80017e4:	2240      	movs	r2, #64	@ 0x40
 80017e6:	2100      	movs	r1, #0
 80017e8:	4618      	mov	r0, r3
 80017ea:	f003 f841 	bl	8004870 <memset>

		return;
 80017ee:	e04f      	b.n	8001890 <USART1_IRQHandler+0xf0>
	}

	if (USART1_PORT.UART->ISR & USART_ISR_RXNE_Msk) {
 80017f0:	4b29      	ldr	r3, [pc, #164]	@ (8001898 <USART1_IRQHandler+0xf8>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	f003 0320 	and.w	r3, r3, #32
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d048      	beq.n	8001890 <USART1_IRQHandler+0xf0>
		char received = USART1_PORT.UART->RDR;
 80017fe:	4b26      	ldr	r3, [pc, #152]	@ (8001898 <USART1_IRQHandler+0xf8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001804:	b29b      	uxth	r3, r3
 8001806:	71fb      	strb	r3, [r7, #7]

		// Store char
		DOUBLE_INPUT_BUFFER[ACTIVE_RX_BUFFER][COUNTER] = received;
 8001808:	4b25      	ldr	r3, [pc, #148]	@ (80018a0 <USART1_IRQHandler+0x100>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	461a      	mov	r2, r3
 800180e:	4b23      	ldr	r3, [pc, #140]	@ (800189c <USART1_IRQHandler+0xfc>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4924      	ldr	r1, [pc, #144]	@ (80018a4 <USART1_IRQHandler+0x104>)
 8001814:	0192      	lsls	r2, r2, #6
 8001816:	440a      	add	r2, r1
 8001818:	4413      	add	r3, r2
 800181a:	79fa      	ldrb	r2, [r7, #7]
 800181c:	701a      	strb	r2, [r3, #0]
		COUNTER++;
 800181e:	4b1f      	ldr	r3, [pc, #124]	@ (800189c <USART1_IRQHandler+0xfc>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	3301      	adds	r3, #1
 8001824:	4a1d      	ldr	r2, [pc, #116]	@ (800189c <USART1_IRQHandler+0xfc>)
 8001826:	6013      	str	r3, [r2, #0]

		// If termination character, NULL append and exit
		if (received == TERMINATE) {
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	2b0d      	cmp	r3, #13
 800182c:	d12f      	bne.n	800188e <USART1_IRQHandler+0xee>
			DOUBLE_INPUT_BUFFER[ACTIVE_RX_BUFFER][COUNTER - 1] = '\0';
 800182e:	4b1c      	ldr	r3, [pc, #112]	@ (80018a0 <USART1_IRQHandler+0x100>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	461a      	mov	r2, r3
 8001834:	4b19      	ldr	r3, [pc, #100]	@ (800189c <USART1_IRQHandler+0xfc>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	3b01      	subs	r3, #1
 800183a:	491a      	ldr	r1, [pc, #104]	@ (80018a4 <USART1_IRQHandler+0x104>)
 800183c:	0192      	lsls	r2, r2, #6
 800183e:	440a      	add	r2, r1
 8001840:	4413      	add	r3, r2
 8001842:	2200      	movs	r2, #0
 8001844:	701a      	strb	r2, [r3, #0]

			// Swap buffer
			uint8_t current = ACTIVE_RX_BUFFER;
 8001846:	4b16      	ldr	r3, [pc, #88]	@ (80018a0 <USART1_IRQHandler+0x100>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	71bb      	strb	r3, [r7, #6]
			ACTIVE_RX_BUFFER ^= 1;
 800184c:	4b14      	ldr	r3, [pc, #80]	@ (80018a0 <USART1_IRQHandler+0x100>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	f083 0301 	eor.w	r3, r3, #1
 8001854:	b2da      	uxtb	r2, r3
 8001856:	4b12      	ldr	r3, [pc, #72]	@ (80018a0 <USART1_IRQHandler+0x100>)
 8001858:	701a      	strb	r2, [r3, #0]

			if (USART1_PORT.receive_callback != NULL) {
 800185a:	4b0f      	ldr	r3, [pc, #60]	@ (8001898 <USART1_IRQHandler+0xf8>)
 800185c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800185e:	2b00      	cmp	r3, #0
 8001860:	d009      	beq.n	8001876 <USART1_IRQHandler+0xd6>
				// Callback function pointer call
				USART1_PORT.receive_callback(DOUBLE_INPUT_BUFFER[current], COUNTER);
 8001862:	4b0d      	ldr	r3, [pc, #52]	@ (8001898 <USART1_IRQHandler+0xf8>)
 8001864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001866:	79ba      	ldrb	r2, [r7, #6]
 8001868:	0192      	lsls	r2, r2, #6
 800186a:	490e      	ldr	r1, [pc, #56]	@ (80018a4 <USART1_IRQHandler+0x104>)
 800186c:	440a      	add	r2, r1
 800186e:	490b      	ldr	r1, [pc, #44]	@ (800189c <USART1_IRQHandler+0xfc>)
 8001870:	6809      	ldr	r1, [r1, #0]
 8001872:	4610      	mov	r0, r2
 8001874:	4798      	blx	r3
			}

			// Reset counter and buffer after input finish
			COUNTER = 0;
 8001876:	4b09      	ldr	r3, [pc, #36]	@ (800189c <USART1_IRQHandler+0xfc>)
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
			memset(DOUBLE_INPUT_BUFFER[current], '\0', BUFFER_SIZE);
 800187c:	79bb      	ldrb	r3, [r7, #6]
 800187e:	019b      	lsls	r3, r3, #6
 8001880:	4a08      	ldr	r2, [pc, #32]	@ (80018a4 <USART1_IRQHandler+0x104>)
 8001882:	4413      	add	r3, r2
 8001884:	2240      	movs	r2, #64	@ 0x40
 8001886:	2100      	movs	r1, #0
 8001888:	4618      	mov	r0, r3
 800188a:	f002 fff1 	bl	8004870 <memset>
		}
		return;
 800188e:	bf00      	nop
	}

}
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000068 	.word	0x20000068
 800189c:	20000348 	.word	0x20000348
 80018a0:	2000034c 	.word	0x2000034c
 80018a4:	200002c8 	.word	0x200002c8

080018a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ae:	4b0f      	ldr	r3, [pc, #60]	@ (80018ec <HAL_MspInit+0x44>)
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	4a0e      	ldr	r2, [pc, #56]	@ (80018ec <HAL_MspInit+0x44>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	6193      	str	r3, [r2, #24]
 80018ba:	4b0c      	ldr	r3, [pc, #48]	@ (80018ec <HAL_MspInit+0x44>)
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c6:	4b09      	ldr	r3, [pc, #36]	@ (80018ec <HAL_MspInit+0x44>)
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	4a08      	ldr	r2, [pc, #32]	@ (80018ec <HAL_MspInit+0x44>)
 80018cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018d0:	61d3      	str	r3, [r2, #28]
 80018d2:	4b06      	ldr	r3, [pc, #24]	@ (80018ec <HAL_MspInit+0x44>)
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018da:	603b      	str	r3, [r7, #0]
 80018dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	40021000 	.word	0x40021000

080018f0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b087      	sub	sp, #28
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001900:	d10c      	bne.n	800191c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001902:	4b1b      	ldr	r3, [pc, #108]	@ (8001970 <HAL_TIM_PWM_MspInit+0x80>)
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	4a1a      	ldr	r2, [pc, #104]	@ (8001970 <HAL_TIM_PWM_MspInit+0x80>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	61d3      	str	r3, [r2, #28]
 800190e:	4b18      	ldr	r3, [pc, #96]	@ (8001970 <HAL_TIM_PWM_MspInit+0x80>)
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800191a:	e022      	b.n	8001962 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a14      	ldr	r2, [pc, #80]	@ (8001974 <HAL_TIM_PWM_MspInit+0x84>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d10c      	bne.n	8001940 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001926:	4b12      	ldr	r3, [pc, #72]	@ (8001970 <HAL_TIM_PWM_MspInit+0x80>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	4a11      	ldr	r2, [pc, #68]	@ (8001970 <HAL_TIM_PWM_MspInit+0x80>)
 800192c:	f043 0302 	orr.w	r3, r3, #2
 8001930:	61d3      	str	r3, [r2, #28]
 8001932:	4b0f      	ldr	r3, [pc, #60]	@ (8001970 <HAL_TIM_PWM_MspInit+0x80>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	693b      	ldr	r3, [r7, #16]
}
 800193e:	e010      	b.n	8001962 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM4)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a0c      	ldr	r2, [pc, #48]	@ (8001978 <HAL_TIM_PWM_MspInit+0x88>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d10b      	bne.n	8001962 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800194a:	4b09      	ldr	r3, [pc, #36]	@ (8001970 <HAL_TIM_PWM_MspInit+0x80>)
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	4a08      	ldr	r2, [pc, #32]	@ (8001970 <HAL_TIM_PWM_MspInit+0x80>)
 8001950:	f043 0304 	orr.w	r3, r3, #4
 8001954:	61d3      	str	r3, [r2, #28]
 8001956:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <HAL_TIM_PWM_MspInit+0x80>)
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
}
 8001962:	bf00      	nop
 8001964:	371c      	adds	r7, #28
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	40021000 	.word	0x40021000
 8001974:	40000400 	.word	0x40000400
 8001978:	40000800 	.word	0x40000800

0800197c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b08a      	sub	sp, #40	@ 0x28
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001984:	f107 0314 	add.w	r3, r7, #20
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800199c:	d11d      	bne.n	80019da <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199e:	4b33      	ldr	r3, [pc, #204]	@ (8001a6c <HAL_TIM_MspPostInit+0xf0>)
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	4a32      	ldr	r2, [pc, #200]	@ (8001a6c <HAL_TIM_MspPostInit+0xf0>)
 80019a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019a8:	6153      	str	r3, [r2, #20]
 80019aa:	4b30      	ldr	r3, [pc, #192]	@ (8001a6c <HAL_TIM_MspPostInit+0xf0>)
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b2:	613b      	str	r3, [r7, #16]
 80019b4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019b6:	2303      	movs	r3, #3
 80019b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ba:	2302      	movs	r3, #2
 80019bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	2300      	movs	r3, #0
 80019c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019c6:	2301      	movs	r3, #1
 80019c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ca:	f107 0314 	add.w	r3, r7, #20
 80019ce:	4619      	mov	r1, r3
 80019d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019d4:	f000 fc6a 	bl	80022ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80019d8:	e043      	b.n	8001a62 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM3)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a24      	ldr	r2, [pc, #144]	@ (8001a70 <HAL_TIM_MspPostInit+0xf4>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d11c      	bne.n	8001a1e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019e4:	4b21      	ldr	r3, [pc, #132]	@ (8001a6c <HAL_TIM_MspPostInit+0xf0>)
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	4a20      	ldr	r2, [pc, #128]	@ (8001a6c <HAL_TIM_MspPostInit+0xf0>)
 80019ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019ee:	6153      	str	r3, [r2, #20]
 80019f0:	4b1e      	ldr	r3, [pc, #120]	@ (8001a6c <HAL_TIM_MspPostInit+0xf0>)
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019fc:	230c      	movs	r3, #12
 80019fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a00:	2302      	movs	r3, #2
 8001a02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	4619      	mov	r1, r3
 8001a16:	4817      	ldr	r0, [pc, #92]	@ (8001a74 <HAL_TIM_MspPostInit+0xf8>)
 8001a18:	f000 fc48 	bl	80022ac <HAL_GPIO_Init>
}
 8001a1c:	e021      	b.n	8001a62 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM4)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a15      	ldr	r2, [pc, #84]	@ (8001a78 <HAL_TIM_MspPostInit+0xfc>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d11c      	bne.n	8001a62 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a28:	4b10      	ldr	r3, [pc, #64]	@ (8001a6c <HAL_TIM_MspPostInit+0xf0>)
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	4a0f      	ldr	r2, [pc, #60]	@ (8001a6c <HAL_TIM_MspPostInit+0xf0>)
 8001a2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001a32:	6153      	str	r3, [r2, #20]
 8001a34:	4b0d      	ldr	r3, [pc, #52]	@ (8001a6c <HAL_TIM_MspPostInit+0xf0>)
 8001a36:	695b      	ldr	r3, [r3, #20]
 8001a38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001a40:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a46:	2302      	movs	r3, #2
 8001a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a52:	2302      	movs	r3, #2
 8001a54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a56:	f107 0314 	add.w	r3, r7, #20
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4807      	ldr	r0, [pc, #28]	@ (8001a7c <HAL_TIM_MspPostInit+0x100>)
 8001a5e:	f000 fc25 	bl	80022ac <HAL_GPIO_Init>
}
 8001a62:	bf00      	nop
 8001a64:	3728      	adds	r7, #40	@ 0x28
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	40000400 	.word	0x40000400
 8001a74:	48001000 	.word	0x48001000
 8001a78:	40000800 	.word	0x40000800
 8001a7c:	48000c00 	.word	0x48000c00

08001a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a84:	bf00      	nop
 8001a86:	e7fd      	b.n	8001a84 <NMI_Handler+0x4>

08001a88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a8c:	bf00      	nop
 8001a8e:	e7fd      	b.n	8001a8c <HardFault_Handler+0x4>

08001a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a94:	bf00      	nop
 8001a96:	e7fd      	b.n	8001a94 <MemManage_Handler+0x4>

08001a98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a9c:	bf00      	nop
 8001a9e:	e7fd      	b.n	8001a9c <BusFault_Handler+0x4>

08001aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aa4:	bf00      	nop
 8001aa6:	e7fd      	b.n	8001aa4 <UsageFault_Handler+0x4>

08001aa8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ad6:	f000 fae3 	bl	80020a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ae8:	4a14      	ldr	r2, [pc, #80]	@ (8001b3c <_sbrk+0x5c>)
 8001aea:	4b15      	ldr	r3, [pc, #84]	@ (8001b40 <_sbrk+0x60>)
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001af4:	4b13      	ldr	r3, [pc, #76]	@ (8001b44 <_sbrk+0x64>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d102      	bne.n	8001b02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001afc:	4b11      	ldr	r3, [pc, #68]	@ (8001b44 <_sbrk+0x64>)
 8001afe:	4a12      	ldr	r2, [pc, #72]	@ (8001b48 <_sbrk+0x68>)
 8001b00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b02:	4b10      	ldr	r3, [pc, #64]	@ (8001b44 <_sbrk+0x64>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d207      	bcs.n	8001b20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b10:	f002 fec6 	bl	80048a0 <__errno>
 8001b14:	4603      	mov	r3, r0
 8001b16:	220c      	movs	r2, #12
 8001b18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1e:	e009      	b.n	8001b34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b20:	4b08      	ldr	r3, [pc, #32]	@ (8001b44 <_sbrk+0x64>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b26:	4b07      	ldr	r3, [pc, #28]	@ (8001b44 <_sbrk+0x64>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	4a05      	ldr	r2, [pc, #20]	@ (8001b44 <_sbrk+0x64>)
 8001b30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b32:	68fb      	ldr	r3, [r7, #12]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3718      	adds	r7, #24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	2000a000 	.word	0x2000a000
 8001b40:	00000400 	.word	0x00000400
 8001b44:	20000350 	.word	0x20000350
 8001b48:	200004a0 	.word	0x200004a0

08001b4c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b50:	4b06      	ldr	r3, [pc, #24]	@ (8001b6c <SystemInit+0x20>)
 8001b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b56:	4a05      	ldr	r2, [pc, #20]	@ (8001b6c <SystemInit+0x20>)
 8001b58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <__NVIC_EnableIRQ>:
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	db0b      	blt.n	8001b9a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	f003 021f 	and.w	r2, r3, #31
 8001b88:	4907      	ldr	r1, [pc, #28]	@ (8001ba8 <__NVIC_EnableIRQ+0x38>)
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	095b      	lsrs	r3, r3, #5
 8001b90:	2001      	movs	r0, #1
 8001b92:	fa00 f202 	lsl.w	r2, r0, r2
 8001b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	e000e100 	.word	0xe000e100

08001bac <timer_init>:


// ===== INITIALISATION =====


void timer_init(void) {
 8001bac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001bb0:	b088      	sub	sp, #32
 8001bb2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001bb4:	b672      	cpsid	i
}
 8001bb6:	bf00      	nop
    __disable_irq();

    // enable all clocks
    for (uintmax_t i = 0; i < _TIMER_COUNT; i++) {
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	f04f 0300 	mov.w	r3, #0
 8001bc0:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001bc4:	e018      	b.n	8001bf8 <timer_init+0x4c>
        const TimerClockEnable en = CLOCK_ENABLES[i];
 8001bc6:	4927      	ldr	r1, [pc, #156]	@ (8001c64 <timer_init+0xb8>)
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	4413      	add	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	18ca      	adds	r2, r1, r3
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001bd8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *en.reg |=  en.mask;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6819      	ldr	r1, [r3, #0]
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	430a      	orrs	r2, r1
 8001be6:	601a      	str	r2, [r3, #0]
    for (uintmax_t i = 0; i < _TIMER_COUNT; i++) {
 8001be8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bec:	f112 0801 	adds.w	r8, r2, #1
 8001bf0:	f143 0900 	adc.w	r9, r3, #0
 8001bf4:	e9c7 8906 	strd	r8, r9, [r7, #24]
 8001bf8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bfc:	2a08      	cmp	r2, #8
 8001bfe:	f173 0300 	sbcs.w	r3, r3, #0
 8001c02:	d3e0      	bcc.n	8001bc6 <timer_init+0x1a>
    }

    // enable irq events
    for (uintmax_t i = 0; i < _TIMER_COUNT; i++) {
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	f04f 0300 	mov.w	r3, #0
 8001c0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001c10:	e01a      	b.n	8001c48 <timer_init+0x9c>
        RAWS[i]->DIER |= TIM_DIER_UIE;
 8001c12:	4a15      	ldr	r2, [pc, #84]	@ (8001c68 <timer_init+0xbc>)
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1a:	68da      	ldr	r2, [r3, #12]
 8001c1c:	4912      	ldr	r1, [pc, #72]	@ (8001c68 <timer_init+0xbc>)
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c24:	f042 0201 	orr.w	r2, r2, #1
 8001c28:	60da      	str	r2, [r3, #12]
        NVIC_EnableIRQ(IRQ_NUMS[i]);
 8001c2a:	4a10      	ldr	r2, [pc, #64]	@ (8001c6c <timer_init+0xc0>)
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	4413      	add	r3, r2
 8001c30:	f993 3000 	ldrsb.w	r3, [r3]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff ff9b 	bl	8001b70 <__NVIC_EnableIRQ>
    for (uintmax_t i = 0; i < _TIMER_COUNT; i++) {
 8001c3a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c3e:	1c54      	adds	r4, r2, #1
 8001c40:	f143 0500 	adc.w	r5, r3, #0
 8001c44:	e9c7 4504 	strd	r4, r5, [r7, #16]
 8001c48:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c4c:	2a08      	cmp	r2, #8
 8001c4e:	f173 0300 	sbcs.w	r3, r3, #0
 8001c52:	d3de      	bcc.n	8001c12 <timer_init+0x66>
  __ASM volatile ("cpsie i" : : : "memory");
 8001c54:	b662      	cpsie	i
}
 8001c56:	bf00      	nop
    }

    __enable_irq();
}
 8001c58:	bf00      	nop
 8001c5a:	3720      	adds	r7, #32
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c62:	bf00      	nop
 8001c64:	08005274 	.word	0x08005274
 8001c68:	20000098 	.word	0x20000098
 8001c6c:	200000b8 	.word	0x200000b8

08001c70 <timer_enable_set>:


// ===== CONTROL =====


void timer_enable_set(const TimerSel sel, const bool enable) {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	460a      	mov	r2, r1
 8001c7a:	71fb      	strb	r3, [r7, #7]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	71bb      	strb	r3, [r7, #6]
    TimerRaw *raw = RAWS[sel];
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	4a1b      	ldr	r2, [pc, #108]	@ (8001cf0 <timer_enable_set+0x80>)
 8001c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c88:	60fb      	str	r3, [r7, #12]

    // clear interrupt flag in case event was already waiting
    raw->SR &= ~TIM_SR_UIF;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	f023 0201 	bic.w	r2, r3, #1
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	611a      	str	r2, [r3, #16]

    timer_counter_reset(sel);
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f000 f8c9 	bl	8001e30 <timer_counter_reset>
    // HACK: After writes to `PSC`, `ARR`, and `CNT,
    // there seems to be a hardware bug that causes the `UIF` flag
    // to be set immediately.
    //
    // To avoid this, manually generate the interrupt, and then clear it
    raw->EGR |=  TIM_EGR_UG;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	f043 0201 	orr.w	r2, r3, #1
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	615a      	str	r2, [r3, #20]
    raw->SR  &= ~TIM_SR_UIF;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	f023 0201 	bic.w	r2, r3, #1
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	611a      	str	r2, [r3, #16]

    // Need to set `.enable` after the irq has fired
    // So if we are enabling, it dummy fires while `enable=false`,
    // which is ignored by the handler

    STATES[sel].enable = enable;
 8001cb6:	79fa      	ldrb	r2, [r7, #7]
 8001cb8:	490e      	ldr	r1, [pc, #56]	@ (8001cf4 <timer_enable_set+0x84>)
 8001cba:	4613      	mov	r3, r2
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	4413      	add	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	440b      	add	r3, r1
 8001cc4:	79ba      	ldrb	r2, [r7, #6]
 8001cc6:	701a      	strb	r2, [r3, #0]
    if (enable)
 8001cc8:	79bb      	ldrb	r3, [r7, #6]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d006      	beq.n	8001cdc <timer_enable_set+0x6c>
        raw->CR1 |=  TIM_CR1_CEN;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f043 0201 	orr.w	r2, r3, #1
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	601a      	str	r2, [r3, #0]
    else
        raw->CR1 &= ~TIM_CR1_CEN;

}
 8001cda:	e005      	b.n	8001ce8 <timer_enable_set+0x78>
        raw->CR1 &= ~TIM_CR1_CEN;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f023 0201 	bic.w	r2, r3, #1
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	601a      	str	r2, [r3, #0]
}
 8001ce8:	bf00      	nop
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	20000098 	.word	0x20000098
 8001cf4:	200000c0 	.word	0x200000c0

08001cf8 <timer_silent_set>:
    // detect if the bit is masked on
    const TimerClockEnable en = CLOCK_ENABLES[sel];
    return *en.reg & en.mask;
}

void timer_silent_set(const TimerSel sel, const bool silent) {
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	460a      	mov	r2, r1
 8001d02:	71fb      	strb	r3, [r7, #7]
 8001d04:	4613      	mov	r3, r2
 8001d06:	71bb      	strb	r3, [r7, #6]
    STATES[sel].silent = silent;
 8001d08:	79fa      	ldrb	r2, [r7, #7]
 8001d0a:	4907      	ldr	r1, [pc, #28]	@ (8001d28 <timer_silent_set+0x30>)
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	4413      	add	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	440b      	add	r3, r1
 8001d16:	3301      	adds	r3, #1
 8001d18:	79ba      	ldrb	r2, [r7, #6]
 8001d1a:	701a      	strb	r2, [r3, #0]
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	200000c0 	.word	0x200000c0

08001d2c <timer_period_set>:


// ===== PERIOD =====


void timer_period_set(const TimerSel sel, const TimerPeriod period) {
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	460a      	mov	r2, r1
 8001d36:	71fb      	strb	r3, [r7, #7]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	80bb      	strh	r3, [r7, #4]
    STATES[sel].period = period;
 8001d3c:	79fa      	ldrb	r2, [r7, #7]
 8001d3e:	490b      	ldr	r1, [pc, #44]	@ (8001d6c <timer_period_set+0x40>)
 8001d40:	4613      	mov	r3, r2
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	4413      	add	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	440b      	add	r3, r1
 8001d4a:	3304      	adds	r3, #4
 8001d4c:	88ba      	ldrh	r2, [r7, #4]
 8001d4e:	801a      	strh	r2, [r3, #0]
    TimerRaw *raw = RAWS[sel];
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	4a07      	ldr	r2, [pc, #28]	@ (8001d70 <timer_period_set+0x44>)
 8001d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d58:	60fb      	str	r3, [r7, #12]
    raw->ARR = period;
 8001d5a:	88ba      	ldrh	r2, [r7, #4]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001d60:	bf00      	nop
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	200000c0 	.word	0x200000c0
 8001d70:	20000098 	.word	0x20000098

08001d74 <timer_prescaler_set>:
TimerPeriod timer_period_get(const TimerSel sel) {
    return STATES[sel].period;
}


void timer_prescaler_set(const TimerSel sel, const TimerPrescale scale) {
 8001d74:	b4b0      	push	{r4, r5, r7}
 8001d76:	b087      	sub	sp, #28
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	460a      	mov	r2, r1
 8001d7e:	71fb      	strb	r3, [r7, #7]
 8001d80:	4613      	mov	r3, r2
 8001d82:	80bb      	strh	r3, [r7, #4]
    STATES[sel].prescale = scale;
 8001d84:	79fa      	ldrb	r2, [r7, #7]
 8001d86:	491b      	ldr	r1, [pc, #108]	@ (8001df4 <timer_prescaler_set+0x80>)
 8001d88:	4613      	mov	r3, r2
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	4413      	add	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	440b      	add	r3, r1
 8001d92:	3306      	adds	r3, #6
 8001d94:	88ba      	ldrh	r2, [r7, #4]
 8001d96:	801a      	strh	r2, [r3, #0]
    TimerRaw *const raw = RAWS[sel];
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	4a17      	ldr	r2, [pc, #92]	@ (8001df8 <timer_prescaler_set+0x84>)
 8001d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da0:	60fb      	str	r3, [r7, #12]
    raw->PSC = scale;
 8001da2:	88ba      	ldrh	r2, [r7, #4]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	629a      	str	r2, [r3, #40]	@ 0x28

    // changing the prescaler will not take effect until counter overflow
    // so set reload to `1` and counter to `0`, to immediately overflow
    // and apply changes
    const uint32_t arr = raw->ARR;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dac:	60bb      	str	r3, [r7, #8]
    raw->ARR = 1;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2201      	movs	r2, #1
 8001db2:	62da      	str	r2, [r3, #44]	@ 0x2c
    raw->CNT = 0;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2200      	movs	r2, #0
 8001db8:	625a      	str	r2, [r3, #36]	@ 0x24
    // spin to give time for changes to take affect
    for (uintmax_t i = 0; i < 8; i++)
 8001dba:	f04f 0200 	mov.w	r2, #0
 8001dbe:	f04f 0300 	mov.w	r3, #0
 8001dc2:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001dc6:	e007      	b.n	8001dd8 <timer_prescaler_set+0x64>
        asm("NOP");
 8001dc8:	bf00      	nop
    for (uintmax_t i = 0; i < 8; i++)
 8001dca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001dce:	1c54      	adds	r4, r2, #1
 8001dd0:	f143 0500 	adc.w	r5, r3, #0
 8001dd4:	e9c7 4504 	strd	r4, r5, [r7, #16]
 8001dd8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ddc:	2a08      	cmp	r2, #8
 8001dde:	f173 0300 	sbcs.w	r3, r3, #0
 8001de2:	d3f1      	bcc.n	8001dc8 <timer_prescaler_set+0x54>
    raw->ARR = arr;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001dea:	bf00      	nop
 8001dec:	371c      	adds	r7, #28
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bcb0      	pop	{r4, r5, r7}
 8001df2:	4770      	bx	lr
 8001df4:	200000c0 	.word	0x200000c0
 8001df8:	20000098 	.word	0x20000098

08001dfc <timer_recur_set>:
TimerPrescale timer_prescale_get(const TimerSel sel) {
    return STATES[sel].prescale;
}

// TODO: See TIM->CR1->OPM for oneshot mode
void timer_recur_set(const TimerSel sel, const bool recur) {
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	460a      	mov	r2, r1
 8001e06:	71fb      	strb	r3, [r7, #7]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	71bb      	strb	r3, [r7, #6]
    STATES[sel].recur = recur;
 8001e0c:	79fa      	ldrb	r2, [r7, #7]
 8001e0e:	4907      	ldr	r1, [pc, #28]	@ (8001e2c <timer_recur_set+0x30>)
 8001e10:	4613      	mov	r3, r2
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	4413      	add	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	3302      	adds	r3, #2
 8001e1c:	79ba      	ldrb	r2, [r7, #6]
 8001e1e:	701a      	strb	r2, [r3, #0]
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	200000c0 	.word	0x200000c0

08001e30 <timer_counter_reset>:
bool timer_recur_get(const TimerSel sel) {
    return STATES[sel].recur;
}


void timer_counter_reset(const TimerSel sel) {
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	71fb      	strb	r3, [r7, #7]
    RAWS[sel]->CNT = 0;
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	4a05      	ldr	r2, [pc, #20]	@ (8001e54 <timer_counter_reset+0x24>)
 8001e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e42:	2200      	movs	r2, #0
 8001e44:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	20000098 	.word	0x20000098

08001e58 <_timer_interrupt_handler>:

// ===== CALLBACKS =====


/// The callback handler called by our IRQ handlers
static void _timer_interrupt_handler(const TimerSel sel, GameState *game) {
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	6039      	str	r1, [r7, #0]
 8001e62:	71fb      	strb	r3, [r7, #7]
    TimerRaw *raw = RAWS[sel];
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	4a25      	ldr	r2, [pc, #148]	@ (8001efc <_timer_interrupt_handler+0xa4>)
 8001e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e6c:	617b      	str	r3, [r7, #20]

    // check it was definitely this timer that fired
    // since multiple timers can share one event
    if (!(raw->SR & TIM_SR_UIF))
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d03a      	beq.n	8001ef0 <_timer_interrupt_handler+0x98>
        return;

    // clear interrupt flag so it doesn't get called again
    raw->SR &= ~TIM_SR_UIF;
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	f023 0201 	bic.w	r2, r3, #1
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	611a      	str	r2, [r3, #16]

    TimerState *const state = &STATES[sel];
 8001e86:	79fa      	ldrb	r2, [r7, #7]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	4413      	add	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4a1b      	ldr	r2, [pc, #108]	@ (8001f00 <_timer_interrupt_handler+0xa8>)
 8001e92:	4413      	add	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]

    // We may get a dummy fire when enabling the timer, see `timer_enable_set()`
    if (!state->enable)
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	f083 0301 	eor.w	r3, r3, #1
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d127      	bne.n	8001ef4 <_timer_interrupt_handler+0x9c>
        return;

    // update silent for future firings
    const bool was_silent = state->silent;
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	785b      	ldrb	r3, [r3, #1]
 8001ea8:	73fb      	strb	r3, [r7, #15]
    state->silent = !state->recur;
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	789b      	ldrb	r3, [r3, #2]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	bf14      	ite	ne
 8001eb2:	2301      	movne	r3, #1
 8001eb4:	2300      	moveq	r3, #0
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	f083 0301 	eor.w	r3, r3, #1
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	705a      	strb	r2, [r3, #1]

    // call callback if enabled and has been set
    // do this after setting silent, so the callback
    // can un-silence itself
    if (!was_silent && state->callback != NULL)
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	f083 0301 	eor.w	r3, r3, #1
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d008      	beq.n	8001ee6 <_timer_interrupt_handler+0x8e>
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d004      	beq.n	8001ee6 <_timer_interrupt_handler+0x8e>
        state->callback(sel);
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	79fa      	ldrb	r2, [r7, #7]
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	4798      	blx	r3

    // TODO: should not be using this, use auto reload
    // reset counter
    timer_counter_reset(sel);
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff ffa1 	bl	8001e30 <timer_counter_reset>
 8001eee:	e002      	b.n	8001ef6 <_timer_interrupt_handler+0x9e>
        return;
 8001ef0:	bf00      	nop
 8001ef2:	e000      	b.n	8001ef6 <_timer_interrupt_handler+0x9e>
        return;
 8001ef4:	bf00      	nop
}
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20000098 	.word	0x20000098
 8001f00:	200000c0 	.word	0x200000c0

08001f04 <timer_callback_set>:

void timer_callback_set(const TimerSel sel, TimerCallbackFn *const callback) {
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	6039      	str	r1, [r7, #0]
 8001f0e:	71fb      	strb	r3, [r7, #7]
    STATES[sel].callback = callback;
 8001f10:	79fa      	ldrb	r2, [r7, #7]
 8001f12:	4907      	ldr	r1, [pc, #28]	@ (8001f30 <timer_callback_set+0x2c>)
 8001f14:	4613      	mov	r3, r2
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	4413      	add	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	3308      	adds	r3, #8
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	601a      	str	r2, [r3, #0]
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	200000c0 	.word	0x200000c0

08001f34 <TIM2_IRQHandler>:
// NOTE: IRQ handlers seem to be added by overriding the weakly linked
// default handler. Some are also shared for multiple events


// TIM2 global interrupt
void TIM2_IRQHandler(void) {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
    _timer_interrupt_handler(TIMER_SEL_2, &game);
 8001f38:	4902      	ldr	r1, [pc, #8]	@ (8001f44 <TIM2_IRQHandler+0x10>)
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	f7ff ff8c 	bl	8001e58 <_timer_interrupt_handler>
}
 8001f40:	bf00      	nop
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	2000000c 	.word	0x2000000c

08001f48 <TIM3_IRQHandler>:
// TIM3 global interrupt
void TIM3_IRQHandler(void) {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
    _timer_interrupt_handler(TIMER_SEL_3, &game);
 8001f4c:	4902      	ldr	r1, [pc, #8]	@ (8001f58 <TIM3_IRQHandler+0x10>)
 8001f4e:	2001      	movs	r0, #1
 8001f50:	f7ff ff82 	bl	8001e58 <_timer_interrupt_handler>
}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	2000000c 	.word	0x2000000c

08001f5c <TIM4_IRQHandler>:
// TIM4 global interrupt
void TIM4_IRQHandler(void) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
    _timer_interrupt_handler(TIMER_SEL_4, &game);
 8001f60:	4902      	ldr	r1, [pc, #8]	@ (8001f6c <TIM4_IRQHandler+0x10>)
 8001f62:	2002      	movs	r0, #2
 8001f64:	f7ff ff78 	bl	8001e58 <_timer_interrupt_handler>
}
 8001f68:	bf00      	nop
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	2000000c 	.word	0x2000000c

08001f70 <TIM7_IRQHandler>:
// TIM6 global and DAC12 underrun interrupts
void TIM6_DACUNDER_IRQHandler(void) {
    _timer_interrupt_handler(TIMER_SEL_6, &game);
}
// TIM7 global interrupt
void TIM7_IRQHandler(void) {
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
    _timer_interrupt_handler(TIMER_SEL_7, &game);
 8001f74:	4902      	ldr	r1, [pc, #8]	@ (8001f80 <TIM7_IRQHandler+0x10>)
 8001f76:	2004      	movs	r0, #4
 8001f78:	f7ff ff6e 	bl	8001e58 <_timer_interrupt_handler>
}
 8001f7c:	bf00      	nop
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	2000000c 	.word	0x2000000c

08001f84 <TIM1_BRK_TIM15_IRQHandler>:
// TIM1 Break/TIM15 global interrupts
void TIM1_BRK_TIM15_IRQHandler(void) {
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
    _timer_interrupt_handler(TIMER_SEL_15, &game);
 8001f88:	4902      	ldr	r1, [pc, #8]	@ (8001f94 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001f8a:	2005      	movs	r0, #5
 8001f8c:	f7ff ff64 	bl	8001e58 <_timer_interrupt_handler>
}
 8001f90:	bf00      	nop
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	2000000c 	.word	0x2000000c

08001f98 <TIM1_UP_TIM16_IRQHandler>:
// TIM1 Update/TIM16 global interrupts
void TIM1_UP_TIM16_IRQHandler(void) {
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
    _timer_interrupt_handler(TIMER_SEL_16, &game);
 8001f9c:	4902      	ldr	r1, [pc, #8]	@ (8001fa8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001f9e:	2006      	movs	r0, #6
 8001fa0:	f7ff ff5a 	bl	8001e58 <_timer_interrupt_handler>
}
 8001fa4:	bf00      	nop
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	2000000c 	.word	0x2000000c

08001fac <TIM1_TRG_COM_TIM17_IRQHandler>:
// TIM1 trigger and commutation/TIM17 interrupts
void TIM1_TRG_COM_TIM17_IRQHandler(void) {
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
    _timer_interrupt_handler(TIMER_SEL_17, &game);
 8001fb0:	4902      	ldr	r1, [pc, #8]	@ (8001fbc <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001fb2:	2007      	movs	r0, #7
 8001fb4:	f7ff ff50 	bl	8001e58 <_timer_interrupt_handler>
}
 8001fb8:	bf00      	nop
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	2000000c 	.word	0x2000000c

08001fc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001fc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ff8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fc4:	f7ff fdc2 	bl	8001b4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fc8:	480c      	ldr	r0, [pc, #48]	@ (8001ffc <LoopForever+0x6>)
  ldr r1, =_edata
 8001fca:	490d      	ldr	r1, [pc, #52]	@ (8002000 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fcc:	4a0d      	ldr	r2, [pc, #52]	@ (8002004 <LoopForever+0xe>)
  movs r3, #0
 8001fce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fd0:	e002      	b.n	8001fd8 <LoopCopyDataInit>

08001fd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fd6:	3304      	adds	r3, #4

08001fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fdc:	d3f9      	bcc.n	8001fd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fde:	4a0a      	ldr	r2, [pc, #40]	@ (8002008 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fe0:	4c0a      	ldr	r4, [pc, #40]	@ (800200c <LoopForever+0x16>)
  movs r3, #0
 8001fe2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fe4:	e001      	b.n	8001fea <LoopFillZerobss>

08001fe6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fe6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fe8:	3204      	adds	r2, #4

08001fea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fec:	d3fb      	bcc.n	8001fe6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fee:	f002 fc5d 	bl	80048ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ff2:	f7fe fee5 	bl	8000dc0 <main>

08001ff6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ff6:	e7fe      	b.n	8001ff6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ff8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001ffc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002000:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 8002004:	08005338 	.word	0x08005338
  ldr r2, =_sbss
 8002008:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 800200c:	200004a0 	.word	0x200004a0

08002010 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002010:	e7fe      	b.n	8002010 <ADC1_2_IRQHandler>
	...

08002014 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002018:	4b08      	ldr	r3, [pc, #32]	@ (800203c <HAL_Init+0x28>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a07      	ldr	r2, [pc, #28]	@ (800203c <HAL_Init+0x28>)
 800201e:	f043 0310 	orr.w	r3, r3, #16
 8002022:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002024:	2003      	movs	r0, #3
 8002026:	f000 f90d 	bl	8002244 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800202a:	200f      	movs	r0, #15
 800202c:	f000 f808 	bl	8002040 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002030:	f7ff fc3a 	bl	80018a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40022000 	.word	0x40022000

08002040 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002048:	4b12      	ldr	r3, [pc, #72]	@ (8002094 <HAL_InitTick+0x54>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4b12      	ldr	r3, [pc, #72]	@ (8002098 <HAL_InitTick+0x58>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	4619      	mov	r1, r3
 8002052:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002056:	fbb3 f3f1 	udiv	r3, r3, r1
 800205a:	fbb2 f3f3 	udiv	r3, r2, r3
 800205e:	4618      	mov	r0, r3
 8002060:	f000 f917 	bl	8002292 <HAL_SYSTICK_Config>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e00e      	b.n	800208c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b0f      	cmp	r3, #15
 8002072:	d80a      	bhi.n	800208a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002074:	2200      	movs	r2, #0
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	f04f 30ff 	mov.w	r0, #4294967295
 800207c:	f000 f8ed 	bl	800225a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002080:	4a06      	ldr	r2, [pc, #24]	@ (800209c <HAL_InitTick+0x5c>)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002086:	2300      	movs	r3, #0
 8002088:	e000      	b.n	800208c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
}
 800208c:	4618      	mov	r0, r3
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20000094 	.word	0x20000094
 8002098:	20000124 	.word	0x20000124
 800209c:	20000120 	.word	0x20000120

080020a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020a4:	4b06      	ldr	r3, [pc, #24]	@ (80020c0 <HAL_IncTick+0x20>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	461a      	mov	r2, r3
 80020aa:	4b06      	ldr	r3, [pc, #24]	@ (80020c4 <HAL_IncTick+0x24>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4413      	add	r3, r2
 80020b0:	4a04      	ldr	r2, [pc, #16]	@ (80020c4 <HAL_IncTick+0x24>)
 80020b2:	6013      	str	r3, [r2, #0]
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	20000124 	.word	0x20000124
 80020c4:	20000354 	.word	0x20000354

080020c8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return uwTick;  
 80020cc:	4b03      	ldr	r3, [pc, #12]	@ (80020dc <HAL_GetTick+0x14>)
 80020ce:	681b      	ldr	r3, [r3, #0]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	20000354 	.word	0x20000354

080020e0 <__NVIC_SetPriorityGrouping>:
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002124 <__NVIC_SetPriorityGrouping+0x44>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020fc:	4013      	ands	r3, r2
 80020fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002108:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800210c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002110:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002112:	4a04      	ldr	r2, [pc, #16]	@ (8002124 <__NVIC_SetPriorityGrouping+0x44>)
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	60d3      	str	r3, [r2, #12]
}
 8002118:	bf00      	nop
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <__NVIC_GetPriorityGrouping>:
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800212c:	4b04      	ldr	r3, [pc, #16]	@ (8002140 <__NVIC_GetPriorityGrouping+0x18>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	0a1b      	lsrs	r3, r3, #8
 8002132:	f003 0307 	and.w	r3, r3, #7
}
 8002136:	4618      	mov	r0, r3
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	e000ed00 	.word	0xe000ed00

08002144 <__NVIC_SetPriority>:
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	6039      	str	r1, [r7, #0]
 800214e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002154:	2b00      	cmp	r3, #0
 8002156:	db0a      	blt.n	800216e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	b2da      	uxtb	r2, r3
 800215c:	490c      	ldr	r1, [pc, #48]	@ (8002190 <__NVIC_SetPriority+0x4c>)
 800215e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002162:	0112      	lsls	r2, r2, #4
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	440b      	add	r3, r1
 8002168:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800216c:	e00a      	b.n	8002184 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	b2da      	uxtb	r2, r3
 8002172:	4908      	ldr	r1, [pc, #32]	@ (8002194 <__NVIC_SetPriority+0x50>)
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	3b04      	subs	r3, #4
 800217c:	0112      	lsls	r2, r2, #4
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	440b      	add	r3, r1
 8002182:	761a      	strb	r2, [r3, #24]
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	e000e100 	.word	0xe000e100
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002198:	b480      	push	{r7}
 800219a:	b089      	sub	sp, #36	@ 0x24
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	f1c3 0307 	rsb	r3, r3, #7
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	bf28      	it	cs
 80021b6:	2304      	movcs	r3, #4
 80021b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	3304      	adds	r3, #4
 80021be:	2b06      	cmp	r3, #6
 80021c0:	d902      	bls.n	80021c8 <NVIC_EncodePriority+0x30>
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	3b03      	subs	r3, #3
 80021c6:	e000      	b.n	80021ca <NVIC_EncodePriority+0x32>
 80021c8:	2300      	movs	r3, #0
 80021ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021cc:	f04f 32ff 	mov.w	r2, #4294967295
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43da      	mvns	r2, r3
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	401a      	ands	r2, r3
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021e0:	f04f 31ff 	mov.w	r1, #4294967295
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ea:	43d9      	mvns	r1, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f0:	4313      	orrs	r3, r2
         );
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3724      	adds	r7, #36	@ 0x24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
	...

08002200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3b01      	subs	r3, #1
 800220c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002210:	d301      	bcc.n	8002216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002212:	2301      	movs	r3, #1
 8002214:	e00f      	b.n	8002236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002216:	4a0a      	ldr	r2, [pc, #40]	@ (8002240 <SysTick_Config+0x40>)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3b01      	subs	r3, #1
 800221c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800221e:	210f      	movs	r1, #15
 8002220:	f04f 30ff 	mov.w	r0, #4294967295
 8002224:	f7ff ff8e 	bl	8002144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002228:	4b05      	ldr	r3, [pc, #20]	@ (8002240 <SysTick_Config+0x40>)
 800222a:	2200      	movs	r2, #0
 800222c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800222e:	4b04      	ldr	r3, [pc, #16]	@ (8002240 <SysTick_Config+0x40>)
 8002230:	2207      	movs	r2, #7
 8002232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	e000e010 	.word	0xe000e010

08002244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f7ff ff47 	bl	80020e0 <__NVIC_SetPriorityGrouping>
}
 8002252:	bf00      	nop
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b086      	sub	sp, #24
 800225e:	af00      	add	r7, sp, #0
 8002260:	4603      	mov	r3, r0
 8002262:	60b9      	str	r1, [r7, #8]
 8002264:	607a      	str	r2, [r7, #4]
 8002266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800226c:	f7ff ff5c 	bl	8002128 <__NVIC_GetPriorityGrouping>
 8002270:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	68b9      	ldr	r1, [r7, #8]
 8002276:	6978      	ldr	r0, [r7, #20]
 8002278:	f7ff ff8e 	bl	8002198 <NVIC_EncodePriority>
 800227c:	4602      	mov	r2, r0
 800227e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002282:	4611      	mov	r1, r2
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff ff5d 	bl	8002144 <__NVIC_SetPriority>
}
 800228a:	bf00      	nop
 800228c:	3718      	adds	r7, #24
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b082      	sub	sp, #8
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7ff ffb0 	bl	8002200 <SysTick_Config>
 80022a0:	4603      	mov	r3, r0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
	...

080022ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b087      	sub	sp, #28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ba:	e154      	b.n	8002566 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	2101      	movs	r1, #1
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	fa01 f303 	lsl.w	r3, r1, r3
 80022c8:	4013      	ands	r3, r2
 80022ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f000 8146 	beq.w	8002560 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 0303 	and.w	r3, r3, #3
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d005      	beq.n	80022ec <HAL_GPIO_Init+0x40>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 0303 	and.w	r3, r3, #3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d130      	bne.n	800234e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	2203      	movs	r2, #3
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	4013      	ands	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	68da      	ldr	r2, [r3, #12]
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	4313      	orrs	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002322:	2201      	movs	r2, #1
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43db      	mvns	r3, r3
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	4013      	ands	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	091b      	lsrs	r3, r3, #4
 8002338:	f003 0201 	and.w	r2, r3, #1
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	4313      	orrs	r3, r2
 8002346:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	2b03      	cmp	r3, #3
 8002358:	d017      	beq.n	800238a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	2203      	movs	r2, #3
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43db      	mvns	r3, r3
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	4013      	ands	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	689a      	ldr	r2, [r3, #8]
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 0303 	and.w	r3, r3, #3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d123      	bne.n	80023de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	08da      	lsrs	r2, r3, #3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3208      	adds	r2, #8
 800239e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	220f      	movs	r2, #15
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43db      	mvns	r3, r3
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	4013      	ands	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	691a      	ldr	r2, [r3, #16]
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	08da      	lsrs	r2, r3, #3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3208      	adds	r2, #8
 80023d8:	6939      	ldr	r1, [r7, #16]
 80023da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	2203      	movs	r2, #3
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43db      	mvns	r3, r3
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	4013      	ands	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f003 0203 	and.w	r2, r3, #3
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	4313      	orrs	r3, r2
 800240a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 80a0 	beq.w	8002560 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002420:	4b58      	ldr	r3, [pc, #352]	@ (8002584 <HAL_GPIO_Init+0x2d8>)
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	4a57      	ldr	r2, [pc, #348]	@ (8002584 <HAL_GPIO_Init+0x2d8>)
 8002426:	f043 0301 	orr.w	r3, r3, #1
 800242a:	6193      	str	r3, [r2, #24]
 800242c:	4b55      	ldr	r3, [pc, #340]	@ (8002584 <HAL_GPIO_Init+0x2d8>)
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	60bb      	str	r3, [r7, #8]
 8002436:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002438:	4a53      	ldr	r2, [pc, #332]	@ (8002588 <HAL_GPIO_Init+0x2dc>)
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	089b      	lsrs	r3, r3, #2
 800243e:	3302      	adds	r3, #2
 8002440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002444:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	220f      	movs	r2, #15
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4013      	ands	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002462:	d019      	beq.n	8002498 <HAL_GPIO_Init+0x1ec>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a49      	ldr	r2, [pc, #292]	@ (800258c <HAL_GPIO_Init+0x2e0>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d013      	beq.n	8002494 <HAL_GPIO_Init+0x1e8>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a48      	ldr	r2, [pc, #288]	@ (8002590 <HAL_GPIO_Init+0x2e4>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d00d      	beq.n	8002490 <HAL_GPIO_Init+0x1e4>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a47      	ldr	r2, [pc, #284]	@ (8002594 <HAL_GPIO_Init+0x2e8>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d007      	beq.n	800248c <HAL_GPIO_Init+0x1e0>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a46      	ldr	r2, [pc, #280]	@ (8002598 <HAL_GPIO_Init+0x2ec>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d101      	bne.n	8002488 <HAL_GPIO_Init+0x1dc>
 8002484:	2304      	movs	r3, #4
 8002486:	e008      	b.n	800249a <HAL_GPIO_Init+0x1ee>
 8002488:	2305      	movs	r3, #5
 800248a:	e006      	b.n	800249a <HAL_GPIO_Init+0x1ee>
 800248c:	2303      	movs	r3, #3
 800248e:	e004      	b.n	800249a <HAL_GPIO_Init+0x1ee>
 8002490:	2302      	movs	r3, #2
 8002492:	e002      	b.n	800249a <HAL_GPIO_Init+0x1ee>
 8002494:	2301      	movs	r3, #1
 8002496:	e000      	b.n	800249a <HAL_GPIO_Init+0x1ee>
 8002498:	2300      	movs	r3, #0
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	f002 0203 	and.w	r2, r2, #3
 80024a0:	0092      	lsls	r2, r2, #2
 80024a2:	4093      	lsls	r3, r2
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024aa:	4937      	ldr	r1, [pc, #220]	@ (8002588 <HAL_GPIO_Init+0x2dc>)
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	089b      	lsrs	r3, r3, #2
 80024b0:	3302      	adds	r3, #2
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024b8:	4b38      	ldr	r3, [pc, #224]	@ (800259c <HAL_GPIO_Init+0x2f0>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	43db      	mvns	r3, r3
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4013      	ands	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4313      	orrs	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80024dc:	4a2f      	ldr	r2, [pc, #188]	@ (800259c <HAL_GPIO_Init+0x2f0>)
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024e2:	4b2e      	ldr	r3, [pc, #184]	@ (800259c <HAL_GPIO_Init+0x2f0>)
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	43db      	mvns	r3, r3
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	4013      	ands	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4313      	orrs	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002506:	4a25      	ldr	r2, [pc, #148]	@ (800259c <HAL_GPIO_Init+0x2f0>)
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800250c:	4b23      	ldr	r3, [pc, #140]	@ (800259c <HAL_GPIO_Init+0x2f0>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	43db      	mvns	r3, r3
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	4013      	ands	r3, r2
 800251a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	4313      	orrs	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002530:	4a1a      	ldr	r2, [pc, #104]	@ (800259c <HAL_GPIO_Init+0x2f0>)
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002536:	4b19      	ldr	r3, [pc, #100]	@ (800259c <HAL_GPIO_Init+0x2f0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	43db      	mvns	r3, r3
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	4013      	ands	r3, r2
 8002544:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	4313      	orrs	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800255a:	4a10      	ldr	r2, [pc, #64]	@ (800259c <HAL_GPIO_Init+0x2f0>)
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	3301      	adds	r3, #1
 8002564:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	fa22 f303 	lsr.w	r3, r2, r3
 8002570:	2b00      	cmp	r3, #0
 8002572:	f47f aea3 	bne.w	80022bc <HAL_GPIO_Init+0x10>
  }
}
 8002576:	bf00      	nop
 8002578:	bf00      	nop
 800257a:	371c      	adds	r7, #28
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	40021000 	.word	0x40021000
 8002588:	40010000 	.word	0x40010000
 800258c:	48000400 	.word	0x48000400
 8002590:	48000800 	.word	0x48000800
 8002594:	48000c00 	.word	0x48000c00
 8002598:	48001000 	.word	0x48001000
 800259c:	40010400 	.word	0x40010400

080025a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025b0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d102      	bne.n	80025c6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	f001 b823 	b.w	800360c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f000 817d 	beq.w	80028d6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80025dc:	4bbc      	ldr	r3, [pc, #752]	@ (80028d0 <HAL_RCC_OscConfig+0x330>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f003 030c 	and.w	r3, r3, #12
 80025e4:	2b04      	cmp	r3, #4
 80025e6:	d00c      	beq.n	8002602 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025e8:	4bb9      	ldr	r3, [pc, #740]	@ (80028d0 <HAL_RCC_OscConfig+0x330>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 030c 	and.w	r3, r3, #12
 80025f0:	2b08      	cmp	r3, #8
 80025f2:	d15c      	bne.n	80026ae <HAL_RCC_OscConfig+0x10e>
 80025f4:	4bb6      	ldr	r3, [pc, #728]	@ (80028d0 <HAL_RCC_OscConfig+0x330>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002600:	d155      	bne.n	80026ae <HAL_RCC_OscConfig+0x10e>
 8002602:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002606:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800260e:	fa93 f3a3 	rbit	r3, r3
 8002612:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002616:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800261a:	fab3 f383 	clz	r3, r3
 800261e:	b2db      	uxtb	r3, r3
 8002620:	095b      	lsrs	r3, r3, #5
 8002622:	b2db      	uxtb	r3, r3
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b01      	cmp	r3, #1
 800262c:	d102      	bne.n	8002634 <HAL_RCC_OscConfig+0x94>
 800262e:	4ba8      	ldr	r3, [pc, #672]	@ (80028d0 <HAL_RCC_OscConfig+0x330>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	e015      	b.n	8002660 <HAL_RCC_OscConfig+0xc0>
 8002634:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002638:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002640:	fa93 f3a3 	rbit	r3, r3
 8002644:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002648:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800264c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002650:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002654:	fa93 f3a3 	rbit	r3, r3
 8002658:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800265c:	4b9c      	ldr	r3, [pc, #624]	@ (80028d0 <HAL_RCC_OscConfig+0x330>)
 800265e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002660:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002664:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002668:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800266c:	fa92 f2a2 	rbit	r2, r2
 8002670:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002674:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002678:	fab2 f282 	clz	r2, r2
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	f042 0220 	orr.w	r2, r2, #32
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	f002 021f 	and.w	r2, r2, #31
 8002688:	2101      	movs	r1, #1
 800268a:	fa01 f202 	lsl.w	r2, r1, r2
 800268e:	4013      	ands	r3, r2
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 811f 	beq.w	80028d4 <HAL_RCC_OscConfig+0x334>
 8002696:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800269a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f040 8116 	bne.w	80028d4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	f000 bfaf 	b.w	800360c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026be:	d106      	bne.n	80026ce <HAL_RCC_OscConfig+0x12e>
 80026c0:	4b83      	ldr	r3, [pc, #524]	@ (80028d0 <HAL_RCC_OscConfig+0x330>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a82      	ldr	r2, [pc, #520]	@ (80028d0 <HAL_RCC_OscConfig+0x330>)
 80026c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026ca:	6013      	str	r3, [r2, #0]
 80026cc:	e036      	b.n	800273c <HAL_RCC_OscConfig+0x19c>
 80026ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10c      	bne.n	80026f8 <HAL_RCC_OscConfig+0x158>
 80026de:	4b7c      	ldr	r3, [pc, #496]	@ (80028d0 <HAL_RCC_OscConfig+0x330>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a7b      	ldr	r2, [pc, #492]	@ (80028d0 <HAL_RCC_OscConfig+0x330>)
 80026e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026e8:	6013      	str	r3, [r2, #0]
 80026ea:	4b79      	ldr	r3, [pc, #484]	@ (80028d0 <HAL_RCC_OscConfig+0x330>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a78      	ldr	r2, [pc, #480]	@ (80028d0 <HAL_RCC_OscConfig+0x330>)
 80026f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	e021      	b.n	800273c <HAL_RCC_OscConfig+0x19c>
 80026f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002708:	d10c      	bne.n	8002724 <HAL_RCC_OscConfig+0x184>
 800270a:	4b71      	ldr	r3, [pc, #452]	@ (80028d0 <HAL_RCC_OscConfig+0x330>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a70      	ldr	r2, [pc, #448]	@ (80028d0 <HAL_RCC_OscConfig+0x330>)
 8002710:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	4b6e      	ldr	r3, [pc, #440]	@ (80028d0 <HAL_RCC_OscConfig+0x330>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a6d      	ldr	r2, [pc, #436]	@ (80028d0 <HAL_RCC_OscConfig+0x330>)
 800271c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002720:	6013      	str	r3, [r2, #0]
 8002722:	e00b      	b.n	800273c <HAL_RCC_OscConfig+0x19c>
 8002724:	4b6a      	ldr	r3, [pc, #424]	@ (80028d0 <HAL_RCC_OscConfig+0x330>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a69      	ldr	r2, [pc, #420]	@ (80028d0 <HAL_RCC_OscConfig+0x330>)
 800272a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800272e:	6013      	str	r3, [r2, #0]
 8002730:	4b67      	ldr	r3, [pc, #412]	@ (80028d0 <HAL_RCC_OscConfig+0x330>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a66      	ldr	r2, [pc, #408]	@ (80028d0 <HAL_RCC_OscConfig+0x330>)
 8002736:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800273a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800273c:	4b64      	ldr	r3, [pc, #400]	@ (80028d0 <HAL_RCC_OscConfig+0x330>)
 800273e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002740:	f023 020f 	bic.w	r2, r3, #15
 8002744:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002748:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	495f      	ldr	r1, [pc, #380]	@ (80028d0 <HAL_RCC_OscConfig+0x330>)
 8002752:	4313      	orrs	r3, r2
 8002754:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002756:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800275a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d059      	beq.n	800281a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002766:	f7ff fcaf 	bl	80020c8 <HAL_GetTick>
 800276a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800276e:	e00a      	b.n	8002786 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002770:	f7ff fcaa 	bl	80020c8 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b64      	cmp	r3, #100	@ 0x64
 800277e:	d902      	bls.n	8002786 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	f000 bf43 	b.w	800360c <HAL_RCC_OscConfig+0x106c>
 8002786:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800278a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002792:	fa93 f3a3 	rbit	r3, r3
 8002796:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800279a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800279e:	fab3 f383 	clz	r3, r3
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	095b      	lsrs	r3, r3, #5
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	f043 0301 	orr.w	r3, r3, #1
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d102      	bne.n	80027b8 <HAL_RCC_OscConfig+0x218>
 80027b2:	4b47      	ldr	r3, [pc, #284]	@ (80028d0 <HAL_RCC_OscConfig+0x330>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	e015      	b.n	80027e4 <HAL_RCC_OscConfig+0x244>
 80027b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027bc:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80027c4:	fa93 f3a3 	rbit	r3, r3
 80027c8:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80027cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027d0:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80027d4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80027d8:	fa93 f3a3 	rbit	r3, r3
 80027dc:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80027e0:	4b3b      	ldr	r3, [pc, #236]	@ (80028d0 <HAL_RCC_OscConfig+0x330>)
 80027e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80027e8:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80027ec:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80027f0:	fa92 f2a2 	rbit	r2, r2
 80027f4:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80027f8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80027fc:	fab2 f282 	clz	r2, r2
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	f042 0220 	orr.w	r2, r2, #32
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	f002 021f 	and.w	r2, r2, #31
 800280c:	2101      	movs	r1, #1
 800280e:	fa01 f202 	lsl.w	r2, r1, r2
 8002812:	4013      	ands	r3, r2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0ab      	beq.n	8002770 <HAL_RCC_OscConfig+0x1d0>
 8002818:	e05d      	b.n	80028d6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281a:	f7ff fc55 	bl	80020c8 <HAL_GetTick>
 800281e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002822:	e00a      	b.n	800283a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002824:	f7ff fc50 	bl	80020c8 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b64      	cmp	r3, #100	@ 0x64
 8002832:	d902      	bls.n	800283a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	f000 bee9 	b.w	800360c <HAL_RCC_OscConfig+0x106c>
 800283a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800283e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002842:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002846:	fa93 f3a3 	rbit	r3, r3
 800284a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800284e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002852:	fab3 f383 	clz	r3, r3
 8002856:	b2db      	uxtb	r3, r3
 8002858:	095b      	lsrs	r3, r3, #5
 800285a:	b2db      	uxtb	r3, r3
 800285c:	f043 0301 	orr.w	r3, r3, #1
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b01      	cmp	r3, #1
 8002864:	d102      	bne.n	800286c <HAL_RCC_OscConfig+0x2cc>
 8002866:	4b1a      	ldr	r3, [pc, #104]	@ (80028d0 <HAL_RCC_OscConfig+0x330>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	e015      	b.n	8002898 <HAL_RCC_OscConfig+0x2f8>
 800286c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002870:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002874:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002878:	fa93 f3a3 	rbit	r3, r3
 800287c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002880:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002884:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002888:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800288c:	fa93 f3a3 	rbit	r3, r3
 8002890:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002894:	4b0e      	ldr	r3, [pc, #56]	@ (80028d0 <HAL_RCC_OscConfig+0x330>)
 8002896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002898:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800289c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80028a0:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80028a4:	fa92 f2a2 	rbit	r2, r2
 80028a8:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80028ac:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80028b0:	fab2 f282 	clz	r2, r2
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	f042 0220 	orr.w	r2, r2, #32
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	f002 021f 	and.w	r2, r2, #31
 80028c0:	2101      	movs	r1, #1
 80028c2:	fa01 f202 	lsl.w	r2, r1, r2
 80028c6:	4013      	ands	r3, r2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1ab      	bne.n	8002824 <HAL_RCC_OscConfig+0x284>
 80028cc:	e003      	b.n	80028d6 <HAL_RCC_OscConfig+0x336>
 80028ce:	bf00      	nop
 80028d0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f000 817d 	beq.w	8002be6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80028ec:	4ba6      	ldr	r3, [pc, #664]	@ (8002b88 <HAL_RCC_OscConfig+0x5e8>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 030c 	and.w	r3, r3, #12
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00b      	beq.n	8002910 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80028f8:	4ba3      	ldr	r3, [pc, #652]	@ (8002b88 <HAL_RCC_OscConfig+0x5e8>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f003 030c 	and.w	r3, r3, #12
 8002900:	2b08      	cmp	r3, #8
 8002902:	d172      	bne.n	80029ea <HAL_RCC_OscConfig+0x44a>
 8002904:	4ba0      	ldr	r3, [pc, #640]	@ (8002b88 <HAL_RCC_OscConfig+0x5e8>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d16c      	bne.n	80029ea <HAL_RCC_OscConfig+0x44a>
 8002910:	2302      	movs	r3, #2
 8002912:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002916:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800291a:	fa93 f3a3 	rbit	r3, r3
 800291e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002922:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002926:	fab3 f383 	clz	r3, r3
 800292a:	b2db      	uxtb	r3, r3
 800292c:	095b      	lsrs	r3, r3, #5
 800292e:	b2db      	uxtb	r3, r3
 8002930:	f043 0301 	orr.w	r3, r3, #1
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b01      	cmp	r3, #1
 8002938:	d102      	bne.n	8002940 <HAL_RCC_OscConfig+0x3a0>
 800293a:	4b93      	ldr	r3, [pc, #588]	@ (8002b88 <HAL_RCC_OscConfig+0x5e8>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	e013      	b.n	8002968 <HAL_RCC_OscConfig+0x3c8>
 8002940:	2302      	movs	r3, #2
 8002942:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002946:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800294a:	fa93 f3a3 	rbit	r3, r3
 800294e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002952:	2302      	movs	r3, #2
 8002954:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002958:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800295c:	fa93 f3a3 	rbit	r3, r3
 8002960:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002964:	4b88      	ldr	r3, [pc, #544]	@ (8002b88 <HAL_RCC_OscConfig+0x5e8>)
 8002966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002968:	2202      	movs	r2, #2
 800296a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800296e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002972:	fa92 f2a2 	rbit	r2, r2
 8002976:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800297a:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800297e:	fab2 f282 	clz	r2, r2
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	f042 0220 	orr.w	r2, r2, #32
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	f002 021f 	and.w	r2, r2, #31
 800298e:	2101      	movs	r1, #1
 8002990:	fa01 f202 	lsl.w	r2, r1, r2
 8002994:	4013      	ands	r3, r2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00a      	beq.n	80029b0 <HAL_RCC_OscConfig+0x410>
 800299a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800299e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d002      	beq.n	80029b0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	f000 be2e 	b.w	800360c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b0:	4b75      	ldr	r3, [pc, #468]	@ (8002b88 <HAL_RCC_OscConfig+0x5e8>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	21f8      	movs	r1, #248	@ 0xf8
 80029c6:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ca:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80029ce:	fa91 f1a1 	rbit	r1, r1
 80029d2:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80029d6:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80029da:	fab1 f181 	clz	r1, r1
 80029de:	b2c9      	uxtb	r1, r1
 80029e0:	408b      	lsls	r3, r1
 80029e2:	4969      	ldr	r1, [pc, #420]	@ (8002b88 <HAL_RCC_OscConfig+0x5e8>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029e8:	e0fd      	b.n	8002be6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 8088 	beq.w	8002b0c <HAL_RCC_OscConfig+0x56c>
 80029fc:	2301      	movs	r3, #1
 80029fe:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a02:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002a06:	fa93 f3a3 	rbit	r3, r3
 8002a0a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002a0e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a12:	fab3 f383 	clz	r3, r3
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a1c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	461a      	mov	r2, r3
 8002a24:	2301      	movs	r3, #1
 8002a26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a28:	f7ff fb4e 	bl	80020c8 <HAL_GetTick>
 8002a2c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a30:	e00a      	b.n	8002a48 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a32:	f7ff fb49 	bl	80020c8 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d902      	bls.n	8002a48 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	f000 bde2 	b.w	800360c <HAL_RCC_OscConfig+0x106c>
 8002a48:	2302      	movs	r3, #2
 8002a4a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002a52:	fa93 f3a3 	rbit	r3, r3
 8002a56:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002a5a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a5e:	fab3 f383 	clz	r3, r3
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	095b      	lsrs	r3, r3, #5
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d102      	bne.n	8002a78 <HAL_RCC_OscConfig+0x4d8>
 8002a72:	4b45      	ldr	r3, [pc, #276]	@ (8002b88 <HAL_RCC_OscConfig+0x5e8>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	e013      	b.n	8002aa0 <HAL_RCC_OscConfig+0x500>
 8002a78:	2302      	movs	r3, #2
 8002a7a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002a82:	fa93 f3a3 	rbit	r3, r3
 8002a86:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002a90:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002a94:	fa93 f3a3 	rbit	r3, r3
 8002a98:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002a9c:	4b3a      	ldr	r3, [pc, #232]	@ (8002b88 <HAL_RCC_OscConfig+0x5e8>)
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002aa6:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002aaa:	fa92 f2a2 	rbit	r2, r2
 8002aae:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002ab2:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002ab6:	fab2 f282 	clz	r2, r2
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	f042 0220 	orr.w	r2, r2, #32
 8002ac0:	b2d2      	uxtb	r2, r2
 8002ac2:	f002 021f 	and.w	r2, r2, #31
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8002acc:	4013      	ands	r3, r2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0af      	beq.n	8002a32 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad2:	4b2d      	ldr	r3, [pc, #180]	@ (8002b88 <HAL_RCC_OscConfig+0x5e8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ada:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ade:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	21f8      	movs	r1, #248	@ 0xf8
 8002ae8:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aec:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002af0:	fa91 f1a1 	rbit	r1, r1
 8002af4:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002af8:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002afc:	fab1 f181 	clz	r1, r1
 8002b00:	b2c9      	uxtb	r1, r1
 8002b02:	408b      	lsls	r3, r1
 8002b04:	4920      	ldr	r1, [pc, #128]	@ (8002b88 <HAL_RCC_OscConfig+0x5e8>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	600b      	str	r3, [r1, #0]
 8002b0a:	e06c      	b.n	8002be6 <HAL_RCC_OscConfig+0x646>
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b12:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002b16:	fa93 f3a3 	rbit	r3, r3
 8002b1a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002b1e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b22:	fab3 f383 	clz	r3, r3
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002b2c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	461a      	mov	r2, r3
 8002b34:	2300      	movs	r3, #0
 8002b36:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b38:	f7ff fac6 	bl	80020c8 <HAL_GetTick>
 8002b3c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b40:	e00a      	b.n	8002b58 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b42:	f7ff fac1 	bl	80020c8 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d902      	bls.n	8002b58 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	f000 bd5a 	b.w	800360c <HAL_RCC_OscConfig+0x106c>
 8002b58:	2302      	movs	r3, #2
 8002b5a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002b62:	fa93 f3a3 	rbit	r3, r3
 8002b66:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002b6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b6e:	fab3 f383 	clz	r3, r3
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	095b      	lsrs	r3, r3, #5
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d104      	bne.n	8002b8c <HAL_RCC_OscConfig+0x5ec>
 8002b82:	4b01      	ldr	r3, [pc, #4]	@ (8002b88 <HAL_RCC_OscConfig+0x5e8>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	e015      	b.n	8002bb4 <HAL_RCC_OscConfig+0x614>
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b92:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002b96:	fa93 f3a3 	rbit	r3, r3
 8002b9a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002ba4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002ba8:	fa93 f3a3 	rbit	r3, r3
 8002bac:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002bb0:	4bc8      	ldr	r3, [pc, #800]	@ (8002ed4 <HAL_RCC_OscConfig+0x934>)
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002bba:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002bbe:	fa92 f2a2 	rbit	r2, r2
 8002bc2:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002bc6:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002bca:	fab2 f282 	clz	r2, r2
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	f042 0220 	orr.w	r2, r2, #32
 8002bd4:	b2d2      	uxtb	r2, r2
 8002bd6:	f002 021f 	and.w	r2, r2, #31
 8002bda:	2101      	movs	r1, #1
 8002bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8002be0:	4013      	ands	r3, r2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1ad      	bne.n	8002b42 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002be6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 8110 	beq.w	8002e1c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c00:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d079      	beq.n	8002d00 <HAL_RCC_OscConfig+0x760>
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c12:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002c16:	fa93 f3a3 	rbit	r3, r3
 8002c1a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002c1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c22:	fab3 f383 	clz	r3, r3
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	461a      	mov	r2, r3
 8002c2a:	4bab      	ldr	r3, [pc, #684]	@ (8002ed8 <HAL_RCC_OscConfig+0x938>)
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	461a      	mov	r2, r3
 8002c32:	2301      	movs	r3, #1
 8002c34:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c36:	f7ff fa47 	bl	80020c8 <HAL_GetTick>
 8002c3a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c3e:	e00a      	b.n	8002c56 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c40:	f7ff fa42 	bl	80020c8 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d902      	bls.n	8002c56 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	f000 bcdb 	b.w	800360c <HAL_RCC_OscConfig+0x106c>
 8002c56:	2302      	movs	r3, #2
 8002c58:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002c60:	fa93 f3a3 	rbit	r3, r3
 8002c64:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002c68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c6c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002c70:	2202      	movs	r2, #2
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c78:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	fa93 f2a3 	rbit	r2, r3
 8002c82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002c94:	2202      	movs	r2, #2
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	fa93 f2a3 	rbit	r2, r3
 8002ca6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002caa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002cae:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cb0:	4b88      	ldr	r3, [pc, #544]	@ (8002ed4 <HAL_RCC_OscConfig+0x934>)
 8002cb2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cb8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002cbc:	2102      	movs	r1, #2
 8002cbe:	6019      	str	r1, [r3, #0]
 8002cc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cc4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	fa93 f1a3 	rbit	r1, r3
 8002cce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002cd6:	6019      	str	r1, [r3, #0]
  return result;
 8002cd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cdc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	fab3 f383 	clz	r3, r3
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	f003 031f 	and.w	r3, r3, #31
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0a0      	beq.n	8002c40 <HAL_RCC_OscConfig+0x6a0>
 8002cfe:	e08d      	b.n	8002e1c <HAL_RCC_OscConfig+0x87c>
 8002d00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d04:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002d08:	2201      	movs	r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d10:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	fa93 f2a3 	rbit	r2, r3
 8002d1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d1e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002d22:	601a      	str	r2, [r3, #0]
  return result;
 8002d24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d28:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002d2c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d2e:	fab3 f383 	clz	r3, r3
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	461a      	mov	r2, r3
 8002d36:	4b68      	ldr	r3, [pc, #416]	@ (8002ed8 <HAL_RCC_OscConfig+0x938>)
 8002d38:	4413      	add	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	2300      	movs	r3, #0
 8002d40:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d42:	f7ff f9c1 	bl	80020c8 <HAL_GetTick>
 8002d46:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d4a:	e00a      	b.n	8002d62 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d4c:	f7ff f9bc 	bl	80020c8 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d902      	bls.n	8002d62 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	f000 bc55 	b.w	800360c <HAL_RCC_OscConfig+0x106c>
 8002d62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d66:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d72:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	fa93 f2a3 	rbit	r2, r3
 8002d7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d80:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d8a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002d8e:	2202      	movs	r2, #2
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d96:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	fa93 f2a3 	rbit	r2, r3
 8002da0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002da4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dae:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002db2:	2202      	movs	r2, #2
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dba:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	fa93 f2a3 	rbit	r2, r3
 8002dc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dc8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002dcc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dce:	4b41      	ldr	r3, [pc, #260]	@ (8002ed4 <HAL_RCC_OscConfig+0x934>)
 8002dd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dd6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002dda:	2102      	movs	r1, #2
 8002ddc:	6019      	str	r1, [r3, #0]
 8002dde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	fa93 f1a3 	rbit	r1, r3
 8002dec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002df0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002df4:	6019      	str	r1, [r3, #0]
  return result;
 8002df6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dfa:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	fab3 f383 	clz	r3, r3
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	f003 031f 	and.w	r3, r3, #31
 8002e10:	2101      	movs	r1, #1
 8002e12:	fa01 f303 	lsl.w	r3, r1, r3
 8002e16:	4013      	ands	r3, r2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d197      	bne.n	8002d4c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e20:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 81a1 	beq.w	8003174 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e32:	2300      	movs	r3, #0
 8002e34:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e38:	4b26      	ldr	r3, [pc, #152]	@ (8002ed4 <HAL_RCC_OscConfig+0x934>)
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d116      	bne.n	8002e72 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e44:	4b23      	ldr	r3, [pc, #140]	@ (8002ed4 <HAL_RCC_OscConfig+0x934>)
 8002e46:	69db      	ldr	r3, [r3, #28]
 8002e48:	4a22      	ldr	r2, [pc, #136]	@ (8002ed4 <HAL_RCC_OscConfig+0x934>)
 8002e4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e4e:	61d3      	str	r3, [r2, #28]
 8002e50:	4b20      	ldr	r3, [pc, #128]	@ (8002ed4 <HAL_RCC_OscConfig+0x934>)
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002e58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e5c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e66:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002e6a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e72:	4b1a      	ldr	r3, [pc, #104]	@ (8002edc <HAL_RCC_OscConfig+0x93c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d11a      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e7e:	4b17      	ldr	r3, [pc, #92]	@ (8002edc <HAL_RCC_OscConfig+0x93c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a16      	ldr	r2, [pc, #88]	@ (8002edc <HAL_RCC_OscConfig+0x93c>)
 8002e84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e88:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e8a:	f7ff f91d 	bl	80020c8 <HAL_GetTick>
 8002e8e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e92:	e009      	b.n	8002ea8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e94:	f7ff f918 	bl	80020c8 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b64      	cmp	r3, #100	@ 0x64
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e3b1      	b.n	800360c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8002edc <HAL_RCC_OscConfig+0x93c>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0ef      	beq.n	8002e94 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eb8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d10d      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x940>
 8002ec4:	4b03      	ldr	r3, [pc, #12]	@ (8002ed4 <HAL_RCC_OscConfig+0x934>)
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	4a02      	ldr	r2, [pc, #8]	@ (8002ed4 <HAL_RCC_OscConfig+0x934>)
 8002eca:	f043 0301 	orr.w	r3, r3, #1
 8002ece:	6213      	str	r3, [r2, #32]
 8002ed0:	e03c      	b.n	8002f4c <HAL_RCC_OscConfig+0x9ac>
 8002ed2:	bf00      	nop
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	10908120 	.word	0x10908120
 8002edc:	40007000 	.word	0x40007000
 8002ee0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ee4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10c      	bne.n	8002f0a <HAL_RCC_OscConfig+0x96a>
 8002ef0:	4bc1      	ldr	r3, [pc, #772]	@ (80031f8 <HAL_RCC_OscConfig+0xc58>)
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	4ac0      	ldr	r2, [pc, #768]	@ (80031f8 <HAL_RCC_OscConfig+0xc58>)
 8002ef6:	f023 0301 	bic.w	r3, r3, #1
 8002efa:	6213      	str	r3, [r2, #32]
 8002efc:	4bbe      	ldr	r3, [pc, #760]	@ (80031f8 <HAL_RCC_OscConfig+0xc58>)
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	4abd      	ldr	r2, [pc, #756]	@ (80031f8 <HAL_RCC_OscConfig+0xc58>)
 8002f02:	f023 0304 	bic.w	r3, r3, #4
 8002f06:	6213      	str	r3, [r2, #32]
 8002f08:	e020      	b.n	8002f4c <HAL_RCC_OscConfig+0x9ac>
 8002f0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	2b05      	cmp	r3, #5
 8002f18:	d10c      	bne.n	8002f34 <HAL_RCC_OscConfig+0x994>
 8002f1a:	4bb7      	ldr	r3, [pc, #732]	@ (80031f8 <HAL_RCC_OscConfig+0xc58>)
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	4ab6      	ldr	r2, [pc, #728]	@ (80031f8 <HAL_RCC_OscConfig+0xc58>)
 8002f20:	f043 0304 	orr.w	r3, r3, #4
 8002f24:	6213      	str	r3, [r2, #32]
 8002f26:	4bb4      	ldr	r3, [pc, #720]	@ (80031f8 <HAL_RCC_OscConfig+0xc58>)
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	4ab3      	ldr	r2, [pc, #716]	@ (80031f8 <HAL_RCC_OscConfig+0xc58>)
 8002f2c:	f043 0301 	orr.w	r3, r3, #1
 8002f30:	6213      	str	r3, [r2, #32]
 8002f32:	e00b      	b.n	8002f4c <HAL_RCC_OscConfig+0x9ac>
 8002f34:	4bb0      	ldr	r3, [pc, #704]	@ (80031f8 <HAL_RCC_OscConfig+0xc58>)
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	4aaf      	ldr	r2, [pc, #700]	@ (80031f8 <HAL_RCC_OscConfig+0xc58>)
 8002f3a:	f023 0301 	bic.w	r3, r3, #1
 8002f3e:	6213      	str	r3, [r2, #32]
 8002f40:	4bad      	ldr	r3, [pc, #692]	@ (80031f8 <HAL_RCC_OscConfig+0xc58>)
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	4aac      	ldr	r2, [pc, #688]	@ (80031f8 <HAL_RCC_OscConfig+0xc58>)
 8002f46:	f023 0304 	bic.w	r3, r3, #4
 8002f4a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f50:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 8081 	beq.w	8003060 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f5e:	f7ff f8b3 	bl	80020c8 <HAL_GetTick>
 8002f62:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f66:	e00b      	b.n	8002f80 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f68:	f7ff f8ae 	bl	80020c8 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e345      	b.n	800360c <HAL_RCC_OscConfig+0x106c>
 8002f80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f84:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002f88:	2202      	movs	r2, #2
 8002f8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f90:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	fa93 f2a3 	rbit	r2, r3
 8002f9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f9e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fa8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002fac:	2202      	movs	r2, #2
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fb4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	fa93 f2a3 	rbit	r2, r3
 8002fbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fc2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002fc6:	601a      	str	r2, [r3, #0]
  return result;
 8002fc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fcc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002fd0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fd2:	fab3 f383 	clz	r3, r3
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	095b      	lsrs	r3, r3, #5
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	f043 0302 	orr.w	r3, r3, #2
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d102      	bne.n	8002fec <HAL_RCC_OscConfig+0xa4c>
 8002fe6:	4b84      	ldr	r3, [pc, #528]	@ (80031f8 <HAL_RCC_OscConfig+0xc58>)
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	e013      	b.n	8003014 <HAL_RCC_OscConfig+0xa74>
 8002fec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ffc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	fa93 f2a3 	rbit	r2, r3
 8003006:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800300a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	4b79      	ldr	r3, [pc, #484]	@ (80031f8 <HAL_RCC_OscConfig+0xc58>)
 8003012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003014:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003018:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800301c:	2102      	movs	r1, #2
 800301e:	6011      	str	r1, [r2, #0]
 8003020:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003024:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003028:	6812      	ldr	r2, [r2, #0]
 800302a:	fa92 f1a2 	rbit	r1, r2
 800302e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003032:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003036:	6011      	str	r1, [r2, #0]
  return result;
 8003038:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800303c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003040:	6812      	ldr	r2, [r2, #0]
 8003042:	fab2 f282 	clz	r2, r2
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800304c:	b2d2      	uxtb	r2, r2
 800304e:	f002 021f 	and.w	r2, r2, #31
 8003052:	2101      	movs	r1, #1
 8003054:	fa01 f202 	lsl.w	r2, r1, r2
 8003058:	4013      	ands	r3, r2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d084      	beq.n	8002f68 <HAL_RCC_OscConfig+0x9c8>
 800305e:	e07f      	b.n	8003160 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003060:	f7ff f832 	bl	80020c8 <HAL_GetTick>
 8003064:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003068:	e00b      	b.n	8003082 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800306a:	f7ff f82d 	bl	80020c8 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	f241 3288 	movw	r2, #5000	@ 0x1388
 800307a:	4293      	cmp	r3, r2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e2c4      	b.n	800360c <HAL_RCC_OscConfig+0x106c>
 8003082:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003086:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800308a:	2202      	movs	r2, #2
 800308c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003092:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	fa93 f2a3 	rbit	r2, r3
 800309c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030a0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030aa:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80030ae:	2202      	movs	r2, #2
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030b6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	fa93 f2a3 	rbit	r2, r3
 80030c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030c4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80030c8:	601a      	str	r2, [r3, #0]
  return result;
 80030ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ce:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80030d2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d4:	fab3 f383 	clz	r3, r3
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	095b      	lsrs	r3, r3, #5
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	f043 0302 	orr.w	r3, r3, #2
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d102      	bne.n	80030ee <HAL_RCC_OscConfig+0xb4e>
 80030e8:	4b43      	ldr	r3, [pc, #268]	@ (80031f8 <HAL_RCC_OscConfig+0xc58>)
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	e013      	b.n	8003116 <HAL_RCC_OscConfig+0xb76>
 80030ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030f2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80030f6:	2202      	movs	r2, #2
 80030f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030fe:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	fa93 f2a3 	rbit	r2, r3
 8003108:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800310c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	4b39      	ldr	r3, [pc, #228]	@ (80031f8 <HAL_RCC_OscConfig+0xc58>)
 8003114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003116:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800311a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800311e:	2102      	movs	r1, #2
 8003120:	6011      	str	r1, [r2, #0]
 8003122:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003126:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800312a:	6812      	ldr	r2, [r2, #0]
 800312c:	fa92 f1a2 	rbit	r1, r2
 8003130:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003134:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003138:	6011      	str	r1, [r2, #0]
  return result;
 800313a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800313e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003142:	6812      	ldr	r2, [r2, #0]
 8003144:	fab2 f282 	clz	r2, r2
 8003148:	b2d2      	uxtb	r2, r2
 800314a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800314e:	b2d2      	uxtb	r2, r2
 8003150:	f002 021f 	and.w	r2, r2, #31
 8003154:	2101      	movs	r1, #1
 8003156:	fa01 f202 	lsl.w	r2, r1, r2
 800315a:	4013      	ands	r3, r2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d184      	bne.n	800306a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003160:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003164:	2b01      	cmp	r3, #1
 8003166:	d105      	bne.n	8003174 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003168:	4b23      	ldr	r3, [pc, #140]	@ (80031f8 <HAL_RCC_OscConfig+0xc58>)
 800316a:	69db      	ldr	r3, [r3, #28]
 800316c:	4a22      	ldr	r2, [pc, #136]	@ (80031f8 <HAL_RCC_OscConfig+0xc58>)
 800316e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003172:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003174:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003178:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	2b00      	cmp	r3, #0
 8003182:	f000 8242 	beq.w	800360a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003186:	4b1c      	ldr	r3, [pc, #112]	@ (80031f8 <HAL_RCC_OscConfig+0xc58>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f003 030c 	and.w	r3, r3, #12
 800318e:	2b08      	cmp	r3, #8
 8003190:	f000 8213 	beq.w	80035ba <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003194:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003198:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	69db      	ldr	r3, [r3, #28]
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	f040 8162 	bne.w	800346a <HAL_RCC_OscConfig+0xeca>
 80031a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031aa:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80031ae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80031b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031b8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	fa93 f2a3 	rbit	r2, r3
 80031c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031c6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80031ca:	601a      	str	r2, [r3, #0]
  return result;
 80031cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031d0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80031d4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d6:	fab3 f383 	clz	r3, r3
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80031e0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	461a      	mov	r2, r3
 80031e8:	2300      	movs	r3, #0
 80031ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ec:	f7fe ff6c 	bl	80020c8 <HAL_GetTick>
 80031f0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031f4:	e00c      	b.n	8003210 <HAL_RCC_OscConfig+0xc70>
 80031f6:	bf00      	nop
 80031f8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031fc:	f7fe ff64 	bl	80020c8 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e1fd      	b.n	800360c <HAL_RCC_OscConfig+0x106c>
 8003210:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003214:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003218:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800321c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003222:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	fa93 f2a3 	rbit	r2, r3
 800322c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003230:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003234:	601a      	str	r2, [r3, #0]
  return result;
 8003236:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800323a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800323e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003240:	fab3 f383 	clz	r3, r3
 8003244:	b2db      	uxtb	r3, r3
 8003246:	095b      	lsrs	r3, r3, #5
 8003248:	b2db      	uxtb	r3, r3
 800324a:	f043 0301 	orr.w	r3, r3, #1
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b01      	cmp	r3, #1
 8003252:	d102      	bne.n	800325a <HAL_RCC_OscConfig+0xcba>
 8003254:	4bb0      	ldr	r3, [pc, #704]	@ (8003518 <HAL_RCC_OscConfig+0xf78>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	e027      	b.n	80032aa <HAL_RCC_OscConfig+0xd0a>
 800325a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800325e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003262:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003266:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003268:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800326c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	fa93 f2a3 	rbit	r2, r3
 8003276:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800327a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003284:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003288:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003292:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	fa93 f2a3 	rbit	r2, r3
 800329c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032a0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	4b9c      	ldr	r3, [pc, #624]	@ (8003518 <HAL_RCC_OscConfig+0xf78>)
 80032a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032ae:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80032b2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80032b6:	6011      	str	r1, [r2, #0]
 80032b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032bc:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80032c0:	6812      	ldr	r2, [r2, #0]
 80032c2:	fa92 f1a2 	rbit	r1, r2
 80032c6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032ca:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80032ce:	6011      	str	r1, [r2, #0]
  return result;
 80032d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032d4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80032d8:	6812      	ldr	r2, [r2, #0]
 80032da:	fab2 f282 	clz	r2, r2
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	f042 0220 	orr.w	r2, r2, #32
 80032e4:	b2d2      	uxtb	r2, r2
 80032e6:	f002 021f 	and.w	r2, r2, #31
 80032ea:	2101      	movs	r1, #1
 80032ec:	fa01 f202 	lsl.w	r2, r1, r2
 80032f0:	4013      	ands	r3, r2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d182      	bne.n	80031fc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032f6:	4b88      	ldr	r3, [pc, #544]	@ (8003518 <HAL_RCC_OscConfig+0xf78>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80032fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003302:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800330a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800330e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	430b      	orrs	r3, r1
 8003318:	497f      	ldr	r1, [pc, #508]	@ (8003518 <HAL_RCC_OscConfig+0xf78>)
 800331a:	4313      	orrs	r3, r2
 800331c:	604b      	str	r3, [r1, #4]
 800331e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003322:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003326:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800332a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003330:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	fa93 f2a3 	rbit	r2, r3
 800333a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800333e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003342:	601a      	str	r2, [r3, #0]
  return result;
 8003344:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003348:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800334c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800334e:	fab3 f383 	clz	r3, r3
 8003352:	b2db      	uxtb	r3, r3
 8003354:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003358:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	461a      	mov	r2, r3
 8003360:	2301      	movs	r3, #1
 8003362:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003364:	f7fe feb0 	bl	80020c8 <HAL_GetTick>
 8003368:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800336c:	e009      	b.n	8003382 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800336e:	f7fe feab 	bl	80020c8 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e144      	b.n	800360c <HAL_RCC_OscConfig+0x106c>
 8003382:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003386:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800338a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800338e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003390:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003394:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	fa93 f2a3 	rbit	r2, r3
 800339e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033a2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80033a6:	601a      	str	r2, [r3, #0]
  return result;
 80033a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ac:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80033b0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033b2:	fab3 f383 	clz	r3, r3
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	095b      	lsrs	r3, r3, #5
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	f043 0301 	orr.w	r3, r3, #1
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d102      	bne.n	80033cc <HAL_RCC_OscConfig+0xe2c>
 80033c6:	4b54      	ldr	r3, [pc, #336]	@ (8003518 <HAL_RCC_OscConfig+0xf78>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	e027      	b.n	800341c <HAL_RCC_OscConfig+0xe7c>
 80033cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033d0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80033d4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033de:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	fa93 f2a3 	rbit	r2, r3
 80033e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ec:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033f6:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80033fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033fe:	601a      	str	r2, [r3, #0]
 8003400:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003404:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	fa93 f2a3 	rbit	r2, r3
 800340e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003412:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	4b3f      	ldr	r3, [pc, #252]	@ (8003518 <HAL_RCC_OscConfig+0xf78>)
 800341a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003420:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003424:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003428:	6011      	str	r1, [r2, #0]
 800342a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800342e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003432:	6812      	ldr	r2, [r2, #0]
 8003434:	fa92 f1a2 	rbit	r1, r2
 8003438:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800343c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003440:	6011      	str	r1, [r2, #0]
  return result;
 8003442:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003446:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800344a:	6812      	ldr	r2, [r2, #0]
 800344c:	fab2 f282 	clz	r2, r2
 8003450:	b2d2      	uxtb	r2, r2
 8003452:	f042 0220 	orr.w	r2, r2, #32
 8003456:	b2d2      	uxtb	r2, r2
 8003458:	f002 021f 	and.w	r2, r2, #31
 800345c:	2101      	movs	r1, #1
 800345e:	fa01 f202 	lsl.w	r2, r1, r2
 8003462:	4013      	ands	r3, r2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d082      	beq.n	800336e <HAL_RCC_OscConfig+0xdce>
 8003468:	e0cf      	b.n	800360a <HAL_RCC_OscConfig+0x106a>
 800346a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800346e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003472:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003476:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003478:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800347c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	fa93 f2a3 	rbit	r2, r3
 8003486:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800348a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800348e:	601a      	str	r2, [r3, #0]
  return result;
 8003490:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003494:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003498:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800349a:	fab3 f383 	clz	r3, r3
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80034a4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	461a      	mov	r2, r3
 80034ac:	2300      	movs	r3, #0
 80034ae:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b0:	f7fe fe0a 	bl	80020c8 <HAL_GetTick>
 80034b4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034b8:	e009      	b.n	80034ce <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ba:	f7fe fe05 	bl	80020c8 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e09e      	b.n	800360c <HAL_RCC_OscConfig+0x106c>
 80034ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034d2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80034d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034e0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	fa93 f2a3 	rbit	r2, r3
 80034ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ee:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80034f2:	601a      	str	r2, [r3, #0]
  return result;
 80034f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034f8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80034fc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034fe:	fab3 f383 	clz	r3, r3
 8003502:	b2db      	uxtb	r3, r3
 8003504:	095b      	lsrs	r3, r3, #5
 8003506:	b2db      	uxtb	r3, r3
 8003508:	f043 0301 	orr.w	r3, r3, #1
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b01      	cmp	r3, #1
 8003510:	d104      	bne.n	800351c <HAL_RCC_OscConfig+0xf7c>
 8003512:	4b01      	ldr	r3, [pc, #4]	@ (8003518 <HAL_RCC_OscConfig+0xf78>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	e029      	b.n	800356c <HAL_RCC_OscConfig+0xfcc>
 8003518:	40021000 	.word	0x40021000
 800351c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003520:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003524:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003528:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800352e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	fa93 f2a3 	rbit	r2, r3
 8003538:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800353c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003546:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800354a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003554:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	fa93 f2a3 	rbit	r2, r3
 800355e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003562:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	4b2b      	ldr	r3, [pc, #172]	@ (8003618 <HAL_RCC_OscConfig+0x1078>)
 800356a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003570:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003574:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003578:	6011      	str	r1, [r2, #0]
 800357a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800357e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003582:	6812      	ldr	r2, [r2, #0]
 8003584:	fa92 f1a2 	rbit	r1, r2
 8003588:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800358c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003590:	6011      	str	r1, [r2, #0]
  return result;
 8003592:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003596:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800359a:	6812      	ldr	r2, [r2, #0]
 800359c:	fab2 f282 	clz	r2, r2
 80035a0:	b2d2      	uxtb	r2, r2
 80035a2:	f042 0220 	orr.w	r2, r2, #32
 80035a6:	b2d2      	uxtb	r2, r2
 80035a8:	f002 021f 	and.w	r2, r2, #31
 80035ac:	2101      	movs	r1, #1
 80035ae:	fa01 f202 	lsl.w	r2, r1, r2
 80035b2:	4013      	ands	r3, r2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d180      	bne.n	80034ba <HAL_RCC_OscConfig+0xf1a>
 80035b8:	e027      	b.n	800360a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d101      	bne.n	80035ce <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e01e      	b.n	800360c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035ce:	4b12      	ldr	r3, [pc, #72]	@ (8003618 <HAL_RCC_OscConfig+0x1078>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80035d6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80035da:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80035de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d10b      	bne.n	8003606 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80035ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80035f2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80035f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003602:	429a      	cmp	r2, r3
 8003604:	d001      	beq.n	800360a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e000      	b.n	800360c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	40021000 	.word	0x40021000

0800361c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b09e      	sub	sp, #120	@ 0x78
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003626:	2300      	movs	r3, #0
 8003628:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e162      	b.n	80038fa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003634:	4b90      	ldr	r3, [pc, #576]	@ (8003878 <HAL_RCC_ClockConfig+0x25c>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0307 	and.w	r3, r3, #7
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	429a      	cmp	r2, r3
 8003640:	d910      	bls.n	8003664 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003642:	4b8d      	ldr	r3, [pc, #564]	@ (8003878 <HAL_RCC_ClockConfig+0x25c>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f023 0207 	bic.w	r2, r3, #7
 800364a:	498b      	ldr	r1, [pc, #556]	@ (8003878 <HAL_RCC_ClockConfig+0x25c>)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	4313      	orrs	r3, r2
 8003650:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003652:	4b89      	ldr	r3, [pc, #548]	@ (8003878 <HAL_RCC_ClockConfig+0x25c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0307 	and.w	r3, r3, #7
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	429a      	cmp	r2, r3
 800365e:	d001      	beq.n	8003664 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e14a      	b.n	80038fa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d008      	beq.n	8003682 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003670:	4b82      	ldr	r3, [pc, #520]	@ (800387c <HAL_RCC_ClockConfig+0x260>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	497f      	ldr	r1, [pc, #508]	@ (800387c <HAL_RCC_ClockConfig+0x260>)
 800367e:	4313      	orrs	r3, r2
 8003680:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 80dc 	beq.w	8003848 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d13c      	bne.n	8003712 <HAL_RCC_ClockConfig+0xf6>
 8003698:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800369c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80036a0:	fa93 f3a3 	rbit	r3, r3
 80036a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80036a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036a8:	fab3 f383 	clz	r3, r3
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	095b      	lsrs	r3, r3, #5
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	f043 0301 	orr.w	r3, r3, #1
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d102      	bne.n	80036c2 <HAL_RCC_ClockConfig+0xa6>
 80036bc:	4b6f      	ldr	r3, [pc, #444]	@ (800387c <HAL_RCC_ClockConfig+0x260>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	e00f      	b.n	80036e2 <HAL_RCC_ClockConfig+0xc6>
 80036c2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80036c6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80036ca:	fa93 f3a3 	rbit	r3, r3
 80036ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80036d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80036d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80036d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80036d8:	fa93 f3a3 	rbit	r3, r3
 80036dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80036de:	4b67      	ldr	r3, [pc, #412]	@ (800387c <HAL_RCC_ClockConfig+0x260>)
 80036e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80036e6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80036e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80036ea:	fa92 f2a2 	rbit	r2, r2
 80036ee:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80036f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80036f2:	fab2 f282 	clz	r2, r2
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	f042 0220 	orr.w	r2, r2, #32
 80036fc:	b2d2      	uxtb	r2, r2
 80036fe:	f002 021f 	and.w	r2, r2, #31
 8003702:	2101      	movs	r1, #1
 8003704:	fa01 f202 	lsl.w	r2, r1, r2
 8003708:	4013      	ands	r3, r2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d17b      	bne.n	8003806 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e0f3      	b.n	80038fa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	2b02      	cmp	r3, #2
 8003718:	d13c      	bne.n	8003794 <HAL_RCC_ClockConfig+0x178>
 800371a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800371e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003720:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003722:	fa93 f3a3 	rbit	r3, r3
 8003726:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003728:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800372a:	fab3 f383 	clz	r3, r3
 800372e:	b2db      	uxtb	r3, r3
 8003730:	095b      	lsrs	r3, r3, #5
 8003732:	b2db      	uxtb	r3, r3
 8003734:	f043 0301 	orr.w	r3, r3, #1
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b01      	cmp	r3, #1
 800373c:	d102      	bne.n	8003744 <HAL_RCC_ClockConfig+0x128>
 800373e:	4b4f      	ldr	r3, [pc, #316]	@ (800387c <HAL_RCC_ClockConfig+0x260>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	e00f      	b.n	8003764 <HAL_RCC_ClockConfig+0x148>
 8003744:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003748:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800374c:	fa93 f3a3 	rbit	r3, r3
 8003750:	647b      	str	r3, [r7, #68]	@ 0x44
 8003752:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003756:	643b      	str	r3, [r7, #64]	@ 0x40
 8003758:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800375a:	fa93 f3a3 	rbit	r3, r3
 800375e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003760:	4b46      	ldr	r3, [pc, #280]	@ (800387c <HAL_RCC_ClockConfig+0x260>)
 8003762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003764:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003768:	63ba      	str	r2, [r7, #56]	@ 0x38
 800376a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800376c:	fa92 f2a2 	rbit	r2, r2
 8003770:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003772:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003774:	fab2 f282 	clz	r2, r2
 8003778:	b2d2      	uxtb	r2, r2
 800377a:	f042 0220 	orr.w	r2, r2, #32
 800377e:	b2d2      	uxtb	r2, r2
 8003780:	f002 021f 	and.w	r2, r2, #31
 8003784:	2101      	movs	r1, #1
 8003786:	fa01 f202 	lsl.w	r2, r1, r2
 800378a:	4013      	ands	r3, r2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d13a      	bne.n	8003806 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e0b2      	b.n	80038fa <HAL_RCC_ClockConfig+0x2de>
 8003794:	2302      	movs	r3, #2
 8003796:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800379a:	fa93 f3a3 	rbit	r3, r3
 800379e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80037a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037a2:	fab3 f383 	clz	r3, r3
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	095b      	lsrs	r3, r3, #5
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	f043 0301 	orr.w	r3, r3, #1
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d102      	bne.n	80037bc <HAL_RCC_ClockConfig+0x1a0>
 80037b6:	4b31      	ldr	r3, [pc, #196]	@ (800387c <HAL_RCC_ClockConfig+0x260>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	e00d      	b.n	80037d8 <HAL_RCC_ClockConfig+0x1bc>
 80037bc:	2302      	movs	r3, #2
 80037be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c2:	fa93 f3a3 	rbit	r3, r3
 80037c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80037c8:	2302      	movs	r3, #2
 80037ca:	623b      	str	r3, [r7, #32]
 80037cc:	6a3b      	ldr	r3, [r7, #32]
 80037ce:	fa93 f3a3 	rbit	r3, r3
 80037d2:	61fb      	str	r3, [r7, #28]
 80037d4:	4b29      	ldr	r3, [pc, #164]	@ (800387c <HAL_RCC_ClockConfig+0x260>)
 80037d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d8:	2202      	movs	r2, #2
 80037da:	61ba      	str	r2, [r7, #24]
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	fa92 f2a2 	rbit	r2, r2
 80037e2:	617a      	str	r2, [r7, #20]
  return result;
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	fab2 f282 	clz	r2, r2
 80037ea:	b2d2      	uxtb	r2, r2
 80037ec:	f042 0220 	orr.w	r2, r2, #32
 80037f0:	b2d2      	uxtb	r2, r2
 80037f2:	f002 021f 	and.w	r2, r2, #31
 80037f6:	2101      	movs	r1, #1
 80037f8:	fa01 f202 	lsl.w	r2, r1, r2
 80037fc:	4013      	ands	r3, r2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e079      	b.n	80038fa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003806:	4b1d      	ldr	r3, [pc, #116]	@ (800387c <HAL_RCC_ClockConfig+0x260>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f023 0203 	bic.w	r2, r3, #3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	491a      	ldr	r1, [pc, #104]	@ (800387c <HAL_RCC_ClockConfig+0x260>)
 8003814:	4313      	orrs	r3, r2
 8003816:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003818:	f7fe fc56 	bl	80020c8 <HAL_GetTick>
 800381c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800381e:	e00a      	b.n	8003836 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003820:	f7fe fc52 	bl	80020c8 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800382e:	4293      	cmp	r3, r2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e061      	b.n	80038fa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003836:	4b11      	ldr	r3, [pc, #68]	@ (800387c <HAL_RCC_ClockConfig+0x260>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f003 020c 	and.w	r2, r3, #12
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	429a      	cmp	r2, r3
 8003846:	d1eb      	bne.n	8003820 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003848:	4b0b      	ldr	r3, [pc, #44]	@ (8003878 <HAL_RCC_ClockConfig+0x25c>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d214      	bcs.n	8003880 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003856:	4b08      	ldr	r3, [pc, #32]	@ (8003878 <HAL_RCC_ClockConfig+0x25c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f023 0207 	bic.w	r2, r3, #7
 800385e:	4906      	ldr	r1, [pc, #24]	@ (8003878 <HAL_RCC_ClockConfig+0x25c>)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	4313      	orrs	r3, r2
 8003864:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003866:	4b04      	ldr	r3, [pc, #16]	@ (8003878 <HAL_RCC_ClockConfig+0x25c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	429a      	cmp	r2, r3
 8003872:	d005      	beq.n	8003880 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e040      	b.n	80038fa <HAL_RCC_ClockConfig+0x2de>
 8003878:	40022000 	.word	0x40022000
 800387c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	d008      	beq.n	800389e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800388c:	4b1d      	ldr	r3, [pc, #116]	@ (8003904 <HAL_RCC_ClockConfig+0x2e8>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	491a      	ldr	r1, [pc, #104]	@ (8003904 <HAL_RCC_ClockConfig+0x2e8>)
 800389a:	4313      	orrs	r3, r2
 800389c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0308 	and.w	r3, r3, #8
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d009      	beq.n	80038be <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038aa:	4b16      	ldr	r3, [pc, #88]	@ (8003904 <HAL_RCC_ClockConfig+0x2e8>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	4912      	ldr	r1, [pc, #72]	@ (8003904 <HAL_RCC_ClockConfig+0x2e8>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80038be:	f000 f829 	bl	8003914 <HAL_RCC_GetSysClockFreq>
 80038c2:	4601      	mov	r1, r0
 80038c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003904 <HAL_RCC_ClockConfig+0x2e8>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038cc:	22f0      	movs	r2, #240	@ 0xf0
 80038ce:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	fa92 f2a2 	rbit	r2, r2
 80038d6:	60fa      	str	r2, [r7, #12]
  return result;
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	fab2 f282 	clz	r2, r2
 80038de:	b2d2      	uxtb	r2, r2
 80038e0:	40d3      	lsrs	r3, r2
 80038e2:	4a09      	ldr	r2, [pc, #36]	@ (8003908 <HAL_RCC_ClockConfig+0x2ec>)
 80038e4:	5cd3      	ldrb	r3, [r2, r3]
 80038e6:	fa21 f303 	lsr.w	r3, r1, r3
 80038ea:	4a08      	ldr	r2, [pc, #32]	@ (800390c <HAL_RCC_ClockConfig+0x2f0>)
 80038ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80038ee:	4b08      	ldr	r3, [pc, #32]	@ (8003910 <HAL_RCC_ClockConfig+0x2f4>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7fe fba4 	bl	8002040 <HAL_InitTick>
  
  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3778      	adds	r7, #120	@ 0x78
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	40021000 	.word	0x40021000
 8003908:	08005264 	.word	0x08005264
 800390c:	20000094 	.word	0x20000094
 8003910:	20000120 	.word	0x20000120

08003914 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003914:	b480      	push	{r7}
 8003916:	b087      	sub	sp, #28
 8003918:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800391a:	2300      	movs	r3, #0
 800391c:	60fb      	str	r3, [r7, #12]
 800391e:	2300      	movs	r3, #0
 8003920:	60bb      	str	r3, [r7, #8]
 8003922:	2300      	movs	r3, #0
 8003924:	617b      	str	r3, [r7, #20]
 8003926:	2300      	movs	r3, #0
 8003928:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800392a:	2300      	movs	r3, #0
 800392c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800392e:	4b1e      	ldr	r3, [pc, #120]	@ (80039a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f003 030c 	and.w	r3, r3, #12
 800393a:	2b04      	cmp	r3, #4
 800393c:	d002      	beq.n	8003944 <HAL_RCC_GetSysClockFreq+0x30>
 800393e:	2b08      	cmp	r3, #8
 8003940:	d003      	beq.n	800394a <HAL_RCC_GetSysClockFreq+0x36>
 8003942:	e026      	b.n	8003992 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003944:	4b19      	ldr	r3, [pc, #100]	@ (80039ac <HAL_RCC_GetSysClockFreq+0x98>)
 8003946:	613b      	str	r3, [r7, #16]
      break;
 8003948:	e026      	b.n	8003998 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	0c9b      	lsrs	r3, r3, #18
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	4a17      	ldr	r2, [pc, #92]	@ (80039b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003954:	5cd3      	ldrb	r3, [r2, r3]
 8003956:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003958:	4b13      	ldr	r3, [pc, #76]	@ (80039a8 <HAL_RCC_GetSysClockFreq+0x94>)
 800395a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800395c:	f003 030f 	and.w	r3, r3, #15
 8003960:	4a14      	ldr	r2, [pc, #80]	@ (80039b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003962:	5cd3      	ldrb	r3, [r2, r3]
 8003964:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d008      	beq.n	8003982 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003970:	4a0e      	ldr	r2, [pc, #56]	@ (80039ac <HAL_RCC_GetSysClockFreq+0x98>)
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	fbb2 f2f3 	udiv	r2, r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	fb02 f303 	mul.w	r3, r2, r3
 800397e:	617b      	str	r3, [r7, #20]
 8003980:	e004      	b.n	800398c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a0c      	ldr	r2, [pc, #48]	@ (80039b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003986:	fb02 f303 	mul.w	r3, r2, r3
 800398a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	613b      	str	r3, [r7, #16]
      break;
 8003990:	e002      	b.n	8003998 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003992:	4b06      	ldr	r3, [pc, #24]	@ (80039ac <HAL_RCC_GetSysClockFreq+0x98>)
 8003994:	613b      	str	r3, [r7, #16]
      break;
 8003996:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003998:	693b      	ldr	r3, [r7, #16]
}
 800399a:	4618      	mov	r0, r3
 800399c:	371c      	adds	r7, #28
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	40021000 	.word	0x40021000
 80039ac:	007a1200 	.word	0x007a1200
 80039b0:	080052d4 	.word	0x080052d4
 80039b4:	080052e4 	.word	0x080052e4
 80039b8:	003d0900 	.word	0x003d0900

080039bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e049      	b.n	8003a62 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d106      	bne.n	80039e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7fd ff84 	bl	80018f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2202      	movs	r2, #2
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	3304      	adds	r3, #4
 80039f8:	4619      	mov	r1, r3
 80039fa:	4610      	mov	r0, r2
 80039fc:	f000 fa4a 	bl	8003e94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
	...

08003a6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d109      	bne.n	8003a90 <HAL_TIM_PWM_Start+0x24>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	bf14      	ite	ne
 8003a88:	2301      	movne	r3, #1
 8003a8a:	2300      	moveq	r3, #0
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	e03c      	b.n	8003b0a <HAL_TIM_PWM_Start+0x9e>
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	d109      	bne.n	8003aaa <HAL_TIM_PWM_Start+0x3e>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	bf14      	ite	ne
 8003aa2:	2301      	movne	r3, #1
 8003aa4:	2300      	moveq	r3, #0
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	e02f      	b.n	8003b0a <HAL_TIM_PWM_Start+0x9e>
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	2b08      	cmp	r3, #8
 8003aae:	d109      	bne.n	8003ac4 <HAL_TIM_PWM_Start+0x58>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	bf14      	ite	ne
 8003abc:	2301      	movne	r3, #1
 8003abe:	2300      	moveq	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	e022      	b.n	8003b0a <HAL_TIM_PWM_Start+0x9e>
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	2b0c      	cmp	r3, #12
 8003ac8:	d109      	bne.n	8003ade <HAL_TIM_PWM_Start+0x72>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	bf14      	ite	ne
 8003ad6:	2301      	movne	r3, #1
 8003ad8:	2300      	moveq	r3, #0
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	e015      	b.n	8003b0a <HAL_TIM_PWM_Start+0x9e>
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	2b10      	cmp	r3, #16
 8003ae2:	d109      	bne.n	8003af8 <HAL_TIM_PWM_Start+0x8c>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	bf14      	ite	ne
 8003af0:	2301      	movne	r3, #1
 8003af2:	2300      	moveq	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	e008      	b.n	8003b0a <HAL_TIM_PWM_Start+0x9e>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	bf14      	ite	ne
 8003b04:	2301      	movne	r3, #1
 8003b06:	2300      	moveq	r3, #0
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e097      	b.n	8003c42 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d104      	bne.n	8003b22 <HAL_TIM_PWM_Start+0xb6>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b20:	e023      	b.n	8003b6a <HAL_TIM_PWM_Start+0xfe>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d104      	bne.n	8003b32 <HAL_TIM_PWM_Start+0xc6>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b30:	e01b      	b.n	8003b6a <HAL_TIM_PWM_Start+0xfe>
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d104      	bne.n	8003b42 <HAL_TIM_PWM_Start+0xd6>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b40:	e013      	b.n	8003b6a <HAL_TIM_PWM_Start+0xfe>
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	2b0c      	cmp	r3, #12
 8003b46:	d104      	bne.n	8003b52 <HAL_TIM_PWM_Start+0xe6>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003b50:	e00b      	b.n	8003b6a <HAL_TIM_PWM_Start+0xfe>
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	2b10      	cmp	r3, #16
 8003b56:	d104      	bne.n	8003b62 <HAL_TIM_PWM_Start+0xf6>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b60:	e003      	b.n	8003b6a <HAL_TIM_PWM_Start+0xfe>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2202      	movs	r2, #2
 8003b66:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	6839      	ldr	r1, [r7, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 fd00 	bl	8004578 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a33      	ldr	r2, [pc, #204]	@ (8003c4c <HAL_TIM_PWM_Start+0x1e0>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d013      	beq.n	8003baa <HAL_TIM_PWM_Start+0x13e>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a32      	ldr	r2, [pc, #200]	@ (8003c50 <HAL_TIM_PWM_Start+0x1e4>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d00e      	beq.n	8003baa <HAL_TIM_PWM_Start+0x13e>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a30      	ldr	r2, [pc, #192]	@ (8003c54 <HAL_TIM_PWM_Start+0x1e8>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d009      	beq.n	8003baa <HAL_TIM_PWM_Start+0x13e>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a2f      	ldr	r2, [pc, #188]	@ (8003c58 <HAL_TIM_PWM_Start+0x1ec>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d004      	beq.n	8003baa <HAL_TIM_PWM_Start+0x13e>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a2d      	ldr	r2, [pc, #180]	@ (8003c5c <HAL_TIM_PWM_Start+0x1f0>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d101      	bne.n	8003bae <HAL_TIM_PWM_Start+0x142>
 8003baa:	2301      	movs	r3, #1
 8003bac:	e000      	b.n	8003bb0 <HAL_TIM_PWM_Start+0x144>
 8003bae:	2300      	movs	r3, #0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d007      	beq.n	8003bc4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bc2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a20      	ldr	r2, [pc, #128]	@ (8003c4c <HAL_TIM_PWM_Start+0x1e0>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d018      	beq.n	8003c00 <HAL_TIM_PWM_Start+0x194>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bd6:	d013      	beq.n	8003c00 <HAL_TIM_PWM_Start+0x194>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a20      	ldr	r2, [pc, #128]	@ (8003c60 <HAL_TIM_PWM_Start+0x1f4>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d00e      	beq.n	8003c00 <HAL_TIM_PWM_Start+0x194>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a1f      	ldr	r2, [pc, #124]	@ (8003c64 <HAL_TIM_PWM_Start+0x1f8>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d009      	beq.n	8003c00 <HAL_TIM_PWM_Start+0x194>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a17      	ldr	r2, [pc, #92]	@ (8003c50 <HAL_TIM_PWM_Start+0x1e4>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d004      	beq.n	8003c00 <HAL_TIM_PWM_Start+0x194>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a16      	ldr	r2, [pc, #88]	@ (8003c54 <HAL_TIM_PWM_Start+0x1e8>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d115      	bne.n	8003c2c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689a      	ldr	r2, [r3, #8]
 8003c06:	4b18      	ldr	r3, [pc, #96]	@ (8003c68 <HAL_TIM_PWM_Start+0x1fc>)
 8003c08:	4013      	ands	r3, r2
 8003c0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2b06      	cmp	r3, #6
 8003c10:	d015      	beq.n	8003c3e <HAL_TIM_PWM_Start+0x1d2>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c18:	d011      	beq.n	8003c3e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f042 0201 	orr.w	r2, r2, #1
 8003c28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c2a:	e008      	b.n	8003c3e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 0201 	orr.w	r2, r2, #1
 8003c3a:	601a      	str	r2, [r3, #0]
 8003c3c:	e000      	b.n	8003c40 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	40012c00 	.word	0x40012c00
 8003c50:	40013400 	.word	0x40013400
 8003c54:	40014000 	.word	0x40014000
 8003c58:	40014400 	.word	0x40014400
 8003c5c:	40014800 	.word	0x40014800
 8003c60:	40000400 	.word	0x40000400
 8003c64:	40000800 	.word	0x40000800
 8003c68:	00010007 	.word	0x00010007

08003c6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d101      	bne.n	8003c8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c86:	2302      	movs	r3, #2
 8003c88:	e0ff      	b.n	8003e8a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2b14      	cmp	r3, #20
 8003c96:	f200 80f0 	bhi.w	8003e7a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8003ca0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca0:	08003cf5 	.word	0x08003cf5
 8003ca4:	08003e7b 	.word	0x08003e7b
 8003ca8:	08003e7b 	.word	0x08003e7b
 8003cac:	08003e7b 	.word	0x08003e7b
 8003cb0:	08003d35 	.word	0x08003d35
 8003cb4:	08003e7b 	.word	0x08003e7b
 8003cb8:	08003e7b 	.word	0x08003e7b
 8003cbc:	08003e7b 	.word	0x08003e7b
 8003cc0:	08003d77 	.word	0x08003d77
 8003cc4:	08003e7b 	.word	0x08003e7b
 8003cc8:	08003e7b 	.word	0x08003e7b
 8003ccc:	08003e7b 	.word	0x08003e7b
 8003cd0:	08003db7 	.word	0x08003db7
 8003cd4:	08003e7b 	.word	0x08003e7b
 8003cd8:	08003e7b 	.word	0x08003e7b
 8003cdc:	08003e7b 	.word	0x08003e7b
 8003ce0:	08003df9 	.word	0x08003df9
 8003ce4:	08003e7b 	.word	0x08003e7b
 8003ce8:	08003e7b 	.word	0x08003e7b
 8003cec:	08003e7b 	.word	0x08003e7b
 8003cf0:	08003e39 	.word	0x08003e39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68b9      	ldr	r1, [r7, #8]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 f966 	bl	8003fcc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	699a      	ldr	r2, [r3, #24]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0208 	orr.w	r2, r2, #8
 8003d0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	699a      	ldr	r2, [r3, #24]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 0204 	bic.w	r2, r2, #4
 8003d1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6999      	ldr	r1, [r3, #24]
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	691a      	ldr	r2, [r3, #16]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	619a      	str	r2, [r3, #24]
      break;
 8003d32:	e0a5      	b.n	8003e80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68b9      	ldr	r1, [r7, #8]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 f9d6 	bl	80040ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	699a      	ldr	r2, [r3, #24]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	699a      	ldr	r2, [r3, #24]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6999      	ldr	r1, [r3, #24]
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	021a      	lsls	r2, r3, #8
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	619a      	str	r2, [r3, #24]
      break;
 8003d74:	e084      	b.n	8003e80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68b9      	ldr	r1, [r7, #8]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 fa3f 	bl	8004200 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	69da      	ldr	r2, [r3, #28]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f042 0208 	orr.w	r2, r2, #8
 8003d90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69da      	ldr	r2, [r3, #28]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 0204 	bic.w	r2, r2, #4
 8003da0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	69d9      	ldr	r1, [r3, #28]
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	691a      	ldr	r2, [r3, #16]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	61da      	str	r2, [r3, #28]
      break;
 8003db4:	e064      	b.n	8003e80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68b9      	ldr	r1, [r7, #8]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 faa7 	bl	8004310 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	69da      	ldr	r2, [r3, #28]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	69da      	ldr	r2, [r3, #28]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003de0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	69d9      	ldr	r1, [r3, #28]
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	021a      	lsls	r2, r3, #8
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	61da      	str	r2, [r3, #28]
      break;
 8003df6:	e043      	b.n	8003e80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68b9      	ldr	r1, [r7, #8]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 faf0 	bl	80043e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f042 0208 	orr.w	r2, r2, #8
 8003e12:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 0204 	bic.w	r2, r2, #4
 8003e22:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	691a      	ldr	r2, [r3, #16]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003e36:	e023      	b.n	8003e80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68b9      	ldr	r1, [r7, #8]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f000 fb34 	bl	80044ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e52:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e62:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	021a      	lsls	r2, r3, #8
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003e78:	e002      	b.n	8003e80 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	75fb      	strb	r3, [r7, #23]
      break;
 8003e7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop

08003e94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a42      	ldr	r2, [pc, #264]	@ (8003fb0 <TIM_Base_SetConfig+0x11c>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d00f      	beq.n	8003ecc <TIM_Base_SetConfig+0x38>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eb2:	d00b      	beq.n	8003ecc <TIM_Base_SetConfig+0x38>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a3f      	ldr	r2, [pc, #252]	@ (8003fb4 <TIM_Base_SetConfig+0x120>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d007      	beq.n	8003ecc <TIM_Base_SetConfig+0x38>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a3e      	ldr	r2, [pc, #248]	@ (8003fb8 <TIM_Base_SetConfig+0x124>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d003      	beq.n	8003ecc <TIM_Base_SetConfig+0x38>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a3d      	ldr	r2, [pc, #244]	@ (8003fbc <TIM_Base_SetConfig+0x128>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d108      	bne.n	8003ede <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ed2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a33      	ldr	r2, [pc, #204]	@ (8003fb0 <TIM_Base_SetConfig+0x11c>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d01b      	beq.n	8003f1e <TIM_Base_SetConfig+0x8a>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eec:	d017      	beq.n	8003f1e <TIM_Base_SetConfig+0x8a>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a30      	ldr	r2, [pc, #192]	@ (8003fb4 <TIM_Base_SetConfig+0x120>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d013      	beq.n	8003f1e <TIM_Base_SetConfig+0x8a>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a2f      	ldr	r2, [pc, #188]	@ (8003fb8 <TIM_Base_SetConfig+0x124>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00f      	beq.n	8003f1e <TIM_Base_SetConfig+0x8a>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a2e      	ldr	r2, [pc, #184]	@ (8003fbc <TIM_Base_SetConfig+0x128>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d00b      	beq.n	8003f1e <TIM_Base_SetConfig+0x8a>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a2d      	ldr	r2, [pc, #180]	@ (8003fc0 <TIM_Base_SetConfig+0x12c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d007      	beq.n	8003f1e <TIM_Base_SetConfig+0x8a>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a2c      	ldr	r2, [pc, #176]	@ (8003fc4 <TIM_Base_SetConfig+0x130>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d003      	beq.n	8003f1e <TIM_Base_SetConfig+0x8a>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a2b      	ldr	r2, [pc, #172]	@ (8003fc8 <TIM_Base_SetConfig+0x134>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d108      	bne.n	8003f30 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a16      	ldr	r2, [pc, #88]	@ (8003fb0 <TIM_Base_SetConfig+0x11c>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d00f      	beq.n	8003f7c <TIM_Base_SetConfig+0xe8>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a17      	ldr	r2, [pc, #92]	@ (8003fbc <TIM_Base_SetConfig+0x128>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d00b      	beq.n	8003f7c <TIM_Base_SetConfig+0xe8>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a16      	ldr	r2, [pc, #88]	@ (8003fc0 <TIM_Base_SetConfig+0x12c>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d007      	beq.n	8003f7c <TIM_Base_SetConfig+0xe8>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a15      	ldr	r2, [pc, #84]	@ (8003fc4 <TIM_Base_SetConfig+0x130>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d003      	beq.n	8003f7c <TIM_Base_SetConfig+0xe8>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a14      	ldr	r2, [pc, #80]	@ (8003fc8 <TIM_Base_SetConfig+0x134>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d103      	bne.n	8003f84 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	691a      	ldr	r2, [r3, #16]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d105      	bne.n	8003fa2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	f023 0201 	bic.w	r2, r3, #1
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	611a      	str	r2, [r3, #16]
  }
}
 8003fa2:	bf00      	nop
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	40012c00 	.word	0x40012c00
 8003fb4:	40000400 	.word	0x40000400
 8003fb8:	40000800 	.word	0x40000800
 8003fbc:	40013400 	.word	0x40013400
 8003fc0:	40014000 	.word	0x40014000
 8003fc4:	40014400 	.word	0x40014400
 8003fc8:	40014800 	.word	0x40014800

08003fcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b087      	sub	sp, #28
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	f023 0201 	bic.w	r2, r3, #1
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ffa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f023 0303 	bic.w	r3, r3, #3
 8004006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	4313      	orrs	r3, r2
 8004010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f023 0302 	bic.w	r3, r3, #2
 8004018:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	4313      	orrs	r3, r2
 8004022:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a2c      	ldr	r2, [pc, #176]	@ (80040d8 <TIM_OC1_SetConfig+0x10c>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d00f      	beq.n	800404c <TIM_OC1_SetConfig+0x80>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a2b      	ldr	r2, [pc, #172]	@ (80040dc <TIM_OC1_SetConfig+0x110>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d00b      	beq.n	800404c <TIM_OC1_SetConfig+0x80>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a2a      	ldr	r2, [pc, #168]	@ (80040e0 <TIM_OC1_SetConfig+0x114>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d007      	beq.n	800404c <TIM_OC1_SetConfig+0x80>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a29      	ldr	r2, [pc, #164]	@ (80040e4 <TIM_OC1_SetConfig+0x118>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d003      	beq.n	800404c <TIM_OC1_SetConfig+0x80>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a28      	ldr	r2, [pc, #160]	@ (80040e8 <TIM_OC1_SetConfig+0x11c>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d10c      	bne.n	8004066 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	f023 0308 	bic.w	r3, r3, #8
 8004052:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	4313      	orrs	r3, r2
 800405c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f023 0304 	bic.w	r3, r3, #4
 8004064:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a1b      	ldr	r2, [pc, #108]	@ (80040d8 <TIM_OC1_SetConfig+0x10c>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d00f      	beq.n	800408e <TIM_OC1_SetConfig+0xc2>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a1a      	ldr	r2, [pc, #104]	@ (80040dc <TIM_OC1_SetConfig+0x110>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d00b      	beq.n	800408e <TIM_OC1_SetConfig+0xc2>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a19      	ldr	r2, [pc, #100]	@ (80040e0 <TIM_OC1_SetConfig+0x114>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d007      	beq.n	800408e <TIM_OC1_SetConfig+0xc2>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a18      	ldr	r2, [pc, #96]	@ (80040e4 <TIM_OC1_SetConfig+0x118>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d003      	beq.n	800408e <TIM_OC1_SetConfig+0xc2>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a17      	ldr	r2, [pc, #92]	@ (80040e8 <TIM_OC1_SetConfig+0x11c>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d111      	bne.n	80040b2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004094:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800409c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	621a      	str	r2, [r3, #32]
}
 80040cc:	bf00      	nop
 80040ce:	371c      	adds	r7, #28
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr
 80040d8:	40012c00 	.word	0x40012c00
 80040dc:	40013400 	.word	0x40013400
 80040e0:	40014000 	.word	0x40014000
 80040e4:	40014400 	.word	0x40014400
 80040e8:	40014800 	.word	0x40014800

080040ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	f023 0210 	bic.w	r2, r3, #16
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800411a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800411e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004126:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	021b      	lsls	r3, r3, #8
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	4313      	orrs	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	f023 0320 	bic.w	r3, r3, #32
 800413a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	011b      	lsls	r3, r3, #4
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	4313      	orrs	r3, r2
 8004146:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a28      	ldr	r2, [pc, #160]	@ (80041ec <TIM_OC2_SetConfig+0x100>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d003      	beq.n	8004158 <TIM_OC2_SetConfig+0x6c>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a27      	ldr	r2, [pc, #156]	@ (80041f0 <TIM_OC2_SetConfig+0x104>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d10d      	bne.n	8004174 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800415e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	011b      	lsls	r3, r3, #4
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	4313      	orrs	r3, r2
 800416a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004172:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a1d      	ldr	r2, [pc, #116]	@ (80041ec <TIM_OC2_SetConfig+0x100>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d00f      	beq.n	800419c <TIM_OC2_SetConfig+0xb0>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a1c      	ldr	r2, [pc, #112]	@ (80041f0 <TIM_OC2_SetConfig+0x104>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d00b      	beq.n	800419c <TIM_OC2_SetConfig+0xb0>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a1b      	ldr	r2, [pc, #108]	@ (80041f4 <TIM_OC2_SetConfig+0x108>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d007      	beq.n	800419c <TIM_OC2_SetConfig+0xb0>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a1a      	ldr	r2, [pc, #104]	@ (80041f8 <TIM_OC2_SetConfig+0x10c>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d003      	beq.n	800419c <TIM_OC2_SetConfig+0xb0>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a19      	ldr	r2, [pc, #100]	@ (80041fc <TIM_OC2_SetConfig+0x110>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d113      	bne.n	80041c4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80041a2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80041aa:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	621a      	str	r2, [r3, #32]
}
 80041de:	bf00      	nop
 80041e0:	371c      	adds	r7, #28
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	40012c00 	.word	0x40012c00
 80041f0:	40013400 	.word	0x40013400
 80041f4:	40014000 	.word	0x40014000
 80041f8:	40014400 	.word	0x40014400
 80041fc:	40014800 	.word	0x40014800

08004200 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004200:	b480      	push	{r7}
 8004202:	b087      	sub	sp, #28
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a1b      	ldr	r3, [r3, #32]
 8004214:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800422e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f023 0303 	bic.w	r3, r3, #3
 800423a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	4313      	orrs	r3, r2
 8004244:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800424c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	021b      	lsls	r3, r3, #8
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	4313      	orrs	r3, r2
 8004258:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a27      	ldr	r2, [pc, #156]	@ (80042fc <TIM_OC3_SetConfig+0xfc>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d003      	beq.n	800426a <TIM_OC3_SetConfig+0x6a>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a26      	ldr	r2, [pc, #152]	@ (8004300 <TIM_OC3_SetConfig+0x100>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d10d      	bne.n	8004286 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004270:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	021b      	lsls	r3, r3, #8
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	4313      	orrs	r3, r2
 800427c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004284:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a1c      	ldr	r2, [pc, #112]	@ (80042fc <TIM_OC3_SetConfig+0xfc>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d00f      	beq.n	80042ae <TIM_OC3_SetConfig+0xae>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a1b      	ldr	r2, [pc, #108]	@ (8004300 <TIM_OC3_SetConfig+0x100>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d00b      	beq.n	80042ae <TIM_OC3_SetConfig+0xae>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a1a      	ldr	r2, [pc, #104]	@ (8004304 <TIM_OC3_SetConfig+0x104>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d007      	beq.n	80042ae <TIM_OC3_SetConfig+0xae>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a19      	ldr	r2, [pc, #100]	@ (8004308 <TIM_OC3_SetConfig+0x108>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d003      	beq.n	80042ae <TIM_OC3_SetConfig+0xae>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a18      	ldr	r2, [pc, #96]	@ (800430c <TIM_OC3_SetConfig+0x10c>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d113      	bne.n	80042d6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80042b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80042bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	011b      	lsls	r3, r3, #4
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	011b      	lsls	r3, r3, #4
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	621a      	str	r2, [r3, #32]
}
 80042f0:	bf00      	nop
 80042f2:	371c      	adds	r7, #28
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	40012c00 	.word	0x40012c00
 8004300:	40013400 	.word	0x40013400
 8004304:	40014000 	.word	0x40014000
 8004308:	40014400 	.word	0x40014400
 800430c:	40014800 	.word	0x40014800

08004310 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004310:	b480      	push	{r7}
 8004312:	b087      	sub	sp, #28
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800433e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004342:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800434a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	021b      	lsls	r3, r3, #8
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	4313      	orrs	r3, r2
 8004356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800435e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	031b      	lsls	r3, r3, #12
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	4313      	orrs	r3, r2
 800436a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a18      	ldr	r2, [pc, #96]	@ (80043d0 <TIM_OC4_SetConfig+0xc0>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d00f      	beq.n	8004394 <TIM_OC4_SetConfig+0x84>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a17      	ldr	r2, [pc, #92]	@ (80043d4 <TIM_OC4_SetConfig+0xc4>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d00b      	beq.n	8004394 <TIM_OC4_SetConfig+0x84>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a16      	ldr	r2, [pc, #88]	@ (80043d8 <TIM_OC4_SetConfig+0xc8>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d007      	beq.n	8004394 <TIM_OC4_SetConfig+0x84>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a15      	ldr	r2, [pc, #84]	@ (80043dc <TIM_OC4_SetConfig+0xcc>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d003      	beq.n	8004394 <TIM_OC4_SetConfig+0x84>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a14      	ldr	r2, [pc, #80]	@ (80043e0 <TIM_OC4_SetConfig+0xd0>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d109      	bne.n	80043a8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800439a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	019b      	lsls	r3, r3, #6
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	621a      	str	r2, [r3, #32]
}
 80043c2:	bf00      	nop
 80043c4:	371c      	adds	r7, #28
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	40012c00 	.word	0x40012c00
 80043d4:	40013400 	.word	0x40013400
 80043d8:	40014000 	.word	0x40014000
 80043dc:	40014400 	.word	0x40014400
 80043e0:	40014800 	.word	0x40014800

080043e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b087      	sub	sp, #28
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800440a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004412:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004416:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	4313      	orrs	r3, r2
 8004420:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004428:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	041b      	lsls	r3, r3, #16
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	4313      	orrs	r3, r2
 8004434:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a17      	ldr	r2, [pc, #92]	@ (8004498 <TIM_OC5_SetConfig+0xb4>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d00f      	beq.n	800445e <TIM_OC5_SetConfig+0x7a>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a16      	ldr	r2, [pc, #88]	@ (800449c <TIM_OC5_SetConfig+0xb8>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d00b      	beq.n	800445e <TIM_OC5_SetConfig+0x7a>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a15      	ldr	r2, [pc, #84]	@ (80044a0 <TIM_OC5_SetConfig+0xbc>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d007      	beq.n	800445e <TIM_OC5_SetConfig+0x7a>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a14      	ldr	r2, [pc, #80]	@ (80044a4 <TIM_OC5_SetConfig+0xc0>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d003      	beq.n	800445e <TIM_OC5_SetConfig+0x7a>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a13      	ldr	r2, [pc, #76]	@ (80044a8 <TIM_OC5_SetConfig+0xc4>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d109      	bne.n	8004472 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004464:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	021b      	lsls	r3, r3, #8
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	4313      	orrs	r3, r2
 8004470:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	621a      	str	r2, [r3, #32]
}
 800448c:	bf00      	nop
 800448e:	371c      	adds	r7, #28
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr
 8004498:	40012c00 	.word	0x40012c00
 800449c:	40013400 	.word	0x40013400
 80044a0:	40014000 	.word	0x40014000
 80044a4:	40014400 	.word	0x40014400
 80044a8:	40014800 	.word	0x40014800

080044ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	021b      	lsls	r3, r3, #8
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80044f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	051b      	lsls	r3, r3, #20
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a18      	ldr	r2, [pc, #96]	@ (8004564 <TIM_OC6_SetConfig+0xb8>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d00f      	beq.n	8004528 <TIM_OC6_SetConfig+0x7c>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a17      	ldr	r2, [pc, #92]	@ (8004568 <TIM_OC6_SetConfig+0xbc>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d00b      	beq.n	8004528 <TIM_OC6_SetConfig+0x7c>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a16      	ldr	r2, [pc, #88]	@ (800456c <TIM_OC6_SetConfig+0xc0>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d007      	beq.n	8004528 <TIM_OC6_SetConfig+0x7c>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a15      	ldr	r2, [pc, #84]	@ (8004570 <TIM_OC6_SetConfig+0xc4>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d003      	beq.n	8004528 <TIM_OC6_SetConfig+0x7c>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a14      	ldr	r2, [pc, #80]	@ (8004574 <TIM_OC6_SetConfig+0xc8>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d109      	bne.n	800453c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800452e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	029b      	lsls	r3, r3, #10
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	4313      	orrs	r3, r2
 800453a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	621a      	str	r2, [r3, #32]
}
 8004556:	bf00      	nop
 8004558:	371c      	adds	r7, #28
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	40012c00 	.word	0x40012c00
 8004568:	40013400 	.word	0x40013400
 800456c:	40014000 	.word	0x40014000
 8004570:	40014400 	.word	0x40014400
 8004574:	40014800 	.word	0x40014800

08004578 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004578:	b480      	push	{r7}
 800457a:	b087      	sub	sp, #28
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	f003 031f 	and.w	r3, r3, #31
 800458a:	2201      	movs	r2, #1
 800458c:	fa02 f303 	lsl.w	r3, r2, r3
 8004590:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6a1a      	ldr	r2, [r3, #32]
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	43db      	mvns	r3, r3
 800459a:	401a      	ands	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6a1a      	ldr	r2, [r3, #32]
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f003 031f 	and.w	r3, r3, #31
 80045aa:	6879      	ldr	r1, [r7, #4]
 80045ac:	fa01 f303 	lsl.w	r3, r1, r3
 80045b0:	431a      	orrs	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	621a      	str	r2, [r3, #32]
}
 80045b6:	bf00      	nop
 80045b8:	371c      	adds	r7, #28
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
	...

080045c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d101      	bne.n	80045dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045d8:	2302      	movs	r3, #2
 80045da:	e063      	b.n	80046a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2202      	movs	r2, #2
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a2b      	ldr	r2, [pc, #172]	@ (80046b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d004      	beq.n	8004610 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a2a      	ldr	r2, [pc, #168]	@ (80046b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d108      	bne.n	8004622 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004616:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	4313      	orrs	r3, r2
 8004620:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004628:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	4313      	orrs	r3, r2
 8004632:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a1b      	ldr	r2, [pc, #108]	@ (80046b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d018      	beq.n	8004678 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800464e:	d013      	beq.n	8004678 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a18      	ldr	r2, [pc, #96]	@ (80046b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d00e      	beq.n	8004678 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a17      	ldr	r2, [pc, #92]	@ (80046bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d009      	beq.n	8004678 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a12      	ldr	r2, [pc, #72]	@ (80046b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d004      	beq.n	8004678 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a13      	ldr	r2, [pc, #76]	@ (80046c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d10c      	bne.n	8004692 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800467e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	68ba      	ldr	r2, [r7, #8]
 8004686:	4313      	orrs	r3, r2
 8004688:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3714      	adds	r7, #20
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr
 80046b0:	40012c00 	.word	0x40012c00
 80046b4:	40013400 	.word	0x40013400
 80046b8:	40000400 	.word	0x40000400
 80046bc:	40000800 	.word	0x40000800
 80046c0:	40014000 	.word	0x40014000

080046c4 <malloc>:
 80046c4:	4b02      	ldr	r3, [pc, #8]	@ (80046d0 <malloc+0xc>)
 80046c6:	4601      	mov	r1, r0
 80046c8:	6818      	ldr	r0, [r3, #0]
 80046ca:	f000 b825 	b.w	8004718 <_malloc_r>
 80046ce:	bf00      	nop
 80046d0:	20000128 	.word	0x20000128

080046d4 <sbrk_aligned>:
 80046d4:	b570      	push	{r4, r5, r6, lr}
 80046d6:	4e0f      	ldr	r6, [pc, #60]	@ (8004714 <sbrk_aligned+0x40>)
 80046d8:	460c      	mov	r4, r1
 80046da:	6831      	ldr	r1, [r6, #0]
 80046dc:	4605      	mov	r5, r0
 80046de:	b911      	cbnz	r1, 80046e6 <sbrk_aligned+0x12>
 80046e0:	f000 f8ce 	bl	8004880 <_sbrk_r>
 80046e4:	6030      	str	r0, [r6, #0]
 80046e6:	4621      	mov	r1, r4
 80046e8:	4628      	mov	r0, r5
 80046ea:	f000 f8c9 	bl	8004880 <_sbrk_r>
 80046ee:	1c43      	adds	r3, r0, #1
 80046f0:	d103      	bne.n	80046fa <sbrk_aligned+0x26>
 80046f2:	f04f 34ff 	mov.w	r4, #4294967295
 80046f6:	4620      	mov	r0, r4
 80046f8:	bd70      	pop	{r4, r5, r6, pc}
 80046fa:	1cc4      	adds	r4, r0, #3
 80046fc:	f024 0403 	bic.w	r4, r4, #3
 8004700:	42a0      	cmp	r0, r4
 8004702:	d0f8      	beq.n	80046f6 <sbrk_aligned+0x22>
 8004704:	1a21      	subs	r1, r4, r0
 8004706:	4628      	mov	r0, r5
 8004708:	f000 f8ba 	bl	8004880 <_sbrk_r>
 800470c:	3001      	adds	r0, #1
 800470e:	d1f2      	bne.n	80046f6 <sbrk_aligned+0x22>
 8004710:	e7ef      	b.n	80046f2 <sbrk_aligned+0x1e>
 8004712:	bf00      	nop
 8004714:	20000358 	.word	0x20000358

08004718 <_malloc_r>:
 8004718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800471c:	1ccd      	adds	r5, r1, #3
 800471e:	f025 0503 	bic.w	r5, r5, #3
 8004722:	3508      	adds	r5, #8
 8004724:	2d0c      	cmp	r5, #12
 8004726:	bf38      	it	cc
 8004728:	250c      	movcc	r5, #12
 800472a:	2d00      	cmp	r5, #0
 800472c:	4606      	mov	r6, r0
 800472e:	db01      	blt.n	8004734 <_malloc_r+0x1c>
 8004730:	42a9      	cmp	r1, r5
 8004732:	d904      	bls.n	800473e <_malloc_r+0x26>
 8004734:	230c      	movs	r3, #12
 8004736:	6033      	str	r3, [r6, #0]
 8004738:	2000      	movs	r0, #0
 800473a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800473e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004814 <_malloc_r+0xfc>
 8004742:	f000 f869 	bl	8004818 <__malloc_lock>
 8004746:	f8d8 3000 	ldr.w	r3, [r8]
 800474a:	461c      	mov	r4, r3
 800474c:	bb44      	cbnz	r4, 80047a0 <_malloc_r+0x88>
 800474e:	4629      	mov	r1, r5
 8004750:	4630      	mov	r0, r6
 8004752:	f7ff ffbf 	bl	80046d4 <sbrk_aligned>
 8004756:	1c43      	adds	r3, r0, #1
 8004758:	4604      	mov	r4, r0
 800475a:	d158      	bne.n	800480e <_malloc_r+0xf6>
 800475c:	f8d8 4000 	ldr.w	r4, [r8]
 8004760:	4627      	mov	r7, r4
 8004762:	2f00      	cmp	r7, #0
 8004764:	d143      	bne.n	80047ee <_malloc_r+0xd6>
 8004766:	2c00      	cmp	r4, #0
 8004768:	d04b      	beq.n	8004802 <_malloc_r+0xea>
 800476a:	6823      	ldr	r3, [r4, #0]
 800476c:	4639      	mov	r1, r7
 800476e:	4630      	mov	r0, r6
 8004770:	eb04 0903 	add.w	r9, r4, r3
 8004774:	f000 f884 	bl	8004880 <_sbrk_r>
 8004778:	4581      	cmp	r9, r0
 800477a:	d142      	bne.n	8004802 <_malloc_r+0xea>
 800477c:	6821      	ldr	r1, [r4, #0]
 800477e:	1a6d      	subs	r5, r5, r1
 8004780:	4629      	mov	r1, r5
 8004782:	4630      	mov	r0, r6
 8004784:	f7ff ffa6 	bl	80046d4 <sbrk_aligned>
 8004788:	3001      	adds	r0, #1
 800478a:	d03a      	beq.n	8004802 <_malloc_r+0xea>
 800478c:	6823      	ldr	r3, [r4, #0]
 800478e:	442b      	add	r3, r5
 8004790:	6023      	str	r3, [r4, #0]
 8004792:	f8d8 3000 	ldr.w	r3, [r8]
 8004796:	685a      	ldr	r2, [r3, #4]
 8004798:	bb62      	cbnz	r2, 80047f4 <_malloc_r+0xdc>
 800479a:	f8c8 7000 	str.w	r7, [r8]
 800479e:	e00f      	b.n	80047c0 <_malloc_r+0xa8>
 80047a0:	6822      	ldr	r2, [r4, #0]
 80047a2:	1b52      	subs	r2, r2, r5
 80047a4:	d420      	bmi.n	80047e8 <_malloc_r+0xd0>
 80047a6:	2a0b      	cmp	r2, #11
 80047a8:	d917      	bls.n	80047da <_malloc_r+0xc2>
 80047aa:	1961      	adds	r1, r4, r5
 80047ac:	42a3      	cmp	r3, r4
 80047ae:	6025      	str	r5, [r4, #0]
 80047b0:	bf18      	it	ne
 80047b2:	6059      	strne	r1, [r3, #4]
 80047b4:	6863      	ldr	r3, [r4, #4]
 80047b6:	bf08      	it	eq
 80047b8:	f8c8 1000 	streq.w	r1, [r8]
 80047bc:	5162      	str	r2, [r4, r5]
 80047be:	604b      	str	r3, [r1, #4]
 80047c0:	4630      	mov	r0, r6
 80047c2:	f000 f82f 	bl	8004824 <__malloc_unlock>
 80047c6:	f104 000b 	add.w	r0, r4, #11
 80047ca:	1d23      	adds	r3, r4, #4
 80047cc:	f020 0007 	bic.w	r0, r0, #7
 80047d0:	1ac2      	subs	r2, r0, r3
 80047d2:	bf1c      	itt	ne
 80047d4:	1a1b      	subne	r3, r3, r0
 80047d6:	50a3      	strne	r3, [r4, r2]
 80047d8:	e7af      	b.n	800473a <_malloc_r+0x22>
 80047da:	6862      	ldr	r2, [r4, #4]
 80047dc:	42a3      	cmp	r3, r4
 80047de:	bf0c      	ite	eq
 80047e0:	f8c8 2000 	streq.w	r2, [r8]
 80047e4:	605a      	strne	r2, [r3, #4]
 80047e6:	e7eb      	b.n	80047c0 <_malloc_r+0xa8>
 80047e8:	4623      	mov	r3, r4
 80047ea:	6864      	ldr	r4, [r4, #4]
 80047ec:	e7ae      	b.n	800474c <_malloc_r+0x34>
 80047ee:	463c      	mov	r4, r7
 80047f0:	687f      	ldr	r7, [r7, #4]
 80047f2:	e7b6      	b.n	8004762 <_malloc_r+0x4a>
 80047f4:	461a      	mov	r2, r3
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	42a3      	cmp	r3, r4
 80047fa:	d1fb      	bne.n	80047f4 <_malloc_r+0xdc>
 80047fc:	2300      	movs	r3, #0
 80047fe:	6053      	str	r3, [r2, #4]
 8004800:	e7de      	b.n	80047c0 <_malloc_r+0xa8>
 8004802:	230c      	movs	r3, #12
 8004804:	6033      	str	r3, [r6, #0]
 8004806:	4630      	mov	r0, r6
 8004808:	f000 f80c 	bl	8004824 <__malloc_unlock>
 800480c:	e794      	b.n	8004738 <_malloc_r+0x20>
 800480e:	6005      	str	r5, [r0, #0]
 8004810:	e7d6      	b.n	80047c0 <_malloc_r+0xa8>
 8004812:	bf00      	nop
 8004814:	2000035c 	.word	0x2000035c

08004818 <__malloc_lock>:
 8004818:	4801      	ldr	r0, [pc, #4]	@ (8004820 <__malloc_lock+0x8>)
 800481a:	f000 b86b 	b.w	80048f4 <__retarget_lock_acquire_recursive>
 800481e:	bf00      	nop
 8004820:	2000049c 	.word	0x2000049c

08004824 <__malloc_unlock>:
 8004824:	4801      	ldr	r0, [pc, #4]	@ (800482c <__malloc_unlock+0x8>)
 8004826:	f000 b866 	b.w	80048f6 <__retarget_lock_release_recursive>
 800482a:	bf00      	nop
 800482c:	2000049c 	.word	0x2000049c

08004830 <siprintf>:
 8004830:	b40e      	push	{r1, r2, r3}
 8004832:	b500      	push	{lr}
 8004834:	b09c      	sub	sp, #112	@ 0x70
 8004836:	ab1d      	add	r3, sp, #116	@ 0x74
 8004838:	9002      	str	r0, [sp, #8]
 800483a:	9006      	str	r0, [sp, #24]
 800483c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004840:	4809      	ldr	r0, [pc, #36]	@ (8004868 <siprintf+0x38>)
 8004842:	9107      	str	r1, [sp, #28]
 8004844:	9104      	str	r1, [sp, #16]
 8004846:	4909      	ldr	r1, [pc, #36]	@ (800486c <siprintf+0x3c>)
 8004848:	f853 2b04 	ldr.w	r2, [r3], #4
 800484c:	9105      	str	r1, [sp, #20]
 800484e:	6800      	ldr	r0, [r0, #0]
 8004850:	9301      	str	r3, [sp, #4]
 8004852:	a902      	add	r1, sp, #8
 8004854:	f000 f8f6 	bl	8004a44 <_svfiprintf_r>
 8004858:	9b02      	ldr	r3, [sp, #8]
 800485a:	2200      	movs	r2, #0
 800485c:	701a      	strb	r2, [r3, #0]
 800485e:	b01c      	add	sp, #112	@ 0x70
 8004860:	f85d eb04 	ldr.w	lr, [sp], #4
 8004864:	b003      	add	sp, #12
 8004866:	4770      	bx	lr
 8004868:	20000128 	.word	0x20000128
 800486c:	ffff0208 	.word	0xffff0208

08004870 <memset>:
 8004870:	4402      	add	r2, r0
 8004872:	4603      	mov	r3, r0
 8004874:	4293      	cmp	r3, r2
 8004876:	d100      	bne.n	800487a <memset+0xa>
 8004878:	4770      	bx	lr
 800487a:	f803 1b01 	strb.w	r1, [r3], #1
 800487e:	e7f9      	b.n	8004874 <memset+0x4>

08004880 <_sbrk_r>:
 8004880:	b538      	push	{r3, r4, r5, lr}
 8004882:	4d06      	ldr	r5, [pc, #24]	@ (800489c <_sbrk_r+0x1c>)
 8004884:	2300      	movs	r3, #0
 8004886:	4604      	mov	r4, r0
 8004888:	4608      	mov	r0, r1
 800488a:	602b      	str	r3, [r5, #0]
 800488c:	f7fd f928 	bl	8001ae0 <_sbrk>
 8004890:	1c43      	adds	r3, r0, #1
 8004892:	d102      	bne.n	800489a <_sbrk_r+0x1a>
 8004894:	682b      	ldr	r3, [r5, #0]
 8004896:	b103      	cbz	r3, 800489a <_sbrk_r+0x1a>
 8004898:	6023      	str	r3, [r4, #0]
 800489a:	bd38      	pop	{r3, r4, r5, pc}
 800489c:	20000498 	.word	0x20000498

080048a0 <__errno>:
 80048a0:	4b01      	ldr	r3, [pc, #4]	@ (80048a8 <__errno+0x8>)
 80048a2:	6818      	ldr	r0, [r3, #0]
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	20000128 	.word	0x20000128

080048ac <__libc_init_array>:
 80048ac:	b570      	push	{r4, r5, r6, lr}
 80048ae:	4d0d      	ldr	r5, [pc, #52]	@ (80048e4 <__libc_init_array+0x38>)
 80048b0:	4c0d      	ldr	r4, [pc, #52]	@ (80048e8 <__libc_init_array+0x3c>)
 80048b2:	1b64      	subs	r4, r4, r5
 80048b4:	10a4      	asrs	r4, r4, #2
 80048b6:	2600      	movs	r6, #0
 80048b8:	42a6      	cmp	r6, r4
 80048ba:	d109      	bne.n	80048d0 <__libc_init_array+0x24>
 80048bc:	4d0b      	ldr	r5, [pc, #44]	@ (80048ec <__libc_init_array+0x40>)
 80048be:	4c0c      	ldr	r4, [pc, #48]	@ (80048f0 <__libc_init_array+0x44>)
 80048c0:	f000 fba8 	bl	8005014 <_init>
 80048c4:	1b64      	subs	r4, r4, r5
 80048c6:	10a4      	asrs	r4, r4, #2
 80048c8:	2600      	movs	r6, #0
 80048ca:	42a6      	cmp	r6, r4
 80048cc:	d105      	bne.n	80048da <__libc_init_array+0x2e>
 80048ce:	bd70      	pop	{r4, r5, r6, pc}
 80048d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80048d4:	4798      	blx	r3
 80048d6:	3601      	adds	r6, #1
 80048d8:	e7ee      	b.n	80048b8 <__libc_init_array+0xc>
 80048da:	f855 3b04 	ldr.w	r3, [r5], #4
 80048de:	4798      	blx	r3
 80048e0:	3601      	adds	r6, #1
 80048e2:	e7f2      	b.n	80048ca <__libc_init_array+0x1e>
 80048e4:	08005330 	.word	0x08005330
 80048e8:	08005330 	.word	0x08005330
 80048ec:	08005330 	.word	0x08005330
 80048f0:	08005334 	.word	0x08005334

080048f4 <__retarget_lock_acquire_recursive>:
 80048f4:	4770      	bx	lr

080048f6 <__retarget_lock_release_recursive>:
 80048f6:	4770      	bx	lr

080048f8 <_free_r>:
 80048f8:	b538      	push	{r3, r4, r5, lr}
 80048fa:	4605      	mov	r5, r0
 80048fc:	2900      	cmp	r1, #0
 80048fe:	d041      	beq.n	8004984 <_free_r+0x8c>
 8004900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004904:	1f0c      	subs	r4, r1, #4
 8004906:	2b00      	cmp	r3, #0
 8004908:	bfb8      	it	lt
 800490a:	18e4      	addlt	r4, r4, r3
 800490c:	f7ff ff84 	bl	8004818 <__malloc_lock>
 8004910:	4a1d      	ldr	r2, [pc, #116]	@ (8004988 <_free_r+0x90>)
 8004912:	6813      	ldr	r3, [r2, #0]
 8004914:	b933      	cbnz	r3, 8004924 <_free_r+0x2c>
 8004916:	6063      	str	r3, [r4, #4]
 8004918:	6014      	str	r4, [r2, #0]
 800491a:	4628      	mov	r0, r5
 800491c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004920:	f7ff bf80 	b.w	8004824 <__malloc_unlock>
 8004924:	42a3      	cmp	r3, r4
 8004926:	d908      	bls.n	800493a <_free_r+0x42>
 8004928:	6820      	ldr	r0, [r4, #0]
 800492a:	1821      	adds	r1, r4, r0
 800492c:	428b      	cmp	r3, r1
 800492e:	bf01      	itttt	eq
 8004930:	6819      	ldreq	r1, [r3, #0]
 8004932:	685b      	ldreq	r3, [r3, #4]
 8004934:	1809      	addeq	r1, r1, r0
 8004936:	6021      	streq	r1, [r4, #0]
 8004938:	e7ed      	b.n	8004916 <_free_r+0x1e>
 800493a:	461a      	mov	r2, r3
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	b10b      	cbz	r3, 8004944 <_free_r+0x4c>
 8004940:	42a3      	cmp	r3, r4
 8004942:	d9fa      	bls.n	800493a <_free_r+0x42>
 8004944:	6811      	ldr	r1, [r2, #0]
 8004946:	1850      	adds	r0, r2, r1
 8004948:	42a0      	cmp	r0, r4
 800494a:	d10b      	bne.n	8004964 <_free_r+0x6c>
 800494c:	6820      	ldr	r0, [r4, #0]
 800494e:	4401      	add	r1, r0
 8004950:	1850      	adds	r0, r2, r1
 8004952:	4283      	cmp	r3, r0
 8004954:	6011      	str	r1, [r2, #0]
 8004956:	d1e0      	bne.n	800491a <_free_r+0x22>
 8004958:	6818      	ldr	r0, [r3, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	6053      	str	r3, [r2, #4]
 800495e:	4408      	add	r0, r1
 8004960:	6010      	str	r0, [r2, #0]
 8004962:	e7da      	b.n	800491a <_free_r+0x22>
 8004964:	d902      	bls.n	800496c <_free_r+0x74>
 8004966:	230c      	movs	r3, #12
 8004968:	602b      	str	r3, [r5, #0]
 800496a:	e7d6      	b.n	800491a <_free_r+0x22>
 800496c:	6820      	ldr	r0, [r4, #0]
 800496e:	1821      	adds	r1, r4, r0
 8004970:	428b      	cmp	r3, r1
 8004972:	bf04      	itt	eq
 8004974:	6819      	ldreq	r1, [r3, #0]
 8004976:	685b      	ldreq	r3, [r3, #4]
 8004978:	6063      	str	r3, [r4, #4]
 800497a:	bf04      	itt	eq
 800497c:	1809      	addeq	r1, r1, r0
 800497e:	6021      	streq	r1, [r4, #0]
 8004980:	6054      	str	r4, [r2, #4]
 8004982:	e7ca      	b.n	800491a <_free_r+0x22>
 8004984:	bd38      	pop	{r3, r4, r5, pc}
 8004986:	bf00      	nop
 8004988:	2000035c 	.word	0x2000035c

0800498c <__ssputs_r>:
 800498c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004990:	688e      	ldr	r6, [r1, #8]
 8004992:	461f      	mov	r7, r3
 8004994:	42be      	cmp	r6, r7
 8004996:	680b      	ldr	r3, [r1, #0]
 8004998:	4682      	mov	sl, r0
 800499a:	460c      	mov	r4, r1
 800499c:	4690      	mov	r8, r2
 800499e:	d82d      	bhi.n	80049fc <__ssputs_r+0x70>
 80049a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80049a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80049a8:	d026      	beq.n	80049f8 <__ssputs_r+0x6c>
 80049aa:	6965      	ldr	r5, [r4, #20]
 80049ac:	6909      	ldr	r1, [r1, #16]
 80049ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80049b2:	eba3 0901 	sub.w	r9, r3, r1
 80049b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80049ba:	1c7b      	adds	r3, r7, #1
 80049bc:	444b      	add	r3, r9
 80049be:	106d      	asrs	r5, r5, #1
 80049c0:	429d      	cmp	r5, r3
 80049c2:	bf38      	it	cc
 80049c4:	461d      	movcc	r5, r3
 80049c6:	0553      	lsls	r3, r2, #21
 80049c8:	d527      	bpl.n	8004a1a <__ssputs_r+0x8e>
 80049ca:	4629      	mov	r1, r5
 80049cc:	f7ff fea4 	bl	8004718 <_malloc_r>
 80049d0:	4606      	mov	r6, r0
 80049d2:	b360      	cbz	r0, 8004a2e <__ssputs_r+0xa2>
 80049d4:	6921      	ldr	r1, [r4, #16]
 80049d6:	464a      	mov	r2, r9
 80049d8:	f000 fad8 	bl	8004f8c <memcpy>
 80049dc:	89a3      	ldrh	r3, [r4, #12]
 80049de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80049e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049e6:	81a3      	strh	r3, [r4, #12]
 80049e8:	6126      	str	r6, [r4, #16]
 80049ea:	6165      	str	r5, [r4, #20]
 80049ec:	444e      	add	r6, r9
 80049ee:	eba5 0509 	sub.w	r5, r5, r9
 80049f2:	6026      	str	r6, [r4, #0]
 80049f4:	60a5      	str	r5, [r4, #8]
 80049f6:	463e      	mov	r6, r7
 80049f8:	42be      	cmp	r6, r7
 80049fa:	d900      	bls.n	80049fe <__ssputs_r+0x72>
 80049fc:	463e      	mov	r6, r7
 80049fe:	6820      	ldr	r0, [r4, #0]
 8004a00:	4632      	mov	r2, r6
 8004a02:	4641      	mov	r1, r8
 8004a04:	f000 faa8 	bl	8004f58 <memmove>
 8004a08:	68a3      	ldr	r3, [r4, #8]
 8004a0a:	1b9b      	subs	r3, r3, r6
 8004a0c:	60a3      	str	r3, [r4, #8]
 8004a0e:	6823      	ldr	r3, [r4, #0]
 8004a10:	4433      	add	r3, r6
 8004a12:	6023      	str	r3, [r4, #0]
 8004a14:	2000      	movs	r0, #0
 8004a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a1a:	462a      	mov	r2, r5
 8004a1c:	f000 fac4 	bl	8004fa8 <_realloc_r>
 8004a20:	4606      	mov	r6, r0
 8004a22:	2800      	cmp	r0, #0
 8004a24:	d1e0      	bne.n	80049e8 <__ssputs_r+0x5c>
 8004a26:	6921      	ldr	r1, [r4, #16]
 8004a28:	4650      	mov	r0, sl
 8004a2a:	f7ff ff65 	bl	80048f8 <_free_r>
 8004a2e:	230c      	movs	r3, #12
 8004a30:	f8ca 3000 	str.w	r3, [sl]
 8004a34:	89a3      	ldrh	r3, [r4, #12]
 8004a36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a3a:	81a3      	strh	r3, [r4, #12]
 8004a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a40:	e7e9      	b.n	8004a16 <__ssputs_r+0x8a>
	...

08004a44 <_svfiprintf_r>:
 8004a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a48:	4698      	mov	r8, r3
 8004a4a:	898b      	ldrh	r3, [r1, #12]
 8004a4c:	061b      	lsls	r3, r3, #24
 8004a4e:	b09d      	sub	sp, #116	@ 0x74
 8004a50:	4607      	mov	r7, r0
 8004a52:	460d      	mov	r5, r1
 8004a54:	4614      	mov	r4, r2
 8004a56:	d510      	bpl.n	8004a7a <_svfiprintf_r+0x36>
 8004a58:	690b      	ldr	r3, [r1, #16]
 8004a5a:	b973      	cbnz	r3, 8004a7a <_svfiprintf_r+0x36>
 8004a5c:	2140      	movs	r1, #64	@ 0x40
 8004a5e:	f7ff fe5b 	bl	8004718 <_malloc_r>
 8004a62:	6028      	str	r0, [r5, #0]
 8004a64:	6128      	str	r0, [r5, #16]
 8004a66:	b930      	cbnz	r0, 8004a76 <_svfiprintf_r+0x32>
 8004a68:	230c      	movs	r3, #12
 8004a6a:	603b      	str	r3, [r7, #0]
 8004a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a70:	b01d      	add	sp, #116	@ 0x74
 8004a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a76:	2340      	movs	r3, #64	@ 0x40
 8004a78:	616b      	str	r3, [r5, #20]
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a7e:	2320      	movs	r3, #32
 8004a80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004a84:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a88:	2330      	movs	r3, #48	@ 0x30
 8004a8a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004c28 <_svfiprintf_r+0x1e4>
 8004a8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004a92:	f04f 0901 	mov.w	r9, #1
 8004a96:	4623      	mov	r3, r4
 8004a98:	469a      	mov	sl, r3
 8004a9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a9e:	b10a      	cbz	r2, 8004aa4 <_svfiprintf_r+0x60>
 8004aa0:	2a25      	cmp	r2, #37	@ 0x25
 8004aa2:	d1f9      	bne.n	8004a98 <_svfiprintf_r+0x54>
 8004aa4:	ebba 0b04 	subs.w	fp, sl, r4
 8004aa8:	d00b      	beq.n	8004ac2 <_svfiprintf_r+0x7e>
 8004aaa:	465b      	mov	r3, fp
 8004aac:	4622      	mov	r2, r4
 8004aae:	4629      	mov	r1, r5
 8004ab0:	4638      	mov	r0, r7
 8004ab2:	f7ff ff6b 	bl	800498c <__ssputs_r>
 8004ab6:	3001      	adds	r0, #1
 8004ab8:	f000 80a7 	beq.w	8004c0a <_svfiprintf_r+0x1c6>
 8004abc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004abe:	445a      	add	r2, fp
 8004ac0:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ac2:	f89a 3000 	ldrb.w	r3, [sl]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f000 809f 	beq.w	8004c0a <_svfiprintf_r+0x1c6>
 8004acc:	2300      	movs	r3, #0
 8004ace:	f04f 32ff 	mov.w	r2, #4294967295
 8004ad2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ad6:	f10a 0a01 	add.w	sl, sl, #1
 8004ada:	9304      	str	r3, [sp, #16]
 8004adc:	9307      	str	r3, [sp, #28]
 8004ade:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004ae2:	931a      	str	r3, [sp, #104]	@ 0x68
 8004ae4:	4654      	mov	r4, sl
 8004ae6:	2205      	movs	r2, #5
 8004ae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004aec:	484e      	ldr	r0, [pc, #312]	@ (8004c28 <_svfiprintf_r+0x1e4>)
 8004aee:	f7fb fb7f 	bl	80001f0 <memchr>
 8004af2:	9a04      	ldr	r2, [sp, #16]
 8004af4:	b9d8      	cbnz	r0, 8004b2e <_svfiprintf_r+0xea>
 8004af6:	06d0      	lsls	r0, r2, #27
 8004af8:	bf44      	itt	mi
 8004afa:	2320      	movmi	r3, #32
 8004afc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b00:	0711      	lsls	r1, r2, #28
 8004b02:	bf44      	itt	mi
 8004b04:	232b      	movmi	r3, #43	@ 0x2b
 8004b06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b0a:	f89a 3000 	ldrb.w	r3, [sl]
 8004b0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b10:	d015      	beq.n	8004b3e <_svfiprintf_r+0xfa>
 8004b12:	9a07      	ldr	r2, [sp, #28]
 8004b14:	4654      	mov	r4, sl
 8004b16:	2000      	movs	r0, #0
 8004b18:	f04f 0c0a 	mov.w	ip, #10
 8004b1c:	4621      	mov	r1, r4
 8004b1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b22:	3b30      	subs	r3, #48	@ 0x30
 8004b24:	2b09      	cmp	r3, #9
 8004b26:	d94b      	bls.n	8004bc0 <_svfiprintf_r+0x17c>
 8004b28:	b1b0      	cbz	r0, 8004b58 <_svfiprintf_r+0x114>
 8004b2a:	9207      	str	r2, [sp, #28]
 8004b2c:	e014      	b.n	8004b58 <_svfiprintf_r+0x114>
 8004b2e:	eba0 0308 	sub.w	r3, r0, r8
 8004b32:	fa09 f303 	lsl.w	r3, r9, r3
 8004b36:	4313      	orrs	r3, r2
 8004b38:	9304      	str	r3, [sp, #16]
 8004b3a:	46a2      	mov	sl, r4
 8004b3c:	e7d2      	b.n	8004ae4 <_svfiprintf_r+0xa0>
 8004b3e:	9b03      	ldr	r3, [sp, #12]
 8004b40:	1d19      	adds	r1, r3, #4
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	9103      	str	r1, [sp, #12]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	bfbb      	ittet	lt
 8004b4a:	425b      	neglt	r3, r3
 8004b4c:	f042 0202 	orrlt.w	r2, r2, #2
 8004b50:	9307      	strge	r3, [sp, #28]
 8004b52:	9307      	strlt	r3, [sp, #28]
 8004b54:	bfb8      	it	lt
 8004b56:	9204      	strlt	r2, [sp, #16]
 8004b58:	7823      	ldrb	r3, [r4, #0]
 8004b5a:	2b2e      	cmp	r3, #46	@ 0x2e
 8004b5c:	d10a      	bne.n	8004b74 <_svfiprintf_r+0x130>
 8004b5e:	7863      	ldrb	r3, [r4, #1]
 8004b60:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b62:	d132      	bne.n	8004bca <_svfiprintf_r+0x186>
 8004b64:	9b03      	ldr	r3, [sp, #12]
 8004b66:	1d1a      	adds	r2, r3, #4
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	9203      	str	r2, [sp, #12]
 8004b6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004b70:	3402      	adds	r4, #2
 8004b72:	9305      	str	r3, [sp, #20]
 8004b74:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004c38 <_svfiprintf_r+0x1f4>
 8004b78:	7821      	ldrb	r1, [r4, #0]
 8004b7a:	2203      	movs	r2, #3
 8004b7c:	4650      	mov	r0, sl
 8004b7e:	f7fb fb37 	bl	80001f0 <memchr>
 8004b82:	b138      	cbz	r0, 8004b94 <_svfiprintf_r+0x150>
 8004b84:	9b04      	ldr	r3, [sp, #16]
 8004b86:	eba0 000a 	sub.w	r0, r0, sl
 8004b8a:	2240      	movs	r2, #64	@ 0x40
 8004b8c:	4082      	lsls	r2, r0
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	3401      	adds	r4, #1
 8004b92:	9304      	str	r3, [sp, #16]
 8004b94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b98:	4824      	ldr	r0, [pc, #144]	@ (8004c2c <_svfiprintf_r+0x1e8>)
 8004b9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004b9e:	2206      	movs	r2, #6
 8004ba0:	f7fb fb26 	bl	80001f0 <memchr>
 8004ba4:	2800      	cmp	r0, #0
 8004ba6:	d036      	beq.n	8004c16 <_svfiprintf_r+0x1d2>
 8004ba8:	4b21      	ldr	r3, [pc, #132]	@ (8004c30 <_svfiprintf_r+0x1ec>)
 8004baa:	bb1b      	cbnz	r3, 8004bf4 <_svfiprintf_r+0x1b0>
 8004bac:	9b03      	ldr	r3, [sp, #12]
 8004bae:	3307      	adds	r3, #7
 8004bb0:	f023 0307 	bic.w	r3, r3, #7
 8004bb4:	3308      	adds	r3, #8
 8004bb6:	9303      	str	r3, [sp, #12]
 8004bb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bba:	4433      	add	r3, r6
 8004bbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004bbe:	e76a      	b.n	8004a96 <_svfiprintf_r+0x52>
 8004bc0:	fb0c 3202 	mla	r2, ip, r2, r3
 8004bc4:	460c      	mov	r4, r1
 8004bc6:	2001      	movs	r0, #1
 8004bc8:	e7a8      	b.n	8004b1c <_svfiprintf_r+0xd8>
 8004bca:	2300      	movs	r3, #0
 8004bcc:	3401      	adds	r4, #1
 8004bce:	9305      	str	r3, [sp, #20]
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	f04f 0c0a 	mov.w	ip, #10
 8004bd6:	4620      	mov	r0, r4
 8004bd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bdc:	3a30      	subs	r2, #48	@ 0x30
 8004bde:	2a09      	cmp	r2, #9
 8004be0:	d903      	bls.n	8004bea <_svfiprintf_r+0x1a6>
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d0c6      	beq.n	8004b74 <_svfiprintf_r+0x130>
 8004be6:	9105      	str	r1, [sp, #20]
 8004be8:	e7c4      	b.n	8004b74 <_svfiprintf_r+0x130>
 8004bea:	fb0c 2101 	mla	r1, ip, r1, r2
 8004bee:	4604      	mov	r4, r0
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e7f0      	b.n	8004bd6 <_svfiprintf_r+0x192>
 8004bf4:	ab03      	add	r3, sp, #12
 8004bf6:	9300      	str	r3, [sp, #0]
 8004bf8:	462a      	mov	r2, r5
 8004bfa:	4b0e      	ldr	r3, [pc, #56]	@ (8004c34 <_svfiprintf_r+0x1f0>)
 8004bfc:	a904      	add	r1, sp, #16
 8004bfe:	4638      	mov	r0, r7
 8004c00:	f3af 8000 	nop.w
 8004c04:	1c42      	adds	r2, r0, #1
 8004c06:	4606      	mov	r6, r0
 8004c08:	d1d6      	bne.n	8004bb8 <_svfiprintf_r+0x174>
 8004c0a:	89ab      	ldrh	r3, [r5, #12]
 8004c0c:	065b      	lsls	r3, r3, #25
 8004c0e:	f53f af2d 	bmi.w	8004a6c <_svfiprintf_r+0x28>
 8004c12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004c14:	e72c      	b.n	8004a70 <_svfiprintf_r+0x2c>
 8004c16:	ab03      	add	r3, sp, #12
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	462a      	mov	r2, r5
 8004c1c:	4b05      	ldr	r3, [pc, #20]	@ (8004c34 <_svfiprintf_r+0x1f0>)
 8004c1e:	a904      	add	r1, sp, #16
 8004c20:	4638      	mov	r0, r7
 8004c22:	f000 f879 	bl	8004d18 <_printf_i>
 8004c26:	e7ed      	b.n	8004c04 <_svfiprintf_r+0x1c0>
 8004c28:	080052f4 	.word	0x080052f4
 8004c2c:	080052fe 	.word	0x080052fe
 8004c30:	00000000 	.word	0x00000000
 8004c34:	0800498d 	.word	0x0800498d
 8004c38:	080052fa 	.word	0x080052fa

08004c3c <_printf_common>:
 8004c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c40:	4616      	mov	r6, r2
 8004c42:	4698      	mov	r8, r3
 8004c44:	688a      	ldr	r2, [r1, #8]
 8004c46:	690b      	ldr	r3, [r1, #16]
 8004c48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	bfb8      	it	lt
 8004c50:	4613      	movlt	r3, r2
 8004c52:	6033      	str	r3, [r6, #0]
 8004c54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004c58:	4607      	mov	r7, r0
 8004c5a:	460c      	mov	r4, r1
 8004c5c:	b10a      	cbz	r2, 8004c62 <_printf_common+0x26>
 8004c5e:	3301      	adds	r3, #1
 8004c60:	6033      	str	r3, [r6, #0]
 8004c62:	6823      	ldr	r3, [r4, #0]
 8004c64:	0699      	lsls	r1, r3, #26
 8004c66:	bf42      	ittt	mi
 8004c68:	6833      	ldrmi	r3, [r6, #0]
 8004c6a:	3302      	addmi	r3, #2
 8004c6c:	6033      	strmi	r3, [r6, #0]
 8004c6e:	6825      	ldr	r5, [r4, #0]
 8004c70:	f015 0506 	ands.w	r5, r5, #6
 8004c74:	d106      	bne.n	8004c84 <_printf_common+0x48>
 8004c76:	f104 0a19 	add.w	sl, r4, #25
 8004c7a:	68e3      	ldr	r3, [r4, #12]
 8004c7c:	6832      	ldr	r2, [r6, #0]
 8004c7e:	1a9b      	subs	r3, r3, r2
 8004c80:	42ab      	cmp	r3, r5
 8004c82:	dc26      	bgt.n	8004cd2 <_printf_common+0x96>
 8004c84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004c88:	6822      	ldr	r2, [r4, #0]
 8004c8a:	3b00      	subs	r3, #0
 8004c8c:	bf18      	it	ne
 8004c8e:	2301      	movne	r3, #1
 8004c90:	0692      	lsls	r2, r2, #26
 8004c92:	d42b      	bmi.n	8004cec <_printf_common+0xb0>
 8004c94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004c98:	4641      	mov	r1, r8
 8004c9a:	4638      	mov	r0, r7
 8004c9c:	47c8      	blx	r9
 8004c9e:	3001      	adds	r0, #1
 8004ca0:	d01e      	beq.n	8004ce0 <_printf_common+0xa4>
 8004ca2:	6823      	ldr	r3, [r4, #0]
 8004ca4:	6922      	ldr	r2, [r4, #16]
 8004ca6:	f003 0306 	and.w	r3, r3, #6
 8004caa:	2b04      	cmp	r3, #4
 8004cac:	bf02      	ittt	eq
 8004cae:	68e5      	ldreq	r5, [r4, #12]
 8004cb0:	6833      	ldreq	r3, [r6, #0]
 8004cb2:	1aed      	subeq	r5, r5, r3
 8004cb4:	68a3      	ldr	r3, [r4, #8]
 8004cb6:	bf0c      	ite	eq
 8004cb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cbc:	2500      	movne	r5, #0
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	bfc4      	itt	gt
 8004cc2:	1a9b      	subgt	r3, r3, r2
 8004cc4:	18ed      	addgt	r5, r5, r3
 8004cc6:	2600      	movs	r6, #0
 8004cc8:	341a      	adds	r4, #26
 8004cca:	42b5      	cmp	r5, r6
 8004ccc:	d11a      	bne.n	8004d04 <_printf_common+0xc8>
 8004cce:	2000      	movs	r0, #0
 8004cd0:	e008      	b.n	8004ce4 <_printf_common+0xa8>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	4652      	mov	r2, sl
 8004cd6:	4641      	mov	r1, r8
 8004cd8:	4638      	mov	r0, r7
 8004cda:	47c8      	blx	r9
 8004cdc:	3001      	adds	r0, #1
 8004cde:	d103      	bne.n	8004ce8 <_printf_common+0xac>
 8004ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ce8:	3501      	adds	r5, #1
 8004cea:	e7c6      	b.n	8004c7a <_printf_common+0x3e>
 8004cec:	18e1      	adds	r1, r4, r3
 8004cee:	1c5a      	adds	r2, r3, #1
 8004cf0:	2030      	movs	r0, #48	@ 0x30
 8004cf2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004cf6:	4422      	add	r2, r4
 8004cf8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004cfc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004d00:	3302      	adds	r3, #2
 8004d02:	e7c7      	b.n	8004c94 <_printf_common+0x58>
 8004d04:	2301      	movs	r3, #1
 8004d06:	4622      	mov	r2, r4
 8004d08:	4641      	mov	r1, r8
 8004d0a:	4638      	mov	r0, r7
 8004d0c:	47c8      	blx	r9
 8004d0e:	3001      	adds	r0, #1
 8004d10:	d0e6      	beq.n	8004ce0 <_printf_common+0xa4>
 8004d12:	3601      	adds	r6, #1
 8004d14:	e7d9      	b.n	8004cca <_printf_common+0x8e>
	...

08004d18 <_printf_i>:
 8004d18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d1c:	7e0f      	ldrb	r7, [r1, #24]
 8004d1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004d20:	2f78      	cmp	r7, #120	@ 0x78
 8004d22:	4691      	mov	r9, r2
 8004d24:	4680      	mov	r8, r0
 8004d26:	460c      	mov	r4, r1
 8004d28:	469a      	mov	sl, r3
 8004d2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004d2e:	d807      	bhi.n	8004d40 <_printf_i+0x28>
 8004d30:	2f62      	cmp	r7, #98	@ 0x62
 8004d32:	d80a      	bhi.n	8004d4a <_printf_i+0x32>
 8004d34:	2f00      	cmp	r7, #0
 8004d36:	f000 80d2 	beq.w	8004ede <_printf_i+0x1c6>
 8004d3a:	2f58      	cmp	r7, #88	@ 0x58
 8004d3c:	f000 80b9 	beq.w	8004eb2 <_printf_i+0x19a>
 8004d40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004d48:	e03a      	b.n	8004dc0 <_printf_i+0xa8>
 8004d4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004d4e:	2b15      	cmp	r3, #21
 8004d50:	d8f6      	bhi.n	8004d40 <_printf_i+0x28>
 8004d52:	a101      	add	r1, pc, #4	@ (adr r1, 8004d58 <_printf_i+0x40>)
 8004d54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d58:	08004db1 	.word	0x08004db1
 8004d5c:	08004dc5 	.word	0x08004dc5
 8004d60:	08004d41 	.word	0x08004d41
 8004d64:	08004d41 	.word	0x08004d41
 8004d68:	08004d41 	.word	0x08004d41
 8004d6c:	08004d41 	.word	0x08004d41
 8004d70:	08004dc5 	.word	0x08004dc5
 8004d74:	08004d41 	.word	0x08004d41
 8004d78:	08004d41 	.word	0x08004d41
 8004d7c:	08004d41 	.word	0x08004d41
 8004d80:	08004d41 	.word	0x08004d41
 8004d84:	08004ec5 	.word	0x08004ec5
 8004d88:	08004def 	.word	0x08004def
 8004d8c:	08004e7f 	.word	0x08004e7f
 8004d90:	08004d41 	.word	0x08004d41
 8004d94:	08004d41 	.word	0x08004d41
 8004d98:	08004ee7 	.word	0x08004ee7
 8004d9c:	08004d41 	.word	0x08004d41
 8004da0:	08004def 	.word	0x08004def
 8004da4:	08004d41 	.word	0x08004d41
 8004da8:	08004d41 	.word	0x08004d41
 8004dac:	08004e87 	.word	0x08004e87
 8004db0:	6833      	ldr	r3, [r6, #0]
 8004db2:	1d1a      	adds	r2, r3, #4
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	6032      	str	r2, [r6, #0]
 8004db8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004dbc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e09d      	b.n	8004f00 <_printf_i+0x1e8>
 8004dc4:	6833      	ldr	r3, [r6, #0]
 8004dc6:	6820      	ldr	r0, [r4, #0]
 8004dc8:	1d19      	adds	r1, r3, #4
 8004dca:	6031      	str	r1, [r6, #0]
 8004dcc:	0606      	lsls	r6, r0, #24
 8004dce:	d501      	bpl.n	8004dd4 <_printf_i+0xbc>
 8004dd0:	681d      	ldr	r5, [r3, #0]
 8004dd2:	e003      	b.n	8004ddc <_printf_i+0xc4>
 8004dd4:	0645      	lsls	r5, r0, #25
 8004dd6:	d5fb      	bpl.n	8004dd0 <_printf_i+0xb8>
 8004dd8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004ddc:	2d00      	cmp	r5, #0
 8004dde:	da03      	bge.n	8004de8 <_printf_i+0xd0>
 8004de0:	232d      	movs	r3, #45	@ 0x2d
 8004de2:	426d      	negs	r5, r5
 8004de4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004de8:	4859      	ldr	r0, [pc, #356]	@ (8004f50 <_printf_i+0x238>)
 8004dea:	230a      	movs	r3, #10
 8004dec:	e011      	b.n	8004e12 <_printf_i+0xfa>
 8004dee:	6821      	ldr	r1, [r4, #0]
 8004df0:	6833      	ldr	r3, [r6, #0]
 8004df2:	0608      	lsls	r0, r1, #24
 8004df4:	f853 5b04 	ldr.w	r5, [r3], #4
 8004df8:	d402      	bmi.n	8004e00 <_printf_i+0xe8>
 8004dfa:	0649      	lsls	r1, r1, #25
 8004dfc:	bf48      	it	mi
 8004dfe:	b2ad      	uxthmi	r5, r5
 8004e00:	2f6f      	cmp	r7, #111	@ 0x6f
 8004e02:	4853      	ldr	r0, [pc, #332]	@ (8004f50 <_printf_i+0x238>)
 8004e04:	6033      	str	r3, [r6, #0]
 8004e06:	bf14      	ite	ne
 8004e08:	230a      	movne	r3, #10
 8004e0a:	2308      	moveq	r3, #8
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004e12:	6866      	ldr	r6, [r4, #4]
 8004e14:	60a6      	str	r6, [r4, #8]
 8004e16:	2e00      	cmp	r6, #0
 8004e18:	bfa2      	ittt	ge
 8004e1a:	6821      	ldrge	r1, [r4, #0]
 8004e1c:	f021 0104 	bicge.w	r1, r1, #4
 8004e20:	6021      	strge	r1, [r4, #0]
 8004e22:	b90d      	cbnz	r5, 8004e28 <_printf_i+0x110>
 8004e24:	2e00      	cmp	r6, #0
 8004e26:	d04b      	beq.n	8004ec0 <_printf_i+0x1a8>
 8004e28:	4616      	mov	r6, r2
 8004e2a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e2e:	fb03 5711 	mls	r7, r3, r1, r5
 8004e32:	5dc7      	ldrb	r7, [r0, r7]
 8004e34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e38:	462f      	mov	r7, r5
 8004e3a:	42bb      	cmp	r3, r7
 8004e3c:	460d      	mov	r5, r1
 8004e3e:	d9f4      	bls.n	8004e2a <_printf_i+0x112>
 8004e40:	2b08      	cmp	r3, #8
 8004e42:	d10b      	bne.n	8004e5c <_printf_i+0x144>
 8004e44:	6823      	ldr	r3, [r4, #0]
 8004e46:	07df      	lsls	r7, r3, #31
 8004e48:	d508      	bpl.n	8004e5c <_printf_i+0x144>
 8004e4a:	6923      	ldr	r3, [r4, #16]
 8004e4c:	6861      	ldr	r1, [r4, #4]
 8004e4e:	4299      	cmp	r1, r3
 8004e50:	bfde      	ittt	le
 8004e52:	2330      	movle	r3, #48	@ 0x30
 8004e54:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e58:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004e5c:	1b92      	subs	r2, r2, r6
 8004e5e:	6122      	str	r2, [r4, #16]
 8004e60:	f8cd a000 	str.w	sl, [sp]
 8004e64:	464b      	mov	r3, r9
 8004e66:	aa03      	add	r2, sp, #12
 8004e68:	4621      	mov	r1, r4
 8004e6a:	4640      	mov	r0, r8
 8004e6c:	f7ff fee6 	bl	8004c3c <_printf_common>
 8004e70:	3001      	adds	r0, #1
 8004e72:	d14a      	bne.n	8004f0a <_printf_i+0x1f2>
 8004e74:	f04f 30ff 	mov.w	r0, #4294967295
 8004e78:	b004      	add	sp, #16
 8004e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e7e:	6823      	ldr	r3, [r4, #0]
 8004e80:	f043 0320 	orr.w	r3, r3, #32
 8004e84:	6023      	str	r3, [r4, #0]
 8004e86:	4833      	ldr	r0, [pc, #204]	@ (8004f54 <_printf_i+0x23c>)
 8004e88:	2778      	movs	r7, #120	@ 0x78
 8004e8a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004e8e:	6823      	ldr	r3, [r4, #0]
 8004e90:	6831      	ldr	r1, [r6, #0]
 8004e92:	061f      	lsls	r7, r3, #24
 8004e94:	f851 5b04 	ldr.w	r5, [r1], #4
 8004e98:	d402      	bmi.n	8004ea0 <_printf_i+0x188>
 8004e9a:	065f      	lsls	r7, r3, #25
 8004e9c:	bf48      	it	mi
 8004e9e:	b2ad      	uxthmi	r5, r5
 8004ea0:	6031      	str	r1, [r6, #0]
 8004ea2:	07d9      	lsls	r1, r3, #31
 8004ea4:	bf44      	itt	mi
 8004ea6:	f043 0320 	orrmi.w	r3, r3, #32
 8004eaa:	6023      	strmi	r3, [r4, #0]
 8004eac:	b11d      	cbz	r5, 8004eb6 <_printf_i+0x19e>
 8004eae:	2310      	movs	r3, #16
 8004eb0:	e7ac      	b.n	8004e0c <_printf_i+0xf4>
 8004eb2:	4827      	ldr	r0, [pc, #156]	@ (8004f50 <_printf_i+0x238>)
 8004eb4:	e7e9      	b.n	8004e8a <_printf_i+0x172>
 8004eb6:	6823      	ldr	r3, [r4, #0]
 8004eb8:	f023 0320 	bic.w	r3, r3, #32
 8004ebc:	6023      	str	r3, [r4, #0]
 8004ebe:	e7f6      	b.n	8004eae <_printf_i+0x196>
 8004ec0:	4616      	mov	r6, r2
 8004ec2:	e7bd      	b.n	8004e40 <_printf_i+0x128>
 8004ec4:	6833      	ldr	r3, [r6, #0]
 8004ec6:	6825      	ldr	r5, [r4, #0]
 8004ec8:	6961      	ldr	r1, [r4, #20]
 8004eca:	1d18      	adds	r0, r3, #4
 8004ecc:	6030      	str	r0, [r6, #0]
 8004ece:	062e      	lsls	r6, r5, #24
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	d501      	bpl.n	8004ed8 <_printf_i+0x1c0>
 8004ed4:	6019      	str	r1, [r3, #0]
 8004ed6:	e002      	b.n	8004ede <_printf_i+0x1c6>
 8004ed8:	0668      	lsls	r0, r5, #25
 8004eda:	d5fb      	bpl.n	8004ed4 <_printf_i+0x1bc>
 8004edc:	8019      	strh	r1, [r3, #0]
 8004ede:	2300      	movs	r3, #0
 8004ee0:	6123      	str	r3, [r4, #16]
 8004ee2:	4616      	mov	r6, r2
 8004ee4:	e7bc      	b.n	8004e60 <_printf_i+0x148>
 8004ee6:	6833      	ldr	r3, [r6, #0]
 8004ee8:	1d1a      	adds	r2, r3, #4
 8004eea:	6032      	str	r2, [r6, #0]
 8004eec:	681e      	ldr	r6, [r3, #0]
 8004eee:	6862      	ldr	r2, [r4, #4]
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	4630      	mov	r0, r6
 8004ef4:	f7fb f97c 	bl	80001f0 <memchr>
 8004ef8:	b108      	cbz	r0, 8004efe <_printf_i+0x1e6>
 8004efa:	1b80      	subs	r0, r0, r6
 8004efc:	6060      	str	r0, [r4, #4]
 8004efe:	6863      	ldr	r3, [r4, #4]
 8004f00:	6123      	str	r3, [r4, #16]
 8004f02:	2300      	movs	r3, #0
 8004f04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f08:	e7aa      	b.n	8004e60 <_printf_i+0x148>
 8004f0a:	6923      	ldr	r3, [r4, #16]
 8004f0c:	4632      	mov	r2, r6
 8004f0e:	4649      	mov	r1, r9
 8004f10:	4640      	mov	r0, r8
 8004f12:	47d0      	blx	sl
 8004f14:	3001      	adds	r0, #1
 8004f16:	d0ad      	beq.n	8004e74 <_printf_i+0x15c>
 8004f18:	6823      	ldr	r3, [r4, #0]
 8004f1a:	079b      	lsls	r3, r3, #30
 8004f1c:	d413      	bmi.n	8004f46 <_printf_i+0x22e>
 8004f1e:	68e0      	ldr	r0, [r4, #12]
 8004f20:	9b03      	ldr	r3, [sp, #12]
 8004f22:	4298      	cmp	r0, r3
 8004f24:	bfb8      	it	lt
 8004f26:	4618      	movlt	r0, r3
 8004f28:	e7a6      	b.n	8004e78 <_printf_i+0x160>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	4632      	mov	r2, r6
 8004f2e:	4649      	mov	r1, r9
 8004f30:	4640      	mov	r0, r8
 8004f32:	47d0      	blx	sl
 8004f34:	3001      	adds	r0, #1
 8004f36:	d09d      	beq.n	8004e74 <_printf_i+0x15c>
 8004f38:	3501      	adds	r5, #1
 8004f3a:	68e3      	ldr	r3, [r4, #12]
 8004f3c:	9903      	ldr	r1, [sp, #12]
 8004f3e:	1a5b      	subs	r3, r3, r1
 8004f40:	42ab      	cmp	r3, r5
 8004f42:	dcf2      	bgt.n	8004f2a <_printf_i+0x212>
 8004f44:	e7eb      	b.n	8004f1e <_printf_i+0x206>
 8004f46:	2500      	movs	r5, #0
 8004f48:	f104 0619 	add.w	r6, r4, #25
 8004f4c:	e7f5      	b.n	8004f3a <_printf_i+0x222>
 8004f4e:	bf00      	nop
 8004f50:	08005305 	.word	0x08005305
 8004f54:	08005316 	.word	0x08005316

08004f58 <memmove>:
 8004f58:	4288      	cmp	r0, r1
 8004f5a:	b510      	push	{r4, lr}
 8004f5c:	eb01 0402 	add.w	r4, r1, r2
 8004f60:	d902      	bls.n	8004f68 <memmove+0x10>
 8004f62:	4284      	cmp	r4, r0
 8004f64:	4623      	mov	r3, r4
 8004f66:	d807      	bhi.n	8004f78 <memmove+0x20>
 8004f68:	1e43      	subs	r3, r0, #1
 8004f6a:	42a1      	cmp	r1, r4
 8004f6c:	d008      	beq.n	8004f80 <memmove+0x28>
 8004f6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f76:	e7f8      	b.n	8004f6a <memmove+0x12>
 8004f78:	4402      	add	r2, r0
 8004f7a:	4601      	mov	r1, r0
 8004f7c:	428a      	cmp	r2, r1
 8004f7e:	d100      	bne.n	8004f82 <memmove+0x2a>
 8004f80:	bd10      	pop	{r4, pc}
 8004f82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f8a:	e7f7      	b.n	8004f7c <memmove+0x24>

08004f8c <memcpy>:
 8004f8c:	440a      	add	r2, r1
 8004f8e:	4291      	cmp	r1, r2
 8004f90:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f94:	d100      	bne.n	8004f98 <memcpy+0xc>
 8004f96:	4770      	bx	lr
 8004f98:	b510      	push	{r4, lr}
 8004f9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fa2:	4291      	cmp	r1, r2
 8004fa4:	d1f9      	bne.n	8004f9a <memcpy+0xe>
 8004fa6:	bd10      	pop	{r4, pc}

08004fa8 <_realloc_r>:
 8004fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fac:	4680      	mov	r8, r0
 8004fae:	4615      	mov	r5, r2
 8004fb0:	460c      	mov	r4, r1
 8004fb2:	b921      	cbnz	r1, 8004fbe <_realloc_r+0x16>
 8004fb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fb8:	4611      	mov	r1, r2
 8004fba:	f7ff bbad 	b.w	8004718 <_malloc_r>
 8004fbe:	b92a      	cbnz	r2, 8004fcc <_realloc_r+0x24>
 8004fc0:	f7ff fc9a 	bl	80048f8 <_free_r>
 8004fc4:	2400      	movs	r4, #0
 8004fc6:	4620      	mov	r0, r4
 8004fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fcc:	f000 f81a 	bl	8005004 <_malloc_usable_size_r>
 8004fd0:	4285      	cmp	r5, r0
 8004fd2:	4606      	mov	r6, r0
 8004fd4:	d802      	bhi.n	8004fdc <_realloc_r+0x34>
 8004fd6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004fda:	d8f4      	bhi.n	8004fc6 <_realloc_r+0x1e>
 8004fdc:	4629      	mov	r1, r5
 8004fde:	4640      	mov	r0, r8
 8004fe0:	f7ff fb9a 	bl	8004718 <_malloc_r>
 8004fe4:	4607      	mov	r7, r0
 8004fe6:	2800      	cmp	r0, #0
 8004fe8:	d0ec      	beq.n	8004fc4 <_realloc_r+0x1c>
 8004fea:	42b5      	cmp	r5, r6
 8004fec:	462a      	mov	r2, r5
 8004fee:	4621      	mov	r1, r4
 8004ff0:	bf28      	it	cs
 8004ff2:	4632      	movcs	r2, r6
 8004ff4:	f7ff ffca 	bl	8004f8c <memcpy>
 8004ff8:	4621      	mov	r1, r4
 8004ffa:	4640      	mov	r0, r8
 8004ffc:	f7ff fc7c 	bl	80048f8 <_free_r>
 8005000:	463c      	mov	r4, r7
 8005002:	e7e0      	b.n	8004fc6 <_realloc_r+0x1e>

08005004 <_malloc_usable_size_r>:
 8005004:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005008:	1f18      	subs	r0, r3, #4
 800500a:	2b00      	cmp	r3, #0
 800500c:	bfbc      	itt	lt
 800500e:	580b      	ldrlt	r3, [r1, r0]
 8005010:	18c0      	addlt	r0, r0, r3
 8005012:	4770      	bx	lr

08005014 <_init>:
 8005014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005016:	bf00      	nop
 8005018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800501a:	bc08      	pop	{r3}
 800501c:	469e      	mov	lr, r3
 800501e:	4770      	bx	lr

08005020 <_fini>:
 8005020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005022:	bf00      	nop
 8005024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005026:	bc08      	pop	{r3}
 8005028:	469e      	mov	lr, r3
 800502a:	4770      	bx	lr
