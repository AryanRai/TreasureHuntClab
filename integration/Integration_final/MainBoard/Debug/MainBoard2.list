
MainBoard2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055a8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000880  08005738  08005738  00006738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fb8  08005fb8  00007178  2**0
                  CONTENTS
  4 .ARM          00000008  08005fb8  08005fb8  00006fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fc0  08005fc0  00007178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fc0  08005fc0  00006fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005fc4  08005fc4  00006fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000178  20000000  08005fc8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007178  2**0
                  CONTENTS
 10 .bss          00000324  20000178  20000178  00007178  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000049c  2000049c  00007178  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007178  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cdd2  00000000  00000000  000071a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fdd  00000000  00000000  00013f7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bf8  00000000  00000000  00015f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000944  00000000  00000000  00016b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dda1  00000000  00000000  00017494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dc82  00000000  00000000  00035235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b7352  00000000  00000000  00042eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fa209  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000037e8  00000000  00000000  000fa24c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008e  00000000  00000000  000fda34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000178 	.word	0x20000178
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005720 	.word	0x08005720

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000017c 	.word	0x2000017c
 80001cc:	08005720 	.word	0x08005720

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	2b00      	cmp	r3, #0
 8000290:	db0b      	blt.n	80002aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	f003 021f 	and.w	r2, r3, #31
 8000298:	4907      	ldr	r1, [pc, #28]	@ (80002b8 <__NVIC_EnableIRQ+0x38>)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	095b      	lsrs	r3, r3, #5
 80002a0:	2001      	movs	r0, #1
 80002a2:	fa00 f202 	lsl.w	r2, r0, r2
 80002a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000e100 	.word	0xe000e100

080002bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	6039      	str	r1, [r7, #0]
 80002c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	db0a      	blt.n	80002e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	b2da      	uxtb	r2, r3
 80002d4:	490c      	ldr	r1, [pc, #48]	@ (8000308 <__NVIC_SetPriority+0x4c>)
 80002d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002da:	0112      	lsls	r2, r2, #4
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	440b      	add	r3, r1
 80002e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002e4:	e00a      	b.n	80002fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	b2da      	uxtb	r2, r3
 80002ea:	4908      	ldr	r1, [pc, #32]	@ (800030c <__NVIC_SetPriority+0x50>)
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	f003 030f 	and.w	r3, r3, #15
 80002f2:	3b04      	subs	r3, #4
 80002f4:	0112      	lsls	r2, r2, #4
 80002f6:	b2d2      	uxtb	r2, r2
 80002f8:	440b      	add	r3, r1
 80002fa:	761a      	strb	r2, [r3, #24]
}
 80002fc:	bf00      	nop
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	e000e100 	.word	0xe000e100
 800030c:	e000ed00 	.word	0xe000ed00

08000310 <create_mask>:
 	uint8_t PIN_UPPER;

 } GPIO;


 uint32_t create_mask(uint8_t start, uint8_t end) {
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	460a      	mov	r2, r1
 800031a:	71fb      	strb	r3, [r7, #7]
 800031c:	4613      	mov	r3, r2
 800031e:	71bb      	strb	r3, [r7, #6]
 	//Bitwise-logic trick to get 1's mask between start and end index
 	return ((1 << (end + 1)) - 1) ^ ((1 << start) - 1);                      // XOR to get the range
 8000320:	79bb      	ldrb	r3, [r7, #6]
 8000322:	3301      	adds	r3, #1
 8000324:	2201      	movs	r2, #1
 8000326:	fa02 f303 	lsl.w	r3, r2, r3
 800032a:	1e5a      	subs	r2, r3, #1
 800032c:	79fb      	ldrb	r3, [r7, #7]
 800032e:	2101      	movs	r1, #1
 8000330:	fa01 f303 	lsl.w	r3, r1, r3
 8000334:	3b01      	subs	r3, #1
 8000336:	4053      	eors	r3, r2
 }
 8000338:	4618      	mov	r0, r3
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr

08000344 <init_port>:



 GPIO *init_port(port_name_link name, port_mode mode, uint8_t pin_lower, uint8_t pin_upper){
 8000344:	b590      	push	{r4, r7, lr}
 8000346:	b089      	sub	sp, #36	@ 0x24
 8000348:	af00      	add	r7, sp, #0
 800034a:	4604      	mov	r4, r0
 800034c:	4608      	mov	r0, r1
 800034e:	4611      	mov	r1, r2
 8000350:	461a      	mov	r2, r3
 8000352:	4623      	mov	r3, r4
 8000354:	71fb      	strb	r3, [r7, #7]
 8000356:	4603      	mov	r3, r0
 8000358:	71bb      	strb	r3, [r7, #6]
 800035a:	460b      	mov	r3, r1
 800035c:	717b      	strb	r3, [r7, #5]
 800035e:	4613      	mov	r3, r2
 8000360:	713b      	strb	r3, [r7, #4]

 	GPIO *port_pt = malloc(sizeof(GPIO)); //Pointer to Port
 8000362:	200c      	movs	r0, #12
 8000364:	f004 fc60 	bl	8004c28 <malloc>
 8000368:	4603      	mov	r3, r0
 800036a:	617b      	str	r3, [r7, #20]

 	port_pt->PORT_IND = name;
 800036c:	697b      	ldr	r3, [r7, #20]
 800036e:	79fa      	ldrb	r2, [r7, #7]
 8000370:	701a      	strb	r2, [r3, #0]
 	port_pt->PORT_ADR = adr_link[name];
 8000372:	79fb      	ldrb	r3, [r7, #7]
 8000374:	4a50      	ldr	r2, [pc, #320]	@ (80004b8 <init_port+0x174>)
 8000376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800037a:	461a      	mov	r2, r3
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	605a      	str	r2, [r3, #4]
 	port_pt->MODE = mode;
 8000380:	697b      	ldr	r3, [r7, #20]
 8000382:	79ba      	ldrb	r2, [r7, #6]
 8000384:	721a      	strb	r2, [r3, #8]
 	port_pt->PIN_LOWER = pin_lower;
 8000386:	697b      	ldr	r3, [r7, #20]
 8000388:	797a      	ldrb	r2, [r7, #5]
 800038a:	725a      	strb	r2, [r3, #9]
 	port_pt->PIN_UPPER = pin_upper;
 800038c:	697b      	ldr	r3, [r7, #20]
 800038e:	793a      	ldrb	r2, [r7, #4]
 8000390:	729a      	strb	r2, [r3, #10]

 	//Enable clock for portX
 	uint32_t clock_en_mask = clock_mask_link[name];
 8000392:	79fb      	ldrb	r3, [r7, #7]
 8000394:	4a49      	ldr	r2, [pc, #292]	@ (80004bc <init_port+0x178>)
 8000396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800039a:	613b      	str	r3, [r7, #16]
 	RCC->AHBENR |= clock_en_mask;
 800039c:	4b48      	ldr	r3, [pc, #288]	@ (80004c0 <init_port+0x17c>)
 800039e:	695a      	ldr	r2, [r3, #20]
 80003a0:	4947      	ldr	r1, [pc, #284]	@ (80004c0 <init_port+0x17c>)
 80003a2:	693b      	ldr	r3, [r7, #16]
 80003a4:	4313      	orrs	r3, r2
 80003a6:	614b      	str	r3, [r1, #20]


 	uint32_t *port_mode_reg = ((uint32_t *) &(port_pt->PORT_ADR->MODER));
 80003a8:	697b      	ldr	r3, [r7, #20]
 80003aa:	685b      	ldr	r3, [r3, #4]
 80003ac:	60fb      	str	r3, [r7, #12]

 	//Generate mode-mask

 	//First mask away the selected section (pin_range)
 	uint32_t temp_mask = create_mask(pin_lower*2, pin_upper*2 + 1);
 80003ae:	797b      	ldrb	r3, [r7, #5]
 80003b0:	005b      	lsls	r3, r3, #1
 80003b2:	b2da      	uxtb	r2, r3
 80003b4:	793b      	ldrb	r3, [r7, #4]
 80003b6:	005b      	lsls	r3, r3, #1
 80003b8:	b2db      	uxtb	r3, r3
 80003ba:	3301      	adds	r3, #1
 80003bc:	b2db      	uxtb	r3, r3
 80003be:	4619      	mov	r1, r3
 80003c0:	4610      	mov	r0, r2
 80003c2:	f7ff ffa5 	bl	8000310 <create_mask>
 80003c6:	61f8      	str	r0, [r7, #28]

 	//Sets the pin_range section to 0
 	*port_mode_reg &= ~temp_mask;
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	681a      	ldr	r2, [r3, #0]
 80003cc:	69fb      	ldr	r3, [r7, #28]
 80003ce:	43db      	mvns	r3, r3
 80003d0:	401a      	ands	r2, r3
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	601a      	str	r2, [r3, #0]


 	//Input-mode is enabled when each pin is 0b00 so no more masking is required

 	if (mode == OUTPUT){
 80003d6:	79bb      	ldrb	r3, [r7, #6]
 80003d8:	2b01      	cmp	r3, #1
 80003da:	d11f      	bne.n	800041c <init_port+0xd8>

 		//Similar idea to clear-mask, except shifting by 2 each time (0b01010101...)
 		uint32_t first_mask = (1 << pin_lower*2);
 80003dc:	797b      	ldrb	r3, [r7, #5]
 80003de:	005b      	lsls	r3, r3, #1
 80003e0:	2201      	movs	r2, #1
 80003e2:	fa02 f303 	lsl.w	r3, r2, r3
 80003e6:	60bb      	str	r3, [r7, #8]

 		temp_mask = first_mask;
 80003e8:	68bb      	ldr	r3, [r7, #8]
 80003ea:	61fb      	str	r3, [r7, #28]
 		for (uint8_t i=pin_lower; i<pin_upper+1; i++){
 80003ec:	797b      	ldrb	r3, [r7, #5]
 80003ee:	76fb      	strb	r3, [r7, #27]
 80003f0:	e009      	b.n	8000406 <init_port+0xc2>
 			temp_mask <<= 2;
 80003f2:	69fb      	ldr	r3, [r7, #28]
 80003f4:	009b      	lsls	r3, r3, #2
 80003f6:	61fb      	str	r3, [r7, #28]
 			temp_mask |= first_mask;
 80003f8:	69fa      	ldr	r2, [r7, #28]
 80003fa:	68bb      	ldr	r3, [r7, #8]
 80003fc:	4313      	orrs	r3, r2
 80003fe:	61fb      	str	r3, [r7, #28]
 		for (uint8_t i=pin_lower; i<pin_upper+1; i++){
 8000400:	7efb      	ldrb	r3, [r7, #27]
 8000402:	3301      	adds	r3, #1
 8000404:	76fb      	strb	r3, [r7, #27]
 8000406:	793a      	ldrb	r2, [r7, #4]
 8000408:	7efb      	ldrb	r3, [r7, #27]
 800040a:	429a      	cmp	r2, r3
 800040c:	d2f1      	bcs.n	80003f2 <init_port+0xae>
 		}

 		*port_mode_reg |=temp_mask;
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	681a      	ldr	r2, [r3, #0]
 8000412:	69fb      	ldr	r3, [r7, #28]
 8000414:	431a      	orrs	r2, r3
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	601a      	str	r2, [r3, #0]
 800041a:	e047      	b.n	80004ac <init_port+0x168>

 	} else if (mode == ANALOG){
 800041c:	79bb      	ldrb	r3, [r7, #6]
 800041e:	2b02      	cmp	r3, #2
 8000420:	d144      	bne.n	80004ac <init_port+0x168>
 		//All 1s for analog mode (conveniently same as clear-mask)

 		*port_mode_reg |= temp_mask;
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	681a      	ldr	r2, [r3, #0]
 8000426:	69fb      	ldr	r3, [r7, #28]
 8000428:	431a      	orrs	r2, r3
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	601a      	str	r2, [r3, #0]

 		//ONLY AVAILABLE FOR PA0 - PA3 !!!!!!

 		// enable the clock for ADC1
		RCC->AHBENR |= RCC_AHBENR_ADC12EN;
 800042e:	4b24      	ldr	r3, [pc, #144]	@ (80004c0 <init_port+0x17c>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	4a23      	ldr	r2, [pc, #140]	@ (80004c0 <init_port+0x17c>)
 8000434:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000438:	6153      	str	r3, [r2, #20]

		// set to synchronise the ADC with the clock
		ADC12_COMMON->CCR |= ADC12_CCR_CKMODE_0;
 800043a:	4b22      	ldr	r3, [pc, #136]	@ (80004c4 <init_port+0x180>)
 800043c:	689b      	ldr	r3, [r3, #8]
 800043e:	4a21      	ldr	r2, [pc, #132]	@ (80004c4 <init_port+0x180>)
 8000440:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000444:	6093      	str	r3, [r2, #8]

		// ADEN must be = 0 for configuration (is the default)
		ADC2->CR &= ~ADC_CR_ADVREGEN; // clear voltage regulator enable
 8000446:	4b20      	ldr	r3, [pc, #128]	@ (80004c8 <init_port+0x184>)
 8000448:	689b      	ldr	r3, [r3, #8]
 800044a:	4a1f      	ldr	r2, [pc, #124]	@ (80004c8 <init_port+0x184>)
 800044c:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8000450:	6093      	str	r3, [r2, #8]
		ADC2->CR |= ADC_CR_ADVREGEN_0; // set ADVREGEN TO 01
 8000452:	4b1d      	ldr	r3, [pc, #116]	@ (80004c8 <init_port+0x184>)
 8000454:	689b      	ldr	r3, [r3, #8]
 8000456:	4a1c      	ldr	r2, [pc, #112]	@ (80004c8 <init_port+0x184>)
 8000458:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800045c:	6093      	str	r3, [r2, #8]
		ADC2->CR &= ~ADC_CR_ADCALDIF; // clear bit to enable Single-ended-input
 800045e:	4b1a      	ldr	r3, [pc, #104]	@ (80004c8 <init_port+0x184>)
 8000460:	689b      	ldr	r3, [r3, #8]
 8000462:	4a19      	ldr	r2, [pc, #100]	@ (80004c8 <init_port+0x184>)
 8000464:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8000468:	6093      	str	r3, [r2, #8]

		// calibrate the ADC (self calibration routine)
		ADC2->CR |= ADC_CR_ADCAL;
 800046a:	4b17      	ldr	r3, [pc, #92]	@ (80004c8 <init_port+0x184>)
 800046c:	689b      	ldr	r3, [r3, #8]
 800046e:	4a16      	ldr	r2, [pc, #88]	@ (80004c8 <init_port+0x184>)
 8000470:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000474:	6093      	str	r3, [r2, #8]
		while((ADC2->CR & ADC_CR_ADCAL) == ADC_CR_ADCAL); // Waiting for the calibration to finish
 8000476:	bf00      	nop
 8000478:	4b13      	ldr	r3, [pc, #76]	@ (80004c8 <init_port+0x184>)
 800047a:	689b      	ldr	r3, [r3, #8]
 800047c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8000480:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000484:	d0f8      	beq.n	8000478 <init_port+0x134>


		// single shot mode
		ADC2->CFGR &= ~ADC_CFGR_CONT;
 8000486:	4b10      	ldr	r3, [pc, #64]	@ (80004c8 <init_port+0x184>)
 8000488:	68db      	ldr	r3, [r3, #12]
 800048a:	4a0f      	ldr	r2, [pc, #60]	@ (80004c8 <init_port+0x184>)
 800048c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000490:	60d3      	str	r3, [r2, #12]

		// Enable the ADC
		ADC2->CR |= ADC_CR_ADEN;
 8000492:	4b0d      	ldr	r3, [pc, #52]	@ (80004c8 <init_port+0x184>)
 8000494:	689b      	ldr	r3, [r3, #8]
 8000496:	4a0c      	ldr	r2, [pc, #48]	@ (80004c8 <init_port+0x184>)
 8000498:	f043 0301 	orr.w	r3, r3, #1
 800049c:	6093      	str	r3, [r2, #8]

		// Wait the ADC to be ready.
		while (!(ADC2->ISR & ADC_ISR_ADRDY));
 800049e:	bf00      	nop
 80004a0:	4b09      	ldr	r3, [pc, #36]	@ (80004c8 <init_port+0x184>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	f003 0301 	and.w	r3, r3, #1
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d0f9      	beq.n	80004a0 <init_port+0x15c>

 	}


 	//Port has been initialised!! - return the port-struct
 	return port_pt;
 80004ac:	697b      	ldr	r3, [r7, #20]
 }
 80004ae:	4618      	mov	r0, r3
 80004b0:	3724      	adds	r7, #36	@ 0x24
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd90      	pop	{r4, r7, pc}
 80004b6:	bf00      	nop
 80004b8:	08005da4 	.word	0x08005da4
 80004bc:	08005db8 	.word	0x08005db8
 80004c0:	40021000 	.word	0x40021000
 80004c4:	50000300 	.word	0x50000300
 80004c8:	50000100 	.word	0x50000100

080004cc <read_pins_analog>:
	return 0;

 }

 //Read analog pins (writes to pt)
void read_pins_analog(GPIO *port_pt, uint16_t *dest_pt){
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	6039      	str	r1, [r7, #0]
	 if (port_pt->MODE == ANALOG){
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	7a1b      	ldrb	r3, [r3, #8]
 80004da:	2b02      	cmp	r3, #2
 80004dc:	d14c      	bne.n	8000578 <read_pins_analog+0xac>
		uint8_t pin_lower = port_pt->PIN_LOWER;
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	7a5b      	ldrb	r3, [r3, #9]
 80004e2:	737b      	strb	r3, [r7, #13]
		uint8_t pin_upper = port_pt->PIN_UPPER;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	7a9b      	ldrb	r3, [r3, #10]
 80004e8:	733b      	strb	r3, [r7, #12]


		uint8_t index = 0;
 80004ea:	2300      	movs	r3, #0
 80004ec:	73fb      	strb	r3, [r7, #15]
		for (uint8_t i=0; i < pin_upper-pin_lower +1; i++){
 80004ee:	2300      	movs	r3, #0
 80004f0:	73bb      	strb	r3, [r7, #14]
 80004f2:	e03a      	b.n	800056a <read_pins_analog+0x9e>
			//Clear channel-sequence
			ADC2->SQR1 = 0;
 80004f4:	4b23      	ldr	r3, [pc, #140]	@ (8000584 <read_pins_analog+0xb8>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	631a      	str	r2, [r3, #48]	@ 0x30

			uint8_t pin = pin_lower + i;
 80004fa:	7b7a      	ldrb	r2, [r7, #13]
 80004fc:	7bbb      	ldrb	r3, [r7, #14]
 80004fe:	4413      	add	r3, r2
 8000500:	72fb      	strb	r3, [r7, #11]
			ADC2->SQR1 |= (pin-3) << ADC_SQR1_SQ1_Pos; // request channel 2
 8000502:	4b20      	ldr	r3, [pc, #128]	@ (8000584 <read_pins_analog+0xb8>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000506:	7afa      	ldrb	r2, [r7, #11]
 8000508:	3a03      	subs	r2, #3
 800050a:	0192      	lsls	r2, r2, #6
 800050c:	4611      	mov	r1, r2
 800050e:	4a1d      	ldr	r2, [pc, #116]	@ (8000584 <read_pins_analog+0xb8>)
 8000510:	430b      	orrs	r3, r1
 8000512:	6313      	str	r3, [r2, #48]	@ 0x30
			ADC2->SQR1 |= 0 << ADC_SQR1_L_Pos; // set the number of channels to read (number of pins in range)
 8000514:	4b1b      	ldr	r3, [pc, #108]	@ (8000584 <read_pins_analog+0xb8>)
 8000516:	4a1b      	ldr	r2, [pc, #108]	@ (8000584 <read_pins_analog+0xb8>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051a:	6313      	str	r3, [r2, #48]	@ 0x30


			// request the process to start
			ADC2->CR |= ADC_CR_ADSTART;
 800051c:	4b19      	ldr	r3, [pc, #100]	@ (8000584 <read_pins_analog+0xb8>)
 800051e:	689b      	ldr	r3, [r3, #8]
 8000520:	4a18      	ldr	r2, [pc, #96]	@ (8000584 <read_pins_analog+0xb8>)
 8000522:	f043 0304 	orr.w	r3, r3, #4
 8000526:	6093      	str	r3, [r2, #8]


			while (!(ADC2->ISR & ADC_ISR_EOS)) {
 8000528:	e010      	b.n	800054c <read_pins_analog+0x80>
				while (!(ADC2->ISR & ADC_ISR_EOC));  // Wait for conversion
 800052a:	bf00      	nop
 800052c:	4b15      	ldr	r3, [pc, #84]	@ (8000584 <read_pins_analog+0xb8>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f003 0304 	and.w	r3, r3, #4
 8000534:	2b00      	cmp	r3, #0
 8000536:	d0f9      	beq.n	800052c <read_pins_analog+0x60>
				dest_pt[index++] = ADC2->DR;               // Reading clears EOC
 8000538:	4b12      	ldr	r3, [pc, #72]	@ (8000584 <read_pins_analog+0xb8>)
 800053a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800053c:	7bfb      	ldrb	r3, [r7, #15]
 800053e:	1c5a      	adds	r2, r3, #1
 8000540:	73fa      	strb	r2, [r7, #15]
 8000542:	005b      	lsls	r3, r3, #1
 8000544:	683a      	ldr	r2, [r7, #0]
 8000546:	4413      	add	r3, r2
 8000548:	b28a      	uxth	r2, r1
 800054a:	801a      	strh	r2, [r3, #0]
			while (!(ADC2->ISR & ADC_ISR_EOS)) {
 800054c:	4b0d      	ldr	r3, [pc, #52]	@ (8000584 <read_pins_analog+0xb8>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f003 0308 	and.w	r3, r3, #8
 8000554:	2b00      	cmp	r3, #0
 8000556:	d0e8      	beq.n	800052a <read_pins_analog+0x5e>
			}

			// Clear EOS if needed
			ADC2->ISR |= ADC_ISR_EOS;
 8000558:	4b0a      	ldr	r3, [pc, #40]	@ (8000584 <read_pins_analog+0xb8>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a09      	ldr	r2, [pc, #36]	@ (8000584 <read_pins_analog+0xb8>)
 800055e:	f043 0308 	orr.w	r3, r3, #8
 8000562:	6013      	str	r3, [r2, #0]
		for (uint8_t i=0; i < pin_upper-pin_lower +1; i++){
 8000564:	7bbb      	ldrb	r3, [r7, #14]
 8000566:	3301      	adds	r3, #1
 8000568:	73bb      	strb	r3, [r7, #14]
 800056a:	7b3a      	ldrb	r2, [r7, #12]
 800056c:	7b7b      	ldrb	r3, [r7, #13]
 800056e:	1ad2      	subs	r2, r2, r3
 8000570:	7bbb      	ldrb	r3, [r7, #14]
 8000572:	429a      	cmp	r2, r3
 8000574:	dabe      	bge.n	80004f4 <read_pins_analog+0x28>
		}


	}

	 return;
 8000576:	bf00      	nop
 8000578:	bf00      	nop
 }
 800057a:	3714      	adds	r7, #20
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr
 8000584:	50000100 	.word	0x50000100

08000588 <EXTI0_IRQHandler>:

 //Pointers to callback-funcitons (for each of 16 pins)
 void (*EXTI_Callbacks[16])(uint8_t pin_index) = {0x00};
 //Wish this wasn't necessary, but each handler function has to be defined seperately
 //Is there a better way to do this? There doesn't seem to be a generic IQRHandler..
 void EXTI0_IRQHandler(void) {EXTI->PR |= (1 << 0); if (EXTI_Callbacks[0]) EXTI_Callbacks[0](0);}
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
 800058c:	4b07      	ldr	r3, [pc, #28]	@ (80005ac <EXTI0_IRQHandler+0x24>)
 800058e:	695b      	ldr	r3, [r3, #20]
 8000590:	4a06      	ldr	r2, [pc, #24]	@ (80005ac <EXTI0_IRQHandler+0x24>)
 8000592:	f043 0301 	orr.w	r3, r3, #1
 8000596:	6153      	str	r3, [r2, #20]
 8000598:	4b05      	ldr	r3, [pc, #20]	@ (80005b0 <EXTI0_IRQHandler+0x28>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d003      	beq.n	80005a8 <EXTI0_IRQHandler+0x20>
 80005a0:	4b03      	ldr	r3, [pc, #12]	@ (80005b0 <EXTI0_IRQHandler+0x28>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2000      	movs	r0, #0
 80005a6:	4798      	blx	r3
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40010400 	.word	0x40010400
 80005b0:	20000194 	.word	0x20000194

080005b4 <EXTI1_IRQHandler>:
 void EXTI1_IRQHandler(void) {EXTI->PR |= (1 << 1); if (EXTI_Callbacks[1]) EXTI_Callbacks[1](1);}
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	4b07      	ldr	r3, [pc, #28]	@ (80005d8 <EXTI1_IRQHandler+0x24>)
 80005ba:	695b      	ldr	r3, [r3, #20]
 80005bc:	4a06      	ldr	r2, [pc, #24]	@ (80005d8 <EXTI1_IRQHandler+0x24>)
 80005be:	f043 0302 	orr.w	r3, r3, #2
 80005c2:	6153      	str	r3, [r2, #20]
 80005c4:	4b05      	ldr	r3, [pc, #20]	@ (80005dc <EXTI1_IRQHandler+0x28>)
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d003      	beq.n	80005d4 <EXTI1_IRQHandler+0x20>
 80005cc:	4b03      	ldr	r3, [pc, #12]	@ (80005dc <EXTI1_IRQHandler+0x28>)
 80005ce:	685b      	ldr	r3, [r3, #4]
 80005d0:	2001      	movs	r0, #1
 80005d2:	4798      	blx	r3
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40010400 	.word	0x40010400
 80005dc:	20000194 	.word	0x20000194

080005e0 <EXTI2_TSC_IRQHandler>:
 void EXTI2_TSC_IRQHandler(void) {EXTI->PR |= (1 << 2); if (EXTI_Callbacks[2]) EXTI_Callbacks[2](2);}
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	4b07      	ldr	r3, [pc, #28]	@ (8000604 <EXTI2_TSC_IRQHandler+0x24>)
 80005e6:	695b      	ldr	r3, [r3, #20]
 80005e8:	4a06      	ldr	r2, [pc, #24]	@ (8000604 <EXTI2_TSC_IRQHandler+0x24>)
 80005ea:	f043 0304 	orr.w	r3, r3, #4
 80005ee:	6153      	str	r3, [r2, #20]
 80005f0:	4b05      	ldr	r3, [pc, #20]	@ (8000608 <EXTI2_TSC_IRQHandler+0x28>)
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d003      	beq.n	8000600 <EXTI2_TSC_IRQHandler+0x20>
 80005f8:	4b03      	ldr	r3, [pc, #12]	@ (8000608 <EXTI2_TSC_IRQHandler+0x28>)
 80005fa:	689b      	ldr	r3, [r3, #8]
 80005fc:	2002      	movs	r0, #2
 80005fe:	4798      	blx	r3
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40010400 	.word	0x40010400
 8000608:	20000194 	.word	0x20000194

0800060c <EXTI3_IRQHandler>:
 void EXTI3_IRQHandler(void) {EXTI->PR |= (1 << 3); if (EXTI_Callbacks[3]) EXTI_Callbacks[3](3);}
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
 8000610:	4b07      	ldr	r3, [pc, #28]	@ (8000630 <EXTI3_IRQHandler+0x24>)
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	4a06      	ldr	r2, [pc, #24]	@ (8000630 <EXTI3_IRQHandler+0x24>)
 8000616:	f043 0308 	orr.w	r3, r3, #8
 800061a:	6153      	str	r3, [r2, #20]
 800061c:	4b05      	ldr	r3, [pc, #20]	@ (8000634 <EXTI3_IRQHandler+0x28>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d003      	beq.n	800062c <EXTI3_IRQHandler+0x20>
 8000624:	4b03      	ldr	r3, [pc, #12]	@ (8000634 <EXTI3_IRQHandler+0x28>)
 8000626:	68db      	ldr	r3, [r3, #12]
 8000628:	2003      	movs	r0, #3
 800062a:	4798      	blx	r3
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40010400 	.word	0x40010400
 8000634:	20000194 	.word	0x20000194

08000638 <EXTI4_IRQHandler>:
 void EXTI4_IRQHandler(void) {EXTI->PR |= (1 << 4); if (EXTI_Callbacks[4]) EXTI_Callbacks[4](4);}
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
 800063c:	4b07      	ldr	r3, [pc, #28]	@ (800065c <EXTI4_IRQHandler+0x24>)
 800063e:	695b      	ldr	r3, [r3, #20]
 8000640:	4a06      	ldr	r2, [pc, #24]	@ (800065c <EXTI4_IRQHandler+0x24>)
 8000642:	f043 0310 	orr.w	r3, r3, #16
 8000646:	6153      	str	r3, [r2, #20]
 8000648:	4b05      	ldr	r3, [pc, #20]	@ (8000660 <EXTI4_IRQHandler+0x28>)
 800064a:	691b      	ldr	r3, [r3, #16]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d003      	beq.n	8000658 <EXTI4_IRQHandler+0x20>
 8000650:	4b03      	ldr	r3, [pc, #12]	@ (8000660 <EXTI4_IRQHandler+0x28>)
 8000652:	691b      	ldr	r3, [r3, #16]
 8000654:	2004      	movs	r0, #4
 8000656:	4798      	blx	r3
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40010400 	.word	0x40010400
 8000660:	20000194 	.word	0x20000194

08000664 <EXTI9_5_IRQHandler>:
 //Must find which pin in 5-9 range triggered handler
 void EXTI9_5_IRQHandler(void) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
     for (uint8_t i = 5; i <= 9; i++) {
 800066a:	2305      	movs	r3, #5
 800066c:	71fb      	strb	r3, [r7, #7]
 800066e:	e022      	b.n	80006b6 <EXTI9_5_IRQHandler+0x52>
         if (EXTI->PR & (1 << i)) {
 8000670:	4b15      	ldr	r3, [pc, #84]	@ (80006c8 <EXTI9_5_IRQHandler+0x64>)
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	79fa      	ldrb	r2, [r7, #7]
 8000676:	2101      	movs	r1, #1
 8000678:	fa01 f202 	lsl.w	r2, r1, r2
 800067c:	4013      	ands	r3, r2
 800067e:	2b00      	cmp	r3, #0
 8000680:	d016      	beq.n	80006b0 <EXTI9_5_IRQHandler+0x4c>
             EXTI->PR |= (1 << i);  // Clear pending flag
 8000682:	4b11      	ldr	r3, [pc, #68]	@ (80006c8 <EXTI9_5_IRQHandler+0x64>)
 8000684:	695b      	ldr	r3, [r3, #20]
 8000686:	79fa      	ldrb	r2, [r7, #7]
 8000688:	2101      	movs	r1, #1
 800068a:	fa01 f202 	lsl.w	r2, r1, r2
 800068e:	4611      	mov	r1, r2
 8000690:	4a0d      	ldr	r2, [pc, #52]	@ (80006c8 <EXTI9_5_IRQHandler+0x64>)
 8000692:	430b      	orrs	r3, r1
 8000694:	6153      	str	r3, [r2, #20]
             if (EXTI_Callbacks[i]) EXTI_Callbacks[i](i);  // Call user-defined function
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	4a0c      	ldr	r2, [pc, #48]	@ (80006cc <EXTI9_5_IRQHandler+0x68>)
 800069a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d006      	beq.n	80006b0 <EXTI9_5_IRQHandler+0x4c>
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	4a09      	ldr	r2, [pc, #36]	@ (80006cc <EXTI9_5_IRQHandler+0x68>)
 80006a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006aa:	79fa      	ldrb	r2, [r7, #7]
 80006ac:	4610      	mov	r0, r2
 80006ae:	4798      	blx	r3
     for (uint8_t i = 5; i <= 9; i++) {
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	3301      	adds	r3, #1
 80006b4:	71fb      	strb	r3, [r7, #7]
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2b09      	cmp	r3, #9
 80006ba:	d9d9      	bls.n	8000670 <EXTI9_5_IRQHandler+0xc>
         }
     }
 }
 80006bc:	bf00      	nop
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40010400 	.word	0x40010400
 80006cc:	20000194 	.word	0x20000194

080006d0 <EXTI15_10_IRQHandler>:

 void EXTI15_10_IRQHandler(void) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
     for (uint8_t i = 10; i <= 15; i++) {
 80006d6:	230a      	movs	r3, #10
 80006d8:	71fb      	strb	r3, [r7, #7]
 80006da:	e022      	b.n	8000722 <EXTI15_10_IRQHandler+0x52>
         if (EXTI->PR & (1 << i)) {
 80006dc:	4b15      	ldr	r3, [pc, #84]	@ (8000734 <EXTI15_10_IRQHandler+0x64>)
 80006de:	695b      	ldr	r3, [r3, #20]
 80006e0:	79fa      	ldrb	r2, [r7, #7]
 80006e2:	2101      	movs	r1, #1
 80006e4:	fa01 f202 	lsl.w	r2, r1, r2
 80006e8:	4013      	ands	r3, r2
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d016      	beq.n	800071c <EXTI15_10_IRQHandler+0x4c>
             EXTI->PR |= (1 << i);  // Clear pending flag
 80006ee:	4b11      	ldr	r3, [pc, #68]	@ (8000734 <EXTI15_10_IRQHandler+0x64>)
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	79fa      	ldrb	r2, [r7, #7]
 80006f4:	2101      	movs	r1, #1
 80006f6:	fa01 f202 	lsl.w	r2, r1, r2
 80006fa:	4611      	mov	r1, r2
 80006fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000734 <EXTI15_10_IRQHandler+0x64>)
 80006fe:	430b      	orrs	r3, r1
 8000700:	6153      	str	r3, [r2, #20]
             if (EXTI_Callbacks[i]) EXTI_Callbacks[i](i);  // Call user-defined function
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	4a0c      	ldr	r2, [pc, #48]	@ (8000738 <EXTI15_10_IRQHandler+0x68>)
 8000706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d006      	beq.n	800071c <EXTI15_10_IRQHandler+0x4c>
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	4a09      	ldr	r2, [pc, #36]	@ (8000738 <EXTI15_10_IRQHandler+0x68>)
 8000712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000716:	79fa      	ldrb	r2, [r7, #7]
 8000718:	4610      	mov	r0, r2
 800071a:	4798      	blx	r3
     for (uint8_t i = 10; i <= 15; i++) {
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	3301      	adds	r3, #1
 8000720:	71fb      	strb	r3, [r7, #7]
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	2b0f      	cmp	r3, #15
 8000726:	d9d9      	bls.n	80006dc <EXTI15_10_IRQHandler+0xc>
         }
     }
 }
 8000728:	bf00      	nop
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40010400 	.word	0x40010400
 8000738:	20000194 	.word	0x20000194

0800073c <enable_interupt>:



 void enable_interupt(GPIO *port_pt, uint8_t pin_index,
 					trigger_type trigger, uint8_t priority,
 					void (*interupt_handler)(uint8_t pin_index)){
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	4608      	mov	r0, r1
 8000746:	4611      	mov	r1, r2
 8000748:	461a      	mov	r2, r3
 800074a:	4603      	mov	r3, r0
 800074c:	70fb      	strb	r3, [r7, #3]
 800074e:	460b      	mov	r3, r1
 8000750:	70bb      	strb	r3, [r7, #2]
 8000752:	4613      	mov	r3, r2
 8000754:	707b      	strb	r3, [r7, #1]

 	//Link interupt_handler function to appropriate EXTI_Callback
 	EXTI_Callbacks[pin_index] = interupt_handler;
 8000756:	78fb      	ldrb	r3, [r7, #3]
 8000758:	493b      	ldr	r1, [pc, #236]	@ (8000848 <enable_interupt+0x10c>)
 800075a:	69ba      	ldr	r2, [r7, #24]
 800075c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000760:	b672      	cpsid	i
}
 8000762:	bf00      	nop
 	// Disable the interrupts while messing around with the settings
 	//  otherwise can lead to strange behaviour
 	__disable_irq();

 	// Enable the system configuration controller (SYSCFG in RCC)
 	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000764:	4b39      	ldr	r3, [pc, #228]	@ (800084c <enable_interupt+0x110>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4a38      	ldr	r2, [pc, #224]	@ (800084c <enable_interupt+0x110>)
 800076a:	f043 0301 	orr.w	r3, r3, #1
 800076e:	6193      	str	r3, [r2, #24]

 	//Tell pin-0 multiplexer to target selected-port (PORT_IND)

 	//If pin 0-3 or 12-15 :

 	uint32_t exticr_shift = 4 * (pin_index % 4);
 8000770:	78fb      	ldrb	r3, [r7, #3]
 8000772:	f003 0303 	and.w	r3, r3, #3
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	60fb      	str	r3, [r7, #12]
 	SYSCFG->EXTICR[pin_index / 4] &= ~(0xF << exticr_shift); // clear old bits
 800077a:	4a35      	ldr	r2, [pc, #212]	@ (8000850 <enable_interupt+0x114>)
 800077c:	78fb      	ldrb	r3, [r7, #3]
 800077e:	089b      	lsrs	r3, r3, #2
 8000780:	b2d8      	uxtb	r0, r3
 8000782:	4603      	mov	r3, r0
 8000784:	3302      	adds	r3, #2
 8000786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800078a:	210f      	movs	r1, #15
 800078c:	68fa      	ldr	r2, [r7, #12]
 800078e:	fa01 f202 	lsl.w	r2, r1, r2
 8000792:	43d2      	mvns	r2, r2
 8000794:	492e      	ldr	r1, [pc, #184]	@ (8000850 <enable_interupt+0x114>)
 8000796:	401a      	ands	r2, r3
 8000798:	1c83      	adds	r3, r0, #2
 800079a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 	SYSCFG->EXTICR[pin_index / 4] |= (port_pt->PORT_IND << exticr_shift); // set new bits
 800079e:	4a2c      	ldr	r2, [pc, #176]	@ (8000850 <enable_interupt+0x114>)
 80007a0:	78fb      	ldrb	r3, [r7, #3]
 80007a2:	089b      	lsrs	r3, r3, #2
 80007a4:	b2d8      	uxtb	r0, r3
 80007a6:	4603      	mov	r3, r0
 80007a8:	3302      	adds	r3, #2
 80007aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	7812      	ldrb	r2, [r2, #0]
 80007b2:	4611      	mov	r1, r2
 80007b4:	68fa      	ldr	r2, [r7, #12]
 80007b6:	fa01 f202 	lsl.w	r2, r1, r2
 80007ba:	4925      	ldr	r1, [pc, #148]	@ (8000850 <enable_interupt+0x114>)
 80007bc:	431a      	orrs	r2, r3
 80007be:	1c83      	adds	r3, r0, #2
 80007c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

 	//  Select interrupt on rising/falling edge (pins are consecutive bits)
 	if (trigger==RISING_EDGE){
 80007c4:	78bb      	ldrb	r3, [r7, #2]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d10a      	bne.n	80007e0 <enable_interupt+0xa4>
 		//Set rising-edge
 		EXTI->RTSR |= (1 << pin_index);
 80007ca:	4b22      	ldr	r3, [pc, #136]	@ (8000854 <enable_interupt+0x118>)
 80007cc:	689b      	ldr	r3, [r3, #8]
 80007ce:	78fa      	ldrb	r2, [r7, #3]
 80007d0:	2101      	movs	r1, #1
 80007d2:	fa01 f202 	lsl.w	r2, r1, r2
 80007d6:	4611      	mov	r1, r2
 80007d8:	4a1e      	ldr	r2, [pc, #120]	@ (8000854 <enable_interupt+0x118>)
 80007da:	430b      	orrs	r3, r1
 80007dc:	6093      	str	r3, [r2, #8]
 80007de:	e009      	b.n	80007f4 <enable_interupt+0xb8>
 	} else{
 		//Set falling-edge
 		EXTI->FTSR |= (1 << pin_index);
 80007e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000854 <enable_interupt+0x118>)
 80007e2:	68db      	ldr	r3, [r3, #12]
 80007e4:	78fa      	ldrb	r2, [r7, #3]
 80007e6:	2101      	movs	r1, #1
 80007e8:	fa01 f202 	lsl.w	r2, r1, r2
 80007ec:	4611      	mov	r1, r2
 80007ee:	4a19      	ldr	r2, [pc, #100]	@ (8000854 <enable_interupt+0x118>)
 80007f0:	430b      	orrs	r3, r1
 80007f2:	60d3      	str	r3, [r2, #12]
 	}


 	// set the interrupt from EXTI line x as 'not masked' - as in, enable it.
 	EXTI->IMR |= (1 << pin_index);
 80007f4:	4b17      	ldr	r3, [pc, #92]	@ (8000854 <enable_interupt+0x118>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	78fa      	ldrb	r2, [r7, #3]
 80007fa:	2101      	movs	r1, #1
 80007fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000800:	4611      	mov	r1, r2
 8000802:	4a14      	ldr	r2, [pc, #80]	@ (8000854 <enable_interupt+0x118>)
 8000804:	430b      	orrs	r3, r1
 8000806:	6013      	str	r3, [r2, #0]

 	// Tell the NVIC module that EXTIx interrupts should be handled

 	//Pins 0-4 have a seperate request-num (from 6-10),
 	//pins 5-9 are all at 23, and pins 10-15 are at 40
 	uint8_t req_num = (pin_index <= 4) ? (6 + pin_index) :
 8000808:	78fb      	ldrb	r3, [r7, #3]
 800080a:	2b04      	cmp	r3, #4
 800080c:	d803      	bhi.n	8000816 <enable_interupt+0xda>
 800080e:	78fb      	ldrb	r3, [r7, #3]
 8000810:	3306      	adds	r3, #6
 8000812:	b2db      	uxtb	r3, r3
 8000814:	e005      	b.n	8000822 <enable_interupt+0xe6>
 8000816:	78fb      	ldrb	r3, [r7, #3]
 8000818:	2b09      	cmp	r3, #9
 800081a:	d801      	bhi.n	8000820 <enable_interupt+0xe4>
 800081c:	2317      	movs	r3, #23
 800081e:	e000      	b.n	8000822 <enable_interupt+0xe6>
 8000820:	2328      	movs	r3, #40	@ 0x28
 8000822:	72fb      	strb	r3, [r7, #11]
 					  (pin_index <= 9) ? 23 : 40;

 	NVIC_SetPriority(req_num, priority);  // Set Priority
 8000824:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000828:	787a      	ldrb	r2, [r7, #1]
 800082a:	4611      	mov	r1, r2
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff fd45 	bl	80002bc <__NVIC_SetPriority>
 	NVIC_EnableIRQ(req_num);
 8000832:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff fd22 	bl	8000280 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800083c:	b662      	cpsie	i
}
 800083e:	bf00      	nop

 	// Re-enable all interrupts (now that we are finished)
 	__enable_irq();

 }
 8000840:	bf00      	nop
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000194 	.word	0x20000194
 800084c:	40021000 	.word	0x40021000
 8000850:	40010000 	.word	0x40010000
 8000854:	40010400 	.word	0x40010400

08000858 <transmit_game_state>:
// Track which touchpads have been used (true = used, false = available)
bool touchpad_used[6] = {false, false, false, false, false, false};
bool touch_enabled = true;
// =================================== Game Functions ====================================
// Prints via UART game state
void transmit_game_state() {
 8000858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800085a:	b0b5      	sub	sp, #212	@ 0xd4
 800085c:	af04      	add	r7, sp, #16
    char buffer[192]; // Increased buffer size for more info including score
    sprintf(buffer, "GAME STATE: Score: %lu | Digs Left: %d, Digs Taken: %d | Treasures Left: %d, Treasures Found: %d | Time: %d\r\n",
            game.current_score, game.digs_remaining, game.digs_taken, game.items_left_to_find, game.items_found, game.game_time_remaining);
 800085e:	4b10      	ldr	r3, [pc, #64]	@ (80008a0 <transmit_game_state+0x48>)
 8000860:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
 8000862:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <transmit_game_state+0x48>)
 8000864:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 8000866:	4b0e      	ldr	r3, [pc, #56]	@ (80008a0 <transmit_game_state+0x48>)
 8000868:	6a1b      	ldr	r3, [r3, #32]
 800086a:	4a0d      	ldr	r2, [pc, #52]	@ (80008a0 <transmit_game_state+0x48>)
 800086c:	69d2      	ldr	r2, [r2, #28]
 800086e:	490c      	ldr	r1, [pc, #48]	@ (80008a0 <transmit_game_state+0x48>)
 8000870:	6989      	ldr	r1, [r1, #24]
 8000872:	480b      	ldr	r0, [pc, #44]	@ (80008a0 <transmit_game_state+0x48>)
 8000874:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
    sprintf(buffer, "GAME STATE: Score: %lu | Digs Left: %d, Digs Taken: %d | Treasures Left: %d, Treasures Found: %d | Time: %d\r\n",
 8000876:	463c      	mov	r4, r7
 8000878:	9003      	str	r0, [sp, #12]
 800087a:	9102      	str	r1, [sp, #8]
 800087c:	9201      	str	r2, [sp, #4]
 800087e:	9300      	str	r3, [sp, #0]
 8000880:	4633      	mov	r3, r6
 8000882:	462a      	mov	r2, r5
 8000884:	4907      	ldr	r1, [pc, #28]	@ (80008a4 <transmit_game_state+0x4c>)
 8000886:	4620      	mov	r0, r4
 8000888:	f004 fb08 	bl	8004e9c <siprintf>
    serial_output_string(buffer, &USART1_PORT);
 800088c:	463b      	mov	r3, r7
 800088e:	4906      	ldr	r1, [pc, #24]	@ (80008a8 <transmit_game_state+0x50>)
 8000890:	4618      	mov	r0, r3
 8000892:	f001 f9f4 	bl	8001c7e <serial_output_string>
}
 8000896:	bf00      	nop
 8000898:	37c4      	adds	r7, #196	@ 0xc4
 800089a:	46bd      	mov	sp, r7
 800089c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000008 	.word	0x20000008
 80008a4:	08005738 	.word	0x08005738
 80008a8:	20000068 	.word	0x20000068

080008ac <fn_a>:

// Timer callback
static void fn_a(TimerSel sel) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b092      	sub	sp, #72	@ 0x48
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
	// If using global 'game' directly, game_ptr parameter can be removed if TimerSel is also not needed inside.
    // Assuming game is the global GameState variable
    if (game.game_time_remaining > 0) { // Check to prevent underflow if already 0
 80008b6:	4b0e      	ldr	r3, [pc, #56]	@ (80008f0 <fn_a+0x44>)
 80008b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	dd04      	ble.n	80008c8 <fn_a+0x1c>
        game.game_time_remaining = game.game_time_remaining - 1;
 80008be:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <fn_a+0x44>)
 80008c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008c2:	3b01      	subs	r3, #1
 80008c4:	4a0a      	ldr	r2, [pc, #40]	@ (80008f0 <fn_a+0x44>)
 80008c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }
    char buffer[64];
    sprintf(buffer, "TIME REMAINING:%d\r\n", game.game_time_remaining);
 80008c8:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <fn_a+0x44>)
 80008ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80008cc:	f107 0308 	add.w	r3, r7, #8
 80008d0:	4908      	ldr	r1, [pc, #32]	@ (80008f4 <fn_a+0x48>)
 80008d2:	4618      	mov	r0, r3
 80008d4:	f004 fae2 	bl	8004e9c <siprintf>
    serial_output_string(buffer, &USART1_PORT);
 80008d8:	f107 0308 	add.w	r3, r7, #8
 80008dc:	4906      	ldr	r1, [pc, #24]	@ (80008f8 <fn_a+0x4c>)
 80008de:	4618      	mov	r0, r3
 80008e0:	f001 f9cd 	bl	8001c7e <serial_output_string>
    transmit_game_state(); // Transmit full game state periodically along with time
 80008e4:	f7ff ffb8 	bl	8000858 <transmit_game_state>
}
 80008e8:	bf00      	nop
 80008ea:	3748      	adds	r7, #72	@ 0x48
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000008 	.word	0x20000008
 80008f4:	080057a8 	.word	0x080057a8
 80008f8:	20000068 	.word	0x20000068

080008fc <reset_touchpads>:

// Add this function to reset all touchpads (for game start)
void reset_touchpads(void) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
    // Reset tracking array
    for (int i = 0; i < 6; i++) {
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	e007      	b.n	8000918 <reset_touchpads+0x1c>
        touchpad_used[i] = false;
 8000908:	4a1a      	ldr	r2, [pc, #104]	@ (8000974 <reset_touchpads+0x78>)
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	4413      	add	r3, r2
 800090e:	2200      	movs	r2, #0
 8000910:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 6; i++) {
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	3301      	adds	r3, #1
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	2b05      	cmp	r3, #5
 800091c:	ddf4      	ble.n	8000908 <reset_touchpads+0xc>
    }

    // Re-enable all touchpad interrupts
    static const uint8_t touch_pins[6] = {7, 6, 5, 4, 3, 13};
    for (int i = 0; i < 6; i++) {
 800091e:	2300      	movs	r3, #0
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	e01b      	b.n	800095c <reset_touchpads+0x60>
        uint8_t pin_num = touch_pins[i];
 8000924:	4a14      	ldr	r2, [pc, #80]	@ (8000978 <reset_touchpads+0x7c>)
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	4413      	add	r3, r2
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	71fb      	strb	r3, [r7, #7]
        EXTI->IMR |= (1 << pin_num);   // Unmask (enable) the interrupt
 800092e:	4b13      	ldr	r3, [pc, #76]	@ (800097c <reset_touchpads+0x80>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	79fa      	ldrb	r2, [r7, #7]
 8000934:	2101      	movs	r1, #1
 8000936:	fa01 f202 	lsl.w	r2, r1, r2
 800093a:	4611      	mov	r1, r2
 800093c:	4a0f      	ldr	r2, [pc, #60]	@ (800097c <reset_touchpads+0x80>)
 800093e:	430b      	orrs	r3, r1
 8000940:	6013      	str	r3, [r2, #0]
        EXTI->PR |= (1 << pin_num);    // Clear any pending interrupt
 8000942:	4b0e      	ldr	r3, [pc, #56]	@ (800097c <reset_touchpads+0x80>)
 8000944:	695b      	ldr	r3, [r3, #20]
 8000946:	79fa      	ldrb	r2, [r7, #7]
 8000948:	2101      	movs	r1, #1
 800094a:	fa01 f202 	lsl.w	r2, r1, r2
 800094e:	4611      	mov	r1, r2
 8000950:	4a0a      	ldr	r2, [pc, #40]	@ (800097c <reset_touchpads+0x80>)
 8000952:	430b      	orrs	r3, r1
 8000954:	6153      	str	r3, [r2, #20]
    for (int i = 0; i < 6; i++) {
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	3301      	adds	r3, #1
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	2b05      	cmp	r3, #5
 8000960:	dde0      	ble.n	8000924 <reset_touchpads+0x28>
    }

    serial_output_string("All touchpads re-enabled\r\n", &USART1_PORT);
 8000962:	4907      	ldr	r1, [pc, #28]	@ (8000980 <reset_touchpads+0x84>)
 8000964:	4807      	ldr	r0, [pc, #28]	@ (8000984 <reset_touchpads+0x88>)
 8000966:	f001 f98a 	bl	8001c7e <serial_output_string>
}
 800096a:	bf00      	nop
 800096c:	3710      	adds	r7, #16
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	200002b8 	.word	0x200002b8
 8000978:	08005dcc 	.word	0x08005dcc
 800097c:	40010400 	.word	0x40010400
 8000980:	20000068 	.word	0x20000068
 8000984:	080057bc 	.word	0x080057bc

08000988 <disable_touchpad>:

// Add this function to disable a specific touchpad
void disable_touchpad(uint8_t touchpad_index) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b094      	sub	sp, #80	@ 0x50
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	71fb      	strb	r3, [r7, #7]
    if (touchpad_index < 6) {
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	2b05      	cmp	r3, #5
 8000996:	d830      	bhi.n	80009fa <disable_touchpad+0x72>
        touchpad_used[touchpad_index] = true;
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	4a1a      	ldr	r2, [pc, #104]	@ (8000a04 <disable_touchpad+0x7c>)
 800099c:	2101      	movs	r1, #1
 800099e:	54d1      	strb	r1, [r2, r3]

        // Map touchpad index to actual pin numbers
        static const uint8_t touch_pins[6] = {7, 6, 5, 4, 3, 13}; // PB7, PB6, PB5, PB4, PB3, PB13
        uint8_t pin_num = touch_pins[touchpad_index];
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	4a19      	ldr	r2, [pc, #100]	@ (8000a08 <disable_touchpad+0x80>)
 80009a4:	5cd3      	ldrb	r3, [r2, r3]
 80009a6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

        // Disable the interrupt for this specific pin
        EXTI->IMR &= ~(1 << pin_num);  // Mask (disable) the interrupt
 80009aa:	4b18      	ldr	r3, [pc, #96]	@ (8000a0c <disable_touchpad+0x84>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80009b2:	2101      	movs	r1, #1
 80009b4:	fa01 f202 	lsl.w	r2, r1, r2
 80009b8:	43d2      	mvns	r2, r2
 80009ba:	4611      	mov	r1, r2
 80009bc:	4a13      	ldr	r2, [pc, #76]	@ (8000a0c <disable_touchpad+0x84>)
 80009be:	400b      	ands	r3, r1
 80009c0:	6013      	str	r3, [r2, #0]
        EXTI->PR |= (1 << pin_num);    // Clear any pending interrupt
 80009c2:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <disable_touchpad+0x84>)
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80009ca:	2101      	movs	r1, #1
 80009cc:	fa01 f202 	lsl.w	r2, r1, r2
 80009d0:	4611      	mov	r1, r2
 80009d2:	4a0e      	ldr	r2, [pc, #56]	@ (8000a0c <disable_touchpad+0x84>)
 80009d4:	430b      	orrs	r3, r1
 80009d6:	6153      	str	r3, [r2, #20]

        char buffer[64];
        sprintf(buffer, "Touchpad %d (PB%d) disabled - already used\r\n", touch_pins[touchpad_index], pin_num);
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	4a0b      	ldr	r2, [pc, #44]	@ (8000a08 <disable_touchpad+0x80>)
 80009dc:	5cd3      	ldrb	r3, [r2, r3]
 80009de:	461a      	mov	r2, r3
 80009e0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80009e4:	f107 000c 	add.w	r0, r7, #12
 80009e8:	4909      	ldr	r1, [pc, #36]	@ (8000a10 <disable_touchpad+0x88>)
 80009ea:	f004 fa57 	bl	8004e9c <siprintf>
        serial_output_string(buffer, &USART1_PORT);
 80009ee:	f107 030c 	add.w	r3, r7, #12
 80009f2:	4908      	ldr	r1, [pc, #32]	@ (8000a14 <disable_touchpad+0x8c>)
 80009f4:	4618      	mov	r0, r3
 80009f6:	f001 f942 	bl	8001c7e <serial_output_string>
    }
}
 80009fa:	bf00      	nop
 80009fc:	3750      	adds	r7, #80	@ 0x50
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	200002b8 	.word	0x200002b8
 8000a08:	08005dd4 	.word	0x08005dd4
 8000a0c:	40010400 	.word	0x40010400
 8000a10:	080057d8 	.word	0x080057d8
 8000a14:	20000068 	.word	0x20000068

08000a18 <start_game>:

// --- Start Game Signal (from USART or button) ---
void start_game(GameState *game_param, const uint8_t map[6], int chances, int time_limit) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b088      	sub	sp, #32
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
 8000a24:	603b      	str	r3, [r7, #0]
	// Restart game state
    game_param->game_over = 0;
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	631a      	str	r2, [r3, #48]	@ 0x30
    game_param->game_time_remaining = time_limit;
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	683a      	ldr	r2, [r7, #0]
 8000a30:	62da      	str	r2, [r3, #44]	@ 0x2c
    game_param->digs_remaining = chances;
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	625a      	str	r2, [r3, #36]	@ 0x24
    game_param->current_score = 0;
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	639a      	str	r2, [r3, #56]	@ 0x38
    game_param->items_found = 0;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	2200      	movs	r2, #0
 8000a42:	619a      	str	r2, [r3, #24]
    game_param->digs_taken = 0;
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	2200      	movs	r2, #0
 8000a48:	621a      	str	r2, [r3, #32]

    int count = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < 6; i++) {
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61bb      	str	r3, [r7, #24]
 8000a52:	e014      	b.n	8000a7e <start_game+0x66>
        game_param->correct_servos[i] = map[i];
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	68ba      	ldr	r2, [r7, #8]
 8000a58:	4413      	add	r3, r2
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	69ba      	ldr	r2, [r7, #24]
 8000a62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        if (game_param->correct_servos[i] != 0) {
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	69ba      	ldr	r2, [r7, #24]
 8000a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d002      	beq.n	8000a78 <start_game+0x60>
            count++;
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	3301      	adds	r3, #1
 8000a76:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < 6; i++) {
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	61bb      	str	r3, [r7, #24]
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	2b05      	cmp	r3, #5
 8000a82:	dde7      	ble.n	8000a54 <start_game+0x3c>
        }
    }
    game_param->total_items_to_find = count;
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	69fa      	ldr	r2, [r7, #28]
 8000a88:	635a      	str	r2, [r3, #52]	@ 0x34
    game_param->items_left_to_find = game_param->total_items_to_find;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	61da      	str	r2, [r3, #28]

    // Calibrate: Set all servos to 0°
    for (uint8_t servoId = 1; servoId <= 6; servoId++)
 8000a92:	2301      	movs	r3, #1
 8000a94:	75fb      	strb	r3, [r7, #23]
 8000a96:	e007      	b.n	8000aa8 <start_game+0x90>
    {
      SetServoAngle(servoId, 0);
 8000a98:	7dfb      	ldrb	r3, [r7, #23]
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f000 fa51 	bl	8000f44 <SetServoAngle>
    for (uint8_t servoId = 1; servoId <= 6; servoId++)
 8000aa2:	7dfb      	ldrb	r3, [r7, #23]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	75fb      	strb	r3, [r7, #23]
 8000aa8:	7dfb      	ldrb	r3, [r7, #23]
 8000aaa:	2b06      	cmp	r3, #6
 8000aac:	d9f4      	bls.n	8000a98 <start_game+0x80>
    }

    reset_touchpads();
 8000aae:	f7ff ff25 	bl	80008fc <reset_touchpads>

    // Init game timer
    timer_init();
 8000ab2:	f001 fb29 	bl	8002108 <timer_init>
    const TimerSel tim_a = TIMER_SEL_7;
 8000ab6:	2304      	movs	r3, #4
 8000ab8:	75bb      	strb	r3, [r7, #22]
    timer_prescaler_set(tim_a, 11999);
 8000aba:	7dbb      	ldrb	r3, [r7, #22]
 8000abc:	f642 61df 	movw	r1, #11999	@ 0x2edf
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f001 fc05 	bl	80022d0 <timer_prescaler_set>
    timer_period_set(tim_a, 3999);
 8000ac6:	7dbb      	ldrb	r3, [r7, #22]
 8000ac8:	f640 719f 	movw	r1, #3999	@ 0xf9f
 8000acc:	4618      	mov	r0, r3
 8000ace:	f001 fbdb 	bl	8002288 <timer_period_set>
    timer_silent_set(tim_a, false);
 8000ad2:	7dbb      	ldrb	r3, [r7, #22]
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f001 fbbc 	bl	8002254 <timer_silent_set>
    timer_recur_set(tim_a, true);
 8000adc:	7dbb      	ldrb	r3, [r7, #22]
 8000ade:	2101      	movs	r1, #1
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f001 fc39 	bl	8002358 <timer_recur_set>
    timer_callback_set(tim_a, (TimerCallbackFn*)fn_a);
 8000ae6:	7dbb      	ldrb	r3, [r7, #22]
 8000ae8:	4909      	ldr	r1, [pc, #36]	@ (8000b10 <start_game+0xf8>)
 8000aea:	4618      	mov	r0, r3
 8000aec:	f001 fcb8 	bl	8002460 <timer_callback_set>
    timer_enable_set(tim_a, true);
 8000af0:	7dbb      	ldrb	r3, [r7, #22]
 8000af2:	2101      	movs	r1, #1
 8000af4:	4618      	mov	r0, r3
 8000af6:	f001 fb69 	bl	80021cc <timer_enable_set>

    serial_output_string("Game Started\r\n\n", &USART1_PORT);
 8000afa:	4906      	ldr	r1, [pc, #24]	@ (8000b14 <start_game+0xfc>)
 8000afc:	4806      	ldr	r0, [pc, #24]	@ (8000b18 <start_game+0x100>)
 8000afe:	f001 f8be 	bl	8001c7e <serial_output_string>

    transmit_game_state();
 8000b02:	f7ff fea9 	bl	8000858 <transmit_game_state>
}
 8000b06:	bf00      	nop
 8000b08:	3720      	adds	r7, #32
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	080008ad 	.word	0x080008ad
 8000b14:	20000068 	.word	0x20000068
 8000b18:	08005808 	.word	0x08005808

08000b1c <check_game_over>:

//Check for game over conditions
uint8_t check_game_over(GameState *game_param) { // Using game_param for clarity
 8000b1c:	b590      	push	{r4, r7, lr}
 8000b1e:	b0cb      	sub	sp, #300	@ 0x12c
 8000b20:	af04      	add	r7, sp, #16
 8000b22:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000b26:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000b2a:	6018      	str	r0, [r3, #0]
    char final_msg_buffer[256];
    bool game_ended = false;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    const char* end_reason_msg = "";
 8000b32:	4b4b      	ldr	r3, [pc, #300]	@ (8000c60 <check_game_over+0x144>)
 8000b34:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

    if (game_param->items_left_to_find == 0) {
 8000b38:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000b3c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	69db      	ldr	r3, [r3, #28]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d10f      	bne.n	8000b68 <check_game_over+0x4c>
        game_ended = true;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        end_reason_msg = "You Win! All treasures found!";
 8000b4e:	4b45      	ldr	r3, [pc, #276]	@ (8000c64 <check_game_over+0x148>)
 8000b50:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  	    const TimerSel tim_a = TIMER_SEL_7;
 8000b54:	2304      	movs	r3, #4
 8000b56:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
  	  	timer_enable_set(tim_a, false); // Stop game timer on win
 8000b5a:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4618      	mov	r0, r3
 8000b62:	f001 fb33 	bl	80021cc <timer_enable_set>
 8000b66:	e03d      	b.n	8000be4 <check_game_over+0xc8>
    } else if (game_param->digs_remaining == 0) {
 8000b68:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000b6c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d10f      	bne.n	8000b98 <check_game_over+0x7c>
        game_ended = true;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        end_reason_msg = "Game Over! No digs remaining.";
 8000b7e:	4b3a      	ldr	r3, [pc, #232]	@ (8000c68 <check_game_over+0x14c>)
 8000b80:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  	    const TimerSel tim_a = TIMER_SEL_7;
 8000b84:	2304      	movs	r3, #4
 8000b86:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
  	  	timer_enable_set(tim_a, false); // Stop game timer
 8000b8a:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8000b8e:	2100      	movs	r1, #0
 8000b90:	4618      	mov	r0, r3
 8000b92:	f001 fb1b 	bl	80021cc <timer_enable_set>
 8000b96:	e025      	b.n	8000be4 <check_game_over+0xc8>
    } else if (game_param->game_time_remaining <= 1) { // or == 0, <=1 is safer
 8000b98:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000b9c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	dc1d      	bgt.n	8000be4 <check_game_over+0xc8>
        // Ensure time is 0 if it was 1, for display consistency
        if (game_param->game_time_remaining == 1) game_param->game_time_remaining = 0;
 8000ba8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000bac:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d106      	bne.n	8000bc6 <check_game_over+0xaa>
 8000bb8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000bbc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	62da      	str	r2, [r3, #44]	@ 0x2c
        game_ended = true;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        end_reason_msg = "Game Over! Time is up.";
 8000bcc:	4b27      	ldr	r3, [pc, #156]	@ (8000c6c <check_game_over+0x150>)
 8000bce:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  	    const TimerSel tim_a = TIMER_SEL_7;
 8000bd2:	2304      	movs	r3, #4
 8000bd4:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
  	  	timer_enable_set(tim_a, false); // Stop game timer
 8000bd8:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f001 faf4 	bl	80021cc <timer_enable_set>
    }

    if (game_ended) {
 8000be4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d033      	beq.n	8000c54 <check_game_over+0x138>
        game_param->game_over = 1;
 8000bec:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000bf0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	631a      	str	r2, [r3, #48]	@ 0x30
        sprintf(final_msg_buffer, "\r\n*************************************\r\n%s\r\nFinal Score: %lu\r\nTreasures Found: %d / %d\r\nDigs Used: %d\r\n*************************************\r\n\n",
                end_reason_msg,
                game_param->current_score,
 8000bfa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000bfe:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
                game_param->items_found,
 8000c06:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000c0a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	699b      	ldr	r3, [r3, #24]
                game_param->total_items_to_find,
 8000c12:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000c16:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8000c1a:	6812      	ldr	r2, [r2, #0]
 8000c1c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
                game_param->digs_taken);
 8000c1e:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8000c22:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 8000c26:	6809      	ldr	r1, [r1, #0]
 8000c28:	6a09      	ldr	r1, [r1, #32]
        sprintf(final_msg_buffer, "\r\n*************************************\r\n%s\r\nFinal Score: %lu\r\nTreasures Found: %d / %d\r\nDigs Used: %d\r\n*************************************\r\n\n",
 8000c2a:	f107 000c 	add.w	r0, r7, #12
 8000c2e:	9102      	str	r1, [sp, #8]
 8000c30:	9201      	str	r2, [sp, #4]
 8000c32:	9300      	str	r3, [sp, #0]
 8000c34:	4623      	mov	r3, r4
 8000c36:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000c3a:	490d      	ldr	r1, [pc, #52]	@ (8000c70 <check_game_over+0x154>)
 8000c3c:	f004 f92e 	bl	8004e9c <siprintf>
        serial_output_string(final_msg_buffer, &USART1_PORT);
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	490b      	ldr	r1, [pc, #44]	@ (8000c74 <check_game_over+0x158>)
 8000c46:	4618      	mov	r0, r3
 8000c48:	f001 f819 	bl	8001c7e <serial_output_string>

        // Re-display start menu for a new game
        display_start_menu();
 8000c4c:	f000 fa76 	bl	800113c <display_start_menu>
        return 1; // Game is indeed over
 8000c50:	2301      	movs	r3, #1
 8000c52:	e000      	b.n	8000c56 <check_game_over+0x13a>
    }

    return 0; // Game continues
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd90      	pop	{r4, r7, pc}
 8000c60:	08005818 	.word	0x08005818
 8000c64:	0800581c 	.word	0x0800581c
 8000c68:	0800583c 	.word	0x0800583c
 8000c6c:	0800585c 	.word	0x0800585c
 8000c70:	08005874 	.word	0x08005874
 8000c74:	20000068 	.word	0x20000068

08000c78 <handle_touch>:


// =================================== Callback Functions ===================================

// Each EXTI handler calls this with the corresponding pin number
void handle_touch(uint8_t pad) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b094      	sub	sp, #80	@ 0x50
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71fb      	strb	r3, [r7, #7]
	if (touch_enabled){
 8000c82:	4b1f      	ldr	r3, [pc, #124]	@ (8000d00 <handle_touch+0x88>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d037      	beq.n	8000cfa <handle_touch+0x82>
		// Map pin number to touchpad index
		static const uint8_t touch_pins[6] = {7, 6, 5, 4, 3, 13}; // PB7, PB6, PB5, PB4, PB3, PB13
		uint8_t touchpad_index = 255; // Invalid index
 8000c8a:	23ff      	movs	r3, #255	@ 0xff
 8000c8c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

		for (uint8_t i = 0; i < 6; i++) {
 8000c90:	2300      	movs	r3, #0
 8000c92:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8000c96:	e010      	b.n	8000cba <handle_touch+0x42>
			if (pad == touch_pins[i]) {
 8000c98:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000c9c:	4a19      	ldr	r2, [pc, #100]	@ (8000d04 <handle_touch+0x8c>)
 8000c9e:	5cd3      	ldrb	r3, [r2, r3]
 8000ca0:	79fa      	ldrb	r2, [r7, #7]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d104      	bne.n	8000cb0 <handle_touch+0x38>
				touchpad_index = i;
 8000ca6:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000caa:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
				break;
 8000cae:	e008      	b.n	8000cc2 <handle_touch+0x4a>
		for (uint8_t i = 0; i < 6; i++) {
 8000cb0:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8000cba:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000cbe:	2b05      	cmp	r3, #5
 8000cc0:	d9ea      	bls.n	8000c98 <handle_touch+0x20>
			}
		}

		// Check if this touchpad has already been used
		if (touchpad_index < 6 && touchpad_used[touchpad_index]) {
 8000cc2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000cc6:	2b05      	cmp	r3, #5
 8000cc8:	d814      	bhi.n	8000cf4 <handle_touch+0x7c>
 8000cca:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000cce:	4a0e      	ldr	r2, [pc, #56]	@ (8000d08 <handle_touch+0x90>)
 8000cd0:	5cd3      	ldrb	r3, [r2, r3]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d00e      	beq.n	8000cf4 <handle_touch+0x7c>
			char buffer[64];
			sprintf(buffer, "Touchpad %d already used - ignoring\r\n", touchpad_index);
 8000cd6:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8000cda:	f107 030c 	add.w	r3, r7, #12
 8000cde:	490b      	ldr	r1, [pc, #44]	@ (8000d0c <handle_touch+0x94>)
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f004 f8db 	bl	8004e9c <siprintf>
			serial_output_string(buffer, &USART1_PORT);
 8000ce6:	f107 030c 	add.w	r3, r7, #12
 8000cea:	4909      	ldr	r1, [pc, #36]	@ (8000d10 <handle_touch+0x98>)
 8000cec:	4618      	mov	r0, r3
 8000cee:	f000 ffc6 	bl	8001c7e <serial_output_string>
 8000cf2:	e002      	b.n	8000cfa <handle_touch+0x82>
			return; // Ignore this touch
		}

		// If we get here, the touchpad is valid and hasn't been used
		triggers.touchpad_pressed = pad;
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	4a07      	ldr	r2, [pc, #28]	@ (8000d14 <handle_touch+0x9c>)
 8000cf8:	6013      	str	r3, [r2, #0]
	}
}
 8000cfa:	3750      	adds	r7, #80	@ 0x50
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000064 	.word	0x20000064
 8000d04:	08005ddc 	.word	0x08005ddc
 8000d08:	200002b8 	.word	0x200002b8
 8000d0c:	08005908 	.word	0x08005908
 8000d10:	20000068 	.word	0x20000068
 8000d14:	20000044 	.word	0x20000044

08000d18 <output_callback>:

// Transmit callback
void output_callback() {
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
	return;
 8000d1c:	bf00      	nop
}
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
	...

08000d28 <input_callback>:

// Receive callback
void input_callback(char *data, uint32_t len) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b0cc      	sub	sp, #304	@ 0x130
 8000d2c:	af02      	add	r7, sp, #8
 8000d2e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000d32:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000d36:	6018      	str	r0, [r3, #0]
 8000d38:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000d3c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000d40:	6019      	str	r1, [r3, #0]
    serial_output_string("DEBUG: input_callback fired!\r\n", &USART1_PORT); // DEBUG PRINT
 8000d42:	4942      	ldr	r1, [pc, #264]	@ (8000e4c <input_callback+0x124>)
 8000d44:	4842      	ldr	r0, [pc, #264]	@ (8000e50 <input_callback+0x128>)
 8000d46:	f000 ff9a 	bl	8001c7e <serial_output_string>
    char temp_dbg[140]; // Temp buffer for received data
    sprintf(temp_dbg, "DEBUG: Received (len %lu): %.*s\r\n", len, (int)len, data);
 8000d4a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000d4e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000d52:	6819      	ldr	r1, [r3, #0]
 8000d54:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000d58:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 8000d5c:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 8000d60:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000d64:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	9300      	str	r3, [sp, #0]
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	6812      	ldr	r2, [r2, #0]
 8000d70:	4938      	ldr	r1, [pc, #224]	@ (8000e54 <input_callback+0x12c>)
 8000d72:	f004 f893 	bl	8004e9c <siprintf>
    serial_output_string(temp_dbg, &USART1_PORT); // DEBUG PRINT RAW DATA
 8000d76:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8000d7a:	4934      	ldr	r1, [pc, #208]	@ (8000e4c <input_callback+0x124>)
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f000 ff7e 	bl	8001c7e <serial_output_string>

	// Check for game start input
    // Make a mutable copy for strtok
    char data_copy[128]; // Ensure this is large enough for expected commands
    strncpy(data_copy, data, len);
 8000d82:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000d86:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 8000d8a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000d8e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000d92:	f107 0018 	add.w	r0, r7, #24
 8000d96:	6812      	ldr	r2, [r2, #0]
 8000d98:	6819      	ldr	r1, [r3, #0]
 8000d9a:	f004 f8b9 	bl	8004f10 <strncpy>
    data_copy[len] = '\0'; // Null-terminate
 8000d9e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000da2:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8000da6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000daa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4413      	add	r3, r2
 8000db2:	2200      	movs	r2, #0
 8000db4:	701a      	strb	r2, [r3, #0]

    if (strncmp(data_copy, "game start", 10) == 0) {
 8000db6:	f107 0318 	add.w	r3, r7, #24
 8000dba:	220a      	movs	r2, #10
 8000dbc:	4926      	ldr	r1, [pc, #152]	@ (8000e58 <input_callback+0x130>)
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f004 f894 	bl	8004eec <strncmp>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d13b      	bne.n	8000e42 <input_callback+0x11a>
        // Defaults
        uint8_t map_values[6] = {4, 8, 0, 0, 0, 0};
 8000dca:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000dce:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000dd2:	4a22      	ldr	r2, [pc, #136]	@ (8000e5c <input_callback+0x134>)
 8000dd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dd8:	6018      	str	r0, [r3, #0]
 8000dda:	3304      	adds	r3, #4
 8000ddc:	8019      	strh	r1, [r3, #0]
        int chances_val = 4;
 8000dde:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000de2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000de6:	2204      	movs	r2, #4
 8000de8:	601a      	str	r2, [r3, #0]
        int time_val = 240;
 8000dea:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000dee:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000df2:	22f0      	movs	r2, #240	@ 0xf0
 8000df4:	601a      	str	r2, [r3, #0]

        // Check if there are parameters after "game start"
        if (strlen(data_copy) > 10) { // e.g. "game start " (note space)
 8000df6:	f107 0318 	add.w	r3, r7, #24
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff f9e8 	bl	80001d0 <strlen>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b0a      	cmp	r3, #10
 8000e04:	d90e      	bls.n	8000e24 <input_callback+0xfc>
            char *params_str = data_copy + 11; // Point to parameters after "game start "
 8000e06:	f107 0318 	add.w	r3, r7, #24
 8000e0a:	330b      	adds	r3, #11
 8000e0c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
            parse_game_config(params_str, map_values, &chances_val, &time_val);
 8000e10:	f107 0308 	add.w	r3, r7, #8
 8000e14:	f107 020c 	add.w	r2, r7, #12
 8000e18:	f107 0110 	add.w	r1, r7, #16
 8000e1c:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 8000e20:	f000 f820 	bl	8000e64 <parse_game_config>
        }
        
        // Call start_game with potentially parsed values
        start_game(&game, map_values, chances_val, time_val);
 8000e24:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000e28:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000e32:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f107 0110 	add.w	r1, r7, #16
 8000e3c:	4808      	ldr	r0, [pc, #32]	@ (8000e60 <input_callback+0x138>)
 8000e3e:	f7ff fdeb 	bl	8000a18 <start_game>
    }
    // It's good practice to clear the input buffer after processing, if your serial_josh lib expects this
    // For example: serial_clear_rx_buffer(&USART1_PORT);
}
 8000e42:	bf00      	nop
 8000e44:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000068 	.word	0x20000068
 8000e50:	08005930 	.word	0x08005930
 8000e54:	08005950 	.word	0x08005950
 8000e58:	08005974 	.word	0x08005974
 8000e5c:	08005980 	.word	0x08005980
 8000e60:	20000008 	.word	0x20000008

08000e64 <parse_game_config>:

// Helper function definitions for parsing serial commands
void parse_game_config(char* params_str, uint8_t* out_map, int* out_chances, int* out_time) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	@ 0x28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
 8000e70:	603b      	str	r3, [r7, #0]
    char *token;
    char *rest = params_str;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	617b      	str	r3, [r7, #20]
    // Default values (already set before calling, but good to be explicit if needed)
    // uint8_t default_map[6] = {4, 8, 0, 0, 0, 0};
    // int default_chances = 4;
    // int default_time = 240;

    while ((token = strtok_r(rest, " ", &rest))) { // Split by space for "map=..." "chances=..."
 8000e76:	e04b      	b.n	8000f10 <parse_game_config+0xac>
        if (strncmp(token, "map=", 4) == 0) {
 8000e78:	2204      	movs	r2, #4
 8000e7a:	492d      	ldr	r1, [pc, #180]	@ (8000f30 <parse_game_config+0xcc>)
 8000e7c:	6a38      	ldr	r0, [r7, #32]
 8000e7e:	f004 f835 	bl	8004eec <strncmp>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d122      	bne.n	8000ece <parse_game_config+0x6a>
            char* map_data = token + 4;
 8000e88:	6a3b      	ldr	r3, [r7, #32]
 8000e8a:	3304      	adds	r3, #4
 8000e8c:	61fb      	str	r3, [r7, #28]
            char* map_val_str;
            char* map_rest = map_data;
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	613b      	str	r3, [r7, #16]
            int i = 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	627b      	str	r3, [r7, #36]	@ 0x24
            while ((map_val_str = strtok_r(map_rest, ",", &map_rest)) && i < 6) {
 8000e96:	e00b      	b.n	8000eb0 <parse_game_config+0x4c>
                out_map[i++] = (uint8_t)atoi(map_val_str);
 8000e98:	69b8      	ldr	r0, [r7, #24]
 8000e9a:	f003 fec1 	bl	8004c20 <atoi>
 8000e9e:	4601      	mov	r1, r0
 8000ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ea2:	1c5a      	adds	r2, r3, #1
 8000ea4:	627a      	str	r2, [r7, #36]	@ 0x24
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	4413      	add	r3, r2
 8000eac:	b2ca      	uxtb	r2, r1
 8000eae:	701a      	strb	r2, [r3, #0]
            while ((map_val_str = strtok_r(map_rest, ",", &map_rest)) && i < 6) {
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	f107 0210 	add.w	r2, r7, #16
 8000eb6:	491f      	ldr	r1, [pc, #124]	@ (8000f34 <parse_game_config+0xd0>)
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f004 f864 	bl	8004f86 <strtok_r>
 8000ebe:	61b8      	str	r0, [r7, #24]
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d024      	beq.n	8000f10 <parse_game_config+0xac>
 8000ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ec8:	2b05      	cmp	r3, #5
 8000eca:	dde5      	ble.n	8000e98 <parse_game_config+0x34>
 8000ecc:	e020      	b.n	8000f10 <parse_game_config+0xac>
            }
        } else if (strncmp(token, "chances=", 8) == 0) {
 8000ece:	2208      	movs	r2, #8
 8000ed0:	4919      	ldr	r1, [pc, #100]	@ (8000f38 <parse_game_config+0xd4>)
 8000ed2:	6a38      	ldr	r0, [r7, #32]
 8000ed4:	f004 f80a 	bl	8004eec <strncmp>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d108      	bne.n	8000ef0 <parse_game_config+0x8c>
            *out_chances = atoi(token + 8);
 8000ede:	6a3b      	ldr	r3, [r7, #32]
 8000ee0:	3308      	adds	r3, #8
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f003 fe9c 	bl	8004c20 <atoi>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	e00f      	b.n	8000f10 <parse_game_config+0xac>
        } else if (strncmp(token, "time=", 5) == 0) {
 8000ef0:	2205      	movs	r2, #5
 8000ef2:	4912      	ldr	r1, [pc, #72]	@ (8000f3c <parse_game_config+0xd8>)
 8000ef4:	6a38      	ldr	r0, [r7, #32]
 8000ef6:	f003 fff9 	bl	8004eec <strncmp>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d107      	bne.n	8000f10 <parse_game_config+0xac>
            *out_time = atoi(token + 5);
 8000f00:	6a3b      	ldr	r3, [r7, #32]
 8000f02:	3305      	adds	r3, #5
 8000f04:	4618      	mov	r0, r3
 8000f06:	f003 fe8b 	bl	8004c20 <atoi>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	601a      	str	r2, [r3, #0]
    while ((token = strtok_r(rest, " ", &rest))) { // Split by space for "map=..." "chances=..."
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	f107 0214 	add.w	r2, r7, #20
 8000f16:	490a      	ldr	r1, [pc, #40]	@ (8000f40 <parse_game_config+0xdc>)
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f004 f834 	bl	8004f86 <strtok_r>
 8000f1e:	6238      	str	r0, [r7, #32]
 8000f20:	6a3b      	ldr	r3, [r7, #32]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d1a8      	bne.n	8000e78 <parse_game_config+0x14>
    sprintf(dbg_buf, "Parsed/Default: Map=%d,%d,%d,%d,%d,%d Chances=%d Time=%d\r\n",
            out_map[0], out_map[1], out_map[2], out_map[3], out_map[4], out_map[5],
            *out_chances, *out_time);
    serial_output_string(dbg_buf, &USART1_PORT);
    */
}
 8000f26:	bf00      	nop
 8000f28:	bf00      	nop
 8000f2a:	3728      	adds	r7, #40	@ 0x28
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	08005988 	.word	0x08005988
 8000f34:	08005990 	.word	0x08005990
 8000f38:	08005994 	.word	0x08005994
 8000f3c:	080059a0 	.word	0x080059a0
 8000f40:	080059a8 	.word	0x080059a8

08000f44 <SetServoAngle>:

void SetServoAngle(uint8_t servoId, uint16_t angle)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b094      	sub	sp, #80	@ 0x50
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	460a      	mov	r2, r1
 8000f4e:	71fb      	strb	r3, [r7, #7]
 8000f50:	4613      	mov	r3, r2
 8000f52:	80bb      	strh	r3, [r7, #4]
  if (angle > 180) angle = 180;
 8000f54:	88bb      	ldrh	r3, [r7, #4]
 8000f56:	2bb4      	cmp	r3, #180	@ 0xb4
 8000f58:	d901      	bls.n	8000f5e <SetServoAngle+0x1a>
 8000f5a:	23b4      	movs	r3, #180	@ 0xb4
 8000f5c:	80bb      	strh	r3, [r7, #4]
  uint32_t pulse = PWM_MIN_PULSE + (angle * (PWM_MAX_PULSE - PWM_MIN_PULSE) / 180);
 8000f5e:	88bb      	ldrh	r3, [r7, #4]
 8000f60:	22c8      	movs	r2, #200	@ 0xc8
 8000f62:	fb02 f303 	mul.w	r3, r2, r3
 8000f66:	4a26      	ldr	r2, [pc, #152]	@ (8001000 <SetServoAngle+0xbc>)
 8000f68:	fb82 1203 	smull	r1, r2, r2, r3
 8000f6c:	441a      	add	r2, r3
 8000f6e:	11d2      	asrs	r2, r2, #7
 8000f70:	17db      	asrs	r3, r3, #31
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	3332      	adds	r3, #50	@ 0x32
 8000f76:	64fb      	str	r3, [r7, #76]	@ 0x4c

  switch (servoId)
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	2b05      	cmp	r3, #5
 8000f7e:	d82d      	bhi.n	8000fdc <SetServoAngle+0x98>
 8000f80:	a201      	add	r2, pc, #4	@ (adr r2, 8000f88 <SetServoAngle+0x44>)
 8000f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f86:	bf00      	nop
 8000f88:	08000fa1 	.word	0x08000fa1
 8000f8c:	08000fab 	.word	0x08000fab
 8000f90:	08000fb5 	.word	0x08000fb5
 8000f94:	08000fbf 	.word	0x08000fbf
 8000f98:	08000fc9 	.word	0x08000fc9
 8000f9c:	08000fd3 	.word	0x08000fd3
  {
    case 1: __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse); break; // PE2
 8000fa0:	4b18      	ldr	r3, [pc, #96]	@ (8001004 <SetServoAngle+0xc0>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000fa6:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fa8:	e019      	b.n	8000fde <SetServoAngle+0x9a>
    case 2: __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulse); break; // PE3
 8000faa:	4b16      	ldr	r3, [pc, #88]	@ (8001004 <SetServoAngle+0xc0>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000fb0:	639a      	str	r2, [r3, #56]	@ 0x38
 8000fb2:	e014      	b.n	8000fde <SetServoAngle+0x9a>
    case 3: __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse); break; // PA0
 8000fb4:	4b14      	ldr	r3, [pc, #80]	@ (8001008 <SetServoAngle+0xc4>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000fba:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fbc:	e00f      	b.n	8000fde <SetServoAngle+0x9a>
    case 4: __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pulse); break; // PA1
 8000fbe:	4b12      	ldr	r3, [pc, #72]	@ (8001008 <SetServoAngle+0xc4>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000fc4:	639a      	str	r2, [r3, #56]	@ 0x38
 8000fc6:	e00a      	b.n	8000fde <SetServoAngle+0x9a>
    case 5: __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pulse); break; // PD12
 8000fc8:	4b10      	ldr	r3, [pc, #64]	@ (800100c <SetServoAngle+0xc8>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000fce:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fd0:	e005      	b.n	8000fde <SetServoAngle+0x9a>
    case 6: __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, pulse); break; // PD13
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800100c <SetServoAngle+0xc8>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000fd8:	639a      	str	r2, [r3, #56]	@ 0x38
 8000fda:	e000      	b.n	8000fde <SetServoAngle+0x9a>
    default: break;
 8000fdc:	bf00      	nop
  }

  // Log action
  char txBuffer[64];
  sprintf(txBuffer, "Setting Servo %d to %d°\r\n", servoId, angle);
 8000fde:	79fa      	ldrb	r2, [r7, #7]
 8000fe0:	88bb      	ldrh	r3, [r7, #4]
 8000fe2:	f107 000c 	add.w	r0, r7, #12
 8000fe6:	490a      	ldr	r1, [pc, #40]	@ (8001010 <SetServoAngle+0xcc>)
 8000fe8:	f003 ff58 	bl	8004e9c <siprintf>
  serial_output_string(txBuffer, &USART1_PORT);
 8000fec:	f107 030c 	add.w	r3, r7, #12
 8000ff0:	4908      	ldr	r1, [pc, #32]	@ (8001014 <SetServoAngle+0xd0>)
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 fe43 	bl	8001c7e <serial_output_string>
}
 8000ff8:	bf00      	nop
 8000ffa:	3750      	adds	r7, #80	@ 0x50
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	b60b60b7 	.word	0xb60b60b7
 8001004:	20000220 	.word	0x20000220
 8001008:	200001d4 	.word	0x200001d4
 800100c:	2000026c 	.word	0x2000026c
 8001010:	080059ac 	.word	0x080059ac
 8001014:	20000068 	.word	0x20000068

08001018 <dig_used>:
      SetServoAngle(servoId, angle);
    }
  }
}

void dig_used(uint8_t servoId) {
 8001018:	b590      	push	{r4, r7, lr}
 800101a:	b0a7      	sub	sp, #156	@ 0x9c
 800101c:	af02      	add	r7, sp, #8
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
    // This is a scaffolding function.
    // It's called when the active servo is fully opened via potentiometer control.
    char buffer[128];

    if (game.game_over || game.digs_remaining == 0) {
 8001022:	4b41      	ldr	r3, [pc, #260]	@ (8001128 <dig_used+0x110>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	2b00      	cmp	r3, #0
 8001028:	d103      	bne.n	8001032 <dig_used+0x1a>
 800102a:	4b3f      	ldr	r3, [pc, #252]	@ (8001128 <dig_used+0x110>)
 800102c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800102e:	2b00      	cmp	r3, #0
 8001030:	d10d      	bne.n	800104e <dig_used+0x36>
        sprintf(buffer, "Dig attempt on servo %d, but game is over or no digs left.\r\n", servoId);
 8001032:	79fa      	ldrb	r2, [r7, #7]
 8001034:	f107 030c 	add.w	r3, r7, #12
 8001038:	493c      	ldr	r1, [pc, #240]	@ (800112c <dig_used+0x114>)
 800103a:	4618      	mov	r0, r3
 800103c:	f003 ff2e 	bl	8004e9c <siprintf>
        serial_output_string(buffer, &USART1_PORT);
 8001040:	f107 030c 	add.w	r3, r7, #12
 8001044:	493a      	ldr	r1, [pc, #232]	@ (8001130 <dig_used+0x118>)
 8001046:	4618      	mov	r0, r3
 8001048:	f000 fe19 	bl	8001c7e <serial_output_string>
 800104c:	e069      	b.n	8001122 <dig_used+0x10a>
        return;
    }

    // A dig is always consumed when this function is called
    game.digs_taken++;
 800104e:	4b36      	ldr	r3, [pc, #216]	@ (8001128 <dig_used+0x110>)
 8001050:	6a1b      	ldr	r3, [r3, #32]
 8001052:	3301      	adds	r3, #1
 8001054:	4a34      	ldr	r2, [pc, #208]	@ (8001128 <dig_used+0x110>)
 8001056:	6213      	str	r3, [r2, #32]
    game.digs_remaining--;
 8001058:	4b33      	ldr	r3, [pc, #204]	@ (8001128 <dig_used+0x110>)
 800105a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800105c:	3b01      	subs	r3, #1
 800105e:	4a32      	ldr	r2, [pc, #200]	@ (8001128 <dig_used+0x110>)
 8001060:	6253      	str	r3, [r2, #36]	@ 0x24

    bool success = false;
 8001062:	2300      	movs	r3, #0
 8001064:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    uint8_t treasure_value = 0; // To store the value/type of treasure if found
 8001068:	2300      	movs	r3, #0
 800106a:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e

    // Check for treasure - servoId is 1-6, array is 0-5
    if (servoId >= 1 && servoId <= 6) {
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d02a      	beq.n	80010ca <dig_used+0xb2>
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	2b06      	cmp	r3, #6
 8001078:	d827      	bhi.n	80010ca <dig_used+0xb2>
        if (game.correct_servos[servoId - 1] != 0) {
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	3b01      	subs	r3, #1
 800107e:	4a2a      	ldr	r2, [pc, #168]	@ (8001128 <dig_used+0x110>)
 8001080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d020      	beq.n	80010ca <dig_used+0xb2>
            success = true;
 8001088:	2301      	movs	r3, #1
 800108a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
            treasure_value = game.correct_servos[servoId - 1];
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	3b01      	subs	r3, #1
 8001092:	4a25      	ldr	r2, [pc, #148]	@ (8001128 <dig_used+0x110>)
 8001094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001098:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
            game.items_found++;
 800109c:	4b22      	ldr	r3, [pc, #136]	@ (8001128 <dig_used+0x110>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	3301      	adds	r3, #1
 80010a2:	4a21      	ldr	r2, [pc, #132]	@ (8001128 <dig_used+0x110>)
 80010a4:	6193      	str	r3, [r2, #24]
            game.items_left_to_find--;
 80010a6:	4b20      	ldr	r3, [pc, #128]	@ (8001128 <dig_used+0x110>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	4a1e      	ldr	r2, [pc, #120]	@ (8001128 <dig_used+0x110>)
 80010ae:	61d3      	str	r3, [r2, #28]
            game.current_score += treasure_value; // Add treasure value to score
 80010b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001128 <dig_used+0x110>)
 80010b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80010b4:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 80010b8:	4413      	add	r3, r2
 80010ba:	4a1b      	ldr	r2, [pc, #108]	@ (8001128 <dig_used+0x110>)
 80010bc:	6393      	str	r3, [r2, #56]	@ 0x38

            // Mark this treasure as found by setting its spot to 0 (or another indicator if needed)
            // For now, let's assume a treasure once found cannot be "found" again for points.
            game.correct_servos[servoId - 1] = 0; // Optional: Prevent re-finding the same treasure
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	3b01      	subs	r3, #1
 80010c2:	4a19      	ldr	r2, [pc, #100]	@ (8001128 <dig_used+0x110>)
 80010c4:	2100      	movs	r1, #0
 80010c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }
    }

    if (success) {
 80010ca:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d010      	beq.n	80010f4 <dig_used+0xdc>
        sprintf(buffer, "DIG SUCCESS at Servo %d! Found Treasure (Value: %d). Digs left: %d. Treasures left: %d\r\n",
 80010d2:	79f9      	ldrb	r1, [r7, #7]
 80010d4:	f897 408e 	ldrb.w	r4, [r7, #142]	@ 0x8e
                servoId, treasure_value, game.digs_remaining, game.items_left_to_find);
 80010d8:	4b13      	ldr	r3, [pc, #76]	@ (8001128 <dig_used+0x110>)
 80010da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010dc:	4a12      	ldr	r2, [pc, #72]	@ (8001128 <dig_used+0x110>)
 80010de:	69d2      	ldr	r2, [r2, #28]
        sprintf(buffer, "DIG SUCCESS at Servo %d! Found Treasure (Value: %d). Digs left: %d. Treasures left: %d\r\n",
 80010e0:	f107 000c 	add.w	r0, r7, #12
 80010e4:	9201      	str	r2, [sp, #4]
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	4623      	mov	r3, r4
 80010ea:	460a      	mov	r2, r1
 80010ec:	4911      	ldr	r1, [pc, #68]	@ (8001134 <dig_used+0x11c>)
 80010ee:	f003 fed5 	bl	8004e9c <siprintf>
 80010f2:	e00b      	b.n	800110c <dig_used+0xf4>
    } else {
        sprintf(buffer, "DIG FAIL at Servo %d. No treasure. Digs left: %d. Treasures left: %d\r\n",
 80010f4:	79fa      	ldrb	r2, [r7, #7]
                servoId, game.digs_remaining, game.items_left_to_find);
 80010f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001128 <dig_used+0x110>)
 80010f8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80010fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001128 <dig_used+0x110>)
 80010fc:	69db      	ldr	r3, [r3, #28]
        sprintf(buffer, "DIG FAIL at Servo %d. No treasure. Digs left: %d. Treasures left: %d\r\n",
 80010fe:	f107 000c 	add.w	r0, r7, #12
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	460b      	mov	r3, r1
 8001106:	490c      	ldr	r1, [pc, #48]	@ (8001138 <dig_used+0x120>)
 8001108:	f003 fec8 	bl	8004e9c <siprintf>
    }
    serial_output_string(buffer, &USART1_PORT);
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	4907      	ldr	r1, [pc, #28]	@ (8001130 <dig_used+0x118>)
 8001112:	4618      	mov	r0, r3
 8001114:	f000 fdb3 	bl	8001c7e <serial_output_string>

    transmit_game_state(); // Send updated Digs Remaining / Treasures Left
 8001118:	f7ff fb9e 	bl	8000858 <transmit_game_state>
    check_game_over(&game); // Check if this dig ended the game
 800111c:	4802      	ldr	r0, [pc, #8]	@ (8001128 <dig_used+0x110>)
 800111e:	f7ff fcfd 	bl	8000b1c <check_game_over>

    // The old update_game_state function might become redundant or be refactored.
    // For now, its core logic (decrementing digs, updating items) is handled here.
}
 8001122:	3794      	adds	r7, #148	@ 0x94
 8001124:	46bd      	mov	sp, r7
 8001126:	bd90      	pop	{r4, r7, pc}
 8001128:	20000008 	.word	0x20000008
 800112c:	08005a00 	.word	0x08005a00
 8001130:	20000068 	.word	0x20000068
 8001134:	08005a40 	.word	0x08005a40
 8001138:	08005a9c 	.word	0x08005a9c

0800113c <display_start_menu>:

void display_start_menu(void) {
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
    serial_output_string("\r\n=====================================\r\n", &USART1_PORT);
 8001140:	490a      	ldr	r1, [pc, #40]	@ (800116c <display_start_menu+0x30>)
 8001142:	480b      	ldr	r0, [pc, #44]	@ (8001170 <display_start_menu+0x34>)
 8001144:	f000 fd9b 	bl	8001c7e <serial_output_string>
    serial_output_string(" T R E A S U R E   H U N T ! ! ! \r\n", &USART1_PORT);
 8001148:	4908      	ldr	r1, [pc, #32]	@ (800116c <display_start_menu+0x30>)
 800114a:	480a      	ldr	r0, [pc, #40]	@ (8001174 <display_start_menu+0x38>)
 800114c:	f000 fd97 	bl	8001c7e <serial_output_string>
    serial_output_string("=====================================\r\n", &USART1_PORT);
 8001150:	4906      	ldr	r1, [pc, #24]	@ (800116c <display_start_menu+0x30>)
 8001152:	4809      	ldr	r0, [pc, #36]	@ (8001178 <display_start_menu+0x3c>)
 8001154:	f000 fd93 	bl	8001c7e <serial_output_string>
    serial_output_string("Send 'game start' via serial to begin.\r\n", &USART1_PORT);
 8001158:	4904      	ldr	r1, [pc, #16]	@ (800116c <display_start_menu+0x30>)
 800115a:	4808      	ldr	r0, [pc, #32]	@ (800117c <display_start_menu+0x40>)
 800115c:	f000 fd8f 	bl	8001c7e <serial_output_string>
    serial_output_string("-------------------------------------\r\n\n", &USART1_PORT);
 8001160:	4902      	ldr	r1, [pc, #8]	@ (800116c <display_start_menu+0x30>)
 8001162:	4807      	ldr	r0, [pc, #28]	@ (8001180 <display_start_menu+0x44>)
 8001164:	f000 fd8b 	bl	8001c7e <serial_output_string>
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000068 	.word	0x20000068
 8001170:	08005ae4 	.word	0x08005ae4
 8001174:	08005b10 	.word	0x08005b10
 8001178:	08005b34 	.word	0x08005b34
 800117c:	08005b5c 	.word	0x08005b5c
 8001180:	08005b88 	.word	0x08005b88

08001184 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001184:	b590      	push	{r4, r7, lr}
 8001186:	b0ab      	sub	sp, #172	@ 0xac
 8001188:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800118a:	f001 f9f1 	bl	8002570 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800118e:	f000 fa59 	bl	8001644 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001192:	f000 fbcd 	bl	8001930 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001196:	f000 fa99 	bl	80016cc <MX_TIM2_Init>
  MX_TIM3_Init();
 800119a:	f000 fafd 	bl	8001798 <MX_TIM3_Init>
  MX_TIM4_Init();
 800119e:	f000 fb61 	bl	8001864 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  //HAL_UART_Receive_IT(&huart1, &rx_data, 1);

  // Initialize touch sensors
  GPIO *touch_pads_pb = init_port(B, INPUT, 3, 13); // PB3-PB7, PB13
 80011a2:	230d      	movs	r3, #13
 80011a4:	2203      	movs	r2, #3
 80011a6:	2100      	movs	r1, #0
 80011a8:	2001      	movs	r0, #1
 80011aa:	f7ff f8cb 	bl	8000344 <init_port>
 80011ae:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
  GPIO *trim_pot = init_port(A, ANALOG, 4, 4); // PA4 for trimpot
 80011b2:	2304      	movs	r3, #4
 80011b4:	2204      	movs	r2, #4
 80011b6:	2102      	movs	r1, #2
 80011b8:	2000      	movs	r0, #0
 80011ba:	f7ff f8c3 	bl	8000344 <init_port>
 80011be:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88

  // Enable interrupts for touch sensors
  enable_interupt(touch_pads_pb, 3, RISING_EDGE, 0, &handle_touch); // PB3
 80011c2:	4ba4      	ldr	r3, [pc, #656]	@ (8001454 <main+0x2d0>)
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	2300      	movs	r3, #0
 80011c8:	2200      	movs	r2, #0
 80011ca:	2103      	movs	r1, #3
 80011cc:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80011d0:	f7ff fab4 	bl	800073c <enable_interupt>
  enable_interupt(touch_pads_pb, 4, RISING_EDGE, 0, &handle_touch); // PB4
 80011d4:	4b9f      	ldr	r3, [pc, #636]	@ (8001454 <main+0x2d0>)
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	2300      	movs	r3, #0
 80011da:	2200      	movs	r2, #0
 80011dc:	2104      	movs	r1, #4
 80011de:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80011e2:	f7ff faab 	bl	800073c <enable_interupt>
  enable_interupt(touch_pads_pb, 5, RISING_EDGE, 0, &handle_touch); // PB5
 80011e6:	4b9b      	ldr	r3, [pc, #620]	@ (8001454 <main+0x2d0>)
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	2300      	movs	r3, #0
 80011ec:	2200      	movs	r2, #0
 80011ee:	2105      	movs	r1, #5
 80011f0:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80011f4:	f7ff faa2 	bl	800073c <enable_interupt>
  enable_interupt(touch_pads_pb, 6, RISING_EDGE, 0, &handle_touch); // PB6
 80011f8:	4b96      	ldr	r3, [pc, #600]	@ (8001454 <main+0x2d0>)
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2300      	movs	r3, #0
 80011fe:	2200      	movs	r2, #0
 8001200:	2106      	movs	r1, #6
 8001202:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8001206:	f7ff fa99 	bl	800073c <enable_interupt>
  enable_interupt(touch_pads_pb, 7, RISING_EDGE, 0, &handle_touch); // PB7
 800120a:	4b92      	ldr	r3, [pc, #584]	@ (8001454 <main+0x2d0>)
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	2300      	movs	r3, #0
 8001210:	2200      	movs	r2, #0
 8001212:	2107      	movs	r1, #7
 8001214:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8001218:	f7ff fa90 	bl	800073c <enable_interupt>
  enable_interupt(touch_pads_pb, 13, RISING_EDGE, 0, &handle_touch); // PB13
 800121c:	4b8d      	ldr	r3, [pc, #564]	@ (8001454 <main+0x2d0>)
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	2300      	movs	r3, #0
 8001222:	2200      	movs	r2, #0
 8001224:	210d      	movs	r1, #13
 8001226:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800122a:	f7ff fa87 	bl	800073c <enable_interupt>

  // Initialize servos: Start PWM
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // Servo 1: PE2
 800122e:	2100      	movs	r1, #0
 8001230:	4889      	ldr	r0, [pc, #548]	@ (8001458 <main+0x2d4>)
 8001232:	f002 fec9 	bl	8003fc8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // Servo 2: PE3
 8001236:	2104      	movs	r1, #4
 8001238:	4887      	ldr	r0, [pc, #540]	@ (8001458 <main+0x2d4>)
 800123a:	f002 fec5 	bl	8003fc8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // Servo 3: PA0
 800123e:	2100      	movs	r1, #0
 8001240:	4886      	ldr	r0, [pc, #536]	@ (800145c <main+0x2d8>)
 8001242:	f002 fec1 	bl	8003fc8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // Servo 4: PA1
 8001246:	2104      	movs	r1, #4
 8001248:	4884      	ldr	r0, [pc, #528]	@ (800145c <main+0x2d8>)
 800124a:	f002 febd 	bl	8003fc8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); // Servo 5: PD12
 800124e:	2100      	movs	r1, #0
 8001250:	4883      	ldr	r0, [pc, #524]	@ (8001460 <main+0x2dc>)
 8001252:	f002 feb9 	bl	8003fc8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); // Servo 6: PD13
 8001256:	2104      	movs	r1, #4
 8001258:	4881      	ldr	r0, [pc, #516]	@ (8001460 <main+0x2dc>)
 800125a:	f002 feb5 	bl	8003fc8 <HAL_TIM_PWM_Start>

  // Serial Init
  serial_initialise(115200, &USART1_PORT, &output_callback, &input_callback);
 800125e:	4b81      	ldr	r3, [pc, #516]	@ (8001464 <main+0x2e0>)
 8001260:	4a81      	ldr	r2, [pc, #516]	@ (8001468 <main+0x2e4>)
 8001262:	4982      	ldr	r1, [pc, #520]	@ (800146c <main+0x2e8>)
 8001264:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 8001268:	f000 fc8c 	bl	8001b84 <serial_initialise>

  enable_interrupts(&USART1_PORT);
 800126c:	487f      	ldr	r0, [pc, #508]	@ (800146c <main+0x2e8>)
 800126e:	f000 fd29 	bl	8001cc4 <enable_interrupts>

  display_start_menu(); // Display start menu when MCU boots up
 8001272:	f7ff ff63 	bl	800113c <display_start_menu>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // Potentiometer reading - moved up for general access if needed, specifically for new logic
    uint16_t pot_raw_value;
    read_pins_analog(trim_pot, &pot_raw_value);
 8001276:	f107 0382 	add.w	r3, r7, #130	@ 0x82
 800127a:	4619      	mov	r1, r3
 800127c:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8001280:	f7ff f924 	bl	80004cc <read_pins_analog>

	  // Wait for game start
	  if (game.game_over) {
 8001284:	4b7a      	ldr	r3, [pc, #488]	@ (8001470 <main+0x2ec>)
 8001286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001288:	2b00      	cmp	r3, #0
 800128a:	d019      	beq.n	80012c0 <main+0x13c>
        // Reset active mode state if game ends/restarts
        isActiveMode = false;
 800128c:	4b79      	ldr	r3, [pc, #484]	@ (8001474 <main+0x2f0>)
 800128e:	2200      	movs	r2, #0
 8001290:	701a      	strb	r2, [r3, #0]
        activeServoId = 0;
 8001292:	4b79      	ldr	r3, [pc, #484]	@ (8001478 <main+0x2f4>)
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
        servoFullyOpened = false;
 8001298:	4b78      	ldr	r3, [pc, #480]	@ (800147c <main+0x2f8>)
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]
        servoFullyClosed = false;
 800129e:	4b78      	ldr	r3, [pc, #480]	@ (8001480 <main+0x2fc>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	701a      	strb	r2, [r3, #0]
        activeTouchpadPin = 0;
 80012a4:	4b77      	ldr	r3, [pc, #476]	@ (8001484 <main+0x300>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]
        armed_touchpad_pin = 0; // Reset armed pin
 80012aa:	4b77      	ldr	r3, [pc, #476]	@ (8001488 <main+0x304>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
        touch_enabled = true; // Ensure touches are re-enabled for the ISR
 80012b0:	4b76      	ldr	r3, [pc, #472]	@ (800148c <main+0x308>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	701a      	strb	r2, [r3, #0]
        triggers.touchpad_pressed = -1; // Clear any latched touch from the ended game
 80012b6:	4b76      	ldr	r3, [pc, #472]	@ (8001490 <main+0x30c>)
 80012b8:	f04f 32ff 	mov.w	r2, #4294967295
 80012bc:	601a      	str	r2, [r3, #0]
		  continue;
 80012be:	e1a6      	b.n	800160e <main+0x48a>
	  }

    // Restore the check for game over conditions properly
    int check = check_game_over(&game);
 80012c0:	486b      	ldr	r0, [pc, #428]	@ (8001470 <main+0x2ec>)
 80012c2:	f7ff fc2b 	bl	8000b1c <check_game_over>
 80012c6:	4603      	mov	r3, r0
 80012c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	  if (check == 1) {
 80012cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d115      	bne.n	8001300 <main+0x17c>
        // Reset active mode state if game ends due to conditions
        isActiveMode = false;
 80012d4:	4b67      	ldr	r3, [pc, #412]	@ (8001474 <main+0x2f0>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]
        activeServoId = 0;
 80012da:	4b67      	ldr	r3, [pc, #412]	@ (8001478 <main+0x2f4>)
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
        servoFullyOpened = false;
 80012e0:	4b66      	ldr	r3, [pc, #408]	@ (800147c <main+0x2f8>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
        servoFullyClosed = false;
 80012e6:	4b66      	ldr	r3, [pc, #408]	@ (8001480 <main+0x2fc>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]
        activeTouchpadPin = 0;
 80012ec:	4b65      	ldr	r3, [pc, #404]	@ (8001484 <main+0x300>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	701a      	strb	r2, [r3, #0]
        armed_touchpad_pin = 0; // Reset armed pin
 80012f2:	4b65      	ldr	r3, [pc, #404]	@ (8001488 <main+0x304>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]
        touch_enabled = true;
 80012f8:	4b64      	ldr	r3, [pc, #400]	@ (800148c <main+0x308>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	701a      	strb	r2, [r3, #0]
		  continue;
 80012fe:	e186      	b.n	800160e <main+0x48a>
	  }

    // --- New Trimpot and Touch Interaction Logic ---
    if (!isActiveMode) {
 8001300:	4b5c      	ldr	r3, [pc, #368]	@ (8001474 <main+0x2f0>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	f083 0301 	eor.w	r3, r3, #1
 8001308:	b2db      	uxtb	r3, r3
 800130a:	2b00      	cmp	r3, #0
 800130c:	f000 80ce 	beq.w	80014ac <main+0x328>
        touch_enabled = true; // Ensure touches can be registered by ISR
 8001310:	4b5e      	ldr	r3, [pc, #376]	@ (800148c <main+0x308>)
 8001312:	2201      	movs	r2, #1
 8001314:	701a      	strb	r2, [r3, #0]

        if (triggers.touchpad_pressed != -1) { // A new touch event from ISR
 8001316:	4b5e      	ldr	r3, [pc, #376]	@ (8001490 <main+0x30c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800131e:	d015      	beq.n	800134c <main+0x1c8>
            // A touch sensor was pressed. Arm it.
            // This will override any previously armed touchpad if not yet activated.
            armed_touchpad_pin = triggers.touchpad_pressed;
 8001320:	4b5b      	ldr	r3, [pc, #364]	@ (8001490 <main+0x30c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4b58      	ldr	r3, [pc, #352]	@ (8001488 <main+0x304>)
 8001328:	701a      	strb	r2, [r3, #0]
            char log_buf[80]; // Increased buffer size
            sprintf(log_buf, "Touchpad PB%d armed. Waiting for pot threshold (>%d).", armed_touchpad_pin, POT_ACTIVE_THRESHOLD_RAW);
 800132a:	4b57      	ldr	r3, [pc, #348]	@ (8001488 <main+0x304>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	461a      	mov	r2, r3
 8001330:	4638      	mov	r0, r7
 8001332:	2332      	movs	r3, #50	@ 0x32
 8001334:	4957      	ldr	r1, [pc, #348]	@ (8001494 <main+0x310>)
 8001336:	f003 fdb1 	bl	8004e9c <siprintf>
            serial_output_string(log_buf, &USART1_PORT);
 800133a:	463b      	mov	r3, r7
 800133c:	494b      	ldr	r1, [pc, #300]	@ (800146c <main+0x2e8>)
 800133e:	4618      	mov	r0, r3
 8001340:	f000 fc9d 	bl	8001c7e <serial_output_string>
            triggers.touchpad_pressed = -1; // Consume the ISR flag
 8001344:	4b52      	ldr	r3, [pc, #328]	@ (8001490 <main+0x30c>)
 8001346:	f04f 32ff 	mov.w	r2, #4294967295
 800134a:	601a      	str	r2, [r3, #0]
        }

        if (armed_touchpad_pin != 0 && pot_raw_value > POT_ACTIVE_THRESHOLD_RAW) {
 800134c:	4b4e      	ldr	r3, [pc, #312]	@ (8001488 <main+0x304>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d090      	beq.n	8001276 <main+0xf2>
 8001354:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8001358:	2b32      	cmp	r3, #50	@ 0x32
 800135a:	d98c      	bls.n	8001276 <main+0xf2>
            // An armed touchpad exists AND pot is above threshold. Activate!
            isActiveMode = true;
 800135c:	4b45      	ldr	r3, [pc, #276]	@ (8001474 <main+0x2f0>)
 800135e:	2201      	movs	r2, #1
 8001360:	701a      	strb	r2, [r3, #0]
            servoFullyOpened = false;
 8001362:	4b46      	ldr	r3, [pc, #280]	@ (800147c <main+0x2f8>)
 8001364:	2200      	movs	r2, #0
 8001366:	701a      	strb	r2, [r3, #0]
            servoFullyClosed = false; // Reset these for the new cycle
 8001368:	4b45      	ldr	r3, [pc, #276]	@ (8001480 <main+0x2fc>)
 800136a:	2200      	movs	r2, #0
 800136c:	701a      	strb	r2, [r3, #0]
            activeTouchpadPin = armed_touchpad_pin; // This is the pin that triggered the mode
 800136e:	4b46      	ldr	r3, [pc, #280]	@ (8001488 <main+0x304>)
 8001370:	781a      	ldrb	r2, [r3, #0]
 8001372:	4b44      	ldr	r3, [pc, #272]	@ (8001484 <main+0x300>)
 8001374:	701a      	strb	r2, [r3, #0]
            armed_touchpad_pin = 0; // Disarm, as it's now active and being processed.
 8001376:	4b44      	ldr	r3, [pc, #272]	@ (8001488 <main+0x304>)
 8001378:	2200      	movs	r2, #0
 800137a:	701a      	strb	r2, [r3, #0]

            // Map the pressed pin number to a servo ID (1-6)
            uint8_t touch_index_for_servo_map = 255; // 0-5 index for touch_to_servo_map
 800137c:	23ff      	movs	r3, #255	@ 0xff
 800137e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
            static const uint8_t touch_pins_lookup_table[6] = {7, 6, 5, 4, 3, 13}; // PB7, PB6, PB5, PB4, PB3, PB13
            for (uint8_t i = 0; i < 6; i++) {
 8001382:	2300      	movs	r3, #0
 8001384:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8001388:	e011      	b.n	80013ae <main+0x22a>
                if (activeTouchpadPin == touch_pins_lookup_table[i]) {
 800138a:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800138e:	4a42      	ldr	r2, [pc, #264]	@ (8001498 <main+0x314>)
 8001390:	5cd2      	ldrb	r2, [r2, r3]
 8001392:	4b3c      	ldr	r3, [pc, #240]	@ (8001484 <main+0x300>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	429a      	cmp	r2, r3
 8001398:	d104      	bne.n	80013a4 <main+0x220>
                    touch_index_for_servo_map = i;
 800139a:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800139e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
                    break;
 80013a2:	e008      	b.n	80013b6 <main+0x232>
            for (uint8_t i = 0; i < 6; i++) {
 80013a4:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80013a8:	3301      	adds	r3, #1
 80013aa:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 80013ae:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80013b2:	2b05      	cmp	r3, #5
 80013b4:	d9e9      	bls.n	800138a <main+0x206>
                }
            }

            if (touch_index_for_servo_map < 6) {
 80013b6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80013ba:	2b05      	cmp	r3, #5
 80013bc:	d836      	bhi.n	800142c <main+0x2a8>
                activeServoId = touch_to_servo_map[touch_index_for_servo_map]; // Get Servo ID 1-6
 80013be:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80013c2:	4a36      	ldr	r2, [pc, #216]	@ (800149c <main+0x318>)
 80013c4:	5cd2      	ldrb	r2, [r2, r3]
 80013c6:	4b2c      	ldr	r3, [pc, #176]	@ (8001478 <main+0x2f4>)
 80013c8:	701a      	strb	r2, [r3, #0]
                if (activeServoId >= 1 && activeServoId <= 6) {
 80013ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001478 <main+0x2f4>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d021      	beq.n	8001416 <main+0x292>
 80013d2:	4b29      	ldr	r3, [pc, #164]	@ (8001478 <main+0x2f4>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b06      	cmp	r3, #6
 80013d8:	d81d      	bhi.n	8001416 <main+0x292>
                    char log_buffer[128];
                    sprintf(log_buffer, "Activated: Armed PB%d (Servo %d), Pot (%d) > Thresh (%d). Controlling Servo %d.\r\n",
 80013da:	4b2a      	ldr	r3, [pc, #168]	@ (8001484 <main+0x300>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	4619      	mov	r1, r3
 80013e0:	4b25      	ldr	r3, [pc, #148]	@ (8001478 <main+0x2f4>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	461c      	mov	r4, r3
 80013e6:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80013ea:	461a      	mov	r2, r3
 80013ec:	4b22      	ldr	r3, [pc, #136]	@ (8001478 <main+0x2f4>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	4638      	mov	r0, r7
 80013f2:	9302      	str	r3, [sp, #8]
 80013f4:	2332      	movs	r3, #50	@ 0x32
 80013f6:	9301      	str	r3, [sp, #4]
 80013f8:	9200      	str	r2, [sp, #0]
 80013fa:	4623      	mov	r3, r4
 80013fc:	460a      	mov	r2, r1
 80013fe:	4928      	ldr	r1, [pc, #160]	@ (80014a0 <main+0x31c>)
 8001400:	f003 fd4c 	bl	8004e9c <siprintf>
                            activeTouchpadPin, activeServoId, pot_raw_value, POT_ACTIVE_THRESHOLD_RAW, activeServoId);
                    serial_output_string(log_buffer, &USART1_PORT);
 8001404:	463b      	mov	r3, r7
 8001406:	4919      	ldr	r1, [pc, #100]	@ (800146c <main+0x2e8>)
 8001408:	4618      	mov	r0, r3
 800140a:	f000 fc38 	bl	8001c7e <serial_output_string>
                    touch_enabled = false; // Disable further touch processing by ISR while in active mode
 800140e:	4b1f      	ldr	r3, [pc, #124]	@ (800148c <main+0x308>)
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]
                if (activeServoId >= 1 && activeServoId <= 6) {
 8001414:	e0fb      	b.n	800160e <main+0x48a>
                } else {
                    serial_output_string("Error: Mapped to invalid Servo ID. Deactivating armed touch.\r\n", &USART1_PORT);
 8001416:	4915      	ldr	r1, [pc, #84]	@ (800146c <main+0x2e8>)
 8001418:	4822      	ldr	r0, [pc, #136]	@ (80014a4 <main+0x320>)
 800141a:	f000 fc30 	bl	8001c7e <serial_output_string>
                    isActiveMode = false; // Abort activation
 800141e:	4b15      	ldr	r3, [pc, #84]	@ (8001474 <main+0x2f0>)
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]
                    activeTouchpadPin = 0; // Clear, was from armed_touchpad_pin which is now 0
 8001424:	4b17      	ldr	r3, [pc, #92]	@ (8001484 <main+0x300>)
 8001426:	2200      	movs	r2, #0
 8001428:	701a      	strb	r2, [r3, #0]
 800142a:	e724      	b.n	8001276 <main+0xf2>
                    // touch_enabled = true; // Will be set true at the start of the next !isActiveMode block
                }
            } else {
                char log_buffer[128]; // Increased buffer size
                sprintf(log_buffer, "Error: Armed touch pin PB%d not found in map. Deactivating armed touch.\r\n", activeTouchpadPin);
 800142c:	4b15      	ldr	r3, [pc, #84]	@ (8001484 <main+0x300>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	463b      	mov	r3, r7
 8001434:	491c      	ldr	r1, [pc, #112]	@ (80014a8 <main+0x324>)
 8001436:	4618      	mov	r0, r3
 8001438:	f003 fd30 	bl	8004e9c <siprintf>
                serial_output_string(log_buffer, &USART1_PORT);
 800143c:	463b      	mov	r3, r7
 800143e:	490b      	ldr	r1, [pc, #44]	@ (800146c <main+0x2e8>)
 8001440:	4618      	mov	r0, r3
 8001442:	f000 fc1c 	bl	8001c7e <serial_output_string>
                isActiveMode = false; // Abort activation
 8001446:	4b0b      	ldr	r3, [pc, #44]	@ (8001474 <main+0x2f0>)
 8001448:	2200      	movs	r2, #0
 800144a:	701a      	strb	r2, [r3, #0]
                activeTouchpadPin = 0;
 800144c:	4b0d      	ldr	r3, [pc, #52]	@ (8001484 <main+0x300>)
 800144e:	2200      	movs	r2, #0
 8001450:	701a      	strb	r2, [r3, #0]
 8001452:	e710      	b.n	8001276 <main+0xf2>
 8001454:	08000c79 	.word	0x08000c79
 8001458:	20000220 	.word	0x20000220
 800145c:	200001d4 	.word	0x200001d4
 8001460:	2000026c 	.word	0x2000026c
 8001464:	08000d29 	.word	0x08000d29
 8001468:	08000d19 	.word	0x08000d19
 800146c:	20000068 	.word	0x20000068
 8001470:	20000008 	.word	0x20000008
 8001474:	200002be 	.word	0x200002be
 8001478:	200002bf 	.word	0x200002bf
 800147c:	200002c0 	.word	0x200002c0
 8001480:	200002c1 	.word	0x200002c1
 8001484:	200002c2 	.word	0x200002c2
 8001488:	200002c3 	.word	0x200002c3
 800148c:	20000064 	.word	0x20000064
 8001490:	20000044 	.word	0x20000044
 8001494:	08005bb4 	.word	0x08005bb4
 8001498:	08005de4 	.word	0x08005de4
 800149c:	20000000 	.word	0x20000000
 80014a0:	08005bec 	.word	0x08005bec
 80014a4:	08005c40 	.word	0x08005c40
 80014a8:	08005c80 	.word	0x08005c80
                // touch_enabled = true;
            }
        }
    } else { // isActiveMode == true
        touch_enabled = false; // Keep touch input disabled for ISR
 80014ac:	4b58      	ldr	r3, [pc, #352]	@ (8001610 <main+0x48c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	701a      	strb	r2, [r3, #0]

        if (activeServoId >= 1 && activeServoId <= 6) {
 80014b2:	4b58      	ldr	r3, [pc, #352]	@ (8001614 <main+0x490>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f000 809d 	beq.w	80015f6 <main+0x472>
 80014bc:	4b55      	ldr	r3, [pc, #340]	@ (8001614 <main+0x490>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b06      	cmp	r3, #6
 80014c2:	f200 8098 	bhi.w	80015f6 <main+0x472>
            // Map potentiometer value to servo angle (0 to SERVO_TARGET_OPEN_ANGLE)
            uint16_t current_target_angle = (uint16_t)(((float)pot_raw_value * (float)SERVO_TARGET_OPEN_ANGLE) / 0xFFF);
 80014c6:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80014ca:	ee07 3a90 	vmov	s15, r3
 80014ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014d2:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8001618 <main+0x494>
 80014d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014da:	eddf 6a50 	vldr	s13, [pc, #320]	@ 800161c <main+0x498>
 80014de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014e6:	ee17 3a90 	vmov	r3, s15
 80014ea:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
            if (current_target_angle > SERVO_TARGET_OPEN_ANGLE) current_target_angle = SERVO_TARGET_OPEN_ANGLE;
 80014ee:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80014f2:	2b5a      	cmp	r3, #90	@ 0x5a
 80014f4:	d902      	bls.n	80014fc <main+0x378>
 80014f6:	235a      	movs	r3, #90	@ 0x5a
 80014f8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
            // if (current_target_angle < SERVO_TARGET_CLOSED_ANGLE) current_target_angle = SERVO_TARGET_CLOSED_ANGLE; // Pot raw is uint

            SetServoAngle(activeServoId, current_target_angle); // Continuously update servo position
 80014fc:	4b45      	ldr	r3, [pc, #276]	@ (8001614 <main+0x490>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	f8b7 2094 	ldrh.w	r2, [r7, #148]	@ 0x94
 8001504:	4611      	mov	r1, r2
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fd1c 	bl	8000f44 <SetServoAngle>

            if (!servoFullyOpened) {
 800150c:	4b44      	ldr	r3, [pc, #272]	@ (8001620 <main+0x49c>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	f083 0301 	eor.w	r3, r3, #1
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d01a      	beq.n	8001550 <main+0x3cc>
                // Check if servo is considered fully open
                if (current_target_angle >= (SERVO_TARGET_OPEN_ANGLE - SERVO_ANGLE_TOLERANCE)) {
 800151a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800151e:	2b56      	cmp	r3, #86	@ 0x56
 8001520:	d974      	bls.n	800160c <main+0x488>
                    servoFullyOpened = true;
 8001522:	4b3f      	ldr	r3, [pc, #252]	@ (8001620 <main+0x49c>)
 8001524:	2201      	movs	r2, #1
 8001526:	701a      	strb	r2, [r3, #0]
                    dig_used(activeServoId); // Call the scaffolding function for "dig"
 8001528:	4b3a      	ldr	r3, [pc, #232]	@ (8001614 <main+0x490>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff fd73 	bl	8001018 <dig_used>

                    char log_buffer[128];
                    sprintf(log_buffer, "Servo %d fully opened (Angle: %d). Pot-control active. Close fully to finish.\r\n",
 8001532:	4b38      	ldr	r3, [pc, #224]	@ (8001614 <main+0x490>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	461a      	mov	r2, r3
 8001538:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800153c:	4638      	mov	r0, r7
 800153e:	4939      	ldr	r1, [pc, #228]	@ (8001624 <main+0x4a0>)
 8001540:	f003 fcac 	bl	8004e9c <siprintf>
                            activeServoId, current_target_angle);
                    serial_output_string(log_buffer, &USART1_PORT);
 8001544:	463b      	mov	r3, r7
 8001546:	4938      	ldr	r1, [pc, #224]	@ (8001628 <main+0x4a4>)
 8001548:	4618      	mov	r0, r3
 800154a:	f000 fb98 	bl	8001c7e <serial_output_string>
        if (activeServoId >= 1 && activeServoId <= 6) {
 800154e:	e05d      	b.n	800160c <main+0x488>
                }
            } else if (!servoFullyClosed) { // servoFullyOpened is true, now waiting for full closure
 8001550:	4b36      	ldr	r3, [pc, #216]	@ (800162c <main+0x4a8>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	f083 0301 	eor.w	r3, r3, #1
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d056      	beq.n	800160c <main+0x488>
                // Check if servo is considered fully closed
                if (current_target_angle <= (SERVO_TARGET_CLOSED_ANGLE + SERVO_ANGLE_TOLERANCE)) {
 800155e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8001562:	2b03      	cmp	r3, #3
 8001564:	d852      	bhi.n	800160c <main+0x488>
                    servoFullyClosed = true;
 8001566:	4b31      	ldr	r3, [pc, #196]	@ (800162c <main+0x4a8>)
 8001568:	2201      	movs	r2, #1
 800156a:	701a      	strb	r2, [r3, #0]
                    // Cycle for this servo is complete
                    char log_buffer[128];
                    sprintf(log_buffer, "Servo %d fully closed (Angle: %d). Cycle complete for touch PB%d.\r\n",
 800156c:	4b29      	ldr	r3, [pc, #164]	@ (8001614 <main+0x490>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	4619      	mov	r1, r3
 8001572:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8001576:	4a2e      	ldr	r2, [pc, #184]	@ (8001630 <main+0x4ac>)
 8001578:	7812      	ldrb	r2, [r2, #0]
 800157a:	4638      	mov	r0, r7
 800157c:	9200      	str	r2, [sp, #0]
 800157e:	460a      	mov	r2, r1
 8001580:	492c      	ldr	r1, [pc, #176]	@ (8001634 <main+0x4b0>)
 8001582:	f003 fc8b 	bl	8004e9c <siprintf>
                            activeServoId, current_target_angle, activeTouchpadPin);
                    serial_output_string(log_buffer, &USART1_PORT);
 8001586:	463b      	mov	r3, r7
 8001588:	4927      	ldr	r1, [pc, #156]	@ (8001628 <main+0x4a4>)
 800158a:	4618      	mov	r0, r3
 800158c:	f000 fb77 	bl	8001c7e <serial_output_string>

                    // Disable the touchpad that was used for this cycle
                    uint8_t touchpad_index_to_disable = 255; // 0-5 index for disable_touchpad
 8001590:	23ff      	movs	r3, #255	@ 0xff
 8001592:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
                    static const uint8_t touch_pins_disable_lookup_table[6] = {7, 6, 5, 4, 3, 13};
                    for (uint8_t i = 0; i < 6; i++) {
 8001596:	2300      	movs	r3, #0
 8001598:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
 800159c:	e011      	b.n	80015c2 <main+0x43e>
                        if (activeTouchpadPin == touch_pins_disable_lookup_table[i]) {
 800159e:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 80015a2:	4a25      	ldr	r2, [pc, #148]	@ (8001638 <main+0x4b4>)
 80015a4:	5cd2      	ldrb	r2, [r2, r3]
 80015a6:	4b22      	ldr	r3, [pc, #136]	@ (8001630 <main+0x4ac>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d104      	bne.n	80015b8 <main+0x434>
                            touchpad_index_to_disable = i;
 80015ae:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 80015b2:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
                            break;
 80015b6:	e008      	b.n	80015ca <main+0x446>
                    for (uint8_t i = 0; i < 6; i++) {
 80015b8:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 80015bc:	3301      	adds	r3, #1
 80015be:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
 80015c2:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 80015c6:	2b05      	cmp	r3, #5
 80015c8:	d9e9      	bls.n	800159e <main+0x41a>
                        }
                    }
                    if (touchpad_index_to_disable < 6) {
 80015ca:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 80015ce:	2b05      	cmp	r3, #5
 80015d0:	d804      	bhi.n	80015dc <main+0x458>
                        disable_touchpad(touchpad_index_to_disable); // disable_touchpad expects 0-5 index
 80015d2:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff f9d6 	bl	8000988 <disable_touchpad>
                    }

                    // Reset state for the next interaction
                    isActiveMode = false;
 80015dc:	4b17      	ldr	r3, [pc, #92]	@ (800163c <main+0x4b8>)
 80015de:	2200      	movs	r2, #0
 80015e0:	701a      	strb	r2, [r3, #0]
                    activeServoId = 0; // Clear active servo
 80015e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001614 <main+0x490>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	701a      	strb	r2, [r3, #0]
                    activeTouchpadPin = 0; // Clear active pin
 80015e8:	4b11      	ldr	r3, [pc, #68]	@ (8001630 <main+0x4ac>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	701a      	strb	r2, [r3, #0]
                    // servoFullyOpened and servoFullyClosed will be reset at the start of the next activation
                    touch_enabled = true; // Re-enable touch processing by ISR
 80015ee:	4b08      	ldr	r3, [pc, #32]	@ (8001610 <main+0x48c>)
 80015f0:	2201      	movs	r2, #1
 80015f2:	701a      	strb	r2, [r3, #0]
        if (activeServoId >= 1 && activeServoId <= 6) {
 80015f4:	e00a      	b.n	800160c <main+0x488>
                }
            }
        } else {
            // This case should ideally not be reached if logic is sound
            serial_output_string("Error: In active mode with invalid activeServoId. Deactivating.\r\n", &USART1_PORT);
 80015f6:	490c      	ldr	r1, [pc, #48]	@ (8001628 <main+0x4a4>)
 80015f8:	4811      	ldr	r0, [pc, #68]	@ (8001640 <main+0x4bc>)
 80015fa:	f000 fb40 	bl	8001c7e <serial_output_string>
            isActiveMode = false;
 80015fe:	4b0f      	ldr	r3, [pc, #60]	@ (800163c <main+0x4b8>)
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]
            touch_enabled = true; // Ensure touches are re-enabled
 8001604:	4b02      	ldr	r3, [pc, #8]	@ (8001610 <main+0x48c>)
 8001606:	2201      	movs	r2, #1
 8001608:	701a      	strb	r2, [r3, #0]
 800160a:	e634      	b.n	8001276 <main+0xf2>
        if (activeServoId >= 1 && activeServoId <= 6) {
 800160c:	bf00      	nop
  {
 800160e:	e632      	b.n	8001276 <main+0xf2>
 8001610:	20000064 	.word	0x20000064
 8001614:	200002bf 	.word	0x200002bf
 8001618:	42b40000 	.word	0x42b40000
 800161c:	457ff000 	.word	0x457ff000
 8001620:	200002c0 	.word	0x200002c0
 8001624:	08005ccc 	.word	0x08005ccc
 8001628:	20000068 	.word	0x20000068
 800162c:	200002c1 	.word	0x200002c1
 8001630:	200002c2 	.word	0x200002c2
 8001634:	08005d1c 	.word	0x08005d1c
 8001638:	08005dec 	.word	0x08005dec
 800163c:	200002be 	.word	0x200002be
 8001640:	08005d60 	.word	0x08005d60

08001644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b090      	sub	sp, #64	@ 0x40
 8001648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800164a:	f107 0318 	add.w	r3, r7, #24
 800164e:	2228      	movs	r2, #40	@ 0x28
 8001650:	2100      	movs	r1, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f003 fc42 	bl	8004edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	60da      	str	r2, [r3, #12]
 8001664:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001666:	2301      	movs	r3, #1
 8001668:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800166a:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800166e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001670:	2300      	movs	r3, #0
 8001672:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001674:	2302      	movs	r3, #2
 8001676:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001678:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800167c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800167e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001682:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001684:	f107 0318 	add.w	r3, r7, #24
 8001688:	4618      	mov	r0, r3
 800168a:	f001 fa37 	bl	8002afc <HAL_RCC_OscConfig>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001694:	f000 f9f0 	bl	8001a78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001698:	230f      	movs	r3, #15
 800169a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800169c:	2302      	movs	r3, #2
 800169e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016a0:	2300      	movs	r3, #0
 80016a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	2101      	movs	r1, #1
 80016b2:	4618      	mov	r0, r3
 80016b4:	f002 fa60 	bl	8003b78 <HAL_RCC_ClockConfig>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80016be:	f000 f9db 	bl	8001a78 <Error_Handler>
  }
}
 80016c2:	bf00      	nop
 80016c4:	3740      	adds	r7, #64	@ 0x40
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08a      	sub	sp, #40	@ 0x28
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d2:	f107 031c 	add.w	r3, r7, #28
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016de:	463b      	mov	r3, r7
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]
 80016ec:	615a      	str	r2, [r3, #20]
 80016ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016f0:	4b28      	ldr	r3, [pc, #160]	@ (8001794 <MX_TIM2_Init+0xc8>)
 80016f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 479; // 48 MHz / 480 = 100 kHz
 80016f8:	4b26      	ldr	r3, [pc, #152]	@ (8001794 <MX_TIM2_Init+0xc8>)
 80016fa:	f240 12df 	movw	r2, #479	@ 0x1df
 80016fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001700:	4b24      	ldr	r3, [pc, #144]	@ (8001794 <MX_TIM2_Init+0xc8>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = PWM_PERIOD_TICKS - 1; // 20 ms
 8001706:	4b23      	ldr	r3, [pc, #140]	@ (8001794 <MX_TIM2_Init+0xc8>)
 8001708:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800170c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800170e:	4b21      	ldr	r3, [pc, #132]	@ (8001794 <MX_TIM2_Init+0xc8>)
 8001710:	2200      	movs	r2, #0
 8001712:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001714:	4b1f      	ldr	r3, [pc, #124]	@ (8001794 <MX_TIM2_Init+0xc8>)
 8001716:	2280      	movs	r2, #128	@ 0x80
 8001718:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800171a:	481e      	ldr	r0, [pc, #120]	@ (8001794 <MX_TIM2_Init+0xc8>)
 800171c:	f002 fbfc 	bl	8003f18 <HAL_TIM_PWM_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8001726:	f000 f9a7 	bl	8001a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800172e:	2300      	movs	r3, #0
 8001730:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001732:	f107 031c 	add.w	r3, r7, #28
 8001736:	4619      	mov	r1, r3
 8001738:	4816      	ldr	r0, [pc, #88]	@ (8001794 <MX_TIM2_Init+0xc8>)
 800173a:	f003 f9f1 	bl	8004b20 <HAL_TIMEx_MasterConfigSynchronization>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001744:	f000 f998 	bl	8001a78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001748:	2360      	movs	r3, #96	@ 0x60
 800174a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800174c:	2300      	movs	r3, #0
 800174e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001750:	2300      	movs	r3, #0
 8001752:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001754:	2300      	movs	r3, #0
 8001756:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001758:	463b      	mov	r3, r7
 800175a:	2200      	movs	r2, #0
 800175c:	4619      	mov	r1, r3
 800175e:	480d      	ldr	r0, [pc, #52]	@ (8001794 <MX_TIM2_Init+0xc8>)
 8001760:	f002 fd32 	bl	80041c8 <HAL_TIM_PWM_ConfigChannel>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800176a:	f000 f985 	bl	8001a78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800176e:	463b      	mov	r3, r7
 8001770:	2204      	movs	r2, #4
 8001772:	4619      	mov	r1, r3
 8001774:	4807      	ldr	r0, [pc, #28]	@ (8001794 <MX_TIM2_Init+0xc8>)
 8001776:	f002 fd27 	bl	80041c8 <HAL_TIM_PWM_ConfigChannel>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8001780:	f000 f97a 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001784:	4803      	ldr	r0, [pc, #12]	@ (8001794 <MX_TIM2_Init+0xc8>)
 8001786:	f000 fba7 	bl	8001ed8 <HAL_TIM_MspPostInit>
}
 800178a:	bf00      	nop
 800178c:	3728      	adds	r7, #40	@ 0x28
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	200001d4 	.word	0x200001d4

08001798 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08a      	sub	sp, #40	@ 0x28
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_Init 0 */
  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800179e:	f107 031c 	add.w	r3, r7, #28
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017aa:	463b      	mov	r3, r7
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]
 80017b8:	615a      	str	r2, [r3, #20]
 80017ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017bc:	4b27      	ldr	r3, [pc, #156]	@ (800185c <MX_TIM3_Init+0xc4>)
 80017be:	4a28      	ldr	r2, [pc, #160]	@ (8001860 <MX_TIM3_Init+0xc8>)
 80017c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 479; // 48 MHz / 480 = 100 kHz
 80017c2:	4b26      	ldr	r3, [pc, #152]	@ (800185c <MX_TIM3_Init+0xc4>)
 80017c4:	f240 12df 	movw	r2, #479	@ 0x1df
 80017c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ca:	4b24      	ldr	r3, [pc, #144]	@ (800185c <MX_TIM3_Init+0xc4>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = PWM_PERIOD_TICKS - 1; // 20 ms
 80017d0:	4b22      	ldr	r3, [pc, #136]	@ (800185c <MX_TIM3_Init+0xc4>)
 80017d2:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80017d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d8:	4b20      	ldr	r3, [pc, #128]	@ (800185c <MX_TIM3_Init+0xc4>)
 80017da:	2200      	movs	r2, #0
 80017dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017de:	4b1f      	ldr	r3, [pc, #124]	@ (800185c <MX_TIM3_Init+0xc4>)
 80017e0:	2280      	movs	r2, #128	@ 0x80
 80017e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017e4:	481d      	ldr	r0, [pc, #116]	@ (800185c <MX_TIM3_Init+0xc4>)
 80017e6:	f002 fb97 	bl	8003f18 <HAL_TIM_PWM_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 80017f0:	f000 f942 	bl	8001a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017fc:	f107 031c 	add.w	r3, r7, #28
 8001800:	4619      	mov	r1, r3
 8001802:	4816      	ldr	r0, [pc, #88]	@ (800185c <MX_TIM3_Init+0xc4>)
 8001804:	f003 f98c 	bl	8004b20 <HAL_TIMEx_MasterConfigSynchronization>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800180e:	f000 f933 	bl	8001a78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001812:	2360      	movs	r3, #96	@ 0x60
 8001814:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800181a:	2300      	movs	r3, #0
 800181c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001822:	463b      	mov	r3, r7
 8001824:	2200      	movs	r2, #0
 8001826:	4619      	mov	r1, r3
 8001828:	480c      	ldr	r0, [pc, #48]	@ (800185c <MX_TIM3_Init+0xc4>)
 800182a:	f002 fccd 	bl	80041c8 <HAL_TIM_PWM_ConfigChannel>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001834:	f000 f920 	bl	8001a78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001838:	463b      	mov	r3, r7
 800183a:	2204      	movs	r2, #4
 800183c:	4619      	mov	r1, r3
 800183e:	4807      	ldr	r0, [pc, #28]	@ (800185c <MX_TIM3_Init+0xc4>)
 8001840:	f002 fcc2 	bl	80041c8 <HAL_TIM_PWM_ConfigChannel>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 800184a:	f000 f915 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800184e:	4803      	ldr	r0, [pc, #12]	@ (800185c <MX_TIM3_Init+0xc4>)
 8001850:	f000 fb42 	bl	8001ed8 <HAL_TIM_MspPostInit>
}
 8001854:	bf00      	nop
 8001856:	3728      	adds	r7, #40	@ 0x28
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000220 	.word	0x20000220
 8001860:	40000400 	.word	0x40000400

08001864 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08a      	sub	sp, #40	@ 0x28
 8001868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_Init 0 */
  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800186a:	f107 031c 	add.w	r3, r7, #28
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001876:	463b      	mov	r3, r7
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]
 8001884:	615a      	str	r2, [r3, #20]
 8001886:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */
  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001888:	4b27      	ldr	r3, [pc, #156]	@ (8001928 <MX_TIM4_Init+0xc4>)
 800188a:	4a28      	ldr	r2, [pc, #160]	@ (800192c <MX_TIM4_Init+0xc8>)
 800188c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 479; // 48 MHz / 480 = 100 kHz
 800188e:	4b26      	ldr	r3, [pc, #152]	@ (8001928 <MX_TIM4_Init+0xc4>)
 8001890:	f240 12df 	movw	r2, #479	@ 0x1df
 8001894:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001896:	4b24      	ldr	r3, [pc, #144]	@ (8001928 <MX_TIM4_Init+0xc4>)
 8001898:	2200      	movs	r2, #0
 800189a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = PWM_PERIOD_TICKS - 1; // 20 ms
 800189c:	4b22      	ldr	r3, [pc, #136]	@ (8001928 <MX_TIM4_Init+0xc4>)
 800189e:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80018a2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a4:	4b20      	ldr	r3, [pc, #128]	@ (8001928 <MX_TIM4_Init+0xc4>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001928 <MX_TIM4_Init+0xc4>)
 80018ac:	2280      	movs	r2, #128	@ 0x80
 80018ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80018b0:	481d      	ldr	r0, [pc, #116]	@ (8001928 <MX_TIM4_Init+0xc4>)
 80018b2:	f002 fb31 	bl	8003f18 <HAL_TIM_PWM_Init>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 80018bc:	f000 f8dc 	bl	8001a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c4:	2300      	movs	r3, #0
 80018c6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018c8:	f107 031c 	add.w	r3, r7, #28
 80018cc:	4619      	mov	r1, r3
 80018ce:	4816      	ldr	r0, [pc, #88]	@ (8001928 <MX_TIM4_Init+0xc4>)
 80018d0:	f003 f926 	bl	8004b20 <HAL_TIMEx_MasterConfigSynchronization>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 80018da:	f000 f8cd 	bl	8001a78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018de:	2360      	movs	r3, #96	@ 0x60
 80018e0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018e6:	2300      	movs	r3, #0
 80018e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018ee:	463b      	mov	r3, r7
 80018f0:	2200      	movs	r2, #0
 80018f2:	4619      	mov	r1, r3
 80018f4:	480c      	ldr	r0, [pc, #48]	@ (8001928 <MX_TIM4_Init+0xc4>)
 80018f6:	f002 fc67 	bl	80041c8 <HAL_TIM_PWM_ConfigChannel>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8001900:	f000 f8ba 	bl	8001a78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001904:	463b      	mov	r3, r7
 8001906:	2204      	movs	r2, #4
 8001908:	4619      	mov	r1, r3
 800190a:	4807      	ldr	r0, [pc, #28]	@ (8001928 <MX_TIM4_Init+0xc4>)
 800190c:	f002 fc5c 	bl	80041c8 <HAL_TIM_PWM_ConfigChannel>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8001916:	f000 f8af 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800191a:	4803      	ldr	r0, [pc, #12]	@ (8001928 <MX_TIM4_Init+0xc4>)
 800191c:	f000 fadc 	bl	8001ed8 <HAL_TIM_MspPostInit>
}
 8001920:	bf00      	nop
 8001922:	3728      	adds	r7, #40	@ 0x28
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	2000026c 	.word	0x2000026c
 800192c:	40000800 	.word	0x40000800

08001930 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08a      	sub	sp, #40	@ 0x28
 8001934:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001936:	f107 0314 	add.w	r3, r7, #20
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	609a      	str	r2, [r3, #8]
 8001942:	60da      	str	r2, [r3, #12]
 8001944:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001946:	4b47      	ldr	r3, [pc, #284]	@ (8001a64 <MX_GPIO_Init+0x134>)
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	4a46      	ldr	r2, [pc, #280]	@ (8001a64 <MX_GPIO_Init+0x134>)
 800194c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001950:	6153      	str	r3, [r2, #20]
 8001952:	4b44      	ldr	r3, [pc, #272]	@ (8001a64 <MX_GPIO_Init+0x134>)
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800195e:	4b41      	ldr	r3, [pc, #260]	@ (8001a64 <MX_GPIO_Init+0x134>)
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	4a40      	ldr	r2, [pc, #256]	@ (8001a64 <MX_GPIO_Init+0x134>)
 8001964:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001968:	6153      	str	r3, [r2, #20]
 800196a:	4b3e      	ldr	r3, [pc, #248]	@ (8001a64 <MX_GPIO_Init+0x134>)
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001976:	4b3b      	ldr	r3, [pc, #236]	@ (8001a64 <MX_GPIO_Init+0x134>)
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	4a3a      	ldr	r2, [pc, #232]	@ (8001a64 <MX_GPIO_Init+0x134>)
 800197c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001980:	6153      	str	r3, [r2, #20]
 8001982:	4b38      	ldr	r3, [pc, #224]	@ (8001a64 <MX_GPIO_Init+0x134>)
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800198a:	60bb      	str	r3, [r7, #8]
 800198c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800198e:	4b35      	ldr	r3, [pc, #212]	@ (8001a64 <MX_GPIO_Init+0x134>)
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	4a34      	ldr	r2, [pc, #208]	@ (8001a64 <MX_GPIO_Init+0x134>)
 8001994:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001998:	6153      	str	r3, [r2, #20]
 800199a:	4b32      	ldr	r3, [pc, #200]	@ (8001a64 <MX_GPIO_Init+0x134>)
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019a2:	607b      	str	r3, [r7, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001a64 <MX_GPIO_Init+0x134>)
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	4a2e      	ldr	r2, [pc, #184]	@ (8001a64 <MX_GPIO_Init+0x134>)
 80019ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019b0:	6153      	str	r3, [r2, #20]
 80019b2:	4b2c      	ldr	r3, [pc, #176]	@ (8001a64 <MX_GPIO_Init+0x134>)
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019ba:	603b      	str	r3, [r7, #0]
 80019bc:	683b      	ldr	r3, [r7, #0]

  /* Configure PB3-PB7, PB13 for touch sensors */
  GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_13;
 80019be:	f242 03f8 	movw	r3, #8440	@ 0x20f8
 80019c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c4:	2300      	movs	r3, #0
 80019c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN; // Ensure low when not touched
 80019c8:	2302      	movs	r3, #2
 80019ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	4619      	mov	r1, r3
 80019d2:	4825      	ldr	r0, [pc, #148]	@ (8001a68 <MX_GPIO_Init+0x138>)
 80019d4:	f000 ff18 	bl	8002808 <HAL_GPIO_Init>

  /* Configure PC4 (TX), PC5 (RX) for USART1 */
  GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 80019d8:	2330      	movs	r3, #48	@ 0x30
 80019da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019dc:	2302      	movs	r3, #2
 80019de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019e4:	2303      	movs	r3, #3
 80019e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019e8:	2307      	movs	r3, #7
 80019ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	4619      	mov	r1, r3
 80019f2:	481e      	ldr	r0, [pc, #120]	@ (8001a6c <MX_GPIO_Init+0x13c>)
 80019f4:	f000 ff08 	bl	8002808 <HAL_GPIO_Init>

  /* Configure PA0, PA1 for TIM2_CH1-2 (Servos 3-4) */
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80019f8:	2303      	movs	r3, #3
 80019fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fc:	2302      	movs	r3, #2
 80019fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a04:	2300      	movs	r3, #0
 8001a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0c:	f107 0314 	add.w	r3, r7, #20
 8001a10:	4619      	mov	r1, r3
 8001a12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a16:	f000 fef7 	bl	8002808 <HAL_GPIO_Init>

  /* Configure PE2, PE3 for TIM3_CH1-2 (Servos 1-2) */
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8001a1a:	230c      	movs	r3, #12
 8001a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a26:	2300      	movs	r3, #0
 8001a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a2e:	f107 0314 	add.w	r3, r7, #20
 8001a32:	4619      	mov	r1, r3
 8001a34:	480e      	ldr	r0, [pc, #56]	@ (8001a70 <MX_GPIO_Init+0x140>)
 8001a36:	f000 fee7 	bl	8002808 <HAL_GPIO_Init>

  /* Configure PD12, PD13 for TIM4_CH1-2 (Servos 5-6) */
  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 8001a3a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001a3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a40:	2302      	movs	r3, #2
 8001a42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	4619      	mov	r1, r3
 8001a56:	4807      	ldr	r0, [pc, #28]	@ (8001a74 <MX_GPIO_Init+0x144>)
 8001a58:	f000 fed6 	bl	8002808 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001a5c:	bf00      	nop
 8001a5e:	3728      	adds	r7, #40	@ 0x28
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40021000 	.word	0x40021000
 8001a68:	48000400 	.word	0x48000400
 8001a6c:	48000800 	.word	0x48000800
 8001a70:	48001000 	.word	0x48001000
 8001a74:	48000c00 	.word	0x48000c00

08001a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a7c:	b672      	cpsid	i
}
 8001a7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a80:	bf00      	nop
 8001a82:	e7fd      	b.n	8001a80 <Error_Handler+0x8>

08001a84 <__NVIC_EnableIRQ>:
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	db0b      	blt.n	8001aae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	f003 021f 	and.w	r2, r3, #31
 8001a9c:	4907      	ldr	r1, [pc, #28]	@ (8001abc <__NVIC_EnableIRQ+0x38>)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	095b      	lsrs	r3, r3, #5
 8001aa4:	2001      	movs	r0, #1
 8001aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	e000e100 	.word	0xe000e100

08001ac0 <__NVIC_SetPriority>:
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	6039      	str	r1, [r7, #0]
 8001aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	db0a      	blt.n	8001aea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	b2da      	uxtb	r2, r3
 8001ad8:	490c      	ldr	r1, [pc, #48]	@ (8001b0c <__NVIC_SetPriority+0x4c>)
 8001ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ade:	0112      	lsls	r2, r2, #4
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	440b      	add	r3, r1
 8001ae4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001ae8:	e00a      	b.n	8001b00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	4908      	ldr	r1, [pc, #32]	@ (8001b10 <__NVIC_SetPriority+0x50>)
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	3b04      	subs	r3, #4
 8001af8:	0112      	lsls	r2, r2, #4
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	440b      	add	r3, r1
 8001afe:	761a      	strb	r2, [r3, #24]
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	e000e100 	.word	0xe000e100
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <calculate_brr>:
};



// Calculate baud rate register value based on system clock
static uint32_t calculate_brr(uint32_t baud_rate, uint32_t pclk_freq) {
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
    return (pclk_freq + (baud_rate / 2)) / baud_rate;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	085a      	lsrs	r2, r3, #1
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	441a      	add	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <get_pclk_freq>:

// Get the appropriate peripheral clock frequency
static uint32_t get_pclk_freq(uint8_t bus) {
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71fb      	strb	r3, [r7, #7]
    // For STM32F303, we need to check the actual clock configuration
    uint32_t sysclk = 8000000; // Default HSI frequency
 8001b42:	4b0d      	ldr	r3, [pc, #52]	@ (8001b78 <get_pclk_freq+0x40>)
 8001b44:	60fb      	str	r3, [r7, #12]

    // Check if HSE or PLL is being used (simplified)
    if (RCC->CFGR & RCC_CFGR_SWS_PLL) {
 8001b46:	4b0d      	ldr	r3, [pc, #52]	@ (8001b7c <get_pclk_freq+0x44>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f003 0308 	and.w	r3, r3, #8
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d002      	beq.n	8001b58 <get_pclk_freq+0x20>
        // PLL is active - typical configuration might be 72MHz
        sysclk = 48000000;
 8001b52:	4b0b      	ldr	r3, [pc, #44]	@ (8001b80 <get_pclk_freq+0x48>)
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	e007      	b.n	8001b68 <get_pclk_freq+0x30>
    } else if (RCC->CFGR & RCC_CFGR_SWS_HSE) {
 8001b58:	4b08      	ldr	r3, [pc, #32]	@ (8001b7c <get_pclk_freq+0x44>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <get_pclk_freq+0x30>
        // HSE is active - typically 8MHz external crystal
        sysclk = 8000000;
 8001b64:	4b04      	ldr	r3, [pc, #16]	@ (8001b78 <get_pclk_freq+0x40>)
 8001b66:	60fb      	str	r3, [r7, #12]
    }

    return sysclk;
 8001b68:	68fb      	ldr	r3, [r7, #12]
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	007a1200 	.word	0x007a1200
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	02dc6c00 	.word	0x02dc6c00

08001b84 <serial_initialise>:
		0x00 						// default function pointer is NULL
};


// InitialiseSerial - Initialise the serial port // Input: baud_rate is from an enumerated set
void serial_initialise(uint32_t baud_rate, SerialPort *serial_port, void (*output_callback_function)(void), void (*input_callback_function)(char *, uint32_t)) {
 8001b84:	b590      	push	{r4, r7, lr}
 8001b86:	b087      	sub	sp, #28
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
 8001b90:	603b      	str	r3, [r7, #0]

	serial_port->output_callback = output_callback_function;
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	625a      	str	r2, [r3, #36]	@ 0x24
	serial_port->receive_callback = input_callback_function;
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	629a      	str	r2, [r3, #40]	@ 0x28

	// Enable clock power, system configuration clock and GPIOC
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001b9e:	4b2a      	ldr	r3, [pc, #168]	@ (8001c48 <serial_initialise+0xc4>)
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	4a29      	ldr	r2, [pc, #164]	@ (8001c48 <serial_initialise+0xc4>)
 8001ba4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ba8:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8001baa:	4b27      	ldr	r3, [pc, #156]	@ (8001c48 <serial_initialise+0xc4>)
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	4a26      	ldr	r2, [pc, #152]	@ (8001c48 <serial_initialise+0xc4>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	6193      	str	r3, [r2, #24]

	// Enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	691a      	ldr	r2, [r3, #16]
 8001bba:	4b23      	ldr	r3, [pc, #140]	@ (8001c48 <serial_initialise+0xc4>)
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	4922      	ldr	r1, [pc, #136]	@ (8001c48 <serial_initialise+0xc4>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	614b      	str	r3, [r1, #20]

	// Set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	68ba      	ldr	r2, [r7, #8]
 8001bca:	6952      	ldr	r2, [r2, #20]
 8001bcc:	601a      	str	r2, [r3, #0]

	// Enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	6992      	ldr	r2, [r2, #24]
 8001bd6:	609a      	str	r2, [r3, #8]

	// Set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	69d9      	ldr	r1, [r3, #28]
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	6a1a      	ldr	r2, [r3, #32]
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	430a      	orrs	r2, r1
 8001be8:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	6a19      	ldr	r1, [r3, #32]
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	625a      	str	r2, [r3, #36]	@ 0x24

	// Enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	68da      	ldr	r2, [r3, #12]
 8001c00:	4b11      	ldr	r3, [pc, #68]	@ (8001c48 <serial_initialise+0xc4>)
 8001c02:	69db      	ldr	r3, [r3, #28]
 8001c04:	4910      	ldr	r1, [pc, #64]	@ (8001c48 <serial_initialise+0xc4>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	689a      	ldr	r2, [r3, #8]
 8001c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c48 <serial_initialise+0xc4>)
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	490d      	ldr	r1, [pc, #52]	@ (8001c48 <serial_initialise+0xc4>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	618b      	str	r3, [r1, #24]


	// Get a pointer to the 16 bits of the BRR register that we want to change
    uint32_t pclk = get_pclk_freq(2);
 8001c18:	2002      	movs	r0, #2
 8001c1a:	f7ff ff8d 	bl	8001b38 <get_pclk_freq>
 8001c1e:	6178      	str	r0, [r7, #20]
    serial_port->UART->BRR = calculate_brr(baud_rate, pclk);
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	681c      	ldr	r4, [r3, #0]
 8001c24:	6979      	ldr	r1, [r7, #20]
 8001c26:	68f8      	ldr	r0, [r7, #12]
 8001c28:	f7ff ff74 	bl	8001b14 <calculate_brr>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	60e3      	str	r3, [r4, #12]

	//uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!

	// Enable serial port for tx and rx
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f042 020d 	orr.w	r2, r2, #13
 8001c3e:	601a      	str	r2, [r3, #0]
}
 8001c40:	bf00      	nop
 8001c42:	371c      	adds	r7, #28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd90      	pop	{r4, r7, pc}
 8001c48:	40021000 	.word	0x40021000

08001c4c <serial_output_char>:


// Output char using polling
void serial_output_char(char data, SerialPort *serial_port) {
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	6039      	str	r1, [r7, #0]
 8001c56:	71fb      	strb	r3, [r7, #7]

	while((serial_port->UART->ISR & USART_ISR_TXE) == 0){
 8001c58:	bf00      	nop
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	69db      	ldr	r3, [r3, #28]
 8001c60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d0f8      	beq.n	8001c5a <serial_output_char+0xe>
	}

	serial_port->UART->TDR = data;
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	79fa      	ldrb	r2, [r7, #7]
 8001c6e:	b292      	uxth	r2, r2
 8001c70:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <serial_output_string>:


// Output string using polling
void serial_output_string(char *string, SerialPort *serial_port) {
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b084      	sub	sp, #16
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
 8001c86:	6039      	str	r1, [r7, #0]

	uint32_t count = 0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60fb      	str	r3, [r7, #12]
	while(*string) {
 8001c8c:	e00b      	b.n	8001ca6 <serial_output_string+0x28>
		serial_output_char(*string, serial_port);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	6839      	ldr	r1, [r7, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff ffd9 	bl	8001c4c <serial_output_char>
		count++;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	60fb      	str	r3, [r7, #12]
		string++;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	607b      	str	r3, [r7, #4]
	while(*string) {
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1ef      	bne.n	8001c8e <serial_output_string+0x10>
	}

	// Callback function pointer call
	if (serial_port->output_callback != NULL)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d002      	beq.n	8001cbc <serial_output_string+0x3e>
		serial_port->output_callback();
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cba:	4798      	blx	r3
}
 8001cbc:	bf00      	nop
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <enable_interrupts>:


// Enable interrupts needed for UART
void enable_interrupts(SerialPort *serial_port) {
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ccc:	b672      	cpsid	i
}
 8001cce:	bf00      	nop
	__disable_irq();

	// Interrupt upon receiving data
	serial_port->UART->CR1 |= USART_CR1_RXNEIE_Msk;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f042 0220 	orr.w	r2, r2, #32
 8001cde:	601a      	str	r2, [r3, #0]
	//serial_port->UART->CR1 |= USART_CR1_TXEIE_MSK;

	// Set priority and enable interrupts
	NVIC_SetPriority(USART1_IRQn, 1);
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	2025      	movs	r0, #37	@ 0x25
 8001ce4:	f7ff feec 	bl	8001ac0 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn);
 8001ce8:	2025      	movs	r0, #37	@ 0x25
 8001cea:	f7ff fecb 	bl	8001a84 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001cee:	b662      	cpsie	i
}
 8001cf0:	bf00      	nop

	__enable_irq();
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <USART1_IRQHandler>:


// Function executed when interrupt called
// Double buffer implementation
void USART1_IRQHandler() {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
	// Check and handle overrun or frame errors
	if ((USART1_PORT.UART->ISR & USART_ISR_FE_Msk) || (USART1_PORT.UART->ISR & USART_ISR_ORE_Msk)) {
 8001d02:	4b3c      	ldr	r3, [pc, #240]	@ (8001df4 <USART1_IRQHandler+0xf8>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	69db      	ldr	r3, [r3, #28]
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d106      	bne.n	8001d1e <USART1_IRQHandler+0x22>
 8001d10:	4b38      	ldr	r3, [pc, #224]	@ (8001df4 <USART1_IRQHandler+0xf8>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	f003 0308 	and.w	r3, r3, #8
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d004      	beq.n	8001d28 <USART1_IRQHandler+0x2c>

		USART1_PORT.UART->ICR = USART_ICR_ORECF | USART_ICR_FECF;
 8001d1e:	4b35      	ldr	r3, [pc, #212]	@ (8001df4 <USART1_IRQHandler+0xf8>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	220a      	movs	r2, #10
 8001d24:	621a      	str	r2, [r3, #32]

		return;
 8001d26:	e061      	b.n	8001dec <USART1_IRQHandler+0xf0>
	}

	// Check and handle for full buffer
	if (COUNTER == BUFFER_SIZE) {
 8001d28:	4b33      	ldr	r3, [pc, #204]	@ (8001df8 <USART1_IRQHandler+0xfc>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b40      	cmp	r3, #64	@ 0x40
 8001d2e:	d10d      	bne.n	8001d4c <USART1_IRQHandler+0x50>
		COUNTER = 0;
 8001d30:	4b31      	ldr	r3, [pc, #196]	@ (8001df8 <USART1_IRQHandler+0xfc>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]

		memset(DOUBLE_INPUT_BUFFER[ACTIVE_RX_BUFFER], '\0', BUFFER_SIZE);
 8001d36:	4b31      	ldr	r3, [pc, #196]	@ (8001dfc <USART1_IRQHandler+0x100>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	019b      	lsls	r3, r3, #6
 8001d3c:	4a30      	ldr	r2, [pc, #192]	@ (8001e00 <USART1_IRQHandler+0x104>)
 8001d3e:	4413      	add	r3, r2
 8001d40:	2240      	movs	r2, #64	@ 0x40
 8001d42:	2100      	movs	r1, #0
 8001d44:	4618      	mov	r0, r3
 8001d46:	f003 f8c9 	bl	8004edc <memset>

		return;
 8001d4a:	e04f      	b.n	8001dec <USART1_IRQHandler+0xf0>
	}

	if (USART1_PORT.UART->ISR & USART_ISR_RXNE_Msk) {
 8001d4c:	4b29      	ldr	r3, [pc, #164]	@ (8001df4 <USART1_IRQHandler+0xf8>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	f003 0320 	and.w	r3, r3, #32
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d048      	beq.n	8001dec <USART1_IRQHandler+0xf0>
		char received = USART1_PORT.UART->RDR;
 8001d5a:	4b26      	ldr	r3, [pc, #152]	@ (8001df4 <USART1_IRQHandler+0xf8>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	71fb      	strb	r3, [r7, #7]

		// Store char
		DOUBLE_INPUT_BUFFER[ACTIVE_RX_BUFFER][COUNTER] = received;
 8001d64:	4b25      	ldr	r3, [pc, #148]	@ (8001dfc <USART1_IRQHandler+0x100>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4b23      	ldr	r3, [pc, #140]	@ (8001df8 <USART1_IRQHandler+0xfc>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4924      	ldr	r1, [pc, #144]	@ (8001e00 <USART1_IRQHandler+0x104>)
 8001d70:	0192      	lsls	r2, r2, #6
 8001d72:	440a      	add	r2, r1
 8001d74:	4413      	add	r3, r2
 8001d76:	79fa      	ldrb	r2, [r7, #7]
 8001d78:	701a      	strb	r2, [r3, #0]
		COUNTER++;
 8001d7a:	4b1f      	ldr	r3, [pc, #124]	@ (8001df8 <USART1_IRQHandler+0xfc>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	4a1d      	ldr	r2, [pc, #116]	@ (8001df8 <USART1_IRQHandler+0xfc>)
 8001d82:	6013      	str	r3, [r2, #0]

		// If termination character, NULL append and exit
		if (received == TERMINATE) {
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	2b0d      	cmp	r3, #13
 8001d88:	d12f      	bne.n	8001dea <USART1_IRQHandler+0xee>
			DOUBLE_INPUT_BUFFER[ACTIVE_RX_BUFFER][COUNTER - 1] = '\0';
 8001d8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001dfc <USART1_IRQHandler+0x100>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	4b19      	ldr	r3, [pc, #100]	@ (8001df8 <USART1_IRQHandler+0xfc>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	3b01      	subs	r3, #1
 8001d96:	491a      	ldr	r1, [pc, #104]	@ (8001e00 <USART1_IRQHandler+0x104>)
 8001d98:	0192      	lsls	r2, r2, #6
 8001d9a:	440a      	add	r2, r1
 8001d9c:	4413      	add	r3, r2
 8001d9e:	2200      	movs	r2, #0
 8001da0:	701a      	strb	r2, [r3, #0]

			// Swap buffer
			uint8_t current = ACTIVE_RX_BUFFER;
 8001da2:	4b16      	ldr	r3, [pc, #88]	@ (8001dfc <USART1_IRQHandler+0x100>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	71bb      	strb	r3, [r7, #6]
			ACTIVE_RX_BUFFER ^= 1;
 8001da8:	4b14      	ldr	r3, [pc, #80]	@ (8001dfc <USART1_IRQHandler+0x100>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	f083 0301 	eor.w	r3, r3, #1
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	4b12      	ldr	r3, [pc, #72]	@ (8001dfc <USART1_IRQHandler+0x100>)
 8001db4:	701a      	strb	r2, [r3, #0]

			if (USART1_PORT.receive_callback != NULL) {
 8001db6:	4b0f      	ldr	r3, [pc, #60]	@ (8001df4 <USART1_IRQHandler+0xf8>)
 8001db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d009      	beq.n	8001dd2 <USART1_IRQHandler+0xd6>
				// Callback function pointer call
				USART1_PORT.receive_callback(DOUBLE_INPUT_BUFFER[current], COUNTER);
 8001dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8001df4 <USART1_IRQHandler+0xf8>)
 8001dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dc2:	79ba      	ldrb	r2, [r7, #6]
 8001dc4:	0192      	lsls	r2, r2, #6
 8001dc6:	490e      	ldr	r1, [pc, #56]	@ (8001e00 <USART1_IRQHandler+0x104>)
 8001dc8:	440a      	add	r2, r1
 8001dca:	490b      	ldr	r1, [pc, #44]	@ (8001df8 <USART1_IRQHandler+0xfc>)
 8001dcc:	6809      	ldr	r1, [r1, #0]
 8001dce:	4610      	mov	r0, r2
 8001dd0:	4798      	blx	r3
			}

			// Reset counter and buffer after input finish
			COUNTER = 0;
 8001dd2:	4b09      	ldr	r3, [pc, #36]	@ (8001df8 <USART1_IRQHandler+0xfc>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
			memset(DOUBLE_INPUT_BUFFER[current], '\0', BUFFER_SIZE);
 8001dd8:	79bb      	ldrb	r3, [r7, #6]
 8001dda:	019b      	lsls	r3, r3, #6
 8001ddc:	4a08      	ldr	r2, [pc, #32]	@ (8001e00 <USART1_IRQHandler+0x104>)
 8001dde:	4413      	add	r3, r2
 8001de0:	2240      	movs	r2, #64	@ 0x40
 8001de2:	2100      	movs	r1, #0
 8001de4:	4618      	mov	r0, r3
 8001de6:	f003 f879 	bl	8004edc <memset>
		}
		return;
 8001dea:	bf00      	nop
	}

}
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000068 	.word	0x20000068
 8001df8:	20000344 	.word	0x20000344
 8001dfc:	20000348 	.word	0x20000348
 8001e00:	200002c4 	.word	0x200002c4

08001e04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e48 <HAL_MspInit+0x44>)
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	4a0e      	ldr	r2, [pc, #56]	@ (8001e48 <HAL_MspInit+0x44>)
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	6193      	str	r3, [r2, #24]
 8001e16:	4b0c      	ldr	r3, [pc, #48]	@ (8001e48 <HAL_MspInit+0x44>)
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	607b      	str	r3, [r7, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e22:	4b09      	ldr	r3, [pc, #36]	@ (8001e48 <HAL_MspInit+0x44>)
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	4a08      	ldr	r2, [pc, #32]	@ (8001e48 <HAL_MspInit+0x44>)
 8001e28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e2c:	61d3      	str	r3, [r2, #28]
 8001e2e:	4b06      	ldr	r3, [pc, #24]	@ (8001e48 <HAL_MspInit+0x44>)
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e36:	603b      	str	r3, [r7, #0]
 8001e38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40021000 	.word	0x40021000

08001e4c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b087      	sub	sp, #28
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e5c:	d10c      	bne.n	8001e78 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ecc <HAL_TIM_PWM_MspInit+0x80>)
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	4a1a      	ldr	r2, [pc, #104]	@ (8001ecc <HAL_TIM_PWM_MspInit+0x80>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	61d3      	str	r3, [r2, #28]
 8001e6a:	4b18      	ldr	r3, [pc, #96]	@ (8001ecc <HAL_TIM_PWM_MspInit+0x80>)
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	617b      	str	r3, [r7, #20]
 8001e74:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001e76:	e022      	b.n	8001ebe <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a14      	ldr	r2, [pc, #80]	@ (8001ed0 <HAL_TIM_PWM_MspInit+0x84>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d10c      	bne.n	8001e9c <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e82:	4b12      	ldr	r3, [pc, #72]	@ (8001ecc <HAL_TIM_PWM_MspInit+0x80>)
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	4a11      	ldr	r2, [pc, #68]	@ (8001ecc <HAL_TIM_PWM_MspInit+0x80>)
 8001e88:	f043 0302 	orr.w	r3, r3, #2
 8001e8c:	61d3      	str	r3, [r2, #28]
 8001e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001ecc <HAL_TIM_PWM_MspInit+0x80>)
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	693b      	ldr	r3, [r7, #16]
}
 8001e9a:	e010      	b.n	8001ebe <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM4)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a0c      	ldr	r2, [pc, #48]	@ (8001ed4 <HAL_TIM_PWM_MspInit+0x88>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d10b      	bne.n	8001ebe <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ea6:	4b09      	ldr	r3, [pc, #36]	@ (8001ecc <HAL_TIM_PWM_MspInit+0x80>)
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	4a08      	ldr	r2, [pc, #32]	@ (8001ecc <HAL_TIM_PWM_MspInit+0x80>)
 8001eac:	f043 0304 	orr.w	r3, r3, #4
 8001eb0:	61d3      	str	r3, [r2, #28]
 8001eb2:	4b06      	ldr	r3, [pc, #24]	@ (8001ecc <HAL_TIM_PWM_MspInit+0x80>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	f003 0304 	and.w	r3, r3, #4
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
}
 8001ebe:	bf00      	nop
 8001ec0:	371c      	adds	r7, #28
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	40000400 	.word	0x40000400
 8001ed4:	40000800 	.word	0x40000800

08001ed8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08a      	sub	sp, #40	@ 0x28
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee0:	f107 0314 	add.w	r3, r7, #20
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ef8:	d11d      	bne.n	8001f36 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efa:	4b33      	ldr	r3, [pc, #204]	@ (8001fc8 <HAL_TIM_MspPostInit+0xf0>)
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	4a32      	ldr	r2, [pc, #200]	@ (8001fc8 <HAL_TIM_MspPostInit+0xf0>)
 8001f00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f04:	6153      	str	r3, [r2, #20]
 8001f06:	4b30      	ldr	r3, [pc, #192]	@ (8001fc8 <HAL_TIM_MspPostInit+0xf0>)
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f0e:	613b      	str	r3, [r7, #16]
 8001f10:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f12:	2303      	movs	r3, #3
 8001f14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f16:	2302      	movs	r3, #2
 8001f18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f22:	2301      	movs	r3, #1
 8001f24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f26:	f107 0314 	add.w	r3, r7, #20
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f30:	f000 fc6a 	bl	8002808 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001f34:	e043      	b.n	8001fbe <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM3)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a24      	ldr	r2, [pc, #144]	@ (8001fcc <HAL_TIM_MspPostInit+0xf4>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d11c      	bne.n	8001f7a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f40:	4b21      	ldr	r3, [pc, #132]	@ (8001fc8 <HAL_TIM_MspPostInit+0xf0>)
 8001f42:	695b      	ldr	r3, [r3, #20]
 8001f44:	4a20      	ldr	r2, [pc, #128]	@ (8001fc8 <HAL_TIM_MspPostInit+0xf0>)
 8001f46:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f4a:	6153      	str	r3, [r2, #20]
 8001f4c:	4b1e      	ldr	r3, [pc, #120]	@ (8001fc8 <HAL_TIM_MspPostInit+0xf0>)
 8001f4e:	695b      	ldr	r3, [r3, #20]
 8001f50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f58:	230c      	movs	r3, #12
 8001f5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f64:	2300      	movs	r3, #0
 8001f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f6c:	f107 0314 	add.w	r3, r7, #20
 8001f70:	4619      	mov	r1, r3
 8001f72:	4817      	ldr	r0, [pc, #92]	@ (8001fd0 <HAL_TIM_MspPostInit+0xf8>)
 8001f74:	f000 fc48 	bl	8002808 <HAL_GPIO_Init>
}
 8001f78:	e021      	b.n	8001fbe <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM4)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a15      	ldr	r2, [pc, #84]	@ (8001fd4 <HAL_TIM_MspPostInit+0xfc>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d11c      	bne.n	8001fbe <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f84:	4b10      	ldr	r3, [pc, #64]	@ (8001fc8 <HAL_TIM_MspPostInit+0xf0>)
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	4a0f      	ldr	r2, [pc, #60]	@ (8001fc8 <HAL_TIM_MspPostInit+0xf0>)
 8001f8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f8e:	6153      	str	r3, [r2, #20]
 8001f90:	4b0d      	ldr	r3, [pc, #52]	@ (8001fc8 <HAL_TIM_MspPostInit+0xf0>)
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001f9c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001fa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001faa:	2300      	movs	r3, #0
 8001fac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fb2:	f107 0314 	add.w	r3, r7, #20
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4807      	ldr	r0, [pc, #28]	@ (8001fd8 <HAL_TIM_MspPostInit+0x100>)
 8001fba:	f000 fc25 	bl	8002808 <HAL_GPIO_Init>
}
 8001fbe:	bf00      	nop
 8001fc0:	3728      	adds	r7, #40	@ 0x28
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	40000400 	.word	0x40000400
 8001fd0:	48001000 	.word	0x48001000
 8001fd4:	40000800 	.word	0x40000800
 8001fd8:	48000c00 	.word	0x48000c00

08001fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fe0:	bf00      	nop
 8001fe2:	e7fd      	b.n	8001fe0 <NMI_Handler+0x4>

08001fe4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fe8:	bf00      	nop
 8001fea:	e7fd      	b.n	8001fe8 <HardFault_Handler+0x4>

08001fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ff0:	bf00      	nop
 8001ff2:	e7fd      	b.n	8001ff0 <MemManage_Handler+0x4>

08001ff4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ff8:	bf00      	nop
 8001ffa:	e7fd      	b.n	8001ff8 <BusFault_Handler+0x4>

08001ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002000:	bf00      	nop
 8002002:	e7fd      	b.n	8002000 <UsageFault_Handler+0x4>

08002004 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002012:	b480      	push	{r7}
 8002014:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002032:	f000 fae3 	bl	80025fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
	...

0800203c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002044:	4a14      	ldr	r2, [pc, #80]	@ (8002098 <_sbrk+0x5c>)
 8002046:	4b15      	ldr	r3, [pc, #84]	@ (800209c <_sbrk+0x60>)
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002050:	4b13      	ldr	r3, [pc, #76]	@ (80020a0 <_sbrk+0x64>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d102      	bne.n	800205e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002058:	4b11      	ldr	r3, [pc, #68]	@ (80020a0 <_sbrk+0x64>)
 800205a:	4a12      	ldr	r2, [pc, #72]	@ (80020a4 <_sbrk+0x68>)
 800205c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800205e:	4b10      	ldr	r3, [pc, #64]	@ (80020a0 <_sbrk+0x64>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4413      	add	r3, r2
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	429a      	cmp	r2, r3
 800206a:	d207      	bcs.n	800207c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800206c:	f002 ff9e 	bl	8004fac <__errno>
 8002070:	4603      	mov	r3, r0
 8002072:	220c      	movs	r2, #12
 8002074:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002076:	f04f 33ff 	mov.w	r3, #4294967295
 800207a:	e009      	b.n	8002090 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800207c:	4b08      	ldr	r3, [pc, #32]	@ (80020a0 <_sbrk+0x64>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002082:	4b07      	ldr	r3, [pc, #28]	@ (80020a0 <_sbrk+0x64>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4413      	add	r3, r2
 800208a:	4a05      	ldr	r2, [pc, #20]	@ (80020a0 <_sbrk+0x64>)
 800208c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800208e:	68fb      	ldr	r3, [r7, #12]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	2000a000 	.word	0x2000a000
 800209c:	00000400 	.word	0x00000400
 80020a0:	2000034c 	.word	0x2000034c
 80020a4:	200004a0 	.word	0x200004a0

080020a8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020ac:	4b06      	ldr	r3, [pc, #24]	@ (80020c8 <SystemInit+0x20>)
 80020ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020b2:	4a05      	ldr	r2, [pc, #20]	@ (80020c8 <SystemInit+0x20>)
 80020b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020bc:	bf00      	nop
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	e000ed00 	.word	0xe000ed00

080020cc <__NVIC_EnableIRQ>:
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	db0b      	blt.n	80020f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	f003 021f 	and.w	r2, r3, #31
 80020e4:	4907      	ldr	r1, [pc, #28]	@ (8002104 <__NVIC_EnableIRQ+0x38>)
 80020e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ea:	095b      	lsrs	r3, r3, #5
 80020ec:	2001      	movs	r0, #1
 80020ee:	fa00 f202 	lsl.w	r2, r0, r2
 80020f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	e000e100 	.word	0xe000e100

08002108 <timer_init>:


// ===== INITIALISATION =====


void timer_init(void) {
 8002108:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800210c:	b088      	sub	sp, #32
 800210e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002110:	b672      	cpsid	i
}
 8002112:	bf00      	nop
    __disable_irq();

    // enable all clocks
    for (uintmax_t i = 0; i < _TIMER_COUNT; i++) {
 8002114:	f04f 0200 	mov.w	r2, #0
 8002118:	f04f 0300 	mov.w	r3, #0
 800211c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8002120:	e018      	b.n	8002154 <timer_init+0x4c>
        const TimerClockEnable en = CLOCK_ENABLES[i];
 8002122:	4927      	ldr	r1, [pc, #156]	@ (80021c0 <timer_init+0xb8>)
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4613      	mov	r3, r2
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	4413      	add	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	18ca      	adds	r2, r1, r3
 8002130:	1d3b      	adds	r3, r7, #4
 8002132:	ca07      	ldmia	r2, {r0, r1, r2}
 8002134:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *en.reg |=  en.mask;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6819      	ldr	r1, [r3, #0]
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	430a      	orrs	r2, r1
 8002142:	601a      	str	r2, [r3, #0]
    for (uintmax_t i = 0; i < _TIMER_COUNT; i++) {
 8002144:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002148:	f112 0801 	adds.w	r8, r2, #1
 800214c:	f143 0900 	adc.w	r9, r3, #0
 8002150:	e9c7 8906 	strd	r8, r9, [r7, #24]
 8002154:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002158:	2a08      	cmp	r2, #8
 800215a:	f173 0300 	sbcs.w	r3, r3, #0
 800215e:	d3e0      	bcc.n	8002122 <timer_init+0x1a>
    }

    // enable irq events
    for (uintmax_t i = 0; i < _TIMER_COUNT; i++) {
 8002160:	f04f 0200 	mov.w	r2, #0
 8002164:	f04f 0300 	mov.w	r3, #0
 8002168:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800216c:	e01a      	b.n	80021a4 <timer_init+0x9c>
        RAWS[i]->DIER |= TIM_DIER_UIE;
 800216e:	4a15      	ldr	r2, [pc, #84]	@ (80021c4 <timer_init+0xbc>)
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002176:	68da      	ldr	r2, [r3, #12]
 8002178:	4912      	ldr	r1, [pc, #72]	@ (80021c4 <timer_init+0xbc>)
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002180:	f042 0201 	orr.w	r2, r2, #1
 8002184:	60da      	str	r2, [r3, #12]
        NVIC_EnableIRQ(IRQ_NUMS[i]);
 8002186:	4a10      	ldr	r2, [pc, #64]	@ (80021c8 <timer_init+0xc0>)
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	4413      	add	r3, r2
 800218c:	f993 3000 	ldrsb.w	r3, [r3]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff ff9b 	bl	80020cc <__NVIC_EnableIRQ>
    for (uintmax_t i = 0; i < _TIMER_COUNT; i++) {
 8002196:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800219a:	1c54      	adds	r4, r2, #1
 800219c:	f143 0500 	adc.w	r5, r3, #0
 80021a0:	e9c7 4504 	strd	r4, r5, [r7, #16]
 80021a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80021a8:	2a08      	cmp	r2, #8
 80021aa:	f173 0300 	sbcs.w	r3, r3, #0
 80021ae:	d3de      	bcc.n	800216e <timer_init+0x66>
  __ASM volatile ("cpsie i" : : : "memory");
 80021b0:	b662      	cpsie	i
}
 80021b2:	bf00      	nop
    }

    __enable_irq();
}
 80021b4:	bf00      	nop
 80021b6:	3720      	adds	r7, #32
 80021b8:	46bd      	mov	sp, r7
 80021ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80021be:	bf00      	nop
 80021c0:	08005e04 	.word	0x08005e04
 80021c4:	20000098 	.word	0x20000098
 80021c8:	200000b8 	.word	0x200000b8

080021cc <timer_enable_set>:


// ===== CONTROL =====


void timer_enable_set(const TimerSel sel, const bool enable) {
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	460a      	mov	r2, r1
 80021d6:	71fb      	strb	r3, [r7, #7]
 80021d8:	4613      	mov	r3, r2
 80021da:	71bb      	strb	r3, [r7, #6]
    TimerRaw *raw = RAWS[sel];
 80021dc:	79fb      	ldrb	r3, [r7, #7]
 80021de:	4a1b      	ldr	r2, [pc, #108]	@ (800224c <timer_enable_set+0x80>)
 80021e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e4:	60fb      	str	r3, [r7, #12]

    // clear interrupt flag in case event was already waiting
    raw->SR &= ~TIM_SR_UIF;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	f023 0201 	bic.w	r2, r3, #1
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	611a      	str	r2, [r3, #16]

    timer_counter_reset(sel);
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f000 f8c9 	bl	800238c <timer_counter_reset>
    // HACK: After writes to `PSC`, `ARR`, and `CNT,
    // there seems to be a hardware bug that causes the `UIF` flag
    // to be set immediately.
    //
    // To avoid this, manually generate the interrupt, and then clear it
    raw->EGR |=  TIM_EGR_UG;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	f043 0201 	orr.w	r2, r3, #1
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	615a      	str	r2, [r3, #20]
    raw->SR  &= ~TIM_SR_UIF;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	f023 0201 	bic.w	r2, r3, #1
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	611a      	str	r2, [r3, #16]

    // Need to set `.enable` after the irq has fired
    // So if we are enabling, it dummy fires while `enable=false`,
    // which is ignored by the handler

    STATES[sel].enable = enable;
 8002212:	79fa      	ldrb	r2, [r7, #7]
 8002214:	490e      	ldr	r1, [pc, #56]	@ (8002250 <timer_enable_set+0x84>)
 8002216:	4613      	mov	r3, r2
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	4413      	add	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	440b      	add	r3, r1
 8002220:	79ba      	ldrb	r2, [r7, #6]
 8002222:	701a      	strb	r2, [r3, #0]
    if (enable)
 8002224:	79bb      	ldrb	r3, [r7, #6]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d006      	beq.n	8002238 <timer_enable_set+0x6c>
        raw->CR1 |=  TIM_CR1_CEN;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f043 0201 	orr.w	r2, r3, #1
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	601a      	str	r2, [r3, #0]
    else
        raw->CR1 &= ~TIM_CR1_CEN;

}
 8002236:	e005      	b.n	8002244 <timer_enable_set+0x78>
        raw->CR1 &= ~TIM_CR1_CEN;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f023 0201 	bic.w	r2, r3, #1
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	601a      	str	r2, [r3, #0]
}
 8002244:	bf00      	nop
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	20000098 	.word	0x20000098
 8002250:	200000c0 	.word	0x200000c0

08002254 <timer_silent_set>:
    // detect if the bit is masked on
    const TimerClockEnable en = CLOCK_ENABLES[sel];
    return *en.reg & en.mask;
}

void timer_silent_set(const TimerSel sel, const bool silent) {
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	460a      	mov	r2, r1
 800225e:	71fb      	strb	r3, [r7, #7]
 8002260:	4613      	mov	r3, r2
 8002262:	71bb      	strb	r3, [r7, #6]
    STATES[sel].silent = silent;
 8002264:	79fa      	ldrb	r2, [r7, #7]
 8002266:	4907      	ldr	r1, [pc, #28]	@ (8002284 <timer_silent_set+0x30>)
 8002268:	4613      	mov	r3, r2
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	4413      	add	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	440b      	add	r3, r1
 8002272:	3301      	adds	r3, #1
 8002274:	79ba      	ldrb	r2, [r7, #6]
 8002276:	701a      	strb	r2, [r3, #0]
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	200000c0 	.word	0x200000c0

08002288 <timer_period_set>:


// ===== PERIOD =====


void timer_period_set(const TimerSel sel, const TimerPeriod period) {
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	460a      	mov	r2, r1
 8002292:	71fb      	strb	r3, [r7, #7]
 8002294:	4613      	mov	r3, r2
 8002296:	80bb      	strh	r3, [r7, #4]
    STATES[sel].period = period;
 8002298:	79fa      	ldrb	r2, [r7, #7]
 800229a:	490b      	ldr	r1, [pc, #44]	@ (80022c8 <timer_period_set+0x40>)
 800229c:	4613      	mov	r3, r2
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	4413      	add	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	440b      	add	r3, r1
 80022a6:	3304      	adds	r3, #4
 80022a8:	88ba      	ldrh	r2, [r7, #4]
 80022aa:	801a      	strh	r2, [r3, #0]
    TimerRaw *raw = RAWS[sel];
 80022ac:	79fb      	ldrb	r3, [r7, #7]
 80022ae:	4a07      	ldr	r2, [pc, #28]	@ (80022cc <timer_period_set+0x44>)
 80022b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022b4:	60fb      	str	r3, [r7, #12]
    raw->ARR = period;
 80022b6:	88ba      	ldrh	r2, [r7, #4]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80022bc:	bf00      	nop
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	200000c0 	.word	0x200000c0
 80022cc:	20000098 	.word	0x20000098

080022d0 <timer_prescaler_set>:
TimerPeriod timer_period_get(const TimerSel sel) {
    return STATES[sel].period;
}


void timer_prescaler_set(const TimerSel sel, const TimerPrescale scale) {
 80022d0:	b4b0      	push	{r4, r5, r7}
 80022d2:	b087      	sub	sp, #28
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	460a      	mov	r2, r1
 80022da:	71fb      	strb	r3, [r7, #7]
 80022dc:	4613      	mov	r3, r2
 80022de:	80bb      	strh	r3, [r7, #4]
    STATES[sel].prescale = scale;
 80022e0:	79fa      	ldrb	r2, [r7, #7]
 80022e2:	491b      	ldr	r1, [pc, #108]	@ (8002350 <timer_prescaler_set+0x80>)
 80022e4:	4613      	mov	r3, r2
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	4413      	add	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	3306      	adds	r3, #6
 80022f0:	88ba      	ldrh	r2, [r7, #4]
 80022f2:	801a      	strh	r2, [r3, #0]
    TimerRaw *const raw = RAWS[sel];
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	4a17      	ldr	r2, [pc, #92]	@ (8002354 <timer_prescaler_set+0x84>)
 80022f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022fc:	60fb      	str	r3, [r7, #12]
    raw->PSC = scale;
 80022fe:	88ba      	ldrh	r2, [r7, #4]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	629a      	str	r2, [r3, #40]	@ 0x28

    // changing the prescaler will not take effect until counter overflow
    // so set reload to `1` and counter to `0`, to immediately overflow
    // and apply changes
    const uint32_t arr = raw->ARR;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002308:	60bb      	str	r3, [r7, #8]
    raw->ARR = 1;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2201      	movs	r2, #1
 800230e:	62da      	str	r2, [r3, #44]	@ 0x2c
    raw->CNT = 0;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	625a      	str	r2, [r3, #36]	@ 0x24
    // spin to give time for changes to take affect
    for (uintmax_t i = 0; i < 8; i++)
 8002316:	f04f 0200 	mov.w	r2, #0
 800231a:	f04f 0300 	mov.w	r3, #0
 800231e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002322:	e007      	b.n	8002334 <timer_prescaler_set+0x64>
        asm("NOP");
 8002324:	bf00      	nop
    for (uintmax_t i = 0; i < 8; i++)
 8002326:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800232a:	1c54      	adds	r4, r2, #1
 800232c:	f143 0500 	adc.w	r5, r3, #0
 8002330:	e9c7 4504 	strd	r4, r5, [r7, #16]
 8002334:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002338:	2a08      	cmp	r2, #8
 800233a:	f173 0300 	sbcs.w	r3, r3, #0
 800233e:	d3f1      	bcc.n	8002324 <timer_prescaler_set+0x54>
    raw->ARR = arr;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002346:	bf00      	nop
 8002348:	371c      	adds	r7, #28
 800234a:	46bd      	mov	sp, r7
 800234c:	bcb0      	pop	{r4, r5, r7}
 800234e:	4770      	bx	lr
 8002350:	200000c0 	.word	0x200000c0
 8002354:	20000098 	.word	0x20000098

08002358 <timer_recur_set>:
TimerPrescale timer_prescale_get(const TimerSel sel) {
    return STATES[sel].prescale;
}

// TODO: See TIM->CR1->OPM for oneshot mode
void timer_recur_set(const TimerSel sel, const bool recur) {
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	460a      	mov	r2, r1
 8002362:	71fb      	strb	r3, [r7, #7]
 8002364:	4613      	mov	r3, r2
 8002366:	71bb      	strb	r3, [r7, #6]
    STATES[sel].recur = recur;
 8002368:	79fa      	ldrb	r2, [r7, #7]
 800236a:	4907      	ldr	r1, [pc, #28]	@ (8002388 <timer_recur_set+0x30>)
 800236c:	4613      	mov	r3, r2
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	4413      	add	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	3302      	adds	r3, #2
 8002378:	79ba      	ldrb	r2, [r7, #6]
 800237a:	701a      	strb	r2, [r3, #0]
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	200000c0 	.word	0x200000c0

0800238c <timer_counter_reset>:
bool timer_recur_get(const TimerSel sel) {
    return STATES[sel].recur;
}


void timer_counter_reset(const TimerSel sel) {
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	71fb      	strb	r3, [r7, #7]
    RAWS[sel]->CNT = 0;
 8002396:	79fb      	ldrb	r3, [r7, #7]
 8002398:	4a05      	ldr	r2, [pc, #20]	@ (80023b0 <timer_counter_reset+0x24>)
 800239a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800239e:	2200      	movs	r2, #0
 80023a0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	20000098 	.word	0x20000098

080023b4 <_timer_interrupt_handler>:

// ===== CALLBACKS =====


/// The callback handler called by our IRQ handlers
static void _timer_interrupt_handler(const TimerSel sel, GameState *game) {
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	6039      	str	r1, [r7, #0]
 80023be:	71fb      	strb	r3, [r7, #7]
    TimerRaw *raw = RAWS[sel];
 80023c0:	79fb      	ldrb	r3, [r7, #7]
 80023c2:	4a25      	ldr	r2, [pc, #148]	@ (8002458 <_timer_interrupt_handler+0xa4>)
 80023c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c8:	617b      	str	r3, [r7, #20]

    // check it was definitely this timer that fired
    // since multiple timers can share one event
    if (!(raw->SR & TIM_SR_UIF))
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d03a      	beq.n	800244c <_timer_interrupt_handler+0x98>
        return;

    // clear interrupt flag so it doesn't get called again
    raw->SR &= ~TIM_SR_UIF;
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	f023 0201 	bic.w	r2, r3, #1
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	611a      	str	r2, [r3, #16]

    TimerState *const state = &STATES[sel];
 80023e2:	79fa      	ldrb	r2, [r7, #7]
 80023e4:	4613      	mov	r3, r2
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	4413      	add	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4a1b      	ldr	r2, [pc, #108]	@ (800245c <_timer_interrupt_handler+0xa8>)
 80023ee:	4413      	add	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]

    // We may get a dummy fire when enabling the timer, see `timer_enable_set()`
    if (!state->enable)
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	f083 0301 	eor.w	r3, r3, #1
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d127      	bne.n	8002450 <_timer_interrupt_handler+0x9c>
        return;

    // update silent for future firings
    const bool was_silent = state->silent;
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	785b      	ldrb	r3, [r3, #1]
 8002404:	73fb      	strb	r3, [r7, #15]
    state->silent = !state->recur;
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	789b      	ldrb	r3, [r3, #2]
 800240a:	2b00      	cmp	r3, #0
 800240c:	bf14      	ite	ne
 800240e:	2301      	movne	r3, #1
 8002410:	2300      	moveq	r3, #0
 8002412:	b2db      	uxtb	r3, r3
 8002414:	f083 0301 	eor.w	r3, r3, #1
 8002418:	b2db      	uxtb	r3, r3
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	b2da      	uxtb	r2, r3
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	705a      	strb	r2, [r3, #1]

    // call callback if enabled and has been set
    // do this after setting silent, so the callback
    // can un-silence itself
    if (!was_silent && state->callback != NULL)
 8002424:	7bfb      	ldrb	r3, [r7, #15]
 8002426:	f083 0301 	eor.w	r3, r3, #1
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	d008      	beq.n	8002442 <_timer_interrupt_handler+0x8e>
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d004      	beq.n	8002442 <_timer_interrupt_handler+0x8e>
        state->callback(sel);
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	79fa      	ldrb	r2, [r7, #7]
 800243e:	4610      	mov	r0, r2
 8002440:	4798      	blx	r3

    // TODO: should not be using this, use auto reload
    // reset counter
    timer_counter_reset(sel);
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff ffa1 	bl	800238c <timer_counter_reset>
 800244a:	e002      	b.n	8002452 <_timer_interrupt_handler+0x9e>
        return;
 800244c:	bf00      	nop
 800244e:	e000      	b.n	8002452 <_timer_interrupt_handler+0x9e>
        return;
 8002450:	bf00      	nop
}
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	20000098 	.word	0x20000098
 800245c:	200000c0 	.word	0x200000c0

08002460 <timer_callback_set>:

void timer_callback_set(const TimerSel sel, TimerCallbackFn *const callback) {
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	6039      	str	r1, [r7, #0]
 800246a:	71fb      	strb	r3, [r7, #7]
    STATES[sel].callback = callback;
 800246c:	79fa      	ldrb	r2, [r7, #7]
 800246e:	4907      	ldr	r1, [pc, #28]	@ (800248c <timer_callback_set+0x2c>)
 8002470:	4613      	mov	r3, r2
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	4413      	add	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	3308      	adds	r3, #8
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	601a      	str	r2, [r3, #0]
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	200000c0 	.word	0x200000c0

08002490 <TIM2_IRQHandler>:
// NOTE: IRQ handlers seem to be added by overriding the weakly linked
// default handler. Some are also shared for multiple events


// TIM2 global interrupt
void TIM2_IRQHandler(void) {
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
    _timer_interrupt_handler(TIMER_SEL_2, &game);
 8002494:	4902      	ldr	r1, [pc, #8]	@ (80024a0 <TIM2_IRQHandler+0x10>)
 8002496:	2000      	movs	r0, #0
 8002498:	f7ff ff8c 	bl	80023b4 <_timer_interrupt_handler>
}
 800249c:	bf00      	nop
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20000008 	.word	0x20000008

080024a4 <TIM3_IRQHandler>:
// TIM3 global interrupt
void TIM3_IRQHandler(void) {
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
    _timer_interrupt_handler(TIMER_SEL_3, &game);
 80024a8:	4902      	ldr	r1, [pc, #8]	@ (80024b4 <TIM3_IRQHandler+0x10>)
 80024aa:	2001      	movs	r0, #1
 80024ac:	f7ff ff82 	bl	80023b4 <_timer_interrupt_handler>
}
 80024b0:	bf00      	nop
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	20000008 	.word	0x20000008

080024b8 <TIM4_IRQHandler>:
// TIM4 global interrupt
void TIM4_IRQHandler(void) {
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
    _timer_interrupt_handler(TIMER_SEL_4, &game);
 80024bc:	4902      	ldr	r1, [pc, #8]	@ (80024c8 <TIM4_IRQHandler+0x10>)
 80024be:	2002      	movs	r0, #2
 80024c0:	f7ff ff78 	bl	80023b4 <_timer_interrupt_handler>
}
 80024c4:	bf00      	nop
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20000008 	.word	0x20000008

080024cc <TIM7_IRQHandler>:
// TIM6 global and DAC12 underrun interrupts
void TIM6_DACUNDER_IRQHandler(void) {
    _timer_interrupt_handler(TIMER_SEL_6, &game);
}
// TIM7 global interrupt
void TIM7_IRQHandler(void) {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
    _timer_interrupt_handler(TIMER_SEL_7, &game);
 80024d0:	4902      	ldr	r1, [pc, #8]	@ (80024dc <TIM7_IRQHandler+0x10>)
 80024d2:	2004      	movs	r0, #4
 80024d4:	f7ff ff6e 	bl	80023b4 <_timer_interrupt_handler>
}
 80024d8:	bf00      	nop
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	20000008 	.word	0x20000008

080024e0 <TIM1_BRK_TIM15_IRQHandler>:
// TIM1 Break/TIM15 global interrupts
void TIM1_BRK_TIM15_IRQHandler(void) {
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
    _timer_interrupt_handler(TIMER_SEL_15, &game);
 80024e4:	4902      	ldr	r1, [pc, #8]	@ (80024f0 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80024e6:	2005      	movs	r0, #5
 80024e8:	f7ff ff64 	bl	80023b4 <_timer_interrupt_handler>
}
 80024ec:	bf00      	nop
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	20000008 	.word	0x20000008

080024f4 <TIM1_UP_TIM16_IRQHandler>:
// TIM1 Update/TIM16 global interrupts
void TIM1_UP_TIM16_IRQHandler(void) {
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
    _timer_interrupt_handler(TIMER_SEL_16, &game);
 80024f8:	4902      	ldr	r1, [pc, #8]	@ (8002504 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80024fa:	2006      	movs	r0, #6
 80024fc:	f7ff ff5a 	bl	80023b4 <_timer_interrupt_handler>
}
 8002500:	bf00      	nop
 8002502:	bd80      	pop	{r7, pc}
 8002504:	20000008 	.word	0x20000008

08002508 <TIM1_TRG_COM_TIM17_IRQHandler>:
// TIM1 trigger and commutation/TIM17 interrupts
void TIM1_TRG_COM_TIM17_IRQHandler(void) {
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
    _timer_interrupt_handler(TIMER_SEL_17, &game);
 800250c:	4902      	ldr	r1, [pc, #8]	@ (8002518 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800250e:	2007      	movs	r0, #7
 8002510:	f7ff ff50 	bl	80023b4 <_timer_interrupt_handler>
}
 8002514:	bf00      	nop
 8002516:	bd80      	pop	{r7, pc}
 8002518:	20000008 	.word	0x20000008

0800251c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800251c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002554 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002520:	f7ff fdc2 	bl	80020a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002524:	480c      	ldr	r0, [pc, #48]	@ (8002558 <LoopForever+0x6>)
  ldr r1, =_edata
 8002526:	490d      	ldr	r1, [pc, #52]	@ (800255c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002528:	4a0d      	ldr	r2, [pc, #52]	@ (8002560 <LoopForever+0xe>)
  movs r3, #0
 800252a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800252c:	e002      	b.n	8002534 <LoopCopyDataInit>

0800252e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800252e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002532:	3304      	adds	r3, #4

08002534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002538:	d3f9      	bcc.n	800252e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800253a:	4a0a      	ldr	r2, [pc, #40]	@ (8002564 <LoopForever+0x12>)
  ldr r4, =_ebss
 800253c:	4c0a      	ldr	r4, [pc, #40]	@ (8002568 <LoopForever+0x16>)
  movs r3, #0
 800253e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002540:	e001      	b.n	8002546 <LoopFillZerobss>

08002542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002544:	3204      	adds	r2, #4

08002546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002548:	d3fb      	bcc.n	8002542 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800254a:	f002 fd35 	bl	8004fb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800254e:	f7fe fe19 	bl	8001184 <main>

08002552 <LoopForever>:

LoopForever:
    b LoopForever
 8002552:	e7fe      	b.n	8002552 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002554:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800255c:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 8002560:	08005fc8 	.word	0x08005fc8
  ldr r2, =_sbss
 8002564:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 8002568:	2000049c 	.word	0x2000049c

0800256c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800256c:	e7fe      	b.n	800256c <ADC1_2_IRQHandler>
	...

08002570 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002574:	4b08      	ldr	r3, [pc, #32]	@ (8002598 <HAL_Init+0x28>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a07      	ldr	r2, [pc, #28]	@ (8002598 <HAL_Init+0x28>)
 800257a:	f043 0310 	orr.w	r3, r3, #16
 800257e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002580:	2003      	movs	r0, #3
 8002582:	f000 f90d 	bl	80027a0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002586:	200f      	movs	r0, #15
 8002588:	f000 f808 	bl	800259c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800258c:	f7ff fc3a 	bl	8001e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40022000 	.word	0x40022000

0800259c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025a4:	4b12      	ldr	r3, [pc, #72]	@ (80025f0 <HAL_InitTick+0x54>)
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	4b12      	ldr	r3, [pc, #72]	@ (80025f4 <HAL_InitTick+0x58>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	4619      	mov	r1, r3
 80025ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80025b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 f917 	bl	80027ee <HAL_SYSTICK_Config>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e00e      	b.n	80025e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b0f      	cmp	r3, #15
 80025ce:	d80a      	bhi.n	80025e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025d0:	2200      	movs	r2, #0
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	f04f 30ff 	mov.w	r0, #4294967295
 80025d8:	f000 f8ed 	bl	80027b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025dc:	4a06      	ldr	r2, [pc, #24]	@ (80025f8 <HAL_InitTick+0x5c>)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
 80025e4:	e000      	b.n	80025e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	20000094 	.word	0x20000094
 80025f4:	20000124 	.word	0x20000124
 80025f8:	20000120 	.word	0x20000120

080025fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002600:	4b06      	ldr	r3, [pc, #24]	@ (800261c <HAL_IncTick+0x20>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	461a      	mov	r2, r3
 8002606:	4b06      	ldr	r3, [pc, #24]	@ (8002620 <HAL_IncTick+0x24>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4413      	add	r3, r2
 800260c:	4a04      	ldr	r2, [pc, #16]	@ (8002620 <HAL_IncTick+0x24>)
 800260e:	6013      	str	r3, [r2, #0]
}
 8002610:	bf00      	nop
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	20000124 	.word	0x20000124
 8002620:	20000350 	.word	0x20000350

08002624 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  return uwTick;  
 8002628:	4b03      	ldr	r3, [pc, #12]	@ (8002638 <HAL_GetTick+0x14>)
 800262a:	681b      	ldr	r3, [r3, #0]
}
 800262c:	4618      	mov	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	20000350 	.word	0x20000350

0800263c <__NVIC_SetPriorityGrouping>:
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800264c:	4b0c      	ldr	r3, [pc, #48]	@ (8002680 <__NVIC_SetPriorityGrouping+0x44>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002652:	68ba      	ldr	r2, [r7, #8]
 8002654:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002658:	4013      	ands	r3, r2
 800265a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002664:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002668:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800266c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800266e:	4a04      	ldr	r2, [pc, #16]	@ (8002680 <__NVIC_SetPriorityGrouping+0x44>)
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	60d3      	str	r3, [r2, #12]
}
 8002674:	bf00      	nop
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	e000ed00 	.word	0xe000ed00

08002684 <__NVIC_GetPriorityGrouping>:
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002688:	4b04      	ldr	r3, [pc, #16]	@ (800269c <__NVIC_GetPriorityGrouping+0x18>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	0a1b      	lsrs	r3, r3, #8
 800268e:	f003 0307 	and.w	r3, r3, #7
}
 8002692:	4618      	mov	r0, r3
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	e000ed00 	.word	0xe000ed00

080026a0 <__NVIC_SetPriority>:
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	6039      	str	r1, [r7, #0]
 80026aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	db0a      	blt.n	80026ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	490c      	ldr	r1, [pc, #48]	@ (80026ec <__NVIC_SetPriority+0x4c>)
 80026ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026be:	0112      	lsls	r2, r2, #4
 80026c0:	b2d2      	uxtb	r2, r2
 80026c2:	440b      	add	r3, r1
 80026c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80026c8:	e00a      	b.n	80026e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	b2da      	uxtb	r2, r3
 80026ce:	4908      	ldr	r1, [pc, #32]	@ (80026f0 <__NVIC_SetPriority+0x50>)
 80026d0:	79fb      	ldrb	r3, [r7, #7]
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	3b04      	subs	r3, #4
 80026d8:	0112      	lsls	r2, r2, #4
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	440b      	add	r3, r1
 80026de:	761a      	strb	r2, [r3, #24]
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	e000e100 	.word	0xe000e100
 80026f0:	e000ed00 	.word	0xe000ed00

080026f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b089      	sub	sp, #36	@ 0x24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f1c3 0307 	rsb	r3, r3, #7
 800270e:	2b04      	cmp	r3, #4
 8002710:	bf28      	it	cs
 8002712:	2304      	movcs	r3, #4
 8002714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	3304      	adds	r3, #4
 800271a:	2b06      	cmp	r3, #6
 800271c:	d902      	bls.n	8002724 <NVIC_EncodePriority+0x30>
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	3b03      	subs	r3, #3
 8002722:	e000      	b.n	8002726 <NVIC_EncodePriority+0x32>
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002728:	f04f 32ff 	mov.w	r2, #4294967295
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43da      	mvns	r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	401a      	ands	r2, r3
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800273c:	f04f 31ff 	mov.w	r1, #4294967295
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	fa01 f303 	lsl.w	r3, r1, r3
 8002746:	43d9      	mvns	r1, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800274c:	4313      	orrs	r3, r2
         );
}
 800274e:	4618      	mov	r0, r3
 8002750:	3724      	adds	r7, #36	@ 0x24
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
	...

0800275c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3b01      	subs	r3, #1
 8002768:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800276c:	d301      	bcc.n	8002772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800276e:	2301      	movs	r3, #1
 8002770:	e00f      	b.n	8002792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002772:	4a0a      	ldr	r2, [pc, #40]	@ (800279c <SysTick_Config+0x40>)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3b01      	subs	r3, #1
 8002778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800277a:	210f      	movs	r1, #15
 800277c:	f04f 30ff 	mov.w	r0, #4294967295
 8002780:	f7ff ff8e 	bl	80026a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002784:	4b05      	ldr	r3, [pc, #20]	@ (800279c <SysTick_Config+0x40>)
 8002786:	2200      	movs	r2, #0
 8002788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800278a:	4b04      	ldr	r3, [pc, #16]	@ (800279c <SysTick_Config+0x40>)
 800278c:	2207      	movs	r2, #7
 800278e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	e000e010 	.word	0xe000e010

080027a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f7ff ff47 	bl	800263c <__NVIC_SetPriorityGrouping>
}
 80027ae:	bf00      	nop
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b086      	sub	sp, #24
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	4603      	mov	r3, r0
 80027be:	60b9      	str	r1, [r7, #8]
 80027c0:	607a      	str	r2, [r7, #4]
 80027c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027c8:	f7ff ff5c 	bl	8002684 <__NVIC_GetPriorityGrouping>
 80027cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	68b9      	ldr	r1, [r7, #8]
 80027d2:	6978      	ldr	r0, [r7, #20]
 80027d4:	f7ff ff8e 	bl	80026f4 <NVIC_EncodePriority>
 80027d8:	4602      	mov	r2, r0
 80027da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027de:	4611      	mov	r1, r2
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff ff5d 	bl	80026a0 <__NVIC_SetPriority>
}
 80027e6:	bf00      	nop
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b082      	sub	sp, #8
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7ff ffb0 	bl	800275c <SysTick_Config>
 80027fc:	4603      	mov	r3, r0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
	...

08002808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002808:	b480      	push	{r7}
 800280a:	b087      	sub	sp, #28
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002812:	2300      	movs	r3, #0
 8002814:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002816:	e154      	b.n	8002ac2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	2101      	movs	r1, #1
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	fa01 f303 	lsl.w	r3, r1, r3
 8002824:	4013      	ands	r3, r2
 8002826:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2b00      	cmp	r3, #0
 800282c:	f000 8146 	beq.w	8002abc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 0303 	and.w	r3, r3, #3
 8002838:	2b01      	cmp	r3, #1
 800283a:	d005      	beq.n	8002848 <HAL_GPIO_Init+0x40>
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f003 0303 	and.w	r3, r3, #3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d130      	bne.n	80028aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	2203      	movs	r2, #3
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	43db      	mvns	r3, r3
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	4013      	ands	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	68da      	ldr	r2, [r3, #12]
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4313      	orrs	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800287e:	2201      	movs	r2, #1
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	43db      	mvns	r3, r3
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	4013      	ands	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	091b      	lsrs	r3, r3, #4
 8002894:	f003 0201 	and.w	r2, r3, #1
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f003 0303 	and.w	r3, r3, #3
 80028b2:	2b03      	cmp	r3, #3
 80028b4:	d017      	beq.n	80028e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	2203      	movs	r2, #3
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	43db      	mvns	r3, r3
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	4013      	ands	r3, r2
 80028cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	689a      	ldr	r2, [r3, #8]
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	4313      	orrs	r3, r2
 80028de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f003 0303 	and.w	r3, r3, #3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d123      	bne.n	800293a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	08da      	lsrs	r2, r3, #3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	3208      	adds	r2, #8
 80028fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	220f      	movs	r2, #15
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43db      	mvns	r3, r3
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	691a      	ldr	r2, [r3, #16]
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	4313      	orrs	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	08da      	lsrs	r2, r3, #3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3208      	adds	r2, #8
 8002934:	6939      	ldr	r1, [r7, #16]
 8002936:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	2203      	movs	r2, #3
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43db      	mvns	r3, r3
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	4013      	ands	r3, r2
 8002950:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 0203 	and.w	r2, r3, #3
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	4313      	orrs	r3, r2
 8002966:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 80a0 	beq.w	8002abc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800297c:	4b58      	ldr	r3, [pc, #352]	@ (8002ae0 <HAL_GPIO_Init+0x2d8>)
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	4a57      	ldr	r2, [pc, #348]	@ (8002ae0 <HAL_GPIO_Init+0x2d8>)
 8002982:	f043 0301 	orr.w	r3, r3, #1
 8002986:	6193      	str	r3, [r2, #24]
 8002988:	4b55      	ldr	r3, [pc, #340]	@ (8002ae0 <HAL_GPIO_Init+0x2d8>)
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	60bb      	str	r3, [r7, #8]
 8002992:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002994:	4a53      	ldr	r2, [pc, #332]	@ (8002ae4 <HAL_GPIO_Init+0x2dc>)
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	089b      	lsrs	r3, r3, #2
 800299a:	3302      	adds	r3, #2
 800299c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f003 0303 	and.w	r3, r3, #3
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	220f      	movs	r2, #15
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	4013      	ands	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80029be:	d019      	beq.n	80029f4 <HAL_GPIO_Init+0x1ec>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a49      	ldr	r2, [pc, #292]	@ (8002ae8 <HAL_GPIO_Init+0x2e0>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d013      	beq.n	80029f0 <HAL_GPIO_Init+0x1e8>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a48      	ldr	r2, [pc, #288]	@ (8002aec <HAL_GPIO_Init+0x2e4>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d00d      	beq.n	80029ec <HAL_GPIO_Init+0x1e4>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a47      	ldr	r2, [pc, #284]	@ (8002af0 <HAL_GPIO_Init+0x2e8>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d007      	beq.n	80029e8 <HAL_GPIO_Init+0x1e0>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a46      	ldr	r2, [pc, #280]	@ (8002af4 <HAL_GPIO_Init+0x2ec>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d101      	bne.n	80029e4 <HAL_GPIO_Init+0x1dc>
 80029e0:	2304      	movs	r3, #4
 80029e2:	e008      	b.n	80029f6 <HAL_GPIO_Init+0x1ee>
 80029e4:	2305      	movs	r3, #5
 80029e6:	e006      	b.n	80029f6 <HAL_GPIO_Init+0x1ee>
 80029e8:	2303      	movs	r3, #3
 80029ea:	e004      	b.n	80029f6 <HAL_GPIO_Init+0x1ee>
 80029ec:	2302      	movs	r3, #2
 80029ee:	e002      	b.n	80029f6 <HAL_GPIO_Init+0x1ee>
 80029f0:	2301      	movs	r3, #1
 80029f2:	e000      	b.n	80029f6 <HAL_GPIO_Init+0x1ee>
 80029f4:	2300      	movs	r3, #0
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	f002 0203 	and.w	r2, r2, #3
 80029fc:	0092      	lsls	r2, r2, #2
 80029fe:	4093      	lsls	r3, r2
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a06:	4937      	ldr	r1, [pc, #220]	@ (8002ae4 <HAL_GPIO_Init+0x2dc>)
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	089b      	lsrs	r3, r3, #2
 8002a0c:	3302      	adds	r3, #2
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a14:	4b38      	ldr	r3, [pc, #224]	@ (8002af8 <HAL_GPIO_Init+0x2f0>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	4013      	ands	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002a38:	4a2f      	ldr	r2, [pc, #188]	@ (8002af8 <HAL_GPIO_Init+0x2f0>)
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a3e:	4b2e      	ldr	r3, [pc, #184]	@ (8002af8 <HAL_GPIO_Init+0x2f0>)
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	43db      	mvns	r3, r3
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002a62:	4a25      	ldr	r2, [pc, #148]	@ (8002af8 <HAL_GPIO_Init+0x2f0>)
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a68:	4b23      	ldr	r3, [pc, #140]	@ (8002af8 <HAL_GPIO_Init+0x2f0>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	43db      	mvns	r3, r3
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	4013      	ands	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d003      	beq.n	8002a8c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a8c:	4a1a      	ldr	r2, [pc, #104]	@ (8002af8 <HAL_GPIO_Init+0x2f0>)
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a92:	4b19      	ldr	r3, [pc, #100]	@ (8002af8 <HAL_GPIO_Init+0x2f0>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002ab6:	4a10      	ldr	r2, [pc, #64]	@ (8002af8 <HAL_GPIO_Init+0x2f0>)
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f47f aea3 	bne.w	8002818 <HAL_GPIO_Init+0x10>
  }
}
 8002ad2:	bf00      	nop
 8002ad4:	bf00      	nop
 8002ad6:	371c      	adds	r7, #28
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	40010000 	.word	0x40010000
 8002ae8:	48000400 	.word	0x48000400
 8002aec:	48000800 	.word	0x48000800
 8002af0:	48000c00 	.word	0x48000c00
 8002af4:	48001000 	.word	0x48001000
 8002af8:	40010400 	.word	0x40010400

08002afc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b08:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b0c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d102      	bne.n	8002b22 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	f001 b823 	b.w	8003b68 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 817d 	beq.w	8002e32 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002b38:	4bbc      	ldr	r3, [pc, #752]	@ (8002e2c <HAL_RCC_OscConfig+0x330>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 030c 	and.w	r3, r3, #12
 8002b40:	2b04      	cmp	r3, #4
 8002b42:	d00c      	beq.n	8002b5e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b44:	4bb9      	ldr	r3, [pc, #740]	@ (8002e2c <HAL_RCC_OscConfig+0x330>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 030c 	and.w	r3, r3, #12
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	d15c      	bne.n	8002c0a <HAL_RCC_OscConfig+0x10e>
 8002b50:	4bb6      	ldr	r3, [pc, #728]	@ (8002e2c <HAL_RCC_OscConfig+0x330>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b5c:	d155      	bne.n	8002c0a <HAL_RCC_OscConfig+0x10e>
 8002b5e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b62:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b66:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002b6a:	fa93 f3a3 	rbit	r3, r3
 8002b6e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b72:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b76:	fab3 f383 	clz	r3, r3
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	095b      	lsrs	r3, r3, #5
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	f043 0301 	orr.w	r3, r3, #1
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d102      	bne.n	8002b90 <HAL_RCC_OscConfig+0x94>
 8002b8a:	4ba8      	ldr	r3, [pc, #672]	@ (8002e2c <HAL_RCC_OscConfig+0x330>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	e015      	b.n	8002bbc <HAL_RCC_OscConfig+0xc0>
 8002b90:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b94:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b98:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002b9c:	fa93 f3a3 	rbit	r3, r3
 8002ba0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002ba4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ba8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002bac:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002bb0:	fa93 f3a3 	rbit	r3, r3
 8002bb4:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002bb8:	4b9c      	ldr	r3, [pc, #624]	@ (8002e2c <HAL_RCC_OscConfig+0x330>)
 8002bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002bc0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002bc4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002bc8:	fa92 f2a2 	rbit	r2, r2
 8002bcc:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002bd0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002bd4:	fab2 f282 	clz	r2, r2
 8002bd8:	b2d2      	uxtb	r2, r2
 8002bda:	f042 0220 	orr.w	r2, r2, #32
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	f002 021f 	and.w	r2, r2, #31
 8002be4:	2101      	movs	r1, #1
 8002be6:	fa01 f202 	lsl.w	r2, r1, r2
 8002bea:	4013      	ands	r3, r2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 811f 	beq.w	8002e30 <HAL_RCC_OscConfig+0x334>
 8002bf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bf6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f040 8116 	bne.w	8002e30 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	f000 bfaf 	b.w	8003b68 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c1a:	d106      	bne.n	8002c2a <HAL_RCC_OscConfig+0x12e>
 8002c1c:	4b83      	ldr	r3, [pc, #524]	@ (8002e2c <HAL_RCC_OscConfig+0x330>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a82      	ldr	r2, [pc, #520]	@ (8002e2c <HAL_RCC_OscConfig+0x330>)
 8002c22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c26:	6013      	str	r3, [r2, #0]
 8002c28:	e036      	b.n	8002c98 <HAL_RCC_OscConfig+0x19c>
 8002c2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c2e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10c      	bne.n	8002c54 <HAL_RCC_OscConfig+0x158>
 8002c3a:	4b7c      	ldr	r3, [pc, #496]	@ (8002e2c <HAL_RCC_OscConfig+0x330>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a7b      	ldr	r2, [pc, #492]	@ (8002e2c <HAL_RCC_OscConfig+0x330>)
 8002c40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	4b79      	ldr	r3, [pc, #484]	@ (8002e2c <HAL_RCC_OscConfig+0x330>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a78      	ldr	r2, [pc, #480]	@ (8002e2c <HAL_RCC_OscConfig+0x330>)
 8002c4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	e021      	b.n	8002c98 <HAL_RCC_OscConfig+0x19c>
 8002c54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c58:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c64:	d10c      	bne.n	8002c80 <HAL_RCC_OscConfig+0x184>
 8002c66:	4b71      	ldr	r3, [pc, #452]	@ (8002e2c <HAL_RCC_OscConfig+0x330>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a70      	ldr	r2, [pc, #448]	@ (8002e2c <HAL_RCC_OscConfig+0x330>)
 8002c6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	4b6e      	ldr	r3, [pc, #440]	@ (8002e2c <HAL_RCC_OscConfig+0x330>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a6d      	ldr	r2, [pc, #436]	@ (8002e2c <HAL_RCC_OscConfig+0x330>)
 8002c78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c7c:	6013      	str	r3, [r2, #0]
 8002c7e:	e00b      	b.n	8002c98 <HAL_RCC_OscConfig+0x19c>
 8002c80:	4b6a      	ldr	r3, [pc, #424]	@ (8002e2c <HAL_RCC_OscConfig+0x330>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a69      	ldr	r2, [pc, #420]	@ (8002e2c <HAL_RCC_OscConfig+0x330>)
 8002c86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c8a:	6013      	str	r3, [r2, #0]
 8002c8c:	4b67      	ldr	r3, [pc, #412]	@ (8002e2c <HAL_RCC_OscConfig+0x330>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a66      	ldr	r2, [pc, #408]	@ (8002e2c <HAL_RCC_OscConfig+0x330>)
 8002c92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c96:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c98:	4b64      	ldr	r3, [pc, #400]	@ (8002e2c <HAL_RCC_OscConfig+0x330>)
 8002c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c9c:	f023 020f 	bic.w	r2, r3, #15
 8002ca0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ca4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	495f      	ldr	r1, [pc, #380]	@ (8002e2c <HAL_RCC_OscConfig+0x330>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cb6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d059      	beq.n	8002d76 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc2:	f7ff fcaf 	bl	8002624 <HAL_GetTick>
 8002cc6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cca:	e00a      	b.n	8002ce2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ccc:	f7ff fcaa 	bl	8002624 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b64      	cmp	r3, #100	@ 0x64
 8002cda:	d902      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	f000 bf43 	b.w	8003b68 <HAL_RCC_OscConfig+0x106c>
 8002ce2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ce6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cea:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002cee:	fa93 f3a3 	rbit	r3, r3
 8002cf2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002cf6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfa:	fab3 f383 	clz	r3, r3
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	095b      	lsrs	r3, r3, #5
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	f043 0301 	orr.w	r3, r3, #1
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d102      	bne.n	8002d14 <HAL_RCC_OscConfig+0x218>
 8002d0e:	4b47      	ldr	r3, [pc, #284]	@ (8002e2c <HAL_RCC_OscConfig+0x330>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	e015      	b.n	8002d40 <HAL_RCC_OscConfig+0x244>
 8002d14:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d18:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002d20:	fa93 f3a3 	rbit	r3, r3
 8002d24:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002d28:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d2c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002d30:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002d34:	fa93 f3a3 	rbit	r3, r3
 8002d38:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002d3c:	4b3b      	ldr	r3, [pc, #236]	@ (8002e2c <HAL_RCC_OscConfig+0x330>)
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d40:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002d44:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002d48:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002d4c:	fa92 f2a2 	rbit	r2, r2
 8002d50:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002d54:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002d58:	fab2 f282 	clz	r2, r2
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	f042 0220 	orr.w	r2, r2, #32
 8002d62:	b2d2      	uxtb	r2, r2
 8002d64:	f002 021f 	and.w	r2, r2, #31
 8002d68:	2101      	movs	r1, #1
 8002d6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d6e:	4013      	ands	r3, r2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0ab      	beq.n	8002ccc <HAL_RCC_OscConfig+0x1d0>
 8002d74:	e05d      	b.n	8002e32 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d76:	f7ff fc55 	bl	8002624 <HAL_GetTick>
 8002d7a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d7e:	e00a      	b.n	8002d96 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d80:	f7ff fc50 	bl	8002624 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b64      	cmp	r3, #100	@ 0x64
 8002d8e:	d902      	bls.n	8002d96 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	f000 bee9 	b.w	8003b68 <HAL_RCC_OscConfig+0x106c>
 8002d96:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d9a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002da2:	fa93 f3a3 	rbit	r3, r3
 8002da6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002daa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dae:	fab3 f383 	clz	r3, r3
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	095b      	lsrs	r3, r3, #5
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	f043 0301 	orr.w	r3, r3, #1
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d102      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x2cc>
 8002dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8002e2c <HAL_RCC_OscConfig+0x330>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	e015      	b.n	8002df4 <HAL_RCC_OscConfig+0x2f8>
 8002dc8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002dcc:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002dd4:	fa93 f3a3 	rbit	r3, r3
 8002dd8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002ddc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002de0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002de4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002de8:	fa93 f3a3 	rbit	r3, r3
 8002dec:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002df0:	4b0e      	ldr	r3, [pc, #56]	@ (8002e2c <HAL_RCC_OscConfig+0x330>)
 8002df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002df8:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002dfc:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002e00:	fa92 f2a2 	rbit	r2, r2
 8002e04:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002e08:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002e0c:	fab2 f282 	clz	r2, r2
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	f042 0220 	orr.w	r2, r2, #32
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	f002 021f 	and.w	r2, r2, #31
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e22:	4013      	ands	r3, r2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1ab      	bne.n	8002d80 <HAL_RCC_OscConfig+0x284>
 8002e28:	e003      	b.n	8002e32 <HAL_RCC_OscConfig+0x336>
 8002e2a:	bf00      	nop
 8002e2c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e36:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f000 817d 	beq.w	8003142 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e48:	4ba6      	ldr	r3, [pc, #664]	@ (80030e4 <HAL_RCC_OscConfig+0x5e8>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f003 030c 	and.w	r3, r3, #12
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00b      	beq.n	8002e6c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e54:	4ba3      	ldr	r3, [pc, #652]	@ (80030e4 <HAL_RCC_OscConfig+0x5e8>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f003 030c 	and.w	r3, r3, #12
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	d172      	bne.n	8002f46 <HAL_RCC_OscConfig+0x44a>
 8002e60:	4ba0      	ldr	r3, [pc, #640]	@ (80030e4 <HAL_RCC_OscConfig+0x5e8>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d16c      	bne.n	8002f46 <HAL_RCC_OscConfig+0x44a>
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e72:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002e76:	fa93 f3a3 	rbit	r3, r3
 8002e7a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002e7e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e82:	fab3 f383 	clz	r3, r3
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	095b      	lsrs	r3, r3, #5
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	f043 0301 	orr.w	r3, r3, #1
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d102      	bne.n	8002e9c <HAL_RCC_OscConfig+0x3a0>
 8002e96:	4b93      	ldr	r3, [pc, #588]	@ (80030e4 <HAL_RCC_OscConfig+0x5e8>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	e013      	b.n	8002ec4 <HAL_RCC_OscConfig+0x3c8>
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea2:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002ea6:	fa93 f3a3 	rbit	r3, r3
 8002eaa:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002eae:	2302      	movs	r3, #2
 8002eb0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002eb4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002eb8:	fa93 f3a3 	rbit	r3, r3
 8002ebc:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002ec0:	4b88      	ldr	r3, [pc, #544]	@ (80030e4 <HAL_RCC_OscConfig+0x5e8>)
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002eca:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002ece:	fa92 f2a2 	rbit	r2, r2
 8002ed2:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002ed6:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002eda:	fab2 f282 	clz	r2, r2
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	f042 0220 	orr.w	r2, r2, #32
 8002ee4:	b2d2      	uxtb	r2, r2
 8002ee6:	f002 021f 	and.w	r2, r2, #31
 8002eea:	2101      	movs	r1, #1
 8002eec:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00a      	beq.n	8002f0c <HAL_RCC_OscConfig+0x410>
 8002ef6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002efa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d002      	beq.n	8002f0c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	f000 be2e 	b.w	8003b68 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f0c:	4b75      	ldr	r3, [pc, #468]	@ (80030e4 <HAL_RCC_OscConfig+0x5e8>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f18:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	21f8      	movs	r1, #248	@ 0xf8
 8002f22:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f26:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002f2a:	fa91 f1a1 	rbit	r1, r1
 8002f2e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002f32:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002f36:	fab1 f181 	clz	r1, r1
 8002f3a:	b2c9      	uxtb	r1, r1
 8002f3c:	408b      	lsls	r3, r1
 8002f3e:	4969      	ldr	r1, [pc, #420]	@ (80030e4 <HAL_RCC_OscConfig+0x5e8>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f44:	e0fd      	b.n	8003142 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f4a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f000 8088 	beq.w	8003068 <HAL_RCC_OscConfig+0x56c>
 8002f58:	2301      	movs	r3, #1
 8002f5a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002f62:	fa93 f3a3 	rbit	r3, r3
 8002f66:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002f6a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f6e:	fab3 f383 	clz	r3, r3
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002f78:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	461a      	mov	r2, r3
 8002f80:	2301      	movs	r3, #1
 8002f82:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f84:	f7ff fb4e 	bl	8002624 <HAL_GetTick>
 8002f88:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f8c:	e00a      	b.n	8002fa4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f8e:	f7ff fb49 	bl	8002624 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d902      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	f000 bde2 	b.w	8003b68 <HAL_RCC_OscConfig+0x106c>
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002faa:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002fae:	fa93 f3a3 	rbit	r3, r3
 8002fb2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002fb6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fba:	fab3 f383 	clz	r3, r3
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	095b      	lsrs	r3, r3, #5
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d102      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x4d8>
 8002fce:	4b45      	ldr	r3, [pc, #276]	@ (80030e4 <HAL_RCC_OscConfig+0x5e8>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	e013      	b.n	8002ffc <HAL_RCC_OscConfig+0x500>
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fda:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002fde:	fa93 f3a3 	rbit	r3, r3
 8002fe2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002fec:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002ff0:	fa93 f3a3 	rbit	r3, r3
 8002ff4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002ff8:	4b3a      	ldr	r3, [pc, #232]	@ (80030e4 <HAL_RCC_OscConfig+0x5e8>)
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8003002:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003006:	fa92 f2a2 	rbit	r2, r2
 800300a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800300e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8003012:	fab2 f282 	clz	r2, r2
 8003016:	b2d2      	uxtb	r2, r2
 8003018:	f042 0220 	orr.w	r2, r2, #32
 800301c:	b2d2      	uxtb	r2, r2
 800301e:	f002 021f 	and.w	r2, r2, #31
 8003022:	2101      	movs	r1, #1
 8003024:	fa01 f202 	lsl.w	r2, r1, r2
 8003028:	4013      	ands	r3, r2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0af      	beq.n	8002f8e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800302e:	4b2d      	ldr	r3, [pc, #180]	@ (80030e4 <HAL_RCC_OscConfig+0x5e8>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003036:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800303a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	21f8      	movs	r1, #248	@ 0xf8
 8003044:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003048:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800304c:	fa91 f1a1 	rbit	r1, r1
 8003050:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003054:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003058:	fab1 f181 	clz	r1, r1
 800305c:	b2c9      	uxtb	r1, r1
 800305e:	408b      	lsls	r3, r1
 8003060:	4920      	ldr	r1, [pc, #128]	@ (80030e4 <HAL_RCC_OscConfig+0x5e8>)
 8003062:	4313      	orrs	r3, r2
 8003064:	600b      	str	r3, [r1, #0]
 8003066:	e06c      	b.n	8003142 <HAL_RCC_OscConfig+0x646>
 8003068:	2301      	movs	r3, #1
 800306a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003072:	fa93 f3a3 	rbit	r3, r3
 8003076:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800307a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800307e:	fab3 f383 	clz	r3, r3
 8003082:	b2db      	uxtb	r3, r3
 8003084:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003088:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	461a      	mov	r2, r3
 8003090:	2300      	movs	r3, #0
 8003092:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003094:	f7ff fac6 	bl	8002624 <HAL_GetTick>
 8003098:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800309c:	e00a      	b.n	80030b4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800309e:	f7ff fac1 	bl	8002624 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d902      	bls.n	80030b4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	f000 bd5a 	b.w	8003b68 <HAL_RCC_OscConfig+0x106c>
 80030b4:	2302      	movs	r3, #2
 80030b6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80030be:	fa93 f3a3 	rbit	r3, r3
 80030c2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80030c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ca:	fab3 f383 	clz	r3, r3
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	095b      	lsrs	r3, r3, #5
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	f043 0301 	orr.w	r3, r3, #1
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d104      	bne.n	80030e8 <HAL_RCC_OscConfig+0x5ec>
 80030de:	4b01      	ldr	r3, [pc, #4]	@ (80030e4 <HAL_RCC_OscConfig+0x5e8>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	e015      	b.n	8003110 <HAL_RCC_OscConfig+0x614>
 80030e4:	40021000 	.word	0x40021000
 80030e8:	2302      	movs	r3, #2
 80030ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80030f2:	fa93 f3a3 	rbit	r3, r3
 80030f6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80030fa:	2302      	movs	r3, #2
 80030fc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003100:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003104:	fa93 f3a3 	rbit	r3, r3
 8003108:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800310c:	4bc8      	ldr	r3, [pc, #800]	@ (8003430 <HAL_RCC_OscConfig+0x934>)
 800310e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003110:	2202      	movs	r2, #2
 8003112:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003116:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800311a:	fa92 f2a2 	rbit	r2, r2
 800311e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003122:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003126:	fab2 f282 	clz	r2, r2
 800312a:	b2d2      	uxtb	r2, r2
 800312c:	f042 0220 	orr.w	r2, r2, #32
 8003130:	b2d2      	uxtb	r2, r2
 8003132:	f002 021f 	and.w	r2, r2, #31
 8003136:	2101      	movs	r1, #1
 8003138:	fa01 f202 	lsl.w	r2, r1, r2
 800313c:	4013      	ands	r3, r2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1ad      	bne.n	800309e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003142:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003146:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0308 	and.w	r3, r3, #8
 8003152:	2b00      	cmp	r3, #0
 8003154:	f000 8110 	beq.w	8003378 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003158:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800315c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d079      	beq.n	800325c <HAL_RCC_OscConfig+0x760>
 8003168:	2301      	movs	r3, #1
 800316a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003172:	fa93 f3a3 	rbit	r3, r3
 8003176:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800317a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800317e:	fab3 f383 	clz	r3, r3
 8003182:	b2db      	uxtb	r3, r3
 8003184:	461a      	mov	r2, r3
 8003186:	4bab      	ldr	r3, [pc, #684]	@ (8003434 <HAL_RCC_OscConfig+0x938>)
 8003188:	4413      	add	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	461a      	mov	r2, r3
 800318e:	2301      	movs	r3, #1
 8003190:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003192:	f7ff fa47 	bl	8002624 <HAL_GetTick>
 8003196:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800319a:	e00a      	b.n	80031b2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800319c:	f7ff fa42 	bl	8002624 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d902      	bls.n	80031b2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	f000 bcdb 	b.w	8003b68 <HAL_RCC_OscConfig+0x106c>
 80031b2:	2302      	movs	r3, #2
 80031b4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80031bc:	fa93 f3a3 	rbit	r3, r3
 80031c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80031c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031c8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80031cc:	2202      	movs	r2, #2
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031d4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	fa93 f2a3 	rbit	r2, r3
 80031de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80031f0:	2202      	movs	r2, #2
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	fa93 f2a3 	rbit	r2, r3
 8003202:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003206:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800320a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800320c:	4b88      	ldr	r3, [pc, #544]	@ (8003430 <HAL_RCC_OscConfig+0x934>)
 800320e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003210:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003214:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003218:	2102      	movs	r1, #2
 800321a:	6019      	str	r1, [r3, #0]
 800321c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003220:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	fa93 f1a3 	rbit	r1, r3
 800322a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800322e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003232:	6019      	str	r1, [r3, #0]
  return result;
 8003234:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003238:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	fab3 f383 	clz	r3, r3
 8003242:	b2db      	uxtb	r3, r3
 8003244:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003248:	b2db      	uxtb	r3, r3
 800324a:	f003 031f 	and.w	r3, r3, #31
 800324e:	2101      	movs	r1, #1
 8003250:	fa01 f303 	lsl.w	r3, r1, r3
 8003254:	4013      	ands	r3, r2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0a0      	beq.n	800319c <HAL_RCC_OscConfig+0x6a0>
 800325a:	e08d      	b.n	8003378 <HAL_RCC_OscConfig+0x87c>
 800325c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003260:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003264:	2201      	movs	r2, #1
 8003266:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003268:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800326c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	fa93 f2a3 	rbit	r2, r3
 8003276:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800327a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800327e:	601a      	str	r2, [r3, #0]
  return result;
 8003280:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003284:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003288:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800328a:	fab3 f383 	clz	r3, r3
 800328e:	b2db      	uxtb	r3, r3
 8003290:	461a      	mov	r2, r3
 8003292:	4b68      	ldr	r3, [pc, #416]	@ (8003434 <HAL_RCC_OscConfig+0x938>)
 8003294:	4413      	add	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	461a      	mov	r2, r3
 800329a:	2300      	movs	r3, #0
 800329c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800329e:	f7ff f9c1 	bl	8002624 <HAL_GetTick>
 80032a2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032a6:	e00a      	b.n	80032be <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032a8:	f7ff f9bc 	bl	8002624 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d902      	bls.n	80032be <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	f000 bc55 	b.w	8003b68 <HAL_RCC_OscConfig+0x106c>
 80032be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032c2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80032c6:	2202      	movs	r2, #2
 80032c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ce:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	fa93 f2a3 	rbit	r2, r3
 80032d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032dc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032e6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80032ea:	2202      	movs	r2, #2
 80032ec:	601a      	str	r2, [r3, #0]
 80032ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032f2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	fa93 f2a3 	rbit	r2, r3
 80032fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003300:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800330a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800330e:	2202      	movs	r2, #2
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003316:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	fa93 f2a3 	rbit	r2, r3
 8003320:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003324:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003328:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800332a:	4b41      	ldr	r3, [pc, #260]	@ (8003430 <HAL_RCC_OscConfig+0x934>)
 800332c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800332e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003332:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003336:	2102      	movs	r1, #2
 8003338:	6019      	str	r1, [r3, #0]
 800333a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800333e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	fa93 f1a3 	rbit	r1, r3
 8003348:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800334c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003350:	6019      	str	r1, [r3, #0]
  return result;
 8003352:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003356:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	fab3 f383 	clz	r3, r3
 8003360:	b2db      	uxtb	r3, r3
 8003362:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003366:	b2db      	uxtb	r3, r3
 8003368:	f003 031f 	and.w	r3, r3, #31
 800336c:	2101      	movs	r1, #1
 800336e:	fa01 f303 	lsl.w	r3, r1, r3
 8003372:	4013      	ands	r3, r2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d197      	bne.n	80032a8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003378:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800337c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0304 	and.w	r3, r3, #4
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 81a1 	beq.w	80036d0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800338e:	2300      	movs	r3, #0
 8003390:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003394:	4b26      	ldr	r3, [pc, #152]	@ (8003430 <HAL_RCC_OscConfig+0x934>)
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d116      	bne.n	80033ce <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033a0:	4b23      	ldr	r3, [pc, #140]	@ (8003430 <HAL_RCC_OscConfig+0x934>)
 80033a2:	69db      	ldr	r3, [r3, #28]
 80033a4:	4a22      	ldr	r2, [pc, #136]	@ (8003430 <HAL_RCC_OscConfig+0x934>)
 80033a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033aa:	61d3      	str	r3, [r2, #28]
 80033ac:	4b20      	ldr	r3, [pc, #128]	@ (8003430 <HAL_RCC_OscConfig+0x934>)
 80033ae:	69db      	ldr	r3, [r3, #28]
 80033b0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80033b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033b8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033c2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80033c6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80033c8:	2301      	movs	r3, #1
 80033ca:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ce:	4b1a      	ldr	r3, [pc, #104]	@ (8003438 <HAL_RCC_OscConfig+0x93c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d11a      	bne.n	8003410 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033da:	4b17      	ldr	r3, [pc, #92]	@ (8003438 <HAL_RCC_OscConfig+0x93c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a16      	ldr	r2, [pc, #88]	@ (8003438 <HAL_RCC_OscConfig+0x93c>)
 80033e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033e4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033e6:	f7ff f91d 	bl	8002624 <HAL_GetTick>
 80033ea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ee:	e009      	b.n	8003404 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f0:	f7ff f918 	bl	8002624 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b64      	cmp	r3, #100	@ 0x64
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e3b1      	b.n	8003b68 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003404:	4b0c      	ldr	r3, [pc, #48]	@ (8003438 <HAL_RCC_OscConfig+0x93c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0ef      	beq.n	80033f0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003410:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003414:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d10d      	bne.n	800343c <HAL_RCC_OscConfig+0x940>
 8003420:	4b03      	ldr	r3, [pc, #12]	@ (8003430 <HAL_RCC_OscConfig+0x934>)
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	4a02      	ldr	r2, [pc, #8]	@ (8003430 <HAL_RCC_OscConfig+0x934>)
 8003426:	f043 0301 	orr.w	r3, r3, #1
 800342a:	6213      	str	r3, [r2, #32]
 800342c:	e03c      	b.n	80034a8 <HAL_RCC_OscConfig+0x9ac>
 800342e:	bf00      	nop
 8003430:	40021000 	.word	0x40021000
 8003434:	10908120 	.word	0x10908120
 8003438:	40007000 	.word	0x40007000
 800343c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003440:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10c      	bne.n	8003466 <HAL_RCC_OscConfig+0x96a>
 800344c:	4bc1      	ldr	r3, [pc, #772]	@ (8003754 <HAL_RCC_OscConfig+0xc58>)
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	4ac0      	ldr	r2, [pc, #768]	@ (8003754 <HAL_RCC_OscConfig+0xc58>)
 8003452:	f023 0301 	bic.w	r3, r3, #1
 8003456:	6213      	str	r3, [r2, #32]
 8003458:	4bbe      	ldr	r3, [pc, #760]	@ (8003754 <HAL_RCC_OscConfig+0xc58>)
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	4abd      	ldr	r2, [pc, #756]	@ (8003754 <HAL_RCC_OscConfig+0xc58>)
 800345e:	f023 0304 	bic.w	r3, r3, #4
 8003462:	6213      	str	r3, [r2, #32]
 8003464:	e020      	b.n	80034a8 <HAL_RCC_OscConfig+0x9ac>
 8003466:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800346a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	2b05      	cmp	r3, #5
 8003474:	d10c      	bne.n	8003490 <HAL_RCC_OscConfig+0x994>
 8003476:	4bb7      	ldr	r3, [pc, #732]	@ (8003754 <HAL_RCC_OscConfig+0xc58>)
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	4ab6      	ldr	r2, [pc, #728]	@ (8003754 <HAL_RCC_OscConfig+0xc58>)
 800347c:	f043 0304 	orr.w	r3, r3, #4
 8003480:	6213      	str	r3, [r2, #32]
 8003482:	4bb4      	ldr	r3, [pc, #720]	@ (8003754 <HAL_RCC_OscConfig+0xc58>)
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	4ab3      	ldr	r2, [pc, #716]	@ (8003754 <HAL_RCC_OscConfig+0xc58>)
 8003488:	f043 0301 	orr.w	r3, r3, #1
 800348c:	6213      	str	r3, [r2, #32]
 800348e:	e00b      	b.n	80034a8 <HAL_RCC_OscConfig+0x9ac>
 8003490:	4bb0      	ldr	r3, [pc, #704]	@ (8003754 <HAL_RCC_OscConfig+0xc58>)
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	4aaf      	ldr	r2, [pc, #700]	@ (8003754 <HAL_RCC_OscConfig+0xc58>)
 8003496:	f023 0301 	bic.w	r3, r3, #1
 800349a:	6213      	str	r3, [r2, #32]
 800349c:	4bad      	ldr	r3, [pc, #692]	@ (8003754 <HAL_RCC_OscConfig+0xc58>)
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	4aac      	ldr	r2, [pc, #688]	@ (8003754 <HAL_RCC_OscConfig+0xc58>)
 80034a2:	f023 0304 	bic.w	r3, r3, #4
 80034a6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 8081 	beq.w	80035bc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ba:	f7ff f8b3 	bl	8002624 <HAL_GetTick>
 80034be:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c2:	e00b      	b.n	80034dc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034c4:	f7ff f8ae 	bl	8002624 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e345      	b.n	8003b68 <HAL_RCC_OscConfig+0x106c>
 80034dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034e0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80034e4:	2202      	movs	r2, #2
 80034e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ec:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	fa93 f2a3 	rbit	r2, r3
 80034f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034fa:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003504:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003508:	2202      	movs	r2, #2
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003510:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	fa93 f2a3 	rbit	r2, r3
 800351a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800351e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003522:	601a      	str	r2, [r3, #0]
  return result;
 8003524:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003528:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800352c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800352e:	fab3 f383 	clz	r3, r3
 8003532:	b2db      	uxtb	r3, r3
 8003534:	095b      	lsrs	r3, r3, #5
 8003536:	b2db      	uxtb	r3, r3
 8003538:	f043 0302 	orr.w	r3, r3, #2
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d102      	bne.n	8003548 <HAL_RCC_OscConfig+0xa4c>
 8003542:	4b84      	ldr	r3, [pc, #528]	@ (8003754 <HAL_RCC_OscConfig+0xc58>)
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	e013      	b.n	8003570 <HAL_RCC_OscConfig+0xa74>
 8003548:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800354c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003550:	2202      	movs	r2, #2
 8003552:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003554:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003558:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	fa93 f2a3 	rbit	r2, r3
 8003562:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003566:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	4b79      	ldr	r3, [pc, #484]	@ (8003754 <HAL_RCC_OscConfig+0xc58>)
 800356e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003570:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003574:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003578:	2102      	movs	r1, #2
 800357a:	6011      	str	r1, [r2, #0]
 800357c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003580:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003584:	6812      	ldr	r2, [r2, #0]
 8003586:	fa92 f1a2 	rbit	r1, r2
 800358a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800358e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003592:	6011      	str	r1, [r2, #0]
  return result;
 8003594:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003598:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800359c:	6812      	ldr	r2, [r2, #0]
 800359e:	fab2 f282 	clz	r2, r2
 80035a2:	b2d2      	uxtb	r2, r2
 80035a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035a8:	b2d2      	uxtb	r2, r2
 80035aa:	f002 021f 	and.w	r2, r2, #31
 80035ae:	2101      	movs	r1, #1
 80035b0:	fa01 f202 	lsl.w	r2, r1, r2
 80035b4:	4013      	ands	r3, r2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d084      	beq.n	80034c4 <HAL_RCC_OscConfig+0x9c8>
 80035ba:	e07f      	b.n	80036bc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035bc:	f7ff f832 	bl	8002624 <HAL_GetTick>
 80035c0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035c4:	e00b      	b.n	80035de <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035c6:	f7ff f82d 	bl	8002624 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e2c4      	b.n	8003b68 <HAL_RCC_OscConfig+0x106c>
 80035de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035e2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80035e6:	2202      	movs	r2, #2
 80035e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035ee:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	fa93 f2a3 	rbit	r2, r3
 80035f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035fc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003606:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800360a:	2202      	movs	r2, #2
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003612:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	fa93 f2a3 	rbit	r2, r3
 800361c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003620:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003624:	601a      	str	r2, [r3, #0]
  return result;
 8003626:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800362a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800362e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003630:	fab3 f383 	clz	r3, r3
 8003634:	b2db      	uxtb	r3, r3
 8003636:	095b      	lsrs	r3, r3, #5
 8003638:	b2db      	uxtb	r3, r3
 800363a:	f043 0302 	orr.w	r3, r3, #2
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d102      	bne.n	800364a <HAL_RCC_OscConfig+0xb4e>
 8003644:	4b43      	ldr	r3, [pc, #268]	@ (8003754 <HAL_RCC_OscConfig+0xc58>)
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	e013      	b.n	8003672 <HAL_RCC_OscConfig+0xb76>
 800364a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800364e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003652:	2202      	movs	r2, #2
 8003654:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003656:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800365a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	fa93 f2a3 	rbit	r2, r3
 8003664:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003668:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800366c:	601a      	str	r2, [r3, #0]
 800366e:	4b39      	ldr	r3, [pc, #228]	@ (8003754 <HAL_RCC_OscConfig+0xc58>)
 8003670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003672:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003676:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800367a:	2102      	movs	r1, #2
 800367c:	6011      	str	r1, [r2, #0]
 800367e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003682:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003686:	6812      	ldr	r2, [r2, #0]
 8003688:	fa92 f1a2 	rbit	r1, r2
 800368c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003690:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003694:	6011      	str	r1, [r2, #0]
  return result;
 8003696:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800369a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800369e:	6812      	ldr	r2, [r2, #0]
 80036a0:	fab2 f282 	clz	r2, r2
 80036a4:	b2d2      	uxtb	r2, r2
 80036a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	f002 021f 	and.w	r2, r2, #31
 80036b0:	2101      	movs	r1, #1
 80036b2:	fa01 f202 	lsl.w	r2, r1, r2
 80036b6:	4013      	ands	r3, r2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d184      	bne.n	80035c6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036bc:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d105      	bne.n	80036d0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036c4:	4b23      	ldr	r3, [pc, #140]	@ (8003754 <HAL_RCC_OscConfig+0xc58>)
 80036c6:	69db      	ldr	r3, [r3, #28]
 80036c8:	4a22      	ldr	r2, [pc, #136]	@ (8003754 <HAL_RCC_OscConfig+0xc58>)
 80036ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036ce:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 8242 	beq.w	8003b66 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036e2:	4b1c      	ldr	r3, [pc, #112]	@ (8003754 <HAL_RCC_OscConfig+0xc58>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f003 030c 	and.w	r3, r3, #12
 80036ea:	2b08      	cmp	r3, #8
 80036ec:	f000 8213 	beq.w	8003b16 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	69db      	ldr	r3, [r3, #28]
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	f040 8162 	bne.w	80039c6 <HAL_RCC_OscConfig+0xeca>
 8003702:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003706:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800370a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800370e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003710:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003714:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	fa93 f2a3 	rbit	r2, r3
 800371e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003722:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003726:	601a      	str	r2, [r3, #0]
  return result;
 8003728:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800372c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003730:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003732:	fab3 f383 	clz	r3, r3
 8003736:	b2db      	uxtb	r3, r3
 8003738:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800373c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	461a      	mov	r2, r3
 8003744:	2300      	movs	r3, #0
 8003746:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003748:	f7fe ff6c 	bl	8002624 <HAL_GetTick>
 800374c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003750:	e00c      	b.n	800376c <HAL_RCC_OscConfig+0xc70>
 8003752:	bf00      	nop
 8003754:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003758:	f7fe ff64 	bl	8002624 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d901      	bls.n	800376c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e1fd      	b.n	8003b68 <HAL_RCC_OscConfig+0x106c>
 800376c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003770:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003774:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003778:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800377e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	fa93 f2a3 	rbit	r2, r3
 8003788:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800378c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003790:	601a      	str	r2, [r3, #0]
  return result;
 8003792:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003796:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800379a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800379c:	fab3 f383 	clz	r3, r3
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	095b      	lsrs	r3, r3, #5
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	f043 0301 	orr.w	r3, r3, #1
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d102      	bne.n	80037b6 <HAL_RCC_OscConfig+0xcba>
 80037b0:	4bb0      	ldr	r3, [pc, #704]	@ (8003a74 <HAL_RCC_OscConfig+0xf78>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	e027      	b.n	8003806 <HAL_RCC_OscConfig+0xd0a>
 80037b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ba:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80037be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037c8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	fa93 f2a3 	rbit	r2, r3
 80037d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037d6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037e0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80037e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ee:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	fa93 f2a3 	rbit	r2, r3
 80037f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037fc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	4b9c      	ldr	r3, [pc, #624]	@ (8003a74 <HAL_RCC_OscConfig+0xf78>)
 8003804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003806:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800380a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800380e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003812:	6011      	str	r1, [r2, #0]
 8003814:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003818:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800381c:	6812      	ldr	r2, [r2, #0]
 800381e:	fa92 f1a2 	rbit	r1, r2
 8003822:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003826:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800382a:	6011      	str	r1, [r2, #0]
  return result;
 800382c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003830:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003834:	6812      	ldr	r2, [r2, #0]
 8003836:	fab2 f282 	clz	r2, r2
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	f042 0220 	orr.w	r2, r2, #32
 8003840:	b2d2      	uxtb	r2, r2
 8003842:	f002 021f 	and.w	r2, r2, #31
 8003846:	2101      	movs	r1, #1
 8003848:	fa01 f202 	lsl.w	r2, r1, r2
 800384c:	4013      	ands	r3, r2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d182      	bne.n	8003758 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003852:	4b88      	ldr	r3, [pc, #544]	@ (8003a74 <HAL_RCC_OscConfig+0xf78>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800385a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800385e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003866:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800386a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	430b      	orrs	r3, r1
 8003874:	497f      	ldr	r1, [pc, #508]	@ (8003a74 <HAL_RCC_OscConfig+0xf78>)
 8003876:	4313      	orrs	r3, r2
 8003878:	604b      	str	r3, [r1, #4]
 800387a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800387e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003882:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003886:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003888:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800388c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	fa93 f2a3 	rbit	r2, r3
 8003896:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800389a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800389e:	601a      	str	r2, [r3, #0]
  return result;
 80038a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038a4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80038a8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038aa:	fab3 f383 	clz	r3, r3
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80038b4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	461a      	mov	r2, r3
 80038bc:	2301      	movs	r3, #1
 80038be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c0:	f7fe feb0 	bl	8002624 <HAL_GetTick>
 80038c4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038c8:	e009      	b.n	80038de <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ca:	f7fe feab 	bl	8002624 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e144      	b.n	8003b68 <HAL_RCC_OscConfig+0x106c>
 80038de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038e2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80038e6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80038ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038f0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	fa93 f2a3 	rbit	r2, r3
 80038fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038fe:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003902:	601a      	str	r2, [r3, #0]
  return result;
 8003904:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003908:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800390c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800390e:	fab3 f383 	clz	r3, r3
 8003912:	b2db      	uxtb	r3, r3
 8003914:	095b      	lsrs	r3, r3, #5
 8003916:	b2db      	uxtb	r3, r3
 8003918:	f043 0301 	orr.w	r3, r3, #1
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b01      	cmp	r3, #1
 8003920:	d102      	bne.n	8003928 <HAL_RCC_OscConfig+0xe2c>
 8003922:	4b54      	ldr	r3, [pc, #336]	@ (8003a74 <HAL_RCC_OscConfig+0xf78>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	e027      	b.n	8003978 <HAL_RCC_OscConfig+0xe7c>
 8003928:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800392c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003930:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003934:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003936:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800393a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	fa93 f2a3 	rbit	r2, r3
 8003944:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003948:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003952:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003956:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003960:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	fa93 f2a3 	rbit	r2, r3
 800396a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800396e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	4b3f      	ldr	r3, [pc, #252]	@ (8003a74 <HAL_RCC_OscConfig+0xf78>)
 8003976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003978:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800397c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003980:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003984:	6011      	str	r1, [r2, #0]
 8003986:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800398a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	fa92 f1a2 	rbit	r1, r2
 8003994:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003998:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800399c:	6011      	str	r1, [r2, #0]
  return result;
 800399e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80039a2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80039a6:	6812      	ldr	r2, [r2, #0]
 80039a8:	fab2 f282 	clz	r2, r2
 80039ac:	b2d2      	uxtb	r2, r2
 80039ae:	f042 0220 	orr.w	r2, r2, #32
 80039b2:	b2d2      	uxtb	r2, r2
 80039b4:	f002 021f 	and.w	r2, r2, #31
 80039b8:	2101      	movs	r1, #1
 80039ba:	fa01 f202 	lsl.w	r2, r1, r2
 80039be:	4013      	ands	r3, r2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d082      	beq.n	80038ca <HAL_RCC_OscConfig+0xdce>
 80039c4:	e0cf      	b.n	8003b66 <HAL_RCC_OscConfig+0x106a>
 80039c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039ca:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80039ce:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80039d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039d8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	fa93 f2a3 	rbit	r2, r3
 80039e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039e6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80039ea:	601a      	str	r2, [r3, #0]
  return result;
 80039ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039f0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80039f4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039f6:	fab3 f383 	clz	r3, r3
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003a00:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	461a      	mov	r2, r3
 8003a08:	2300      	movs	r3, #0
 8003a0a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0c:	f7fe fe0a 	bl	8002624 <HAL_GetTick>
 8003a10:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a14:	e009      	b.n	8003a2a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a16:	f7fe fe05 	bl	8002624 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e09e      	b.n	8003b68 <HAL_RCC_OscConfig+0x106c>
 8003a2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a2e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003a32:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a3c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	fa93 f2a3 	rbit	r2, r3
 8003a46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a4a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003a4e:	601a      	str	r2, [r3, #0]
  return result;
 8003a50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a54:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003a58:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a5a:	fab3 f383 	clz	r3, r3
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	095b      	lsrs	r3, r3, #5
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	f043 0301 	orr.w	r3, r3, #1
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d104      	bne.n	8003a78 <HAL_RCC_OscConfig+0xf7c>
 8003a6e:	4b01      	ldr	r3, [pc, #4]	@ (8003a74 <HAL_RCC_OscConfig+0xf78>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	e029      	b.n	8003ac8 <HAL_RCC_OscConfig+0xfcc>
 8003a74:	40021000 	.word	0x40021000
 8003a78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a7c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003a80:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a8a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	fa93 f2a3 	rbit	r2, r3
 8003a94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a98:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aa2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003aa6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ab0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	fa93 f2a3 	rbit	r2, r3
 8003aba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003abe:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	4b2b      	ldr	r3, [pc, #172]	@ (8003b74 <HAL_RCC_OscConfig+0x1078>)
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003acc:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003ad0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003ad4:	6011      	str	r1, [r2, #0]
 8003ad6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ada:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003ade:	6812      	ldr	r2, [r2, #0]
 8003ae0:	fa92 f1a2 	rbit	r1, r2
 8003ae4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ae8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003aec:	6011      	str	r1, [r2, #0]
  return result;
 8003aee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003af2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003af6:	6812      	ldr	r2, [r2, #0]
 8003af8:	fab2 f282 	clz	r2, r2
 8003afc:	b2d2      	uxtb	r2, r2
 8003afe:	f042 0220 	orr.w	r2, r2, #32
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	f002 021f 	and.w	r2, r2, #31
 8003b08:	2101      	movs	r1, #1
 8003b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b0e:	4013      	ands	r3, r2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d180      	bne.n	8003a16 <HAL_RCC_OscConfig+0xf1a>
 8003b14:	e027      	b.n	8003b66 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b1a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d101      	bne.n	8003b2a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e01e      	b.n	8003b68 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b2a:	4b12      	ldr	r3, [pc, #72]	@ (8003b74 <HAL_RCC_OscConfig+0x1078>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b32:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003b36:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003b3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d10b      	bne.n	8003b62 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003b4a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003b4e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003b52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b56:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d001      	beq.n	8003b66 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e000      	b.n	8003b68 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	40021000 	.word	0x40021000

08003b78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b09e      	sub	sp, #120	@ 0x78
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003b82:	2300      	movs	r3, #0
 8003b84:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e162      	b.n	8003e56 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b90:	4b90      	ldr	r3, [pc, #576]	@ (8003dd4 <HAL_RCC_ClockConfig+0x25c>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d910      	bls.n	8003bc0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b9e:	4b8d      	ldr	r3, [pc, #564]	@ (8003dd4 <HAL_RCC_ClockConfig+0x25c>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f023 0207 	bic.w	r2, r3, #7
 8003ba6:	498b      	ldr	r1, [pc, #556]	@ (8003dd4 <HAL_RCC_ClockConfig+0x25c>)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bae:	4b89      	ldr	r3, [pc, #548]	@ (8003dd4 <HAL_RCC_ClockConfig+0x25c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0307 	and.w	r3, r3, #7
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d001      	beq.n	8003bc0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e14a      	b.n	8003e56 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d008      	beq.n	8003bde <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bcc:	4b82      	ldr	r3, [pc, #520]	@ (8003dd8 <HAL_RCC_ClockConfig+0x260>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	497f      	ldr	r1, [pc, #508]	@ (8003dd8 <HAL_RCC_ClockConfig+0x260>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 80dc 	beq.w	8003da4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d13c      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xf6>
 8003bf4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003bf8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003bfc:	fa93 f3a3 	rbit	r3, r3
 8003c00:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003c02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c04:	fab3 f383 	clz	r3, r3
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	095b      	lsrs	r3, r3, #5
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	f043 0301 	orr.w	r3, r3, #1
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d102      	bne.n	8003c1e <HAL_RCC_ClockConfig+0xa6>
 8003c18:	4b6f      	ldr	r3, [pc, #444]	@ (8003dd8 <HAL_RCC_ClockConfig+0x260>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	e00f      	b.n	8003c3e <HAL_RCC_ClockConfig+0xc6>
 8003c1e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c22:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c26:	fa93 f3a3 	rbit	r3, r3
 8003c2a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c2c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c30:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c34:	fa93 f3a3 	rbit	r3, r3
 8003c38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c3a:	4b67      	ldr	r3, [pc, #412]	@ (8003dd8 <HAL_RCC_ClockConfig+0x260>)
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003c42:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003c44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c46:	fa92 f2a2 	rbit	r2, r2
 8003c4a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003c4c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003c4e:	fab2 f282 	clz	r2, r2
 8003c52:	b2d2      	uxtb	r2, r2
 8003c54:	f042 0220 	orr.w	r2, r2, #32
 8003c58:	b2d2      	uxtb	r2, r2
 8003c5a:	f002 021f 	and.w	r2, r2, #31
 8003c5e:	2101      	movs	r1, #1
 8003c60:	fa01 f202 	lsl.w	r2, r1, r2
 8003c64:	4013      	ands	r3, r2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d17b      	bne.n	8003d62 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e0f3      	b.n	8003e56 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d13c      	bne.n	8003cf0 <HAL_RCC_ClockConfig+0x178>
 8003c76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c7a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c7e:	fa93 f3a3 	rbit	r3, r3
 8003c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003c84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c86:	fab3 f383 	clz	r3, r3
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	095b      	lsrs	r3, r3, #5
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	f043 0301 	orr.w	r3, r3, #1
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d102      	bne.n	8003ca0 <HAL_RCC_ClockConfig+0x128>
 8003c9a:	4b4f      	ldr	r3, [pc, #316]	@ (8003dd8 <HAL_RCC_ClockConfig+0x260>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	e00f      	b.n	8003cc0 <HAL_RCC_ClockConfig+0x148>
 8003ca0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ca4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ca8:	fa93 f3a3 	rbit	r3, r3
 8003cac:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003cb2:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cb6:	fa93 f3a3 	rbit	r3, r3
 8003cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cbc:	4b46      	ldr	r3, [pc, #280]	@ (8003dd8 <HAL_RCC_ClockConfig+0x260>)
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003cc4:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003cc6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003cc8:	fa92 f2a2 	rbit	r2, r2
 8003ccc:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003cce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003cd0:	fab2 f282 	clz	r2, r2
 8003cd4:	b2d2      	uxtb	r2, r2
 8003cd6:	f042 0220 	orr.w	r2, r2, #32
 8003cda:	b2d2      	uxtb	r2, r2
 8003cdc:	f002 021f 	and.w	r2, r2, #31
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d13a      	bne.n	8003d62 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e0b2      	b.n	8003e56 <HAL_RCC_ClockConfig+0x2de>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf6:	fa93 f3a3 	rbit	r3, r3
 8003cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cfe:	fab3 f383 	clz	r3, r3
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	095b      	lsrs	r3, r3, #5
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	f043 0301 	orr.w	r3, r3, #1
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d102      	bne.n	8003d18 <HAL_RCC_ClockConfig+0x1a0>
 8003d12:	4b31      	ldr	r3, [pc, #196]	@ (8003dd8 <HAL_RCC_ClockConfig+0x260>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	e00d      	b.n	8003d34 <HAL_RCC_ClockConfig+0x1bc>
 8003d18:	2302      	movs	r3, #2
 8003d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d1e:	fa93 f3a3 	rbit	r3, r3
 8003d22:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d24:	2302      	movs	r3, #2
 8003d26:	623b      	str	r3, [r7, #32]
 8003d28:	6a3b      	ldr	r3, [r7, #32]
 8003d2a:	fa93 f3a3 	rbit	r3, r3
 8003d2e:	61fb      	str	r3, [r7, #28]
 8003d30:	4b29      	ldr	r3, [pc, #164]	@ (8003dd8 <HAL_RCC_ClockConfig+0x260>)
 8003d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d34:	2202      	movs	r2, #2
 8003d36:	61ba      	str	r2, [r7, #24]
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	fa92 f2a2 	rbit	r2, r2
 8003d3e:	617a      	str	r2, [r7, #20]
  return result;
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	fab2 f282 	clz	r2, r2
 8003d46:	b2d2      	uxtb	r2, r2
 8003d48:	f042 0220 	orr.w	r2, r2, #32
 8003d4c:	b2d2      	uxtb	r2, r2
 8003d4e:	f002 021f 	and.w	r2, r2, #31
 8003d52:	2101      	movs	r1, #1
 8003d54:	fa01 f202 	lsl.w	r2, r1, r2
 8003d58:	4013      	ands	r3, r2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e079      	b.n	8003e56 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d62:	4b1d      	ldr	r3, [pc, #116]	@ (8003dd8 <HAL_RCC_ClockConfig+0x260>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f023 0203 	bic.w	r2, r3, #3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	491a      	ldr	r1, [pc, #104]	@ (8003dd8 <HAL_RCC_ClockConfig+0x260>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d74:	f7fe fc56 	bl	8002624 <HAL_GetTick>
 8003d78:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d7a:	e00a      	b.n	8003d92 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d7c:	f7fe fc52 	bl	8002624 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e061      	b.n	8003e56 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d92:	4b11      	ldr	r3, [pc, #68]	@ (8003dd8 <HAL_RCC_ClockConfig+0x260>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f003 020c 	and.w	r2, r3, #12
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d1eb      	bne.n	8003d7c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003da4:	4b0b      	ldr	r3, [pc, #44]	@ (8003dd4 <HAL_RCC_ClockConfig+0x25c>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d214      	bcs.n	8003ddc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003db2:	4b08      	ldr	r3, [pc, #32]	@ (8003dd4 <HAL_RCC_ClockConfig+0x25c>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f023 0207 	bic.w	r2, r3, #7
 8003dba:	4906      	ldr	r1, [pc, #24]	@ (8003dd4 <HAL_RCC_ClockConfig+0x25c>)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dc2:	4b04      	ldr	r3, [pc, #16]	@ (8003dd4 <HAL_RCC_ClockConfig+0x25c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0307 	and.w	r3, r3, #7
 8003dca:	683a      	ldr	r2, [r7, #0]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d005      	beq.n	8003ddc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e040      	b.n	8003e56 <HAL_RCC_ClockConfig+0x2de>
 8003dd4:	40022000 	.word	0x40022000
 8003dd8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d008      	beq.n	8003dfa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003de8:	4b1d      	ldr	r3, [pc, #116]	@ (8003e60 <HAL_RCC_ClockConfig+0x2e8>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	491a      	ldr	r1, [pc, #104]	@ (8003e60 <HAL_RCC_ClockConfig+0x2e8>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0308 	and.w	r3, r3, #8
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d009      	beq.n	8003e1a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e06:	4b16      	ldr	r3, [pc, #88]	@ (8003e60 <HAL_RCC_ClockConfig+0x2e8>)
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	4912      	ldr	r1, [pc, #72]	@ (8003e60 <HAL_RCC_ClockConfig+0x2e8>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003e1a:	f000 f829 	bl	8003e70 <HAL_RCC_GetSysClockFreq>
 8003e1e:	4601      	mov	r1, r0
 8003e20:	4b0f      	ldr	r3, [pc, #60]	@ (8003e60 <HAL_RCC_ClockConfig+0x2e8>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e28:	22f0      	movs	r2, #240	@ 0xf0
 8003e2a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	fa92 f2a2 	rbit	r2, r2
 8003e32:	60fa      	str	r2, [r7, #12]
  return result;
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	fab2 f282 	clz	r2, r2
 8003e3a:	b2d2      	uxtb	r2, r2
 8003e3c:	40d3      	lsrs	r3, r2
 8003e3e:	4a09      	ldr	r2, [pc, #36]	@ (8003e64 <HAL_RCC_ClockConfig+0x2ec>)
 8003e40:	5cd3      	ldrb	r3, [r2, r3]
 8003e42:	fa21 f303 	lsr.w	r3, r1, r3
 8003e46:	4a08      	ldr	r2, [pc, #32]	@ (8003e68 <HAL_RCC_ClockConfig+0x2f0>)
 8003e48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003e4a:	4b08      	ldr	r3, [pc, #32]	@ (8003e6c <HAL_RCC_ClockConfig+0x2f4>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7fe fba4 	bl	800259c <HAL_InitTick>
  
  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3778      	adds	r7, #120	@ 0x78
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	40021000 	.word	0x40021000
 8003e64:	08005df4 	.word	0x08005df4
 8003e68:	20000094 	.word	0x20000094
 8003e6c:	20000120 	.word	0x20000120

08003e70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b087      	sub	sp, #28
 8003e74:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e76:	2300      	movs	r3, #0
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60bb      	str	r3, [r7, #8]
 8003e7e:	2300      	movs	r3, #0
 8003e80:	617b      	str	r3, [r7, #20]
 8003e82:	2300      	movs	r3, #0
 8003e84:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003e86:	2300      	movs	r3, #0
 8003e88:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003e8a:	4b1e      	ldr	r3, [pc, #120]	@ (8003f04 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f003 030c 	and.w	r3, r3, #12
 8003e96:	2b04      	cmp	r3, #4
 8003e98:	d002      	beq.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x30>
 8003e9a:	2b08      	cmp	r3, #8
 8003e9c:	d003      	beq.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x36>
 8003e9e:	e026      	b.n	8003eee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ea0:	4b19      	ldr	r3, [pc, #100]	@ (8003f08 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ea2:	613b      	str	r3, [r7, #16]
      break;
 8003ea4:	e026      	b.n	8003ef4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	0c9b      	lsrs	r3, r3, #18
 8003eaa:	f003 030f 	and.w	r3, r3, #15
 8003eae:	4a17      	ldr	r2, [pc, #92]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003eb0:	5cd3      	ldrb	r3, [r2, r3]
 8003eb2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003eb4:	4b13      	ldr	r3, [pc, #76]	@ (8003f04 <HAL_RCC_GetSysClockFreq+0x94>)
 8003eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb8:	f003 030f 	and.w	r3, r3, #15
 8003ebc:	4a14      	ldr	r2, [pc, #80]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ebe:	5cd3      	ldrb	r3, [r2, r3]
 8003ec0:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d008      	beq.n	8003ede <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ecc:	4a0e      	ldr	r2, [pc, #56]	@ (8003f08 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	fb02 f303 	mul.w	r3, r2, r3
 8003eda:	617b      	str	r3, [r7, #20]
 8003edc:	e004      	b.n	8003ee8 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a0c      	ldr	r2, [pc, #48]	@ (8003f14 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ee2:	fb02 f303 	mul.w	r3, r2, r3
 8003ee6:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	613b      	str	r3, [r7, #16]
      break;
 8003eec:	e002      	b.n	8003ef4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003eee:	4b06      	ldr	r3, [pc, #24]	@ (8003f08 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ef0:	613b      	str	r3, [r7, #16]
      break;
 8003ef2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ef4:	693b      	ldr	r3, [r7, #16]
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	371c      	adds	r7, #28
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	40021000 	.word	0x40021000
 8003f08:	007a1200 	.word	0x007a1200
 8003f0c:	08005e64 	.word	0x08005e64
 8003f10:	08005e74 	.word	0x08005e74
 8003f14:	003d0900 	.word	0x003d0900

08003f18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e049      	b.n	8003fbe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d106      	bne.n	8003f44 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7fd ff84 	bl	8001e4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2202      	movs	r2, #2
 8003f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	3304      	adds	r3, #4
 8003f54:	4619      	mov	r1, r3
 8003f56:	4610      	mov	r0, r2
 8003f58:	f000 fa4a 	bl	80043f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
	...

08003fc8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d109      	bne.n	8003fec <HAL_TIM_PWM_Start+0x24>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	bf14      	ite	ne
 8003fe4:	2301      	movne	r3, #1
 8003fe6:	2300      	moveq	r3, #0
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	e03c      	b.n	8004066 <HAL_TIM_PWM_Start+0x9e>
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	2b04      	cmp	r3, #4
 8003ff0:	d109      	bne.n	8004006 <HAL_TIM_PWM_Start+0x3e>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	bf14      	ite	ne
 8003ffe:	2301      	movne	r3, #1
 8004000:	2300      	moveq	r3, #0
 8004002:	b2db      	uxtb	r3, r3
 8004004:	e02f      	b.n	8004066 <HAL_TIM_PWM_Start+0x9e>
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	2b08      	cmp	r3, #8
 800400a:	d109      	bne.n	8004020 <HAL_TIM_PWM_Start+0x58>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b01      	cmp	r3, #1
 8004016:	bf14      	ite	ne
 8004018:	2301      	movne	r3, #1
 800401a:	2300      	moveq	r3, #0
 800401c:	b2db      	uxtb	r3, r3
 800401e:	e022      	b.n	8004066 <HAL_TIM_PWM_Start+0x9e>
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	2b0c      	cmp	r3, #12
 8004024:	d109      	bne.n	800403a <HAL_TIM_PWM_Start+0x72>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b01      	cmp	r3, #1
 8004030:	bf14      	ite	ne
 8004032:	2301      	movne	r3, #1
 8004034:	2300      	moveq	r3, #0
 8004036:	b2db      	uxtb	r3, r3
 8004038:	e015      	b.n	8004066 <HAL_TIM_PWM_Start+0x9e>
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b10      	cmp	r3, #16
 800403e:	d109      	bne.n	8004054 <HAL_TIM_PWM_Start+0x8c>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b01      	cmp	r3, #1
 800404a:	bf14      	ite	ne
 800404c:	2301      	movne	r3, #1
 800404e:	2300      	moveq	r3, #0
 8004050:	b2db      	uxtb	r3, r3
 8004052:	e008      	b.n	8004066 <HAL_TIM_PWM_Start+0x9e>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b01      	cmp	r3, #1
 800405e:	bf14      	ite	ne
 8004060:	2301      	movne	r3, #1
 8004062:	2300      	moveq	r3, #0
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e097      	b.n	800419e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d104      	bne.n	800407e <HAL_TIM_PWM_Start+0xb6>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2202      	movs	r2, #2
 8004078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800407c:	e023      	b.n	80040c6 <HAL_TIM_PWM_Start+0xfe>
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2b04      	cmp	r3, #4
 8004082:	d104      	bne.n	800408e <HAL_TIM_PWM_Start+0xc6>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2202      	movs	r2, #2
 8004088:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800408c:	e01b      	b.n	80040c6 <HAL_TIM_PWM_Start+0xfe>
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	2b08      	cmp	r3, #8
 8004092:	d104      	bne.n	800409e <HAL_TIM_PWM_Start+0xd6>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2202      	movs	r2, #2
 8004098:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800409c:	e013      	b.n	80040c6 <HAL_TIM_PWM_Start+0xfe>
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	2b0c      	cmp	r3, #12
 80040a2:	d104      	bne.n	80040ae <HAL_TIM_PWM_Start+0xe6>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2202      	movs	r2, #2
 80040a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80040ac:	e00b      	b.n	80040c6 <HAL_TIM_PWM_Start+0xfe>
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	2b10      	cmp	r3, #16
 80040b2:	d104      	bne.n	80040be <HAL_TIM_PWM_Start+0xf6>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2202      	movs	r2, #2
 80040b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040bc:	e003      	b.n	80040c6 <HAL_TIM_PWM_Start+0xfe>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2202      	movs	r2, #2
 80040c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2201      	movs	r2, #1
 80040cc:	6839      	ldr	r1, [r7, #0]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 fd00 	bl	8004ad4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a33      	ldr	r2, [pc, #204]	@ (80041a8 <HAL_TIM_PWM_Start+0x1e0>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d013      	beq.n	8004106 <HAL_TIM_PWM_Start+0x13e>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a32      	ldr	r2, [pc, #200]	@ (80041ac <HAL_TIM_PWM_Start+0x1e4>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d00e      	beq.n	8004106 <HAL_TIM_PWM_Start+0x13e>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a30      	ldr	r2, [pc, #192]	@ (80041b0 <HAL_TIM_PWM_Start+0x1e8>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d009      	beq.n	8004106 <HAL_TIM_PWM_Start+0x13e>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a2f      	ldr	r2, [pc, #188]	@ (80041b4 <HAL_TIM_PWM_Start+0x1ec>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d004      	beq.n	8004106 <HAL_TIM_PWM_Start+0x13e>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a2d      	ldr	r2, [pc, #180]	@ (80041b8 <HAL_TIM_PWM_Start+0x1f0>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d101      	bne.n	800410a <HAL_TIM_PWM_Start+0x142>
 8004106:	2301      	movs	r3, #1
 8004108:	e000      	b.n	800410c <HAL_TIM_PWM_Start+0x144>
 800410a:	2300      	movs	r3, #0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d007      	beq.n	8004120 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800411e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a20      	ldr	r2, [pc, #128]	@ (80041a8 <HAL_TIM_PWM_Start+0x1e0>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d018      	beq.n	800415c <HAL_TIM_PWM_Start+0x194>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004132:	d013      	beq.n	800415c <HAL_TIM_PWM_Start+0x194>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a20      	ldr	r2, [pc, #128]	@ (80041bc <HAL_TIM_PWM_Start+0x1f4>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d00e      	beq.n	800415c <HAL_TIM_PWM_Start+0x194>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a1f      	ldr	r2, [pc, #124]	@ (80041c0 <HAL_TIM_PWM_Start+0x1f8>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d009      	beq.n	800415c <HAL_TIM_PWM_Start+0x194>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a17      	ldr	r2, [pc, #92]	@ (80041ac <HAL_TIM_PWM_Start+0x1e4>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d004      	beq.n	800415c <HAL_TIM_PWM_Start+0x194>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a16      	ldr	r2, [pc, #88]	@ (80041b0 <HAL_TIM_PWM_Start+0x1e8>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d115      	bne.n	8004188 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689a      	ldr	r2, [r3, #8]
 8004162:	4b18      	ldr	r3, [pc, #96]	@ (80041c4 <HAL_TIM_PWM_Start+0x1fc>)
 8004164:	4013      	ands	r3, r2
 8004166:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2b06      	cmp	r3, #6
 800416c:	d015      	beq.n	800419a <HAL_TIM_PWM_Start+0x1d2>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004174:	d011      	beq.n	800419a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f042 0201 	orr.w	r2, r2, #1
 8004184:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004186:	e008      	b.n	800419a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f042 0201 	orr.w	r2, r2, #1
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	e000      	b.n	800419c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800419a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	40012c00 	.word	0x40012c00
 80041ac:	40013400 	.word	0x40013400
 80041b0:	40014000 	.word	0x40014000
 80041b4:	40014400 	.word	0x40014400
 80041b8:	40014800 	.word	0x40014800
 80041bc:	40000400 	.word	0x40000400
 80041c0:	40000800 	.word	0x40000800
 80041c4:	00010007 	.word	0x00010007

080041c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041d4:	2300      	movs	r3, #0
 80041d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d101      	bne.n	80041e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80041e2:	2302      	movs	r3, #2
 80041e4:	e0ff      	b.n	80043e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b14      	cmp	r3, #20
 80041f2:	f200 80f0 	bhi.w	80043d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80041f6:	a201      	add	r2, pc, #4	@ (adr r2, 80041fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80041f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fc:	08004251 	.word	0x08004251
 8004200:	080043d7 	.word	0x080043d7
 8004204:	080043d7 	.word	0x080043d7
 8004208:	080043d7 	.word	0x080043d7
 800420c:	08004291 	.word	0x08004291
 8004210:	080043d7 	.word	0x080043d7
 8004214:	080043d7 	.word	0x080043d7
 8004218:	080043d7 	.word	0x080043d7
 800421c:	080042d3 	.word	0x080042d3
 8004220:	080043d7 	.word	0x080043d7
 8004224:	080043d7 	.word	0x080043d7
 8004228:	080043d7 	.word	0x080043d7
 800422c:	08004313 	.word	0x08004313
 8004230:	080043d7 	.word	0x080043d7
 8004234:	080043d7 	.word	0x080043d7
 8004238:	080043d7 	.word	0x080043d7
 800423c:	08004355 	.word	0x08004355
 8004240:	080043d7 	.word	0x080043d7
 8004244:	080043d7 	.word	0x080043d7
 8004248:	080043d7 	.word	0x080043d7
 800424c:	08004395 	.word	0x08004395
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68b9      	ldr	r1, [r7, #8]
 8004256:	4618      	mov	r0, r3
 8004258:	f000 f966 	bl	8004528 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	699a      	ldr	r2, [r3, #24]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 0208 	orr.w	r2, r2, #8
 800426a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	699a      	ldr	r2, [r3, #24]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 0204 	bic.w	r2, r2, #4
 800427a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6999      	ldr	r1, [r3, #24]
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	691a      	ldr	r2, [r3, #16]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	430a      	orrs	r2, r1
 800428c:	619a      	str	r2, [r3, #24]
      break;
 800428e:	e0a5      	b.n	80043dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68b9      	ldr	r1, [r7, #8]
 8004296:	4618      	mov	r0, r3
 8004298:	f000 f9d6 	bl	8004648 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	699a      	ldr	r2, [r3, #24]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	699a      	ldr	r2, [r3, #24]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6999      	ldr	r1, [r3, #24]
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	021a      	lsls	r2, r3, #8
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	430a      	orrs	r2, r1
 80042ce:	619a      	str	r2, [r3, #24]
      break;
 80042d0:	e084      	b.n	80043dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68b9      	ldr	r1, [r7, #8]
 80042d8:	4618      	mov	r0, r3
 80042da:	f000 fa3f 	bl	800475c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	69da      	ldr	r2, [r3, #28]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f042 0208 	orr.w	r2, r2, #8
 80042ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	69da      	ldr	r2, [r3, #28]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0204 	bic.w	r2, r2, #4
 80042fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	69d9      	ldr	r1, [r3, #28]
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	691a      	ldr	r2, [r3, #16]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	430a      	orrs	r2, r1
 800430e:	61da      	str	r2, [r3, #28]
      break;
 8004310:	e064      	b.n	80043dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68b9      	ldr	r1, [r7, #8]
 8004318:	4618      	mov	r0, r3
 800431a:	f000 faa7 	bl	800486c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	69da      	ldr	r2, [r3, #28]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800432c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	69da      	ldr	r2, [r3, #28]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800433c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	69d9      	ldr	r1, [r3, #28]
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	021a      	lsls	r2, r3, #8
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	61da      	str	r2, [r3, #28]
      break;
 8004352:	e043      	b.n	80043dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68b9      	ldr	r1, [r7, #8]
 800435a:	4618      	mov	r0, r3
 800435c:	f000 faf0 	bl	8004940 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0208 	orr.w	r2, r2, #8
 800436e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f022 0204 	bic.w	r2, r2, #4
 800437e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	691a      	ldr	r2, [r3, #16]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004392:	e023      	b.n	80043dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68b9      	ldr	r1, [r7, #8]
 800439a:	4618      	mov	r0, r3
 800439c:	f000 fb34 	bl	8004a08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043ae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043be:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	021a      	lsls	r2, r3, #8
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80043d4:	e002      	b.n	80043dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	75fb      	strb	r3, [r7, #23]
      break;
 80043da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80043e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3718      	adds	r7, #24
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop

080043f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a42      	ldr	r2, [pc, #264]	@ (800450c <TIM_Base_SetConfig+0x11c>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d00f      	beq.n	8004428 <TIM_Base_SetConfig+0x38>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800440e:	d00b      	beq.n	8004428 <TIM_Base_SetConfig+0x38>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a3f      	ldr	r2, [pc, #252]	@ (8004510 <TIM_Base_SetConfig+0x120>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d007      	beq.n	8004428 <TIM_Base_SetConfig+0x38>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a3e      	ldr	r2, [pc, #248]	@ (8004514 <TIM_Base_SetConfig+0x124>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d003      	beq.n	8004428 <TIM_Base_SetConfig+0x38>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a3d      	ldr	r2, [pc, #244]	@ (8004518 <TIM_Base_SetConfig+0x128>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d108      	bne.n	800443a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800442e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	4313      	orrs	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a33      	ldr	r2, [pc, #204]	@ (800450c <TIM_Base_SetConfig+0x11c>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d01b      	beq.n	800447a <TIM_Base_SetConfig+0x8a>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004448:	d017      	beq.n	800447a <TIM_Base_SetConfig+0x8a>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a30      	ldr	r2, [pc, #192]	@ (8004510 <TIM_Base_SetConfig+0x120>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d013      	beq.n	800447a <TIM_Base_SetConfig+0x8a>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a2f      	ldr	r2, [pc, #188]	@ (8004514 <TIM_Base_SetConfig+0x124>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d00f      	beq.n	800447a <TIM_Base_SetConfig+0x8a>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a2e      	ldr	r2, [pc, #184]	@ (8004518 <TIM_Base_SetConfig+0x128>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d00b      	beq.n	800447a <TIM_Base_SetConfig+0x8a>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a2d      	ldr	r2, [pc, #180]	@ (800451c <TIM_Base_SetConfig+0x12c>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d007      	beq.n	800447a <TIM_Base_SetConfig+0x8a>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a2c      	ldr	r2, [pc, #176]	@ (8004520 <TIM_Base_SetConfig+0x130>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d003      	beq.n	800447a <TIM_Base_SetConfig+0x8a>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a2b      	ldr	r2, [pc, #172]	@ (8004524 <TIM_Base_SetConfig+0x134>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d108      	bne.n	800448c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004480:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	4313      	orrs	r3, r2
 800448a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	4313      	orrs	r3, r2
 8004498:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	689a      	ldr	r2, [r3, #8]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a16      	ldr	r2, [pc, #88]	@ (800450c <TIM_Base_SetConfig+0x11c>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d00f      	beq.n	80044d8 <TIM_Base_SetConfig+0xe8>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a17      	ldr	r2, [pc, #92]	@ (8004518 <TIM_Base_SetConfig+0x128>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d00b      	beq.n	80044d8 <TIM_Base_SetConfig+0xe8>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a16      	ldr	r2, [pc, #88]	@ (800451c <TIM_Base_SetConfig+0x12c>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d007      	beq.n	80044d8 <TIM_Base_SetConfig+0xe8>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a15      	ldr	r2, [pc, #84]	@ (8004520 <TIM_Base_SetConfig+0x130>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d003      	beq.n	80044d8 <TIM_Base_SetConfig+0xe8>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a14      	ldr	r2, [pc, #80]	@ (8004524 <TIM_Base_SetConfig+0x134>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d103      	bne.n	80044e0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	691a      	ldr	r2, [r3, #16]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d105      	bne.n	80044fe <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	f023 0201 	bic.w	r2, r3, #1
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	611a      	str	r2, [r3, #16]
  }
}
 80044fe:	bf00      	nop
 8004500:	3714      	adds	r7, #20
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	40012c00 	.word	0x40012c00
 8004510:	40000400 	.word	0x40000400
 8004514:	40000800 	.word	0x40000800
 8004518:	40013400 	.word	0x40013400
 800451c:	40014000 	.word	0x40014000
 8004520:	40014400 	.word	0x40014400
 8004524:	40014800 	.word	0x40014800

08004528 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004528:	b480      	push	{r7}
 800452a:	b087      	sub	sp, #28
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	f023 0201 	bic.w	r2, r3, #1
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004556:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800455a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f023 0303 	bic.w	r3, r3, #3
 8004562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	4313      	orrs	r3, r2
 800456c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f023 0302 	bic.w	r3, r3, #2
 8004574:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	4313      	orrs	r3, r2
 800457e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a2c      	ldr	r2, [pc, #176]	@ (8004634 <TIM_OC1_SetConfig+0x10c>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d00f      	beq.n	80045a8 <TIM_OC1_SetConfig+0x80>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a2b      	ldr	r2, [pc, #172]	@ (8004638 <TIM_OC1_SetConfig+0x110>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d00b      	beq.n	80045a8 <TIM_OC1_SetConfig+0x80>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a2a      	ldr	r2, [pc, #168]	@ (800463c <TIM_OC1_SetConfig+0x114>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d007      	beq.n	80045a8 <TIM_OC1_SetConfig+0x80>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a29      	ldr	r2, [pc, #164]	@ (8004640 <TIM_OC1_SetConfig+0x118>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d003      	beq.n	80045a8 <TIM_OC1_SetConfig+0x80>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a28      	ldr	r2, [pc, #160]	@ (8004644 <TIM_OC1_SetConfig+0x11c>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d10c      	bne.n	80045c2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f023 0308 	bic.w	r3, r3, #8
 80045ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	f023 0304 	bic.w	r3, r3, #4
 80045c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a1b      	ldr	r2, [pc, #108]	@ (8004634 <TIM_OC1_SetConfig+0x10c>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d00f      	beq.n	80045ea <TIM_OC1_SetConfig+0xc2>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a1a      	ldr	r2, [pc, #104]	@ (8004638 <TIM_OC1_SetConfig+0x110>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d00b      	beq.n	80045ea <TIM_OC1_SetConfig+0xc2>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a19      	ldr	r2, [pc, #100]	@ (800463c <TIM_OC1_SetConfig+0x114>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d007      	beq.n	80045ea <TIM_OC1_SetConfig+0xc2>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a18      	ldr	r2, [pc, #96]	@ (8004640 <TIM_OC1_SetConfig+0x118>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d003      	beq.n	80045ea <TIM_OC1_SetConfig+0xc2>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a17      	ldr	r2, [pc, #92]	@ (8004644 <TIM_OC1_SetConfig+0x11c>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d111      	bne.n	800460e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80045f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	4313      	orrs	r3, r2
 8004602:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	4313      	orrs	r3, r2
 800460c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685a      	ldr	r2, [r3, #4]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	621a      	str	r2, [r3, #32]
}
 8004628:	bf00      	nop
 800462a:	371c      	adds	r7, #28
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr
 8004634:	40012c00 	.word	0x40012c00
 8004638:	40013400 	.word	0x40013400
 800463c:	40014000 	.word	0x40014000
 8004640:	40014400 	.word	0x40014400
 8004644:	40014800 	.word	0x40014800

08004648 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004648:	b480      	push	{r7}
 800464a:	b087      	sub	sp, #28
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	f023 0210 	bic.w	r2, r3, #16
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004676:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800467a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004682:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	021b      	lsls	r3, r3, #8
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	4313      	orrs	r3, r2
 800468e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	f023 0320 	bic.w	r3, r3, #32
 8004696:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	011b      	lsls	r3, r3, #4
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a28      	ldr	r2, [pc, #160]	@ (8004748 <TIM_OC2_SetConfig+0x100>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d003      	beq.n	80046b4 <TIM_OC2_SetConfig+0x6c>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a27      	ldr	r2, [pc, #156]	@ (800474c <TIM_OC2_SetConfig+0x104>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d10d      	bne.n	80046d0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	011b      	lsls	r3, r3, #4
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a1d      	ldr	r2, [pc, #116]	@ (8004748 <TIM_OC2_SetConfig+0x100>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d00f      	beq.n	80046f8 <TIM_OC2_SetConfig+0xb0>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a1c      	ldr	r2, [pc, #112]	@ (800474c <TIM_OC2_SetConfig+0x104>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d00b      	beq.n	80046f8 <TIM_OC2_SetConfig+0xb0>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a1b      	ldr	r2, [pc, #108]	@ (8004750 <TIM_OC2_SetConfig+0x108>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d007      	beq.n	80046f8 <TIM_OC2_SetConfig+0xb0>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a1a      	ldr	r2, [pc, #104]	@ (8004754 <TIM_OC2_SetConfig+0x10c>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d003      	beq.n	80046f8 <TIM_OC2_SetConfig+0xb0>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a19      	ldr	r2, [pc, #100]	@ (8004758 <TIM_OC2_SetConfig+0x110>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d113      	bne.n	8004720 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80046fe:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004706:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	695b      	ldr	r3, [r3, #20]
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	4313      	orrs	r3, r2
 8004712:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	4313      	orrs	r3, r2
 800471e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	621a      	str	r2, [r3, #32]
}
 800473a:	bf00      	nop
 800473c:	371c      	adds	r7, #28
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	40012c00 	.word	0x40012c00
 800474c:	40013400 	.word	0x40013400
 8004750:	40014000 	.word	0x40014000
 8004754:	40014400 	.word	0x40014400
 8004758:	40014800 	.word	0x40014800

0800475c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800475c:	b480      	push	{r7}
 800475e:	b087      	sub	sp, #28
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800478a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800478e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f023 0303 	bic.w	r3, r3, #3
 8004796:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	4313      	orrs	r3, r2
 80047a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80047a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	021b      	lsls	r3, r3, #8
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a27      	ldr	r2, [pc, #156]	@ (8004858 <TIM_OC3_SetConfig+0xfc>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d003      	beq.n	80047c6 <TIM_OC3_SetConfig+0x6a>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a26      	ldr	r2, [pc, #152]	@ (800485c <TIM_OC3_SetConfig+0x100>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d10d      	bne.n	80047e2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80047cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	021b      	lsls	r3, r3, #8
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80047e0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a1c      	ldr	r2, [pc, #112]	@ (8004858 <TIM_OC3_SetConfig+0xfc>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d00f      	beq.n	800480a <TIM_OC3_SetConfig+0xae>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a1b      	ldr	r2, [pc, #108]	@ (800485c <TIM_OC3_SetConfig+0x100>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d00b      	beq.n	800480a <TIM_OC3_SetConfig+0xae>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a1a      	ldr	r2, [pc, #104]	@ (8004860 <TIM_OC3_SetConfig+0x104>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d007      	beq.n	800480a <TIM_OC3_SetConfig+0xae>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a19      	ldr	r2, [pc, #100]	@ (8004864 <TIM_OC3_SetConfig+0x108>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d003      	beq.n	800480a <TIM_OC3_SetConfig+0xae>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a18      	ldr	r2, [pc, #96]	@ (8004868 <TIM_OC3_SetConfig+0x10c>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d113      	bne.n	8004832 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004810:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004818:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	011b      	lsls	r3, r3, #4
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	4313      	orrs	r3, r2
 8004824:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	011b      	lsls	r3, r3, #4
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	4313      	orrs	r3, r2
 8004830:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	621a      	str	r2, [r3, #32]
}
 800484c:	bf00      	nop
 800484e:	371c      	adds	r7, #28
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr
 8004858:	40012c00 	.word	0x40012c00
 800485c:	40013400 	.word	0x40013400
 8004860:	40014000 	.word	0x40014000
 8004864:	40014400 	.word	0x40014400
 8004868:	40014800 	.word	0x40014800

0800486c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800486c:	b480      	push	{r7}
 800486e:	b087      	sub	sp, #28
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800489a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800489e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	021b      	lsls	r3, r3, #8
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80048ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	031b      	lsls	r3, r3, #12
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a18      	ldr	r2, [pc, #96]	@ (800492c <TIM_OC4_SetConfig+0xc0>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d00f      	beq.n	80048f0 <TIM_OC4_SetConfig+0x84>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a17      	ldr	r2, [pc, #92]	@ (8004930 <TIM_OC4_SetConfig+0xc4>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d00b      	beq.n	80048f0 <TIM_OC4_SetConfig+0x84>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a16      	ldr	r2, [pc, #88]	@ (8004934 <TIM_OC4_SetConfig+0xc8>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d007      	beq.n	80048f0 <TIM_OC4_SetConfig+0x84>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a15      	ldr	r2, [pc, #84]	@ (8004938 <TIM_OC4_SetConfig+0xcc>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d003      	beq.n	80048f0 <TIM_OC4_SetConfig+0x84>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a14      	ldr	r2, [pc, #80]	@ (800493c <TIM_OC4_SetConfig+0xd0>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d109      	bne.n	8004904 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	019b      	lsls	r3, r3, #6
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	4313      	orrs	r3, r2
 8004902:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	621a      	str	r2, [r3, #32]
}
 800491e:	bf00      	nop
 8004920:	371c      	adds	r7, #28
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	40012c00 	.word	0x40012c00
 8004930:	40013400 	.word	0x40013400
 8004934:	40014000 	.word	0x40014000
 8004938:	40014400 	.word	0x40014400
 800493c:	40014800 	.word	0x40014800

08004940 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004940:	b480      	push	{r7}
 8004942:	b087      	sub	sp, #28
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a1b      	ldr	r3, [r3, #32]
 8004954:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800496e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	4313      	orrs	r3, r2
 800497c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004984:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	041b      	lsls	r3, r3, #16
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	4313      	orrs	r3, r2
 8004990:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a17      	ldr	r2, [pc, #92]	@ (80049f4 <TIM_OC5_SetConfig+0xb4>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d00f      	beq.n	80049ba <TIM_OC5_SetConfig+0x7a>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a16      	ldr	r2, [pc, #88]	@ (80049f8 <TIM_OC5_SetConfig+0xb8>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d00b      	beq.n	80049ba <TIM_OC5_SetConfig+0x7a>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a15      	ldr	r2, [pc, #84]	@ (80049fc <TIM_OC5_SetConfig+0xbc>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d007      	beq.n	80049ba <TIM_OC5_SetConfig+0x7a>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a14      	ldr	r2, [pc, #80]	@ (8004a00 <TIM_OC5_SetConfig+0xc0>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d003      	beq.n	80049ba <TIM_OC5_SetConfig+0x7a>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a13      	ldr	r2, [pc, #76]	@ (8004a04 <TIM_OC5_SetConfig+0xc4>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d109      	bne.n	80049ce <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	021b      	lsls	r3, r3, #8
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	621a      	str	r2, [r3, #32]
}
 80049e8:	bf00      	nop
 80049ea:	371c      	adds	r7, #28
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr
 80049f4:	40012c00 	.word	0x40012c00
 80049f8:	40013400 	.word	0x40013400
 80049fc:	40014000 	.word	0x40014000
 8004a00:	40014400 	.word	0x40014400
 8004a04:	40014800 	.word	0x40014800

08004a08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b087      	sub	sp, #28
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	021b      	lsls	r3, r3, #8
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004a4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	051b      	lsls	r3, r3, #20
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a18      	ldr	r2, [pc, #96]	@ (8004ac0 <TIM_OC6_SetConfig+0xb8>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d00f      	beq.n	8004a84 <TIM_OC6_SetConfig+0x7c>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a17      	ldr	r2, [pc, #92]	@ (8004ac4 <TIM_OC6_SetConfig+0xbc>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d00b      	beq.n	8004a84 <TIM_OC6_SetConfig+0x7c>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a16      	ldr	r2, [pc, #88]	@ (8004ac8 <TIM_OC6_SetConfig+0xc0>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d007      	beq.n	8004a84 <TIM_OC6_SetConfig+0x7c>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a15      	ldr	r2, [pc, #84]	@ (8004acc <TIM_OC6_SetConfig+0xc4>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d003      	beq.n	8004a84 <TIM_OC6_SetConfig+0x7c>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a14      	ldr	r2, [pc, #80]	@ (8004ad0 <TIM_OC6_SetConfig+0xc8>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d109      	bne.n	8004a98 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	029b      	lsls	r3, r3, #10
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	621a      	str	r2, [r3, #32]
}
 8004ab2:	bf00      	nop
 8004ab4:	371c      	adds	r7, #28
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	40012c00 	.word	0x40012c00
 8004ac4:	40013400 	.word	0x40013400
 8004ac8:	40014000 	.word	0x40014000
 8004acc:	40014400 	.word	0x40014400
 8004ad0:	40014800 	.word	0x40014800

08004ad4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b087      	sub	sp, #28
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f003 031f 	and.w	r3, r3, #31
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6a1a      	ldr	r2, [r3, #32]
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	43db      	mvns	r3, r3
 8004af6:	401a      	ands	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6a1a      	ldr	r2, [r3, #32]
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	f003 031f 	and.w	r3, r3, #31
 8004b06:	6879      	ldr	r1, [r7, #4]
 8004b08:	fa01 f303 	lsl.w	r3, r1, r3
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	621a      	str	r2, [r3, #32]
}
 8004b12:	bf00      	nop
 8004b14:	371c      	adds	r7, #28
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
	...

08004b20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d101      	bne.n	8004b38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b34:	2302      	movs	r3, #2
 8004b36:	e063      	b.n	8004c00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2202      	movs	r2, #2
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a2b      	ldr	r2, [pc, #172]	@ (8004c0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d004      	beq.n	8004b6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a2a      	ldr	r2, [pc, #168]	@ (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d108      	bne.n	8004b7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004b72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a1b      	ldr	r2, [pc, #108]	@ (8004c0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d018      	beq.n	8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004baa:	d013      	beq.n	8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a18      	ldr	r2, [pc, #96]	@ (8004c14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d00e      	beq.n	8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a17      	ldr	r2, [pc, #92]	@ (8004c18 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d009      	beq.n	8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a12      	ldr	r2, [pc, #72]	@ (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d004      	beq.n	8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a13      	ldr	r2, [pc, #76]	@ (8004c1c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d10c      	bne.n	8004bee <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bda:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3714      	adds	r7, #20
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr
 8004c0c:	40012c00 	.word	0x40012c00
 8004c10:	40013400 	.word	0x40013400
 8004c14:	40000400 	.word	0x40000400
 8004c18:	40000800 	.word	0x40000800
 8004c1c:	40014000 	.word	0x40014000

08004c20 <atoi>:
 8004c20:	220a      	movs	r2, #10
 8004c22:	2100      	movs	r1, #0
 8004c24:	f000 b930 	b.w	8004e88 <strtol>

08004c28 <malloc>:
 8004c28:	4b02      	ldr	r3, [pc, #8]	@ (8004c34 <malloc+0xc>)
 8004c2a:	4601      	mov	r1, r0
 8004c2c:	6818      	ldr	r0, [r3, #0]
 8004c2e:	f000 b825 	b.w	8004c7c <_malloc_r>
 8004c32:	bf00      	nop
 8004c34:	20000128 	.word	0x20000128

08004c38 <sbrk_aligned>:
 8004c38:	b570      	push	{r4, r5, r6, lr}
 8004c3a:	4e0f      	ldr	r6, [pc, #60]	@ (8004c78 <sbrk_aligned+0x40>)
 8004c3c:	460c      	mov	r4, r1
 8004c3e:	6831      	ldr	r1, [r6, #0]
 8004c40:	4605      	mov	r5, r0
 8004c42:	b911      	cbnz	r1, 8004c4a <sbrk_aligned+0x12>
 8004c44:	f000 f9a2 	bl	8004f8c <_sbrk_r>
 8004c48:	6030      	str	r0, [r6, #0]
 8004c4a:	4621      	mov	r1, r4
 8004c4c:	4628      	mov	r0, r5
 8004c4e:	f000 f99d 	bl	8004f8c <_sbrk_r>
 8004c52:	1c43      	adds	r3, r0, #1
 8004c54:	d103      	bne.n	8004c5e <sbrk_aligned+0x26>
 8004c56:	f04f 34ff 	mov.w	r4, #4294967295
 8004c5a:	4620      	mov	r0, r4
 8004c5c:	bd70      	pop	{r4, r5, r6, pc}
 8004c5e:	1cc4      	adds	r4, r0, #3
 8004c60:	f024 0403 	bic.w	r4, r4, #3
 8004c64:	42a0      	cmp	r0, r4
 8004c66:	d0f8      	beq.n	8004c5a <sbrk_aligned+0x22>
 8004c68:	1a21      	subs	r1, r4, r0
 8004c6a:	4628      	mov	r0, r5
 8004c6c:	f000 f98e 	bl	8004f8c <_sbrk_r>
 8004c70:	3001      	adds	r0, #1
 8004c72:	d1f2      	bne.n	8004c5a <sbrk_aligned+0x22>
 8004c74:	e7ef      	b.n	8004c56 <sbrk_aligned+0x1e>
 8004c76:	bf00      	nop
 8004c78:	20000354 	.word	0x20000354

08004c7c <_malloc_r>:
 8004c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c80:	1ccd      	adds	r5, r1, #3
 8004c82:	f025 0503 	bic.w	r5, r5, #3
 8004c86:	3508      	adds	r5, #8
 8004c88:	2d0c      	cmp	r5, #12
 8004c8a:	bf38      	it	cc
 8004c8c:	250c      	movcc	r5, #12
 8004c8e:	2d00      	cmp	r5, #0
 8004c90:	4606      	mov	r6, r0
 8004c92:	db01      	blt.n	8004c98 <_malloc_r+0x1c>
 8004c94:	42a9      	cmp	r1, r5
 8004c96:	d904      	bls.n	8004ca2 <_malloc_r+0x26>
 8004c98:	230c      	movs	r3, #12
 8004c9a:	6033      	str	r3, [r6, #0]
 8004c9c:	2000      	movs	r0, #0
 8004c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ca2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004d78 <_malloc_r+0xfc>
 8004ca6:	f000 f869 	bl	8004d7c <__malloc_lock>
 8004caa:	f8d8 3000 	ldr.w	r3, [r8]
 8004cae:	461c      	mov	r4, r3
 8004cb0:	bb44      	cbnz	r4, 8004d04 <_malloc_r+0x88>
 8004cb2:	4629      	mov	r1, r5
 8004cb4:	4630      	mov	r0, r6
 8004cb6:	f7ff ffbf 	bl	8004c38 <sbrk_aligned>
 8004cba:	1c43      	adds	r3, r0, #1
 8004cbc:	4604      	mov	r4, r0
 8004cbe:	d158      	bne.n	8004d72 <_malloc_r+0xf6>
 8004cc0:	f8d8 4000 	ldr.w	r4, [r8]
 8004cc4:	4627      	mov	r7, r4
 8004cc6:	2f00      	cmp	r7, #0
 8004cc8:	d143      	bne.n	8004d52 <_malloc_r+0xd6>
 8004cca:	2c00      	cmp	r4, #0
 8004ccc:	d04b      	beq.n	8004d66 <_malloc_r+0xea>
 8004cce:	6823      	ldr	r3, [r4, #0]
 8004cd0:	4639      	mov	r1, r7
 8004cd2:	4630      	mov	r0, r6
 8004cd4:	eb04 0903 	add.w	r9, r4, r3
 8004cd8:	f000 f958 	bl	8004f8c <_sbrk_r>
 8004cdc:	4581      	cmp	r9, r0
 8004cde:	d142      	bne.n	8004d66 <_malloc_r+0xea>
 8004ce0:	6821      	ldr	r1, [r4, #0]
 8004ce2:	1a6d      	subs	r5, r5, r1
 8004ce4:	4629      	mov	r1, r5
 8004ce6:	4630      	mov	r0, r6
 8004ce8:	f7ff ffa6 	bl	8004c38 <sbrk_aligned>
 8004cec:	3001      	adds	r0, #1
 8004cee:	d03a      	beq.n	8004d66 <_malloc_r+0xea>
 8004cf0:	6823      	ldr	r3, [r4, #0]
 8004cf2:	442b      	add	r3, r5
 8004cf4:	6023      	str	r3, [r4, #0]
 8004cf6:	f8d8 3000 	ldr.w	r3, [r8]
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	bb62      	cbnz	r2, 8004d58 <_malloc_r+0xdc>
 8004cfe:	f8c8 7000 	str.w	r7, [r8]
 8004d02:	e00f      	b.n	8004d24 <_malloc_r+0xa8>
 8004d04:	6822      	ldr	r2, [r4, #0]
 8004d06:	1b52      	subs	r2, r2, r5
 8004d08:	d420      	bmi.n	8004d4c <_malloc_r+0xd0>
 8004d0a:	2a0b      	cmp	r2, #11
 8004d0c:	d917      	bls.n	8004d3e <_malloc_r+0xc2>
 8004d0e:	1961      	adds	r1, r4, r5
 8004d10:	42a3      	cmp	r3, r4
 8004d12:	6025      	str	r5, [r4, #0]
 8004d14:	bf18      	it	ne
 8004d16:	6059      	strne	r1, [r3, #4]
 8004d18:	6863      	ldr	r3, [r4, #4]
 8004d1a:	bf08      	it	eq
 8004d1c:	f8c8 1000 	streq.w	r1, [r8]
 8004d20:	5162      	str	r2, [r4, r5]
 8004d22:	604b      	str	r3, [r1, #4]
 8004d24:	4630      	mov	r0, r6
 8004d26:	f000 f82f 	bl	8004d88 <__malloc_unlock>
 8004d2a:	f104 000b 	add.w	r0, r4, #11
 8004d2e:	1d23      	adds	r3, r4, #4
 8004d30:	f020 0007 	bic.w	r0, r0, #7
 8004d34:	1ac2      	subs	r2, r0, r3
 8004d36:	bf1c      	itt	ne
 8004d38:	1a1b      	subne	r3, r3, r0
 8004d3a:	50a3      	strne	r3, [r4, r2]
 8004d3c:	e7af      	b.n	8004c9e <_malloc_r+0x22>
 8004d3e:	6862      	ldr	r2, [r4, #4]
 8004d40:	42a3      	cmp	r3, r4
 8004d42:	bf0c      	ite	eq
 8004d44:	f8c8 2000 	streq.w	r2, [r8]
 8004d48:	605a      	strne	r2, [r3, #4]
 8004d4a:	e7eb      	b.n	8004d24 <_malloc_r+0xa8>
 8004d4c:	4623      	mov	r3, r4
 8004d4e:	6864      	ldr	r4, [r4, #4]
 8004d50:	e7ae      	b.n	8004cb0 <_malloc_r+0x34>
 8004d52:	463c      	mov	r4, r7
 8004d54:	687f      	ldr	r7, [r7, #4]
 8004d56:	e7b6      	b.n	8004cc6 <_malloc_r+0x4a>
 8004d58:	461a      	mov	r2, r3
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	42a3      	cmp	r3, r4
 8004d5e:	d1fb      	bne.n	8004d58 <_malloc_r+0xdc>
 8004d60:	2300      	movs	r3, #0
 8004d62:	6053      	str	r3, [r2, #4]
 8004d64:	e7de      	b.n	8004d24 <_malloc_r+0xa8>
 8004d66:	230c      	movs	r3, #12
 8004d68:	6033      	str	r3, [r6, #0]
 8004d6a:	4630      	mov	r0, r6
 8004d6c:	f000 f80c 	bl	8004d88 <__malloc_unlock>
 8004d70:	e794      	b.n	8004c9c <_malloc_r+0x20>
 8004d72:	6005      	str	r5, [r0, #0]
 8004d74:	e7d6      	b.n	8004d24 <_malloc_r+0xa8>
 8004d76:	bf00      	nop
 8004d78:	20000358 	.word	0x20000358

08004d7c <__malloc_lock>:
 8004d7c:	4801      	ldr	r0, [pc, #4]	@ (8004d84 <__malloc_lock+0x8>)
 8004d7e:	f000 b93f 	b.w	8005000 <__retarget_lock_acquire_recursive>
 8004d82:	bf00      	nop
 8004d84:	20000498 	.word	0x20000498

08004d88 <__malloc_unlock>:
 8004d88:	4801      	ldr	r0, [pc, #4]	@ (8004d90 <__malloc_unlock+0x8>)
 8004d8a:	f000 b93a 	b.w	8005002 <__retarget_lock_release_recursive>
 8004d8e:	bf00      	nop
 8004d90:	20000498 	.word	0x20000498

08004d94 <_strtol_l.constprop.0>:
 8004d94:	2b24      	cmp	r3, #36	@ 0x24
 8004d96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d9a:	4686      	mov	lr, r0
 8004d9c:	4690      	mov	r8, r2
 8004d9e:	d801      	bhi.n	8004da4 <_strtol_l.constprop.0+0x10>
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d106      	bne.n	8004db2 <_strtol_l.constprop.0+0x1e>
 8004da4:	f000 f902 	bl	8004fac <__errno>
 8004da8:	2316      	movs	r3, #22
 8004daa:	6003      	str	r3, [r0, #0]
 8004dac:	2000      	movs	r0, #0
 8004dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004db2:	4834      	ldr	r0, [pc, #208]	@ (8004e84 <_strtol_l.constprop.0+0xf0>)
 8004db4:	460d      	mov	r5, r1
 8004db6:	462a      	mov	r2, r5
 8004db8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004dbc:	5d06      	ldrb	r6, [r0, r4]
 8004dbe:	f016 0608 	ands.w	r6, r6, #8
 8004dc2:	d1f8      	bne.n	8004db6 <_strtol_l.constprop.0+0x22>
 8004dc4:	2c2d      	cmp	r4, #45	@ 0x2d
 8004dc6:	d12d      	bne.n	8004e24 <_strtol_l.constprop.0+0x90>
 8004dc8:	782c      	ldrb	r4, [r5, #0]
 8004dca:	2601      	movs	r6, #1
 8004dcc:	1c95      	adds	r5, r2, #2
 8004dce:	f033 0210 	bics.w	r2, r3, #16
 8004dd2:	d109      	bne.n	8004de8 <_strtol_l.constprop.0+0x54>
 8004dd4:	2c30      	cmp	r4, #48	@ 0x30
 8004dd6:	d12a      	bne.n	8004e2e <_strtol_l.constprop.0+0x9a>
 8004dd8:	782a      	ldrb	r2, [r5, #0]
 8004dda:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004dde:	2a58      	cmp	r2, #88	@ 0x58
 8004de0:	d125      	bne.n	8004e2e <_strtol_l.constprop.0+0x9a>
 8004de2:	786c      	ldrb	r4, [r5, #1]
 8004de4:	2310      	movs	r3, #16
 8004de6:	3502      	adds	r5, #2
 8004de8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004dec:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004df0:	2200      	movs	r2, #0
 8004df2:	fbbc f9f3 	udiv	r9, ip, r3
 8004df6:	4610      	mov	r0, r2
 8004df8:	fb03 ca19 	mls	sl, r3, r9, ip
 8004dfc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004e00:	2f09      	cmp	r7, #9
 8004e02:	d81b      	bhi.n	8004e3c <_strtol_l.constprop.0+0xa8>
 8004e04:	463c      	mov	r4, r7
 8004e06:	42a3      	cmp	r3, r4
 8004e08:	dd27      	ble.n	8004e5a <_strtol_l.constprop.0+0xc6>
 8004e0a:	1c57      	adds	r7, r2, #1
 8004e0c:	d007      	beq.n	8004e1e <_strtol_l.constprop.0+0x8a>
 8004e0e:	4581      	cmp	r9, r0
 8004e10:	d320      	bcc.n	8004e54 <_strtol_l.constprop.0+0xc0>
 8004e12:	d101      	bne.n	8004e18 <_strtol_l.constprop.0+0x84>
 8004e14:	45a2      	cmp	sl, r4
 8004e16:	db1d      	blt.n	8004e54 <_strtol_l.constprop.0+0xc0>
 8004e18:	fb00 4003 	mla	r0, r0, r3, r4
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004e22:	e7eb      	b.n	8004dfc <_strtol_l.constprop.0+0x68>
 8004e24:	2c2b      	cmp	r4, #43	@ 0x2b
 8004e26:	bf04      	itt	eq
 8004e28:	782c      	ldrbeq	r4, [r5, #0]
 8004e2a:	1c95      	addeq	r5, r2, #2
 8004e2c:	e7cf      	b.n	8004dce <_strtol_l.constprop.0+0x3a>
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1da      	bne.n	8004de8 <_strtol_l.constprop.0+0x54>
 8004e32:	2c30      	cmp	r4, #48	@ 0x30
 8004e34:	bf0c      	ite	eq
 8004e36:	2308      	moveq	r3, #8
 8004e38:	230a      	movne	r3, #10
 8004e3a:	e7d5      	b.n	8004de8 <_strtol_l.constprop.0+0x54>
 8004e3c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004e40:	2f19      	cmp	r7, #25
 8004e42:	d801      	bhi.n	8004e48 <_strtol_l.constprop.0+0xb4>
 8004e44:	3c37      	subs	r4, #55	@ 0x37
 8004e46:	e7de      	b.n	8004e06 <_strtol_l.constprop.0+0x72>
 8004e48:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004e4c:	2f19      	cmp	r7, #25
 8004e4e:	d804      	bhi.n	8004e5a <_strtol_l.constprop.0+0xc6>
 8004e50:	3c57      	subs	r4, #87	@ 0x57
 8004e52:	e7d8      	b.n	8004e06 <_strtol_l.constprop.0+0x72>
 8004e54:	f04f 32ff 	mov.w	r2, #4294967295
 8004e58:	e7e1      	b.n	8004e1e <_strtol_l.constprop.0+0x8a>
 8004e5a:	1c53      	adds	r3, r2, #1
 8004e5c:	d108      	bne.n	8004e70 <_strtol_l.constprop.0+0xdc>
 8004e5e:	2322      	movs	r3, #34	@ 0x22
 8004e60:	f8ce 3000 	str.w	r3, [lr]
 8004e64:	4660      	mov	r0, ip
 8004e66:	f1b8 0f00 	cmp.w	r8, #0
 8004e6a:	d0a0      	beq.n	8004dae <_strtol_l.constprop.0+0x1a>
 8004e6c:	1e69      	subs	r1, r5, #1
 8004e6e:	e006      	b.n	8004e7e <_strtol_l.constprop.0+0xea>
 8004e70:	b106      	cbz	r6, 8004e74 <_strtol_l.constprop.0+0xe0>
 8004e72:	4240      	negs	r0, r0
 8004e74:	f1b8 0f00 	cmp.w	r8, #0
 8004e78:	d099      	beq.n	8004dae <_strtol_l.constprop.0+0x1a>
 8004e7a:	2a00      	cmp	r2, #0
 8004e7c:	d1f6      	bne.n	8004e6c <_strtol_l.constprop.0+0xd8>
 8004e7e:	f8c8 1000 	str.w	r1, [r8]
 8004e82:	e794      	b.n	8004dae <_strtol_l.constprop.0+0x1a>
 8004e84:	08005e85 	.word	0x08005e85

08004e88 <strtol>:
 8004e88:	4613      	mov	r3, r2
 8004e8a:	460a      	mov	r2, r1
 8004e8c:	4601      	mov	r1, r0
 8004e8e:	4802      	ldr	r0, [pc, #8]	@ (8004e98 <strtol+0x10>)
 8004e90:	6800      	ldr	r0, [r0, #0]
 8004e92:	f7ff bf7f 	b.w	8004d94 <_strtol_l.constprop.0>
 8004e96:	bf00      	nop
 8004e98:	20000128 	.word	0x20000128

08004e9c <siprintf>:
 8004e9c:	b40e      	push	{r1, r2, r3}
 8004e9e:	b500      	push	{lr}
 8004ea0:	b09c      	sub	sp, #112	@ 0x70
 8004ea2:	ab1d      	add	r3, sp, #116	@ 0x74
 8004ea4:	9002      	str	r0, [sp, #8]
 8004ea6:	9006      	str	r0, [sp, #24]
 8004ea8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004eac:	4809      	ldr	r0, [pc, #36]	@ (8004ed4 <siprintf+0x38>)
 8004eae:	9107      	str	r1, [sp, #28]
 8004eb0:	9104      	str	r1, [sp, #16]
 8004eb2:	4909      	ldr	r1, [pc, #36]	@ (8004ed8 <siprintf+0x3c>)
 8004eb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004eb8:	9105      	str	r1, [sp, #20]
 8004eba:	6800      	ldr	r0, [r0, #0]
 8004ebc:	9301      	str	r3, [sp, #4]
 8004ebe:	a902      	add	r1, sp, #8
 8004ec0:	f000 f946 	bl	8005150 <_svfiprintf_r>
 8004ec4:	9b02      	ldr	r3, [sp, #8]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	701a      	strb	r2, [r3, #0]
 8004eca:	b01c      	add	sp, #112	@ 0x70
 8004ecc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ed0:	b003      	add	sp, #12
 8004ed2:	4770      	bx	lr
 8004ed4:	20000128 	.word	0x20000128
 8004ed8:	ffff0208 	.word	0xffff0208

08004edc <memset>:
 8004edc:	4402      	add	r2, r0
 8004ede:	4603      	mov	r3, r0
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d100      	bne.n	8004ee6 <memset+0xa>
 8004ee4:	4770      	bx	lr
 8004ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8004eea:	e7f9      	b.n	8004ee0 <memset+0x4>

08004eec <strncmp>:
 8004eec:	b510      	push	{r4, lr}
 8004eee:	b16a      	cbz	r2, 8004f0c <strncmp+0x20>
 8004ef0:	3901      	subs	r1, #1
 8004ef2:	1884      	adds	r4, r0, r2
 8004ef4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ef8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d103      	bne.n	8004f08 <strncmp+0x1c>
 8004f00:	42a0      	cmp	r0, r4
 8004f02:	d001      	beq.n	8004f08 <strncmp+0x1c>
 8004f04:	2a00      	cmp	r2, #0
 8004f06:	d1f5      	bne.n	8004ef4 <strncmp+0x8>
 8004f08:	1ad0      	subs	r0, r2, r3
 8004f0a:	bd10      	pop	{r4, pc}
 8004f0c:	4610      	mov	r0, r2
 8004f0e:	e7fc      	b.n	8004f0a <strncmp+0x1e>

08004f10 <strncpy>:
 8004f10:	b510      	push	{r4, lr}
 8004f12:	3901      	subs	r1, #1
 8004f14:	4603      	mov	r3, r0
 8004f16:	b132      	cbz	r2, 8004f26 <strncpy+0x16>
 8004f18:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004f1c:	f803 4b01 	strb.w	r4, [r3], #1
 8004f20:	3a01      	subs	r2, #1
 8004f22:	2c00      	cmp	r4, #0
 8004f24:	d1f7      	bne.n	8004f16 <strncpy+0x6>
 8004f26:	441a      	add	r2, r3
 8004f28:	2100      	movs	r1, #0
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d100      	bne.n	8004f30 <strncpy+0x20>
 8004f2e:	bd10      	pop	{r4, pc}
 8004f30:	f803 1b01 	strb.w	r1, [r3], #1
 8004f34:	e7f9      	b.n	8004f2a <strncpy+0x1a>

08004f36 <__strtok_r>:
 8004f36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f38:	4604      	mov	r4, r0
 8004f3a:	b908      	cbnz	r0, 8004f40 <__strtok_r+0xa>
 8004f3c:	6814      	ldr	r4, [r2, #0]
 8004f3e:	b144      	cbz	r4, 8004f52 <__strtok_r+0x1c>
 8004f40:	4620      	mov	r0, r4
 8004f42:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004f46:	460f      	mov	r7, r1
 8004f48:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004f4c:	b91e      	cbnz	r6, 8004f56 <__strtok_r+0x20>
 8004f4e:	b965      	cbnz	r5, 8004f6a <__strtok_r+0x34>
 8004f50:	6015      	str	r5, [r2, #0]
 8004f52:	2000      	movs	r0, #0
 8004f54:	e005      	b.n	8004f62 <__strtok_r+0x2c>
 8004f56:	42b5      	cmp	r5, r6
 8004f58:	d1f6      	bne.n	8004f48 <__strtok_r+0x12>
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1f0      	bne.n	8004f40 <__strtok_r+0xa>
 8004f5e:	6014      	str	r4, [r2, #0]
 8004f60:	7003      	strb	r3, [r0, #0]
 8004f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f64:	461c      	mov	r4, r3
 8004f66:	e00c      	b.n	8004f82 <__strtok_r+0x4c>
 8004f68:	b915      	cbnz	r5, 8004f70 <__strtok_r+0x3a>
 8004f6a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004f6e:	460e      	mov	r6, r1
 8004f70:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004f74:	42ab      	cmp	r3, r5
 8004f76:	d1f7      	bne.n	8004f68 <__strtok_r+0x32>
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d0f3      	beq.n	8004f64 <__strtok_r+0x2e>
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004f82:	6014      	str	r4, [r2, #0]
 8004f84:	e7ed      	b.n	8004f62 <__strtok_r+0x2c>

08004f86 <strtok_r>:
 8004f86:	2301      	movs	r3, #1
 8004f88:	f7ff bfd5 	b.w	8004f36 <__strtok_r>

08004f8c <_sbrk_r>:
 8004f8c:	b538      	push	{r3, r4, r5, lr}
 8004f8e:	4d06      	ldr	r5, [pc, #24]	@ (8004fa8 <_sbrk_r+0x1c>)
 8004f90:	2300      	movs	r3, #0
 8004f92:	4604      	mov	r4, r0
 8004f94:	4608      	mov	r0, r1
 8004f96:	602b      	str	r3, [r5, #0]
 8004f98:	f7fd f850 	bl	800203c <_sbrk>
 8004f9c:	1c43      	adds	r3, r0, #1
 8004f9e:	d102      	bne.n	8004fa6 <_sbrk_r+0x1a>
 8004fa0:	682b      	ldr	r3, [r5, #0]
 8004fa2:	b103      	cbz	r3, 8004fa6 <_sbrk_r+0x1a>
 8004fa4:	6023      	str	r3, [r4, #0]
 8004fa6:	bd38      	pop	{r3, r4, r5, pc}
 8004fa8:	20000494 	.word	0x20000494

08004fac <__errno>:
 8004fac:	4b01      	ldr	r3, [pc, #4]	@ (8004fb4 <__errno+0x8>)
 8004fae:	6818      	ldr	r0, [r3, #0]
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	20000128 	.word	0x20000128

08004fb8 <__libc_init_array>:
 8004fb8:	b570      	push	{r4, r5, r6, lr}
 8004fba:	4d0d      	ldr	r5, [pc, #52]	@ (8004ff0 <__libc_init_array+0x38>)
 8004fbc:	4c0d      	ldr	r4, [pc, #52]	@ (8004ff4 <__libc_init_array+0x3c>)
 8004fbe:	1b64      	subs	r4, r4, r5
 8004fc0:	10a4      	asrs	r4, r4, #2
 8004fc2:	2600      	movs	r6, #0
 8004fc4:	42a6      	cmp	r6, r4
 8004fc6:	d109      	bne.n	8004fdc <__libc_init_array+0x24>
 8004fc8:	4d0b      	ldr	r5, [pc, #44]	@ (8004ff8 <__libc_init_array+0x40>)
 8004fca:	4c0c      	ldr	r4, [pc, #48]	@ (8004ffc <__libc_init_array+0x44>)
 8004fcc:	f000 fba8 	bl	8005720 <_init>
 8004fd0:	1b64      	subs	r4, r4, r5
 8004fd2:	10a4      	asrs	r4, r4, #2
 8004fd4:	2600      	movs	r6, #0
 8004fd6:	42a6      	cmp	r6, r4
 8004fd8:	d105      	bne.n	8004fe6 <__libc_init_array+0x2e>
 8004fda:	bd70      	pop	{r4, r5, r6, pc}
 8004fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fe0:	4798      	blx	r3
 8004fe2:	3601      	adds	r6, #1
 8004fe4:	e7ee      	b.n	8004fc4 <__libc_init_array+0xc>
 8004fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fea:	4798      	blx	r3
 8004fec:	3601      	adds	r6, #1
 8004fee:	e7f2      	b.n	8004fd6 <__libc_init_array+0x1e>
 8004ff0:	08005fc0 	.word	0x08005fc0
 8004ff4:	08005fc0 	.word	0x08005fc0
 8004ff8:	08005fc0 	.word	0x08005fc0
 8004ffc:	08005fc4 	.word	0x08005fc4

08005000 <__retarget_lock_acquire_recursive>:
 8005000:	4770      	bx	lr

08005002 <__retarget_lock_release_recursive>:
 8005002:	4770      	bx	lr

08005004 <_free_r>:
 8005004:	b538      	push	{r3, r4, r5, lr}
 8005006:	4605      	mov	r5, r0
 8005008:	2900      	cmp	r1, #0
 800500a:	d041      	beq.n	8005090 <_free_r+0x8c>
 800500c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005010:	1f0c      	subs	r4, r1, #4
 8005012:	2b00      	cmp	r3, #0
 8005014:	bfb8      	it	lt
 8005016:	18e4      	addlt	r4, r4, r3
 8005018:	f7ff feb0 	bl	8004d7c <__malloc_lock>
 800501c:	4a1d      	ldr	r2, [pc, #116]	@ (8005094 <_free_r+0x90>)
 800501e:	6813      	ldr	r3, [r2, #0]
 8005020:	b933      	cbnz	r3, 8005030 <_free_r+0x2c>
 8005022:	6063      	str	r3, [r4, #4]
 8005024:	6014      	str	r4, [r2, #0]
 8005026:	4628      	mov	r0, r5
 8005028:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800502c:	f7ff beac 	b.w	8004d88 <__malloc_unlock>
 8005030:	42a3      	cmp	r3, r4
 8005032:	d908      	bls.n	8005046 <_free_r+0x42>
 8005034:	6820      	ldr	r0, [r4, #0]
 8005036:	1821      	adds	r1, r4, r0
 8005038:	428b      	cmp	r3, r1
 800503a:	bf01      	itttt	eq
 800503c:	6819      	ldreq	r1, [r3, #0]
 800503e:	685b      	ldreq	r3, [r3, #4]
 8005040:	1809      	addeq	r1, r1, r0
 8005042:	6021      	streq	r1, [r4, #0]
 8005044:	e7ed      	b.n	8005022 <_free_r+0x1e>
 8005046:	461a      	mov	r2, r3
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	b10b      	cbz	r3, 8005050 <_free_r+0x4c>
 800504c:	42a3      	cmp	r3, r4
 800504e:	d9fa      	bls.n	8005046 <_free_r+0x42>
 8005050:	6811      	ldr	r1, [r2, #0]
 8005052:	1850      	adds	r0, r2, r1
 8005054:	42a0      	cmp	r0, r4
 8005056:	d10b      	bne.n	8005070 <_free_r+0x6c>
 8005058:	6820      	ldr	r0, [r4, #0]
 800505a:	4401      	add	r1, r0
 800505c:	1850      	adds	r0, r2, r1
 800505e:	4283      	cmp	r3, r0
 8005060:	6011      	str	r1, [r2, #0]
 8005062:	d1e0      	bne.n	8005026 <_free_r+0x22>
 8005064:	6818      	ldr	r0, [r3, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	6053      	str	r3, [r2, #4]
 800506a:	4408      	add	r0, r1
 800506c:	6010      	str	r0, [r2, #0]
 800506e:	e7da      	b.n	8005026 <_free_r+0x22>
 8005070:	d902      	bls.n	8005078 <_free_r+0x74>
 8005072:	230c      	movs	r3, #12
 8005074:	602b      	str	r3, [r5, #0]
 8005076:	e7d6      	b.n	8005026 <_free_r+0x22>
 8005078:	6820      	ldr	r0, [r4, #0]
 800507a:	1821      	adds	r1, r4, r0
 800507c:	428b      	cmp	r3, r1
 800507e:	bf04      	itt	eq
 8005080:	6819      	ldreq	r1, [r3, #0]
 8005082:	685b      	ldreq	r3, [r3, #4]
 8005084:	6063      	str	r3, [r4, #4]
 8005086:	bf04      	itt	eq
 8005088:	1809      	addeq	r1, r1, r0
 800508a:	6021      	streq	r1, [r4, #0]
 800508c:	6054      	str	r4, [r2, #4]
 800508e:	e7ca      	b.n	8005026 <_free_r+0x22>
 8005090:	bd38      	pop	{r3, r4, r5, pc}
 8005092:	bf00      	nop
 8005094:	20000358 	.word	0x20000358

08005098 <__ssputs_r>:
 8005098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800509c:	688e      	ldr	r6, [r1, #8]
 800509e:	461f      	mov	r7, r3
 80050a0:	42be      	cmp	r6, r7
 80050a2:	680b      	ldr	r3, [r1, #0]
 80050a4:	4682      	mov	sl, r0
 80050a6:	460c      	mov	r4, r1
 80050a8:	4690      	mov	r8, r2
 80050aa:	d82d      	bhi.n	8005108 <__ssputs_r+0x70>
 80050ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80050b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80050b4:	d026      	beq.n	8005104 <__ssputs_r+0x6c>
 80050b6:	6965      	ldr	r5, [r4, #20]
 80050b8:	6909      	ldr	r1, [r1, #16]
 80050ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80050be:	eba3 0901 	sub.w	r9, r3, r1
 80050c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80050c6:	1c7b      	adds	r3, r7, #1
 80050c8:	444b      	add	r3, r9
 80050ca:	106d      	asrs	r5, r5, #1
 80050cc:	429d      	cmp	r5, r3
 80050ce:	bf38      	it	cc
 80050d0:	461d      	movcc	r5, r3
 80050d2:	0553      	lsls	r3, r2, #21
 80050d4:	d527      	bpl.n	8005126 <__ssputs_r+0x8e>
 80050d6:	4629      	mov	r1, r5
 80050d8:	f7ff fdd0 	bl	8004c7c <_malloc_r>
 80050dc:	4606      	mov	r6, r0
 80050de:	b360      	cbz	r0, 800513a <__ssputs_r+0xa2>
 80050e0:	6921      	ldr	r1, [r4, #16]
 80050e2:	464a      	mov	r2, r9
 80050e4:	f000 fad8 	bl	8005698 <memcpy>
 80050e8:	89a3      	ldrh	r3, [r4, #12]
 80050ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80050ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050f2:	81a3      	strh	r3, [r4, #12]
 80050f4:	6126      	str	r6, [r4, #16]
 80050f6:	6165      	str	r5, [r4, #20]
 80050f8:	444e      	add	r6, r9
 80050fa:	eba5 0509 	sub.w	r5, r5, r9
 80050fe:	6026      	str	r6, [r4, #0]
 8005100:	60a5      	str	r5, [r4, #8]
 8005102:	463e      	mov	r6, r7
 8005104:	42be      	cmp	r6, r7
 8005106:	d900      	bls.n	800510a <__ssputs_r+0x72>
 8005108:	463e      	mov	r6, r7
 800510a:	6820      	ldr	r0, [r4, #0]
 800510c:	4632      	mov	r2, r6
 800510e:	4641      	mov	r1, r8
 8005110:	f000 faa8 	bl	8005664 <memmove>
 8005114:	68a3      	ldr	r3, [r4, #8]
 8005116:	1b9b      	subs	r3, r3, r6
 8005118:	60a3      	str	r3, [r4, #8]
 800511a:	6823      	ldr	r3, [r4, #0]
 800511c:	4433      	add	r3, r6
 800511e:	6023      	str	r3, [r4, #0]
 8005120:	2000      	movs	r0, #0
 8005122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005126:	462a      	mov	r2, r5
 8005128:	f000 fac4 	bl	80056b4 <_realloc_r>
 800512c:	4606      	mov	r6, r0
 800512e:	2800      	cmp	r0, #0
 8005130:	d1e0      	bne.n	80050f4 <__ssputs_r+0x5c>
 8005132:	6921      	ldr	r1, [r4, #16]
 8005134:	4650      	mov	r0, sl
 8005136:	f7ff ff65 	bl	8005004 <_free_r>
 800513a:	230c      	movs	r3, #12
 800513c:	f8ca 3000 	str.w	r3, [sl]
 8005140:	89a3      	ldrh	r3, [r4, #12]
 8005142:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005146:	81a3      	strh	r3, [r4, #12]
 8005148:	f04f 30ff 	mov.w	r0, #4294967295
 800514c:	e7e9      	b.n	8005122 <__ssputs_r+0x8a>
	...

08005150 <_svfiprintf_r>:
 8005150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005154:	4698      	mov	r8, r3
 8005156:	898b      	ldrh	r3, [r1, #12]
 8005158:	061b      	lsls	r3, r3, #24
 800515a:	b09d      	sub	sp, #116	@ 0x74
 800515c:	4607      	mov	r7, r0
 800515e:	460d      	mov	r5, r1
 8005160:	4614      	mov	r4, r2
 8005162:	d510      	bpl.n	8005186 <_svfiprintf_r+0x36>
 8005164:	690b      	ldr	r3, [r1, #16]
 8005166:	b973      	cbnz	r3, 8005186 <_svfiprintf_r+0x36>
 8005168:	2140      	movs	r1, #64	@ 0x40
 800516a:	f7ff fd87 	bl	8004c7c <_malloc_r>
 800516e:	6028      	str	r0, [r5, #0]
 8005170:	6128      	str	r0, [r5, #16]
 8005172:	b930      	cbnz	r0, 8005182 <_svfiprintf_r+0x32>
 8005174:	230c      	movs	r3, #12
 8005176:	603b      	str	r3, [r7, #0]
 8005178:	f04f 30ff 	mov.w	r0, #4294967295
 800517c:	b01d      	add	sp, #116	@ 0x74
 800517e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005182:	2340      	movs	r3, #64	@ 0x40
 8005184:	616b      	str	r3, [r5, #20]
 8005186:	2300      	movs	r3, #0
 8005188:	9309      	str	r3, [sp, #36]	@ 0x24
 800518a:	2320      	movs	r3, #32
 800518c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005190:	f8cd 800c 	str.w	r8, [sp, #12]
 8005194:	2330      	movs	r3, #48	@ 0x30
 8005196:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005334 <_svfiprintf_r+0x1e4>
 800519a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800519e:	f04f 0901 	mov.w	r9, #1
 80051a2:	4623      	mov	r3, r4
 80051a4:	469a      	mov	sl, r3
 80051a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051aa:	b10a      	cbz	r2, 80051b0 <_svfiprintf_r+0x60>
 80051ac:	2a25      	cmp	r2, #37	@ 0x25
 80051ae:	d1f9      	bne.n	80051a4 <_svfiprintf_r+0x54>
 80051b0:	ebba 0b04 	subs.w	fp, sl, r4
 80051b4:	d00b      	beq.n	80051ce <_svfiprintf_r+0x7e>
 80051b6:	465b      	mov	r3, fp
 80051b8:	4622      	mov	r2, r4
 80051ba:	4629      	mov	r1, r5
 80051bc:	4638      	mov	r0, r7
 80051be:	f7ff ff6b 	bl	8005098 <__ssputs_r>
 80051c2:	3001      	adds	r0, #1
 80051c4:	f000 80a7 	beq.w	8005316 <_svfiprintf_r+0x1c6>
 80051c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80051ca:	445a      	add	r2, fp
 80051cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80051ce:	f89a 3000 	ldrb.w	r3, [sl]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	f000 809f 	beq.w	8005316 <_svfiprintf_r+0x1c6>
 80051d8:	2300      	movs	r3, #0
 80051da:	f04f 32ff 	mov.w	r2, #4294967295
 80051de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051e2:	f10a 0a01 	add.w	sl, sl, #1
 80051e6:	9304      	str	r3, [sp, #16]
 80051e8:	9307      	str	r3, [sp, #28]
 80051ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80051ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80051f0:	4654      	mov	r4, sl
 80051f2:	2205      	movs	r2, #5
 80051f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051f8:	484e      	ldr	r0, [pc, #312]	@ (8005334 <_svfiprintf_r+0x1e4>)
 80051fa:	f7fa fff1 	bl	80001e0 <memchr>
 80051fe:	9a04      	ldr	r2, [sp, #16]
 8005200:	b9d8      	cbnz	r0, 800523a <_svfiprintf_r+0xea>
 8005202:	06d0      	lsls	r0, r2, #27
 8005204:	bf44      	itt	mi
 8005206:	2320      	movmi	r3, #32
 8005208:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800520c:	0711      	lsls	r1, r2, #28
 800520e:	bf44      	itt	mi
 8005210:	232b      	movmi	r3, #43	@ 0x2b
 8005212:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005216:	f89a 3000 	ldrb.w	r3, [sl]
 800521a:	2b2a      	cmp	r3, #42	@ 0x2a
 800521c:	d015      	beq.n	800524a <_svfiprintf_r+0xfa>
 800521e:	9a07      	ldr	r2, [sp, #28]
 8005220:	4654      	mov	r4, sl
 8005222:	2000      	movs	r0, #0
 8005224:	f04f 0c0a 	mov.w	ip, #10
 8005228:	4621      	mov	r1, r4
 800522a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800522e:	3b30      	subs	r3, #48	@ 0x30
 8005230:	2b09      	cmp	r3, #9
 8005232:	d94b      	bls.n	80052cc <_svfiprintf_r+0x17c>
 8005234:	b1b0      	cbz	r0, 8005264 <_svfiprintf_r+0x114>
 8005236:	9207      	str	r2, [sp, #28]
 8005238:	e014      	b.n	8005264 <_svfiprintf_r+0x114>
 800523a:	eba0 0308 	sub.w	r3, r0, r8
 800523e:	fa09 f303 	lsl.w	r3, r9, r3
 8005242:	4313      	orrs	r3, r2
 8005244:	9304      	str	r3, [sp, #16]
 8005246:	46a2      	mov	sl, r4
 8005248:	e7d2      	b.n	80051f0 <_svfiprintf_r+0xa0>
 800524a:	9b03      	ldr	r3, [sp, #12]
 800524c:	1d19      	adds	r1, r3, #4
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	9103      	str	r1, [sp, #12]
 8005252:	2b00      	cmp	r3, #0
 8005254:	bfbb      	ittet	lt
 8005256:	425b      	neglt	r3, r3
 8005258:	f042 0202 	orrlt.w	r2, r2, #2
 800525c:	9307      	strge	r3, [sp, #28]
 800525e:	9307      	strlt	r3, [sp, #28]
 8005260:	bfb8      	it	lt
 8005262:	9204      	strlt	r2, [sp, #16]
 8005264:	7823      	ldrb	r3, [r4, #0]
 8005266:	2b2e      	cmp	r3, #46	@ 0x2e
 8005268:	d10a      	bne.n	8005280 <_svfiprintf_r+0x130>
 800526a:	7863      	ldrb	r3, [r4, #1]
 800526c:	2b2a      	cmp	r3, #42	@ 0x2a
 800526e:	d132      	bne.n	80052d6 <_svfiprintf_r+0x186>
 8005270:	9b03      	ldr	r3, [sp, #12]
 8005272:	1d1a      	adds	r2, r3, #4
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	9203      	str	r2, [sp, #12]
 8005278:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800527c:	3402      	adds	r4, #2
 800527e:	9305      	str	r3, [sp, #20]
 8005280:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005344 <_svfiprintf_r+0x1f4>
 8005284:	7821      	ldrb	r1, [r4, #0]
 8005286:	2203      	movs	r2, #3
 8005288:	4650      	mov	r0, sl
 800528a:	f7fa ffa9 	bl	80001e0 <memchr>
 800528e:	b138      	cbz	r0, 80052a0 <_svfiprintf_r+0x150>
 8005290:	9b04      	ldr	r3, [sp, #16]
 8005292:	eba0 000a 	sub.w	r0, r0, sl
 8005296:	2240      	movs	r2, #64	@ 0x40
 8005298:	4082      	lsls	r2, r0
 800529a:	4313      	orrs	r3, r2
 800529c:	3401      	adds	r4, #1
 800529e:	9304      	str	r3, [sp, #16]
 80052a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052a4:	4824      	ldr	r0, [pc, #144]	@ (8005338 <_svfiprintf_r+0x1e8>)
 80052a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80052aa:	2206      	movs	r2, #6
 80052ac:	f7fa ff98 	bl	80001e0 <memchr>
 80052b0:	2800      	cmp	r0, #0
 80052b2:	d036      	beq.n	8005322 <_svfiprintf_r+0x1d2>
 80052b4:	4b21      	ldr	r3, [pc, #132]	@ (800533c <_svfiprintf_r+0x1ec>)
 80052b6:	bb1b      	cbnz	r3, 8005300 <_svfiprintf_r+0x1b0>
 80052b8:	9b03      	ldr	r3, [sp, #12]
 80052ba:	3307      	adds	r3, #7
 80052bc:	f023 0307 	bic.w	r3, r3, #7
 80052c0:	3308      	adds	r3, #8
 80052c2:	9303      	str	r3, [sp, #12]
 80052c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052c6:	4433      	add	r3, r6
 80052c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80052ca:	e76a      	b.n	80051a2 <_svfiprintf_r+0x52>
 80052cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80052d0:	460c      	mov	r4, r1
 80052d2:	2001      	movs	r0, #1
 80052d4:	e7a8      	b.n	8005228 <_svfiprintf_r+0xd8>
 80052d6:	2300      	movs	r3, #0
 80052d8:	3401      	adds	r4, #1
 80052da:	9305      	str	r3, [sp, #20]
 80052dc:	4619      	mov	r1, r3
 80052de:	f04f 0c0a 	mov.w	ip, #10
 80052e2:	4620      	mov	r0, r4
 80052e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052e8:	3a30      	subs	r2, #48	@ 0x30
 80052ea:	2a09      	cmp	r2, #9
 80052ec:	d903      	bls.n	80052f6 <_svfiprintf_r+0x1a6>
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d0c6      	beq.n	8005280 <_svfiprintf_r+0x130>
 80052f2:	9105      	str	r1, [sp, #20]
 80052f4:	e7c4      	b.n	8005280 <_svfiprintf_r+0x130>
 80052f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80052fa:	4604      	mov	r4, r0
 80052fc:	2301      	movs	r3, #1
 80052fe:	e7f0      	b.n	80052e2 <_svfiprintf_r+0x192>
 8005300:	ab03      	add	r3, sp, #12
 8005302:	9300      	str	r3, [sp, #0]
 8005304:	462a      	mov	r2, r5
 8005306:	4b0e      	ldr	r3, [pc, #56]	@ (8005340 <_svfiprintf_r+0x1f0>)
 8005308:	a904      	add	r1, sp, #16
 800530a:	4638      	mov	r0, r7
 800530c:	f3af 8000 	nop.w
 8005310:	1c42      	adds	r2, r0, #1
 8005312:	4606      	mov	r6, r0
 8005314:	d1d6      	bne.n	80052c4 <_svfiprintf_r+0x174>
 8005316:	89ab      	ldrh	r3, [r5, #12]
 8005318:	065b      	lsls	r3, r3, #25
 800531a:	f53f af2d 	bmi.w	8005178 <_svfiprintf_r+0x28>
 800531e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005320:	e72c      	b.n	800517c <_svfiprintf_r+0x2c>
 8005322:	ab03      	add	r3, sp, #12
 8005324:	9300      	str	r3, [sp, #0]
 8005326:	462a      	mov	r2, r5
 8005328:	4b05      	ldr	r3, [pc, #20]	@ (8005340 <_svfiprintf_r+0x1f0>)
 800532a:	a904      	add	r1, sp, #16
 800532c:	4638      	mov	r0, r7
 800532e:	f000 f879 	bl	8005424 <_printf_i>
 8005332:	e7ed      	b.n	8005310 <_svfiprintf_r+0x1c0>
 8005334:	08005f85 	.word	0x08005f85
 8005338:	08005f8f 	.word	0x08005f8f
 800533c:	00000000 	.word	0x00000000
 8005340:	08005099 	.word	0x08005099
 8005344:	08005f8b 	.word	0x08005f8b

08005348 <_printf_common>:
 8005348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800534c:	4616      	mov	r6, r2
 800534e:	4698      	mov	r8, r3
 8005350:	688a      	ldr	r2, [r1, #8]
 8005352:	690b      	ldr	r3, [r1, #16]
 8005354:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005358:	4293      	cmp	r3, r2
 800535a:	bfb8      	it	lt
 800535c:	4613      	movlt	r3, r2
 800535e:	6033      	str	r3, [r6, #0]
 8005360:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005364:	4607      	mov	r7, r0
 8005366:	460c      	mov	r4, r1
 8005368:	b10a      	cbz	r2, 800536e <_printf_common+0x26>
 800536a:	3301      	adds	r3, #1
 800536c:	6033      	str	r3, [r6, #0]
 800536e:	6823      	ldr	r3, [r4, #0]
 8005370:	0699      	lsls	r1, r3, #26
 8005372:	bf42      	ittt	mi
 8005374:	6833      	ldrmi	r3, [r6, #0]
 8005376:	3302      	addmi	r3, #2
 8005378:	6033      	strmi	r3, [r6, #0]
 800537a:	6825      	ldr	r5, [r4, #0]
 800537c:	f015 0506 	ands.w	r5, r5, #6
 8005380:	d106      	bne.n	8005390 <_printf_common+0x48>
 8005382:	f104 0a19 	add.w	sl, r4, #25
 8005386:	68e3      	ldr	r3, [r4, #12]
 8005388:	6832      	ldr	r2, [r6, #0]
 800538a:	1a9b      	subs	r3, r3, r2
 800538c:	42ab      	cmp	r3, r5
 800538e:	dc26      	bgt.n	80053de <_printf_common+0x96>
 8005390:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005394:	6822      	ldr	r2, [r4, #0]
 8005396:	3b00      	subs	r3, #0
 8005398:	bf18      	it	ne
 800539a:	2301      	movne	r3, #1
 800539c:	0692      	lsls	r2, r2, #26
 800539e:	d42b      	bmi.n	80053f8 <_printf_common+0xb0>
 80053a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80053a4:	4641      	mov	r1, r8
 80053a6:	4638      	mov	r0, r7
 80053a8:	47c8      	blx	r9
 80053aa:	3001      	adds	r0, #1
 80053ac:	d01e      	beq.n	80053ec <_printf_common+0xa4>
 80053ae:	6823      	ldr	r3, [r4, #0]
 80053b0:	6922      	ldr	r2, [r4, #16]
 80053b2:	f003 0306 	and.w	r3, r3, #6
 80053b6:	2b04      	cmp	r3, #4
 80053b8:	bf02      	ittt	eq
 80053ba:	68e5      	ldreq	r5, [r4, #12]
 80053bc:	6833      	ldreq	r3, [r6, #0]
 80053be:	1aed      	subeq	r5, r5, r3
 80053c0:	68a3      	ldr	r3, [r4, #8]
 80053c2:	bf0c      	ite	eq
 80053c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053c8:	2500      	movne	r5, #0
 80053ca:	4293      	cmp	r3, r2
 80053cc:	bfc4      	itt	gt
 80053ce:	1a9b      	subgt	r3, r3, r2
 80053d0:	18ed      	addgt	r5, r5, r3
 80053d2:	2600      	movs	r6, #0
 80053d4:	341a      	adds	r4, #26
 80053d6:	42b5      	cmp	r5, r6
 80053d8:	d11a      	bne.n	8005410 <_printf_common+0xc8>
 80053da:	2000      	movs	r0, #0
 80053dc:	e008      	b.n	80053f0 <_printf_common+0xa8>
 80053de:	2301      	movs	r3, #1
 80053e0:	4652      	mov	r2, sl
 80053e2:	4641      	mov	r1, r8
 80053e4:	4638      	mov	r0, r7
 80053e6:	47c8      	blx	r9
 80053e8:	3001      	adds	r0, #1
 80053ea:	d103      	bne.n	80053f4 <_printf_common+0xac>
 80053ec:	f04f 30ff 	mov.w	r0, #4294967295
 80053f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053f4:	3501      	adds	r5, #1
 80053f6:	e7c6      	b.n	8005386 <_printf_common+0x3e>
 80053f8:	18e1      	adds	r1, r4, r3
 80053fa:	1c5a      	adds	r2, r3, #1
 80053fc:	2030      	movs	r0, #48	@ 0x30
 80053fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005402:	4422      	add	r2, r4
 8005404:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005408:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800540c:	3302      	adds	r3, #2
 800540e:	e7c7      	b.n	80053a0 <_printf_common+0x58>
 8005410:	2301      	movs	r3, #1
 8005412:	4622      	mov	r2, r4
 8005414:	4641      	mov	r1, r8
 8005416:	4638      	mov	r0, r7
 8005418:	47c8      	blx	r9
 800541a:	3001      	adds	r0, #1
 800541c:	d0e6      	beq.n	80053ec <_printf_common+0xa4>
 800541e:	3601      	adds	r6, #1
 8005420:	e7d9      	b.n	80053d6 <_printf_common+0x8e>
	...

08005424 <_printf_i>:
 8005424:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005428:	7e0f      	ldrb	r7, [r1, #24]
 800542a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800542c:	2f78      	cmp	r7, #120	@ 0x78
 800542e:	4691      	mov	r9, r2
 8005430:	4680      	mov	r8, r0
 8005432:	460c      	mov	r4, r1
 8005434:	469a      	mov	sl, r3
 8005436:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800543a:	d807      	bhi.n	800544c <_printf_i+0x28>
 800543c:	2f62      	cmp	r7, #98	@ 0x62
 800543e:	d80a      	bhi.n	8005456 <_printf_i+0x32>
 8005440:	2f00      	cmp	r7, #0
 8005442:	f000 80d2 	beq.w	80055ea <_printf_i+0x1c6>
 8005446:	2f58      	cmp	r7, #88	@ 0x58
 8005448:	f000 80b9 	beq.w	80055be <_printf_i+0x19a>
 800544c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005450:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005454:	e03a      	b.n	80054cc <_printf_i+0xa8>
 8005456:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800545a:	2b15      	cmp	r3, #21
 800545c:	d8f6      	bhi.n	800544c <_printf_i+0x28>
 800545e:	a101      	add	r1, pc, #4	@ (adr r1, 8005464 <_printf_i+0x40>)
 8005460:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005464:	080054bd 	.word	0x080054bd
 8005468:	080054d1 	.word	0x080054d1
 800546c:	0800544d 	.word	0x0800544d
 8005470:	0800544d 	.word	0x0800544d
 8005474:	0800544d 	.word	0x0800544d
 8005478:	0800544d 	.word	0x0800544d
 800547c:	080054d1 	.word	0x080054d1
 8005480:	0800544d 	.word	0x0800544d
 8005484:	0800544d 	.word	0x0800544d
 8005488:	0800544d 	.word	0x0800544d
 800548c:	0800544d 	.word	0x0800544d
 8005490:	080055d1 	.word	0x080055d1
 8005494:	080054fb 	.word	0x080054fb
 8005498:	0800558b 	.word	0x0800558b
 800549c:	0800544d 	.word	0x0800544d
 80054a0:	0800544d 	.word	0x0800544d
 80054a4:	080055f3 	.word	0x080055f3
 80054a8:	0800544d 	.word	0x0800544d
 80054ac:	080054fb 	.word	0x080054fb
 80054b0:	0800544d 	.word	0x0800544d
 80054b4:	0800544d 	.word	0x0800544d
 80054b8:	08005593 	.word	0x08005593
 80054bc:	6833      	ldr	r3, [r6, #0]
 80054be:	1d1a      	adds	r2, r3, #4
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	6032      	str	r2, [r6, #0]
 80054c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80054cc:	2301      	movs	r3, #1
 80054ce:	e09d      	b.n	800560c <_printf_i+0x1e8>
 80054d0:	6833      	ldr	r3, [r6, #0]
 80054d2:	6820      	ldr	r0, [r4, #0]
 80054d4:	1d19      	adds	r1, r3, #4
 80054d6:	6031      	str	r1, [r6, #0]
 80054d8:	0606      	lsls	r6, r0, #24
 80054da:	d501      	bpl.n	80054e0 <_printf_i+0xbc>
 80054dc:	681d      	ldr	r5, [r3, #0]
 80054de:	e003      	b.n	80054e8 <_printf_i+0xc4>
 80054e0:	0645      	lsls	r5, r0, #25
 80054e2:	d5fb      	bpl.n	80054dc <_printf_i+0xb8>
 80054e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80054e8:	2d00      	cmp	r5, #0
 80054ea:	da03      	bge.n	80054f4 <_printf_i+0xd0>
 80054ec:	232d      	movs	r3, #45	@ 0x2d
 80054ee:	426d      	negs	r5, r5
 80054f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054f4:	4859      	ldr	r0, [pc, #356]	@ (800565c <_printf_i+0x238>)
 80054f6:	230a      	movs	r3, #10
 80054f8:	e011      	b.n	800551e <_printf_i+0xfa>
 80054fa:	6821      	ldr	r1, [r4, #0]
 80054fc:	6833      	ldr	r3, [r6, #0]
 80054fe:	0608      	lsls	r0, r1, #24
 8005500:	f853 5b04 	ldr.w	r5, [r3], #4
 8005504:	d402      	bmi.n	800550c <_printf_i+0xe8>
 8005506:	0649      	lsls	r1, r1, #25
 8005508:	bf48      	it	mi
 800550a:	b2ad      	uxthmi	r5, r5
 800550c:	2f6f      	cmp	r7, #111	@ 0x6f
 800550e:	4853      	ldr	r0, [pc, #332]	@ (800565c <_printf_i+0x238>)
 8005510:	6033      	str	r3, [r6, #0]
 8005512:	bf14      	ite	ne
 8005514:	230a      	movne	r3, #10
 8005516:	2308      	moveq	r3, #8
 8005518:	2100      	movs	r1, #0
 800551a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800551e:	6866      	ldr	r6, [r4, #4]
 8005520:	60a6      	str	r6, [r4, #8]
 8005522:	2e00      	cmp	r6, #0
 8005524:	bfa2      	ittt	ge
 8005526:	6821      	ldrge	r1, [r4, #0]
 8005528:	f021 0104 	bicge.w	r1, r1, #4
 800552c:	6021      	strge	r1, [r4, #0]
 800552e:	b90d      	cbnz	r5, 8005534 <_printf_i+0x110>
 8005530:	2e00      	cmp	r6, #0
 8005532:	d04b      	beq.n	80055cc <_printf_i+0x1a8>
 8005534:	4616      	mov	r6, r2
 8005536:	fbb5 f1f3 	udiv	r1, r5, r3
 800553a:	fb03 5711 	mls	r7, r3, r1, r5
 800553e:	5dc7      	ldrb	r7, [r0, r7]
 8005540:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005544:	462f      	mov	r7, r5
 8005546:	42bb      	cmp	r3, r7
 8005548:	460d      	mov	r5, r1
 800554a:	d9f4      	bls.n	8005536 <_printf_i+0x112>
 800554c:	2b08      	cmp	r3, #8
 800554e:	d10b      	bne.n	8005568 <_printf_i+0x144>
 8005550:	6823      	ldr	r3, [r4, #0]
 8005552:	07df      	lsls	r7, r3, #31
 8005554:	d508      	bpl.n	8005568 <_printf_i+0x144>
 8005556:	6923      	ldr	r3, [r4, #16]
 8005558:	6861      	ldr	r1, [r4, #4]
 800555a:	4299      	cmp	r1, r3
 800555c:	bfde      	ittt	le
 800555e:	2330      	movle	r3, #48	@ 0x30
 8005560:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005564:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005568:	1b92      	subs	r2, r2, r6
 800556a:	6122      	str	r2, [r4, #16]
 800556c:	f8cd a000 	str.w	sl, [sp]
 8005570:	464b      	mov	r3, r9
 8005572:	aa03      	add	r2, sp, #12
 8005574:	4621      	mov	r1, r4
 8005576:	4640      	mov	r0, r8
 8005578:	f7ff fee6 	bl	8005348 <_printf_common>
 800557c:	3001      	adds	r0, #1
 800557e:	d14a      	bne.n	8005616 <_printf_i+0x1f2>
 8005580:	f04f 30ff 	mov.w	r0, #4294967295
 8005584:	b004      	add	sp, #16
 8005586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800558a:	6823      	ldr	r3, [r4, #0]
 800558c:	f043 0320 	orr.w	r3, r3, #32
 8005590:	6023      	str	r3, [r4, #0]
 8005592:	4833      	ldr	r0, [pc, #204]	@ (8005660 <_printf_i+0x23c>)
 8005594:	2778      	movs	r7, #120	@ 0x78
 8005596:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800559a:	6823      	ldr	r3, [r4, #0]
 800559c:	6831      	ldr	r1, [r6, #0]
 800559e:	061f      	lsls	r7, r3, #24
 80055a0:	f851 5b04 	ldr.w	r5, [r1], #4
 80055a4:	d402      	bmi.n	80055ac <_printf_i+0x188>
 80055a6:	065f      	lsls	r7, r3, #25
 80055a8:	bf48      	it	mi
 80055aa:	b2ad      	uxthmi	r5, r5
 80055ac:	6031      	str	r1, [r6, #0]
 80055ae:	07d9      	lsls	r1, r3, #31
 80055b0:	bf44      	itt	mi
 80055b2:	f043 0320 	orrmi.w	r3, r3, #32
 80055b6:	6023      	strmi	r3, [r4, #0]
 80055b8:	b11d      	cbz	r5, 80055c2 <_printf_i+0x19e>
 80055ba:	2310      	movs	r3, #16
 80055bc:	e7ac      	b.n	8005518 <_printf_i+0xf4>
 80055be:	4827      	ldr	r0, [pc, #156]	@ (800565c <_printf_i+0x238>)
 80055c0:	e7e9      	b.n	8005596 <_printf_i+0x172>
 80055c2:	6823      	ldr	r3, [r4, #0]
 80055c4:	f023 0320 	bic.w	r3, r3, #32
 80055c8:	6023      	str	r3, [r4, #0]
 80055ca:	e7f6      	b.n	80055ba <_printf_i+0x196>
 80055cc:	4616      	mov	r6, r2
 80055ce:	e7bd      	b.n	800554c <_printf_i+0x128>
 80055d0:	6833      	ldr	r3, [r6, #0]
 80055d2:	6825      	ldr	r5, [r4, #0]
 80055d4:	6961      	ldr	r1, [r4, #20]
 80055d6:	1d18      	adds	r0, r3, #4
 80055d8:	6030      	str	r0, [r6, #0]
 80055da:	062e      	lsls	r6, r5, #24
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	d501      	bpl.n	80055e4 <_printf_i+0x1c0>
 80055e0:	6019      	str	r1, [r3, #0]
 80055e2:	e002      	b.n	80055ea <_printf_i+0x1c6>
 80055e4:	0668      	lsls	r0, r5, #25
 80055e6:	d5fb      	bpl.n	80055e0 <_printf_i+0x1bc>
 80055e8:	8019      	strh	r1, [r3, #0]
 80055ea:	2300      	movs	r3, #0
 80055ec:	6123      	str	r3, [r4, #16]
 80055ee:	4616      	mov	r6, r2
 80055f0:	e7bc      	b.n	800556c <_printf_i+0x148>
 80055f2:	6833      	ldr	r3, [r6, #0]
 80055f4:	1d1a      	adds	r2, r3, #4
 80055f6:	6032      	str	r2, [r6, #0]
 80055f8:	681e      	ldr	r6, [r3, #0]
 80055fa:	6862      	ldr	r2, [r4, #4]
 80055fc:	2100      	movs	r1, #0
 80055fe:	4630      	mov	r0, r6
 8005600:	f7fa fdee 	bl	80001e0 <memchr>
 8005604:	b108      	cbz	r0, 800560a <_printf_i+0x1e6>
 8005606:	1b80      	subs	r0, r0, r6
 8005608:	6060      	str	r0, [r4, #4]
 800560a:	6863      	ldr	r3, [r4, #4]
 800560c:	6123      	str	r3, [r4, #16]
 800560e:	2300      	movs	r3, #0
 8005610:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005614:	e7aa      	b.n	800556c <_printf_i+0x148>
 8005616:	6923      	ldr	r3, [r4, #16]
 8005618:	4632      	mov	r2, r6
 800561a:	4649      	mov	r1, r9
 800561c:	4640      	mov	r0, r8
 800561e:	47d0      	blx	sl
 8005620:	3001      	adds	r0, #1
 8005622:	d0ad      	beq.n	8005580 <_printf_i+0x15c>
 8005624:	6823      	ldr	r3, [r4, #0]
 8005626:	079b      	lsls	r3, r3, #30
 8005628:	d413      	bmi.n	8005652 <_printf_i+0x22e>
 800562a:	68e0      	ldr	r0, [r4, #12]
 800562c:	9b03      	ldr	r3, [sp, #12]
 800562e:	4298      	cmp	r0, r3
 8005630:	bfb8      	it	lt
 8005632:	4618      	movlt	r0, r3
 8005634:	e7a6      	b.n	8005584 <_printf_i+0x160>
 8005636:	2301      	movs	r3, #1
 8005638:	4632      	mov	r2, r6
 800563a:	4649      	mov	r1, r9
 800563c:	4640      	mov	r0, r8
 800563e:	47d0      	blx	sl
 8005640:	3001      	adds	r0, #1
 8005642:	d09d      	beq.n	8005580 <_printf_i+0x15c>
 8005644:	3501      	adds	r5, #1
 8005646:	68e3      	ldr	r3, [r4, #12]
 8005648:	9903      	ldr	r1, [sp, #12]
 800564a:	1a5b      	subs	r3, r3, r1
 800564c:	42ab      	cmp	r3, r5
 800564e:	dcf2      	bgt.n	8005636 <_printf_i+0x212>
 8005650:	e7eb      	b.n	800562a <_printf_i+0x206>
 8005652:	2500      	movs	r5, #0
 8005654:	f104 0619 	add.w	r6, r4, #25
 8005658:	e7f5      	b.n	8005646 <_printf_i+0x222>
 800565a:	bf00      	nop
 800565c:	08005f96 	.word	0x08005f96
 8005660:	08005fa7 	.word	0x08005fa7

08005664 <memmove>:
 8005664:	4288      	cmp	r0, r1
 8005666:	b510      	push	{r4, lr}
 8005668:	eb01 0402 	add.w	r4, r1, r2
 800566c:	d902      	bls.n	8005674 <memmove+0x10>
 800566e:	4284      	cmp	r4, r0
 8005670:	4623      	mov	r3, r4
 8005672:	d807      	bhi.n	8005684 <memmove+0x20>
 8005674:	1e43      	subs	r3, r0, #1
 8005676:	42a1      	cmp	r1, r4
 8005678:	d008      	beq.n	800568c <memmove+0x28>
 800567a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800567e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005682:	e7f8      	b.n	8005676 <memmove+0x12>
 8005684:	4402      	add	r2, r0
 8005686:	4601      	mov	r1, r0
 8005688:	428a      	cmp	r2, r1
 800568a:	d100      	bne.n	800568e <memmove+0x2a>
 800568c:	bd10      	pop	{r4, pc}
 800568e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005692:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005696:	e7f7      	b.n	8005688 <memmove+0x24>

08005698 <memcpy>:
 8005698:	440a      	add	r2, r1
 800569a:	4291      	cmp	r1, r2
 800569c:	f100 33ff 	add.w	r3, r0, #4294967295
 80056a0:	d100      	bne.n	80056a4 <memcpy+0xc>
 80056a2:	4770      	bx	lr
 80056a4:	b510      	push	{r4, lr}
 80056a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056ae:	4291      	cmp	r1, r2
 80056b0:	d1f9      	bne.n	80056a6 <memcpy+0xe>
 80056b2:	bd10      	pop	{r4, pc}

080056b4 <_realloc_r>:
 80056b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056b8:	4680      	mov	r8, r0
 80056ba:	4615      	mov	r5, r2
 80056bc:	460c      	mov	r4, r1
 80056be:	b921      	cbnz	r1, 80056ca <_realloc_r+0x16>
 80056c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056c4:	4611      	mov	r1, r2
 80056c6:	f7ff bad9 	b.w	8004c7c <_malloc_r>
 80056ca:	b92a      	cbnz	r2, 80056d8 <_realloc_r+0x24>
 80056cc:	f7ff fc9a 	bl	8005004 <_free_r>
 80056d0:	2400      	movs	r4, #0
 80056d2:	4620      	mov	r0, r4
 80056d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056d8:	f000 f81a 	bl	8005710 <_malloc_usable_size_r>
 80056dc:	4285      	cmp	r5, r0
 80056de:	4606      	mov	r6, r0
 80056e0:	d802      	bhi.n	80056e8 <_realloc_r+0x34>
 80056e2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80056e6:	d8f4      	bhi.n	80056d2 <_realloc_r+0x1e>
 80056e8:	4629      	mov	r1, r5
 80056ea:	4640      	mov	r0, r8
 80056ec:	f7ff fac6 	bl	8004c7c <_malloc_r>
 80056f0:	4607      	mov	r7, r0
 80056f2:	2800      	cmp	r0, #0
 80056f4:	d0ec      	beq.n	80056d0 <_realloc_r+0x1c>
 80056f6:	42b5      	cmp	r5, r6
 80056f8:	462a      	mov	r2, r5
 80056fa:	4621      	mov	r1, r4
 80056fc:	bf28      	it	cs
 80056fe:	4632      	movcs	r2, r6
 8005700:	f7ff ffca 	bl	8005698 <memcpy>
 8005704:	4621      	mov	r1, r4
 8005706:	4640      	mov	r0, r8
 8005708:	f7ff fc7c 	bl	8005004 <_free_r>
 800570c:	463c      	mov	r4, r7
 800570e:	e7e0      	b.n	80056d2 <_realloc_r+0x1e>

08005710 <_malloc_usable_size_r>:
 8005710:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005714:	1f18      	subs	r0, r3, #4
 8005716:	2b00      	cmp	r3, #0
 8005718:	bfbc      	itt	lt
 800571a:	580b      	ldrlt	r3, [r1, r0]
 800571c:	18c0      	addlt	r0, r0, r3
 800571e:	4770      	bx	lr

08005720 <_init>:
 8005720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005722:	bf00      	nop
 8005724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005726:	bc08      	pop	{r3}
 8005728:	469e      	mov	lr, r3
 800572a:	4770      	bx	lr

0800572c <_fini>:
 800572c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800572e:	bf00      	nop
 8005730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005732:	bc08      	pop	{r3}
 8005734:	469e      	mov	lr, r3
 8005736:	4770      	bx	lr
