
MainBoard2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fb0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  08005140  08005140  00006140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800543c  0800543c  00007178  2**0
                  CONTENTS
  4 .ARM          00000008  0800543c  0800543c  0000643c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005444  08005444  00007178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005444  08005444  00006444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005448  08005448  00006448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000178  20000000  0800544c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007178  2**0
                  CONTENTS
 10 .bss          00000328  20000178  20000178  00007178  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004a0  200004a0  00007178  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007178  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ca6b  00000000  00000000  000071a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f89  00000000  00000000  00013c13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000be8  00000000  00000000  00015ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000925  00000000  00000000  00016788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dd85  00000000  00000000  000170ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dab9  00000000  00000000  00034e32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b710f  00000000  00000000  000428eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f99fa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003684  00000000  00000000  000f9a40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008e  00000000  00000000  000fd0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000178 	.word	0x20000178
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005128 	.word	0x08005128

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000017c 	.word	0x2000017c
 80001cc:	08005128 	.word	0x08005128

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	db0b      	blt.n	80002ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	f003 021f 	and.w	r2, r3, #31
 80002a8:	4907      	ldr	r1, [pc, #28]	@ (80002c8 <__NVIC_EnableIRQ+0x38>)
 80002aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ae:	095b      	lsrs	r3, r3, #5
 80002b0:	2001      	movs	r0, #1
 80002b2:	fa00 f202 	lsl.w	r2, r0, r2
 80002b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002ba:	bf00      	nop
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	e000e100 	.word	0xe000e100

080002cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	4603      	mov	r3, r0
 80002d4:	6039      	str	r1, [r7, #0]
 80002d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	db0a      	blt.n	80002f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e0:	683b      	ldr	r3, [r7, #0]
 80002e2:	b2da      	uxtb	r2, r3
 80002e4:	490c      	ldr	r1, [pc, #48]	@ (8000318 <__NVIC_SetPriority+0x4c>)
 80002e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ea:	0112      	lsls	r2, r2, #4
 80002ec:	b2d2      	uxtb	r2, r2
 80002ee:	440b      	add	r3, r1
 80002f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002f4:	e00a      	b.n	800030c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	b2da      	uxtb	r2, r3
 80002fa:	4908      	ldr	r1, [pc, #32]	@ (800031c <__NVIC_SetPriority+0x50>)
 80002fc:	79fb      	ldrb	r3, [r7, #7]
 80002fe:	f003 030f 	and.w	r3, r3, #15
 8000302:	3b04      	subs	r3, #4
 8000304:	0112      	lsls	r2, r2, #4
 8000306:	b2d2      	uxtb	r2, r2
 8000308:	440b      	add	r3, r1
 800030a:	761a      	strb	r2, [r3, #24]
}
 800030c:	bf00      	nop
 800030e:	370c      	adds	r7, #12
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr
 8000318:	e000e100 	.word	0xe000e100
 800031c:	e000ed00 	.word	0xe000ed00

08000320 <create_mask>:
 	uint8_t PIN_UPPER;

 } GPIO;


 uint32_t create_mask(uint8_t start, uint8_t end) {
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	4603      	mov	r3, r0
 8000328:	460a      	mov	r2, r1
 800032a:	71fb      	strb	r3, [r7, #7]
 800032c:	4613      	mov	r3, r2
 800032e:	71bb      	strb	r3, [r7, #6]
 	//Bitwise-logic trick to get 1's mask between start and end index
 	return ((1 << (end + 1)) - 1) ^ ((1 << start) - 1);                      // XOR to get the range
 8000330:	79bb      	ldrb	r3, [r7, #6]
 8000332:	3301      	adds	r3, #1
 8000334:	2201      	movs	r2, #1
 8000336:	fa02 f303 	lsl.w	r3, r2, r3
 800033a:	1e5a      	subs	r2, r3, #1
 800033c:	79fb      	ldrb	r3, [r7, #7]
 800033e:	2101      	movs	r1, #1
 8000340:	fa01 f303 	lsl.w	r3, r1, r3
 8000344:	3b01      	subs	r3, #1
 8000346:	4053      	eors	r3, r2
 }
 8000348:	4618      	mov	r0, r3
 800034a:	370c      	adds	r7, #12
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr

08000354 <init_port>:



 GPIO *init_port(port_name_link name, port_mode mode, uint8_t pin_lower, uint8_t pin_upper){
 8000354:	b590      	push	{r4, r7, lr}
 8000356:	b089      	sub	sp, #36	@ 0x24
 8000358:	af00      	add	r7, sp, #0
 800035a:	4604      	mov	r4, r0
 800035c:	4608      	mov	r0, r1
 800035e:	4611      	mov	r1, r2
 8000360:	461a      	mov	r2, r3
 8000362:	4623      	mov	r3, r4
 8000364:	71fb      	strb	r3, [r7, #7]
 8000366:	4603      	mov	r3, r0
 8000368:	71bb      	strb	r3, [r7, #6]
 800036a:	460b      	mov	r3, r1
 800036c:	717b      	strb	r3, [r7, #5]
 800036e:	4613      	mov	r3, r2
 8000370:	713b      	strb	r3, [r7, #4]

 	GPIO *port_pt = malloc(sizeof(GPIO)); //Pointer to Port
 8000372:	200c      	movs	r0, #12
 8000374:	f004 fa30 	bl	80047d8 <malloc>
 8000378:	4603      	mov	r3, r0
 800037a:	617b      	str	r3, [r7, #20]

 	port_pt->PORT_IND = name;
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	79fa      	ldrb	r2, [r7, #7]
 8000380:	701a      	strb	r2, [r3, #0]
 	port_pt->PORT_ADR = adr_link[name];
 8000382:	79fb      	ldrb	r3, [r7, #7]
 8000384:	4a50      	ldr	r2, [pc, #320]	@ (80004c8 <init_port+0x174>)
 8000386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800038a:	461a      	mov	r2, r3
 800038c:	697b      	ldr	r3, [r7, #20]
 800038e:	605a      	str	r2, [r3, #4]
 	port_pt->MODE = mode;
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	79ba      	ldrb	r2, [r7, #6]
 8000394:	721a      	strb	r2, [r3, #8]
 	port_pt->PIN_LOWER = pin_lower;
 8000396:	697b      	ldr	r3, [r7, #20]
 8000398:	797a      	ldrb	r2, [r7, #5]
 800039a:	725a      	strb	r2, [r3, #9]
 	port_pt->PIN_UPPER = pin_upper;
 800039c:	697b      	ldr	r3, [r7, #20]
 800039e:	793a      	ldrb	r2, [r7, #4]
 80003a0:	729a      	strb	r2, [r3, #10]

 	//Enable clock for portX
 	uint32_t clock_en_mask = clock_mask_link[name];
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	4a49      	ldr	r2, [pc, #292]	@ (80004cc <init_port+0x178>)
 80003a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003aa:	613b      	str	r3, [r7, #16]
 	RCC->AHBENR |= clock_en_mask;
 80003ac:	4b48      	ldr	r3, [pc, #288]	@ (80004d0 <init_port+0x17c>)
 80003ae:	695a      	ldr	r2, [r3, #20]
 80003b0:	4947      	ldr	r1, [pc, #284]	@ (80004d0 <init_port+0x17c>)
 80003b2:	693b      	ldr	r3, [r7, #16]
 80003b4:	4313      	orrs	r3, r2
 80003b6:	614b      	str	r3, [r1, #20]


 	uint32_t *port_mode_reg = ((uint32_t *) &(port_pt->PORT_ADR->MODER));
 80003b8:	697b      	ldr	r3, [r7, #20]
 80003ba:	685b      	ldr	r3, [r3, #4]
 80003bc:	60fb      	str	r3, [r7, #12]

 	//Generate mode-mask

 	//First mask away the selected section (pin_range)
 	uint32_t temp_mask = create_mask(pin_lower*2, pin_upper*2 + 1);
 80003be:	797b      	ldrb	r3, [r7, #5]
 80003c0:	005b      	lsls	r3, r3, #1
 80003c2:	b2da      	uxtb	r2, r3
 80003c4:	793b      	ldrb	r3, [r7, #4]
 80003c6:	005b      	lsls	r3, r3, #1
 80003c8:	b2db      	uxtb	r3, r3
 80003ca:	3301      	adds	r3, #1
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	4619      	mov	r1, r3
 80003d0:	4610      	mov	r0, r2
 80003d2:	f7ff ffa5 	bl	8000320 <create_mask>
 80003d6:	61f8      	str	r0, [r7, #28]

 	//Sets the pin_range section to 0
 	*port_mode_reg &= ~temp_mask;
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	681a      	ldr	r2, [r3, #0]
 80003dc:	69fb      	ldr	r3, [r7, #28]
 80003de:	43db      	mvns	r3, r3
 80003e0:	401a      	ands	r2, r3
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	601a      	str	r2, [r3, #0]


 	//Input-mode is enabled when each pin is 0b00 so no more masking is required

 	if (mode == OUTPUT){
 80003e6:	79bb      	ldrb	r3, [r7, #6]
 80003e8:	2b01      	cmp	r3, #1
 80003ea:	d11f      	bne.n	800042c <init_port+0xd8>

 		//Similar idea to clear-mask, except shifting by 2 each time (0b01010101...)
 		uint32_t first_mask = (1 << pin_lower*2);
 80003ec:	797b      	ldrb	r3, [r7, #5]
 80003ee:	005b      	lsls	r3, r3, #1
 80003f0:	2201      	movs	r2, #1
 80003f2:	fa02 f303 	lsl.w	r3, r2, r3
 80003f6:	60bb      	str	r3, [r7, #8]

 		temp_mask = first_mask;
 80003f8:	68bb      	ldr	r3, [r7, #8]
 80003fa:	61fb      	str	r3, [r7, #28]
 		for (uint8_t i=pin_lower; i<pin_upper+1; i++){
 80003fc:	797b      	ldrb	r3, [r7, #5]
 80003fe:	76fb      	strb	r3, [r7, #27]
 8000400:	e009      	b.n	8000416 <init_port+0xc2>
 			temp_mask <<= 2;
 8000402:	69fb      	ldr	r3, [r7, #28]
 8000404:	009b      	lsls	r3, r3, #2
 8000406:	61fb      	str	r3, [r7, #28]
 			temp_mask |= first_mask;
 8000408:	69fa      	ldr	r2, [r7, #28]
 800040a:	68bb      	ldr	r3, [r7, #8]
 800040c:	4313      	orrs	r3, r2
 800040e:	61fb      	str	r3, [r7, #28]
 		for (uint8_t i=pin_lower; i<pin_upper+1; i++){
 8000410:	7efb      	ldrb	r3, [r7, #27]
 8000412:	3301      	adds	r3, #1
 8000414:	76fb      	strb	r3, [r7, #27]
 8000416:	793a      	ldrb	r2, [r7, #4]
 8000418:	7efb      	ldrb	r3, [r7, #27]
 800041a:	429a      	cmp	r2, r3
 800041c:	d2f1      	bcs.n	8000402 <init_port+0xae>
 		}

 		*port_mode_reg |=temp_mask;
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	69fb      	ldr	r3, [r7, #28]
 8000424:	431a      	orrs	r2, r3
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	e047      	b.n	80004bc <init_port+0x168>

 	} else if (mode == ANALOG){
 800042c:	79bb      	ldrb	r3, [r7, #6]
 800042e:	2b02      	cmp	r3, #2
 8000430:	d144      	bne.n	80004bc <init_port+0x168>
 		//All 1s for analog mode (conveniently same as clear-mask)

 		*port_mode_reg |= temp_mask;
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	681a      	ldr	r2, [r3, #0]
 8000436:	69fb      	ldr	r3, [r7, #28]
 8000438:	431a      	orrs	r2, r3
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	601a      	str	r2, [r3, #0]

 		//ONLY AVAILABLE FOR PA0 - PA3 !!!!!!

 		// enable the clock for ADC1
		RCC->AHBENR |= RCC_AHBENR_ADC12EN;
 800043e:	4b24      	ldr	r3, [pc, #144]	@ (80004d0 <init_port+0x17c>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	4a23      	ldr	r2, [pc, #140]	@ (80004d0 <init_port+0x17c>)
 8000444:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000448:	6153      	str	r3, [r2, #20]

		// set to synchronise the ADC with the clock
		ADC12_COMMON->CCR |= ADC12_CCR_CKMODE_0;
 800044a:	4b22      	ldr	r3, [pc, #136]	@ (80004d4 <init_port+0x180>)
 800044c:	689b      	ldr	r3, [r3, #8]
 800044e:	4a21      	ldr	r2, [pc, #132]	@ (80004d4 <init_port+0x180>)
 8000450:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000454:	6093      	str	r3, [r2, #8]

		// ADEN must be = 0 for configuration (is the default)
		ADC2->CR &= ~ADC_CR_ADVREGEN; // clear voltage regulator enable
 8000456:	4b20      	ldr	r3, [pc, #128]	@ (80004d8 <init_port+0x184>)
 8000458:	689b      	ldr	r3, [r3, #8]
 800045a:	4a1f      	ldr	r2, [pc, #124]	@ (80004d8 <init_port+0x184>)
 800045c:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8000460:	6093      	str	r3, [r2, #8]
		ADC2->CR |= ADC_CR_ADVREGEN_0; // set ADVREGEN TO 01
 8000462:	4b1d      	ldr	r3, [pc, #116]	@ (80004d8 <init_port+0x184>)
 8000464:	689b      	ldr	r3, [r3, #8]
 8000466:	4a1c      	ldr	r2, [pc, #112]	@ (80004d8 <init_port+0x184>)
 8000468:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800046c:	6093      	str	r3, [r2, #8]
		ADC2->CR &= ~ADC_CR_ADCALDIF; // clear bit to enable Single-ended-input
 800046e:	4b1a      	ldr	r3, [pc, #104]	@ (80004d8 <init_port+0x184>)
 8000470:	689b      	ldr	r3, [r3, #8]
 8000472:	4a19      	ldr	r2, [pc, #100]	@ (80004d8 <init_port+0x184>)
 8000474:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8000478:	6093      	str	r3, [r2, #8]

		// calibrate the ADC (self calibration routine)
		ADC2->CR |= ADC_CR_ADCAL;
 800047a:	4b17      	ldr	r3, [pc, #92]	@ (80004d8 <init_port+0x184>)
 800047c:	689b      	ldr	r3, [r3, #8]
 800047e:	4a16      	ldr	r2, [pc, #88]	@ (80004d8 <init_port+0x184>)
 8000480:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000484:	6093      	str	r3, [r2, #8]
		while((ADC2->CR & ADC_CR_ADCAL) == ADC_CR_ADCAL); // Waiting for the calibration to finish
 8000486:	bf00      	nop
 8000488:	4b13      	ldr	r3, [pc, #76]	@ (80004d8 <init_port+0x184>)
 800048a:	689b      	ldr	r3, [r3, #8]
 800048c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8000490:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000494:	d0f8      	beq.n	8000488 <init_port+0x134>


		// single shot mode
		ADC2->CFGR &= ~ADC_CFGR_CONT;
 8000496:	4b10      	ldr	r3, [pc, #64]	@ (80004d8 <init_port+0x184>)
 8000498:	68db      	ldr	r3, [r3, #12]
 800049a:	4a0f      	ldr	r2, [pc, #60]	@ (80004d8 <init_port+0x184>)
 800049c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80004a0:	60d3      	str	r3, [r2, #12]

		// Enable the ADC
		ADC2->CR |= ADC_CR_ADEN;
 80004a2:	4b0d      	ldr	r3, [pc, #52]	@ (80004d8 <init_port+0x184>)
 80004a4:	689b      	ldr	r3, [r3, #8]
 80004a6:	4a0c      	ldr	r2, [pc, #48]	@ (80004d8 <init_port+0x184>)
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	6093      	str	r3, [r2, #8]

		// Wait the ADC to be ready.
		while (!(ADC2->ISR & ADC_ISR_ADRDY));
 80004ae:	bf00      	nop
 80004b0:	4b09      	ldr	r3, [pc, #36]	@ (80004d8 <init_port+0x184>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	f003 0301 	and.w	r3, r3, #1
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d0f9      	beq.n	80004b0 <init_port+0x15c>

 	}


 	//Port has been initialised!! - return the port-struct
 	return port_pt;
 80004bc:	697b      	ldr	r3, [r7, #20]
 }
 80004be:	4618      	mov	r0, r3
 80004c0:	3724      	adds	r7, #36	@ 0x24
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd90      	pop	{r4, r7, pc}
 80004c6:	bf00      	nop
 80004c8:	08005320 	.word	0x08005320
 80004cc:	08005334 	.word	0x08005334
 80004d0:	40021000 	.word	0x40021000
 80004d4:	50000300 	.word	0x50000300
 80004d8:	50000100 	.word	0x50000100

080004dc <read_pins_analog>:
	return 0;

 }

 //Read analog pins (writes to pt)
void read_pins_analog(GPIO *port_pt, uint16_t *dest_pt){
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	6039      	str	r1, [r7, #0]
	 if (port_pt->MODE == ANALOG){
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	7a1b      	ldrb	r3, [r3, #8]
 80004ea:	2b02      	cmp	r3, #2
 80004ec:	d14c      	bne.n	8000588 <read_pins_analog+0xac>
		uint8_t pin_lower = port_pt->PIN_LOWER;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	7a5b      	ldrb	r3, [r3, #9]
 80004f2:	737b      	strb	r3, [r7, #13]
		uint8_t pin_upper = port_pt->PIN_UPPER;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	7a9b      	ldrb	r3, [r3, #10]
 80004f8:	733b      	strb	r3, [r7, #12]


		uint8_t index = 0;
 80004fa:	2300      	movs	r3, #0
 80004fc:	73fb      	strb	r3, [r7, #15]
		for (uint8_t i=0; i < pin_upper-pin_lower +1; i++){
 80004fe:	2300      	movs	r3, #0
 8000500:	73bb      	strb	r3, [r7, #14]
 8000502:	e03a      	b.n	800057a <read_pins_analog+0x9e>
			//Clear channel-sequence
			ADC2->SQR1 = 0;
 8000504:	4b23      	ldr	r3, [pc, #140]	@ (8000594 <read_pins_analog+0xb8>)
 8000506:	2200      	movs	r2, #0
 8000508:	631a      	str	r2, [r3, #48]	@ 0x30

			uint8_t pin = pin_lower + i;
 800050a:	7b7a      	ldrb	r2, [r7, #13]
 800050c:	7bbb      	ldrb	r3, [r7, #14]
 800050e:	4413      	add	r3, r2
 8000510:	72fb      	strb	r3, [r7, #11]
			ADC2->SQR1 |= (pin-3) << ADC_SQR1_SQ1_Pos; // request channel 2
 8000512:	4b20      	ldr	r3, [pc, #128]	@ (8000594 <read_pins_analog+0xb8>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000516:	7afa      	ldrb	r2, [r7, #11]
 8000518:	3a03      	subs	r2, #3
 800051a:	0192      	lsls	r2, r2, #6
 800051c:	4611      	mov	r1, r2
 800051e:	4a1d      	ldr	r2, [pc, #116]	@ (8000594 <read_pins_analog+0xb8>)
 8000520:	430b      	orrs	r3, r1
 8000522:	6313      	str	r3, [r2, #48]	@ 0x30
			ADC2->SQR1 |= 0 << ADC_SQR1_L_Pos; // set the number of channels to read (number of pins in range)
 8000524:	4b1b      	ldr	r3, [pc, #108]	@ (8000594 <read_pins_analog+0xb8>)
 8000526:	4a1b      	ldr	r2, [pc, #108]	@ (8000594 <read_pins_analog+0xb8>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052a:	6313      	str	r3, [r2, #48]	@ 0x30


			// request the process to start
			ADC2->CR |= ADC_CR_ADSTART;
 800052c:	4b19      	ldr	r3, [pc, #100]	@ (8000594 <read_pins_analog+0xb8>)
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	4a18      	ldr	r2, [pc, #96]	@ (8000594 <read_pins_analog+0xb8>)
 8000532:	f043 0304 	orr.w	r3, r3, #4
 8000536:	6093      	str	r3, [r2, #8]


			while (!(ADC2->ISR & ADC_ISR_EOS)) {
 8000538:	e010      	b.n	800055c <read_pins_analog+0x80>
				while (!(ADC2->ISR & ADC_ISR_EOC));  // Wait for conversion
 800053a:	bf00      	nop
 800053c:	4b15      	ldr	r3, [pc, #84]	@ (8000594 <read_pins_analog+0xb8>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f003 0304 	and.w	r3, r3, #4
 8000544:	2b00      	cmp	r3, #0
 8000546:	d0f9      	beq.n	800053c <read_pins_analog+0x60>
				dest_pt[index++] = ADC2->DR;               // Reading clears EOC
 8000548:	4b12      	ldr	r3, [pc, #72]	@ (8000594 <read_pins_analog+0xb8>)
 800054a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800054c:	7bfb      	ldrb	r3, [r7, #15]
 800054e:	1c5a      	adds	r2, r3, #1
 8000550:	73fa      	strb	r2, [r7, #15]
 8000552:	005b      	lsls	r3, r3, #1
 8000554:	683a      	ldr	r2, [r7, #0]
 8000556:	4413      	add	r3, r2
 8000558:	b28a      	uxth	r2, r1
 800055a:	801a      	strh	r2, [r3, #0]
			while (!(ADC2->ISR & ADC_ISR_EOS)) {
 800055c:	4b0d      	ldr	r3, [pc, #52]	@ (8000594 <read_pins_analog+0xb8>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f003 0308 	and.w	r3, r3, #8
 8000564:	2b00      	cmp	r3, #0
 8000566:	d0e8      	beq.n	800053a <read_pins_analog+0x5e>
			}

			// Clear EOS if needed
			ADC2->ISR |= ADC_ISR_EOS;
 8000568:	4b0a      	ldr	r3, [pc, #40]	@ (8000594 <read_pins_analog+0xb8>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a09      	ldr	r2, [pc, #36]	@ (8000594 <read_pins_analog+0xb8>)
 800056e:	f043 0308 	orr.w	r3, r3, #8
 8000572:	6013      	str	r3, [r2, #0]
		for (uint8_t i=0; i < pin_upper-pin_lower +1; i++){
 8000574:	7bbb      	ldrb	r3, [r7, #14]
 8000576:	3301      	adds	r3, #1
 8000578:	73bb      	strb	r3, [r7, #14]
 800057a:	7b3a      	ldrb	r2, [r7, #12]
 800057c:	7b7b      	ldrb	r3, [r7, #13]
 800057e:	1ad2      	subs	r2, r2, r3
 8000580:	7bbb      	ldrb	r3, [r7, #14]
 8000582:	429a      	cmp	r2, r3
 8000584:	dabe      	bge.n	8000504 <read_pins_analog+0x28>
		}


	}

	 return;
 8000586:	bf00      	nop
 8000588:	bf00      	nop
 }
 800058a:	3714      	adds	r7, #20
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	50000100 	.word	0x50000100

08000598 <EXTI0_IRQHandler>:

 //Pointers to callback-funcitons (for each of 16 pins)
 void (*EXTI_Callbacks[16])(uint8_t pin_index) = {0x00};
 //Wish this wasn't necessary, but each handler function has to be defined seperately
 //Is there a better way to do this? There doesn't seem to be a generic IQRHandler..
 void EXTI0_IRQHandler(void) {EXTI->PR |= (1 << 0); if (EXTI_Callbacks[0]) EXTI_Callbacks[0](0);}
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
 800059c:	4b07      	ldr	r3, [pc, #28]	@ (80005bc <EXTI0_IRQHandler+0x24>)
 800059e:	695b      	ldr	r3, [r3, #20]
 80005a0:	4a06      	ldr	r2, [pc, #24]	@ (80005bc <EXTI0_IRQHandler+0x24>)
 80005a2:	f043 0301 	orr.w	r3, r3, #1
 80005a6:	6153      	str	r3, [r2, #20]
 80005a8:	4b05      	ldr	r3, [pc, #20]	@ (80005c0 <EXTI0_IRQHandler+0x28>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d003      	beq.n	80005b8 <EXTI0_IRQHandler+0x20>
 80005b0:	4b03      	ldr	r3, [pc, #12]	@ (80005c0 <EXTI0_IRQHandler+0x28>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2000      	movs	r0, #0
 80005b6:	4798      	blx	r3
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40010400 	.word	0x40010400
 80005c0:	20000194 	.word	0x20000194

080005c4 <EXTI1_IRQHandler>:
 void EXTI1_IRQHandler(void) {EXTI->PR |= (1 << 1); if (EXTI_Callbacks[1]) EXTI_Callbacks[1](1);}
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	4b07      	ldr	r3, [pc, #28]	@ (80005e8 <EXTI1_IRQHandler+0x24>)
 80005ca:	695b      	ldr	r3, [r3, #20]
 80005cc:	4a06      	ldr	r2, [pc, #24]	@ (80005e8 <EXTI1_IRQHandler+0x24>)
 80005ce:	f043 0302 	orr.w	r3, r3, #2
 80005d2:	6153      	str	r3, [r2, #20]
 80005d4:	4b05      	ldr	r3, [pc, #20]	@ (80005ec <EXTI1_IRQHandler+0x28>)
 80005d6:	685b      	ldr	r3, [r3, #4]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d003      	beq.n	80005e4 <EXTI1_IRQHandler+0x20>
 80005dc:	4b03      	ldr	r3, [pc, #12]	@ (80005ec <EXTI1_IRQHandler+0x28>)
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	2001      	movs	r0, #1
 80005e2:	4798      	blx	r3
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40010400 	.word	0x40010400
 80005ec:	20000194 	.word	0x20000194

080005f0 <EXTI2_TSC_IRQHandler>:
 void EXTI2_TSC_IRQHandler(void) {EXTI->PR |= (1 << 2); if (EXTI_Callbacks[2]) EXTI_Callbacks[2](2);}
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	4b07      	ldr	r3, [pc, #28]	@ (8000614 <EXTI2_TSC_IRQHandler+0x24>)
 80005f6:	695b      	ldr	r3, [r3, #20]
 80005f8:	4a06      	ldr	r2, [pc, #24]	@ (8000614 <EXTI2_TSC_IRQHandler+0x24>)
 80005fa:	f043 0304 	orr.w	r3, r3, #4
 80005fe:	6153      	str	r3, [r2, #20]
 8000600:	4b05      	ldr	r3, [pc, #20]	@ (8000618 <EXTI2_TSC_IRQHandler+0x28>)
 8000602:	689b      	ldr	r3, [r3, #8]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d003      	beq.n	8000610 <EXTI2_TSC_IRQHandler+0x20>
 8000608:	4b03      	ldr	r3, [pc, #12]	@ (8000618 <EXTI2_TSC_IRQHandler+0x28>)
 800060a:	689b      	ldr	r3, [r3, #8]
 800060c:	2002      	movs	r0, #2
 800060e:	4798      	blx	r3
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40010400 	.word	0x40010400
 8000618:	20000194 	.word	0x20000194

0800061c <EXTI3_IRQHandler>:
 void EXTI3_IRQHandler(void) {EXTI->PR |= (1 << 3); if (EXTI_Callbacks[3]) EXTI_Callbacks[3](3);}
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
 8000620:	4b07      	ldr	r3, [pc, #28]	@ (8000640 <EXTI3_IRQHandler+0x24>)
 8000622:	695b      	ldr	r3, [r3, #20]
 8000624:	4a06      	ldr	r2, [pc, #24]	@ (8000640 <EXTI3_IRQHandler+0x24>)
 8000626:	f043 0308 	orr.w	r3, r3, #8
 800062a:	6153      	str	r3, [r2, #20]
 800062c:	4b05      	ldr	r3, [pc, #20]	@ (8000644 <EXTI3_IRQHandler+0x28>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d003      	beq.n	800063c <EXTI3_IRQHandler+0x20>
 8000634:	4b03      	ldr	r3, [pc, #12]	@ (8000644 <EXTI3_IRQHandler+0x28>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	2003      	movs	r0, #3
 800063a:	4798      	blx	r3
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40010400 	.word	0x40010400
 8000644:	20000194 	.word	0x20000194

08000648 <EXTI4_IRQHandler>:
 void EXTI4_IRQHandler(void) {EXTI->PR |= (1 << 4); if (EXTI_Callbacks[4]) EXTI_Callbacks[4](4);}
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
 800064c:	4b07      	ldr	r3, [pc, #28]	@ (800066c <EXTI4_IRQHandler+0x24>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	4a06      	ldr	r2, [pc, #24]	@ (800066c <EXTI4_IRQHandler+0x24>)
 8000652:	f043 0310 	orr.w	r3, r3, #16
 8000656:	6153      	str	r3, [r2, #20]
 8000658:	4b05      	ldr	r3, [pc, #20]	@ (8000670 <EXTI4_IRQHandler+0x28>)
 800065a:	691b      	ldr	r3, [r3, #16]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d003      	beq.n	8000668 <EXTI4_IRQHandler+0x20>
 8000660:	4b03      	ldr	r3, [pc, #12]	@ (8000670 <EXTI4_IRQHandler+0x28>)
 8000662:	691b      	ldr	r3, [r3, #16]
 8000664:	2004      	movs	r0, #4
 8000666:	4798      	blx	r3
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40010400 	.word	0x40010400
 8000670:	20000194 	.word	0x20000194

08000674 <EXTI9_5_IRQHandler>:
 //Must find which pin in 5-9 range triggered handler
 void EXTI9_5_IRQHandler(void) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
     for (uint8_t i = 5; i <= 9; i++) {
 800067a:	2305      	movs	r3, #5
 800067c:	71fb      	strb	r3, [r7, #7]
 800067e:	e022      	b.n	80006c6 <EXTI9_5_IRQHandler+0x52>
         if (EXTI->PR & (1 << i)) {
 8000680:	4b15      	ldr	r3, [pc, #84]	@ (80006d8 <EXTI9_5_IRQHandler+0x64>)
 8000682:	695b      	ldr	r3, [r3, #20]
 8000684:	79fa      	ldrb	r2, [r7, #7]
 8000686:	2101      	movs	r1, #1
 8000688:	fa01 f202 	lsl.w	r2, r1, r2
 800068c:	4013      	ands	r3, r2
 800068e:	2b00      	cmp	r3, #0
 8000690:	d016      	beq.n	80006c0 <EXTI9_5_IRQHandler+0x4c>
             EXTI->PR |= (1 << i);  // Clear pending flag
 8000692:	4b11      	ldr	r3, [pc, #68]	@ (80006d8 <EXTI9_5_IRQHandler+0x64>)
 8000694:	695b      	ldr	r3, [r3, #20]
 8000696:	79fa      	ldrb	r2, [r7, #7]
 8000698:	2101      	movs	r1, #1
 800069a:	fa01 f202 	lsl.w	r2, r1, r2
 800069e:	4611      	mov	r1, r2
 80006a0:	4a0d      	ldr	r2, [pc, #52]	@ (80006d8 <EXTI9_5_IRQHandler+0x64>)
 80006a2:	430b      	orrs	r3, r1
 80006a4:	6153      	str	r3, [r2, #20]
             if (EXTI_Callbacks[i]) EXTI_Callbacks[i](i);  // Call user-defined function
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	4a0c      	ldr	r2, [pc, #48]	@ (80006dc <EXTI9_5_IRQHandler+0x68>)
 80006aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d006      	beq.n	80006c0 <EXTI9_5_IRQHandler+0x4c>
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	4a09      	ldr	r2, [pc, #36]	@ (80006dc <EXTI9_5_IRQHandler+0x68>)
 80006b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ba:	79fa      	ldrb	r2, [r7, #7]
 80006bc:	4610      	mov	r0, r2
 80006be:	4798      	blx	r3
     for (uint8_t i = 5; i <= 9; i++) {
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	3301      	adds	r3, #1
 80006c4:	71fb      	strb	r3, [r7, #7]
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	2b09      	cmp	r3, #9
 80006ca:	d9d9      	bls.n	8000680 <EXTI9_5_IRQHandler+0xc>
         }
     }
 }
 80006cc:	bf00      	nop
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40010400 	.word	0x40010400
 80006dc:	20000194 	.word	0x20000194

080006e0 <EXTI15_10_IRQHandler>:

 void EXTI15_10_IRQHandler(void) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
     for (uint8_t i = 10; i <= 15; i++) {
 80006e6:	230a      	movs	r3, #10
 80006e8:	71fb      	strb	r3, [r7, #7]
 80006ea:	e022      	b.n	8000732 <EXTI15_10_IRQHandler+0x52>
         if (EXTI->PR & (1 << i)) {
 80006ec:	4b15      	ldr	r3, [pc, #84]	@ (8000744 <EXTI15_10_IRQHandler+0x64>)
 80006ee:	695b      	ldr	r3, [r3, #20]
 80006f0:	79fa      	ldrb	r2, [r7, #7]
 80006f2:	2101      	movs	r1, #1
 80006f4:	fa01 f202 	lsl.w	r2, r1, r2
 80006f8:	4013      	ands	r3, r2
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d016      	beq.n	800072c <EXTI15_10_IRQHandler+0x4c>
             EXTI->PR |= (1 << i);  // Clear pending flag
 80006fe:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <EXTI15_10_IRQHandler+0x64>)
 8000700:	695b      	ldr	r3, [r3, #20]
 8000702:	79fa      	ldrb	r2, [r7, #7]
 8000704:	2101      	movs	r1, #1
 8000706:	fa01 f202 	lsl.w	r2, r1, r2
 800070a:	4611      	mov	r1, r2
 800070c:	4a0d      	ldr	r2, [pc, #52]	@ (8000744 <EXTI15_10_IRQHandler+0x64>)
 800070e:	430b      	orrs	r3, r1
 8000710:	6153      	str	r3, [r2, #20]
             if (EXTI_Callbacks[i]) EXTI_Callbacks[i](i);  // Call user-defined function
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	4a0c      	ldr	r2, [pc, #48]	@ (8000748 <EXTI15_10_IRQHandler+0x68>)
 8000716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d006      	beq.n	800072c <EXTI15_10_IRQHandler+0x4c>
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	4a09      	ldr	r2, [pc, #36]	@ (8000748 <EXTI15_10_IRQHandler+0x68>)
 8000722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000726:	79fa      	ldrb	r2, [r7, #7]
 8000728:	4610      	mov	r0, r2
 800072a:	4798      	blx	r3
     for (uint8_t i = 10; i <= 15; i++) {
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	3301      	adds	r3, #1
 8000730:	71fb      	strb	r3, [r7, #7]
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2b0f      	cmp	r3, #15
 8000736:	d9d9      	bls.n	80006ec <EXTI15_10_IRQHandler+0xc>
         }
     }
 }
 8000738:	bf00      	nop
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40010400 	.word	0x40010400
 8000748:	20000194 	.word	0x20000194

0800074c <enable_interupt>:



 void enable_interupt(GPIO *port_pt, uint8_t pin_index,
 					trigger_type trigger, uint8_t priority,
 					void (*interupt_handler)(uint8_t pin_index)){
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	4608      	mov	r0, r1
 8000756:	4611      	mov	r1, r2
 8000758:	461a      	mov	r2, r3
 800075a:	4603      	mov	r3, r0
 800075c:	70fb      	strb	r3, [r7, #3]
 800075e:	460b      	mov	r3, r1
 8000760:	70bb      	strb	r3, [r7, #2]
 8000762:	4613      	mov	r3, r2
 8000764:	707b      	strb	r3, [r7, #1]

 	//Link interupt_handler function to appropriate EXTI_Callback
 	EXTI_Callbacks[pin_index] = interupt_handler;
 8000766:	78fb      	ldrb	r3, [r7, #3]
 8000768:	493b      	ldr	r1, [pc, #236]	@ (8000858 <enable_interupt+0x10c>)
 800076a:	69ba      	ldr	r2, [r7, #24]
 800076c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000770:	b672      	cpsid	i
}
 8000772:	bf00      	nop
 	// Disable the interrupts while messing around with the settings
 	//  otherwise can lead to strange behaviour
 	__disable_irq();

 	// Enable the system configuration controller (SYSCFG in RCC)
 	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000774:	4b39      	ldr	r3, [pc, #228]	@ (800085c <enable_interupt+0x110>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	4a38      	ldr	r2, [pc, #224]	@ (800085c <enable_interupt+0x110>)
 800077a:	f043 0301 	orr.w	r3, r3, #1
 800077e:	6193      	str	r3, [r2, #24]

 	//Tell pin-0 multiplexer to target selected-port (PORT_IND)

 	//If pin 0-3 or 12-15 :

 	uint32_t exticr_shift = 4 * (pin_index % 4);
 8000780:	78fb      	ldrb	r3, [r7, #3]
 8000782:	f003 0303 	and.w	r3, r3, #3
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	60fb      	str	r3, [r7, #12]
 	SYSCFG->EXTICR[pin_index / 4] &= ~(0xF << exticr_shift); // clear old bits
 800078a:	4a35      	ldr	r2, [pc, #212]	@ (8000860 <enable_interupt+0x114>)
 800078c:	78fb      	ldrb	r3, [r7, #3]
 800078e:	089b      	lsrs	r3, r3, #2
 8000790:	b2d8      	uxtb	r0, r3
 8000792:	4603      	mov	r3, r0
 8000794:	3302      	adds	r3, #2
 8000796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800079a:	210f      	movs	r1, #15
 800079c:	68fa      	ldr	r2, [r7, #12]
 800079e:	fa01 f202 	lsl.w	r2, r1, r2
 80007a2:	43d2      	mvns	r2, r2
 80007a4:	492e      	ldr	r1, [pc, #184]	@ (8000860 <enable_interupt+0x114>)
 80007a6:	401a      	ands	r2, r3
 80007a8:	1c83      	adds	r3, r0, #2
 80007aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 	SYSCFG->EXTICR[pin_index / 4] |= (port_pt->PORT_IND << exticr_shift); // set new bits
 80007ae:	4a2c      	ldr	r2, [pc, #176]	@ (8000860 <enable_interupt+0x114>)
 80007b0:	78fb      	ldrb	r3, [r7, #3]
 80007b2:	089b      	lsrs	r3, r3, #2
 80007b4:	b2d8      	uxtb	r0, r3
 80007b6:	4603      	mov	r3, r0
 80007b8:	3302      	adds	r3, #2
 80007ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	7812      	ldrb	r2, [r2, #0]
 80007c2:	4611      	mov	r1, r2
 80007c4:	68fa      	ldr	r2, [r7, #12]
 80007c6:	fa01 f202 	lsl.w	r2, r1, r2
 80007ca:	4925      	ldr	r1, [pc, #148]	@ (8000860 <enable_interupt+0x114>)
 80007cc:	431a      	orrs	r2, r3
 80007ce:	1c83      	adds	r3, r0, #2
 80007d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

 	//  Select interrupt on rising/falling edge (pins are consecutive bits)
 	if (trigger==RISING_EDGE){
 80007d4:	78bb      	ldrb	r3, [r7, #2]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d10a      	bne.n	80007f0 <enable_interupt+0xa4>
 		//Set rising-edge
 		EXTI->RTSR |= (1 << pin_index);
 80007da:	4b22      	ldr	r3, [pc, #136]	@ (8000864 <enable_interupt+0x118>)
 80007dc:	689b      	ldr	r3, [r3, #8]
 80007de:	78fa      	ldrb	r2, [r7, #3]
 80007e0:	2101      	movs	r1, #1
 80007e2:	fa01 f202 	lsl.w	r2, r1, r2
 80007e6:	4611      	mov	r1, r2
 80007e8:	4a1e      	ldr	r2, [pc, #120]	@ (8000864 <enable_interupt+0x118>)
 80007ea:	430b      	orrs	r3, r1
 80007ec:	6093      	str	r3, [r2, #8]
 80007ee:	e009      	b.n	8000804 <enable_interupt+0xb8>
 	} else{
 		//Set falling-edge
 		EXTI->FTSR |= (1 << pin_index);
 80007f0:	4b1c      	ldr	r3, [pc, #112]	@ (8000864 <enable_interupt+0x118>)
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	78fa      	ldrb	r2, [r7, #3]
 80007f6:	2101      	movs	r1, #1
 80007f8:	fa01 f202 	lsl.w	r2, r1, r2
 80007fc:	4611      	mov	r1, r2
 80007fe:	4a19      	ldr	r2, [pc, #100]	@ (8000864 <enable_interupt+0x118>)
 8000800:	430b      	orrs	r3, r1
 8000802:	60d3      	str	r3, [r2, #12]
 	}


 	// set the interrupt from EXTI line x as 'not masked' - as in, enable it.
 	EXTI->IMR |= (1 << pin_index);
 8000804:	4b17      	ldr	r3, [pc, #92]	@ (8000864 <enable_interupt+0x118>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	78fa      	ldrb	r2, [r7, #3]
 800080a:	2101      	movs	r1, #1
 800080c:	fa01 f202 	lsl.w	r2, r1, r2
 8000810:	4611      	mov	r1, r2
 8000812:	4a14      	ldr	r2, [pc, #80]	@ (8000864 <enable_interupt+0x118>)
 8000814:	430b      	orrs	r3, r1
 8000816:	6013      	str	r3, [r2, #0]

 	// Tell the NVIC module that EXTIx interrupts should be handled

 	//Pins 0-4 have a seperate request-num (from 6-10),
 	//pins 5-9 are all at 23, and pins 10-15 are at 40
 	uint8_t req_num = (pin_index <= 4) ? (6 + pin_index) :
 8000818:	78fb      	ldrb	r3, [r7, #3]
 800081a:	2b04      	cmp	r3, #4
 800081c:	d803      	bhi.n	8000826 <enable_interupt+0xda>
 800081e:	78fb      	ldrb	r3, [r7, #3]
 8000820:	3306      	adds	r3, #6
 8000822:	b2db      	uxtb	r3, r3
 8000824:	e005      	b.n	8000832 <enable_interupt+0xe6>
 8000826:	78fb      	ldrb	r3, [r7, #3]
 8000828:	2b09      	cmp	r3, #9
 800082a:	d801      	bhi.n	8000830 <enable_interupt+0xe4>
 800082c:	2317      	movs	r3, #23
 800082e:	e000      	b.n	8000832 <enable_interupt+0xe6>
 8000830:	2328      	movs	r3, #40	@ 0x28
 8000832:	72fb      	strb	r3, [r7, #11]
 					  (pin_index <= 9) ? 23 : 40;

 	NVIC_SetPriority(req_num, priority);  // Set Priority
 8000834:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000838:	787a      	ldrb	r2, [r7, #1]
 800083a:	4611      	mov	r1, r2
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff fd45 	bl	80002cc <__NVIC_SetPriority>
 	NVIC_EnableIRQ(req_num);
 8000842:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff fd22 	bl	8000290 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800084c:	b662      	cpsie	i
}
 800084e:	bf00      	nop

 	// Re-enable all interrupts (now that we are finished)
 	__enable_irq();

 }
 8000850:	bf00      	nop
 8000852:	3710      	adds	r7, #16
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000194 	.word	0x20000194
 800085c:	40021000 	.word	0x40021000
 8000860:	40010000 	.word	0x40010000
 8000864:	40010400 	.word	0x40010400

08000868 <transmit_game_state>:
// Track which touchpads have been used (true = used, false = available)
bool touchpad_used[6] = {false, false, false, false, false, false};
bool touch_enabled = true;
// =================================== Game Functions ====================================
// Prints via UART game state
void transmit_game_state() {
 8000868:	b580      	push	{r7, lr}
 800086a:	b090      	sub	sp, #64	@ 0x40
 800086c:	af00      	add	r7, sp, #0
    char buffer[64];
    sprintf(buffer, "DIGS REMAINING:%d TREASURES:%d\r\n\n", game.digs_remaining, game.items_left_to_find);
 800086e:	4b08      	ldr	r3, [pc, #32]	@ (8000890 <transmit_game_state+0x28>)
 8000870:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000872:	4b07      	ldr	r3, [pc, #28]	@ (8000890 <transmit_game_state+0x28>)
 8000874:	69db      	ldr	r3, [r3, #28]
 8000876:	4638      	mov	r0, r7
 8000878:	4906      	ldr	r1, [pc, #24]	@ (8000894 <transmit_game_state+0x2c>)
 800087a:	f004 f863 	bl	8004944 <siprintf>
    serial_output_string(buffer, &USART1_PORT);
 800087e:	463b      	mov	r3, r7
 8000880:	4905      	ldr	r1, [pc, #20]	@ (8000898 <transmit_game_state+0x30>)
 8000882:	4618      	mov	r0, r3
 8000884:	f000 ffd7 	bl	8001836 <serial_output_string>
}
 8000888:	bf00      	nop
 800088a:	3740      	adds	r7, #64	@ 0x40
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	2000000c 	.word	0x2000000c
 8000894:	08005140 	.word	0x08005140
 8000898:	20000068 	.word	0x20000068

0800089c <fn_a>:

// Timer callback
static void fn_a(const TimerSel sel, GameState *game) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b092      	sub	sp, #72	@ 0x48
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	6039      	str	r1, [r7, #0]
 80008a6:	71fb      	strb	r3, [r7, #7]
	game->game_time_remaining = game->game_time_remaining - 1;
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008ac:	1e5a      	subs	r2, r3, #1
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    char buffer[64];
    sprintf(buffer, "TIME REMAINING:%d\r\n", game->game_time_remaining);
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80008b6:	f107 0308 	add.w	r3, r7, #8
 80008ba:	4907      	ldr	r1, [pc, #28]	@ (80008d8 <fn_a+0x3c>)
 80008bc:	4618      	mov	r0, r3
 80008be:	f004 f841 	bl	8004944 <siprintf>
    serial_output_string(buffer, &USART1_PORT);
 80008c2:	f107 0308 	add.w	r3, r7, #8
 80008c6:	4905      	ldr	r1, [pc, #20]	@ (80008dc <fn_a+0x40>)
 80008c8:	4618      	mov	r0, r3
 80008ca:	f000 ffb4 	bl	8001836 <serial_output_string>
}
 80008ce:	bf00      	nop
 80008d0:	3748      	adds	r7, #72	@ 0x48
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	08005164 	.word	0x08005164
 80008dc:	20000068 	.word	0x20000068

080008e0 <reset_touchpads>:

// Add this function to reset all touchpads (for game start)
void reset_touchpads(void) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
    // Reset tracking array
    for (int i = 0; i < 6; i++) {
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	e007      	b.n	80008fc <reset_touchpads+0x1c>
        touchpad_used[i] = false;
 80008ec:	4a1a      	ldr	r2, [pc, #104]	@ (8000958 <reset_touchpads+0x78>)
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	4413      	add	r3, r2
 80008f2:	2200      	movs	r2, #0
 80008f4:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 6; i++) {
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	3301      	adds	r3, #1
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	2b05      	cmp	r3, #5
 8000900:	ddf4      	ble.n	80008ec <reset_touchpads+0xc>
    }

    // Re-enable all touchpad interrupts
    static const uint8_t touch_pins[6] = {7, 6, 5, 4, 3, 13};
    for (int i = 0; i < 6; i++) {
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	e01b      	b.n	8000940 <reset_touchpads+0x60>
        uint8_t pin_num = touch_pins[i];
 8000908:	4a14      	ldr	r2, [pc, #80]	@ (800095c <reset_touchpads+0x7c>)
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	4413      	add	r3, r2
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	71fb      	strb	r3, [r7, #7]
        EXTI->IMR |= (1 << pin_num);   // Unmask (enable) the interrupt
 8000912:	4b13      	ldr	r3, [pc, #76]	@ (8000960 <reset_touchpads+0x80>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	79fa      	ldrb	r2, [r7, #7]
 8000918:	2101      	movs	r1, #1
 800091a:	fa01 f202 	lsl.w	r2, r1, r2
 800091e:	4611      	mov	r1, r2
 8000920:	4a0f      	ldr	r2, [pc, #60]	@ (8000960 <reset_touchpads+0x80>)
 8000922:	430b      	orrs	r3, r1
 8000924:	6013      	str	r3, [r2, #0]
        EXTI->PR |= (1 << pin_num);    // Clear any pending interrupt
 8000926:	4b0e      	ldr	r3, [pc, #56]	@ (8000960 <reset_touchpads+0x80>)
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	79fa      	ldrb	r2, [r7, #7]
 800092c:	2101      	movs	r1, #1
 800092e:	fa01 f202 	lsl.w	r2, r1, r2
 8000932:	4611      	mov	r1, r2
 8000934:	4a0a      	ldr	r2, [pc, #40]	@ (8000960 <reset_touchpads+0x80>)
 8000936:	430b      	orrs	r3, r1
 8000938:	6153      	str	r3, [r2, #20]
    for (int i = 0; i < 6; i++) {
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	3301      	adds	r3, #1
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	2b05      	cmp	r3, #5
 8000944:	dde0      	ble.n	8000908 <reset_touchpads+0x28>
    }

    serial_output_string("All touchpads re-enabled\r\n", &USART1_PORT);
 8000946:	4907      	ldr	r1, [pc, #28]	@ (8000964 <reset_touchpads+0x84>)
 8000948:	4807      	ldr	r0, [pc, #28]	@ (8000968 <reset_touchpads+0x88>)
 800094a:	f000 ff74 	bl	8001836 <serial_output_string>
}
 800094e:	bf00      	nop
 8000950:	3710      	adds	r7, #16
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	200002c0 	.word	0x200002c0
 800095c:	08005348 	.word	0x08005348
 8000960:	40010400 	.word	0x40010400
 8000964:	20000068 	.word	0x20000068
 8000968:	08005178 	.word	0x08005178

0800096c <disable_touchpad>:

// Add this function to disable a specific touchpad
void disable_touchpad(uint8_t touchpad_index) {
 800096c:	b580      	push	{r7, lr}
 800096e:	b094      	sub	sp, #80	@ 0x50
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	71fb      	strb	r3, [r7, #7]
    if (touchpad_index < 6) {
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	2b05      	cmp	r3, #5
 800097a:	d830      	bhi.n	80009de <disable_touchpad+0x72>
        touchpad_used[touchpad_index] = true;
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	4a1a      	ldr	r2, [pc, #104]	@ (80009e8 <disable_touchpad+0x7c>)
 8000980:	2101      	movs	r1, #1
 8000982:	54d1      	strb	r1, [r2, r3]

        // Map touchpad index to actual pin numbers
        static const uint8_t touch_pins[6] = {7, 6, 5, 4, 3, 13}; // PB7, PB6, PB5, PB4, PB3, PB13
        uint8_t pin_num = touch_pins[touchpad_index];
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	4a19      	ldr	r2, [pc, #100]	@ (80009ec <disable_touchpad+0x80>)
 8000988:	5cd3      	ldrb	r3, [r2, r3]
 800098a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

        // Disable the interrupt for this specific pin
        EXTI->IMR &= ~(1 << pin_num);  // Mask (disable) the interrupt
 800098e:	4b18      	ldr	r3, [pc, #96]	@ (80009f0 <disable_touchpad+0x84>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8000996:	2101      	movs	r1, #1
 8000998:	fa01 f202 	lsl.w	r2, r1, r2
 800099c:	43d2      	mvns	r2, r2
 800099e:	4611      	mov	r1, r2
 80009a0:	4a13      	ldr	r2, [pc, #76]	@ (80009f0 <disable_touchpad+0x84>)
 80009a2:	400b      	ands	r3, r1
 80009a4:	6013      	str	r3, [r2, #0]
        EXTI->PR |= (1 << pin_num);    // Clear any pending interrupt
 80009a6:	4b12      	ldr	r3, [pc, #72]	@ (80009f0 <disable_touchpad+0x84>)
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80009ae:	2101      	movs	r1, #1
 80009b0:	fa01 f202 	lsl.w	r2, r1, r2
 80009b4:	4611      	mov	r1, r2
 80009b6:	4a0e      	ldr	r2, [pc, #56]	@ (80009f0 <disable_touchpad+0x84>)
 80009b8:	430b      	orrs	r3, r1
 80009ba:	6153      	str	r3, [r2, #20]

        char buffer[64];
        sprintf(buffer, "Touchpad %d (PB%d) disabled - already used\r\n", touch_pins[touchpad_index], pin_num);
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	4a0b      	ldr	r2, [pc, #44]	@ (80009ec <disable_touchpad+0x80>)
 80009c0:	5cd3      	ldrb	r3, [r2, r3]
 80009c2:	461a      	mov	r2, r3
 80009c4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80009c8:	f107 000c 	add.w	r0, r7, #12
 80009cc:	4909      	ldr	r1, [pc, #36]	@ (80009f4 <disable_touchpad+0x88>)
 80009ce:	f003 ffb9 	bl	8004944 <siprintf>
        serial_output_string(buffer, &USART1_PORT);
 80009d2:	f107 030c 	add.w	r3, r7, #12
 80009d6:	4908      	ldr	r1, [pc, #32]	@ (80009f8 <disable_touchpad+0x8c>)
 80009d8:	4618      	mov	r0, r3
 80009da:	f000 ff2c 	bl	8001836 <serial_output_string>
    }
}
 80009de:	bf00      	nop
 80009e0:	3750      	adds	r7, #80	@ 0x50
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200002c0 	.word	0x200002c0
 80009ec:	08005350 	.word	0x08005350
 80009f0:	40010400 	.word	0x40010400
 80009f4:	08005194 	.word	0x08005194
 80009f8:	20000068 	.word	0x20000068

080009fc <start_game>:

// --- Start Game Signal (from USART or button) ---
void start_game(GameState *game) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	// Restart game state
    game->game_over = 0;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2200      	movs	r2, #0
 8000a08:	631a      	str	r2, [r3, #48]	@ 0x30
    game->game_time_remaining = 240;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	22f0      	movs	r2, #240	@ 0xf0
 8000a0e:	62da      	str	r2, [r3, #44]	@ 0x2c
    game->digs_remaining = 4;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2204      	movs	r2, #4
 8000a14:	625a      	str	r2, [r3, #36]	@ 0x24

    int count = 0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 6; i++) {
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	613b      	str	r3, [r7, #16]
 8000a1e:	e00b      	b.n	8000a38 <start_game+0x3c>
        if (game->correct_servos[i] != 0) {
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d002      	beq.n	8000a32 <start_game+0x36>
            count++;
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 6; i++) {
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	3301      	adds	r3, #1
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]
 8000a3a:	2b05      	cmp	r3, #5
 8000a3c:	ddf0      	ble.n	8000a20 <start_game+0x24>
        }
    }
    game->total_items_to_find = count;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	697a      	ldr	r2, [r7, #20]
 8000a42:	635a      	str	r2, [r3, #52]	@ 0x34

    // Calibrate: Set all servos to 0°
    for (uint8_t servoId = 1; servoId <= 6; servoId++)
 8000a44:	2301      	movs	r3, #1
 8000a46:	73fb      	strb	r3, [r7, #15]
 8000a48:	e007      	b.n	8000a5a <start_game+0x5e>
    {
      SetServoAngle(servoId, 0);
 8000a4a:	7bfb      	ldrb	r3, [r7, #15]
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 f924 	bl	8000c9c <SetServoAngle>
    for (uint8_t servoId = 1; servoId <= 6; servoId++)
 8000a54:	7bfb      	ldrb	r3, [r7, #15]
 8000a56:	3301      	adds	r3, #1
 8000a58:	73fb      	strb	r3, [r7, #15]
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
 8000a5c:	2b06      	cmp	r3, #6
 8000a5e:	d9f4      	bls.n	8000a4a <start_game+0x4e>
    }

    reset_touchpads();
 8000a60:	f7ff ff3e 	bl	80008e0 <reset_touchpads>

    // Init game timer
    timer_init();
 8000a64:	f001 f92c 	bl	8001cc0 <timer_init>
    const TimerSel tim_a = TIMER_SEL_7;
 8000a68:	2304      	movs	r3, #4
 8000a6a:	73bb      	strb	r3, [r7, #14]
    timer_prescaler_set(tim_a, 11999);
 8000a6c:	7bbb      	ldrb	r3, [r7, #14]
 8000a6e:	f642 61df 	movw	r1, #11999	@ 0x2edf
 8000a72:	4618      	mov	r0, r3
 8000a74:	f001 fa08 	bl	8001e88 <timer_prescaler_set>
    timer_period_set(tim_a, 3999);
 8000a78:	7bbb      	ldrb	r3, [r7, #14]
 8000a7a:	f640 719f 	movw	r1, #3999	@ 0xf9f
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f001 f9de 	bl	8001e40 <timer_period_set>
    timer_silent_set(tim_a, false);
 8000a84:	7bbb      	ldrb	r3, [r7, #14]
 8000a86:	2100      	movs	r1, #0
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f001 f9bf 	bl	8001e0c <timer_silent_set>
    timer_recur_set(tim_a, true);
 8000a8e:	7bbb      	ldrb	r3, [r7, #14]
 8000a90:	2101      	movs	r1, #1
 8000a92:	4618      	mov	r0, r3
 8000a94:	f001 fa3c 	bl	8001f10 <timer_recur_set>
    timer_callback_set(tim_a, &fn_a);
 8000a98:	7bbb      	ldrb	r3, [r7, #14]
 8000a9a:	4909      	ldr	r1, [pc, #36]	@ (8000ac0 <start_game+0xc4>)
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f001 fabb 	bl	8002018 <timer_callback_set>
    timer_enable_set(tim_a, true);
 8000aa2:	7bbb      	ldrb	r3, [r7, #14]
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f001 f96c 	bl	8001d84 <timer_enable_set>

    serial_output_string("Game Started\r\n\n", &USART1_PORT);
 8000aac:	4905      	ldr	r1, [pc, #20]	@ (8000ac4 <start_game+0xc8>)
 8000aae:	4806      	ldr	r0, [pc, #24]	@ (8000ac8 <start_game+0xcc>)
 8000ab0:	f000 fec1 	bl	8001836 <serial_output_string>

    transmit_game_state();
 8000ab4:	f7ff fed8 	bl	8000868 <transmit_game_state>

}
 8000ab8:	bf00      	nop
 8000aba:	3718      	adds	r7, #24
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	0800089d 	.word	0x0800089d
 8000ac4:	20000068 	.word	0x20000068
 8000ac8:	080051c4 	.word	0x080051c4

08000acc <update_game_state>:

// Game variable update function
void update_game_state(uint8_t result, GameState *game, GameTriggers *triggers) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
 8000ad8:	73fb      	strb	r3, [r7, #15]
	// Update game state depending if successful dig
	if (result == 1) {
 8000ada:	7bfb      	ldrb	r3, [r7, #15]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d116      	bne.n	8000b0e <update_game_state+0x42>
		game->items_found++;
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	1c5a      	adds	r2, r3, #1
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	619a      	str	r2, [r3, #24]
		game->digs_remaining--;
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000aee:	1e5a      	subs	r2, r3, #1
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	625a      	str	r2, [r3, #36]	@ 0x24
		game->digs_taken--;
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	6a1b      	ldr	r3, [r3, #32]
 8000af8:	1e5a      	subs	r2, r3, #1
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	621a      	str	r2, [r3, #32]
		game->items_left_to_find--;
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	1e5a      	subs	r2, r3, #1
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	61da      	str	r2, [r3, #28]
		transmit_game_state();
 8000b08:	f7ff feae 	bl	8000868 <transmit_game_state>
	} else {
		game->digs_remaining--;
		game->digs_taken--;
		transmit_game_state();
	}
}
 8000b0c:	e00b      	b.n	8000b26 <update_game_state+0x5a>
		game->digs_remaining--;
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b12:	1e5a      	subs	r2, r3, #1
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	625a      	str	r2, [r3, #36]	@ 0x24
		game->digs_taken--;
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	6a1b      	ldr	r3, [r3, #32]
 8000b1c:	1e5a      	subs	r2, r3, #1
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	621a      	str	r2, [r3, #32]
		transmit_game_state();
 8000b22:	f7ff fea1 	bl	8000868 <transmit_game_state>
}
 8000b26:	bf00      	nop
 8000b28:	3710      	adds	r7, #16
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <check_game_over>:

//Check for game over conditions
uint8_t check_game_over(GameState *game) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
    if (game->digs_remaining == 0 || game->game_time_remaining == 1 || game->items_left_to_find == 0) {
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d007      	beq.n	8000b50 <check_game_over+0x20>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d003      	beq.n	8000b50 <check_game_over+0x20>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	69db      	ldr	r3, [r3, #28]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d11d      	bne.n	8000b8c <check_game_over+0x5c>
  	    const TimerSel tim_a = TIMER_SEL_7;
 8000b50:	2304      	movs	r3, #4
 8000b52:	73fb      	strb	r3, [r7, #15]

  	    if (game->items_left_to_find == 0) {
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	69db      	ldr	r3, [r3, #28]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d109      	bne.n	8000b70 <check_game_over+0x40>
      	  	timer_enable_set(tim_a, false);
 8000b5c:	7bfb      	ldrb	r3, [r7, #15]
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4618      	mov	r0, r3
 8000b62:	f001 f90f 	bl	8001d84 <timer_enable_set>

      		serial_output_string((char *) "You Win!\n", &USART1_PORT);
 8000b66:	490c      	ldr	r1, [pc, #48]	@ (8000b98 <check_game_over+0x68>)
 8000b68:	480c      	ldr	r0, [pc, #48]	@ (8000b9c <check_game_over+0x6c>)
 8000b6a:	f000 fe64 	bl	8001836 <serial_output_string>
 8000b6e:	e008      	b.n	8000b82 <check_game_over+0x52>

      	}
      	else {
      	  	timer_enable_set(tim_a, false);
 8000b70:	7bfb      	ldrb	r3, [r7, #15]
 8000b72:	2100      	movs	r1, #0
 8000b74:	4618      	mov	r0, r3
 8000b76:	f001 f905 	bl	8001d84 <timer_enable_set>

      		serial_output_string((char *) "Game Over\n", &USART1_PORT);
 8000b7a:	4907      	ldr	r1, [pc, #28]	@ (8000b98 <check_game_over+0x68>)
 8000b7c:	4808      	ldr	r0, [pc, #32]	@ (8000ba0 <check_game_over+0x70>)
 8000b7e:	f000 fe5a 	bl	8001836 <serial_output_string>
      	}

        game->game_over = 1;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2201      	movs	r2, #1
 8000b86:	631a      	str	r2, [r3, #48]	@ 0x30
        return 1;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	e000      	b.n	8000b8e <check_game_over+0x5e>
    }
    return 0;
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3710      	adds	r7, #16
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000068 	.word	0x20000068
 8000b9c:	080051d4 	.word	0x080051d4
 8000ba0:	080051e0 	.word	0x080051e0

08000ba4 <handle_touch>:


// =================================== Callback Functions ===================================

// Each EXTI handler calls this with the corresponding pin number
void handle_touch(uint8_t pad) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b094      	sub	sp, #80	@ 0x50
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
	if (touch_enabled){
 8000bae:	4b1f      	ldr	r3, [pc, #124]	@ (8000c2c <handle_touch+0x88>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d037      	beq.n	8000c26 <handle_touch+0x82>
		// Map pin number to touchpad index
		static const uint8_t touch_pins[6] = {7, 6, 5, 4, 3, 13}; // PB7, PB6, PB5, PB4, PB3, PB13
		uint8_t touchpad_index = 255; // Invalid index
 8000bb6:	23ff      	movs	r3, #255	@ 0xff
 8000bb8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

		for (uint8_t i = 0; i < 6; i++) {
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8000bc2:	e010      	b.n	8000be6 <handle_touch+0x42>
			if (pad == touch_pins[i]) {
 8000bc4:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000bc8:	4a19      	ldr	r2, [pc, #100]	@ (8000c30 <handle_touch+0x8c>)
 8000bca:	5cd3      	ldrb	r3, [r2, r3]
 8000bcc:	79fa      	ldrb	r2, [r7, #7]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d104      	bne.n	8000bdc <handle_touch+0x38>
				touchpad_index = i;
 8000bd2:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000bd6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
				break;
 8000bda:	e008      	b.n	8000bee <handle_touch+0x4a>
		for (uint8_t i = 0; i < 6; i++) {
 8000bdc:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000be0:	3301      	adds	r3, #1
 8000be2:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8000be6:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000bea:	2b05      	cmp	r3, #5
 8000bec:	d9ea      	bls.n	8000bc4 <handle_touch+0x20>
			}
		}

		// Check if this touchpad has already been used
		if (touchpad_index < 6 && touchpad_used[touchpad_index]) {
 8000bee:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000bf2:	2b05      	cmp	r3, #5
 8000bf4:	d814      	bhi.n	8000c20 <handle_touch+0x7c>
 8000bf6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000bfa:	4a0e      	ldr	r2, [pc, #56]	@ (8000c34 <handle_touch+0x90>)
 8000bfc:	5cd3      	ldrb	r3, [r2, r3]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d00e      	beq.n	8000c20 <handle_touch+0x7c>
			char buffer[64];
			sprintf(buffer, "Touchpad %d already used - ignoring\r\n", touchpad_index);
 8000c02:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8000c06:	f107 030c 	add.w	r3, r7, #12
 8000c0a:	490b      	ldr	r1, [pc, #44]	@ (8000c38 <handle_touch+0x94>)
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f003 fe99 	bl	8004944 <siprintf>
			serial_output_string(buffer, &USART1_PORT);
 8000c12:	f107 030c 	add.w	r3, r7, #12
 8000c16:	4909      	ldr	r1, [pc, #36]	@ (8000c3c <handle_touch+0x98>)
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f000 fe0c 	bl	8001836 <serial_output_string>
 8000c1e:	e002      	b.n	8000c26 <handle_touch+0x82>
			return; // Ignore this touch
		}

		// If we get here, the touchpad is valid and hasn't been used
		triggers.touchpad_pressed = pad;
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	4a07      	ldr	r2, [pc, #28]	@ (8000c40 <handle_touch+0x9c>)
 8000c24:	6013      	str	r3, [r2, #0]
	}
}
 8000c26:	3750      	adds	r7, #80	@ 0x50
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000064 	.word	0x20000064
 8000c30:	08005358 	.word	0x08005358
 8000c34:	200002c0 	.word	0x200002c0
 8000c38:	080051ec 	.word	0x080051ec
 8000c3c:	20000068 	.word	0x20000068
 8000c40:	20000044 	.word	0x20000044

08000c44 <output_callback>:

// Transmit callback
void output_callback() {
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
	return;
 8000c48:	bf00      	nop
}
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
	...

08000c54 <input_callback>:

// Receive callback
void input_callback(char *data, uint32_t len) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
	// Check for game start input
	char compare[] = "game start";
 8000c5e:	4a0d      	ldr	r2, [pc, #52]	@ (8000c94 <input_callback+0x40>)
 8000c60:	f107 0308 	add.w	r3, r7, #8
 8000c64:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c66:	c303      	stmia	r3!, {r0, r1}
 8000c68:	801a      	strh	r2, [r3, #0]
 8000c6a:	3302      	adds	r3, #2
 8000c6c:	0c12      	lsrs	r2, r2, #16
 8000c6e:	701a      	strb	r2, [r3, #0]
	uint16_t test = strcmp(data, compare);
 8000c70:	f107 0308 	add.w	r3, r7, #8
 8000c74:	4619      	mov	r1, r3
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f7ff faaa 	bl	80001d0 <strcmp>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	82fb      	strh	r3, [r7, #22]
	if (!test) {
 8000c80:	8afb      	ldrh	r3, [r7, #22]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d102      	bne.n	8000c8c <input_callback+0x38>
		start_game(&game);
 8000c86:	4804      	ldr	r0, [pc, #16]	@ (8000c98 <input_callback+0x44>)
 8000c88:	f7ff feb8 	bl	80009fc <start_game>
	}
}
 8000c8c:	bf00      	nop
 8000c8e:	3718      	adds	r7, #24
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	08005214 	.word	0x08005214
 8000c98:	2000000c 	.word	0x2000000c

08000c9c <SetServoAngle>:

void SetServoAngle(uint8_t servoId, uint16_t angle)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b094      	sub	sp, #80	@ 0x50
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	460a      	mov	r2, r1
 8000ca6:	71fb      	strb	r3, [r7, #7]
 8000ca8:	4613      	mov	r3, r2
 8000caa:	80bb      	strh	r3, [r7, #4]
  if (angle > 180) angle = 180;
 8000cac:	88bb      	ldrh	r3, [r7, #4]
 8000cae:	2bb4      	cmp	r3, #180	@ 0xb4
 8000cb0:	d901      	bls.n	8000cb6 <SetServoAngle+0x1a>
 8000cb2:	23b4      	movs	r3, #180	@ 0xb4
 8000cb4:	80bb      	strh	r3, [r7, #4]
  uint32_t pulse = PWM_MIN_PULSE + (angle * (PWM_MAX_PULSE - PWM_MIN_PULSE) / 180);
 8000cb6:	88bb      	ldrh	r3, [r7, #4]
 8000cb8:	22c8      	movs	r2, #200	@ 0xc8
 8000cba:	fb02 f303 	mul.w	r3, r2, r3
 8000cbe:	4a26      	ldr	r2, [pc, #152]	@ (8000d58 <SetServoAngle+0xbc>)
 8000cc0:	fb82 1203 	smull	r1, r2, r2, r3
 8000cc4:	441a      	add	r2, r3
 8000cc6:	11d2      	asrs	r2, r2, #7
 8000cc8:	17db      	asrs	r3, r3, #31
 8000cca:	1ad3      	subs	r3, r2, r3
 8000ccc:	3332      	adds	r3, #50	@ 0x32
 8000cce:	64fb      	str	r3, [r7, #76]	@ 0x4c

  switch (servoId)
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	2b05      	cmp	r3, #5
 8000cd6:	d82d      	bhi.n	8000d34 <SetServoAngle+0x98>
 8000cd8:	a201      	add	r2, pc, #4	@ (adr r2, 8000ce0 <SetServoAngle+0x44>)
 8000cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cde:	bf00      	nop
 8000ce0:	08000cf9 	.word	0x08000cf9
 8000ce4:	08000d03 	.word	0x08000d03
 8000ce8:	08000d0d 	.word	0x08000d0d
 8000cec:	08000d17 	.word	0x08000d17
 8000cf0:	08000d21 	.word	0x08000d21
 8000cf4:	08000d2b 	.word	0x08000d2b
  {
    case 1: __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse); break; // PE2
 8000cf8:	4b18      	ldr	r3, [pc, #96]	@ (8000d5c <SetServoAngle+0xc0>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000cfe:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d00:	e019      	b.n	8000d36 <SetServoAngle+0x9a>
    case 2: __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulse); break; // PE3
 8000d02:	4b16      	ldr	r3, [pc, #88]	@ (8000d5c <SetServoAngle+0xc0>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000d08:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d0a:	e014      	b.n	8000d36 <SetServoAngle+0x9a>
    case 3: __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse); break; // PA0
 8000d0c:	4b14      	ldr	r3, [pc, #80]	@ (8000d60 <SetServoAngle+0xc4>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000d12:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d14:	e00f      	b.n	8000d36 <SetServoAngle+0x9a>
    case 4: __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pulse); break; // PA1
 8000d16:	4b12      	ldr	r3, [pc, #72]	@ (8000d60 <SetServoAngle+0xc4>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000d1c:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d1e:	e00a      	b.n	8000d36 <SetServoAngle+0x9a>
    case 5: __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pulse); break; // PD12
 8000d20:	4b10      	ldr	r3, [pc, #64]	@ (8000d64 <SetServoAngle+0xc8>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000d26:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d28:	e005      	b.n	8000d36 <SetServoAngle+0x9a>
    case 6: __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, pulse); break; // PD13
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d64 <SetServoAngle+0xc8>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000d30:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d32:	e000      	b.n	8000d36 <SetServoAngle+0x9a>
    default: break;
 8000d34:	bf00      	nop
  }

  // Log action
  char txBuffer[64];
  sprintf(txBuffer, "Setting Servo %d to %d°\r\n", servoId, angle);
 8000d36:	79fa      	ldrb	r2, [r7, #7]
 8000d38:	88bb      	ldrh	r3, [r7, #4]
 8000d3a:	f107 000c 	add.w	r0, r7, #12
 8000d3e:	490a      	ldr	r1, [pc, #40]	@ (8000d68 <SetServoAngle+0xcc>)
 8000d40:	f003 fe00 	bl	8004944 <siprintf>
  serial_output_string(txBuffer, &USART1_PORT);
 8000d44:	f107 030c 	add.w	r3, r7, #12
 8000d48:	4908      	ldr	r1, [pc, #32]	@ (8000d6c <SetServoAngle+0xd0>)
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 fd73 	bl	8001836 <serial_output_string>
}
 8000d50:	bf00      	nop
 8000d52:	3750      	adds	r7, #80	@ 0x50
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	b60b60b7 	.word	0xb60b60b7
 8000d5c:	20000220 	.word	0x20000220
 8000d60:	200001d4 	.word	0x200001d4
 8000d64:	2000026c 	.word	0x2000026c
 8000d68:	08005220 	.word	0x08005220
 8000d6c:	20000068 	.word	0x20000068

08000d70 <get_servo>:
  * @retval None
  */


void get_servo(uint8_t pin_index)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b096      	sub	sp, #88	@ 0x58
 8000d74:	af02      	add	r7, sp, #8
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
  // Map EXTI line to touch sensor index (0-5)
  static const uint8_t touch_pins[6] = {7, 6, 5, 4, 3, 13}; // PB7, PB6, PB5, PB4, PB3, PB13
  static const uint8_t touch_ports[6] = {1, 1, 1, 1, 1, 1}; // GPIOB=1
  uint8_t touch_index = 255;
 8000d7a:	23ff      	movs	r3, #255	@ 0xff
 8000d7c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  for (uint8_t i = 0; i < 6; i++)
 8000d80:	2300      	movs	r3, #0
 8000d82:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8000d86:	e016      	b.n	8000db6 <get_servo+0x46>
  {
    if (pin_index == touch_pins[i] && touch_ports[i] == 1) // All on GPIOB
 8000d88:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000d8c:	4a35      	ldr	r2, [pc, #212]	@ (8000e64 <get_servo+0xf4>)
 8000d8e:	5cd3      	ldrb	r3, [r2, r3]
 8000d90:	79fa      	ldrb	r2, [r7, #7]
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d10a      	bne.n	8000dac <get_servo+0x3c>
 8000d96:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000d9a:	4a33      	ldr	r2, [pc, #204]	@ (8000e68 <get_servo+0xf8>)
 8000d9c:	5cd3      	ldrb	r3, [r2, r3]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d104      	bne.n	8000dac <get_servo+0x3c>
    {
      touch_index = i;
 8000da2:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000da6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      break;
 8000daa:	e008      	b.n	8000dbe <get_servo+0x4e>
  for (uint8_t i = 0; i < 6; i++)
 8000dac:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000db0:	3301      	adds	r3, #1
 8000db2:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8000db6:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000dba:	2b05      	cmp	r3, #5
 8000dbc:	d9e4      	bls.n	8000d88 <get_servo+0x18>
    }
  }

  if (touch_index < 6)
 8000dbe:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000dc2:	2b05      	cmp	r3, #5
 8000dc4:	d84a      	bhi.n	8000e5c <get_servo+0xec>
  {
    uint8_t servoId = touch_to_servo_map[touch_index];
 8000dc6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000dca:	4a28      	ldr	r2, [pc, #160]	@ (8000e6c <get_servo+0xfc>)
 8000dcc:	5cd3      	ldrb	r3, [r2, r3]
 8000dce:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
    if (servoId >= 1 && servoId <= 6)
 8000dd2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d040      	beq.n	8000e5c <get_servo+0xec>
 8000dda:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000dde:	2b06      	cmp	r3, #6
 8000de0:	d83c      	bhi.n	8000e5c <get_servo+0xec>
    {
      // Toggle servo state
      uint8_t servoIndex = servoId - 1; // Array index (0-5)
 8000de2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000de6:	3b01      	subs	r3, #1
 8000de8:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
      servo_states[servoIndex] = !servo_states[servoIndex];
 8000dec:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000df0:	4a1f      	ldr	r2, [pc, #124]	@ (8000e70 <get_servo+0x100>)
 8000df2:	5cd3      	ldrb	r3, [r2, r3]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	bf0c      	ite	eq
 8000df8:	2301      	moveq	r3, #1
 8000dfa:	2300      	movne	r3, #0
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000e02:	4611      	mov	r1, r2
 8000e04:	4a1a      	ldr	r2, [pc, #104]	@ (8000e70 <get_servo+0x100>)
 8000e06:	54d1      	strb	r1, [r2, r3]
      uint16_t angle = servo_states[servoIndex] ? 90 : 0;
 8000e08:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000e0c:	4a18      	ldr	r2, [pc, #96]	@ (8000e70 <get_servo+0x100>)
 8000e0e:	5cd3      	ldrb	r3, [r2, r3]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <get_servo+0xa8>
 8000e14:	235a      	movs	r3, #90	@ 0x5a
 8000e16:	e000      	b.n	8000e1a <get_servo+0xaa>
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      char txBuffer[64];
      sprintf(txBuffer, "Touch detected on PB%d, toggling Servo %d to %d°\r\n\n",
              touch_pins[touch_index], servoId, angle);
 8000e1e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000e22:	4a10      	ldr	r2, [pc, #64]	@ (8000e64 <get_servo+0xf4>)
 8000e24:	5cd3      	ldrb	r3, [r2, r3]
      sprintf(txBuffer, "Touch detected on PB%d, toggling Servo %d to %d°\r\n\n",
 8000e26:	4619      	mov	r1, r3
 8000e28:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8000e2c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8000e30:	f107 0008 	add.w	r0, r7, #8
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	4613      	mov	r3, r2
 8000e38:	460a      	mov	r2, r1
 8000e3a:	490e      	ldr	r1, [pc, #56]	@ (8000e74 <get_servo+0x104>)
 8000e3c:	f003 fd82 	bl	8004944 <siprintf>
      serial_output_string(txBuffer, &USART1_PORT);
 8000e40:	f107 0308 	add.w	r3, r7, #8
 8000e44:	490c      	ldr	r1, [pc, #48]	@ (8000e78 <get_servo+0x108>)
 8000e46:	4618      	mov	r0, r3
 8000e48:	f000 fcf5 	bl	8001836 <serial_output_string>


      SetServoAngle(servoId, angle);
 8000e4c:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8000e50:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000e54:	4611      	mov	r1, r2
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff ff20 	bl	8000c9c <SetServoAngle>
    }
  }
}
 8000e5c:	bf00      	nop
 8000e5e:	3750      	adds	r7, #80	@ 0x50
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	08005360 	.word	0x08005360
 8000e68:	08005368 	.word	0x08005368
 8000e6c:	20000000 	.word	0x20000000
 8000e70:	200002b8 	.word	0x200002b8
 8000e74:	0800523c 	.word	0x0800523c
 8000e78:	20000068 	.word	0x20000068

08000e7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b0ac      	sub	sp, #176	@ 0xb0
 8000e80:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e82:	f001 f951 	bl	8002128 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e86:	f000 f9b9 	bl	80011fc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e8a:	f000 fb2d 	bl	80014e8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e8e:	f000 f9f9 	bl	8001284 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e92:	f000 fa5d 	bl	8001350 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e96:	f000 fac1 	bl	800141c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  //HAL_UART_Receive_IT(&huart1, &rx_data, 1);

  // Initialize touch sensors
  GPIO *touch_pads_pb = init_port(B, INPUT, 3, 13); // PB3-PB7, PB13
 8000e9a:	230d      	movs	r3, #13
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	f7ff fa57 	bl	8000354 <init_port>
 8000ea6:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
  GPIO *trim_pot = init_port(A, ANALOG, 4, 4);
 8000eaa:	2304      	movs	r3, #4
 8000eac:	2204      	movs	r2, #4
 8000eae:	2102      	movs	r1, #2
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	f7ff fa4f 	bl	8000354 <init_port>
 8000eb6:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

  // Enable interrupts for touch sensors
  enable_interupt(touch_pads_pb, 3, RISING_EDGE, 0, &handle_touch); // PB3
 8000eba:	4bbc      	ldr	r3, [pc, #752]	@ (80011ac <main+0x330>)
 8000ebc:	9300      	str	r3, [sp, #0]
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2103      	movs	r1, #3
 8000ec4:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8000ec8:	f7ff fc40 	bl	800074c <enable_interupt>
  enable_interupt(touch_pads_pb, 4, RISING_EDGE, 0, &handle_touch); // PB4
 8000ecc:	4bb7      	ldr	r3, [pc, #732]	@ (80011ac <main+0x330>)
 8000ece:	9300      	str	r3, [sp, #0]
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2104      	movs	r1, #4
 8000ed6:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8000eda:	f7ff fc37 	bl	800074c <enable_interupt>
  enable_interupt(touch_pads_pb, 5, RISING_EDGE, 0, &handle_touch); // PB5
 8000ede:	4bb3      	ldr	r3, [pc, #716]	@ (80011ac <main+0x330>)
 8000ee0:	9300      	str	r3, [sp, #0]
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2105      	movs	r1, #5
 8000ee8:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8000eec:	f7ff fc2e 	bl	800074c <enable_interupt>
  enable_interupt(touch_pads_pb, 6, RISING_EDGE, 0, &handle_touch); // PB6
 8000ef0:	4bae      	ldr	r3, [pc, #696]	@ (80011ac <main+0x330>)
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2106      	movs	r1, #6
 8000efa:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8000efe:	f7ff fc25 	bl	800074c <enable_interupt>
  enable_interupt(touch_pads_pb, 7, RISING_EDGE, 0, &handle_touch); // PB7
 8000f02:	4baa      	ldr	r3, [pc, #680]	@ (80011ac <main+0x330>)
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	2300      	movs	r3, #0
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2107      	movs	r1, #7
 8000f0c:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8000f10:	f7ff fc1c 	bl	800074c <enable_interupt>
  enable_interupt(touch_pads_pb, 13, RISING_EDGE, 0, &handle_touch); // PB13
 8000f14:	4ba5      	ldr	r3, [pc, #660]	@ (80011ac <main+0x330>)
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	2300      	movs	r3, #0
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	210d      	movs	r1, #13
 8000f1e:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8000f22:	f7ff fc13 	bl	800074c <enable_interupt>

  // Initialize servos: Start PWM
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // Servo 1: PE2
 8000f26:	2100      	movs	r1, #0
 8000f28:	48a1      	ldr	r0, [pc, #644]	@ (80011b0 <main+0x334>)
 8000f2a:	f002 fe29 	bl	8003b80 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // Servo 2: PE3
 8000f2e:	2104      	movs	r1, #4
 8000f30:	489f      	ldr	r0, [pc, #636]	@ (80011b0 <main+0x334>)
 8000f32:	f002 fe25 	bl	8003b80 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // Servo 3: PA0
 8000f36:	2100      	movs	r1, #0
 8000f38:	489e      	ldr	r0, [pc, #632]	@ (80011b4 <main+0x338>)
 8000f3a:	f002 fe21 	bl	8003b80 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // Servo 4: PA1
 8000f3e:	2104      	movs	r1, #4
 8000f40:	489c      	ldr	r0, [pc, #624]	@ (80011b4 <main+0x338>)
 8000f42:	f002 fe1d 	bl	8003b80 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); // Servo 5: PD12
 8000f46:	2100      	movs	r1, #0
 8000f48:	489b      	ldr	r0, [pc, #620]	@ (80011b8 <main+0x33c>)
 8000f4a:	f002 fe19 	bl	8003b80 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); // Servo 6: PD13
 8000f4e:	2104      	movs	r1, #4
 8000f50:	4899      	ldr	r0, [pc, #612]	@ (80011b8 <main+0x33c>)
 8000f52:	f002 fe15 	bl	8003b80 <HAL_TIM_PWM_Start>

  // Serial Init
  serial_initialise(115200, &USART1_PORT, &output_callback, &input_callback);
 8000f56:	4b99      	ldr	r3, [pc, #612]	@ (80011bc <main+0x340>)
 8000f58:	4a99      	ldr	r2, [pc, #612]	@ (80011c0 <main+0x344>)
 8000f5a:	499a      	ldr	r1, [pc, #616]	@ (80011c4 <main+0x348>)
 8000f5c:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 8000f60:	f000 fbec 	bl	800173c <serial_initialise>

  enable_interrupts(&USART1_PORT);
 8000f64:	4897      	ldr	r0, [pc, #604]	@ (80011c4 <main+0x348>)
 8000f66:	f000 fc89 	bl	800187c <enable_interrupts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint16_t dest_val;
	  read_pins_analog(trim_pot, &dest_val);
 8000f6a:	f107 0386 	add.w	r3, r7, #134	@ 0x86
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8000f74:	f7ff fab2 	bl	80004dc <read_pins_analog>

	  float angle = (float)(dest_val * 100) /0xfff;
 8000f78:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	2364      	movs	r3, #100	@ 0x64
 8000f80:	fb02 f303 	mul.w	r3, r2, r3
 8000f84:	ee07 3a90 	vmov	s15, r3
 8000f88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f8c:	eddf 6a8e 	vldr	s13, [pc, #568]	@ 80011c8 <main+0x34c>
 8000f90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f94:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
	  SetServoAngle(1, angle);
 8000f98:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8000f9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fa0:	ee17 3a90 	vmov	r3, s15
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	2001      	movs	r0, #1
 8000faa:	f7ff fe77 	bl	8000c9c <SetServoAngle>

	  // Wait for game start
	  if (game.game_over) {
 8000fae:	4b87      	ldr	r3, [pc, #540]	@ (80011cc <main+0x350>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f040 80f6 	bne.w	80011a4 <main+0x328>
		  continue;
	  }

	  int check = check_game_over(&game);
 8000fb8:	4884      	ldr	r0, [pc, #528]	@ (80011cc <main+0x350>)
 8000fba:	f7ff fdb9 	bl	8000b30 <check_game_over>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	  if (check == 1) {
 8000fc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	f000 80ed 	beq.w	80011a8 <main+0x32c>
		  continue;
	  }

	  if (triggers.touchpad_pressed != -1) {
 8000fce:	4b80      	ldr	r3, [pc, #512]	@ (80011d0 <main+0x354>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fd6:	f000 80e1 	beq.w	800119c <main+0x320>
		  triggers.servo_controlled = triggers.touchpad_pressed;
 8000fda:	4b7d      	ldr	r3, [pc, #500]	@ (80011d0 <main+0x354>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a7c      	ldr	r2, [pc, #496]	@ (80011d0 <main+0x354>)
 8000fe0:	60d3      	str	r3, [r2, #12]

	      transmit_game_state();
 8000fe2:	f7ff fc41 	bl	8000868 <transmit_game_state>

	      char buffer[64];
	      sprintf(buffer, "touchpad %d chosen, door %d being controlled!\r\n", triggers.touchpad_pressed,  triggers.servo_controlled);
 8000fe6:	4b7a      	ldr	r3, [pc, #488]	@ (80011d0 <main+0x354>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	4b79      	ldr	r3, [pc, #484]	@ (80011d0 <main+0x354>)
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	1d38      	adds	r0, r7, #4
 8000ff0:	4978      	ldr	r1, [pc, #480]	@ (80011d4 <main+0x358>)
 8000ff2:	f003 fca7 	bl	8004944 <siprintf>
	      serial_output_string(buffer, &USART1_PORT);
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	4972      	ldr	r1, [pc, #456]	@ (80011c4 <main+0x348>)
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 fc1b 	bl	8001836 <serial_output_string>

	      if (triggers.servo_controlled != -1 && triggers.servo_controlled != last_servo_selection) {
 8001000:	4b73      	ldr	r3, [pc, #460]	@ (80011d0 <main+0x354>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001008:	f000 80c4 	beq.w	8001194 <main+0x318>
 800100c:	4b70      	ldr	r3, [pc, #448]	@ (80011d0 <main+0x354>)
 800100e:	68da      	ldr	r2, [r3, #12]
 8001010:	4b71      	ldr	r3, [pc, #452]	@ (80011d8 <main+0x35c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	429a      	cmp	r2, r3
 8001016:	f000 80bd 	beq.w	8001194 <main+0x318>

	          // Get touchpad index for disabling
	          static const uint8_t touch_pins[6] = {7, 6, 5, 4, 3, 13};
	          uint8_t touchpad_index = 255;
 800101a:	23ff      	movs	r3, #255	@ 0xff
 800101c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	          for (uint8_t i = 0; i < 6; i++) {
 8001020:	2300      	movs	r3, #0
 8001022:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
 8001026:	e011      	b.n	800104c <main+0x1d0>
	              if (triggers.touchpad_pressed == touch_pins[i]) {
 8001028:	4b69      	ldr	r3, [pc, #420]	@ (80011d0 <main+0x354>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f897 20a6 	ldrb.w	r2, [r7, #166]	@ 0xa6
 8001030:	496a      	ldr	r1, [pc, #424]	@ (80011dc <main+0x360>)
 8001032:	5c8a      	ldrb	r2, [r1, r2]
 8001034:	4293      	cmp	r3, r2
 8001036:	d104      	bne.n	8001042 <main+0x1c6>
	                  touchpad_index = i;
 8001038:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 800103c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	                  break;
 8001040:	e008      	b.n	8001054 <main+0x1d8>
	          for (uint8_t i = 0; i < 6; i++) {
 8001042:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8001046:	3301      	adds	r3, #1
 8001048:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
 800104c:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8001050:	2b05      	cmp	r3, #5
 8001052:	d9e9      	bls.n	8001028 <main+0x1ac>
	              }
	          }

	    	  get_servo(triggers.touchpad_pressed);
 8001054:	4b5e      	ldr	r3, [pc, #376]	@ (80011d0 <main+0x354>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	b2db      	uxtb	r3, r3
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fe88 	bl	8000d70 <get_servo>

	          // Disable this touchpad after use
	          if (touchpad_index < 6) {
 8001060:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8001064:	2b05      	cmp	r3, #5
 8001066:	d804      	bhi.n	8001072 <main+0x1f6>
	              disable_touchpad(touchpad_index);
 8001068:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fc7d 	bl	800096c <disable_touchpad>
	          }


	    	  // Run peek loop for short time
	    	  uint32_t peek_start = HAL_GetTick();
 8001072:	f001 f8b3 	bl	80021dc <HAL_GetTick>
 8001076:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
	    	  bool committed_dig = false;
 800107a:	2300      	movs	r3, #0
 800107c:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5


	    	  while (HAL_GetTick() - peek_start < 6000) {
 8001080:	e018      	b.n	80010b4 <main+0x238>
	    		  touch_enabled = false;
 8001082:	4b57      	ldr	r3, [pc, #348]	@ (80011e0 <main+0x364>)
 8001084:	2200      	movs	r2, #0
 8001086:	701a      	strb	r2, [r3, #0]

	        	  //door_manager_update(manager);

	        	  //float trimpot = map_range((float)analog_out[0], 0.0f, 4095.0f, 0.0f, 100.0f);

	        	  float trimpot = 0;
 8001088:	f04f 0300 	mov.w	r3, #0
 800108c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	        	  if (trimpot >= triggers.peek_threshold) {
 8001090:	4b4f      	ldr	r3, [pc, #316]	@ (80011d0 <main+0x354>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	ee07 3a90 	vmov	s15, r3
 8001098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800109c:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 80010a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a8:	da00      	bge.n	80010ac <main+0x230>
 80010aa:	e003      	b.n	80010b4 <main+0x238>
	        		  committed_dig = true;
 80010ac:	2301      	movs	r3, #1
 80010ae:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5
	        		  break;
 80010b2:	e009      	b.n	80010c8 <main+0x24c>
	    	  while (HAL_GetTick() - peek_start < 6000) {
 80010b4:	f001 f892 	bl	80021dc <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	f241 726f 	movw	r2, #5999	@ 0x176f
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d9dc      	bls.n	8001082 <main+0x206>
	        	  }
	           }
	    	   // Now process peek or dig
	    	   if (committed_dig) {
 80010c8:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d038      	beq.n	8001142 <main+0x2c6>
	    		   // Dig
	        	   bool success = false;
 80010d0:	2300      	movs	r3, #0
 80010d2:	f887 30a4 	strb.w	r3, [r7, #164]	@ 0xa4
	        	   for (int i = 0; i < 6; i++) {
 80010d6:	2300      	movs	r3, #0
 80010d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80010dc:	e011      	b.n	8001102 <main+0x286>
	        		   if (game.correct_servos[i] == triggers.servo_controlled) {
 80010de:	4a3b      	ldr	r2, [pc, #236]	@ (80011cc <main+0x350>)
 80010e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80010e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010e8:	4b39      	ldr	r3, [pc, #228]	@ (80011d0 <main+0x354>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d103      	bne.n	80010f8 <main+0x27c>
	        		   success = true;
 80010f0:	2301      	movs	r3, #1
 80010f2:	f887 30a4 	strb.w	r3, [r7, #164]	@ 0xa4
	        	       break;
 80010f6:	e008      	b.n	800110a <main+0x28e>
	        	   for (int i = 0; i < 6; i++) {
 80010f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80010fc:	3301      	adds	r3, #1
 80010fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001102:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001106:	2b05      	cmp	r3, #5
 8001108:	dde9      	ble.n	80010de <main+0x262>
	        	        }
	        	    }

	        	    update_game_state(success ? 1 : 0, &game, &triggers);
 800110a:	f897 30a4 	ldrb.w	r3, [r7, #164]	@ 0xa4
 800110e:	4a30      	ldr	r2, [pc, #192]	@ (80011d0 <main+0x354>)
 8001110:	492e      	ldr	r1, [pc, #184]	@ (80011cc <main+0x350>)
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fcda 	bl	8000acc <update_game_state>
	        	    char idk[64];
	        	    sprintf(idk, "DIG %s at pad %d\r\n\n", success ? "SUCCESS" : "FAIL", triggers.servo_controlled);
 8001118:	f897 30a4 	ldrb.w	r3, [r7, #164]	@ 0xa4
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <main+0x2a8>
 8001120:	4a30      	ldr	r2, [pc, #192]	@ (80011e4 <main+0x368>)
 8001122:	e000      	b.n	8001126 <main+0x2aa>
 8001124:	4a30      	ldr	r2, [pc, #192]	@ (80011e8 <main+0x36c>)
 8001126:	4b2a      	ldr	r3, [pc, #168]	@ (80011d0 <main+0x354>)
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 800112e:	492f      	ldr	r1, [pc, #188]	@ (80011ec <main+0x370>)
 8001130:	f003 fc08 	bl	8004944 <siprintf>
	        	    serial_output_string(idk, &USART1_PORT);
 8001134:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001138:	4922      	ldr	r1, [pc, #136]	@ (80011c4 <main+0x348>)
 800113a:	4618      	mov	r0, r3
 800113c:	f000 fb7b 	bl	8001836 <serial_output_string>
 8001140:	e008      	b.n	8001154 <main+0x2d8>

	             } else {
	            	 game.peeks_used++;
 8001142:	4b22      	ldr	r3, [pc, #136]	@ (80011cc <main+0x350>)
 8001144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001146:	3301      	adds	r3, #1
 8001148:	4a20      	ldr	r2, [pc, #128]	@ (80011cc <main+0x350>)
 800114a:	6293      	str	r3, [r2, #40]	@ 0x28
	           		 serial_output_string((char *) "PEEK ONLY\r\n\n", &USART1_PORT);
 800114c:	491d      	ldr	r1, [pc, #116]	@ (80011c4 <main+0x348>)
 800114e:	4828      	ldr	r0, [pc, #160]	@ (80011f0 <main+0x374>)
 8001150:	f000 fb71 	bl	8001836 <serial_output_string>

	             }

	        	 triggers.touchpad_pressed = -1;
 8001154:	4b1e      	ldr	r3, [pc, #120]	@ (80011d0 <main+0x354>)
 8001156:	f04f 32ff 	mov.w	r2, #4294967295
 800115a:	601a      	str	r2, [r3, #0]
	        	 last_servo_selection = triggers.servo_controlled;
 800115c:	4b1c      	ldr	r3, [pc, #112]	@ (80011d0 <main+0x354>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	4a1d      	ldr	r2, [pc, #116]	@ (80011d8 <main+0x35c>)
 8001162:	6013      	str	r3, [r2, #0]
	        	 triggers.servo_controlled = -1;
 8001164:	4b1a      	ldr	r3, [pc, #104]	@ (80011d0 <main+0x354>)
 8001166:	f04f 32ff 	mov.w	r2, #4294967295
 800116a:	60da      	str	r2, [r3, #12]

	        	 char yes[64];
	        	 sprintf(yes, "touchpad reset to %d, servo %d, previous servo %d\r\n\n", triggers.touchpad_pressed, triggers.servo_controlled, last_servo_selection);
 800116c:	4b18      	ldr	r3, [pc, #96]	@ (80011d0 <main+0x354>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4b17      	ldr	r3, [pc, #92]	@ (80011d0 <main+0x354>)
 8001172:	68d9      	ldr	r1, [r3, #12]
 8001174:	4b18      	ldr	r3, [pc, #96]	@ (80011d8 <main+0x35c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	460b      	mov	r3, r1
 8001180:	491c      	ldr	r1, [pc, #112]	@ (80011f4 <main+0x378>)
 8001182:	f003 fbdf 	bl	8004944 <siprintf>
	        	 serial_output_string(yes, &USART1_PORT);
 8001186:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800118a:	490e      	ldr	r1, [pc, #56]	@ (80011c4 <main+0x348>)
 800118c:	4618      	mov	r0, r3
 800118e:	f000 fb52 	bl	8001836 <serial_output_string>
	      if (triggers.servo_controlled != -1 && triggers.servo_controlled != last_servo_selection) {
 8001192:	e003      	b.n	800119c <main+0x320>
	         } else {
	        	 serial_output_string((char *) "invalid choice", &USART1_PORT);
 8001194:	490b      	ldr	r1, [pc, #44]	@ (80011c4 <main+0x348>)
 8001196:	4818      	ldr	r0, [pc, #96]	@ (80011f8 <main+0x37c>)
 8001198:	f000 fb4d 	bl	8001836 <serial_output_string>
	         }

	     }
	  touch_enabled = true;
 800119c:	4b10      	ldr	r3, [pc, #64]	@ (80011e0 <main+0x364>)
 800119e:	2201      	movs	r2, #1
 80011a0:	701a      	strb	r2, [r3, #0]
 80011a2:	e6e2      	b.n	8000f6a <main+0xee>
		  continue;
 80011a4:	bf00      	nop
 80011a6:	e6e0      	b.n	8000f6a <main+0xee>
		  continue;
 80011a8:	bf00      	nop
  {
 80011aa:	e6de      	b.n	8000f6a <main+0xee>
 80011ac:	08000ba5 	.word	0x08000ba5
 80011b0:	20000220 	.word	0x20000220
 80011b4:	200001d4 	.word	0x200001d4
 80011b8:	2000026c 	.word	0x2000026c
 80011bc:	08000c55 	.word	0x08000c55
 80011c0:	08000c45 	.word	0x08000c45
 80011c4:	20000068 	.word	0x20000068
 80011c8:	457ff000 	.word	0x457ff000
 80011cc:	2000000c 	.word	0x2000000c
 80011d0:	20000044 	.word	0x20000044
 80011d4:	08005274 	.word	0x08005274
 80011d8:	20000008 	.word	0x20000008
 80011dc:	08005370 	.word	0x08005370
 80011e0:	20000064 	.word	0x20000064
 80011e4:	080052a4 	.word	0x080052a4
 80011e8:	080052ac 	.word	0x080052ac
 80011ec:	080052b4 	.word	0x080052b4
 80011f0:	080052c8 	.word	0x080052c8
 80011f4:	080052d8 	.word	0x080052d8
 80011f8:	08005310 	.word	0x08005310

080011fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b090      	sub	sp, #64	@ 0x40
 8001200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001202:	f107 0318 	add.w	r3, r7, #24
 8001206:	2228      	movs	r2, #40	@ 0x28
 8001208:	2100      	movs	r1, #0
 800120a:	4618      	mov	r0, r3
 800120c:	f003 fbba 	bl	8004984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800121e:	2301      	movs	r3, #1
 8001220:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001222:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001226:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001228:	2300      	movs	r3, #0
 800122a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800122c:	2302      	movs	r3, #2
 800122e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001230:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001234:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001236:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800123a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800123c:	f107 0318 	add.w	r3, r7, #24
 8001240:	4618      	mov	r0, r3
 8001242:	f001 fa37 	bl	80026b4 <HAL_RCC_OscConfig>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800124c:	f000 f9f0 	bl	8001630 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001250:	230f      	movs	r3, #15
 8001252:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001254:	2302      	movs	r3, #2
 8001256:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800125c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001260:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	2101      	movs	r1, #1
 800126a:	4618      	mov	r0, r3
 800126c:	f002 fa60 	bl	8003730 <HAL_RCC_ClockConfig>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001276:	f000 f9db 	bl	8001630 <Error_Handler>
  }
}
 800127a:	bf00      	nop
 800127c:	3740      	adds	r7, #64	@ 0x40
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08a      	sub	sp, #40	@ 0x28
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001296:	463b      	mov	r3, r7
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
 80012a4:	615a      	str	r2, [r3, #20]
 80012a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012a8:	4b28      	ldr	r3, [pc, #160]	@ (800134c <MX_TIM2_Init+0xc8>)
 80012aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 479; // 48 MHz / 480 = 100 kHz
 80012b0:	4b26      	ldr	r3, [pc, #152]	@ (800134c <MX_TIM2_Init+0xc8>)
 80012b2:	f240 12df 	movw	r2, #479	@ 0x1df
 80012b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b8:	4b24      	ldr	r3, [pc, #144]	@ (800134c <MX_TIM2_Init+0xc8>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = PWM_PERIOD_TICKS - 1; // 20 ms
 80012be:	4b23      	ldr	r3, [pc, #140]	@ (800134c <MX_TIM2_Init+0xc8>)
 80012c0:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80012c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c6:	4b21      	ldr	r3, [pc, #132]	@ (800134c <MX_TIM2_Init+0xc8>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012cc:	4b1f      	ldr	r3, [pc, #124]	@ (800134c <MX_TIM2_Init+0xc8>)
 80012ce:	2280      	movs	r2, #128	@ 0x80
 80012d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012d2:	481e      	ldr	r0, [pc, #120]	@ (800134c <MX_TIM2_Init+0xc8>)
 80012d4:	f002 fbfc 	bl	8003ad0 <HAL_TIM_PWM_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 80012de:	f000 f9a7 	bl	8001630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e6:	2300      	movs	r3, #0
 80012e8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012ea:	f107 031c 	add.w	r3, r7, #28
 80012ee:	4619      	mov	r1, r3
 80012f0:	4816      	ldr	r0, [pc, #88]	@ (800134c <MX_TIM2_Init+0xc8>)
 80012f2:	f003 f9f1 	bl	80046d8 <HAL_TIMEx_MasterConfigSynchronization>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80012fc:	f000 f998 	bl	8001630 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001300:	2360      	movs	r3, #96	@ 0x60
 8001302:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001308:	2300      	movs	r3, #0
 800130a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800130c:	2300      	movs	r3, #0
 800130e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001310:	463b      	mov	r3, r7
 8001312:	2200      	movs	r2, #0
 8001314:	4619      	mov	r1, r3
 8001316:	480d      	ldr	r0, [pc, #52]	@ (800134c <MX_TIM2_Init+0xc8>)
 8001318:	f002 fd32 	bl	8003d80 <HAL_TIM_PWM_ConfigChannel>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001322:	f000 f985 	bl	8001630 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001326:	463b      	mov	r3, r7
 8001328:	2204      	movs	r2, #4
 800132a:	4619      	mov	r1, r3
 800132c:	4807      	ldr	r0, [pc, #28]	@ (800134c <MX_TIM2_Init+0xc8>)
 800132e:	f002 fd27 	bl	8003d80 <HAL_TIM_PWM_ConfigChannel>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8001338:	f000 f97a 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800133c:	4803      	ldr	r0, [pc, #12]	@ (800134c <MX_TIM2_Init+0xc8>)
 800133e:	f000 fba7 	bl	8001a90 <HAL_TIM_MspPostInit>
}
 8001342:	bf00      	nop
 8001344:	3728      	adds	r7, #40	@ 0x28
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200001d4 	.word	0x200001d4

08001350 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	@ 0x28
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_Init 0 */
  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001356:	f107 031c 	add.w	r3, r7, #28
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001362:	463b      	mov	r3, r7
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
 8001370:	615a      	str	r2, [r3, #20]
 8001372:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001374:	4b27      	ldr	r3, [pc, #156]	@ (8001414 <MX_TIM3_Init+0xc4>)
 8001376:	4a28      	ldr	r2, [pc, #160]	@ (8001418 <MX_TIM3_Init+0xc8>)
 8001378:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 479; // 48 MHz / 480 = 100 kHz
 800137a:	4b26      	ldr	r3, [pc, #152]	@ (8001414 <MX_TIM3_Init+0xc4>)
 800137c:	f240 12df 	movw	r2, #479	@ 0x1df
 8001380:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001382:	4b24      	ldr	r3, [pc, #144]	@ (8001414 <MX_TIM3_Init+0xc4>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = PWM_PERIOD_TICKS - 1; // 20 ms
 8001388:	4b22      	ldr	r3, [pc, #136]	@ (8001414 <MX_TIM3_Init+0xc4>)
 800138a:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800138e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001390:	4b20      	ldr	r3, [pc, #128]	@ (8001414 <MX_TIM3_Init+0xc4>)
 8001392:	2200      	movs	r2, #0
 8001394:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001396:	4b1f      	ldr	r3, [pc, #124]	@ (8001414 <MX_TIM3_Init+0xc4>)
 8001398:	2280      	movs	r2, #128	@ 0x80
 800139a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800139c:	481d      	ldr	r0, [pc, #116]	@ (8001414 <MX_TIM3_Init+0xc4>)
 800139e:	f002 fb97 	bl	8003ad0 <HAL_TIM_PWM_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 80013a8:	f000 f942 	bl	8001630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ac:	2300      	movs	r3, #0
 80013ae:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013b4:	f107 031c 	add.w	r3, r7, #28
 80013b8:	4619      	mov	r1, r3
 80013ba:	4816      	ldr	r0, [pc, #88]	@ (8001414 <MX_TIM3_Init+0xc4>)
 80013bc:	f003 f98c 	bl	80046d8 <HAL_TIMEx_MasterConfigSynchronization>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80013c6:	f000 f933 	bl	8001630 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ca:	2360      	movs	r3, #96	@ 0x60
 80013cc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013da:	463b      	mov	r3, r7
 80013dc:	2200      	movs	r2, #0
 80013de:	4619      	mov	r1, r3
 80013e0:	480c      	ldr	r0, [pc, #48]	@ (8001414 <MX_TIM3_Init+0xc4>)
 80013e2:	f002 fccd 	bl	8003d80 <HAL_TIM_PWM_ConfigChannel>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 80013ec:	f000 f920 	bl	8001630 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013f0:	463b      	mov	r3, r7
 80013f2:	2204      	movs	r2, #4
 80013f4:	4619      	mov	r1, r3
 80013f6:	4807      	ldr	r0, [pc, #28]	@ (8001414 <MX_TIM3_Init+0xc4>)
 80013f8:	f002 fcc2 	bl	8003d80 <HAL_TIM_PWM_ConfigChannel>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8001402:	f000 f915 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001406:	4803      	ldr	r0, [pc, #12]	@ (8001414 <MX_TIM3_Init+0xc4>)
 8001408:	f000 fb42 	bl	8001a90 <HAL_TIM_MspPostInit>
}
 800140c:	bf00      	nop
 800140e:	3728      	adds	r7, #40	@ 0x28
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000220 	.word	0x20000220
 8001418:	40000400 	.word	0x40000400

0800141c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	@ 0x28
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_Init 0 */
  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001422:	f107 031c 	add.w	r3, r7, #28
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800142e:	463b      	mov	r3, r7
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
 800143c:	615a      	str	r2, [r3, #20]
 800143e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */
  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001440:	4b27      	ldr	r3, [pc, #156]	@ (80014e0 <MX_TIM4_Init+0xc4>)
 8001442:	4a28      	ldr	r2, [pc, #160]	@ (80014e4 <MX_TIM4_Init+0xc8>)
 8001444:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 479; // 48 MHz / 480 = 100 kHz
 8001446:	4b26      	ldr	r3, [pc, #152]	@ (80014e0 <MX_TIM4_Init+0xc4>)
 8001448:	f240 12df 	movw	r2, #479	@ 0x1df
 800144c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800144e:	4b24      	ldr	r3, [pc, #144]	@ (80014e0 <MX_TIM4_Init+0xc4>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = PWM_PERIOD_TICKS - 1; // 20 ms
 8001454:	4b22      	ldr	r3, [pc, #136]	@ (80014e0 <MX_TIM4_Init+0xc4>)
 8001456:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800145a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800145c:	4b20      	ldr	r3, [pc, #128]	@ (80014e0 <MX_TIM4_Init+0xc4>)
 800145e:	2200      	movs	r2, #0
 8001460:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001462:	4b1f      	ldr	r3, [pc, #124]	@ (80014e0 <MX_TIM4_Init+0xc4>)
 8001464:	2280      	movs	r2, #128	@ 0x80
 8001466:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001468:	481d      	ldr	r0, [pc, #116]	@ (80014e0 <MX_TIM4_Init+0xc4>)
 800146a:	f002 fb31 	bl	8003ad0 <HAL_TIM_PWM_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8001474:	f000 f8dc 	bl	8001630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001480:	f107 031c 	add.w	r3, r7, #28
 8001484:	4619      	mov	r1, r3
 8001486:	4816      	ldr	r0, [pc, #88]	@ (80014e0 <MX_TIM4_Init+0xc4>)
 8001488:	f003 f926 	bl	80046d8 <HAL_TIMEx_MasterConfigSynchronization>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8001492:	f000 f8cd 	bl	8001630 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001496:	2360      	movs	r3, #96	@ 0x60
 8001498:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014a6:	463b      	mov	r3, r7
 80014a8:	2200      	movs	r2, #0
 80014aa:	4619      	mov	r1, r3
 80014ac:	480c      	ldr	r0, [pc, #48]	@ (80014e0 <MX_TIM4_Init+0xc4>)
 80014ae:	f002 fc67 	bl	8003d80 <HAL_TIM_PWM_ConfigChannel>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 80014b8:	f000 f8ba 	bl	8001630 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014bc:	463b      	mov	r3, r7
 80014be:	2204      	movs	r2, #4
 80014c0:	4619      	mov	r1, r3
 80014c2:	4807      	ldr	r0, [pc, #28]	@ (80014e0 <MX_TIM4_Init+0xc4>)
 80014c4:	f002 fc5c 	bl	8003d80 <HAL_TIM_PWM_ConfigChannel>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 80014ce:	f000 f8af 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80014d2:	4803      	ldr	r0, [pc, #12]	@ (80014e0 <MX_TIM4_Init+0xc4>)
 80014d4:	f000 fadc 	bl	8001a90 <HAL_TIM_MspPostInit>
}
 80014d8:	bf00      	nop
 80014da:	3728      	adds	r7, #40	@ 0x28
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	2000026c 	.word	0x2000026c
 80014e4:	40000800 	.word	0x40000800

080014e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	@ 0x28
 80014ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
 80014fc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fe:	4b47      	ldr	r3, [pc, #284]	@ (800161c <MX_GPIO_Init+0x134>)
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	4a46      	ldr	r2, [pc, #280]	@ (800161c <MX_GPIO_Init+0x134>)
 8001504:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001508:	6153      	str	r3, [r2, #20]
 800150a:	4b44      	ldr	r3, [pc, #272]	@ (800161c <MX_GPIO_Init+0x134>)
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001516:	4b41      	ldr	r3, [pc, #260]	@ (800161c <MX_GPIO_Init+0x134>)
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	4a40      	ldr	r2, [pc, #256]	@ (800161c <MX_GPIO_Init+0x134>)
 800151c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001520:	6153      	str	r3, [r2, #20]
 8001522:	4b3e      	ldr	r3, [pc, #248]	@ (800161c <MX_GPIO_Init+0x134>)
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800152e:	4b3b      	ldr	r3, [pc, #236]	@ (800161c <MX_GPIO_Init+0x134>)
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	4a3a      	ldr	r2, [pc, #232]	@ (800161c <MX_GPIO_Init+0x134>)
 8001534:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001538:	6153      	str	r3, [r2, #20]
 800153a:	4b38      	ldr	r3, [pc, #224]	@ (800161c <MX_GPIO_Init+0x134>)
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001546:	4b35      	ldr	r3, [pc, #212]	@ (800161c <MX_GPIO_Init+0x134>)
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	4a34      	ldr	r2, [pc, #208]	@ (800161c <MX_GPIO_Init+0x134>)
 800154c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001550:	6153      	str	r3, [r2, #20]
 8001552:	4b32      	ldr	r3, [pc, #200]	@ (800161c <MX_GPIO_Init+0x134>)
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800155e:	4b2f      	ldr	r3, [pc, #188]	@ (800161c <MX_GPIO_Init+0x134>)
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	4a2e      	ldr	r2, [pc, #184]	@ (800161c <MX_GPIO_Init+0x134>)
 8001564:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001568:	6153      	str	r3, [r2, #20]
 800156a:	4b2c      	ldr	r3, [pc, #176]	@ (800161c <MX_GPIO_Init+0x134>)
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001572:	603b      	str	r3, [r7, #0]
 8001574:	683b      	ldr	r3, [r7, #0]

  /* Configure PB3-PB7, PB13 for touch sensors */
  GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_13;
 8001576:	f242 03f8 	movw	r3, #8440	@ 0x20f8
 800157a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800157c:	2300      	movs	r3, #0
 800157e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN; // Ensure low when not touched
 8001580:	2302      	movs	r3, #2
 8001582:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	4619      	mov	r1, r3
 800158a:	4825      	ldr	r0, [pc, #148]	@ (8001620 <MX_GPIO_Init+0x138>)
 800158c:	f000 ff18 	bl	80023c0 <HAL_GPIO_Init>

  /* Configure PC4 (TX), PC5 (RX) for USART1 */
  GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 8001590:	2330      	movs	r3, #48	@ 0x30
 8001592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001594:	2302      	movs	r3, #2
 8001596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800159c:	2303      	movs	r3, #3
 800159e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015a0:	2307      	movs	r3, #7
 80015a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	4619      	mov	r1, r3
 80015aa:	481e      	ldr	r0, [pc, #120]	@ (8001624 <MX_GPIO_Init+0x13c>)
 80015ac:	f000 ff08 	bl	80023c0 <HAL_GPIO_Init>

  /* Configure PA0, PA1 for TIM2_CH1-2 (Servos 3-4) */
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80015b0:	2303      	movs	r3, #3
 80015b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015c0:	2301      	movs	r3, #1
 80015c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	4619      	mov	r1, r3
 80015ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ce:	f000 fef7 	bl	80023c0 <HAL_GPIO_Init>

  /* Configure PE2, PE3 for TIM3_CH1-2 (Servos 1-2) */
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 80015d2:	230c      	movs	r3, #12
 80015d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	2302      	movs	r3, #2
 80015d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015e2:	2302      	movs	r3, #2
 80015e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	4619      	mov	r1, r3
 80015ec:	480e      	ldr	r0, [pc, #56]	@ (8001628 <MX_GPIO_Init+0x140>)
 80015ee:	f000 fee7 	bl	80023c0 <HAL_GPIO_Init>

  /* Configure PD12, PD13 for TIM4_CH1-2 (Servos 5-6) */
  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 80015f2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80015f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f8:	2302      	movs	r3, #2
 80015fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001600:	2300      	movs	r3, #0
 8001602:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001604:	2302      	movs	r3, #2
 8001606:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	4619      	mov	r1, r3
 800160e:	4807      	ldr	r0, [pc, #28]	@ (800162c <MX_GPIO_Init+0x144>)
 8001610:	f000 fed6 	bl	80023c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001614:	bf00      	nop
 8001616:	3728      	adds	r7, #40	@ 0x28
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40021000 	.word	0x40021000
 8001620:	48000400 	.word	0x48000400
 8001624:	48000800 	.word	0x48000800
 8001628:	48001000 	.word	0x48001000
 800162c:	48000c00 	.word	0x48000c00

08001630 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001634:	b672      	cpsid	i
}
 8001636:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <Error_Handler+0x8>

0800163c <__NVIC_EnableIRQ>:
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164a:	2b00      	cmp	r3, #0
 800164c:	db0b      	blt.n	8001666 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	f003 021f 	and.w	r2, r3, #31
 8001654:	4907      	ldr	r1, [pc, #28]	@ (8001674 <__NVIC_EnableIRQ+0x38>)
 8001656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165a:	095b      	lsrs	r3, r3, #5
 800165c:	2001      	movs	r0, #1
 800165e:	fa00 f202 	lsl.w	r2, r0, r2
 8001662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	e000e100 	.word	0xe000e100

08001678 <__NVIC_SetPriority>:
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	6039      	str	r1, [r7, #0]
 8001682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001688:	2b00      	cmp	r3, #0
 800168a:	db0a      	blt.n	80016a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	b2da      	uxtb	r2, r3
 8001690:	490c      	ldr	r1, [pc, #48]	@ (80016c4 <__NVIC_SetPriority+0x4c>)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	0112      	lsls	r2, r2, #4
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	440b      	add	r3, r1
 800169c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80016a0:	e00a      	b.n	80016b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	4908      	ldr	r1, [pc, #32]	@ (80016c8 <__NVIC_SetPriority+0x50>)
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	3b04      	subs	r3, #4
 80016b0:	0112      	lsls	r2, r2, #4
 80016b2:	b2d2      	uxtb	r2, r2
 80016b4:	440b      	add	r3, r1
 80016b6:	761a      	strb	r2, [r3, #24]
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	e000e100 	.word	0xe000e100
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <calculate_brr>:
};



// Calculate baud rate register value based on system clock
static uint32_t calculate_brr(uint32_t baud_rate, uint32_t pclk_freq) {
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
    return (pclk_freq + (baud_rate / 2)) / baud_rate;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	085a      	lsrs	r2, r3, #1
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	441a      	add	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <get_pclk_freq>:

// Get the appropriate peripheral clock frequency
static uint32_t get_pclk_freq(uint8_t bus) {
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	71fb      	strb	r3, [r7, #7]
    // For STM32F303, we need to check the actual clock configuration
    uint32_t sysclk = 8000000; // Default HSI frequency
 80016fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001730 <get_pclk_freq+0x40>)
 80016fc:	60fb      	str	r3, [r7, #12]

    // Check if HSE or PLL is being used (simplified)
    if (RCC->CFGR & RCC_CFGR_SWS_PLL) {
 80016fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001734 <get_pclk_freq+0x44>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	2b00      	cmp	r3, #0
 8001708:	d002      	beq.n	8001710 <get_pclk_freq+0x20>
        // PLL is active - typical configuration might be 72MHz
        sysclk = 48000000;
 800170a:	4b0b      	ldr	r3, [pc, #44]	@ (8001738 <get_pclk_freq+0x48>)
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	e007      	b.n	8001720 <get_pclk_freq+0x30>
    } else if (RCC->CFGR & RCC_CFGR_SWS_HSE) {
 8001710:	4b08      	ldr	r3, [pc, #32]	@ (8001734 <get_pclk_freq+0x44>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <get_pclk_freq+0x30>
        // HSE is active - typically 8MHz external crystal
        sysclk = 8000000;
 800171c:	4b04      	ldr	r3, [pc, #16]	@ (8001730 <get_pclk_freq+0x40>)
 800171e:	60fb      	str	r3, [r7, #12]
    }

    return sysclk;
 8001720:	68fb      	ldr	r3, [r7, #12]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	007a1200 	.word	0x007a1200
 8001734:	40021000 	.word	0x40021000
 8001738:	02dc6c00 	.word	0x02dc6c00

0800173c <serial_initialise>:
		0x00 						// default function pointer is NULL
};


// InitialiseSerial - Initialise the serial port // Input: baud_rate is from an enumerated set
void serial_initialise(uint32_t baud_rate, SerialPort *serial_port, void (*output_callback_function)(void), void (*input_callback_function)(char *, uint32_t)) {
 800173c:	b590      	push	{r4, r7, lr}
 800173e:	b087      	sub	sp, #28
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
 8001748:	603b      	str	r3, [r7, #0]

	serial_port->output_callback = output_callback_function;
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	625a      	str	r2, [r3, #36]	@ 0x24
	serial_port->receive_callback = input_callback_function;
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	629a      	str	r2, [r3, #40]	@ 0x28

	// Enable clock power, system configuration clock and GPIOC
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001756:	4b2a      	ldr	r3, [pc, #168]	@ (8001800 <serial_initialise+0xc4>)
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	4a29      	ldr	r2, [pc, #164]	@ (8001800 <serial_initialise+0xc4>)
 800175c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001760:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8001762:	4b27      	ldr	r3, [pc, #156]	@ (8001800 <serial_initialise+0xc4>)
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	4a26      	ldr	r2, [pc, #152]	@ (8001800 <serial_initialise+0xc4>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6193      	str	r3, [r2, #24]

	// Enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	691a      	ldr	r2, [r3, #16]
 8001772:	4b23      	ldr	r3, [pc, #140]	@ (8001800 <serial_initialise+0xc4>)
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	4922      	ldr	r1, [pc, #136]	@ (8001800 <serial_initialise+0xc4>)
 8001778:	4313      	orrs	r3, r2
 800177a:	614b      	str	r3, [r1, #20]

	// Set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	68ba      	ldr	r2, [r7, #8]
 8001782:	6952      	ldr	r2, [r2, #20]
 8001784:	601a      	str	r2, [r3, #0]

	// Enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	6992      	ldr	r2, [r2, #24]
 800178e:	609a      	str	r2, [r3, #8]

	// Set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	69d9      	ldr	r1, [r3, #28]
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	6a1a      	ldr	r2, [r3, #32]
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	430a      	orrs	r2, r1
 80017a0:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	6a19      	ldr	r1, [r3, #32]
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	625a      	str	r2, [r3, #36]	@ 0x24

	// Enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	68da      	ldr	r2, [r3, #12]
 80017b8:	4b11      	ldr	r3, [pc, #68]	@ (8001800 <serial_initialise+0xc4>)
 80017ba:	69db      	ldr	r3, [r3, #28]
 80017bc:	4910      	ldr	r1, [pc, #64]	@ (8001800 <serial_initialise+0xc4>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	689a      	ldr	r2, [r3, #8]
 80017c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001800 <serial_initialise+0xc4>)
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	490d      	ldr	r1, [pc, #52]	@ (8001800 <serial_initialise+0xc4>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	618b      	str	r3, [r1, #24]


	// Get a pointer to the 16 bits of the BRR register that we want to change
    uint32_t pclk = get_pclk_freq(2);
 80017d0:	2002      	movs	r0, #2
 80017d2:	f7ff ff8d 	bl	80016f0 <get_pclk_freq>
 80017d6:	6178      	str	r0, [r7, #20]
    serial_port->UART->BRR = calculate_brr(baud_rate, pclk);
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	681c      	ldr	r4, [r3, #0]
 80017dc:	6979      	ldr	r1, [r7, #20]
 80017de:	68f8      	ldr	r0, [r7, #12]
 80017e0:	f7ff ff74 	bl	80016cc <calculate_brr>
 80017e4:	4603      	mov	r3, r0
 80017e6:	60e3      	str	r3, [r4, #12]

	//uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!

	// Enable serial port for tx and rx
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f042 020d 	orr.w	r2, r2, #13
 80017f6:	601a      	str	r2, [r3, #0]
}
 80017f8:	bf00      	nop
 80017fa:	371c      	adds	r7, #28
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd90      	pop	{r4, r7, pc}
 8001800:	40021000 	.word	0x40021000

08001804 <serial_output_char>:


// Output char using polling
void serial_output_char(char data, SerialPort *serial_port) {
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	6039      	str	r1, [r7, #0]
 800180e:	71fb      	strb	r3, [r7, #7]

	while((serial_port->UART->ISR & USART_ISR_TXE) == 0){
 8001810:	bf00      	nop
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	69db      	ldr	r3, [r3, #28]
 8001818:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0f8      	beq.n	8001812 <serial_output_char+0xe>
	}

	serial_port->UART->TDR = data;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	79fa      	ldrb	r2, [r7, #7]
 8001826:	b292      	uxth	r2, r2
 8001828:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <serial_output_string>:


// Output string using polling
void serial_output_string(char *string, SerialPort *serial_port) {
 8001836:	b580      	push	{r7, lr}
 8001838:	b084      	sub	sp, #16
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
 800183e:	6039      	str	r1, [r7, #0]

	uint32_t count = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	60fb      	str	r3, [r7, #12]
	while(*string) {
 8001844:	e00b      	b.n	800185e <serial_output_string+0x28>
		serial_output_char(*string, serial_port);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	6839      	ldr	r1, [r7, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff ffd9 	bl	8001804 <serial_output_char>
		count++;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	3301      	adds	r3, #1
 8001856:	60fb      	str	r3, [r7, #12]
		string++;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3301      	adds	r3, #1
 800185c:	607b      	str	r3, [r7, #4]
	while(*string) {
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1ef      	bne.n	8001846 <serial_output_string+0x10>
	}

	// Callback function pointer call
	if (serial_port->output_callback != NULL)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800186a:	2b00      	cmp	r3, #0
 800186c:	d002      	beq.n	8001874 <serial_output_string+0x3e>
		serial_port->output_callback();
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001872:	4798      	blx	r3
}
 8001874:	bf00      	nop
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <enable_interrupts>:


// Enable interrupts needed for UART
void enable_interrupts(SerialPort *serial_port) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8001884:	b672      	cpsid	i
}
 8001886:	bf00      	nop
	__disable_irq();

	// Interrupt upon receiving data
	serial_port->UART->CR1 |= USART_CR1_RXNEIE_Msk;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f042 0220 	orr.w	r2, r2, #32
 8001896:	601a      	str	r2, [r3, #0]
	//serial_port->UART->CR1 |= USART_CR1_TXEIE_MSK;

	// Set priority and enable interrupts
	NVIC_SetPriority(USART1_IRQn, 1);
 8001898:	2101      	movs	r1, #1
 800189a:	2025      	movs	r0, #37	@ 0x25
 800189c:	f7ff feec 	bl	8001678 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn);
 80018a0:	2025      	movs	r0, #37	@ 0x25
 80018a2:	f7ff fecb 	bl	800163c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80018a6:	b662      	cpsie	i
}
 80018a8:	bf00      	nop

	__enable_irq();
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
	...

080018b4 <USART1_IRQHandler>:


// Function executed when interrupt called
// Double buffer implementation
void USART1_IRQHandler() {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
	// Check and handle overrun or frame errors
	if ((USART1_PORT.UART->ISR & USART_ISR_FE_Msk) || (USART1_PORT.UART->ISR & USART_ISR_ORE_Msk)) {
 80018ba:	4b3c      	ldr	r3, [pc, #240]	@ (80019ac <USART1_IRQHandler+0xf8>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	69db      	ldr	r3, [r3, #28]
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d106      	bne.n	80018d6 <USART1_IRQHandler+0x22>
 80018c8:	4b38      	ldr	r3, [pc, #224]	@ (80019ac <USART1_IRQHandler+0xf8>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	f003 0308 	and.w	r3, r3, #8
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d004      	beq.n	80018e0 <USART1_IRQHandler+0x2c>

		USART1_PORT.UART->ICR = USART_ICR_ORECF | USART_ICR_FECF;
 80018d6:	4b35      	ldr	r3, [pc, #212]	@ (80019ac <USART1_IRQHandler+0xf8>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	220a      	movs	r2, #10
 80018dc:	621a      	str	r2, [r3, #32]

		return;
 80018de:	e061      	b.n	80019a4 <USART1_IRQHandler+0xf0>
	}

	// Check and handle for full buffer
	if (COUNTER == BUFFER_SIZE) {
 80018e0:	4b33      	ldr	r3, [pc, #204]	@ (80019b0 <USART1_IRQHandler+0xfc>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b40      	cmp	r3, #64	@ 0x40
 80018e6:	d10d      	bne.n	8001904 <USART1_IRQHandler+0x50>
		COUNTER = 0;
 80018e8:	4b31      	ldr	r3, [pc, #196]	@ (80019b0 <USART1_IRQHandler+0xfc>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]

		memset(DOUBLE_INPUT_BUFFER[ACTIVE_RX_BUFFER], '\0', BUFFER_SIZE);
 80018ee:	4b31      	ldr	r3, [pc, #196]	@ (80019b4 <USART1_IRQHandler+0x100>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	019b      	lsls	r3, r3, #6
 80018f4:	4a30      	ldr	r2, [pc, #192]	@ (80019b8 <USART1_IRQHandler+0x104>)
 80018f6:	4413      	add	r3, r2
 80018f8:	2240      	movs	r2, #64	@ 0x40
 80018fa:	2100      	movs	r1, #0
 80018fc:	4618      	mov	r0, r3
 80018fe:	f003 f841 	bl	8004984 <memset>

		return;
 8001902:	e04f      	b.n	80019a4 <USART1_IRQHandler+0xf0>
	}

	if (USART1_PORT.UART->ISR & USART_ISR_RXNE_Msk) {
 8001904:	4b29      	ldr	r3, [pc, #164]	@ (80019ac <USART1_IRQHandler+0xf8>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	f003 0320 	and.w	r3, r3, #32
 800190e:	2b00      	cmp	r3, #0
 8001910:	d048      	beq.n	80019a4 <USART1_IRQHandler+0xf0>
		char received = USART1_PORT.UART->RDR;
 8001912:	4b26      	ldr	r3, [pc, #152]	@ (80019ac <USART1_IRQHandler+0xf8>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001918:	b29b      	uxth	r3, r3
 800191a:	71fb      	strb	r3, [r7, #7]

		// Store char
		DOUBLE_INPUT_BUFFER[ACTIVE_RX_BUFFER][COUNTER] = received;
 800191c:	4b25      	ldr	r3, [pc, #148]	@ (80019b4 <USART1_IRQHandler+0x100>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	461a      	mov	r2, r3
 8001922:	4b23      	ldr	r3, [pc, #140]	@ (80019b0 <USART1_IRQHandler+0xfc>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4924      	ldr	r1, [pc, #144]	@ (80019b8 <USART1_IRQHandler+0x104>)
 8001928:	0192      	lsls	r2, r2, #6
 800192a:	440a      	add	r2, r1
 800192c:	4413      	add	r3, r2
 800192e:	79fa      	ldrb	r2, [r7, #7]
 8001930:	701a      	strb	r2, [r3, #0]
		COUNTER++;
 8001932:	4b1f      	ldr	r3, [pc, #124]	@ (80019b0 <USART1_IRQHandler+0xfc>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	3301      	adds	r3, #1
 8001938:	4a1d      	ldr	r2, [pc, #116]	@ (80019b0 <USART1_IRQHandler+0xfc>)
 800193a:	6013      	str	r3, [r2, #0]

		// If termination character, NULL append and exit
		if (received == TERMINATE) {
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	2b0d      	cmp	r3, #13
 8001940:	d12f      	bne.n	80019a2 <USART1_IRQHandler+0xee>
			DOUBLE_INPUT_BUFFER[ACTIVE_RX_BUFFER][COUNTER - 1] = '\0';
 8001942:	4b1c      	ldr	r3, [pc, #112]	@ (80019b4 <USART1_IRQHandler+0x100>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	461a      	mov	r2, r3
 8001948:	4b19      	ldr	r3, [pc, #100]	@ (80019b0 <USART1_IRQHandler+0xfc>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	3b01      	subs	r3, #1
 800194e:	491a      	ldr	r1, [pc, #104]	@ (80019b8 <USART1_IRQHandler+0x104>)
 8001950:	0192      	lsls	r2, r2, #6
 8001952:	440a      	add	r2, r1
 8001954:	4413      	add	r3, r2
 8001956:	2200      	movs	r2, #0
 8001958:	701a      	strb	r2, [r3, #0]

			// Swap buffer
			uint8_t current = ACTIVE_RX_BUFFER;
 800195a:	4b16      	ldr	r3, [pc, #88]	@ (80019b4 <USART1_IRQHandler+0x100>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	71bb      	strb	r3, [r7, #6]
			ACTIVE_RX_BUFFER ^= 1;
 8001960:	4b14      	ldr	r3, [pc, #80]	@ (80019b4 <USART1_IRQHandler+0x100>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	f083 0301 	eor.w	r3, r3, #1
 8001968:	b2da      	uxtb	r2, r3
 800196a:	4b12      	ldr	r3, [pc, #72]	@ (80019b4 <USART1_IRQHandler+0x100>)
 800196c:	701a      	strb	r2, [r3, #0]

			if (USART1_PORT.receive_callback != NULL) {
 800196e:	4b0f      	ldr	r3, [pc, #60]	@ (80019ac <USART1_IRQHandler+0xf8>)
 8001970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001972:	2b00      	cmp	r3, #0
 8001974:	d009      	beq.n	800198a <USART1_IRQHandler+0xd6>
				// Callback function pointer call
				USART1_PORT.receive_callback(DOUBLE_INPUT_BUFFER[current], COUNTER);
 8001976:	4b0d      	ldr	r3, [pc, #52]	@ (80019ac <USART1_IRQHandler+0xf8>)
 8001978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800197a:	79ba      	ldrb	r2, [r7, #6]
 800197c:	0192      	lsls	r2, r2, #6
 800197e:	490e      	ldr	r1, [pc, #56]	@ (80019b8 <USART1_IRQHandler+0x104>)
 8001980:	440a      	add	r2, r1
 8001982:	490b      	ldr	r1, [pc, #44]	@ (80019b0 <USART1_IRQHandler+0xfc>)
 8001984:	6809      	ldr	r1, [r1, #0]
 8001986:	4610      	mov	r0, r2
 8001988:	4798      	blx	r3
			}

			// Reset counter and buffer after input finish
			COUNTER = 0;
 800198a:	4b09      	ldr	r3, [pc, #36]	@ (80019b0 <USART1_IRQHandler+0xfc>)
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
			memset(DOUBLE_INPUT_BUFFER[current], '\0', BUFFER_SIZE);
 8001990:	79bb      	ldrb	r3, [r7, #6]
 8001992:	019b      	lsls	r3, r3, #6
 8001994:	4a08      	ldr	r2, [pc, #32]	@ (80019b8 <USART1_IRQHandler+0x104>)
 8001996:	4413      	add	r3, r2
 8001998:	2240      	movs	r2, #64	@ 0x40
 800199a:	2100      	movs	r1, #0
 800199c:	4618      	mov	r0, r3
 800199e:	f002 fff1 	bl	8004984 <memset>
		}
		return;
 80019a2:	bf00      	nop
	}

}
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000068 	.word	0x20000068
 80019b0:	20000348 	.word	0x20000348
 80019b4:	2000034c 	.word	0x2000034c
 80019b8:	200002c8 	.word	0x200002c8

080019bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a00 <HAL_MspInit+0x44>)
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001a00 <HAL_MspInit+0x44>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6193      	str	r3, [r2, #24]
 80019ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001a00 <HAL_MspInit+0x44>)
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	607b      	str	r3, [r7, #4]
 80019d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019da:	4b09      	ldr	r3, [pc, #36]	@ (8001a00 <HAL_MspInit+0x44>)
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	4a08      	ldr	r2, [pc, #32]	@ (8001a00 <HAL_MspInit+0x44>)
 80019e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019e4:	61d3      	str	r3, [r2, #28]
 80019e6:	4b06      	ldr	r3, [pc, #24]	@ (8001a00 <HAL_MspInit+0x44>)
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ee:	603b      	str	r3, [r7, #0]
 80019f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	40021000 	.word	0x40021000

08001a04 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b087      	sub	sp, #28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a14:	d10c      	bne.n	8001a30 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a16:	4b1b      	ldr	r3, [pc, #108]	@ (8001a84 <HAL_TIM_PWM_MspInit+0x80>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	4a1a      	ldr	r2, [pc, #104]	@ (8001a84 <HAL_TIM_PWM_MspInit+0x80>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	61d3      	str	r3, [r2, #28]
 8001a22:	4b18      	ldr	r3, [pc, #96]	@ (8001a84 <HAL_TIM_PWM_MspInit+0x80>)
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	617b      	str	r3, [r7, #20]
 8001a2c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a2e:	e022      	b.n	8001a76 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a14      	ldr	r2, [pc, #80]	@ (8001a88 <HAL_TIM_PWM_MspInit+0x84>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d10c      	bne.n	8001a54 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a3a:	4b12      	ldr	r3, [pc, #72]	@ (8001a84 <HAL_TIM_PWM_MspInit+0x80>)
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	4a11      	ldr	r2, [pc, #68]	@ (8001a84 <HAL_TIM_PWM_MspInit+0x80>)
 8001a40:	f043 0302 	orr.w	r3, r3, #2
 8001a44:	61d3      	str	r3, [r2, #28]
 8001a46:	4b0f      	ldr	r3, [pc, #60]	@ (8001a84 <HAL_TIM_PWM_MspInit+0x80>)
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	613b      	str	r3, [r7, #16]
 8001a50:	693b      	ldr	r3, [r7, #16]
}
 8001a52:	e010      	b.n	8001a76 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM4)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a0c      	ldr	r2, [pc, #48]	@ (8001a8c <HAL_TIM_PWM_MspInit+0x88>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d10b      	bne.n	8001a76 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a5e:	4b09      	ldr	r3, [pc, #36]	@ (8001a84 <HAL_TIM_PWM_MspInit+0x80>)
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	4a08      	ldr	r2, [pc, #32]	@ (8001a84 <HAL_TIM_PWM_MspInit+0x80>)
 8001a64:	f043 0304 	orr.w	r3, r3, #4
 8001a68:	61d3      	str	r3, [r2, #28]
 8001a6a:	4b06      	ldr	r3, [pc, #24]	@ (8001a84 <HAL_TIM_PWM_MspInit+0x80>)
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	f003 0304 	and.w	r3, r3, #4
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
}
 8001a76:	bf00      	nop
 8001a78:	371c      	adds	r7, #28
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	40021000 	.word	0x40021000
 8001a88:	40000400 	.word	0x40000400
 8001a8c:	40000800 	.word	0x40000800

08001a90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08a      	sub	sp, #40	@ 0x28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ab0:	d11d      	bne.n	8001aee <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab2:	4b33      	ldr	r3, [pc, #204]	@ (8001b80 <HAL_TIM_MspPostInit+0xf0>)
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	4a32      	ldr	r2, [pc, #200]	@ (8001b80 <HAL_TIM_MspPostInit+0xf0>)
 8001ab8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001abc:	6153      	str	r3, [r2, #20]
 8001abe:	4b30      	ldr	r3, [pc, #192]	@ (8001b80 <HAL_TIM_MspPostInit+0xf0>)
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac6:	613b      	str	r3, [r7, #16]
 8001ac8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001aca:	2303      	movs	r3, #3
 8001acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ada:	2301      	movs	r3, #1
 8001adc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ade:	f107 0314 	add.w	r3, r7, #20
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ae8:	f000 fc6a 	bl	80023c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001aec:	e043      	b.n	8001b76 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM3)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a24      	ldr	r2, [pc, #144]	@ (8001b84 <HAL_TIM_MspPostInit+0xf4>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d11c      	bne.n	8001b32 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001af8:	4b21      	ldr	r3, [pc, #132]	@ (8001b80 <HAL_TIM_MspPostInit+0xf0>)
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	4a20      	ldr	r2, [pc, #128]	@ (8001b80 <HAL_TIM_MspPostInit+0xf0>)
 8001afe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b02:	6153      	str	r3, [r2, #20]
 8001b04:	4b1e      	ldr	r3, [pc, #120]	@ (8001b80 <HAL_TIM_MspPostInit+0xf0>)
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b10:	230c      	movs	r3, #12
 8001b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b14:	2302      	movs	r3, #2
 8001b16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b20:	2302      	movs	r3, #2
 8001b22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4817      	ldr	r0, [pc, #92]	@ (8001b88 <HAL_TIM_MspPostInit+0xf8>)
 8001b2c:	f000 fc48 	bl	80023c0 <HAL_GPIO_Init>
}
 8001b30:	e021      	b.n	8001b76 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM4)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a15      	ldr	r2, [pc, #84]	@ (8001b8c <HAL_TIM_MspPostInit+0xfc>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d11c      	bne.n	8001b76 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b3c:	4b10      	ldr	r3, [pc, #64]	@ (8001b80 <HAL_TIM_MspPostInit+0xf0>)
 8001b3e:	695b      	ldr	r3, [r3, #20]
 8001b40:	4a0f      	ldr	r2, [pc, #60]	@ (8001b80 <HAL_TIM_MspPostInit+0xf0>)
 8001b42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001b46:	6153      	str	r3, [r2, #20]
 8001b48:	4b0d      	ldr	r3, [pc, #52]	@ (8001b80 <HAL_TIM_MspPostInit+0xf0>)
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001b54:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b62:	2300      	movs	r3, #0
 8001b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b66:	2302      	movs	r3, #2
 8001b68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b6a:	f107 0314 	add.w	r3, r7, #20
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4807      	ldr	r0, [pc, #28]	@ (8001b90 <HAL_TIM_MspPostInit+0x100>)
 8001b72:	f000 fc25 	bl	80023c0 <HAL_GPIO_Init>
}
 8001b76:	bf00      	nop
 8001b78:	3728      	adds	r7, #40	@ 0x28
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40021000 	.word	0x40021000
 8001b84:	40000400 	.word	0x40000400
 8001b88:	48001000 	.word	0x48001000
 8001b8c:	40000800 	.word	0x40000800
 8001b90:	48000c00 	.word	0x48000c00

08001b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b98:	bf00      	nop
 8001b9a:	e7fd      	b.n	8001b98 <NMI_Handler+0x4>

08001b9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ba0:	bf00      	nop
 8001ba2:	e7fd      	b.n	8001ba0 <HardFault_Handler+0x4>

08001ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ba8:	bf00      	nop
 8001baa:	e7fd      	b.n	8001ba8 <MemManage_Handler+0x4>

08001bac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bb0:	bf00      	nop
 8001bb2:	e7fd      	b.n	8001bb0 <BusFault_Handler+0x4>

08001bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb8:	bf00      	nop
 8001bba:	e7fd      	b.n	8001bb8 <UsageFault_Handler+0x4>

08001bbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bea:	f000 fae3 	bl	80021b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bfc:	4a14      	ldr	r2, [pc, #80]	@ (8001c50 <_sbrk+0x5c>)
 8001bfe:	4b15      	ldr	r3, [pc, #84]	@ (8001c54 <_sbrk+0x60>)
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c08:	4b13      	ldr	r3, [pc, #76]	@ (8001c58 <_sbrk+0x64>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d102      	bne.n	8001c16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c10:	4b11      	ldr	r3, [pc, #68]	@ (8001c58 <_sbrk+0x64>)
 8001c12:	4a12      	ldr	r2, [pc, #72]	@ (8001c5c <_sbrk+0x68>)
 8001c14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c16:	4b10      	ldr	r3, [pc, #64]	@ (8001c58 <_sbrk+0x64>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d207      	bcs.n	8001c34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c24:	f002 fec6 	bl	80049b4 <__errno>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	220c      	movs	r2, #12
 8001c2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c32:	e009      	b.n	8001c48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c34:	4b08      	ldr	r3, [pc, #32]	@ (8001c58 <_sbrk+0x64>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c3a:	4b07      	ldr	r3, [pc, #28]	@ (8001c58 <_sbrk+0x64>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4413      	add	r3, r2
 8001c42:	4a05      	ldr	r2, [pc, #20]	@ (8001c58 <_sbrk+0x64>)
 8001c44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c46:	68fb      	ldr	r3, [r7, #12]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3718      	adds	r7, #24
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	2000a000 	.word	0x2000a000
 8001c54:	00000400 	.word	0x00000400
 8001c58:	20000350 	.word	0x20000350
 8001c5c:	200004a0 	.word	0x200004a0

08001c60 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c64:	4b06      	ldr	r3, [pc, #24]	@ (8001c80 <SystemInit+0x20>)
 8001c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c6a:	4a05      	ldr	r2, [pc, #20]	@ (8001c80 <SystemInit+0x20>)
 8001c6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <__NVIC_EnableIRQ>:
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	db0b      	blt.n	8001cae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	f003 021f 	and.w	r2, r3, #31
 8001c9c:	4907      	ldr	r1, [pc, #28]	@ (8001cbc <__NVIC_EnableIRQ+0x38>)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	095b      	lsrs	r3, r3, #5
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8001caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	e000e100 	.word	0xe000e100

08001cc0 <timer_init>:


// ===== INITIALISATION =====


void timer_init(void) {
 8001cc0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001cc4:	b088      	sub	sp, #32
 8001cc6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001cc8:	b672      	cpsid	i
}
 8001cca:	bf00      	nop
    __disable_irq();

    // enable all clocks
    for (uintmax_t i = 0; i < _TIMER_COUNT; i++) {
 8001ccc:	f04f 0200 	mov.w	r2, #0
 8001cd0:	f04f 0300 	mov.w	r3, #0
 8001cd4:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001cd8:	e018      	b.n	8001d0c <timer_init+0x4c>
        const TimerClockEnable en = CLOCK_ENABLES[i];
 8001cda:	4927      	ldr	r1, [pc, #156]	@ (8001d78 <timer_init+0xb8>)
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	4413      	add	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	18ca      	adds	r2, r1, r3
 8001ce8:	1d3b      	adds	r3, r7, #4
 8001cea:	ca07      	ldmia	r2, {r0, r1, r2}
 8001cec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *en.reg |=  en.mask;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6819      	ldr	r1, [r3, #0]
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	601a      	str	r2, [r3, #0]
    for (uintmax_t i = 0; i < _TIMER_COUNT; i++) {
 8001cfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d00:	f112 0801 	adds.w	r8, r2, #1
 8001d04:	f143 0900 	adc.w	r9, r3, #0
 8001d08:	e9c7 8906 	strd	r8, r9, [r7, #24]
 8001d0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d10:	2a08      	cmp	r2, #8
 8001d12:	f173 0300 	sbcs.w	r3, r3, #0
 8001d16:	d3e0      	bcc.n	8001cda <timer_init+0x1a>
    }

    // enable irq events
    for (uintmax_t i = 0; i < _TIMER_COUNT; i++) {
 8001d18:	f04f 0200 	mov.w	r2, #0
 8001d1c:	f04f 0300 	mov.w	r3, #0
 8001d20:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001d24:	e01a      	b.n	8001d5c <timer_init+0x9c>
        RAWS[i]->DIER |= TIM_DIER_UIE;
 8001d26:	4a15      	ldr	r2, [pc, #84]	@ (8001d7c <timer_init+0xbc>)
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d2e:	68da      	ldr	r2, [r3, #12]
 8001d30:	4912      	ldr	r1, [pc, #72]	@ (8001d7c <timer_init+0xbc>)
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d38:	f042 0201 	orr.w	r2, r2, #1
 8001d3c:	60da      	str	r2, [r3, #12]
        NVIC_EnableIRQ(IRQ_NUMS[i]);
 8001d3e:	4a10      	ldr	r2, [pc, #64]	@ (8001d80 <timer_init+0xc0>)
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	4413      	add	r3, r2
 8001d44:	f993 3000 	ldrsb.w	r3, [r3]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff ff9b 	bl	8001c84 <__NVIC_EnableIRQ>
    for (uintmax_t i = 0; i < _TIMER_COUNT; i++) {
 8001d4e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d52:	1c54      	adds	r4, r2, #1
 8001d54:	f143 0500 	adc.w	r5, r3, #0
 8001d58:	e9c7 4504 	strd	r4, r5, [r7, #16]
 8001d5c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d60:	2a08      	cmp	r2, #8
 8001d62:	f173 0300 	sbcs.w	r3, r3, #0
 8001d66:	d3de      	bcc.n	8001d26 <timer_init+0x66>
  __ASM volatile ("cpsie i" : : : "memory");
 8001d68:	b662      	cpsie	i
}
 8001d6a:	bf00      	nop
    }

    __enable_irq();
}
 8001d6c:	bf00      	nop
 8001d6e:	3720      	adds	r7, #32
 8001d70:	46bd      	mov	sp, r7
 8001d72:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d76:	bf00      	nop
 8001d78:	08005388 	.word	0x08005388
 8001d7c:	20000098 	.word	0x20000098
 8001d80:	200000b8 	.word	0x200000b8

08001d84 <timer_enable_set>:


// ===== CONTROL =====


void timer_enable_set(const TimerSel sel, const bool enable) {
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	460a      	mov	r2, r1
 8001d8e:	71fb      	strb	r3, [r7, #7]
 8001d90:	4613      	mov	r3, r2
 8001d92:	71bb      	strb	r3, [r7, #6]
    TimerRaw *raw = RAWS[sel];
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	4a1b      	ldr	r2, [pc, #108]	@ (8001e04 <timer_enable_set+0x80>)
 8001d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d9c:	60fb      	str	r3, [r7, #12]

    // clear interrupt flag in case event was already waiting
    raw->SR &= ~TIM_SR_UIF;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	f023 0201 	bic.w	r2, r3, #1
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	611a      	str	r2, [r3, #16]

    timer_counter_reset(sel);
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f000 f8c9 	bl	8001f44 <timer_counter_reset>
    // HACK: After writes to `PSC`, `ARR`, and `CNT,
    // there seems to be a hardware bug that causes the `UIF` flag
    // to be set immediately.
    //
    // To avoid this, manually generate the interrupt, and then clear it
    raw->EGR |=  TIM_EGR_UG;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	f043 0201 	orr.w	r2, r3, #1
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	615a      	str	r2, [r3, #20]
    raw->SR  &= ~TIM_SR_UIF;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	f023 0201 	bic.w	r2, r3, #1
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	611a      	str	r2, [r3, #16]

    // Need to set `.enable` after the irq has fired
    // So if we are enabling, it dummy fires while `enable=false`,
    // which is ignored by the handler

    STATES[sel].enable = enable;
 8001dca:	79fa      	ldrb	r2, [r7, #7]
 8001dcc:	490e      	ldr	r1, [pc, #56]	@ (8001e08 <timer_enable_set+0x84>)
 8001dce:	4613      	mov	r3, r2
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	4413      	add	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	440b      	add	r3, r1
 8001dd8:	79ba      	ldrb	r2, [r7, #6]
 8001dda:	701a      	strb	r2, [r3, #0]
    if (enable)
 8001ddc:	79bb      	ldrb	r3, [r7, #6]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d006      	beq.n	8001df0 <timer_enable_set+0x6c>
        raw->CR1 |=  TIM_CR1_CEN;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f043 0201 	orr.w	r2, r3, #1
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	601a      	str	r2, [r3, #0]
    else
        raw->CR1 &= ~TIM_CR1_CEN;

}
 8001dee:	e005      	b.n	8001dfc <timer_enable_set+0x78>
        raw->CR1 &= ~TIM_CR1_CEN;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f023 0201 	bic.w	r2, r3, #1
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	601a      	str	r2, [r3, #0]
}
 8001dfc:	bf00      	nop
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20000098 	.word	0x20000098
 8001e08:	200000c0 	.word	0x200000c0

08001e0c <timer_silent_set>:
    // detect if the bit is masked on
    const TimerClockEnable en = CLOCK_ENABLES[sel];
    return *en.reg & en.mask;
}

void timer_silent_set(const TimerSel sel, const bool silent) {
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	460a      	mov	r2, r1
 8001e16:	71fb      	strb	r3, [r7, #7]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	71bb      	strb	r3, [r7, #6]
    STATES[sel].silent = silent;
 8001e1c:	79fa      	ldrb	r2, [r7, #7]
 8001e1e:	4907      	ldr	r1, [pc, #28]	@ (8001e3c <timer_silent_set+0x30>)
 8001e20:	4613      	mov	r3, r2
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	4413      	add	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	440b      	add	r3, r1
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	79ba      	ldrb	r2, [r7, #6]
 8001e2e:	701a      	strb	r2, [r3, #0]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	200000c0 	.word	0x200000c0

08001e40 <timer_period_set>:


// ===== PERIOD =====


void timer_period_set(const TimerSel sel, const TimerPeriod period) {
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	460a      	mov	r2, r1
 8001e4a:	71fb      	strb	r3, [r7, #7]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	80bb      	strh	r3, [r7, #4]
    STATES[sel].period = period;
 8001e50:	79fa      	ldrb	r2, [r7, #7]
 8001e52:	490b      	ldr	r1, [pc, #44]	@ (8001e80 <timer_period_set+0x40>)
 8001e54:	4613      	mov	r3, r2
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	4413      	add	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	3304      	adds	r3, #4
 8001e60:	88ba      	ldrh	r2, [r7, #4]
 8001e62:	801a      	strh	r2, [r3, #0]
    TimerRaw *raw = RAWS[sel];
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	4a07      	ldr	r2, [pc, #28]	@ (8001e84 <timer_period_set+0x44>)
 8001e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e6c:	60fb      	str	r3, [r7, #12]
    raw->ARR = period;
 8001e6e:	88ba      	ldrh	r2, [r7, #4]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001e74:	bf00      	nop
 8001e76:	3714      	adds	r7, #20
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	200000c0 	.word	0x200000c0
 8001e84:	20000098 	.word	0x20000098

08001e88 <timer_prescaler_set>:
TimerPeriod timer_period_get(const TimerSel sel) {
    return STATES[sel].period;
}


void timer_prescaler_set(const TimerSel sel, const TimerPrescale scale) {
 8001e88:	b4b0      	push	{r4, r5, r7}
 8001e8a:	b087      	sub	sp, #28
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	460a      	mov	r2, r1
 8001e92:	71fb      	strb	r3, [r7, #7]
 8001e94:	4613      	mov	r3, r2
 8001e96:	80bb      	strh	r3, [r7, #4]
    STATES[sel].prescale = scale;
 8001e98:	79fa      	ldrb	r2, [r7, #7]
 8001e9a:	491b      	ldr	r1, [pc, #108]	@ (8001f08 <timer_prescaler_set+0x80>)
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	4413      	add	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	3306      	adds	r3, #6
 8001ea8:	88ba      	ldrh	r2, [r7, #4]
 8001eaa:	801a      	strh	r2, [r3, #0]
    TimerRaw *const raw = RAWS[sel];
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	4a17      	ldr	r2, [pc, #92]	@ (8001f0c <timer_prescaler_set+0x84>)
 8001eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb4:	60fb      	str	r3, [r7, #12]
    raw->PSC = scale;
 8001eb6:	88ba      	ldrh	r2, [r7, #4]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	629a      	str	r2, [r3, #40]	@ 0x28

    // changing the prescaler will not take effect until counter overflow
    // so set reload to `1` and counter to `0`, to immediately overflow
    // and apply changes
    const uint32_t arr = raw->ARR;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec0:	60bb      	str	r3, [r7, #8]
    raw->ARR = 1;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	62da      	str	r2, [r3, #44]	@ 0x2c
    raw->CNT = 0;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	625a      	str	r2, [r3, #36]	@ 0x24
    // spin to give time for changes to take affect
    for (uintmax_t i = 0; i < 8; i++)
 8001ece:	f04f 0200 	mov.w	r2, #0
 8001ed2:	f04f 0300 	mov.w	r3, #0
 8001ed6:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001eda:	e007      	b.n	8001eec <timer_prescaler_set+0x64>
        asm("NOP");
 8001edc:	bf00      	nop
    for (uintmax_t i = 0; i < 8; i++)
 8001ede:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ee2:	1c54      	adds	r4, r2, #1
 8001ee4:	f143 0500 	adc.w	r5, r3, #0
 8001ee8:	e9c7 4504 	strd	r4, r5, [r7, #16]
 8001eec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ef0:	2a08      	cmp	r2, #8
 8001ef2:	f173 0300 	sbcs.w	r3, r3, #0
 8001ef6:	d3f1      	bcc.n	8001edc <timer_prescaler_set+0x54>
    raw->ARR = arr;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001efe:	bf00      	nop
 8001f00:	371c      	adds	r7, #28
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bcb0      	pop	{r4, r5, r7}
 8001f06:	4770      	bx	lr
 8001f08:	200000c0 	.word	0x200000c0
 8001f0c:	20000098 	.word	0x20000098

08001f10 <timer_recur_set>:
TimerPrescale timer_prescale_get(const TimerSel sel) {
    return STATES[sel].prescale;
}

// TODO: See TIM->CR1->OPM for oneshot mode
void timer_recur_set(const TimerSel sel, const bool recur) {
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	460a      	mov	r2, r1
 8001f1a:	71fb      	strb	r3, [r7, #7]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	71bb      	strb	r3, [r7, #6]
    STATES[sel].recur = recur;
 8001f20:	79fa      	ldrb	r2, [r7, #7]
 8001f22:	4907      	ldr	r1, [pc, #28]	@ (8001f40 <timer_recur_set+0x30>)
 8001f24:	4613      	mov	r3, r2
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	4413      	add	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	3302      	adds	r3, #2
 8001f30:	79ba      	ldrb	r2, [r7, #6]
 8001f32:	701a      	strb	r2, [r3, #0]
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	200000c0 	.word	0x200000c0

08001f44 <timer_counter_reset>:
bool timer_recur_get(const TimerSel sel) {
    return STATES[sel].recur;
}


void timer_counter_reset(const TimerSel sel) {
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	71fb      	strb	r3, [r7, #7]
    RAWS[sel]->CNT = 0;
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
 8001f50:	4a05      	ldr	r2, [pc, #20]	@ (8001f68 <timer_counter_reset+0x24>)
 8001f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f56:	2200      	movs	r2, #0
 8001f58:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	20000098 	.word	0x20000098

08001f6c <_timer_interrupt_handler>:

// ===== CALLBACKS =====


/// The callback handler called by our IRQ handlers
static void _timer_interrupt_handler(const TimerSel sel, GameState *game) {
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	6039      	str	r1, [r7, #0]
 8001f76:	71fb      	strb	r3, [r7, #7]
    TimerRaw *raw = RAWS[sel];
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	4a25      	ldr	r2, [pc, #148]	@ (8002010 <_timer_interrupt_handler+0xa4>)
 8001f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f80:	617b      	str	r3, [r7, #20]

    // check it was definitely this timer that fired
    // since multiple timers can share one event
    if (!(raw->SR & TIM_SR_UIF))
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d03a      	beq.n	8002004 <_timer_interrupt_handler+0x98>
        return;

    // clear interrupt flag so it doesn't get called again
    raw->SR &= ~TIM_SR_UIF;
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	f023 0201 	bic.w	r2, r3, #1
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	611a      	str	r2, [r3, #16]

    TimerState *const state = &STATES[sel];
 8001f9a:	79fa      	ldrb	r2, [r7, #7]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	4413      	add	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4a1b      	ldr	r2, [pc, #108]	@ (8002014 <_timer_interrupt_handler+0xa8>)
 8001fa6:	4413      	add	r3, r2
 8001fa8:	613b      	str	r3, [r7, #16]

    // We may get a dummy fire when enabling the timer, see `timer_enable_set()`
    if (!state->enable)
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	f083 0301 	eor.w	r3, r3, #1
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d127      	bne.n	8002008 <_timer_interrupt_handler+0x9c>
        return;

    // update silent for future firings
    const bool was_silent = state->silent;
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	785b      	ldrb	r3, [r3, #1]
 8001fbc:	73fb      	strb	r3, [r7, #15]
    state->silent = !state->recur;
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	789b      	ldrb	r3, [r3, #2]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	bf14      	ite	ne
 8001fc6:	2301      	movne	r3, #1
 8001fc8:	2300      	moveq	r3, #0
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	f083 0301 	eor.w	r3, r3, #1
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	705a      	strb	r2, [r3, #1]

    // call callback if enabled and has been set
    // do this after setting silent, so the callback
    // can un-silence itself
    if (!was_silent && state->callback != NULL)
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
 8001fde:	f083 0301 	eor.w	r3, r3, #1
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d008      	beq.n	8001ffa <_timer_interrupt_handler+0x8e>
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d004      	beq.n	8001ffa <_timer_interrupt_handler+0x8e>
        state->callback(sel);
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	79fa      	ldrb	r2, [r7, #7]
 8001ff6:	4610      	mov	r0, r2
 8001ff8:	4798      	blx	r3

    // TODO: should not be using this, use auto reload
    // reset counter
    timer_counter_reset(sel);
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff ffa1 	bl	8001f44 <timer_counter_reset>
 8002002:	e002      	b.n	800200a <_timer_interrupt_handler+0x9e>
        return;
 8002004:	bf00      	nop
 8002006:	e000      	b.n	800200a <_timer_interrupt_handler+0x9e>
        return;
 8002008:	bf00      	nop
}
 800200a:	3718      	adds	r7, #24
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	20000098 	.word	0x20000098
 8002014:	200000c0 	.word	0x200000c0

08002018 <timer_callback_set>:

void timer_callback_set(const TimerSel sel, TimerCallbackFn *const callback) {
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	6039      	str	r1, [r7, #0]
 8002022:	71fb      	strb	r3, [r7, #7]
    STATES[sel].callback = callback;
 8002024:	79fa      	ldrb	r2, [r7, #7]
 8002026:	4907      	ldr	r1, [pc, #28]	@ (8002044 <timer_callback_set+0x2c>)
 8002028:	4613      	mov	r3, r2
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	4413      	add	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	440b      	add	r3, r1
 8002032:	3308      	adds	r3, #8
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	601a      	str	r2, [r3, #0]
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	200000c0 	.word	0x200000c0

08002048 <TIM2_IRQHandler>:
// NOTE: IRQ handlers seem to be added by overriding the weakly linked
// default handler. Some are also shared for multiple events


// TIM2 global interrupt
void TIM2_IRQHandler(void) {
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
    _timer_interrupt_handler(TIMER_SEL_2, &game);
 800204c:	4902      	ldr	r1, [pc, #8]	@ (8002058 <TIM2_IRQHandler+0x10>)
 800204e:	2000      	movs	r0, #0
 8002050:	f7ff ff8c 	bl	8001f6c <_timer_interrupt_handler>
}
 8002054:	bf00      	nop
 8002056:	bd80      	pop	{r7, pc}
 8002058:	2000000c 	.word	0x2000000c

0800205c <TIM3_IRQHandler>:
// TIM3 global interrupt
void TIM3_IRQHandler(void) {
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
    _timer_interrupt_handler(TIMER_SEL_3, &game);
 8002060:	4902      	ldr	r1, [pc, #8]	@ (800206c <TIM3_IRQHandler+0x10>)
 8002062:	2001      	movs	r0, #1
 8002064:	f7ff ff82 	bl	8001f6c <_timer_interrupt_handler>
}
 8002068:	bf00      	nop
 800206a:	bd80      	pop	{r7, pc}
 800206c:	2000000c 	.word	0x2000000c

08002070 <TIM4_IRQHandler>:
// TIM4 global interrupt
void TIM4_IRQHandler(void) {
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
    _timer_interrupt_handler(TIMER_SEL_4, &game);
 8002074:	4902      	ldr	r1, [pc, #8]	@ (8002080 <TIM4_IRQHandler+0x10>)
 8002076:	2002      	movs	r0, #2
 8002078:	f7ff ff78 	bl	8001f6c <_timer_interrupt_handler>
}
 800207c:	bf00      	nop
 800207e:	bd80      	pop	{r7, pc}
 8002080:	2000000c 	.word	0x2000000c

08002084 <TIM7_IRQHandler>:
// TIM6 global and DAC12 underrun interrupts
void TIM6_DACUNDER_IRQHandler(void) {
    _timer_interrupt_handler(TIMER_SEL_6, &game);
}
// TIM7 global interrupt
void TIM7_IRQHandler(void) {
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
    _timer_interrupt_handler(TIMER_SEL_7, &game);
 8002088:	4902      	ldr	r1, [pc, #8]	@ (8002094 <TIM7_IRQHandler+0x10>)
 800208a:	2004      	movs	r0, #4
 800208c:	f7ff ff6e 	bl	8001f6c <_timer_interrupt_handler>
}
 8002090:	bf00      	nop
 8002092:	bd80      	pop	{r7, pc}
 8002094:	2000000c 	.word	0x2000000c

08002098 <TIM1_BRK_TIM15_IRQHandler>:
// TIM1 Break/TIM15 global interrupts
void TIM1_BRK_TIM15_IRQHandler(void) {
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
    _timer_interrupt_handler(TIMER_SEL_15, &game);
 800209c:	4902      	ldr	r1, [pc, #8]	@ (80020a8 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800209e:	2005      	movs	r0, #5
 80020a0:	f7ff ff64 	bl	8001f6c <_timer_interrupt_handler>
}
 80020a4:	bf00      	nop
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	2000000c 	.word	0x2000000c

080020ac <TIM1_UP_TIM16_IRQHandler>:
// TIM1 Update/TIM16 global interrupts
void TIM1_UP_TIM16_IRQHandler(void) {
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
    _timer_interrupt_handler(TIMER_SEL_16, &game);
 80020b0:	4902      	ldr	r1, [pc, #8]	@ (80020bc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80020b2:	2006      	movs	r0, #6
 80020b4:	f7ff ff5a 	bl	8001f6c <_timer_interrupt_handler>
}
 80020b8:	bf00      	nop
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	2000000c 	.word	0x2000000c

080020c0 <TIM1_TRG_COM_TIM17_IRQHandler>:
// TIM1 trigger and commutation/TIM17 interrupts
void TIM1_TRG_COM_TIM17_IRQHandler(void) {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
    _timer_interrupt_handler(TIMER_SEL_17, &game);
 80020c4:	4902      	ldr	r1, [pc, #8]	@ (80020d0 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80020c6:	2007      	movs	r0, #7
 80020c8:	f7ff ff50 	bl	8001f6c <_timer_interrupt_handler>
}
 80020cc:	bf00      	nop
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	2000000c 	.word	0x2000000c

080020d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80020d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800210c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80020d8:	f7ff fdc2 	bl	8001c60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020dc:	480c      	ldr	r0, [pc, #48]	@ (8002110 <LoopForever+0x6>)
  ldr r1, =_edata
 80020de:	490d      	ldr	r1, [pc, #52]	@ (8002114 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002118 <LoopForever+0xe>)
  movs r3, #0
 80020e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020e4:	e002      	b.n	80020ec <LoopCopyDataInit>

080020e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ea:	3304      	adds	r3, #4

080020ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020f0:	d3f9      	bcc.n	80020e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020f2:	4a0a      	ldr	r2, [pc, #40]	@ (800211c <LoopForever+0x12>)
  ldr r4, =_ebss
 80020f4:	4c0a      	ldr	r4, [pc, #40]	@ (8002120 <LoopForever+0x16>)
  movs r3, #0
 80020f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020f8:	e001      	b.n	80020fe <LoopFillZerobss>

080020fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020fc:	3204      	adds	r2, #4

080020fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002100:	d3fb      	bcc.n	80020fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002102:	f002 fc5d 	bl	80049c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002106:	f7fe feb9 	bl	8000e7c <main>

0800210a <LoopForever>:

LoopForever:
    b LoopForever
 800210a:	e7fe      	b.n	800210a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800210c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002114:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 8002118:	0800544c 	.word	0x0800544c
  ldr r2, =_sbss
 800211c:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 8002120:	200004a0 	.word	0x200004a0

08002124 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002124:	e7fe      	b.n	8002124 <ADC1_2_IRQHandler>
	...

08002128 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800212c:	4b08      	ldr	r3, [pc, #32]	@ (8002150 <HAL_Init+0x28>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a07      	ldr	r2, [pc, #28]	@ (8002150 <HAL_Init+0x28>)
 8002132:	f043 0310 	orr.w	r3, r3, #16
 8002136:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002138:	2003      	movs	r0, #3
 800213a:	f000 f90d 	bl	8002358 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800213e:	200f      	movs	r0, #15
 8002140:	f000 f808 	bl	8002154 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002144:	f7ff fc3a 	bl	80019bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40022000 	.word	0x40022000

08002154 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800215c:	4b12      	ldr	r3, [pc, #72]	@ (80021a8 <HAL_InitTick+0x54>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4b12      	ldr	r3, [pc, #72]	@ (80021ac <HAL_InitTick+0x58>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	4619      	mov	r1, r3
 8002166:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800216a:	fbb3 f3f1 	udiv	r3, r3, r1
 800216e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002172:	4618      	mov	r0, r3
 8002174:	f000 f917 	bl	80023a6 <HAL_SYSTICK_Config>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e00e      	b.n	80021a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b0f      	cmp	r3, #15
 8002186:	d80a      	bhi.n	800219e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002188:	2200      	movs	r2, #0
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	f04f 30ff 	mov.w	r0, #4294967295
 8002190:	f000 f8ed 	bl	800236e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002194:	4a06      	ldr	r2, [pc, #24]	@ (80021b0 <HAL_InitTick+0x5c>)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	e000      	b.n	80021a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	20000094 	.word	0x20000094
 80021ac:	20000124 	.word	0x20000124
 80021b0:	20000120 	.word	0x20000120

080021b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021b8:	4b06      	ldr	r3, [pc, #24]	@ (80021d4 <HAL_IncTick+0x20>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	461a      	mov	r2, r3
 80021be:	4b06      	ldr	r3, [pc, #24]	@ (80021d8 <HAL_IncTick+0x24>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4413      	add	r3, r2
 80021c4:	4a04      	ldr	r2, [pc, #16]	@ (80021d8 <HAL_IncTick+0x24>)
 80021c6:	6013      	str	r3, [r2, #0]
}
 80021c8:	bf00      	nop
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	20000124 	.word	0x20000124
 80021d8:	20000354 	.word	0x20000354

080021dc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return uwTick;  
 80021e0:	4b03      	ldr	r3, [pc, #12]	@ (80021f0 <HAL_GetTick+0x14>)
 80021e2:	681b      	ldr	r3, [r3, #0]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	20000354 	.word	0x20000354

080021f4 <__NVIC_SetPriorityGrouping>:
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002204:	4b0c      	ldr	r3, [pc, #48]	@ (8002238 <__NVIC_SetPriorityGrouping+0x44>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002210:	4013      	ands	r3, r2
 8002212:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800221c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002220:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002226:	4a04      	ldr	r2, [pc, #16]	@ (8002238 <__NVIC_SetPriorityGrouping+0x44>)
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	60d3      	str	r3, [r2, #12]
}
 800222c:	bf00      	nop
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <__NVIC_GetPriorityGrouping>:
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002240:	4b04      	ldr	r3, [pc, #16]	@ (8002254 <__NVIC_GetPriorityGrouping+0x18>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	0a1b      	lsrs	r3, r3, #8
 8002246:	f003 0307 	and.w	r3, r3, #7
}
 800224a:	4618      	mov	r0, r3
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <__NVIC_SetPriority>:
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	6039      	str	r1, [r7, #0]
 8002262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002268:	2b00      	cmp	r3, #0
 800226a:	db0a      	blt.n	8002282 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	b2da      	uxtb	r2, r3
 8002270:	490c      	ldr	r1, [pc, #48]	@ (80022a4 <__NVIC_SetPriority+0x4c>)
 8002272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002276:	0112      	lsls	r2, r2, #4
 8002278:	b2d2      	uxtb	r2, r2
 800227a:	440b      	add	r3, r1
 800227c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002280:	e00a      	b.n	8002298 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	b2da      	uxtb	r2, r3
 8002286:	4908      	ldr	r1, [pc, #32]	@ (80022a8 <__NVIC_SetPriority+0x50>)
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	3b04      	subs	r3, #4
 8002290:	0112      	lsls	r2, r2, #4
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	440b      	add	r3, r1
 8002296:	761a      	strb	r2, [r3, #24]
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	e000e100 	.word	0xe000e100
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b089      	sub	sp, #36	@ 0x24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f1c3 0307 	rsb	r3, r3, #7
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	bf28      	it	cs
 80022ca:	2304      	movcs	r3, #4
 80022cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	3304      	adds	r3, #4
 80022d2:	2b06      	cmp	r3, #6
 80022d4:	d902      	bls.n	80022dc <NVIC_EncodePriority+0x30>
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	3b03      	subs	r3, #3
 80022da:	e000      	b.n	80022de <NVIC_EncodePriority+0x32>
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e0:	f04f 32ff 	mov.w	r2, #4294967295
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43da      	mvns	r2, r3
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	401a      	ands	r2, r3
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022f4:	f04f 31ff 	mov.w	r1, #4294967295
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	fa01 f303 	lsl.w	r3, r1, r3
 80022fe:	43d9      	mvns	r1, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002304:	4313      	orrs	r3, r2
         );
}
 8002306:	4618      	mov	r0, r3
 8002308:	3724      	adds	r7, #36	@ 0x24
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
	...

08002314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3b01      	subs	r3, #1
 8002320:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002324:	d301      	bcc.n	800232a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002326:	2301      	movs	r3, #1
 8002328:	e00f      	b.n	800234a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800232a:	4a0a      	ldr	r2, [pc, #40]	@ (8002354 <SysTick_Config+0x40>)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3b01      	subs	r3, #1
 8002330:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002332:	210f      	movs	r1, #15
 8002334:	f04f 30ff 	mov.w	r0, #4294967295
 8002338:	f7ff ff8e 	bl	8002258 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800233c:	4b05      	ldr	r3, [pc, #20]	@ (8002354 <SysTick_Config+0x40>)
 800233e:	2200      	movs	r2, #0
 8002340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002342:	4b04      	ldr	r3, [pc, #16]	@ (8002354 <SysTick_Config+0x40>)
 8002344:	2207      	movs	r2, #7
 8002346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	e000e010 	.word	0xe000e010

08002358 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f7ff ff47 	bl	80021f4 <__NVIC_SetPriorityGrouping>
}
 8002366:	bf00      	nop
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b086      	sub	sp, #24
 8002372:	af00      	add	r7, sp, #0
 8002374:	4603      	mov	r3, r0
 8002376:	60b9      	str	r1, [r7, #8]
 8002378:	607a      	str	r2, [r7, #4]
 800237a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800237c:	2300      	movs	r3, #0
 800237e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002380:	f7ff ff5c 	bl	800223c <__NVIC_GetPriorityGrouping>
 8002384:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	68b9      	ldr	r1, [r7, #8]
 800238a:	6978      	ldr	r0, [r7, #20]
 800238c:	f7ff ff8e 	bl	80022ac <NVIC_EncodePriority>
 8002390:	4602      	mov	r2, r0
 8002392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002396:	4611      	mov	r1, r2
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff ff5d 	bl	8002258 <__NVIC_SetPriority>
}
 800239e:	bf00      	nop
 80023a0:	3718      	adds	r7, #24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b082      	sub	sp, #8
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7ff ffb0 	bl	8002314 <SysTick_Config>
 80023b4:	4603      	mov	r3, r0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b087      	sub	sp, #28
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ce:	e154      	b.n	800267a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	2101      	movs	r1, #1
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	fa01 f303 	lsl.w	r3, r1, r3
 80023dc:	4013      	ands	r3, r2
 80023de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 8146 	beq.w	8002674 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 0303 	and.w	r3, r3, #3
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d005      	beq.n	8002400 <HAL_GPIO_Init+0x40>
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 0303 	and.w	r3, r3, #3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d130      	bne.n	8002462 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	2203      	movs	r2, #3
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	4013      	ands	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	68da      	ldr	r2, [r3, #12]
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	4313      	orrs	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002436:	2201      	movs	r2, #1
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43db      	mvns	r3, r3
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4013      	ands	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	091b      	lsrs	r3, r3, #4
 800244c:	f003 0201 	and.w	r2, r3, #1
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4313      	orrs	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	2b03      	cmp	r3, #3
 800246c:	d017      	beq.n	800249e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	2203      	movs	r2, #3
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43db      	mvns	r3, r3
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	4013      	ands	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	4313      	orrs	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d123      	bne.n	80024f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	08da      	lsrs	r2, r3, #3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3208      	adds	r2, #8
 80024b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	220f      	movs	r2, #15
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	43db      	mvns	r3, r3
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	4013      	ands	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	691a      	ldr	r2, [r3, #16]
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f003 0307 	and.w	r3, r3, #7
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	08da      	lsrs	r2, r3, #3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3208      	adds	r2, #8
 80024ec:	6939      	ldr	r1, [r7, #16]
 80024ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	2203      	movs	r2, #3
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43db      	mvns	r3, r3
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	4013      	ands	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f003 0203 	and.w	r2, r3, #3
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	4313      	orrs	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800252e:	2b00      	cmp	r3, #0
 8002530:	f000 80a0 	beq.w	8002674 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002534:	4b58      	ldr	r3, [pc, #352]	@ (8002698 <HAL_GPIO_Init+0x2d8>)
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	4a57      	ldr	r2, [pc, #348]	@ (8002698 <HAL_GPIO_Init+0x2d8>)
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	6193      	str	r3, [r2, #24]
 8002540:	4b55      	ldr	r3, [pc, #340]	@ (8002698 <HAL_GPIO_Init+0x2d8>)
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	60bb      	str	r3, [r7, #8]
 800254a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800254c:	4a53      	ldr	r2, [pc, #332]	@ (800269c <HAL_GPIO_Init+0x2dc>)
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	089b      	lsrs	r3, r3, #2
 8002552:	3302      	adds	r3, #2
 8002554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002558:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f003 0303 	and.w	r3, r3, #3
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	220f      	movs	r2, #15
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	4013      	ands	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002576:	d019      	beq.n	80025ac <HAL_GPIO_Init+0x1ec>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a49      	ldr	r2, [pc, #292]	@ (80026a0 <HAL_GPIO_Init+0x2e0>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d013      	beq.n	80025a8 <HAL_GPIO_Init+0x1e8>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a48      	ldr	r2, [pc, #288]	@ (80026a4 <HAL_GPIO_Init+0x2e4>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d00d      	beq.n	80025a4 <HAL_GPIO_Init+0x1e4>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a47      	ldr	r2, [pc, #284]	@ (80026a8 <HAL_GPIO_Init+0x2e8>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d007      	beq.n	80025a0 <HAL_GPIO_Init+0x1e0>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a46      	ldr	r2, [pc, #280]	@ (80026ac <HAL_GPIO_Init+0x2ec>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d101      	bne.n	800259c <HAL_GPIO_Init+0x1dc>
 8002598:	2304      	movs	r3, #4
 800259a:	e008      	b.n	80025ae <HAL_GPIO_Init+0x1ee>
 800259c:	2305      	movs	r3, #5
 800259e:	e006      	b.n	80025ae <HAL_GPIO_Init+0x1ee>
 80025a0:	2303      	movs	r3, #3
 80025a2:	e004      	b.n	80025ae <HAL_GPIO_Init+0x1ee>
 80025a4:	2302      	movs	r3, #2
 80025a6:	e002      	b.n	80025ae <HAL_GPIO_Init+0x1ee>
 80025a8:	2301      	movs	r3, #1
 80025aa:	e000      	b.n	80025ae <HAL_GPIO_Init+0x1ee>
 80025ac:	2300      	movs	r3, #0
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	f002 0203 	and.w	r2, r2, #3
 80025b4:	0092      	lsls	r2, r2, #2
 80025b6:	4093      	lsls	r3, r2
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025be:	4937      	ldr	r1, [pc, #220]	@ (800269c <HAL_GPIO_Init+0x2dc>)
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	089b      	lsrs	r3, r3, #2
 80025c4:	3302      	adds	r3, #2
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025cc:	4b38      	ldr	r3, [pc, #224]	@ (80026b0 <HAL_GPIO_Init+0x2f0>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	43db      	mvns	r3, r3
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	4013      	ands	r3, r2
 80025da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d003      	beq.n	80025f0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80025f0:	4a2f      	ldr	r2, [pc, #188]	@ (80026b0 <HAL_GPIO_Init+0x2f0>)
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025f6:	4b2e      	ldr	r3, [pc, #184]	@ (80026b0 <HAL_GPIO_Init+0x2f0>)
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	43db      	mvns	r3, r3
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	4013      	ands	r3, r2
 8002604:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	4313      	orrs	r3, r2
 8002618:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800261a:	4a25      	ldr	r2, [pc, #148]	@ (80026b0 <HAL_GPIO_Init+0x2f0>)
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002620:	4b23      	ldr	r3, [pc, #140]	@ (80026b0 <HAL_GPIO_Init+0x2f0>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	43db      	mvns	r3, r3
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	4013      	ands	r3, r2
 800262e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d003      	beq.n	8002644 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	4313      	orrs	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002644:	4a1a      	ldr	r2, [pc, #104]	@ (80026b0 <HAL_GPIO_Init+0x2f0>)
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800264a:	4b19      	ldr	r3, [pc, #100]	@ (80026b0 <HAL_GPIO_Init+0x2f0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	43db      	mvns	r3, r3
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	4013      	ands	r3, r2
 8002658:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	4313      	orrs	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800266e:	4a10      	ldr	r2, [pc, #64]	@ (80026b0 <HAL_GPIO_Init+0x2f0>)
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	3301      	adds	r3, #1
 8002678:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	fa22 f303 	lsr.w	r3, r2, r3
 8002684:	2b00      	cmp	r3, #0
 8002686:	f47f aea3 	bne.w	80023d0 <HAL_GPIO_Init+0x10>
  }
}
 800268a:	bf00      	nop
 800268c:	bf00      	nop
 800268e:	371c      	adds	r7, #28
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	40021000 	.word	0x40021000
 800269c:	40010000 	.word	0x40010000
 80026a0:	48000400 	.word	0x48000400
 80026a4:	48000800 	.word	0x48000800
 80026a8:	48000c00 	.word	0x48000c00
 80026ac:	48001000 	.word	0x48001000
 80026b0:	40010400 	.word	0x40010400

080026b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026c4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d102      	bne.n	80026da <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	f001 b823 	b.w	8003720 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f000 817d 	beq.w	80029ea <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80026f0:	4bbc      	ldr	r3, [pc, #752]	@ (80029e4 <HAL_RCC_OscConfig+0x330>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 030c 	and.w	r3, r3, #12
 80026f8:	2b04      	cmp	r3, #4
 80026fa:	d00c      	beq.n	8002716 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026fc:	4bb9      	ldr	r3, [pc, #740]	@ (80029e4 <HAL_RCC_OscConfig+0x330>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f003 030c 	and.w	r3, r3, #12
 8002704:	2b08      	cmp	r3, #8
 8002706:	d15c      	bne.n	80027c2 <HAL_RCC_OscConfig+0x10e>
 8002708:	4bb6      	ldr	r3, [pc, #728]	@ (80029e4 <HAL_RCC_OscConfig+0x330>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002710:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002714:	d155      	bne.n	80027c2 <HAL_RCC_OscConfig+0x10e>
 8002716:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800271a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002722:	fa93 f3a3 	rbit	r3, r3
 8002726:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800272a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800272e:	fab3 f383 	clz	r3, r3
 8002732:	b2db      	uxtb	r3, r3
 8002734:	095b      	lsrs	r3, r3, #5
 8002736:	b2db      	uxtb	r3, r3
 8002738:	f043 0301 	orr.w	r3, r3, #1
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b01      	cmp	r3, #1
 8002740:	d102      	bne.n	8002748 <HAL_RCC_OscConfig+0x94>
 8002742:	4ba8      	ldr	r3, [pc, #672]	@ (80029e4 <HAL_RCC_OscConfig+0x330>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	e015      	b.n	8002774 <HAL_RCC_OscConfig+0xc0>
 8002748:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800274c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002750:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002754:	fa93 f3a3 	rbit	r3, r3
 8002758:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800275c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002760:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002764:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002768:	fa93 f3a3 	rbit	r3, r3
 800276c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002770:	4b9c      	ldr	r3, [pc, #624]	@ (80029e4 <HAL_RCC_OscConfig+0x330>)
 8002772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002774:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002778:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800277c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002780:	fa92 f2a2 	rbit	r2, r2
 8002784:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002788:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800278c:	fab2 f282 	clz	r2, r2
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	f042 0220 	orr.w	r2, r2, #32
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	f002 021f 	and.w	r2, r2, #31
 800279c:	2101      	movs	r1, #1
 800279e:	fa01 f202 	lsl.w	r2, r1, r2
 80027a2:	4013      	ands	r3, r2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 811f 	beq.w	80029e8 <HAL_RCC_OscConfig+0x334>
 80027aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f040 8116 	bne.w	80029e8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	f000 bfaf 	b.w	8003720 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027d2:	d106      	bne.n	80027e2 <HAL_RCC_OscConfig+0x12e>
 80027d4:	4b83      	ldr	r3, [pc, #524]	@ (80029e4 <HAL_RCC_OscConfig+0x330>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a82      	ldr	r2, [pc, #520]	@ (80029e4 <HAL_RCC_OscConfig+0x330>)
 80027da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027de:	6013      	str	r3, [r2, #0]
 80027e0:	e036      	b.n	8002850 <HAL_RCC_OscConfig+0x19c>
 80027e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10c      	bne.n	800280c <HAL_RCC_OscConfig+0x158>
 80027f2:	4b7c      	ldr	r3, [pc, #496]	@ (80029e4 <HAL_RCC_OscConfig+0x330>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a7b      	ldr	r2, [pc, #492]	@ (80029e4 <HAL_RCC_OscConfig+0x330>)
 80027f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	4b79      	ldr	r3, [pc, #484]	@ (80029e4 <HAL_RCC_OscConfig+0x330>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a78      	ldr	r2, [pc, #480]	@ (80029e4 <HAL_RCC_OscConfig+0x330>)
 8002804:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002808:	6013      	str	r3, [r2, #0]
 800280a:	e021      	b.n	8002850 <HAL_RCC_OscConfig+0x19c>
 800280c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002810:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800281c:	d10c      	bne.n	8002838 <HAL_RCC_OscConfig+0x184>
 800281e:	4b71      	ldr	r3, [pc, #452]	@ (80029e4 <HAL_RCC_OscConfig+0x330>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a70      	ldr	r2, [pc, #448]	@ (80029e4 <HAL_RCC_OscConfig+0x330>)
 8002824:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	4b6e      	ldr	r3, [pc, #440]	@ (80029e4 <HAL_RCC_OscConfig+0x330>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a6d      	ldr	r2, [pc, #436]	@ (80029e4 <HAL_RCC_OscConfig+0x330>)
 8002830:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	e00b      	b.n	8002850 <HAL_RCC_OscConfig+0x19c>
 8002838:	4b6a      	ldr	r3, [pc, #424]	@ (80029e4 <HAL_RCC_OscConfig+0x330>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a69      	ldr	r2, [pc, #420]	@ (80029e4 <HAL_RCC_OscConfig+0x330>)
 800283e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002842:	6013      	str	r3, [r2, #0]
 8002844:	4b67      	ldr	r3, [pc, #412]	@ (80029e4 <HAL_RCC_OscConfig+0x330>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a66      	ldr	r2, [pc, #408]	@ (80029e4 <HAL_RCC_OscConfig+0x330>)
 800284a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800284e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002850:	4b64      	ldr	r3, [pc, #400]	@ (80029e4 <HAL_RCC_OscConfig+0x330>)
 8002852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002854:	f023 020f 	bic.w	r2, r3, #15
 8002858:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800285c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	495f      	ldr	r1, [pc, #380]	@ (80029e4 <HAL_RCC_OscConfig+0x330>)
 8002866:	4313      	orrs	r3, r2
 8002868:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800286a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800286e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d059      	beq.n	800292e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287a:	f7ff fcaf 	bl	80021dc <HAL_GetTick>
 800287e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002882:	e00a      	b.n	800289a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002884:	f7ff fcaa 	bl	80021dc <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b64      	cmp	r3, #100	@ 0x64
 8002892:	d902      	bls.n	800289a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	f000 bf43 	b.w	8003720 <HAL_RCC_OscConfig+0x106c>
 800289a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800289e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80028a6:	fa93 f3a3 	rbit	r3, r3
 80028aa:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80028ae:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b2:	fab3 f383 	clz	r3, r3
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	095b      	lsrs	r3, r3, #5
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d102      	bne.n	80028cc <HAL_RCC_OscConfig+0x218>
 80028c6:	4b47      	ldr	r3, [pc, #284]	@ (80029e4 <HAL_RCC_OscConfig+0x330>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	e015      	b.n	80028f8 <HAL_RCC_OscConfig+0x244>
 80028cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028d0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80028d8:	fa93 f3a3 	rbit	r3, r3
 80028dc:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80028e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028e4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80028e8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80028ec:	fa93 f3a3 	rbit	r3, r3
 80028f0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80028f4:	4b3b      	ldr	r3, [pc, #236]	@ (80029e4 <HAL_RCC_OscConfig+0x330>)
 80028f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80028fc:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002900:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002904:	fa92 f2a2 	rbit	r2, r2
 8002908:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 800290c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002910:	fab2 f282 	clz	r2, r2
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	f042 0220 	orr.w	r2, r2, #32
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	f002 021f 	and.w	r2, r2, #31
 8002920:	2101      	movs	r1, #1
 8002922:	fa01 f202 	lsl.w	r2, r1, r2
 8002926:	4013      	ands	r3, r2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d0ab      	beq.n	8002884 <HAL_RCC_OscConfig+0x1d0>
 800292c:	e05d      	b.n	80029ea <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292e:	f7ff fc55 	bl	80021dc <HAL_GetTick>
 8002932:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002936:	e00a      	b.n	800294e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002938:	f7ff fc50 	bl	80021dc <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b64      	cmp	r3, #100	@ 0x64
 8002946:	d902      	bls.n	800294e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	f000 bee9 	b.w	8003720 <HAL_RCC_OscConfig+0x106c>
 800294e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002952:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002956:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800295a:	fa93 f3a3 	rbit	r3, r3
 800295e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002962:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002966:	fab3 f383 	clz	r3, r3
 800296a:	b2db      	uxtb	r3, r3
 800296c:	095b      	lsrs	r3, r3, #5
 800296e:	b2db      	uxtb	r3, r3
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b01      	cmp	r3, #1
 8002978:	d102      	bne.n	8002980 <HAL_RCC_OscConfig+0x2cc>
 800297a:	4b1a      	ldr	r3, [pc, #104]	@ (80029e4 <HAL_RCC_OscConfig+0x330>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	e015      	b.n	80029ac <HAL_RCC_OscConfig+0x2f8>
 8002980:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002984:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002988:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800298c:	fa93 f3a3 	rbit	r3, r3
 8002990:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002994:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002998:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800299c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80029a0:	fa93 f3a3 	rbit	r3, r3
 80029a4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80029a8:	4b0e      	ldr	r3, [pc, #56]	@ (80029e4 <HAL_RCC_OscConfig+0x330>)
 80029aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ac:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80029b0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80029b4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80029b8:	fa92 f2a2 	rbit	r2, r2
 80029bc:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80029c0:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80029c4:	fab2 f282 	clz	r2, r2
 80029c8:	b2d2      	uxtb	r2, r2
 80029ca:	f042 0220 	orr.w	r2, r2, #32
 80029ce:	b2d2      	uxtb	r2, r2
 80029d0:	f002 021f 	and.w	r2, r2, #31
 80029d4:	2101      	movs	r1, #1
 80029d6:	fa01 f202 	lsl.w	r2, r1, r2
 80029da:	4013      	ands	r3, r2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1ab      	bne.n	8002938 <HAL_RCC_OscConfig+0x284>
 80029e0:	e003      	b.n	80029ea <HAL_RCC_OscConfig+0x336>
 80029e2:	bf00      	nop
 80029e4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 817d 	beq.w	8002cfa <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002a00:	4ba6      	ldr	r3, [pc, #664]	@ (8002c9c <HAL_RCC_OscConfig+0x5e8>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 030c 	and.w	r3, r3, #12
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00b      	beq.n	8002a24 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002a0c:	4ba3      	ldr	r3, [pc, #652]	@ (8002c9c <HAL_RCC_OscConfig+0x5e8>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 030c 	and.w	r3, r3, #12
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d172      	bne.n	8002afe <HAL_RCC_OscConfig+0x44a>
 8002a18:	4ba0      	ldr	r3, [pc, #640]	@ (8002c9c <HAL_RCC_OscConfig+0x5e8>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d16c      	bne.n	8002afe <HAL_RCC_OscConfig+0x44a>
 8002a24:	2302      	movs	r3, #2
 8002a26:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002a2e:	fa93 f3a3 	rbit	r3, r3
 8002a32:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002a36:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a3a:	fab3 f383 	clz	r3, r3
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	095b      	lsrs	r3, r3, #5
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d102      	bne.n	8002a54 <HAL_RCC_OscConfig+0x3a0>
 8002a4e:	4b93      	ldr	r3, [pc, #588]	@ (8002c9c <HAL_RCC_OscConfig+0x5e8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	e013      	b.n	8002a7c <HAL_RCC_OscConfig+0x3c8>
 8002a54:	2302      	movs	r3, #2
 8002a56:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002a5e:	fa93 f3a3 	rbit	r3, r3
 8002a62:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002a66:	2302      	movs	r3, #2
 8002a68:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002a6c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002a70:	fa93 f3a3 	rbit	r3, r3
 8002a74:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002a78:	4b88      	ldr	r3, [pc, #544]	@ (8002c9c <HAL_RCC_OscConfig+0x5e8>)
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002a82:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002a86:	fa92 f2a2 	rbit	r2, r2
 8002a8a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002a8e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002a92:	fab2 f282 	clz	r2, r2
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	f042 0220 	orr.w	r2, r2, #32
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	f002 021f 	and.w	r2, r2, #31
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	fa01 f202 	lsl.w	r2, r1, r2
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00a      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x410>
 8002aae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ab2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d002      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	f000 be2e 	b.w	8003720 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac4:	4b75      	ldr	r3, [pc, #468]	@ (8002c9c <HAL_RCC_OscConfig+0x5e8>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002acc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	21f8      	movs	r1, #248	@ 0xf8
 8002ada:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ade:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002ae2:	fa91 f1a1 	rbit	r1, r1
 8002ae6:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002aea:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002aee:	fab1 f181 	clz	r1, r1
 8002af2:	b2c9      	uxtb	r1, r1
 8002af4:	408b      	lsls	r3, r1
 8002af6:	4969      	ldr	r1, [pc, #420]	@ (8002c9c <HAL_RCC_OscConfig+0x5e8>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002afc:	e0fd      	b.n	8002cfa <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002afe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b02:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 8088 	beq.w	8002c20 <HAL_RCC_OscConfig+0x56c>
 8002b10:	2301      	movs	r3, #1
 8002b12:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b16:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002b1a:	fa93 f3a3 	rbit	r3, r3
 8002b1e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002b22:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b26:	fab3 f383 	clz	r3, r3
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002b30:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	461a      	mov	r2, r3
 8002b38:	2301      	movs	r3, #1
 8002b3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3c:	f7ff fb4e 	bl	80021dc <HAL_GetTick>
 8002b40:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b44:	e00a      	b.n	8002b5c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b46:	f7ff fb49 	bl	80021dc <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d902      	bls.n	8002b5c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	f000 bde2 	b.w	8003720 <HAL_RCC_OscConfig+0x106c>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b62:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002b66:	fa93 f3a3 	rbit	r3, r3
 8002b6a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002b6e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b72:	fab3 f383 	clz	r3, r3
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	095b      	lsrs	r3, r3, #5
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	f043 0301 	orr.w	r3, r3, #1
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d102      	bne.n	8002b8c <HAL_RCC_OscConfig+0x4d8>
 8002b86:	4b45      	ldr	r3, [pc, #276]	@ (8002c9c <HAL_RCC_OscConfig+0x5e8>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	e013      	b.n	8002bb4 <HAL_RCC_OscConfig+0x500>
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b92:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002b96:	fa93 f3a3 	rbit	r3, r3
 8002b9a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002ba4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002ba8:	fa93 f3a3 	rbit	r3, r3
 8002bac:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002bb0:	4b3a      	ldr	r3, [pc, #232]	@ (8002c9c <HAL_RCC_OscConfig+0x5e8>)
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002bba:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002bbe:	fa92 f2a2 	rbit	r2, r2
 8002bc2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002bc6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002bca:	fab2 f282 	clz	r2, r2
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	f042 0220 	orr.w	r2, r2, #32
 8002bd4:	b2d2      	uxtb	r2, r2
 8002bd6:	f002 021f 	and.w	r2, r2, #31
 8002bda:	2101      	movs	r1, #1
 8002bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8002be0:	4013      	ands	r3, r2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0af      	beq.n	8002b46 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be6:	4b2d      	ldr	r3, [pc, #180]	@ (8002c9c <HAL_RCC_OscConfig+0x5e8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bf2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	21f8      	movs	r1, #248	@ 0xf8
 8002bfc:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c00:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002c04:	fa91 f1a1 	rbit	r1, r1
 8002c08:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002c0c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002c10:	fab1 f181 	clz	r1, r1
 8002c14:	b2c9      	uxtb	r1, r1
 8002c16:	408b      	lsls	r3, r1
 8002c18:	4920      	ldr	r1, [pc, #128]	@ (8002c9c <HAL_RCC_OscConfig+0x5e8>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	600b      	str	r3, [r1, #0]
 8002c1e:	e06c      	b.n	8002cfa <HAL_RCC_OscConfig+0x646>
 8002c20:	2301      	movs	r3, #1
 8002c22:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c26:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002c2a:	fa93 f3a3 	rbit	r3, r3
 8002c2e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002c32:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c36:	fab3 f383 	clz	r3, r3
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002c40:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	461a      	mov	r2, r3
 8002c48:	2300      	movs	r3, #0
 8002c4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4c:	f7ff fac6 	bl	80021dc <HAL_GetTick>
 8002c50:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c54:	e00a      	b.n	8002c6c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c56:	f7ff fac1 	bl	80021dc <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d902      	bls.n	8002c6c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	f000 bd5a 	b.w	8003720 <HAL_RCC_OscConfig+0x106c>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c72:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002c76:	fa93 f3a3 	rbit	r3, r3
 8002c7a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002c7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c82:	fab3 f383 	clz	r3, r3
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	095b      	lsrs	r3, r3, #5
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	f043 0301 	orr.w	r3, r3, #1
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d104      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x5ec>
 8002c96:	4b01      	ldr	r3, [pc, #4]	@ (8002c9c <HAL_RCC_OscConfig+0x5e8>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	e015      	b.n	8002cc8 <HAL_RCC_OscConfig+0x614>
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002caa:	fa93 f3a3 	rbit	r3, r3
 8002cae:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002cb8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002cbc:	fa93 f3a3 	rbit	r3, r3
 8002cc0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002cc4:	4bc8      	ldr	r3, [pc, #800]	@ (8002fe8 <HAL_RCC_OscConfig+0x934>)
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc8:	2202      	movs	r2, #2
 8002cca:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002cce:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002cd2:	fa92 f2a2 	rbit	r2, r2
 8002cd6:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002cda:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002cde:	fab2 f282 	clz	r2, r2
 8002ce2:	b2d2      	uxtb	r2, r2
 8002ce4:	f042 0220 	orr.w	r2, r2, #32
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	f002 021f 	and.w	r2, r2, #31
 8002cee:	2101      	movs	r1, #1
 8002cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1ad      	bne.n	8002c56 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cfe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0308 	and.w	r3, r3, #8
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 8110 	beq.w	8002f30 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d14:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d079      	beq.n	8002e14 <HAL_RCC_OscConfig+0x760>
 8002d20:	2301      	movs	r3, #1
 8002d22:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d26:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002d2a:	fa93 f3a3 	rbit	r3, r3
 8002d2e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002d32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d36:	fab3 f383 	clz	r3, r3
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	4bab      	ldr	r3, [pc, #684]	@ (8002fec <HAL_RCC_OscConfig+0x938>)
 8002d40:	4413      	add	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	461a      	mov	r2, r3
 8002d46:	2301      	movs	r3, #1
 8002d48:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d4a:	f7ff fa47 	bl	80021dc <HAL_GetTick>
 8002d4e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d52:	e00a      	b.n	8002d6a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d54:	f7ff fa42 	bl	80021dc <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d902      	bls.n	8002d6a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	f000 bcdb 	b.w	8003720 <HAL_RCC_OscConfig+0x106c>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d70:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002d74:	fa93 f3a3 	rbit	r3, r3
 8002d78:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002d7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d80:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002d84:	2202      	movs	r2, #2
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d8c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	fa93 f2a3 	rbit	r2, r3
 8002d96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002da4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002da8:	2202      	movs	r2, #2
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002db0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	fa93 f2a3 	rbit	r2, r3
 8002dba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dbe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002dc2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc4:	4b88      	ldr	r3, [pc, #544]	@ (8002fe8 <HAL_RCC_OscConfig+0x934>)
 8002dc6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dcc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002dd0:	2102      	movs	r1, #2
 8002dd2:	6019      	str	r1, [r3, #0]
 8002dd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dd8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	fa93 f1a3 	rbit	r1, r3
 8002de2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002dea:	6019      	str	r1, [r3, #0]
  return result;
 8002dec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002df0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	fab3 f383 	clz	r3, r3
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	f003 031f 	and.w	r3, r3, #31
 8002e06:	2101      	movs	r1, #1
 8002e08:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0a0      	beq.n	8002d54 <HAL_RCC_OscConfig+0x6a0>
 8002e12:	e08d      	b.n	8002f30 <HAL_RCC_OscConfig+0x87c>
 8002e14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e18:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e24:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	fa93 f2a3 	rbit	r2, r3
 8002e2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e32:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002e36:	601a      	str	r2, [r3, #0]
  return result;
 8002e38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e3c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002e40:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e42:	fab3 f383 	clz	r3, r3
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	461a      	mov	r2, r3
 8002e4a:	4b68      	ldr	r3, [pc, #416]	@ (8002fec <HAL_RCC_OscConfig+0x938>)
 8002e4c:	4413      	add	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	461a      	mov	r2, r3
 8002e52:	2300      	movs	r3, #0
 8002e54:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e56:	f7ff f9c1 	bl	80021dc <HAL_GetTick>
 8002e5a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e5e:	e00a      	b.n	8002e76 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e60:	f7ff f9bc 	bl	80021dc <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d902      	bls.n	8002e76 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	f000 bc55 	b.w	8003720 <HAL_RCC_OscConfig+0x106c>
 8002e76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e7a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002e7e:	2202      	movs	r2, #2
 8002e80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e86:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	fa93 f2a3 	rbit	r2, r3
 8002e90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e94:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e9e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eaa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	fa93 f2a3 	rbit	r2, r3
 8002eb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eb8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ec2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ece:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	fa93 f2a3 	rbit	r2, r3
 8002ed8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002edc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002ee0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee2:	4b41      	ldr	r3, [pc, #260]	@ (8002fe8 <HAL_RCC_OscConfig+0x934>)
 8002ee4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ee6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eea:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002eee:	2102      	movs	r1, #2
 8002ef0:	6019      	str	r1, [r3, #0]
 8002ef2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ef6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	fa93 f1a3 	rbit	r1, r3
 8002f00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f04:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002f08:	6019      	str	r1, [r3, #0]
  return result;
 8002f0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f0e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	fab3 f383 	clz	r3, r3
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	f003 031f 	and.w	r3, r3, #31
 8002f24:	2101      	movs	r1, #1
 8002f26:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d197      	bne.n	8002e60 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f34:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 81a1 	beq.w	8003288 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f46:	2300      	movs	r3, #0
 8002f48:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f4c:	4b26      	ldr	r3, [pc, #152]	@ (8002fe8 <HAL_RCC_OscConfig+0x934>)
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d116      	bne.n	8002f86 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f58:	4b23      	ldr	r3, [pc, #140]	@ (8002fe8 <HAL_RCC_OscConfig+0x934>)
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	4a22      	ldr	r2, [pc, #136]	@ (8002fe8 <HAL_RCC_OscConfig+0x934>)
 8002f5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f62:	61d3      	str	r3, [r2, #28]
 8002f64:	4b20      	ldr	r3, [pc, #128]	@ (8002fe8 <HAL_RCC_OscConfig+0x934>)
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002f6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f70:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002f74:	601a      	str	r2, [r3, #0]
 8002f76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f7a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002f7e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002f80:	2301      	movs	r3, #1
 8002f82:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f86:	4b1a      	ldr	r3, [pc, #104]	@ (8002ff0 <HAL_RCC_OscConfig+0x93c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d11a      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f92:	4b17      	ldr	r3, [pc, #92]	@ (8002ff0 <HAL_RCC_OscConfig+0x93c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a16      	ldr	r2, [pc, #88]	@ (8002ff0 <HAL_RCC_OscConfig+0x93c>)
 8002f98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f9c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f9e:	f7ff f91d 	bl	80021dc <HAL_GetTick>
 8002fa2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa6:	e009      	b.n	8002fbc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa8:	f7ff f918 	bl	80021dc <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b64      	cmp	r3, #100	@ 0x64
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e3b1      	b.n	8003720 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8002ff0 <HAL_RCC_OscConfig+0x93c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0ef      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fcc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d10d      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x940>
 8002fd8:	4b03      	ldr	r3, [pc, #12]	@ (8002fe8 <HAL_RCC_OscConfig+0x934>)
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	4a02      	ldr	r2, [pc, #8]	@ (8002fe8 <HAL_RCC_OscConfig+0x934>)
 8002fde:	f043 0301 	orr.w	r3, r3, #1
 8002fe2:	6213      	str	r3, [r2, #32]
 8002fe4:	e03c      	b.n	8003060 <HAL_RCC_OscConfig+0x9ac>
 8002fe6:	bf00      	nop
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	10908120 	.word	0x10908120
 8002ff0:	40007000 	.word	0x40007000
 8002ff4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10c      	bne.n	800301e <HAL_RCC_OscConfig+0x96a>
 8003004:	4bc1      	ldr	r3, [pc, #772]	@ (800330c <HAL_RCC_OscConfig+0xc58>)
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	4ac0      	ldr	r2, [pc, #768]	@ (800330c <HAL_RCC_OscConfig+0xc58>)
 800300a:	f023 0301 	bic.w	r3, r3, #1
 800300e:	6213      	str	r3, [r2, #32]
 8003010:	4bbe      	ldr	r3, [pc, #760]	@ (800330c <HAL_RCC_OscConfig+0xc58>)
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	4abd      	ldr	r2, [pc, #756]	@ (800330c <HAL_RCC_OscConfig+0xc58>)
 8003016:	f023 0304 	bic.w	r3, r3, #4
 800301a:	6213      	str	r3, [r2, #32]
 800301c:	e020      	b.n	8003060 <HAL_RCC_OscConfig+0x9ac>
 800301e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003022:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	2b05      	cmp	r3, #5
 800302c:	d10c      	bne.n	8003048 <HAL_RCC_OscConfig+0x994>
 800302e:	4bb7      	ldr	r3, [pc, #732]	@ (800330c <HAL_RCC_OscConfig+0xc58>)
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	4ab6      	ldr	r2, [pc, #728]	@ (800330c <HAL_RCC_OscConfig+0xc58>)
 8003034:	f043 0304 	orr.w	r3, r3, #4
 8003038:	6213      	str	r3, [r2, #32]
 800303a:	4bb4      	ldr	r3, [pc, #720]	@ (800330c <HAL_RCC_OscConfig+0xc58>)
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	4ab3      	ldr	r2, [pc, #716]	@ (800330c <HAL_RCC_OscConfig+0xc58>)
 8003040:	f043 0301 	orr.w	r3, r3, #1
 8003044:	6213      	str	r3, [r2, #32]
 8003046:	e00b      	b.n	8003060 <HAL_RCC_OscConfig+0x9ac>
 8003048:	4bb0      	ldr	r3, [pc, #704]	@ (800330c <HAL_RCC_OscConfig+0xc58>)
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	4aaf      	ldr	r2, [pc, #700]	@ (800330c <HAL_RCC_OscConfig+0xc58>)
 800304e:	f023 0301 	bic.w	r3, r3, #1
 8003052:	6213      	str	r3, [r2, #32]
 8003054:	4bad      	ldr	r3, [pc, #692]	@ (800330c <HAL_RCC_OscConfig+0xc58>)
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	4aac      	ldr	r2, [pc, #688]	@ (800330c <HAL_RCC_OscConfig+0xc58>)
 800305a:	f023 0304 	bic.w	r3, r3, #4
 800305e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003060:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003064:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	2b00      	cmp	r3, #0
 800306e:	f000 8081 	beq.w	8003174 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003072:	f7ff f8b3 	bl	80021dc <HAL_GetTick>
 8003076:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800307a:	e00b      	b.n	8003094 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800307c:	f7ff f8ae 	bl	80021dc <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	f241 3288 	movw	r2, #5000	@ 0x1388
 800308c:	4293      	cmp	r3, r2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e345      	b.n	8003720 <HAL_RCC_OscConfig+0x106c>
 8003094:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003098:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800309c:	2202      	movs	r2, #2
 800309e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030a4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	fa93 f2a3 	rbit	r2, r3
 80030ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030b2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030bc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80030c0:	2202      	movs	r2, #2
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030c8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	fa93 f2a3 	rbit	r2, r3
 80030d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030d6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80030da:	601a      	str	r2, [r3, #0]
  return result;
 80030dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030e0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80030e4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e6:	fab3 f383 	clz	r3, r3
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	095b      	lsrs	r3, r3, #5
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	f043 0302 	orr.w	r3, r3, #2
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d102      	bne.n	8003100 <HAL_RCC_OscConfig+0xa4c>
 80030fa:	4b84      	ldr	r3, [pc, #528]	@ (800330c <HAL_RCC_OscConfig+0xc58>)
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	e013      	b.n	8003128 <HAL_RCC_OscConfig+0xa74>
 8003100:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003104:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003108:	2202      	movs	r2, #2
 800310a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003110:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	fa93 f2a3 	rbit	r2, r3
 800311a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800311e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	4b79      	ldr	r3, [pc, #484]	@ (800330c <HAL_RCC_OscConfig+0xc58>)
 8003126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003128:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800312c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003130:	2102      	movs	r1, #2
 8003132:	6011      	str	r1, [r2, #0]
 8003134:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003138:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800313c:	6812      	ldr	r2, [r2, #0]
 800313e:	fa92 f1a2 	rbit	r1, r2
 8003142:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003146:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800314a:	6011      	str	r1, [r2, #0]
  return result;
 800314c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003150:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003154:	6812      	ldr	r2, [r2, #0]
 8003156:	fab2 f282 	clz	r2, r2
 800315a:	b2d2      	uxtb	r2, r2
 800315c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003160:	b2d2      	uxtb	r2, r2
 8003162:	f002 021f 	and.w	r2, r2, #31
 8003166:	2101      	movs	r1, #1
 8003168:	fa01 f202 	lsl.w	r2, r1, r2
 800316c:	4013      	ands	r3, r2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d084      	beq.n	800307c <HAL_RCC_OscConfig+0x9c8>
 8003172:	e07f      	b.n	8003274 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003174:	f7ff f832 	bl	80021dc <HAL_GetTick>
 8003178:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800317c:	e00b      	b.n	8003196 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800317e:	f7ff f82d 	bl	80021dc <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800318e:	4293      	cmp	r3, r2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e2c4      	b.n	8003720 <HAL_RCC_OscConfig+0x106c>
 8003196:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800319a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800319e:	2202      	movs	r2, #2
 80031a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031a6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	fa93 f2a3 	rbit	r2, r3
 80031b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031b4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031be:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80031c2:	2202      	movs	r2, #2
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ca:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	fa93 f2a3 	rbit	r2, r3
 80031d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031d8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80031dc:	601a      	str	r2, [r3, #0]
  return result;
 80031de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031e2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80031e6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031e8:	fab3 f383 	clz	r3, r3
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	095b      	lsrs	r3, r3, #5
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	f043 0302 	orr.w	r3, r3, #2
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d102      	bne.n	8003202 <HAL_RCC_OscConfig+0xb4e>
 80031fc:	4b43      	ldr	r3, [pc, #268]	@ (800330c <HAL_RCC_OscConfig+0xc58>)
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	e013      	b.n	800322a <HAL_RCC_OscConfig+0xb76>
 8003202:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003206:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800320a:	2202      	movs	r2, #2
 800320c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003212:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	fa93 f2a3 	rbit	r2, r3
 800321c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003220:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	4b39      	ldr	r3, [pc, #228]	@ (800330c <HAL_RCC_OscConfig+0xc58>)
 8003228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800322e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003232:	2102      	movs	r1, #2
 8003234:	6011      	str	r1, [r2, #0]
 8003236:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800323a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800323e:	6812      	ldr	r2, [r2, #0]
 8003240:	fa92 f1a2 	rbit	r1, r2
 8003244:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003248:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800324c:	6011      	str	r1, [r2, #0]
  return result;
 800324e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003252:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003256:	6812      	ldr	r2, [r2, #0]
 8003258:	fab2 f282 	clz	r2, r2
 800325c:	b2d2      	uxtb	r2, r2
 800325e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	f002 021f 	and.w	r2, r2, #31
 8003268:	2101      	movs	r1, #1
 800326a:	fa01 f202 	lsl.w	r2, r1, r2
 800326e:	4013      	ands	r3, r2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d184      	bne.n	800317e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003274:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003278:	2b01      	cmp	r3, #1
 800327a:	d105      	bne.n	8003288 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800327c:	4b23      	ldr	r3, [pc, #140]	@ (800330c <HAL_RCC_OscConfig+0xc58>)
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	4a22      	ldr	r2, [pc, #136]	@ (800330c <HAL_RCC_OscConfig+0xc58>)
 8003282:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003286:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003288:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800328c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 8242 	beq.w	800371e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800329a:	4b1c      	ldr	r3, [pc, #112]	@ (800330c <HAL_RCC_OscConfig+0xc58>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f003 030c 	and.w	r3, r3, #12
 80032a2:	2b08      	cmp	r3, #8
 80032a4:	f000 8213 	beq.w	80036ce <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	69db      	ldr	r3, [r3, #28]
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	f040 8162 	bne.w	800357e <HAL_RCC_OscConfig+0xeca>
 80032ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032be:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80032c2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80032c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032cc:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	fa93 f2a3 	rbit	r2, r3
 80032d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032da:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80032de:	601a      	str	r2, [r3, #0]
  return result;
 80032e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032e4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80032e8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ea:	fab3 f383 	clz	r3, r3
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80032f4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	461a      	mov	r2, r3
 80032fc:	2300      	movs	r3, #0
 80032fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003300:	f7fe ff6c 	bl	80021dc <HAL_GetTick>
 8003304:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003308:	e00c      	b.n	8003324 <HAL_RCC_OscConfig+0xc70>
 800330a:	bf00      	nop
 800330c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003310:	f7fe ff64 	bl	80021dc <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e1fd      	b.n	8003720 <HAL_RCC_OscConfig+0x106c>
 8003324:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003328:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800332c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003330:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003332:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003336:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	fa93 f2a3 	rbit	r2, r3
 8003340:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003344:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003348:	601a      	str	r2, [r3, #0]
  return result;
 800334a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800334e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003352:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003354:	fab3 f383 	clz	r3, r3
 8003358:	b2db      	uxtb	r3, r3
 800335a:	095b      	lsrs	r3, r3, #5
 800335c:	b2db      	uxtb	r3, r3
 800335e:	f043 0301 	orr.w	r3, r3, #1
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b01      	cmp	r3, #1
 8003366:	d102      	bne.n	800336e <HAL_RCC_OscConfig+0xcba>
 8003368:	4bb0      	ldr	r3, [pc, #704]	@ (800362c <HAL_RCC_OscConfig+0xf78>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	e027      	b.n	80033be <HAL_RCC_OscConfig+0xd0a>
 800336e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003372:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003376:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800337a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003380:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	fa93 f2a3 	rbit	r2, r3
 800338a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800338e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003398:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800339c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033a6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	fa93 f2a3 	rbit	r2, r3
 80033b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033b4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	4b9c      	ldr	r3, [pc, #624]	@ (800362c <HAL_RCC_OscConfig+0xf78>)
 80033bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033be:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033c2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80033c6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80033ca:	6011      	str	r1, [r2, #0]
 80033cc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033d0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80033d4:	6812      	ldr	r2, [r2, #0]
 80033d6:	fa92 f1a2 	rbit	r1, r2
 80033da:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033de:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80033e2:	6011      	str	r1, [r2, #0]
  return result;
 80033e4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033e8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80033ec:	6812      	ldr	r2, [r2, #0]
 80033ee:	fab2 f282 	clz	r2, r2
 80033f2:	b2d2      	uxtb	r2, r2
 80033f4:	f042 0220 	orr.w	r2, r2, #32
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	f002 021f 	and.w	r2, r2, #31
 80033fe:	2101      	movs	r1, #1
 8003400:	fa01 f202 	lsl.w	r2, r1, r2
 8003404:	4013      	ands	r3, r2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d182      	bne.n	8003310 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800340a:	4b88      	ldr	r3, [pc, #544]	@ (800362c <HAL_RCC_OscConfig+0xf78>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003412:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003416:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800341e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003422:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	430b      	orrs	r3, r1
 800342c:	497f      	ldr	r1, [pc, #508]	@ (800362c <HAL_RCC_OscConfig+0xf78>)
 800342e:	4313      	orrs	r3, r2
 8003430:	604b      	str	r3, [r1, #4]
 8003432:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003436:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800343a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800343e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003440:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003444:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	fa93 f2a3 	rbit	r2, r3
 800344e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003452:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003456:	601a      	str	r2, [r3, #0]
  return result;
 8003458:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800345c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003460:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003462:	fab3 f383 	clz	r3, r3
 8003466:	b2db      	uxtb	r3, r3
 8003468:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800346c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	461a      	mov	r2, r3
 8003474:	2301      	movs	r3, #1
 8003476:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003478:	f7fe feb0 	bl	80021dc <HAL_GetTick>
 800347c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003480:	e009      	b.n	8003496 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003482:	f7fe feab 	bl	80021dc <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e144      	b.n	8003720 <HAL_RCC_OscConfig+0x106c>
 8003496:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800349a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800349e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034a8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	fa93 f2a3 	rbit	r2, r3
 80034b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034b6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80034ba:	601a      	str	r2, [r3, #0]
  return result;
 80034bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034c0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80034c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034c6:	fab3 f383 	clz	r3, r3
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	095b      	lsrs	r3, r3, #5
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	f043 0301 	orr.w	r3, r3, #1
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d102      	bne.n	80034e0 <HAL_RCC_OscConfig+0xe2c>
 80034da:	4b54      	ldr	r3, [pc, #336]	@ (800362c <HAL_RCC_OscConfig+0xf78>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	e027      	b.n	8003530 <HAL_RCC_OscConfig+0xe7c>
 80034e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034e4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80034e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034f2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	fa93 f2a3 	rbit	r2, r3
 80034fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003500:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800350a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800350e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003518:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	fa93 f2a3 	rbit	r2, r3
 8003522:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003526:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	4b3f      	ldr	r3, [pc, #252]	@ (800362c <HAL_RCC_OscConfig+0xf78>)
 800352e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003530:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003534:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003538:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800353c:	6011      	str	r1, [r2, #0]
 800353e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003542:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003546:	6812      	ldr	r2, [r2, #0]
 8003548:	fa92 f1a2 	rbit	r1, r2
 800354c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003550:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003554:	6011      	str	r1, [r2, #0]
  return result;
 8003556:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800355a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800355e:	6812      	ldr	r2, [r2, #0]
 8003560:	fab2 f282 	clz	r2, r2
 8003564:	b2d2      	uxtb	r2, r2
 8003566:	f042 0220 	orr.w	r2, r2, #32
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	f002 021f 	and.w	r2, r2, #31
 8003570:	2101      	movs	r1, #1
 8003572:	fa01 f202 	lsl.w	r2, r1, r2
 8003576:	4013      	ands	r3, r2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d082      	beq.n	8003482 <HAL_RCC_OscConfig+0xdce>
 800357c:	e0cf      	b.n	800371e <HAL_RCC_OscConfig+0x106a>
 800357e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003582:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003586:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800358a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003590:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	fa93 f2a3 	rbit	r2, r3
 800359a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800359e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80035a2:	601a      	str	r2, [r3, #0]
  return result;
 80035a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035a8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80035ac:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ae:	fab3 f383 	clz	r3, r3
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80035b8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	461a      	mov	r2, r3
 80035c0:	2300      	movs	r3, #0
 80035c2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c4:	f7fe fe0a 	bl	80021dc <HAL_GetTick>
 80035c8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035cc:	e009      	b.n	80035e2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ce:	f7fe fe05 	bl	80021dc <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e09e      	b.n	8003720 <HAL_RCC_OscConfig+0x106c>
 80035e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035e6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80035ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035f4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	fa93 f2a3 	rbit	r2, r3
 80035fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003602:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003606:	601a      	str	r2, [r3, #0]
  return result;
 8003608:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800360c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003610:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003612:	fab3 f383 	clz	r3, r3
 8003616:	b2db      	uxtb	r3, r3
 8003618:	095b      	lsrs	r3, r3, #5
 800361a:	b2db      	uxtb	r3, r3
 800361c:	f043 0301 	orr.w	r3, r3, #1
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b01      	cmp	r3, #1
 8003624:	d104      	bne.n	8003630 <HAL_RCC_OscConfig+0xf7c>
 8003626:	4b01      	ldr	r3, [pc, #4]	@ (800362c <HAL_RCC_OscConfig+0xf78>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	e029      	b.n	8003680 <HAL_RCC_OscConfig+0xfcc>
 800362c:	40021000 	.word	0x40021000
 8003630:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003634:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003638:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800363c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003642:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	fa93 f2a3 	rbit	r2, r3
 800364c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003650:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003654:	601a      	str	r2, [r3, #0]
 8003656:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800365a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800365e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003668:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	fa93 f2a3 	rbit	r2, r3
 8003672:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003676:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	4b2b      	ldr	r3, [pc, #172]	@ (800372c <HAL_RCC_OscConfig+0x1078>)
 800367e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003680:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003684:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003688:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800368c:	6011      	str	r1, [r2, #0]
 800368e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003692:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003696:	6812      	ldr	r2, [r2, #0]
 8003698:	fa92 f1a2 	rbit	r1, r2
 800369c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036a0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80036a4:	6011      	str	r1, [r2, #0]
  return result;
 80036a6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036aa:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80036ae:	6812      	ldr	r2, [r2, #0]
 80036b0:	fab2 f282 	clz	r2, r2
 80036b4:	b2d2      	uxtb	r2, r2
 80036b6:	f042 0220 	orr.w	r2, r2, #32
 80036ba:	b2d2      	uxtb	r2, r2
 80036bc:	f002 021f 	and.w	r2, r2, #31
 80036c0:	2101      	movs	r1, #1
 80036c2:	fa01 f202 	lsl.w	r2, r1, r2
 80036c6:	4013      	ands	r3, r2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d180      	bne.n	80035ce <HAL_RCC_OscConfig+0xf1a>
 80036cc:	e027      	b.n	800371e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d101      	bne.n	80036e2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e01e      	b.n	8003720 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036e2:	4b12      	ldr	r3, [pc, #72]	@ (800372c <HAL_RCC_OscConfig+0x1078>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80036ea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80036ee:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80036f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d10b      	bne.n	800371a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003702:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003706:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800370a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800370e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003716:	429a      	cmp	r2, r3
 8003718:	d001      	beq.n	800371e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e000      	b.n	8003720 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	40021000 	.word	0x40021000

08003730 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b09e      	sub	sp, #120	@ 0x78
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800373a:	2300      	movs	r3, #0
 800373c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e162      	b.n	8003a0e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003748:	4b90      	ldr	r3, [pc, #576]	@ (800398c <HAL_RCC_ClockConfig+0x25c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	429a      	cmp	r2, r3
 8003754:	d910      	bls.n	8003778 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003756:	4b8d      	ldr	r3, [pc, #564]	@ (800398c <HAL_RCC_ClockConfig+0x25c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f023 0207 	bic.w	r2, r3, #7
 800375e:	498b      	ldr	r1, [pc, #556]	@ (800398c <HAL_RCC_ClockConfig+0x25c>)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	4313      	orrs	r3, r2
 8003764:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003766:	4b89      	ldr	r3, [pc, #548]	@ (800398c <HAL_RCC_ClockConfig+0x25c>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0307 	and.w	r3, r3, #7
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	429a      	cmp	r2, r3
 8003772:	d001      	beq.n	8003778 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e14a      	b.n	8003a0e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d008      	beq.n	8003796 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003784:	4b82      	ldr	r3, [pc, #520]	@ (8003990 <HAL_RCC_ClockConfig+0x260>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	497f      	ldr	r1, [pc, #508]	@ (8003990 <HAL_RCC_ClockConfig+0x260>)
 8003792:	4313      	orrs	r3, r2
 8003794:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f000 80dc 	beq.w	800395c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d13c      	bne.n	8003826 <HAL_RCC_ClockConfig+0xf6>
 80037ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80037b0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80037b4:	fa93 f3a3 	rbit	r3, r3
 80037b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80037ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037bc:	fab3 f383 	clz	r3, r3
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	095b      	lsrs	r3, r3, #5
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	f043 0301 	orr.w	r3, r3, #1
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d102      	bne.n	80037d6 <HAL_RCC_ClockConfig+0xa6>
 80037d0:	4b6f      	ldr	r3, [pc, #444]	@ (8003990 <HAL_RCC_ClockConfig+0x260>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	e00f      	b.n	80037f6 <HAL_RCC_ClockConfig+0xc6>
 80037d6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80037da:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037de:	fa93 f3a3 	rbit	r3, r3
 80037e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80037e4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80037e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80037ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037ec:	fa93 f3a3 	rbit	r3, r3
 80037f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80037f2:	4b67      	ldr	r3, [pc, #412]	@ (8003990 <HAL_RCC_ClockConfig+0x260>)
 80037f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80037fa:	65ba      	str	r2, [r7, #88]	@ 0x58
 80037fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80037fe:	fa92 f2a2 	rbit	r2, r2
 8003802:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003804:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003806:	fab2 f282 	clz	r2, r2
 800380a:	b2d2      	uxtb	r2, r2
 800380c:	f042 0220 	orr.w	r2, r2, #32
 8003810:	b2d2      	uxtb	r2, r2
 8003812:	f002 021f 	and.w	r2, r2, #31
 8003816:	2101      	movs	r1, #1
 8003818:	fa01 f202 	lsl.w	r2, r1, r2
 800381c:	4013      	ands	r3, r2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d17b      	bne.n	800391a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e0f3      	b.n	8003a0e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2b02      	cmp	r3, #2
 800382c:	d13c      	bne.n	80038a8 <HAL_RCC_ClockConfig+0x178>
 800382e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003832:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003834:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003836:	fa93 f3a3 	rbit	r3, r3
 800383a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800383c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800383e:	fab3 f383 	clz	r3, r3
 8003842:	b2db      	uxtb	r3, r3
 8003844:	095b      	lsrs	r3, r3, #5
 8003846:	b2db      	uxtb	r3, r3
 8003848:	f043 0301 	orr.w	r3, r3, #1
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b01      	cmp	r3, #1
 8003850:	d102      	bne.n	8003858 <HAL_RCC_ClockConfig+0x128>
 8003852:	4b4f      	ldr	r3, [pc, #316]	@ (8003990 <HAL_RCC_ClockConfig+0x260>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	e00f      	b.n	8003878 <HAL_RCC_ClockConfig+0x148>
 8003858:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800385c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003860:	fa93 f3a3 	rbit	r3, r3
 8003864:	647b      	str	r3, [r7, #68]	@ 0x44
 8003866:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800386a:	643b      	str	r3, [r7, #64]	@ 0x40
 800386c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800386e:	fa93 f3a3 	rbit	r3, r3
 8003872:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003874:	4b46      	ldr	r3, [pc, #280]	@ (8003990 <HAL_RCC_ClockConfig+0x260>)
 8003876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003878:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800387c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800387e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003880:	fa92 f2a2 	rbit	r2, r2
 8003884:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003886:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003888:	fab2 f282 	clz	r2, r2
 800388c:	b2d2      	uxtb	r2, r2
 800388e:	f042 0220 	orr.w	r2, r2, #32
 8003892:	b2d2      	uxtb	r2, r2
 8003894:	f002 021f 	and.w	r2, r2, #31
 8003898:	2101      	movs	r1, #1
 800389a:	fa01 f202 	lsl.w	r2, r1, r2
 800389e:	4013      	ands	r3, r2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d13a      	bne.n	800391a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e0b2      	b.n	8003a0e <HAL_RCC_ClockConfig+0x2de>
 80038a8:	2302      	movs	r3, #2
 80038aa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ae:	fa93 f3a3 	rbit	r3, r3
 80038b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80038b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b6:	fab3 f383 	clz	r3, r3
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	095b      	lsrs	r3, r3, #5
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	f043 0301 	orr.w	r3, r3, #1
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d102      	bne.n	80038d0 <HAL_RCC_ClockConfig+0x1a0>
 80038ca:	4b31      	ldr	r3, [pc, #196]	@ (8003990 <HAL_RCC_ClockConfig+0x260>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	e00d      	b.n	80038ec <HAL_RCC_ClockConfig+0x1bc>
 80038d0:	2302      	movs	r3, #2
 80038d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d6:	fa93 f3a3 	rbit	r3, r3
 80038da:	627b      	str	r3, [r7, #36]	@ 0x24
 80038dc:	2302      	movs	r3, #2
 80038de:	623b      	str	r3, [r7, #32]
 80038e0:	6a3b      	ldr	r3, [r7, #32]
 80038e2:	fa93 f3a3 	rbit	r3, r3
 80038e6:	61fb      	str	r3, [r7, #28]
 80038e8:	4b29      	ldr	r3, [pc, #164]	@ (8003990 <HAL_RCC_ClockConfig+0x260>)
 80038ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ec:	2202      	movs	r2, #2
 80038ee:	61ba      	str	r2, [r7, #24]
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	fa92 f2a2 	rbit	r2, r2
 80038f6:	617a      	str	r2, [r7, #20]
  return result;
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	fab2 f282 	clz	r2, r2
 80038fe:	b2d2      	uxtb	r2, r2
 8003900:	f042 0220 	orr.w	r2, r2, #32
 8003904:	b2d2      	uxtb	r2, r2
 8003906:	f002 021f 	and.w	r2, r2, #31
 800390a:	2101      	movs	r1, #1
 800390c:	fa01 f202 	lsl.w	r2, r1, r2
 8003910:	4013      	ands	r3, r2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e079      	b.n	8003a0e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800391a:	4b1d      	ldr	r3, [pc, #116]	@ (8003990 <HAL_RCC_ClockConfig+0x260>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f023 0203 	bic.w	r2, r3, #3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	491a      	ldr	r1, [pc, #104]	@ (8003990 <HAL_RCC_ClockConfig+0x260>)
 8003928:	4313      	orrs	r3, r2
 800392a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800392c:	f7fe fc56 	bl	80021dc <HAL_GetTick>
 8003930:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003932:	e00a      	b.n	800394a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003934:	f7fe fc52 	bl	80021dc <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003942:	4293      	cmp	r3, r2
 8003944:	d901      	bls.n	800394a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e061      	b.n	8003a0e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800394a:	4b11      	ldr	r3, [pc, #68]	@ (8003990 <HAL_RCC_ClockConfig+0x260>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f003 020c 	and.w	r2, r3, #12
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	429a      	cmp	r2, r3
 800395a:	d1eb      	bne.n	8003934 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800395c:	4b0b      	ldr	r3, [pc, #44]	@ (800398c <HAL_RCC_ClockConfig+0x25c>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	429a      	cmp	r2, r3
 8003968:	d214      	bcs.n	8003994 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800396a:	4b08      	ldr	r3, [pc, #32]	@ (800398c <HAL_RCC_ClockConfig+0x25c>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f023 0207 	bic.w	r2, r3, #7
 8003972:	4906      	ldr	r1, [pc, #24]	@ (800398c <HAL_RCC_ClockConfig+0x25c>)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	4313      	orrs	r3, r2
 8003978:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800397a:	4b04      	ldr	r3, [pc, #16]	@ (800398c <HAL_RCC_ClockConfig+0x25c>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	429a      	cmp	r2, r3
 8003986:	d005      	beq.n	8003994 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e040      	b.n	8003a0e <HAL_RCC_ClockConfig+0x2de>
 800398c:	40022000 	.word	0x40022000
 8003990:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0304 	and.w	r3, r3, #4
 800399c:	2b00      	cmp	r3, #0
 800399e:	d008      	beq.n	80039b2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003a18 <HAL_RCC_ClockConfig+0x2e8>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	491a      	ldr	r1, [pc, #104]	@ (8003a18 <HAL_RCC_ClockConfig+0x2e8>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0308 	and.w	r3, r3, #8
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d009      	beq.n	80039d2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039be:	4b16      	ldr	r3, [pc, #88]	@ (8003a18 <HAL_RCC_ClockConfig+0x2e8>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	4912      	ldr	r1, [pc, #72]	@ (8003a18 <HAL_RCC_ClockConfig+0x2e8>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80039d2:	f000 f829 	bl	8003a28 <HAL_RCC_GetSysClockFreq>
 80039d6:	4601      	mov	r1, r0
 80039d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003a18 <HAL_RCC_ClockConfig+0x2e8>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039e0:	22f0      	movs	r2, #240	@ 0xf0
 80039e2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	fa92 f2a2 	rbit	r2, r2
 80039ea:	60fa      	str	r2, [r7, #12]
  return result;
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	fab2 f282 	clz	r2, r2
 80039f2:	b2d2      	uxtb	r2, r2
 80039f4:	40d3      	lsrs	r3, r2
 80039f6:	4a09      	ldr	r2, [pc, #36]	@ (8003a1c <HAL_RCC_ClockConfig+0x2ec>)
 80039f8:	5cd3      	ldrb	r3, [r2, r3]
 80039fa:	fa21 f303 	lsr.w	r3, r1, r3
 80039fe:	4a08      	ldr	r2, [pc, #32]	@ (8003a20 <HAL_RCC_ClockConfig+0x2f0>)
 8003a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003a02:	4b08      	ldr	r3, [pc, #32]	@ (8003a24 <HAL_RCC_ClockConfig+0x2f4>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fe fba4 	bl	8002154 <HAL_InitTick>
  
  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3778      	adds	r7, #120	@ 0x78
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	08005378 	.word	0x08005378
 8003a20:	20000094 	.word	0x20000094
 8003a24:	20000120 	.word	0x20000120

08003a28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b087      	sub	sp, #28
 8003a2c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60fb      	str	r3, [r7, #12]
 8003a32:	2300      	movs	r3, #0
 8003a34:	60bb      	str	r3, [r7, #8]
 8003a36:	2300      	movs	r3, #0
 8003a38:	617b      	str	r3, [r7, #20]
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003a42:	4b1e      	ldr	r3, [pc, #120]	@ (8003abc <HAL_RCC_GetSysClockFreq+0x94>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f003 030c 	and.w	r3, r3, #12
 8003a4e:	2b04      	cmp	r3, #4
 8003a50:	d002      	beq.n	8003a58 <HAL_RCC_GetSysClockFreq+0x30>
 8003a52:	2b08      	cmp	r3, #8
 8003a54:	d003      	beq.n	8003a5e <HAL_RCC_GetSysClockFreq+0x36>
 8003a56:	e026      	b.n	8003aa6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a58:	4b19      	ldr	r3, [pc, #100]	@ (8003ac0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a5a:	613b      	str	r3, [r7, #16]
      break;
 8003a5c:	e026      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	0c9b      	lsrs	r3, r3, #18
 8003a62:	f003 030f 	and.w	r3, r3, #15
 8003a66:	4a17      	ldr	r2, [pc, #92]	@ (8003ac4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a68:	5cd3      	ldrb	r3, [r2, r3]
 8003a6a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003a6c:	4b13      	ldr	r3, [pc, #76]	@ (8003abc <HAL_RCC_GetSysClockFreq+0x94>)
 8003a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a70:	f003 030f 	and.w	r3, r3, #15
 8003a74:	4a14      	ldr	r2, [pc, #80]	@ (8003ac8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a76:	5cd3      	ldrb	r3, [r2, r3]
 8003a78:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d008      	beq.n	8003a96 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a84:	4a0e      	ldr	r2, [pc, #56]	@ (8003ac0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	fb02 f303 	mul.w	r3, r2, r3
 8003a92:	617b      	str	r3, [r7, #20]
 8003a94:	e004      	b.n	8003aa0 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a0c      	ldr	r2, [pc, #48]	@ (8003acc <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a9a:	fb02 f303 	mul.w	r3, r2, r3
 8003a9e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	613b      	str	r3, [r7, #16]
      break;
 8003aa4:	e002      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003aa6:	4b06      	ldr	r3, [pc, #24]	@ (8003ac0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003aa8:	613b      	str	r3, [r7, #16]
      break;
 8003aaa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aac:	693b      	ldr	r3, [r7, #16]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	371c      	adds	r7, #28
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	007a1200 	.word	0x007a1200
 8003ac4:	080053e8 	.word	0x080053e8
 8003ac8:	080053f8 	.word	0x080053f8
 8003acc:	003d0900 	.word	0x003d0900

08003ad0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e049      	b.n	8003b76 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d106      	bne.n	8003afc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7fd ff84 	bl	8001a04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2202      	movs	r2, #2
 8003b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	3304      	adds	r3, #4
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	4610      	mov	r0, r2
 8003b10:	f000 fa4a 	bl	8003fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
	...

08003b80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d109      	bne.n	8003ba4 <HAL_TIM_PWM_Start+0x24>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	bf14      	ite	ne
 8003b9c:	2301      	movne	r3, #1
 8003b9e:	2300      	moveq	r3, #0
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	e03c      	b.n	8003c1e <HAL_TIM_PWM_Start+0x9e>
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	d109      	bne.n	8003bbe <HAL_TIM_PWM_Start+0x3e>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	bf14      	ite	ne
 8003bb6:	2301      	movne	r3, #1
 8003bb8:	2300      	moveq	r3, #0
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	e02f      	b.n	8003c1e <HAL_TIM_PWM_Start+0x9e>
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2b08      	cmp	r3, #8
 8003bc2:	d109      	bne.n	8003bd8 <HAL_TIM_PWM_Start+0x58>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	bf14      	ite	ne
 8003bd0:	2301      	movne	r3, #1
 8003bd2:	2300      	moveq	r3, #0
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	e022      	b.n	8003c1e <HAL_TIM_PWM_Start+0x9e>
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	2b0c      	cmp	r3, #12
 8003bdc:	d109      	bne.n	8003bf2 <HAL_TIM_PWM_Start+0x72>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	bf14      	ite	ne
 8003bea:	2301      	movne	r3, #1
 8003bec:	2300      	moveq	r3, #0
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	e015      	b.n	8003c1e <HAL_TIM_PWM_Start+0x9e>
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	2b10      	cmp	r3, #16
 8003bf6:	d109      	bne.n	8003c0c <HAL_TIM_PWM_Start+0x8c>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	bf14      	ite	ne
 8003c04:	2301      	movne	r3, #1
 8003c06:	2300      	moveq	r3, #0
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	e008      	b.n	8003c1e <HAL_TIM_PWM_Start+0x9e>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	bf14      	ite	ne
 8003c18:	2301      	movne	r3, #1
 8003c1a:	2300      	moveq	r3, #0
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e097      	b.n	8003d56 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d104      	bne.n	8003c36 <HAL_TIM_PWM_Start+0xb6>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c34:	e023      	b.n	8003c7e <HAL_TIM_PWM_Start+0xfe>
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	2b04      	cmp	r3, #4
 8003c3a:	d104      	bne.n	8003c46 <HAL_TIM_PWM_Start+0xc6>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2202      	movs	r2, #2
 8003c40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c44:	e01b      	b.n	8003c7e <HAL_TIM_PWM_Start+0xfe>
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	2b08      	cmp	r3, #8
 8003c4a:	d104      	bne.n	8003c56 <HAL_TIM_PWM_Start+0xd6>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2202      	movs	r2, #2
 8003c50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c54:	e013      	b.n	8003c7e <HAL_TIM_PWM_Start+0xfe>
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	2b0c      	cmp	r3, #12
 8003c5a:	d104      	bne.n	8003c66 <HAL_TIM_PWM_Start+0xe6>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003c64:	e00b      	b.n	8003c7e <HAL_TIM_PWM_Start+0xfe>
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	2b10      	cmp	r3, #16
 8003c6a:	d104      	bne.n	8003c76 <HAL_TIM_PWM_Start+0xf6>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2202      	movs	r2, #2
 8003c70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c74:	e003      	b.n	8003c7e <HAL_TIM_PWM_Start+0xfe>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2202      	movs	r2, #2
 8003c7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2201      	movs	r2, #1
 8003c84:	6839      	ldr	r1, [r7, #0]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f000 fd00 	bl	800468c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a33      	ldr	r2, [pc, #204]	@ (8003d60 <HAL_TIM_PWM_Start+0x1e0>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d013      	beq.n	8003cbe <HAL_TIM_PWM_Start+0x13e>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a32      	ldr	r2, [pc, #200]	@ (8003d64 <HAL_TIM_PWM_Start+0x1e4>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d00e      	beq.n	8003cbe <HAL_TIM_PWM_Start+0x13e>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a30      	ldr	r2, [pc, #192]	@ (8003d68 <HAL_TIM_PWM_Start+0x1e8>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d009      	beq.n	8003cbe <HAL_TIM_PWM_Start+0x13e>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a2f      	ldr	r2, [pc, #188]	@ (8003d6c <HAL_TIM_PWM_Start+0x1ec>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d004      	beq.n	8003cbe <HAL_TIM_PWM_Start+0x13e>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a2d      	ldr	r2, [pc, #180]	@ (8003d70 <HAL_TIM_PWM_Start+0x1f0>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d101      	bne.n	8003cc2 <HAL_TIM_PWM_Start+0x142>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e000      	b.n	8003cc4 <HAL_TIM_PWM_Start+0x144>
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d007      	beq.n	8003cd8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003cd6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a20      	ldr	r2, [pc, #128]	@ (8003d60 <HAL_TIM_PWM_Start+0x1e0>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d018      	beq.n	8003d14 <HAL_TIM_PWM_Start+0x194>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cea:	d013      	beq.n	8003d14 <HAL_TIM_PWM_Start+0x194>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a20      	ldr	r2, [pc, #128]	@ (8003d74 <HAL_TIM_PWM_Start+0x1f4>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d00e      	beq.n	8003d14 <HAL_TIM_PWM_Start+0x194>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a1f      	ldr	r2, [pc, #124]	@ (8003d78 <HAL_TIM_PWM_Start+0x1f8>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d009      	beq.n	8003d14 <HAL_TIM_PWM_Start+0x194>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a17      	ldr	r2, [pc, #92]	@ (8003d64 <HAL_TIM_PWM_Start+0x1e4>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d004      	beq.n	8003d14 <HAL_TIM_PWM_Start+0x194>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a16      	ldr	r2, [pc, #88]	@ (8003d68 <HAL_TIM_PWM_Start+0x1e8>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d115      	bne.n	8003d40 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689a      	ldr	r2, [r3, #8]
 8003d1a:	4b18      	ldr	r3, [pc, #96]	@ (8003d7c <HAL_TIM_PWM_Start+0x1fc>)
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2b06      	cmp	r3, #6
 8003d24:	d015      	beq.n	8003d52 <HAL_TIM_PWM_Start+0x1d2>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d2c:	d011      	beq.n	8003d52 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f042 0201 	orr.w	r2, r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d3e:	e008      	b.n	8003d52 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f042 0201 	orr.w	r2, r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]
 8003d50:	e000      	b.n	8003d54 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	40012c00 	.word	0x40012c00
 8003d64:	40013400 	.word	0x40013400
 8003d68:	40014000 	.word	0x40014000
 8003d6c:	40014400 	.word	0x40014400
 8003d70:	40014800 	.word	0x40014800
 8003d74:	40000400 	.word	0x40000400
 8003d78:	40000800 	.word	0x40000800
 8003d7c:	00010007 	.word	0x00010007

08003d80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d101      	bne.n	8003d9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	e0ff      	b.n	8003f9e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2b14      	cmp	r3, #20
 8003daa:	f200 80f0 	bhi.w	8003f8e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003dae:	a201      	add	r2, pc, #4	@ (adr r2, 8003db4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db4:	08003e09 	.word	0x08003e09
 8003db8:	08003f8f 	.word	0x08003f8f
 8003dbc:	08003f8f 	.word	0x08003f8f
 8003dc0:	08003f8f 	.word	0x08003f8f
 8003dc4:	08003e49 	.word	0x08003e49
 8003dc8:	08003f8f 	.word	0x08003f8f
 8003dcc:	08003f8f 	.word	0x08003f8f
 8003dd0:	08003f8f 	.word	0x08003f8f
 8003dd4:	08003e8b 	.word	0x08003e8b
 8003dd8:	08003f8f 	.word	0x08003f8f
 8003ddc:	08003f8f 	.word	0x08003f8f
 8003de0:	08003f8f 	.word	0x08003f8f
 8003de4:	08003ecb 	.word	0x08003ecb
 8003de8:	08003f8f 	.word	0x08003f8f
 8003dec:	08003f8f 	.word	0x08003f8f
 8003df0:	08003f8f 	.word	0x08003f8f
 8003df4:	08003f0d 	.word	0x08003f0d
 8003df8:	08003f8f 	.word	0x08003f8f
 8003dfc:	08003f8f 	.word	0x08003f8f
 8003e00:	08003f8f 	.word	0x08003f8f
 8003e04:	08003f4d 	.word	0x08003f4d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68b9      	ldr	r1, [r7, #8]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 f966 	bl	80040e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	699a      	ldr	r2, [r3, #24]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f042 0208 	orr.w	r2, r2, #8
 8003e22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	699a      	ldr	r2, [r3, #24]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 0204 	bic.w	r2, r2, #4
 8003e32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6999      	ldr	r1, [r3, #24]
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	691a      	ldr	r2, [r3, #16]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	430a      	orrs	r2, r1
 8003e44:	619a      	str	r2, [r3, #24]
      break;
 8003e46:	e0a5      	b.n	8003f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68b9      	ldr	r1, [r7, #8]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 f9d6 	bl	8004200 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	699a      	ldr	r2, [r3, #24]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	699a      	ldr	r2, [r3, #24]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6999      	ldr	r1, [r3, #24]
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	021a      	lsls	r2, r3, #8
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	430a      	orrs	r2, r1
 8003e86:	619a      	str	r2, [r3, #24]
      break;
 8003e88:	e084      	b.n	8003f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68b9      	ldr	r1, [r7, #8]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 fa3f 	bl	8004314 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	69da      	ldr	r2, [r3, #28]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f042 0208 	orr.w	r2, r2, #8
 8003ea4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	69da      	ldr	r2, [r3, #28]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 0204 	bic.w	r2, r2, #4
 8003eb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	69d9      	ldr	r1, [r3, #28]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	691a      	ldr	r2, [r3, #16]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	61da      	str	r2, [r3, #28]
      break;
 8003ec8:	e064      	b.n	8003f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68b9      	ldr	r1, [r7, #8]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 faa7 	bl	8004424 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	69da      	ldr	r2, [r3, #28]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ee4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	69da      	ldr	r2, [r3, #28]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ef4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	69d9      	ldr	r1, [r3, #28]
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	021a      	lsls	r2, r3, #8
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	61da      	str	r2, [r3, #28]
      break;
 8003f0a:	e043      	b.n	8003f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68b9      	ldr	r1, [r7, #8]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 faf0 	bl	80044f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f042 0208 	orr.w	r2, r2, #8
 8003f26:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 0204 	bic.w	r2, r2, #4
 8003f36:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	691a      	ldr	r2, [r3, #16]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003f4a:	e023      	b.n	8003f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68b9      	ldr	r1, [r7, #8]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 fb34 	bl	80045c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f66:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f76:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	021a      	lsls	r2, r3, #8
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003f8c:	e002      	b.n	8003f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	75fb      	strb	r3, [r7, #23]
      break;
 8003f92:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3718      	adds	r7, #24
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop

08003fa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a42      	ldr	r2, [pc, #264]	@ (80040c4 <TIM_Base_SetConfig+0x11c>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d00f      	beq.n	8003fe0 <TIM_Base_SetConfig+0x38>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fc6:	d00b      	beq.n	8003fe0 <TIM_Base_SetConfig+0x38>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a3f      	ldr	r2, [pc, #252]	@ (80040c8 <TIM_Base_SetConfig+0x120>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d007      	beq.n	8003fe0 <TIM_Base_SetConfig+0x38>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a3e      	ldr	r2, [pc, #248]	@ (80040cc <TIM_Base_SetConfig+0x124>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d003      	beq.n	8003fe0 <TIM_Base_SetConfig+0x38>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a3d      	ldr	r2, [pc, #244]	@ (80040d0 <TIM_Base_SetConfig+0x128>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d108      	bne.n	8003ff2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a33      	ldr	r2, [pc, #204]	@ (80040c4 <TIM_Base_SetConfig+0x11c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d01b      	beq.n	8004032 <TIM_Base_SetConfig+0x8a>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004000:	d017      	beq.n	8004032 <TIM_Base_SetConfig+0x8a>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a30      	ldr	r2, [pc, #192]	@ (80040c8 <TIM_Base_SetConfig+0x120>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d013      	beq.n	8004032 <TIM_Base_SetConfig+0x8a>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a2f      	ldr	r2, [pc, #188]	@ (80040cc <TIM_Base_SetConfig+0x124>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d00f      	beq.n	8004032 <TIM_Base_SetConfig+0x8a>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a2e      	ldr	r2, [pc, #184]	@ (80040d0 <TIM_Base_SetConfig+0x128>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d00b      	beq.n	8004032 <TIM_Base_SetConfig+0x8a>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a2d      	ldr	r2, [pc, #180]	@ (80040d4 <TIM_Base_SetConfig+0x12c>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d007      	beq.n	8004032 <TIM_Base_SetConfig+0x8a>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a2c      	ldr	r2, [pc, #176]	@ (80040d8 <TIM_Base_SetConfig+0x130>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d003      	beq.n	8004032 <TIM_Base_SetConfig+0x8a>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a2b      	ldr	r2, [pc, #172]	@ (80040dc <TIM_Base_SetConfig+0x134>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d108      	bne.n	8004044 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004038:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	4313      	orrs	r3, r2
 8004042:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	4313      	orrs	r3, r2
 8004050:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	689a      	ldr	r2, [r3, #8]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a16      	ldr	r2, [pc, #88]	@ (80040c4 <TIM_Base_SetConfig+0x11c>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d00f      	beq.n	8004090 <TIM_Base_SetConfig+0xe8>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a17      	ldr	r2, [pc, #92]	@ (80040d0 <TIM_Base_SetConfig+0x128>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d00b      	beq.n	8004090 <TIM_Base_SetConfig+0xe8>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a16      	ldr	r2, [pc, #88]	@ (80040d4 <TIM_Base_SetConfig+0x12c>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d007      	beq.n	8004090 <TIM_Base_SetConfig+0xe8>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a15      	ldr	r2, [pc, #84]	@ (80040d8 <TIM_Base_SetConfig+0x130>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d003      	beq.n	8004090 <TIM_Base_SetConfig+0xe8>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a14      	ldr	r2, [pc, #80]	@ (80040dc <TIM_Base_SetConfig+0x134>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d103      	bne.n	8004098 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	691a      	ldr	r2, [r3, #16]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d105      	bne.n	80040b6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	f023 0201 	bic.w	r2, r3, #1
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	611a      	str	r2, [r3, #16]
  }
}
 80040b6:	bf00      	nop
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	40012c00 	.word	0x40012c00
 80040c8:	40000400 	.word	0x40000400
 80040cc:	40000800 	.word	0x40000800
 80040d0:	40013400 	.word	0x40013400
 80040d4:	40014000 	.word	0x40014000
 80040d8:	40014400 	.word	0x40014400
 80040dc:	40014800 	.word	0x40014800

080040e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b087      	sub	sp, #28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	f023 0201 	bic.w	r2, r3, #1
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800410e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f023 0303 	bic.w	r3, r3, #3
 800411a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	4313      	orrs	r3, r2
 8004124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	f023 0302 	bic.w	r3, r3, #2
 800412c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	4313      	orrs	r3, r2
 8004136:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a2c      	ldr	r2, [pc, #176]	@ (80041ec <TIM_OC1_SetConfig+0x10c>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d00f      	beq.n	8004160 <TIM_OC1_SetConfig+0x80>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a2b      	ldr	r2, [pc, #172]	@ (80041f0 <TIM_OC1_SetConfig+0x110>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d00b      	beq.n	8004160 <TIM_OC1_SetConfig+0x80>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a2a      	ldr	r2, [pc, #168]	@ (80041f4 <TIM_OC1_SetConfig+0x114>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d007      	beq.n	8004160 <TIM_OC1_SetConfig+0x80>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a29      	ldr	r2, [pc, #164]	@ (80041f8 <TIM_OC1_SetConfig+0x118>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d003      	beq.n	8004160 <TIM_OC1_SetConfig+0x80>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a28      	ldr	r2, [pc, #160]	@ (80041fc <TIM_OC1_SetConfig+0x11c>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d10c      	bne.n	800417a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f023 0308 	bic.w	r3, r3, #8
 8004166:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	4313      	orrs	r3, r2
 8004170:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f023 0304 	bic.w	r3, r3, #4
 8004178:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a1b      	ldr	r2, [pc, #108]	@ (80041ec <TIM_OC1_SetConfig+0x10c>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d00f      	beq.n	80041a2 <TIM_OC1_SetConfig+0xc2>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a1a      	ldr	r2, [pc, #104]	@ (80041f0 <TIM_OC1_SetConfig+0x110>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d00b      	beq.n	80041a2 <TIM_OC1_SetConfig+0xc2>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a19      	ldr	r2, [pc, #100]	@ (80041f4 <TIM_OC1_SetConfig+0x114>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d007      	beq.n	80041a2 <TIM_OC1_SetConfig+0xc2>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a18      	ldr	r2, [pc, #96]	@ (80041f8 <TIM_OC1_SetConfig+0x118>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d003      	beq.n	80041a2 <TIM_OC1_SetConfig+0xc2>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a17      	ldr	r2, [pc, #92]	@ (80041fc <TIM_OC1_SetConfig+0x11c>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d111      	bne.n	80041c6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	685a      	ldr	r2, [r3, #4]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	621a      	str	r2, [r3, #32]
}
 80041e0:	bf00      	nop
 80041e2:	371c      	adds	r7, #28
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr
 80041ec:	40012c00 	.word	0x40012c00
 80041f0:	40013400 	.word	0x40013400
 80041f4:	40014000 	.word	0x40014000
 80041f8:	40014400 	.word	0x40014400
 80041fc:	40014800 	.word	0x40014800

08004200 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004200:	b480      	push	{r7}
 8004202:	b087      	sub	sp, #28
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a1b      	ldr	r3, [r3, #32]
 8004214:	f023 0210 	bic.w	r2, r3, #16
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800422e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800423a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	021b      	lsls	r3, r3, #8
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	4313      	orrs	r3, r2
 8004246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	f023 0320 	bic.w	r3, r3, #32
 800424e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	011b      	lsls	r3, r3, #4
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	4313      	orrs	r3, r2
 800425a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a28      	ldr	r2, [pc, #160]	@ (8004300 <TIM_OC2_SetConfig+0x100>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d003      	beq.n	800426c <TIM_OC2_SetConfig+0x6c>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a27      	ldr	r2, [pc, #156]	@ (8004304 <TIM_OC2_SetConfig+0x104>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d10d      	bne.n	8004288 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004272:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	011b      	lsls	r3, r3, #4
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	4313      	orrs	r3, r2
 800427e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004286:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a1d      	ldr	r2, [pc, #116]	@ (8004300 <TIM_OC2_SetConfig+0x100>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d00f      	beq.n	80042b0 <TIM_OC2_SetConfig+0xb0>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a1c      	ldr	r2, [pc, #112]	@ (8004304 <TIM_OC2_SetConfig+0x104>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d00b      	beq.n	80042b0 <TIM_OC2_SetConfig+0xb0>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a1b      	ldr	r2, [pc, #108]	@ (8004308 <TIM_OC2_SetConfig+0x108>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d007      	beq.n	80042b0 <TIM_OC2_SetConfig+0xb0>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a1a      	ldr	r2, [pc, #104]	@ (800430c <TIM_OC2_SetConfig+0x10c>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d003      	beq.n	80042b0 <TIM_OC2_SetConfig+0xb0>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a19      	ldr	r2, [pc, #100]	@ (8004310 <TIM_OC2_SetConfig+0x110>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d113      	bne.n	80042d8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80042b6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80042be:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	621a      	str	r2, [r3, #32]
}
 80042f2:	bf00      	nop
 80042f4:	371c      	adds	r7, #28
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	40012c00 	.word	0x40012c00
 8004304:	40013400 	.word	0x40013400
 8004308:	40014000 	.word	0x40014000
 800430c:	40014400 	.word	0x40014400
 8004310:	40014800 	.word	0x40014800

08004314 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004314:	b480      	push	{r7}
 8004316:	b087      	sub	sp, #28
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004342:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f023 0303 	bic.w	r3, r3, #3
 800434e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	4313      	orrs	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004360:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	021b      	lsls	r3, r3, #8
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	4313      	orrs	r3, r2
 800436c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a27      	ldr	r2, [pc, #156]	@ (8004410 <TIM_OC3_SetConfig+0xfc>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d003      	beq.n	800437e <TIM_OC3_SetConfig+0x6a>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a26      	ldr	r2, [pc, #152]	@ (8004414 <TIM_OC3_SetConfig+0x100>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d10d      	bne.n	800439a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004384:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	021b      	lsls	r3, r3, #8
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	4313      	orrs	r3, r2
 8004390:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004398:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a1c      	ldr	r2, [pc, #112]	@ (8004410 <TIM_OC3_SetConfig+0xfc>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d00f      	beq.n	80043c2 <TIM_OC3_SetConfig+0xae>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a1b      	ldr	r2, [pc, #108]	@ (8004414 <TIM_OC3_SetConfig+0x100>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d00b      	beq.n	80043c2 <TIM_OC3_SetConfig+0xae>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a1a      	ldr	r2, [pc, #104]	@ (8004418 <TIM_OC3_SetConfig+0x104>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d007      	beq.n	80043c2 <TIM_OC3_SetConfig+0xae>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a19      	ldr	r2, [pc, #100]	@ (800441c <TIM_OC3_SetConfig+0x108>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d003      	beq.n	80043c2 <TIM_OC3_SetConfig+0xae>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a18      	ldr	r2, [pc, #96]	@ (8004420 <TIM_OC3_SetConfig+0x10c>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d113      	bne.n	80043ea <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80043c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80043d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	011b      	lsls	r3, r3, #4
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	4313      	orrs	r3, r2
 80043dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	011b      	lsls	r3, r3, #4
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685a      	ldr	r2, [r3, #4]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	621a      	str	r2, [r3, #32]
}
 8004404:	bf00      	nop
 8004406:	371c      	adds	r7, #28
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr
 8004410:	40012c00 	.word	0x40012c00
 8004414:	40013400 	.word	0x40013400
 8004418:	40014000 	.word	0x40014000
 800441c:	40014400 	.word	0x40014400
 8004420:	40014800 	.word	0x40014800

08004424 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004424:	b480      	push	{r7}
 8004426:	b087      	sub	sp, #28
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004452:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800445e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	021b      	lsls	r3, r3, #8
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	4313      	orrs	r3, r2
 800446a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004472:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	031b      	lsls	r3, r3, #12
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	4313      	orrs	r3, r2
 800447e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a18      	ldr	r2, [pc, #96]	@ (80044e4 <TIM_OC4_SetConfig+0xc0>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d00f      	beq.n	80044a8 <TIM_OC4_SetConfig+0x84>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a17      	ldr	r2, [pc, #92]	@ (80044e8 <TIM_OC4_SetConfig+0xc4>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d00b      	beq.n	80044a8 <TIM_OC4_SetConfig+0x84>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a16      	ldr	r2, [pc, #88]	@ (80044ec <TIM_OC4_SetConfig+0xc8>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d007      	beq.n	80044a8 <TIM_OC4_SetConfig+0x84>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a15      	ldr	r2, [pc, #84]	@ (80044f0 <TIM_OC4_SetConfig+0xcc>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d003      	beq.n	80044a8 <TIM_OC4_SetConfig+0x84>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a14      	ldr	r2, [pc, #80]	@ (80044f4 <TIM_OC4_SetConfig+0xd0>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d109      	bne.n	80044bc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	019b      	lsls	r3, r3, #6
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	621a      	str	r2, [r3, #32]
}
 80044d6:	bf00      	nop
 80044d8:	371c      	adds	r7, #28
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	40012c00 	.word	0x40012c00
 80044e8:	40013400 	.word	0x40013400
 80044ec:	40014000 	.word	0x40014000
 80044f0:	40014400 	.word	0x40014400
 80044f4:	40014800 	.word	0x40014800

080044f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800451e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800452a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	4313      	orrs	r3, r2
 8004534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800453c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	041b      	lsls	r3, r3, #16
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	4313      	orrs	r3, r2
 8004548:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a17      	ldr	r2, [pc, #92]	@ (80045ac <TIM_OC5_SetConfig+0xb4>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d00f      	beq.n	8004572 <TIM_OC5_SetConfig+0x7a>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a16      	ldr	r2, [pc, #88]	@ (80045b0 <TIM_OC5_SetConfig+0xb8>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d00b      	beq.n	8004572 <TIM_OC5_SetConfig+0x7a>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a15      	ldr	r2, [pc, #84]	@ (80045b4 <TIM_OC5_SetConfig+0xbc>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d007      	beq.n	8004572 <TIM_OC5_SetConfig+0x7a>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a14      	ldr	r2, [pc, #80]	@ (80045b8 <TIM_OC5_SetConfig+0xc0>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d003      	beq.n	8004572 <TIM_OC5_SetConfig+0x7a>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a13      	ldr	r2, [pc, #76]	@ (80045bc <TIM_OC5_SetConfig+0xc4>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d109      	bne.n	8004586 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004578:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	021b      	lsls	r3, r3, #8
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	4313      	orrs	r3, r2
 8004584:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	621a      	str	r2, [r3, #32]
}
 80045a0:	bf00      	nop
 80045a2:	371c      	adds	r7, #28
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	40012c00 	.word	0x40012c00
 80045b0:	40013400 	.word	0x40013400
 80045b4:	40014000 	.word	0x40014000
 80045b8:	40014400 	.word	0x40014400
 80045bc:	40014800 	.word	0x40014800

080045c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b087      	sub	sp, #28
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	021b      	lsls	r3, r3, #8
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004606:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	051b      	lsls	r3, r3, #20
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	4313      	orrs	r3, r2
 8004612:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a18      	ldr	r2, [pc, #96]	@ (8004678 <TIM_OC6_SetConfig+0xb8>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d00f      	beq.n	800463c <TIM_OC6_SetConfig+0x7c>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a17      	ldr	r2, [pc, #92]	@ (800467c <TIM_OC6_SetConfig+0xbc>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d00b      	beq.n	800463c <TIM_OC6_SetConfig+0x7c>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a16      	ldr	r2, [pc, #88]	@ (8004680 <TIM_OC6_SetConfig+0xc0>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d007      	beq.n	800463c <TIM_OC6_SetConfig+0x7c>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a15      	ldr	r2, [pc, #84]	@ (8004684 <TIM_OC6_SetConfig+0xc4>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d003      	beq.n	800463c <TIM_OC6_SetConfig+0x7c>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a14      	ldr	r2, [pc, #80]	@ (8004688 <TIM_OC6_SetConfig+0xc8>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d109      	bne.n	8004650 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004642:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	029b      	lsls	r3, r3, #10
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	4313      	orrs	r3, r2
 800464e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	621a      	str	r2, [r3, #32]
}
 800466a:	bf00      	nop
 800466c:	371c      	adds	r7, #28
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	40012c00 	.word	0x40012c00
 800467c:	40013400 	.word	0x40013400
 8004680:	40014000 	.word	0x40014000
 8004684:	40014400 	.word	0x40014400
 8004688:	40014800 	.word	0x40014800

0800468c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800468c:	b480      	push	{r7}
 800468e:	b087      	sub	sp, #28
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	f003 031f 	and.w	r3, r3, #31
 800469e:	2201      	movs	r2, #1
 80046a0:	fa02 f303 	lsl.w	r3, r2, r3
 80046a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6a1a      	ldr	r2, [r3, #32]
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	43db      	mvns	r3, r3
 80046ae:	401a      	ands	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6a1a      	ldr	r2, [r3, #32]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	f003 031f 	and.w	r3, r3, #31
 80046be:	6879      	ldr	r1, [r7, #4]
 80046c0:	fa01 f303 	lsl.w	r3, r1, r3
 80046c4:	431a      	orrs	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	621a      	str	r2, [r3, #32]
}
 80046ca:	bf00      	nop
 80046cc:	371c      	adds	r7, #28
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
	...

080046d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d101      	bne.n	80046f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046ec:	2302      	movs	r3, #2
 80046ee:	e063      	b.n	80047b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a2b      	ldr	r2, [pc, #172]	@ (80047c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d004      	beq.n	8004724 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a2a      	ldr	r2, [pc, #168]	@ (80047c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d108      	bne.n	8004736 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800472a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	4313      	orrs	r3, r2
 8004734:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800473c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	4313      	orrs	r3, r2
 8004746:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a1b      	ldr	r2, [pc, #108]	@ (80047c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d018      	beq.n	800478c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004762:	d013      	beq.n	800478c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a18      	ldr	r2, [pc, #96]	@ (80047cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d00e      	beq.n	800478c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a17      	ldr	r2, [pc, #92]	@ (80047d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d009      	beq.n	800478c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a12      	ldr	r2, [pc, #72]	@ (80047c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d004      	beq.n	800478c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a13      	ldr	r2, [pc, #76]	@ (80047d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d10c      	bne.n	80047a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004792:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	68ba      	ldr	r2, [r7, #8]
 800479a:	4313      	orrs	r3, r2
 800479c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3714      	adds	r7, #20
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	40012c00 	.word	0x40012c00
 80047c8:	40013400 	.word	0x40013400
 80047cc:	40000400 	.word	0x40000400
 80047d0:	40000800 	.word	0x40000800
 80047d4:	40014000 	.word	0x40014000

080047d8 <malloc>:
 80047d8:	4b02      	ldr	r3, [pc, #8]	@ (80047e4 <malloc+0xc>)
 80047da:	4601      	mov	r1, r0
 80047dc:	6818      	ldr	r0, [r3, #0]
 80047de:	f000 b825 	b.w	800482c <_malloc_r>
 80047e2:	bf00      	nop
 80047e4:	20000128 	.word	0x20000128

080047e8 <sbrk_aligned>:
 80047e8:	b570      	push	{r4, r5, r6, lr}
 80047ea:	4e0f      	ldr	r6, [pc, #60]	@ (8004828 <sbrk_aligned+0x40>)
 80047ec:	460c      	mov	r4, r1
 80047ee:	6831      	ldr	r1, [r6, #0]
 80047f0:	4605      	mov	r5, r0
 80047f2:	b911      	cbnz	r1, 80047fa <sbrk_aligned+0x12>
 80047f4:	f000 f8ce 	bl	8004994 <_sbrk_r>
 80047f8:	6030      	str	r0, [r6, #0]
 80047fa:	4621      	mov	r1, r4
 80047fc:	4628      	mov	r0, r5
 80047fe:	f000 f8c9 	bl	8004994 <_sbrk_r>
 8004802:	1c43      	adds	r3, r0, #1
 8004804:	d103      	bne.n	800480e <sbrk_aligned+0x26>
 8004806:	f04f 34ff 	mov.w	r4, #4294967295
 800480a:	4620      	mov	r0, r4
 800480c:	bd70      	pop	{r4, r5, r6, pc}
 800480e:	1cc4      	adds	r4, r0, #3
 8004810:	f024 0403 	bic.w	r4, r4, #3
 8004814:	42a0      	cmp	r0, r4
 8004816:	d0f8      	beq.n	800480a <sbrk_aligned+0x22>
 8004818:	1a21      	subs	r1, r4, r0
 800481a:	4628      	mov	r0, r5
 800481c:	f000 f8ba 	bl	8004994 <_sbrk_r>
 8004820:	3001      	adds	r0, #1
 8004822:	d1f2      	bne.n	800480a <sbrk_aligned+0x22>
 8004824:	e7ef      	b.n	8004806 <sbrk_aligned+0x1e>
 8004826:	bf00      	nop
 8004828:	20000358 	.word	0x20000358

0800482c <_malloc_r>:
 800482c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004830:	1ccd      	adds	r5, r1, #3
 8004832:	f025 0503 	bic.w	r5, r5, #3
 8004836:	3508      	adds	r5, #8
 8004838:	2d0c      	cmp	r5, #12
 800483a:	bf38      	it	cc
 800483c:	250c      	movcc	r5, #12
 800483e:	2d00      	cmp	r5, #0
 8004840:	4606      	mov	r6, r0
 8004842:	db01      	blt.n	8004848 <_malloc_r+0x1c>
 8004844:	42a9      	cmp	r1, r5
 8004846:	d904      	bls.n	8004852 <_malloc_r+0x26>
 8004848:	230c      	movs	r3, #12
 800484a:	6033      	str	r3, [r6, #0]
 800484c:	2000      	movs	r0, #0
 800484e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004852:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004928 <_malloc_r+0xfc>
 8004856:	f000 f869 	bl	800492c <__malloc_lock>
 800485a:	f8d8 3000 	ldr.w	r3, [r8]
 800485e:	461c      	mov	r4, r3
 8004860:	bb44      	cbnz	r4, 80048b4 <_malloc_r+0x88>
 8004862:	4629      	mov	r1, r5
 8004864:	4630      	mov	r0, r6
 8004866:	f7ff ffbf 	bl	80047e8 <sbrk_aligned>
 800486a:	1c43      	adds	r3, r0, #1
 800486c:	4604      	mov	r4, r0
 800486e:	d158      	bne.n	8004922 <_malloc_r+0xf6>
 8004870:	f8d8 4000 	ldr.w	r4, [r8]
 8004874:	4627      	mov	r7, r4
 8004876:	2f00      	cmp	r7, #0
 8004878:	d143      	bne.n	8004902 <_malloc_r+0xd6>
 800487a:	2c00      	cmp	r4, #0
 800487c:	d04b      	beq.n	8004916 <_malloc_r+0xea>
 800487e:	6823      	ldr	r3, [r4, #0]
 8004880:	4639      	mov	r1, r7
 8004882:	4630      	mov	r0, r6
 8004884:	eb04 0903 	add.w	r9, r4, r3
 8004888:	f000 f884 	bl	8004994 <_sbrk_r>
 800488c:	4581      	cmp	r9, r0
 800488e:	d142      	bne.n	8004916 <_malloc_r+0xea>
 8004890:	6821      	ldr	r1, [r4, #0]
 8004892:	1a6d      	subs	r5, r5, r1
 8004894:	4629      	mov	r1, r5
 8004896:	4630      	mov	r0, r6
 8004898:	f7ff ffa6 	bl	80047e8 <sbrk_aligned>
 800489c:	3001      	adds	r0, #1
 800489e:	d03a      	beq.n	8004916 <_malloc_r+0xea>
 80048a0:	6823      	ldr	r3, [r4, #0]
 80048a2:	442b      	add	r3, r5
 80048a4:	6023      	str	r3, [r4, #0]
 80048a6:	f8d8 3000 	ldr.w	r3, [r8]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	bb62      	cbnz	r2, 8004908 <_malloc_r+0xdc>
 80048ae:	f8c8 7000 	str.w	r7, [r8]
 80048b2:	e00f      	b.n	80048d4 <_malloc_r+0xa8>
 80048b4:	6822      	ldr	r2, [r4, #0]
 80048b6:	1b52      	subs	r2, r2, r5
 80048b8:	d420      	bmi.n	80048fc <_malloc_r+0xd0>
 80048ba:	2a0b      	cmp	r2, #11
 80048bc:	d917      	bls.n	80048ee <_malloc_r+0xc2>
 80048be:	1961      	adds	r1, r4, r5
 80048c0:	42a3      	cmp	r3, r4
 80048c2:	6025      	str	r5, [r4, #0]
 80048c4:	bf18      	it	ne
 80048c6:	6059      	strne	r1, [r3, #4]
 80048c8:	6863      	ldr	r3, [r4, #4]
 80048ca:	bf08      	it	eq
 80048cc:	f8c8 1000 	streq.w	r1, [r8]
 80048d0:	5162      	str	r2, [r4, r5]
 80048d2:	604b      	str	r3, [r1, #4]
 80048d4:	4630      	mov	r0, r6
 80048d6:	f000 f82f 	bl	8004938 <__malloc_unlock>
 80048da:	f104 000b 	add.w	r0, r4, #11
 80048de:	1d23      	adds	r3, r4, #4
 80048e0:	f020 0007 	bic.w	r0, r0, #7
 80048e4:	1ac2      	subs	r2, r0, r3
 80048e6:	bf1c      	itt	ne
 80048e8:	1a1b      	subne	r3, r3, r0
 80048ea:	50a3      	strne	r3, [r4, r2]
 80048ec:	e7af      	b.n	800484e <_malloc_r+0x22>
 80048ee:	6862      	ldr	r2, [r4, #4]
 80048f0:	42a3      	cmp	r3, r4
 80048f2:	bf0c      	ite	eq
 80048f4:	f8c8 2000 	streq.w	r2, [r8]
 80048f8:	605a      	strne	r2, [r3, #4]
 80048fa:	e7eb      	b.n	80048d4 <_malloc_r+0xa8>
 80048fc:	4623      	mov	r3, r4
 80048fe:	6864      	ldr	r4, [r4, #4]
 8004900:	e7ae      	b.n	8004860 <_malloc_r+0x34>
 8004902:	463c      	mov	r4, r7
 8004904:	687f      	ldr	r7, [r7, #4]
 8004906:	e7b6      	b.n	8004876 <_malloc_r+0x4a>
 8004908:	461a      	mov	r2, r3
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	42a3      	cmp	r3, r4
 800490e:	d1fb      	bne.n	8004908 <_malloc_r+0xdc>
 8004910:	2300      	movs	r3, #0
 8004912:	6053      	str	r3, [r2, #4]
 8004914:	e7de      	b.n	80048d4 <_malloc_r+0xa8>
 8004916:	230c      	movs	r3, #12
 8004918:	6033      	str	r3, [r6, #0]
 800491a:	4630      	mov	r0, r6
 800491c:	f000 f80c 	bl	8004938 <__malloc_unlock>
 8004920:	e794      	b.n	800484c <_malloc_r+0x20>
 8004922:	6005      	str	r5, [r0, #0]
 8004924:	e7d6      	b.n	80048d4 <_malloc_r+0xa8>
 8004926:	bf00      	nop
 8004928:	2000035c 	.word	0x2000035c

0800492c <__malloc_lock>:
 800492c:	4801      	ldr	r0, [pc, #4]	@ (8004934 <__malloc_lock+0x8>)
 800492e:	f000 b86b 	b.w	8004a08 <__retarget_lock_acquire_recursive>
 8004932:	bf00      	nop
 8004934:	2000049c 	.word	0x2000049c

08004938 <__malloc_unlock>:
 8004938:	4801      	ldr	r0, [pc, #4]	@ (8004940 <__malloc_unlock+0x8>)
 800493a:	f000 b866 	b.w	8004a0a <__retarget_lock_release_recursive>
 800493e:	bf00      	nop
 8004940:	2000049c 	.word	0x2000049c

08004944 <siprintf>:
 8004944:	b40e      	push	{r1, r2, r3}
 8004946:	b500      	push	{lr}
 8004948:	b09c      	sub	sp, #112	@ 0x70
 800494a:	ab1d      	add	r3, sp, #116	@ 0x74
 800494c:	9002      	str	r0, [sp, #8]
 800494e:	9006      	str	r0, [sp, #24]
 8004950:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004954:	4809      	ldr	r0, [pc, #36]	@ (800497c <siprintf+0x38>)
 8004956:	9107      	str	r1, [sp, #28]
 8004958:	9104      	str	r1, [sp, #16]
 800495a:	4909      	ldr	r1, [pc, #36]	@ (8004980 <siprintf+0x3c>)
 800495c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004960:	9105      	str	r1, [sp, #20]
 8004962:	6800      	ldr	r0, [r0, #0]
 8004964:	9301      	str	r3, [sp, #4]
 8004966:	a902      	add	r1, sp, #8
 8004968:	f000 f8f6 	bl	8004b58 <_svfiprintf_r>
 800496c:	9b02      	ldr	r3, [sp, #8]
 800496e:	2200      	movs	r2, #0
 8004970:	701a      	strb	r2, [r3, #0]
 8004972:	b01c      	add	sp, #112	@ 0x70
 8004974:	f85d eb04 	ldr.w	lr, [sp], #4
 8004978:	b003      	add	sp, #12
 800497a:	4770      	bx	lr
 800497c:	20000128 	.word	0x20000128
 8004980:	ffff0208 	.word	0xffff0208

08004984 <memset>:
 8004984:	4402      	add	r2, r0
 8004986:	4603      	mov	r3, r0
 8004988:	4293      	cmp	r3, r2
 800498a:	d100      	bne.n	800498e <memset+0xa>
 800498c:	4770      	bx	lr
 800498e:	f803 1b01 	strb.w	r1, [r3], #1
 8004992:	e7f9      	b.n	8004988 <memset+0x4>

08004994 <_sbrk_r>:
 8004994:	b538      	push	{r3, r4, r5, lr}
 8004996:	4d06      	ldr	r5, [pc, #24]	@ (80049b0 <_sbrk_r+0x1c>)
 8004998:	2300      	movs	r3, #0
 800499a:	4604      	mov	r4, r0
 800499c:	4608      	mov	r0, r1
 800499e:	602b      	str	r3, [r5, #0]
 80049a0:	f7fd f928 	bl	8001bf4 <_sbrk>
 80049a4:	1c43      	adds	r3, r0, #1
 80049a6:	d102      	bne.n	80049ae <_sbrk_r+0x1a>
 80049a8:	682b      	ldr	r3, [r5, #0]
 80049aa:	b103      	cbz	r3, 80049ae <_sbrk_r+0x1a>
 80049ac:	6023      	str	r3, [r4, #0]
 80049ae:	bd38      	pop	{r3, r4, r5, pc}
 80049b0:	20000498 	.word	0x20000498

080049b4 <__errno>:
 80049b4:	4b01      	ldr	r3, [pc, #4]	@ (80049bc <__errno+0x8>)
 80049b6:	6818      	ldr	r0, [r3, #0]
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	20000128 	.word	0x20000128

080049c0 <__libc_init_array>:
 80049c0:	b570      	push	{r4, r5, r6, lr}
 80049c2:	4d0d      	ldr	r5, [pc, #52]	@ (80049f8 <__libc_init_array+0x38>)
 80049c4:	4c0d      	ldr	r4, [pc, #52]	@ (80049fc <__libc_init_array+0x3c>)
 80049c6:	1b64      	subs	r4, r4, r5
 80049c8:	10a4      	asrs	r4, r4, #2
 80049ca:	2600      	movs	r6, #0
 80049cc:	42a6      	cmp	r6, r4
 80049ce:	d109      	bne.n	80049e4 <__libc_init_array+0x24>
 80049d0:	4d0b      	ldr	r5, [pc, #44]	@ (8004a00 <__libc_init_array+0x40>)
 80049d2:	4c0c      	ldr	r4, [pc, #48]	@ (8004a04 <__libc_init_array+0x44>)
 80049d4:	f000 fba8 	bl	8005128 <_init>
 80049d8:	1b64      	subs	r4, r4, r5
 80049da:	10a4      	asrs	r4, r4, #2
 80049dc:	2600      	movs	r6, #0
 80049de:	42a6      	cmp	r6, r4
 80049e0:	d105      	bne.n	80049ee <__libc_init_array+0x2e>
 80049e2:	bd70      	pop	{r4, r5, r6, pc}
 80049e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80049e8:	4798      	blx	r3
 80049ea:	3601      	adds	r6, #1
 80049ec:	e7ee      	b.n	80049cc <__libc_init_array+0xc>
 80049ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80049f2:	4798      	blx	r3
 80049f4:	3601      	adds	r6, #1
 80049f6:	e7f2      	b.n	80049de <__libc_init_array+0x1e>
 80049f8:	08005444 	.word	0x08005444
 80049fc:	08005444 	.word	0x08005444
 8004a00:	08005444 	.word	0x08005444
 8004a04:	08005448 	.word	0x08005448

08004a08 <__retarget_lock_acquire_recursive>:
 8004a08:	4770      	bx	lr

08004a0a <__retarget_lock_release_recursive>:
 8004a0a:	4770      	bx	lr

08004a0c <_free_r>:
 8004a0c:	b538      	push	{r3, r4, r5, lr}
 8004a0e:	4605      	mov	r5, r0
 8004a10:	2900      	cmp	r1, #0
 8004a12:	d041      	beq.n	8004a98 <_free_r+0x8c>
 8004a14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a18:	1f0c      	subs	r4, r1, #4
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	bfb8      	it	lt
 8004a1e:	18e4      	addlt	r4, r4, r3
 8004a20:	f7ff ff84 	bl	800492c <__malloc_lock>
 8004a24:	4a1d      	ldr	r2, [pc, #116]	@ (8004a9c <_free_r+0x90>)
 8004a26:	6813      	ldr	r3, [r2, #0]
 8004a28:	b933      	cbnz	r3, 8004a38 <_free_r+0x2c>
 8004a2a:	6063      	str	r3, [r4, #4]
 8004a2c:	6014      	str	r4, [r2, #0]
 8004a2e:	4628      	mov	r0, r5
 8004a30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a34:	f7ff bf80 	b.w	8004938 <__malloc_unlock>
 8004a38:	42a3      	cmp	r3, r4
 8004a3a:	d908      	bls.n	8004a4e <_free_r+0x42>
 8004a3c:	6820      	ldr	r0, [r4, #0]
 8004a3e:	1821      	adds	r1, r4, r0
 8004a40:	428b      	cmp	r3, r1
 8004a42:	bf01      	itttt	eq
 8004a44:	6819      	ldreq	r1, [r3, #0]
 8004a46:	685b      	ldreq	r3, [r3, #4]
 8004a48:	1809      	addeq	r1, r1, r0
 8004a4a:	6021      	streq	r1, [r4, #0]
 8004a4c:	e7ed      	b.n	8004a2a <_free_r+0x1e>
 8004a4e:	461a      	mov	r2, r3
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	b10b      	cbz	r3, 8004a58 <_free_r+0x4c>
 8004a54:	42a3      	cmp	r3, r4
 8004a56:	d9fa      	bls.n	8004a4e <_free_r+0x42>
 8004a58:	6811      	ldr	r1, [r2, #0]
 8004a5a:	1850      	adds	r0, r2, r1
 8004a5c:	42a0      	cmp	r0, r4
 8004a5e:	d10b      	bne.n	8004a78 <_free_r+0x6c>
 8004a60:	6820      	ldr	r0, [r4, #0]
 8004a62:	4401      	add	r1, r0
 8004a64:	1850      	adds	r0, r2, r1
 8004a66:	4283      	cmp	r3, r0
 8004a68:	6011      	str	r1, [r2, #0]
 8004a6a:	d1e0      	bne.n	8004a2e <_free_r+0x22>
 8004a6c:	6818      	ldr	r0, [r3, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	6053      	str	r3, [r2, #4]
 8004a72:	4408      	add	r0, r1
 8004a74:	6010      	str	r0, [r2, #0]
 8004a76:	e7da      	b.n	8004a2e <_free_r+0x22>
 8004a78:	d902      	bls.n	8004a80 <_free_r+0x74>
 8004a7a:	230c      	movs	r3, #12
 8004a7c:	602b      	str	r3, [r5, #0]
 8004a7e:	e7d6      	b.n	8004a2e <_free_r+0x22>
 8004a80:	6820      	ldr	r0, [r4, #0]
 8004a82:	1821      	adds	r1, r4, r0
 8004a84:	428b      	cmp	r3, r1
 8004a86:	bf04      	itt	eq
 8004a88:	6819      	ldreq	r1, [r3, #0]
 8004a8a:	685b      	ldreq	r3, [r3, #4]
 8004a8c:	6063      	str	r3, [r4, #4]
 8004a8e:	bf04      	itt	eq
 8004a90:	1809      	addeq	r1, r1, r0
 8004a92:	6021      	streq	r1, [r4, #0]
 8004a94:	6054      	str	r4, [r2, #4]
 8004a96:	e7ca      	b.n	8004a2e <_free_r+0x22>
 8004a98:	bd38      	pop	{r3, r4, r5, pc}
 8004a9a:	bf00      	nop
 8004a9c:	2000035c 	.word	0x2000035c

08004aa0 <__ssputs_r>:
 8004aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004aa4:	688e      	ldr	r6, [r1, #8]
 8004aa6:	461f      	mov	r7, r3
 8004aa8:	42be      	cmp	r6, r7
 8004aaa:	680b      	ldr	r3, [r1, #0]
 8004aac:	4682      	mov	sl, r0
 8004aae:	460c      	mov	r4, r1
 8004ab0:	4690      	mov	r8, r2
 8004ab2:	d82d      	bhi.n	8004b10 <__ssputs_r+0x70>
 8004ab4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004ab8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004abc:	d026      	beq.n	8004b0c <__ssputs_r+0x6c>
 8004abe:	6965      	ldr	r5, [r4, #20]
 8004ac0:	6909      	ldr	r1, [r1, #16]
 8004ac2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ac6:	eba3 0901 	sub.w	r9, r3, r1
 8004aca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ace:	1c7b      	adds	r3, r7, #1
 8004ad0:	444b      	add	r3, r9
 8004ad2:	106d      	asrs	r5, r5, #1
 8004ad4:	429d      	cmp	r5, r3
 8004ad6:	bf38      	it	cc
 8004ad8:	461d      	movcc	r5, r3
 8004ada:	0553      	lsls	r3, r2, #21
 8004adc:	d527      	bpl.n	8004b2e <__ssputs_r+0x8e>
 8004ade:	4629      	mov	r1, r5
 8004ae0:	f7ff fea4 	bl	800482c <_malloc_r>
 8004ae4:	4606      	mov	r6, r0
 8004ae6:	b360      	cbz	r0, 8004b42 <__ssputs_r+0xa2>
 8004ae8:	6921      	ldr	r1, [r4, #16]
 8004aea:	464a      	mov	r2, r9
 8004aec:	f000 fad8 	bl	80050a0 <memcpy>
 8004af0:	89a3      	ldrh	r3, [r4, #12]
 8004af2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004af6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004afa:	81a3      	strh	r3, [r4, #12]
 8004afc:	6126      	str	r6, [r4, #16]
 8004afe:	6165      	str	r5, [r4, #20]
 8004b00:	444e      	add	r6, r9
 8004b02:	eba5 0509 	sub.w	r5, r5, r9
 8004b06:	6026      	str	r6, [r4, #0]
 8004b08:	60a5      	str	r5, [r4, #8]
 8004b0a:	463e      	mov	r6, r7
 8004b0c:	42be      	cmp	r6, r7
 8004b0e:	d900      	bls.n	8004b12 <__ssputs_r+0x72>
 8004b10:	463e      	mov	r6, r7
 8004b12:	6820      	ldr	r0, [r4, #0]
 8004b14:	4632      	mov	r2, r6
 8004b16:	4641      	mov	r1, r8
 8004b18:	f000 faa8 	bl	800506c <memmove>
 8004b1c:	68a3      	ldr	r3, [r4, #8]
 8004b1e:	1b9b      	subs	r3, r3, r6
 8004b20:	60a3      	str	r3, [r4, #8]
 8004b22:	6823      	ldr	r3, [r4, #0]
 8004b24:	4433      	add	r3, r6
 8004b26:	6023      	str	r3, [r4, #0]
 8004b28:	2000      	movs	r0, #0
 8004b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b2e:	462a      	mov	r2, r5
 8004b30:	f000 fac4 	bl	80050bc <_realloc_r>
 8004b34:	4606      	mov	r6, r0
 8004b36:	2800      	cmp	r0, #0
 8004b38:	d1e0      	bne.n	8004afc <__ssputs_r+0x5c>
 8004b3a:	6921      	ldr	r1, [r4, #16]
 8004b3c:	4650      	mov	r0, sl
 8004b3e:	f7ff ff65 	bl	8004a0c <_free_r>
 8004b42:	230c      	movs	r3, #12
 8004b44:	f8ca 3000 	str.w	r3, [sl]
 8004b48:	89a3      	ldrh	r3, [r4, #12]
 8004b4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b4e:	81a3      	strh	r3, [r4, #12]
 8004b50:	f04f 30ff 	mov.w	r0, #4294967295
 8004b54:	e7e9      	b.n	8004b2a <__ssputs_r+0x8a>
	...

08004b58 <_svfiprintf_r>:
 8004b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b5c:	4698      	mov	r8, r3
 8004b5e:	898b      	ldrh	r3, [r1, #12]
 8004b60:	061b      	lsls	r3, r3, #24
 8004b62:	b09d      	sub	sp, #116	@ 0x74
 8004b64:	4607      	mov	r7, r0
 8004b66:	460d      	mov	r5, r1
 8004b68:	4614      	mov	r4, r2
 8004b6a:	d510      	bpl.n	8004b8e <_svfiprintf_r+0x36>
 8004b6c:	690b      	ldr	r3, [r1, #16]
 8004b6e:	b973      	cbnz	r3, 8004b8e <_svfiprintf_r+0x36>
 8004b70:	2140      	movs	r1, #64	@ 0x40
 8004b72:	f7ff fe5b 	bl	800482c <_malloc_r>
 8004b76:	6028      	str	r0, [r5, #0]
 8004b78:	6128      	str	r0, [r5, #16]
 8004b7a:	b930      	cbnz	r0, 8004b8a <_svfiprintf_r+0x32>
 8004b7c:	230c      	movs	r3, #12
 8004b7e:	603b      	str	r3, [r7, #0]
 8004b80:	f04f 30ff 	mov.w	r0, #4294967295
 8004b84:	b01d      	add	sp, #116	@ 0x74
 8004b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b8a:	2340      	movs	r3, #64	@ 0x40
 8004b8c:	616b      	str	r3, [r5, #20]
 8004b8e:	2300      	movs	r3, #0
 8004b90:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b92:	2320      	movs	r3, #32
 8004b94:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004b98:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b9c:	2330      	movs	r3, #48	@ 0x30
 8004b9e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004d3c <_svfiprintf_r+0x1e4>
 8004ba2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004ba6:	f04f 0901 	mov.w	r9, #1
 8004baa:	4623      	mov	r3, r4
 8004bac:	469a      	mov	sl, r3
 8004bae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bb2:	b10a      	cbz	r2, 8004bb8 <_svfiprintf_r+0x60>
 8004bb4:	2a25      	cmp	r2, #37	@ 0x25
 8004bb6:	d1f9      	bne.n	8004bac <_svfiprintf_r+0x54>
 8004bb8:	ebba 0b04 	subs.w	fp, sl, r4
 8004bbc:	d00b      	beq.n	8004bd6 <_svfiprintf_r+0x7e>
 8004bbe:	465b      	mov	r3, fp
 8004bc0:	4622      	mov	r2, r4
 8004bc2:	4629      	mov	r1, r5
 8004bc4:	4638      	mov	r0, r7
 8004bc6:	f7ff ff6b 	bl	8004aa0 <__ssputs_r>
 8004bca:	3001      	adds	r0, #1
 8004bcc:	f000 80a7 	beq.w	8004d1e <_svfiprintf_r+0x1c6>
 8004bd0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004bd2:	445a      	add	r2, fp
 8004bd4:	9209      	str	r2, [sp, #36]	@ 0x24
 8004bd6:	f89a 3000 	ldrb.w	r3, [sl]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f000 809f 	beq.w	8004d1e <_svfiprintf_r+0x1c6>
 8004be0:	2300      	movs	r3, #0
 8004be2:	f04f 32ff 	mov.w	r2, #4294967295
 8004be6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bea:	f10a 0a01 	add.w	sl, sl, #1
 8004bee:	9304      	str	r3, [sp, #16]
 8004bf0:	9307      	str	r3, [sp, #28]
 8004bf2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004bf6:	931a      	str	r3, [sp, #104]	@ 0x68
 8004bf8:	4654      	mov	r4, sl
 8004bfa:	2205      	movs	r2, #5
 8004bfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c00:	484e      	ldr	r0, [pc, #312]	@ (8004d3c <_svfiprintf_r+0x1e4>)
 8004c02:	f7fb faf5 	bl	80001f0 <memchr>
 8004c06:	9a04      	ldr	r2, [sp, #16]
 8004c08:	b9d8      	cbnz	r0, 8004c42 <_svfiprintf_r+0xea>
 8004c0a:	06d0      	lsls	r0, r2, #27
 8004c0c:	bf44      	itt	mi
 8004c0e:	2320      	movmi	r3, #32
 8004c10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c14:	0711      	lsls	r1, r2, #28
 8004c16:	bf44      	itt	mi
 8004c18:	232b      	movmi	r3, #43	@ 0x2b
 8004c1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c1e:	f89a 3000 	ldrb.w	r3, [sl]
 8004c22:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c24:	d015      	beq.n	8004c52 <_svfiprintf_r+0xfa>
 8004c26:	9a07      	ldr	r2, [sp, #28]
 8004c28:	4654      	mov	r4, sl
 8004c2a:	2000      	movs	r0, #0
 8004c2c:	f04f 0c0a 	mov.w	ip, #10
 8004c30:	4621      	mov	r1, r4
 8004c32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c36:	3b30      	subs	r3, #48	@ 0x30
 8004c38:	2b09      	cmp	r3, #9
 8004c3a:	d94b      	bls.n	8004cd4 <_svfiprintf_r+0x17c>
 8004c3c:	b1b0      	cbz	r0, 8004c6c <_svfiprintf_r+0x114>
 8004c3e:	9207      	str	r2, [sp, #28]
 8004c40:	e014      	b.n	8004c6c <_svfiprintf_r+0x114>
 8004c42:	eba0 0308 	sub.w	r3, r0, r8
 8004c46:	fa09 f303 	lsl.w	r3, r9, r3
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	9304      	str	r3, [sp, #16]
 8004c4e:	46a2      	mov	sl, r4
 8004c50:	e7d2      	b.n	8004bf8 <_svfiprintf_r+0xa0>
 8004c52:	9b03      	ldr	r3, [sp, #12]
 8004c54:	1d19      	adds	r1, r3, #4
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	9103      	str	r1, [sp, #12]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	bfbb      	ittet	lt
 8004c5e:	425b      	neglt	r3, r3
 8004c60:	f042 0202 	orrlt.w	r2, r2, #2
 8004c64:	9307      	strge	r3, [sp, #28]
 8004c66:	9307      	strlt	r3, [sp, #28]
 8004c68:	bfb8      	it	lt
 8004c6a:	9204      	strlt	r2, [sp, #16]
 8004c6c:	7823      	ldrb	r3, [r4, #0]
 8004c6e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c70:	d10a      	bne.n	8004c88 <_svfiprintf_r+0x130>
 8004c72:	7863      	ldrb	r3, [r4, #1]
 8004c74:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c76:	d132      	bne.n	8004cde <_svfiprintf_r+0x186>
 8004c78:	9b03      	ldr	r3, [sp, #12]
 8004c7a:	1d1a      	adds	r2, r3, #4
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	9203      	str	r2, [sp, #12]
 8004c80:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004c84:	3402      	adds	r4, #2
 8004c86:	9305      	str	r3, [sp, #20]
 8004c88:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004d4c <_svfiprintf_r+0x1f4>
 8004c8c:	7821      	ldrb	r1, [r4, #0]
 8004c8e:	2203      	movs	r2, #3
 8004c90:	4650      	mov	r0, sl
 8004c92:	f7fb faad 	bl	80001f0 <memchr>
 8004c96:	b138      	cbz	r0, 8004ca8 <_svfiprintf_r+0x150>
 8004c98:	9b04      	ldr	r3, [sp, #16]
 8004c9a:	eba0 000a 	sub.w	r0, r0, sl
 8004c9e:	2240      	movs	r2, #64	@ 0x40
 8004ca0:	4082      	lsls	r2, r0
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	3401      	adds	r4, #1
 8004ca6:	9304      	str	r3, [sp, #16]
 8004ca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cac:	4824      	ldr	r0, [pc, #144]	@ (8004d40 <_svfiprintf_r+0x1e8>)
 8004cae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004cb2:	2206      	movs	r2, #6
 8004cb4:	f7fb fa9c 	bl	80001f0 <memchr>
 8004cb8:	2800      	cmp	r0, #0
 8004cba:	d036      	beq.n	8004d2a <_svfiprintf_r+0x1d2>
 8004cbc:	4b21      	ldr	r3, [pc, #132]	@ (8004d44 <_svfiprintf_r+0x1ec>)
 8004cbe:	bb1b      	cbnz	r3, 8004d08 <_svfiprintf_r+0x1b0>
 8004cc0:	9b03      	ldr	r3, [sp, #12]
 8004cc2:	3307      	adds	r3, #7
 8004cc4:	f023 0307 	bic.w	r3, r3, #7
 8004cc8:	3308      	adds	r3, #8
 8004cca:	9303      	str	r3, [sp, #12]
 8004ccc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cce:	4433      	add	r3, r6
 8004cd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cd2:	e76a      	b.n	8004baa <_svfiprintf_r+0x52>
 8004cd4:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cd8:	460c      	mov	r4, r1
 8004cda:	2001      	movs	r0, #1
 8004cdc:	e7a8      	b.n	8004c30 <_svfiprintf_r+0xd8>
 8004cde:	2300      	movs	r3, #0
 8004ce0:	3401      	adds	r4, #1
 8004ce2:	9305      	str	r3, [sp, #20]
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	f04f 0c0a 	mov.w	ip, #10
 8004cea:	4620      	mov	r0, r4
 8004cec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cf0:	3a30      	subs	r2, #48	@ 0x30
 8004cf2:	2a09      	cmp	r2, #9
 8004cf4:	d903      	bls.n	8004cfe <_svfiprintf_r+0x1a6>
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d0c6      	beq.n	8004c88 <_svfiprintf_r+0x130>
 8004cfa:	9105      	str	r1, [sp, #20]
 8004cfc:	e7c4      	b.n	8004c88 <_svfiprintf_r+0x130>
 8004cfe:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d02:	4604      	mov	r4, r0
 8004d04:	2301      	movs	r3, #1
 8004d06:	e7f0      	b.n	8004cea <_svfiprintf_r+0x192>
 8004d08:	ab03      	add	r3, sp, #12
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	462a      	mov	r2, r5
 8004d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8004d48 <_svfiprintf_r+0x1f0>)
 8004d10:	a904      	add	r1, sp, #16
 8004d12:	4638      	mov	r0, r7
 8004d14:	f3af 8000 	nop.w
 8004d18:	1c42      	adds	r2, r0, #1
 8004d1a:	4606      	mov	r6, r0
 8004d1c:	d1d6      	bne.n	8004ccc <_svfiprintf_r+0x174>
 8004d1e:	89ab      	ldrh	r3, [r5, #12]
 8004d20:	065b      	lsls	r3, r3, #25
 8004d22:	f53f af2d 	bmi.w	8004b80 <_svfiprintf_r+0x28>
 8004d26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d28:	e72c      	b.n	8004b84 <_svfiprintf_r+0x2c>
 8004d2a:	ab03      	add	r3, sp, #12
 8004d2c:	9300      	str	r3, [sp, #0]
 8004d2e:	462a      	mov	r2, r5
 8004d30:	4b05      	ldr	r3, [pc, #20]	@ (8004d48 <_svfiprintf_r+0x1f0>)
 8004d32:	a904      	add	r1, sp, #16
 8004d34:	4638      	mov	r0, r7
 8004d36:	f000 f879 	bl	8004e2c <_printf_i>
 8004d3a:	e7ed      	b.n	8004d18 <_svfiprintf_r+0x1c0>
 8004d3c:	08005408 	.word	0x08005408
 8004d40:	08005412 	.word	0x08005412
 8004d44:	00000000 	.word	0x00000000
 8004d48:	08004aa1 	.word	0x08004aa1
 8004d4c:	0800540e 	.word	0x0800540e

08004d50 <_printf_common>:
 8004d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d54:	4616      	mov	r6, r2
 8004d56:	4698      	mov	r8, r3
 8004d58:	688a      	ldr	r2, [r1, #8]
 8004d5a:	690b      	ldr	r3, [r1, #16]
 8004d5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d60:	4293      	cmp	r3, r2
 8004d62:	bfb8      	it	lt
 8004d64:	4613      	movlt	r3, r2
 8004d66:	6033      	str	r3, [r6, #0]
 8004d68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d6c:	4607      	mov	r7, r0
 8004d6e:	460c      	mov	r4, r1
 8004d70:	b10a      	cbz	r2, 8004d76 <_printf_common+0x26>
 8004d72:	3301      	adds	r3, #1
 8004d74:	6033      	str	r3, [r6, #0]
 8004d76:	6823      	ldr	r3, [r4, #0]
 8004d78:	0699      	lsls	r1, r3, #26
 8004d7a:	bf42      	ittt	mi
 8004d7c:	6833      	ldrmi	r3, [r6, #0]
 8004d7e:	3302      	addmi	r3, #2
 8004d80:	6033      	strmi	r3, [r6, #0]
 8004d82:	6825      	ldr	r5, [r4, #0]
 8004d84:	f015 0506 	ands.w	r5, r5, #6
 8004d88:	d106      	bne.n	8004d98 <_printf_common+0x48>
 8004d8a:	f104 0a19 	add.w	sl, r4, #25
 8004d8e:	68e3      	ldr	r3, [r4, #12]
 8004d90:	6832      	ldr	r2, [r6, #0]
 8004d92:	1a9b      	subs	r3, r3, r2
 8004d94:	42ab      	cmp	r3, r5
 8004d96:	dc26      	bgt.n	8004de6 <_printf_common+0x96>
 8004d98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d9c:	6822      	ldr	r2, [r4, #0]
 8004d9e:	3b00      	subs	r3, #0
 8004da0:	bf18      	it	ne
 8004da2:	2301      	movne	r3, #1
 8004da4:	0692      	lsls	r2, r2, #26
 8004da6:	d42b      	bmi.n	8004e00 <_printf_common+0xb0>
 8004da8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004dac:	4641      	mov	r1, r8
 8004dae:	4638      	mov	r0, r7
 8004db0:	47c8      	blx	r9
 8004db2:	3001      	adds	r0, #1
 8004db4:	d01e      	beq.n	8004df4 <_printf_common+0xa4>
 8004db6:	6823      	ldr	r3, [r4, #0]
 8004db8:	6922      	ldr	r2, [r4, #16]
 8004dba:	f003 0306 	and.w	r3, r3, #6
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	bf02      	ittt	eq
 8004dc2:	68e5      	ldreq	r5, [r4, #12]
 8004dc4:	6833      	ldreq	r3, [r6, #0]
 8004dc6:	1aed      	subeq	r5, r5, r3
 8004dc8:	68a3      	ldr	r3, [r4, #8]
 8004dca:	bf0c      	ite	eq
 8004dcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004dd0:	2500      	movne	r5, #0
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	bfc4      	itt	gt
 8004dd6:	1a9b      	subgt	r3, r3, r2
 8004dd8:	18ed      	addgt	r5, r5, r3
 8004dda:	2600      	movs	r6, #0
 8004ddc:	341a      	adds	r4, #26
 8004dde:	42b5      	cmp	r5, r6
 8004de0:	d11a      	bne.n	8004e18 <_printf_common+0xc8>
 8004de2:	2000      	movs	r0, #0
 8004de4:	e008      	b.n	8004df8 <_printf_common+0xa8>
 8004de6:	2301      	movs	r3, #1
 8004de8:	4652      	mov	r2, sl
 8004dea:	4641      	mov	r1, r8
 8004dec:	4638      	mov	r0, r7
 8004dee:	47c8      	blx	r9
 8004df0:	3001      	adds	r0, #1
 8004df2:	d103      	bne.n	8004dfc <_printf_common+0xac>
 8004df4:	f04f 30ff 	mov.w	r0, #4294967295
 8004df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dfc:	3501      	adds	r5, #1
 8004dfe:	e7c6      	b.n	8004d8e <_printf_common+0x3e>
 8004e00:	18e1      	adds	r1, r4, r3
 8004e02:	1c5a      	adds	r2, r3, #1
 8004e04:	2030      	movs	r0, #48	@ 0x30
 8004e06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e0a:	4422      	add	r2, r4
 8004e0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e14:	3302      	adds	r3, #2
 8004e16:	e7c7      	b.n	8004da8 <_printf_common+0x58>
 8004e18:	2301      	movs	r3, #1
 8004e1a:	4622      	mov	r2, r4
 8004e1c:	4641      	mov	r1, r8
 8004e1e:	4638      	mov	r0, r7
 8004e20:	47c8      	blx	r9
 8004e22:	3001      	adds	r0, #1
 8004e24:	d0e6      	beq.n	8004df4 <_printf_common+0xa4>
 8004e26:	3601      	adds	r6, #1
 8004e28:	e7d9      	b.n	8004dde <_printf_common+0x8e>
	...

08004e2c <_printf_i>:
 8004e2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e30:	7e0f      	ldrb	r7, [r1, #24]
 8004e32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e34:	2f78      	cmp	r7, #120	@ 0x78
 8004e36:	4691      	mov	r9, r2
 8004e38:	4680      	mov	r8, r0
 8004e3a:	460c      	mov	r4, r1
 8004e3c:	469a      	mov	sl, r3
 8004e3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e42:	d807      	bhi.n	8004e54 <_printf_i+0x28>
 8004e44:	2f62      	cmp	r7, #98	@ 0x62
 8004e46:	d80a      	bhi.n	8004e5e <_printf_i+0x32>
 8004e48:	2f00      	cmp	r7, #0
 8004e4a:	f000 80d2 	beq.w	8004ff2 <_printf_i+0x1c6>
 8004e4e:	2f58      	cmp	r7, #88	@ 0x58
 8004e50:	f000 80b9 	beq.w	8004fc6 <_printf_i+0x19a>
 8004e54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e5c:	e03a      	b.n	8004ed4 <_printf_i+0xa8>
 8004e5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e62:	2b15      	cmp	r3, #21
 8004e64:	d8f6      	bhi.n	8004e54 <_printf_i+0x28>
 8004e66:	a101      	add	r1, pc, #4	@ (adr r1, 8004e6c <_printf_i+0x40>)
 8004e68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e6c:	08004ec5 	.word	0x08004ec5
 8004e70:	08004ed9 	.word	0x08004ed9
 8004e74:	08004e55 	.word	0x08004e55
 8004e78:	08004e55 	.word	0x08004e55
 8004e7c:	08004e55 	.word	0x08004e55
 8004e80:	08004e55 	.word	0x08004e55
 8004e84:	08004ed9 	.word	0x08004ed9
 8004e88:	08004e55 	.word	0x08004e55
 8004e8c:	08004e55 	.word	0x08004e55
 8004e90:	08004e55 	.word	0x08004e55
 8004e94:	08004e55 	.word	0x08004e55
 8004e98:	08004fd9 	.word	0x08004fd9
 8004e9c:	08004f03 	.word	0x08004f03
 8004ea0:	08004f93 	.word	0x08004f93
 8004ea4:	08004e55 	.word	0x08004e55
 8004ea8:	08004e55 	.word	0x08004e55
 8004eac:	08004ffb 	.word	0x08004ffb
 8004eb0:	08004e55 	.word	0x08004e55
 8004eb4:	08004f03 	.word	0x08004f03
 8004eb8:	08004e55 	.word	0x08004e55
 8004ebc:	08004e55 	.word	0x08004e55
 8004ec0:	08004f9b 	.word	0x08004f9b
 8004ec4:	6833      	ldr	r3, [r6, #0]
 8004ec6:	1d1a      	adds	r2, r3, #4
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6032      	str	r2, [r6, #0]
 8004ecc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ed0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e09d      	b.n	8005014 <_printf_i+0x1e8>
 8004ed8:	6833      	ldr	r3, [r6, #0]
 8004eda:	6820      	ldr	r0, [r4, #0]
 8004edc:	1d19      	adds	r1, r3, #4
 8004ede:	6031      	str	r1, [r6, #0]
 8004ee0:	0606      	lsls	r6, r0, #24
 8004ee2:	d501      	bpl.n	8004ee8 <_printf_i+0xbc>
 8004ee4:	681d      	ldr	r5, [r3, #0]
 8004ee6:	e003      	b.n	8004ef0 <_printf_i+0xc4>
 8004ee8:	0645      	lsls	r5, r0, #25
 8004eea:	d5fb      	bpl.n	8004ee4 <_printf_i+0xb8>
 8004eec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004ef0:	2d00      	cmp	r5, #0
 8004ef2:	da03      	bge.n	8004efc <_printf_i+0xd0>
 8004ef4:	232d      	movs	r3, #45	@ 0x2d
 8004ef6:	426d      	negs	r5, r5
 8004ef8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004efc:	4859      	ldr	r0, [pc, #356]	@ (8005064 <_printf_i+0x238>)
 8004efe:	230a      	movs	r3, #10
 8004f00:	e011      	b.n	8004f26 <_printf_i+0xfa>
 8004f02:	6821      	ldr	r1, [r4, #0]
 8004f04:	6833      	ldr	r3, [r6, #0]
 8004f06:	0608      	lsls	r0, r1, #24
 8004f08:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f0c:	d402      	bmi.n	8004f14 <_printf_i+0xe8>
 8004f0e:	0649      	lsls	r1, r1, #25
 8004f10:	bf48      	it	mi
 8004f12:	b2ad      	uxthmi	r5, r5
 8004f14:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f16:	4853      	ldr	r0, [pc, #332]	@ (8005064 <_printf_i+0x238>)
 8004f18:	6033      	str	r3, [r6, #0]
 8004f1a:	bf14      	ite	ne
 8004f1c:	230a      	movne	r3, #10
 8004f1e:	2308      	moveq	r3, #8
 8004f20:	2100      	movs	r1, #0
 8004f22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f26:	6866      	ldr	r6, [r4, #4]
 8004f28:	60a6      	str	r6, [r4, #8]
 8004f2a:	2e00      	cmp	r6, #0
 8004f2c:	bfa2      	ittt	ge
 8004f2e:	6821      	ldrge	r1, [r4, #0]
 8004f30:	f021 0104 	bicge.w	r1, r1, #4
 8004f34:	6021      	strge	r1, [r4, #0]
 8004f36:	b90d      	cbnz	r5, 8004f3c <_printf_i+0x110>
 8004f38:	2e00      	cmp	r6, #0
 8004f3a:	d04b      	beq.n	8004fd4 <_printf_i+0x1a8>
 8004f3c:	4616      	mov	r6, r2
 8004f3e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f42:	fb03 5711 	mls	r7, r3, r1, r5
 8004f46:	5dc7      	ldrb	r7, [r0, r7]
 8004f48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f4c:	462f      	mov	r7, r5
 8004f4e:	42bb      	cmp	r3, r7
 8004f50:	460d      	mov	r5, r1
 8004f52:	d9f4      	bls.n	8004f3e <_printf_i+0x112>
 8004f54:	2b08      	cmp	r3, #8
 8004f56:	d10b      	bne.n	8004f70 <_printf_i+0x144>
 8004f58:	6823      	ldr	r3, [r4, #0]
 8004f5a:	07df      	lsls	r7, r3, #31
 8004f5c:	d508      	bpl.n	8004f70 <_printf_i+0x144>
 8004f5e:	6923      	ldr	r3, [r4, #16]
 8004f60:	6861      	ldr	r1, [r4, #4]
 8004f62:	4299      	cmp	r1, r3
 8004f64:	bfde      	ittt	le
 8004f66:	2330      	movle	r3, #48	@ 0x30
 8004f68:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f6c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f70:	1b92      	subs	r2, r2, r6
 8004f72:	6122      	str	r2, [r4, #16]
 8004f74:	f8cd a000 	str.w	sl, [sp]
 8004f78:	464b      	mov	r3, r9
 8004f7a:	aa03      	add	r2, sp, #12
 8004f7c:	4621      	mov	r1, r4
 8004f7e:	4640      	mov	r0, r8
 8004f80:	f7ff fee6 	bl	8004d50 <_printf_common>
 8004f84:	3001      	adds	r0, #1
 8004f86:	d14a      	bne.n	800501e <_printf_i+0x1f2>
 8004f88:	f04f 30ff 	mov.w	r0, #4294967295
 8004f8c:	b004      	add	sp, #16
 8004f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f92:	6823      	ldr	r3, [r4, #0]
 8004f94:	f043 0320 	orr.w	r3, r3, #32
 8004f98:	6023      	str	r3, [r4, #0]
 8004f9a:	4833      	ldr	r0, [pc, #204]	@ (8005068 <_printf_i+0x23c>)
 8004f9c:	2778      	movs	r7, #120	@ 0x78
 8004f9e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004fa2:	6823      	ldr	r3, [r4, #0]
 8004fa4:	6831      	ldr	r1, [r6, #0]
 8004fa6:	061f      	lsls	r7, r3, #24
 8004fa8:	f851 5b04 	ldr.w	r5, [r1], #4
 8004fac:	d402      	bmi.n	8004fb4 <_printf_i+0x188>
 8004fae:	065f      	lsls	r7, r3, #25
 8004fb0:	bf48      	it	mi
 8004fb2:	b2ad      	uxthmi	r5, r5
 8004fb4:	6031      	str	r1, [r6, #0]
 8004fb6:	07d9      	lsls	r1, r3, #31
 8004fb8:	bf44      	itt	mi
 8004fba:	f043 0320 	orrmi.w	r3, r3, #32
 8004fbe:	6023      	strmi	r3, [r4, #0]
 8004fc0:	b11d      	cbz	r5, 8004fca <_printf_i+0x19e>
 8004fc2:	2310      	movs	r3, #16
 8004fc4:	e7ac      	b.n	8004f20 <_printf_i+0xf4>
 8004fc6:	4827      	ldr	r0, [pc, #156]	@ (8005064 <_printf_i+0x238>)
 8004fc8:	e7e9      	b.n	8004f9e <_printf_i+0x172>
 8004fca:	6823      	ldr	r3, [r4, #0]
 8004fcc:	f023 0320 	bic.w	r3, r3, #32
 8004fd0:	6023      	str	r3, [r4, #0]
 8004fd2:	e7f6      	b.n	8004fc2 <_printf_i+0x196>
 8004fd4:	4616      	mov	r6, r2
 8004fd6:	e7bd      	b.n	8004f54 <_printf_i+0x128>
 8004fd8:	6833      	ldr	r3, [r6, #0]
 8004fda:	6825      	ldr	r5, [r4, #0]
 8004fdc:	6961      	ldr	r1, [r4, #20]
 8004fde:	1d18      	adds	r0, r3, #4
 8004fe0:	6030      	str	r0, [r6, #0]
 8004fe2:	062e      	lsls	r6, r5, #24
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	d501      	bpl.n	8004fec <_printf_i+0x1c0>
 8004fe8:	6019      	str	r1, [r3, #0]
 8004fea:	e002      	b.n	8004ff2 <_printf_i+0x1c6>
 8004fec:	0668      	lsls	r0, r5, #25
 8004fee:	d5fb      	bpl.n	8004fe8 <_printf_i+0x1bc>
 8004ff0:	8019      	strh	r1, [r3, #0]
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	6123      	str	r3, [r4, #16]
 8004ff6:	4616      	mov	r6, r2
 8004ff8:	e7bc      	b.n	8004f74 <_printf_i+0x148>
 8004ffa:	6833      	ldr	r3, [r6, #0]
 8004ffc:	1d1a      	adds	r2, r3, #4
 8004ffe:	6032      	str	r2, [r6, #0]
 8005000:	681e      	ldr	r6, [r3, #0]
 8005002:	6862      	ldr	r2, [r4, #4]
 8005004:	2100      	movs	r1, #0
 8005006:	4630      	mov	r0, r6
 8005008:	f7fb f8f2 	bl	80001f0 <memchr>
 800500c:	b108      	cbz	r0, 8005012 <_printf_i+0x1e6>
 800500e:	1b80      	subs	r0, r0, r6
 8005010:	6060      	str	r0, [r4, #4]
 8005012:	6863      	ldr	r3, [r4, #4]
 8005014:	6123      	str	r3, [r4, #16]
 8005016:	2300      	movs	r3, #0
 8005018:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800501c:	e7aa      	b.n	8004f74 <_printf_i+0x148>
 800501e:	6923      	ldr	r3, [r4, #16]
 8005020:	4632      	mov	r2, r6
 8005022:	4649      	mov	r1, r9
 8005024:	4640      	mov	r0, r8
 8005026:	47d0      	blx	sl
 8005028:	3001      	adds	r0, #1
 800502a:	d0ad      	beq.n	8004f88 <_printf_i+0x15c>
 800502c:	6823      	ldr	r3, [r4, #0]
 800502e:	079b      	lsls	r3, r3, #30
 8005030:	d413      	bmi.n	800505a <_printf_i+0x22e>
 8005032:	68e0      	ldr	r0, [r4, #12]
 8005034:	9b03      	ldr	r3, [sp, #12]
 8005036:	4298      	cmp	r0, r3
 8005038:	bfb8      	it	lt
 800503a:	4618      	movlt	r0, r3
 800503c:	e7a6      	b.n	8004f8c <_printf_i+0x160>
 800503e:	2301      	movs	r3, #1
 8005040:	4632      	mov	r2, r6
 8005042:	4649      	mov	r1, r9
 8005044:	4640      	mov	r0, r8
 8005046:	47d0      	blx	sl
 8005048:	3001      	adds	r0, #1
 800504a:	d09d      	beq.n	8004f88 <_printf_i+0x15c>
 800504c:	3501      	adds	r5, #1
 800504e:	68e3      	ldr	r3, [r4, #12]
 8005050:	9903      	ldr	r1, [sp, #12]
 8005052:	1a5b      	subs	r3, r3, r1
 8005054:	42ab      	cmp	r3, r5
 8005056:	dcf2      	bgt.n	800503e <_printf_i+0x212>
 8005058:	e7eb      	b.n	8005032 <_printf_i+0x206>
 800505a:	2500      	movs	r5, #0
 800505c:	f104 0619 	add.w	r6, r4, #25
 8005060:	e7f5      	b.n	800504e <_printf_i+0x222>
 8005062:	bf00      	nop
 8005064:	08005419 	.word	0x08005419
 8005068:	0800542a 	.word	0x0800542a

0800506c <memmove>:
 800506c:	4288      	cmp	r0, r1
 800506e:	b510      	push	{r4, lr}
 8005070:	eb01 0402 	add.w	r4, r1, r2
 8005074:	d902      	bls.n	800507c <memmove+0x10>
 8005076:	4284      	cmp	r4, r0
 8005078:	4623      	mov	r3, r4
 800507a:	d807      	bhi.n	800508c <memmove+0x20>
 800507c:	1e43      	subs	r3, r0, #1
 800507e:	42a1      	cmp	r1, r4
 8005080:	d008      	beq.n	8005094 <memmove+0x28>
 8005082:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005086:	f803 2f01 	strb.w	r2, [r3, #1]!
 800508a:	e7f8      	b.n	800507e <memmove+0x12>
 800508c:	4402      	add	r2, r0
 800508e:	4601      	mov	r1, r0
 8005090:	428a      	cmp	r2, r1
 8005092:	d100      	bne.n	8005096 <memmove+0x2a>
 8005094:	bd10      	pop	{r4, pc}
 8005096:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800509a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800509e:	e7f7      	b.n	8005090 <memmove+0x24>

080050a0 <memcpy>:
 80050a0:	440a      	add	r2, r1
 80050a2:	4291      	cmp	r1, r2
 80050a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80050a8:	d100      	bne.n	80050ac <memcpy+0xc>
 80050aa:	4770      	bx	lr
 80050ac:	b510      	push	{r4, lr}
 80050ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050b6:	4291      	cmp	r1, r2
 80050b8:	d1f9      	bne.n	80050ae <memcpy+0xe>
 80050ba:	bd10      	pop	{r4, pc}

080050bc <_realloc_r>:
 80050bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050c0:	4680      	mov	r8, r0
 80050c2:	4615      	mov	r5, r2
 80050c4:	460c      	mov	r4, r1
 80050c6:	b921      	cbnz	r1, 80050d2 <_realloc_r+0x16>
 80050c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050cc:	4611      	mov	r1, r2
 80050ce:	f7ff bbad 	b.w	800482c <_malloc_r>
 80050d2:	b92a      	cbnz	r2, 80050e0 <_realloc_r+0x24>
 80050d4:	f7ff fc9a 	bl	8004a0c <_free_r>
 80050d8:	2400      	movs	r4, #0
 80050da:	4620      	mov	r0, r4
 80050dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050e0:	f000 f81a 	bl	8005118 <_malloc_usable_size_r>
 80050e4:	4285      	cmp	r5, r0
 80050e6:	4606      	mov	r6, r0
 80050e8:	d802      	bhi.n	80050f0 <_realloc_r+0x34>
 80050ea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80050ee:	d8f4      	bhi.n	80050da <_realloc_r+0x1e>
 80050f0:	4629      	mov	r1, r5
 80050f2:	4640      	mov	r0, r8
 80050f4:	f7ff fb9a 	bl	800482c <_malloc_r>
 80050f8:	4607      	mov	r7, r0
 80050fa:	2800      	cmp	r0, #0
 80050fc:	d0ec      	beq.n	80050d8 <_realloc_r+0x1c>
 80050fe:	42b5      	cmp	r5, r6
 8005100:	462a      	mov	r2, r5
 8005102:	4621      	mov	r1, r4
 8005104:	bf28      	it	cs
 8005106:	4632      	movcs	r2, r6
 8005108:	f7ff ffca 	bl	80050a0 <memcpy>
 800510c:	4621      	mov	r1, r4
 800510e:	4640      	mov	r0, r8
 8005110:	f7ff fc7c 	bl	8004a0c <_free_r>
 8005114:	463c      	mov	r4, r7
 8005116:	e7e0      	b.n	80050da <_realloc_r+0x1e>

08005118 <_malloc_usable_size_r>:
 8005118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800511c:	1f18      	subs	r0, r3, #4
 800511e:	2b00      	cmp	r3, #0
 8005120:	bfbc      	itt	lt
 8005122:	580b      	ldrlt	r3, [r1, r0]
 8005124:	18c0      	addlt	r0, r0, r3
 8005126:	4770      	bx	lr

08005128 <_init>:
 8005128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800512a:	bf00      	nop
 800512c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800512e:	bc08      	pop	{r3}
 8005130:	469e      	mov	lr, r3
 8005132:	4770      	bx	lr

08005134 <_fini>:
 8005134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005136:	bf00      	nop
 8005138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800513a:	bc08      	pop	{r3}
 800513c:	469e      	mov	lr, r3
 800513e:	4770      	bx	lr
