
game2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002494  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  08002634  08002634  00003634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002af8  08002af8  00004084  2**0
                  CONTENTS
  4 .ARM          00000008  08002af8  08002af8  00003af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b00  08002b00  00004084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b00  08002b00  00003b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002b04  08002b04  00003b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08002b08  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004084  2**0
                  CONTENTS
 10 .bss          00000374  20000084  20000084  00004084  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003f8  200003f8  00004084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004084  2**0
                  CONTENTS, READONLY
 13 .debug_info   000022f2  00000000  00000000  000040b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000a85  00000000  00000000  000063a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000218  00000000  00000000  00006e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000173  00000000  00000000  00007048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016c03  00000000  00000000  000071bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000268e  00000000  00000000  0001ddbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000785b5  00000000  00000000  0002044c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00098a01  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001364  00000000  00000000  00098a44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  00099da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800261c 	.word	0x0800261c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	0800261c 	.word	0x0800261c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <check_servo_choice>:
 */

#include "gamestate.h"


int check_servo_choice(int correct_servos[], int servo_choice, int total_servos){
 80002a0:	b480      	push	{r7}
 80002a2:	b087      	sub	sp, #28
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	60f8      	str	r0, [r7, #12]
 80002a8:	60b9      	str	r1, [r7, #8]
 80002aa:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < total_servos; i++){
 80002ac:	2300      	movs	r3, #0
 80002ae:	617b      	str	r3, [r7, #20]
 80002b0:	e00c      	b.n	80002cc <check_servo_choice+0x2c>
		if(correct_servos[i] == servo_choice){
 80002b2:	697b      	ldr	r3, [r7, #20]
 80002b4:	009b      	lsls	r3, r3, #2
 80002b6:	68fa      	ldr	r2, [r7, #12]
 80002b8:	4413      	add	r3, r2
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	68ba      	ldr	r2, [r7, #8]
 80002be:	429a      	cmp	r2, r3
 80002c0:	d101      	bne.n	80002c6 <check_servo_choice+0x26>
	return(1);
 80002c2:	2301      	movs	r3, #1
 80002c4:	e007      	b.n	80002d6 <check_servo_choice+0x36>
	for(int i = 0; i < total_servos; i++){
 80002c6:	697b      	ldr	r3, [r7, #20]
 80002c8:	3301      	adds	r3, #1
 80002ca:	617b      	str	r3, [r7, #20]
 80002cc:	697a      	ldr	r2, [r7, #20]
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	429a      	cmp	r2, r3
 80002d2:	dbee      	blt.n	80002b2 <check_servo_choice+0x12>
        }
    }
    return 0;  // No match found after checking all
 80002d4:	2300      	movs	r3, #0
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	371c      	adds	r7, #28
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
	...

080002e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
 80002ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	db0b      	blt.n	800030e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	f003 021f 	and.w	r2, r3, #31
 80002fc:	4907      	ldr	r1, [pc, #28]	@ (800031c <__NVIC_EnableIRQ+0x38>)
 80002fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000302:	095b      	lsrs	r3, r3, #5
 8000304:	2001      	movs	r0, #1
 8000306:	fa00 f202 	lsl.w	r2, r0, r2
 800030a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800030e:	bf00      	nop
 8000310:	370c      	adds	r7, #12
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	e000e100 	.word	0xe000e100

08000320 <initialise_touch>:
#include "gpio.h"
#include "stm32f303xc.h"

void initialise_touch(void (*_callback_function)) {
 8000320:	b480      	push	{r7}
 8000322:	b085      	sub	sp, #20
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
    // Enable clocks
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOEEN;
 8000328:	4b0e      	ldr	r3, [pc, #56]	@ (8000364 <initialise_touch+0x44>)
 800032a:	695b      	ldr	r3, [r3, #20]
 800032c:	4a0d      	ldr	r2, [pc, #52]	@ (8000364 <initialise_touch+0x44>)
 800032e:	f443 1308 	orr.w	r3, r3, #2228224	@ 0x220000
 8000332:	6153      	str	r3, [r2, #20]
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000334:	4b0b      	ldr	r3, [pc, #44]	@ (8000364 <initialise_touch+0x44>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	4a0a      	ldr	r2, [pc, #40]	@ (8000364 <initialise_touch+0x44>)
 800033a:	f043 0301 	orr.w	r3, r3, #1
 800033e:	6193      	str	r3, [r2, #24]

    // Configure PE8–PE11 as output
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 8000340:	4b09      	ldr	r3, [pc, #36]	@ (8000368 <initialise_touch+0x48>)
 8000342:	60fb      	str	r3, [r7, #12]
	*led_output_registers = 0x5555;
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	f245 5255 	movw	r2, #21845	@ 0x5555
 800034a:	801a      	strh	r2, [r3, #0]

    // Set PA1–PA6 as inputs
	uint16_t *touch_registers = ((uint16_t *)&(GPIOA->MODER));
 800034c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000350:	60bb      	str	r3, [r7, #8]
	*touch_registers = 0x0000;
 8000352:	68bb      	ldr	r3, [r7, #8]
 8000354:	2200      	movs	r2, #0
 8000356:	801a      	strh	r2, [r3, #0]
}
 8000358:	bf00      	nop
 800035a:	3714      	adds	r7, #20
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr
 8000364:	40021000 	.word	0x40021000
 8000368:	48001002 	.word	0x48001002

0800036c <enable_touch_interrupts>:

void enable_touch_interrupts() {
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000370:	b672      	cpsid	i
}
 8000372:	bf00      	nop
	__disable_irq();

    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000374:	4b18      	ldr	r3, [pc, #96]	@ (80003d8 <enable_touch_interrupts+0x6c>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	4a17      	ldr	r2, [pc, #92]	@ (80003d8 <enable_touch_interrupts+0x6c>)
 800037a:	f043 0301 	orr.w	r3, r3, #1
 800037e:	6193      	str	r3, [r2, #24]

    // Map EXTI lines 0–3 to PA1–PA3
    SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PA | SYSCFG_EXTICR1_EXTI2_PA | SYSCFG_EXTICR1_EXTI3_PA;
 8000380:	4b16      	ldr	r3, [pc, #88]	@ (80003dc <enable_touch_interrupts+0x70>)
 8000382:	2200      	movs	r2, #0
 8000384:	609a      	str	r2, [r3, #8]
    // Map EXTI lines 4–7 to PA4–PA6
    SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI4_PA | SYSCFG_EXTICR2_EXTI5_PA | SYSCFG_EXTICR2_EXTI6_PA;
 8000386:	4b15      	ldr	r3, [pc, #84]	@ (80003dc <enable_touch_interrupts+0x70>)
 8000388:	2200      	movs	r2, #0
 800038a:	60da      	str	r2, [r3, #12]

	// Trigger on rising edge and stop falling edge
	EXTI->RTSR |= EXTI_RTSR_TR1 | EXTI_RTSR_TR2 | EXTI_RTSR_TR3 | EXTI_RTSR_TR4 | EXTI_RTSR_TR5 | EXTI_RTSR_TR6;
 800038c:	4b14      	ldr	r3, [pc, #80]	@ (80003e0 <enable_touch_interrupts+0x74>)
 800038e:	689b      	ldr	r3, [r3, #8]
 8000390:	4a13      	ldr	r2, [pc, #76]	@ (80003e0 <enable_touch_interrupts+0x74>)
 8000392:	f043 037e 	orr.w	r3, r3, #126	@ 0x7e
 8000396:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(EXTI_FTSR_TR1 | EXTI_FTSR_TR2 | EXTI_FTSR_TR3 |
 8000398:	4b11      	ldr	r3, [pc, #68]	@ (80003e0 <enable_touch_interrupts+0x74>)
 800039a:	68db      	ldr	r3, [r3, #12]
 800039c:	4a10      	ldr	r2, [pc, #64]	@ (80003e0 <enable_touch_interrupts+0x74>)
 800039e:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 80003a2:	60d3      	str	r3, [r2, #12]
	                EXTI_FTSR_TR4 | EXTI_FTSR_TR5 | EXTI_FTSR_TR6);

	// Unmask EXTI line 1
	EXTI->IMR |= EXTI_IMR_MR1 | EXTI_IMR_MR2 | EXTI_IMR_MR3 | EXTI_IMR_MR4 | EXTI_IMR_MR5 | EXTI_IMR_MR6;
 80003a4:	4b0e      	ldr	r3, [pc, #56]	@ (80003e0 <enable_touch_interrupts+0x74>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a0d      	ldr	r2, [pc, #52]	@ (80003e0 <enable_touch_interrupts+0x74>)
 80003aa:	f043 037e 	orr.w	r3, r3, #126	@ 0x7e
 80003ae:	6013      	str	r3, [r2, #0]

    // Enable NVIC IRQs for EXTI1–EXTI3 and EXTI4–9 (shared)
    NVIC_EnableIRQ(EXTI1_IRQn);
 80003b0:	2007      	movs	r0, #7
 80003b2:	f7ff ff97 	bl	80002e4 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 80003b6:	2008      	movs	r0, #8
 80003b8:	f7ff ff94 	bl	80002e4 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(EXTI3_IRQn);
 80003bc:	2009      	movs	r0, #9
 80003be:	f7ff ff91 	bl	80002e4 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(EXTI4_IRQn);
 80003c2:	200a      	movs	r0, #10
 80003c4:	f7ff ff8e 	bl	80002e4 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(EXTI9_5_IRQn);
 80003c8:	2017      	movs	r0, #23
 80003ca:	f7ff ff8b 	bl	80002e4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80003ce:	b662      	cpsie	i
}
 80003d0:	bf00      	nop
	__enable_irq();
}
 80003d2:	bf00      	nop
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40021000 	.word	0x40021000
 80003dc:	40010000 	.word	0x40010000
 80003e0:	40010400 	.word	0x40010400

080003e4 <display_number>:

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning \
    "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif
void display_number(uint8_t n) {
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	4603      	mov	r3, r0
 80003ec:	71fb      	strb	r3, [r7, #7]
    // Display `n` on PE8–PE11 (4-bit binary)
    GPIOE->ODR &= ~(0xF << 8);        // Clear PE8–11
 80003ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000418 <display_number+0x34>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	4a09      	ldr	r2, [pc, #36]	@ (8000418 <display_number+0x34>)
 80003f4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80003f8:	6153      	str	r3, [r2, #20]
    GPIOE->ODR |= ((n & 0xF) << 8);   // Set new value
 80003fa:	4b07      	ldr	r3, [pc, #28]	@ (8000418 <display_number+0x34>)
 80003fc:	695a      	ldr	r2, [r3, #20]
 80003fe:	79fb      	ldrb	r3, [r7, #7]
 8000400:	021b      	lsls	r3, r3, #8
 8000402:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8000406:	4904      	ldr	r1, [pc, #16]	@ (8000418 <display_number+0x34>)
 8000408:	4313      	orrs	r3, r2
 800040a:	614b      	str	r3, [r1, #20]
}
 800040c:	bf00      	nop
 800040e:	370c      	adds	r7, #12
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr
 8000418:	48001000 	.word	0x48001000

0800041c <handle_touch>:
// Each EXTI handler calls this with the corresponding pin number
void handle_touch(uint8_t pad, GameTriggers *trigger) {
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	4603      	mov	r3, r0
 8000424:	6039      	str	r1, [r7, #0]
 8000426:	71fb      	strb	r3, [r7, #7]
	display_number(pad);
 8000428:	79fb      	ldrb	r3, [r7, #7]
 800042a:	4618      	mov	r0, r3
 800042c:	f7ff ffda 	bl	80003e4 <display_number>
	trigger->touchpad_pressed = pad;
 8000430:	79fa      	ldrb	r2, [r7, #7]
 8000432:	683b      	ldr	r3, [r7, #0]
 8000434:	601a      	str	r2, [r3, #0]
}
 8000436:	bf00      	nop
 8000438:	3708      	adds	r7, #8
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
	...

08000440 <main>:



int main(void) {
 8000440:	b5b0      	push	{r4, r5, r7, lr}
 8000442:	b09c      	sub	sp, #112	@ 0x70
 8000444:	af0a      	add	r7, sp, #40	@ 0x28
  // For Testing =======
  char* command = NULL;
 8000446:	2300      	movs	r3, #0
 8000448:	647b      	str	r3, [r7, #68]	@ 0x44
  char* follow = NULL;
 800044a:	2300      	movs	r3, #0
 800044c:	643b      	str	r3, [r7, #64]	@ 0x40
  // For Testing =======

  enableUSART1();
 800044e:	f000 fb2f 	bl	8000ab0 <enableUSART1>
  enableUARTInterrupts();
 8000452:	f000 fb67 	bl	8000b24 <enableUARTInterrupts>
  clear_screen();
 8000456:	f000 fd07 	bl	8000e68 <clear_screen>

  send_string("hello world");
 800045a:	488d      	ldr	r0, [pc, #564]	@ (8000690 <main+0x250>)
 800045c:	f000 fbbe 	bl	8000bdc <send_string>
  clear_screen();
 8000460:	f000 fd02 	bl	8000e68 <clear_screen>

  initialise_touch();
 8000464:	f7ff ff5c 	bl	8000320 <initialise_touch>
  enable_touch_interrupts();
 8000468:	f7ff ff80 	bl	800036c <enable_touch_interrupts>

  GameState game = {
 800046c:	463b      	mov	r3, r7
 800046e:	2238      	movs	r2, #56	@ 0x38
 8000470:	2100      	movs	r1, #0
 8000472:	4618      	mov	r0, r3
 8000474:	f001 f825 	bl	80014c2 <memset>
 8000478:	2301      	movs	r3, #1
 800047a:	603b      	str	r3, [r7, #0]
 800047c:	2303      	movs	r3, #3
 800047e:	607b      	str	r3, [r7, #4]
 8000480:	2304      	movs	r3, #4
 8000482:	60bb      	str	r3, [r7, #8]
 8000484:	2306      	movs	r3, #6
 8000486:	60fb      	str	r3, [r7, #12]
 8000488:	2304      	movs	r3, #4
 800048a:	61fb      	str	r3, [r7, #28]
 800048c:	2304      	movs	r3, #4
 800048e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000490:	23f0      	movs	r3, #240	@ 0xf0
 8000492:	62fb      	str	r3, [r7, #44]	@ 0x2c
			.game_over = 0,
			.total_items_to_find = 0
  };

  //Count item numbers
  int count = 0;
 8000494:	2300      	movs	r3, #0
 8000496:	63fb      	str	r3, [r7, #60]	@ 0x3c
  for (int i = 0; i < 6; i++) {
 8000498:	2300      	movs	r3, #0
 800049a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800049c:	e00d      	b.n	80004ba <main+0x7a>
      if (game.correct_servos[i] != 0) {
 800049e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80004a0:	009b      	lsls	r3, r3, #2
 80004a2:	3348      	adds	r3, #72	@ 0x48
 80004a4:	443b      	add	r3, r7
 80004a6:	f853 3c48 	ldr.w	r3, [r3, #-72]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d002      	beq.n	80004b4 <main+0x74>
          count++;
 80004ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80004b0:	3301      	adds	r3, #1
 80004b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  for (int i = 0; i < 6; i++) {
 80004b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80004b6:	3301      	adds	r3, #1
 80004b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80004ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80004bc:	2b05      	cmp	r3, #5
 80004be:	ddee      	ble.n	800049e <main+0x5e>
      }
  }
  game.total_items_to_find = count;
 80004c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80004c2:	637b      	str	r3, [r7, #52]	@ 0x34



  send_string("Game Initialised\r\n");
 80004c4:	4873      	ldr	r0, [pc, #460]	@ (8000694 <main+0x254>)
 80004c6:	f000 fb89 	bl	8000bdc <send_string>
  // print_game_triggers(triggers);

  // triggers.touchpad_pressed = touchpad_interrupt;

  // Loop forever
  while (game.game_over == 0) {
 80004ca:	e1ea      	b.n	80008a2 <main+0x462>
    if (message_complete == 1) {
 80004cc:	4b72      	ldr	r3, [pc, #456]	@ (8000698 <main+0x258>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	2b01      	cmp	r3, #1
 80004d2:	d10d      	bne.n	80004f0 <main+0xb0>
      command = strtok((char*)string, " ");  // load commmand
 80004d4:	4971      	ldr	r1, [pc, #452]	@ (800069c <main+0x25c>)
 80004d6:	4872      	ldr	r0, [pc, #456]	@ (80006a0 <main+0x260>)
 80004d8:	f000 fffc 	bl	80014d4 <strtok>
 80004dc:	4603      	mov	r3, r0
 80004de:	647b      	str	r3, [r7, #68]	@ 0x44
      follow = strtok(NULL, "");             // load
 80004e0:	4970      	ldr	r1, [pc, #448]	@ (80006a4 <main+0x264>)
 80004e2:	2000      	movs	r0, #0
 80004e4:	f000 fff6 	bl	80014d4 <strtok>
 80004e8:	4603      	mov	r3, r0
 80004ea:	643b      	str	r3, [r7, #64]	@ 0x40
      //		      message_complete = 0;  // need to reset this for
      //next message
      clear_screen();
 80004ec:	f000 fcbc 	bl	8000e68 <clear_screen>
    }
    if (command != NULL && message_complete == 1) {
 80004f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	f000 8109 	beq.w	800070a <main+0x2ca>
 80004f8:	4b67      	ldr	r3, [pc, #412]	@ (8000698 <main+0x258>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	2b01      	cmp	r3, #1
 80004fe:	f040 8104 	bne.w	800070a <main+0x2ca>
      if (strcmp(command, "touchpad") == 0 && valid_period_check(follow) != 0) {
 8000502:	4969      	ldr	r1, [pc, #420]	@ (80006a8 <main+0x268>)
 8000504:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8000506:	f7ff fe6b 	bl	80001e0 <strcmp>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d128      	bne.n	8000562 <main+0x122>
 8000510:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000512:	f000 fcb3 	bl	8000e7c <valid_period_check>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d022      	beq.n	8000562 <main+0x122>

        sprintf(feedback_string, "Touchpad set to: %s \r\n", follow);
 800051c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800051e:	4963      	ldr	r1, [pc, #396]	@ (80006ac <main+0x26c>)
 8000520:	4863      	ldr	r0, [pc, #396]	@ (80006b0 <main+0x270>)
 8000522:	f000 ff6b 	bl	80013fc <siprintf>
        send_string(feedback_string);
 8000526:	4862      	ldr	r0, [pc, #392]	@ (80006b0 <main+0x270>)
 8000528:	f000 fb58 	bl	8000bdc <send_string>
        triggers.touchpad_pressed = atoi(follow);
 800052c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800052e:	f000 fdbe 	bl	80010ae <atoi>
 8000532:	4603      	mov	r3, r0
 8000534:	4a5f      	ldr	r2, [pc, #380]	@ (80006b4 <main+0x274>)
 8000536:	6013      	str	r3, [r2, #0]
        memset(feedback_string, 0, BUFFER);
 8000538:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800053c:	2100      	movs	r1, #0
 800053e:	485c      	ldr	r0, [pc, #368]	@ (80006b0 <main+0x270>)
 8000540:	f000 ffbf 	bl	80014c2 <memset>
        send_string("Touchpad set to ");
 8000544:	485c      	ldr	r0, [pc, #368]	@ (80006b8 <main+0x278>)
 8000546:	f000 fb49 	bl	8000bdc <send_string>
        send_string_buffer(triggers.touchpad_pressed);
 800054a:	4b5a      	ldr	r3, [pc, #360]	@ (80006b4 <main+0x274>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4618      	mov	r0, r3
 8000550:	f000 fb64 	bl	8000c1c <send_string_buffer>
        send_string("\r\n");
 8000554:	4859      	ldr	r0, [pc, #356]	@ (80006bc <main+0x27c>)
 8000556:	f000 fb41 	bl	8000bdc <send_string>
        //		          print_game_triggers(triggers);
        message_complete = 0;
 800055a:	4b4f      	ldr	r3, [pc, #316]	@ (8000698 <main+0x258>)
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
      if (strcmp(command, "touchpad") == 0 && valid_period_check(follow) != 0) {
 8000560:	e0c4      	b.n	80006ec <main+0x2ac>

      } else if (strcmp(command, "servo") == 0 &&
 8000562:	4957      	ldr	r1, [pc, #348]	@ (80006c0 <main+0x280>)
 8000564:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8000566:	f7ff fe3b 	bl	80001e0 <strcmp>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d12e      	bne.n	80005ce <main+0x18e>
                 valid_period_check(follow) != 0) {
 8000570:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000572:	f000 fc83 	bl	8000e7c <valid_period_check>
 8000576:	4603      	mov	r3, r0
      } else if (strcmp(command, "servo") == 0 &&
 8000578:	2b00      	cmp	r3, #0
 800057a:	d028      	beq.n	80005ce <main+0x18e>

        sprintf(feedback_string, "Servo angle set to: %s \r\n", follow);
 800057c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800057e:	4951      	ldr	r1, [pc, #324]	@ (80006c4 <main+0x284>)
 8000580:	484b      	ldr	r0, [pc, #300]	@ (80006b0 <main+0x270>)
 8000582:	f000 ff3b 	bl	80013fc <siprintf>
        send_string(feedback_string);
 8000586:	484a      	ldr	r0, [pc, #296]	@ (80006b0 <main+0x270>)
 8000588:	f000 fb28 	bl	8000bdc <send_string>
        triggers.servo_angle = atoi(follow);
 800058c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800058e:	f000 fd8e 	bl	80010ae <atoi>
 8000592:	4603      	mov	r3, r0
 8000594:	4a47      	ldr	r2, [pc, #284]	@ (80006b4 <main+0x274>)
 8000596:	6113      	str	r3, [r2, #16]
        triggers.trimpot_value = atoi(follow);  // Remove this later
 8000598:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800059a:	f000 fd88 	bl	80010ae <atoi>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a44      	ldr	r2, [pc, #272]	@ (80006b4 <main+0x274>)
 80005a2:	6153      	str	r3, [r2, #20]
        memset(feedback_string, 0, BUFFER);
 80005a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005a8:	2100      	movs	r1, #0
 80005aa:	4841      	ldr	r0, [pc, #260]	@ (80006b0 <main+0x270>)
 80005ac:	f000 ff89 	bl	80014c2 <memset>
        send_string("Servo set to ");
 80005b0:	4845      	ldr	r0, [pc, #276]	@ (80006c8 <main+0x288>)
 80005b2:	f000 fb13 	bl	8000bdc <send_string>
        send_string_buffer(triggers.servo_angle);
 80005b6:	4b3f      	ldr	r3, [pc, #252]	@ (80006b4 <main+0x274>)
 80005b8:	691b      	ldr	r3, [r3, #16]
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 fb2e 	bl	8000c1c <send_string_buffer>
        send_string("\r\n");
 80005c0:	483e      	ldr	r0, [pc, #248]	@ (80006bc <main+0x27c>)
 80005c2:	f000 fb0b 	bl	8000bdc <send_string>
        // print_game_triggers(triggers);
        message_complete = 0;
 80005c6:	4b34      	ldr	r3, [pc, #208]	@ (8000698 <main+0x258>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
                 valid_period_check(follow) != 0) {
 80005cc:	e08e      	b.n	80006ec <main+0x2ac>

      } else if (strcmp(command, "trimpot") == 0 &&
 80005ce:	493f      	ldr	r1, [pc, #252]	@ (80006cc <main+0x28c>)
 80005d0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80005d2:	f7ff fe05 	bl	80001e0 <strcmp>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d128      	bne.n	800062e <main+0x1ee>
                 valid_period_check(follow) != 0) {
 80005dc:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80005de:	f000 fc4d 	bl	8000e7c <valid_period_check>
 80005e2:	4603      	mov	r3, r0
      } else if (strcmp(command, "trimpot") == 0 &&
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d022      	beq.n	800062e <main+0x1ee>

        sprintf(feedback_string, "Trimpot Value set to: %s \r\n", follow);
 80005e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80005ea:	4939      	ldr	r1, [pc, #228]	@ (80006d0 <main+0x290>)
 80005ec:	4830      	ldr	r0, [pc, #192]	@ (80006b0 <main+0x270>)
 80005ee:	f000 ff05 	bl	80013fc <siprintf>
        send_string(feedback_string);
 80005f2:	482f      	ldr	r0, [pc, #188]	@ (80006b0 <main+0x270>)
 80005f4:	f000 faf2 	bl	8000bdc <send_string>
        triggers.trimpot_value = atoi(follow);
 80005f8:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80005fa:	f000 fd58 	bl	80010ae <atoi>
 80005fe:	4603      	mov	r3, r0
 8000600:	4a2c      	ldr	r2, [pc, #176]	@ (80006b4 <main+0x274>)
 8000602:	6153      	str	r3, [r2, #20]
        memset(feedback_string, 0, BUFFER);
 8000604:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000608:	2100      	movs	r1, #0
 800060a:	4829      	ldr	r0, [pc, #164]	@ (80006b0 <main+0x270>)
 800060c:	f000 ff59 	bl	80014c2 <memset>
        send_string("Trimpot set to ");
 8000610:	4830      	ldr	r0, [pc, #192]	@ (80006d4 <main+0x294>)
 8000612:	f000 fae3 	bl	8000bdc <send_string>
        send_string_buffer(triggers.trimpot_value);
 8000616:	4b27      	ldr	r3, [pc, #156]	@ (80006b4 <main+0x274>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	4618      	mov	r0, r3
 800061c:	f000 fafe 	bl	8000c1c <send_string_buffer>
        send_string("\r\n");
 8000620:	4826      	ldr	r0, [pc, #152]	@ (80006bc <main+0x27c>)
 8000622:	f000 fadb 	bl	8000bdc <send_string>

        // print_game_triggers(triggers);
        message_complete = 0;
 8000626:	4b1c      	ldr	r3, [pc, #112]	@ (8000698 <main+0x258>)
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
                 valid_period_check(follow) != 0) {
 800062c:	e05e      	b.n	80006ec <main+0x2ac>

      } else if (strcmp(command, "triggers") == 0){
 800062e:	492a      	ldr	r1, [pc, #168]	@ (80006d8 <main+0x298>)
 8000630:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8000632:	f7ff fdd5 	bl	80001e0 <strcmp>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d10e      	bne.n	800065a <main+0x21a>
    	  print_game_triggers(triggers);
 800063c:	4c1d      	ldr	r4, [pc, #116]	@ (80006b4 <main+0x274>)
 800063e:	466d      	mov	r5, sp
 8000640:	f104 0310 	add.w	r3, r4, #16
 8000644:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000646:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800064a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800064e:	f000 fba7 	bl	8000da0 <print_game_triggers>
    	  message_complete = 0;
 8000652:	4b11      	ldr	r3, [pc, #68]	@ (8000698 <main+0x258>)
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	e048      	b.n	80006ec <main+0x2ac>
      } else if (strcmp(command, "game") == 0){
 800065a:	4920      	ldr	r1, [pc, #128]	@ (80006dc <main+0x29c>)
 800065c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800065e:	f7ff fdbf 	bl	80001e0 <strcmp>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d13b      	bne.n	80006e0 <main+0x2a0>
    	  print_game_state(game);
 8000668:	466d      	mov	r5, sp
 800066a:	f107 0410 	add.w	r4, r7, #16
 800066e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000670:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000672:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000674:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000676:	e894 0003 	ldmia.w	r4, {r0, r1}
 800067a:	e885 0003 	stmia.w	r5, {r0, r1}
 800067e:	463b      	mov	r3, r7
 8000680:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000682:	f000 faf3 	bl	8000c6c <print_game_state>
    	  message_complete = 0;
 8000686:	4b04      	ldr	r3, [pc, #16]	@ (8000698 <main+0x258>)
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	e02e      	b.n	80006ec <main+0x2ac>
 800068e:	bf00      	nop
 8000690:	08002634 	.word	0x08002634
 8000694:	08002640 	.word	0x08002640
 8000698:	200000a0 	.word	0x200000a0
 800069c:	08002654 	.word	0x08002654
 80006a0:	200001a8 	.word	0x200001a8
 80006a4:	08002658 	.word	0x08002658
 80006a8:	0800265c 	.word	0x0800265c
 80006ac:	08002668 	.word	0x08002668
 80006b0:	200000a4 	.word	0x200000a4
 80006b4:	20000008 	.word	0x20000008
 80006b8:	08002680 	.word	0x08002680
 80006bc:	08002694 	.word	0x08002694
 80006c0:	08002698 	.word	0x08002698
 80006c4:	080026a0 	.word	0x080026a0
 80006c8:	080026bc 	.word	0x080026bc
 80006cc:	080026cc 	.word	0x080026cc
 80006d0:	080026d4 	.word	0x080026d4
 80006d4:	080026f0 	.word	0x080026f0
 80006d8:	08002700 	.word	0x08002700
 80006dc:	0800270c 	.word	0x0800270c
      } else {
        send_string("Unknown command\r\n");
 80006e0:	4874      	ldr	r0, [pc, #464]	@ (80008b4 <main+0x474>)
 80006e2:	f000 fa7b 	bl	8000bdc <send_string>
        message_complete = 0;
 80006e6:	4b74      	ldr	r3, [pc, #464]	@ (80008b8 <main+0x478>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
      }
      reset_input_buffer();
 80006ec:	f000 f9ce 	bl	8000a8c <reset_input_buffer>
      command = NULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	647b      	str	r3, [r7, #68]	@ 0x44
      follow = NULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	643b      	str	r3, [r7, #64]	@ 0x40
      message_complete = 0;
 80006f8:	4b6f      	ldr	r3, [pc, #444]	@ (80008b8 <main+0x478>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
      memset(feedback_string, 0, BUFFER);
 80006fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000702:	2100      	movs	r1, #0
 8000704:	486d      	ldr	r0, [pc, #436]	@ (80008bc <main+0x47c>)
 8000706:	f000 fedc 	bl	80014c2 <memset>
    }

    // Need an interrupt to change triggers.touchpad_pressed = -1 when touchpad
    // is pressed
    if (triggers.touchpad_pressed != -1) {
 800070a:	4b6d      	ldr	r3, [pc, #436]	@ (80008c0 <main+0x480>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000712:	f000 80c6 	beq.w	80008a2 <main+0x462>
      // send_string("\n\ntouchpad pressed\r\n");
      triggers.servo_controlled = triggers.touchpad_pressed;
 8000716:	4b6a      	ldr	r3, [pc, #424]	@ (80008c0 <main+0x480>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a69      	ldr	r2, [pc, #420]	@ (80008c0 <main+0x480>)
 800071c:	60d3      	str	r3, [r2, #12]
      send_string("\r\n");
      touctriggers.touchpad_pressed = -1;
      */
      // print_game_triggers(triggers);

      if (triggers.servo_controlled != -1) {
 800071e:	4b68      	ldr	r3, [pc, #416]	@ (80008c0 <main+0x480>)
 8000720:	68db      	ldr	r3, [r3, #12]
 8000722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000726:	f000 80bc 	beq.w	80008a2 <main+0x462>
    	  if (triggers.servo_controlled != last_servo_selection) {
 800072a:	4b65      	ldr	r3, [pc, #404]	@ (80008c0 <main+0x480>)
 800072c:	68da      	ldr	r2, [r3, #12]
 800072e:	4b65      	ldr	r3, [pc, #404]	@ (80008c4 <main+0x484>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	429a      	cmp	r2, r3
 8000734:	d022      	beq.n	800077c <main+0x33c>
    	          if(triggers.pending_peek == 1){
 8000736:	4b62      	ldr	r3, [pc, #392]	@ (80008c0 <main+0x480>)
 8000738:	69db      	ldr	r3, [r3, #28]
 800073a:	2b01      	cmp	r3, #1
 800073c:	d117      	bne.n	800076e <main+0x32e>
    	        	game.peeks_used += 1;
 800073e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000740:	3301      	adds	r3, #1
 8000742:	62bb      	str	r3, [r7, #40]	@ 0x28
					send_string("New Peek Used\r\n");
 8000744:	4860      	ldr	r0, [pc, #384]	@ (80008c8 <main+0x488>)
 8000746:	f000 fa49 	bl	8000bdc <send_string>
					print_game_state(game);
 800074a:	466d      	mov	r5, sp
 800074c:	f107 0410 	add.w	r4, r7, #16
 8000750:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000752:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000754:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000756:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000758:	e894 0003 	ldmia.w	r4, {r0, r1}
 800075c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000760:	463b      	mov	r3, r7
 8000762:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000764:	f000 fa82 	bl	8000c6c <print_game_state>
					triggers.pending_peek = 0;
 8000768:	4b55      	ldr	r3, [pc, #340]	@ (80008c0 <main+0x480>)
 800076a:	2200      	movs	r2, #0
 800076c:	61da      	str	r2, [r3, #28]
    	          } // Reset peek
    	          triggers.servo_angle = 0;
 800076e:	4b54      	ldr	r3, [pc, #336]	@ (80008c0 <main+0x480>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
    	          last_servo_selection = triggers.servo_controlled;
 8000774:	4b52      	ldr	r3, [pc, #328]	@ (80008c0 <main+0x480>)
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	4a52      	ldr	r2, [pc, #328]	@ (80008c4 <main+0x484>)
 800077a:	6013      	str	r3, [r2, #0]
    	      }


          if (triggers.servo_angle != last_servo_angle) {
 800077c:	4b50      	ldr	r3, [pc, #320]	@ (80008c0 <main+0x480>)
 800077e:	691a      	ldr	r2, [r3, #16]
 8000780:	4b52      	ldr	r3, [pc, #328]	@ (80008cc <main+0x48c>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	429a      	cmp	r2, r3
 8000786:	f000 808c 	beq.w	80008a2 <main+0x462>

              // Respond to angle
              if (triggers.servo_angle == 0) {
 800078a:	4b4d      	ldr	r3, [pc, #308]	@ (80008c0 <main+0x480>)
 800078c:	691b      	ldr	r3, [r3, #16]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d125      	bne.n	80007de <main+0x39e>
                  send_string("Door Closed\r\n");
 8000792:	484f      	ldr	r0, [pc, #316]	@ (80008d0 <main+0x490>)
 8000794:	f000 fa22 	bl	8000bdc <send_string>


                  if (triggers.pending_peek == 1 && last_servo_selection == triggers.servo_controlled) { // only change peek if dig is not passed
 8000798:	4b49      	ldr	r3, [pc, #292]	@ (80008c0 <main+0x480>)
 800079a:	69db      	ldr	r3, [r3, #28]
 800079c:	2b01      	cmp	r3, #1
 800079e:	d178      	bne.n	8000892 <main+0x452>
 80007a0:	4b47      	ldr	r3, [pc, #284]	@ (80008c0 <main+0x480>)
 80007a2:	68da      	ldr	r2, [r3, #12]
 80007a4:	4b47      	ldr	r3, [pc, #284]	@ (80008c4 <main+0x484>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d172      	bne.n	8000892 <main+0x452>
                      game.peeks_used += 1;
 80007ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007ae:	3301      	adds	r3, #1
 80007b0:	62bb      	str	r3, [r7, #40]	@ 0x28
                      send_string("New Peek Used\r\n");
 80007b2:	4845      	ldr	r0, [pc, #276]	@ (80008c8 <main+0x488>)
 80007b4:	f000 fa12 	bl	8000bdc <send_string>
                      print_game_state(game);
 80007b8:	466d      	mov	r5, sp
 80007ba:	f107 0410 	add.w	r4, r7, #16
 80007be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80007ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80007ce:	463b      	mov	r3, r7
 80007d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007d2:	f000 fa4b 	bl	8000c6c <print_game_state>
                      triggers.pending_peek = 0; // Reset peek
 80007d6:	4b3a      	ldr	r3, [pc, #232]	@ (80008c0 <main+0x480>)
 80007d8:	2200      	movs	r2, #0
 80007da:	61da      	str	r2, [r3, #28]
 80007dc:	e059      	b.n	8000892 <main+0x452>
                  }
              } else if (triggers.servo_angle > 0 && triggers.servo_angle < triggers.peek_threshold) {
 80007de:	4b38      	ldr	r3, [pc, #224]	@ (80008c0 <main+0x480>)
 80007e0:	691b      	ldr	r3, [r3, #16]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	dd16      	ble.n	8000814 <main+0x3d4>
 80007e6:	4b36      	ldr	r3, [pc, #216]	@ (80008c0 <main+0x480>)
 80007e8:	691a      	ldr	r2, [r3, #16]
 80007ea:	4b35      	ldr	r3, [pc, #212]	@ (80008c0 <main+0x480>)
 80007ec:	699b      	ldr	r3, [r3, #24]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	da10      	bge.n	8000814 <main+0x3d4>
                  send_string("Below Dig Threshold. But above 0. Peek in Progress.\r\n");
 80007f2:	4838      	ldr	r0, [pc, #224]	@ (80008d4 <main+0x494>)
 80007f4:	f000 f9f2 	bl	8000bdc <send_string>

                  // Only increment peek count if coming *from* a closed or dig state
                  if (last_servo_angle == 0 && last_servo_selection == triggers.servo_controlled) {
 80007f8:	4b34      	ldr	r3, [pc, #208]	@ (80008cc <main+0x48c>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d147      	bne.n	8000890 <main+0x450>
 8000800:	4b2f      	ldr	r3, [pc, #188]	@ (80008c0 <main+0x480>)
 8000802:	68da      	ldr	r2, [r3, #12]
 8000804:	4b2f      	ldr	r3, [pc, #188]	@ (80008c4 <main+0x484>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	429a      	cmp	r2, r3
 800080a:	d141      	bne.n	8000890 <main+0x450>
                	  //game.peeks_used += 1;
                      //send_string("New Peek Used\r\n");
                	  //print_game_state(game);
                	  triggers.pending_peek = 1;
 800080c:	4b2c      	ldr	r3, [pc, #176]	@ (80008c0 <main+0x480>)
 800080e:	2201      	movs	r2, #1
 8000810:	61da      	str	r2, [r3, #28]
                  if (last_servo_angle == 0 && last_servo_selection == triggers.servo_controlled) {
 8000812:	e03d      	b.n	8000890 <main+0x450>
                  }

              } else if (triggers.servo_angle >= triggers.peek_threshold) {
 8000814:	4b2a      	ldr	r3, [pc, #168]	@ (80008c0 <main+0x480>)
 8000816:	691a      	ldr	r2, [r3, #16]
 8000818:	4b29      	ldr	r3, [pc, #164]	@ (80008c0 <main+0x480>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	429a      	cmp	r2, r3
 800081e:	db38      	blt.n	8000892 <main+0x452>
                  send_string("Dig Threshold Passed.\r\n");
 8000820:	482d      	ldr	r0, [pc, #180]	@ (80008d8 <main+0x498>)
 8000822:	f000 f9db 	bl	8000bdc <send_string>


                  // Only increment dig count if last angle was not already a dig
                  if (last_servo_angle < triggers.peek_threshold && last_servo_selection == triggers.servo_controlled) {
 8000826:	4b26      	ldr	r3, [pc, #152]	@ (80008c0 <main+0x480>)
 8000828:	699a      	ldr	r2, [r3, #24]
 800082a:	4b28      	ldr	r3, [pc, #160]	@ (80008cc <main+0x48c>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	429a      	cmp	r2, r3
 8000830:	dd2a      	ble.n	8000888 <main+0x448>
 8000832:	4b23      	ldr	r3, [pc, #140]	@ (80008c0 <main+0x480>)
 8000834:	68da      	ldr	r2, [r3, #12]
 8000836:	4b23      	ldr	r3, [pc, #140]	@ (80008c4 <main+0x484>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	429a      	cmp	r2, r3
 800083c:	d124      	bne.n	8000888 <main+0x448>
                      game.digs_taken += 1;
 800083e:	6a3b      	ldr	r3, [r7, #32]
 8000840:	3301      	adds	r3, #1
 8000842:	623b      	str	r3, [r7, #32]
                      if (check_servo_choice(game.correct_servos, triggers.servo_controlled, game.total_items_to_find) == 1) {
 8000844:	4b1e      	ldr	r3, [pc, #120]	@ (80008c0 <main+0x480>)
 8000846:	68d9      	ldr	r1, [r3, #12]
 8000848:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800084a:	463b      	mov	r3, r7
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff fd27 	bl	80002a0 <check_servo_choice>
 8000852:	4603      	mov	r3, r0
 8000854:	2b01      	cmp	r3, #1
 8000856:	d105      	bne.n	8000864 <main+0x424>
                              game.items_found++;
 8000858:	69bb      	ldr	r3, [r7, #24]
 800085a:	3301      	adds	r3, #1
 800085c:	61bb      	str	r3, [r7, #24]
                              game.items_left_to_find--;
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	3b01      	subs	r3, #1
 8000862:	61fb      	str	r3, [r7, #28]
                          }
                      send_string("New Dig Used\r\n");
 8000864:	481d      	ldr	r0, [pc, #116]	@ (80008dc <main+0x49c>)
 8000866:	f000 f9b9 	bl	8000bdc <send_string>
                      print_game_state(game);
 800086a:	466d      	mov	r5, sp
 800086c:	f107 0410 	add.w	r4, r7, #16
 8000870:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000872:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000874:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000876:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000878:	e894 0003 	ldmia.w	r4, {r0, r1}
 800087c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000880:	463b      	mov	r3, r7
 8000882:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000884:	f000 f9f2 	bl	8000c6c <print_game_state>

                  }
                  triggers.pending_peek = 0;
 8000888:	4b0d      	ldr	r3, [pc, #52]	@ (80008c0 <main+0x480>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
 800088e:	e000      	b.n	8000892 <main+0x452>
                  if (last_servo_angle == 0 && last_servo_selection == triggers.servo_controlled) {
 8000890:	bf00      	nop
              }

              // Update the last angle
              last_servo_angle = triggers.servo_angle;
 8000892:	4b0b      	ldr	r3, [pc, #44]	@ (80008c0 <main+0x480>)
 8000894:	691b      	ldr	r3, [r3, #16]
 8000896:	4a0d      	ldr	r2, [pc, #52]	@ (80008cc <main+0x48c>)
 8000898:	6013      	str	r3, [r2, #0]
              last_servo_selection =triggers.servo_controlled;
 800089a:	4b09      	ldr	r3, [pc, #36]	@ (80008c0 <main+0x480>)
 800089c:	68db      	ldr	r3, [r3, #12]
 800089e:	4a09      	ldr	r2, [pc, #36]	@ (80008c4 <main+0x484>)
 80008a0:	6013      	str	r3, [r2, #0]
  while (game.game_over == 0) {
 80008a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	f43f ae11 	beq.w	80004cc <main+0x8c>
          }
      }
    }
}
  return 0;
 80008aa:	2300      	movs	r3, #0
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3748      	adds	r7, #72	@ 0x48
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bdb0      	pop	{r4, r5, r7, pc}
 80008b4:	08002714 	.word	0x08002714
 80008b8:	200000a0 	.word	0x200000a0
 80008bc:	200000a4 	.word	0x200000a4
 80008c0:	20000008 	.word	0x20000008
 80008c4:	20000004 	.word	0x20000004
 80008c8:	08002728 	.word	0x08002728
 80008cc:	20000000 	.word	0x20000000
 80008d0:	08002738 	.word	0x08002738
 80008d4:	08002748 	.word	0x08002748
 80008d8:	08002780 	.word	0x08002780
 80008dc:	08002798 	.word	0x08002798

080008e0 <EXTI1_IRQHandler>:

// Each EXTI handler calls this with the corresponding pin nu
// Interrupt handlers
void EXTI1_IRQHandler(void) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
    if (EXTI->PR & EXTI_PR_PR1) {
 80008e4:	4b08      	ldr	r3, [pc, #32]	@ (8000908 <EXTI1_IRQHandler+0x28>)
 80008e6:	695b      	ldr	r3, [r3, #20]
 80008e8:	f003 0302 	and.w	r3, r3, #2
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d009      	beq.n	8000904 <EXTI1_IRQHandler+0x24>
        EXTI->PR |= EXTI_PR_PR1;
 80008f0:	4b05      	ldr	r3, [pc, #20]	@ (8000908 <EXTI1_IRQHandler+0x28>)
 80008f2:	695b      	ldr	r3, [r3, #20]
 80008f4:	4a04      	ldr	r2, [pc, #16]	@ (8000908 <EXTI1_IRQHandler+0x28>)
 80008f6:	f043 0302 	orr.w	r3, r3, #2
 80008fa:	6153      	str	r3, [r2, #20]
        handle_touch(1, &triggers);
 80008fc:	4903      	ldr	r1, [pc, #12]	@ (800090c <EXTI1_IRQHandler+0x2c>)
 80008fe:	2001      	movs	r0, #1
 8000900:	f7ff fd8c 	bl	800041c <handle_touch>
    }
}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40010400 	.word	0x40010400
 800090c:	20000008 	.word	0x20000008

08000910 <EXTI2_TSC_IRQHandler>:
void EXTI2_TSC_IRQHandler(void) {
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
    if (EXTI->PR & EXTI_PR_PR2) {
 8000914:	4b08      	ldr	r3, [pc, #32]	@ (8000938 <EXTI2_TSC_IRQHandler+0x28>)
 8000916:	695b      	ldr	r3, [r3, #20]
 8000918:	f003 0304 	and.w	r3, r3, #4
 800091c:	2b00      	cmp	r3, #0
 800091e:	d009      	beq.n	8000934 <EXTI2_TSC_IRQHandler+0x24>
        EXTI->PR |= EXTI_PR_PR2;
 8000920:	4b05      	ldr	r3, [pc, #20]	@ (8000938 <EXTI2_TSC_IRQHandler+0x28>)
 8000922:	695b      	ldr	r3, [r3, #20]
 8000924:	4a04      	ldr	r2, [pc, #16]	@ (8000938 <EXTI2_TSC_IRQHandler+0x28>)
 8000926:	f043 0304 	orr.w	r3, r3, #4
 800092a:	6153      	str	r3, [r2, #20]
        handle_touch(2, &triggers);
 800092c:	4903      	ldr	r1, [pc, #12]	@ (800093c <EXTI2_TSC_IRQHandler+0x2c>)
 800092e:	2002      	movs	r0, #2
 8000930:	f7ff fd74 	bl	800041c <handle_touch>
    }
}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40010400 	.word	0x40010400
 800093c:	20000008 	.word	0x20000008

08000940 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void) {
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
    if (EXTI->PR & EXTI_PR_PR3) {
 8000944:	4b08      	ldr	r3, [pc, #32]	@ (8000968 <EXTI3_IRQHandler+0x28>)
 8000946:	695b      	ldr	r3, [r3, #20]
 8000948:	f003 0308 	and.w	r3, r3, #8
 800094c:	2b00      	cmp	r3, #0
 800094e:	d009      	beq.n	8000964 <EXTI3_IRQHandler+0x24>
        EXTI->PR |= EXTI_PR_PR3;
 8000950:	4b05      	ldr	r3, [pc, #20]	@ (8000968 <EXTI3_IRQHandler+0x28>)
 8000952:	695b      	ldr	r3, [r3, #20]
 8000954:	4a04      	ldr	r2, [pc, #16]	@ (8000968 <EXTI3_IRQHandler+0x28>)
 8000956:	f043 0308 	orr.w	r3, r3, #8
 800095a:	6153      	str	r3, [r2, #20]
        handle_touch(3, &triggers);
 800095c:	4903      	ldr	r1, [pc, #12]	@ (800096c <EXTI3_IRQHandler+0x2c>)
 800095e:	2003      	movs	r0, #3
 8000960:	f7ff fd5c 	bl	800041c <handle_touch>
    }
}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40010400 	.word	0x40010400
 800096c:	20000008 	.word	0x20000008

08000970 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void) {
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
    if (EXTI->PR & EXTI_PR_PR4) {
 8000974:	4b08      	ldr	r3, [pc, #32]	@ (8000998 <EXTI4_IRQHandler+0x28>)
 8000976:	695b      	ldr	r3, [r3, #20]
 8000978:	f003 0310 	and.w	r3, r3, #16
 800097c:	2b00      	cmp	r3, #0
 800097e:	d009      	beq.n	8000994 <EXTI4_IRQHandler+0x24>
        EXTI->PR |= EXTI_PR_PR4;
 8000980:	4b05      	ldr	r3, [pc, #20]	@ (8000998 <EXTI4_IRQHandler+0x28>)
 8000982:	695b      	ldr	r3, [r3, #20]
 8000984:	4a04      	ldr	r2, [pc, #16]	@ (8000998 <EXTI4_IRQHandler+0x28>)
 8000986:	f043 0310 	orr.w	r3, r3, #16
 800098a:	6153      	str	r3, [r2, #20]
        handle_touch(4, &triggers);
 800098c:	4903      	ldr	r1, [pc, #12]	@ (800099c <EXTI4_IRQHandler+0x2c>)
 800098e:	2004      	movs	r0, #4
 8000990:	f7ff fd44 	bl	800041c <handle_touch>
    }
}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40010400 	.word	0x40010400
 800099c:	20000008 	.word	0x20000008

080009a0 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
    for (int i = 5; i <= 6; i++) {
 80009a6:	2305      	movs	r3, #5
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	e01b      	b.n	80009e4 <EXTI9_5_IRQHandler+0x44>
        if (EXTI->PR & (1 << i)) {
 80009ac:	4b11      	ldr	r3, [pc, #68]	@ (80009f4 <EXTI9_5_IRQHandler+0x54>)
 80009ae:	695b      	ldr	r3, [r3, #20]
 80009b0:	2101      	movs	r1, #1
 80009b2:	687a      	ldr	r2, [r7, #4]
 80009b4:	fa01 f202 	lsl.w	r2, r1, r2
 80009b8:	4013      	ands	r3, r2
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d00f      	beq.n	80009de <EXTI9_5_IRQHandler+0x3e>
            EXTI->PR |= (1 << i);
 80009be:	4b0d      	ldr	r3, [pc, #52]	@ (80009f4 <EXTI9_5_IRQHandler+0x54>)
 80009c0:	695b      	ldr	r3, [r3, #20]
 80009c2:	2101      	movs	r1, #1
 80009c4:	687a      	ldr	r2, [r7, #4]
 80009c6:	fa01 f202 	lsl.w	r2, r1, r2
 80009ca:	4611      	mov	r1, r2
 80009cc:	4a09      	ldr	r2, [pc, #36]	@ (80009f4 <EXTI9_5_IRQHandler+0x54>)
 80009ce:	430b      	orrs	r3, r1
 80009d0:	6153      	str	r3, [r2, #20]
            handle_touch(i, &triggers);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	4908      	ldr	r1, [pc, #32]	@ (80009f8 <EXTI9_5_IRQHandler+0x58>)
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff fd1f 	bl	800041c <handle_touch>
    for (int i = 5; i <= 6; i++) {
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	3301      	adds	r3, #1
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2b06      	cmp	r3, #6
 80009e8:	dde0      	ble.n	80009ac <EXTI9_5_IRQHandler+0xc>
        }
    }
}
 80009ea:	bf00      	nop
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40010400 	.word	0x40010400
 80009f8:	20000008 	.word	0x20000008

080009fc <__NVIC_EnableIRQ>:
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	db0b      	blt.n	8000a26 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	f003 021f 	and.w	r2, r3, #31
 8000a14:	4907      	ldr	r1, [pc, #28]	@ (8000a34 <__NVIC_EnableIRQ+0x38>)
 8000a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1a:	095b      	lsrs	r3, r3, #5
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000e100 	.word	0xe000e100

08000a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	6039      	str	r1, [r7, #0]
 8000a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	db0a      	blt.n	8000a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	490c      	ldr	r1, [pc, #48]	@ (8000a84 <__NVIC_SetPriority+0x4c>)
 8000a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a56:	0112      	lsls	r2, r2, #4
 8000a58:	b2d2      	uxtb	r2, r2
 8000a5a:	440b      	add	r3, r1
 8000a5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a60:	e00a      	b.n	8000a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4908      	ldr	r1, [pc, #32]	@ (8000a88 <__NVIC_SetPriority+0x50>)
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	f003 030f 	and.w	r3, r3, #15
 8000a6e:	3b04      	subs	r3, #4
 8000a70:	0112      	lsls	r2, r2, #4
 8000a72:	b2d2      	uxtb	r2, r2
 8000a74:	440b      	add	r3, r1
 8000a76:	761a      	strb	r2, [r3, #24]
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	e000e100 	.word	0xe000e100
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <reset_input_buffer>:

int i;
unsigned char string[BUFFER];
extern int message_complete;

void reset_input_buffer() {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
    memset(string, 0, BUFFER);
 8000a90:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a94:	2100      	movs	r1, #0
 8000a96:	4804      	ldr	r0, [pc, #16]	@ (8000aa8 <reset_input_buffer+0x1c>)
 8000a98:	f000 fd13 	bl	80014c2 <memset>
    i = 0;
 8000a9c:	4b03      	ldr	r3, [pc, #12]	@ (8000aac <reset_input_buffer+0x20>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200001a8 	.word	0x200001a8
 8000aac:	200001a4 	.word	0x200001a4

08000ab0 <enableUSART1>:

void enableUSART1()
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
	// Enable GPIO C and USART1's clocks
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN_Msk;
 8000ab4:	4b18      	ldr	r3, [pc, #96]	@ (8000b18 <enableUSART1+0x68>)
 8000ab6:	695b      	ldr	r3, [r3, #20]
 8000ab8:	4a17      	ldr	r2, [pc, #92]	@ (8000b18 <enableUSART1+0x68>)
 8000aba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000abe:	6153      	str	r3, [r2, #20]
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN_Msk;
 8000ac0:	4b15      	ldr	r3, [pc, #84]	@ (8000b18 <enableUSART1+0x68>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	4a14      	ldr	r2, [pc, #80]	@ (8000b18 <enableUSART1+0x68>)
 8000ac6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aca:	6193      	str	r3, [r2, #24]

	// Set GPIO C to use UART as alternate function
	GPIOC->MODER = ALTFUNCTION;
 8000acc:	4b13      	ldr	r3, [pc, #76]	@ (8000b1c <enableUSART1+0x6c>)
 8000ace:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8000ad2:	601a      	str	r2, [r3, #0]
	GPIOC->AFR[0] = RXTX;
 8000ad4:	4b11      	ldr	r3, [pc, #68]	@ (8000b1c <enableUSART1+0x6c>)
 8000ad6:	f44f 02ee 	mov.w	r2, #7798784	@ 0x770000
 8000ada:	621a      	str	r2, [r3, #32]
	GPIOC->OSPEEDR = HIGHSPEED;
 8000adc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b1c <enableUSART1+0x6c>)
 8000ade:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8000ae2:	609a      	str	r2, [r3, #8]

	// Set the baud rate and ready USART 1 for both receive and transmit
	USART1->BRR = BAUDRATE;                   // Baud rate = 115200
 8000ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b20 <enableUSART1+0x70>)
 8000ae6:	2246      	movs	r2, #70	@ 0x46
 8000ae8:	60da      	str	r2, [r3, #12]
	USART1->CR1 |= USART_CR1_RE_Msk;
 8000aea:	4b0d      	ldr	r3, [pc, #52]	@ (8000b20 <enableUSART1+0x70>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a0c      	ldr	r2, [pc, #48]	@ (8000b20 <enableUSART1+0x70>)
 8000af0:	f043 0304 	orr.w	r3, r3, #4
 8000af4:	6013      	str	r3, [r2, #0]
	USART1->CR1 |= USART_CR1_TE_Msk;
 8000af6:	4b0a      	ldr	r3, [pc, #40]	@ (8000b20 <enableUSART1+0x70>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a09      	ldr	r2, [pc, #36]	@ (8000b20 <enableUSART1+0x70>)
 8000afc:	f043 0308 	orr.w	r3, r3, #8
 8000b00:	6013      	str	r3, [r2, #0]
	USART1->CR1 |= USART_CR1_UE_Msk;
 8000b02:	4b07      	ldr	r3, [pc, #28]	@ (8000b20 <enableUSART1+0x70>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a06      	ldr	r2, [pc, #24]	@ (8000b20 <enableUSART1+0x70>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6013      	str	r3, [r2, #0]
}
 8000b0e:	bf00      	nop
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	48000800 	.word	0x48000800
 8000b20:	40013800 	.word	0x40013800

08000b24 <enableUARTInterrupts>:
	// Set the mode of the port pins to output since they are LEDs
	*portMode = LED_OUTPUT;
}

void enableUARTInterrupts()
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b28:	b672      	cpsid	i
}
 8000b2a:	bf00      	nop
	__disable_irq();

	// Generate an interrupt upon receiving data
	USART1->CR1 |= USART_CR1_RXNEIE_Msk;
 8000b2c:	4b08      	ldr	r3, [pc, #32]	@ (8000b50 <enableUARTInterrupts+0x2c>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a07      	ldr	r2, [pc, #28]	@ (8000b50 <enableUARTInterrupts+0x2c>)
 8000b32:	f043 0320 	orr.w	r3, r3, #32
 8000b36:	6013      	str	r3, [r2, #0]

	// Set priority and enable interrupts
	NVIC_SetPriority(USART1_IRQn, 1);
 8000b38:	2101      	movs	r1, #1
 8000b3a:	2025      	movs	r0, #37	@ 0x25
 8000b3c:	f7ff ff7c 	bl	8000a38 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn);
 8000b40:	2025      	movs	r0, #37	@ 0x25
 8000b42:	f7ff ff5b 	bl	80009fc <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b46:	b662      	cpsie	i
}
 8000b48:	bf00      	nop

	__enable_irq();
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40013800 	.word	0x40013800

08000b54 <USART1_EXTI25_IRQHandler>:

void USART1_EXTI25_IRQHandler()
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
	// Check for overrun or frame errors
	if ((USART1->ISR & USART_ISR_FE_Msk) && (USART1->ISR & USART_ISR_ORE_Msk))
 8000b5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bcc <USART1_EXTI25_IRQHandler+0x78>)
 8000b5c:	69db      	ldr	r3, [r3, #28]
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d005      	beq.n	8000b72 <USART1_EXTI25_IRQHandler+0x1e>
 8000b66:	4b19      	ldr	r3, [pc, #100]	@ (8000bcc <USART1_EXTI25_IRQHandler+0x78>)
 8000b68:	69db      	ldr	r3, [r3, #28]
 8000b6a:	f003 0308 	and.w	r3, r3, #8
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d124      	bne.n	8000bbc <USART1_EXTI25_IRQHandler+0x68>
	{
		return;
	}

	// If we have stored the maximum amount, stop
	if (i == BUFFER)
 8000b72:	4b17      	ldr	r3, [pc, #92]	@ (8000bd0 <USART1_EXTI25_IRQHandler+0x7c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000b7a:	d021      	beq.n	8000bc0 <USART1_EXTI25_IRQHandler+0x6c>
	{
		return;
	}

	if (USART1->ISR & USART_ISR_RXNE_Msk)
 8000b7c:	4b13      	ldr	r3, [pc, #76]	@ (8000bcc <USART1_EXTI25_IRQHandler+0x78>)
 8000b7e:	69db      	ldr	r3, [r3, #28]
 8000b80:	f003 0320 	and.w	r3, r3, #32
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d01c      	beq.n	8000bc2 <USART1_EXTI25_IRQHandler+0x6e>
	{
		// Read data
		unsigned char data = (uint8_t) USART1->RDR;
 8000b88:	4b10      	ldr	r3, [pc, #64]	@ (8000bcc <USART1_EXTI25_IRQHandler+0x78>)
 8000b8a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	71fb      	strb	r3, [r7, #7]
		USART1->TDR = data;  // Echo back
 8000b90:	4b0e      	ldr	r3, [pc, #56]	@ (8000bcc <USART1_EXTI25_IRQHandler+0x78>)
 8000b92:	79fa      	ldrb	r2, [r7, #7]
 8000b94:	b292      	uxth	r2, r2
 8000b96:	851a      	strh	r2, [r3, #40]	@ 0x28

		if (data != '\r')
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	2b0d      	cmp	r3, #13
 8000b9c:	d00a      	beq.n	8000bb4 <USART1_EXTI25_IRQHandler+0x60>
		{
		// Store the read data
		string[i] = data;
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd0 <USART1_EXTI25_IRQHandler+0x7c>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	490c      	ldr	r1, [pc, #48]	@ (8000bd4 <USART1_EXTI25_IRQHandler+0x80>)
 8000ba4:	79fa      	ldrb	r2, [r7, #7]
 8000ba6:	54ca      	strb	r2, [r1, r3]
		i++;
 8000ba8:	4b09      	ldr	r3, [pc, #36]	@ (8000bd0 <USART1_EXTI25_IRQHandler+0x7c>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	3301      	adds	r3, #1
 8000bae:	4a08      	ldr	r2, [pc, #32]	@ (8000bd0 <USART1_EXTI25_IRQHandler+0x7c>)
 8000bb0:	6013      	str	r3, [r2, #0]
 8000bb2:	e006      	b.n	8000bc2 <USART1_EXTI25_IRQHandler+0x6e>
		//USART1->TDR = '\n';


		} else {
		message_complete = 1;
 8000bb4:	4b08      	ldr	r3, [pc, #32]	@ (8000bd8 <USART1_EXTI25_IRQHandler+0x84>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	e002      	b.n	8000bc2 <USART1_EXTI25_IRQHandler+0x6e>
		return;
 8000bbc:	bf00      	nop
 8000bbe:	e000      	b.n	8000bc2 <USART1_EXTI25_IRQHandler+0x6e>
		return;
 8000bc0:	bf00      	nop

		}
	}
}
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	40013800 	.word	0x40013800
 8000bd0:	200001a4 	.word	0x200001a4
 8000bd4:	200001a8 	.word	0x200001a8
 8000bd8:	200000a0 	.word	0x200000a0

08000bdc <send_string>:


void send_string(const char *msg) {
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
    while (*msg) {
 8000be4:	e00c      	b.n	8000c00 <send_string+0x24>
        while (!(USART1->ISR & USART_ISR_TXE_Msk));
 8000be6:	bf00      	nop
 8000be8:	4b0b      	ldr	r3, [pc, #44]	@ (8000c18 <send_string+0x3c>)
 8000bea:	69db      	ldr	r3, [r3, #28]
 8000bec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d0f9      	beq.n	8000be8 <send_string+0xc>
        USART1->TDR = *msg++;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	1c5a      	adds	r2, r3, #1
 8000bf8:	607a      	str	r2, [r7, #4]
 8000bfa:	781a      	ldrb	r2, [r3, #0]
 8000bfc:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <send_string+0x3c>)
 8000bfe:	851a      	strh	r2, [r3, #40]	@ 0x28
    while (*msg) {
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d1ee      	bne.n	8000be6 <send_string+0xa>
    }
}
 8000c08:	bf00      	nop
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	40013800 	.word	0x40013800

08000c1c <send_string_buffer>:

void send_string_buffer(int struct_data) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	char buffer[12];
	itoa(struct_data, buffer, 10);
 8000c24:	f107 0308 	add.w	r3, r7, #8
 8000c28:	220a      	movs	r2, #10
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f000 fa5a 	bl	80010e6 <itoa>
	char *msg = buffer; // Create a pointer to walk through the buffer
 8000c32:	f107 0308 	add.w	r3, r7, #8
 8000c36:	617b      	str	r3, [r7, #20]
	while (*msg) {
 8000c38:	e00c      	b.n	8000c54 <send_string_buffer+0x38>
        while (!(USART1->ISR & USART_ISR_TXE_Msk));
 8000c3a:	bf00      	nop
 8000c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c68 <send_string_buffer+0x4c>)
 8000c3e:	69db      	ldr	r3, [r3, #28]
 8000c40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d0f9      	beq.n	8000c3c <send_string_buffer+0x20>
        USART1->TDR = *msg++;
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	1c5a      	adds	r2, r3, #1
 8000c4c:	617a      	str	r2, [r7, #20]
 8000c4e:	781a      	ldrb	r2, [r3, #0]
 8000c50:	4b05      	ldr	r3, [pc, #20]	@ (8000c68 <send_string_buffer+0x4c>)
 8000c52:	851a      	strh	r2, [r3, #40]	@ 0x28
	while (*msg) {
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d1ee      	bne.n	8000c3a <send_string_buffer+0x1e>
    }
}
 8000c5c:	bf00      	nop
 8000c5e:	bf00      	nop
 8000c60:	3718      	adds	r7, #24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40013800 	.word	0x40013800

08000c6c <print_game_state>:

void print_game_state(GameState game) {
 8000c6c:	b084      	sub	sp, #16
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	f107 0c10 	add.w	ip, r7, #16
 8000c78:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	send_string("correct_servos: ");
 8000c7c:	483b      	ldr	r0, [pc, #236]	@ (8000d6c <print_game_state+0x100>)
 8000c7e:	f7ff ffad 	bl	8000bdc <send_string>
	for(int i = 0; i < game.total_items_to_find; i++){
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	e00d      	b.n	8000ca4 <print_game_state+0x38>
		send_string(" ");
 8000c88:	4839      	ldr	r0, [pc, #228]	@ (8000d70 <print_game_state+0x104>)
 8000c8a:	f7ff ffa7 	bl	8000bdc <send_string>
		send_string_buffer(game.correct_servos[i]);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	f107 0210 	add.w	r2, r7, #16
 8000c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ffbf 	bl	8000c1c <send_string_buffer>
	for(int i = 0; i < game.total_items_to_find; i++){
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	dbed      	blt.n	8000c88 <print_game_state+0x1c>
	}
	send_string("\r\n");
 8000cac:	4831      	ldr	r0, [pc, #196]	@ (8000d74 <print_game_state+0x108>)
 8000cae:	f7ff ff95 	bl	8000bdc <send_string>

	send_string("items_found: ");
 8000cb2:	4831      	ldr	r0, [pc, #196]	@ (8000d78 <print_game_state+0x10c>)
 8000cb4:	f7ff ff92 	bl	8000bdc <send_string>
    send_string_buffer(game.items_found);
 8000cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff ffae 	bl	8000c1c <send_string_buffer>
    send_string("\r\n");
 8000cc0:	482c      	ldr	r0, [pc, #176]	@ (8000d74 <print_game_state+0x108>)
 8000cc2:	f7ff ff8b 	bl	8000bdc <send_string>


    send_string("items_left_to_find: ");
 8000cc6:	482d      	ldr	r0, [pc, #180]	@ (8000d7c <print_game_state+0x110>)
 8000cc8:	f7ff ff88 	bl	8000bdc <send_string>
    send_string_buffer(game.items_left_to_find);
 8000ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff ffa4 	bl	8000c1c <send_string_buffer>
    send_string("\r\n");
 8000cd4:	4827      	ldr	r0, [pc, #156]	@ (8000d74 <print_game_state+0x108>)
 8000cd6:	f7ff ff81 	bl	8000bdc <send_string>

    send_string("digs_taken: ");
 8000cda:	4829      	ldr	r0, [pc, #164]	@ (8000d80 <print_game_state+0x114>)
 8000cdc:	f7ff ff7e 	bl	8000bdc <send_string>
    send_string_buffer(game.digs_taken);
 8000ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff ff9a 	bl	8000c1c <send_string_buffer>
    send_string("\r\n");
 8000ce8:	4822      	ldr	r0, [pc, #136]	@ (8000d74 <print_game_state+0x108>)
 8000cea:	f7ff ff77 	bl	8000bdc <send_string>

    send_string("digs_remaining: ");
 8000cee:	4825      	ldr	r0, [pc, #148]	@ (8000d84 <print_game_state+0x118>)
 8000cf0:	f7ff ff74 	bl	8000bdc <send_string>
    send_string_buffer(game.digs_remaining);
 8000cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff ff90 	bl	8000c1c <send_string_buffer>
    send_string("\r\n");
 8000cfc:	481d      	ldr	r0, [pc, #116]	@ (8000d74 <print_game_state+0x108>)
 8000cfe:	f7ff ff6d 	bl	8000bdc <send_string>

    send_string("peeks_used: ");
 8000d02:	4821      	ldr	r0, [pc, #132]	@ (8000d88 <print_game_state+0x11c>)
 8000d04:	f7ff ff6a 	bl	8000bdc <send_string>
    send_string_buffer(game.peeks_used);
 8000d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff ff86 	bl	8000c1c <send_string_buffer>
    send_string("\r\n");
 8000d10:	4818      	ldr	r0, [pc, #96]	@ (8000d74 <print_game_state+0x108>)
 8000d12:	f7ff ff63 	bl	8000bdc <send_string>

    send_string("total_items_to_find: ");
 8000d16:	481d      	ldr	r0, [pc, #116]	@ (8000d8c <print_game_state+0x120>)
 8000d18:	f7ff ff60 	bl	8000bdc <send_string>
    send_string_buffer(game.total_items_to_find);
 8000d1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff ff7c 	bl	8000c1c <send_string_buffer>
    send_string("\r\n");
 8000d24:	4813      	ldr	r0, [pc, #76]	@ (8000d74 <print_game_state+0x108>)
 8000d26:	f7ff ff59 	bl	8000bdc <send_string>

    send_string("game_time_remaining: ");
 8000d2a:	4819      	ldr	r0, [pc, #100]	@ (8000d90 <print_game_state+0x124>)
 8000d2c:	f7ff ff56 	bl	8000bdc <send_string>
    send_string_buffer(game.game_time_remaining);
 8000d30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff ff72 	bl	8000c1c <send_string_buffer>
    send_string("\r\n");
 8000d38:	480e      	ldr	r0, [pc, #56]	@ (8000d74 <print_game_state+0x108>)
 8000d3a:	f7ff ff4f 	bl	8000bdc <send_string>

    send_string("game_over: ");
 8000d3e:	4815      	ldr	r0, [pc, #84]	@ (8000d94 <print_game_state+0x128>)
 8000d40:	f7ff ff4c 	bl	8000bdc <send_string>
    send_string(game.game_over ? "true\n" : "false\n");
 8000d44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <print_game_state+0xe2>
 8000d4a:	4b13      	ldr	r3, [pc, #76]	@ (8000d98 <print_game_state+0x12c>)
 8000d4c:	e000      	b.n	8000d50 <print_game_state+0xe4>
 8000d4e:	4b13      	ldr	r3, [pc, #76]	@ (8000d9c <print_game_state+0x130>)
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ff43 	bl	8000bdc <send_string>
    send_string("\r\n");
 8000d56:	4807      	ldr	r0, [pc, #28]	@ (8000d74 <print_game_state+0x108>)
 8000d58:	f7ff ff40 	bl	8000bdc <send_string>
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d66:	b004      	add	sp, #16
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	080027a8 	.word	0x080027a8
 8000d70:	080027bc 	.word	0x080027bc
 8000d74:	080027c0 	.word	0x080027c0
 8000d78:	080027c4 	.word	0x080027c4
 8000d7c:	080027d4 	.word	0x080027d4
 8000d80:	080027ec 	.word	0x080027ec
 8000d84:	080027fc 	.word	0x080027fc
 8000d88:	08002810 	.word	0x08002810
 8000d8c:	08002820 	.word	0x08002820
 8000d90:	08002838 	.word	0x08002838
 8000d94:	08002850 	.word	0x08002850
 8000d98:	0800285c 	.word	0x0800285c
 8000d9c:	08002864 	.word	0x08002864

08000da0 <print_game_triggers>:

void print_game_triggers(GameTriggers triggers) {
 8000da0:	b084      	sub	sp, #16
 8000da2:	b580      	push	{r7, lr}
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	f107 0c08 	add.w	ip, r7, #8
 8000daa:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    send_string("touchpad_pressed: ");
 8000dae:	4826      	ldr	r0, [pc, #152]	@ (8000e48 <print_game_triggers+0xa8>)
 8000db0:	f7ff ff14 	bl	8000bdc <send_string>
    send_string_buffer(triggers.touchpad_pressed);
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff ff30 	bl	8000c1c <send_string_buffer>
    send_string("\r\n");
 8000dbc:	4823      	ldr	r0, [pc, #140]	@ (8000e4c <print_game_triggers+0xac>)
 8000dbe:	f7ff ff0d 	bl	8000bdc <send_string>


    send_string("magnet1_det: ");
 8000dc2:	4823      	ldr	r0, [pc, #140]	@ (8000e50 <print_game_triggers+0xb0>)
 8000dc4:	f7ff ff0a 	bl	8000bdc <send_string>
    send_string_buffer(triggers.magnet1_det);
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff ff26 	bl	8000c1c <send_string_buffer>
    send_string("\r\n");
 8000dd0:	481e      	ldr	r0, [pc, #120]	@ (8000e4c <print_game_triggers+0xac>)
 8000dd2:	f7ff ff03 	bl	8000bdc <send_string>

    send_string("magnet2_det: ");
 8000dd6:	481f      	ldr	r0, [pc, #124]	@ (8000e54 <print_game_triggers+0xb4>)
 8000dd8:	f7ff ff00 	bl	8000bdc <send_string>
    send_string_buffer(triggers.magnet2_det);
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff ff1c 	bl	8000c1c <send_string_buffer>
    send_string("\r\n");
 8000de4:	4819      	ldr	r0, [pc, #100]	@ (8000e4c <print_game_triggers+0xac>)
 8000de6:	f7ff fef9 	bl	8000bdc <send_string>

    send_string("servo_controlled: ");
 8000dea:	481b      	ldr	r0, [pc, #108]	@ (8000e58 <print_game_triggers+0xb8>)
 8000dec:	f7ff fef6 	bl	8000bdc <send_string>
    send_string_buffer(triggers.servo_controlled);
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff ff12 	bl	8000c1c <send_string_buffer>
    send_string("\r\n");
 8000df8:	4814      	ldr	r0, [pc, #80]	@ (8000e4c <print_game_triggers+0xac>)
 8000dfa:	f7ff feef 	bl	8000bdc <send_string>

    send_string("servo_angle: ");
 8000dfe:	4817      	ldr	r0, [pc, #92]	@ (8000e5c <print_game_triggers+0xbc>)
 8000e00:	f7ff feec 	bl	8000bdc <send_string>
	send_string_buffer(triggers.servo_angle);
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff ff08 	bl	8000c1c <send_string_buffer>
	send_string("\r\n");
 8000e0c:	480f      	ldr	r0, [pc, #60]	@ (8000e4c <print_game_triggers+0xac>)
 8000e0e:	f7ff fee5 	bl	8000bdc <send_string>

    send_string("trimpot_value: ");
 8000e12:	4813      	ldr	r0, [pc, #76]	@ (8000e60 <print_game_triggers+0xc0>)
 8000e14:	f7ff fee2 	bl	8000bdc <send_string>
	send_string_buffer(triggers.trimpot_value);
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff fefe 	bl	8000c1c <send_string_buffer>
	send_string("\r\n");
 8000e20:	480a      	ldr	r0, [pc, #40]	@ (8000e4c <print_game_triggers+0xac>)
 8000e22:	f7ff fedb 	bl	8000bdc <send_string>

	send_string("peek_threshold: ");
 8000e26:	480f      	ldr	r0, [pc, #60]	@ (8000e64 <print_game_triggers+0xc4>)
 8000e28:	f7ff fed8 	bl	8000bdc <send_string>
	send_string_buffer(triggers.peek_threshold);
 8000e2c:	6a3b      	ldr	r3, [r7, #32]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff fef4 	bl	8000c1c <send_string_buffer>
	send_string("\r\n");
 8000e34:	4805      	ldr	r0, [pc, #20]	@ (8000e4c <print_game_triggers+0xac>)
 8000e36:	f7ff fed1 	bl	8000bdc <send_string>
}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e42:	b004      	add	sp, #16
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	0800286c 	.word	0x0800286c
 8000e4c:	080027c0 	.word	0x080027c0
 8000e50:	08002880 	.word	0x08002880
 8000e54:	08002890 	.word	0x08002890
 8000e58:	080028a0 	.word	0x080028a0
 8000e5c:	080028b4 	.word	0x080028b4
 8000e60:	080028c4 	.word	0x080028c4
 8000e64:	080028d4 	.word	0x080028d4

08000e68 <clear_screen>:


void clear_screen(void) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
    send_string("\x1B[2J\x1B[H");
 8000e6c:	4802      	ldr	r0, [pc, #8]	@ (8000e78 <clear_screen+0x10>)
 8000e6e:	f7ff feb5 	bl	8000bdc <send_string>
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	080028e8 	.word	0x080028e8

08000e7c <valid_period_check>:


//For Testing
int valid_period_check(char *input){
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
    // Check for an empty string
    if (input == NULL || strlen(input) == 0) {
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <valid_period_check+0x16>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d101      	bne.n	8000e96 <valid_period_check+0x1a>
        return 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	e015      	b.n	8000ec2 <valid_period_check+0x46>
    }

    // Confirm every character is a digit
    for (int i = 0; input[i] != '\0'; i++) {
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	e00b      	b.n	8000eb4 <valid_period_check+0x38>
        if (!isdigit((unsigned char)input[i])) {
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	3b30      	subs	r3, #48	@ 0x30
 8000ea6:	2b09      	cmp	r3, #9
 8000ea8:	d901      	bls.n	8000eae <valid_period_check+0x32>
            return 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	e009      	b.n	8000ec2 <valid_period_check+0x46>
    for (int i = 0; input[i] != '\0'; i++) {
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	4413      	add	r3, r2
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d1ed      	bne.n	8000e9c <valid_period_check+0x20>
        }
    }
    return 1;
 8000ec0:	2301      	movs	r3, #1
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3714      	adds	r7, #20
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  return 1;
 8000ed2:	2301      	movs	r3, #1
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <_kill>:

int _kill(int pid, int sig)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
 8000ee6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ee8:	f000 fb96 	bl	8001618 <__errno>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2216      	movs	r2, #22
 8000ef0:	601a      	str	r2, [r3, #0]
  return -1;
 8000ef2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <_exit>:

void _exit (int status)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f06:	f04f 31ff 	mov.w	r1, #4294967295
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff ffe7 	bl	8000ede <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <_exit+0x12>

08000f14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	e00a      	b.n	8000f3c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f26:	f3af 8000 	nop.w
 8000f2a:	4601      	mov	r1, r0
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	1c5a      	adds	r2, r3, #1
 8000f30:	60ba      	str	r2, [r7, #8]
 8000f32:	b2ca      	uxtb	r2, r1
 8000f34:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	697a      	ldr	r2, [r7, #20]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	dbf0      	blt.n	8000f26 <_read+0x12>
  }

  return len;
 8000f44:	687b      	ldr	r3, [r7, #4]
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b086      	sub	sp, #24
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	60f8      	str	r0, [r7, #12]
 8000f56:	60b9      	str	r1, [r7, #8]
 8000f58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	e009      	b.n	8000f74 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	1c5a      	adds	r2, r3, #1
 8000f64:	60ba      	str	r2, [r7, #8]
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	3301      	adds	r3, #1
 8000f72:	617b      	str	r3, [r7, #20]
 8000f74:	697a      	ldr	r2, [r7, #20]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	dbf1      	blt.n	8000f60 <_write+0x12>
  }
  return len;
 8000f7c:	687b      	ldr	r3, [r7, #4]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <_close>:

int _close(int file)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	b083      	sub	sp, #12
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
 8000fa6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fae:	605a      	str	r2, [r3, #4]
  return 0;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <_isatty>:

int _isatty(int file)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b083      	sub	sp, #12
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fc6:	2301      	movs	r3, #1
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
	...

08000ff0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff8:	4a14      	ldr	r2, [pc, #80]	@ (800104c <_sbrk+0x5c>)
 8000ffa:	4b15      	ldr	r3, [pc, #84]	@ (8001050 <_sbrk+0x60>)
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001004:	4b13      	ldr	r3, [pc, #76]	@ (8001054 <_sbrk+0x64>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d102      	bne.n	8001012 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800100c:	4b11      	ldr	r3, [pc, #68]	@ (8001054 <_sbrk+0x64>)
 800100e:	4a12      	ldr	r2, [pc, #72]	@ (8001058 <_sbrk+0x68>)
 8001010:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001012:	4b10      	ldr	r3, [pc, #64]	@ (8001054 <_sbrk+0x64>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	429a      	cmp	r2, r3
 800101e:	d207      	bcs.n	8001030 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001020:	f000 fafa 	bl	8001618 <__errno>
 8001024:	4603      	mov	r3, r0
 8001026:	220c      	movs	r2, #12
 8001028:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800102a:	f04f 33ff 	mov.w	r3, #4294967295
 800102e:	e009      	b.n	8001044 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001030:	4b08      	ldr	r3, [pc, #32]	@ (8001054 <_sbrk+0x64>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001036:	4b07      	ldr	r3, [pc, #28]	@ (8001054 <_sbrk+0x64>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	4a05      	ldr	r2, [pc, #20]	@ (8001054 <_sbrk+0x64>)
 8001040:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001042:	68fb      	ldr	r3, [r7, #12]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	2000a000 	.word	0x2000a000
 8001050:	00000400 	.word	0x00000400
 8001054:	200002a8 	.word	0x200002a8
 8001058:	200003f8 	.word	0x200003f8

0800105c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800105c:	480d      	ldr	r0, [pc, #52]	@ (8001094 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800105e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001060:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001064:	480c      	ldr	r0, [pc, #48]	@ (8001098 <LoopForever+0x6>)
  ldr r1, =_edata
 8001066:	490d      	ldr	r1, [pc, #52]	@ (800109c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001068:	4a0d      	ldr	r2, [pc, #52]	@ (80010a0 <LoopForever+0xe>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800106c:	e002      	b.n	8001074 <LoopCopyDataInit>

0800106e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800106e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001072:	3304      	adds	r3, #4

08001074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001078:	d3f9      	bcc.n	800106e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107a:	4a0a      	ldr	r2, [pc, #40]	@ (80010a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800107c:	4c0a      	ldr	r4, [pc, #40]	@ (80010a8 <LoopForever+0x16>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001080:	e001      	b.n	8001086 <LoopFillZerobss>

08001082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001084:	3204      	adds	r2, #4

08001086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001088:	d3fb      	bcc.n	8001082 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800108a:	f000 facb 	bl	8001624 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800108e:	f7ff f9d7 	bl	8000440 <main>

08001092 <LoopForever>:

LoopForever:
  b LoopForever
 8001092:	e7fe      	b.n	8001092 <LoopForever>
  ldr   r0, =_estack
 8001094:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001098:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800109c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80010a0:	08002b08 	.word	0x08002b08
  ldr r2, =_sbss
 80010a4:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80010a8:	200003f8 	.word	0x200003f8

080010ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010ac:	e7fe      	b.n	80010ac <ADC1_2_IRQHandler>

080010ae <atoi>:
 80010ae:	220a      	movs	r2, #10
 80010b0:	2100      	movs	r1, #0
 80010b2:	f000 b895 	b.w	80011e0 <strtol>

080010b6 <__itoa>:
 80010b6:	1e93      	subs	r3, r2, #2
 80010b8:	2b22      	cmp	r3, #34	@ 0x22
 80010ba:	b510      	push	{r4, lr}
 80010bc:	460c      	mov	r4, r1
 80010be:	d904      	bls.n	80010ca <__itoa+0x14>
 80010c0:	2300      	movs	r3, #0
 80010c2:	700b      	strb	r3, [r1, #0]
 80010c4:	461c      	mov	r4, r3
 80010c6:	4620      	mov	r0, r4
 80010c8:	bd10      	pop	{r4, pc}
 80010ca:	2a0a      	cmp	r2, #10
 80010cc:	d109      	bne.n	80010e2 <__itoa+0x2c>
 80010ce:	2800      	cmp	r0, #0
 80010d0:	da07      	bge.n	80010e2 <__itoa+0x2c>
 80010d2:	232d      	movs	r3, #45	@ 0x2d
 80010d4:	700b      	strb	r3, [r1, #0]
 80010d6:	4240      	negs	r0, r0
 80010d8:	2101      	movs	r1, #1
 80010da:	4421      	add	r1, r4
 80010dc:	f000 f88a 	bl	80011f4 <__utoa>
 80010e0:	e7f1      	b.n	80010c6 <__itoa+0x10>
 80010e2:	2100      	movs	r1, #0
 80010e4:	e7f9      	b.n	80010da <__itoa+0x24>

080010e6 <itoa>:
 80010e6:	f7ff bfe6 	b.w	80010b6 <__itoa>
	...

080010ec <_strtol_l.constprop.0>:
 80010ec:	2b24      	cmp	r3, #36	@ 0x24
 80010ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010f2:	4686      	mov	lr, r0
 80010f4:	4690      	mov	r8, r2
 80010f6:	d801      	bhi.n	80010fc <_strtol_l.constprop.0+0x10>
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d106      	bne.n	800110a <_strtol_l.constprop.0+0x1e>
 80010fc:	f000 fa8c 	bl	8001618 <__errno>
 8001100:	2316      	movs	r3, #22
 8001102:	6003      	str	r3, [r0, #0]
 8001104:	2000      	movs	r0, #0
 8001106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800110a:	4834      	ldr	r0, [pc, #208]	@ (80011dc <_strtol_l.constprop.0+0xf0>)
 800110c:	460d      	mov	r5, r1
 800110e:	462a      	mov	r2, r5
 8001110:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001114:	5d06      	ldrb	r6, [r0, r4]
 8001116:	f016 0608 	ands.w	r6, r6, #8
 800111a:	d1f8      	bne.n	800110e <_strtol_l.constprop.0+0x22>
 800111c:	2c2d      	cmp	r4, #45	@ 0x2d
 800111e:	d12d      	bne.n	800117c <_strtol_l.constprop.0+0x90>
 8001120:	782c      	ldrb	r4, [r5, #0]
 8001122:	2601      	movs	r6, #1
 8001124:	1c95      	adds	r5, r2, #2
 8001126:	f033 0210 	bics.w	r2, r3, #16
 800112a:	d109      	bne.n	8001140 <_strtol_l.constprop.0+0x54>
 800112c:	2c30      	cmp	r4, #48	@ 0x30
 800112e:	d12a      	bne.n	8001186 <_strtol_l.constprop.0+0x9a>
 8001130:	782a      	ldrb	r2, [r5, #0]
 8001132:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8001136:	2a58      	cmp	r2, #88	@ 0x58
 8001138:	d125      	bne.n	8001186 <_strtol_l.constprop.0+0x9a>
 800113a:	786c      	ldrb	r4, [r5, #1]
 800113c:	2310      	movs	r3, #16
 800113e:	3502      	adds	r5, #2
 8001140:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8001144:	f10c 3cff 	add.w	ip, ip, #4294967295
 8001148:	2200      	movs	r2, #0
 800114a:	fbbc f9f3 	udiv	r9, ip, r3
 800114e:	4610      	mov	r0, r2
 8001150:	fb03 ca19 	mls	sl, r3, r9, ip
 8001154:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8001158:	2f09      	cmp	r7, #9
 800115a:	d81b      	bhi.n	8001194 <_strtol_l.constprop.0+0xa8>
 800115c:	463c      	mov	r4, r7
 800115e:	42a3      	cmp	r3, r4
 8001160:	dd27      	ble.n	80011b2 <_strtol_l.constprop.0+0xc6>
 8001162:	1c57      	adds	r7, r2, #1
 8001164:	d007      	beq.n	8001176 <_strtol_l.constprop.0+0x8a>
 8001166:	4581      	cmp	r9, r0
 8001168:	d320      	bcc.n	80011ac <_strtol_l.constprop.0+0xc0>
 800116a:	d101      	bne.n	8001170 <_strtol_l.constprop.0+0x84>
 800116c:	45a2      	cmp	sl, r4
 800116e:	db1d      	blt.n	80011ac <_strtol_l.constprop.0+0xc0>
 8001170:	fb00 4003 	mla	r0, r0, r3, r4
 8001174:	2201      	movs	r2, #1
 8001176:	f815 4b01 	ldrb.w	r4, [r5], #1
 800117a:	e7eb      	b.n	8001154 <_strtol_l.constprop.0+0x68>
 800117c:	2c2b      	cmp	r4, #43	@ 0x2b
 800117e:	bf04      	itt	eq
 8001180:	782c      	ldrbeq	r4, [r5, #0]
 8001182:	1c95      	addeq	r5, r2, #2
 8001184:	e7cf      	b.n	8001126 <_strtol_l.constprop.0+0x3a>
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1da      	bne.n	8001140 <_strtol_l.constprop.0+0x54>
 800118a:	2c30      	cmp	r4, #48	@ 0x30
 800118c:	bf0c      	ite	eq
 800118e:	2308      	moveq	r3, #8
 8001190:	230a      	movne	r3, #10
 8001192:	e7d5      	b.n	8001140 <_strtol_l.constprop.0+0x54>
 8001194:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8001198:	2f19      	cmp	r7, #25
 800119a:	d801      	bhi.n	80011a0 <_strtol_l.constprop.0+0xb4>
 800119c:	3c37      	subs	r4, #55	@ 0x37
 800119e:	e7de      	b.n	800115e <_strtol_l.constprop.0+0x72>
 80011a0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80011a4:	2f19      	cmp	r7, #25
 80011a6:	d804      	bhi.n	80011b2 <_strtol_l.constprop.0+0xc6>
 80011a8:	3c57      	subs	r4, #87	@ 0x57
 80011aa:	e7d8      	b.n	800115e <_strtol_l.constprop.0+0x72>
 80011ac:	f04f 32ff 	mov.w	r2, #4294967295
 80011b0:	e7e1      	b.n	8001176 <_strtol_l.constprop.0+0x8a>
 80011b2:	1c53      	adds	r3, r2, #1
 80011b4:	d108      	bne.n	80011c8 <_strtol_l.constprop.0+0xdc>
 80011b6:	2322      	movs	r3, #34	@ 0x22
 80011b8:	f8ce 3000 	str.w	r3, [lr]
 80011bc:	4660      	mov	r0, ip
 80011be:	f1b8 0f00 	cmp.w	r8, #0
 80011c2:	d0a0      	beq.n	8001106 <_strtol_l.constprop.0+0x1a>
 80011c4:	1e69      	subs	r1, r5, #1
 80011c6:	e006      	b.n	80011d6 <_strtol_l.constprop.0+0xea>
 80011c8:	b106      	cbz	r6, 80011cc <_strtol_l.constprop.0+0xe0>
 80011ca:	4240      	negs	r0, r0
 80011cc:	f1b8 0f00 	cmp.w	r8, #0
 80011d0:	d099      	beq.n	8001106 <_strtol_l.constprop.0+0x1a>
 80011d2:	2a00      	cmp	r2, #0
 80011d4:	d1f6      	bne.n	80011c4 <_strtol_l.constprop.0+0xd8>
 80011d6:	f8c8 1000 	str.w	r1, [r8]
 80011da:	e794      	b.n	8001106 <_strtol_l.constprop.0+0x1a>
 80011dc:	08002916 	.word	0x08002916

080011e0 <strtol>:
 80011e0:	4613      	mov	r3, r2
 80011e2:	460a      	mov	r2, r1
 80011e4:	4601      	mov	r1, r0
 80011e6:	4802      	ldr	r0, [pc, #8]	@ (80011f0 <strtol+0x10>)
 80011e8:	6800      	ldr	r0, [r0, #0]
 80011ea:	f7ff bf7f 	b.w	80010ec <_strtol_l.constprop.0>
 80011ee:	bf00      	nop
 80011f0:	20000034 	.word	0x20000034

080011f4 <__utoa>:
 80011f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011f6:	4c1f      	ldr	r4, [pc, #124]	@ (8001274 <__utoa+0x80>)
 80011f8:	b08b      	sub	sp, #44	@ 0x2c
 80011fa:	4605      	mov	r5, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	466e      	mov	r6, sp
 8001200:	f104 0c20 	add.w	ip, r4, #32
 8001204:	6820      	ldr	r0, [r4, #0]
 8001206:	6861      	ldr	r1, [r4, #4]
 8001208:	4637      	mov	r7, r6
 800120a:	c703      	stmia	r7!, {r0, r1}
 800120c:	3408      	adds	r4, #8
 800120e:	4564      	cmp	r4, ip
 8001210:	463e      	mov	r6, r7
 8001212:	d1f7      	bne.n	8001204 <__utoa+0x10>
 8001214:	7921      	ldrb	r1, [r4, #4]
 8001216:	7139      	strb	r1, [r7, #4]
 8001218:	1e91      	subs	r1, r2, #2
 800121a:	6820      	ldr	r0, [r4, #0]
 800121c:	6038      	str	r0, [r7, #0]
 800121e:	2922      	cmp	r1, #34	@ 0x22
 8001220:	f04f 0100 	mov.w	r1, #0
 8001224:	d904      	bls.n	8001230 <__utoa+0x3c>
 8001226:	7019      	strb	r1, [r3, #0]
 8001228:	460b      	mov	r3, r1
 800122a:	4618      	mov	r0, r3
 800122c:	b00b      	add	sp, #44	@ 0x2c
 800122e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001230:	1e58      	subs	r0, r3, #1
 8001232:	4684      	mov	ip, r0
 8001234:	fbb5 f7f2 	udiv	r7, r5, r2
 8001238:	fb02 5617 	mls	r6, r2, r7, r5
 800123c:	3628      	adds	r6, #40	@ 0x28
 800123e:	446e      	add	r6, sp
 8001240:	460c      	mov	r4, r1
 8001242:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8001246:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800124a:	462e      	mov	r6, r5
 800124c:	42b2      	cmp	r2, r6
 800124e:	f101 0101 	add.w	r1, r1, #1
 8001252:	463d      	mov	r5, r7
 8001254:	d9ee      	bls.n	8001234 <__utoa+0x40>
 8001256:	2200      	movs	r2, #0
 8001258:	545a      	strb	r2, [r3, r1]
 800125a:	1919      	adds	r1, r3, r4
 800125c:	1aa5      	subs	r5, r4, r2
 800125e:	42aa      	cmp	r2, r5
 8001260:	dae3      	bge.n	800122a <__utoa+0x36>
 8001262:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8001266:	780e      	ldrb	r6, [r1, #0]
 8001268:	7006      	strb	r6, [r0, #0]
 800126a:	3201      	adds	r2, #1
 800126c:	f801 5901 	strb.w	r5, [r1], #-1
 8001270:	e7f4      	b.n	800125c <__utoa+0x68>
 8001272:	bf00      	nop
 8001274:	080028f0 	.word	0x080028f0

08001278 <std>:
 8001278:	2300      	movs	r3, #0
 800127a:	b510      	push	{r4, lr}
 800127c:	4604      	mov	r4, r0
 800127e:	e9c0 3300 	strd	r3, r3, [r0]
 8001282:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001286:	6083      	str	r3, [r0, #8]
 8001288:	8181      	strh	r1, [r0, #12]
 800128a:	6643      	str	r3, [r0, #100]	@ 0x64
 800128c:	81c2      	strh	r2, [r0, #14]
 800128e:	6183      	str	r3, [r0, #24]
 8001290:	4619      	mov	r1, r3
 8001292:	2208      	movs	r2, #8
 8001294:	305c      	adds	r0, #92	@ 0x5c
 8001296:	f000 f914 	bl	80014c2 <memset>
 800129a:	4b0d      	ldr	r3, [pc, #52]	@ (80012d0 <std+0x58>)
 800129c:	6263      	str	r3, [r4, #36]	@ 0x24
 800129e:	4b0d      	ldr	r3, [pc, #52]	@ (80012d4 <std+0x5c>)
 80012a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80012a2:	4b0d      	ldr	r3, [pc, #52]	@ (80012d8 <std+0x60>)
 80012a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80012a6:	4b0d      	ldr	r3, [pc, #52]	@ (80012dc <std+0x64>)
 80012a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80012aa:	4b0d      	ldr	r3, [pc, #52]	@ (80012e0 <std+0x68>)
 80012ac:	6224      	str	r4, [r4, #32]
 80012ae:	429c      	cmp	r4, r3
 80012b0:	d006      	beq.n	80012c0 <std+0x48>
 80012b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80012b6:	4294      	cmp	r4, r2
 80012b8:	d002      	beq.n	80012c0 <std+0x48>
 80012ba:	33d0      	adds	r3, #208	@ 0xd0
 80012bc:	429c      	cmp	r4, r3
 80012be:	d105      	bne.n	80012cc <std+0x54>
 80012c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80012c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80012c8:	f000 b9d0 	b.w	800166c <__retarget_lock_init_recursive>
 80012cc:	bd10      	pop	{r4, pc}
 80012ce:	bf00      	nop
 80012d0:	0800143d 	.word	0x0800143d
 80012d4:	0800145f 	.word	0x0800145f
 80012d8:	08001497 	.word	0x08001497
 80012dc:	080014bb 	.word	0x080014bb
 80012e0:	200002ac 	.word	0x200002ac

080012e4 <stdio_exit_handler>:
 80012e4:	4a02      	ldr	r2, [pc, #8]	@ (80012f0 <stdio_exit_handler+0xc>)
 80012e6:	4903      	ldr	r1, [pc, #12]	@ (80012f4 <stdio_exit_handler+0x10>)
 80012e8:	4803      	ldr	r0, [pc, #12]	@ (80012f8 <stdio_exit_handler+0x14>)
 80012ea:	f000 b869 	b.w	80013c0 <_fwalk_sglue>
 80012ee:	bf00      	nop
 80012f0:	20000028 	.word	0x20000028
 80012f4:	08001f85 	.word	0x08001f85
 80012f8:	20000038 	.word	0x20000038

080012fc <cleanup_stdio>:
 80012fc:	6841      	ldr	r1, [r0, #4]
 80012fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001330 <cleanup_stdio+0x34>)
 8001300:	4299      	cmp	r1, r3
 8001302:	b510      	push	{r4, lr}
 8001304:	4604      	mov	r4, r0
 8001306:	d001      	beq.n	800130c <cleanup_stdio+0x10>
 8001308:	f000 fe3c 	bl	8001f84 <_fflush_r>
 800130c:	68a1      	ldr	r1, [r4, #8]
 800130e:	4b09      	ldr	r3, [pc, #36]	@ (8001334 <cleanup_stdio+0x38>)
 8001310:	4299      	cmp	r1, r3
 8001312:	d002      	beq.n	800131a <cleanup_stdio+0x1e>
 8001314:	4620      	mov	r0, r4
 8001316:	f000 fe35 	bl	8001f84 <_fflush_r>
 800131a:	68e1      	ldr	r1, [r4, #12]
 800131c:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <cleanup_stdio+0x3c>)
 800131e:	4299      	cmp	r1, r3
 8001320:	d004      	beq.n	800132c <cleanup_stdio+0x30>
 8001322:	4620      	mov	r0, r4
 8001324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001328:	f000 be2c 	b.w	8001f84 <_fflush_r>
 800132c:	bd10      	pop	{r4, pc}
 800132e:	bf00      	nop
 8001330:	200002ac 	.word	0x200002ac
 8001334:	20000314 	.word	0x20000314
 8001338:	2000037c 	.word	0x2000037c

0800133c <global_stdio_init.part.0>:
 800133c:	b510      	push	{r4, lr}
 800133e:	4b0b      	ldr	r3, [pc, #44]	@ (800136c <global_stdio_init.part.0+0x30>)
 8001340:	4c0b      	ldr	r4, [pc, #44]	@ (8001370 <global_stdio_init.part.0+0x34>)
 8001342:	4a0c      	ldr	r2, [pc, #48]	@ (8001374 <global_stdio_init.part.0+0x38>)
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	4620      	mov	r0, r4
 8001348:	2200      	movs	r2, #0
 800134a:	2104      	movs	r1, #4
 800134c:	f7ff ff94 	bl	8001278 <std>
 8001350:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001354:	2201      	movs	r2, #1
 8001356:	2109      	movs	r1, #9
 8001358:	f7ff ff8e 	bl	8001278 <std>
 800135c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001360:	2202      	movs	r2, #2
 8001362:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001366:	2112      	movs	r1, #18
 8001368:	f7ff bf86 	b.w	8001278 <std>
 800136c:	200003e4 	.word	0x200003e4
 8001370:	200002ac 	.word	0x200002ac
 8001374:	080012e5 	.word	0x080012e5

08001378 <__sfp_lock_acquire>:
 8001378:	4801      	ldr	r0, [pc, #4]	@ (8001380 <__sfp_lock_acquire+0x8>)
 800137a:	f000 b978 	b.w	800166e <__retarget_lock_acquire_recursive>
 800137e:	bf00      	nop
 8001380:	200003ed 	.word	0x200003ed

08001384 <__sfp_lock_release>:
 8001384:	4801      	ldr	r0, [pc, #4]	@ (800138c <__sfp_lock_release+0x8>)
 8001386:	f000 b973 	b.w	8001670 <__retarget_lock_release_recursive>
 800138a:	bf00      	nop
 800138c:	200003ed 	.word	0x200003ed

08001390 <__sinit>:
 8001390:	b510      	push	{r4, lr}
 8001392:	4604      	mov	r4, r0
 8001394:	f7ff fff0 	bl	8001378 <__sfp_lock_acquire>
 8001398:	6a23      	ldr	r3, [r4, #32]
 800139a:	b11b      	cbz	r3, 80013a4 <__sinit+0x14>
 800139c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80013a0:	f7ff bff0 	b.w	8001384 <__sfp_lock_release>
 80013a4:	4b04      	ldr	r3, [pc, #16]	@ (80013b8 <__sinit+0x28>)
 80013a6:	6223      	str	r3, [r4, #32]
 80013a8:	4b04      	ldr	r3, [pc, #16]	@ (80013bc <__sinit+0x2c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1f5      	bne.n	800139c <__sinit+0xc>
 80013b0:	f7ff ffc4 	bl	800133c <global_stdio_init.part.0>
 80013b4:	e7f2      	b.n	800139c <__sinit+0xc>
 80013b6:	bf00      	nop
 80013b8:	080012fd 	.word	0x080012fd
 80013bc:	200003e4 	.word	0x200003e4

080013c0 <_fwalk_sglue>:
 80013c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80013c4:	4607      	mov	r7, r0
 80013c6:	4688      	mov	r8, r1
 80013c8:	4614      	mov	r4, r2
 80013ca:	2600      	movs	r6, #0
 80013cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80013d0:	f1b9 0901 	subs.w	r9, r9, #1
 80013d4:	d505      	bpl.n	80013e2 <_fwalk_sglue+0x22>
 80013d6:	6824      	ldr	r4, [r4, #0]
 80013d8:	2c00      	cmp	r4, #0
 80013da:	d1f7      	bne.n	80013cc <_fwalk_sglue+0xc>
 80013dc:	4630      	mov	r0, r6
 80013de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80013e2:	89ab      	ldrh	r3, [r5, #12]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d907      	bls.n	80013f8 <_fwalk_sglue+0x38>
 80013e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80013ec:	3301      	adds	r3, #1
 80013ee:	d003      	beq.n	80013f8 <_fwalk_sglue+0x38>
 80013f0:	4629      	mov	r1, r5
 80013f2:	4638      	mov	r0, r7
 80013f4:	47c0      	blx	r8
 80013f6:	4306      	orrs	r6, r0
 80013f8:	3568      	adds	r5, #104	@ 0x68
 80013fa:	e7e9      	b.n	80013d0 <_fwalk_sglue+0x10>

080013fc <siprintf>:
 80013fc:	b40e      	push	{r1, r2, r3}
 80013fe:	b500      	push	{lr}
 8001400:	b09c      	sub	sp, #112	@ 0x70
 8001402:	ab1d      	add	r3, sp, #116	@ 0x74
 8001404:	9002      	str	r0, [sp, #8]
 8001406:	9006      	str	r0, [sp, #24]
 8001408:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800140c:	4809      	ldr	r0, [pc, #36]	@ (8001434 <siprintf+0x38>)
 800140e:	9107      	str	r1, [sp, #28]
 8001410:	9104      	str	r1, [sp, #16]
 8001412:	4909      	ldr	r1, [pc, #36]	@ (8001438 <siprintf+0x3c>)
 8001414:	f853 2b04 	ldr.w	r2, [r3], #4
 8001418:	9105      	str	r1, [sp, #20]
 800141a:	6800      	ldr	r0, [r0, #0]
 800141c:	9301      	str	r3, [sp, #4]
 800141e:	a902      	add	r1, sp, #8
 8001420:	f000 faa2 	bl	8001968 <_svfiprintf_r>
 8001424:	9b02      	ldr	r3, [sp, #8]
 8001426:	2200      	movs	r2, #0
 8001428:	701a      	strb	r2, [r3, #0]
 800142a:	b01c      	add	sp, #112	@ 0x70
 800142c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001430:	b003      	add	sp, #12
 8001432:	4770      	bx	lr
 8001434:	20000034 	.word	0x20000034
 8001438:	ffff0208 	.word	0xffff0208

0800143c <__sread>:
 800143c:	b510      	push	{r4, lr}
 800143e:	460c      	mov	r4, r1
 8001440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001444:	f000 f8c4 	bl	80015d0 <_read_r>
 8001448:	2800      	cmp	r0, #0
 800144a:	bfab      	itete	ge
 800144c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800144e:	89a3      	ldrhlt	r3, [r4, #12]
 8001450:	181b      	addge	r3, r3, r0
 8001452:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001456:	bfac      	ite	ge
 8001458:	6563      	strge	r3, [r4, #84]	@ 0x54
 800145a:	81a3      	strhlt	r3, [r4, #12]
 800145c:	bd10      	pop	{r4, pc}

0800145e <__swrite>:
 800145e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001462:	461f      	mov	r7, r3
 8001464:	898b      	ldrh	r3, [r1, #12]
 8001466:	05db      	lsls	r3, r3, #23
 8001468:	4605      	mov	r5, r0
 800146a:	460c      	mov	r4, r1
 800146c:	4616      	mov	r6, r2
 800146e:	d505      	bpl.n	800147c <__swrite+0x1e>
 8001470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001474:	2302      	movs	r3, #2
 8001476:	2200      	movs	r2, #0
 8001478:	f000 f898 	bl	80015ac <_lseek_r>
 800147c:	89a3      	ldrh	r3, [r4, #12]
 800147e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001482:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001486:	81a3      	strh	r3, [r4, #12]
 8001488:	4632      	mov	r2, r6
 800148a:	463b      	mov	r3, r7
 800148c:	4628      	mov	r0, r5
 800148e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001492:	f000 b8af 	b.w	80015f4 <_write_r>

08001496 <__sseek>:
 8001496:	b510      	push	{r4, lr}
 8001498:	460c      	mov	r4, r1
 800149a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800149e:	f000 f885 	bl	80015ac <_lseek_r>
 80014a2:	1c43      	adds	r3, r0, #1
 80014a4:	89a3      	ldrh	r3, [r4, #12]
 80014a6:	bf15      	itete	ne
 80014a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80014aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80014ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80014b2:	81a3      	strheq	r3, [r4, #12]
 80014b4:	bf18      	it	ne
 80014b6:	81a3      	strhne	r3, [r4, #12]
 80014b8:	bd10      	pop	{r4, pc}

080014ba <__sclose>:
 80014ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80014be:	f000 b865 	b.w	800158c <_close_r>

080014c2 <memset>:
 80014c2:	4402      	add	r2, r0
 80014c4:	4603      	mov	r3, r0
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d100      	bne.n	80014cc <memset+0xa>
 80014ca:	4770      	bx	lr
 80014cc:	f803 1b01 	strb.w	r1, [r3], #1
 80014d0:	e7f9      	b.n	80014c6 <memset+0x4>
	...

080014d4 <strtok>:
 80014d4:	4b16      	ldr	r3, [pc, #88]	@ (8001530 <strtok+0x5c>)
 80014d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014da:	681f      	ldr	r7, [r3, #0]
 80014dc:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80014de:	4605      	mov	r5, r0
 80014e0:	460e      	mov	r6, r1
 80014e2:	b9ec      	cbnz	r4, 8001520 <strtok+0x4c>
 80014e4:	2050      	movs	r0, #80	@ 0x50
 80014e6:	f000 f92d 	bl	8001744 <malloc>
 80014ea:	4602      	mov	r2, r0
 80014ec:	6478      	str	r0, [r7, #68]	@ 0x44
 80014ee:	b920      	cbnz	r0, 80014fa <strtok+0x26>
 80014f0:	4b10      	ldr	r3, [pc, #64]	@ (8001534 <strtok+0x60>)
 80014f2:	4811      	ldr	r0, [pc, #68]	@ (8001538 <strtok+0x64>)
 80014f4:	215b      	movs	r1, #91	@ 0x5b
 80014f6:	f000 f8bd 	bl	8001674 <__assert_func>
 80014fa:	e9c0 4400 	strd	r4, r4, [r0]
 80014fe:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8001502:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8001506:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800150a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800150e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8001512:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8001516:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800151a:	6184      	str	r4, [r0, #24]
 800151c:	7704      	strb	r4, [r0, #28]
 800151e:	6244      	str	r4, [r0, #36]	@ 0x24
 8001520:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001522:	4631      	mov	r1, r6
 8001524:	4628      	mov	r0, r5
 8001526:	2301      	movs	r3, #1
 8001528:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800152c:	f000 b806 	b.w	800153c <__strtok_r>
 8001530:	20000034 	.word	0x20000034
 8001534:	08002a16 	.word	0x08002a16
 8001538:	08002a2d 	.word	0x08002a2d

0800153c <__strtok_r>:
 800153c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800153e:	4604      	mov	r4, r0
 8001540:	b908      	cbnz	r0, 8001546 <__strtok_r+0xa>
 8001542:	6814      	ldr	r4, [r2, #0]
 8001544:	b144      	cbz	r4, 8001558 <__strtok_r+0x1c>
 8001546:	4620      	mov	r0, r4
 8001548:	f814 5b01 	ldrb.w	r5, [r4], #1
 800154c:	460f      	mov	r7, r1
 800154e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8001552:	b91e      	cbnz	r6, 800155c <__strtok_r+0x20>
 8001554:	b965      	cbnz	r5, 8001570 <__strtok_r+0x34>
 8001556:	6015      	str	r5, [r2, #0]
 8001558:	2000      	movs	r0, #0
 800155a:	e005      	b.n	8001568 <__strtok_r+0x2c>
 800155c:	42b5      	cmp	r5, r6
 800155e:	d1f6      	bne.n	800154e <__strtok_r+0x12>
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1f0      	bne.n	8001546 <__strtok_r+0xa>
 8001564:	6014      	str	r4, [r2, #0]
 8001566:	7003      	strb	r3, [r0, #0]
 8001568:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800156a:	461c      	mov	r4, r3
 800156c:	e00c      	b.n	8001588 <__strtok_r+0x4c>
 800156e:	b915      	cbnz	r5, 8001576 <__strtok_r+0x3a>
 8001570:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001574:	460e      	mov	r6, r1
 8001576:	f816 5b01 	ldrb.w	r5, [r6], #1
 800157a:	42ab      	cmp	r3, r5
 800157c:	d1f7      	bne.n	800156e <__strtok_r+0x32>
 800157e:	2b00      	cmp	r3, #0
 8001580:	d0f3      	beq.n	800156a <__strtok_r+0x2e>
 8001582:	2300      	movs	r3, #0
 8001584:	f804 3c01 	strb.w	r3, [r4, #-1]
 8001588:	6014      	str	r4, [r2, #0]
 800158a:	e7ed      	b.n	8001568 <__strtok_r+0x2c>

0800158c <_close_r>:
 800158c:	b538      	push	{r3, r4, r5, lr}
 800158e:	4d06      	ldr	r5, [pc, #24]	@ (80015a8 <_close_r+0x1c>)
 8001590:	2300      	movs	r3, #0
 8001592:	4604      	mov	r4, r0
 8001594:	4608      	mov	r0, r1
 8001596:	602b      	str	r3, [r5, #0]
 8001598:	f7ff fcf5 	bl	8000f86 <_close>
 800159c:	1c43      	adds	r3, r0, #1
 800159e:	d102      	bne.n	80015a6 <_close_r+0x1a>
 80015a0:	682b      	ldr	r3, [r5, #0]
 80015a2:	b103      	cbz	r3, 80015a6 <_close_r+0x1a>
 80015a4:	6023      	str	r3, [r4, #0]
 80015a6:	bd38      	pop	{r3, r4, r5, pc}
 80015a8:	200003e8 	.word	0x200003e8

080015ac <_lseek_r>:
 80015ac:	b538      	push	{r3, r4, r5, lr}
 80015ae:	4d07      	ldr	r5, [pc, #28]	@ (80015cc <_lseek_r+0x20>)
 80015b0:	4604      	mov	r4, r0
 80015b2:	4608      	mov	r0, r1
 80015b4:	4611      	mov	r1, r2
 80015b6:	2200      	movs	r2, #0
 80015b8:	602a      	str	r2, [r5, #0]
 80015ba:	461a      	mov	r2, r3
 80015bc:	f7ff fd0a 	bl	8000fd4 <_lseek>
 80015c0:	1c43      	adds	r3, r0, #1
 80015c2:	d102      	bne.n	80015ca <_lseek_r+0x1e>
 80015c4:	682b      	ldr	r3, [r5, #0]
 80015c6:	b103      	cbz	r3, 80015ca <_lseek_r+0x1e>
 80015c8:	6023      	str	r3, [r4, #0]
 80015ca:	bd38      	pop	{r3, r4, r5, pc}
 80015cc:	200003e8 	.word	0x200003e8

080015d0 <_read_r>:
 80015d0:	b538      	push	{r3, r4, r5, lr}
 80015d2:	4d07      	ldr	r5, [pc, #28]	@ (80015f0 <_read_r+0x20>)
 80015d4:	4604      	mov	r4, r0
 80015d6:	4608      	mov	r0, r1
 80015d8:	4611      	mov	r1, r2
 80015da:	2200      	movs	r2, #0
 80015dc:	602a      	str	r2, [r5, #0]
 80015de:	461a      	mov	r2, r3
 80015e0:	f7ff fc98 	bl	8000f14 <_read>
 80015e4:	1c43      	adds	r3, r0, #1
 80015e6:	d102      	bne.n	80015ee <_read_r+0x1e>
 80015e8:	682b      	ldr	r3, [r5, #0]
 80015ea:	b103      	cbz	r3, 80015ee <_read_r+0x1e>
 80015ec:	6023      	str	r3, [r4, #0]
 80015ee:	bd38      	pop	{r3, r4, r5, pc}
 80015f0:	200003e8 	.word	0x200003e8

080015f4 <_write_r>:
 80015f4:	b538      	push	{r3, r4, r5, lr}
 80015f6:	4d07      	ldr	r5, [pc, #28]	@ (8001614 <_write_r+0x20>)
 80015f8:	4604      	mov	r4, r0
 80015fa:	4608      	mov	r0, r1
 80015fc:	4611      	mov	r1, r2
 80015fe:	2200      	movs	r2, #0
 8001600:	602a      	str	r2, [r5, #0]
 8001602:	461a      	mov	r2, r3
 8001604:	f7ff fca3 	bl	8000f4e <_write>
 8001608:	1c43      	adds	r3, r0, #1
 800160a:	d102      	bne.n	8001612 <_write_r+0x1e>
 800160c:	682b      	ldr	r3, [r5, #0]
 800160e:	b103      	cbz	r3, 8001612 <_write_r+0x1e>
 8001610:	6023      	str	r3, [r4, #0]
 8001612:	bd38      	pop	{r3, r4, r5, pc}
 8001614:	200003e8 	.word	0x200003e8

08001618 <__errno>:
 8001618:	4b01      	ldr	r3, [pc, #4]	@ (8001620 <__errno+0x8>)
 800161a:	6818      	ldr	r0, [r3, #0]
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	20000034 	.word	0x20000034

08001624 <__libc_init_array>:
 8001624:	b570      	push	{r4, r5, r6, lr}
 8001626:	4d0d      	ldr	r5, [pc, #52]	@ (800165c <__libc_init_array+0x38>)
 8001628:	4c0d      	ldr	r4, [pc, #52]	@ (8001660 <__libc_init_array+0x3c>)
 800162a:	1b64      	subs	r4, r4, r5
 800162c:	10a4      	asrs	r4, r4, #2
 800162e:	2600      	movs	r6, #0
 8001630:	42a6      	cmp	r6, r4
 8001632:	d109      	bne.n	8001648 <__libc_init_array+0x24>
 8001634:	4d0b      	ldr	r5, [pc, #44]	@ (8001664 <__libc_init_array+0x40>)
 8001636:	4c0c      	ldr	r4, [pc, #48]	@ (8001668 <__libc_init_array+0x44>)
 8001638:	f000 fff0 	bl	800261c <_init>
 800163c:	1b64      	subs	r4, r4, r5
 800163e:	10a4      	asrs	r4, r4, #2
 8001640:	2600      	movs	r6, #0
 8001642:	42a6      	cmp	r6, r4
 8001644:	d105      	bne.n	8001652 <__libc_init_array+0x2e>
 8001646:	bd70      	pop	{r4, r5, r6, pc}
 8001648:	f855 3b04 	ldr.w	r3, [r5], #4
 800164c:	4798      	blx	r3
 800164e:	3601      	adds	r6, #1
 8001650:	e7ee      	b.n	8001630 <__libc_init_array+0xc>
 8001652:	f855 3b04 	ldr.w	r3, [r5], #4
 8001656:	4798      	blx	r3
 8001658:	3601      	adds	r6, #1
 800165a:	e7f2      	b.n	8001642 <__libc_init_array+0x1e>
 800165c:	08002b00 	.word	0x08002b00
 8001660:	08002b00 	.word	0x08002b00
 8001664:	08002b00 	.word	0x08002b00
 8001668:	08002b04 	.word	0x08002b04

0800166c <__retarget_lock_init_recursive>:
 800166c:	4770      	bx	lr

0800166e <__retarget_lock_acquire_recursive>:
 800166e:	4770      	bx	lr

08001670 <__retarget_lock_release_recursive>:
 8001670:	4770      	bx	lr
	...

08001674 <__assert_func>:
 8001674:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001676:	4614      	mov	r4, r2
 8001678:	461a      	mov	r2, r3
 800167a:	4b09      	ldr	r3, [pc, #36]	@ (80016a0 <__assert_func+0x2c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4605      	mov	r5, r0
 8001680:	68d8      	ldr	r0, [r3, #12]
 8001682:	b954      	cbnz	r4, 800169a <__assert_func+0x26>
 8001684:	4b07      	ldr	r3, [pc, #28]	@ (80016a4 <__assert_func+0x30>)
 8001686:	461c      	mov	r4, r3
 8001688:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800168c:	9100      	str	r1, [sp, #0]
 800168e:	462b      	mov	r3, r5
 8001690:	4905      	ldr	r1, [pc, #20]	@ (80016a8 <__assert_func+0x34>)
 8001692:	f000 fc9f 	bl	8001fd4 <fiprintf>
 8001696:	f000 fce7 	bl	8002068 <abort>
 800169a:	4b04      	ldr	r3, [pc, #16]	@ (80016ac <__assert_func+0x38>)
 800169c:	e7f4      	b.n	8001688 <__assert_func+0x14>
 800169e:	bf00      	nop
 80016a0:	20000034 	.word	0x20000034
 80016a4:	08002ac2 	.word	0x08002ac2
 80016a8:	08002a94 	.word	0x08002a94
 80016ac:	08002a87 	.word	0x08002a87

080016b0 <_free_r>:
 80016b0:	b538      	push	{r3, r4, r5, lr}
 80016b2:	4605      	mov	r5, r0
 80016b4:	2900      	cmp	r1, #0
 80016b6:	d041      	beq.n	800173c <_free_r+0x8c>
 80016b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80016bc:	1f0c      	subs	r4, r1, #4
 80016be:	2b00      	cmp	r3, #0
 80016c0:	bfb8      	it	lt
 80016c2:	18e4      	addlt	r4, r4, r3
 80016c4:	f000 f8e8 	bl	8001898 <__malloc_lock>
 80016c8:	4a1d      	ldr	r2, [pc, #116]	@ (8001740 <_free_r+0x90>)
 80016ca:	6813      	ldr	r3, [r2, #0]
 80016cc:	b933      	cbnz	r3, 80016dc <_free_r+0x2c>
 80016ce:	6063      	str	r3, [r4, #4]
 80016d0:	6014      	str	r4, [r2, #0]
 80016d2:	4628      	mov	r0, r5
 80016d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80016d8:	f000 b8e4 	b.w	80018a4 <__malloc_unlock>
 80016dc:	42a3      	cmp	r3, r4
 80016de:	d908      	bls.n	80016f2 <_free_r+0x42>
 80016e0:	6820      	ldr	r0, [r4, #0]
 80016e2:	1821      	adds	r1, r4, r0
 80016e4:	428b      	cmp	r3, r1
 80016e6:	bf01      	itttt	eq
 80016e8:	6819      	ldreq	r1, [r3, #0]
 80016ea:	685b      	ldreq	r3, [r3, #4]
 80016ec:	1809      	addeq	r1, r1, r0
 80016ee:	6021      	streq	r1, [r4, #0]
 80016f0:	e7ed      	b.n	80016ce <_free_r+0x1e>
 80016f2:	461a      	mov	r2, r3
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	b10b      	cbz	r3, 80016fc <_free_r+0x4c>
 80016f8:	42a3      	cmp	r3, r4
 80016fa:	d9fa      	bls.n	80016f2 <_free_r+0x42>
 80016fc:	6811      	ldr	r1, [r2, #0]
 80016fe:	1850      	adds	r0, r2, r1
 8001700:	42a0      	cmp	r0, r4
 8001702:	d10b      	bne.n	800171c <_free_r+0x6c>
 8001704:	6820      	ldr	r0, [r4, #0]
 8001706:	4401      	add	r1, r0
 8001708:	1850      	adds	r0, r2, r1
 800170a:	4283      	cmp	r3, r0
 800170c:	6011      	str	r1, [r2, #0]
 800170e:	d1e0      	bne.n	80016d2 <_free_r+0x22>
 8001710:	6818      	ldr	r0, [r3, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	6053      	str	r3, [r2, #4]
 8001716:	4408      	add	r0, r1
 8001718:	6010      	str	r0, [r2, #0]
 800171a:	e7da      	b.n	80016d2 <_free_r+0x22>
 800171c:	d902      	bls.n	8001724 <_free_r+0x74>
 800171e:	230c      	movs	r3, #12
 8001720:	602b      	str	r3, [r5, #0]
 8001722:	e7d6      	b.n	80016d2 <_free_r+0x22>
 8001724:	6820      	ldr	r0, [r4, #0]
 8001726:	1821      	adds	r1, r4, r0
 8001728:	428b      	cmp	r3, r1
 800172a:	bf04      	itt	eq
 800172c:	6819      	ldreq	r1, [r3, #0]
 800172e:	685b      	ldreq	r3, [r3, #4]
 8001730:	6063      	str	r3, [r4, #4]
 8001732:	bf04      	itt	eq
 8001734:	1809      	addeq	r1, r1, r0
 8001736:	6021      	streq	r1, [r4, #0]
 8001738:	6054      	str	r4, [r2, #4]
 800173a:	e7ca      	b.n	80016d2 <_free_r+0x22>
 800173c:	bd38      	pop	{r3, r4, r5, pc}
 800173e:	bf00      	nop
 8001740:	200003f4 	.word	0x200003f4

08001744 <malloc>:
 8001744:	4b02      	ldr	r3, [pc, #8]	@ (8001750 <malloc+0xc>)
 8001746:	4601      	mov	r1, r0
 8001748:	6818      	ldr	r0, [r3, #0]
 800174a:	f000 b825 	b.w	8001798 <_malloc_r>
 800174e:	bf00      	nop
 8001750:	20000034 	.word	0x20000034

08001754 <sbrk_aligned>:
 8001754:	b570      	push	{r4, r5, r6, lr}
 8001756:	4e0f      	ldr	r6, [pc, #60]	@ (8001794 <sbrk_aligned+0x40>)
 8001758:	460c      	mov	r4, r1
 800175a:	6831      	ldr	r1, [r6, #0]
 800175c:	4605      	mov	r5, r0
 800175e:	b911      	cbnz	r1, 8001766 <sbrk_aligned+0x12>
 8001760:	f000 fc64 	bl	800202c <_sbrk_r>
 8001764:	6030      	str	r0, [r6, #0]
 8001766:	4621      	mov	r1, r4
 8001768:	4628      	mov	r0, r5
 800176a:	f000 fc5f 	bl	800202c <_sbrk_r>
 800176e:	1c43      	adds	r3, r0, #1
 8001770:	d103      	bne.n	800177a <sbrk_aligned+0x26>
 8001772:	f04f 34ff 	mov.w	r4, #4294967295
 8001776:	4620      	mov	r0, r4
 8001778:	bd70      	pop	{r4, r5, r6, pc}
 800177a:	1cc4      	adds	r4, r0, #3
 800177c:	f024 0403 	bic.w	r4, r4, #3
 8001780:	42a0      	cmp	r0, r4
 8001782:	d0f8      	beq.n	8001776 <sbrk_aligned+0x22>
 8001784:	1a21      	subs	r1, r4, r0
 8001786:	4628      	mov	r0, r5
 8001788:	f000 fc50 	bl	800202c <_sbrk_r>
 800178c:	3001      	adds	r0, #1
 800178e:	d1f2      	bne.n	8001776 <sbrk_aligned+0x22>
 8001790:	e7ef      	b.n	8001772 <sbrk_aligned+0x1e>
 8001792:	bf00      	nop
 8001794:	200003f0 	.word	0x200003f0

08001798 <_malloc_r>:
 8001798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800179c:	1ccd      	adds	r5, r1, #3
 800179e:	f025 0503 	bic.w	r5, r5, #3
 80017a2:	3508      	adds	r5, #8
 80017a4:	2d0c      	cmp	r5, #12
 80017a6:	bf38      	it	cc
 80017a8:	250c      	movcc	r5, #12
 80017aa:	2d00      	cmp	r5, #0
 80017ac:	4606      	mov	r6, r0
 80017ae:	db01      	blt.n	80017b4 <_malloc_r+0x1c>
 80017b0:	42a9      	cmp	r1, r5
 80017b2:	d904      	bls.n	80017be <_malloc_r+0x26>
 80017b4:	230c      	movs	r3, #12
 80017b6:	6033      	str	r3, [r6, #0]
 80017b8:	2000      	movs	r0, #0
 80017ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80017be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001894 <_malloc_r+0xfc>
 80017c2:	f000 f869 	bl	8001898 <__malloc_lock>
 80017c6:	f8d8 3000 	ldr.w	r3, [r8]
 80017ca:	461c      	mov	r4, r3
 80017cc:	bb44      	cbnz	r4, 8001820 <_malloc_r+0x88>
 80017ce:	4629      	mov	r1, r5
 80017d0:	4630      	mov	r0, r6
 80017d2:	f7ff ffbf 	bl	8001754 <sbrk_aligned>
 80017d6:	1c43      	adds	r3, r0, #1
 80017d8:	4604      	mov	r4, r0
 80017da:	d158      	bne.n	800188e <_malloc_r+0xf6>
 80017dc:	f8d8 4000 	ldr.w	r4, [r8]
 80017e0:	4627      	mov	r7, r4
 80017e2:	2f00      	cmp	r7, #0
 80017e4:	d143      	bne.n	800186e <_malloc_r+0xd6>
 80017e6:	2c00      	cmp	r4, #0
 80017e8:	d04b      	beq.n	8001882 <_malloc_r+0xea>
 80017ea:	6823      	ldr	r3, [r4, #0]
 80017ec:	4639      	mov	r1, r7
 80017ee:	4630      	mov	r0, r6
 80017f0:	eb04 0903 	add.w	r9, r4, r3
 80017f4:	f000 fc1a 	bl	800202c <_sbrk_r>
 80017f8:	4581      	cmp	r9, r0
 80017fa:	d142      	bne.n	8001882 <_malloc_r+0xea>
 80017fc:	6821      	ldr	r1, [r4, #0]
 80017fe:	1a6d      	subs	r5, r5, r1
 8001800:	4629      	mov	r1, r5
 8001802:	4630      	mov	r0, r6
 8001804:	f7ff ffa6 	bl	8001754 <sbrk_aligned>
 8001808:	3001      	adds	r0, #1
 800180a:	d03a      	beq.n	8001882 <_malloc_r+0xea>
 800180c:	6823      	ldr	r3, [r4, #0]
 800180e:	442b      	add	r3, r5
 8001810:	6023      	str	r3, [r4, #0]
 8001812:	f8d8 3000 	ldr.w	r3, [r8]
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	bb62      	cbnz	r2, 8001874 <_malloc_r+0xdc>
 800181a:	f8c8 7000 	str.w	r7, [r8]
 800181e:	e00f      	b.n	8001840 <_malloc_r+0xa8>
 8001820:	6822      	ldr	r2, [r4, #0]
 8001822:	1b52      	subs	r2, r2, r5
 8001824:	d420      	bmi.n	8001868 <_malloc_r+0xd0>
 8001826:	2a0b      	cmp	r2, #11
 8001828:	d917      	bls.n	800185a <_malloc_r+0xc2>
 800182a:	1961      	adds	r1, r4, r5
 800182c:	42a3      	cmp	r3, r4
 800182e:	6025      	str	r5, [r4, #0]
 8001830:	bf18      	it	ne
 8001832:	6059      	strne	r1, [r3, #4]
 8001834:	6863      	ldr	r3, [r4, #4]
 8001836:	bf08      	it	eq
 8001838:	f8c8 1000 	streq.w	r1, [r8]
 800183c:	5162      	str	r2, [r4, r5]
 800183e:	604b      	str	r3, [r1, #4]
 8001840:	4630      	mov	r0, r6
 8001842:	f000 f82f 	bl	80018a4 <__malloc_unlock>
 8001846:	f104 000b 	add.w	r0, r4, #11
 800184a:	1d23      	adds	r3, r4, #4
 800184c:	f020 0007 	bic.w	r0, r0, #7
 8001850:	1ac2      	subs	r2, r0, r3
 8001852:	bf1c      	itt	ne
 8001854:	1a1b      	subne	r3, r3, r0
 8001856:	50a3      	strne	r3, [r4, r2]
 8001858:	e7af      	b.n	80017ba <_malloc_r+0x22>
 800185a:	6862      	ldr	r2, [r4, #4]
 800185c:	42a3      	cmp	r3, r4
 800185e:	bf0c      	ite	eq
 8001860:	f8c8 2000 	streq.w	r2, [r8]
 8001864:	605a      	strne	r2, [r3, #4]
 8001866:	e7eb      	b.n	8001840 <_malloc_r+0xa8>
 8001868:	4623      	mov	r3, r4
 800186a:	6864      	ldr	r4, [r4, #4]
 800186c:	e7ae      	b.n	80017cc <_malloc_r+0x34>
 800186e:	463c      	mov	r4, r7
 8001870:	687f      	ldr	r7, [r7, #4]
 8001872:	e7b6      	b.n	80017e2 <_malloc_r+0x4a>
 8001874:	461a      	mov	r2, r3
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	42a3      	cmp	r3, r4
 800187a:	d1fb      	bne.n	8001874 <_malloc_r+0xdc>
 800187c:	2300      	movs	r3, #0
 800187e:	6053      	str	r3, [r2, #4]
 8001880:	e7de      	b.n	8001840 <_malloc_r+0xa8>
 8001882:	230c      	movs	r3, #12
 8001884:	6033      	str	r3, [r6, #0]
 8001886:	4630      	mov	r0, r6
 8001888:	f000 f80c 	bl	80018a4 <__malloc_unlock>
 800188c:	e794      	b.n	80017b8 <_malloc_r+0x20>
 800188e:	6005      	str	r5, [r0, #0]
 8001890:	e7d6      	b.n	8001840 <_malloc_r+0xa8>
 8001892:	bf00      	nop
 8001894:	200003f4 	.word	0x200003f4

08001898 <__malloc_lock>:
 8001898:	4801      	ldr	r0, [pc, #4]	@ (80018a0 <__malloc_lock+0x8>)
 800189a:	f7ff bee8 	b.w	800166e <__retarget_lock_acquire_recursive>
 800189e:	bf00      	nop
 80018a0:	200003ec 	.word	0x200003ec

080018a4 <__malloc_unlock>:
 80018a4:	4801      	ldr	r0, [pc, #4]	@ (80018ac <__malloc_unlock+0x8>)
 80018a6:	f7ff bee3 	b.w	8001670 <__retarget_lock_release_recursive>
 80018aa:	bf00      	nop
 80018ac:	200003ec 	.word	0x200003ec

080018b0 <__ssputs_r>:
 80018b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018b4:	688e      	ldr	r6, [r1, #8]
 80018b6:	461f      	mov	r7, r3
 80018b8:	42be      	cmp	r6, r7
 80018ba:	680b      	ldr	r3, [r1, #0]
 80018bc:	4682      	mov	sl, r0
 80018be:	460c      	mov	r4, r1
 80018c0:	4690      	mov	r8, r2
 80018c2:	d82d      	bhi.n	8001920 <__ssputs_r+0x70>
 80018c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80018c8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80018cc:	d026      	beq.n	800191c <__ssputs_r+0x6c>
 80018ce:	6965      	ldr	r5, [r4, #20]
 80018d0:	6909      	ldr	r1, [r1, #16]
 80018d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80018d6:	eba3 0901 	sub.w	r9, r3, r1
 80018da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80018de:	1c7b      	adds	r3, r7, #1
 80018e0:	444b      	add	r3, r9
 80018e2:	106d      	asrs	r5, r5, #1
 80018e4:	429d      	cmp	r5, r3
 80018e6:	bf38      	it	cc
 80018e8:	461d      	movcc	r5, r3
 80018ea:	0553      	lsls	r3, r2, #21
 80018ec:	d527      	bpl.n	800193e <__ssputs_r+0x8e>
 80018ee:	4629      	mov	r1, r5
 80018f0:	f7ff ff52 	bl	8001798 <_malloc_r>
 80018f4:	4606      	mov	r6, r0
 80018f6:	b360      	cbz	r0, 8001952 <__ssputs_r+0xa2>
 80018f8:	6921      	ldr	r1, [r4, #16]
 80018fa:	464a      	mov	r2, r9
 80018fc:	f000 fba6 	bl	800204c <memcpy>
 8001900:	89a3      	ldrh	r3, [r4, #12]
 8001902:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001906:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800190a:	81a3      	strh	r3, [r4, #12]
 800190c:	6126      	str	r6, [r4, #16]
 800190e:	6165      	str	r5, [r4, #20]
 8001910:	444e      	add	r6, r9
 8001912:	eba5 0509 	sub.w	r5, r5, r9
 8001916:	6026      	str	r6, [r4, #0]
 8001918:	60a5      	str	r5, [r4, #8]
 800191a:	463e      	mov	r6, r7
 800191c:	42be      	cmp	r6, r7
 800191e:	d900      	bls.n	8001922 <__ssputs_r+0x72>
 8001920:	463e      	mov	r6, r7
 8001922:	6820      	ldr	r0, [r4, #0]
 8001924:	4632      	mov	r2, r6
 8001926:	4641      	mov	r1, r8
 8001928:	f000 fb66 	bl	8001ff8 <memmove>
 800192c:	68a3      	ldr	r3, [r4, #8]
 800192e:	1b9b      	subs	r3, r3, r6
 8001930:	60a3      	str	r3, [r4, #8]
 8001932:	6823      	ldr	r3, [r4, #0]
 8001934:	4433      	add	r3, r6
 8001936:	6023      	str	r3, [r4, #0]
 8001938:	2000      	movs	r0, #0
 800193a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800193e:	462a      	mov	r2, r5
 8001940:	f000 fb99 	bl	8002076 <_realloc_r>
 8001944:	4606      	mov	r6, r0
 8001946:	2800      	cmp	r0, #0
 8001948:	d1e0      	bne.n	800190c <__ssputs_r+0x5c>
 800194a:	6921      	ldr	r1, [r4, #16]
 800194c:	4650      	mov	r0, sl
 800194e:	f7ff feaf 	bl	80016b0 <_free_r>
 8001952:	230c      	movs	r3, #12
 8001954:	f8ca 3000 	str.w	r3, [sl]
 8001958:	89a3      	ldrh	r3, [r4, #12]
 800195a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800195e:	81a3      	strh	r3, [r4, #12]
 8001960:	f04f 30ff 	mov.w	r0, #4294967295
 8001964:	e7e9      	b.n	800193a <__ssputs_r+0x8a>
	...

08001968 <_svfiprintf_r>:
 8001968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800196c:	4698      	mov	r8, r3
 800196e:	898b      	ldrh	r3, [r1, #12]
 8001970:	061b      	lsls	r3, r3, #24
 8001972:	b09d      	sub	sp, #116	@ 0x74
 8001974:	4607      	mov	r7, r0
 8001976:	460d      	mov	r5, r1
 8001978:	4614      	mov	r4, r2
 800197a:	d510      	bpl.n	800199e <_svfiprintf_r+0x36>
 800197c:	690b      	ldr	r3, [r1, #16]
 800197e:	b973      	cbnz	r3, 800199e <_svfiprintf_r+0x36>
 8001980:	2140      	movs	r1, #64	@ 0x40
 8001982:	f7ff ff09 	bl	8001798 <_malloc_r>
 8001986:	6028      	str	r0, [r5, #0]
 8001988:	6128      	str	r0, [r5, #16]
 800198a:	b930      	cbnz	r0, 800199a <_svfiprintf_r+0x32>
 800198c:	230c      	movs	r3, #12
 800198e:	603b      	str	r3, [r7, #0]
 8001990:	f04f 30ff 	mov.w	r0, #4294967295
 8001994:	b01d      	add	sp, #116	@ 0x74
 8001996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800199a:	2340      	movs	r3, #64	@ 0x40
 800199c:	616b      	str	r3, [r5, #20]
 800199e:	2300      	movs	r3, #0
 80019a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80019a2:	2320      	movs	r3, #32
 80019a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80019a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80019ac:	2330      	movs	r3, #48	@ 0x30
 80019ae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001b4c <_svfiprintf_r+0x1e4>
 80019b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80019b6:	f04f 0901 	mov.w	r9, #1
 80019ba:	4623      	mov	r3, r4
 80019bc:	469a      	mov	sl, r3
 80019be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80019c2:	b10a      	cbz	r2, 80019c8 <_svfiprintf_r+0x60>
 80019c4:	2a25      	cmp	r2, #37	@ 0x25
 80019c6:	d1f9      	bne.n	80019bc <_svfiprintf_r+0x54>
 80019c8:	ebba 0b04 	subs.w	fp, sl, r4
 80019cc:	d00b      	beq.n	80019e6 <_svfiprintf_r+0x7e>
 80019ce:	465b      	mov	r3, fp
 80019d0:	4622      	mov	r2, r4
 80019d2:	4629      	mov	r1, r5
 80019d4:	4638      	mov	r0, r7
 80019d6:	f7ff ff6b 	bl	80018b0 <__ssputs_r>
 80019da:	3001      	adds	r0, #1
 80019dc:	f000 80a7 	beq.w	8001b2e <_svfiprintf_r+0x1c6>
 80019e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80019e2:	445a      	add	r2, fp
 80019e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80019e6:	f89a 3000 	ldrb.w	r3, [sl]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f000 809f 	beq.w	8001b2e <_svfiprintf_r+0x1c6>
 80019f0:	2300      	movs	r3, #0
 80019f2:	f04f 32ff 	mov.w	r2, #4294967295
 80019f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80019fa:	f10a 0a01 	add.w	sl, sl, #1
 80019fe:	9304      	str	r3, [sp, #16]
 8001a00:	9307      	str	r3, [sp, #28]
 8001a02:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001a06:	931a      	str	r3, [sp, #104]	@ 0x68
 8001a08:	4654      	mov	r4, sl
 8001a0a:	2205      	movs	r2, #5
 8001a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a10:	484e      	ldr	r0, [pc, #312]	@ (8001b4c <_svfiprintf_r+0x1e4>)
 8001a12:	f7fe fbf5 	bl	8000200 <memchr>
 8001a16:	9a04      	ldr	r2, [sp, #16]
 8001a18:	b9d8      	cbnz	r0, 8001a52 <_svfiprintf_r+0xea>
 8001a1a:	06d0      	lsls	r0, r2, #27
 8001a1c:	bf44      	itt	mi
 8001a1e:	2320      	movmi	r3, #32
 8001a20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001a24:	0711      	lsls	r1, r2, #28
 8001a26:	bf44      	itt	mi
 8001a28:	232b      	movmi	r3, #43	@ 0x2b
 8001a2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001a2e:	f89a 3000 	ldrb.w	r3, [sl]
 8001a32:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a34:	d015      	beq.n	8001a62 <_svfiprintf_r+0xfa>
 8001a36:	9a07      	ldr	r2, [sp, #28]
 8001a38:	4654      	mov	r4, sl
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	f04f 0c0a 	mov.w	ip, #10
 8001a40:	4621      	mov	r1, r4
 8001a42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001a46:	3b30      	subs	r3, #48	@ 0x30
 8001a48:	2b09      	cmp	r3, #9
 8001a4a:	d94b      	bls.n	8001ae4 <_svfiprintf_r+0x17c>
 8001a4c:	b1b0      	cbz	r0, 8001a7c <_svfiprintf_r+0x114>
 8001a4e:	9207      	str	r2, [sp, #28]
 8001a50:	e014      	b.n	8001a7c <_svfiprintf_r+0x114>
 8001a52:	eba0 0308 	sub.w	r3, r0, r8
 8001a56:	fa09 f303 	lsl.w	r3, r9, r3
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	9304      	str	r3, [sp, #16]
 8001a5e:	46a2      	mov	sl, r4
 8001a60:	e7d2      	b.n	8001a08 <_svfiprintf_r+0xa0>
 8001a62:	9b03      	ldr	r3, [sp, #12]
 8001a64:	1d19      	adds	r1, r3, #4
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	9103      	str	r1, [sp, #12]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	bfbb      	ittet	lt
 8001a6e:	425b      	neglt	r3, r3
 8001a70:	f042 0202 	orrlt.w	r2, r2, #2
 8001a74:	9307      	strge	r3, [sp, #28]
 8001a76:	9307      	strlt	r3, [sp, #28]
 8001a78:	bfb8      	it	lt
 8001a7a:	9204      	strlt	r2, [sp, #16]
 8001a7c:	7823      	ldrb	r3, [r4, #0]
 8001a7e:	2b2e      	cmp	r3, #46	@ 0x2e
 8001a80:	d10a      	bne.n	8001a98 <_svfiprintf_r+0x130>
 8001a82:	7863      	ldrb	r3, [r4, #1]
 8001a84:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a86:	d132      	bne.n	8001aee <_svfiprintf_r+0x186>
 8001a88:	9b03      	ldr	r3, [sp, #12]
 8001a8a:	1d1a      	adds	r2, r3, #4
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	9203      	str	r2, [sp, #12]
 8001a90:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001a94:	3402      	adds	r4, #2
 8001a96:	9305      	str	r3, [sp, #20]
 8001a98:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8001b5c <_svfiprintf_r+0x1f4>
 8001a9c:	7821      	ldrb	r1, [r4, #0]
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	4650      	mov	r0, sl
 8001aa2:	f7fe fbad 	bl	8000200 <memchr>
 8001aa6:	b138      	cbz	r0, 8001ab8 <_svfiprintf_r+0x150>
 8001aa8:	9b04      	ldr	r3, [sp, #16]
 8001aaa:	eba0 000a 	sub.w	r0, r0, sl
 8001aae:	2240      	movs	r2, #64	@ 0x40
 8001ab0:	4082      	lsls	r2, r0
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	3401      	adds	r4, #1
 8001ab6:	9304      	str	r3, [sp, #16]
 8001ab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001abc:	4824      	ldr	r0, [pc, #144]	@ (8001b50 <_svfiprintf_r+0x1e8>)
 8001abe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001ac2:	2206      	movs	r2, #6
 8001ac4:	f7fe fb9c 	bl	8000200 <memchr>
 8001ac8:	2800      	cmp	r0, #0
 8001aca:	d036      	beq.n	8001b3a <_svfiprintf_r+0x1d2>
 8001acc:	4b21      	ldr	r3, [pc, #132]	@ (8001b54 <_svfiprintf_r+0x1ec>)
 8001ace:	bb1b      	cbnz	r3, 8001b18 <_svfiprintf_r+0x1b0>
 8001ad0:	9b03      	ldr	r3, [sp, #12]
 8001ad2:	3307      	adds	r3, #7
 8001ad4:	f023 0307 	bic.w	r3, r3, #7
 8001ad8:	3308      	adds	r3, #8
 8001ada:	9303      	str	r3, [sp, #12]
 8001adc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001ade:	4433      	add	r3, r6
 8001ae0:	9309      	str	r3, [sp, #36]	@ 0x24
 8001ae2:	e76a      	b.n	80019ba <_svfiprintf_r+0x52>
 8001ae4:	fb0c 3202 	mla	r2, ip, r2, r3
 8001ae8:	460c      	mov	r4, r1
 8001aea:	2001      	movs	r0, #1
 8001aec:	e7a8      	b.n	8001a40 <_svfiprintf_r+0xd8>
 8001aee:	2300      	movs	r3, #0
 8001af0:	3401      	adds	r4, #1
 8001af2:	9305      	str	r3, [sp, #20]
 8001af4:	4619      	mov	r1, r3
 8001af6:	f04f 0c0a 	mov.w	ip, #10
 8001afa:	4620      	mov	r0, r4
 8001afc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001b00:	3a30      	subs	r2, #48	@ 0x30
 8001b02:	2a09      	cmp	r2, #9
 8001b04:	d903      	bls.n	8001b0e <_svfiprintf_r+0x1a6>
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d0c6      	beq.n	8001a98 <_svfiprintf_r+0x130>
 8001b0a:	9105      	str	r1, [sp, #20]
 8001b0c:	e7c4      	b.n	8001a98 <_svfiprintf_r+0x130>
 8001b0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8001b12:	4604      	mov	r4, r0
 8001b14:	2301      	movs	r3, #1
 8001b16:	e7f0      	b.n	8001afa <_svfiprintf_r+0x192>
 8001b18:	ab03      	add	r3, sp, #12
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	462a      	mov	r2, r5
 8001b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b58 <_svfiprintf_r+0x1f0>)
 8001b20:	a904      	add	r1, sp, #16
 8001b22:	4638      	mov	r0, r7
 8001b24:	f3af 8000 	nop.w
 8001b28:	1c42      	adds	r2, r0, #1
 8001b2a:	4606      	mov	r6, r0
 8001b2c:	d1d6      	bne.n	8001adc <_svfiprintf_r+0x174>
 8001b2e:	89ab      	ldrh	r3, [r5, #12]
 8001b30:	065b      	lsls	r3, r3, #25
 8001b32:	f53f af2d 	bmi.w	8001990 <_svfiprintf_r+0x28>
 8001b36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001b38:	e72c      	b.n	8001994 <_svfiprintf_r+0x2c>
 8001b3a:	ab03      	add	r3, sp, #12
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	462a      	mov	r2, r5
 8001b40:	4b05      	ldr	r3, [pc, #20]	@ (8001b58 <_svfiprintf_r+0x1f0>)
 8001b42:	a904      	add	r1, sp, #16
 8001b44:	4638      	mov	r0, r7
 8001b46:	f000 f879 	bl	8001c3c <_printf_i>
 8001b4a:	e7ed      	b.n	8001b28 <_svfiprintf_r+0x1c0>
 8001b4c:	08002ac3 	.word	0x08002ac3
 8001b50:	08002acd 	.word	0x08002acd
 8001b54:	00000000 	.word	0x00000000
 8001b58:	080018b1 	.word	0x080018b1
 8001b5c:	08002ac9 	.word	0x08002ac9

08001b60 <_printf_common>:
 8001b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b64:	4616      	mov	r6, r2
 8001b66:	4698      	mov	r8, r3
 8001b68:	688a      	ldr	r2, [r1, #8]
 8001b6a:	690b      	ldr	r3, [r1, #16]
 8001b6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001b70:	4293      	cmp	r3, r2
 8001b72:	bfb8      	it	lt
 8001b74:	4613      	movlt	r3, r2
 8001b76:	6033      	str	r3, [r6, #0]
 8001b78:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001b7c:	4607      	mov	r7, r0
 8001b7e:	460c      	mov	r4, r1
 8001b80:	b10a      	cbz	r2, 8001b86 <_printf_common+0x26>
 8001b82:	3301      	adds	r3, #1
 8001b84:	6033      	str	r3, [r6, #0]
 8001b86:	6823      	ldr	r3, [r4, #0]
 8001b88:	0699      	lsls	r1, r3, #26
 8001b8a:	bf42      	ittt	mi
 8001b8c:	6833      	ldrmi	r3, [r6, #0]
 8001b8e:	3302      	addmi	r3, #2
 8001b90:	6033      	strmi	r3, [r6, #0]
 8001b92:	6825      	ldr	r5, [r4, #0]
 8001b94:	f015 0506 	ands.w	r5, r5, #6
 8001b98:	d106      	bne.n	8001ba8 <_printf_common+0x48>
 8001b9a:	f104 0a19 	add.w	sl, r4, #25
 8001b9e:	68e3      	ldr	r3, [r4, #12]
 8001ba0:	6832      	ldr	r2, [r6, #0]
 8001ba2:	1a9b      	subs	r3, r3, r2
 8001ba4:	42ab      	cmp	r3, r5
 8001ba6:	dc26      	bgt.n	8001bf6 <_printf_common+0x96>
 8001ba8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001bac:	6822      	ldr	r2, [r4, #0]
 8001bae:	3b00      	subs	r3, #0
 8001bb0:	bf18      	it	ne
 8001bb2:	2301      	movne	r3, #1
 8001bb4:	0692      	lsls	r2, r2, #26
 8001bb6:	d42b      	bmi.n	8001c10 <_printf_common+0xb0>
 8001bb8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001bbc:	4641      	mov	r1, r8
 8001bbe:	4638      	mov	r0, r7
 8001bc0:	47c8      	blx	r9
 8001bc2:	3001      	adds	r0, #1
 8001bc4:	d01e      	beq.n	8001c04 <_printf_common+0xa4>
 8001bc6:	6823      	ldr	r3, [r4, #0]
 8001bc8:	6922      	ldr	r2, [r4, #16]
 8001bca:	f003 0306 	and.w	r3, r3, #6
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	bf02      	ittt	eq
 8001bd2:	68e5      	ldreq	r5, [r4, #12]
 8001bd4:	6833      	ldreq	r3, [r6, #0]
 8001bd6:	1aed      	subeq	r5, r5, r3
 8001bd8:	68a3      	ldr	r3, [r4, #8]
 8001bda:	bf0c      	ite	eq
 8001bdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001be0:	2500      	movne	r5, #0
 8001be2:	4293      	cmp	r3, r2
 8001be4:	bfc4      	itt	gt
 8001be6:	1a9b      	subgt	r3, r3, r2
 8001be8:	18ed      	addgt	r5, r5, r3
 8001bea:	2600      	movs	r6, #0
 8001bec:	341a      	adds	r4, #26
 8001bee:	42b5      	cmp	r5, r6
 8001bf0:	d11a      	bne.n	8001c28 <_printf_common+0xc8>
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	e008      	b.n	8001c08 <_printf_common+0xa8>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	4652      	mov	r2, sl
 8001bfa:	4641      	mov	r1, r8
 8001bfc:	4638      	mov	r0, r7
 8001bfe:	47c8      	blx	r9
 8001c00:	3001      	adds	r0, #1
 8001c02:	d103      	bne.n	8001c0c <_printf_common+0xac>
 8001c04:	f04f 30ff 	mov.w	r0, #4294967295
 8001c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c0c:	3501      	adds	r5, #1
 8001c0e:	e7c6      	b.n	8001b9e <_printf_common+0x3e>
 8001c10:	18e1      	adds	r1, r4, r3
 8001c12:	1c5a      	adds	r2, r3, #1
 8001c14:	2030      	movs	r0, #48	@ 0x30
 8001c16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001c1a:	4422      	add	r2, r4
 8001c1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001c20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001c24:	3302      	adds	r3, #2
 8001c26:	e7c7      	b.n	8001bb8 <_printf_common+0x58>
 8001c28:	2301      	movs	r3, #1
 8001c2a:	4622      	mov	r2, r4
 8001c2c:	4641      	mov	r1, r8
 8001c2e:	4638      	mov	r0, r7
 8001c30:	47c8      	blx	r9
 8001c32:	3001      	adds	r0, #1
 8001c34:	d0e6      	beq.n	8001c04 <_printf_common+0xa4>
 8001c36:	3601      	adds	r6, #1
 8001c38:	e7d9      	b.n	8001bee <_printf_common+0x8e>
	...

08001c3c <_printf_i>:
 8001c3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001c40:	7e0f      	ldrb	r7, [r1, #24]
 8001c42:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001c44:	2f78      	cmp	r7, #120	@ 0x78
 8001c46:	4691      	mov	r9, r2
 8001c48:	4680      	mov	r8, r0
 8001c4a:	460c      	mov	r4, r1
 8001c4c:	469a      	mov	sl, r3
 8001c4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001c52:	d807      	bhi.n	8001c64 <_printf_i+0x28>
 8001c54:	2f62      	cmp	r7, #98	@ 0x62
 8001c56:	d80a      	bhi.n	8001c6e <_printf_i+0x32>
 8001c58:	2f00      	cmp	r7, #0
 8001c5a:	f000 80d2 	beq.w	8001e02 <_printf_i+0x1c6>
 8001c5e:	2f58      	cmp	r7, #88	@ 0x58
 8001c60:	f000 80b9 	beq.w	8001dd6 <_printf_i+0x19a>
 8001c64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001c68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001c6c:	e03a      	b.n	8001ce4 <_printf_i+0xa8>
 8001c6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001c72:	2b15      	cmp	r3, #21
 8001c74:	d8f6      	bhi.n	8001c64 <_printf_i+0x28>
 8001c76:	a101      	add	r1, pc, #4	@ (adr r1, 8001c7c <_printf_i+0x40>)
 8001c78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001c7c:	08001cd5 	.word	0x08001cd5
 8001c80:	08001ce9 	.word	0x08001ce9
 8001c84:	08001c65 	.word	0x08001c65
 8001c88:	08001c65 	.word	0x08001c65
 8001c8c:	08001c65 	.word	0x08001c65
 8001c90:	08001c65 	.word	0x08001c65
 8001c94:	08001ce9 	.word	0x08001ce9
 8001c98:	08001c65 	.word	0x08001c65
 8001c9c:	08001c65 	.word	0x08001c65
 8001ca0:	08001c65 	.word	0x08001c65
 8001ca4:	08001c65 	.word	0x08001c65
 8001ca8:	08001de9 	.word	0x08001de9
 8001cac:	08001d13 	.word	0x08001d13
 8001cb0:	08001da3 	.word	0x08001da3
 8001cb4:	08001c65 	.word	0x08001c65
 8001cb8:	08001c65 	.word	0x08001c65
 8001cbc:	08001e0b 	.word	0x08001e0b
 8001cc0:	08001c65 	.word	0x08001c65
 8001cc4:	08001d13 	.word	0x08001d13
 8001cc8:	08001c65 	.word	0x08001c65
 8001ccc:	08001c65 	.word	0x08001c65
 8001cd0:	08001dab 	.word	0x08001dab
 8001cd4:	6833      	ldr	r3, [r6, #0]
 8001cd6:	1d1a      	adds	r2, r3, #4
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	6032      	str	r2, [r6, #0]
 8001cdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001ce0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e09d      	b.n	8001e24 <_printf_i+0x1e8>
 8001ce8:	6833      	ldr	r3, [r6, #0]
 8001cea:	6820      	ldr	r0, [r4, #0]
 8001cec:	1d19      	adds	r1, r3, #4
 8001cee:	6031      	str	r1, [r6, #0]
 8001cf0:	0606      	lsls	r6, r0, #24
 8001cf2:	d501      	bpl.n	8001cf8 <_printf_i+0xbc>
 8001cf4:	681d      	ldr	r5, [r3, #0]
 8001cf6:	e003      	b.n	8001d00 <_printf_i+0xc4>
 8001cf8:	0645      	lsls	r5, r0, #25
 8001cfa:	d5fb      	bpl.n	8001cf4 <_printf_i+0xb8>
 8001cfc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001d00:	2d00      	cmp	r5, #0
 8001d02:	da03      	bge.n	8001d0c <_printf_i+0xd0>
 8001d04:	232d      	movs	r3, #45	@ 0x2d
 8001d06:	426d      	negs	r5, r5
 8001d08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001d0c:	4859      	ldr	r0, [pc, #356]	@ (8001e74 <_printf_i+0x238>)
 8001d0e:	230a      	movs	r3, #10
 8001d10:	e011      	b.n	8001d36 <_printf_i+0xfa>
 8001d12:	6821      	ldr	r1, [r4, #0]
 8001d14:	6833      	ldr	r3, [r6, #0]
 8001d16:	0608      	lsls	r0, r1, #24
 8001d18:	f853 5b04 	ldr.w	r5, [r3], #4
 8001d1c:	d402      	bmi.n	8001d24 <_printf_i+0xe8>
 8001d1e:	0649      	lsls	r1, r1, #25
 8001d20:	bf48      	it	mi
 8001d22:	b2ad      	uxthmi	r5, r5
 8001d24:	2f6f      	cmp	r7, #111	@ 0x6f
 8001d26:	4853      	ldr	r0, [pc, #332]	@ (8001e74 <_printf_i+0x238>)
 8001d28:	6033      	str	r3, [r6, #0]
 8001d2a:	bf14      	ite	ne
 8001d2c:	230a      	movne	r3, #10
 8001d2e:	2308      	moveq	r3, #8
 8001d30:	2100      	movs	r1, #0
 8001d32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001d36:	6866      	ldr	r6, [r4, #4]
 8001d38:	60a6      	str	r6, [r4, #8]
 8001d3a:	2e00      	cmp	r6, #0
 8001d3c:	bfa2      	ittt	ge
 8001d3e:	6821      	ldrge	r1, [r4, #0]
 8001d40:	f021 0104 	bicge.w	r1, r1, #4
 8001d44:	6021      	strge	r1, [r4, #0]
 8001d46:	b90d      	cbnz	r5, 8001d4c <_printf_i+0x110>
 8001d48:	2e00      	cmp	r6, #0
 8001d4a:	d04b      	beq.n	8001de4 <_printf_i+0x1a8>
 8001d4c:	4616      	mov	r6, r2
 8001d4e:	fbb5 f1f3 	udiv	r1, r5, r3
 8001d52:	fb03 5711 	mls	r7, r3, r1, r5
 8001d56:	5dc7      	ldrb	r7, [r0, r7]
 8001d58:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001d5c:	462f      	mov	r7, r5
 8001d5e:	42bb      	cmp	r3, r7
 8001d60:	460d      	mov	r5, r1
 8001d62:	d9f4      	bls.n	8001d4e <_printf_i+0x112>
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	d10b      	bne.n	8001d80 <_printf_i+0x144>
 8001d68:	6823      	ldr	r3, [r4, #0]
 8001d6a:	07df      	lsls	r7, r3, #31
 8001d6c:	d508      	bpl.n	8001d80 <_printf_i+0x144>
 8001d6e:	6923      	ldr	r3, [r4, #16]
 8001d70:	6861      	ldr	r1, [r4, #4]
 8001d72:	4299      	cmp	r1, r3
 8001d74:	bfde      	ittt	le
 8001d76:	2330      	movle	r3, #48	@ 0x30
 8001d78:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001d7c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001d80:	1b92      	subs	r2, r2, r6
 8001d82:	6122      	str	r2, [r4, #16]
 8001d84:	f8cd a000 	str.w	sl, [sp]
 8001d88:	464b      	mov	r3, r9
 8001d8a:	aa03      	add	r2, sp, #12
 8001d8c:	4621      	mov	r1, r4
 8001d8e:	4640      	mov	r0, r8
 8001d90:	f7ff fee6 	bl	8001b60 <_printf_common>
 8001d94:	3001      	adds	r0, #1
 8001d96:	d14a      	bne.n	8001e2e <_printf_i+0x1f2>
 8001d98:	f04f 30ff 	mov.w	r0, #4294967295
 8001d9c:	b004      	add	sp, #16
 8001d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001da2:	6823      	ldr	r3, [r4, #0]
 8001da4:	f043 0320 	orr.w	r3, r3, #32
 8001da8:	6023      	str	r3, [r4, #0]
 8001daa:	4833      	ldr	r0, [pc, #204]	@ (8001e78 <_printf_i+0x23c>)
 8001dac:	2778      	movs	r7, #120	@ 0x78
 8001dae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001db2:	6823      	ldr	r3, [r4, #0]
 8001db4:	6831      	ldr	r1, [r6, #0]
 8001db6:	061f      	lsls	r7, r3, #24
 8001db8:	f851 5b04 	ldr.w	r5, [r1], #4
 8001dbc:	d402      	bmi.n	8001dc4 <_printf_i+0x188>
 8001dbe:	065f      	lsls	r7, r3, #25
 8001dc0:	bf48      	it	mi
 8001dc2:	b2ad      	uxthmi	r5, r5
 8001dc4:	6031      	str	r1, [r6, #0]
 8001dc6:	07d9      	lsls	r1, r3, #31
 8001dc8:	bf44      	itt	mi
 8001dca:	f043 0320 	orrmi.w	r3, r3, #32
 8001dce:	6023      	strmi	r3, [r4, #0]
 8001dd0:	b11d      	cbz	r5, 8001dda <_printf_i+0x19e>
 8001dd2:	2310      	movs	r3, #16
 8001dd4:	e7ac      	b.n	8001d30 <_printf_i+0xf4>
 8001dd6:	4827      	ldr	r0, [pc, #156]	@ (8001e74 <_printf_i+0x238>)
 8001dd8:	e7e9      	b.n	8001dae <_printf_i+0x172>
 8001dda:	6823      	ldr	r3, [r4, #0]
 8001ddc:	f023 0320 	bic.w	r3, r3, #32
 8001de0:	6023      	str	r3, [r4, #0]
 8001de2:	e7f6      	b.n	8001dd2 <_printf_i+0x196>
 8001de4:	4616      	mov	r6, r2
 8001de6:	e7bd      	b.n	8001d64 <_printf_i+0x128>
 8001de8:	6833      	ldr	r3, [r6, #0]
 8001dea:	6825      	ldr	r5, [r4, #0]
 8001dec:	6961      	ldr	r1, [r4, #20]
 8001dee:	1d18      	adds	r0, r3, #4
 8001df0:	6030      	str	r0, [r6, #0]
 8001df2:	062e      	lsls	r6, r5, #24
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	d501      	bpl.n	8001dfc <_printf_i+0x1c0>
 8001df8:	6019      	str	r1, [r3, #0]
 8001dfa:	e002      	b.n	8001e02 <_printf_i+0x1c6>
 8001dfc:	0668      	lsls	r0, r5, #25
 8001dfe:	d5fb      	bpl.n	8001df8 <_printf_i+0x1bc>
 8001e00:	8019      	strh	r1, [r3, #0]
 8001e02:	2300      	movs	r3, #0
 8001e04:	6123      	str	r3, [r4, #16]
 8001e06:	4616      	mov	r6, r2
 8001e08:	e7bc      	b.n	8001d84 <_printf_i+0x148>
 8001e0a:	6833      	ldr	r3, [r6, #0]
 8001e0c:	1d1a      	adds	r2, r3, #4
 8001e0e:	6032      	str	r2, [r6, #0]
 8001e10:	681e      	ldr	r6, [r3, #0]
 8001e12:	6862      	ldr	r2, [r4, #4]
 8001e14:	2100      	movs	r1, #0
 8001e16:	4630      	mov	r0, r6
 8001e18:	f7fe f9f2 	bl	8000200 <memchr>
 8001e1c:	b108      	cbz	r0, 8001e22 <_printf_i+0x1e6>
 8001e1e:	1b80      	subs	r0, r0, r6
 8001e20:	6060      	str	r0, [r4, #4]
 8001e22:	6863      	ldr	r3, [r4, #4]
 8001e24:	6123      	str	r3, [r4, #16]
 8001e26:	2300      	movs	r3, #0
 8001e28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001e2c:	e7aa      	b.n	8001d84 <_printf_i+0x148>
 8001e2e:	6923      	ldr	r3, [r4, #16]
 8001e30:	4632      	mov	r2, r6
 8001e32:	4649      	mov	r1, r9
 8001e34:	4640      	mov	r0, r8
 8001e36:	47d0      	blx	sl
 8001e38:	3001      	adds	r0, #1
 8001e3a:	d0ad      	beq.n	8001d98 <_printf_i+0x15c>
 8001e3c:	6823      	ldr	r3, [r4, #0]
 8001e3e:	079b      	lsls	r3, r3, #30
 8001e40:	d413      	bmi.n	8001e6a <_printf_i+0x22e>
 8001e42:	68e0      	ldr	r0, [r4, #12]
 8001e44:	9b03      	ldr	r3, [sp, #12]
 8001e46:	4298      	cmp	r0, r3
 8001e48:	bfb8      	it	lt
 8001e4a:	4618      	movlt	r0, r3
 8001e4c:	e7a6      	b.n	8001d9c <_printf_i+0x160>
 8001e4e:	2301      	movs	r3, #1
 8001e50:	4632      	mov	r2, r6
 8001e52:	4649      	mov	r1, r9
 8001e54:	4640      	mov	r0, r8
 8001e56:	47d0      	blx	sl
 8001e58:	3001      	adds	r0, #1
 8001e5a:	d09d      	beq.n	8001d98 <_printf_i+0x15c>
 8001e5c:	3501      	adds	r5, #1
 8001e5e:	68e3      	ldr	r3, [r4, #12]
 8001e60:	9903      	ldr	r1, [sp, #12]
 8001e62:	1a5b      	subs	r3, r3, r1
 8001e64:	42ab      	cmp	r3, r5
 8001e66:	dcf2      	bgt.n	8001e4e <_printf_i+0x212>
 8001e68:	e7eb      	b.n	8001e42 <_printf_i+0x206>
 8001e6a:	2500      	movs	r5, #0
 8001e6c:	f104 0619 	add.w	r6, r4, #25
 8001e70:	e7f5      	b.n	8001e5e <_printf_i+0x222>
 8001e72:	bf00      	nop
 8001e74:	08002ad4 	.word	0x08002ad4
 8001e78:	08002ae5 	.word	0x08002ae5

08001e7c <__sflush_r>:
 8001e7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e84:	0716      	lsls	r6, r2, #28
 8001e86:	4605      	mov	r5, r0
 8001e88:	460c      	mov	r4, r1
 8001e8a:	d454      	bmi.n	8001f36 <__sflush_r+0xba>
 8001e8c:	684b      	ldr	r3, [r1, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	dc02      	bgt.n	8001e98 <__sflush_r+0x1c>
 8001e92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	dd48      	ble.n	8001f2a <__sflush_r+0xae>
 8001e98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001e9a:	2e00      	cmp	r6, #0
 8001e9c:	d045      	beq.n	8001f2a <__sflush_r+0xae>
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001ea4:	682f      	ldr	r7, [r5, #0]
 8001ea6:	6a21      	ldr	r1, [r4, #32]
 8001ea8:	602b      	str	r3, [r5, #0]
 8001eaa:	d030      	beq.n	8001f0e <__sflush_r+0x92>
 8001eac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001eae:	89a3      	ldrh	r3, [r4, #12]
 8001eb0:	0759      	lsls	r1, r3, #29
 8001eb2:	d505      	bpl.n	8001ec0 <__sflush_r+0x44>
 8001eb4:	6863      	ldr	r3, [r4, #4]
 8001eb6:	1ad2      	subs	r2, r2, r3
 8001eb8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001eba:	b10b      	cbz	r3, 8001ec0 <__sflush_r+0x44>
 8001ebc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001ebe:	1ad2      	subs	r2, r2, r3
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001ec4:	6a21      	ldr	r1, [r4, #32]
 8001ec6:	4628      	mov	r0, r5
 8001ec8:	47b0      	blx	r6
 8001eca:	1c43      	adds	r3, r0, #1
 8001ecc:	89a3      	ldrh	r3, [r4, #12]
 8001ece:	d106      	bne.n	8001ede <__sflush_r+0x62>
 8001ed0:	6829      	ldr	r1, [r5, #0]
 8001ed2:	291d      	cmp	r1, #29
 8001ed4:	d82b      	bhi.n	8001f2e <__sflush_r+0xb2>
 8001ed6:	4a2a      	ldr	r2, [pc, #168]	@ (8001f80 <__sflush_r+0x104>)
 8001ed8:	410a      	asrs	r2, r1
 8001eda:	07d6      	lsls	r6, r2, #31
 8001edc:	d427      	bmi.n	8001f2e <__sflush_r+0xb2>
 8001ede:	2200      	movs	r2, #0
 8001ee0:	6062      	str	r2, [r4, #4]
 8001ee2:	04d9      	lsls	r1, r3, #19
 8001ee4:	6922      	ldr	r2, [r4, #16]
 8001ee6:	6022      	str	r2, [r4, #0]
 8001ee8:	d504      	bpl.n	8001ef4 <__sflush_r+0x78>
 8001eea:	1c42      	adds	r2, r0, #1
 8001eec:	d101      	bne.n	8001ef2 <__sflush_r+0x76>
 8001eee:	682b      	ldr	r3, [r5, #0]
 8001ef0:	b903      	cbnz	r3, 8001ef4 <__sflush_r+0x78>
 8001ef2:	6560      	str	r0, [r4, #84]	@ 0x54
 8001ef4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001ef6:	602f      	str	r7, [r5, #0]
 8001ef8:	b1b9      	cbz	r1, 8001f2a <__sflush_r+0xae>
 8001efa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001efe:	4299      	cmp	r1, r3
 8001f00:	d002      	beq.n	8001f08 <__sflush_r+0x8c>
 8001f02:	4628      	mov	r0, r5
 8001f04:	f7ff fbd4 	bl	80016b0 <_free_r>
 8001f08:	2300      	movs	r3, #0
 8001f0a:	6363      	str	r3, [r4, #52]	@ 0x34
 8001f0c:	e00d      	b.n	8001f2a <__sflush_r+0xae>
 8001f0e:	2301      	movs	r3, #1
 8001f10:	4628      	mov	r0, r5
 8001f12:	47b0      	blx	r6
 8001f14:	4602      	mov	r2, r0
 8001f16:	1c50      	adds	r0, r2, #1
 8001f18:	d1c9      	bne.n	8001eae <__sflush_r+0x32>
 8001f1a:	682b      	ldr	r3, [r5, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0c6      	beq.n	8001eae <__sflush_r+0x32>
 8001f20:	2b1d      	cmp	r3, #29
 8001f22:	d001      	beq.n	8001f28 <__sflush_r+0xac>
 8001f24:	2b16      	cmp	r3, #22
 8001f26:	d11e      	bne.n	8001f66 <__sflush_r+0xea>
 8001f28:	602f      	str	r7, [r5, #0]
 8001f2a:	2000      	movs	r0, #0
 8001f2c:	e022      	b.n	8001f74 <__sflush_r+0xf8>
 8001f2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f32:	b21b      	sxth	r3, r3
 8001f34:	e01b      	b.n	8001f6e <__sflush_r+0xf2>
 8001f36:	690f      	ldr	r7, [r1, #16]
 8001f38:	2f00      	cmp	r7, #0
 8001f3a:	d0f6      	beq.n	8001f2a <__sflush_r+0xae>
 8001f3c:	0793      	lsls	r3, r2, #30
 8001f3e:	680e      	ldr	r6, [r1, #0]
 8001f40:	bf08      	it	eq
 8001f42:	694b      	ldreq	r3, [r1, #20]
 8001f44:	600f      	str	r7, [r1, #0]
 8001f46:	bf18      	it	ne
 8001f48:	2300      	movne	r3, #0
 8001f4a:	eba6 0807 	sub.w	r8, r6, r7
 8001f4e:	608b      	str	r3, [r1, #8]
 8001f50:	f1b8 0f00 	cmp.w	r8, #0
 8001f54:	dde9      	ble.n	8001f2a <__sflush_r+0xae>
 8001f56:	6a21      	ldr	r1, [r4, #32]
 8001f58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001f5a:	4643      	mov	r3, r8
 8001f5c:	463a      	mov	r2, r7
 8001f5e:	4628      	mov	r0, r5
 8001f60:	47b0      	blx	r6
 8001f62:	2800      	cmp	r0, #0
 8001f64:	dc08      	bgt.n	8001f78 <__sflush_r+0xfc>
 8001f66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f6e:	81a3      	strh	r3, [r4, #12]
 8001f70:	f04f 30ff 	mov.w	r0, #4294967295
 8001f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f78:	4407      	add	r7, r0
 8001f7a:	eba8 0800 	sub.w	r8, r8, r0
 8001f7e:	e7e7      	b.n	8001f50 <__sflush_r+0xd4>
 8001f80:	dfbffffe 	.word	0xdfbffffe

08001f84 <_fflush_r>:
 8001f84:	b538      	push	{r3, r4, r5, lr}
 8001f86:	690b      	ldr	r3, [r1, #16]
 8001f88:	4605      	mov	r5, r0
 8001f8a:	460c      	mov	r4, r1
 8001f8c:	b913      	cbnz	r3, 8001f94 <_fflush_r+0x10>
 8001f8e:	2500      	movs	r5, #0
 8001f90:	4628      	mov	r0, r5
 8001f92:	bd38      	pop	{r3, r4, r5, pc}
 8001f94:	b118      	cbz	r0, 8001f9e <_fflush_r+0x1a>
 8001f96:	6a03      	ldr	r3, [r0, #32]
 8001f98:	b90b      	cbnz	r3, 8001f9e <_fflush_r+0x1a>
 8001f9a:	f7ff f9f9 	bl	8001390 <__sinit>
 8001f9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d0f3      	beq.n	8001f8e <_fflush_r+0xa>
 8001fa6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001fa8:	07d0      	lsls	r0, r2, #31
 8001faa:	d404      	bmi.n	8001fb6 <_fflush_r+0x32>
 8001fac:	0599      	lsls	r1, r3, #22
 8001fae:	d402      	bmi.n	8001fb6 <_fflush_r+0x32>
 8001fb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001fb2:	f7ff fb5c 	bl	800166e <__retarget_lock_acquire_recursive>
 8001fb6:	4628      	mov	r0, r5
 8001fb8:	4621      	mov	r1, r4
 8001fba:	f7ff ff5f 	bl	8001e7c <__sflush_r>
 8001fbe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001fc0:	07da      	lsls	r2, r3, #31
 8001fc2:	4605      	mov	r5, r0
 8001fc4:	d4e4      	bmi.n	8001f90 <_fflush_r+0xc>
 8001fc6:	89a3      	ldrh	r3, [r4, #12]
 8001fc8:	059b      	lsls	r3, r3, #22
 8001fca:	d4e1      	bmi.n	8001f90 <_fflush_r+0xc>
 8001fcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001fce:	f7ff fb4f 	bl	8001670 <__retarget_lock_release_recursive>
 8001fd2:	e7dd      	b.n	8001f90 <_fflush_r+0xc>

08001fd4 <fiprintf>:
 8001fd4:	b40e      	push	{r1, r2, r3}
 8001fd6:	b503      	push	{r0, r1, lr}
 8001fd8:	4601      	mov	r1, r0
 8001fda:	ab03      	add	r3, sp, #12
 8001fdc:	4805      	ldr	r0, [pc, #20]	@ (8001ff4 <fiprintf+0x20>)
 8001fde:	f853 2b04 	ldr.w	r2, [r3], #4
 8001fe2:	6800      	ldr	r0, [r0, #0]
 8001fe4:	9301      	str	r3, [sp, #4]
 8001fe6:	f000 f89d 	bl	8002124 <_vfiprintf_r>
 8001fea:	b002      	add	sp, #8
 8001fec:	f85d eb04 	ldr.w	lr, [sp], #4
 8001ff0:	b003      	add	sp, #12
 8001ff2:	4770      	bx	lr
 8001ff4:	20000034 	.word	0x20000034

08001ff8 <memmove>:
 8001ff8:	4288      	cmp	r0, r1
 8001ffa:	b510      	push	{r4, lr}
 8001ffc:	eb01 0402 	add.w	r4, r1, r2
 8002000:	d902      	bls.n	8002008 <memmove+0x10>
 8002002:	4284      	cmp	r4, r0
 8002004:	4623      	mov	r3, r4
 8002006:	d807      	bhi.n	8002018 <memmove+0x20>
 8002008:	1e43      	subs	r3, r0, #1
 800200a:	42a1      	cmp	r1, r4
 800200c:	d008      	beq.n	8002020 <memmove+0x28>
 800200e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002012:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002016:	e7f8      	b.n	800200a <memmove+0x12>
 8002018:	4402      	add	r2, r0
 800201a:	4601      	mov	r1, r0
 800201c:	428a      	cmp	r2, r1
 800201e:	d100      	bne.n	8002022 <memmove+0x2a>
 8002020:	bd10      	pop	{r4, pc}
 8002022:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002026:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800202a:	e7f7      	b.n	800201c <memmove+0x24>

0800202c <_sbrk_r>:
 800202c:	b538      	push	{r3, r4, r5, lr}
 800202e:	4d06      	ldr	r5, [pc, #24]	@ (8002048 <_sbrk_r+0x1c>)
 8002030:	2300      	movs	r3, #0
 8002032:	4604      	mov	r4, r0
 8002034:	4608      	mov	r0, r1
 8002036:	602b      	str	r3, [r5, #0]
 8002038:	f7fe ffda 	bl	8000ff0 <_sbrk>
 800203c:	1c43      	adds	r3, r0, #1
 800203e:	d102      	bne.n	8002046 <_sbrk_r+0x1a>
 8002040:	682b      	ldr	r3, [r5, #0]
 8002042:	b103      	cbz	r3, 8002046 <_sbrk_r+0x1a>
 8002044:	6023      	str	r3, [r4, #0]
 8002046:	bd38      	pop	{r3, r4, r5, pc}
 8002048:	200003e8 	.word	0x200003e8

0800204c <memcpy>:
 800204c:	440a      	add	r2, r1
 800204e:	4291      	cmp	r1, r2
 8002050:	f100 33ff 	add.w	r3, r0, #4294967295
 8002054:	d100      	bne.n	8002058 <memcpy+0xc>
 8002056:	4770      	bx	lr
 8002058:	b510      	push	{r4, lr}
 800205a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800205e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002062:	4291      	cmp	r1, r2
 8002064:	d1f9      	bne.n	800205a <memcpy+0xe>
 8002066:	bd10      	pop	{r4, pc}

08002068 <abort>:
 8002068:	b508      	push	{r3, lr}
 800206a:	2006      	movs	r0, #6
 800206c:	f000 fa2e 	bl	80024cc <raise>
 8002070:	2001      	movs	r0, #1
 8002072:	f7fe ff44 	bl	8000efe <_exit>

08002076 <_realloc_r>:
 8002076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800207a:	4680      	mov	r8, r0
 800207c:	4615      	mov	r5, r2
 800207e:	460c      	mov	r4, r1
 8002080:	b921      	cbnz	r1, 800208c <_realloc_r+0x16>
 8002082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002086:	4611      	mov	r1, r2
 8002088:	f7ff bb86 	b.w	8001798 <_malloc_r>
 800208c:	b92a      	cbnz	r2, 800209a <_realloc_r+0x24>
 800208e:	f7ff fb0f 	bl	80016b0 <_free_r>
 8002092:	2400      	movs	r4, #0
 8002094:	4620      	mov	r0, r4
 8002096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800209a:	f000 fa33 	bl	8002504 <_malloc_usable_size_r>
 800209e:	4285      	cmp	r5, r0
 80020a0:	4606      	mov	r6, r0
 80020a2:	d802      	bhi.n	80020aa <_realloc_r+0x34>
 80020a4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80020a8:	d8f4      	bhi.n	8002094 <_realloc_r+0x1e>
 80020aa:	4629      	mov	r1, r5
 80020ac:	4640      	mov	r0, r8
 80020ae:	f7ff fb73 	bl	8001798 <_malloc_r>
 80020b2:	4607      	mov	r7, r0
 80020b4:	2800      	cmp	r0, #0
 80020b6:	d0ec      	beq.n	8002092 <_realloc_r+0x1c>
 80020b8:	42b5      	cmp	r5, r6
 80020ba:	462a      	mov	r2, r5
 80020bc:	4621      	mov	r1, r4
 80020be:	bf28      	it	cs
 80020c0:	4632      	movcs	r2, r6
 80020c2:	f7ff ffc3 	bl	800204c <memcpy>
 80020c6:	4621      	mov	r1, r4
 80020c8:	4640      	mov	r0, r8
 80020ca:	f7ff faf1 	bl	80016b0 <_free_r>
 80020ce:	463c      	mov	r4, r7
 80020d0:	e7e0      	b.n	8002094 <_realloc_r+0x1e>

080020d2 <__sfputc_r>:
 80020d2:	6893      	ldr	r3, [r2, #8]
 80020d4:	3b01      	subs	r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	b410      	push	{r4}
 80020da:	6093      	str	r3, [r2, #8]
 80020dc:	da08      	bge.n	80020f0 <__sfputc_r+0x1e>
 80020de:	6994      	ldr	r4, [r2, #24]
 80020e0:	42a3      	cmp	r3, r4
 80020e2:	db01      	blt.n	80020e8 <__sfputc_r+0x16>
 80020e4:	290a      	cmp	r1, #10
 80020e6:	d103      	bne.n	80020f0 <__sfputc_r+0x1e>
 80020e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80020ec:	f000 b932 	b.w	8002354 <__swbuf_r>
 80020f0:	6813      	ldr	r3, [r2, #0]
 80020f2:	1c58      	adds	r0, r3, #1
 80020f4:	6010      	str	r0, [r2, #0]
 80020f6:	7019      	strb	r1, [r3, #0]
 80020f8:	4608      	mov	r0, r1
 80020fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <__sfputs_r>:
 8002100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002102:	4606      	mov	r6, r0
 8002104:	460f      	mov	r7, r1
 8002106:	4614      	mov	r4, r2
 8002108:	18d5      	adds	r5, r2, r3
 800210a:	42ac      	cmp	r4, r5
 800210c:	d101      	bne.n	8002112 <__sfputs_r+0x12>
 800210e:	2000      	movs	r0, #0
 8002110:	e007      	b.n	8002122 <__sfputs_r+0x22>
 8002112:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002116:	463a      	mov	r2, r7
 8002118:	4630      	mov	r0, r6
 800211a:	f7ff ffda 	bl	80020d2 <__sfputc_r>
 800211e:	1c43      	adds	r3, r0, #1
 8002120:	d1f3      	bne.n	800210a <__sfputs_r+0xa>
 8002122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002124 <_vfiprintf_r>:
 8002124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002128:	460d      	mov	r5, r1
 800212a:	b09d      	sub	sp, #116	@ 0x74
 800212c:	4614      	mov	r4, r2
 800212e:	4698      	mov	r8, r3
 8002130:	4606      	mov	r6, r0
 8002132:	b118      	cbz	r0, 800213c <_vfiprintf_r+0x18>
 8002134:	6a03      	ldr	r3, [r0, #32]
 8002136:	b90b      	cbnz	r3, 800213c <_vfiprintf_r+0x18>
 8002138:	f7ff f92a 	bl	8001390 <__sinit>
 800213c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800213e:	07d9      	lsls	r1, r3, #31
 8002140:	d405      	bmi.n	800214e <_vfiprintf_r+0x2a>
 8002142:	89ab      	ldrh	r3, [r5, #12]
 8002144:	059a      	lsls	r2, r3, #22
 8002146:	d402      	bmi.n	800214e <_vfiprintf_r+0x2a>
 8002148:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800214a:	f7ff fa90 	bl	800166e <__retarget_lock_acquire_recursive>
 800214e:	89ab      	ldrh	r3, [r5, #12]
 8002150:	071b      	lsls	r3, r3, #28
 8002152:	d501      	bpl.n	8002158 <_vfiprintf_r+0x34>
 8002154:	692b      	ldr	r3, [r5, #16]
 8002156:	b99b      	cbnz	r3, 8002180 <_vfiprintf_r+0x5c>
 8002158:	4629      	mov	r1, r5
 800215a:	4630      	mov	r0, r6
 800215c:	f000 f938 	bl	80023d0 <__swsetup_r>
 8002160:	b170      	cbz	r0, 8002180 <_vfiprintf_r+0x5c>
 8002162:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002164:	07dc      	lsls	r4, r3, #31
 8002166:	d504      	bpl.n	8002172 <_vfiprintf_r+0x4e>
 8002168:	f04f 30ff 	mov.w	r0, #4294967295
 800216c:	b01d      	add	sp, #116	@ 0x74
 800216e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002172:	89ab      	ldrh	r3, [r5, #12]
 8002174:	0598      	lsls	r0, r3, #22
 8002176:	d4f7      	bmi.n	8002168 <_vfiprintf_r+0x44>
 8002178:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800217a:	f7ff fa79 	bl	8001670 <__retarget_lock_release_recursive>
 800217e:	e7f3      	b.n	8002168 <_vfiprintf_r+0x44>
 8002180:	2300      	movs	r3, #0
 8002182:	9309      	str	r3, [sp, #36]	@ 0x24
 8002184:	2320      	movs	r3, #32
 8002186:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800218a:	f8cd 800c 	str.w	r8, [sp, #12]
 800218e:	2330      	movs	r3, #48	@ 0x30
 8002190:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002340 <_vfiprintf_r+0x21c>
 8002194:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002198:	f04f 0901 	mov.w	r9, #1
 800219c:	4623      	mov	r3, r4
 800219e:	469a      	mov	sl, r3
 80021a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80021a4:	b10a      	cbz	r2, 80021aa <_vfiprintf_r+0x86>
 80021a6:	2a25      	cmp	r2, #37	@ 0x25
 80021a8:	d1f9      	bne.n	800219e <_vfiprintf_r+0x7a>
 80021aa:	ebba 0b04 	subs.w	fp, sl, r4
 80021ae:	d00b      	beq.n	80021c8 <_vfiprintf_r+0xa4>
 80021b0:	465b      	mov	r3, fp
 80021b2:	4622      	mov	r2, r4
 80021b4:	4629      	mov	r1, r5
 80021b6:	4630      	mov	r0, r6
 80021b8:	f7ff ffa2 	bl	8002100 <__sfputs_r>
 80021bc:	3001      	adds	r0, #1
 80021be:	f000 80a7 	beq.w	8002310 <_vfiprintf_r+0x1ec>
 80021c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80021c4:	445a      	add	r2, fp
 80021c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80021c8:	f89a 3000 	ldrb.w	r3, [sl]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f000 809f 	beq.w	8002310 <_vfiprintf_r+0x1ec>
 80021d2:	2300      	movs	r3, #0
 80021d4:	f04f 32ff 	mov.w	r2, #4294967295
 80021d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80021dc:	f10a 0a01 	add.w	sl, sl, #1
 80021e0:	9304      	str	r3, [sp, #16]
 80021e2:	9307      	str	r3, [sp, #28]
 80021e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80021e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80021ea:	4654      	mov	r4, sl
 80021ec:	2205      	movs	r2, #5
 80021ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80021f2:	4853      	ldr	r0, [pc, #332]	@ (8002340 <_vfiprintf_r+0x21c>)
 80021f4:	f7fe f804 	bl	8000200 <memchr>
 80021f8:	9a04      	ldr	r2, [sp, #16]
 80021fa:	b9d8      	cbnz	r0, 8002234 <_vfiprintf_r+0x110>
 80021fc:	06d1      	lsls	r1, r2, #27
 80021fe:	bf44      	itt	mi
 8002200:	2320      	movmi	r3, #32
 8002202:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002206:	0713      	lsls	r3, r2, #28
 8002208:	bf44      	itt	mi
 800220a:	232b      	movmi	r3, #43	@ 0x2b
 800220c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002210:	f89a 3000 	ldrb.w	r3, [sl]
 8002214:	2b2a      	cmp	r3, #42	@ 0x2a
 8002216:	d015      	beq.n	8002244 <_vfiprintf_r+0x120>
 8002218:	9a07      	ldr	r2, [sp, #28]
 800221a:	4654      	mov	r4, sl
 800221c:	2000      	movs	r0, #0
 800221e:	f04f 0c0a 	mov.w	ip, #10
 8002222:	4621      	mov	r1, r4
 8002224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002228:	3b30      	subs	r3, #48	@ 0x30
 800222a:	2b09      	cmp	r3, #9
 800222c:	d94b      	bls.n	80022c6 <_vfiprintf_r+0x1a2>
 800222e:	b1b0      	cbz	r0, 800225e <_vfiprintf_r+0x13a>
 8002230:	9207      	str	r2, [sp, #28]
 8002232:	e014      	b.n	800225e <_vfiprintf_r+0x13a>
 8002234:	eba0 0308 	sub.w	r3, r0, r8
 8002238:	fa09 f303 	lsl.w	r3, r9, r3
 800223c:	4313      	orrs	r3, r2
 800223e:	9304      	str	r3, [sp, #16]
 8002240:	46a2      	mov	sl, r4
 8002242:	e7d2      	b.n	80021ea <_vfiprintf_r+0xc6>
 8002244:	9b03      	ldr	r3, [sp, #12]
 8002246:	1d19      	adds	r1, r3, #4
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	9103      	str	r1, [sp, #12]
 800224c:	2b00      	cmp	r3, #0
 800224e:	bfbb      	ittet	lt
 8002250:	425b      	neglt	r3, r3
 8002252:	f042 0202 	orrlt.w	r2, r2, #2
 8002256:	9307      	strge	r3, [sp, #28]
 8002258:	9307      	strlt	r3, [sp, #28]
 800225a:	bfb8      	it	lt
 800225c:	9204      	strlt	r2, [sp, #16]
 800225e:	7823      	ldrb	r3, [r4, #0]
 8002260:	2b2e      	cmp	r3, #46	@ 0x2e
 8002262:	d10a      	bne.n	800227a <_vfiprintf_r+0x156>
 8002264:	7863      	ldrb	r3, [r4, #1]
 8002266:	2b2a      	cmp	r3, #42	@ 0x2a
 8002268:	d132      	bne.n	80022d0 <_vfiprintf_r+0x1ac>
 800226a:	9b03      	ldr	r3, [sp, #12]
 800226c:	1d1a      	adds	r2, r3, #4
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	9203      	str	r2, [sp, #12]
 8002272:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002276:	3402      	adds	r4, #2
 8002278:	9305      	str	r3, [sp, #20]
 800227a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8002350 <_vfiprintf_r+0x22c>
 800227e:	7821      	ldrb	r1, [r4, #0]
 8002280:	2203      	movs	r2, #3
 8002282:	4650      	mov	r0, sl
 8002284:	f7fd ffbc 	bl	8000200 <memchr>
 8002288:	b138      	cbz	r0, 800229a <_vfiprintf_r+0x176>
 800228a:	9b04      	ldr	r3, [sp, #16]
 800228c:	eba0 000a 	sub.w	r0, r0, sl
 8002290:	2240      	movs	r2, #64	@ 0x40
 8002292:	4082      	lsls	r2, r0
 8002294:	4313      	orrs	r3, r2
 8002296:	3401      	adds	r4, #1
 8002298:	9304      	str	r3, [sp, #16]
 800229a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800229e:	4829      	ldr	r0, [pc, #164]	@ (8002344 <_vfiprintf_r+0x220>)
 80022a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80022a4:	2206      	movs	r2, #6
 80022a6:	f7fd ffab 	bl	8000200 <memchr>
 80022aa:	2800      	cmp	r0, #0
 80022ac:	d03f      	beq.n	800232e <_vfiprintf_r+0x20a>
 80022ae:	4b26      	ldr	r3, [pc, #152]	@ (8002348 <_vfiprintf_r+0x224>)
 80022b0:	bb1b      	cbnz	r3, 80022fa <_vfiprintf_r+0x1d6>
 80022b2:	9b03      	ldr	r3, [sp, #12]
 80022b4:	3307      	adds	r3, #7
 80022b6:	f023 0307 	bic.w	r3, r3, #7
 80022ba:	3308      	adds	r3, #8
 80022bc:	9303      	str	r3, [sp, #12]
 80022be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80022c0:	443b      	add	r3, r7
 80022c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80022c4:	e76a      	b.n	800219c <_vfiprintf_r+0x78>
 80022c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80022ca:	460c      	mov	r4, r1
 80022cc:	2001      	movs	r0, #1
 80022ce:	e7a8      	b.n	8002222 <_vfiprintf_r+0xfe>
 80022d0:	2300      	movs	r3, #0
 80022d2:	3401      	adds	r4, #1
 80022d4:	9305      	str	r3, [sp, #20]
 80022d6:	4619      	mov	r1, r3
 80022d8:	f04f 0c0a 	mov.w	ip, #10
 80022dc:	4620      	mov	r0, r4
 80022de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80022e2:	3a30      	subs	r2, #48	@ 0x30
 80022e4:	2a09      	cmp	r2, #9
 80022e6:	d903      	bls.n	80022f0 <_vfiprintf_r+0x1cc>
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0c6      	beq.n	800227a <_vfiprintf_r+0x156>
 80022ec:	9105      	str	r1, [sp, #20]
 80022ee:	e7c4      	b.n	800227a <_vfiprintf_r+0x156>
 80022f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80022f4:	4604      	mov	r4, r0
 80022f6:	2301      	movs	r3, #1
 80022f8:	e7f0      	b.n	80022dc <_vfiprintf_r+0x1b8>
 80022fa:	ab03      	add	r3, sp, #12
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	462a      	mov	r2, r5
 8002300:	4b12      	ldr	r3, [pc, #72]	@ (800234c <_vfiprintf_r+0x228>)
 8002302:	a904      	add	r1, sp, #16
 8002304:	4630      	mov	r0, r6
 8002306:	f3af 8000 	nop.w
 800230a:	4607      	mov	r7, r0
 800230c:	1c78      	adds	r0, r7, #1
 800230e:	d1d6      	bne.n	80022be <_vfiprintf_r+0x19a>
 8002310:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002312:	07d9      	lsls	r1, r3, #31
 8002314:	d405      	bmi.n	8002322 <_vfiprintf_r+0x1fe>
 8002316:	89ab      	ldrh	r3, [r5, #12]
 8002318:	059a      	lsls	r2, r3, #22
 800231a:	d402      	bmi.n	8002322 <_vfiprintf_r+0x1fe>
 800231c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800231e:	f7ff f9a7 	bl	8001670 <__retarget_lock_release_recursive>
 8002322:	89ab      	ldrh	r3, [r5, #12]
 8002324:	065b      	lsls	r3, r3, #25
 8002326:	f53f af1f 	bmi.w	8002168 <_vfiprintf_r+0x44>
 800232a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800232c:	e71e      	b.n	800216c <_vfiprintf_r+0x48>
 800232e:	ab03      	add	r3, sp, #12
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	462a      	mov	r2, r5
 8002334:	4b05      	ldr	r3, [pc, #20]	@ (800234c <_vfiprintf_r+0x228>)
 8002336:	a904      	add	r1, sp, #16
 8002338:	4630      	mov	r0, r6
 800233a:	f7ff fc7f 	bl	8001c3c <_printf_i>
 800233e:	e7e4      	b.n	800230a <_vfiprintf_r+0x1e6>
 8002340:	08002ac3 	.word	0x08002ac3
 8002344:	08002acd 	.word	0x08002acd
 8002348:	00000000 	.word	0x00000000
 800234c:	08002101 	.word	0x08002101
 8002350:	08002ac9 	.word	0x08002ac9

08002354 <__swbuf_r>:
 8002354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002356:	460e      	mov	r6, r1
 8002358:	4614      	mov	r4, r2
 800235a:	4605      	mov	r5, r0
 800235c:	b118      	cbz	r0, 8002366 <__swbuf_r+0x12>
 800235e:	6a03      	ldr	r3, [r0, #32]
 8002360:	b90b      	cbnz	r3, 8002366 <__swbuf_r+0x12>
 8002362:	f7ff f815 	bl	8001390 <__sinit>
 8002366:	69a3      	ldr	r3, [r4, #24]
 8002368:	60a3      	str	r3, [r4, #8]
 800236a:	89a3      	ldrh	r3, [r4, #12]
 800236c:	071a      	lsls	r2, r3, #28
 800236e:	d501      	bpl.n	8002374 <__swbuf_r+0x20>
 8002370:	6923      	ldr	r3, [r4, #16]
 8002372:	b943      	cbnz	r3, 8002386 <__swbuf_r+0x32>
 8002374:	4621      	mov	r1, r4
 8002376:	4628      	mov	r0, r5
 8002378:	f000 f82a 	bl	80023d0 <__swsetup_r>
 800237c:	b118      	cbz	r0, 8002386 <__swbuf_r+0x32>
 800237e:	f04f 37ff 	mov.w	r7, #4294967295
 8002382:	4638      	mov	r0, r7
 8002384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002386:	6823      	ldr	r3, [r4, #0]
 8002388:	6922      	ldr	r2, [r4, #16]
 800238a:	1a98      	subs	r0, r3, r2
 800238c:	6963      	ldr	r3, [r4, #20]
 800238e:	b2f6      	uxtb	r6, r6
 8002390:	4283      	cmp	r3, r0
 8002392:	4637      	mov	r7, r6
 8002394:	dc05      	bgt.n	80023a2 <__swbuf_r+0x4e>
 8002396:	4621      	mov	r1, r4
 8002398:	4628      	mov	r0, r5
 800239a:	f7ff fdf3 	bl	8001f84 <_fflush_r>
 800239e:	2800      	cmp	r0, #0
 80023a0:	d1ed      	bne.n	800237e <__swbuf_r+0x2a>
 80023a2:	68a3      	ldr	r3, [r4, #8]
 80023a4:	3b01      	subs	r3, #1
 80023a6:	60a3      	str	r3, [r4, #8]
 80023a8:	6823      	ldr	r3, [r4, #0]
 80023aa:	1c5a      	adds	r2, r3, #1
 80023ac:	6022      	str	r2, [r4, #0]
 80023ae:	701e      	strb	r6, [r3, #0]
 80023b0:	6962      	ldr	r2, [r4, #20]
 80023b2:	1c43      	adds	r3, r0, #1
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d004      	beq.n	80023c2 <__swbuf_r+0x6e>
 80023b8:	89a3      	ldrh	r3, [r4, #12]
 80023ba:	07db      	lsls	r3, r3, #31
 80023bc:	d5e1      	bpl.n	8002382 <__swbuf_r+0x2e>
 80023be:	2e0a      	cmp	r6, #10
 80023c0:	d1df      	bne.n	8002382 <__swbuf_r+0x2e>
 80023c2:	4621      	mov	r1, r4
 80023c4:	4628      	mov	r0, r5
 80023c6:	f7ff fddd 	bl	8001f84 <_fflush_r>
 80023ca:	2800      	cmp	r0, #0
 80023cc:	d0d9      	beq.n	8002382 <__swbuf_r+0x2e>
 80023ce:	e7d6      	b.n	800237e <__swbuf_r+0x2a>

080023d0 <__swsetup_r>:
 80023d0:	b538      	push	{r3, r4, r5, lr}
 80023d2:	4b29      	ldr	r3, [pc, #164]	@ (8002478 <__swsetup_r+0xa8>)
 80023d4:	4605      	mov	r5, r0
 80023d6:	6818      	ldr	r0, [r3, #0]
 80023d8:	460c      	mov	r4, r1
 80023da:	b118      	cbz	r0, 80023e4 <__swsetup_r+0x14>
 80023dc:	6a03      	ldr	r3, [r0, #32]
 80023de:	b90b      	cbnz	r3, 80023e4 <__swsetup_r+0x14>
 80023e0:	f7fe ffd6 	bl	8001390 <__sinit>
 80023e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023e8:	0719      	lsls	r1, r3, #28
 80023ea:	d422      	bmi.n	8002432 <__swsetup_r+0x62>
 80023ec:	06da      	lsls	r2, r3, #27
 80023ee:	d407      	bmi.n	8002400 <__swsetup_r+0x30>
 80023f0:	2209      	movs	r2, #9
 80023f2:	602a      	str	r2, [r5, #0]
 80023f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023f8:	81a3      	strh	r3, [r4, #12]
 80023fa:	f04f 30ff 	mov.w	r0, #4294967295
 80023fe:	e033      	b.n	8002468 <__swsetup_r+0x98>
 8002400:	0758      	lsls	r0, r3, #29
 8002402:	d512      	bpl.n	800242a <__swsetup_r+0x5a>
 8002404:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002406:	b141      	cbz	r1, 800241a <__swsetup_r+0x4a>
 8002408:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800240c:	4299      	cmp	r1, r3
 800240e:	d002      	beq.n	8002416 <__swsetup_r+0x46>
 8002410:	4628      	mov	r0, r5
 8002412:	f7ff f94d 	bl	80016b0 <_free_r>
 8002416:	2300      	movs	r3, #0
 8002418:	6363      	str	r3, [r4, #52]	@ 0x34
 800241a:	89a3      	ldrh	r3, [r4, #12]
 800241c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002420:	81a3      	strh	r3, [r4, #12]
 8002422:	2300      	movs	r3, #0
 8002424:	6063      	str	r3, [r4, #4]
 8002426:	6923      	ldr	r3, [r4, #16]
 8002428:	6023      	str	r3, [r4, #0]
 800242a:	89a3      	ldrh	r3, [r4, #12]
 800242c:	f043 0308 	orr.w	r3, r3, #8
 8002430:	81a3      	strh	r3, [r4, #12]
 8002432:	6923      	ldr	r3, [r4, #16]
 8002434:	b94b      	cbnz	r3, 800244a <__swsetup_r+0x7a>
 8002436:	89a3      	ldrh	r3, [r4, #12]
 8002438:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800243c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002440:	d003      	beq.n	800244a <__swsetup_r+0x7a>
 8002442:	4621      	mov	r1, r4
 8002444:	4628      	mov	r0, r5
 8002446:	f000 f88b 	bl	8002560 <__smakebuf_r>
 800244a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800244e:	f013 0201 	ands.w	r2, r3, #1
 8002452:	d00a      	beq.n	800246a <__swsetup_r+0x9a>
 8002454:	2200      	movs	r2, #0
 8002456:	60a2      	str	r2, [r4, #8]
 8002458:	6962      	ldr	r2, [r4, #20]
 800245a:	4252      	negs	r2, r2
 800245c:	61a2      	str	r2, [r4, #24]
 800245e:	6922      	ldr	r2, [r4, #16]
 8002460:	b942      	cbnz	r2, 8002474 <__swsetup_r+0xa4>
 8002462:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002466:	d1c5      	bne.n	80023f4 <__swsetup_r+0x24>
 8002468:	bd38      	pop	{r3, r4, r5, pc}
 800246a:	0799      	lsls	r1, r3, #30
 800246c:	bf58      	it	pl
 800246e:	6962      	ldrpl	r2, [r4, #20]
 8002470:	60a2      	str	r2, [r4, #8]
 8002472:	e7f4      	b.n	800245e <__swsetup_r+0x8e>
 8002474:	2000      	movs	r0, #0
 8002476:	e7f7      	b.n	8002468 <__swsetup_r+0x98>
 8002478:	20000034 	.word	0x20000034

0800247c <_raise_r>:
 800247c:	291f      	cmp	r1, #31
 800247e:	b538      	push	{r3, r4, r5, lr}
 8002480:	4605      	mov	r5, r0
 8002482:	460c      	mov	r4, r1
 8002484:	d904      	bls.n	8002490 <_raise_r+0x14>
 8002486:	2316      	movs	r3, #22
 8002488:	6003      	str	r3, [r0, #0]
 800248a:	f04f 30ff 	mov.w	r0, #4294967295
 800248e:	bd38      	pop	{r3, r4, r5, pc}
 8002490:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8002492:	b112      	cbz	r2, 800249a <_raise_r+0x1e>
 8002494:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002498:	b94b      	cbnz	r3, 80024ae <_raise_r+0x32>
 800249a:	4628      	mov	r0, r5
 800249c:	f000 f830 	bl	8002500 <_getpid_r>
 80024a0:	4622      	mov	r2, r4
 80024a2:	4601      	mov	r1, r0
 80024a4:	4628      	mov	r0, r5
 80024a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80024aa:	f000 b817 	b.w	80024dc <_kill_r>
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d00a      	beq.n	80024c8 <_raise_r+0x4c>
 80024b2:	1c59      	adds	r1, r3, #1
 80024b4:	d103      	bne.n	80024be <_raise_r+0x42>
 80024b6:	2316      	movs	r3, #22
 80024b8:	6003      	str	r3, [r0, #0]
 80024ba:	2001      	movs	r0, #1
 80024bc:	e7e7      	b.n	800248e <_raise_r+0x12>
 80024be:	2100      	movs	r1, #0
 80024c0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80024c4:	4620      	mov	r0, r4
 80024c6:	4798      	blx	r3
 80024c8:	2000      	movs	r0, #0
 80024ca:	e7e0      	b.n	800248e <_raise_r+0x12>

080024cc <raise>:
 80024cc:	4b02      	ldr	r3, [pc, #8]	@ (80024d8 <raise+0xc>)
 80024ce:	4601      	mov	r1, r0
 80024d0:	6818      	ldr	r0, [r3, #0]
 80024d2:	f7ff bfd3 	b.w	800247c <_raise_r>
 80024d6:	bf00      	nop
 80024d8:	20000034 	.word	0x20000034

080024dc <_kill_r>:
 80024dc:	b538      	push	{r3, r4, r5, lr}
 80024de:	4d07      	ldr	r5, [pc, #28]	@ (80024fc <_kill_r+0x20>)
 80024e0:	2300      	movs	r3, #0
 80024e2:	4604      	mov	r4, r0
 80024e4:	4608      	mov	r0, r1
 80024e6:	4611      	mov	r1, r2
 80024e8:	602b      	str	r3, [r5, #0]
 80024ea:	f7fe fcf8 	bl	8000ede <_kill>
 80024ee:	1c43      	adds	r3, r0, #1
 80024f0:	d102      	bne.n	80024f8 <_kill_r+0x1c>
 80024f2:	682b      	ldr	r3, [r5, #0]
 80024f4:	b103      	cbz	r3, 80024f8 <_kill_r+0x1c>
 80024f6:	6023      	str	r3, [r4, #0]
 80024f8:	bd38      	pop	{r3, r4, r5, pc}
 80024fa:	bf00      	nop
 80024fc:	200003e8 	.word	0x200003e8

08002500 <_getpid_r>:
 8002500:	f7fe bce5 	b.w	8000ece <_getpid>

08002504 <_malloc_usable_size_r>:
 8002504:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002508:	1f18      	subs	r0, r3, #4
 800250a:	2b00      	cmp	r3, #0
 800250c:	bfbc      	itt	lt
 800250e:	580b      	ldrlt	r3, [r1, r0]
 8002510:	18c0      	addlt	r0, r0, r3
 8002512:	4770      	bx	lr

08002514 <__swhatbuf_r>:
 8002514:	b570      	push	{r4, r5, r6, lr}
 8002516:	460c      	mov	r4, r1
 8002518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800251c:	2900      	cmp	r1, #0
 800251e:	b096      	sub	sp, #88	@ 0x58
 8002520:	4615      	mov	r5, r2
 8002522:	461e      	mov	r6, r3
 8002524:	da0d      	bge.n	8002542 <__swhatbuf_r+0x2e>
 8002526:	89a3      	ldrh	r3, [r4, #12]
 8002528:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800252c:	f04f 0100 	mov.w	r1, #0
 8002530:	bf14      	ite	ne
 8002532:	2340      	movne	r3, #64	@ 0x40
 8002534:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002538:	2000      	movs	r0, #0
 800253a:	6031      	str	r1, [r6, #0]
 800253c:	602b      	str	r3, [r5, #0]
 800253e:	b016      	add	sp, #88	@ 0x58
 8002540:	bd70      	pop	{r4, r5, r6, pc}
 8002542:	466a      	mov	r2, sp
 8002544:	f000 f848 	bl	80025d8 <_fstat_r>
 8002548:	2800      	cmp	r0, #0
 800254a:	dbec      	blt.n	8002526 <__swhatbuf_r+0x12>
 800254c:	9901      	ldr	r1, [sp, #4]
 800254e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002552:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002556:	4259      	negs	r1, r3
 8002558:	4159      	adcs	r1, r3
 800255a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800255e:	e7eb      	b.n	8002538 <__swhatbuf_r+0x24>

08002560 <__smakebuf_r>:
 8002560:	898b      	ldrh	r3, [r1, #12]
 8002562:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002564:	079d      	lsls	r5, r3, #30
 8002566:	4606      	mov	r6, r0
 8002568:	460c      	mov	r4, r1
 800256a:	d507      	bpl.n	800257c <__smakebuf_r+0x1c>
 800256c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002570:	6023      	str	r3, [r4, #0]
 8002572:	6123      	str	r3, [r4, #16]
 8002574:	2301      	movs	r3, #1
 8002576:	6163      	str	r3, [r4, #20]
 8002578:	b003      	add	sp, #12
 800257a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800257c:	ab01      	add	r3, sp, #4
 800257e:	466a      	mov	r2, sp
 8002580:	f7ff ffc8 	bl	8002514 <__swhatbuf_r>
 8002584:	9f00      	ldr	r7, [sp, #0]
 8002586:	4605      	mov	r5, r0
 8002588:	4639      	mov	r1, r7
 800258a:	4630      	mov	r0, r6
 800258c:	f7ff f904 	bl	8001798 <_malloc_r>
 8002590:	b948      	cbnz	r0, 80025a6 <__smakebuf_r+0x46>
 8002592:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002596:	059a      	lsls	r2, r3, #22
 8002598:	d4ee      	bmi.n	8002578 <__smakebuf_r+0x18>
 800259a:	f023 0303 	bic.w	r3, r3, #3
 800259e:	f043 0302 	orr.w	r3, r3, #2
 80025a2:	81a3      	strh	r3, [r4, #12]
 80025a4:	e7e2      	b.n	800256c <__smakebuf_r+0xc>
 80025a6:	89a3      	ldrh	r3, [r4, #12]
 80025a8:	6020      	str	r0, [r4, #0]
 80025aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025ae:	81a3      	strh	r3, [r4, #12]
 80025b0:	9b01      	ldr	r3, [sp, #4]
 80025b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80025b6:	b15b      	cbz	r3, 80025d0 <__smakebuf_r+0x70>
 80025b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80025bc:	4630      	mov	r0, r6
 80025be:	f000 f81d 	bl	80025fc <_isatty_r>
 80025c2:	b128      	cbz	r0, 80025d0 <__smakebuf_r+0x70>
 80025c4:	89a3      	ldrh	r3, [r4, #12]
 80025c6:	f023 0303 	bic.w	r3, r3, #3
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	81a3      	strh	r3, [r4, #12]
 80025d0:	89a3      	ldrh	r3, [r4, #12]
 80025d2:	431d      	orrs	r5, r3
 80025d4:	81a5      	strh	r5, [r4, #12]
 80025d6:	e7cf      	b.n	8002578 <__smakebuf_r+0x18>

080025d8 <_fstat_r>:
 80025d8:	b538      	push	{r3, r4, r5, lr}
 80025da:	4d07      	ldr	r5, [pc, #28]	@ (80025f8 <_fstat_r+0x20>)
 80025dc:	2300      	movs	r3, #0
 80025de:	4604      	mov	r4, r0
 80025e0:	4608      	mov	r0, r1
 80025e2:	4611      	mov	r1, r2
 80025e4:	602b      	str	r3, [r5, #0]
 80025e6:	f7fe fcda 	bl	8000f9e <_fstat>
 80025ea:	1c43      	adds	r3, r0, #1
 80025ec:	d102      	bne.n	80025f4 <_fstat_r+0x1c>
 80025ee:	682b      	ldr	r3, [r5, #0]
 80025f0:	b103      	cbz	r3, 80025f4 <_fstat_r+0x1c>
 80025f2:	6023      	str	r3, [r4, #0]
 80025f4:	bd38      	pop	{r3, r4, r5, pc}
 80025f6:	bf00      	nop
 80025f8:	200003e8 	.word	0x200003e8

080025fc <_isatty_r>:
 80025fc:	b538      	push	{r3, r4, r5, lr}
 80025fe:	4d06      	ldr	r5, [pc, #24]	@ (8002618 <_isatty_r+0x1c>)
 8002600:	2300      	movs	r3, #0
 8002602:	4604      	mov	r4, r0
 8002604:	4608      	mov	r0, r1
 8002606:	602b      	str	r3, [r5, #0]
 8002608:	f7fe fcd9 	bl	8000fbe <_isatty>
 800260c:	1c43      	adds	r3, r0, #1
 800260e:	d102      	bne.n	8002616 <_isatty_r+0x1a>
 8002610:	682b      	ldr	r3, [r5, #0]
 8002612:	b103      	cbz	r3, 8002616 <_isatty_r+0x1a>
 8002614:	6023      	str	r3, [r4, #0]
 8002616:	bd38      	pop	{r3, r4, r5, pc}
 8002618:	200003e8 	.word	0x200003e8

0800261c <_init>:
 800261c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800261e:	bf00      	nop
 8002620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002622:	bc08      	pop	{r3}
 8002624:	469e      	mov	lr, r3
 8002626:	4770      	bx	lr

08002628 <_fini>:
 8002628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800262a:	bf00      	nop
 800262c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800262e:	bc08      	pop	{r3}
 8002630:	469e      	mov	lr, r3
 8002632:	4770      	bx	lr
