
HAL-servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ffc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  0800618c  0800618c  0000718c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006388  08006388  0000816c  2**0
                  CONTENTS
  4 .ARM          00000008  08006388  08006388  00007388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006390  08006390  0000816c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006390  08006390  00007390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006394  08006394  00007394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000016c  20000000  08006398  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000816c  2**0
                  CONTENTS
 10 .bss          00000590  2000016c  2000016c  0000816c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200006fc  200006fc  0000816c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000816c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015a0e  00000000  00000000  0000819c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003314  00000000  00000000  0001dbaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013e0  00000000  00000000  00020ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f54  00000000  00000000  000222a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fb34  00000000  00000000  000231f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019506  00000000  00000000  00042d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ba62c  00000000  00000000  0005c22e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011685a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000058cc  00000000  00000000  001168a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000051  00000000  00000000  0011c16c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000016c 	.word	0x2000016c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006174 	.word	0x08006174

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000170 	.word	0x20000170
 80001cc:	08006174 	.word	0x08006174

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <transmit_game_state>:

doorManagerObj *manager;

// =================================== Game Functions ====================================
// Prints via UART game state
void transmit_game_state() {
 8000290:	b580      	push	{r7, lr}
 8000292:	b090      	sub	sp, #64	@ 0x40
 8000294:	af00      	add	r7, sp, #0
    char buffer[64];
    sprintf(buffer, "DIGS REMAINING:%d TREASURES:%d\r\n", game.digs_remaining, game.items_left_to_find);
 8000296:	4b08      	ldr	r3, [pc, #32]	@ (80002b8 <transmit_game_state+0x28>)
 8000298:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800029a:	4b07      	ldr	r3, [pc, #28]	@ (80002b8 <transmit_game_state+0x28>)
 800029c:	69db      	ldr	r3, [r3, #28]
 800029e:	4638      	mov	r0, r7
 80002a0:	4906      	ldr	r1, [pc, #24]	@ (80002bc <transmit_game_state+0x2c>)
 80002a2:	f005 fb75 	bl	8005990 <siprintf>
    serial_output_string(buffer, &USART1_PORT);
 80002a6:	463b      	mov	r3, r7
 80002a8:	4905      	ldr	r1, [pc, #20]	@ (80002c0 <transmit_game_state+0x30>)
 80002aa:	4618      	mov	r0, r3
 80002ac:	f001 fb9f 	bl	80019ee <serial_output_string>
}
 80002b0:	bf00      	nop
 80002b2:	3740      	adds	r7, #64	@ 0x40
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	20000004 	.word	0x20000004
 80002bc:	0800618c 	.word	0x0800618c
 80002c0:	20000060 	.word	0x20000060

080002c4 <fn_a>:

// Timer callback
static void fn_a(const TimerSel sel, GameState *game) {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b092      	sub	sp, #72	@ 0x48
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	4603      	mov	r3, r0
 80002cc:	6039      	str	r1, [r7, #0]
 80002ce:	71fb      	strb	r3, [r7, #7]
	game->game_time_remaining = game->game_time_remaining - 2;
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80002d4:	1e9a      	subs	r2, r3, #2
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    char buffer[64];
    sprintf(buffer, "TIME REMAINING:%d\r\n", game->game_time_remaining);
 80002da:	683b      	ldr	r3, [r7, #0]
 80002dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80002de:	f107 0308 	add.w	r3, r7, #8
 80002e2:	4907      	ldr	r1, [pc, #28]	@ (8000300 <fn_a+0x3c>)
 80002e4:	4618      	mov	r0, r3
 80002e6:	f005 fb53 	bl	8005990 <siprintf>
    serial_output_string(buffer, &USART1_PORT);
 80002ea:	f107 0308 	add.w	r3, r7, #8
 80002ee:	4905      	ldr	r1, [pc, #20]	@ (8000304 <fn_a+0x40>)
 80002f0:	4618      	mov	r0, r3
 80002f2:	f001 fb7c 	bl	80019ee <serial_output_string>
}
 80002f6:	bf00      	nop
 80002f8:	3748      	adds	r7, #72	@ 0x48
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	080061b0 	.word	0x080061b0
 8000304:	20000060 	.word	0x20000060

08000308 <start_game>:

// --- Start Game Signal (from USART or button) ---
void start_game(GameState *game) {
 8000308:	b580      	push	{r7, lr}
 800030a:	b086      	sub	sp, #24
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
	// Restart game state
    game->game_over = 0;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	2200      	movs	r2, #0
 8000314:	631a      	str	r2, [r3, #48]	@ 0x30
    game->game_time_remaining = 2400;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 800031c:	62da      	str	r2, [r3, #44]	@ 0x2c
    game->digs_remaining = 4;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	2204      	movs	r2, #4
 8000322:	625a      	str	r2, [r3, #36]	@ 0x24

    int count = 0;
 8000324:	2300      	movs	r3, #0
 8000326:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 6; i++) {
 8000328:	2300      	movs	r3, #0
 800032a:	613b      	str	r3, [r7, #16]
 800032c:	e00b      	b.n	8000346 <start_game+0x3e>
        if (game->correct_servos[i] != 0) {
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	693a      	ldr	r2, [r7, #16]
 8000332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000336:	2b00      	cmp	r3, #0
 8000338:	d002      	beq.n	8000340 <start_game+0x38>
            count++;
 800033a:	697b      	ldr	r3, [r7, #20]
 800033c:	3301      	adds	r3, #1
 800033e:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 6; i++) {
 8000340:	693b      	ldr	r3, [r7, #16]
 8000342:	3301      	adds	r3, #1
 8000344:	613b      	str	r3, [r7, #16]
 8000346:	693b      	ldr	r3, [r7, #16]
 8000348:	2b05      	cmp	r3, #5
 800034a:	ddf0      	ble.n	800032e <start_game+0x26>
        }
    }
    game->total_items_to_find = count;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	697a      	ldr	r2, [r7, #20]
 8000350:	635a      	str	r2, [r3, #52]	@ 0x34

    // Reset all doors
    door_manager_reset(manager);
 8000352:	4b19      	ldr	r3, [pc, #100]	@ (80003b8 <start_game+0xb0>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	4618      	mov	r0, r3
 8000358:	f000 fe58 	bl	800100c <door_manager_reset>

    // Init game timer
    timer_init();
 800035c:	f001 fcd6 	bl	8001d0c <timer_init>
    const TimerSel tim_a = TIMER_SEL_3;
 8000360:	2301      	movs	r3, #1
 8000362:	73fb      	strb	r3, [r7, #15]
    timer_prescaler_set(tim_a, 0xF00);
 8000364:	7bfb      	ldrb	r3, [r7, #15]
 8000366:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 800036a:	4618      	mov	r0, r3
 800036c:	f001 fdb2 	bl	8001ed4 <timer_prescaler_set>
    timer_period_set(tim_a, 420);
 8000370:	7bfb      	ldrb	r3, [r7, #15]
 8000372:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 8000376:	4618      	mov	r0, r3
 8000378:	f001 fd88 	bl	8001e8c <timer_period_set>
    timer_silent_set(tim_a, false);
 800037c:	7bfb      	ldrb	r3, [r7, #15]
 800037e:	2100      	movs	r1, #0
 8000380:	4618      	mov	r0, r3
 8000382:	f001 fd69 	bl	8001e58 <timer_silent_set>
    timer_recur_set(tim_a, true);
 8000386:	7bfb      	ldrb	r3, [r7, #15]
 8000388:	2101      	movs	r1, #1
 800038a:	4618      	mov	r0, r3
 800038c:	f001 fde6 	bl	8001f5c <timer_recur_set>
    timer_callback_set(tim_a, &fn_a);
 8000390:	7bfb      	ldrb	r3, [r7, #15]
 8000392:	490a      	ldr	r1, [pc, #40]	@ (80003bc <start_game+0xb4>)
 8000394:	4618      	mov	r0, r3
 8000396:	f001 fe65 	bl	8002064 <timer_callback_set>
    timer_enable_set(tim_a, true);
 800039a:	7bfb      	ldrb	r3, [r7, #15]
 800039c:	2101      	movs	r1, #1
 800039e:	4618      	mov	r0, r3
 80003a0:	f001 fd16 	bl	8001dd0 <timer_enable_set>

    serial_output_string("Game Started\r\n", &USART1_PORT);
 80003a4:	4906      	ldr	r1, [pc, #24]	@ (80003c0 <start_game+0xb8>)
 80003a6:	4807      	ldr	r0, [pc, #28]	@ (80003c4 <start_game+0xbc>)
 80003a8:	f001 fb21 	bl	80019ee <serial_output_string>

    transmit_game_state();
 80003ac:	f7ff ff70 	bl	8000290 <transmit_game_state>

}
 80003b0:	bf00      	nop
 80003b2:	3718      	adds	r7, #24
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	20000560 	.word	0x20000560
 80003bc:	080002c5 	.word	0x080002c5
 80003c0:	20000060 	.word	0x20000060
 80003c4:	080061c4 	.word	0x080061c4

080003c8 <update_game_state>:

// Game variable update function
void update_game_state(uint8_t result, GameState *game, GameTriggers *triggers) {
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b084      	sub	sp, #16
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	4603      	mov	r3, r0
 80003d0:	60b9      	str	r1, [r7, #8]
 80003d2:	607a      	str	r2, [r7, #4]
 80003d4:	73fb      	strb	r3, [r7, #15]
	// Update game state depending if successful dig
	if (result == 1) {
 80003d6:	7bfb      	ldrb	r3, [r7, #15]
 80003d8:	2b01      	cmp	r3, #1
 80003da:	d116      	bne.n	800040a <update_game_state+0x42>
		game->items_found++;
 80003dc:	68bb      	ldr	r3, [r7, #8]
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	1c5a      	adds	r2, r3, #1
 80003e2:	68bb      	ldr	r3, [r7, #8]
 80003e4:	619a      	str	r2, [r3, #24]
		game->digs_remaining--;
 80003e6:	68bb      	ldr	r3, [r7, #8]
 80003e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003ea:	1e5a      	subs	r2, r3, #1
 80003ec:	68bb      	ldr	r3, [r7, #8]
 80003ee:	625a      	str	r2, [r3, #36]	@ 0x24
		game->digs_taken--;
 80003f0:	68bb      	ldr	r3, [r7, #8]
 80003f2:	6a1b      	ldr	r3, [r3, #32]
 80003f4:	1e5a      	subs	r2, r3, #1
 80003f6:	68bb      	ldr	r3, [r7, #8]
 80003f8:	621a      	str	r2, [r3, #32]
		game->items_left_to_find--;
 80003fa:	68bb      	ldr	r3, [r7, #8]
 80003fc:	69db      	ldr	r3, [r3, #28]
 80003fe:	1e5a      	subs	r2, r3, #1
 8000400:	68bb      	ldr	r3, [r7, #8]
 8000402:	61da      	str	r2, [r3, #28]
		transmit_game_state();
 8000404:	f7ff ff44 	bl	8000290 <transmit_game_state>
	} else {
		game->digs_remaining--;
		game->digs_taken--;
		transmit_game_state();
	}
}
 8000408:	e00b      	b.n	8000422 <update_game_state+0x5a>
		game->digs_remaining--;
 800040a:	68bb      	ldr	r3, [r7, #8]
 800040c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800040e:	1e5a      	subs	r2, r3, #1
 8000410:	68bb      	ldr	r3, [r7, #8]
 8000412:	625a      	str	r2, [r3, #36]	@ 0x24
		game->digs_taken--;
 8000414:	68bb      	ldr	r3, [r7, #8]
 8000416:	6a1b      	ldr	r3, [r3, #32]
 8000418:	1e5a      	subs	r2, r3, #1
 800041a:	68bb      	ldr	r3, [r7, #8]
 800041c:	621a      	str	r2, [r3, #32]
		transmit_game_state();
 800041e:	f7ff ff37 	bl	8000290 <transmit_game_state>
}
 8000422:	bf00      	nop
 8000424:	3710      	adds	r7, #16
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
	...

0800042c <check_game_over>:

//Check for game over conditions
uint8_t check_game_over(GameState *game) {
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
    if (game->digs_remaining == 0 || game->game_time_remaining == 0 || game->items_left_to_find == 0) {
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000438:	2b00      	cmp	r3, #0
 800043a:	d007      	beq.n	800044c <check_game_over+0x20>
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000440:	2b00      	cmp	r3, #0
 8000442:	d003      	beq.n	800044c <check_game_over+0x20>
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	69db      	ldr	r3, [r3, #28]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d114      	bne.n	8000476 <check_game_over+0x4a>

      	if (game->items_left_to_find == 0) {
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	69db      	ldr	r3, [r3, #28]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d104      	bne.n	800045e <check_game_over+0x32>
      		serial_output_string((char *) "You Win!\n", &USART1_PORT);
 8000454:	490a      	ldr	r1, [pc, #40]	@ (8000480 <check_game_over+0x54>)
 8000456:	480b      	ldr	r0, [pc, #44]	@ (8000484 <check_game_over+0x58>)
 8000458:	f001 fac9 	bl	80019ee <serial_output_string>
 800045c:	e003      	b.n	8000466 <check_game_over+0x3a>
      	}
      	else {
      		serial_output_string((char *) "Game Over\n", &USART1_PORT);
 800045e:	4908      	ldr	r1, [pc, #32]	@ (8000480 <check_game_over+0x54>)
 8000460:	4809      	ldr	r0, [pc, #36]	@ (8000488 <check_game_over+0x5c>)
 8000462:	f001 fac4 	bl	80019ee <serial_output_string>
      	}

      	display_number(0);
 8000466:	2000      	movs	r0, #0
 8000468:	f001 f894 	bl	8001594 <display_number>
        game->game_over = 1;
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	2201      	movs	r2, #1
 8000470:	631a      	str	r2, [r3, #48]	@ 0x30
        //timer_disable();
        return 1;
 8000472:	2301      	movs	r3, #1
 8000474:	e000      	b.n	8000478 <check_game_over+0x4c>
    }
    return 0;
 8000476:	2300      	movs	r3, #0
}
 8000478:	4618      	mov	r0, r3
 800047a:	3708      	adds	r7, #8
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	20000060 	.word	0x20000060
 8000484:	080061d4 	.word	0x080061d4
 8000488:	080061e0 	.word	0x080061e0

0800048c <handle_touch>:
pad_dug[triggers.servo_controlled] = true;
*/
// =================================== Callback Functions ===================================

// Each EXTI handler calls this with the corresponding pin number
void handle_touch(uint8_t pad, GameTriggers *trigger) {
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	4603      	mov	r3, r0
 8000494:	6039      	str	r1, [r7, #0]
 8000496:	71fb      	strb	r3, [r7, #7]
	display_number(pad);
 8000498:	79fb      	ldrb	r3, [r7, #7]
 800049a:	4618      	mov	r0, r3
 800049c:	f001 f87a 	bl	8001594 <display_number>
	trigger->touchpad_pressed = pad;
 80004a0:	79fa      	ldrb	r2, [r7, #7]
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	601a      	str	r2, [r3, #0]
}
 80004a6:	bf00      	nop
 80004a8:	3708      	adds	r7, #8
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}

080004ae <output_callback>:

// Transmit callback
void output_callback() {
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0
	return;
 80004b2:	bf00      	nop
}
 80004b4:	46bd      	mov	sp, r7
 80004b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ba:	4770      	bx	lr

080004bc <input_callback>:

// Receive callback
void input_callback(char *data, uint32_t len) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
 80004c4:	6039      	str	r1, [r7, #0]

	serial_output_string((char *)"You typed: ", &USART1_PORT);
 80004c6:	4913      	ldr	r1, [pc, #76]	@ (8000514 <input_callback+0x58>)
 80004c8:	4813      	ldr	r0, [pc, #76]	@ (8000518 <input_callback+0x5c>)
 80004ca:	f001 fa90 	bl	80019ee <serial_output_string>
	serial_output_string(data, &USART1_PORT);					// Transmit back what was received
 80004ce:	4911      	ldr	r1, [pc, #68]	@ (8000514 <input_callback+0x58>)
 80004d0:	6878      	ldr	r0, [r7, #4]
 80004d2:	f001 fa8c 	bl	80019ee <serial_output_string>
	serial_output_string((char *)"\r\n", &USART1_PORT);
 80004d6:	490f      	ldr	r1, [pc, #60]	@ (8000514 <input_callback+0x58>)
 80004d8:	4810      	ldr	r0, [pc, #64]	@ (800051c <input_callback+0x60>)
 80004da:	f001 fa88 	bl	80019ee <serial_output_string>

	// Check for game start input
	char compare[] = "game start";
 80004de:	4a10      	ldr	r2, [pc, #64]	@ (8000520 <input_callback+0x64>)
 80004e0:	f107 0308 	add.w	r3, r7, #8
 80004e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80004e6:	c303      	stmia	r3!, {r0, r1}
 80004e8:	801a      	strh	r2, [r3, #0]
 80004ea:	3302      	adds	r3, #2
 80004ec:	0c12      	lsrs	r2, r2, #16
 80004ee:	701a      	strb	r2, [r3, #0]
	uint16_t test = strcmp(data, compare);
 80004f0:	f107 0308 	add.w	r3, r7, #8
 80004f4:	4619      	mov	r1, r3
 80004f6:	6878      	ldr	r0, [r7, #4]
 80004f8:	f7ff fe6a 	bl	80001d0 <strcmp>
 80004fc:	4603      	mov	r3, r0
 80004fe:	82fb      	strh	r3, [r7, #22]
	if (!test) {
 8000500:	8afb      	ldrh	r3, [r7, #22]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d102      	bne.n	800050c <input_callback+0x50>
		start_game(&game);
 8000506:	4807      	ldr	r0, [pc, #28]	@ (8000524 <input_callback+0x68>)
 8000508:	f7ff fefe 	bl	8000308 <start_game>
	}
}
 800050c:	bf00      	nop
 800050e:	3718      	adds	r7, #24
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	20000060 	.word	0x20000060
 8000518:	080061ec 	.word	0x080061ec
 800051c:	080061f8 	.word	0x080061f8
 8000520:	080061fc 	.word	0x080061fc
 8000524:	20000004 	.word	0x20000004

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b0ae      	sub	sp, #184	@ 0xb8
 800052c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052e:	f001 fefb 	bl	8002328 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000532:	f000 f959 	bl	80007e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000536:	f000 fab3 	bl	8000aa0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800053a:	f000 f9b7 	bl	80008ac <MX_I2C1_Init>
  MX_SPI1_Init();
 800053e:	f000 f9f5 	bl	800092c <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000542:	f000 fa8b 	bl	8000a5c <MX_USB_PCD_Init>
  MX_TIM2_Init();
 8000546:	f000 fa2f 	bl	80009a8 <MX_TIM2_Init>

  /* USER CODE BEGIN 2 */

  // =================================== Init ====================================
  // Serial Init
  serial_initialise(BAUD_115200, &USART1_PORT, &output_callback, &input_callback);
 800054a:	4b95      	ldr	r3, [pc, #596]	@ (80007a0 <main+0x278>)
 800054c:	4a95      	ldr	r2, [pc, #596]	@ (80007a4 <main+0x27c>)
 800054e:	4996      	ldr	r1, [pc, #600]	@ (80007a8 <main+0x280>)
 8000550:	2004      	movs	r0, #4
 8000552:	f001 f9af 	bl	80018b4 <serial_initialise>
  enable_interrupts(&USART1_PORT);
 8000556:	4894      	ldr	r0, [pc, #592]	@ (80007a8 <main+0x280>)
 8000558:	f001 fa6c 	bl	8001a34 <enable_interrupts>

  // Touch Init
  initialise_touch();
 800055c:	f000 ff8e 	bl	800147c <initialise_touch>
  enable_touch_interrupts();
 8000560:	f000 ffc6 	bl	80014f0 <enable_touch_interrupts>
  touch_register_callback((touch_callback_t)handle_touch, &triggers);
 8000564:	4991      	ldr	r1, [pc, #580]	@ (80007ac <main+0x284>)
 8000566:	4892      	ldr	r0, [pc, #584]	@ (80007b0 <main+0x288>)
 8000568:	f000 fffe 	bl	8001568 <touch_register_callback>

  GPIO *pot = init_port(PORT_A, ANALOG, 4, 6);
 800056c:	2306      	movs	r3, #6
 800056e:	2204      	movs	r2, #4
 8000570:	2102      	movs	r1, #2
 8000572:	2000      	movs	r0, #0
 8000574:	f000 fe84 	bl	8001280 <init_port>
 8000578:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
  GPIO *pot = init_port(A, ANALOG, 4, 6);
  uint16_t analog_out[2];
*/

  //Init servo-driver
  servoDriverObj *driver = init_servo_driver(0x40);
 800057c:	2040      	movs	r0, #64	@ 0x40
 800057e:	f001 fa74 	bl	8001a6a <init_servo_driver>
 8000582:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0

  float master_angle = 0.0f;
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  //manager was initialized eariler (for touch_pad handler to reference)
  manager = init_door_manager(8, &master_angle, driver, 8);
 800058e:	f107 0184 	add.w	r1, r7, #132	@ 0x84
 8000592:	2308      	movs	r3, #8
 8000594:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8000598:	2008      	movs	r0, #8
 800059a:	f000 fcbf 	bl	8000f1c <init_door_manager>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a84      	ldr	r2, [pc, #528]	@ (80007b4 <main+0x28c>)
 80005a2:	6013      	str	r3, [r2, #0]

  //Servo ROM test
  door_manager_set_angle(manager, 0, 80.0f);
 80005a4:	4b83      	ldr	r3, [pc, #524]	@ (80007b4 <main+0x28c>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	ed9f 0a83 	vldr	s0, [pc, #524]	@ 80007b8 <main+0x290>
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 fcfc 	bl	8000fac <door_manager_set_angle>
  door_manager_set_angle(manager, 1, 80.0f);
 80005b4:	4b7f      	ldr	r3, [pc, #508]	@ (80007b4 <main+0x28c>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	ed9f 0a7f 	vldr	s0, [pc, #508]	@ 80007b8 <main+0x290>
 80005bc:	2101      	movs	r1, #1
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 fcf4 	bl	8000fac <door_manager_set_angle>
  door_manager_update(manager);
 80005c4:	4b7b      	ldr	r3, [pc, #492]	@ (80007b4 <main+0x28c>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 fd43 	bl	8001054 <door_manager_update>
  HAL_Delay(500);
 80005ce:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005d2:	f001 ff0f 	bl	80023f4 <HAL_Delay>

  door_manager_set_angle(manager, 0, 0.0f);
 80005d6:	4b77      	ldr	r3, [pc, #476]	@ (80007b4 <main+0x28c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	ed9f 0a78 	vldr	s0, [pc, #480]	@ 80007bc <main+0x294>
 80005de:	2100      	movs	r1, #0
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 fce3 	bl	8000fac <door_manager_set_angle>
  door_manager_set_angle(manager, 1, 0.0f);
 80005e6:	4b73      	ldr	r3, [pc, #460]	@ (80007b4 <main+0x28c>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	ed9f 0a74 	vldr	s0, [pc, #464]	@ 80007bc <main+0x294>
 80005ee:	2101      	movs	r1, #1
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 fcdb 	bl	8000fac <door_manager_set_angle>
  door_manager_update(manager);
 80005f6:	4b6f      	ldr	r3, [pc, #444]	@ (80007b4 <main+0x28c>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 fd2a 	bl	8001054 <door_manager_update>
  HAL_Delay(1000);
 8000600:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000604:	f001 fef6 	bl	80023f4 <HAL_Delay>

  const float SPEED = 1.2;
 8000608:	4b6d      	ldr	r3, [pc, #436]	@ (80007c0 <main+0x298>)
 800060a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  const int PAUSE = 20;
 800060e:	2314      	movs	r3, #20
 8000610:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  transmit_game_state();
 8000614:	f7ff fe3c 	bl	8000290 <transmit_game_state>

  // =================================== Game Loop ====================================
  while (1)
 {
  	// Wait for game start
  	if (game.game_over) {
 8000618:	4b6a      	ldr	r3, [pc, #424]	@ (80007c4 <main+0x29c>)
 800061a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061c:	2b00      	cmp	r3, #0
 800061e:	f040 80ba 	bne.w	8000796 <main+0x26e>

  		continue;
  	}

  	int check = check_game_over(&game);
 8000622:	4868      	ldr	r0, [pc, #416]	@ (80007c4 <main+0x29c>)
 8000624:	f7ff ff02 	bl	800042c <check_game_over>
 8000628:	4603      	mov	r3, r0
 800062a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  	if (check == 1) {
 800062e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000632:	2b01      	cmp	r3, #1
 8000634:	f000 80b1 	beq.w	800079a <main+0x272>
  		continue;
  	}

    if (triggers.touchpad_pressed != -1) {
 8000638:	4b5c      	ldr	r3, [pc, #368]	@ (80007ac <main+0x284>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000640:	d0ea      	beq.n	8000618 <main+0xf0>
    	triggers.servo_controlled = triggers.touchpad_pressed;
 8000642:	4b5a      	ldr	r3, [pc, #360]	@ (80007ac <main+0x284>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a59      	ldr	r2, [pc, #356]	@ (80007ac <main+0x284>)
 8000648:	60d3      	str	r3, [r2, #12]
        transmit_game_state();
 800064a:	f7ff fe21 	bl	8000290 <transmit_game_state>

        char buffer[64];
        sprintf(buffer, "touchpad %d chosen, door %d being controlled!\r\n", triggers.touchpad_pressed,  triggers.servo_controlled);
 800064e:	4b57      	ldr	r3, [pc, #348]	@ (80007ac <main+0x284>)
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	4b56      	ldr	r3, [pc, #344]	@ (80007ac <main+0x284>)
 8000654:	68db      	ldr	r3, [r3, #12]
 8000656:	1d38      	adds	r0, r7, #4
 8000658:	495b      	ldr	r1, [pc, #364]	@ (80007c8 <main+0x2a0>)
 800065a:	f005 f999 	bl	8005990 <siprintf>
        serial_output_string(buffer, &USART1_PORT);
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	4951      	ldr	r1, [pc, #324]	@ (80007a8 <main+0x280>)
 8000662:	4618      	mov	r0, r3
 8000664:	f001 f9c3 	bl	80019ee <serial_output_string>

        if (triggers.servo_controlled != -1 && triggers.servo_controlled != last_servo_selection) {
 8000668:	4b50      	ldr	r3, [pc, #320]	@ (80007ac <main+0x284>)
 800066a:	68db      	ldr	r3, [r3, #12]
 800066c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000670:	d0d2      	beq.n	8000618 <main+0xf0>
 8000672:	4b4e      	ldr	r3, [pc, #312]	@ (80007ac <main+0x284>)
 8000674:	68da      	ldr	r2, [r3, #12]
 8000676:	4b55      	ldr	r3, [pc, #340]	@ (80007cc <main+0x2a4>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	429a      	cmp	r2, r3
 800067c:	d0cc      	beq.n	8000618 <main+0xf0>

        	// Run peek loop for short time
        	uint32_t peek_start = HAL_GetTick();
 800067e:	f001 fead 	bl	80023dc <HAL_GetTick>
 8000682:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
        	bool committed_dig = false;
 8000686:	2300      	movs	r3, #0
 8000688:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf

        	while (HAL_GetTick() - peek_start < 2000) {
 800068c:	e014      	b.n	80006b8 <main+0x190>

        	    door_manager_update(manager);

        	    float trimpot = map_range((float)analog_out[0], 0.0f, 4095.0f, 0.0f, 100.0f);
				*/
        		float trimpot = 11;
 800068e:	4b50      	ldr	r3, [pc, #320]	@ (80007d0 <main+0x2a8>)
 8000690:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        	    if (trimpot >= triggers.peek_threshold) {
 8000694:	4b45      	ldr	r3, [pc, #276]	@ (80007ac <main+0x284>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	ee07 3a90 	vmov	s15, r3
 800069c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006a0:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 80006a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ac:	da00      	bge.n	80006b0 <main+0x188>
 80006ae:	e003      	b.n	80006b8 <main+0x190>
        	    	 committed_dig = true;
 80006b0:	2301      	movs	r3, #1
 80006b2:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
        	         break;
 80006b6:	e008      	b.n	80006ca <main+0x1a2>
        	while (HAL_GetTick() - peek_start < 2000) {
 80006b8:	f001 fe90 	bl	80023dc <HAL_GetTick>
 80006bc:	4602      	mov	r2, r0
 80006be:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80006c2:	1ad3      	subs	r3, r2, r3
 80006c4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80006c8:	d3e1      	bcc.n	800068e <main+0x166>
        	    }
          	}
        	// Now process peek or dig
        	if (committed_dig) {
 80006ca:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d038      	beq.n	8000744 <main+0x21c>
        		// Dig
        	    bool success = false;
 80006d2:	2300      	movs	r3, #0
 80006d4:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
        	    for (int i = 0; i < 6; i++) {
 80006d8:	2300      	movs	r3, #0
 80006da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80006de:	e011      	b.n	8000704 <main+0x1dc>
        	    	if (game.correct_servos[i] == triggers.servo_controlled) {
 80006e0:	4a38      	ldr	r2, [pc, #224]	@ (80007c4 <main+0x29c>)
 80006e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80006e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006ea:	4b30      	ldr	r3, [pc, #192]	@ (80007ac <main+0x284>)
 80006ec:	68db      	ldr	r3, [r3, #12]
 80006ee:	429a      	cmp	r2, r3
 80006f0:	d103      	bne.n	80006fa <main+0x1d2>
        	    		success = true;
 80006f2:	2301      	movs	r3, #1
 80006f4:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
        	            break;
 80006f8:	e008      	b.n	800070c <main+0x1e4>
        	    for (int i = 0; i < 6; i++) {
 80006fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80006fe:	3301      	adds	r3, #1
 8000700:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000704:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000708:	2b05      	cmp	r3, #5
 800070a:	dde9      	ble.n	80006e0 <main+0x1b8>
        	        }
        	    }

        	    update_game_state(success ? 1 : 0, &game, &triggers);
 800070c:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 8000710:	4a26      	ldr	r2, [pc, #152]	@ (80007ac <main+0x284>)
 8000712:	492c      	ldr	r1, [pc, #176]	@ (80007c4 <main+0x29c>)
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff fe57 	bl	80003c8 <update_game_state>
        	    char idk[64];
        	    sprintf(idk, "DIG %s at pad %d\r\n", success ? "SUCCESS" : "FAIL", triggers.servo_controlled);
 800071a:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <main+0x1fe>
 8000722:	4a2c      	ldr	r2, [pc, #176]	@ (80007d4 <main+0x2ac>)
 8000724:	e000      	b.n	8000728 <main+0x200>
 8000726:	4a2c      	ldr	r2, [pc, #176]	@ (80007d8 <main+0x2b0>)
 8000728:	4b20      	ldr	r3, [pc, #128]	@ (80007ac <main+0x284>)
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8000730:	492a      	ldr	r1, [pc, #168]	@ (80007dc <main+0x2b4>)
 8000732:	f005 f92d 	bl	8005990 <siprintf>
        	    serial_output_string(idk, &USART1_PORT);
 8000736:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800073a:	491b      	ldr	r1, [pc, #108]	@ (80007a8 <main+0x280>)
 800073c:	4618      	mov	r0, r3
 800073e:	f001 f956 	bl	80019ee <serial_output_string>
 8000742:	e008      	b.n	8000756 <main+0x22e>

             } else {
            	 game.peeks_used++;
 8000744:	4b1f      	ldr	r3, [pc, #124]	@ (80007c4 <main+0x29c>)
 8000746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000748:	3301      	adds	r3, #1
 800074a:	4a1e      	ldr	r2, [pc, #120]	@ (80007c4 <main+0x29c>)
 800074c:	6293      	str	r3, [r2, #40]	@ 0x28
           		 serial_output_string((char *) "PEEK ONLY\r\n", &USART1_PORT);
 800074e:	4916      	ldr	r1, [pc, #88]	@ (80007a8 <main+0x280>)
 8000750:	4823      	ldr	r0, [pc, #140]	@ (80007e0 <main+0x2b8>)
 8000752:	f001 f94c 	bl	80019ee <serial_output_string>

             }

        	 triggers.touchpad_pressed = -1;
 8000756:	4b15      	ldr	r3, [pc, #84]	@ (80007ac <main+0x284>)
 8000758:	f04f 32ff 	mov.w	r2, #4294967295
 800075c:	601a      	str	r2, [r3, #0]
        	 last_servo_selection = triggers.servo_controlled;
 800075e:	4b13      	ldr	r3, [pc, #76]	@ (80007ac <main+0x284>)
 8000760:	68db      	ldr	r3, [r3, #12]
 8000762:	4a1a      	ldr	r2, [pc, #104]	@ (80007cc <main+0x2a4>)
 8000764:	6013      	str	r3, [r2, #0]
        	 triggers.servo_controlled = -1;
 8000766:	4b11      	ldr	r3, [pc, #68]	@ (80007ac <main+0x284>)
 8000768:	f04f 32ff 	mov.w	r2, #4294967295
 800076c:	60da      	str	r2, [r3, #12]

        	 char yes[64];
        	 sprintf(yes, "touchpad reset to %d, servo %d, previous servo %d\r\n", triggers.touchpad_pressed, triggers.servo_controlled, last_servo_selection);
 800076e:	4b0f      	ldr	r3, [pc, #60]	@ (80007ac <main+0x284>)
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	4b0e      	ldr	r3, [pc, #56]	@ (80007ac <main+0x284>)
 8000774:	68d9      	ldr	r1, [r3, #12]
 8000776:	4b15      	ldr	r3, [pc, #84]	@ (80007cc <main+0x2a4>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	460b      	mov	r3, r1
 8000782:	4918      	ldr	r1, [pc, #96]	@ (80007e4 <main+0x2bc>)
 8000784:	f005 f904 	bl	8005990 <siprintf>
        	 serial_output_string(yes, &USART1_PORT);
 8000788:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800078c:	4906      	ldr	r1, [pc, #24]	@ (80007a8 <main+0x280>)
 800078e:	4618      	mov	r0, r3
 8000790:	f001 f92d 	bl	80019ee <serial_output_string>
 8000794:	e740      	b.n	8000618 <main+0xf0>
  		continue;
 8000796:	bf00      	nop
 8000798:	e73e      	b.n	8000618 <main+0xf0>
  		continue;
 800079a:	bf00      	nop
 {
 800079c:	e73c      	b.n	8000618 <main+0xf0>
 800079e:	bf00      	nop
 80007a0:	080004bd 	.word	0x080004bd
 80007a4:	080004af 	.word	0x080004af
 80007a8:	20000060 	.word	0x20000060
 80007ac:	2000003c 	.word	0x2000003c
 80007b0:	0800048d 	.word	0x0800048d
 80007b4:	20000560 	.word	0x20000560
 80007b8:	42a00000 	.word	0x42a00000
 80007bc:	00000000 	.word	0x00000000
 80007c0:	3f99999a 	.word	0x3f99999a
 80007c4:	20000004 	.word	0x20000004
 80007c8:	08006208 	.word	0x08006208
 80007cc:	20000000 	.word	0x20000000
 80007d0:	41300000 	.word	0x41300000
 80007d4:	08006238 	.word	0x08006238
 80007d8:	08006240 	.word	0x08006240
 80007dc:	08006248 	.word	0x08006248
 80007e0:	0800625c 	.word	0x0800625c
 80007e4:	08006268 	.word	0x08006268

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b09e      	sub	sp, #120	@ 0x78
 80007ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80007f2:	2228      	movs	r2, #40	@ 0x28
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f005 f8ea 	bl	80059d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800080c:	463b      	mov	r3, r7
 800080e:	223c      	movs	r2, #60	@ 0x3c
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f005 f8dc 	bl	80059d0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000818:	2303      	movs	r3, #3
 800081a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800081c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000820:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000826:	2301      	movs	r3, #1
 8000828:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800082a:	2310      	movs	r3, #16
 800082c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082e:	2302      	movs	r3, #2
 8000830:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000832:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000836:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000838:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800083c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000842:	4618      	mov	r0, r3
 8000844:	f002 fdee 	bl	8003424 <HAL_RCC_OscConfig>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800084e:	f000 f9a5 	bl	8000b9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000852:	230f      	movs	r3, #15
 8000854:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000856:	2302      	movs	r3, #2
 8000858:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800085e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000862:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000868:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800086c:	2101      	movs	r1, #1
 800086e:	4618      	mov	r0, r3
 8000870:	f003 fe16 	bl	80044a0 <HAL_RCC_ClockConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800087a:	f000 f98f 	bl	8000b9c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 800087e:	4b0a      	ldr	r3, [pc, #40]	@ (80008a8 <SystemClock_Config+0xc0>)
 8000880:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000882:	2300      	movs	r3, #0
 8000884:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000886:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800088a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800088c:	463b      	mov	r3, r7
 800088e:	4618      	mov	r0, r3
 8000890:	f003 ffd6 	bl	8004840 <HAL_RCCEx_PeriphCLKConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800089a:	f000 f97f 	bl	8000b9c <Error_Handler>
  }
}
 800089e:	bf00      	nop
 80008a0:	3778      	adds	r7, #120	@ 0x78
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	00020020 	.word	0x00020020

080008ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000920 <MX_I2C1_Init+0x74>)
 80008b2:	4a1c      	ldr	r2, [pc, #112]	@ (8000924 <MX_I2C1_Init+0x78>)
 80008b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 80008b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000920 <MX_I2C1_Init+0x74>)
 80008b8:	4a1b      	ldr	r2, [pc, #108]	@ (8000928 <MX_I2C1_Init+0x7c>)
 80008ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008bc:	4b18      	ldr	r3, [pc, #96]	@ (8000920 <MX_I2C1_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008c2:	4b17      	ldr	r3, [pc, #92]	@ (8000920 <MX_I2C1_Init+0x74>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c8:	4b15      	ldr	r3, [pc, #84]	@ (8000920 <MX_I2C1_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008ce:	4b14      	ldr	r3, [pc, #80]	@ (8000920 <MX_I2C1_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008d4:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <MX_I2C1_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008da:	4b11      	ldr	r3, [pc, #68]	@ (8000920 <MX_I2C1_Init+0x74>)
 80008dc:	2200      	movs	r2, #0
 80008de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000920 <MX_I2C1_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008e6:	480e      	ldr	r0, [pc, #56]	@ (8000920 <MX_I2C1_Init+0x74>)
 80008e8:	f002 f820 	bl	800292c <HAL_I2C_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008f2:	f000 f953 	bl	8000b9c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008f6:	2100      	movs	r1, #0
 80008f8:	4809      	ldr	r0, [pc, #36]	@ (8000920 <MX_I2C1_Init+0x74>)
 80008fa:	f002 fc35 	bl	8003168 <HAL_I2CEx_ConfigAnalogFilter>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000904:	f000 f94a 	bl	8000b9c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000908:	2100      	movs	r1, #0
 800090a:	4805      	ldr	r0, [pc, #20]	@ (8000920 <MX_I2C1_Init+0x74>)
 800090c:	f002 fc77 	bl	80031fe <HAL_I2CEx_ConfigDigitalFilter>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000916:	f000 f941 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000188 	.word	0x20000188
 8000924:	40005400 	.word	0x40005400
 8000928:	00201d2b 	.word	0x00201d2b

0800092c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000930:	4b1b      	ldr	r3, [pc, #108]	@ (80009a0 <MX_SPI1_Init+0x74>)
 8000932:	4a1c      	ldr	r2, [pc, #112]	@ (80009a4 <MX_SPI1_Init+0x78>)
 8000934:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000936:	4b1a      	ldr	r3, [pc, #104]	@ (80009a0 <MX_SPI1_Init+0x74>)
 8000938:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800093c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800093e:	4b18      	ldr	r3, [pc, #96]	@ (80009a0 <MX_SPI1_Init+0x74>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000944:	4b16      	ldr	r3, [pc, #88]	@ (80009a0 <MX_SPI1_Init+0x74>)
 8000946:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800094a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800094c:	4b14      	ldr	r3, [pc, #80]	@ (80009a0 <MX_SPI1_Init+0x74>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000952:	4b13      	ldr	r3, [pc, #76]	@ (80009a0 <MX_SPI1_Init+0x74>)
 8000954:	2200      	movs	r2, #0
 8000956:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000958:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <MX_SPI1_Init+0x74>)
 800095a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800095e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000960:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <MX_SPI1_Init+0x74>)
 8000962:	2208      	movs	r2, #8
 8000964:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000966:	4b0e      	ldr	r3, [pc, #56]	@ (80009a0 <MX_SPI1_Init+0x74>)
 8000968:	2200      	movs	r2, #0
 800096a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800096c:	4b0c      	ldr	r3, [pc, #48]	@ (80009a0 <MX_SPI1_Init+0x74>)
 800096e:	2200      	movs	r2, #0
 8000970:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000972:	4b0b      	ldr	r3, [pc, #44]	@ (80009a0 <MX_SPI1_Init+0x74>)
 8000974:	2200      	movs	r2, #0
 8000976:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000978:	4b09      	ldr	r3, [pc, #36]	@ (80009a0 <MX_SPI1_Init+0x74>)
 800097a:	2207      	movs	r2, #7
 800097c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800097e:	4b08      	ldr	r3, [pc, #32]	@ (80009a0 <MX_SPI1_Init+0x74>)
 8000980:	2200      	movs	r2, #0
 8000982:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000984:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <MX_SPI1_Init+0x74>)
 8000986:	2208      	movs	r2, #8
 8000988:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800098a:	4805      	ldr	r0, [pc, #20]	@ (80009a0 <MX_SPI1_Init+0x74>)
 800098c:	f004 f908 	bl	8004ba0 <HAL_SPI_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000996:	f000 f901 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	200001dc 	.word	0x200001dc
 80009a4:	40013000 	.word	0x40013000

080009a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	@ 0x28
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ba:	463b      	mov	r3, r7
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
 80009c8:	615a      	str	r2, [r3, #20]
 80009ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009cc:	4b22      	ldr	r3, [pc, #136]	@ (8000a58 <MX_TIM2_Init+0xb0>)
 80009ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 23;
 80009d4:	4b20      	ldr	r3, [pc, #128]	@ (8000a58 <MX_TIM2_Init+0xb0>)
 80009d6:	2217      	movs	r2, #23
 80009d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009da:	4b1f      	ldr	r3, [pc, #124]	@ (8000a58 <MX_TIM2_Init+0xb0>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80009e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a58 <MX_TIM2_Init+0xb0>)
 80009e2:	f04f 32ff 	mov.w	r2, #4294967295
 80009e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a58 <MX_TIM2_Init+0xb0>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000a58 <MX_TIM2_Init+0xb0>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009f4:	4818      	ldr	r0, [pc, #96]	@ (8000a58 <MX_TIM2_Init+0xb0>)
 80009f6:	f004 f97e 	bl	8004cf6 <HAL_TIM_PWM_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000a00:	f000 f8cc 	bl	8000b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	4811      	ldr	r0, [pc, #68]	@ (8000a58 <MX_TIM2_Init+0xb0>)
 8000a14:	f004 fe4c 	bl	80056b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000a1e:	f000 f8bd 	bl	8000b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a22:	2360      	movs	r3, #96	@ 0x60
 8000a24:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a32:	463b      	mov	r3, r7
 8000a34:	2200      	movs	r2, #0
 8000a36:	4619      	mov	r1, r3
 8000a38:	4807      	ldr	r0, [pc, #28]	@ (8000a58 <MX_TIM2_Init+0xb0>)
 8000a3a:	f004 f9b3 	bl	8004da4 <HAL_TIM_PWM_ConfigChannel>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000a44:	f000 f8aa 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a48:	4803      	ldr	r0, [pc, #12]	@ (8000a58 <MX_TIM2_Init+0xb0>)
 8000a4a:	f000 f975 	bl	8000d38 <HAL_TIM_MspPostInit>

}
 8000a4e:	bf00      	nop
 8000a50:	3728      	adds	r7, #40	@ 0x28
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000240 	.word	0x20000240

08000a5c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000a60:	4b0d      	ldr	r3, [pc, #52]	@ (8000a98 <MX_USB_PCD_Init+0x3c>)
 8000a62:	4a0e      	ldr	r2, [pc, #56]	@ (8000a9c <MX_USB_PCD_Init+0x40>)
 8000a64:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000a66:	4b0c      	ldr	r3, [pc, #48]	@ (8000a98 <MX_USB_PCD_Init+0x3c>)
 8000a68:	2208      	movs	r2, #8
 8000a6a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a98 <MX_USB_PCD_Init+0x3c>)
 8000a6e:	2202      	movs	r2, #2
 8000a70:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a72:	4b09      	ldr	r3, [pc, #36]	@ (8000a98 <MX_USB_PCD_Init+0x3c>)
 8000a74:	2202      	movs	r2, #2
 8000a76:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000a78:	4b07      	ldr	r3, [pc, #28]	@ (8000a98 <MX_USB_PCD_Init+0x3c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000a7e:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <MX_USB_PCD_Init+0x3c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000a84:	4804      	ldr	r0, [pc, #16]	@ (8000a98 <MX_USB_PCD_Init+0x3c>)
 8000a86:	f002 fc06 	bl	8003296 <HAL_PCD_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000a90:	f000 f884 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	2000028c 	.word	0x2000028c
 8000a9c:	40005c00 	.word	0x40005c00

08000aa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	@ 0x28
 8000aa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ab6:	4b37      	ldr	r3, [pc, #220]	@ (8000b94 <MX_GPIO_Init+0xf4>)
 8000ab8:	695b      	ldr	r3, [r3, #20]
 8000aba:	4a36      	ldr	r2, [pc, #216]	@ (8000b94 <MX_GPIO_Init+0xf4>)
 8000abc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ac0:	6153      	str	r3, [r2, #20]
 8000ac2:	4b34      	ldr	r3, [pc, #208]	@ (8000b94 <MX_GPIO_Init+0xf4>)
 8000ac4:	695b      	ldr	r3, [r3, #20]
 8000ac6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ace:	4b31      	ldr	r3, [pc, #196]	@ (8000b94 <MX_GPIO_Init+0xf4>)
 8000ad0:	695b      	ldr	r3, [r3, #20]
 8000ad2:	4a30      	ldr	r2, [pc, #192]	@ (8000b94 <MX_GPIO_Init+0xf4>)
 8000ad4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000ad8:	6153      	str	r3, [r2, #20]
 8000ada:	4b2e      	ldr	r3, [pc, #184]	@ (8000b94 <MX_GPIO_Init+0xf4>)
 8000adc:	695b      	ldr	r3, [r3, #20]
 8000ade:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ae6:	4b2b      	ldr	r3, [pc, #172]	@ (8000b94 <MX_GPIO_Init+0xf4>)
 8000ae8:	695b      	ldr	r3, [r3, #20]
 8000aea:	4a2a      	ldr	r2, [pc, #168]	@ (8000b94 <MX_GPIO_Init+0xf4>)
 8000aec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000af0:	6153      	str	r3, [r2, #20]
 8000af2:	4b28      	ldr	r3, [pc, #160]	@ (8000b94 <MX_GPIO_Init+0xf4>)
 8000af4:	695b      	ldr	r3, [r3, #20]
 8000af6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	4b25      	ldr	r3, [pc, #148]	@ (8000b94 <MX_GPIO_Init+0xf4>)
 8000b00:	695b      	ldr	r3, [r3, #20]
 8000b02:	4a24      	ldr	r2, [pc, #144]	@ (8000b94 <MX_GPIO_Init+0xf4>)
 8000b04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b08:	6153      	str	r3, [r2, #20]
 8000b0a:	4b22      	ldr	r3, [pc, #136]	@ (8000b94 <MX_GPIO_Init+0xf4>)
 8000b0c:	695b      	ldr	r3, [r3, #20]
 8000b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b16:	4b1f      	ldr	r3, [pc, #124]	@ (8000b94 <MX_GPIO_Init+0xf4>)
 8000b18:	695b      	ldr	r3, [r3, #20]
 8000b1a:	4a1e      	ldr	r2, [pc, #120]	@ (8000b94 <MX_GPIO_Init+0xf4>)
 8000b1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b20:	6153      	str	r3, [r2, #20]
 8000b22:	4b1c      	ldr	r3, [pc, #112]	@ (8000b94 <MX_GPIO_Init+0xf4>)
 8000b24:	695b      	ldr	r3, [r3, #20]
 8000b26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8000b34:	4818      	ldr	r0, [pc, #96]	@ (8000b98 <MX_GPIO_Init+0xf8>)
 8000b36:	f001 fee1 	bl	80028fc <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000b3a:	2337      	movs	r3, #55	@ 0x37
 8000b3c:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b3e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4812      	ldr	r0, [pc, #72]	@ (8000b98 <MX_GPIO_Init+0xf8>)
 8000b50:	f001 fd5a 	bl	8002608 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000b54:	f64f 7308 	movw	r3, #65288	@ 0xff08
 8000b58:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	480a      	ldr	r0, [pc, #40]	@ (8000b98 <MX_GPIO_Init+0xf8>)
 8000b6e:	f001 fd4b 	bl	8002608 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b72:	2301      	movs	r3, #1
 8000b74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	4619      	mov	r1, r3
 8000b84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b88:	f001 fd3e 	bl	8002608 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b8c:	bf00      	nop
 8000b8e:	3728      	adds	r7, #40	@ 0x28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40021000 	.word	0x40021000
 8000b98:	48001000 	.word	0x48001000

08000b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba0:	b672      	cpsid	i
}
 8000ba2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <Error_Handler+0x8>

08000ba8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bae:	4b0f      	ldr	r3, [pc, #60]	@ (8000bec <HAL_MspInit+0x44>)
 8000bb0:	699b      	ldr	r3, [r3, #24]
 8000bb2:	4a0e      	ldr	r2, [pc, #56]	@ (8000bec <HAL_MspInit+0x44>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6193      	str	r3, [r2, #24]
 8000bba:	4b0c      	ldr	r3, [pc, #48]	@ (8000bec <HAL_MspInit+0x44>)
 8000bbc:	699b      	ldr	r3, [r3, #24]
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc6:	4b09      	ldr	r3, [pc, #36]	@ (8000bec <HAL_MspInit+0x44>)
 8000bc8:	69db      	ldr	r3, [r3, #28]
 8000bca:	4a08      	ldr	r2, [pc, #32]	@ (8000bec <HAL_MspInit+0x44>)
 8000bcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bd0:	61d3      	str	r3, [r2, #28]
 8000bd2:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <HAL_MspInit+0x44>)
 8000bd4:	69db      	ldr	r3, [r3, #28]
 8000bd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bda:	603b      	str	r3, [r7, #0]
 8000bdc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bde:	2007      	movs	r0, #7
 8000be0:	f001 fcde 	bl	80025a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40021000 	.word	0x40021000

08000bf0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	@ 0x28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a17      	ldr	r2, [pc, #92]	@ (8000c6c <HAL_I2C_MspInit+0x7c>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d127      	bne.n	8000c62 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c12:	4b17      	ldr	r3, [pc, #92]	@ (8000c70 <HAL_I2C_MspInit+0x80>)
 8000c14:	695b      	ldr	r3, [r3, #20]
 8000c16:	4a16      	ldr	r2, [pc, #88]	@ (8000c70 <HAL_I2C_MspInit+0x80>)
 8000c18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c1c:	6153      	str	r3, [r2, #20]
 8000c1e:	4b14      	ldr	r3, [pc, #80]	@ (8000c70 <HAL_I2C_MspInit+0x80>)
 8000c20:	695b      	ldr	r3, [r3, #20]
 8000c22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c26:	613b      	str	r3, [r7, #16]
 8000c28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c2a:	23c0      	movs	r3, #192	@ 0xc0
 8000c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c2e:	2312      	movs	r3, #18
 8000c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c36:	2303      	movs	r3, #3
 8000c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c3a:	2304      	movs	r3, #4
 8000c3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	480b      	ldr	r0, [pc, #44]	@ (8000c74 <HAL_I2C_MspInit+0x84>)
 8000c46:	f001 fcdf 	bl	8002608 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c4a:	4b09      	ldr	r3, [pc, #36]	@ (8000c70 <HAL_I2C_MspInit+0x80>)
 8000c4c:	69db      	ldr	r3, [r3, #28]
 8000c4e:	4a08      	ldr	r2, [pc, #32]	@ (8000c70 <HAL_I2C_MspInit+0x80>)
 8000c50:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c54:	61d3      	str	r3, [r2, #28]
 8000c56:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <HAL_I2C_MspInit+0x80>)
 8000c58:	69db      	ldr	r3, [r3, #28]
 8000c5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c62:	bf00      	nop
 8000c64:	3728      	adds	r7, #40	@ 0x28
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40005400 	.word	0x40005400
 8000c70:	40021000 	.word	0x40021000
 8000c74:	48000400 	.word	0x48000400

08000c78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08a      	sub	sp, #40	@ 0x28
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a17      	ldr	r2, [pc, #92]	@ (8000cf4 <HAL_SPI_MspInit+0x7c>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d128      	bne.n	8000cec <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c9a:	4b17      	ldr	r3, [pc, #92]	@ (8000cf8 <HAL_SPI_MspInit+0x80>)
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	4a16      	ldr	r2, [pc, #88]	@ (8000cf8 <HAL_SPI_MspInit+0x80>)
 8000ca0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ca4:	6193      	str	r3, [r2, #24]
 8000ca6:	4b14      	ldr	r3, [pc, #80]	@ (8000cf8 <HAL_SPI_MspInit+0x80>)
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb2:	4b11      	ldr	r3, [pc, #68]	@ (8000cf8 <HAL_SPI_MspInit+0x80>)
 8000cb4:	695b      	ldr	r3, [r3, #20]
 8000cb6:	4a10      	ldr	r2, [pc, #64]	@ (8000cf8 <HAL_SPI_MspInit+0x80>)
 8000cb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cbc:	6153      	str	r3, [r2, #20]
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf8 <HAL_SPI_MspInit+0x80>)
 8000cc0:	695b      	ldr	r3, [r3, #20]
 8000cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000cca:	23e0      	movs	r3, #224	@ 0xe0
 8000ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cda:	2305      	movs	r3, #5
 8000cdc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ce8:	f001 fc8e 	bl	8002608 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000cec:	bf00      	nop
 8000cee:	3728      	adds	r7, #40	@ 0x28
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40013000 	.word	0x40013000
 8000cf8:	40021000 	.word	0x40021000

08000cfc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d0c:	d10b      	bne.n	8000d26 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d0e:	4b09      	ldr	r3, [pc, #36]	@ (8000d34 <HAL_TIM_PWM_MspInit+0x38>)
 8000d10:	69db      	ldr	r3, [r3, #28]
 8000d12:	4a08      	ldr	r2, [pc, #32]	@ (8000d34 <HAL_TIM_PWM_MspInit+0x38>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	61d3      	str	r3, [r2, #28]
 8000d1a:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <HAL_TIM_PWM_MspInit+0x38>)
 8000d1c:	69db      	ldr	r3, [r3, #28]
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000d26:	bf00      	nop
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	40021000 	.word	0x40021000

08000d38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b088      	sub	sp, #32
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 030c 	add.w	r3, r7, #12
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d58:	d11d      	bne.n	8000d96 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	4b11      	ldr	r3, [pc, #68]	@ (8000da0 <HAL_TIM_MspPostInit+0x68>)
 8000d5c:	695b      	ldr	r3, [r3, #20]
 8000d5e:	4a10      	ldr	r2, [pc, #64]	@ (8000da0 <HAL_TIM_MspPostInit+0x68>)
 8000d60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d64:	6153      	str	r3, [r2, #20]
 8000d66:	4b0e      	ldr	r3, [pc, #56]	@ (8000da0 <HAL_TIM_MspPostInit+0x68>)
 8000d68:	695b      	ldr	r3, [r3, #20]
 8000d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d76:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d84:	2301      	movs	r3, #1
 8000d86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d88:	f107 030c 	add.w	r3, r7, #12
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d92:	f001 fc39 	bl	8002608 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d96:	bf00      	nop
 8000d98:	3720      	adds	r7, #32
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40021000 	.word	0x40021000

08000da4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	@ 0x28
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a18      	ldr	r2, [pc, #96]	@ (8000e24 <HAL_PCD_MspInit+0x80>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d129      	bne.n	8000e1a <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc6:	4b18      	ldr	r3, [pc, #96]	@ (8000e28 <HAL_PCD_MspInit+0x84>)
 8000dc8:	695b      	ldr	r3, [r3, #20]
 8000dca:	4a17      	ldr	r2, [pc, #92]	@ (8000e28 <HAL_PCD_MspInit+0x84>)
 8000dcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dd0:	6153      	str	r3, [r2, #20]
 8000dd2:	4b15      	ldr	r3, [pc, #84]	@ (8000e28 <HAL_PCD_MspInit+0x84>)
 8000dd4:	695b      	ldr	r3, [r3, #20]
 8000dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000dde:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de4:	2302      	movs	r3, #2
 8000de6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dec:	2303      	movs	r3, #3
 8000dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000df0:	230e      	movs	r3, #14
 8000df2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	4619      	mov	r1, r3
 8000dfa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dfe:	f001 fc03 	bl	8002608 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000e02:	4b09      	ldr	r3, [pc, #36]	@ (8000e28 <HAL_PCD_MspInit+0x84>)
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	4a08      	ldr	r2, [pc, #32]	@ (8000e28 <HAL_PCD_MspInit+0x84>)
 8000e08:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000e0c:	61d3      	str	r3, [r2, #28]
 8000e0e:	4b06      	ldr	r3, [pc, #24]	@ (8000e28 <HAL_PCD_MspInit+0x84>)
 8000e10:	69db      	ldr	r3, [r3, #28]
 8000e12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_MspInit 1 */

  }

}
 8000e1a:	bf00      	nop
 8000e1c:	3728      	adds	r7, #40	@ 0x28
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40005c00 	.word	0x40005c00
 8000e28:	40021000 	.word	0x40021000

08000e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <NMI_Handler+0x4>

08000e34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <HardFault_Handler+0x4>

08000e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e40:	bf00      	nop
 8000e42:	e7fd      	b.n	8000e40 <MemManage_Handler+0x4>

08000e44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e48:	bf00      	nop
 8000e4a:	e7fd      	b.n	8000e48 <BusFault_Handler+0x4>

08000e4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e50:	bf00      	nop
 8000e52:	e7fd      	b.n	8000e50 <UsageFault_Handler+0x4>

08000e54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e82:	f001 fa97 	bl	80023b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
	...

08000e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e94:	4a14      	ldr	r2, [pc, #80]	@ (8000ee8 <_sbrk+0x5c>)
 8000e96:	4b15      	ldr	r3, [pc, #84]	@ (8000eec <_sbrk+0x60>)
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea0:	4b13      	ldr	r3, [pc, #76]	@ (8000ef0 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d102      	bne.n	8000eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	@ (8000ef0 <_sbrk+0x64>)
 8000eaa:	4a12      	ldr	r2, [pc, #72]	@ (8000ef4 <_sbrk+0x68>)
 8000eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eae:	4b10      	ldr	r3, [pc, #64]	@ (8000ef0 <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d207      	bcs.n	8000ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ebc:	f004 fda0 	bl	8005a00 <__errno>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	e009      	b.n	8000ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	@ (8000ef0 <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	@ (8000ef0 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	4a05      	ldr	r2, [pc, #20]	@ (8000ef0 <_sbrk+0x64>)
 8000edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	2000a000 	.word	0x2000a000
 8000eec:	00000400 	.word	0x00000400
 8000ef0:	20000564 	.word	0x20000564
 8000ef4:	20000700 	.word	0x20000700

08000ef8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000efc:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <SystemInit+0x20>)
 8000efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f02:	4a05      	ldr	r2, [pc, #20]	@ (8000f18 <SystemInit+0x20>)
 8000f04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <init_door_manager>:
} doorManagerObj;
*/


//Init door-managing object
doorManagerObj *init_door_manager(uint8_t door_count, float *master_angle_pt, servoDriverObj *driver_pt, uint8_t driver_i_offset){
 8000f1c:	b590      	push	{r4, r7, lr}
 8000f1e:	b087      	sub	sp, #28
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60b9      	str	r1, [r7, #8]
 8000f24:	607a      	str	r2, [r7, #4]
 8000f26:	461a      	mov	r2, r3
 8000f28:	4603      	mov	r3, r0
 8000f2a:	73fb      	strb	r3, [r7, #15]
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	73bb      	strb	r3, [r7, #14]
	//Allocate memory for door-manager
	doorManagerObj *door_manager_pt = malloc(sizeof(doorManagerObj));
 8000f30:	2008      	movs	r0, #8
 8000f32:	f004 fc77 	bl	8005824 <malloc>
 8000f36:	4603      	mov	r3, r0
 8000f38:	613b      	str	r3, [r7, #16]

	door_manager_pt->door_objs = malloc(sizeof(doorObj *) * door_count);
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f004 fc70 	bl	8005824 <malloc>
 8000f44:	4603      	mov	r3, r0
 8000f46:	461a      	mov	r2, r3
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	601a      	str	r2, [r3, #0]

	//Number of doors under management
	door_manager_pt->door_count = door_count;
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	7bfa      	ldrb	r2, [r7, #15]
 8000f50:	711a      	strb	r2, [r3, #4]
	//Initially none of the doors are enslaved (STABLE 0.0 default)
	door_manager_pt->curr_enslaved_i = -1;
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	22ff      	movs	r2, #255	@ 0xff
 8000f56:	715a      	strb	r2, [r3, #5]

	//Enable appropriate channels on servo-driver (driver_i_offset is base index)
	servo_driver_en_chans(driver_pt, driver_i_offset, driver_i_offset + door_count-1);
 8000f58:	7bba      	ldrb	r2, [r7, #14]
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	3b01      	subs	r3, #1
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	7bbb      	ldrb	r3, [r7, #14]
 8000f66:	4619      	mov	r1, r3
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f000 fde1 	bl	8001b30 <servo_driver_en_chans>

	//Populate door-objs
	for (uint8_t i=0; i<door_count; i++){
 8000f6e:	2300      	movs	r3, #0
 8000f70:	75fb      	strb	r3, [r7, #23]
 8000f72:	e012      	b.n	8000f9a <init_door_manager+0x7e>
		//Note: driver_i_offset is the starting index of servos in driver (ascending series)
		door_manager_pt->door_objs[i] = init_door(master_angle_pt, driver_pt, i + driver_i_offset);
 8000f74:	7dfa      	ldrb	r2, [r7, #23]
 8000f76:	7bbb      	ldrb	r3, [r7, #14]
 8000f78:	4413      	add	r3, r2
 8000f7a:	b2d9      	uxtb	r1, r3
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	7dfb      	ldrb	r3, [r7, #23]
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	18d4      	adds	r4, r2, r3
 8000f86:	460a      	mov	r2, r1
 8000f88:	6879      	ldr	r1, [r7, #4]
 8000f8a:	68b8      	ldr	r0, [r7, #8]
 8000f8c:	f000 f87f 	bl	800108e <init_door>
 8000f90:	4603      	mov	r3, r0
 8000f92:	6023      	str	r3, [r4, #0]
	for (uint8_t i=0; i<door_count; i++){
 8000f94:	7dfb      	ldrb	r3, [r7, #23]
 8000f96:	3301      	adds	r3, #1
 8000f98:	75fb      	strb	r3, [r7, #23]
 8000f9a:	7dfa      	ldrb	r2, [r7, #23]
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d3e8      	bcc.n	8000f74 <init_door_manager+0x58>
	}


	return door_manager_pt;
 8000fa2:	693b      	ldr	r3, [r7, #16]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	371c      	adds	r7, #28
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd90      	pop	{r4, r7, pc}

08000fac <door_manager_set_angle>:


}

//Set door at specified index to stable state (at a given angle)
void door_manager_set_angle(doorManagerObj *door_manager_pt, uint8_t door_i, float angle){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fba:	72fb      	strb	r3, [r7, #11]
	//Check if queried index is within legal-range
	if (0 <= door_i && door_i < door_manager_pt->door_count){
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	791b      	ldrb	r3, [r3, #4]
 8000fc0:	7afa      	ldrb	r2, [r7, #11]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d21c      	bcs.n	8001000 <door_manager_set_angle+0x54>
		if (0.0f <= angle && angle <= 80.0f){
 8000fc6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd2:	da00      	bge.n	8000fd6 <door_manager_set_angle+0x2a>
			door_set_angle_stable(door_manager_pt->door_objs[ door_i ], angle);
		}
	}
}
 8000fd4:	e014      	b.n	8001000 <door_manager_set_angle+0x54>
		if (0.0f <= angle && angle <= 80.0f){
 8000fd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fda:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001008 <door_manager_set_angle+0x5c>
 8000fde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe6:	d900      	bls.n	8000fea <door_manager_set_angle+0x3e>
}
 8000fe8:	e00a      	b.n	8001000 <door_manager_set_angle+0x54>
			door_set_angle_stable(door_manager_pt->door_objs[ door_i ], angle);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	7afb      	ldrb	r3, [r7, #11]
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	4413      	add	r3, r2
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	ed97 0a01 	vldr	s0, [r7, #4]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 f864 	bl	80010c8 <door_set_angle_stable>
}
 8001000:	bf00      	nop
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	42a00000 	.word	0x42a00000

0800100c <door_manager_reset>:


void door_manager_reset(doorManagerObj *door_manager_pt){
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	//Set all doors to stable 0.0
	for (uint8_t i=0; i<door_manager_pt->door_count; i++){
 8001014:	2300      	movs	r3, #0
 8001016:	73fb      	strb	r3, [r7, #15]
 8001018:	e00d      	b.n	8001036 <door_manager_reset+0x2a>
		door_set_angle_stable(door_manager_pt->door_objs[ i ], 0.0f);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	7bfb      	ldrb	r3, [r7, #15]
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	4413      	add	r3, r2
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8001050 <door_manager_reset+0x44>
 800102a:	4618      	mov	r0, r3
 800102c:	f000 f84c 	bl	80010c8 <door_set_angle_stable>
	for (uint8_t i=0; i<door_manager_pt->door_count; i++){
 8001030:	7bfb      	ldrb	r3, [r7, #15]
 8001032:	3301      	adds	r3, #1
 8001034:	73fb      	strb	r3, [r7, #15]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	791b      	ldrb	r3, [r3, #4]
 800103a:	7bfa      	ldrb	r2, [r7, #15]
 800103c:	429a      	cmp	r2, r3
 800103e:	d3ec      	bcc.n	800101a <door_manager_reset+0xe>
	}

	door_manager_pt->curr_enslaved_i = -1;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	22ff      	movs	r2, #255	@ 0xff
 8001044:	715a      	strb	r2, [r3, #5]

}
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	00000000 	.word	0x00000000

08001054 <door_manager_update>:


//Update (and actuate) the state of each door under management
void door_manager_update(doorManagerObj *door_manager_pt){
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0; i<door_manager_pt->door_count; i++){
 800105c:	2300      	movs	r3, #0
 800105e:	73fb      	strb	r3, [r7, #15]
 8001060:	e00b      	b.n	800107a <door_manager_update+0x26>
		door_update(door_manager_pt->door_objs[i]);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	4413      	add	r3, r2
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4618      	mov	r0, r3
 8001070:	f000 f83c 	bl	80010ec <door_update>
	for (uint8_t i=0; i<door_manager_pt->door_count; i++){
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	3301      	adds	r3, #1
 8001078:	73fb      	strb	r3, [r7, #15]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	791b      	ldrb	r3, [r3, #4]
 800107e:	7bfa      	ldrb	r2, [r7, #15]
 8001080:	429a      	cmp	r2, r3
 8001082:	d3ee      	bcc.n	8001062 <door_manager_update+0xe>
	}
}
 8001084:	bf00      	nop
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <init_door>:
extern const float STEP_SIZE = 1.0/STEP_COUNT;



//doorObj initialiser
doorObj *init_door(float *parent_angle_pt, servoDriverObj *driver_pt, uint8_t servo_index){
 800108e:	b580      	push	{r7, lr}
 8001090:	b086      	sub	sp, #24
 8001092:	af00      	add	r7, sp, #0
 8001094:	60f8      	str	r0, [r7, #12]
 8001096:	60b9      	str	r1, [r7, #8]
 8001098:	4613      	mov	r3, r2
 800109a:	71fb      	strb	r3, [r7, #7]

    //Allocate mem for door
    doorObj *door_pt = malloc(sizeof(doorObj));
 800109c:	201c      	movs	r0, #28
 800109e:	f004 fbc1 	bl	8005824 <malloc>
 80010a2:	4603      	mov	r3, r0
 80010a4:	617b      	str	r3, [r7, #20]

    door_pt->driver_pt = driver_pt;
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	68ba      	ldr	r2, [r7, #8]
 80010aa:	601a      	str	r2, [r3, #0]
    //Index of servo-channel that controls door
    door_pt->servo_index = servo_index;
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	79fa      	ldrb	r2, [r7, #7]
 80010b0:	711a      	strb	r2, [r3, #4]

    //Init state
    door_pt->state = STABLE;
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	2200      	movs	r2, #0
 80010b6:	715a      	strb	r2, [r3, #5]

    door_pt->parent_angle_pt = parent_angle_pt;
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	609a      	str	r2, [r3, #8]

    return door_pt;
 80010be:	697b      	ldr	r3, [r7, #20]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3718      	adds	r7, #24
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <door_set_angle_stable>:


//Set angle of door's servo (and state to stable)
void door_set_angle_stable(doorObj *door_pt, float angle){
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	ed87 0a00 	vstr	s0, [r7]
    door_pt->state = STABLE;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	715a      	strb	r2, [r3, #5]
    door_pt->stable_angle = angle;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	683a      	ldr	r2, [r7, #0]
 80010de:	60da      	str	r2, [r3, #12]
    return;
 80010e0:	bf00      	nop
}
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <door_update>:
    //FIX!!!!!!!
    return;
}


void door_update(doorObj *door_pt){
 80010ec:	b5b0      	push	{r4, r5, r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
    switch (door_pt->state){
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	795b      	ldrb	r3, [r3, #5]
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d025      	beq.n	8001148 <door_update+0x5c>
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	dc7b      	bgt.n	80011f8 <door_update+0x10c>
 8001100:	2b00      	cmp	r3, #0
 8001102:	d002      	beq.n	800110a <door_update+0x1e>
 8001104:	2b01      	cmp	r3, #1
 8001106:	d038      	beq.n	800117a <door_update+0x8e>
                door_set_angle_stable(door_pt, door_pt->end_angle);
            }
            break;
    }

    return;
 8001108:	e076      	b.n	80011f8 <door_update+0x10c>
            if (servo_driver_query_angle(door_pt->driver_pt, door_pt->servo_index) != door_pt->stable_angle){
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	791b      	ldrb	r3, [r3, #4]
 8001112:	4619      	mov	r1, r3
 8001114:	4610      	mov	r0, r2
 8001116:	f000 fdc5 	bl	8001ca4 <servo_driver_query_angle>
 800111a:	eeb0 7a40 	vmov.f32	s14, s0
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	edd3 7a03 	vldr	s15, [r3, #12]
 8001124:	eeb4 7a67 	vcmp.f32	s14, s15
 8001128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112c:	d062      	beq.n	80011f4 <door_update+0x108>
                servo_driver_set_angle(door_pt->driver_pt, door_pt->servo_index, door_pt->stable_angle);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	7919      	ldrb	r1, [r3, #4]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	edd3 7a03 	vldr	s15, [r3, #12]
 800113c:	eeb0 0a67 	vmov.f32	s0, s15
 8001140:	4610      	mov	r0, r2
 8001142:	f000 fd29 	bl	8001b98 <servo_driver_set_angle>
            break;
 8001146:	e055      	b.n	80011f4 <door_update+0x108>
        	servo_driver_set_angle(door_pt->driver_pt, door_pt->servo_index,
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681c      	ldr	r4, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	791d      	ldrb	r5, [r3, #4]
                            clamp(*(door_pt->parent_angle_pt), 0.0, 90.0));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
        	servo_driver_set_angle(door_pt->driver_pt, door_pt->servo_index,
 8001154:	edd3 7a00 	vldr	s15, [r3]
 8001158:	ed9f 1a29 	vldr	s2, [pc, #164]	@ 8001200 <door_update+0x114>
 800115c:	eddf 0a29 	vldr	s1, [pc, #164]	@ 8001204 <door_update+0x118>
 8001160:	eeb0 0a67 	vmov.f32	s0, s15
 8001164:	f001 f80a 	bl	800217c <clamp>
 8001168:	eef0 7a40 	vmov.f32	s15, s0
 800116c:	eeb0 0a67 	vmov.f32	s0, s15
 8001170:	4629      	mov	r1, r5
 8001172:	4620      	mov	r0, r4
 8001174:	f000 fd10 	bl	8001b98 <servo_driver_set_angle>
            break;
 8001178:	e03d      	b.n	80011f6 <door_update+0x10a>
        	servo_driver_set_angle(door_pt->driver_pt, door_pt->servo_index,
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681c      	ldr	r4, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	791d      	ldrb	r5, [r3, #4]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	edd3 7a06 	vldr	s15, [r3, #24]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	ed93 7a04 	vldr	s14, [r3, #16]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	edd3 6a05 	vldr	s13, [r3, #20]
 8001194:	eddf 1a1c 	vldr	s3, [pc, #112]	@ 8001208 <door_update+0x11c>
 8001198:	eeb0 1a66 	vmov.f32	s2, s13
 800119c:	eef0 0a47 	vmov.f32	s1, s14
 80011a0:	eeb0 0a67 	vmov.f32	s0, s15
 80011a4:	f001 f814 	bl	80021d0 <bezier1D>
 80011a8:	eef0 7a40 	vmov.f32	s15, s0
 80011ac:	eeb0 0a67 	vmov.f32	s0, s15
 80011b0:	4629      	mov	r1, r5
 80011b2:	4620      	mov	r0, r4
 80011b4:	f000 fcf0 	bl	8001b98 <servo_driver_set_angle>
            door_pt->anim_t += STEP_SIZE;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80011be:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800120c <door_update+0x120>
 80011c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	edc3 7a06 	vstr	s15, [r3, #24]
            if (door_pt->anim_t >= 1.0){
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	edd3 7a06 	vldr	s15, [r3, #24]
 80011d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80011d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011de:	da00      	bge.n	80011e2 <door_update+0xf6>
            break;
 80011e0:	e009      	b.n	80011f6 <door_update+0x10a>
                door_set_angle_stable(door_pt, door_pt->end_angle);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	edd3 7a05 	vldr	s15, [r3, #20]
 80011e8:	eeb0 0a67 	vmov.f32	s0, s15
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff ff6b 	bl	80010c8 <door_set_angle_stable>
            break;
 80011f2:	e000      	b.n	80011f6 <door_update+0x10a>
            break;
 80011f4:	bf00      	nop
    return;
 80011f6:	bf00      	nop
 80011f8:	bf00      	nop
}
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001200:	42b40000 	.word	0x42b40000
 8001204:	00000000 	.word	0x00000000
 8001208:	3e99999a 	.word	0x3e99999a
 800120c:	3c23d70a 	.word	0x3c23d70a

08001210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	2b00      	cmp	r3, #0
 8001220:	db0b      	blt.n	800123a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	f003 021f 	and.w	r2, r3, #31
 8001228:	4907      	ldr	r1, [pc, #28]	@ (8001248 <__NVIC_EnableIRQ+0x38>)
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	095b      	lsrs	r3, r3, #5
 8001230:	2001      	movs	r0, #1
 8001232:	fa00 f202 	lsl.w	r2, r0, r2
 8001236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	e000e100 	.word	0xe000e100

0800124c <create_mask>:
static gpio_interrupt_callback_t gpio_callbacks[16] = {0};
static touch_callback_t touch_callback = NULL;
static void *touch_trigger_data = NULL;

// Utility function to create bit masks
uint32_t create_mask(uint8_t start, uint8_t end) {
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	460a      	mov	r2, r1
 8001256:	71fb      	strb	r3, [r7, #7]
 8001258:	4613      	mov	r3, r2
 800125a:	71bb      	strb	r3, [r7, #6]
    return ((1 << (end + 1)) - 1) ^ ((1 << start) - 1);
 800125c:	79bb      	ldrb	r3, [r7, #6]
 800125e:	3301      	adds	r3, #1
 8001260:	2201      	movs	r2, #1
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	1e5a      	subs	r2, r3, #1
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	2101      	movs	r1, #1
 800126c:	fa01 f303 	lsl.w	r3, r1, r3
 8001270:	3b01      	subs	r3, #1
 8001272:	4053      	eors	r3, r2
}
 8001274:	4618      	mov	r0, r3
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <init_port>:

// Initialize a GPIO port
GPIO *init_port(port_name_link name, port_mode mode, uint8_t pin_lower, uint8_t pin_upper) {
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	b08b      	sub	sp, #44	@ 0x2c
 8001284:	af00      	add	r7, sp, #0
 8001286:	4604      	mov	r4, r0
 8001288:	4608      	mov	r0, r1
 800128a:	4611      	mov	r1, r2
 800128c:	461a      	mov	r2, r3
 800128e:	4623      	mov	r3, r4
 8001290:	71fb      	strb	r3, [r7, #7]
 8001292:	4603      	mov	r3, r0
 8001294:	71bb      	strb	r3, [r7, #6]
 8001296:	460b      	mov	r3, r1
 8001298:	717b      	strb	r3, [r7, #5]
 800129a:	4613      	mov	r3, r2
 800129c:	713b      	strb	r3, [r7, #4]
    GPIO *port_pt = malloc(sizeof(GPIO));
 800129e:	200c      	movs	r0, #12
 80012a0:	f004 fac0 	bl	8005824 <malloc>
 80012a4:	4603      	mov	r3, r0
 80012a6:	61fb      	str	r3, [r7, #28]

    port_pt->PORT_IND = name;
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	79fa      	ldrb	r2, [r7, #7]
 80012ac:	701a      	strb	r2, [r3, #0]
    port_pt->PORT_ADR = (GPIO_TypeDef*)adr_link[name];
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	4a6d      	ldr	r2, [pc, #436]	@ (8001468 <init_port+0x1e8>)
 80012b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b6:	461a      	mov	r2, r3
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	605a      	str	r2, [r3, #4]
    port_pt->MODE = mode;
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	79ba      	ldrb	r2, [r7, #6]
 80012c0:	721a      	strb	r2, [r3, #8]
    port_pt->PIN_LOWER = pin_lower;
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	797a      	ldrb	r2, [r7, #5]
 80012c6:	725a      	strb	r2, [r3, #9]
    port_pt->PIN_UPPER = pin_upper;
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	793a      	ldrb	r2, [r7, #4]
 80012cc:	729a      	strb	r2, [r3, #10]

    // Enable clock for portX
    uint32_t clock_en_mask = clock_mask_link[name];
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	4a66      	ldr	r2, [pc, #408]	@ (800146c <init_port+0x1ec>)
 80012d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d6:	61bb      	str	r3, [r7, #24]
    RCC->AHBENR |= clock_en_mask;
 80012d8:	4b65      	ldr	r3, [pc, #404]	@ (8001470 <init_port+0x1f0>)
 80012da:	695a      	ldr	r2, [r3, #20]
 80012dc:	4964      	ldr	r1, [pc, #400]	@ (8001470 <init_port+0x1f0>)
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	614b      	str	r3, [r1, #20]

    uint32_t *port_mode_reg = &(port_pt->PORT_ADR->MODER);
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	617b      	str	r3, [r7, #20]

    // Generate mode-mask
    uint32_t temp_mask = create_mask(pin_lower * 2, pin_upper * 2 + 1);
 80012ea:	797b      	ldrb	r3, [r7, #5]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	793b      	ldrb	r3, [r7, #4]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	3301      	adds	r3, #1
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	4619      	mov	r1, r3
 80012fc:	4610      	mov	r0, r2
 80012fe:	f7ff ffa5 	bl	800124c <create_mask>
 8001302:	6138      	str	r0, [r7, #16]

    // Clear the selected section
    *port_mode_reg &= ~temp_mask;
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	43db      	mvns	r3, r3
 800130c:	401a      	ands	r2, r3
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	601a      	str	r2, [r3, #0]

    if (mode == OUTPUT) {
 8001312:	79bb      	ldrb	r3, [r7, #6]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d120      	bne.n	800135a <init_port+0xda>
        // Set output mode (0b01 for each pin)
        uint32_t output_mask = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	627b      	str	r3, [r7, #36]	@ 0x24
        for (uint8_t i = pin_lower; i <= pin_upper; i++) {
 800131c:	797b      	ldrb	r3, [r7, #5]
 800131e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001322:	e00e      	b.n	8001342 <init_port+0xc2>
            output_mask |= (1 << (i * 2));
 8001324:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	2201      	movs	r2, #1
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	461a      	mov	r2, r3
 8001332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001334:	4313      	orrs	r3, r2
 8001336:	627b      	str	r3, [r7, #36]	@ 0x24
        for (uint8_t i = pin_lower; i <= pin_upper; i++) {
 8001338:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800133c:	3301      	adds	r3, #1
 800133e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001342:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001346:	793b      	ldrb	r3, [r7, #4]
 8001348:	429a      	cmp	r2, r3
 800134a:	d9eb      	bls.n	8001324 <init_port+0xa4>
        }
        *port_mode_reg |= output_mask;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001352:	431a      	orrs	r2, r3
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	e081      	b.n	800145e <init_port+0x1de>

    } else if (mode == ANALOG) {
 800135a:	79bb      	ldrb	r3, [r7, #6]
 800135c:	2b02      	cmp	r3, #2
 800135e:	d17e      	bne.n	800145e <init_port+0x1de>
        // Set analog mode (0b11 for each pin)
        *port_mode_reg |= temp_mask;
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	431a      	orrs	r2, r3
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	601a      	str	r2, [r3, #0]

        // Configure ADC (only for Port A pins 0-7)
        if (name == PORT_A && pin_lower <= 7) {
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d175      	bne.n	800145e <init_port+0x1de>
 8001372:	797b      	ldrb	r3, [r7, #5]
 8001374:	2b07      	cmp	r3, #7
 8001376:	d872      	bhi.n	800145e <init_port+0x1de>
            // Enable ADC clock
            RCC->AHBENR |= RCC_AHBENR_ADC12EN;
 8001378:	4b3d      	ldr	r3, [pc, #244]	@ (8001470 <init_port+0x1f0>)
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	4a3c      	ldr	r2, [pc, #240]	@ (8001470 <init_port+0x1f0>)
 800137e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001382:	6153      	str	r3, [r2, #20]

            // Synchronize ADC with clock
            ADC12_COMMON->CCR |= ADC12_CCR_CKMODE_0;
 8001384:	4b3b      	ldr	r3, [pc, #236]	@ (8001474 <init_port+0x1f4>)
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	4a3a      	ldr	r2, [pc, #232]	@ (8001474 <init_port+0x1f4>)
 800138a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800138e:	6093      	str	r3, [r2, #8]

            // Configure voltage regulator
            ADC2->CR &= ~ADC_CR_ADVREGEN;
 8001390:	4b39      	ldr	r3, [pc, #228]	@ (8001478 <init_port+0x1f8>)
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	4a38      	ldr	r2, [pc, #224]	@ (8001478 <init_port+0x1f8>)
 8001396:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800139a:	6093      	str	r3, [r2, #8]
            ADC2->CR |= ADC_CR_ADVREGEN_0;
 800139c:	4b36      	ldr	r3, [pc, #216]	@ (8001478 <init_port+0x1f8>)
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	4a35      	ldr	r2, [pc, #212]	@ (8001478 <init_port+0x1f8>)
 80013a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013a6:	6093      	str	r3, [r2, #8]
            ADC2->CR &= ~ADC_CR_ADCALDIF;
 80013a8:	4b33      	ldr	r3, [pc, #204]	@ (8001478 <init_port+0x1f8>)
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	4a32      	ldr	r2, [pc, #200]	@ (8001478 <init_port+0x1f8>)
 80013ae:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80013b2:	6093      	str	r3, [r2, #8]

            // Calibrate ADC
            ADC2->CR |= ADC_CR_ADCAL;
 80013b4:	4b30      	ldr	r3, [pc, #192]	@ (8001478 <init_port+0x1f8>)
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	4a2f      	ldr	r2, [pc, #188]	@ (8001478 <init_port+0x1f8>)
 80013ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80013be:	6093      	str	r3, [r2, #8]
            while((ADC2->CR & ADC_CR_ADCAL) == ADC_CR_ADCAL);
 80013c0:	bf00      	nop
 80013c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001478 <init_port+0x1f8>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80013ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80013ce:	d0f8      	beq.n	80013c2 <init_port+0x142>

            // Configure conversion sequence
            ADC2->SQR1 = 0;
 80013d0:	4b29      	ldr	r3, [pc, #164]	@ (8001478 <init_port+0x1f8>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	631a      	str	r2, [r3, #48]	@ 0x30

            // Add channels to sequence
            for (uint8_t i = 0; i < (pin_upper - pin_lower + 1); i++) {
 80013d6:	2300      	movs	r3, #0
 80013d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80013dc:	e01c      	b.n	8001418 <init_port+0x198>
                uint8_t pin = pin_lower + i;
 80013de:	797a      	ldrb	r2, [r7, #5]
 80013e0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80013e4:	4413      	add	r3, r2
 80013e6:	73fb      	strb	r3, [r7, #15]
                if (pin >= 3) { // Pins PA3+ map to ADC channels
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d90f      	bls.n	800140e <init_port+0x18e>
                    ADC2->SQR1 |= (pin - 3) << (6 * (i + 1));
 80013ee:	4b22      	ldr	r3, [pc, #136]	@ (8001478 <init_port+0x1f8>)
 80013f0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	1ed8      	subs	r0, r3, #3
 80013f6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80013fa:	1c5a      	adds	r2, r3, #1
 80013fc:	4613      	mov	r3, r2
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4413      	add	r3, r2
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	fa00 f303 	lsl.w	r3, r0, r3
 8001408:	4a1b      	ldr	r2, [pc, #108]	@ (8001478 <init_port+0x1f8>)
 800140a:	430b      	orrs	r3, r1
 800140c:	6313      	str	r3, [r2, #48]	@ 0x30
            for (uint8_t i = 0; i < (pin_upper - pin_lower + 1); i++) {
 800140e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001412:	3301      	adds	r3, #1
 8001414:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001418:	793a      	ldrb	r2, [r7, #4]
 800141a:	797b      	ldrb	r3, [r7, #5]
 800141c:	1ad2      	subs	r2, r2, r3
 800141e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001422:	429a      	cmp	r2, r3
 8001424:	dadb      	bge.n	80013de <init_port+0x15e>
                }
            }

            // Set number of conversions
            ADC2->SQR1 |= (pin_upper - pin_lower) << ADC_SQR1_L_Pos;
 8001426:	4b14      	ldr	r3, [pc, #80]	@ (8001478 <init_port+0x1f8>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	7939      	ldrb	r1, [r7, #4]
 800142c:	797a      	ldrb	r2, [r7, #5]
 800142e:	1a8a      	subs	r2, r1, r2
 8001430:	4611      	mov	r1, r2
 8001432:	4a11      	ldr	r2, [pc, #68]	@ (8001478 <init_port+0x1f8>)
 8001434:	430b      	orrs	r3, r1
 8001436:	6313      	str	r3, [r2, #48]	@ 0x30

            // Single shot mode
            ADC2->CFGR &= ~ADC_CFGR_CONT;
 8001438:	4b0f      	ldr	r3, [pc, #60]	@ (8001478 <init_port+0x1f8>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	4a0e      	ldr	r2, [pc, #56]	@ (8001478 <init_port+0x1f8>)
 800143e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001442:	60d3      	str	r3, [r2, #12]

            // Enable ADC
            ADC2->CR |= ADC_CR_ADEN;
 8001444:	4b0c      	ldr	r3, [pc, #48]	@ (8001478 <init_port+0x1f8>)
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	4a0b      	ldr	r2, [pc, #44]	@ (8001478 <init_port+0x1f8>)
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	6093      	str	r3, [r2, #8]
            while (!(ADC2->ISR & ADC_ISR_ADRDY));
 8001450:	bf00      	nop
 8001452:	4b09      	ldr	r3, [pc, #36]	@ (8001478 <init_port+0x1f8>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0f9      	beq.n	8001452 <init_port+0x1d2>
        }
    }

    return port_pt;
 800145e:	69fb      	ldr	r3, [r7, #28]
}
 8001460:	4618      	mov	r0, r3
 8001462:	372c      	adds	r7, #44	@ 0x2c
 8001464:	46bd      	mov	sp, r7
 8001466:	bd90      	pop	{r4, r7, pc}
 8001468:	080062ac 	.word	0x080062ac
 800146c:	080062c0 	.word	0x080062c0
 8001470:	40021000 	.word	0x40021000
 8001474:	50000300 	.word	0x50000300
 8001478:	50000100 	.word	0x50000100

0800147c <initialise_touch>:

    __enable_irq();
}

// Touch-specific initialization
void initialise_touch(void) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
    // Enable clocks
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOEEN;
 8001482:	4b19      	ldr	r3, [pc, #100]	@ (80014e8 <initialise_touch+0x6c>)
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	4a18      	ldr	r2, [pc, #96]	@ (80014e8 <initialise_touch+0x6c>)
 8001488:	f443 1308 	orr.w	r3, r3, #2228224	@ 0x220000
 800148c:	6153      	str	r3, [r2, #20]
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800148e:	4b16      	ldr	r3, [pc, #88]	@ (80014e8 <initialise_touch+0x6c>)
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	4a15      	ldr	r2, [pc, #84]	@ (80014e8 <initialise_touch+0x6c>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6193      	str	r3, [r2, #24]

    // Configure PE8–PE11 as output for display
    uint32_t *pe_mode = &GPIOE->MODER;
 800149a:	4b14      	ldr	r3, [pc, #80]	@ (80014ec <initialise_touch+0x70>)
 800149c:	60fb      	str	r3, [r7, #12]
    uint32_t pe_mask = create_mask(16, 23); // PE8-PE11 (bits 16-23)
 800149e:	2117      	movs	r1, #23
 80014a0:	2010      	movs	r0, #16
 80014a2:	f7ff fed3 	bl	800124c <create_mask>
 80014a6:	60b8      	str	r0, [r7, #8]
    *pe_mode &= ~pe_mask;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	43db      	mvns	r3, r3
 80014b0:	401a      	ands	r2, r3
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	601a      	str	r2, [r3, #0]
    *pe_mode |= 0x00550000; // Set as outputs (01 pattern)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f443 02aa 	orr.w	r2, r3, #5570560	@ 0x550000
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	601a      	str	r2, [r3, #0]

    // Set PA1–PA6 as inputs (default mode is input, so just clear any previous config)
    uint32_t *pa_mode = &GPIOA->MODER;
 80014c2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80014c6:	607b      	str	r3, [r7, #4]
    uint32_t pa_mask = create_mask(2, 13); // PA1-PA6 (bits 2-13)
 80014c8:	210d      	movs	r1, #13
 80014ca:	2002      	movs	r0, #2
 80014cc:	f7ff febe 	bl	800124c <create_mask>
 80014d0:	6038      	str	r0, [r7, #0]
    *pa_mode &= ~pa_mask; // Clear to set as inputs
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	43db      	mvns	r3, r3
 80014da:	401a      	ands	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	601a      	str	r2, [r3, #0]
}
 80014e0:	bf00      	nop
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40021000 	.word	0x40021000
 80014ec:	48001000 	.word	0x48001000

080014f0 <enable_touch_interrupts>:

void enable_touch_interrupts(void) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80014f4:	b672      	cpsid	i
}
 80014f6:	bf00      	nop
    __disable_irq();

    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80014f8:	4b18      	ldr	r3, [pc, #96]	@ (800155c <enable_touch_interrupts+0x6c>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	4a17      	ldr	r2, [pc, #92]	@ (800155c <enable_touch_interrupts+0x6c>)
 80014fe:	f043 0301 	orr.w	r3, r3, #1
 8001502:	6193      	str	r3, [r2, #24]

    // Map EXTI lines to PA pins
    SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PA | SYSCFG_EXTICR1_EXTI2_PA | SYSCFG_EXTICR1_EXTI3_PA;
 8001504:	4b16      	ldr	r3, [pc, #88]	@ (8001560 <enable_touch_interrupts+0x70>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
    SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI4_PA | SYSCFG_EXTICR2_EXTI5_PA | SYSCFG_EXTICR2_EXTI6_PA;
 800150a:	4b15      	ldr	r3, [pc, #84]	@ (8001560 <enable_touch_interrupts+0x70>)
 800150c:	2200      	movs	r2, #0
 800150e:	60da      	str	r2, [r3, #12]

    // Configure for rising edge triggers
    EXTI->RTSR |= EXTI_RTSR_TR1 | EXTI_RTSR_TR2 | EXTI_RTSR_TR3 |
 8001510:	4b14      	ldr	r3, [pc, #80]	@ (8001564 <enable_touch_interrupts+0x74>)
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	4a13      	ldr	r2, [pc, #76]	@ (8001564 <enable_touch_interrupts+0x74>)
 8001516:	f043 037e 	orr.w	r3, r3, #126	@ 0x7e
 800151a:	6093      	str	r3, [r2, #8]
                  EXTI_RTSR_TR4 | EXTI_RTSR_TR5 | EXTI_RTSR_TR6;
    EXTI->FTSR &= ~(EXTI_FTSR_TR1 | EXTI_FTSR_TR2 | EXTI_FTSR_TR3 |
 800151c:	4b11      	ldr	r3, [pc, #68]	@ (8001564 <enable_touch_interrupts+0x74>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	4a10      	ldr	r2, [pc, #64]	@ (8001564 <enable_touch_interrupts+0x74>)
 8001522:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8001526:	60d3      	str	r3, [r2, #12]
                    EXTI_FTSR_TR4 | EXTI_FTSR_TR5 | EXTI_FTSR_TR6);

    // Unmask interrupt lines
    EXTI->IMR |= EXTI_IMR_MR1 | EXTI_IMR_MR2 | EXTI_IMR_MR3 |
 8001528:	4b0e      	ldr	r3, [pc, #56]	@ (8001564 <enable_touch_interrupts+0x74>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a0d      	ldr	r2, [pc, #52]	@ (8001564 <enable_touch_interrupts+0x74>)
 800152e:	f043 037e 	orr.w	r3, r3, #126	@ 0x7e
 8001532:	6013      	str	r3, [r2, #0]
                 EXTI_IMR_MR4 | EXTI_IMR_MR5 | EXTI_IMR_MR6;

    // Enable NVIC IRQs
    NVIC_EnableIRQ(EXTI1_IRQn);
 8001534:	2007      	movs	r0, #7
 8001536:	f7ff fe6b 	bl	8001210 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 800153a:	2008      	movs	r0, #8
 800153c:	f7ff fe68 	bl	8001210 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(EXTI3_IRQn);
 8001540:	2009      	movs	r0, #9
 8001542:	f7ff fe65 	bl	8001210 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(EXTI4_IRQn);
 8001546:	200a      	movs	r0, #10
 8001548:	f7ff fe62 	bl	8001210 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(EXTI9_5_IRQn);
 800154c:	2017      	movs	r0, #23
 800154e:	f7ff fe5f 	bl	8001210 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001552:	b662      	cpsie	i
}
 8001554:	bf00      	nop

    __enable_irq();
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40021000 	.word	0x40021000
 8001560:	40010000 	.word	0x40010000
 8001564:	40010400 	.word	0x40010400

08001568 <touch_register_callback>:

void touch_register_callback(touch_callback_t callback, void *trigger_data) {
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
    touch_callback = callback;
 8001572:	4a06      	ldr	r2, [pc, #24]	@ (800158c <touch_register_callback+0x24>)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6013      	str	r3, [r2, #0]
    touch_trigger_data = trigger_data;
 8001578:	4a05      	ldr	r2, [pc, #20]	@ (8001590 <touch_register_callback+0x28>)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	6013      	str	r3, [r2, #0]
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	200005a8 	.word	0x200005a8
 8001590:	200005ac 	.word	0x200005ac

08001594 <display_number>:

void display_number(uint8_t n) {
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	71fb      	strb	r3, [r7, #7]
    // Display n on PE8–PE11 (4-bit binary)
    GPIOE->ODR &= ~(0xF << 8); // Clear PE8–11
 800159e:	4b0a      	ldr	r3, [pc, #40]	@ (80015c8 <display_number+0x34>)
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	4a09      	ldr	r2, [pc, #36]	@ (80015c8 <display_number+0x34>)
 80015a4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80015a8:	6153      	str	r3, [r2, #20]
    GPIOE->ODR |= ((n & 0xF) << 8); // Set new value
 80015aa:	4b07      	ldr	r3, [pc, #28]	@ (80015c8 <display_number+0x34>)
 80015ac:	695a      	ldr	r2, [r3, #20]
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	021b      	lsls	r3, r3, #8
 80015b2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80015b6:	4904      	ldr	r1, [pc, #16]	@ (80015c8 <display_number+0x34>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	614b      	str	r3, [r1, #20]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	48001000 	.word	0x48001000

080015cc <EXTI0_IRQHandler>:

// Unified interrupt handlers
void EXTI0_IRQHandler(void) {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
    EXTI->PR |= EXTI_PR_PR0;
 80015d0:	4b07      	ldr	r3, [pc, #28]	@ (80015f0 <EXTI0_IRQHandler+0x24>)
 80015d2:	695b      	ldr	r3, [r3, #20]
 80015d4:	4a06      	ldr	r2, [pc, #24]	@ (80015f0 <EXTI0_IRQHandler+0x24>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	6153      	str	r3, [r2, #20]
    if (gpio_callbacks[0]) gpio_callbacks[0](0);
 80015dc:	4b05      	ldr	r3, [pc, #20]	@ (80015f4 <EXTI0_IRQHandler+0x28>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d003      	beq.n	80015ec <EXTI0_IRQHandler+0x20>
 80015e4:	4b03      	ldr	r3, [pc, #12]	@ (80015f4 <EXTI0_IRQHandler+0x28>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2000      	movs	r0, #0
 80015ea:	4798      	blx	r3
}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40010400 	.word	0x40010400
 80015f4:	20000568 	.word	0x20000568

080015f8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
    EXTI->PR |= EXTI_PR_PR1;
 80015fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001634 <EXTI1_IRQHandler+0x3c>)
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	4a0c      	ldr	r2, [pc, #48]	@ (8001634 <EXTI1_IRQHandler+0x3c>)
 8001602:	f043 0302 	orr.w	r3, r3, #2
 8001606:	6153      	str	r3, [r2, #20]
    if (touch_callback) {
 8001608:	4b0b      	ldr	r3, [pc, #44]	@ (8001638 <EXTI1_IRQHandler+0x40>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d007      	beq.n	8001620 <EXTI1_IRQHandler+0x28>
        touch_callback(1, touch_trigger_data);
 8001610:	4b09      	ldr	r3, [pc, #36]	@ (8001638 <EXTI1_IRQHandler+0x40>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a09      	ldr	r2, [pc, #36]	@ (800163c <EXTI1_IRQHandler+0x44>)
 8001616:	6812      	ldr	r2, [r2, #0]
 8001618:	4611      	mov	r1, r2
 800161a:	2001      	movs	r0, #1
 800161c:	4798      	blx	r3
    } else if (gpio_callbacks[1]) {
        gpio_callbacks[1](1);
    }
}
 800161e:	e007      	b.n	8001630 <EXTI1_IRQHandler+0x38>
    } else if (gpio_callbacks[1]) {
 8001620:	4b07      	ldr	r3, [pc, #28]	@ (8001640 <EXTI1_IRQHandler+0x48>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <EXTI1_IRQHandler+0x38>
        gpio_callbacks[1](1);
 8001628:	4b05      	ldr	r3, [pc, #20]	@ (8001640 <EXTI1_IRQHandler+0x48>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2001      	movs	r0, #1
 800162e:	4798      	blx	r3
}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40010400 	.word	0x40010400
 8001638:	200005a8 	.word	0x200005a8
 800163c:	200005ac 	.word	0x200005ac
 8001640:	20000568 	.word	0x20000568

08001644 <EXTI2_TSC_IRQHandler>:

void EXTI2_TSC_IRQHandler(void) {
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
    EXTI->PR |= EXTI_PR_PR2;
 8001648:	4b0d      	ldr	r3, [pc, #52]	@ (8001680 <EXTI2_TSC_IRQHandler+0x3c>)
 800164a:	695b      	ldr	r3, [r3, #20]
 800164c:	4a0c      	ldr	r2, [pc, #48]	@ (8001680 <EXTI2_TSC_IRQHandler+0x3c>)
 800164e:	f043 0304 	orr.w	r3, r3, #4
 8001652:	6153      	str	r3, [r2, #20]
    if (touch_callback) {
 8001654:	4b0b      	ldr	r3, [pc, #44]	@ (8001684 <EXTI2_TSC_IRQHandler+0x40>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d007      	beq.n	800166c <EXTI2_TSC_IRQHandler+0x28>
        touch_callback(2, touch_trigger_data);
 800165c:	4b09      	ldr	r3, [pc, #36]	@ (8001684 <EXTI2_TSC_IRQHandler+0x40>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a09      	ldr	r2, [pc, #36]	@ (8001688 <EXTI2_TSC_IRQHandler+0x44>)
 8001662:	6812      	ldr	r2, [r2, #0]
 8001664:	4611      	mov	r1, r2
 8001666:	2002      	movs	r0, #2
 8001668:	4798      	blx	r3
    } else if (gpio_callbacks[2]) {
        gpio_callbacks[2](2);
    }
}
 800166a:	e007      	b.n	800167c <EXTI2_TSC_IRQHandler+0x38>
    } else if (gpio_callbacks[2]) {
 800166c:	4b07      	ldr	r3, [pc, #28]	@ (800168c <EXTI2_TSC_IRQHandler+0x48>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <EXTI2_TSC_IRQHandler+0x38>
        gpio_callbacks[2](2);
 8001674:	4b05      	ldr	r3, [pc, #20]	@ (800168c <EXTI2_TSC_IRQHandler+0x48>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	2002      	movs	r0, #2
 800167a:	4798      	blx	r3
}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40010400 	.word	0x40010400
 8001684:	200005a8 	.word	0x200005a8
 8001688:	200005ac 	.word	0x200005ac
 800168c:	20000568 	.word	0x20000568

08001690 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void) {
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
    EXTI->PR |= EXTI_PR_PR3;
 8001694:	4b0d      	ldr	r3, [pc, #52]	@ (80016cc <EXTI3_IRQHandler+0x3c>)
 8001696:	695b      	ldr	r3, [r3, #20]
 8001698:	4a0c      	ldr	r2, [pc, #48]	@ (80016cc <EXTI3_IRQHandler+0x3c>)
 800169a:	f043 0308 	orr.w	r3, r3, #8
 800169e:	6153      	str	r3, [r2, #20]
    if (touch_callback) {
 80016a0:	4b0b      	ldr	r3, [pc, #44]	@ (80016d0 <EXTI3_IRQHandler+0x40>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d007      	beq.n	80016b8 <EXTI3_IRQHandler+0x28>
        touch_callback(3, touch_trigger_data);
 80016a8:	4b09      	ldr	r3, [pc, #36]	@ (80016d0 <EXTI3_IRQHandler+0x40>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a09      	ldr	r2, [pc, #36]	@ (80016d4 <EXTI3_IRQHandler+0x44>)
 80016ae:	6812      	ldr	r2, [r2, #0]
 80016b0:	4611      	mov	r1, r2
 80016b2:	2003      	movs	r0, #3
 80016b4:	4798      	blx	r3
    } else if (gpio_callbacks[3]) {
        gpio_callbacks[3](3);
    }
}
 80016b6:	e007      	b.n	80016c8 <EXTI3_IRQHandler+0x38>
    } else if (gpio_callbacks[3]) {
 80016b8:	4b07      	ldr	r3, [pc, #28]	@ (80016d8 <EXTI3_IRQHandler+0x48>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d003      	beq.n	80016c8 <EXTI3_IRQHandler+0x38>
        gpio_callbacks[3](3);
 80016c0:	4b05      	ldr	r3, [pc, #20]	@ (80016d8 <EXTI3_IRQHandler+0x48>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	2003      	movs	r0, #3
 80016c6:	4798      	blx	r3
}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40010400 	.word	0x40010400
 80016d0:	200005a8 	.word	0x200005a8
 80016d4:	200005ac 	.word	0x200005ac
 80016d8:	20000568 	.word	0x20000568

080016dc <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
    EXTI->PR |= EXTI_PR_PR4;
 80016e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001718 <EXTI4_IRQHandler+0x3c>)
 80016e2:	695b      	ldr	r3, [r3, #20]
 80016e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001718 <EXTI4_IRQHandler+0x3c>)
 80016e6:	f043 0310 	orr.w	r3, r3, #16
 80016ea:	6153      	str	r3, [r2, #20]
    if (touch_callback) {
 80016ec:	4b0b      	ldr	r3, [pc, #44]	@ (800171c <EXTI4_IRQHandler+0x40>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d007      	beq.n	8001704 <EXTI4_IRQHandler+0x28>
        touch_callback(4, touch_trigger_data);
 80016f4:	4b09      	ldr	r3, [pc, #36]	@ (800171c <EXTI4_IRQHandler+0x40>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a09      	ldr	r2, [pc, #36]	@ (8001720 <EXTI4_IRQHandler+0x44>)
 80016fa:	6812      	ldr	r2, [r2, #0]
 80016fc:	4611      	mov	r1, r2
 80016fe:	2004      	movs	r0, #4
 8001700:	4798      	blx	r3
    } else if (gpio_callbacks[4]) {
        gpio_callbacks[4](4);
    }
}
 8001702:	e007      	b.n	8001714 <EXTI4_IRQHandler+0x38>
    } else if (gpio_callbacks[4]) {
 8001704:	4b07      	ldr	r3, [pc, #28]	@ (8001724 <EXTI4_IRQHandler+0x48>)
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d003      	beq.n	8001714 <EXTI4_IRQHandler+0x38>
        gpio_callbacks[4](4);
 800170c:	4b05      	ldr	r3, [pc, #20]	@ (8001724 <EXTI4_IRQHandler+0x48>)
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	2004      	movs	r0, #4
 8001712:	4798      	blx	r3
}
 8001714:	bf00      	nop
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40010400 	.word	0x40010400
 800171c:	200005a8 	.word	0x200005a8
 8001720:	200005ac 	.word	0x200005ac
 8001724:	20000568 	.word	0x20000568

08001728 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
    for (uint8_t i = 5; i <= 9; i++) {
 800172e:	2305      	movs	r3, #5
 8001730:	71fb      	strb	r3, [r7, #7]
 8001732:	e031      	b.n	8001798 <EXTI9_5_IRQHandler+0x70>
        if (EXTI->PR & (1 << i)) {
 8001734:	4b1c      	ldr	r3, [pc, #112]	@ (80017a8 <EXTI9_5_IRQHandler+0x80>)
 8001736:	695b      	ldr	r3, [r3, #20]
 8001738:	79fa      	ldrb	r2, [r7, #7]
 800173a:	2101      	movs	r1, #1
 800173c:	fa01 f202 	lsl.w	r2, r1, r2
 8001740:	4013      	ands	r3, r2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d025      	beq.n	8001792 <EXTI9_5_IRQHandler+0x6a>
            EXTI->PR |= (1 << i);
 8001746:	4b18      	ldr	r3, [pc, #96]	@ (80017a8 <EXTI9_5_IRQHandler+0x80>)
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	79fa      	ldrb	r2, [r7, #7]
 800174c:	2101      	movs	r1, #1
 800174e:	fa01 f202 	lsl.w	r2, r1, r2
 8001752:	4611      	mov	r1, r2
 8001754:	4a14      	ldr	r2, [pc, #80]	@ (80017a8 <EXTI9_5_IRQHandler+0x80>)
 8001756:	430b      	orrs	r3, r1
 8001758:	6153      	str	r3, [r2, #20]

            // Handle touch callbacks for pins 5-6
            if (i <= 6 && touch_callback) {
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	2b06      	cmp	r3, #6
 800175e:	d80b      	bhi.n	8001778 <EXTI9_5_IRQHandler+0x50>
 8001760:	4b12      	ldr	r3, [pc, #72]	@ (80017ac <EXTI9_5_IRQHandler+0x84>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d007      	beq.n	8001778 <EXTI9_5_IRQHandler+0x50>
                touch_callback(i, touch_trigger_data);
 8001768:	4b10      	ldr	r3, [pc, #64]	@ (80017ac <EXTI9_5_IRQHandler+0x84>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a10      	ldr	r2, [pc, #64]	@ (80017b0 <EXTI9_5_IRQHandler+0x88>)
 800176e:	6811      	ldr	r1, [r2, #0]
 8001770:	79fa      	ldrb	r2, [r7, #7]
 8001772:	4610      	mov	r0, r2
 8001774:	4798      	blx	r3
 8001776:	e00c      	b.n	8001792 <EXTI9_5_IRQHandler+0x6a>
            } else if (gpio_callbacks[i]) {
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	4a0e      	ldr	r2, [pc, #56]	@ (80017b4 <EXTI9_5_IRQHandler+0x8c>)
 800177c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d006      	beq.n	8001792 <EXTI9_5_IRQHandler+0x6a>
                gpio_callbacks[i](i);
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	4a0b      	ldr	r2, [pc, #44]	@ (80017b4 <EXTI9_5_IRQHandler+0x8c>)
 8001788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800178c:	79fa      	ldrb	r2, [r7, #7]
 800178e:	4610      	mov	r0, r2
 8001790:	4798      	blx	r3
    for (uint8_t i = 5; i <= 9; i++) {
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	3301      	adds	r3, #1
 8001796:	71fb      	strb	r3, [r7, #7]
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	2b09      	cmp	r3, #9
 800179c:	d9ca      	bls.n	8001734 <EXTI9_5_IRQHandler+0xc>
            }
        }
    }
}
 800179e:	bf00      	nop
 80017a0:	bf00      	nop
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40010400 	.word	0x40010400
 80017ac:	200005a8 	.word	0x200005a8
 80017b0:	200005ac 	.word	0x200005ac
 80017b4:	20000568 	.word	0x20000568

080017b8 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
    for (uint8_t i = 10; i <= 15; i++) {
 80017be:	230a      	movs	r3, #10
 80017c0:	71fb      	strb	r3, [r7, #7]
 80017c2:	e022      	b.n	800180a <EXTI15_10_IRQHandler+0x52>
        if (EXTI->PR & (1 << i)) {
 80017c4:	4b15      	ldr	r3, [pc, #84]	@ (800181c <EXTI15_10_IRQHandler+0x64>)
 80017c6:	695b      	ldr	r3, [r3, #20]
 80017c8:	79fa      	ldrb	r2, [r7, #7]
 80017ca:	2101      	movs	r1, #1
 80017cc:	fa01 f202 	lsl.w	r2, r1, r2
 80017d0:	4013      	ands	r3, r2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d016      	beq.n	8001804 <EXTI15_10_IRQHandler+0x4c>
            EXTI->PR |= (1 << i);
 80017d6:	4b11      	ldr	r3, [pc, #68]	@ (800181c <EXTI15_10_IRQHandler+0x64>)
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	79fa      	ldrb	r2, [r7, #7]
 80017dc:	2101      	movs	r1, #1
 80017de:	fa01 f202 	lsl.w	r2, r1, r2
 80017e2:	4611      	mov	r1, r2
 80017e4:	4a0d      	ldr	r2, [pc, #52]	@ (800181c <EXTI15_10_IRQHandler+0x64>)
 80017e6:	430b      	orrs	r3, r1
 80017e8:	6153      	str	r3, [r2, #20]
            if (gpio_callbacks[i]) gpio_callbacks[i](i);
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001820 <EXTI15_10_IRQHandler+0x68>)
 80017ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d006      	beq.n	8001804 <EXTI15_10_IRQHandler+0x4c>
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	4a09      	ldr	r2, [pc, #36]	@ (8001820 <EXTI15_10_IRQHandler+0x68>)
 80017fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017fe:	79fa      	ldrb	r2, [r7, #7]
 8001800:	4610      	mov	r0, r2
 8001802:	4798      	blx	r3
    for (uint8_t i = 10; i <= 15; i++) {
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	3301      	adds	r3, #1
 8001808:	71fb      	strb	r3, [r7, #7]
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	2b0f      	cmp	r3, #15
 800180e:	d9d9      	bls.n	80017c4 <EXTI15_10_IRQHandler+0xc>
        }
    }
}
 8001810:	bf00      	nop
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40010400 	.word	0x40010400
 8001820:	20000568 	.word	0x20000568

08001824 <__NVIC_EnableIRQ>:
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	2b00      	cmp	r3, #0
 8001834:	db0b      	blt.n	800184e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	f003 021f 	and.w	r2, r3, #31
 800183c:	4907      	ldr	r1, [pc, #28]	@ (800185c <__NVIC_EnableIRQ+0x38>)
 800183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001842:	095b      	lsrs	r3, r3, #5
 8001844:	2001      	movs	r0, #1
 8001846:	fa00 f202 	lsl.w	r2, r0, r2
 800184a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	e000e100 	.word	0xe000e100

08001860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	6039      	str	r1, [r7, #0]
 800186a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800186c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001870:	2b00      	cmp	r3, #0
 8001872:	db0a      	blt.n	800188a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	b2da      	uxtb	r2, r3
 8001878:	490c      	ldr	r1, [pc, #48]	@ (80018ac <__NVIC_SetPriority+0x4c>)
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	0112      	lsls	r2, r2, #4
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	440b      	add	r3, r1
 8001884:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001888:	e00a      	b.n	80018a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	b2da      	uxtb	r2, r3
 800188e:	4908      	ldr	r1, [pc, #32]	@ (80018b0 <__NVIC_SetPriority+0x50>)
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	3b04      	subs	r3, #4
 8001898:	0112      	lsls	r2, r2, #4
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	440b      	add	r3, r1
 800189e:	761a      	strb	r2, [r3, #24]
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000e100 	.word	0xe000e100
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <serial_initialise>:
		0x00 						// default function pointer is NULL
};


// InitialiseSerial - Initialise the serial port // Input: baud_rate is from an enumerated set
void serial_initialise(uint32_t baud_rate, SerialPort *serial_port, void (*output_callback_function)(void), void (*input_callback_function)(char *, uint32_t)) {
 80018b4:	b480      	push	{r7}
 80018b6:	b087      	sub	sp, #28
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
 80018c0:	603b      	str	r3, [r7, #0]

	serial_port->output_callback = output_callback_function;
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	625a      	str	r2, [r3, #36]	@ 0x24
	serial_port->receive_callback = input_callback_function;
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	629a      	str	r2, [r3, #40]	@ 0x28

	// Enable clock power, system configuration clock and GPIOC
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80018ce:	4b3a      	ldr	r3, [pc, #232]	@ (80019b8 <serial_initialise+0x104>)
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	4a39      	ldr	r2, [pc, #228]	@ (80019b8 <serial_initialise+0x104>)
 80018d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018d8:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80018da:	4b37      	ldr	r3, [pc, #220]	@ (80019b8 <serial_initialise+0x104>)
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	4a36      	ldr	r2, [pc, #216]	@ (80019b8 <serial_initialise+0x104>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	6193      	str	r3, [r2, #24]

	// Enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	691a      	ldr	r2, [r3, #16]
 80018ea:	4b33      	ldr	r3, [pc, #204]	@ (80019b8 <serial_initialise+0x104>)
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	4932      	ldr	r1, [pc, #200]	@ (80019b8 <serial_initialise+0x104>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	614b      	str	r3, [r1, #20]

	// Set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	68ba      	ldr	r2, [r7, #8]
 80018fa:	6952      	ldr	r2, [r2, #20]
 80018fc:	601a      	str	r2, [r3, #0]

	// Enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	68ba      	ldr	r2, [r7, #8]
 8001904:	6992      	ldr	r2, [r2, #24]
 8001906:	609a      	str	r2, [r3, #8]

	// Set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	69d9      	ldr	r1, [r3, #28]
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	6a1a      	ldr	r2, [r3, #32]
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	430a      	orrs	r2, r1
 8001918:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	6a19      	ldr	r1, [r3, #32]
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	430a      	orrs	r2, r1
 800192a:	625a      	str	r2, [r3, #36]	@ 0x24

	// Enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	68da      	ldr	r2, [r3, #12]
 8001930:	4b21      	ldr	r3, [pc, #132]	@ (80019b8 <serial_initialise+0x104>)
 8001932:	69db      	ldr	r3, [r3, #28]
 8001934:	4920      	ldr	r1, [pc, #128]	@ (80019b8 <serial_initialise+0x104>)
 8001936:	4313      	orrs	r3, r2
 8001938:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	4b1e      	ldr	r3, [pc, #120]	@ (80019b8 <serial_initialise+0x104>)
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	491d      	ldr	r1, [pc, #116]	@ (80019b8 <serial_initialise+0x104>)
 8001944:	4313      	orrs	r3, r2
 8001946:	618b      	str	r3, [r1, #24]

	// Get a pointer to the 16 bits of the BRR register that we want to change
	uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	330c      	adds	r3, #12
 800194e:	617b      	str	r3, [r7, #20]

	// Baud rate calculation
	switch(baud_rate){
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2b04      	cmp	r3, #4
 8001954:	d822      	bhi.n	800199c <serial_initialise+0xe8>
 8001956:	a201      	add	r2, pc, #4	@ (adr r2, 800195c <serial_initialise+0xa8>)
 8001958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800195c:	08001971 	.word	0x08001971
 8001960:	0800197b 	.word	0x0800197b
 8001964:	08001985 	.word	0x08001985
 8001968:	0800198d 	.word	0x0800198d
 800196c:	08001995 	.word	0x08001995
	case BAUD_9600:
		*baud_rate_config = 0x342;
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	f240 3242 	movw	r2, #834	@ 0x342
 8001976:	801a      	strh	r2, [r3, #0]
		break;
 8001978:	e010      	b.n	800199c <serial_initialise+0xe8>
	case BAUD_19200:
		*baud_rate_config = 0x1A1;
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	f240 12a1 	movw	r2, #417	@ 0x1a1
 8001980:	801a      	strh	r2, [r3, #0]
		break;
 8001982:	e00b      	b.n	800199c <serial_initialise+0xe8>
	case BAUD_38400:
		*baud_rate_config = 0xD1;
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	22d1      	movs	r2, #209	@ 0xd1
 8001988:	801a      	strh	r2, [r3, #0]
		break;
 800198a:	e007      	b.n	800199c <serial_initialise+0xe8>
	case BAUD_57600:
		*baud_rate_config = 0x8B;
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	228b      	movs	r2, #139	@ 0x8b
 8001990:	801a      	strh	r2, [r3, #0]
		break;
 8001992:	e003      	b.n	800199c <serial_initialise+0xe8>
	case BAUD_115200:
		*baud_rate_config = 0x46;
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	2246      	movs	r2, #70	@ 0x46
 8001998:	801a      	strh	r2, [r3, #0]
		break;
 800199a:	bf00      	nop
	}

	// Enable serial port for tx and rx
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f042 020d 	orr.w	r2, r2, #13
 80019aa:	601a      	str	r2, [r3, #0]
}
 80019ac:	bf00      	nop
 80019ae:	371c      	adds	r7, #28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	40021000 	.word	0x40021000

080019bc <serial_output_char>:


// Output char using polling
void serial_output_char(char data, SerialPort *serial_port) {
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	6039      	str	r1, [r7, #0]
 80019c6:	71fb      	strb	r3, [r7, #7]

	while((serial_port->UART->ISR & USART_ISR_TXE) == 0){
 80019c8:	bf00      	nop
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	69db      	ldr	r3, [r3, #28]
 80019d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0f8      	beq.n	80019ca <serial_output_char+0xe>
	}

	serial_port->UART->TDR = data;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	79fa      	ldrb	r2, [r7, #7]
 80019de:	b292      	uxth	r2, r2
 80019e0:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <serial_output_string>:


// Output string using polling
void serial_output_string(char *string, SerialPort *serial_port) {
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b084      	sub	sp, #16
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
 80019f6:	6039      	str	r1, [r7, #0]

	uint32_t count = 0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	60fb      	str	r3, [r7, #12]
	while(*string) {
 80019fc:	e00b      	b.n	8001a16 <serial_output_string+0x28>
		serial_output_char(*string, serial_port);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	6839      	ldr	r1, [r7, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff ffd9 	bl	80019bc <serial_output_char>
		count++;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	60fb      	str	r3, [r7, #12]
		string++;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3301      	adds	r3, #1
 8001a14:	607b      	str	r3, [r7, #4]
	while(*string) {
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1ef      	bne.n	80019fe <serial_output_string+0x10>
	}

	// Callback function pointer call
	if (serial_port->output_callback != NULL)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d002      	beq.n	8001a2c <serial_output_string+0x3e>
		serial_port->output_callback();
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a2a:	4798      	blx	r3
}
 8001a2c:	bf00      	nop
 8001a2e:	3710      	adds	r7, #16
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <enable_interrupts>:


// Enable interrupts needed for UART
void enable_interrupts(SerialPort *serial_port) {
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a3c:	b672      	cpsid	i
}
 8001a3e:	bf00      	nop
	__disable_irq();

	// Interrupt upon receiving data
	serial_port->UART->CR1 |= USART_CR1_RXNEIE_Msk;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f042 0220 	orr.w	r2, r2, #32
 8001a4e:	601a      	str	r2, [r3, #0]
	//serial_port->UART->CR1 |= USART_CR1_TXEIE_MSK;

	// Set priority and enable interrupts
	NVIC_SetPriority(USART1_IRQn, 1);
 8001a50:	2101      	movs	r1, #1
 8001a52:	2025      	movs	r0, #37	@ 0x25
 8001a54:	f7ff ff04 	bl	8001860 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn);
 8001a58:	2025      	movs	r0, #37	@ 0x25
 8001a5a:	f7ff fee3 	bl	8001824 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001a5e:	b662      	cpsie	i
}
 8001a60:	bf00      	nop

	__enable_irq();
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <init_servo_driver>:




//Servo-driver is represented in object form to allow multiple chained devices (16-boards < )
servoDriverObj *init_servo_driver(uint8_t i2c_adr){
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b086      	sub	sp, #24
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	4603      	mov	r3, r0
 8001a72:	71fb      	strb	r3, [r7, #7]
    //Allocate obj-mem
    servoDriverObj *driver_pt = malloc(sizeof(servoDriverObj));
 8001a74:	2088      	movs	r0, #136	@ 0x88
 8001a76:	f003 fed5 	bl	8005824 <malloc>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	613b      	str	r3, [r7, #16]

    //Asign devices I2C address (probably =0x40)
    driver_pt->i2c_adr = i2c_adr;
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	79fa      	ldrb	r2, [r7, #7]
 8001a82:	701a      	strb	r2, [r3, #0]


    //Configure device
	//For 50hz PWM output: prescale = 25MHz / (4096 × 50Hz) - 1 ≈ 121
	uint8_t prescale = 121;
 8001a84:	2379      	movs	r3, #121	@ 0x79
 8001a86:	73fb      	strb	r3, [r7, #15]
	servo_driver_write_reg(driver_pt, MODE1, 0x10);       // Sleep
 8001a88:	2210      	movs	r2, #16
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	6938      	ldr	r0, [r7, #16]
 8001a8e:	f000 f82f 	bl	8001af0 <servo_driver_write_reg>
	servo_driver_write_reg(driver_pt, PRESCALE, prescale);
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
 8001a94:	461a      	mov	r2, r3
 8001a96:	21fe      	movs	r1, #254	@ 0xfe
 8001a98:	6938      	ldr	r0, [r7, #16]
 8001a9a:	f000 f829 	bl	8001af0 <servo_driver_write_reg>
	servo_driver_write_reg(driver_pt, MODE1, 0xA1);       // Restart + auto-increment
 8001a9e:	22a1      	movs	r2, #161	@ 0xa1
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	6938      	ldr	r0, [r7, #16]
 8001aa4:	f000 f824 	bl	8001af0 <servo_driver_write_reg>


    //Init empty enable-mask (no active servos)
    driver_pt->chan_en_mask = 0;
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84

    //Populate servo-data (0 default)
    for (int i=0; i<16; i++){
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	e013      	b.n	8001ade <init_servo_driver+0x74>
        driver_pt->servo_angles[i] = 0;
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	3304      	adds	r3, #4
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
        driver_pt->servo_angle_offsets[i] = 0;
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	3310      	adds	r3, #16
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
    for (int i=0; i<16; i++){
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	3301      	adds	r3, #1
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	2b0f      	cmp	r3, #15
 8001ae2:	dde8      	ble.n	8001ab6 <init_servo_driver+0x4c>
    }

    return driver_pt;
 8001ae4:	693b      	ldr	r3, [r7, #16]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
	...

08001af0 <servo_driver_write_reg>:




//Write a register in driver
void servo_driver_write_reg(servoDriverObj *driver_pt, uint8_t reg, uint8_t data) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af04      	add	r7, sp, #16
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	460b      	mov	r3, r1
 8001afa:	70fb      	strb	r3, [r7, #3]
 8001afc:	4613      	mov	r3, r2
 8001afe:	70bb      	strb	r3, [r7, #2]
    HAL_I2C_Mem_Write(&hi2c1, (driver_pt->i2c_adr << 1), reg, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	b299      	uxth	r1, r3
 8001b08:	78fb      	ldrb	r3, [r7, #3]
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b10:	9302      	str	r3, [sp, #8]
 8001b12:	2301      	movs	r3, #1
 8001b14:	9301      	str	r3, [sp, #4]
 8001b16:	1cbb      	adds	r3, r7, #2
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	4803      	ldr	r0, [pc, #12]	@ (8001b2c <servo_driver_write_reg+0x3c>)
 8001b1e:	f000 ffa1 	bl	8002a64 <HAL_I2C_Mem_Write>
    return;
 8001b22:	bf00      	nop
}
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000188 	.word	0x20000188

08001b30 <servo_driver_en_chans>:

//Enable specified servo-channels (will automatically actuate angle)

//ADD DISABLE!!!!

void servo_driver_en_chans(servoDriverObj *driver_pt, uint8_t chan_index_l, uint8_t chan_index_h){
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	70fb      	strb	r3, [r7, #3]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	70bb      	strb	r3, [r7, #2]
    //Set enable-bits for selected servo-chans
    for (int i = chan_index_l; i < chan_index_h + 1; i++){
 8001b40:	78fb      	ldrb	r3, [r7, #3]
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	e01f      	b.n	8001b86 <servo_driver_en_chans+0x56>
        driver_pt->chan_en_mask |= (1 << i);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 8001b4c:	b21a      	sxth	r2, r3
 8001b4e:	2101      	movs	r1, #1
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	fa01 f303 	lsl.w	r3, r1, r3
 8001b56:	b21b      	sxth	r3, r3
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	b21b      	sxth	r3, r3
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84
        //Actuate angle
        servo_driver_set_angle(driver_pt, i, driver_pt->servo_angles[i]);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	b2d9      	uxtb	r1, r3
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	3304      	adds	r3, #4
 8001b72:	edd3 7a00 	vldr	s15, [r3]
 8001b76:	eeb0 0a67 	vmov.f32	s0, s15
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 f80c 	bl	8001b98 <servo_driver_set_angle>
    for (int i = chan_index_l; i < chan_index_h + 1; i++){
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	3301      	adds	r3, #1
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	78bb      	ldrb	r3, [r7, #2]
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	dddb      	ble.n	8001b46 <servo_driver_en_chans+0x16>
    }

    return;
 8001b8e:	bf00      	nop
}
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
	...

08001b98 <servo_driver_set_angle>:




//Set angle of servo on specified channel
void servo_driver_set_angle(servoDriverObj *driver_pt, uint8_t chan_index, float angle){
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	ed87 0a01 	vstr	s0, [r7, #4]
 8001ba6:	72fb      	strb	r3, [r7, #11]
	//Update servo-state
	driver_pt->servo_angles[chan_index] = angle;
 8001ba8:	7afb      	ldrb	r3, [r7, #11]
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	4413      	add	r3, r2
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	601a      	str	r2, [r3, #0]


	//Don't actuate the updated angle if the channel isn't enabled
	if ((driver_pt->chan_en_mask & (1 << chan_index)) == 0){
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	7afb      	ldrb	r3, [r7, #11]
 8001bc0:	fa42 f303 	asr.w	r3, r2, r3
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d05d      	beq.n	8001c88 <servo_driver_set_angle+0xf0>
		return;
	}

	//Apply calibration offset
	float true_angle = 180.0f - (driver_pt->servo_angle_offsets[chan_index] + angle + 90.0f);
 8001bcc:	7afb      	ldrb	r3, [r7, #11]
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	3310      	adds	r3, #16
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	3304      	adds	r3, #4
 8001bd8:	ed93 7a00 	vldr	s14, [r3]
 8001bdc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001be0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be4:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001c90 <servo_driver_set_angle+0xf8>
 8001be8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bec:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8001c94 <servo_driver_set_angle+0xfc>
 8001bf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bf4:	edc7 7a07 	vstr	s15, [r7, #28]

    //Map angle to tick count (0-180 deg  ->  150-500 ticks)
	uint16_t num_ticks = (uint16_t) map_range( clamp(true_angle, 0.0, 180.0), 0, 180, 500, 150);
 8001bf8:	ed9f 1a26 	vldr	s2, [pc, #152]	@ 8001c94 <servo_driver_set_angle+0xfc>
 8001bfc:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8001c98 <servo_driver_set_angle+0x100>
 8001c00:	ed97 0a07 	vldr	s0, [r7, #28]
 8001c04:	f000 faba 	bl	800217c <clamp>
 8001c08:	eef0 7a40 	vmov.f32	s15, s0
 8001c0c:	ed9f 2a23 	vldr	s4, [pc, #140]	@ 8001c9c <servo_driver_set_angle+0x104>
 8001c10:	eddf 1a23 	vldr	s3, [pc, #140]	@ 8001ca0 <servo_driver_set_angle+0x108>
 8001c14:	ed9f 1a1f 	vldr	s2, [pc, #124]	@ 8001c94 <servo_driver_set_angle+0xfc>
 8001c18:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 8001c98 <servo_driver_set_angle+0x100>
 8001c1c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c20:	f000 fa7e 	bl	8002120 <map_range>
 8001c24:	eef0 7a40 	vmov.f32	s15, s0
 8001c28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c2c:	ee17 3a90 	vmov	r3, s15
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	82bb      	strh	r3, [r7, #20]

	//Pointer to the lower 8-bits of tick-count
	uint8_t *tick_pt = (uint8_t *) &num_ticks;
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	61bb      	str	r3, [r7, #24]

	//Address of pwm_registers for specified channel
	uint8_t pwm_base_reg = 0x06 + chan_index*4;
 8001c3a:	7afb      	ldrb	r3, [r7, #11]
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	3306      	adds	r3, #6
 8001c42:	75fb      	strb	r3, [r7, #23]

	//Write lower and higher reg for tick-count
	servo_driver_write_reg(driver_pt, pwm_base_reg, 0x00);
 8001c44:	7dfb      	ldrb	r3, [r7, #23]
 8001c46:	2200      	movs	r2, #0
 8001c48:	4619      	mov	r1, r3
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f7ff ff50 	bl	8001af0 <servo_driver_write_reg>
	servo_driver_write_reg(driver_pt, pwm_base_reg + 1, 0x00);
 8001c50:	7dfb      	ldrb	r3, [r7, #23]
 8001c52:	3301      	adds	r3, #1
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2200      	movs	r2, #0
 8001c58:	4619      	mov	r1, r3
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f7ff ff48 	bl	8001af0 <servo_driver_write_reg>
	servo_driver_write_reg(driver_pt, pwm_base_reg + 2, *tick_pt);
 8001c60:	7dfb      	ldrb	r3, [r7, #23]
 8001c62:	3302      	adds	r3, #2
 8001c64:	b2d9      	uxtb	r1, r3
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f7ff ff3f 	bl	8001af0 <servo_driver_write_reg>
	servo_driver_write_reg(driver_pt, pwm_base_reg + 3, *(tick_pt + 1));
 8001c72:	7dfb      	ldrb	r3, [r7, #23]
 8001c74:	3303      	adds	r3, #3
 8001c76:	b2d9      	uxtb	r1, r3
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	68f8      	ldr	r0, [r7, #12]
 8001c82:	f7ff ff35 	bl	8001af0 <servo_driver_write_reg>


	return;
 8001c86:	e000      	b.n	8001c8a <servo_driver_set_angle+0xf2>
		return;
 8001c88:	bf00      	nop
}
 8001c8a:	3720      	adds	r7, #32
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	42b40000 	.word	0x42b40000
 8001c94:	43340000 	.word	0x43340000
 8001c98:	00000000 	.word	0x00000000
 8001c9c:	43160000 	.word	0x43160000
 8001ca0:	43fa0000 	.word	0x43fa0000

08001ca4 <servo_driver_query_angle>:



//Returns the angle-state of a specified servo
float servo_driver_query_angle(servoDriverObj *driver_pt, uint8_t chan_index){
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	460b      	mov	r3, r1
 8001cae:	70fb      	strb	r3, [r7, #3]
	return driver_pt->servo_angles[chan_index];
 8001cb0:	78fb      	ldrb	r3, [r7, #3]
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3304      	adds	r3, #4
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	ee07 3a90 	vmov	s15, r3
}
 8001cc0:	eeb0 0a67 	vmov.f32	s0, s15
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <__NVIC_EnableIRQ>:
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	db0b      	blt.n	8001cfa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	f003 021f 	and.w	r2, r3, #31
 8001ce8:	4907      	ldr	r1, [pc, #28]	@ (8001d08 <__NVIC_EnableIRQ+0x38>)
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	095b      	lsrs	r3, r3, #5
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	e000e100 	.word	0xe000e100

08001d0c <timer_init>:


// ===== INITIALISATION =====


void timer_init(void) {
 8001d0c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d10:	b088      	sub	sp, #32
 8001d12:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d14:	b672      	cpsid	i
}
 8001d16:	bf00      	nop
    __disable_irq();

    // enable all clocks
    for (uintmax_t i = 0; i < _TIMER_COUNT; i++) {
 8001d18:	f04f 0200 	mov.w	r2, #0
 8001d1c:	f04f 0300 	mov.w	r3, #0
 8001d20:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001d24:	e018      	b.n	8001d58 <timer_init+0x4c>
        const TimerClockEnable en = CLOCK_ENABLES[i];
 8001d26:	4927      	ldr	r1, [pc, #156]	@ (8001dc4 <timer_init+0xb8>)
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	4413      	add	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	18ca      	adds	r2, r1, r3
 8001d34:	1d3b      	adds	r3, r7, #4
 8001d36:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d38:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *en.reg |=  en.mask;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6819      	ldr	r1, [r3, #0]
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	430a      	orrs	r2, r1
 8001d46:	601a      	str	r2, [r3, #0]
    for (uintmax_t i = 0; i < _TIMER_COUNT; i++) {
 8001d48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d4c:	f112 0801 	adds.w	r8, r2, #1
 8001d50:	f143 0900 	adc.w	r9, r3, #0
 8001d54:	e9c7 8906 	strd	r8, r9, [r7, #24]
 8001d58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d5c:	2a08      	cmp	r2, #8
 8001d5e:	f173 0300 	sbcs.w	r3, r3, #0
 8001d62:	d3e0      	bcc.n	8001d26 <timer_init+0x1a>
    }

    // enable irq events
    for (uintmax_t i = 0; i < _TIMER_COUNT; i++) {
 8001d64:	f04f 0200 	mov.w	r2, #0
 8001d68:	f04f 0300 	mov.w	r3, #0
 8001d6c:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001d70:	e01a      	b.n	8001da8 <timer_init+0x9c>
        RAWS[i]->DIER |= TIM_DIER_UIE;
 8001d72:	4a15      	ldr	r2, [pc, #84]	@ (8001dc8 <timer_init+0xbc>)
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d7a:	68da      	ldr	r2, [r3, #12]
 8001d7c:	4912      	ldr	r1, [pc, #72]	@ (8001dc8 <timer_init+0xbc>)
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d84:	f042 0201 	orr.w	r2, r2, #1
 8001d88:	60da      	str	r2, [r3, #12]
        NVIC_EnableIRQ(IRQ_NUMS[i]);
 8001d8a:	4a10      	ldr	r2, [pc, #64]	@ (8001dcc <timer_init+0xc0>)
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	4413      	add	r3, r2
 8001d90:	f993 3000 	ldrsb.w	r3, [r3]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff9b 	bl	8001cd0 <__NVIC_EnableIRQ>
    for (uintmax_t i = 0; i < _TIMER_COUNT; i++) {
 8001d9a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d9e:	1c54      	adds	r4, r2, #1
 8001da0:	f143 0500 	adc.w	r5, r3, #0
 8001da4:	e9c7 4504 	strd	r4, r5, [r7, #16]
 8001da8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001dac:	2a08      	cmp	r2, #8
 8001dae:	f173 0300 	sbcs.w	r3, r3, #0
 8001db2:	d3de      	bcc.n	8001d72 <timer_init+0x66>
  __ASM volatile ("cpsie i" : : : "memory");
 8001db4:	b662      	cpsie	i
}
 8001db6:	bf00      	nop
    }

    __enable_irq();
}
 8001db8:	bf00      	nop
 8001dba:	3720      	adds	r7, #32
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001dc2:	bf00      	nop
 8001dc4:	080062d4 	.word	0x080062d4
 8001dc8:	2000008c 	.word	0x2000008c
 8001dcc:	200000ac 	.word	0x200000ac

08001dd0 <timer_enable_set>:


// ===== CONTROL =====


void timer_enable_set(const TimerSel sel, const bool enable) {
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	460a      	mov	r2, r1
 8001dda:	71fb      	strb	r3, [r7, #7]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	71bb      	strb	r3, [r7, #6]
    TimerRaw *raw = RAWS[sel];
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	4a1b      	ldr	r2, [pc, #108]	@ (8001e50 <timer_enable_set+0x80>)
 8001de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de8:	60fb      	str	r3, [r7, #12]

    // clear interrupt flag in case event was already waiting
    raw->SR &= ~TIM_SR_UIF;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	f023 0201 	bic.w	r2, r3, #1
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	611a      	str	r2, [r3, #16]

    timer_counter_reset(sel);
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f000 f8c9 	bl	8001f90 <timer_counter_reset>
    // HACK: After writes to `PSC`, `ARR`, and `CNT,
    // there seems to be a hardware bug that causes the `UIF` flag
    // to be set immediately.
    //
    // To avoid this, manually generate the interrupt, and then clear it
    raw->EGR |=  TIM_EGR_UG;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	f043 0201 	orr.w	r2, r3, #1
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	615a      	str	r2, [r3, #20]
    raw->SR  &= ~TIM_SR_UIF;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	f023 0201 	bic.w	r2, r3, #1
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	611a      	str	r2, [r3, #16]

    // Need to set `.enable` after the irq has fired
    // So if we are enabling, it dummy fires while `enable=false`,
    // which is ignored by the handler

    STATES[sel].enable = enable;
 8001e16:	79fa      	ldrb	r2, [r7, #7]
 8001e18:	490e      	ldr	r1, [pc, #56]	@ (8001e54 <timer_enable_set+0x84>)
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	4413      	add	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	440b      	add	r3, r1
 8001e24:	79ba      	ldrb	r2, [r7, #6]
 8001e26:	701a      	strb	r2, [r3, #0]
    if (enable)
 8001e28:	79bb      	ldrb	r3, [r7, #6]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d006      	beq.n	8001e3c <timer_enable_set+0x6c>
        raw->CR1 |=  TIM_CR1_CEN;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f043 0201 	orr.w	r2, r3, #1
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	601a      	str	r2, [r3, #0]
    else
        raw->CR1 &= ~TIM_CR1_CEN;

}
 8001e3a:	e005      	b.n	8001e48 <timer_enable_set+0x78>
        raw->CR1 &= ~TIM_CR1_CEN;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f023 0201 	bic.w	r2, r3, #1
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	601a      	str	r2, [r3, #0]
}
 8001e48:	bf00      	nop
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	2000008c 	.word	0x2000008c
 8001e54:	200000b4 	.word	0x200000b4

08001e58 <timer_silent_set>:
    // detect if the bit is masked on
    const TimerClockEnable en = CLOCK_ENABLES[sel];
    return *en.reg & en.mask;
}

void timer_silent_set(const TimerSel sel, const bool silent) {
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	460a      	mov	r2, r1
 8001e62:	71fb      	strb	r3, [r7, #7]
 8001e64:	4613      	mov	r3, r2
 8001e66:	71bb      	strb	r3, [r7, #6]
    STATES[sel].silent = silent;
 8001e68:	79fa      	ldrb	r2, [r7, #7]
 8001e6a:	4907      	ldr	r1, [pc, #28]	@ (8001e88 <timer_silent_set+0x30>)
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	4413      	add	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	440b      	add	r3, r1
 8001e76:	3301      	adds	r3, #1
 8001e78:	79ba      	ldrb	r2, [r7, #6]
 8001e7a:	701a      	strb	r2, [r3, #0]
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	200000b4 	.word	0x200000b4

08001e8c <timer_period_set>:


// ===== PERIOD =====


void timer_period_set(const TimerSel sel, const TimerPeriod period) {
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	460a      	mov	r2, r1
 8001e96:	71fb      	strb	r3, [r7, #7]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	80bb      	strh	r3, [r7, #4]
    STATES[sel].period = period;
 8001e9c:	79fa      	ldrb	r2, [r7, #7]
 8001e9e:	490b      	ldr	r1, [pc, #44]	@ (8001ecc <timer_period_set+0x40>)
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	4413      	add	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	3304      	adds	r3, #4
 8001eac:	88ba      	ldrh	r2, [r7, #4]
 8001eae:	801a      	strh	r2, [r3, #0]
    TimerRaw *raw = RAWS[sel];
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
 8001eb2:	4a07      	ldr	r2, [pc, #28]	@ (8001ed0 <timer_period_set+0x44>)
 8001eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb8:	60fb      	str	r3, [r7, #12]
    raw->ARR = period;
 8001eba:	88ba      	ldrh	r2, [r7, #4]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001ec0:	bf00      	nop
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	200000b4 	.word	0x200000b4
 8001ed0:	2000008c 	.word	0x2000008c

08001ed4 <timer_prescaler_set>:
TimerPeriod timer_period_get(const TimerSel sel) {
    return STATES[sel].period;
}


void timer_prescaler_set(const TimerSel sel, const TimerPrescale scale) {
 8001ed4:	b4b0      	push	{r4, r5, r7}
 8001ed6:	b087      	sub	sp, #28
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	460a      	mov	r2, r1
 8001ede:	71fb      	strb	r3, [r7, #7]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	80bb      	strh	r3, [r7, #4]
    STATES[sel].prescale = scale;
 8001ee4:	79fa      	ldrb	r2, [r7, #7]
 8001ee6:	491b      	ldr	r1, [pc, #108]	@ (8001f54 <timer_prescaler_set+0x80>)
 8001ee8:	4613      	mov	r3, r2
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	4413      	add	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	3306      	adds	r3, #6
 8001ef4:	88ba      	ldrh	r2, [r7, #4]
 8001ef6:	801a      	strh	r2, [r3, #0]
    TimerRaw *const raw = RAWS[sel];
 8001ef8:	79fb      	ldrb	r3, [r7, #7]
 8001efa:	4a17      	ldr	r2, [pc, #92]	@ (8001f58 <timer_prescaler_set+0x84>)
 8001efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f00:	60fb      	str	r3, [r7, #12]
    raw->PSC = scale;
 8001f02:	88ba      	ldrh	r2, [r7, #4]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	629a      	str	r2, [r3, #40]	@ 0x28

    // changing the prescaler will not take effect until counter overflow
    // so set reload to `1` and counter to `0`, to immediately overflow
    // and apply changes
    const uint32_t arr = raw->ARR;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f0c:	60bb      	str	r3, [r7, #8]
    raw->ARR = 1;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2201      	movs	r2, #1
 8001f12:	62da      	str	r2, [r3, #44]	@ 0x2c
    raw->CNT = 0;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2200      	movs	r2, #0
 8001f18:	625a      	str	r2, [r3, #36]	@ 0x24
    // spin to give time for changes to take affect
    for (uintmax_t i = 0; i < 8; i++)
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	f04f 0300 	mov.w	r3, #0
 8001f22:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001f26:	e007      	b.n	8001f38 <timer_prescaler_set+0x64>
        asm("NOP");
 8001f28:	bf00      	nop
    for (uintmax_t i = 0; i < 8; i++)
 8001f2a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f2e:	1c54      	adds	r4, r2, #1
 8001f30:	f143 0500 	adc.w	r5, r3, #0
 8001f34:	e9c7 4504 	strd	r4, r5, [r7, #16]
 8001f38:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f3c:	2a08      	cmp	r2, #8
 8001f3e:	f173 0300 	sbcs.w	r3, r3, #0
 8001f42:	d3f1      	bcc.n	8001f28 <timer_prescaler_set+0x54>
    raw->ARR = arr;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001f4a:	bf00      	nop
 8001f4c:	371c      	adds	r7, #28
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bcb0      	pop	{r4, r5, r7}
 8001f52:	4770      	bx	lr
 8001f54:	200000b4 	.word	0x200000b4
 8001f58:	2000008c 	.word	0x2000008c

08001f5c <timer_recur_set>:
TimerPrescale timer_prescale_get(const TimerSel sel) {
    return STATES[sel].prescale;
}

// TODO: See TIM->CR1->OPM for oneshot mode
void timer_recur_set(const TimerSel sel, const bool recur) {
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	460a      	mov	r2, r1
 8001f66:	71fb      	strb	r3, [r7, #7]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	71bb      	strb	r3, [r7, #6]
    STATES[sel].recur = recur;
 8001f6c:	79fa      	ldrb	r2, [r7, #7]
 8001f6e:	4907      	ldr	r1, [pc, #28]	@ (8001f8c <timer_recur_set+0x30>)
 8001f70:	4613      	mov	r3, r2
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	4413      	add	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	3302      	adds	r3, #2
 8001f7c:	79ba      	ldrb	r2, [r7, #6]
 8001f7e:	701a      	strb	r2, [r3, #0]
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	200000b4 	.word	0x200000b4

08001f90 <timer_counter_reset>:
bool timer_recur_get(const TimerSel sel) {
    return STATES[sel].recur;
}


void timer_counter_reset(const TimerSel sel) {
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	71fb      	strb	r3, [r7, #7]
    RAWS[sel]->CNT = 0;
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	4a05      	ldr	r2, [pc, #20]	@ (8001fb4 <timer_counter_reset+0x24>)
 8001f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	2000008c 	.word	0x2000008c

08001fb8 <_timer_interrupt_handler>:

// ===== CALLBACKS =====


/// The callback handler called by our IRQ handlers
static void _timer_interrupt_handler(const TimerSel sel, GameState *game) {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	6039      	str	r1, [r7, #0]
 8001fc2:	71fb      	strb	r3, [r7, #7]
    TimerRaw *raw = RAWS[sel];
 8001fc4:	79fb      	ldrb	r3, [r7, #7]
 8001fc6:	4a25      	ldr	r2, [pc, #148]	@ (800205c <_timer_interrupt_handler+0xa4>)
 8001fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fcc:	617b      	str	r3, [r7, #20]

    // check it was definitely this timer that fired
    // since multiple timers can share one event
    if (!(raw->SR & TIM_SR_UIF))
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d03a      	beq.n	8002050 <_timer_interrupt_handler+0x98>
        return;

    // clear interrupt flag so it doesn't get called again
    raw->SR &= ~TIM_SR_UIF;
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	f023 0201 	bic.w	r2, r3, #1
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	611a      	str	r2, [r3, #16]

    TimerState *const state = &STATES[sel];
 8001fe6:	79fa      	ldrb	r2, [r7, #7]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	4413      	add	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4a1b      	ldr	r2, [pc, #108]	@ (8002060 <_timer_interrupt_handler+0xa8>)
 8001ff2:	4413      	add	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]

    // We may get a dummy fire when enabling the timer, see `timer_enable_set()`
    if (!state->enable)
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	f083 0301 	eor.w	r3, r3, #1
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b00      	cmp	r3, #0
 8002002:	d127      	bne.n	8002054 <_timer_interrupt_handler+0x9c>
        return;

    // update silent for future firings
    const bool was_silent = state->silent;
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	785b      	ldrb	r3, [r3, #1]
 8002008:	73fb      	strb	r3, [r7, #15]
    state->silent = !state->recur;
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	789b      	ldrb	r3, [r3, #2]
 800200e:	2b00      	cmp	r3, #0
 8002010:	bf14      	ite	ne
 8002012:	2301      	movne	r3, #1
 8002014:	2300      	moveq	r3, #0
 8002016:	b2db      	uxtb	r3, r3
 8002018:	f083 0301 	eor.w	r3, r3, #1
 800201c:	b2db      	uxtb	r3, r3
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	b2da      	uxtb	r2, r3
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	705a      	strb	r2, [r3, #1]

    // call callback if enabled and has been set
    // do this after setting silent, so the callback
    // can un-silence itself
    if (!was_silent && state->callback != NULL)
 8002028:	7bfb      	ldrb	r3, [r7, #15]
 800202a:	f083 0301 	eor.w	r3, r3, #1
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b00      	cmp	r3, #0
 8002032:	d008      	beq.n	8002046 <_timer_interrupt_handler+0x8e>
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d004      	beq.n	8002046 <_timer_interrupt_handler+0x8e>
        state->callback(sel);
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	79fa      	ldrb	r2, [r7, #7]
 8002042:	4610      	mov	r0, r2
 8002044:	4798      	blx	r3

    // TODO: should not be using this, use auto reload
    // reset counter
    timer_counter_reset(sel);
 8002046:	79fb      	ldrb	r3, [r7, #7]
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff ffa1 	bl	8001f90 <timer_counter_reset>
 800204e:	e002      	b.n	8002056 <_timer_interrupt_handler+0x9e>
        return;
 8002050:	bf00      	nop
 8002052:	e000      	b.n	8002056 <_timer_interrupt_handler+0x9e>
        return;
 8002054:	bf00      	nop
}
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	2000008c 	.word	0x2000008c
 8002060:	200000b4 	.word	0x200000b4

08002064 <timer_callback_set>:

void timer_callback_set(const TimerSel sel, TimerCallbackFn *const callback) {
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	6039      	str	r1, [r7, #0]
 800206e:	71fb      	strb	r3, [r7, #7]
    STATES[sel].callback = callback;
 8002070:	79fa      	ldrb	r2, [r7, #7]
 8002072:	4907      	ldr	r1, [pc, #28]	@ (8002090 <timer_callback_set+0x2c>)
 8002074:	4613      	mov	r3, r2
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	4413      	add	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	3308      	adds	r3, #8
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	601a      	str	r2, [r3, #0]
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	200000b4 	.word	0x200000b4

08002094 <TIM2_IRQHandler>:
// NOTE: IRQ handlers seem to be added by overriding the weakly linked
// default handler. Some are also shared for multiple events


// TIM2 global interrupt
void TIM2_IRQHandler(void) {
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
    _timer_interrupt_handler(TIMER_SEL_2, &game);
 8002098:	4902      	ldr	r1, [pc, #8]	@ (80020a4 <TIM2_IRQHandler+0x10>)
 800209a:	2000      	movs	r0, #0
 800209c:	f7ff ff8c 	bl	8001fb8 <_timer_interrupt_handler>
}
 80020a0:	bf00      	nop
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20000004 	.word	0x20000004

080020a8 <TIM3_IRQHandler>:
// TIM3 global interrupt
void TIM3_IRQHandler(void) {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
    _timer_interrupt_handler(TIMER_SEL_3, &game);
 80020ac:	4902      	ldr	r1, [pc, #8]	@ (80020b8 <TIM3_IRQHandler+0x10>)
 80020ae:	2001      	movs	r0, #1
 80020b0:	f7ff ff82 	bl	8001fb8 <_timer_interrupt_handler>
}
 80020b4:	bf00      	nop
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	20000004 	.word	0x20000004

080020bc <TIM4_IRQHandler>:
// TIM4 global interrupt
void TIM4_IRQHandler(void) {
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
    _timer_interrupt_handler(TIMER_SEL_4, &game);
 80020c0:	4902      	ldr	r1, [pc, #8]	@ (80020cc <TIM4_IRQHandler+0x10>)
 80020c2:	2002      	movs	r0, #2
 80020c4:	f7ff ff78 	bl	8001fb8 <_timer_interrupt_handler>
}
 80020c8:	bf00      	nop
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	20000004 	.word	0x20000004

080020d0 <TIM7_IRQHandler>:
// TIM6 global and DAC12 underrun interrupts
void TIM6_DACUNDER_IRQHandler(void) {
    _timer_interrupt_handler(TIMER_SEL_6, &game);
}
// TIM7 global interrupt
void TIM7_IRQHandler(void) {
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
    _timer_interrupt_handler(TIMER_SEL_7, &game);
 80020d4:	4902      	ldr	r1, [pc, #8]	@ (80020e0 <TIM7_IRQHandler+0x10>)
 80020d6:	2004      	movs	r0, #4
 80020d8:	f7ff ff6e 	bl	8001fb8 <_timer_interrupt_handler>
}
 80020dc:	bf00      	nop
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	20000004 	.word	0x20000004

080020e4 <TIM1_BRK_TIM15_IRQHandler>:
// TIM1 Break/TIM15 global interrupts
void TIM1_BRK_TIM15_IRQHandler(void) {
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
    _timer_interrupt_handler(TIMER_SEL_15, &game);
 80020e8:	4902      	ldr	r1, [pc, #8]	@ (80020f4 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80020ea:	2005      	movs	r0, #5
 80020ec:	f7ff ff64 	bl	8001fb8 <_timer_interrupt_handler>
}
 80020f0:	bf00      	nop
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20000004 	.word	0x20000004

080020f8 <TIM1_UP_TIM16_IRQHandler>:
// TIM1 Update/TIM16 global interrupts
void TIM1_UP_TIM16_IRQHandler(void) {
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
    _timer_interrupt_handler(TIMER_SEL_16, &game);
 80020fc:	4902      	ldr	r1, [pc, #8]	@ (8002108 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80020fe:	2006      	movs	r0, #6
 8002100:	f7ff ff5a 	bl	8001fb8 <_timer_interrupt_handler>
}
 8002104:	bf00      	nop
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20000004 	.word	0x20000004

0800210c <TIM1_TRG_COM_TIM17_IRQHandler>:
// TIM1 trigger and commutation/TIM17 interrupts
void TIM1_TRG_COM_TIM17_IRQHandler(void) {
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
    _timer_interrupt_handler(TIMER_SEL_17, &game);
 8002110:	4902      	ldr	r1, [pc, #8]	@ (800211c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8002112:	2007      	movs	r0, #7
 8002114:	f7ff ff50 	bl	8001fb8 <_timer_interrupt_handler>
}
 8002118:	bf00      	nop
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20000004 	.word	0x20000004

08002120 <map_range>:
#include "utils.h"

float map_range(float val, float in_min, float in_max, float out_min, float out_max){
 8002120:	b480      	push	{r7}
 8002122:	b087      	sub	sp, #28
 8002124:	af00      	add	r7, sp, #0
 8002126:	ed87 0a05 	vstr	s0, [r7, #20]
 800212a:	edc7 0a04 	vstr	s1, [r7, #16]
 800212e:	ed87 1a03 	vstr	s2, [r7, #12]
 8002132:	edc7 1a02 	vstr	s3, [r7, #8]
 8002136:	ed87 2a01 	vstr	s4, [r7, #4]
	return out_min + (val - in_min)/(in_max - in_min) * (out_max - out_min);
 800213a:	ed97 7a05 	vldr	s14, [r7, #20]
 800213e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002142:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002146:	ed97 7a03 	vldr	s14, [r7, #12]
 800214a:	edd7 7a04 	vldr	s15, [r7, #16]
 800214e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002156:	edd7 6a01 	vldr	s13, [r7, #4]
 800215a:	edd7 7a02 	vldr	s15, [r7, #8]
 800215e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002162:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002166:	edd7 7a02 	vldr	s15, [r7, #8]
 800216a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800216e:	eeb0 0a67 	vmov.f32	s0, s15
 8002172:	371c      	adds	r7, #28
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <clamp>:

//Utility functions
float clamp(float val, float min, float max){    return val < min ? min : (max < val ? max : val);
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	ed87 0a03 	vstr	s0, [r7, #12]
 8002186:	edc7 0a02 	vstr	s1, [r7, #8]
 800218a:	ed87 1a01 	vstr	s2, [r7, #4]
 800218e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002192:	edd7 7a02 	vldr	s15, [r7, #8]
 8002196:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800219a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800219e:	d501      	bpl.n	80021a4 <clamp+0x28>
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	e00b      	b.n	80021bc <clamp+0x40>
 80021a4:	ed97 7a01 	vldr	s14, [r7, #4]
 80021a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80021ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b4:	d501      	bpl.n	80021ba <clamp+0x3e>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	e000      	b.n	80021bc <clamp+0x40>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	ee07 3a90 	vmov	s15, r3
}
 80021c0:	eeb0 0a67 	vmov.f32	s0, s15
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
	...

080021d0 <bezier1D>:
float bezier1D(float t, float P0, float P3, float K) {
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b088      	sub	sp, #32
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	ed87 0a03 	vstr	s0, [r7, #12]
 80021da:	edc7 0a02 	vstr	s1, [r7, #8]
 80021de:	ed87 1a01 	vstr	s2, [r7, #4]
 80021e2:	edc7 1a00 	vstr	s3, [r7]
    //Handle-offset A as a proportion K of the range

	//Clamp t within legal-range
	t = clamp(t, 0.0, 1.0);
 80021e6:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 80021ea:	eddf 0a39 	vldr	s1, [pc, #228]	@ 80022d0 <bezier1D+0x100>
 80021ee:	ed97 0a03 	vldr	s0, [r7, #12]
 80021f2:	f7ff ffc3 	bl	800217c <clamp>
 80021f6:	ed87 0a03 	vstr	s0, [r7, #12]

    float A = (P3 - P0)*K;
 80021fa:	ed97 7a01 	vldr	s14, [r7, #4]
 80021fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8002202:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002206:	ed97 7a00 	vldr	s14, [r7]
 800220a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800220e:	edc7 7a07 	vstr	s15, [r7, #28]

    //Calculate the inner-handle positions
    float P1 = P0 + A;
 8002212:	ed97 7a02 	vldr	s14, [r7, #8]
 8002216:	edd7 7a07 	vldr	s15, [r7, #28]
 800221a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800221e:	edc7 7a06 	vstr	s15, [r7, #24]
    float P2 = P3 - A;
 8002222:	ed97 7a01 	vldr	s14, [r7, #4]
 8002226:	edd7 7a07 	vldr	s15, [r7, #28]
 800222a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800222e:	edc7 7a05 	vstr	s15, [r7, #20]

    //Calculate bezier-value at position t
    float u = 1.0 - t;
 8002232:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002236:	edd7 7a03 	vldr	s15, [r7, #12]
 800223a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800223e:	edc7 7a04 	vstr	s15, [r7, #16]
    return
        u*u*u * P0 +
 8002242:	edd7 7a04 	vldr	s15, [r7, #16]
 8002246:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800224a:	edd7 7a04 	vldr	s15, [r7, #16]
 800224e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002252:	edd7 7a02 	vldr	s15, [r7, #8]
 8002256:	ee27 7a27 	vmul.f32	s14, s14, s15
        3 * u*u * t * P1 +
 800225a:	edd7 7a04 	vldr	s15, [r7, #16]
 800225e:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8002262:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002266:	edd7 7a04 	vldr	s15, [r7, #16]
 800226a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800226e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002272:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002276:	edd7 7a06 	vldr	s15, [r7, #24]
 800227a:	ee66 7aa7 	vmul.f32	s15, s13, s15
        u*u*u * P0 +
 800227e:	ee37 7a27 	vadd.f32	s14, s14, s15
        3 * u * t*t * P2 +
 8002282:	edd7 7a04 	vldr	s15, [r7, #16]
 8002286:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 800228a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800228e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002292:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002296:	edd7 7a03 	vldr	s15, [r7, #12]
 800229a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800229e:	edd7 7a05 	vldr	s15, [r7, #20]
 80022a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
        3 * u*u * t * P1 +
 80022a6:	ee37 7a27 	vadd.f32	s14, s14, s15
        t*t*t * P3;
 80022aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80022ae:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80022b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80022b6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80022be:	ee66 7aa7 	vmul.f32	s15, s13, s15
        3 * u * t*t * P2 +
 80022c2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80022c6:	eeb0 0a67 	vmov.f32	s0, s15
 80022ca:	3720      	adds	r7, #32
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	00000000 	.word	0x00000000

080022d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80022d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800230c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80022d8:	f7fe fe0e 	bl	8000ef8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022dc:	480c      	ldr	r0, [pc, #48]	@ (8002310 <LoopForever+0x6>)
  ldr r1, =_edata
 80022de:	490d      	ldr	r1, [pc, #52]	@ (8002314 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002318 <LoopForever+0xe>)
  movs r3, #0
 80022e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022e4:	e002      	b.n	80022ec <LoopCopyDataInit>

080022e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ea:	3304      	adds	r3, #4

080022ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022f0:	d3f9      	bcc.n	80022e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022f2:	4a0a      	ldr	r2, [pc, #40]	@ (800231c <LoopForever+0x12>)
  ldr r4, =_ebss
 80022f4:	4c0a      	ldr	r4, [pc, #40]	@ (8002320 <LoopForever+0x16>)
  movs r3, #0
 80022f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022f8:	e001      	b.n	80022fe <LoopFillZerobss>

080022fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022fc:	3204      	adds	r2, #4

080022fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002300:	d3fb      	bcc.n	80022fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002302:	f003 fb83 	bl	8005a0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002306:	f7fe f90f 	bl	8000528 <main>

0800230a <LoopForever>:

LoopForever:
    b LoopForever
 800230a:	e7fe      	b.n	800230a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800230c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002314:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8002318:	08006398 	.word	0x08006398
  ldr r2, =_sbss
 800231c:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 8002320:	200006fc 	.word	0x200006fc

08002324 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002324:	e7fe      	b.n	8002324 <ADC1_2_IRQHandler>
	...

08002328 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800232c:	4b08      	ldr	r3, [pc, #32]	@ (8002350 <HAL_Init+0x28>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a07      	ldr	r2, [pc, #28]	@ (8002350 <HAL_Init+0x28>)
 8002332:	f043 0310 	orr.w	r3, r3, #16
 8002336:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002338:	2003      	movs	r0, #3
 800233a:	f000 f931 	bl	80025a0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800233e:	2000      	movs	r0, #0
 8002340:	f000 f808 	bl	8002354 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002344:	f7fe fc30 	bl	8000ba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40022000 	.word	0x40022000

08002354 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800235c:	4b12      	ldr	r3, [pc, #72]	@ (80023a8 <HAL_InitTick+0x54>)
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	4b12      	ldr	r3, [pc, #72]	@ (80023ac <HAL_InitTick+0x58>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	4619      	mov	r1, r3
 8002366:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800236a:	fbb3 f3f1 	udiv	r3, r3, r1
 800236e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002372:	4618      	mov	r0, r3
 8002374:	f000 f93b 	bl	80025ee <HAL_SYSTICK_Config>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e00e      	b.n	80023a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b0f      	cmp	r3, #15
 8002386:	d80a      	bhi.n	800239e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002388:	2200      	movs	r2, #0
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	f04f 30ff 	mov.w	r0, #4294967295
 8002390:	f000 f911 	bl	80025b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002394:	4a06      	ldr	r2, [pc, #24]	@ (80023b0 <HAL_InitTick+0x5c>)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800239a:	2300      	movs	r3, #0
 800239c:	e000      	b.n	80023a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	2000005c 	.word	0x2000005c
 80023ac:	20000118 	.word	0x20000118
 80023b0:	20000114 	.word	0x20000114

080023b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023b8:	4b06      	ldr	r3, [pc, #24]	@ (80023d4 <HAL_IncTick+0x20>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	461a      	mov	r2, r3
 80023be:	4b06      	ldr	r3, [pc, #24]	@ (80023d8 <HAL_IncTick+0x24>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4413      	add	r3, r2
 80023c4:	4a04      	ldr	r2, [pc, #16]	@ (80023d8 <HAL_IncTick+0x24>)
 80023c6:	6013      	str	r3, [r2, #0]
}
 80023c8:	bf00      	nop
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	20000118 	.word	0x20000118
 80023d8:	200005b0 	.word	0x200005b0

080023dc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  return uwTick;  
 80023e0:	4b03      	ldr	r3, [pc, #12]	@ (80023f0 <HAL_GetTick+0x14>)
 80023e2:	681b      	ldr	r3, [r3, #0]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	200005b0 	.word	0x200005b0

080023f4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023fc:	f7ff ffee 	bl	80023dc <HAL_GetTick>
 8002400:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800240c:	d005      	beq.n	800241a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800240e:	4b0a      	ldr	r3, [pc, #40]	@ (8002438 <HAL_Delay+0x44>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	461a      	mov	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	4413      	add	r3, r2
 8002418:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800241a:	bf00      	nop
 800241c:	f7ff ffde 	bl	80023dc <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	429a      	cmp	r2, r3
 800242a:	d8f7      	bhi.n	800241c <HAL_Delay+0x28>
  {
  }
}
 800242c:	bf00      	nop
 800242e:	bf00      	nop
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20000118 	.word	0x20000118

0800243c <__NVIC_SetPriorityGrouping>:
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800244c:	4b0c      	ldr	r3, [pc, #48]	@ (8002480 <__NVIC_SetPriorityGrouping+0x44>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002452:	68ba      	ldr	r2, [r7, #8]
 8002454:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002458:	4013      	ands	r3, r2
 800245a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002464:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002468:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800246c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800246e:	4a04      	ldr	r2, [pc, #16]	@ (8002480 <__NVIC_SetPriorityGrouping+0x44>)
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	60d3      	str	r3, [r2, #12]
}
 8002474:	bf00      	nop
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	e000ed00 	.word	0xe000ed00

08002484 <__NVIC_GetPriorityGrouping>:
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002488:	4b04      	ldr	r3, [pc, #16]	@ (800249c <__NVIC_GetPriorityGrouping+0x18>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	0a1b      	lsrs	r3, r3, #8
 800248e:	f003 0307 	and.w	r3, r3, #7
}
 8002492:	4618      	mov	r0, r3
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	e000ed00 	.word	0xe000ed00

080024a0 <__NVIC_SetPriority>:
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	6039      	str	r1, [r7, #0]
 80024aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	db0a      	blt.n	80024ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	490c      	ldr	r1, [pc, #48]	@ (80024ec <__NVIC_SetPriority+0x4c>)
 80024ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024be:	0112      	lsls	r2, r2, #4
 80024c0:	b2d2      	uxtb	r2, r2
 80024c2:	440b      	add	r3, r1
 80024c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80024c8:	e00a      	b.n	80024e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	4908      	ldr	r1, [pc, #32]	@ (80024f0 <__NVIC_SetPriority+0x50>)
 80024d0:	79fb      	ldrb	r3, [r7, #7]
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	3b04      	subs	r3, #4
 80024d8:	0112      	lsls	r2, r2, #4
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	440b      	add	r3, r1
 80024de:	761a      	strb	r2, [r3, #24]
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	e000e100 	.word	0xe000e100
 80024f0:	e000ed00 	.word	0xe000ed00

080024f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b089      	sub	sp, #36	@ 0x24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	f1c3 0307 	rsb	r3, r3, #7
 800250e:	2b04      	cmp	r3, #4
 8002510:	bf28      	it	cs
 8002512:	2304      	movcs	r3, #4
 8002514:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	3304      	adds	r3, #4
 800251a:	2b06      	cmp	r3, #6
 800251c:	d902      	bls.n	8002524 <NVIC_EncodePriority+0x30>
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	3b03      	subs	r3, #3
 8002522:	e000      	b.n	8002526 <NVIC_EncodePriority+0x32>
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002528:	f04f 32ff 	mov.w	r2, #4294967295
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43da      	mvns	r2, r3
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	401a      	ands	r2, r3
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800253c:	f04f 31ff 	mov.w	r1, #4294967295
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	fa01 f303 	lsl.w	r3, r1, r3
 8002546:	43d9      	mvns	r1, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800254c:	4313      	orrs	r3, r2
         );
}
 800254e:	4618      	mov	r0, r3
 8002550:	3724      	adds	r7, #36	@ 0x24
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
	...

0800255c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3b01      	subs	r3, #1
 8002568:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800256c:	d301      	bcc.n	8002572 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800256e:	2301      	movs	r3, #1
 8002570:	e00f      	b.n	8002592 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002572:	4a0a      	ldr	r2, [pc, #40]	@ (800259c <SysTick_Config+0x40>)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3b01      	subs	r3, #1
 8002578:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800257a:	210f      	movs	r1, #15
 800257c:	f04f 30ff 	mov.w	r0, #4294967295
 8002580:	f7ff ff8e 	bl	80024a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002584:	4b05      	ldr	r3, [pc, #20]	@ (800259c <SysTick_Config+0x40>)
 8002586:	2200      	movs	r2, #0
 8002588:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800258a:	4b04      	ldr	r3, [pc, #16]	@ (800259c <SysTick_Config+0x40>)
 800258c:	2207      	movs	r2, #7
 800258e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	e000e010 	.word	0xe000e010

080025a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f7ff ff47 	bl	800243c <__NVIC_SetPriorityGrouping>
}
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b086      	sub	sp, #24
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	4603      	mov	r3, r0
 80025be:	60b9      	str	r1, [r7, #8]
 80025c0:	607a      	str	r2, [r7, #4]
 80025c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025c8:	f7ff ff5c 	bl	8002484 <__NVIC_GetPriorityGrouping>
 80025cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	68b9      	ldr	r1, [r7, #8]
 80025d2:	6978      	ldr	r0, [r7, #20]
 80025d4:	f7ff ff8e 	bl	80024f4 <NVIC_EncodePriority>
 80025d8:	4602      	mov	r2, r0
 80025da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025de:	4611      	mov	r1, r2
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff ff5d 	bl	80024a0 <__NVIC_SetPriority>
}
 80025e6:	bf00      	nop
 80025e8:	3718      	adds	r7, #24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b082      	sub	sp, #8
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7ff ffb0 	bl	800255c <SysTick_Config>
 80025fc:	4603      	mov	r3, r0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
	...

08002608 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002608:	b480      	push	{r7}
 800260a:	b087      	sub	sp, #28
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002612:	2300      	movs	r3, #0
 8002614:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002616:	e154      	b.n	80028c2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	2101      	movs	r1, #1
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	fa01 f303 	lsl.w	r3, r1, r3
 8002624:	4013      	ands	r3, r2
 8002626:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 8146 	beq.w	80028bc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 0303 	and.w	r3, r3, #3
 8002638:	2b01      	cmp	r3, #1
 800263a:	d005      	beq.n	8002648 <HAL_GPIO_Init+0x40>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 0303 	and.w	r3, r3, #3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d130      	bne.n	80026aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	2203      	movs	r2, #3
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	4013      	ands	r3, r2
 800265e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	68da      	ldr	r2, [r3, #12]
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	4313      	orrs	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800267e:	2201      	movs	r2, #1
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	43db      	mvns	r3, r3
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	4013      	ands	r3, r2
 800268c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	091b      	lsrs	r3, r3, #4
 8002694:	f003 0201 	and.w	r2, r3, #1
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	2b03      	cmp	r3, #3
 80026b4:	d017      	beq.n	80026e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	2203      	movs	r2, #3
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43db      	mvns	r3, r3
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	4013      	ands	r3, r2
 80026cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	4313      	orrs	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d123      	bne.n	800273a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	08da      	lsrs	r2, r3, #3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	3208      	adds	r2, #8
 80026fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	220f      	movs	r2, #15
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43db      	mvns	r3, r3
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	4013      	ands	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	691a      	ldr	r2, [r3, #16]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	4313      	orrs	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	08da      	lsrs	r2, r3, #3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3208      	adds	r2, #8
 8002734:	6939      	ldr	r1, [r7, #16]
 8002736:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	2203      	movs	r2, #3
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	43db      	mvns	r3, r3
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	4013      	ands	r3, r2
 8002750:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f003 0203 	and.w	r2, r3, #3
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	4313      	orrs	r3, r2
 8002766:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002776:	2b00      	cmp	r3, #0
 8002778:	f000 80a0 	beq.w	80028bc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800277c:	4b58      	ldr	r3, [pc, #352]	@ (80028e0 <HAL_GPIO_Init+0x2d8>)
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	4a57      	ldr	r2, [pc, #348]	@ (80028e0 <HAL_GPIO_Init+0x2d8>)
 8002782:	f043 0301 	orr.w	r3, r3, #1
 8002786:	6193      	str	r3, [r2, #24]
 8002788:	4b55      	ldr	r3, [pc, #340]	@ (80028e0 <HAL_GPIO_Init+0x2d8>)
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	60bb      	str	r3, [r7, #8]
 8002792:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002794:	4a53      	ldr	r2, [pc, #332]	@ (80028e4 <HAL_GPIO_Init+0x2dc>)
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	089b      	lsrs	r3, r3, #2
 800279a:	3302      	adds	r3, #2
 800279c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f003 0303 	and.w	r3, r3, #3
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	220f      	movs	r2, #15
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	43db      	mvns	r3, r3
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	4013      	ands	r3, r2
 80027b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80027be:	d019      	beq.n	80027f4 <HAL_GPIO_Init+0x1ec>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a49      	ldr	r2, [pc, #292]	@ (80028e8 <HAL_GPIO_Init+0x2e0>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d013      	beq.n	80027f0 <HAL_GPIO_Init+0x1e8>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a48      	ldr	r2, [pc, #288]	@ (80028ec <HAL_GPIO_Init+0x2e4>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d00d      	beq.n	80027ec <HAL_GPIO_Init+0x1e4>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a47      	ldr	r2, [pc, #284]	@ (80028f0 <HAL_GPIO_Init+0x2e8>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d007      	beq.n	80027e8 <HAL_GPIO_Init+0x1e0>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a46      	ldr	r2, [pc, #280]	@ (80028f4 <HAL_GPIO_Init+0x2ec>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d101      	bne.n	80027e4 <HAL_GPIO_Init+0x1dc>
 80027e0:	2304      	movs	r3, #4
 80027e2:	e008      	b.n	80027f6 <HAL_GPIO_Init+0x1ee>
 80027e4:	2305      	movs	r3, #5
 80027e6:	e006      	b.n	80027f6 <HAL_GPIO_Init+0x1ee>
 80027e8:	2303      	movs	r3, #3
 80027ea:	e004      	b.n	80027f6 <HAL_GPIO_Init+0x1ee>
 80027ec:	2302      	movs	r3, #2
 80027ee:	e002      	b.n	80027f6 <HAL_GPIO_Init+0x1ee>
 80027f0:	2301      	movs	r3, #1
 80027f2:	e000      	b.n	80027f6 <HAL_GPIO_Init+0x1ee>
 80027f4:	2300      	movs	r3, #0
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	f002 0203 	and.w	r2, r2, #3
 80027fc:	0092      	lsls	r2, r2, #2
 80027fe:	4093      	lsls	r3, r2
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	4313      	orrs	r3, r2
 8002804:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002806:	4937      	ldr	r1, [pc, #220]	@ (80028e4 <HAL_GPIO_Init+0x2dc>)
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	089b      	lsrs	r3, r3, #2
 800280c:	3302      	adds	r3, #2
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002814:	4b38      	ldr	r3, [pc, #224]	@ (80028f8 <HAL_GPIO_Init+0x2f0>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	43db      	mvns	r3, r3
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	4013      	ands	r3, r2
 8002822:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	4313      	orrs	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002838:	4a2f      	ldr	r2, [pc, #188]	@ (80028f8 <HAL_GPIO_Init+0x2f0>)
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800283e:	4b2e      	ldr	r3, [pc, #184]	@ (80028f8 <HAL_GPIO_Init+0x2f0>)
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	43db      	mvns	r3, r3
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	4013      	ands	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4313      	orrs	r3, r2
 8002860:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002862:	4a25      	ldr	r2, [pc, #148]	@ (80028f8 <HAL_GPIO_Init+0x2f0>)
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002868:	4b23      	ldr	r3, [pc, #140]	@ (80028f8 <HAL_GPIO_Init+0x2f0>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	43db      	mvns	r3, r3
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	4013      	ands	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	4313      	orrs	r3, r2
 800288a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800288c:	4a1a      	ldr	r2, [pc, #104]	@ (80028f8 <HAL_GPIO_Init+0x2f0>)
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002892:	4b19      	ldr	r3, [pc, #100]	@ (80028f8 <HAL_GPIO_Init+0x2f0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	43db      	mvns	r3, r3
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	4013      	ands	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80028b6:	4a10      	ldr	r2, [pc, #64]	@ (80028f8 <HAL_GPIO_Init+0x2f0>)
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	3301      	adds	r3, #1
 80028c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	fa22 f303 	lsr.w	r3, r2, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f47f aea3 	bne.w	8002618 <HAL_GPIO_Init+0x10>
  }
}
 80028d2:	bf00      	nop
 80028d4:	bf00      	nop
 80028d6:	371c      	adds	r7, #28
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	40021000 	.word	0x40021000
 80028e4:	40010000 	.word	0x40010000
 80028e8:	48000400 	.word	0x48000400
 80028ec:	48000800 	.word	0x48000800
 80028f0:	48000c00 	.word	0x48000c00
 80028f4:	48001000 	.word	0x48001000
 80028f8:	40010400 	.word	0x40010400

080028fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	807b      	strh	r3, [r7, #2]
 8002908:	4613      	mov	r3, r2
 800290a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800290c:	787b      	ldrb	r3, [r7, #1]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002912:	887a      	ldrh	r2, [r7, #2]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002918:	e002      	b.n	8002920 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800291a:	887a      	ldrh	r2, [r7, #2]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e08d      	b.n	8002a5a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d106      	bne.n	8002958 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7fe f94c 	bl	8000bf0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2224      	movs	r2, #36	@ 0x24
 800295c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0201 	bic.w	r2, r2, #1
 800296e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800297c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800298c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d107      	bne.n	80029a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029a2:	609a      	str	r2, [r3, #8]
 80029a4:	e006      	b.n	80029b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	689a      	ldr	r2, [r3, #8]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80029b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d108      	bne.n	80029ce <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	685a      	ldr	r2, [r3, #4]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029ca:	605a      	str	r2, [r3, #4]
 80029cc:	e007      	b.n	80029de <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6812      	ldr	r2, [r2, #0]
 80029e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80029ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68da      	ldr	r2, [r3, #12]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691a      	ldr	r2, [r3, #16]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	69d9      	ldr	r1, [r3, #28]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a1a      	ldr	r2, [r3, #32]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 0201 	orr.w	r2, r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2220      	movs	r2, #32
 8002a46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
	...

08002a64 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b088      	sub	sp, #32
 8002a68:	af02      	add	r7, sp, #8
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	4608      	mov	r0, r1
 8002a6e:	4611      	mov	r1, r2
 8002a70:	461a      	mov	r2, r3
 8002a72:	4603      	mov	r3, r0
 8002a74:	817b      	strh	r3, [r7, #10]
 8002a76:	460b      	mov	r3, r1
 8002a78:	813b      	strh	r3, [r7, #8]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b20      	cmp	r3, #32
 8002a88:	f040 80f9 	bne.w	8002c7e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a8c:	6a3b      	ldr	r3, [r7, #32]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d002      	beq.n	8002a98 <HAL_I2C_Mem_Write+0x34>
 8002a92:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d105      	bne.n	8002aa4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a9e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e0ed      	b.n	8002c80 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d101      	bne.n	8002ab2 <HAL_I2C_Mem_Write+0x4e>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	e0e6      	b.n	8002c80 <HAL_I2C_Mem_Write+0x21c>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002aba:	f7ff fc8f 	bl	80023dc <HAL_GetTick>
 8002abe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	2319      	movs	r3, #25
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f000 f955 	bl	8002d7c <I2C_WaitOnFlagUntilTimeout>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e0d1      	b.n	8002c80 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2221      	movs	r2, #33	@ 0x21
 8002ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2240      	movs	r2, #64	@ 0x40
 8002ae8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6a3a      	ldr	r2, [r7, #32]
 8002af6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002afc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b04:	88f8      	ldrh	r0, [r7, #6]
 8002b06:	893a      	ldrh	r2, [r7, #8]
 8002b08:	8979      	ldrh	r1, [r7, #10]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	9301      	str	r3, [sp, #4]
 8002b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	4603      	mov	r3, r0
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 f8b9 	bl	8002c8c <I2C_RequestMemoryWrite>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e0a9      	b.n	8002c80 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	2bff      	cmp	r3, #255	@ 0xff
 8002b34:	d90e      	bls.n	8002b54 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	22ff      	movs	r2, #255	@ 0xff
 8002b3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	8979      	ldrh	r1, [r7, #10]
 8002b44:	2300      	movs	r3, #0
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f000 fad9 	bl	8003104 <I2C_TransferConfig>
 8002b52:	e00f      	b.n	8002b74 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	8979      	ldrh	r1, [r7, #10]
 8002b66:	2300      	movs	r3, #0
 8002b68:	9300      	str	r3, [sp, #0]
 8002b6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 fac8 	bl	8003104 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f000 f958 	bl	8002e2e <I2C_WaitOnTXISFlagUntilTimeout>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e07b      	b.n	8002c80 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8c:	781a      	ldrb	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b98:	1c5a      	adds	r2, r3, #1
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d034      	beq.n	8002c2c <HAL_I2C_Mem_Write+0x1c8>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d130      	bne.n	8002c2c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	2180      	movs	r1, #128	@ 0x80
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f000 f8d1 	bl	8002d7c <I2C_WaitOnFlagUntilTimeout>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e04d      	b.n	8002c80 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	2bff      	cmp	r3, #255	@ 0xff
 8002bec:	d90e      	bls.n	8002c0c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	22ff      	movs	r2, #255	@ 0xff
 8002bf2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	8979      	ldrh	r1, [r7, #10]
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 fa7d 	bl	8003104 <I2C_TransferConfig>
 8002c0a:	e00f      	b.n	8002c2c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	8979      	ldrh	r1, [r7, #10]
 8002c1e:	2300      	movs	r3, #0
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f000 fa6c 	bl	8003104 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d19e      	bne.n	8002b74 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f000 f93e 	bl	8002ebc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e01a      	b.n	8002c80 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6859      	ldr	r1, [r3, #4]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c88 <HAL_I2C_Mem_Write+0x224>)
 8002c5e:	400b      	ands	r3, r1
 8002c60:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2220      	movs	r2, #32
 8002c66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	e000      	b.n	8002c80 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002c7e:	2302      	movs	r3, #2
  }
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3718      	adds	r7, #24
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	fe00e800 	.word	0xfe00e800

08002c8c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af02      	add	r7, sp, #8
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	4608      	mov	r0, r1
 8002c96:	4611      	mov	r1, r2
 8002c98:	461a      	mov	r2, r3
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	817b      	strh	r3, [r7, #10]
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	813b      	strh	r3, [r7, #8]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002ca6:	88fb      	ldrh	r3, [r7, #6]
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	8979      	ldrh	r1, [r7, #10]
 8002cac:	4b20      	ldr	r3, [pc, #128]	@ (8002d30 <I2C_RequestMemoryWrite+0xa4>)
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f000 fa25 	bl	8003104 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cba:	69fa      	ldr	r2, [r7, #28]
 8002cbc:	69b9      	ldr	r1, [r7, #24]
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 f8b5 	bl	8002e2e <I2C_WaitOnTXISFlagUntilTimeout>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e02c      	b.n	8002d28 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cce:	88fb      	ldrh	r3, [r7, #6]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d105      	bne.n	8002ce0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cd4:	893b      	ldrh	r3, [r7, #8]
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	629a      	str	r2, [r3, #40]	@ 0x28
 8002cde:	e015      	b.n	8002d0c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ce0:	893b      	ldrh	r3, [r7, #8]
 8002ce2:	0a1b      	lsrs	r3, r3, #8
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	b2da      	uxtb	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cee:	69fa      	ldr	r2, [r7, #28]
 8002cf0:	69b9      	ldr	r1, [r7, #24]
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 f89b 	bl	8002e2e <I2C_WaitOnTXISFlagUntilTimeout>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e012      	b.n	8002d28 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d02:	893b      	ldrh	r3, [r7, #8]
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	2200      	movs	r2, #0
 8002d14:	2180      	movs	r1, #128	@ 0x80
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f000 f830 	bl	8002d7c <I2C_WaitOnFlagUntilTimeout>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e000      	b.n	8002d28 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	80002000 	.word	0x80002000

08002d34 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d103      	bne.n	8002d52 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d007      	beq.n	8002d70 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	699a      	ldr	r2, [r3, #24]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0201 	orr.w	r2, r2, #1
 8002d6e:	619a      	str	r2, [r3, #24]
  }
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	603b      	str	r3, [r7, #0]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d8c:	e03b      	b.n	8002e06 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	6839      	ldr	r1, [r7, #0]
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 f8d6 	bl	8002f44 <I2C_IsErrorOccurred>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e041      	b.n	8002e26 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da8:	d02d      	beq.n	8002e06 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002daa:	f7ff fb17 	bl	80023dc <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d302      	bcc.n	8002dc0 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d122      	bne.n	8002e06 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	699a      	ldr	r2, [r3, #24]
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	bf0c      	ite	eq
 8002dd0:	2301      	moveq	r3, #1
 8002dd2:	2300      	movne	r3, #0
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	79fb      	ldrb	r3, [r7, #7]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d113      	bne.n	8002e06 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de2:	f043 0220 	orr.w	r2, r3, #32
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2220      	movs	r2, #32
 8002dee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e00f      	b.n	8002e26 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	699a      	ldr	r2, [r3, #24]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	bf0c      	ite	eq
 8002e16:	2301      	moveq	r3, #1
 8002e18:	2300      	movne	r3, #0
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	79fb      	ldrb	r3, [r7, #7]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d0b4      	beq.n	8002d8e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b084      	sub	sp, #16
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	60f8      	str	r0, [r7, #12]
 8002e36:	60b9      	str	r1, [r7, #8]
 8002e38:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e3a:	e033      	b.n	8002ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	68b9      	ldr	r1, [r7, #8]
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f000 f87f 	bl	8002f44 <I2C_IsErrorOccurred>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e031      	b.n	8002eb4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e56:	d025      	beq.n	8002ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e58:	f7ff fac0 	bl	80023dc <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d302      	bcc.n	8002e6e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d11a      	bne.n	8002ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d013      	beq.n	8002ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e80:	f043 0220 	orr.w	r2, r3, #32
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e007      	b.n	8002eb4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d1c4      	bne.n	8002e3c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ec8:	e02f      	b.n	8002f2a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	68b9      	ldr	r1, [r7, #8]
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f000 f838 	bl	8002f44 <I2C_IsErrorOccurred>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e02d      	b.n	8002f3a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ede:	f7ff fa7d 	bl	80023dc <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	68ba      	ldr	r2, [r7, #8]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d302      	bcc.n	8002ef4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d11a      	bne.n	8002f2a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	f003 0320 	and.w	r3, r3, #32
 8002efe:	2b20      	cmp	r3, #32
 8002f00:	d013      	beq.n	8002f2a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f06:	f043 0220 	orr.w	r2, r3, #32
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2220      	movs	r2, #32
 8002f12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e007      	b.n	8002f3a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	f003 0320 	and.w	r3, r3, #32
 8002f34:	2b20      	cmp	r3, #32
 8002f36:	d1c8      	bne.n	8002eca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
	...

08002f44 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b08a      	sub	sp, #40	@ 0x28
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f50:	2300      	movs	r3, #0
 8002f52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	f003 0310 	and.w	r3, r3, #16
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d068      	beq.n	8003042 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2210      	movs	r2, #16
 8002f76:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f78:	e049      	b.n	800300e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f80:	d045      	beq.n	800300e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f82:	f7ff fa2b 	bl	80023dc <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d302      	bcc.n	8002f98 <I2C_IsErrorOccurred+0x54>
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d13a      	bne.n	800300e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fa2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002faa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fba:	d121      	bne.n	8003000 <I2C_IsErrorOccurred+0xbc>
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fc2:	d01d      	beq.n	8003000 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002fc4:	7cfb      	ldrb	r3, [r7, #19]
 8002fc6:	2b20      	cmp	r3, #32
 8002fc8:	d01a      	beq.n	8003000 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002fd8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002fda:	f7ff f9ff 	bl	80023dc <HAL_GetTick>
 8002fde:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fe0:	e00e      	b.n	8003000 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002fe2:	f7ff f9fb 	bl	80023dc <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b19      	cmp	r3, #25
 8002fee:	d907      	bls.n	8003000 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002ff0:	6a3b      	ldr	r3, [r7, #32]
 8002ff2:	f043 0320 	orr.w	r3, r3, #32
 8002ff6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002ffe:	e006      	b.n	800300e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	f003 0320 	and.w	r3, r3, #32
 800300a:	2b20      	cmp	r3, #32
 800300c:	d1e9      	bne.n	8002fe2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	f003 0320 	and.w	r3, r3, #32
 8003018:	2b20      	cmp	r3, #32
 800301a:	d003      	beq.n	8003024 <I2C_IsErrorOccurred+0xe0>
 800301c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0aa      	beq.n	8002f7a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003024:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003028:	2b00      	cmp	r3, #0
 800302a:	d103      	bne.n	8003034 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2220      	movs	r2, #32
 8003032:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003034:	6a3b      	ldr	r3, [r7, #32]
 8003036:	f043 0304 	orr.w	r3, r3, #4
 800303a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00b      	beq.n	800306c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003054:	6a3b      	ldr	r3, [r7, #32]
 8003056:	f043 0301 	orr.w	r3, r3, #1
 800305a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003064:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00b      	beq.n	800308e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003076:	6a3b      	ldr	r3, [r7, #32]
 8003078:	f043 0308 	orr.w	r3, r3, #8
 800307c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003086:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00b      	beq.n	80030b0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003098:	6a3b      	ldr	r3, [r7, #32]
 800309a:	f043 0302 	orr.w	r3, r3, #2
 800309e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80030b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d01c      	beq.n	80030f2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f7ff fe3b 	bl	8002d34 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6859      	ldr	r1, [r3, #4]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	4b0d      	ldr	r3, [pc, #52]	@ (8003100 <I2C_IsErrorOccurred+0x1bc>)
 80030ca:	400b      	ands	r3, r1
 80030cc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030d2:	6a3b      	ldr	r3, [r7, #32]
 80030d4:	431a      	orrs	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2220      	movs	r2, #32
 80030de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80030f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3728      	adds	r7, #40	@ 0x28
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	fe00e800 	.word	0xfe00e800

08003104 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003104:	b480      	push	{r7}
 8003106:	b087      	sub	sp, #28
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	607b      	str	r3, [r7, #4]
 800310e:	460b      	mov	r3, r1
 8003110:	817b      	strh	r3, [r7, #10]
 8003112:	4613      	mov	r3, r2
 8003114:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003116:	897b      	ldrh	r3, [r7, #10]
 8003118:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800311c:	7a7b      	ldrb	r3, [r7, #9]
 800311e:	041b      	lsls	r3, r3, #16
 8003120:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003124:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800312a:	6a3b      	ldr	r3, [r7, #32]
 800312c:	4313      	orrs	r3, r2
 800312e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003132:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	0d5b      	lsrs	r3, r3, #21
 800313e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003142:	4b08      	ldr	r3, [pc, #32]	@ (8003164 <I2C_TransferConfig+0x60>)
 8003144:	430b      	orrs	r3, r1
 8003146:	43db      	mvns	r3, r3
 8003148:	ea02 0103 	and.w	r1, r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	697a      	ldr	r2, [r7, #20]
 8003152:	430a      	orrs	r2, r1
 8003154:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003156:	bf00      	nop
 8003158:	371c      	adds	r7, #28
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	03ff63ff 	.word	0x03ff63ff

08003168 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b20      	cmp	r3, #32
 800317c:	d138      	bne.n	80031f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003184:	2b01      	cmp	r3, #1
 8003186:	d101      	bne.n	800318c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003188:	2302      	movs	r3, #2
 800318a:	e032      	b.n	80031f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2224      	movs	r2, #36	@ 0x24
 8003198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 0201 	bic.w	r2, r2, #1
 80031aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80031ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6819      	ldr	r1, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0201 	orr.w	r2, r2, #1
 80031da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2220      	movs	r2, #32
 80031e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80031ec:	2300      	movs	r3, #0
 80031ee:	e000      	b.n	80031f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80031f0:	2302      	movs	r3, #2
  }
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031fe:	b480      	push	{r7}
 8003200:	b085      	sub	sp, #20
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
 8003206:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b20      	cmp	r3, #32
 8003212:	d139      	bne.n	8003288 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800321a:	2b01      	cmp	r3, #1
 800321c:	d101      	bne.n	8003222 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800321e:	2302      	movs	r3, #2
 8003220:	e033      	b.n	800328a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2224      	movs	r2, #36	@ 0x24
 800322e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 0201 	bic.w	r2, r2, #1
 8003240:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003250:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	021b      	lsls	r3, r3, #8
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	4313      	orrs	r3, r2
 800325a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0201 	orr.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2220      	movs	r2, #32
 8003278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003284:	2300      	movs	r3, #0
 8003286:	e000      	b.n	800328a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003288:	2302      	movs	r3, #2
  }
}
 800328a:	4618      	mov	r0, r3
 800328c:	3714      	adds	r7, #20
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b084      	sub	sp, #16
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e0b9      	b.n	800341c <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d106      	bne.n	80032c2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f7fd fd71 	bl	8000da4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2203      	movs	r2, #3
 80032c6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f002 fa6e 	bl	80057b0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032d4:	2300      	movs	r3, #0
 80032d6:	73fb      	strb	r3, [r7, #15]
 80032d8:	e03e      	b.n	8003358 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80032da:	7bfa      	ldrb	r2, [r7, #15]
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	4613      	mov	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	440b      	add	r3, r1
 80032e8:	3311      	adds	r3, #17
 80032ea:	2201      	movs	r2, #1
 80032ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80032ee:	7bfa      	ldrb	r2, [r7, #15]
 80032f0:	6879      	ldr	r1, [r7, #4]
 80032f2:	4613      	mov	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4413      	add	r3, r2
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	440b      	add	r3, r1
 80032fc:	3310      	adds	r3, #16
 80032fe:	7bfa      	ldrb	r2, [r7, #15]
 8003300:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003302:	7bfa      	ldrb	r2, [r7, #15]
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	4613      	mov	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4413      	add	r3, r2
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	440b      	add	r3, r1
 8003310:	3313      	adds	r3, #19
 8003312:	2200      	movs	r2, #0
 8003314:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003316:	7bfa      	ldrb	r2, [r7, #15]
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	4613      	mov	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4413      	add	r3, r2
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	440b      	add	r3, r1
 8003324:	3320      	adds	r3, #32
 8003326:	2200      	movs	r2, #0
 8003328:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800332a:	7bfa      	ldrb	r2, [r7, #15]
 800332c:	6879      	ldr	r1, [r7, #4]
 800332e:	4613      	mov	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4413      	add	r3, r2
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	440b      	add	r3, r1
 8003338:	3324      	adds	r3, #36	@ 0x24
 800333a:	2200      	movs	r2, #0
 800333c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800333e:	7bfb      	ldrb	r3, [r7, #15]
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	1c5a      	adds	r2, r3, #1
 8003344:	4613      	mov	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	440b      	add	r3, r1
 800334e:	2200      	movs	r2, #0
 8003350:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003352:	7bfb      	ldrb	r3, [r7, #15]
 8003354:	3301      	adds	r3, #1
 8003356:	73fb      	strb	r3, [r7, #15]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	791b      	ldrb	r3, [r3, #4]
 800335c:	7bfa      	ldrb	r2, [r7, #15]
 800335e:	429a      	cmp	r2, r3
 8003360:	d3bb      	bcc.n	80032da <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003362:	2300      	movs	r3, #0
 8003364:	73fb      	strb	r3, [r7, #15]
 8003366:	e044      	b.n	80033f2 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003368:	7bfa      	ldrb	r2, [r7, #15]
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	4613      	mov	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	440b      	add	r3, r1
 8003376:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800337a:	2200      	movs	r2, #0
 800337c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800337e:	7bfa      	ldrb	r2, [r7, #15]
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	4613      	mov	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4413      	add	r3, r2
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	440b      	add	r3, r1
 800338c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003390:	7bfa      	ldrb	r2, [r7, #15]
 8003392:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003394:	7bfa      	ldrb	r2, [r7, #15]
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	4613      	mov	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	440b      	add	r3, r1
 80033a2:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80033a6:	2200      	movs	r2, #0
 80033a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80033aa:	7bfa      	ldrb	r2, [r7, #15]
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	4613      	mov	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	440b      	add	r3, r1
 80033b8:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80033c0:	7bfa      	ldrb	r2, [r7, #15]
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	4613      	mov	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4413      	add	r3, r2
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	440b      	add	r3, r1
 80033ce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80033d2:	2200      	movs	r2, #0
 80033d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80033d6:	7bfa      	ldrb	r2, [r7, #15]
 80033d8:	6879      	ldr	r1, [r7, #4]
 80033da:	4613      	mov	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4413      	add	r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	440b      	add	r3, r1
 80033e4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033ec:	7bfb      	ldrb	r3, [r7, #15]
 80033ee:	3301      	adds	r3, #1
 80033f0:	73fb      	strb	r3, [r7, #15]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	791b      	ldrb	r3, [r3, #4]
 80033f6:	7bfa      	ldrb	r2, [r7, #15]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d3b5      	bcc.n	8003368 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6818      	ldr	r0, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	3304      	adds	r3, #4
 8003404:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003408:	f002 f9ed 	bl	80057e6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800342a:	af00      	add	r7, sp, #0
 800342c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003430:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003434:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003436:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800343a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d102      	bne.n	800344a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	f001 b823 	b.w	8004490 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800344a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800344e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	f000 817d 	beq.w	800375a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003460:	4bbc      	ldr	r3, [pc, #752]	@ (8003754 <HAL_RCC_OscConfig+0x330>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f003 030c 	and.w	r3, r3, #12
 8003468:	2b04      	cmp	r3, #4
 800346a:	d00c      	beq.n	8003486 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800346c:	4bb9      	ldr	r3, [pc, #740]	@ (8003754 <HAL_RCC_OscConfig+0x330>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 030c 	and.w	r3, r3, #12
 8003474:	2b08      	cmp	r3, #8
 8003476:	d15c      	bne.n	8003532 <HAL_RCC_OscConfig+0x10e>
 8003478:	4bb6      	ldr	r3, [pc, #728]	@ (8003754 <HAL_RCC_OscConfig+0x330>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003480:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003484:	d155      	bne.n	8003532 <HAL_RCC_OscConfig+0x10e>
 8003486:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800348a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8003492:	fa93 f3a3 	rbit	r3, r3
 8003496:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800349a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800349e:	fab3 f383 	clz	r3, r3
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	095b      	lsrs	r3, r3, #5
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	f043 0301 	orr.w	r3, r3, #1
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d102      	bne.n	80034b8 <HAL_RCC_OscConfig+0x94>
 80034b2:	4ba8      	ldr	r3, [pc, #672]	@ (8003754 <HAL_RCC_OscConfig+0x330>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	e015      	b.n	80034e4 <HAL_RCC_OscConfig+0xc0>
 80034b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034bc:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80034c4:	fa93 f3a3 	rbit	r3, r3
 80034c8:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80034cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034d0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80034d4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80034d8:	fa93 f3a3 	rbit	r3, r3
 80034dc:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80034e0:	4b9c      	ldr	r3, [pc, #624]	@ (8003754 <HAL_RCC_OscConfig+0x330>)
 80034e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80034e8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80034ec:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80034f0:	fa92 f2a2 	rbit	r2, r2
 80034f4:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80034f8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80034fc:	fab2 f282 	clz	r2, r2
 8003500:	b2d2      	uxtb	r2, r2
 8003502:	f042 0220 	orr.w	r2, r2, #32
 8003506:	b2d2      	uxtb	r2, r2
 8003508:	f002 021f 	and.w	r2, r2, #31
 800350c:	2101      	movs	r1, #1
 800350e:	fa01 f202 	lsl.w	r2, r1, r2
 8003512:	4013      	ands	r3, r2
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 811f 	beq.w	8003758 <HAL_RCC_OscConfig+0x334>
 800351a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800351e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	f040 8116 	bne.w	8003758 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	f000 bfaf 	b.w	8004490 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003532:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003536:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003542:	d106      	bne.n	8003552 <HAL_RCC_OscConfig+0x12e>
 8003544:	4b83      	ldr	r3, [pc, #524]	@ (8003754 <HAL_RCC_OscConfig+0x330>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a82      	ldr	r2, [pc, #520]	@ (8003754 <HAL_RCC_OscConfig+0x330>)
 800354a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800354e:	6013      	str	r3, [r2, #0]
 8003550:	e036      	b.n	80035c0 <HAL_RCC_OscConfig+0x19c>
 8003552:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003556:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10c      	bne.n	800357c <HAL_RCC_OscConfig+0x158>
 8003562:	4b7c      	ldr	r3, [pc, #496]	@ (8003754 <HAL_RCC_OscConfig+0x330>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a7b      	ldr	r2, [pc, #492]	@ (8003754 <HAL_RCC_OscConfig+0x330>)
 8003568:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	4b79      	ldr	r3, [pc, #484]	@ (8003754 <HAL_RCC_OscConfig+0x330>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a78      	ldr	r2, [pc, #480]	@ (8003754 <HAL_RCC_OscConfig+0x330>)
 8003574:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	e021      	b.n	80035c0 <HAL_RCC_OscConfig+0x19c>
 800357c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003580:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800358c:	d10c      	bne.n	80035a8 <HAL_RCC_OscConfig+0x184>
 800358e:	4b71      	ldr	r3, [pc, #452]	@ (8003754 <HAL_RCC_OscConfig+0x330>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a70      	ldr	r2, [pc, #448]	@ (8003754 <HAL_RCC_OscConfig+0x330>)
 8003594:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003598:	6013      	str	r3, [r2, #0]
 800359a:	4b6e      	ldr	r3, [pc, #440]	@ (8003754 <HAL_RCC_OscConfig+0x330>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a6d      	ldr	r2, [pc, #436]	@ (8003754 <HAL_RCC_OscConfig+0x330>)
 80035a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	e00b      	b.n	80035c0 <HAL_RCC_OscConfig+0x19c>
 80035a8:	4b6a      	ldr	r3, [pc, #424]	@ (8003754 <HAL_RCC_OscConfig+0x330>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a69      	ldr	r2, [pc, #420]	@ (8003754 <HAL_RCC_OscConfig+0x330>)
 80035ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035b2:	6013      	str	r3, [r2, #0]
 80035b4:	4b67      	ldr	r3, [pc, #412]	@ (8003754 <HAL_RCC_OscConfig+0x330>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a66      	ldr	r2, [pc, #408]	@ (8003754 <HAL_RCC_OscConfig+0x330>)
 80035ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035be:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035c0:	4b64      	ldr	r3, [pc, #400]	@ (8003754 <HAL_RCC_OscConfig+0x330>)
 80035c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c4:	f023 020f 	bic.w	r2, r3, #15
 80035c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	495f      	ldr	r1, [pc, #380]	@ (8003754 <HAL_RCC_OscConfig+0x330>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d059      	beq.n	800369e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ea:	f7fe fef7 	bl	80023dc <HAL_GetTick>
 80035ee:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035f2:	e00a      	b.n	800360a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035f4:	f7fe fef2 	bl	80023dc <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b64      	cmp	r3, #100	@ 0x64
 8003602:	d902      	bls.n	800360a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	f000 bf43 	b.w	8004490 <HAL_RCC_OscConfig+0x106c>
 800360a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800360e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003612:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003616:	fa93 f3a3 	rbit	r3, r3
 800361a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800361e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003622:	fab3 f383 	clz	r3, r3
 8003626:	b2db      	uxtb	r3, r3
 8003628:	095b      	lsrs	r3, r3, #5
 800362a:	b2db      	uxtb	r3, r3
 800362c:	f043 0301 	orr.w	r3, r3, #1
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b01      	cmp	r3, #1
 8003634:	d102      	bne.n	800363c <HAL_RCC_OscConfig+0x218>
 8003636:	4b47      	ldr	r3, [pc, #284]	@ (8003754 <HAL_RCC_OscConfig+0x330>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	e015      	b.n	8003668 <HAL_RCC_OscConfig+0x244>
 800363c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003640:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003644:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003648:	fa93 f3a3 	rbit	r3, r3
 800364c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003650:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003654:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003658:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800365c:	fa93 f3a3 	rbit	r3, r3
 8003660:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003664:	4b3b      	ldr	r3, [pc, #236]	@ (8003754 <HAL_RCC_OscConfig+0x330>)
 8003666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003668:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800366c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003670:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003674:	fa92 f2a2 	rbit	r2, r2
 8003678:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 800367c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003680:	fab2 f282 	clz	r2, r2
 8003684:	b2d2      	uxtb	r2, r2
 8003686:	f042 0220 	orr.w	r2, r2, #32
 800368a:	b2d2      	uxtb	r2, r2
 800368c:	f002 021f 	and.w	r2, r2, #31
 8003690:	2101      	movs	r1, #1
 8003692:	fa01 f202 	lsl.w	r2, r1, r2
 8003696:	4013      	ands	r3, r2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d0ab      	beq.n	80035f4 <HAL_RCC_OscConfig+0x1d0>
 800369c:	e05d      	b.n	800375a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800369e:	f7fe fe9d 	bl	80023dc <HAL_GetTick>
 80036a2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036a6:	e00a      	b.n	80036be <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036a8:	f7fe fe98 	bl	80023dc <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b64      	cmp	r3, #100	@ 0x64
 80036b6:	d902      	bls.n	80036be <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	f000 bee9 	b.w	8004490 <HAL_RCC_OscConfig+0x106c>
 80036be:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80036c2:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80036ca:	fa93 f3a3 	rbit	r3, r3
 80036ce:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80036d2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036d6:	fab3 f383 	clz	r3, r3
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	095b      	lsrs	r3, r3, #5
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	f043 0301 	orr.w	r3, r3, #1
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d102      	bne.n	80036f0 <HAL_RCC_OscConfig+0x2cc>
 80036ea:	4b1a      	ldr	r3, [pc, #104]	@ (8003754 <HAL_RCC_OscConfig+0x330>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	e015      	b.n	800371c <HAL_RCC_OscConfig+0x2f8>
 80036f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80036f4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80036fc:	fa93 f3a3 	rbit	r3, r3
 8003700:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003704:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003708:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800370c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003710:	fa93 f3a3 	rbit	r3, r3
 8003714:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003718:	4b0e      	ldr	r3, [pc, #56]	@ (8003754 <HAL_RCC_OscConfig+0x330>)
 800371a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003720:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003724:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003728:	fa92 f2a2 	rbit	r2, r2
 800372c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003730:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003734:	fab2 f282 	clz	r2, r2
 8003738:	b2d2      	uxtb	r2, r2
 800373a:	f042 0220 	orr.w	r2, r2, #32
 800373e:	b2d2      	uxtb	r2, r2
 8003740:	f002 021f 	and.w	r2, r2, #31
 8003744:	2101      	movs	r1, #1
 8003746:	fa01 f202 	lsl.w	r2, r1, r2
 800374a:	4013      	ands	r3, r2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1ab      	bne.n	80036a8 <HAL_RCC_OscConfig+0x284>
 8003750:	e003      	b.n	800375a <HAL_RCC_OscConfig+0x336>
 8003752:	bf00      	nop
 8003754:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800375a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800375e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	f000 817d 	beq.w	8003a6a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003770:	4ba6      	ldr	r3, [pc, #664]	@ (8003a0c <HAL_RCC_OscConfig+0x5e8>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f003 030c 	and.w	r3, r3, #12
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00b      	beq.n	8003794 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800377c:	4ba3      	ldr	r3, [pc, #652]	@ (8003a0c <HAL_RCC_OscConfig+0x5e8>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f003 030c 	and.w	r3, r3, #12
 8003784:	2b08      	cmp	r3, #8
 8003786:	d172      	bne.n	800386e <HAL_RCC_OscConfig+0x44a>
 8003788:	4ba0      	ldr	r3, [pc, #640]	@ (8003a0c <HAL_RCC_OscConfig+0x5e8>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d16c      	bne.n	800386e <HAL_RCC_OscConfig+0x44a>
 8003794:	2302      	movs	r3, #2
 8003796:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800379e:	fa93 f3a3 	rbit	r3, r3
 80037a2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80037a6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037aa:	fab3 f383 	clz	r3, r3
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	095b      	lsrs	r3, r3, #5
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	f043 0301 	orr.w	r3, r3, #1
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d102      	bne.n	80037c4 <HAL_RCC_OscConfig+0x3a0>
 80037be:	4b93      	ldr	r3, [pc, #588]	@ (8003a0c <HAL_RCC_OscConfig+0x5e8>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	e013      	b.n	80037ec <HAL_RCC_OscConfig+0x3c8>
 80037c4:	2302      	movs	r3, #2
 80037c6:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ca:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80037ce:	fa93 f3a3 	rbit	r3, r3
 80037d2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80037d6:	2302      	movs	r3, #2
 80037d8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80037dc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80037e0:	fa93 f3a3 	rbit	r3, r3
 80037e4:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80037e8:	4b88      	ldr	r3, [pc, #544]	@ (8003a0c <HAL_RCC_OscConfig+0x5e8>)
 80037ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ec:	2202      	movs	r2, #2
 80037ee:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80037f2:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80037f6:	fa92 f2a2 	rbit	r2, r2
 80037fa:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80037fe:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8003802:	fab2 f282 	clz	r2, r2
 8003806:	b2d2      	uxtb	r2, r2
 8003808:	f042 0220 	orr.w	r2, r2, #32
 800380c:	b2d2      	uxtb	r2, r2
 800380e:	f002 021f 	and.w	r2, r2, #31
 8003812:	2101      	movs	r1, #1
 8003814:	fa01 f202 	lsl.w	r2, r1, r2
 8003818:	4013      	ands	r3, r2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00a      	beq.n	8003834 <HAL_RCC_OscConfig+0x410>
 800381e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003822:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d002      	beq.n	8003834 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	f000 be2e 	b.w	8004490 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003834:	4b75      	ldr	r3, [pc, #468]	@ (8003a0c <HAL_RCC_OscConfig+0x5e8>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800383c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003840:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	21f8      	movs	r1, #248	@ 0xf8
 800384a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003852:	fa91 f1a1 	rbit	r1, r1
 8003856:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800385a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800385e:	fab1 f181 	clz	r1, r1
 8003862:	b2c9      	uxtb	r1, r1
 8003864:	408b      	lsls	r3, r1
 8003866:	4969      	ldr	r1, [pc, #420]	@ (8003a0c <HAL_RCC_OscConfig+0x5e8>)
 8003868:	4313      	orrs	r3, r2
 800386a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800386c:	e0fd      	b.n	8003a6a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800386e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003872:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 8088 	beq.w	8003990 <HAL_RCC_OscConfig+0x56c>
 8003880:	2301      	movs	r3, #1
 8003882:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003886:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800388a:	fa93 f3a3 	rbit	r3, r3
 800388e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8003892:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003896:	fab3 f383 	clz	r3, r3
 800389a:	b2db      	uxtb	r3, r3
 800389c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80038a0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	461a      	mov	r2, r3
 80038a8:	2301      	movs	r3, #1
 80038aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ac:	f7fe fd96 	bl	80023dc <HAL_GetTick>
 80038b0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b4:	e00a      	b.n	80038cc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038b6:	f7fe fd91 	bl	80023dc <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d902      	bls.n	80038cc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	f000 bde2 	b.w	8004490 <HAL_RCC_OscConfig+0x106c>
 80038cc:	2302      	movs	r3, #2
 80038ce:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d2:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80038d6:	fa93 f3a3 	rbit	r3, r3
 80038da:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80038de:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e2:	fab3 f383 	clz	r3, r3
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	095b      	lsrs	r3, r3, #5
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	f043 0301 	orr.w	r3, r3, #1
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d102      	bne.n	80038fc <HAL_RCC_OscConfig+0x4d8>
 80038f6:	4b45      	ldr	r3, [pc, #276]	@ (8003a0c <HAL_RCC_OscConfig+0x5e8>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	e013      	b.n	8003924 <HAL_RCC_OscConfig+0x500>
 80038fc:	2302      	movs	r3, #2
 80038fe:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003902:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8003906:	fa93 f3a3 	rbit	r3, r3
 800390a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800390e:	2302      	movs	r3, #2
 8003910:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003914:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003918:	fa93 f3a3 	rbit	r3, r3
 800391c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003920:	4b3a      	ldr	r3, [pc, #232]	@ (8003a0c <HAL_RCC_OscConfig+0x5e8>)
 8003922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003924:	2202      	movs	r2, #2
 8003926:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800392a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800392e:	fa92 f2a2 	rbit	r2, r2
 8003932:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8003936:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800393a:	fab2 f282 	clz	r2, r2
 800393e:	b2d2      	uxtb	r2, r2
 8003940:	f042 0220 	orr.w	r2, r2, #32
 8003944:	b2d2      	uxtb	r2, r2
 8003946:	f002 021f 	and.w	r2, r2, #31
 800394a:	2101      	movs	r1, #1
 800394c:	fa01 f202 	lsl.w	r2, r1, r2
 8003950:	4013      	ands	r3, r2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d0af      	beq.n	80038b6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003956:	4b2d      	ldr	r3, [pc, #180]	@ (8003a0c <HAL_RCC_OscConfig+0x5e8>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800395e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003962:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	21f8      	movs	r1, #248	@ 0xf8
 800396c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003970:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003974:	fa91 f1a1 	rbit	r1, r1
 8003978:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 800397c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003980:	fab1 f181 	clz	r1, r1
 8003984:	b2c9      	uxtb	r1, r1
 8003986:	408b      	lsls	r3, r1
 8003988:	4920      	ldr	r1, [pc, #128]	@ (8003a0c <HAL_RCC_OscConfig+0x5e8>)
 800398a:	4313      	orrs	r3, r2
 800398c:	600b      	str	r3, [r1, #0]
 800398e:	e06c      	b.n	8003a6a <HAL_RCC_OscConfig+0x646>
 8003990:	2301      	movs	r3, #1
 8003992:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003996:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800399a:	fa93 f3a3 	rbit	r3, r3
 800399e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80039a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039a6:	fab3 f383 	clz	r3, r3
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80039b0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	461a      	mov	r2, r3
 80039b8:	2300      	movs	r3, #0
 80039ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039bc:	f7fe fd0e 	bl	80023dc <HAL_GetTick>
 80039c0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039c4:	e00a      	b.n	80039dc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039c6:	f7fe fd09 	bl	80023dc <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d902      	bls.n	80039dc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	f000 bd5a 	b.w	8004490 <HAL_RCC_OscConfig+0x106c>
 80039dc:	2302      	movs	r3, #2
 80039de:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80039e6:	fa93 f3a3 	rbit	r3, r3
 80039ea:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80039ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039f2:	fab3 f383 	clz	r3, r3
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	095b      	lsrs	r3, r3, #5
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	f043 0301 	orr.w	r3, r3, #1
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d104      	bne.n	8003a10 <HAL_RCC_OscConfig+0x5ec>
 8003a06:	4b01      	ldr	r3, [pc, #4]	@ (8003a0c <HAL_RCC_OscConfig+0x5e8>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	e015      	b.n	8003a38 <HAL_RCC_OscConfig+0x614>
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	2302      	movs	r3, #2
 8003a12:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a16:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003a1a:	fa93 f3a3 	rbit	r3, r3
 8003a1e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003a22:	2302      	movs	r3, #2
 8003a24:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003a28:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003a2c:	fa93 f3a3 	rbit	r3, r3
 8003a30:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003a34:	4bc8      	ldr	r3, [pc, #800]	@ (8003d58 <HAL_RCC_OscConfig+0x934>)
 8003a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a38:	2202      	movs	r2, #2
 8003a3a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003a3e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003a42:	fa92 f2a2 	rbit	r2, r2
 8003a46:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003a4a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003a4e:	fab2 f282 	clz	r2, r2
 8003a52:	b2d2      	uxtb	r2, r2
 8003a54:	f042 0220 	orr.w	r2, r2, #32
 8003a58:	b2d2      	uxtb	r2, r2
 8003a5a:	f002 021f 	and.w	r2, r2, #31
 8003a5e:	2101      	movs	r1, #1
 8003a60:	fa01 f202 	lsl.w	r2, r1, r2
 8003a64:	4013      	ands	r3, r2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1ad      	bne.n	80039c6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a6e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0308 	and.w	r3, r3, #8
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 8110 	beq.w	8003ca0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a84:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d079      	beq.n	8003b84 <HAL_RCC_OscConfig+0x760>
 8003a90:	2301      	movs	r3, #1
 8003a92:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a96:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003a9a:	fa93 f3a3 	rbit	r3, r3
 8003a9e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003aa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aa6:	fab3 f383 	clz	r3, r3
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	461a      	mov	r2, r3
 8003aae:	4bab      	ldr	r3, [pc, #684]	@ (8003d5c <HAL_RCC_OscConfig+0x938>)
 8003ab0:	4413      	add	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aba:	f7fe fc8f 	bl	80023dc <HAL_GetTick>
 8003abe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ac2:	e00a      	b.n	8003ada <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ac4:	f7fe fc8a 	bl	80023dc <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d902      	bls.n	8003ada <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	f000 bcdb 	b.w	8004490 <HAL_RCC_OscConfig+0x106c>
 8003ada:	2302      	movs	r3, #2
 8003adc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003ae4:	fa93 f3a3 	rbit	r3, r3
 8003ae8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003aec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003af0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003af4:	2202      	movs	r2, #2
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003afc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	fa93 f2a3 	rbit	r2, r3
 8003b06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003b0e:	601a      	str	r2, [r3, #0]
 8003b10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003b18:	2202      	movs	r2, #2
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	fa93 f2a3 	rbit	r2, r3
 8003b2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b2e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003b32:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b34:	4b88      	ldr	r3, [pc, #544]	@ (8003d58 <HAL_RCC_OscConfig+0x934>)
 8003b36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b3c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003b40:	2102      	movs	r1, #2
 8003b42:	6019      	str	r1, [r3, #0]
 8003b44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b48:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	fa93 f1a3 	rbit	r1, r3
 8003b52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b56:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003b5a:	6019      	str	r1, [r3, #0]
  return result;
 8003b5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b60:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	fab3 f383 	clz	r3, r3
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	f003 031f 	and.w	r3, r3, #31
 8003b76:	2101      	movs	r1, #1
 8003b78:	fa01 f303 	lsl.w	r3, r1, r3
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0a0      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x6a0>
 8003b82:	e08d      	b.n	8003ca0 <HAL_RCC_OscConfig+0x87c>
 8003b84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b88:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b94:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	fa93 f2a3 	rbit	r2, r3
 8003b9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ba2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003ba6:	601a      	str	r2, [r3, #0]
  return result;
 8003ba8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bac:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003bb0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bb2:	fab3 f383 	clz	r3, r3
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	461a      	mov	r2, r3
 8003bba:	4b68      	ldr	r3, [pc, #416]	@ (8003d5c <HAL_RCC_OscConfig+0x938>)
 8003bbc:	4413      	add	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bc6:	f7fe fc09 	bl	80023dc <HAL_GetTick>
 8003bca:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bce:	e00a      	b.n	8003be6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bd0:	f7fe fc04 	bl	80023dc <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d902      	bls.n	8003be6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	f000 bc55 	b.w	8004490 <HAL_RCC_OscConfig+0x106c>
 8003be6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bea:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003bee:	2202      	movs	r2, #2
 8003bf0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bf6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	fa93 f2a3 	rbit	r2, r3
 8003c00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c04:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003c08:	601a      	str	r2, [r3, #0]
 8003c0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c0e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003c12:	2202      	movs	r2, #2
 8003c14:	601a      	str	r2, [r3, #0]
 8003c16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c1a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	fa93 f2a3 	rbit	r2, r3
 8003c24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c28:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c32:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003c36:	2202      	movs	r2, #2
 8003c38:	601a      	str	r2, [r3, #0]
 8003c3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c3e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	fa93 f2a3 	rbit	r2, r3
 8003c48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c4c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003c50:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c52:	4b41      	ldr	r3, [pc, #260]	@ (8003d58 <HAL_RCC_OscConfig+0x934>)
 8003c54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c5a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003c5e:	2102      	movs	r1, #2
 8003c60:	6019      	str	r1, [r3, #0]
 8003c62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c66:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	fa93 f1a3 	rbit	r1, r3
 8003c70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c74:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003c78:	6019      	str	r1, [r3, #0]
  return result;
 8003c7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c7e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	fab3 f383 	clz	r3, r3
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	f003 031f 	and.w	r3, r3, #31
 8003c94:	2101      	movs	r1, #1
 8003c96:	fa01 f303 	lsl.w	r3, r1, r3
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d197      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ca0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ca4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0304 	and.w	r3, r3, #4
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 81a1 	beq.w	8003ff8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cbc:	4b26      	ldr	r3, [pc, #152]	@ (8003d58 <HAL_RCC_OscConfig+0x934>)
 8003cbe:	69db      	ldr	r3, [r3, #28]
 8003cc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d116      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cc8:	4b23      	ldr	r3, [pc, #140]	@ (8003d58 <HAL_RCC_OscConfig+0x934>)
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	4a22      	ldr	r2, [pc, #136]	@ (8003d58 <HAL_RCC_OscConfig+0x934>)
 8003cce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cd2:	61d3      	str	r3, [r2, #28]
 8003cd4:	4b20      	ldr	r3, [pc, #128]	@ (8003d58 <HAL_RCC_OscConfig+0x934>)
 8003cd6:	69db      	ldr	r3, [r3, #28]
 8003cd8:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003cdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ce0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cea:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003cee:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8003d60 <HAL_RCC_OscConfig+0x93c>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d11a      	bne.n	8003d38 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d02:	4b17      	ldr	r3, [pc, #92]	@ (8003d60 <HAL_RCC_OscConfig+0x93c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a16      	ldr	r2, [pc, #88]	@ (8003d60 <HAL_RCC_OscConfig+0x93c>)
 8003d08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d0c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d0e:	f7fe fb65 	bl	80023dc <HAL_GetTick>
 8003d12:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d16:	e009      	b.n	8003d2c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d18:	f7fe fb60 	bl	80023dc <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b64      	cmp	r3, #100	@ 0x64
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e3b1      	b.n	8004490 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8003d60 <HAL_RCC_OscConfig+0x93c>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d0ef      	beq.n	8003d18 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d3c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d10d      	bne.n	8003d64 <HAL_RCC_OscConfig+0x940>
 8003d48:	4b03      	ldr	r3, [pc, #12]	@ (8003d58 <HAL_RCC_OscConfig+0x934>)
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	4a02      	ldr	r2, [pc, #8]	@ (8003d58 <HAL_RCC_OscConfig+0x934>)
 8003d4e:	f043 0301 	orr.w	r3, r3, #1
 8003d52:	6213      	str	r3, [r2, #32]
 8003d54:	e03c      	b.n	8003dd0 <HAL_RCC_OscConfig+0x9ac>
 8003d56:	bf00      	nop
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	10908120 	.word	0x10908120
 8003d60:	40007000 	.word	0x40007000
 8003d64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d68:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10c      	bne.n	8003d8e <HAL_RCC_OscConfig+0x96a>
 8003d74:	4bc1      	ldr	r3, [pc, #772]	@ (800407c <HAL_RCC_OscConfig+0xc58>)
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	4ac0      	ldr	r2, [pc, #768]	@ (800407c <HAL_RCC_OscConfig+0xc58>)
 8003d7a:	f023 0301 	bic.w	r3, r3, #1
 8003d7e:	6213      	str	r3, [r2, #32]
 8003d80:	4bbe      	ldr	r3, [pc, #760]	@ (800407c <HAL_RCC_OscConfig+0xc58>)
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	4abd      	ldr	r2, [pc, #756]	@ (800407c <HAL_RCC_OscConfig+0xc58>)
 8003d86:	f023 0304 	bic.w	r3, r3, #4
 8003d8a:	6213      	str	r3, [r2, #32]
 8003d8c:	e020      	b.n	8003dd0 <HAL_RCC_OscConfig+0x9ac>
 8003d8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d92:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	2b05      	cmp	r3, #5
 8003d9c:	d10c      	bne.n	8003db8 <HAL_RCC_OscConfig+0x994>
 8003d9e:	4bb7      	ldr	r3, [pc, #732]	@ (800407c <HAL_RCC_OscConfig+0xc58>)
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	4ab6      	ldr	r2, [pc, #728]	@ (800407c <HAL_RCC_OscConfig+0xc58>)
 8003da4:	f043 0304 	orr.w	r3, r3, #4
 8003da8:	6213      	str	r3, [r2, #32]
 8003daa:	4bb4      	ldr	r3, [pc, #720]	@ (800407c <HAL_RCC_OscConfig+0xc58>)
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	4ab3      	ldr	r2, [pc, #716]	@ (800407c <HAL_RCC_OscConfig+0xc58>)
 8003db0:	f043 0301 	orr.w	r3, r3, #1
 8003db4:	6213      	str	r3, [r2, #32]
 8003db6:	e00b      	b.n	8003dd0 <HAL_RCC_OscConfig+0x9ac>
 8003db8:	4bb0      	ldr	r3, [pc, #704]	@ (800407c <HAL_RCC_OscConfig+0xc58>)
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	4aaf      	ldr	r2, [pc, #700]	@ (800407c <HAL_RCC_OscConfig+0xc58>)
 8003dbe:	f023 0301 	bic.w	r3, r3, #1
 8003dc2:	6213      	str	r3, [r2, #32]
 8003dc4:	4bad      	ldr	r3, [pc, #692]	@ (800407c <HAL_RCC_OscConfig+0xc58>)
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	4aac      	ldr	r2, [pc, #688]	@ (800407c <HAL_RCC_OscConfig+0xc58>)
 8003dca:	f023 0304 	bic.w	r3, r3, #4
 8003dce:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dd4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 8081 	beq.w	8003ee4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003de2:	f7fe fafb 	bl	80023dc <HAL_GetTick>
 8003de6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dea:	e00b      	b.n	8003e04 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dec:	f7fe faf6 	bl	80023dc <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e345      	b.n	8004490 <HAL_RCC_OscConfig+0x106c>
 8003e04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e08:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003e0c:	2202      	movs	r2, #2
 8003e0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e14:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	fa93 f2a3 	rbit	r2, r3
 8003e1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e22:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e2c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003e30:	2202      	movs	r2, #2
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e38:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	fa93 f2a3 	rbit	r2, r3
 8003e42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e46:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003e4a:	601a      	str	r2, [r3, #0]
  return result;
 8003e4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e50:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003e54:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e56:	fab3 f383 	clz	r3, r3
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	095b      	lsrs	r3, r3, #5
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	f043 0302 	orr.w	r3, r3, #2
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d102      	bne.n	8003e70 <HAL_RCC_OscConfig+0xa4c>
 8003e6a:	4b84      	ldr	r3, [pc, #528]	@ (800407c <HAL_RCC_OscConfig+0xc58>)
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	e013      	b.n	8003e98 <HAL_RCC_OscConfig+0xa74>
 8003e70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e74:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003e78:	2202      	movs	r2, #2
 8003e7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e80:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	fa93 f2a3 	rbit	r2, r3
 8003e8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e8e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003e92:	601a      	str	r2, [r3, #0]
 8003e94:	4b79      	ldr	r3, [pc, #484]	@ (800407c <HAL_RCC_OscConfig+0xc58>)
 8003e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e98:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e9c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003ea0:	2102      	movs	r1, #2
 8003ea2:	6011      	str	r1, [r2, #0]
 8003ea4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ea8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003eac:	6812      	ldr	r2, [r2, #0]
 8003eae:	fa92 f1a2 	rbit	r1, r2
 8003eb2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003eb6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003eba:	6011      	str	r1, [r2, #0]
  return result;
 8003ebc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ec0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003ec4:	6812      	ldr	r2, [r2, #0]
 8003ec6:	fab2 f282 	clz	r2, r2
 8003eca:	b2d2      	uxtb	r2, r2
 8003ecc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ed0:	b2d2      	uxtb	r2, r2
 8003ed2:	f002 021f 	and.w	r2, r2, #31
 8003ed6:	2101      	movs	r1, #1
 8003ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8003edc:	4013      	ands	r3, r2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d084      	beq.n	8003dec <HAL_RCC_OscConfig+0x9c8>
 8003ee2:	e07f      	b.n	8003fe4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ee4:	f7fe fa7a 	bl	80023dc <HAL_GetTick>
 8003ee8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eec:	e00b      	b.n	8003f06 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eee:	f7fe fa75 	bl	80023dc <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e2c4      	b.n	8004490 <HAL_RCC_OscConfig+0x106c>
 8003f06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f0a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003f0e:	2202      	movs	r2, #2
 8003f10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f16:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	fa93 f2a3 	rbit	r2, r3
 8003f20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f24:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003f28:	601a      	str	r2, [r3, #0]
 8003f2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f2e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003f32:	2202      	movs	r2, #2
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f3a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	fa93 f2a3 	rbit	r2, r3
 8003f44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f48:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003f4c:	601a      	str	r2, [r3, #0]
  return result;
 8003f4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f52:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003f56:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f58:	fab3 f383 	clz	r3, r3
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	095b      	lsrs	r3, r3, #5
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	f043 0302 	orr.w	r3, r3, #2
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d102      	bne.n	8003f72 <HAL_RCC_OscConfig+0xb4e>
 8003f6c:	4b43      	ldr	r3, [pc, #268]	@ (800407c <HAL_RCC_OscConfig+0xc58>)
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	e013      	b.n	8003f9a <HAL_RCC_OscConfig+0xb76>
 8003f72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f76:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f82:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	fa93 f2a3 	rbit	r2, r3
 8003f8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f90:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003f94:	601a      	str	r2, [r3, #0]
 8003f96:	4b39      	ldr	r3, [pc, #228]	@ (800407c <HAL_RCC_OscConfig+0xc58>)
 8003f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f9e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003fa2:	2102      	movs	r1, #2
 8003fa4:	6011      	str	r1, [r2, #0]
 8003fa6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003faa:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003fae:	6812      	ldr	r2, [r2, #0]
 8003fb0:	fa92 f1a2 	rbit	r1, r2
 8003fb4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fb8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003fbc:	6011      	str	r1, [r2, #0]
  return result;
 8003fbe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fc2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003fc6:	6812      	ldr	r2, [r2, #0]
 8003fc8:	fab2 f282 	clz	r2, r2
 8003fcc:	b2d2      	uxtb	r2, r2
 8003fce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	f002 021f 	and.w	r2, r2, #31
 8003fd8:	2101      	movs	r1, #1
 8003fda:	fa01 f202 	lsl.w	r2, r1, r2
 8003fde:	4013      	ands	r3, r2
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d184      	bne.n	8003eee <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003fe4:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d105      	bne.n	8003ff8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fec:	4b23      	ldr	r3, [pc, #140]	@ (800407c <HAL_RCC_OscConfig+0xc58>)
 8003fee:	69db      	ldr	r3, [r3, #28]
 8003ff0:	4a22      	ldr	r2, [pc, #136]	@ (800407c <HAL_RCC_OscConfig+0xc58>)
 8003ff2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ff6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ff8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ffc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	69db      	ldr	r3, [r3, #28]
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 8242 	beq.w	800448e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800400a:	4b1c      	ldr	r3, [pc, #112]	@ (800407c <HAL_RCC_OscConfig+0xc58>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f003 030c 	and.w	r3, r3, #12
 8004012:	2b08      	cmp	r3, #8
 8004014:	f000 8213 	beq.w	800443e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004018:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800401c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	69db      	ldr	r3, [r3, #28]
 8004024:	2b02      	cmp	r3, #2
 8004026:	f040 8162 	bne.w	80042ee <HAL_RCC_OscConfig+0xeca>
 800402a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800402e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004032:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004036:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004038:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800403c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	fa93 f2a3 	rbit	r2, r3
 8004046:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800404a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800404e:	601a      	str	r2, [r3, #0]
  return result;
 8004050:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004054:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004058:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800405a:	fab3 f383 	clz	r3, r3
 800405e:	b2db      	uxtb	r3, r3
 8004060:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004064:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	461a      	mov	r2, r3
 800406c:	2300      	movs	r3, #0
 800406e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004070:	f7fe f9b4 	bl	80023dc <HAL_GetTick>
 8004074:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004078:	e00c      	b.n	8004094 <HAL_RCC_OscConfig+0xc70>
 800407a:	bf00      	nop
 800407c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004080:	f7fe f9ac 	bl	80023dc <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e1fd      	b.n	8004490 <HAL_RCC_OscConfig+0x106c>
 8004094:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004098:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800409c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80040a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040a6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	fa93 f2a3 	rbit	r2, r3
 80040b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040b4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80040b8:	601a      	str	r2, [r3, #0]
  return result;
 80040ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040be:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80040c2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040c4:	fab3 f383 	clz	r3, r3
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	095b      	lsrs	r3, r3, #5
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	f043 0301 	orr.w	r3, r3, #1
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d102      	bne.n	80040de <HAL_RCC_OscConfig+0xcba>
 80040d8:	4bb0      	ldr	r3, [pc, #704]	@ (800439c <HAL_RCC_OscConfig+0xf78>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	e027      	b.n	800412e <HAL_RCC_OscConfig+0xd0a>
 80040de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040e2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80040e6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80040ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040f0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	fa93 f2a3 	rbit	r2, r3
 80040fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040fe:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004108:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800410c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004116:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	fa93 f2a3 	rbit	r2, r3
 8004120:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004124:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004128:	601a      	str	r2, [r3, #0]
 800412a:	4b9c      	ldr	r3, [pc, #624]	@ (800439c <HAL_RCC_OscConfig+0xf78>)
 800412c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004132:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004136:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800413a:	6011      	str	r1, [r2, #0]
 800413c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004140:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004144:	6812      	ldr	r2, [r2, #0]
 8004146:	fa92 f1a2 	rbit	r1, r2
 800414a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800414e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004152:	6011      	str	r1, [r2, #0]
  return result;
 8004154:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004158:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800415c:	6812      	ldr	r2, [r2, #0]
 800415e:	fab2 f282 	clz	r2, r2
 8004162:	b2d2      	uxtb	r2, r2
 8004164:	f042 0220 	orr.w	r2, r2, #32
 8004168:	b2d2      	uxtb	r2, r2
 800416a:	f002 021f 	and.w	r2, r2, #31
 800416e:	2101      	movs	r1, #1
 8004170:	fa01 f202 	lsl.w	r2, r1, r2
 8004174:	4013      	ands	r3, r2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d182      	bne.n	8004080 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800417a:	4b88      	ldr	r3, [pc, #544]	@ (800439c <HAL_RCC_OscConfig+0xf78>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004182:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004186:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800418e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004192:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	430b      	orrs	r3, r1
 800419c:	497f      	ldr	r1, [pc, #508]	@ (800439c <HAL_RCC_OscConfig+0xf78>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	604b      	str	r3, [r1, #4]
 80041a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041a6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80041aa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80041ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041b4:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	fa93 f2a3 	rbit	r2, r3
 80041be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041c2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80041c6:	601a      	str	r2, [r3, #0]
  return result;
 80041c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041cc:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80041d0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041d2:	fab3 f383 	clz	r3, r3
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80041dc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	461a      	mov	r2, r3
 80041e4:	2301      	movs	r3, #1
 80041e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e8:	f7fe f8f8 	bl	80023dc <HAL_GetTick>
 80041ec:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041f0:	e009      	b.n	8004206 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041f2:	f7fe f8f3 	bl	80023dc <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e144      	b.n	8004490 <HAL_RCC_OscConfig+0x106c>
 8004206:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800420a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800420e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004212:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004214:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004218:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	fa93 f2a3 	rbit	r2, r3
 8004222:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004226:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800422a:	601a      	str	r2, [r3, #0]
  return result;
 800422c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004230:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004234:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004236:	fab3 f383 	clz	r3, r3
 800423a:	b2db      	uxtb	r3, r3
 800423c:	095b      	lsrs	r3, r3, #5
 800423e:	b2db      	uxtb	r3, r3
 8004240:	f043 0301 	orr.w	r3, r3, #1
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b01      	cmp	r3, #1
 8004248:	d102      	bne.n	8004250 <HAL_RCC_OscConfig+0xe2c>
 800424a:	4b54      	ldr	r3, [pc, #336]	@ (800439c <HAL_RCC_OscConfig+0xf78>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	e027      	b.n	80042a0 <HAL_RCC_OscConfig+0xe7c>
 8004250:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004254:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004258:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800425c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004262:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	fa93 f2a3 	rbit	r2, r3
 800426c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004270:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800427a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800427e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004282:	601a      	str	r2, [r3, #0]
 8004284:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004288:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	fa93 f2a3 	rbit	r2, r3
 8004292:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004296:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800429a:	601a      	str	r2, [r3, #0]
 800429c:	4b3f      	ldr	r3, [pc, #252]	@ (800439c <HAL_RCC_OscConfig+0xf78>)
 800429e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80042a4:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80042a8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80042ac:	6011      	str	r1, [r2, #0]
 80042ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80042b2:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80042b6:	6812      	ldr	r2, [r2, #0]
 80042b8:	fa92 f1a2 	rbit	r1, r2
 80042bc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80042c0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80042c4:	6011      	str	r1, [r2, #0]
  return result;
 80042c6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80042ca:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80042ce:	6812      	ldr	r2, [r2, #0]
 80042d0:	fab2 f282 	clz	r2, r2
 80042d4:	b2d2      	uxtb	r2, r2
 80042d6:	f042 0220 	orr.w	r2, r2, #32
 80042da:	b2d2      	uxtb	r2, r2
 80042dc:	f002 021f 	and.w	r2, r2, #31
 80042e0:	2101      	movs	r1, #1
 80042e2:	fa01 f202 	lsl.w	r2, r1, r2
 80042e6:	4013      	ands	r3, r2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d082      	beq.n	80041f2 <HAL_RCC_OscConfig+0xdce>
 80042ec:	e0cf      	b.n	800448e <HAL_RCC_OscConfig+0x106a>
 80042ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042f2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80042f6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80042fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004300:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	fa93 f2a3 	rbit	r2, r3
 800430a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800430e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004312:	601a      	str	r2, [r3, #0]
  return result;
 8004314:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004318:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800431c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800431e:	fab3 f383 	clz	r3, r3
 8004322:	b2db      	uxtb	r3, r3
 8004324:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004328:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	461a      	mov	r2, r3
 8004330:	2300      	movs	r3, #0
 8004332:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004334:	f7fe f852 	bl	80023dc <HAL_GetTick>
 8004338:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800433c:	e009      	b.n	8004352 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800433e:	f7fe f84d 	bl	80023dc <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e09e      	b.n	8004490 <HAL_RCC_OscConfig+0x106c>
 8004352:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004356:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800435a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800435e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004360:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004364:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	fa93 f2a3 	rbit	r2, r3
 800436e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004372:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004376:	601a      	str	r2, [r3, #0]
  return result;
 8004378:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800437c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004380:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004382:	fab3 f383 	clz	r3, r3
 8004386:	b2db      	uxtb	r3, r3
 8004388:	095b      	lsrs	r3, r3, #5
 800438a:	b2db      	uxtb	r3, r3
 800438c:	f043 0301 	orr.w	r3, r3, #1
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b01      	cmp	r3, #1
 8004394:	d104      	bne.n	80043a0 <HAL_RCC_OscConfig+0xf7c>
 8004396:	4b01      	ldr	r3, [pc, #4]	@ (800439c <HAL_RCC_OscConfig+0xf78>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	e029      	b.n	80043f0 <HAL_RCC_OscConfig+0xfcc>
 800439c:	40021000 	.word	0x40021000
 80043a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043a4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80043a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80043ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043b2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	fa93 f2a3 	rbit	r2, r3
 80043bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043c0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80043c4:	601a      	str	r2, [r3, #0]
 80043c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043ca:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80043ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043d8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	fa93 f2a3 	rbit	r2, r3
 80043e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043e6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80043ea:	601a      	str	r2, [r3, #0]
 80043ec:	4b2b      	ldr	r3, [pc, #172]	@ (800449c <HAL_RCC_OscConfig+0x1078>)
 80043ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80043f4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80043f8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80043fc:	6011      	str	r1, [r2, #0]
 80043fe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004402:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004406:	6812      	ldr	r2, [r2, #0]
 8004408:	fa92 f1a2 	rbit	r1, r2
 800440c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004410:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004414:	6011      	str	r1, [r2, #0]
  return result;
 8004416:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800441a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800441e:	6812      	ldr	r2, [r2, #0]
 8004420:	fab2 f282 	clz	r2, r2
 8004424:	b2d2      	uxtb	r2, r2
 8004426:	f042 0220 	orr.w	r2, r2, #32
 800442a:	b2d2      	uxtb	r2, r2
 800442c:	f002 021f 	and.w	r2, r2, #31
 8004430:	2101      	movs	r1, #1
 8004432:	fa01 f202 	lsl.w	r2, r1, r2
 8004436:	4013      	ands	r3, r2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d180      	bne.n	800433e <HAL_RCC_OscConfig+0xf1a>
 800443c:	e027      	b.n	800448e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800443e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004442:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d101      	bne.n	8004452 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e01e      	b.n	8004490 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004452:	4b12      	ldr	r3, [pc, #72]	@ (800449c <HAL_RCC_OscConfig+0x1078>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800445a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800445e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004462:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004466:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	429a      	cmp	r2, r3
 8004470:	d10b      	bne.n	800448a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004472:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004476:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800447a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800447e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004486:	429a      	cmp	r2, r3
 8004488:	d001      	beq.n	800448e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e000      	b.n	8004490 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	40021000 	.word	0x40021000

080044a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b09e      	sub	sp, #120	@ 0x78
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e162      	b.n	800477e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044b8:	4b90      	ldr	r3, [pc, #576]	@ (80046fc <HAL_RCC_ClockConfig+0x25c>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0307 	and.w	r3, r3, #7
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d910      	bls.n	80044e8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044c6:	4b8d      	ldr	r3, [pc, #564]	@ (80046fc <HAL_RCC_ClockConfig+0x25c>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f023 0207 	bic.w	r2, r3, #7
 80044ce:	498b      	ldr	r1, [pc, #556]	@ (80046fc <HAL_RCC_ClockConfig+0x25c>)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044d6:	4b89      	ldr	r3, [pc, #548]	@ (80046fc <HAL_RCC_ClockConfig+0x25c>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0307 	and.w	r3, r3, #7
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d001      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e14a      	b.n	800477e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d008      	beq.n	8004506 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044f4:	4b82      	ldr	r3, [pc, #520]	@ (8004700 <HAL_RCC_ClockConfig+0x260>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	497f      	ldr	r1, [pc, #508]	@ (8004700 <HAL_RCC_ClockConfig+0x260>)
 8004502:	4313      	orrs	r3, r2
 8004504:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b00      	cmp	r3, #0
 8004510:	f000 80dc 	beq.w	80046cc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d13c      	bne.n	8004596 <HAL_RCC_ClockConfig+0xf6>
 800451c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004520:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004522:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004524:	fa93 f3a3 	rbit	r3, r3
 8004528:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800452a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800452c:	fab3 f383 	clz	r3, r3
 8004530:	b2db      	uxtb	r3, r3
 8004532:	095b      	lsrs	r3, r3, #5
 8004534:	b2db      	uxtb	r3, r3
 8004536:	f043 0301 	orr.w	r3, r3, #1
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b01      	cmp	r3, #1
 800453e:	d102      	bne.n	8004546 <HAL_RCC_ClockConfig+0xa6>
 8004540:	4b6f      	ldr	r3, [pc, #444]	@ (8004700 <HAL_RCC_ClockConfig+0x260>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	e00f      	b.n	8004566 <HAL_RCC_ClockConfig+0xc6>
 8004546:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800454a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800454e:	fa93 f3a3 	rbit	r3, r3
 8004552:	667b      	str	r3, [r7, #100]	@ 0x64
 8004554:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004558:	663b      	str	r3, [r7, #96]	@ 0x60
 800455a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800455c:	fa93 f3a3 	rbit	r3, r3
 8004560:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004562:	4b67      	ldr	r3, [pc, #412]	@ (8004700 <HAL_RCC_ClockConfig+0x260>)
 8004564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004566:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800456a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800456c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800456e:	fa92 f2a2 	rbit	r2, r2
 8004572:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004574:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004576:	fab2 f282 	clz	r2, r2
 800457a:	b2d2      	uxtb	r2, r2
 800457c:	f042 0220 	orr.w	r2, r2, #32
 8004580:	b2d2      	uxtb	r2, r2
 8004582:	f002 021f 	and.w	r2, r2, #31
 8004586:	2101      	movs	r1, #1
 8004588:	fa01 f202 	lsl.w	r2, r1, r2
 800458c:	4013      	ands	r3, r2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d17b      	bne.n	800468a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e0f3      	b.n	800477e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	2b02      	cmp	r3, #2
 800459c:	d13c      	bne.n	8004618 <HAL_RCC_ClockConfig+0x178>
 800459e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80045a2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045a6:	fa93 f3a3 	rbit	r3, r3
 80045aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80045ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ae:	fab3 f383 	clz	r3, r3
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	095b      	lsrs	r3, r3, #5
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	f043 0301 	orr.w	r3, r3, #1
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d102      	bne.n	80045c8 <HAL_RCC_ClockConfig+0x128>
 80045c2:	4b4f      	ldr	r3, [pc, #316]	@ (8004700 <HAL_RCC_ClockConfig+0x260>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	e00f      	b.n	80045e8 <HAL_RCC_ClockConfig+0x148>
 80045c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80045cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045d0:	fa93 f3a3 	rbit	r3, r3
 80045d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80045d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80045da:	643b      	str	r3, [r7, #64]	@ 0x40
 80045dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045de:	fa93 f3a3 	rbit	r3, r3
 80045e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045e4:	4b46      	ldr	r3, [pc, #280]	@ (8004700 <HAL_RCC_ClockConfig+0x260>)
 80045e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80045ec:	63ba      	str	r2, [r7, #56]	@ 0x38
 80045ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80045f0:	fa92 f2a2 	rbit	r2, r2
 80045f4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80045f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80045f8:	fab2 f282 	clz	r2, r2
 80045fc:	b2d2      	uxtb	r2, r2
 80045fe:	f042 0220 	orr.w	r2, r2, #32
 8004602:	b2d2      	uxtb	r2, r2
 8004604:	f002 021f 	and.w	r2, r2, #31
 8004608:	2101      	movs	r1, #1
 800460a:	fa01 f202 	lsl.w	r2, r1, r2
 800460e:	4013      	ands	r3, r2
 8004610:	2b00      	cmp	r3, #0
 8004612:	d13a      	bne.n	800468a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e0b2      	b.n	800477e <HAL_RCC_ClockConfig+0x2de>
 8004618:	2302      	movs	r3, #2
 800461a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800461c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800461e:	fa93 f3a3 	rbit	r3, r3
 8004622:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004626:	fab3 f383 	clz	r3, r3
 800462a:	b2db      	uxtb	r3, r3
 800462c:	095b      	lsrs	r3, r3, #5
 800462e:	b2db      	uxtb	r3, r3
 8004630:	f043 0301 	orr.w	r3, r3, #1
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b01      	cmp	r3, #1
 8004638:	d102      	bne.n	8004640 <HAL_RCC_ClockConfig+0x1a0>
 800463a:	4b31      	ldr	r3, [pc, #196]	@ (8004700 <HAL_RCC_ClockConfig+0x260>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	e00d      	b.n	800465c <HAL_RCC_ClockConfig+0x1bc>
 8004640:	2302      	movs	r3, #2
 8004642:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004646:	fa93 f3a3 	rbit	r3, r3
 800464a:	627b      	str	r3, [r7, #36]	@ 0x24
 800464c:	2302      	movs	r3, #2
 800464e:	623b      	str	r3, [r7, #32]
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	fa93 f3a3 	rbit	r3, r3
 8004656:	61fb      	str	r3, [r7, #28]
 8004658:	4b29      	ldr	r3, [pc, #164]	@ (8004700 <HAL_RCC_ClockConfig+0x260>)
 800465a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465c:	2202      	movs	r2, #2
 800465e:	61ba      	str	r2, [r7, #24]
 8004660:	69ba      	ldr	r2, [r7, #24]
 8004662:	fa92 f2a2 	rbit	r2, r2
 8004666:	617a      	str	r2, [r7, #20]
  return result;
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	fab2 f282 	clz	r2, r2
 800466e:	b2d2      	uxtb	r2, r2
 8004670:	f042 0220 	orr.w	r2, r2, #32
 8004674:	b2d2      	uxtb	r2, r2
 8004676:	f002 021f 	and.w	r2, r2, #31
 800467a:	2101      	movs	r1, #1
 800467c:	fa01 f202 	lsl.w	r2, r1, r2
 8004680:	4013      	ands	r3, r2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e079      	b.n	800477e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800468a:	4b1d      	ldr	r3, [pc, #116]	@ (8004700 <HAL_RCC_ClockConfig+0x260>)
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f023 0203 	bic.w	r2, r3, #3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	491a      	ldr	r1, [pc, #104]	@ (8004700 <HAL_RCC_ClockConfig+0x260>)
 8004698:	4313      	orrs	r3, r2
 800469a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800469c:	f7fd fe9e 	bl	80023dc <HAL_GetTick>
 80046a0:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046a2:	e00a      	b.n	80046ba <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046a4:	f7fd fe9a 	bl	80023dc <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e061      	b.n	800477e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ba:	4b11      	ldr	r3, [pc, #68]	@ (8004700 <HAL_RCC_ClockConfig+0x260>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f003 020c 	and.w	r2, r3, #12
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d1eb      	bne.n	80046a4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046cc:	4b0b      	ldr	r3, [pc, #44]	@ (80046fc <HAL_RCC_ClockConfig+0x25c>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0307 	and.w	r3, r3, #7
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d214      	bcs.n	8004704 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046da:	4b08      	ldr	r3, [pc, #32]	@ (80046fc <HAL_RCC_ClockConfig+0x25c>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f023 0207 	bic.w	r2, r3, #7
 80046e2:	4906      	ldr	r1, [pc, #24]	@ (80046fc <HAL_RCC_ClockConfig+0x25c>)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ea:	4b04      	ldr	r3, [pc, #16]	@ (80046fc <HAL_RCC_ClockConfig+0x25c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0307 	and.w	r3, r3, #7
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d005      	beq.n	8004704 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e040      	b.n	800477e <HAL_RCC_ClockConfig+0x2de>
 80046fc:	40022000 	.word	0x40022000
 8004700:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b00      	cmp	r3, #0
 800470e:	d008      	beq.n	8004722 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004710:	4b1d      	ldr	r3, [pc, #116]	@ (8004788 <HAL_RCC_ClockConfig+0x2e8>)
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	491a      	ldr	r1, [pc, #104]	@ (8004788 <HAL_RCC_ClockConfig+0x2e8>)
 800471e:	4313      	orrs	r3, r2
 8004720:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0308 	and.w	r3, r3, #8
 800472a:	2b00      	cmp	r3, #0
 800472c:	d009      	beq.n	8004742 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800472e:	4b16      	ldr	r3, [pc, #88]	@ (8004788 <HAL_RCC_ClockConfig+0x2e8>)
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	4912      	ldr	r1, [pc, #72]	@ (8004788 <HAL_RCC_ClockConfig+0x2e8>)
 800473e:	4313      	orrs	r3, r2
 8004740:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004742:	f000 f829 	bl	8004798 <HAL_RCC_GetSysClockFreq>
 8004746:	4601      	mov	r1, r0
 8004748:	4b0f      	ldr	r3, [pc, #60]	@ (8004788 <HAL_RCC_ClockConfig+0x2e8>)
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004750:	22f0      	movs	r2, #240	@ 0xf0
 8004752:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	fa92 f2a2 	rbit	r2, r2
 800475a:	60fa      	str	r2, [r7, #12]
  return result;
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	fab2 f282 	clz	r2, r2
 8004762:	b2d2      	uxtb	r2, r2
 8004764:	40d3      	lsrs	r3, r2
 8004766:	4a09      	ldr	r2, [pc, #36]	@ (800478c <HAL_RCC_ClockConfig+0x2ec>)
 8004768:	5cd3      	ldrb	r3, [r2, r3]
 800476a:	fa21 f303 	lsr.w	r3, r1, r3
 800476e:	4a08      	ldr	r2, [pc, #32]	@ (8004790 <HAL_RCC_ClockConfig+0x2f0>)
 8004770:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004772:	4b08      	ldr	r3, [pc, #32]	@ (8004794 <HAL_RCC_ClockConfig+0x2f4>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4618      	mov	r0, r3
 8004778:	f7fd fdec 	bl	8002354 <HAL_InitTick>
  
  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3778      	adds	r7, #120	@ 0x78
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	40021000 	.word	0x40021000
 800478c:	0800629c 	.word	0x0800629c
 8004790:	2000005c 	.word	0x2000005c
 8004794:	20000114 	.word	0x20000114

08004798 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004798:	b480      	push	{r7}
 800479a:	b087      	sub	sp, #28
 800479c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800479e:	2300      	movs	r3, #0
 80047a0:	60fb      	str	r3, [r7, #12]
 80047a2:	2300      	movs	r3, #0
 80047a4:	60bb      	str	r3, [r7, #8]
 80047a6:	2300      	movs	r3, #0
 80047a8:	617b      	str	r3, [r7, #20]
 80047aa:	2300      	movs	r3, #0
 80047ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80047ae:	2300      	movs	r3, #0
 80047b0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80047b2:	4b1e      	ldr	r3, [pc, #120]	@ (800482c <HAL_RCC_GetSysClockFreq+0x94>)
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f003 030c 	and.w	r3, r3, #12
 80047be:	2b04      	cmp	r3, #4
 80047c0:	d002      	beq.n	80047c8 <HAL_RCC_GetSysClockFreq+0x30>
 80047c2:	2b08      	cmp	r3, #8
 80047c4:	d003      	beq.n	80047ce <HAL_RCC_GetSysClockFreq+0x36>
 80047c6:	e026      	b.n	8004816 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047c8:	4b19      	ldr	r3, [pc, #100]	@ (8004830 <HAL_RCC_GetSysClockFreq+0x98>)
 80047ca:	613b      	str	r3, [r7, #16]
      break;
 80047cc:	e026      	b.n	800481c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	0c9b      	lsrs	r3, r3, #18
 80047d2:	f003 030f 	and.w	r3, r3, #15
 80047d6:	4a17      	ldr	r2, [pc, #92]	@ (8004834 <HAL_RCC_GetSysClockFreq+0x9c>)
 80047d8:	5cd3      	ldrb	r3, [r2, r3]
 80047da:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80047dc:	4b13      	ldr	r3, [pc, #76]	@ (800482c <HAL_RCC_GetSysClockFreq+0x94>)
 80047de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e0:	f003 030f 	and.w	r3, r3, #15
 80047e4:	4a14      	ldr	r2, [pc, #80]	@ (8004838 <HAL_RCC_GetSysClockFreq+0xa0>)
 80047e6:	5cd3      	ldrb	r3, [r2, r3]
 80047e8:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d008      	beq.n	8004806 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80047f4:	4a0e      	ldr	r2, [pc, #56]	@ (8004830 <HAL_RCC_GetSysClockFreq+0x98>)
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	fb02 f303 	mul.w	r3, r2, r3
 8004802:	617b      	str	r3, [r7, #20]
 8004804:	e004      	b.n	8004810 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a0c      	ldr	r2, [pc, #48]	@ (800483c <HAL_RCC_GetSysClockFreq+0xa4>)
 800480a:	fb02 f303 	mul.w	r3, r2, r3
 800480e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	613b      	str	r3, [r7, #16]
      break;
 8004814:	e002      	b.n	800481c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004816:	4b06      	ldr	r3, [pc, #24]	@ (8004830 <HAL_RCC_GetSysClockFreq+0x98>)
 8004818:	613b      	str	r3, [r7, #16]
      break;
 800481a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800481c:	693b      	ldr	r3, [r7, #16]
}
 800481e:	4618      	mov	r0, r3
 8004820:	371c      	adds	r7, #28
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	40021000 	.word	0x40021000
 8004830:	007a1200 	.word	0x007a1200
 8004834:	08006334 	.word	0x08006334
 8004838:	08006344 	.word	0x08006344
 800483c:	003d0900 	.word	0x003d0900

08004840 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b092      	sub	sp, #72	@ 0x48
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004848:	2300      	movs	r3, #0
 800484a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800484c:	2300      	movs	r3, #0
 800484e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004850:	2300      	movs	r3, #0
 8004852:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800485e:	2b00      	cmp	r3, #0
 8004860:	f000 80d4 	beq.w	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004864:	4b4e      	ldr	r3, [pc, #312]	@ (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004866:	69db      	ldr	r3, [r3, #28]
 8004868:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d10e      	bne.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004870:	4b4b      	ldr	r3, [pc, #300]	@ (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004872:	69db      	ldr	r3, [r3, #28]
 8004874:	4a4a      	ldr	r2, [pc, #296]	@ (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004876:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800487a:	61d3      	str	r3, [r2, #28]
 800487c:	4b48      	ldr	r3, [pc, #288]	@ (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800487e:	69db      	ldr	r3, [r3, #28]
 8004880:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004884:	60bb      	str	r3, [r7, #8]
 8004886:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004888:	2301      	movs	r3, #1
 800488a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800488e:	4b45      	ldr	r3, [pc, #276]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004896:	2b00      	cmp	r3, #0
 8004898:	d118      	bne.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800489a:	4b42      	ldr	r3, [pc, #264]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a41      	ldr	r2, [pc, #260]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048a4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048a6:	f7fd fd99 	bl	80023dc <HAL_GetTick>
 80048aa:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ac:	e008      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ae:	f7fd fd95 	bl	80023dc <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b64      	cmp	r3, #100	@ 0x64
 80048ba:	d901      	bls.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e169      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c0:	4b38      	ldr	r3, [pc, #224]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d0f0      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048cc:	4b34      	ldr	r3, [pc, #208]	@ (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ce:	6a1b      	ldr	r3, [r3, #32]
 80048d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f000 8084 	beq.w	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048e6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d07c      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048ec:	4b2c      	ldr	r3, [pc, #176]	@ (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80048fa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048fe:	fa93 f3a3 	rbit	r3, r3
 8004902:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004906:	fab3 f383 	clz	r3, r3
 800490a:	b2db      	uxtb	r3, r3
 800490c:	461a      	mov	r2, r3
 800490e:	4b26      	ldr	r3, [pc, #152]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004910:	4413      	add	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	461a      	mov	r2, r3
 8004916:	2301      	movs	r3, #1
 8004918:	6013      	str	r3, [r2, #0]
 800491a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800491e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004922:	fa93 f3a3 	rbit	r3, r3
 8004926:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800492a:	fab3 f383 	clz	r3, r3
 800492e:	b2db      	uxtb	r3, r3
 8004930:	461a      	mov	r2, r3
 8004932:	4b1d      	ldr	r3, [pc, #116]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004934:	4413      	add	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	461a      	mov	r2, r3
 800493a:	2300      	movs	r3, #0
 800493c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800493e:	4a18      	ldr	r2, [pc, #96]	@ (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004940:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004942:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004944:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d04b      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800494e:	f7fd fd45 	bl	80023dc <HAL_GetTick>
 8004952:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004954:	e00a      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004956:	f7fd fd41 	bl	80023dc <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004964:	4293      	cmp	r3, r2
 8004966:	d901      	bls.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e113      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800496c:	2302      	movs	r3, #2
 800496e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004972:	fa93 f3a3 	rbit	r3, r3
 8004976:	627b      	str	r3, [r7, #36]	@ 0x24
 8004978:	2302      	movs	r3, #2
 800497a:	623b      	str	r3, [r7, #32]
 800497c:	6a3b      	ldr	r3, [r7, #32]
 800497e:	fa93 f3a3 	rbit	r3, r3
 8004982:	61fb      	str	r3, [r7, #28]
  return result;
 8004984:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004986:	fab3 f383 	clz	r3, r3
 800498a:	b2db      	uxtb	r3, r3
 800498c:	095b      	lsrs	r3, r3, #5
 800498e:	b2db      	uxtb	r3, r3
 8004990:	f043 0302 	orr.w	r3, r3, #2
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b02      	cmp	r3, #2
 8004998:	d108      	bne.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800499a:	4b01      	ldr	r3, [pc, #4]	@ (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	e00d      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80049a0:	40021000 	.word	0x40021000
 80049a4:	40007000 	.word	0x40007000
 80049a8:	10908100 	.word	0x10908100
 80049ac:	2302      	movs	r3, #2
 80049ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	fa93 f3a3 	rbit	r3, r3
 80049b6:	617b      	str	r3, [r7, #20]
 80049b8:	4b78      	ldr	r3, [pc, #480]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049bc:	2202      	movs	r2, #2
 80049be:	613a      	str	r2, [r7, #16]
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	fa92 f2a2 	rbit	r2, r2
 80049c6:	60fa      	str	r2, [r7, #12]
  return result;
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	fab2 f282 	clz	r2, r2
 80049ce:	b2d2      	uxtb	r2, r2
 80049d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049d4:	b2d2      	uxtb	r2, r2
 80049d6:	f002 021f 	and.w	r2, r2, #31
 80049da:	2101      	movs	r1, #1
 80049dc:	fa01 f202 	lsl.w	r2, r1, r2
 80049e0:	4013      	ands	r3, r2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d0b7      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80049e6:	4b6d      	ldr	r3, [pc, #436]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	496a      	ldr	r1, [pc, #424]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80049f8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d105      	bne.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a00:	4b66      	ldr	r3, [pc, #408]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a02:	69db      	ldr	r3, [r3, #28]
 8004a04:	4a65      	ldr	r2, [pc, #404]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a0a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d008      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a18:	4b60      	ldr	r3, [pc, #384]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a1c:	f023 0203 	bic.w	r2, r3, #3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	495d      	ldr	r1, [pc, #372]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d008      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a36:	4b59      	ldr	r3, [pc, #356]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a3a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	4956      	ldr	r1, [pc, #344]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0304 	and.w	r3, r3, #4
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d008      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a54:	4b51      	ldr	r3, [pc, #324]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a58:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	494e      	ldr	r1, [pc, #312]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0320 	and.w	r3, r3, #32
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d008      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a72:	4b4a      	ldr	r3, [pc, #296]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a76:	f023 0210 	bic.w	r2, r3, #16
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	4947      	ldr	r1, [pc, #284]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d008      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004a90:	4b42      	ldr	r3, [pc, #264]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a9c:	493f      	ldr	r1, [pc, #252]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d008      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004aae:	4b3b      	ldr	r3, [pc, #236]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ab2:	f023 0220 	bic.w	r2, r3, #32
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	4938      	ldr	r1, [pc, #224]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0308 	and.w	r3, r3, #8
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d008      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004acc:	4b33      	ldr	r3, [pc, #204]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	695b      	ldr	r3, [r3, #20]
 8004ad8:	4930      	ldr	r1, [pc, #192]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0310 	and.w	r3, r3, #16
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d008      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004aea:	4b2c      	ldr	r3, [pc, #176]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	4929      	ldr	r1, [pc, #164]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d008      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b08:	4b24      	ldr	r3, [pc, #144]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b14:	4921      	ldr	r1, [pc, #132]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d008      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004b26:	4b1d      	ldr	r3, [pc, #116]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b2a:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b32:	491a      	ldr	r1, [pc, #104]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d008      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004b44:	4b15      	ldr	r3, [pc, #84]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b48:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b50:	4912      	ldr	r1, [pc, #72]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d008      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004b62:	4b0e      	ldr	r3, [pc, #56]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b66:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b6e:	490b      	ldr	r1, [pc, #44]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d008      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004b80:	4b06      	ldr	r3, [pc, #24]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b84:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b8c:	4903      	ldr	r1, [pc, #12]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3748      	adds	r7, #72	@ 0x48
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	40021000 	.word	0x40021000

08004ba0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e09d      	b.n	8004cee <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d108      	bne.n	8004bcc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004bc2:	d009      	beq.n	8004bd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	61da      	str	r2, [r3, #28]
 8004bca:	e005      	b.n	8004bd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d106      	bne.n	8004bf8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f7fc f840 	bl	8000c78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c0e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c18:	d902      	bls.n	8004c20 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	60fb      	str	r3, [r7, #12]
 8004c1e:	e002      	b.n	8004c26 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c24:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004c2e:	d007      	beq.n	8004c40 <HAL_SPI_Init+0xa0>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c38:	d002      	beq.n	8004c40 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004c50:	431a      	orrs	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	695b      	ldr	r3, [r3, #20]
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	431a      	orrs	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	69db      	ldr	r3, [r3, #28]
 8004c74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c82:	ea42 0103 	orr.w	r1, r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c8a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	430a      	orrs	r2, r1
 8004c94:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	0c1b      	lsrs	r3, r3, #16
 8004c9c:	f003 0204 	and.w	r2, r3, #4
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca4:	f003 0310 	and.w	r3, r3, #16
 8004ca8:	431a      	orrs	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cae:	f003 0308 	and.w	r3, r3, #8
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004cbc:	ea42 0103 	orr.w	r1, r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	69da      	ldr	r2, [r3, #28]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004cdc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b082      	sub	sp, #8
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d101      	bne.n	8004d08 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e049      	b.n	8004d9c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d106      	bne.n	8004d22 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f7fb ffed 	bl	8000cfc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2202      	movs	r2, #2
 8004d26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	3304      	adds	r3, #4
 8004d32:	4619      	mov	r1, r3
 8004d34:	4610      	mov	r0, r2
 8004d36:	f000 f949 	bl	8004fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3708      	adds	r7, #8
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b086      	sub	sp, #24
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004db0:	2300      	movs	r3, #0
 8004db2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d101      	bne.n	8004dc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	e0ff      	b.n	8004fc2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2b14      	cmp	r3, #20
 8004dce:	f200 80f0 	bhi.w	8004fb2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8004dd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd8:	08004e2d 	.word	0x08004e2d
 8004ddc:	08004fb3 	.word	0x08004fb3
 8004de0:	08004fb3 	.word	0x08004fb3
 8004de4:	08004fb3 	.word	0x08004fb3
 8004de8:	08004e6d 	.word	0x08004e6d
 8004dec:	08004fb3 	.word	0x08004fb3
 8004df0:	08004fb3 	.word	0x08004fb3
 8004df4:	08004fb3 	.word	0x08004fb3
 8004df8:	08004eaf 	.word	0x08004eaf
 8004dfc:	08004fb3 	.word	0x08004fb3
 8004e00:	08004fb3 	.word	0x08004fb3
 8004e04:	08004fb3 	.word	0x08004fb3
 8004e08:	08004eef 	.word	0x08004eef
 8004e0c:	08004fb3 	.word	0x08004fb3
 8004e10:	08004fb3 	.word	0x08004fb3
 8004e14:	08004fb3 	.word	0x08004fb3
 8004e18:	08004f31 	.word	0x08004f31
 8004e1c:	08004fb3 	.word	0x08004fb3
 8004e20:	08004fb3 	.word	0x08004fb3
 8004e24:	08004fb3 	.word	0x08004fb3
 8004e28:	08004f71 	.word	0x08004f71
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68b9      	ldr	r1, [r7, #8]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 f966 	bl	8005104 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	699a      	ldr	r2, [r3, #24]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f042 0208 	orr.w	r2, r2, #8
 8004e46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	699a      	ldr	r2, [r3, #24]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0204 	bic.w	r2, r2, #4
 8004e56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6999      	ldr	r1, [r3, #24]
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	691a      	ldr	r2, [r3, #16]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	619a      	str	r2, [r3, #24]
      break;
 8004e6a:	e0a5      	b.n	8004fb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68b9      	ldr	r1, [r7, #8]
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 f9d6 	bl	8005224 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	699a      	ldr	r2, [r3, #24]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	699a      	ldr	r2, [r3, #24]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6999      	ldr	r1, [r3, #24]
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	021a      	lsls	r2, r3, #8
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	619a      	str	r2, [r3, #24]
      break;
 8004eac:	e084      	b.n	8004fb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68b9      	ldr	r1, [r7, #8]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f000 fa3f 	bl	8005338 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	69da      	ldr	r2, [r3, #28]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f042 0208 	orr.w	r2, r2, #8
 8004ec8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69da      	ldr	r2, [r3, #28]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f022 0204 	bic.w	r2, r2, #4
 8004ed8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	69d9      	ldr	r1, [r3, #28]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	691a      	ldr	r2, [r3, #16]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	61da      	str	r2, [r3, #28]
      break;
 8004eec:	e064      	b.n	8004fb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68b9      	ldr	r1, [r7, #8]
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f000 faa7 	bl	8005448 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	69da      	ldr	r2, [r3, #28]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	69da      	ldr	r2, [r3, #28]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	69d9      	ldr	r1, [r3, #28]
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	021a      	lsls	r2, r3, #8
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	61da      	str	r2, [r3, #28]
      break;
 8004f2e:	e043      	b.n	8004fb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68b9      	ldr	r1, [r7, #8]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 faf0 	bl	800551c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f042 0208 	orr.w	r2, r2, #8
 8004f4a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 0204 	bic.w	r2, r2, #4
 8004f5a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	691a      	ldr	r2, [r3, #16]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004f6e:	e023      	b.n	8004fb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68b9      	ldr	r1, [r7, #8]
 8004f76:	4618      	mov	r0, r3
 8004f78:	f000 fb34 	bl	80055e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f8a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f9a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	021a      	lsls	r2, r3, #8
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	430a      	orrs	r2, r1
 8004fae:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004fb0:	e002      	b.n	8004fb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	75fb      	strb	r3, [r7, #23]
      break;
 8004fb6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3718      	adds	r7, #24
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop

08004fcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a42      	ldr	r2, [pc, #264]	@ (80050e8 <TIM_Base_SetConfig+0x11c>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d00f      	beq.n	8005004 <TIM_Base_SetConfig+0x38>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fea:	d00b      	beq.n	8005004 <TIM_Base_SetConfig+0x38>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a3f      	ldr	r2, [pc, #252]	@ (80050ec <TIM_Base_SetConfig+0x120>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d007      	beq.n	8005004 <TIM_Base_SetConfig+0x38>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a3e      	ldr	r2, [pc, #248]	@ (80050f0 <TIM_Base_SetConfig+0x124>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d003      	beq.n	8005004 <TIM_Base_SetConfig+0x38>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a3d      	ldr	r2, [pc, #244]	@ (80050f4 <TIM_Base_SetConfig+0x128>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d108      	bne.n	8005016 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800500a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	4313      	orrs	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a33      	ldr	r2, [pc, #204]	@ (80050e8 <TIM_Base_SetConfig+0x11c>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d01b      	beq.n	8005056 <TIM_Base_SetConfig+0x8a>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005024:	d017      	beq.n	8005056 <TIM_Base_SetConfig+0x8a>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a30      	ldr	r2, [pc, #192]	@ (80050ec <TIM_Base_SetConfig+0x120>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d013      	beq.n	8005056 <TIM_Base_SetConfig+0x8a>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a2f      	ldr	r2, [pc, #188]	@ (80050f0 <TIM_Base_SetConfig+0x124>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d00f      	beq.n	8005056 <TIM_Base_SetConfig+0x8a>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a2e      	ldr	r2, [pc, #184]	@ (80050f4 <TIM_Base_SetConfig+0x128>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d00b      	beq.n	8005056 <TIM_Base_SetConfig+0x8a>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a2d      	ldr	r2, [pc, #180]	@ (80050f8 <TIM_Base_SetConfig+0x12c>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d007      	beq.n	8005056 <TIM_Base_SetConfig+0x8a>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a2c      	ldr	r2, [pc, #176]	@ (80050fc <TIM_Base_SetConfig+0x130>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d003      	beq.n	8005056 <TIM_Base_SetConfig+0x8a>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a2b      	ldr	r2, [pc, #172]	@ (8005100 <TIM_Base_SetConfig+0x134>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d108      	bne.n	8005068 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800505c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	4313      	orrs	r3, r2
 8005066:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	4313      	orrs	r3, r2
 8005074:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	689a      	ldr	r2, [r3, #8]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a16      	ldr	r2, [pc, #88]	@ (80050e8 <TIM_Base_SetConfig+0x11c>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d00f      	beq.n	80050b4 <TIM_Base_SetConfig+0xe8>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a17      	ldr	r2, [pc, #92]	@ (80050f4 <TIM_Base_SetConfig+0x128>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d00b      	beq.n	80050b4 <TIM_Base_SetConfig+0xe8>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a16      	ldr	r2, [pc, #88]	@ (80050f8 <TIM_Base_SetConfig+0x12c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d007      	beq.n	80050b4 <TIM_Base_SetConfig+0xe8>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a15      	ldr	r2, [pc, #84]	@ (80050fc <TIM_Base_SetConfig+0x130>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d003      	beq.n	80050b4 <TIM_Base_SetConfig+0xe8>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a14      	ldr	r2, [pc, #80]	@ (8005100 <TIM_Base_SetConfig+0x134>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d103      	bne.n	80050bc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	691a      	ldr	r2, [r3, #16]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d105      	bne.n	80050da <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	f023 0201 	bic.w	r2, r3, #1
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	611a      	str	r2, [r3, #16]
  }
}
 80050da:	bf00      	nop
 80050dc:	3714      	adds	r7, #20
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	40012c00 	.word	0x40012c00
 80050ec:	40000400 	.word	0x40000400
 80050f0:	40000800 	.word	0x40000800
 80050f4:	40013400 	.word	0x40013400
 80050f8:	40014000 	.word	0x40014000
 80050fc:	40014400 	.word	0x40014400
 8005100:	40014800 	.word	0x40014800

08005104 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005104:	b480      	push	{r7}
 8005106:	b087      	sub	sp, #28
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a1b      	ldr	r3, [r3, #32]
 8005118:	f023 0201 	bic.w	r2, r3, #1
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005132:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f023 0303 	bic.w	r3, r3, #3
 800513e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	4313      	orrs	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f023 0302 	bic.w	r3, r3, #2
 8005150:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	4313      	orrs	r3, r2
 800515a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a2c      	ldr	r2, [pc, #176]	@ (8005210 <TIM_OC1_SetConfig+0x10c>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d00f      	beq.n	8005184 <TIM_OC1_SetConfig+0x80>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a2b      	ldr	r2, [pc, #172]	@ (8005214 <TIM_OC1_SetConfig+0x110>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d00b      	beq.n	8005184 <TIM_OC1_SetConfig+0x80>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a2a      	ldr	r2, [pc, #168]	@ (8005218 <TIM_OC1_SetConfig+0x114>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d007      	beq.n	8005184 <TIM_OC1_SetConfig+0x80>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a29      	ldr	r2, [pc, #164]	@ (800521c <TIM_OC1_SetConfig+0x118>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d003      	beq.n	8005184 <TIM_OC1_SetConfig+0x80>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a28      	ldr	r2, [pc, #160]	@ (8005220 <TIM_OC1_SetConfig+0x11c>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d10c      	bne.n	800519e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	f023 0308 	bic.w	r3, r3, #8
 800518a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	4313      	orrs	r3, r2
 8005194:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f023 0304 	bic.w	r3, r3, #4
 800519c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a1b      	ldr	r2, [pc, #108]	@ (8005210 <TIM_OC1_SetConfig+0x10c>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d00f      	beq.n	80051c6 <TIM_OC1_SetConfig+0xc2>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a1a      	ldr	r2, [pc, #104]	@ (8005214 <TIM_OC1_SetConfig+0x110>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d00b      	beq.n	80051c6 <TIM_OC1_SetConfig+0xc2>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a19      	ldr	r2, [pc, #100]	@ (8005218 <TIM_OC1_SetConfig+0x114>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d007      	beq.n	80051c6 <TIM_OC1_SetConfig+0xc2>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a18      	ldr	r2, [pc, #96]	@ (800521c <TIM_OC1_SetConfig+0x118>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d003      	beq.n	80051c6 <TIM_OC1_SetConfig+0xc2>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a17      	ldr	r2, [pc, #92]	@ (8005220 <TIM_OC1_SetConfig+0x11c>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d111      	bne.n	80051ea <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80051d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	4313      	orrs	r3, r2
 80051de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	685a      	ldr	r2, [r3, #4]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	621a      	str	r2, [r3, #32]
}
 8005204:	bf00      	nop
 8005206:	371c      	adds	r7, #28
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr
 8005210:	40012c00 	.word	0x40012c00
 8005214:	40013400 	.word	0x40013400
 8005218:	40014000 	.word	0x40014000
 800521c:	40014400 	.word	0x40014400
 8005220:	40014800 	.word	0x40014800

08005224 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005224:	b480      	push	{r7}
 8005226:	b087      	sub	sp, #28
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a1b      	ldr	r3, [r3, #32]
 8005238:	f023 0210 	bic.w	r2, r3, #16
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005252:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800525e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	021b      	lsls	r3, r3, #8
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	4313      	orrs	r3, r2
 800526a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	f023 0320 	bic.w	r3, r3, #32
 8005272:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	011b      	lsls	r3, r3, #4
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	4313      	orrs	r3, r2
 800527e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a28      	ldr	r2, [pc, #160]	@ (8005324 <TIM_OC2_SetConfig+0x100>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d003      	beq.n	8005290 <TIM_OC2_SetConfig+0x6c>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a27      	ldr	r2, [pc, #156]	@ (8005328 <TIM_OC2_SetConfig+0x104>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d10d      	bne.n	80052ac <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005296:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	011b      	lsls	r3, r3, #4
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a1d      	ldr	r2, [pc, #116]	@ (8005324 <TIM_OC2_SetConfig+0x100>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d00f      	beq.n	80052d4 <TIM_OC2_SetConfig+0xb0>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a1c      	ldr	r2, [pc, #112]	@ (8005328 <TIM_OC2_SetConfig+0x104>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d00b      	beq.n	80052d4 <TIM_OC2_SetConfig+0xb0>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a1b      	ldr	r2, [pc, #108]	@ (800532c <TIM_OC2_SetConfig+0x108>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d007      	beq.n	80052d4 <TIM_OC2_SetConfig+0xb0>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a1a      	ldr	r2, [pc, #104]	@ (8005330 <TIM_OC2_SetConfig+0x10c>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d003      	beq.n	80052d4 <TIM_OC2_SetConfig+0xb0>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a19      	ldr	r2, [pc, #100]	@ (8005334 <TIM_OC2_SetConfig+0x110>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d113      	bne.n	80052fc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80052da:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80052e2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	695b      	ldr	r3, [r3, #20]
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	621a      	str	r2, [r3, #32]
}
 8005316:	bf00      	nop
 8005318:	371c      	adds	r7, #28
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	40012c00 	.word	0x40012c00
 8005328:	40013400 	.word	0x40013400
 800532c:	40014000 	.word	0x40014000
 8005330:	40014400 	.word	0x40014400
 8005334:	40014800 	.word	0x40014800

08005338 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005338:	b480      	push	{r7}
 800533a:	b087      	sub	sp, #28
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a1b      	ldr	r3, [r3, #32]
 800534c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	69db      	ldr	r3, [r3, #28]
 800535e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005366:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800536a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f023 0303 	bic.w	r3, r3, #3
 8005372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	4313      	orrs	r3, r2
 800537c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005384:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	021b      	lsls	r3, r3, #8
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	4313      	orrs	r3, r2
 8005390:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a27      	ldr	r2, [pc, #156]	@ (8005434 <TIM_OC3_SetConfig+0xfc>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d003      	beq.n	80053a2 <TIM_OC3_SetConfig+0x6a>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a26      	ldr	r2, [pc, #152]	@ (8005438 <TIM_OC3_SetConfig+0x100>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d10d      	bne.n	80053be <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80053a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	021b      	lsls	r3, r3, #8
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053bc:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a1c      	ldr	r2, [pc, #112]	@ (8005434 <TIM_OC3_SetConfig+0xfc>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d00f      	beq.n	80053e6 <TIM_OC3_SetConfig+0xae>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a1b      	ldr	r2, [pc, #108]	@ (8005438 <TIM_OC3_SetConfig+0x100>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d00b      	beq.n	80053e6 <TIM_OC3_SetConfig+0xae>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a1a      	ldr	r2, [pc, #104]	@ (800543c <TIM_OC3_SetConfig+0x104>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d007      	beq.n	80053e6 <TIM_OC3_SetConfig+0xae>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a19      	ldr	r2, [pc, #100]	@ (8005440 <TIM_OC3_SetConfig+0x108>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d003      	beq.n	80053e6 <TIM_OC3_SetConfig+0xae>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a18      	ldr	r2, [pc, #96]	@ (8005444 <TIM_OC3_SetConfig+0x10c>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d113      	bne.n	800540e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80053ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80053f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	011b      	lsls	r3, r3, #4
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	4313      	orrs	r3, r2
 8005400:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	011b      	lsls	r3, r3, #4
 8005408:	693a      	ldr	r2, [r7, #16]
 800540a:	4313      	orrs	r3, r2
 800540c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	685a      	ldr	r2, [r3, #4]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	621a      	str	r2, [r3, #32]
}
 8005428:	bf00      	nop
 800542a:	371c      	adds	r7, #28
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr
 8005434:	40012c00 	.word	0x40012c00
 8005438:	40013400 	.word	0x40013400
 800543c:	40014000 	.word	0x40014000
 8005440:	40014400 	.word	0x40014400
 8005444:	40014800 	.word	0x40014800

08005448 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005448:	b480      	push	{r7}
 800544a:	b087      	sub	sp, #28
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a1b      	ldr	r3, [r3, #32]
 800545c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	69db      	ldr	r3, [r3, #28]
 800546e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005476:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800547a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005482:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	021b      	lsls	r3, r3, #8
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	4313      	orrs	r3, r2
 800548e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005496:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	031b      	lsls	r3, r3, #12
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a18      	ldr	r2, [pc, #96]	@ (8005508 <TIM_OC4_SetConfig+0xc0>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d00f      	beq.n	80054cc <TIM_OC4_SetConfig+0x84>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a17      	ldr	r2, [pc, #92]	@ (800550c <TIM_OC4_SetConfig+0xc4>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d00b      	beq.n	80054cc <TIM_OC4_SetConfig+0x84>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a16      	ldr	r2, [pc, #88]	@ (8005510 <TIM_OC4_SetConfig+0xc8>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d007      	beq.n	80054cc <TIM_OC4_SetConfig+0x84>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a15      	ldr	r2, [pc, #84]	@ (8005514 <TIM_OC4_SetConfig+0xcc>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d003      	beq.n	80054cc <TIM_OC4_SetConfig+0x84>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a14      	ldr	r2, [pc, #80]	@ (8005518 <TIM_OC4_SetConfig+0xd0>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d109      	bne.n	80054e0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	019b      	lsls	r3, r3, #6
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	4313      	orrs	r3, r2
 80054de:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	621a      	str	r2, [r3, #32]
}
 80054fa:	bf00      	nop
 80054fc:	371c      	adds	r7, #28
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	40012c00 	.word	0x40012c00
 800550c:	40013400 	.word	0x40013400
 8005510:	40014000 	.word	0x40014000
 8005514:	40014400 	.word	0x40014400
 8005518:	40014800 	.word	0x40014800

0800551c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800551c:	b480      	push	{r7}
 800551e:	b087      	sub	sp, #28
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a1b      	ldr	r3, [r3, #32]
 8005530:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800554a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800554e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	4313      	orrs	r3, r2
 8005558:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005560:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	041b      	lsls	r3, r3, #16
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	4313      	orrs	r3, r2
 800556c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a17      	ldr	r2, [pc, #92]	@ (80055d0 <TIM_OC5_SetConfig+0xb4>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d00f      	beq.n	8005596 <TIM_OC5_SetConfig+0x7a>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a16      	ldr	r2, [pc, #88]	@ (80055d4 <TIM_OC5_SetConfig+0xb8>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d00b      	beq.n	8005596 <TIM_OC5_SetConfig+0x7a>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a15      	ldr	r2, [pc, #84]	@ (80055d8 <TIM_OC5_SetConfig+0xbc>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d007      	beq.n	8005596 <TIM_OC5_SetConfig+0x7a>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a14      	ldr	r2, [pc, #80]	@ (80055dc <TIM_OC5_SetConfig+0xc0>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d003      	beq.n	8005596 <TIM_OC5_SetConfig+0x7a>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a13      	ldr	r2, [pc, #76]	@ (80055e0 <TIM_OC5_SetConfig+0xc4>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d109      	bne.n	80055aa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800559c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	021b      	lsls	r3, r3, #8
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	685a      	ldr	r2, [r3, #4]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	621a      	str	r2, [r3, #32]
}
 80055c4:	bf00      	nop
 80055c6:	371c      	adds	r7, #28
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr
 80055d0:	40012c00 	.word	0x40012c00
 80055d4:	40013400 	.word	0x40013400
 80055d8:	40014000 	.word	0x40014000
 80055dc:	40014400 	.word	0x40014400
 80055e0:	40014800 	.word	0x40014800

080055e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b087      	sub	sp, #28
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800560a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005612:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	021b      	lsls	r3, r3, #8
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	4313      	orrs	r3, r2
 8005622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800562a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	051b      	lsls	r3, r3, #20
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	4313      	orrs	r3, r2
 8005636:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a18      	ldr	r2, [pc, #96]	@ (800569c <TIM_OC6_SetConfig+0xb8>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d00f      	beq.n	8005660 <TIM_OC6_SetConfig+0x7c>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a17      	ldr	r2, [pc, #92]	@ (80056a0 <TIM_OC6_SetConfig+0xbc>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d00b      	beq.n	8005660 <TIM_OC6_SetConfig+0x7c>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a16      	ldr	r2, [pc, #88]	@ (80056a4 <TIM_OC6_SetConfig+0xc0>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d007      	beq.n	8005660 <TIM_OC6_SetConfig+0x7c>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a15      	ldr	r2, [pc, #84]	@ (80056a8 <TIM_OC6_SetConfig+0xc4>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d003      	beq.n	8005660 <TIM_OC6_SetConfig+0x7c>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a14      	ldr	r2, [pc, #80]	@ (80056ac <TIM_OC6_SetConfig+0xc8>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d109      	bne.n	8005674 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005666:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	029b      	lsls	r3, r3, #10
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	4313      	orrs	r3, r2
 8005672:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	621a      	str	r2, [r3, #32]
}
 800568e:	bf00      	nop
 8005690:	371c      	adds	r7, #28
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	40012c00 	.word	0x40012c00
 80056a0:	40013400 	.word	0x40013400
 80056a4:	40014000 	.word	0x40014000
 80056a8:	40014400 	.word	0x40014400
 80056ac:	40014800 	.word	0x40014800

080056b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d101      	bne.n	80056c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056c4:	2302      	movs	r3, #2
 80056c6:	e063      	b.n	8005790 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2202      	movs	r2, #2
 80056d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a2b      	ldr	r2, [pc, #172]	@ (800579c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d004      	beq.n	80056fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a2a      	ldr	r2, [pc, #168]	@ (80057a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d108      	bne.n	800570e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005702:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	4313      	orrs	r3, r2
 800570c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005714:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	4313      	orrs	r3, r2
 800571e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a1b      	ldr	r2, [pc, #108]	@ (800579c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d018      	beq.n	8005764 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800573a:	d013      	beq.n	8005764 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a18      	ldr	r2, [pc, #96]	@ (80057a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d00e      	beq.n	8005764 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a17      	ldr	r2, [pc, #92]	@ (80057a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d009      	beq.n	8005764 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a12      	ldr	r2, [pc, #72]	@ (80057a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d004      	beq.n	8005764 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a13      	ldr	r2, [pc, #76]	@ (80057ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d10c      	bne.n	800577e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800576a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	4313      	orrs	r3, r2
 8005774:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68ba      	ldr	r2, [r7, #8]
 800577c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	3714      	adds	r7, #20
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr
 800579c:	40012c00 	.word	0x40012c00
 80057a0:	40013400 	.word	0x40013400
 80057a4:	40000400 	.word	0x40000400
 80057a8:	40000800 	.word	0x40000800
 80057ac:	40014000 	.word	0x40014000

080057b0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80057b8:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80057bc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	43db      	mvns	r3, r3
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	4013      	ands	r3, r2
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3714      	adds	r7, #20
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80057e6:	b480      	push	{r7}
 80057e8:	b085      	sub	sp, #20
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	60f8      	str	r0, [r7, #12]
 80057ee:	1d3b      	adds	r3, r7, #4
 80057f0:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
	...

08005824 <malloc>:
 8005824:	4b02      	ldr	r3, [pc, #8]	@ (8005830 <malloc+0xc>)
 8005826:	4601      	mov	r1, r0
 8005828:	6818      	ldr	r0, [r3, #0]
 800582a:	f000 b825 	b.w	8005878 <_malloc_r>
 800582e:	bf00      	nop
 8005830:	2000011c 	.word	0x2000011c

08005834 <sbrk_aligned>:
 8005834:	b570      	push	{r4, r5, r6, lr}
 8005836:	4e0f      	ldr	r6, [pc, #60]	@ (8005874 <sbrk_aligned+0x40>)
 8005838:	460c      	mov	r4, r1
 800583a:	6831      	ldr	r1, [r6, #0]
 800583c:	4605      	mov	r5, r0
 800583e:	b911      	cbnz	r1, 8005846 <sbrk_aligned+0x12>
 8005840:	f000 f8ce 	bl	80059e0 <_sbrk_r>
 8005844:	6030      	str	r0, [r6, #0]
 8005846:	4621      	mov	r1, r4
 8005848:	4628      	mov	r0, r5
 800584a:	f000 f8c9 	bl	80059e0 <_sbrk_r>
 800584e:	1c43      	adds	r3, r0, #1
 8005850:	d103      	bne.n	800585a <sbrk_aligned+0x26>
 8005852:	f04f 34ff 	mov.w	r4, #4294967295
 8005856:	4620      	mov	r0, r4
 8005858:	bd70      	pop	{r4, r5, r6, pc}
 800585a:	1cc4      	adds	r4, r0, #3
 800585c:	f024 0403 	bic.w	r4, r4, #3
 8005860:	42a0      	cmp	r0, r4
 8005862:	d0f8      	beq.n	8005856 <sbrk_aligned+0x22>
 8005864:	1a21      	subs	r1, r4, r0
 8005866:	4628      	mov	r0, r5
 8005868:	f000 f8ba 	bl	80059e0 <_sbrk_r>
 800586c:	3001      	adds	r0, #1
 800586e:	d1f2      	bne.n	8005856 <sbrk_aligned+0x22>
 8005870:	e7ef      	b.n	8005852 <sbrk_aligned+0x1e>
 8005872:	bf00      	nop
 8005874:	200005b4 	.word	0x200005b4

08005878 <_malloc_r>:
 8005878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800587c:	1ccd      	adds	r5, r1, #3
 800587e:	f025 0503 	bic.w	r5, r5, #3
 8005882:	3508      	adds	r5, #8
 8005884:	2d0c      	cmp	r5, #12
 8005886:	bf38      	it	cc
 8005888:	250c      	movcc	r5, #12
 800588a:	2d00      	cmp	r5, #0
 800588c:	4606      	mov	r6, r0
 800588e:	db01      	blt.n	8005894 <_malloc_r+0x1c>
 8005890:	42a9      	cmp	r1, r5
 8005892:	d904      	bls.n	800589e <_malloc_r+0x26>
 8005894:	230c      	movs	r3, #12
 8005896:	6033      	str	r3, [r6, #0]
 8005898:	2000      	movs	r0, #0
 800589a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800589e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005974 <_malloc_r+0xfc>
 80058a2:	f000 f869 	bl	8005978 <__malloc_lock>
 80058a6:	f8d8 3000 	ldr.w	r3, [r8]
 80058aa:	461c      	mov	r4, r3
 80058ac:	bb44      	cbnz	r4, 8005900 <_malloc_r+0x88>
 80058ae:	4629      	mov	r1, r5
 80058b0:	4630      	mov	r0, r6
 80058b2:	f7ff ffbf 	bl	8005834 <sbrk_aligned>
 80058b6:	1c43      	adds	r3, r0, #1
 80058b8:	4604      	mov	r4, r0
 80058ba:	d158      	bne.n	800596e <_malloc_r+0xf6>
 80058bc:	f8d8 4000 	ldr.w	r4, [r8]
 80058c0:	4627      	mov	r7, r4
 80058c2:	2f00      	cmp	r7, #0
 80058c4:	d143      	bne.n	800594e <_malloc_r+0xd6>
 80058c6:	2c00      	cmp	r4, #0
 80058c8:	d04b      	beq.n	8005962 <_malloc_r+0xea>
 80058ca:	6823      	ldr	r3, [r4, #0]
 80058cc:	4639      	mov	r1, r7
 80058ce:	4630      	mov	r0, r6
 80058d0:	eb04 0903 	add.w	r9, r4, r3
 80058d4:	f000 f884 	bl	80059e0 <_sbrk_r>
 80058d8:	4581      	cmp	r9, r0
 80058da:	d142      	bne.n	8005962 <_malloc_r+0xea>
 80058dc:	6821      	ldr	r1, [r4, #0]
 80058de:	1a6d      	subs	r5, r5, r1
 80058e0:	4629      	mov	r1, r5
 80058e2:	4630      	mov	r0, r6
 80058e4:	f7ff ffa6 	bl	8005834 <sbrk_aligned>
 80058e8:	3001      	adds	r0, #1
 80058ea:	d03a      	beq.n	8005962 <_malloc_r+0xea>
 80058ec:	6823      	ldr	r3, [r4, #0]
 80058ee:	442b      	add	r3, r5
 80058f0:	6023      	str	r3, [r4, #0]
 80058f2:	f8d8 3000 	ldr.w	r3, [r8]
 80058f6:	685a      	ldr	r2, [r3, #4]
 80058f8:	bb62      	cbnz	r2, 8005954 <_malloc_r+0xdc>
 80058fa:	f8c8 7000 	str.w	r7, [r8]
 80058fe:	e00f      	b.n	8005920 <_malloc_r+0xa8>
 8005900:	6822      	ldr	r2, [r4, #0]
 8005902:	1b52      	subs	r2, r2, r5
 8005904:	d420      	bmi.n	8005948 <_malloc_r+0xd0>
 8005906:	2a0b      	cmp	r2, #11
 8005908:	d917      	bls.n	800593a <_malloc_r+0xc2>
 800590a:	1961      	adds	r1, r4, r5
 800590c:	42a3      	cmp	r3, r4
 800590e:	6025      	str	r5, [r4, #0]
 8005910:	bf18      	it	ne
 8005912:	6059      	strne	r1, [r3, #4]
 8005914:	6863      	ldr	r3, [r4, #4]
 8005916:	bf08      	it	eq
 8005918:	f8c8 1000 	streq.w	r1, [r8]
 800591c:	5162      	str	r2, [r4, r5]
 800591e:	604b      	str	r3, [r1, #4]
 8005920:	4630      	mov	r0, r6
 8005922:	f000 f82f 	bl	8005984 <__malloc_unlock>
 8005926:	f104 000b 	add.w	r0, r4, #11
 800592a:	1d23      	adds	r3, r4, #4
 800592c:	f020 0007 	bic.w	r0, r0, #7
 8005930:	1ac2      	subs	r2, r0, r3
 8005932:	bf1c      	itt	ne
 8005934:	1a1b      	subne	r3, r3, r0
 8005936:	50a3      	strne	r3, [r4, r2]
 8005938:	e7af      	b.n	800589a <_malloc_r+0x22>
 800593a:	6862      	ldr	r2, [r4, #4]
 800593c:	42a3      	cmp	r3, r4
 800593e:	bf0c      	ite	eq
 8005940:	f8c8 2000 	streq.w	r2, [r8]
 8005944:	605a      	strne	r2, [r3, #4]
 8005946:	e7eb      	b.n	8005920 <_malloc_r+0xa8>
 8005948:	4623      	mov	r3, r4
 800594a:	6864      	ldr	r4, [r4, #4]
 800594c:	e7ae      	b.n	80058ac <_malloc_r+0x34>
 800594e:	463c      	mov	r4, r7
 8005950:	687f      	ldr	r7, [r7, #4]
 8005952:	e7b6      	b.n	80058c2 <_malloc_r+0x4a>
 8005954:	461a      	mov	r2, r3
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	42a3      	cmp	r3, r4
 800595a:	d1fb      	bne.n	8005954 <_malloc_r+0xdc>
 800595c:	2300      	movs	r3, #0
 800595e:	6053      	str	r3, [r2, #4]
 8005960:	e7de      	b.n	8005920 <_malloc_r+0xa8>
 8005962:	230c      	movs	r3, #12
 8005964:	6033      	str	r3, [r6, #0]
 8005966:	4630      	mov	r0, r6
 8005968:	f000 f80c 	bl	8005984 <__malloc_unlock>
 800596c:	e794      	b.n	8005898 <_malloc_r+0x20>
 800596e:	6005      	str	r5, [r0, #0]
 8005970:	e7d6      	b.n	8005920 <_malloc_r+0xa8>
 8005972:	bf00      	nop
 8005974:	200005b8 	.word	0x200005b8

08005978 <__malloc_lock>:
 8005978:	4801      	ldr	r0, [pc, #4]	@ (8005980 <__malloc_lock+0x8>)
 800597a:	f000 b86b 	b.w	8005a54 <__retarget_lock_acquire_recursive>
 800597e:	bf00      	nop
 8005980:	200006f8 	.word	0x200006f8

08005984 <__malloc_unlock>:
 8005984:	4801      	ldr	r0, [pc, #4]	@ (800598c <__malloc_unlock+0x8>)
 8005986:	f000 b866 	b.w	8005a56 <__retarget_lock_release_recursive>
 800598a:	bf00      	nop
 800598c:	200006f8 	.word	0x200006f8

08005990 <siprintf>:
 8005990:	b40e      	push	{r1, r2, r3}
 8005992:	b500      	push	{lr}
 8005994:	b09c      	sub	sp, #112	@ 0x70
 8005996:	ab1d      	add	r3, sp, #116	@ 0x74
 8005998:	9002      	str	r0, [sp, #8]
 800599a:	9006      	str	r0, [sp, #24]
 800599c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80059a0:	4809      	ldr	r0, [pc, #36]	@ (80059c8 <siprintf+0x38>)
 80059a2:	9107      	str	r1, [sp, #28]
 80059a4:	9104      	str	r1, [sp, #16]
 80059a6:	4909      	ldr	r1, [pc, #36]	@ (80059cc <siprintf+0x3c>)
 80059a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80059ac:	9105      	str	r1, [sp, #20]
 80059ae:	6800      	ldr	r0, [r0, #0]
 80059b0:	9301      	str	r3, [sp, #4]
 80059b2:	a902      	add	r1, sp, #8
 80059b4:	f000 f8f6 	bl	8005ba4 <_svfiprintf_r>
 80059b8:	9b02      	ldr	r3, [sp, #8]
 80059ba:	2200      	movs	r2, #0
 80059bc:	701a      	strb	r2, [r3, #0]
 80059be:	b01c      	add	sp, #112	@ 0x70
 80059c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80059c4:	b003      	add	sp, #12
 80059c6:	4770      	bx	lr
 80059c8:	2000011c 	.word	0x2000011c
 80059cc:	ffff0208 	.word	0xffff0208

080059d0 <memset>:
 80059d0:	4402      	add	r2, r0
 80059d2:	4603      	mov	r3, r0
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d100      	bne.n	80059da <memset+0xa>
 80059d8:	4770      	bx	lr
 80059da:	f803 1b01 	strb.w	r1, [r3], #1
 80059de:	e7f9      	b.n	80059d4 <memset+0x4>

080059e0 <_sbrk_r>:
 80059e0:	b538      	push	{r3, r4, r5, lr}
 80059e2:	4d06      	ldr	r5, [pc, #24]	@ (80059fc <_sbrk_r+0x1c>)
 80059e4:	2300      	movs	r3, #0
 80059e6:	4604      	mov	r4, r0
 80059e8:	4608      	mov	r0, r1
 80059ea:	602b      	str	r3, [r5, #0]
 80059ec:	f7fb fa4e 	bl	8000e8c <_sbrk>
 80059f0:	1c43      	adds	r3, r0, #1
 80059f2:	d102      	bne.n	80059fa <_sbrk_r+0x1a>
 80059f4:	682b      	ldr	r3, [r5, #0]
 80059f6:	b103      	cbz	r3, 80059fa <_sbrk_r+0x1a>
 80059f8:	6023      	str	r3, [r4, #0]
 80059fa:	bd38      	pop	{r3, r4, r5, pc}
 80059fc:	200006f4 	.word	0x200006f4

08005a00 <__errno>:
 8005a00:	4b01      	ldr	r3, [pc, #4]	@ (8005a08 <__errno+0x8>)
 8005a02:	6818      	ldr	r0, [r3, #0]
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	2000011c 	.word	0x2000011c

08005a0c <__libc_init_array>:
 8005a0c:	b570      	push	{r4, r5, r6, lr}
 8005a0e:	4d0d      	ldr	r5, [pc, #52]	@ (8005a44 <__libc_init_array+0x38>)
 8005a10:	4c0d      	ldr	r4, [pc, #52]	@ (8005a48 <__libc_init_array+0x3c>)
 8005a12:	1b64      	subs	r4, r4, r5
 8005a14:	10a4      	asrs	r4, r4, #2
 8005a16:	2600      	movs	r6, #0
 8005a18:	42a6      	cmp	r6, r4
 8005a1a:	d109      	bne.n	8005a30 <__libc_init_array+0x24>
 8005a1c:	4d0b      	ldr	r5, [pc, #44]	@ (8005a4c <__libc_init_array+0x40>)
 8005a1e:	4c0c      	ldr	r4, [pc, #48]	@ (8005a50 <__libc_init_array+0x44>)
 8005a20:	f000 fba8 	bl	8006174 <_init>
 8005a24:	1b64      	subs	r4, r4, r5
 8005a26:	10a4      	asrs	r4, r4, #2
 8005a28:	2600      	movs	r6, #0
 8005a2a:	42a6      	cmp	r6, r4
 8005a2c:	d105      	bne.n	8005a3a <__libc_init_array+0x2e>
 8005a2e:	bd70      	pop	{r4, r5, r6, pc}
 8005a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a34:	4798      	blx	r3
 8005a36:	3601      	adds	r6, #1
 8005a38:	e7ee      	b.n	8005a18 <__libc_init_array+0xc>
 8005a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a3e:	4798      	blx	r3
 8005a40:	3601      	adds	r6, #1
 8005a42:	e7f2      	b.n	8005a2a <__libc_init_array+0x1e>
 8005a44:	08006390 	.word	0x08006390
 8005a48:	08006390 	.word	0x08006390
 8005a4c:	08006390 	.word	0x08006390
 8005a50:	08006394 	.word	0x08006394

08005a54 <__retarget_lock_acquire_recursive>:
 8005a54:	4770      	bx	lr

08005a56 <__retarget_lock_release_recursive>:
 8005a56:	4770      	bx	lr

08005a58 <_free_r>:
 8005a58:	b538      	push	{r3, r4, r5, lr}
 8005a5a:	4605      	mov	r5, r0
 8005a5c:	2900      	cmp	r1, #0
 8005a5e:	d041      	beq.n	8005ae4 <_free_r+0x8c>
 8005a60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a64:	1f0c      	subs	r4, r1, #4
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	bfb8      	it	lt
 8005a6a:	18e4      	addlt	r4, r4, r3
 8005a6c:	f7ff ff84 	bl	8005978 <__malloc_lock>
 8005a70:	4a1d      	ldr	r2, [pc, #116]	@ (8005ae8 <_free_r+0x90>)
 8005a72:	6813      	ldr	r3, [r2, #0]
 8005a74:	b933      	cbnz	r3, 8005a84 <_free_r+0x2c>
 8005a76:	6063      	str	r3, [r4, #4]
 8005a78:	6014      	str	r4, [r2, #0]
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a80:	f7ff bf80 	b.w	8005984 <__malloc_unlock>
 8005a84:	42a3      	cmp	r3, r4
 8005a86:	d908      	bls.n	8005a9a <_free_r+0x42>
 8005a88:	6820      	ldr	r0, [r4, #0]
 8005a8a:	1821      	adds	r1, r4, r0
 8005a8c:	428b      	cmp	r3, r1
 8005a8e:	bf01      	itttt	eq
 8005a90:	6819      	ldreq	r1, [r3, #0]
 8005a92:	685b      	ldreq	r3, [r3, #4]
 8005a94:	1809      	addeq	r1, r1, r0
 8005a96:	6021      	streq	r1, [r4, #0]
 8005a98:	e7ed      	b.n	8005a76 <_free_r+0x1e>
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	b10b      	cbz	r3, 8005aa4 <_free_r+0x4c>
 8005aa0:	42a3      	cmp	r3, r4
 8005aa2:	d9fa      	bls.n	8005a9a <_free_r+0x42>
 8005aa4:	6811      	ldr	r1, [r2, #0]
 8005aa6:	1850      	adds	r0, r2, r1
 8005aa8:	42a0      	cmp	r0, r4
 8005aaa:	d10b      	bne.n	8005ac4 <_free_r+0x6c>
 8005aac:	6820      	ldr	r0, [r4, #0]
 8005aae:	4401      	add	r1, r0
 8005ab0:	1850      	adds	r0, r2, r1
 8005ab2:	4283      	cmp	r3, r0
 8005ab4:	6011      	str	r1, [r2, #0]
 8005ab6:	d1e0      	bne.n	8005a7a <_free_r+0x22>
 8005ab8:	6818      	ldr	r0, [r3, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	6053      	str	r3, [r2, #4]
 8005abe:	4408      	add	r0, r1
 8005ac0:	6010      	str	r0, [r2, #0]
 8005ac2:	e7da      	b.n	8005a7a <_free_r+0x22>
 8005ac4:	d902      	bls.n	8005acc <_free_r+0x74>
 8005ac6:	230c      	movs	r3, #12
 8005ac8:	602b      	str	r3, [r5, #0]
 8005aca:	e7d6      	b.n	8005a7a <_free_r+0x22>
 8005acc:	6820      	ldr	r0, [r4, #0]
 8005ace:	1821      	adds	r1, r4, r0
 8005ad0:	428b      	cmp	r3, r1
 8005ad2:	bf04      	itt	eq
 8005ad4:	6819      	ldreq	r1, [r3, #0]
 8005ad6:	685b      	ldreq	r3, [r3, #4]
 8005ad8:	6063      	str	r3, [r4, #4]
 8005ada:	bf04      	itt	eq
 8005adc:	1809      	addeq	r1, r1, r0
 8005ade:	6021      	streq	r1, [r4, #0]
 8005ae0:	6054      	str	r4, [r2, #4]
 8005ae2:	e7ca      	b.n	8005a7a <_free_r+0x22>
 8005ae4:	bd38      	pop	{r3, r4, r5, pc}
 8005ae6:	bf00      	nop
 8005ae8:	200005b8 	.word	0x200005b8

08005aec <__ssputs_r>:
 8005aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005af0:	688e      	ldr	r6, [r1, #8]
 8005af2:	461f      	mov	r7, r3
 8005af4:	42be      	cmp	r6, r7
 8005af6:	680b      	ldr	r3, [r1, #0]
 8005af8:	4682      	mov	sl, r0
 8005afa:	460c      	mov	r4, r1
 8005afc:	4690      	mov	r8, r2
 8005afe:	d82d      	bhi.n	8005b5c <__ssputs_r+0x70>
 8005b00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005b04:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005b08:	d026      	beq.n	8005b58 <__ssputs_r+0x6c>
 8005b0a:	6965      	ldr	r5, [r4, #20]
 8005b0c:	6909      	ldr	r1, [r1, #16]
 8005b0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b12:	eba3 0901 	sub.w	r9, r3, r1
 8005b16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b1a:	1c7b      	adds	r3, r7, #1
 8005b1c:	444b      	add	r3, r9
 8005b1e:	106d      	asrs	r5, r5, #1
 8005b20:	429d      	cmp	r5, r3
 8005b22:	bf38      	it	cc
 8005b24:	461d      	movcc	r5, r3
 8005b26:	0553      	lsls	r3, r2, #21
 8005b28:	d527      	bpl.n	8005b7a <__ssputs_r+0x8e>
 8005b2a:	4629      	mov	r1, r5
 8005b2c:	f7ff fea4 	bl	8005878 <_malloc_r>
 8005b30:	4606      	mov	r6, r0
 8005b32:	b360      	cbz	r0, 8005b8e <__ssputs_r+0xa2>
 8005b34:	6921      	ldr	r1, [r4, #16]
 8005b36:	464a      	mov	r2, r9
 8005b38:	f000 fad8 	bl	80060ec <memcpy>
 8005b3c:	89a3      	ldrh	r3, [r4, #12]
 8005b3e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005b42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b46:	81a3      	strh	r3, [r4, #12]
 8005b48:	6126      	str	r6, [r4, #16]
 8005b4a:	6165      	str	r5, [r4, #20]
 8005b4c:	444e      	add	r6, r9
 8005b4e:	eba5 0509 	sub.w	r5, r5, r9
 8005b52:	6026      	str	r6, [r4, #0]
 8005b54:	60a5      	str	r5, [r4, #8]
 8005b56:	463e      	mov	r6, r7
 8005b58:	42be      	cmp	r6, r7
 8005b5a:	d900      	bls.n	8005b5e <__ssputs_r+0x72>
 8005b5c:	463e      	mov	r6, r7
 8005b5e:	6820      	ldr	r0, [r4, #0]
 8005b60:	4632      	mov	r2, r6
 8005b62:	4641      	mov	r1, r8
 8005b64:	f000 faa8 	bl	80060b8 <memmove>
 8005b68:	68a3      	ldr	r3, [r4, #8]
 8005b6a:	1b9b      	subs	r3, r3, r6
 8005b6c:	60a3      	str	r3, [r4, #8]
 8005b6e:	6823      	ldr	r3, [r4, #0]
 8005b70:	4433      	add	r3, r6
 8005b72:	6023      	str	r3, [r4, #0]
 8005b74:	2000      	movs	r0, #0
 8005b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b7a:	462a      	mov	r2, r5
 8005b7c:	f000 fac4 	bl	8006108 <_realloc_r>
 8005b80:	4606      	mov	r6, r0
 8005b82:	2800      	cmp	r0, #0
 8005b84:	d1e0      	bne.n	8005b48 <__ssputs_r+0x5c>
 8005b86:	6921      	ldr	r1, [r4, #16]
 8005b88:	4650      	mov	r0, sl
 8005b8a:	f7ff ff65 	bl	8005a58 <_free_r>
 8005b8e:	230c      	movs	r3, #12
 8005b90:	f8ca 3000 	str.w	r3, [sl]
 8005b94:	89a3      	ldrh	r3, [r4, #12]
 8005b96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b9a:	81a3      	strh	r3, [r4, #12]
 8005b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005ba0:	e7e9      	b.n	8005b76 <__ssputs_r+0x8a>
	...

08005ba4 <_svfiprintf_r>:
 8005ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ba8:	4698      	mov	r8, r3
 8005baa:	898b      	ldrh	r3, [r1, #12]
 8005bac:	061b      	lsls	r3, r3, #24
 8005bae:	b09d      	sub	sp, #116	@ 0x74
 8005bb0:	4607      	mov	r7, r0
 8005bb2:	460d      	mov	r5, r1
 8005bb4:	4614      	mov	r4, r2
 8005bb6:	d510      	bpl.n	8005bda <_svfiprintf_r+0x36>
 8005bb8:	690b      	ldr	r3, [r1, #16]
 8005bba:	b973      	cbnz	r3, 8005bda <_svfiprintf_r+0x36>
 8005bbc:	2140      	movs	r1, #64	@ 0x40
 8005bbe:	f7ff fe5b 	bl	8005878 <_malloc_r>
 8005bc2:	6028      	str	r0, [r5, #0]
 8005bc4:	6128      	str	r0, [r5, #16]
 8005bc6:	b930      	cbnz	r0, 8005bd6 <_svfiprintf_r+0x32>
 8005bc8:	230c      	movs	r3, #12
 8005bca:	603b      	str	r3, [r7, #0]
 8005bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd0:	b01d      	add	sp, #116	@ 0x74
 8005bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bd6:	2340      	movs	r3, #64	@ 0x40
 8005bd8:	616b      	str	r3, [r5, #20]
 8005bda:	2300      	movs	r3, #0
 8005bdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bde:	2320      	movs	r3, #32
 8005be0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005be4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005be8:	2330      	movs	r3, #48	@ 0x30
 8005bea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005d88 <_svfiprintf_r+0x1e4>
 8005bee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005bf2:	f04f 0901 	mov.w	r9, #1
 8005bf6:	4623      	mov	r3, r4
 8005bf8:	469a      	mov	sl, r3
 8005bfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bfe:	b10a      	cbz	r2, 8005c04 <_svfiprintf_r+0x60>
 8005c00:	2a25      	cmp	r2, #37	@ 0x25
 8005c02:	d1f9      	bne.n	8005bf8 <_svfiprintf_r+0x54>
 8005c04:	ebba 0b04 	subs.w	fp, sl, r4
 8005c08:	d00b      	beq.n	8005c22 <_svfiprintf_r+0x7e>
 8005c0a:	465b      	mov	r3, fp
 8005c0c:	4622      	mov	r2, r4
 8005c0e:	4629      	mov	r1, r5
 8005c10:	4638      	mov	r0, r7
 8005c12:	f7ff ff6b 	bl	8005aec <__ssputs_r>
 8005c16:	3001      	adds	r0, #1
 8005c18:	f000 80a7 	beq.w	8005d6a <_svfiprintf_r+0x1c6>
 8005c1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c1e:	445a      	add	r2, fp
 8005c20:	9209      	str	r2, [sp, #36]	@ 0x24
 8005c22:	f89a 3000 	ldrb.w	r3, [sl]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	f000 809f 	beq.w	8005d6a <_svfiprintf_r+0x1c6>
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c36:	f10a 0a01 	add.w	sl, sl, #1
 8005c3a:	9304      	str	r3, [sp, #16]
 8005c3c:	9307      	str	r3, [sp, #28]
 8005c3e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005c42:	931a      	str	r3, [sp, #104]	@ 0x68
 8005c44:	4654      	mov	r4, sl
 8005c46:	2205      	movs	r2, #5
 8005c48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c4c:	484e      	ldr	r0, [pc, #312]	@ (8005d88 <_svfiprintf_r+0x1e4>)
 8005c4e:	f7fa facf 	bl	80001f0 <memchr>
 8005c52:	9a04      	ldr	r2, [sp, #16]
 8005c54:	b9d8      	cbnz	r0, 8005c8e <_svfiprintf_r+0xea>
 8005c56:	06d0      	lsls	r0, r2, #27
 8005c58:	bf44      	itt	mi
 8005c5a:	2320      	movmi	r3, #32
 8005c5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c60:	0711      	lsls	r1, r2, #28
 8005c62:	bf44      	itt	mi
 8005c64:	232b      	movmi	r3, #43	@ 0x2b
 8005c66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c6a:	f89a 3000 	ldrb.w	r3, [sl]
 8005c6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c70:	d015      	beq.n	8005c9e <_svfiprintf_r+0xfa>
 8005c72:	9a07      	ldr	r2, [sp, #28]
 8005c74:	4654      	mov	r4, sl
 8005c76:	2000      	movs	r0, #0
 8005c78:	f04f 0c0a 	mov.w	ip, #10
 8005c7c:	4621      	mov	r1, r4
 8005c7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c82:	3b30      	subs	r3, #48	@ 0x30
 8005c84:	2b09      	cmp	r3, #9
 8005c86:	d94b      	bls.n	8005d20 <_svfiprintf_r+0x17c>
 8005c88:	b1b0      	cbz	r0, 8005cb8 <_svfiprintf_r+0x114>
 8005c8a:	9207      	str	r2, [sp, #28]
 8005c8c:	e014      	b.n	8005cb8 <_svfiprintf_r+0x114>
 8005c8e:	eba0 0308 	sub.w	r3, r0, r8
 8005c92:	fa09 f303 	lsl.w	r3, r9, r3
 8005c96:	4313      	orrs	r3, r2
 8005c98:	9304      	str	r3, [sp, #16]
 8005c9a:	46a2      	mov	sl, r4
 8005c9c:	e7d2      	b.n	8005c44 <_svfiprintf_r+0xa0>
 8005c9e:	9b03      	ldr	r3, [sp, #12]
 8005ca0:	1d19      	adds	r1, r3, #4
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	9103      	str	r1, [sp, #12]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	bfbb      	ittet	lt
 8005caa:	425b      	neglt	r3, r3
 8005cac:	f042 0202 	orrlt.w	r2, r2, #2
 8005cb0:	9307      	strge	r3, [sp, #28]
 8005cb2:	9307      	strlt	r3, [sp, #28]
 8005cb4:	bfb8      	it	lt
 8005cb6:	9204      	strlt	r2, [sp, #16]
 8005cb8:	7823      	ldrb	r3, [r4, #0]
 8005cba:	2b2e      	cmp	r3, #46	@ 0x2e
 8005cbc:	d10a      	bne.n	8005cd4 <_svfiprintf_r+0x130>
 8005cbe:	7863      	ldrb	r3, [r4, #1]
 8005cc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8005cc2:	d132      	bne.n	8005d2a <_svfiprintf_r+0x186>
 8005cc4:	9b03      	ldr	r3, [sp, #12]
 8005cc6:	1d1a      	adds	r2, r3, #4
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	9203      	str	r2, [sp, #12]
 8005ccc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005cd0:	3402      	adds	r4, #2
 8005cd2:	9305      	str	r3, [sp, #20]
 8005cd4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005d98 <_svfiprintf_r+0x1f4>
 8005cd8:	7821      	ldrb	r1, [r4, #0]
 8005cda:	2203      	movs	r2, #3
 8005cdc:	4650      	mov	r0, sl
 8005cde:	f7fa fa87 	bl	80001f0 <memchr>
 8005ce2:	b138      	cbz	r0, 8005cf4 <_svfiprintf_r+0x150>
 8005ce4:	9b04      	ldr	r3, [sp, #16]
 8005ce6:	eba0 000a 	sub.w	r0, r0, sl
 8005cea:	2240      	movs	r2, #64	@ 0x40
 8005cec:	4082      	lsls	r2, r0
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	3401      	adds	r4, #1
 8005cf2:	9304      	str	r3, [sp, #16]
 8005cf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cf8:	4824      	ldr	r0, [pc, #144]	@ (8005d8c <_svfiprintf_r+0x1e8>)
 8005cfa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005cfe:	2206      	movs	r2, #6
 8005d00:	f7fa fa76 	bl	80001f0 <memchr>
 8005d04:	2800      	cmp	r0, #0
 8005d06:	d036      	beq.n	8005d76 <_svfiprintf_r+0x1d2>
 8005d08:	4b21      	ldr	r3, [pc, #132]	@ (8005d90 <_svfiprintf_r+0x1ec>)
 8005d0a:	bb1b      	cbnz	r3, 8005d54 <_svfiprintf_r+0x1b0>
 8005d0c:	9b03      	ldr	r3, [sp, #12]
 8005d0e:	3307      	adds	r3, #7
 8005d10:	f023 0307 	bic.w	r3, r3, #7
 8005d14:	3308      	adds	r3, #8
 8005d16:	9303      	str	r3, [sp, #12]
 8005d18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d1a:	4433      	add	r3, r6
 8005d1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d1e:	e76a      	b.n	8005bf6 <_svfiprintf_r+0x52>
 8005d20:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d24:	460c      	mov	r4, r1
 8005d26:	2001      	movs	r0, #1
 8005d28:	e7a8      	b.n	8005c7c <_svfiprintf_r+0xd8>
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	3401      	adds	r4, #1
 8005d2e:	9305      	str	r3, [sp, #20]
 8005d30:	4619      	mov	r1, r3
 8005d32:	f04f 0c0a 	mov.w	ip, #10
 8005d36:	4620      	mov	r0, r4
 8005d38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d3c:	3a30      	subs	r2, #48	@ 0x30
 8005d3e:	2a09      	cmp	r2, #9
 8005d40:	d903      	bls.n	8005d4a <_svfiprintf_r+0x1a6>
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d0c6      	beq.n	8005cd4 <_svfiprintf_r+0x130>
 8005d46:	9105      	str	r1, [sp, #20]
 8005d48:	e7c4      	b.n	8005cd4 <_svfiprintf_r+0x130>
 8005d4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d4e:	4604      	mov	r4, r0
 8005d50:	2301      	movs	r3, #1
 8005d52:	e7f0      	b.n	8005d36 <_svfiprintf_r+0x192>
 8005d54:	ab03      	add	r3, sp, #12
 8005d56:	9300      	str	r3, [sp, #0]
 8005d58:	462a      	mov	r2, r5
 8005d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8005d94 <_svfiprintf_r+0x1f0>)
 8005d5c:	a904      	add	r1, sp, #16
 8005d5e:	4638      	mov	r0, r7
 8005d60:	f3af 8000 	nop.w
 8005d64:	1c42      	adds	r2, r0, #1
 8005d66:	4606      	mov	r6, r0
 8005d68:	d1d6      	bne.n	8005d18 <_svfiprintf_r+0x174>
 8005d6a:	89ab      	ldrh	r3, [r5, #12]
 8005d6c:	065b      	lsls	r3, r3, #25
 8005d6e:	f53f af2d 	bmi.w	8005bcc <_svfiprintf_r+0x28>
 8005d72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d74:	e72c      	b.n	8005bd0 <_svfiprintf_r+0x2c>
 8005d76:	ab03      	add	r3, sp, #12
 8005d78:	9300      	str	r3, [sp, #0]
 8005d7a:	462a      	mov	r2, r5
 8005d7c:	4b05      	ldr	r3, [pc, #20]	@ (8005d94 <_svfiprintf_r+0x1f0>)
 8005d7e:	a904      	add	r1, sp, #16
 8005d80:	4638      	mov	r0, r7
 8005d82:	f000 f879 	bl	8005e78 <_printf_i>
 8005d86:	e7ed      	b.n	8005d64 <_svfiprintf_r+0x1c0>
 8005d88:	08006354 	.word	0x08006354
 8005d8c:	0800635e 	.word	0x0800635e
 8005d90:	00000000 	.word	0x00000000
 8005d94:	08005aed 	.word	0x08005aed
 8005d98:	0800635a 	.word	0x0800635a

08005d9c <_printf_common>:
 8005d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005da0:	4616      	mov	r6, r2
 8005da2:	4698      	mov	r8, r3
 8005da4:	688a      	ldr	r2, [r1, #8]
 8005da6:	690b      	ldr	r3, [r1, #16]
 8005da8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005dac:	4293      	cmp	r3, r2
 8005dae:	bfb8      	it	lt
 8005db0:	4613      	movlt	r3, r2
 8005db2:	6033      	str	r3, [r6, #0]
 8005db4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005db8:	4607      	mov	r7, r0
 8005dba:	460c      	mov	r4, r1
 8005dbc:	b10a      	cbz	r2, 8005dc2 <_printf_common+0x26>
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	6033      	str	r3, [r6, #0]
 8005dc2:	6823      	ldr	r3, [r4, #0]
 8005dc4:	0699      	lsls	r1, r3, #26
 8005dc6:	bf42      	ittt	mi
 8005dc8:	6833      	ldrmi	r3, [r6, #0]
 8005dca:	3302      	addmi	r3, #2
 8005dcc:	6033      	strmi	r3, [r6, #0]
 8005dce:	6825      	ldr	r5, [r4, #0]
 8005dd0:	f015 0506 	ands.w	r5, r5, #6
 8005dd4:	d106      	bne.n	8005de4 <_printf_common+0x48>
 8005dd6:	f104 0a19 	add.w	sl, r4, #25
 8005dda:	68e3      	ldr	r3, [r4, #12]
 8005ddc:	6832      	ldr	r2, [r6, #0]
 8005dde:	1a9b      	subs	r3, r3, r2
 8005de0:	42ab      	cmp	r3, r5
 8005de2:	dc26      	bgt.n	8005e32 <_printf_common+0x96>
 8005de4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005de8:	6822      	ldr	r2, [r4, #0]
 8005dea:	3b00      	subs	r3, #0
 8005dec:	bf18      	it	ne
 8005dee:	2301      	movne	r3, #1
 8005df0:	0692      	lsls	r2, r2, #26
 8005df2:	d42b      	bmi.n	8005e4c <_printf_common+0xb0>
 8005df4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005df8:	4641      	mov	r1, r8
 8005dfa:	4638      	mov	r0, r7
 8005dfc:	47c8      	blx	r9
 8005dfe:	3001      	adds	r0, #1
 8005e00:	d01e      	beq.n	8005e40 <_printf_common+0xa4>
 8005e02:	6823      	ldr	r3, [r4, #0]
 8005e04:	6922      	ldr	r2, [r4, #16]
 8005e06:	f003 0306 	and.w	r3, r3, #6
 8005e0a:	2b04      	cmp	r3, #4
 8005e0c:	bf02      	ittt	eq
 8005e0e:	68e5      	ldreq	r5, [r4, #12]
 8005e10:	6833      	ldreq	r3, [r6, #0]
 8005e12:	1aed      	subeq	r5, r5, r3
 8005e14:	68a3      	ldr	r3, [r4, #8]
 8005e16:	bf0c      	ite	eq
 8005e18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e1c:	2500      	movne	r5, #0
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	bfc4      	itt	gt
 8005e22:	1a9b      	subgt	r3, r3, r2
 8005e24:	18ed      	addgt	r5, r5, r3
 8005e26:	2600      	movs	r6, #0
 8005e28:	341a      	adds	r4, #26
 8005e2a:	42b5      	cmp	r5, r6
 8005e2c:	d11a      	bne.n	8005e64 <_printf_common+0xc8>
 8005e2e:	2000      	movs	r0, #0
 8005e30:	e008      	b.n	8005e44 <_printf_common+0xa8>
 8005e32:	2301      	movs	r3, #1
 8005e34:	4652      	mov	r2, sl
 8005e36:	4641      	mov	r1, r8
 8005e38:	4638      	mov	r0, r7
 8005e3a:	47c8      	blx	r9
 8005e3c:	3001      	adds	r0, #1
 8005e3e:	d103      	bne.n	8005e48 <_printf_common+0xac>
 8005e40:	f04f 30ff 	mov.w	r0, #4294967295
 8005e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e48:	3501      	adds	r5, #1
 8005e4a:	e7c6      	b.n	8005dda <_printf_common+0x3e>
 8005e4c:	18e1      	adds	r1, r4, r3
 8005e4e:	1c5a      	adds	r2, r3, #1
 8005e50:	2030      	movs	r0, #48	@ 0x30
 8005e52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005e56:	4422      	add	r2, r4
 8005e58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005e5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005e60:	3302      	adds	r3, #2
 8005e62:	e7c7      	b.n	8005df4 <_printf_common+0x58>
 8005e64:	2301      	movs	r3, #1
 8005e66:	4622      	mov	r2, r4
 8005e68:	4641      	mov	r1, r8
 8005e6a:	4638      	mov	r0, r7
 8005e6c:	47c8      	blx	r9
 8005e6e:	3001      	adds	r0, #1
 8005e70:	d0e6      	beq.n	8005e40 <_printf_common+0xa4>
 8005e72:	3601      	adds	r6, #1
 8005e74:	e7d9      	b.n	8005e2a <_printf_common+0x8e>
	...

08005e78 <_printf_i>:
 8005e78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e7c:	7e0f      	ldrb	r7, [r1, #24]
 8005e7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005e80:	2f78      	cmp	r7, #120	@ 0x78
 8005e82:	4691      	mov	r9, r2
 8005e84:	4680      	mov	r8, r0
 8005e86:	460c      	mov	r4, r1
 8005e88:	469a      	mov	sl, r3
 8005e8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005e8e:	d807      	bhi.n	8005ea0 <_printf_i+0x28>
 8005e90:	2f62      	cmp	r7, #98	@ 0x62
 8005e92:	d80a      	bhi.n	8005eaa <_printf_i+0x32>
 8005e94:	2f00      	cmp	r7, #0
 8005e96:	f000 80d2 	beq.w	800603e <_printf_i+0x1c6>
 8005e9a:	2f58      	cmp	r7, #88	@ 0x58
 8005e9c:	f000 80b9 	beq.w	8006012 <_printf_i+0x19a>
 8005ea0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ea4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005ea8:	e03a      	b.n	8005f20 <_printf_i+0xa8>
 8005eaa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005eae:	2b15      	cmp	r3, #21
 8005eb0:	d8f6      	bhi.n	8005ea0 <_printf_i+0x28>
 8005eb2:	a101      	add	r1, pc, #4	@ (adr r1, 8005eb8 <_printf_i+0x40>)
 8005eb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005eb8:	08005f11 	.word	0x08005f11
 8005ebc:	08005f25 	.word	0x08005f25
 8005ec0:	08005ea1 	.word	0x08005ea1
 8005ec4:	08005ea1 	.word	0x08005ea1
 8005ec8:	08005ea1 	.word	0x08005ea1
 8005ecc:	08005ea1 	.word	0x08005ea1
 8005ed0:	08005f25 	.word	0x08005f25
 8005ed4:	08005ea1 	.word	0x08005ea1
 8005ed8:	08005ea1 	.word	0x08005ea1
 8005edc:	08005ea1 	.word	0x08005ea1
 8005ee0:	08005ea1 	.word	0x08005ea1
 8005ee4:	08006025 	.word	0x08006025
 8005ee8:	08005f4f 	.word	0x08005f4f
 8005eec:	08005fdf 	.word	0x08005fdf
 8005ef0:	08005ea1 	.word	0x08005ea1
 8005ef4:	08005ea1 	.word	0x08005ea1
 8005ef8:	08006047 	.word	0x08006047
 8005efc:	08005ea1 	.word	0x08005ea1
 8005f00:	08005f4f 	.word	0x08005f4f
 8005f04:	08005ea1 	.word	0x08005ea1
 8005f08:	08005ea1 	.word	0x08005ea1
 8005f0c:	08005fe7 	.word	0x08005fe7
 8005f10:	6833      	ldr	r3, [r6, #0]
 8005f12:	1d1a      	adds	r2, r3, #4
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6032      	str	r2, [r6, #0]
 8005f18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005f20:	2301      	movs	r3, #1
 8005f22:	e09d      	b.n	8006060 <_printf_i+0x1e8>
 8005f24:	6833      	ldr	r3, [r6, #0]
 8005f26:	6820      	ldr	r0, [r4, #0]
 8005f28:	1d19      	adds	r1, r3, #4
 8005f2a:	6031      	str	r1, [r6, #0]
 8005f2c:	0606      	lsls	r6, r0, #24
 8005f2e:	d501      	bpl.n	8005f34 <_printf_i+0xbc>
 8005f30:	681d      	ldr	r5, [r3, #0]
 8005f32:	e003      	b.n	8005f3c <_printf_i+0xc4>
 8005f34:	0645      	lsls	r5, r0, #25
 8005f36:	d5fb      	bpl.n	8005f30 <_printf_i+0xb8>
 8005f38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005f3c:	2d00      	cmp	r5, #0
 8005f3e:	da03      	bge.n	8005f48 <_printf_i+0xd0>
 8005f40:	232d      	movs	r3, #45	@ 0x2d
 8005f42:	426d      	negs	r5, r5
 8005f44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f48:	4859      	ldr	r0, [pc, #356]	@ (80060b0 <_printf_i+0x238>)
 8005f4a:	230a      	movs	r3, #10
 8005f4c:	e011      	b.n	8005f72 <_printf_i+0xfa>
 8005f4e:	6821      	ldr	r1, [r4, #0]
 8005f50:	6833      	ldr	r3, [r6, #0]
 8005f52:	0608      	lsls	r0, r1, #24
 8005f54:	f853 5b04 	ldr.w	r5, [r3], #4
 8005f58:	d402      	bmi.n	8005f60 <_printf_i+0xe8>
 8005f5a:	0649      	lsls	r1, r1, #25
 8005f5c:	bf48      	it	mi
 8005f5e:	b2ad      	uxthmi	r5, r5
 8005f60:	2f6f      	cmp	r7, #111	@ 0x6f
 8005f62:	4853      	ldr	r0, [pc, #332]	@ (80060b0 <_printf_i+0x238>)
 8005f64:	6033      	str	r3, [r6, #0]
 8005f66:	bf14      	ite	ne
 8005f68:	230a      	movne	r3, #10
 8005f6a:	2308      	moveq	r3, #8
 8005f6c:	2100      	movs	r1, #0
 8005f6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005f72:	6866      	ldr	r6, [r4, #4]
 8005f74:	60a6      	str	r6, [r4, #8]
 8005f76:	2e00      	cmp	r6, #0
 8005f78:	bfa2      	ittt	ge
 8005f7a:	6821      	ldrge	r1, [r4, #0]
 8005f7c:	f021 0104 	bicge.w	r1, r1, #4
 8005f80:	6021      	strge	r1, [r4, #0]
 8005f82:	b90d      	cbnz	r5, 8005f88 <_printf_i+0x110>
 8005f84:	2e00      	cmp	r6, #0
 8005f86:	d04b      	beq.n	8006020 <_printf_i+0x1a8>
 8005f88:	4616      	mov	r6, r2
 8005f8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f8e:	fb03 5711 	mls	r7, r3, r1, r5
 8005f92:	5dc7      	ldrb	r7, [r0, r7]
 8005f94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f98:	462f      	mov	r7, r5
 8005f9a:	42bb      	cmp	r3, r7
 8005f9c:	460d      	mov	r5, r1
 8005f9e:	d9f4      	bls.n	8005f8a <_printf_i+0x112>
 8005fa0:	2b08      	cmp	r3, #8
 8005fa2:	d10b      	bne.n	8005fbc <_printf_i+0x144>
 8005fa4:	6823      	ldr	r3, [r4, #0]
 8005fa6:	07df      	lsls	r7, r3, #31
 8005fa8:	d508      	bpl.n	8005fbc <_printf_i+0x144>
 8005faa:	6923      	ldr	r3, [r4, #16]
 8005fac:	6861      	ldr	r1, [r4, #4]
 8005fae:	4299      	cmp	r1, r3
 8005fb0:	bfde      	ittt	le
 8005fb2:	2330      	movle	r3, #48	@ 0x30
 8005fb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005fb8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005fbc:	1b92      	subs	r2, r2, r6
 8005fbe:	6122      	str	r2, [r4, #16]
 8005fc0:	f8cd a000 	str.w	sl, [sp]
 8005fc4:	464b      	mov	r3, r9
 8005fc6:	aa03      	add	r2, sp, #12
 8005fc8:	4621      	mov	r1, r4
 8005fca:	4640      	mov	r0, r8
 8005fcc:	f7ff fee6 	bl	8005d9c <_printf_common>
 8005fd0:	3001      	adds	r0, #1
 8005fd2:	d14a      	bne.n	800606a <_printf_i+0x1f2>
 8005fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fd8:	b004      	add	sp, #16
 8005fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fde:	6823      	ldr	r3, [r4, #0]
 8005fe0:	f043 0320 	orr.w	r3, r3, #32
 8005fe4:	6023      	str	r3, [r4, #0]
 8005fe6:	4833      	ldr	r0, [pc, #204]	@ (80060b4 <_printf_i+0x23c>)
 8005fe8:	2778      	movs	r7, #120	@ 0x78
 8005fea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005fee:	6823      	ldr	r3, [r4, #0]
 8005ff0:	6831      	ldr	r1, [r6, #0]
 8005ff2:	061f      	lsls	r7, r3, #24
 8005ff4:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ff8:	d402      	bmi.n	8006000 <_printf_i+0x188>
 8005ffa:	065f      	lsls	r7, r3, #25
 8005ffc:	bf48      	it	mi
 8005ffe:	b2ad      	uxthmi	r5, r5
 8006000:	6031      	str	r1, [r6, #0]
 8006002:	07d9      	lsls	r1, r3, #31
 8006004:	bf44      	itt	mi
 8006006:	f043 0320 	orrmi.w	r3, r3, #32
 800600a:	6023      	strmi	r3, [r4, #0]
 800600c:	b11d      	cbz	r5, 8006016 <_printf_i+0x19e>
 800600e:	2310      	movs	r3, #16
 8006010:	e7ac      	b.n	8005f6c <_printf_i+0xf4>
 8006012:	4827      	ldr	r0, [pc, #156]	@ (80060b0 <_printf_i+0x238>)
 8006014:	e7e9      	b.n	8005fea <_printf_i+0x172>
 8006016:	6823      	ldr	r3, [r4, #0]
 8006018:	f023 0320 	bic.w	r3, r3, #32
 800601c:	6023      	str	r3, [r4, #0]
 800601e:	e7f6      	b.n	800600e <_printf_i+0x196>
 8006020:	4616      	mov	r6, r2
 8006022:	e7bd      	b.n	8005fa0 <_printf_i+0x128>
 8006024:	6833      	ldr	r3, [r6, #0]
 8006026:	6825      	ldr	r5, [r4, #0]
 8006028:	6961      	ldr	r1, [r4, #20]
 800602a:	1d18      	adds	r0, r3, #4
 800602c:	6030      	str	r0, [r6, #0]
 800602e:	062e      	lsls	r6, r5, #24
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	d501      	bpl.n	8006038 <_printf_i+0x1c0>
 8006034:	6019      	str	r1, [r3, #0]
 8006036:	e002      	b.n	800603e <_printf_i+0x1c6>
 8006038:	0668      	lsls	r0, r5, #25
 800603a:	d5fb      	bpl.n	8006034 <_printf_i+0x1bc>
 800603c:	8019      	strh	r1, [r3, #0]
 800603e:	2300      	movs	r3, #0
 8006040:	6123      	str	r3, [r4, #16]
 8006042:	4616      	mov	r6, r2
 8006044:	e7bc      	b.n	8005fc0 <_printf_i+0x148>
 8006046:	6833      	ldr	r3, [r6, #0]
 8006048:	1d1a      	adds	r2, r3, #4
 800604a:	6032      	str	r2, [r6, #0]
 800604c:	681e      	ldr	r6, [r3, #0]
 800604e:	6862      	ldr	r2, [r4, #4]
 8006050:	2100      	movs	r1, #0
 8006052:	4630      	mov	r0, r6
 8006054:	f7fa f8cc 	bl	80001f0 <memchr>
 8006058:	b108      	cbz	r0, 800605e <_printf_i+0x1e6>
 800605a:	1b80      	subs	r0, r0, r6
 800605c:	6060      	str	r0, [r4, #4]
 800605e:	6863      	ldr	r3, [r4, #4]
 8006060:	6123      	str	r3, [r4, #16]
 8006062:	2300      	movs	r3, #0
 8006064:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006068:	e7aa      	b.n	8005fc0 <_printf_i+0x148>
 800606a:	6923      	ldr	r3, [r4, #16]
 800606c:	4632      	mov	r2, r6
 800606e:	4649      	mov	r1, r9
 8006070:	4640      	mov	r0, r8
 8006072:	47d0      	blx	sl
 8006074:	3001      	adds	r0, #1
 8006076:	d0ad      	beq.n	8005fd4 <_printf_i+0x15c>
 8006078:	6823      	ldr	r3, [r4, #0]
 800607a:	079b      	lsls	r3, r3, #30
 800607c:	d413      	bmi.n	80060a6 <_printf_i+0x22e>
 800607e:	68e0      	ldr	r0, [r4, #12]
 8006080:	9b03      	ldr	r3, [sp, #12]
 8006082:	4298      	cmp	r0, r3
 8006084:	bfb8      	it	lt
 8006086:	4618      	movlt	r0, r3
 8006088:	e7a6      	b.n	8005fd8 <_printf_i+0x160>
 800608a:	2301      	movs	r3, #1
 800608c:	4632      	mov	r2, r6
 800608e:	4649      	mov	r1, r9
 8006090:	4640      	mov	r0, r8
 8006092:	47d0      	blx	sl
 8006094:	3001      	adds	r0, #1
 8006096:	d09d      	beq.n	8005fd4 <_printf_i+0x15c>
 8006098:	3501      	adds	r5, #1
 800609a:	68e3      	ldr	r3, [r4, #12]
 800609c:	9903      	ldr	r1, [sp, #12]
 800609e:	1a5b      	subs	r3, r3, r1
 80060a0:	42ab      	cmp	r3, r5
 80060a2:	dcf2      	bgt.n	800608a <_printf_i+0x212>
 80060a4:	e7eb      	b.n	800607e <_printf_i+0x206>
 80060a6:	2500      	movs	r5, #0
 80060a8:	f104 0619 	add.w	r6, r4, #25
 80060ac:	e7f5      	b.n	800609a <_printf_i+0x222>
 80060ae:	bf00      	nop
 80060b0:	08006365 	.word	0x08006365
 80060b4:	08006376 	.word	0x08006376

080060b8 <memmove>:
 80060b8:	4288      	cmp	r0, r1
 80060ba:	b510      	push	{r4, lr}
 80060bc:	eb01 0402 	add.w	r4, r1, r2
 80060c0:	d902      	bls.n	80060c8 <memmove+0x10>
 80060c2:	4284      	cmp	r4, r0
 80060c4:	4623      	mov	r3, r4
 80060c6:	d807      	bhi.n	80060d8 <memmove+0x20>
 80060c8:	1e43      	subs	r3, r0, #1
 80060ca:	42a1      	cmp	r1, r4
 80060cc:	d008      	beq.n	80060e0 <memmove+0x28>
 80060ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80060d6:	e7f8      	b.n	80060ca <memmove+0x12>
 80060d8:	4402      	add	r2, r0
 80060da:	4601      	mov	r1, r0
 80060dc:	428a      	cmp	r2, r1
 80060de:	d100      	bne.n	80060e2 <memmove+0x2a>
 80060e0:	bd10      	pop	{r4, pc}
 80060e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80060e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80060ea:	e7f7      	b.n	80060dc <memmove+0x24>

080060ec <memcpy>:
 80060ec:	440a      	add	r2, r1
 80060ee:	4291      	cmp	r1, r2
 80060f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80060f4:	d100      	bne.n	80060f8 <memcpy+0xc>
 80060f6:	4770      	bx	lr
 80060f8:	b510      	push	{r4, lr}
 80060fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006102:	4291      	cmp	r1, r2
 8006104:	d1f9      	bne.n	80060fa <memcpy+0xe>
 8006106:	bd10      	pop	{r4, pc}

08006108 <_realloc_r>:
 8006108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800610c:	4680      	mov	r8, r0
 800610e:	4615      	mov	r5, r2
 8006110:	460c      	mov	r4, r1
 8006112:	b921      	cbnz	r1, 800611e <_realloc_r+0x16>
 8006114:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006118:	4611      	mov	r1, r2
 800611a:	f7ff bbad 	b.w	8005878 <_malloc_r>
 800611e:	b92a      	cbnz	r2, 800612c <_realloc_r+0x24>
 8006120:	f7ff fc9a 	bl	8005a58 <_free_r>
 8006124:	2400      	movs	r4, #0
 8006126:	4620      	mov	r0, r4
 8006128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800612c:	f000 f81a 	bl	8006164 <_malloc_usable_size_r>
 8006130:	4285      	cmp	r5, r0
 8006132:	4606      	mov	r6, r0
 8006134:	d802      	bhi.n	800613c <_realloc_r+0x34>
 8006136:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800613a:	d8f4      	bhi.n	8006126 <_realloc_r+0x1e>
 800613c:	4629      	mov	r1, r5
 800613e:	4640      	mov	r0, r8
 8006140:	f7ff fb9a 	bl	8005878 <_malloc_r>
 8006144:	4607      	mov	r7, r0
 8006146:	2800      	cmp	r0, #0
 8006148:	d0ec      	beq.n	8006124 <_realloc_r+0x1c>
 800614a:	42b5      	cmp	r5, r6
 800614c:	462a      	mov	r2, r5
 800614e:	4621      	mov	r1, r4
 8006150:	bf28      	it	cs
 8006152:	4632      	movcs	r2, r6
 8006154:	f7ff ffca 	bl	80060ec <memcpy>
 8006158:	4621      	mov	r1, r4
 800615a:	4640      	mov	r0, r8
 800615c:	f7ff fc7c 	bl	8005a58 <_free_r>
 8006160:	463c      	mov	r4, r7
 8006162:	e7e0      	b.n	8006126 <_realloc_r+0x1e>

08006164 <_malloc_usable_size_r>:
 8006164:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006168:	1f18      	subs	r0, r3, #4
 800616a:	2b00      	cmp	r3, #0
 800616c:	bfbc      	itt	lt
 800616e:	580b      	ldrlt	r3, [r1, r0]
 8006170:	18c0      	addlt	r0, r0, r3
 8006172:	4770      	bx	lr

08006174 <_init>:
 8006174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006176:	bf00      	nop
 8006178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800617a:	bc08      	pop	{r3}
 800617c:	469e      	mov	lr, r3
 800617e:	4770      	bx	lr

08006180 <_fini>:
 8006180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006182:	bf00      	nop
 8006184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006186:	bc08      	pop	{r3}
 8006188:	469e      	mov	lr, r3
 800618a:	4770      	bx	lr
