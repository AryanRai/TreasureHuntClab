/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdbool.h>
#include <serial.h>
#include <stdlib.h>
#include "gamestate.h"

/*
#include <serial module header>
	variables
		send_ser1
		rec_ser1
#include <scoreboard display module header>
	variables

#include <LED module header>
#include <magnet detector module>
#include <touchpad module header>
#include <servo module header>
#include <trimpot module header>
*/

/*typedef struct{
	int items_found;
	int items_to_find;
	int digs_taken;
	int digs_remaining;
	int peeks_used;
	int game_time_remaining;
	bool game_over;
} GameState;*/
int message_complete = 0;
int touchpad_interrupt = 1;


#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void){

	enableUSART1();
	enableUARTInterrupts();
	clear_screen();

	send_string("hello world");
	clear_screen();

	GameState game = {
			.items_found = 0,
			.items_to_find = 3,
			.digs_taken = 0,
			.digs_remaining = 4,
			.peeks_used = 0,
			.game_time_remaining = 240,
			.game_over = false
	};

	GameTriggers triggers = {
		.touchpad_pressed = -1,
		.magnet1_det = 0,
		.magnet2_det = 0,
		.servo_controlled = -1
	};



	print_game_state(game);
	print_game_triggers(triggers);


	triggers.touchpad_pressed = touchpad_interrupt;

    /* Loop forever */
	while(1){


		// Need an interrupt to change triggers.touchpad_pressed = -1 when touchpad is pressed
	while( triggers.touchpad_pressed != -1) {
		send_string("touchpad pressed\r\n");
		triggers.servo_controlled = touchpad_pressed
		triggers.touchpad_pressed = -1; //turn touchpad flag to off
					}
				}

	while(triggers.servo_controlled != -1) {
	/*	receive_trimpot_value(); function to retrieve trimpot value
		trimpot_servo_range(); function to turn trimpot variable into value between servo motor fully open/fully closed range

		if(trimpot_servo_range() < peek_threshold{

		//instigate peak which opens door certain amount

			while(trimpot_servo_range >0 && trimpot_servo_range < peek_threshold){
			send_trimpot_val(triggers.servo_controlled, trimpot_servo_range());  // function to send trimpot value to SPECIFIC servo motor
			receive_trimpot_value()
			trimpot_servo_range();

			}
		game.peaks_used = game.peaks_used+1


		} else if(trimpot_servo_range()> peek_threshold{
			while(trimpot_servo_range < max(trimpot_servo_range()){
				send_trimpot_val(triggers.servo_controlled, trimpot_servo_range());
				receive_trimpot_value();
				trimpot_servo_range();



		send_trimpot_val(triggers.servo_controlled, trimpot_value)
		*/


		triggers.servo_controlled != -1 //turn servo control to off
	}





}
