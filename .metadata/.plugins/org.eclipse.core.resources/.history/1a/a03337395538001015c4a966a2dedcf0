
#include <stdint.h>
#include <timer_module.h>
#include "stm32f303xc.h"
#include <timer_module.h>

#define PRESCALER 0x3E7      // 999 + 1 = 1000
#define DELAY 0xfa00      // 8000 System block is 8mhz
#define LED_POS 3

extern volatile uint8_t* lights; //external as in two scripts.
extern uint32_t timer_period;  // timer period reset variable
static void (*timer3_callback)(void) = 0;

static uint32_t timer3_period = 0; // set base timer3 period

void set_timer3(uint32_t value) {
	timer3_period = value; }

uint32_t get_timer3(void) {
	return timer3_period; }

void timer3_set_callback(void (*cb)(void)) {
    timer3_callback = cb;
}


void enableTimer3()
{

	__disable_irq();

	// Enable the clock for Timer 3
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN_Msk  ;

	// Value to be compared against
	TIM3->PSC = PRESCALER; // divide by 1000? Would make it 8000 hz
	TIM3->ARR = timer3_period; // Delay is set as ARR, so interrupt will happen at delay
	// Force update event to apply PSC and ARR. Because prescaler only takes effect an event
	TIM3->EGR |= TIM_EGR_UG; // Forces update event, immediately loads prescaler and ARR values

	// Reset counter
	TIM3->CNT = 0;

	TIM3->DIER |= TIM_DIER_UIE; //enable interrupt from TIM3 when it overflows (ARR Setting)

	TIM3->SR &= ~TIM_SR_UIF; // clears interrupt flag
	// Set priority and enable interrupts
	NVIC_SetPriority(TIM3_IRQn, 3);
	NVIC_EnableIRQ(TIM3_IRQn);



	TIM3->CR1 |= TIM_CR1_CEN;  // start counter


	__enable_irq();
}


void TIM3_IRQHandler()
{
	 if (TIM3->SR & TIM_SR_UIF) {         	// run the TIM2handler (make sure it has been flagged)
		// reset the interrupt (so it doesn't keep firing until the next trigger)
		TIM3->SR &= ~TIM_SR_UIF;         // Clear interrupt
		TIM3->CR1 &= ~TIM_CR1_CEN;        // STOP the timer making it one shot

		if(timer3_callback) {
			timer3_callback();
			    			}
			    			}
			    }


void one_shot_LED(){
	*lights = 0xFF;
	disableTimer2();
}



