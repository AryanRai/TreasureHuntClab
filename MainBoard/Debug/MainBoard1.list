
MainBoard1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bc8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08004d58  08004d58  00005d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e60  08004e60  00006064  2**0
                  CONTENTS
  4 .ARM          00000008  08004e60  08004e60  00005e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e68  08004e68  00006064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e68  08004e68  00005e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e6c  08004e6c  00005e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08004e70  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006064  2**0
                  CONTENTS
 10 .bss          00000384  20000064  20000064  00006064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003e8  200003e8  00006064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e117  00000000  00000000  00006094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c17  00000000  00000000  000141ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c88  00000000  00000000  00015dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009d9  00000000  00000000  00016a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dc8f  00000000  00000000  00017429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f674  00000000  00000000  000350b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b7268  00000000  00000000  0004472c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fb994  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003a0c  00000000  00000000  000fb9d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  000ff3e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004d40 	.word	0x08004d40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08004d40 	.word	0x08004d40

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	2b00      	cmp	r3, #0
 8000290:	db0b      	blt.n	80002aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	f003 021f 	and.w	r2, r3, #31
 8000298:	4907      	ldr	r1, [pc, #28]	@ (80002b8 <__NVIC_EnableIRQ+0x38>)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	095b      	lsrs	r3, r3, #5
 80002a0:	2001      	movs	r0, #1
 80002a2:	fa00 f202 	lsl.w	r2, r0, r2
 80002a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000e100 	.word	0xe000e100

080002bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	6039      	str	r1, [r7, #0]
 80002c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	db0a      	blt.n	80002e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	b2da      	uxtb	r2, r3
 80002d4:	490c      	ldr	r1, [pc, #48]	@ (8000308 <__NVIC_SetPriority+0x4c>)
 80002d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002da:	0112      	lsls	r2, r2, #4
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	440b      	add	r3, r1
 80002e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002e4:	e00a      	b.n	80002fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	b2da      	uxtb	r2, r3
 80002ea:	4908      	ldr	r1, [pc, #32]	@ (800030c <__NVIC_SetPriority+0x50>)
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	f003 030f 	and.w	r3, r3, #15
 80002f2:	3b04      	subs	r3, #4
 80002f4:	0112      	lsls	r2, r2, #4
 80002f6:	b2d2      	uxtb	r2, r2
 80002f8:	440b      	add	r3, r1
 80002fa:	761a      	strb	r2, [r3, #24]
}
 80002fc:	bf00      	nop
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	e000e100 	.word	0xe000e100
 800030c:	e000ed00 	.word	0xe000ed00

08000310 <create_mask>:
 	uint8_t PIN_UPPER;

 } GPIO;


 uint32_t create_mask(uint8_t start, uint8_t end) {
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	460a      	mov	r2, r1
 800031a:	71fb      	strb	r3, [r7, #7]
 800031c:	4613      	mov	r3, r2
 800031e:	71bb      	strb	r3, [r7, #6]
 	//Bitwise-logic trick to get 1's mask between start and end index
 	return ((1 << (end + 1)) - 1) ^ ((1 << start) - 1);                      // XOR to get the range
 8000320:	79bb      	ldrb	r3, [r7, #6]
 8000322:	3301      	adds	r3, #1
 8000324:	2201      	movs	r2, #1
 8000326:	fa02 f303 	lsl.w	r3, r2, r3
 800032a:	1e5a      	subs	r2, r3, #1
 800032c:	79fb      	ldrb	r3, [r7, #7]
 800032e:	2101      	movs	r1, #1
 8000330:	fa01 f303 	lsl.w	r3, r1, r3
 8000334:	3b01      	subs	r3, #1
 8000336:	4053      	eors	r3, r2
 }
 8000338:	4618      	mov	r0, r3
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr

08000344 <init_port>:



 GPIO *init_port(port_name_link name, port_mode mode, uint8_t pin_lower, uint8_t pin_upper){
 8000344:	b590      	push	{r4, r7, lr}
 8000346:	b089      	sub	sp, #36	@ 0x24
 8000348:	af00      	add	r7, sp, #0
 800034a:	4604      	mov	r4, r0
 800034c:	4608      	mov	r0, r1
 800034e:	4611      	mov	r1, r2
 8000350:	461a      	mov	r2, r3
 8000352:	4623      	mov	r3, r4
 8000354:	71fb      	strb	r3, [r7, #7]
 8000356:	4603      	mov	r3, r0
 8000358:	71bb      	strb	r3, [r7, #6]
 800035a:	460b      	mov	r3, r1
 800035c:	717b      	strb	r3, [r7, #5]
 800035e:	4613      	mov	r3, r2
 8000360:	713b      	strb	r3, [r7, #4]

 	GPIO *port_pt = malloc(sizeof(GPIO)); //Pointer to Port
 8000362:	200c      	movs	r0, #12
 8000364:	f004 f844 	bl	80043f0 <malloc>
 8000368:	4603      	mov	r3, r0
 800036a:	617b      	str	r3, [r7, #20]

 	port_pt->PORT_IND = name;
 800036c:	697b      	ldr	r3, [r7, #20]
 800036e:	79fa      	ldrb	r2, [r7, #7]
 8000370:	701a      	strb	r2, [r3, #0]
 	port_pt->PORT_ADR = adr_link[name];
 8000372:	79fb      	ldrb	r3, [r7, #7]
 8000374:	4a50      	ldr	r2, [pc, #320]	@ (80004b8 <init_port+0x174>)
 8000376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800037a:	461a      	mov	r2, r3
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	605a      	str	r2, [r3, #4]
 	port_pt->MODE = mode;
 8000380:	697b      	ldr	r3, [r7, #20]
 8000382:	79ba      	ldrb	r2, [r7, #6]
 8000384:	721a      	strb	r2, [r3, #8]
 	port_pt->PIN_LOWER = pin_lower;
 8000386:	697b      	ldr	r3, [r7, #20]
 8000388:	797a      	ldrb	r2, [r7, #5]
 800038a:	725a      	strb	r2, [r3, #9]
 	port_pt->PIN_UPPER = pin_upper;
 800038c:	697b      	ldr	r3, [r7, #20]
 800038e:	793a      	ldrb	r2, [r7, #4]
 8000390:	729a      	strb	r2, [r3, #10]

 	//Enable clock for portX
 	uint32_t clock_en_mask = clock_mask_link[name];
 8000392:	79fb      	ldrb	r3, [r7, #7]
 8000394:	4a49      	ldr	r2, [pc, #292]	@ (80004bc <init_port+0x178>)
 8000396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800039a:	613b      	str	r3, [r7, #16]
 	RCC->AHBENR |= clock_en_mask;
 800039c:	4b48      	ldr	r3, [pc, #288]	@ (80004c0 <init_port+0x17c>)
 800039e:	695a      	ldr	r2, [r3, #20]
 80003a0:	4947      	ldr	r1, [pc, #284]	@ (80004c0 <init_port+0x17c>)
 80003a2:	693b      	ldr	r3, [r7, #16]
 80003a4:	4313      	orrs	r3, r2
 80003a6:	614b      	str	r3, [r1, #20]


 	uint32_t *port_mode_reg = ((uint32_t *) &(port_pt->PORT_ADR->MODER));
 80003a8:	697b      	ldr	r3, [r7, #20]
 80003aa:	685b      	ldr	r3, [r3, #4]
 80003ac:	60fb      	str	r3, [r7, #12]

 	//Generate mode-mask

 	//First mask away the selected section (pin_range)
 	uint32_t temp_mask = create_mask(pin_lower*2, pin_upper*2 + 1);
 80003ae:	797b      	ldrb	r3, [r7, #5]
 80003b0:	005b      	lsls	r3, r3, #1
 80003b2:	b2da      	uxtb	r2, r3
 80003b4:	793b      	ldrb	r3, [r7, #4]
 80003b6:	005b      	lsls	r3, r3, #1
 80003b8:	b2db      	uxtb	r3, r3
 80003ba:	3301      	adds	r3, #1
 80003bc:	b2db      	uxtb	r3, r3
 80003be:	4619      	mov	r1, r3
 80003c0:	4610      	mov	r0, r2
 80003c2:	f7ff ffa5 	bl	8000310 <create_mask>
 80003c6:	61f8      	str	r0, [r7, #28]

 	//Sets the pin_range section to 0
 	*port_mode_reg &= ~temp_mask;
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	681a      	ldr	r2, [r3, #0]
 80003cc:	69fb      	ldr	r3, [r7, #28]
 80003ce:	43db      	mvns	r3, r3
 80003d0:	401a      	ands	r2, r3
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	601a      	str	r2, [r3, #0]


 	//Input-mode is enabled when each pin is 0b00 so no more masking is required

 	if (mode == OUTPUT){
 80003d6:	79bb      	ldrb	r3, [r7, #6]
 80003d8:	2b01      	cmp	r3, #1
 80003da:	d11f      	bne.n	800041c <init_port+0xd8>

 		//Similar idea to clear-mask, except shifting by 2 each time (0b01010101...)
 		uint32_t first_mask = (1 << pin_lower*2);
 80003dc:	797b      	ldrb	r3, [r7, #5]
 80003de:	005b      	lsls	r3, r3, #1
 80003e0:	2201      	movs	r2, #1
 80003e2:	fa02 f303 	lsl.w	r3, r2, r3
 80003e6:	60bb      	str	r3, [r7, #8]

 		temp_mask = first_mask;
 80003e8:	68bb      	ldr	r3, [r7, #8]
 80003ea:	61fb      	str	r3, [r7, #28]
 		for (uint8_t i=pin_lower; i<pin_upper+1; i++){
 80003ec:	797b      	ldrb	r3, [r7, #5]
 80003ee:	76fb      	strb	r3, [r7, #27]
 80003f0:	e009      	b.n	8000406 <init_port+0xc2>
 			temp_mask <<= 2;
 80003f2:	69fb      	ldr	r3, [r7, #28]
 80003f4:	009b      	lsls	r3, r3, #2
 80003f6:	61fb      	str	r3, [r7, #28]
 			temp_mask |= first_mask;
 80003f8:	69fa      	ldr	r2, [r7, #28]
 80003fa:	68bb      	ldr	r3, [r7, #8]
 80003fc:	4313      	orrs	r3, r2
 80003fe:	61fb      	str	r3, [r7, #28]
 		for (uint8_t i=pin_lower; i<pin_upper+1; i++){
 8000400:	7efb      	ldrb	r3, [r7, #27]
 8000402:	3301      	adds	r3, #1
 8000404:	76fb      	strb	r3, [r7, #27]
 8000406:	793a      	ldrb	r2, [r7, #4]
 8000408:	7efb      	ldrb	r3, [r7, #27]
 800040a:	429a      	cmp	r2, r3
 800040c:	d2f1      	bcs.n	80003f2 <init_port+0xae>
 		}

 		*port_mode_reg |=temp_mask;
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	681a      	ldr	r2, [r3, #0]
 8000412:	69fb      	ldr	r3, [r7, #28]
 8000414:	431a      	orrs	r2, r3
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	601a      	str	r2, [r3, #0]
 800041a:	e047      	b.n	80004ac <init_port+0x168>

 	} else if (mode == ANALOG){
 800041c:	79bb      	ldrb	r3, [r7, #6]
 800041e:	2b02      	cmp	r3, #2
 8000420:	d144      	bne.n	80004ac <init_port+0x168>
 		//All 1s for analog mode (conveniently same as clear-mask)

 		*port_mode_reg |= temp_mask;
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	681a      	ldr	r2, [r3, #0]
 8000426:	69fb      	ldr	r3, [r7, #28]
 8000428:	431a      	orrs	r2, r3
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	601a      	str	r2, [r3, #0]

 		//ONLY AVAILABLE FOR PA0 - PA3 !!!!!!

 		// enable the clock for ADC1
		RCC->AHBENR |= RCC_AHBENR_ADC12EN;
 800042e:	4b24      	ldr	r3, [pc, #144]	@ (80004c0 <init_port+0x17c>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	4a23      	ldr	r2, [pc, #140]	@ (80004c0 <init_port+0x17c>)
 8000434:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000438:	6153      	str	r3, [r2, #20]

		// set to synchronise the ADC with the clock
		ADC12_COMMON->CCR |= ADC12_CCR_CKMODE_0;
 800043a:	4b22      	ldr	r3, [pc, #136]	@ (80004c4 <init_port+0x180>)
 800043c:	689b      	ldr	r3, [r3, #8]
 800043e:	4a21      	ldr	r2, [pc, #132]	@ (80004c4 <init_port+0x180>)
 8000440:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000444:	6093      	str	r3, [r2, #8]

		// ADEN must be = 0 for configuration (is the default)
		ADC2->CR &= ~ADC_CR_ADVREGEN; // clear voltage regulator enable
 8000446:	4b20      	ldr	r3, [pc, #128]	@ (80004c8 <init_port+0x184>)
 8000448:	689b      	ldr	r3, [r3, #8]
 800044a:	4a1f      	ldr	r2, [pc, #124]	@ (80004c8 <init_port+0x184>)
 800044c:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8000450:	6093      	str	r3, [r2, #8]
		ADC2->CR |= ADC_CR_ADVREGEN_0; // set ADVREGEN TO 01
 8000452:	4b1d      	ldr	r3, [pc, #116]	@ (80004c8 <init_port+0x184>)
 8000454:	689b      	ldr	r3, [r3, #8]
 8000456:	4a1c      	ldr	r2, [pc, #112]	@ (80004c8 <init_port+0x184>)
 8000458:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800045c:	6093      	str	r3, [r2, #8]
		ADC2->CR &= ~ADC_CR_ADCALDIF; // clear bit to enable Single-ended-input
 800045e:	4b1a      	ldr	r3, [pc, #104]	@ (80004c8 <init_port+0x184>)
 8000460:	689b      	ldr	r3, [r3, #8]
 8000462:	4a19      	ldr	r2, [pc, #100]	@ (80004c8 <init_port+0x184>)
 8000464:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8000468:	6093      	str	r3, [r2, #8]

		// calibrate the ADC (self calibration routine)
		ADC2->CR |= ADC_CR_ADCAL;
 800046a:	4b17      	ldr	r3, [pc, #92]	@ (80004c8 <init_port+0x184>)
 800046c:	689b      	ldr	r3, [r3, #8]
 800046e:	4a16      	ldr	r2, [pc, #88]	@ (80004c8 <init_port+0x184>)
 8000470:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000474:	6093      	str	r3, [r2, #8]
		while((ADC2->CR & ADC_CR_ADCAL) == ADC_CR_ADCAL); // Waiting for the calibration to finish
 8000476:	bf00      	nop
 8000478:	4b13      	ldr	r3, [pc, #76]	@ (80004c8 <init_port+0x184>)
 800047a:	689b      	ldr	r3, [r3, #8]
 800047c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8000480:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000484:	d0f8      	beq.n	8000478 <init_port+0x134>


		// single shot mode
		ADC2->CFGR &= ~ADC_CFGR_CONT;
 8000486:	4b10      	ldr	r3, [pc, #64]	@ (80004c8 <init_port+0x184>)
 8000488:	68db      	ldr	r3, [r3, #12]
 800048a:	4a0f      	ldr	r2, [pc, #60]	@ (80004c8 <init_port+0x184>)
 800048c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000490:	60d3      	str	r3, [r2, #12]

		// Enable the ADC
		ADC2->CR |= ADC_CR_ADEN;
 8000492:	4b0d      	ldr	r3, [pc, #52]	@ (80004c8 <init_port+0x184>)
 8000494:	689b      	ldr	r3, [r3, #8]
 8000496:	4a0c      	ldr	r2, [pc, #48]	@ (80004c8 <init_port+0x184>)
 8000498:	f043 0301 	orr.w	r3, r3, #1
 800049c:	6093      	str	r3, [r2, #8]

		// Wait the ADC to be ready.
		while (!(ADC2->ISR & ADC_ISR_ADRDY));
 800049e:	bf00      	nop
 80004a0:	4b09      	ldr	r3, [pc, #36]	@ (80004c8 <init_port+0x184>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	f003 0301 	and.w	r3, r3, #1
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d0f9      	beq.n	80004a0 <init_port+0x15c>

 	}


 	//Port has been initialised!! - return the port-struct
 	return port_pt;
 80004ac:	697b      	ldr	r3, [r7, #20]
 }
 80004ae:	4618      	mov	r0, r3
 80004b0:	3724      	adds	r7, #36	@ 0x24
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd90      	pop	{r4, r7, pc}
 80004b6:	bf00      	nop
 80004b8:	08004dbc 	.word	0x08004dbc
 80004bc:	08004dd0 	.word	0x08004dd0
 80004c0:	40021000 	.word	0x40021000
 80004c4:	50000300 	.word	0x50000300
 80004c8:	50000100 	.word	0x50000100

080004cc <EXTI0_IRQHandler>:

 //Pointers to callback-funcitons (for each of 16 pins)
 void (*EXTI_Callbacks[16])(uint8_t pin_index) = {0x00};
 //Wish this wasn't necessary, but each handler function has to be defined seperately
 //Is there a better way to do this? There doesn't seem to be a generic IQRHandler..
 void EXTI0_IRQHandler(void) {EXTI->PR |= (1 << 0); if (EXTI_Callbacks[0]) EXTI_Callbacks[0](0);}
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
 80004d0:	4b07      	ldr	r3, [pc, #28]	@ (80004f0 <EXTI0_IRQHandler+0x24>)
 80004d2:	695b      	ldr	r3, [r3, #20]
 80004d4:	4a06      	ldr	r2, [pc, #24]	@ (80004f0 <EXTI0_IRQHandler+0x24>)
 80004d6:	f043 0301 	orr.w	r3, r3, #1
 80004da:	6153      	str	r3, [r2, #20]
 80004dc:	4b05      	ldr	r3, [pc, #20]	@ (80004f4 <EXTI0_IRQHandler+0x28>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d003      	beq.n	80004ec <EXTI0_IRQHandler+0x20>
 80004e4:	4b03      	ldr	r3, [pc, #12]	@ (80004f4 <EXTI0_IRQHandler+0x28>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	2000      	movs	r0, #0
 80004ea:	4798      	blx	r3
 80004ec:	bf00      	nop
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	40010400 	.word	0x40010400
 80004f4:	20000080 	.word	0x20000080

080004f8 <EXTI1_IRQHandler>:
 void EXTI1_IRQHandler(void) {EXTI->PR |= (1 << 1); if (EXTI_Callbacks[1]) EXTI_Callbacks[1](1);}
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	4b07      	ldr	r3, [pc, #28]	@ (800051c <EXTI1_IRQHandler+0x24>)
 80004fe:	695b      	ldr	r3, [r3, #20]
 8000500:	4a06      	ldr	r2, [pc, #24]	@ (800051c <EXTI1_IRQHandler+0x24>)
 8000502:	f043 0302 	orr.w	r3, r3, #2
 8000506:	6153      	str	r3, [r2, #20]
 8000508:	4b05      	ldr	r3, [pc, #20]	@ (8000520 <EXTI1_IRQHandler+0x28>)
 800050a:	685b      	ldr	r3, [r3, #4]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d003      	beq.n	8000518 <EXTI1_IRQHandler+0x20>
 8000510:	4b03      	ldr	r3, [pc, #12]	@ (8000520 <EXTI1_IRQHandler+0x28>)
 8000512:	685b      	ldr	r3, [r3, #4]
 8000514:	2001      	movs	r0, #1
 8000516:	4798      	blx	r3
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}
 800051c:	40010400 	.word	0x40010400
 8000520:	20000080 	.word	0x20000080

08000524 <EXTI2_TSC_IRQHandler>:
 void EXTI2_TSC_IRQHandler(void) {EXTI->PR |= (1 << 2); if (EXTI_Callbacks[2]) EXTI_Callbacks[2](2);}
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
 8000528:	4b07      	ldr	r3, [pc, #28]	@ (8000548 <EXTI2_TSC_IRQHandler+0x24>)
 800052a:	695b      	ldr	r3, [r3, #20]
 800052c:	4a06      	ldr	r2, [pc, #24]	@ (8000548 <EXTI2_TSC_IRQHandler+0x24>)
 800052e:	f043 0304 	orr.w	r3, r3, #4
 8000532:	6153      	str	r3, [r2, #20]
 8000534:	4b05      	ldr	r3, [pc, #20]	@ (800054c <EXTI2_TSC_IRQHandler+0x28>)
 8000536:	689b      	ldr	r3, [r3, #8]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d003      	beq.n	8000544 <EXTI2_TSC_IRQHandler+0x20>
 800053c:	4b03      	ldr	r3, [pc, #12]	@ (800054c <EXTI2_TSC_IRQHandler+0x28>)
 800053e:	689b      	ldr	r3, [r3, #8]
 8000540:	2002      	movs	r0, #2
 8000542:	4798      	blx	r3
 8000544:	bf00      	nop
 8000546:	bd80      	pop	{r7, pc}
 8000548:	40010400 	.word	0x40010400
 800054c:	20000080 	.word	0x20000080

08000550 <EXTI3_IRQHandler>:
 void EXTI3_IRQHandler(void) {EXTI->PR |= (1 << 3); if (EXTI_Callbacks[3]) EXTI_Callbacks[3](3);}
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
 8000554:	4b07      	ldr	r3, [pc, #28]	@ (8000574 <EXTI3_IRQHandler+0x24>)
 8000556:	695b      	ldr	r3, [r3, #20]
 8000558:	4a06      	ldr	r2, [pc, #24]	@ (8000574 <EXTI3_IRQHandler+0x24>)
 800055a:	f043 0308 	orr.w	r3, r3, #8
 800055e:	6153      	str	r3, [r2, #20]
 8000560:	4b05      	ldr	r3, [pc, #20]	@ (8000578 <EXTI3_IRQHandler+0x28>)
 8000562:	68db      	ldr	r3, [r3, #12]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d003      	beq.n	8000570 <EXTI3_IRQHandler+0x20>
 8000568:	4b03      	ldr	r3, [pc, #12]	@ (8000578 <EXTI3_IRQHandler+0x28>)
 800056a:	68db      	ldr	r3, [r3, #12]
 800056c:	2003      	movs	r0, #3
 800056e:	4798      	blx	r3
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40010400 	.word	0x40010400
 8000578:	20000080 	.word	0x20000080

0800057c <EXTI4_IRQHandler>:
 void EXTI4_IRQHandler(void) {EXTI->PR |= (1 << 4); if (EXTI_Callbacks[4]) EXTI_Callbacks[4](4);}
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
 8000580:	4b07      	ldr	r3, [pc, #28]	@ (80005a0 <EXTI4_IRQHandler+0x24>)
 8000582:	695b      	ldr	r3, [r3, #20]
 8000584:	4a06      	ldr	r2, [pc, #24]	@ (80005a0 <EXTI4_IRQHandler+0x24>)
 8000586:	f043 0310 	orr.w	r3, r3, #16
 800058a:	6153      	str	r3, [r2, #20]
 800058c:	4b05      	ldr	r3, [pc, #20]	@ (80005a4 <EXTI4_IRQHandler+0x28>)
 800058e:	691b      	ldr	r3, [r3, #16]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d003      	beq.n	800059c <EXTI4_IRQHandler+0x20>
 8000594:	4b03      	ldr	r3, [pc, #12]	@ (80005a4 <EXTI4_IRQHandler+0x28>)
 8000596:	691b      	ldr	r3, [r3, #16]
 8000598:	2004      	movs	r0, #4
 800059a:	4798      	blx	r3
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40010400 	.word	0x40010400
 80005a4:	20000080 	.word	0x20000080

080005a8 <EXTI9_5_IRQHandler>:
 //Must find which pin in 5-9 range triggered handler
 void EXTI9_5_IRQHandler(void) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
     for (uint8_t i = 5; i <= 9; i++) {
 80005ae:	2305      	movs	r3, #5
 80005b0:	71fb      	strb	r3, [r7, #7]
 80005b2:	e022      	b.n	80005fa <EXTI9_5_IRQHandler+0x52>
         if (EXTI->PR & (1 << i)) {
 80005b4:	4b15      	ldr	r3, [pc, #84]	@ (800060c <EXTI9_5_IRQHandler+0x64>)
 80005b6:	695b      	ldr	r3, [r3, #20]
 80005b8:	79fa      	ldrb	r2, [r7, #7]
 80005ba:	2101      	movs	r1, #1
 80005bc:	fa01 f202 	lsl.w	r2, r1, r2
 80005c0:	4013      	ands	r3, r2
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d016      	beq.n	80005f4 <EXTI9_5_IRQHandler+0x4c>
             EXTI->PR |= (1 << i);  // Clear pending flag
 80005c6:	4b11      	ldr	r3, [pc, #68]	@ (800060c <EXTI9_5_IRQHandler+0x64>)
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	79fa      	ldrb	r2, [r7, #7]
 80005cc:	2101      	movs	r1, #1
 80005ce:	fa01 f202 	lsl.w	r2, r1, r2
 80005d2:	4611      	mov	r1, r2
 80005d4:	4a0d      	ldr	r2, [pc, #52]	@ (800060c <EXTI9_5_IRQHandler+0x64>)
 80005d6:	430b      	orrs	r3, r1
 80005d8:	6153      	str	r3, [r2, #20]
             if (EXTI_Callbacks[i]) EXTI_Callbacks[i](i);  // Call user-defined function
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	4a0c      	ldr	r2, [pc, #48]	@ (8000610 <EXTI9_5_IRQHandler+0x68>)
 80005de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d006      	beq.n	80005f4 <EXTI9_5_IRQHandler+0x4c>
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	4a09      	ldr	r2, [pc, #36]	@ (8000610 <EXTI9_5_IRQHandler+0x68>)
 80005ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ee:	79fa      	ldrb	r2, [r7, #7]
 80005f0:	4610      	mov	r0, r2
 80005f2:	4798      	blx	r3
     for (uint8_t i = 5; i <= 9; i++) {
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	3301      	adds	r3, #1
 80005f8:	71fb      	strb	r3, [r7, #7]
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	2b09      	cmp	r3, #9
 80005fe:	d9d9      	bls.n	80005b4 <EXTI9_5_IRQHandler+0xc>
         }
     }
 }
 8000600:	bf00      	nop
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40010400 	.word	0x40010400
 8000610:	20000080 	.word	0x20000080

08000614 <EXTI15_10_IRQHandler>:

 void EXTI15_10_IRQHandler(void) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
     for (uint8_t i = 10; i <= 15; i++) {
 800061a:	230a      	movs	r3, #10
 800061c:	71fb      	strb	r3, [r7, #7]
 800061e:	e022      	b.n	8000666 <EXTI15_10_IRQHandler+0x52>
         if (EXTI->PR & (1 << i)) {
 8000620:	4b15      	ldr	r3, [pc, #84]	@ (8000678 <EXTI15_10_IRQHandler+0x64>)
 8000622:	695b      	ldr	r3, [r3, #20]
 8000624:	79fa      	ldrb	r2, [r7, #7]
 8000626:	2101      	movs	r1, #1
 8000628:	fa01 f202 	lsl.w	r2, r1, r2
 800062c:	4013      	ands	r3, r2
 800062e:	2b00      	cmp	r3, #0
 8000630:	d016      	beq.n	8000660 <EXTI15_10_IRQHandler+0x4c>
             EXTI->PR |= (1 << i);  // Clear pending flag
 8000632:	4b11      	ldr	r3, [pc, #68]	@ (8000678 <EXTI15_10_IRQHandler+0x64>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	79fa      	ldrb	r2, [r7, #7]
 8000638:	2101      	movs	r1, #1
 800063a:	fa01 f202 	lsl.w	r2, r1, r2
 800063e:	4611      	mov	r1, r2
 8000640:	4a0d      	ldr	r2, [pc, #52]	@ (8000678 <EXTI15_10_IRQHandler+0x64>)
 8000642:	430b      	orrs	r3, r1
 8000644:	6153      	str	r3, [r2, #20]
             if (EXTI_Callbacks[i]) EXTI_Callbacks[i](i);  // Call user-defined function
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	4a0c      	ldr	r2, [pc, #48]	@ (800067c <EXTI15_10_IRQHandler+0x68>)
 800064a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d006      	beq.n	8000660 <EXTI15_10_IRQHandler+0x4c>
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	4a09      	ldr	r2, [pc, #36]	@ (800067c <EXTI15_10_IRQHandler+0x68>)
 8000656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800065a:	79fa      	ldrb	r2, [r7, #7]
 800065c:	4610      	mov	r0, r2
 800065e:	4798      	blx	r3
     for (uint8_t i = 10; i <= 15; i++) {
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	3301      	adds	r3, #1
 8000664:	71fb      	strb	r3, [r7, #7]
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	2b0f      	cmp	r3, #15
 800066a:	d9d9      	bls.n	8000620 <EXTI15_10_IRQHandler+0xc>
         }
     }
 }
 800066c:	bf00      	nop
 800066e:	bf00      	nop
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40010400 	.word	0x40010400
 800067c:	20000080 	.word	0x20000080

08000680 <enable_interupt>:



 void enable_interupt(GPIO *port_pt, uint8_t pin_index,
 					trigger_type trigger, uint8_t priority,
 					void (*interupt_handler)(uint8_t pin_index)){
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	4608      	mov	r0, r1
 800068a:	4611      	mov	r1, r2
 800068c:	461a      	mov	r2, r3
 800068e:	4603      	mov	r3, r0
 8000690:	70fb      	strb	r3, [r7, #3]
 8000692:	460b      	mov	r3, r1
 8000694:	70bb      	strb	r3, [r7, #2]
 8000696:	4613      	mov	r3, r2
 8000698:	707b      	strb	r3, [r7, #1]

 	//Link interupt_handler function to appropriate EXTI_Callback
 	EXTI_Callbacks[pin_index] = interupt_handler;
 800069a:	78fb      	ldrb	r3, [r7, #3]
 800069c:	493b      	ldr	r1, [pc, #236]	@ (800078c <enable_interupt+0x10c>)
 800069e:	69ba      	ldr	r2, [r7, #24]
 80006a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a4:	b672      	cpsid	i
}
 80006a6:	bf00      	nop
 	// Disable the interrupts while messing around with the settings
 	//  otherwise can lead to strange behaviour
 	__disable_irq();

 	// Enable the system configuration controller (SYSCFG in RCC)
 	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80006a8:	4b39      	ldr	r3, [pc, #228]	@ (8000790 <enable_interupt+0x110>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	4a38      	ldr	r2, [pc, #224]	@ (8000790 <enable_interupt+0x110>)
 80006ae:	f043 0301 	orr.w	r3, r3, #1
 80006b2:	6193      	str	r3, [r2, #24]

 	//Tell pin-0 multiplexer to target selected-port (PORT_IND)

 	//If pin 0-3 or 12-15 :

 	uint32_t exticr_shift = 4 * (pin_index % 4);
 80006b4:	78fb      	ldrb	r3, [r7, #3]
 80006b6:	f003 0303 	and.w	r3, r3, #3
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	60fb      	str	r3, [r7, #12]
 	SYSCFG->EXTICR[pin_index / 4] &= ~(0xF << exticr_shift); // clear old bits
 80006be:	4a35      	ldr	r2, [pc, #212]	@ (8000794 <enable_interupt+0x114>)
 80006c0:	78fb      	ldrb	r3, [r7, #3]
 80006c2:	089b      	lsrs	r3, r3, #2
 80006c4:	b2d8      	uxtb	r0, r3
 80006c6:	4603      	mov	r3, r0
 80006c8:	3302      	adds	r3, #2
 80006ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ce:	210f      	movs	r1, #15
 80006d0:	68fa      	ldr	r2, [r7, #12]
 80006d2:	fa01 f202 	lsl.w	r2, r1, r2
 80006d6:	43d2      	mvns	r2, r2
 80006d8:	492e      	ldr	r1, [pc, #184]	@ (8000794 <enable_interupt+0x114>)
 80006da:	401a      	ands	r2, r3
 80006dc:	1c83      	adds	r3, r0, #2
 80006de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 	SYSCFG->EXTICR[pin_index / 4] |= (port_pt->PORT_IND << exticr_shift); // set new bits
 80006e2:	4a2c      	ldr	r2, [pc, #176]	@ (8000794 <enable_interupt+0x114>)
 80006e4:	78fb      	ldrb	r3, [r7, #3]
 80006e6:	089b      	lsrs	r3, r3, #2
 80006e8:	b2d8      	uxtb	r0, r3
 80006ea:	4603      	mov	r3, r0
 80006ec:	3302      	adds	r3, #2
 80006ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006f2:	687a      	ldr	r2, [r7, #4]
 80006f4:	7812      	ldrb	r2, [r2, #0]
 80006f6:	4611      	mov	r1, r2
 80006f8:	68fa      	ldr	r2, [r7, #12]
 80006fa:	fa01 f202 	lsl.w	r2, r1, r2
 80006fe:	4925      	ldr	r1, [pc, #148]	@ (8000794 <enable_interupt+0x114>)
 8000700:	431a      	orrs	r2, r3
 8000702:	1c83      	adds	r3, r0, #2
 8000704:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

 	//  Select interrupt on rising/falling edge (pins are consecutive bits)
 	if (trigger==RISING_EDGE){
 8000708:	78bb      	ldrb	r3, [r7, #2]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d10a      	bne.n	8000724 <enable_interupt+0xa4>
 		//Set rising-edge
 		EXTI->RTSR |= (1 << pin_index);
 800070e:	4b22      	ldr	r3, [pc, #136]	@ (8000798 <enable_interupt+0x118>)
 8000710:	689b      	ldr	r3, [r3, #8]
 8000712:	78fa      	ldrb	r2, [r7, #3]
 8000714:	2101      	movs	r1, #1
 8000716:	fa01 f202 	lsl.w	r2, r1, r2
 800071a:	4611      	mov	r1, r2
 800071c:	4a1e      	ldr	r2, [pc, #120]	@ (8000798 <enable_interupt+0x118>)
 800071e:	430b      	orrs	r3, r1
 8000720:	6093      	str	r3, [r2, #8]
 8000722:	e009      	b.n	8000738 <enable_interupt+0xb8>
 	} else{
 		//Set falling-edge
 		EXTI->FTSR |= (1 << pin_index);
 8000724:	4b1c      	ldr	r3, [pc, #112]	@ (8000798 <enable_interupt+0x118>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	78fa      	ldrb	r2, [r7, #3]
 800072a:	2101      	movs	r1, #1
 800072c:	fa01 f202 	lsl.w	r2, r1, r2
 8000730:	4611      	mov	r1, r2
 8000732:	4a19      	ldr	r2, [pc, #100]	@ (8000798 <enable_interupt+0x118>)
 8000734:	430b      	orrs	r3, r1
 8000736:	60d3      	str	r3, [r2, #12]
 	}


 	// set the interrupt from EXTI line x as 'not masked' - as in, enable it.
 	EXTI->IMR |= (1 << pin_index);
 8000738:	4b17      	ldr	r3, [pc, #92]	@ (8000798 <enable_interupt+0x118>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	78fa      	ldrb	r2, [r7, #3]
 800073e:	2101      	movs	r1, #1
 8000740:	fa01 f202 	lsl.w	r2, r1, r2
 8000744:	4611      	mov	r1, r2
 8000746:	4a14      	ldr	r2, [pc, #80]	@ (8000798 <enable_interupt+0x118>)
 8000748:	430b      	orrs	r3, r1
 800074a:	6013      	str	r3, [r2, #0]

 	// Tell the NVIC module that EXTIx interrupts should be handled

 	//Pins 0-4 have a seperate request-num (from 6-10),
 	//pins 5-9 are all at 23, and pins 10-15 are at 40
 	uint8_t req_num = (pin_index <= 4) ? (6 + pin_index) :
 800074c:	78fb      	ldrb	r3, [r7, #3]
 800074e:	2b04      	cmp	r3, #4
 8000750:	d803      	bhi.n	800075a <enable_interupt+0xda>
 8000752:	78fb      	ldrb	r3, [r7, #3]
 8000754:	3306      	adds	r3, #6
 8000756:	b2db      	uxtb	r3, r3
 8000758:	e005      	b.n	8000766 <enable_interupt+0xe6>
 800075a:	78fb      	ldrb	r3, [r7, #3]
 800075c:	2b09      	cmp	r3, #9
 800075e:	d801      	bhi.n	8000764 <enable_interupt+0xe4>
 8000760:	2317      	movs	r3, #23
 8000762:	e000      	b.n	8000766 <enable_interupt+0xe6>
 8000764:	2328      	movs	r3, #40	@ 0x28
 8000766:	72fb      	strb	r3, [r7, #11]
 					  (pin_index <= 9) ? 23 : 40;

 	NVIC_SetPriority(req_num, priority);  // Set Priority
 8000768:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800076c:	787a      	ldrb	r2, [r7, #1]
 800076e:	4611      	mov	r1, r2
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff fda3 	bl	80002bc <__NVIC_SetPriority>
 	NVIC_EnableIRQ(req_num);
 8000776:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff fd80 	bl	8000280 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000780:	b662      	cpsie	i
}
 8000782:	bf00      	nop

 	// Re-enable all interrupts (now that we are finished)
 	__enable_irq();

 }
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000080 	.word	0x20000080
 8000790:	40021000 	.word	0x40021000
 8000794:	40010000 	.word	0x40010000
 8000798:	40010400 	.word	0x40010400

0800079c <SetServoAngle>:
  * @param servoId: 1–6
  * @param angle: 0–180
  * @retval None
  */
void SetServoAngle(uint8_t servoId, uint16_t angle)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	460a      	mov	r2, r1
 80007a6:	71fb      	strb	r3, [r7, #7]
 80007a8:	4613      	mov	r3, r2
 80007aa:	80bb      	strh	r3, [r7, #4]
  if (angle > 180) angle = 180;
 80007ac:	88bb      	ldrh	r3, [r7, #4]
 80007ae:	2bb4      	cmp	r3, #180	@ 0xb4
 80007b0:	d901      	bls.n	80007b6 <SetServoAngle+0x1a>
 80007b2:	23b4      	movs	r3, #180	@ 0xb4
 80007b4:	80bb      	strh	r3, [r7, #4]
  uint32_t pulse = PWM_MIN_PULSE + (angle * (PWM_MAX_PULSE - PWM_MIN_PULSE) / 180);
 80007b6:	88bb      	ldrh	r3, [r7, #4]
 80007b8:	22c8      	movs	r2, #200	@ 0xc8
 80007ba:	fb02 f303 	mul.w	r3, r2, r3
 80007be:	4a28      	ldr	r2, [pc, #160]	@ (8000860 <SetServoAngle+0xc4>)
 80007c0:	fb82 1203 	smull	r1, r2, r2, r3
 80007c4:	441a      	add	r2, r3
 80007c6:	11d2      	asrs	r2, r2, #7
 80007c8:	17db      	asrs	r3, r3, #31
 80007ca:	1ad3      	subs	r3, r2, r3
 80007cc:	3332      	adds	r3, #50	@ 0x32
 80007ce:	60fb      	str	r3, [r7, #12]

  switch (servoId)
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	3b01      	subs	r3, #1
 80007d4:	2b05      	cmp	r3, #5
 80007d6:	d82d      	bhi.n	8000834 <SetServoAngle+0x98>
 80007d8:	a201      	add	r2, pc, #4	@ (adr r2, 80007e0 <SetServoAngle+0x44>)
 80007da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007de:	bf00      	nop
 80007e0:	080007f9 	.word	0x080007f9
 80007e4:	08000803 	.word	0x08000803
 80007e8:	0800080d 	.word	0x0800080d
 80007ec:	08000817 	.word	0x08000817
 80007f0:	08000821 	.word	0x08000821
 80007f4:	0800082b 	.word	0x0800082b
  {
    case 1: __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse); break; // PE2
 80007f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000864 <SetServoAngle+0xc8>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	68fa      	ldr	r2, [r7, #12]
 80007fe:	635a      	str	r2, [r3, #52]	@ 0x34
 8000800:	e019      	b.n	8000836 <SetServoAngle+0x9a>
    case 2: __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulse); break; // PE3
 8000802:	4b18      	ldr	r3, [pc, #96]	@ (8000864 <SetServoAngle+0xc8>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	68fa      	ldr	r2, [r7, #12]
 8000808:	639a      	str	r2, [r3, #56]	@ 0x38
 800080a:	e014      	b.n	8000836 <SetServoAngle+0x9a>
    case 3: __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse); break; // PA0
 800080c:	4b16      	ldr	r3, [pc, #88]	@ (8000868 <SetServoAngle+0xcc>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	68fa      	ldr	r2, [r7, #12]
 8000812:	635a      	str	r2, [r3, #52]	@ 0x34
 8000814:	e00f      	b.n	8000836 <SetServoAngle+0x9a>
    case 4: __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pulse); break; // PA1
 8000816:	4b14      	ldr	r3, [pc, #80]	@ (8000868 <SetServoAngle+0xcc>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	68fa      	ldr	r2, [r7, #12]
 800081c:	639a      	str	r2, [r3, #56]	@ 0x38
 800081e:	e00a      	b.n	8000836 <SetServoAngle+0x9a>
    case 5: __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pulse); break; // PD12
 8000820:	4b12      	ldr	r3, [pc, #72]	@ (800086c <SetServoAngle+0xd0>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	68fa      	ldr	r2, [r7, #12]
 8000826:	635a      	str	r2, [r3, #52]	@ 0x34
 8000828:	e005      	b.n	8000836 <SetServoAngle+0x9a>
    case 6: __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, pulse); break; // PD13
 800082a:	4b10      	ldr	r3, [pc, #64]	@ (800086c <SetServoAngle+0xd0>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	68fa      	ldr	r2, [r7, #12]
 8000830:	639a      	str	r2, [r3, #56]	@ 0x38
 8000832:	e000      	b.n	8000836 <SetServoAngle+0x9a>
    default: break;
 8000834:	bf00      	nop
  }

  // Log action
  sprintf(txBuffer, "Setting Servo %d to %d°\r\n", servoId, angle);
 8000836:	79fa      	ldrb	r2, [r7, #7]
 8000838:	88bb      	ldrh	r3, [r7, #4]
 800083a:	490d      	ldr	r1, [pc, #52]	@ (8000870 <SetServoAngle+0xd4>)
 800083c:	480d      	ldr	r0, [pc, #52]	@ (8000874 <SetServoAngle+0xd8>)
 800083e:	f003 fe8d 	bl	800455c <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer, strlen(txBuffer), HAL_MAX_DELAY);
 8000842:	480c      	ldr	r0, [pc, #48]	@ (8000874 <SetServoAngle+0xd8>)
 8000844:	f7ff fcc4 	bl	80001d0 <strlen>
 8000848:	4603      	mov	r3, r0
 800084a:	b29a      	uxth	r2, r3
 800084c:	f04f 33ff 	mov.w	r3, #4294967295
 8000850:	4908      	ldr	r1, [pc, #32]	@ (8000874 <SetServoAngle+0xd8>)
 8000852:	4809      	ldr	r0, [pc, #36]	@ (8000878 <SetServoAngle+0xdc>)
 8000854:	f003 f952 	bl	8003afc <HAL_UART_Transmit>
}
 8000858:	bf00      	nop
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	b60b60b7 	.word	0xb60b60b7
 8000864:	2000010c 	.word	0x2000010c
 8000868:	200000c0 	.word	0x200000c0
 800086c:	20000158 	.word	0x20000158
 8000870:	08004d58 	.word	0x08004d58
 8000874:	2000022c 	.word	0x2000022c
 8000878:	200001a4 	.word	0x200001a4

0800087c <touch_pad_handler>:
  * @brief Handle touch sensor interrupt
  * @param pin_index: EXTI line (0-15)
  * @retval None
  */
void touch_pad_handler(uint8_t pin_index)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af02      	add	r7, sp, #8
 8000882:	4603      	mov	r3, r0
 8000884:	71fb      	strb	r3, [r7, #7]
  // Map EXTI line to touch sensor index (0-5)
  static const uint8_t touch_pins[6] = {7, 6, 5, 4, 3, 13}; // PB7, PB6, PB5, PB4, PB3, PB13
  static const uint8_t touch_ports[6] = {1, 1, 1, 1, 1, 1}; // GPIOB=1
  uint8_t touch_index = 255;
 8000886:	23ff      	movs	r3, #255	@ 0xff
 8000888:	73fb      	strb	r3, [r7, #15]

  for (uint8_t i = 0; i < 6; i++)
 800088a:	2300      	movs	r3, #0
 800088c:	73bb      	strb	r3, [r7, #14]
 800088e:	e010      	b.n	80008b2 <touch_pad_handler+0x36>
  {
    if (pin_index == touch_pins[i] && touch_ports[i] == 1) // All on GPIOB
 8000890:	7bbb      	ldrb	r3, [r7, #14]
 8000892:	4a2d      	ldr	r2, [pc, #180]	@ (8000948 <touch_pad_handler+0xcc>)
 8000894:	5cd3      	ldrb	r3, [r2, r3]
 8000896:	79fa      	ldrb	r2, [r7, #7]
 8000898:	429a      	cmp	r2, r3
 800089a:	d107      	bne.n	80008ac <touch_pad_handler+0x30>
 800089c:	7bbb      	ldrb	r3, [r7, #14]
 800089e:	4a2b      	ldr	r2, [pc, #172]	@ (800094c <touch_pad_handler+0xd0>)
 80008a0:	5cd3      	ldrb	r3, [r2, r3]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d102      	bne.n	80008ac <touch_pad_handler+0x30>
    {
      touch_index = i;
 80008a6:	7bbb      	ldrb	r3, [r7, #14]
 80008a8:	73fb      	strb	r3, [r7, #15]
      break;
 80008aa:	e005      	b.n	80008b8 <touch_pad_handler+0x3c>
  for (uint8_t i = 0; i < 6; i++)
 80008ac:	7bbb      	ldrb	r3, [r7, #14]
 80008ae:	3301      	adds	r3, #1
 80008b0:	73bb      	strb	r3, [r7, #14]
 80008b2:	7bbb      	ldrb	r3, [r7, #14]
 80008b4:	2b05      	cmp	r3, #5
 80008b6:	d9eb      	bls.n	8000890 <touch_pad_handler+0x14>
    }
  }

  if (touch_index < 6)
 80008b8:	7bfb      	ldrb	r3, [r7, #15]
 80008ba:	2b05      	cmp	r3, #5
 80008bc:	d83f      	bhi.n	800093e <touch_pad_handler+0xc2>
  {
    uint8_t servoId = touch_to_servo_map[touch_index];
 80008be:	7bfb      	ldrb	r3, [r7, #15]
 80008c0:	4a23      	ldr	r2, [pc, #140]	@ (8000950 <touch_pad_handler+0xd4>)
 80008c2:	5cd3      	ldrb	r3, [r2, r3]
 80008c4:	737b      	strb	r3, [r7, #13]
    if (servoId >= 1 && servoId <= 6)
 80008c6:	7b7b      	ldrb	r3, [r7, #13]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d038      	beq.n	800093e <touch_pad_handler+0xc2>
 80008cc:	7b7b      	ldrb	r3, [r7, #13]
 80008ce:	2b06      	cmp	r3, #6
 80008d0:	d835      	bhi.n	800093e <touch_pad_handler+0xc2>
    {
      // Toggle servo state
      uint8_t servoIndex = servoId - 1; // Array index (0-5)
 80008d2:	7b7b      	ldrb	r3, [r7, #13]
 80008d4:	3b01      	subs	r3, #1
 80008d6:	733b      	strb	r3, [r7, #12]
      servo_states[servoIndex] = !servo_states[servoIndex];
 80008d8:	7b3b      	ldrb	r3, [r7, #12]
 80008da:	4a1e      	ldr	r2, [pc, #120]	@ (8000954 <touch_pad_handler+0xd8>)
 80008dc:	5cd3      	ldrb	r3, [r2, r3]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	bf0c      	ite	eq
 80008e2:	2301      	moveq	r3, #1
 80008e4:	2300      	movne	r3, #0
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	7b3b      	ldrb	r3, [r7, #12]
 80008ea:	4611      	mov	r1, r2
 80008ec:	4a19      	ldr	r2, [pc, #100]	@ (8000954 <touch_pad_handler+0xd8>)
 80008ee:	54d1      	strb	r1, [r2, r3]
      uint16_t angle = servo_states[servoIndex] ? 90 : 0;
 80008f0:	7b3b      	ldrb	r3, [r7, #12]
 80008f2:	4a18      	ldr	r2, [pc, #96]	@ (8000954 <touch_pad_handler+0xd8>)
 80008f4:	5cd3      	ldrb	r3, [r2, r3]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <touch_pad_handler+0x82>
 80008fa:	235a      	movs	r3, #90	@ 0x5a
 80008fc:	e000      	b.n	8000900 <touch_pad_handler+0x84>
 80008fe:	2300      	movs	r3, #0
 8000900:	817b      	strh	r3, [r7, #10]

      sprintf(txBuffer, "Touch detected on PB%d, toggling Servo %d to %d°\r\n",
              touch_pins[touch_index], servoId, angle);
 8000902:	7bfb      	ldrb	r3, [r7, #15]
 8000904:	4a10      	ldr	r2, [pc, #64]	@ (8000948 <touch_pad_handler+0xcc>)
 8000906:	5cd3      	ldrb	r3, [r2, r3]
      sprintf(txBuffer, "Touch detected on PB%d, toggling Servo %d to %d°\r\n",
 8000908:	4619      	mov	r1, r3
 800090a:	7b7a      	ldrb	r2, [r7, #13]
 800090c:	897b      	ldrh	r3, [r7, #10]
 800090e:	9300      	str	r3, [sp, #0]
 8000910:	4613      	mov	r3, r2
 8000912:	460a      	mov	r2, r1
 8000914:	4910      	ldr	r1, [pc, #64]	@ (8000958 <touch_pad_handler+0xdc>)
 8000916:	4811      	ldr	r0, [pc, #68]	@ (800095c <touch_pad_handler+0xe0>)
 8000918:	f003 fe20 	bl	800455c <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer, strlen(txBuffer), HAL_MAX_DELAY);
 800091c:	480f      	ldr	r0, [pc, #60]	@ (800095c <touch_pad_handler+0xe0>)
 800091e:	f7ff fc57 	bl	80001d0 <strlen>
 8000922:	4603      	mov	r3, r0
 8000924:	b29a      	uxth	r2, r3
 8000926:	f04f 33ff 	mov.w	r3, #4294967295
 800092a:	490c      	ldr	r1, [pc, #48]	@ (800095c <touch_pad_handler+0xe0>)
 800092c:	480c      	ldr	r0, [pc, #48]	@ (8000960 <touch_pad_handler+0xe4>)
 800092e:	f003 f8e5 	bl	8003afc <HAL_UART_Transmit>

      SetServoAngle(servoId, angle);
 8000932:	897a      	ldrh	r2, [r7, #10]
 8000934:	7b7b      	ldrb	r3, [r7, #13]
 8000936:	4611      	mov	r1, r2
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff ff2f 	bl	800079c <SetServoAngle>
    }
  }
}
 800093e:	bf00      	nop
 8000940:	3710      	adds	r7, #16
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	08004de4 	.word	0x08004de4
 800094c:	08004dec 	.word	0x08004dec
 8000950:	20000000 	.word	0x20000000
 8000954:	20000290 	.word	0x20000290
 8000958:	08004d74 	.word	0x08004d74
 800095c:	2000022c 	.word	0x2000022c
 8000960:	200001a4 	.word	0x200001a4

08000964 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800096a:	f000 fcad 	bl	80012c8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800096e:	f000 f889 	bl	8000a84 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000972:	f000 fa2d 	bl	8000dd0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000976:	f000 f8c9 	bl	8000b0c <MX_TIM2_Init>
  MX_TIM3_Init();
 800097a:	f000 f92d 	bl	8000bd8 <MX_TIM3_Init>
  MX_TIM4_Init();
 800097e:	f000 f991 	bl	8000ca4 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000982:	f000 f9f5 	bl	8000d70 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initialize USART1 debug
  sprintf(txBuffer, "System Started\r\n");
 8000986:	4938      	ldr	r1, [pc, #224]	@ (8000a68 <main+0x104>)
 8000988:	4838      	ldr	r0, [pc, #224]	@ (8000a6c <main+0x108>)
 800098a:	f003 fde7 	bl	800455c <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer, strlen(txBuffer), HAL_MAX_DELAY);
 800098e:	4837      	ldr	r0, [pc, #220]	@ (8000a6c <main+0x108>)
 8000990:	f7ff fc1e 	bl	80001d0 <strlen>
 8000994:	4603      	mov	r3, r0
 8000996:	b29a      	uxth	r2, r3
 8000998:	f04f 33ff 	mov.w	r3, #4294967295
 800099c:	4933      	ldr	r1, [pc, #204]	@ (8000a6c <main+0x108>)
 800099e:	4834      	ldr	r0, [pc, #208]	@ (8000a70 <main+0x10c>)
 80009a0:	f003 f8ac 	bl	8003afc <HAL_UART_Transmit>

  // Initialize touch sensors
  GPIO *touch_pads_pb = init_port(B, INPUT, 3, 13); // PB3-PB7, PB13
 80009a4:	230d      	movs	r3, #13
 80009a6:	2203      	movs	r2, #3
 80009a8:	2100      	movs	r1, #0
 80009aa:	2001      	movs	r0, #1
 80009ac:	f7ff fcca 	bl	8000344 <init_port>
 80009b0:	6038      	str	r0, [r7, #0]
  // Enable interrupts for touch sensors
  enable_interupt(touch_pads_pb, 3, RISING_EDGE, 0, &touch_pad_handler); // PB3
 80009b2:	4b30      	ldr	r3, [pc, #192]	@ (8000a74 <main+0x110>)
 80009b4:	9300      	str	r3, [sp, #0]
 80009b6:	2300      	movs	r3, #0
 80009b8:	2200      	movs	r2, #0
 80009ba:	2103      	movs	r1, #3
 80009bc:	6838      	ldr	r0, [r7, #0]
 80009be:	f7ff fe5f 	bl	8000680 <enable_interupt>
  enable_interupt(touch_pads_pb, 4, RISING_EDGE, 0, &touch_pad_handler); // PB4
 80009c2:	4b2c      	ldr	r3, [pc, #176]	@ (8000a74 <main+0x110>)
 80009c4:	9300      	str	r3, [sp, #0]
 80009c6:	2300      	movs	r3, #0
 80009c8:	2200      	movs	r2, #0
 80009ca:	2104      	movs	r1, #4
 80009cc:	6838      	ldr	r0, [r7, #0]
 80009ce:	f7ff fe57 	bl	8000680 <enable_interupt>
  enable_interupt(touch_pads_pb, 5, RISING_EDGE, 0, &touch_pad_handler); // PB5
 80009d2:	4b28      	ldr	r3, [pc, #160]	@ (8000a74 <main+0x110>)
 80009d4:	9300      	str	r3, [sp, #0]
 80009d6:	2300      	movs	r3, #0
 80009d8:	2200      	movs	r2, #0
 80009da:	2105      	movs	r1, #5
 80009dc:	6838      	ldr	r0, [r7, #0]
 80009de:	f7ff fe4f 	bl	8000680 <enable_interupt>
  enable_interupt(touch_pads_pb, 6, RISING_EDGE, 0, &touch_pad_handler); // PB6
 80009e2:	4b24      	ldr	r3, [pc, #144]	@ (8000a74 <main+0x110>)
 80009e4:	9300      	str	r3, [sp, #0]
 80009e6:	2300      	movs	r3, #0
 80009e8:	2200      	movs	r2, #0
 80009ea:	2106      	movs	r1, #6
 80009ec:	6838      	ldr	r0, [r7, #0]
 80009ee:	f7ff fe47 	bl	8000680 <enable_interupt>
  enable_interupt(touch_pads_pb, 7, RISING_EDGE, 0, &touch_pad_handler); // PB7
 80009f2:	4b20      	ldr	r3, [pc, #128]	@ (8000a74 <main+0x110>)
 80009f4:	9300      	str	r3, [sp, #0]
 80009f6:	2300      	movs	r3, #0
 80009f8:	2200      	movs	r2, #0
 80009fa:	2107      	movs	r1, #7
 80009fc:	6838      	ldr	r0, [r7, #0]
 80009fe:	f7ff fe3f 	bl	8000680 <enable_interupt>
  enable_interupt(touch_pads_pb, 13, RISING_EDGE, 0, &touch_pad_handler); // PB13
 8000a02:	4b1c      	ldr	r3, [pc, #112]	@ (8000a74 <main+0x110>)
 8000a04:	9300      	str	r3, [sp, #0]
 8000a06:	2300      	movs	r3, #0
 8000a08:	2200      	movs	r2, #0
 8000a0a:	210d      	movs	r1, #13
 8000a0c:	6838      	ldr	r0, [r7, #0]
 8000a0e:	f7ff fe37 	bl	8000680 <enable_interupt>

  // Initialize servos: Start PWM
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // Servo 1: PE2
 8000a12:	2100      	movs	r1, #0
 8000a14:	4818      	ldr	r0, [pc, #96]	@ (8000a78 <main+0x114>)
 8000a16:	f002 f9f7 	bl	8002e08 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // Servo 2: PE3
 8000a1a:	2104      	movs	r1, #4
 8000a1c:	4816      	ldr	r0, [pc, #88]	@ (8000a78 <main+0x114>)
 8000a1e:	f002 f9f3 	bl	8002e08 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // Servo 3: PA0
 8000a22:	2100      	movs	r1, #0
 8000a24:	4815      	ldr	r0, [pc, #84]	@ (8000a7c <main+0x118>)
 8000a26:	f002 f9ef 	bl	8002e08 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // Servo 4: PA1
 8000a2a:	2104      	movs	r1, #4
 8000a2c:	4813      	ldr	r0, [pc, #76]	@ (8000a7c <main+0x118>)
 8000a2e:	f002 f9eb 	bl	8002e08 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); // Servo 5: PD12
 8000a32:	2100      	movs	r1, #0
 8000a34:	4812      	ldr	r0, [pc, #72]	@ (8000a80 <main+0x11c>)
 8000a36:	f002 f9e7 	bl	8002e08 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); // Servo 6: PD13
 8000a3a:	2104      	movs	r1, #4
 8000a3c:	4810      	ldr	r0, [pc, #64]	@ (8000a80 <main+0x11c>)
 8000a3e:	f002 f9e3 	bl	8002e08 <HAL_TIM_PWM_Start>

  // Calibrate: Set all servos to 0°
  for (uint8_t servoId = 1; servoId <= 6; servoId++)
 8000a42:	2301      	movs	r3, #1
 8000a44:	71fb      	strb	r3, [r7, #7]
 8000a46:	e007      	b.n	8000a58 <main+0xf4>
  {
    SetServoAngle(servoId, 0);
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff fea5 	bl	800079c <SetServoAngle>
  for (uint8_t servoId = 1; servoId <= 6; servoId++)
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	3301      	adds	r3, #1
 8000a56:	71fb      	strb	r3, [r7, #7]
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	2b06      	cmp	r3, #6
 8000a5c:	d9f4      	bls.n	8000a48 <main+0xe4>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // Idle: Touch handling is interrupt-driven
    HAL_Delay(100); // Prevent watchdog issues
 8000a5e:	2064      	movs	r0, #100	@ 0x64
 8000a60:	f000 fc98 	bl	8001394 <HAL_Delay>
 8000a64:	e7fb      	b.n	8000a5e <main+0xfa>
 8000a66:	bf00      	nop
 8000a68:	08004da8 	.word	0x08004da8
 8000a6c:	2000022c 	.word	0x2000022c
 8000a70:	200001a4 	.word	0x200001a4
 8000a74:	0800087d 	.word	0x0800087d
 8000a78:	2000010c 	.word	0x2000010c
 8000a7c:	200000c0 	.word	0x200000c0
 8000a80:	20000158 	.word	0x20000158

08000a84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b090      	sub	sp, #64	@ 0x40
 8000a88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a8a:	f107 0318 	add.w	r3, r7, #24
 8000a8e:	2228      	movs	r2, #40	@ 0x28
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f003 fd82 	bl	800459c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
 8000aa4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000aaa:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000aae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ab8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000abc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000abe:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac4:	f107 0318 	add.w	r3, r7, #24
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f000 fee7 	bl	800189c <HAL_RCC_OscConfig>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000ad4:	f000 fa20 	bl	8000f18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad8:	230f      	movs	r3, #15
 8000ada:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000adc:	2302      	movs	r3, #2
 8000ade:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ae4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ae8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aea:	2300      	movs	r3, #0
 8000aec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	2101      	movs	r1, #1
 8000af2:	4618      	mov	r0, r3
 8000af4:	f001 ff10 	bl	8002918 <HAL_RCC_ClockConfig>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000afe:	f000 fa0b 	bl	8000f18 <Error_Handler>
  }
}
 8000b02:	bf00      	nop
 8000b04:	3740      	adds	r7, #64	@ 0x40
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
	...

08000b0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	@ 0x28
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b12:	f107 031c 	add.w	r3, r7, #28
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b1e:	463b      	mov	r3, r7
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
 8000b2c:	615a      	str	r2, [r3, #20]
 8000b2e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b30:	4b28      	ldr	r3, [pc, #160]	@ (8000bd4 <MX_TIM2_Init+0xc8>)
 8000b32:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 479; // 48 MHz / 480 = 100 kHz
 8000b38:	4b26      	ldr	r3, [pc, #152]	@ (8000bd4 <MX_TIM2_Init+0xc8>)
 8000b3a:	f240 12df 	movw	r2, #479	@ 0x1df
 8000b3e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b40:	4b24      	ldr	r3, [pc, #144]	@ (8000bd4 <MX_TIM2_Init+0xc8>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = PWM_PERIOD_TICKS - 1; // 20 ms
 8000b46:	4b23      	ldr	r3, [pc, #140]	@ (8000bd4 <MX_TIM2_Init+0xc8>)
 8000b48:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000b4c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b4e:	4b21      	ldr	r3, [pc, #132]	@ (8000bd4 <MX_TIM2_Init+0xc8>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b54:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd4 <MX_TIM2_Init+0xc8>)
 8000b56:	2280      	movs	r2, #128	@ 0x80
 8000b58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b5a:	481e      	ldr	r0, [pc, #120]	@ (8000bd4 <MX_TIM2_Init+0xc8>)
 8000b5c:	f002 f8fc 	bl	8002d58 <HAL_TIM_PWM_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8000b66:	f000 f9d7 	bl	8000f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	4619      	mov	r1, r3
 8000b78:	4816      	ldr	r0, [pc, #88]	@ (8000bd4 <MX_TIM2_Init+0xc8>)
 8000b7a:	f002 fef1 	bl	8003960 <HAL_TIMEx_MasterConfigSynchronization>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000b84:	f000 f9c8 	bl	8000f18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b88:	2360      	movs	r3, #96	@ 0x60
 8000b8a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b98:	463b      	mov	r3, r7
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	480d      	ldr	r0, [pc, #52]	@ (8000bd4 <MX_TIM2_Init+0xc8>)
 8000ba0:	f002 fa32 	bl	8003008 <HAL_TIM_PWM_ConfigChannel>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000baa:	f000 f9b5 	bl	8000f18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bae:	463b      	mov	r3, r7
 8000bb0:	2204      	movs	r2, #4
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4807      	ldr	r0, [pc, #28]	@ (8000bd4 <MX_TIM2_Init+0xc8>)
 8000bb6:	f002 fa27 	bl	8003008 <HAL_TIM_PWM_ConfigChannel>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8000bc0:	f000 f9aa 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bc4:	4803      	ldr	r0, [pc, #12]	@ (8000bd4 <MX_TIM2_Init+0xc8>)
 8000bc6:	f000 fa17 	bl	8000ff8 <HAL_TIM_MspPostInit>
}
 8000bca:	bf00      	nop
 8000bcc:	3728      	adds	r7, #40	@ 0x28
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200000c0 	.word	0x200000c0

08000bd8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	@ 0x28
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_Init 0 */
  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bea:	463b      	mov	r3, r7
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
 8000bf8:	615a      	str	r2, [r3, #20]
 8000bfa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bfc:	4b27      	ldr	r3, [pc, #156]	@ (8000c9c <MX_TIM3_Init+0xc4>)
 8000bfe:	4a28      	ldr	r2, [pc, #160]	@ (8000ca0 <MX_TIM3_Init+0xc8>)
 8000c00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 479; // 48 MHz / 480 = 100 kHz
 8000c02:	4b26      	ldr	r3, [pc, #152]	@ (8000c9c <MX_TIM3_Init+0xc4>)
 8000c04:	f240 12df 	movw	r2, #479	@ 0x1df
 8000c08:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0a:	4b24      	ldr	r3, [pc, #144]	@ (8000c9c <MX_TIM3_Init+0xc4>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = PWM_PERIOD_TICKS - 1; // 20 ms
 8000c10:	4b22      	ldr	r3, [pc, #136]	@ (8000c9c <MX_TIM3_Init+0xc4>)
 8000c12:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000c16:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c18:	4b20      	ldr	r3, [pc, #128]	@ (8000c9c <MX_TIM3_Init+0xc4>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000c9c <MX_TIM3_Init+0xc4>)
 8000c20:	2280      	movs	r2, #128	@ 0x80
 8000c22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c24:	481d      	ldr	r0, [pc, #116]	@ (8000c9c <MX_TIM3_Init+0xc4>)
 8000c26:	f002 f897 	bl	8002d58 <HAL_TIM_PWM_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8000c30:	f000 f972 	bl	8000f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c3c:	f107 031c 	add.w	r3, r7, #28
 8000c40:	4619      	mov	r1, r3
 8000c42:	4816      	ldr	r0, [pc, #88]	@ (8000c9c <MX_TIM3_Init+0xc4>)
 8000c44:	f002 fe8c 	bl	8003960 <HAL_TIMEx_MasterConfigSynchronization>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000c4e:	f000 f963 	bl	8000f18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c52:	2360      	movs	r3, #96	@ 0x60
 8000c54:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c62:	463b      	mov	r3, r7
 8000c64:	2200      	movs	r2, #0
 8000c66:	4619      	mov	r1, r3
 8000c68:	480c      	ldr	r0, [pc, #48]	@ (8000c9c <MX_TIM3_Init+0xc4>)
 8000c6a:	f002 f9cd 	bl	8003008 <HAL_TIM_PWM_ConfigChannel>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8000c74:	f000 f950 	bl	8000f18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c78:	463b      	mov	r3, r7
 8000c7a:	2204      	movs	r2, #4
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4807      	ldr	r0, [pc, #28]	@ (8000c9c <MX_TIM3_Init+0xc4>)
 8000c80:	f002 f9c2 	bl	8003008 <HAL_TIM_PWM_ConfigChannel>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8000c8a:	f000 f945 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c8e:	4803      	ldr	r0, [pc, #12]	@ (8000c9c <MX_TIM3_Init+0xc4>)
 8000c90:	f000 f9b2 	bl	8000ff8 <HAL_TIM_MspPostInit>
}
 8000c94:	bf00      	nop
 8000c96:	3728      	adds	r7, #40	@ 0x28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	2000010c 	.word	0x2000010c
 8000ca0:	40000400 	.word	0x40000400

08000ca4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	@ 0x28
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_Init 0 */
  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000caa:	f107 031c 	add.w	r3, r7, #28
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cb6:	463b      	mov	r3, r7
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
 8000cc4:	615a      	str	r2, [r3, #20]
 8000cc6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */
  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cc8:	4b27      	ldr	r3, [pc, #156]	@ (8000d68 <MX_TIM4_Init+0xc4>)
 8000cca:	4a28      	ldr	r2, [pc, #160]	@ (8000d6c <MX_TIM4_Init+0xc8>)
 8000ccc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 479; // 48 MHz / 480 = 100 kHz
 8000cce:	4b26      	ldr	r3, [pc, #152]	@ (8000d68 <MX_TIM4_Init+0xc4>)
 8000cd0:	f240 12df 	movw	r2, #479	@ 0x1df
 8000cd4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd6:	4b24      	ldr	r3, [pc, #144]	@ (8000d68 <MX_TIM4_Init+0xc4>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = PWM_PERIOD_TICKS - 1; // 20 ms
 8000cdc:	4b22      	ldr	r3, [pc, #136]	@ (8000d68 <MX_TIM4_Init+0xc4>)
 8000cde:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000ce2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce4:	4b20      	ldr	r3, [pc, #128]	@ (8000d68 <MX_TIM4_Init+0xc4>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cea:	4b1f      	ldr	r3, [pc, #124]	@ (8000d68 <MX_TIM4_Init+0xc4>)
 8000cec:	2280      	movs	r2, #128	@ 0x80
 8000cee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000cf0:	481d      	ldr	r0, [pc, #116]	@ (8000d68 <MX_TIM4_Init+0xc4>)
 8000cf2:	f002 f831 	bl	8002d58 <HAL_TIM_PWM_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8000cfc:	f000 f90c 	bl	8000f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d04:	2300      	movs	r3, #0
 8000d06:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d08:	f107 031c 	add.w	r3, r7, #28
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4816      	ldr	r0, [pc, #88]	@ (8000d68 <MX_TIM4_Init+0xc4>)
 8000d10:	f002 fe26 	bl	8003960 <HAL_TIMEx_MasterConfigSynchronization>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8000d1a:	f000 f8fd 	bl	8000f18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d1e:	2360      	movs	r3, #96	@ 0x60
 8000d20:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d26:	2300      	movs	r3, #0
 8000d28:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d2e:	463b      	mov	r3, r7
 8000d30:	2200      	movs	r2, #0
 8000d32:	4619      	mov	r1, r3
 8000d34:	480c      	ldr	r0, [pc, #48]	@ (8000d68 <MX_TIM4_Init+0xc4>)
 8000d36:	f002 f967 	bl	8003008 <HAL_TIM_PWM_ConfigChannel>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8000d40:	f000 f8ea 	bl	8000f18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d44:	463b      	mov	r3, r7
 8000d46:	2204      	movs	r2, #4
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4807      	ldr	r0, [pc, #28]	@ (8000d68 <MX_TIM4_Init+0xc4>)
 8000d4c:	f002 f95c 	bl	8003008 <HAL_TIM_PWM_ConfigChannel>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8000d56:	f000 f8df 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d5a:	4803      	ldr	r0, [pc, #12]	@ (8000d68 <MX_TIM4_Init+0xc4>)
 8000d5c:	f000 f94c 	bl	8000ff8 <HAL_TIM_MspPostInit>
}
 8000d60:	bf00      	nop
 8000d62:	3728      	adds	r7, #40	@ 0x28
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000158 	.word	0x20000158
 8000d6c:	40000800 	.word	0x40000800

08000d70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 0 */
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d74:	4b14      	ldr	r3, [pc, #80]	@ (8000dc8 <MX_USART1_UART_Init+0x58>)
 8000d76:	4a15      	ldr	r2, [pc, #84]	@ (8000dcc <MX_USART1_UART_Init+0x5c>)
 8000d78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d7a:	4b13      	ldr	r3, [pc, #76]	@ (8000dc8 <MX_USART1_UART_Init+0x58>)
 8000d7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d82:	4b11      	ldr	r3, [pc, #68]	@ (8000dc8 <MX_USART1_UART_Init+0x58>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d88:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc8 <MX_USART1_UART_Init+0x58>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc8 <MX_USART1_UART_Init+0x58>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d94:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc8 <MX_USART1_UART_Init+0x58>)
 8000d96:	220c      	movs	r2, #12
 8000d98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc8 <MX_USART1_UART_Init+0x58>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da0:	4b09      	ldr	r3, [pc, #36]	@ (8000dc8 <MX_USART1_UART_Init+0x58>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000da6:	4b08      	ldr	r3, [pc, #32]	@ (8000dc8 <MX_USART1_UART_Init+0x58>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dac:	4b06      	ldr	r3, [pc, #24]	@ (8000dc8 <MX_USART1_UART_Init+0x58>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000db2:	4805      	ldr	r0, [pc, #20]	@ (8000dc8 <MX_USART1_UART_Init+0x58>)
 8000db4:	f002 fe54 	bl	8003a60 <HAL_UART_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000dbe:	f000 f8ab 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	200001a4 	.word	0x200001a4
 8000dcc:	40013800 	.word	0x40013800

08000dd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	@ 0x28
 8000dd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd6:	f107 0314 	add.w	r3, r7, #20
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]
 8000de4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de6:	4b47      	ldr	r3, [pc, #284]	@ (8000f04 <MX_GPIO_Init+0x134>)
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	4a46      	ldr	r2, [pc, #280]	@ (8000f04 <MX_GPIO_Init+0x134>)
 8000dec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000df0:	6153      	str	r3, [r2, #20]
 8000df2:	4b44      	ldr	r3, [pc, #272]	@ (8000f04 <MX_GPIO_Init+0x134>)
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfe:	4b41      	ldr	r3, [pc, #260]	@ (8000f04 <MX_GPIO_Init+0x134>)
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	4a40      	ldr	r2, [pc, #256]	@ (8000f04 <MX_GPIO_Init+0x134>)
 8000e04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e08:	6153      	str	r3, [r2, #20]
 8000e0a:	4b3e      	ldr	r3, [pc, #248]	@ (8000f04 <MX_GPIO_Init+0x134>)
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e16:	4b3b      	ldr	r3, [pc, #236]	@ (8000f04 <MX_GPIO_Init+0x134>)
 8000e18:	695b      	ldr	r3, [r3, #20]
 8000e1a:	4a3a      	ldr	r2, [pc, #232]	@ (8000f04 <MX_GPIO_Init+0x134>)
 8000e1c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000e20:	6153      	str	r3, [r2, #20]
 8000e22:	4b38      	ldr	r3, [pc, #224]	@ (8000f04 <MX_GPIO_Init+0x134>)
 8000e24:	695b      	ldr	r3, [r3, #20]
 8000e26:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e2e:	4b35      	ldr	r3, [pc, #212]	@ (8000f04 <MX_GPIO_Init+0x134>)
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	4a34      	ldr	r2, [pc, #208]	@ (8000f04 <MX_GPIO_Init+0x134>)
 8000e34:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000e38:	6153      	str	r3, [r2, #20]
 8000e3a:	4b32      	ldr	r3, [pc, #200]	@ (8000f04 <MX_GPIO_Init+0x134>)
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e46:	4b2f      	ldr	r3, [pc, #188]	@ (8000f04 <MX_GPIO_Init+0x134>)
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	4a2e      	ldr	r2, [pc, #184]	@ (8000f04 <MX_GPIO_Init+0x134>)
 8000e4c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e50:	6153      	str	r3, [r2, #20]
 8000e52:	4b2c      	ldr	r3, [pc, #176]	@ (8000f04 <MX_GPIO_Init+0x134>)
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e5a:	603b      	str	r3, [r7, #0]
 8000e5c:	683b      	ldr	r3, [r7, #0]

  /* Configure PB3-PB7, PB13 for touch sensors */
  GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_13;
 8000e5e:	f242 03f8 	movw	r3, #8440	@ 0x20f8
 8000e62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN; // Ensure low when not touched
 8000e68:	2302      	movs	r3, #2
 8000e6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	4619      	mov	r1, r3
 8000e72:	4825      	ldr	r0, [pc, #148]	@ (8000f08 <MX_GPIO_Init+0x138>)
 8000e74:	f000 fb98 	bl	80015a8 <HAL_GPIO_Init>

  /* Configure PC4 (TX), PC5 (RX) for USART1 */
  GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 8000e78:	2330      	movs	r3, #48	@ 0x30
 8000e7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e84:	2303      	movs	r3, #3
 8000e86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e88:	2307      	movs	r3, #7
 8000e8a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4619      	mov	r1, r3
 8000e92:	481e      	ldr	r0, [pc, #120]	@ (8000f0c <MX_GPIO_Init+0x13c>)
 8000e94:	f000 fb88 	bl	80015a8 <HAL_GPIO_Init>

  /* Configure PA0, PA1 for TIM2_CH1-2 (Servos 3-4) */
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eb6:	f000 fb77 	bl	80015a8 <HAL_GPIO_Init>

  /* Configure PE2, PE3 for TIM3_CH1-2 (Servos 1-2) */
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8000eba:	230c      	movs	r3, #12
 8000ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ece:	f107 0314 	add.w	r3, r7, #20
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	480e      	ldr	r0, [pc, #56]	@ (8000f10 <MX_GPIO_Init+0x140>)
 8000ed6:	f000 fb67 	bl	80015a8 <HAL_GPIO_Init>

  /* Configure PD12, PD13 for TIM4_CH1-2 (Servos 5-6) */
  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 8000eda:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000ede:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000eec:	2302      	movs	r3, #2
 8000eee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4807      	ldr	r0, [pc, #28]	@ (8000f14 <MX_GPIO_Init+0x144>)
 8000ef8:	f000 fb56 	bl	80015a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000efc:	bf00      	nop
 8000efe:	3728      	adds	r7, #40	@ 0x28
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40021000 	.word	0x40021000
 8000f08:	48000400 	.word	0x48000400
 8000f0c:	48000800 	.word	0x48000800
 8000f10:	48001000 	.word	0x48001000
 8000f14:	48000c00 	.word	0x48000c00

08000f18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f1c:	b672      	cpsid	i
}
 8000f1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <Error_Handler+0x8>

08000f24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f68 <HAL_MspInit+0x44>)
 8000f2c:	699b      	ldr	r3, [r3, #24]
 8000f2e:	4a0e      	ldr	r2, [pc, #56]	@ (8000f68 <HAL_MspInit+0x44>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	6193      	str	r3, [r2, #24]
 8000f36:	4b0c      	ldr	r3, [pc, #48]	@ (8000f68 <HAL_MspInit+0x44>)
 8000f38:	699b      	ldr	r3, [r3, #24]
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f42:	4b09      	ldr	r3, [pc, #36]	@ (8000f68 <HAL_MspInit+0x44>)
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	4a08      	ldr	r2, [pc, #32]	@ (8000f68 <HAL_MspInit+0x44>)
 8000f48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f4c:	61d3      	str	r3, [r2, #28]
 8000f4e:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <HAL_MspInit+0x44>)
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f56:	603b      	str	r3, [r7, #0]
 8000f58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	40021000 	.word	0x40021000

08000f6c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b087      	sub	sp, #28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f7c:	d10c      	bne.n	8000f98 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fec <HAL_TIM_PWM_MspInit+0x80>)
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	4a1a      	ldr	r2, [pc, #104]	@ (8000fec <HAL_TIM_PWM_MspInit+0x80>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	61d3      	str	r3, [r2, #28]
 8000f8a:	4b18      	ldr	r3, [pc, #96]	@ (8000fec <HAL_TIM_PWM_MspInit+0x80>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000f96:	e022      	b.n	8000fde <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a14      	ldr	r2, [pc, #80]	@ (8000ff0 <HAL_TIM_PWM_MspInit+0x84>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d10c      	bne.n	8000fbc <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fa2:	4b12      	ldr	r3, [pc, #72]	@ (8000fec <HAL_TIM_PWM_MspInit+0x80>)
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	4a11      	ldr	r2, [pc, #68]	@ (8000fec <HAL_TIM_PWM_MspInit+0x80>)
 8000fa8:	f043 0302 	orr.w	r3, r3, #2
 8000fac:	61d3      	str	r3, [r2, #28]
 8000fae:	4b0f      	ldr	r3, [pc, #60]	@ (8000fec <HAL_TIM_PWM_MspInit+0x80>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]
}
 8000fba:	e010      	b.n	8000fde <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM4)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a0c      	ldr	r2, [pc, #48]	@ (8000ff4 <HAL_TIM_PWM_MspInit+0x88>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d10b      	bne.n	8000fde <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000fc6:	4b09      	ldr	r3, [pc, #36]	@ (8000fec <HAL_TIM_PWM_MspInit+0x80>)
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	4a08      	ldr	r2, [pc, #32]	@ (8000fec <HAL_TIM_PWM_MspInit+0x80>)
 8000fcc:	f043 0304 	orr.w	r3, r3, #4
 8000fd0:	61d3      	str	r3, [r2, #28]
 8000fd2:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <HAL_TIM_PWM_MspInit+0x80>)
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	f003 0304 	and.w	r3, r3, #4
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
}
 8000fde:	bf00      	nop
 8000fe0:	371c      	adds	r7, #28
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40000400 	.word	0x40000400
 8000ff4:	40000800 	.word	0x40000800

08000ff8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	@ 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001018:	d11d      	bne.n	8001056 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	4b33      	ldr	r3, [pc, #204]	@ (80010e8 <HAL_TIM_MspPostInit+0xf0>)
 800101c:	695b      	ldr	r3, [r3, #20]
 800101e:	4a32      	ldr	r2, [pc, #200]	@ (80010e8 <HAL_TIM_MspPostInit+0xf0>)
 8001020:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001024:	6153      	str	r3, [r2, #20]
 8001026:	4b30      	ldr	r3, [pc, #192]	@ (80010e8 <HAL_TIM_MspPostInit+0xf0>)
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001032:	2303      	movs	r3, #3
 8001034:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001036:	2302      	movs	r3, #2
 8001038:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103e:	2300      	movs	r3, #0
 8001040:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001042:	2301      	movs	r3, #1
 8001044:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	4619      	mov	r1, r3
 800104c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001050:	f000 faaa 	bl	80015a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001054:	e043      	b.n	80010de <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM3)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a24      	ldr	r2, [pc, #144]	@ (80010ec <HAL_TIM_MspPostInit+0xf4>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d11c      	bne.n	800109a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001060:	4b21      	ldr	r3, [pc, #132]	@ (80010e8 <HAL_TIM_MspPostInit+0xf0>)
 8001062:	695b      	ldr	r3, [r3, #20]
 8001064:	4a20      	ldr	r2, [pc, #128]	@ (80010e8 <HAL_TIM_MspPostInit+0xf0>)
 8001066:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800106a:	6153      	str	r3, [r2, #20]
 800106c:	4b1e      	ldr	r3, [pc, #120]	@ (80010e8 <HAL_TIM_MspPostInit+0xf0>)
 800106e:	695b      	ldr	r3, [r3, #20]
 8001070:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001078:	230c      	movs	r3, #12
 800107a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001084:	2300      	movs	r3, #0
 8001086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001088:	2302      	movs	r3, #2
 800108a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	4619      	mov	r1, r3
 8001092:	4817      	ldr	r0, [pc, #92]	@ (80010f0 <HAL_TIM_MspPostInit+0xf8>)
 8001094:	f000 fa88 	bl	80015a8 <HAL_GPIO_Init>
}
 8001098:	e021      	b.n	80010de <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM4)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a15      	ldr	r2, [pc, #84]	@ (80010f4 <HAL_TIM_MspPostInit+0xfc>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d11c      	bne.n	80010de <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a4:	4b10      	ldr	r3, [pc, #64]	@ (80010e8 <HAL_TIM_MspPostInit+0xf0>)
 80010a6:	695b      	ldr	r3, [r3, #20]
 80010a8:	4a0f      	ldr	r2, [pc, #60]	@ (80010e8 <HAL_TIM_MspPostInit+0xf0>)
 80010aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80010ae:	6153      	str	r3, [r2, #20]
 80010b0:	4b0d      	ldr	r3, [pc, #52]	@ (80010e8 <HAL_TIM_MspPostInit+0xf0>)
 80010b2:	695b      	ldr	r3, [r3, #20]
 80010b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80010bc:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80010c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80010ce:	2302      	movs	r3, #2
 80010d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	4619      	mov	r1, r3
 80010d8:	4807      	ldr	r0, [pc, #28]	@ (80010f8 <HAL_TIM_MspPostInit+0x100>)
 80010da:	f000 fa65 	bl	80015a8 <HAL_GPIO_Init>
}
 80010de:	bf00      	nop
 80010e0:	3728      	adds	r7, #40	@ 0x28
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40021000 	.word	0x40021000
 80010ec:	40000400 	.word	0x40000400
 80010f0:	48001000 	.word	0x48001000
 80010f4:	40000800 	.word	0x40000800
 80010f8:	48000c00 	.word	0x48000c00

080010fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	@ 0x28
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a17      	ldr	r2, [pc, #92]	@ (8001178 <HAL_UART_MspInit+0x7c>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d127      	bne.n	800116e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800111e:	4b17      	ldr	r3, [pc, #92]	@ (800117c <HAL_UART_MspInit+0x80>)
 8001120:	699b      	ldr	r3, [r3, #24]
 8001122:	4a16      	ldr	r2, [pc, #88]	@ (800117c <HAL_UART_MspInit+0x80>)
 8001124:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001128:	6193      	str	r3, [r2, #24]
 800112a:	4b14      	ldr	r3, [pc, #80]	@ (800117c <HAL_UART_MspInit+0x80>)
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001136:	4b11      	ldr	r3, [pc, #68]	@ (800117c <HAL_UART_MspInit+0x80>)
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	4a10      	ldr	r2, [pc, #64]	@ (800117c <HAL_UART_MspInit+0x80>)
 800113c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001140:	6153      	str	r3, [r2, #20]
 8001142:	4b0e      	ldr	r3, [pc, #56]	@ (800117c <HAL_UART_MspInit+0x80>)
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800114e:	2330      	movs	r3, #48	@ 0x30
 8001150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800115a:	2303      	movs	r3, #3
 800115c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800115e:	2307      	movs	r3, #7
 8001160:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4619      	mov	r1, r3
 8001168:	4805      	ldr	r0, [pc, #20]	@ (8001180 <HAL_UART_MspInit+0x84>)
 800116a:	f000 fa1d 	bl	80015a8 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800116e:	bf00      	nop
 8001170:	3728      	adds	r7, #40	@ 0x28
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40013800 	.word	0x40013800
 800117c:	40021000 	.word	0x40021000
 8001180:	48000800 	.word	0x48000800

08001184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <NMI_Handler+0x4>

0800118c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001190:	bf00      	nop
 8001192:	e7fd      	b.n	8001190 <HardFault_Handler+0x4>

08001194 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001198:	bf00      	nop
 800119a:	e7fd      	b.n	8001198 <MemManage_Handler+0x4>

0800119c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a0:	bf00      	nop
 80011a2:	e7fd      	b.n	80011a0 <BusFault_Handler+0x4>

080011a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a8:	bf00      	nop
 80011aa:	e7fd      	b.n	80011a8 <UsageFault_Handler+0x4>

080011ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011da:	f000 f8bb 	bl	8001354 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011ec:	4a14      	ldr	r2, [pc, #80]	@ (8001240 <_sbrk+0x5c>)
 80011ee:	4b15      	ldr	r3, [pc, #84]	@ (8001244 <_sbrk+0x60>)
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011f8:	4b13      	ldr	r3, [pc, #76]	@ (8001248 <_sbrk+0x64>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d102      	bne.n	8001206 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001200:	4b11      	ldr	r3, [pc, #68]	@ (8001248 <_sbrk+0x64>)
 8001202:	4a12      	ldr	r2, [pc, #72]	@ (800124c <_sbrk+0x68>)
 8001204:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001206:	4b10      	ldr	r3, [pc, #64]	@ (8001248 <_sbrk+0x64>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4413      	add	r3, r2
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	429a      	cmp	r2, r3
 8001212:	d207      	bcs.n	8001224 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001214:	f003 f9da 	bl	80045cc <__errno>
 8001218:	4603      	mov	r3, r0
 800121a:	220c      	movs	r2, #12
 800121c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800121e:	f04f 33ff 	mov.w	r3, #4294967295
 8001222:	e009      	b.n	8001238 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001224:	4b08      	ldr	r3, [pc, #32]	@ (8001248 <_sbrk+0x64>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800122a:	4b07      	ldr	r3, [pc, #28]	@ (8001248 <_sbrk+0x64>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4413      	add	r3, r2
 8001232:	4a05      	ldr	r2, [pc, #20]	@ (8001248 <_sbrk+0x64>)
 8001234:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001236:	68fb      	ldr	r3, [r7, #12]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	2000a000 	.word	0x2000a000
 8001244:	00000400 	.word	0x00000400
 8001248:	20000298 	.word	0x20000298
 800124c:	200003e8 	.word	0x200003e8

08001250 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001254:	4b06      	ldr	r3, [pc, #24]	@ (8001270 <SystemInit+0x20>)
 8001256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800125a:	4a05      	ldr	r2, [pc, #20]	@ (8001270 <SystemInit+0x20>)
 800125c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001260:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001274:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012ac <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001278:	f7ff ffea 	bl	8001250 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800127c:	480c      	ldr	r0, [pc, #48]	@ (80012b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800127e:	490d      	ldr	r1, [pc, #52]	@ (80012b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001280:	4a0d      	ldr	r2, [pc, #52]	@ (80012b8 <LoopForever+0xe>)
  movs r3, #0
 8001282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001284:	e002      	b.n	800128c <LoopCopyDataInit>

08001286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800128a:	3304      	adds	r3, #4

0800128c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800128c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800128e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001290:	d3f9      	bcc.n	8001286 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001292:	4a0a      	ldr	r2, [pc, #40]	@ (80012bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001294:	4c0a      	ldr	r4, [pc, #40]	@ (80012c0 <LoopForever+0x16>)
  movs r3, #0
 8001296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001298:	e001      	b.n	800129e <LoopFillZerobss>

0800129a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800129a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800129c:	3204      	adds	r2, #4

0800129e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800129e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a0:	d3fb      	bcc.n	800129a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012a2:	f003 f999 	bl	80045d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012a6:	f7ff fb5d 	bl	8000964 <main>

080012aa <LoopForever>:

LoopForever:
    b LoopForever
 80012aa:	e7fe      	b.n	80012aa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012ac:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80012b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80012b8:	08004e70 	.word	0x08004e70
  ldr r2, =_sbss
 80012bc:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80012c0:	200003e8 	.word	0x200003e8

080012c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012c4:	e7fe      	b.n	80012c4 <ADC1_2_IRQHandler>
	...

080012c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012cc:	4b08      	ldr	r3, [pc, #32]	@ (80012f0 <HAL_Init+0x28>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a07      	ldr	r2, [pc, #28]	@ (80012f0 <HAL_Init+0x28>)
 80012d2:	f043 0310 	orr.w	r3, r3, #16
 80012d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d8:	2003      	movs	r0, #3
 80012da:	f000 f931 	bl	8001540 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012de:	200f      	movs	r0, #15
 80012e0:	f000 f808 	bl	80012f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e4:	f7ff fe1e 	bl	8000f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40022000 	.word	0x40022000

080012f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012fc:	4b12      	ldr	r3, [pc, #72]	@ (8001348 <HAL_InitTick+0x54>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4b12      	ldr	r3, [pc, #72]	@ (800134c <HAL_InitTick+0x58>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4619      	mov	r1, r3
 8001306:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800130a:	fbb3 f3f1 	udiv	r3, r3, r1
 800130e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001312:	4618      	mov	r0, r3
 8001314:	f000 f93b 	bl	800158e <HAL_SYSTICK_Config>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e00e      	b.n	8001340 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b0f      	cmp	r3, #15
 8001326:	d80a      	bhi.n	800133e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001328:	2200      	movs	r2, #0
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	f04f 30ff 	mov.w	r0, #4294967295
 8001330:	f000 f911 	bl	8001556 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001334:	4a06      	ldr	r2, [pc, #24]	@ (8001350 <HAL_InitTick+0x5c>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800133a:	2300      	movs	r3, #0
 800133c:	e000      	b.n	8001340 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
}
 8001340:	4618      	mov	r0, r3
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000008 	.word	0x20000008
 800134c:	20000010 	.word	0x20000010
 8001350:	2000000c 	.word	0x2000000c

08001354 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001358:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <HAL_IncTick+0x20>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	461a      	mov	r2, r3
 800135e:	4b06      	ldr	r3, [pc, #24]	@ (8001378 <HAL_IncTick+0x24>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4413      	add	r3, r2
 8001364:	4a04      	ldr	r2, [pc, #16]	@ (8001378 <HAL_IncTick+0x24>)
 8001366:	6013      	str	r3, [r2, #0]
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	20000010 	.word	0x20000010
 8001378:	2000029c 	.word	0x2000029c

0800137c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001380:	4b03      	ldr	r3, [pc, #12]	@ (8001390 <HAL_GetTick+0x14>)
 8001382:	681b      	ldr	r3, [r3, #0]
}
 8001384:	4618      	mov	r0, r3
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	2000029c 	.word	0x2000029c

08001394 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800139c:	f7ff ffee 	bl	800137c <HAL_GetTick>
 80013a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ac:	d005      	beq.n	80013ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ae:	4b0a      	ldr	r3, [pc, #40]	@ (80013d8 <HAL_Delay+0x44>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	461a      	mov	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4413      	add	r3, r2
 80013b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80013ba:	bf00      	nop
 80013bc:	f7ff ffde 	bl	800137c <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d8f7      	bhi.n	80013bc <HAL_Delay+0x28>
  {
  }
}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000010 	.word	0x20000010

080013dc <__NVIC_SetPriorityGrouping>:
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001420 <__NVIC_SetPriorityGrouping+0x44>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013f2:	68ba      	ldr	r2, [r7, #8]
 80013f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013f8:	4013      	ands	r3, r2
 80013fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001404:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001408:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800140c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800140e:	4a04      	ldr	r2, [pc, #16]	@ (8001420 <__NVIC_SetPriorityGrouping+0x44>)
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	60d3      	str	r3, [r2, #12]
}
 8001414:	bf00      	nop
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <__NVIC_GetPriorityGrouping>:
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001428:	4b04      	ldr	r3, [pc, #16]	@ (800143c <__NVIC_GetPriorityGrouping+0x18>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	0a1b      	lsrs	r3, r3, #8
 800142e:	f003 0307 	and.w	r3, r3, #7
}
 8001432:	4618      	mov	r0, r3
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <__NVIC_SetPriority>:
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	6039      	str	r1, [r7, #0]
 800144a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800144c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001450:	2b00      	cmp	r3, #0
 8001452:	db0a      	blt.n	800146a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	b2da      	uxtb	r2, r3
 8001458:	490c      	ldr	r1, [pc, #48]	@ (800148c <__NVIC_SetPriority+0x4c>)
 800145a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145e:	0112      	lsls	r2, r2, #4
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	440b      	add	r3, r1
 8001464:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001468:	e00a      	b.n	8001480 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	b2da      	uxtb	r2, r3
 800146e:	4908      	ldr	r1, [pc, #32]	@ (8001490 <__NVIC_SetPriority+0x50>)
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	3b04      	subs	r3, #4
 8001478:	0112      	lsls	r2, r2, #4
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	440b      	add	r3, r1
 800147e:	761a      	strb	r2, [r3, #24]
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	e000e100 	.word	0xe000e100
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001494:	b480      	push	{r7}
 8001496:	b089      	sub	sp, #36	@ 0x24
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	f1c3 0307 	rsb	r3, r3, #7
 80014ae:	2b04      	cmp	r3, #4
 80014b0:	bf28      	it	cs
 80014b2:	2304      	movcs	r3, #4
 80014b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	3304      	adds	r3, #4
 80014ba:	2b06      	cmp	r3, #6
 80014bc:	d902      	bls.n	80014c4 <NVIC_EncodePriority+0x30>
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3b03      	subs	r3, #3
 80014c2:	e000      	b.n	80014c6 <NVIC_EncodePriority+0x32>
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c8:	f04f 32ff 	mov.w	r2, #4294967295
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43da      	mvns	r2, r3
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	401a      	ands	r2, r3
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014dc:	f04f 31ff 	mov.w	r1, #4294967295
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	fa01 f303 	lsl.w	r3, r1, r3
 80014e6:	43d9      	mvns	r1, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ec:	4313      	orrs	r3, r2
         );
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3724      	adds	r7, #36	@ 0x24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
	...

080014fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3b01      	subs	r3, #1
 8001508:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800150c:	d301      	bcc.n	8001512 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800150e:	2301      	movs	r3, #1
 8001510:	e00f      	b.n	8001532 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001512:	4a0a      	ldr	r2, [pc, #40]	@ (800153c <SysTick_Config+0x40>)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3b01      	subs	r3, #1
 8001518:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800151a:	210f      	movs	r1, #15
 800151c:	f04f 30ff 	mov.w	r0, #4294967295
 8001520:	f7ff ff8e 	bl	8001440 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001524:	4b05      	ldr	r3, [pc, #20]	@ (800153c <SysTick_Config+0x40>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800152a:	4b04      	ldr	r3, [pc, #16]	@ (800153c <SysTick_Config+0x40>)
 800152c:	2207      	movs	r2, #7
 800152e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	e000e010 	.word	0xe000e010

08001540 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff ff47 	bl	80013dc <__NVIC_SetPriorityGrouping>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b086      	sub	sp, #24
 800155a:	af00      	add	r7, sp, #0
 800155c:	4603      	mov	r3, r0
 800155e:	60b9      	str	r1, [r7, #8]
 8001560:	607a      	str	r2, [r7, #4]
 8001562:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001568:	f7ff ff5c 	bl	8001424 <__NVIC_GetPriorityGrouping>
 800156c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	68b9      	ldr	r1, [r7, #8]
 8001572:	6978      	ldr	r0, [r7, #20]
 8001574:	f7ff ff8e 	bl	8001494 <NVIC_EncodePriority>
 8001578:	4602      	mov	r2, r0
 800157a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800157e:	4611      	mov	r1, r2
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff ff5d 	bl	8001440 <__NVIC_SetPriority>
}
 8001586:	bf00      	nop
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b082      	sub	sp, #8
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff ffb0 	bl	80014fc <SysTick_Config>
 800159c:	4603      	mov	r3, r0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b087      	sub	sp, #28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015b6:	e154      	b.n	8001862 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	2101      	movs	r1, #1
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	fa01 f303 	lsl.w	r3, r1, r3
 80015c4:	4013      	ands	r3, r2
 80015c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f000 8146 	beq.w	800185c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 0303 	and.w	r3, r3, #3
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d005      	beq.n	80015e8 <HAL_GPIO_Init+0x40>
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 0303 	and.w	r3, r3, #3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d130      	bne.n	800164a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	2203      	movs	r2, #3
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4013      	ands	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	68da      	ldr	r2, [r3, #12]
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	4313      	orrs	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800161e:	2201      	movs	r2, #1
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43db      	mvns	r3, r3
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	4013      	ands	r3, r2
 800162c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	091b      	lsrs	r3, r3, #4
 8001634:	f003 0201 	and.w	r2, r3, #1
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	4313      	orrs	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f003 0303 	and.w	r3, r3, #3
 8001652:	2b03      	cmp	r3, #3
 8001654:	d017      	beq.n	8001686 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	2203      	movs	r2, #3
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43db      	mvns	r3, r3
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	4013      	ands	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	689a      	ldr	r2, [r3, #8]
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	4313      	orrs	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f003 0303 	and.w	r3, r3, #3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d123      	bne.n	80016da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	08da      	lsrs	r2, r3, #3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3208      	adds	r2, #8
 800169a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800169e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	220f      	movs	r2, #15
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4013      	ands	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	691a      	ldr	r2, [r3, #16]
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	f003 0307 	and.w	r3, r3, #7
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	08da      	lsrs	r2, r3, #3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3208      	adds	r2, #8
 80016d4:	6939      	ldr	r1, [r7, #16]
 80016d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	2203      	movs	r2, #3
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43db      	mvns	r3, r3
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	4013      	ands	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f003 0203 	and.w	r2, r3, #3
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	4313      	orrs	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001716:	2b00      	cmp	r3, #0
 8001718:	f000 80a0 	beq.w	800185c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171c:	4b58      	ldr	r3, [pc, #352]	@ (8001880 <HAL_GPIO_Init+0x2d8>)
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	4a57      	ldr	r2, [pc, #348]	@ (8001880 <HAL_GPIO_Init+0x2d8>)
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	6193      	str	r3, [r2, #24]
 8001728:	4b55      	ldr	r3, [pc, #340]	@ (8001880 <HAL_GPIO_Init+0x2d8>)
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001734:	4a53      	ldr	r2, [pc, #332]	@ (8001884 <HAL_GPIO_Init+0x2dc>)
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	089b      	lsrs	r3, r3, #2
 800173a:	3302      	adds	r3, #2
 800173c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001740:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	f003 0303 	and.w	r3, r3, #3
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	220f      	movs	r2, #15
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	4013      	ands	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800175e:	d019      	beq.n	8001794 <HAL_GPIO_Init+0x1ec>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a49      	ldr	r2, [pc, #292]	@ (8001888 <HAL_GPIO_Init+0x2e0>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d013      	beq.n	8001790 <HAL_GPIO_Init+0x1e8>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a48      	ldr	r2, [pc, #288]	@ (800188c <HAL_GPIO_Init+0x2e4>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d00d      	beq.n	800178c <HAL_GPIO_Init+0x1e4>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a47      	ldr	r2, [pc, #284]	@ (8001890 <HAL_GPIO_Init+0x2e8>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d007      	beq.n	8001788 <HAL_GPIO_Init+0x1e0>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4a46      	ldr	r2, [pc, #280]	@ (8001894 <HAL_GPIO_Init+0x2ec>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d101      	bne.n	8001784 <HAL_GPIO_Init+0x1dc>
 8001780:	2304      	movs	r3, #4
 8001782:	e008      	b.n	8001796 <HAL_GPIO_Init+0x1ee>
 8001784:	2305      	movs	r3, #5
 8001786:	e006      	b.n	8001796 <HAL_GPIO_Init+0x1ee>
 8001788:	2303      	movs	r3, #3
 800178a:	e004      	b.n	8001796 <HAL_GPIO_Init+0x1ee>
 800178c:	2302      	movs	r3, #2
 800178e:	e002      	b.n	8001796 <HAL_GPIO_Init+0x1ee>
 8001790:	2301      	movs	r3, #1
 8001792:	e000      	b.n	8001796 <HAL_GPIO_Init+0x1ee>
 8001794:	2300      	movs	r3, #0
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	f002 0203 	and.w	r2, r2, #3
 800179c:	0092      	lsls	r2, r2, #2
 800179e:	4093      	lsls	r3, r2
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017a6:	4937      	ldr	r1, [pc, #220]	@ (8001884 <HAL_GPIO_Init+0x2dc>)
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	089b      	lsrs	r3, r3, #2
 80017ac:	3302      	adds	r3, #2
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017b4:	4b38      	ldr	r3, [pc, #224]	@ (8001898 <HAL_GPIO_Init+0x2f0>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	43db      	mvns	r3, r3
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	4013      	ands	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017d8:	4a2f      	ldr	r2, [pc, #188]	@ (8001898 <HAL_GPIO_Init+0x2f0>)
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017de:	4b2e      	ldr	r3, [pc, #184]	@ (8001898 <HAL_GPIO_Init+0x2f0>)
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	43db      	mvns	r3, r3
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	4013      	ands	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4313      	orrs	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001802:	4a25      	ldr	r2, [pc, #148]	@ (8001898 <HAL_GPIO_Init+0x2f0>)
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001808:	4b23      	ldr	r3, [pc, #140]	@ (8001898 <HAL_GPIO_Init+0x2f0>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	43db      	mvns	r3, r3
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4013      	ands	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	4313      	orrs	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800182c:	4a1a      	ldr	r2, [pc, #104]	@ (8001898 <HAL_GPIO_Init+0x2f0>)
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001832:	4b19      	ldr	r3, [pc, #100]	@ (8001898 <HAL_GPIO_Init+0x2f0>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	43db      	mvns	r3, r3
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4013      	ands	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4313      	orrs	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001856:	4a10      	ldr	r2, [pc, #64]	@ (8001898 <HAL_GPIO_Init+0x2f0>)
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	3301      	adds	r3, #1
 8001860:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	fa22 f303 	lsr.w	r3, r2, r3
 800186c:	2b00      	cmp	r3, #0
 800186e:	f47f aea3 	bne.w	80015b8 <HAL_GPIO_Init+0x10>
  }
}
 8001872:	bf00      	nop
 8001874:	bf00      	nop
 8001876:	371c      	adds	r7, #28
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	40021000 	.word	0x40021000
 8001884:	40010000 	.word	0x40010000
 8001888:	48000400 	.word	0x48000400
 800188c:	48000800 	.word	0x48000800
 8001890:	48000c00 	.word	0x48000c00
 8001894:	48001000 	.word	0x48001000
 8001898:	40010400 	.word	0x40010400

0800189c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018ac:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d102      	bne.n	80018c2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	f001 b823 	b.w	8002908 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 817d 	beq.w	8001bd2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80018d8:	4bbc      	ldr	r3, [pc, #752]	@ (8001bcc <HAL_RCC_OscConfig+0x330>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 030c 	and.w	r3, r3, #12
 80018e0:	2b04      	cmp	r3, #4
 80018e2:	d00c      	beq.n	80018fe <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018e4:	4bb9      	ldr	r3, [pc, #740]	@ (8001bcc <HAL_RCC_OscConfig+0x330>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 030c 	and.w	r3, r3, #12
 80018ec:	2b08      	cmp	r3, #8
 80018ee:	d15c      	bne.n	80019aa <HAL_RCC_OscConfig+0x10e>
 80018f0:	4bb6      	ldr	r3, [pc, #728]	@ (8001bcc <HAL_RCC_OscConfig+0x330>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018fc:	d155      	bne.n	80019aa <HAL_RCC_OscConfig+0x10e>
 80018fe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001902:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001906:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800190a:	fa93 f3a3 	rbit	r3, r3
 800190e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001912:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001916:	fab3 f383 	clz	r3, r3
 800191a:	b2db      	uxtb	r3, r3
 800191c:	095b      	lsrs	r3, r3, #5
 800191e:	b2db      	uxtb	r3, r3
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b01      	cmp	r3, #1
 8001928:	d102      	bne.n	8001930 <HAL_RCC_OscConfig+0x94>
 800192a:	4ba8      	ldr	r3, [pc, #672]	@ (8001bcc <HAL_RCC_OscConfig+0x330>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	e015      	b.n	800195c <HAL_RCC_OscConfig+0xc0>
 8001930:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001934:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001938:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800193c:	fa93 f3a3 	rbit	r3, r3
 8001940:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001944:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001948:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800194c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001950:	fa93 f3a3 	rbit	r3, r3
 8001954:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001958:	4b9c      	ldr	r3, [pc, #624]	@ (8001bcc <HAL_RCC_OscConfig+0x330>)
 800195a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800195c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001960:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001964:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001968:	fa92 f2a2 	rbit	r2, r2
 800196c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001970:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001974:	fab2 f282 	clz	r2, r2
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	f042 0220 	orr.w	r2, r2, #32
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	f002 021f 	and.w	r2, r2, #31
 8001984:	2101      	movs	r1, #1
 8001986:	fa01 f202 	lsl.w	r2, r1, r2
 800198a:	4013      	ands	r3, r2
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 811f 	beq.w	8001bd0 <HAL_RCC_OscConfig+0x334>
 8001992:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001996:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f040 8116 	bne.w	8001bd0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	f000 bfaf 	b.w	8002908 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019ba:	d106      	bne.n	80019ca <HAL_RCC_OscConfig+0x12e>
 80019bc:	4b83      	ldr	r3, [pc, #524]	@ (8001bcc <HAL_RCC_OscConfig+0x330>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a82      	ldr	r2, [pc, #520]	@ (8001bcc <HAL_RCC_OscConfig+0x330>)
 80019c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019c6:	6013      	str	r3, [r2, #0]
 80019c8:	e036      	b.n	8001a38 <HAL_RCC_OscConfig+0x19c>
 80019ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d10c      	bne.n	80019f4 <HAL_RCC_OscConfig+0x158>
 80019da:	4b7c      	ldr	r3, [pc, #496]	@ (8001bcc <HAL_RCC_OscConfig+0x330>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a7b      	ldr	r2, [pc, #492]	@ (8001bcc <HAL_RCC_OscConfig+0x330>)
 80019e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	4b79      	ldr	r3, [pc, #484]	@ (8001bcc <HAL_RCC_OscConfig+0x330>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a78      	ldr	r2, [pc, #480]	@ (8001bcc <HAL_RCC_OscConfig+0x330>)
 80019ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	e021      	b.n	8001a38 <HAL_RCC_OscConfig+0x19c>
 80019f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a04:	d10c      	bne.n	8001a20 <HAL_RCC_OscConfig+0x184>
 8001a06:	4b71      	ldr	r3, [pc, #452]	@ (8001bcc <HAL_RCC_OscConfig+0x330>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a70      	ldr	r2, [pc, #448]	@ (8001bcc <HAL_RCC_OscConfig+0x330>)
 8001a0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	4b6e      	ldr	r3, [pc, #440]	@ (8001bcc <HAL_RCC_OscConfig+0x330>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a6d      	ldr	r2, [pc, #436]	@ (8001bcc <HAL_RCC_OscConfig+0x330>)
 8001a18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	e00b      	b.n	8001a38 <HAL_RCC_OscConfig+0x19c>
 8001a20:	4b6a      	ldr	r3, [pc, #424]	@ (8001bcc <HAL_RCC_OscConfig+0x330>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a69      	ldr	r2, [pc, #420]	@ (8001bcc <HAL_RCC_OscConfig+0x330>)
 8001a26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a2a:	6013      	str	r3, [r2, #0]
 8001a2c:	4b67      	ldr	r3, [pc, #412]	@ (8001bcc <HAL_RCC_OscConfig+0x330>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a66      	ldr	r2, [pc, #408]	@ (8001bcc <HAL_RCC_OscConfig+0x330>)
 8001a32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a36:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a38:	4b64      	ldr	r3, [pc, #400]	@ (8001bcc <HAL_RCC_OscConfig+0x330>)
 8001a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a3c:	f023 020f 	bic.w	r2, r3, #15
 8001a40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a44:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	495f      	ldr	r1, [pc, #380]	@ (8001bcc <HAL_RCC_OscConfig+0x330>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a56:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d059      	beq.n	8001b16 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a62:	f7ff fc8b 	bl	800137c <HAL_GetTick>
 8001a66:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6a:	e00a      	b.n	8001a82 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a6c:	f7ff fc86 	bl	800137c <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b64      	cmp	r3, #100	@ 0x64
 8001a7a:	d902      	bls.n	8001a82 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	f000 bf43 	b.w	8002908 <HAL_RCC_OscConfig+0x106c>
 8001a82:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a86:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001a8e:	fa93 f3a3 	rbit	r3, r3
 8001a92:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001a96:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9a:	fab3 f383 	clz	r3, r3
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	095b      	lsrs	r3, r3, #5
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d102      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x218>
 8001aae:	4b47      	ldr	r3, [pc, #284]	@ (8001bcc <HAL_RCC_OscConfig+0x330>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	e015      	b.n	8001ae0 <HAL_RCC_OscConfig+0x244>
 8001ab4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ab8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001ac0:	fa93 f3a3 	rbit	r3, r3
 8001ac4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001ac8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001acc:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001ad0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001ad4:	fa93 f3a3 	rbit	r3, r3
 8001ad8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001adc:	4b3b      	ldr	r3, [pc, #236]	@ (8001bcc <HAL_RCC_OscConfig+0x330>)
 8001ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ae4:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001ae8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001aec:	fa92 f2a2 	rbit	r2, r2
 8001af0:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001af4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001af8:	fab2 f282 	clz	r2, r2
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	f042 0220 	orr.w	r2, r2, #32
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	f002 021f 	and.w	r2, r2, #31
 8001b08:	2101      	movs	r1, #1
 8001b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0e:	4013      	ands	r3, r2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0ab      	beq.n	8001a6c <HAL_RCC_OscConfig+0x1d0>
 8001b14:	e05d      	b.n	8001bd2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b16:	f7ff fc31 	bl	800137c <HAL_GetTick>
 8001b1a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b1e:	e00a      	b.n	8001b36 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b20:	f7ff fc2c 	bl	800137c <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b64      	cmp	r3, #100	@ 0x64
 8001b2e:	d902      	bls.n	8001b36 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	f000 bee9 	b.w	8002908 <HAL_RCC_OscConfig+0x106c>
 8001b36:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b3a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001b42:	fa93 f3a3 	rbit	r3, r3
 8001b46:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001b4a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b4e:	fab3 f383 	clz	r3, r3
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	095b      	lsrs	r3, r3, #5
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d102      	bne.n	8001b68 <HAL_RCC_OscConfig+0x2cc>
 8001b62:	4b1a      	ldr	r3, [pc, #104]	@ (8001bcc <HAL_RCC_OscConfig+0x330>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	e015      	b.n	8001b94 <HAL_RCC_OscConfig+0x2f8>
 8001b68:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b6c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b70:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001b74:	fa93 f3a3 	rbit	r3, r3
 8001b78:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001b7c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b80:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001b84:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001b88:	fa93 f3a3 	rbit	r3, r3
 8001b8c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001b90:	4b0e      	ldr	r3, [pc, #56]	@ (8001bcc <HAL_RCC_OscConfig+0x330>)
 8001b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b94:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b98:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001b9c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001ba0:	fa92 f2a2 	rbit	r2, r2
 8001ba4:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001ba8:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001bac:	fab2 f282 	clz	r2, r2
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	f042 0220 	orr.w	r2, r2, #32
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	f002 021f 	and.w	r2, r2, #31
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1ab      	bne.n	8001b20 <HAL_RCC_OscConfig+0x284>
 8001bc8:	e003      	b.n	8001bd2 <HAL_RCC_OscConfig+0x336>
 8001bca:	bf00      	nop
 8001bcc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 817d 	beq.w	8001ee2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001be8:	4ba6      	ldr	r3, [pc, #664]	@ (8001e84 <HAL_RCC_OscConfig+0x5e8>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 030c 	and.w	r3, r3, #12
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d00b      	beq.n	8001c0c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001bf4:	4ba3      	ldr	r3, [pc, #652]	@ (8001e84 <HAL_RCC_OscConfig+0x5e8>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 030c 	and.w	r3, r3, #12
 8001bfc:	2b08      	cmp	r3, #8
 8001bfe:	d172      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x44a>
 8001c00:	4ba0      	ldr	r3, [pc, #640]	@ (8001e84 <HAL_RCC_OscConfig+0x5e8>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d16c      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x44a>
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c12:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001c16:	fa93 f3a3 	rbit	r3, r3
 8001c1a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001c1e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c22:	fab3 f383 	clz	r3, r3
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	095b      	lsrs	r3, r3, #5
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d102      	bne.n	8001c3c <HAL_RCC_OscConfig+0x3a0>
 8001c36:	4b93      	ldr	r3, [pc, #588]	@ (8001e84 <HAL_RCC_OscConfig+0x5e8>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	e013      	b.n	8001c64 <HAL_RCC_OscConfig+0x3c8>
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c42:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001c46:	fa93 f3a3 	rbit	r3, r3
 8001c4a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001c4e:	2302      	movs	r3, #2
 8001c50:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001c54:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001c58:	fa93 f3a3 	rbit	r3, r3
 8001c5c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001c60:	4b88      	ldr	r3, [pc, #544]	@ (8001e84 <HAL_RCC_OscConfig+0x5e8>)
 8001c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c64:	2202      	movs	r2, #2
 8001c66:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001c6a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001c6e:	fa92 f2a2 	rbit	r2, r2
 8001c72:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001c76:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001c7a:	fab2 f282 	clz	r2, r2
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	f042 0220 	orr.w	r2, r2, #32
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	f002 021f 	and.w	r2, r2, #31
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00a      	beq.n	8001cac <HAL_RCC_OscConfig+0x410>
 8001c96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c9a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d002      	beq.n	8001cac <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	f000 be2e 	b.w	8002908 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cac:	4b75      	ldr	r3, [pc, #468]	@ (8001e84 <HAL_RCC_OscConfig+0x5e8>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cb8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	695b      	ldr	r3, [r3, #20]
 8001cc0:	21f8      	movs	r1, #248	@ 0xf8
 8001cc2:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc6:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001cca:	fa91 f1a1 	rbit	r1, r1
 8001cce:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001cd2:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001cd6:	fab1 f181 	clz	r1, r1
 8001cda:	b2c9      	uxtb	r1, r1
 8001cdc:	408b      	lsls	r3, r1
 8001cde:	4969      	ldr	r1, [pc, #420]	@ (8001e84 <HAL_RCC_OscConfig+0x5e8>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ce4:	e0fd      	b.n	8001ee2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ce6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f000 8088 	beq.w	8001e08 <HAL_RCC_OscConfig+0x56c>
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfe:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001d02:	fa93 f3a3 	rbit	r3, r3
 8001d06:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001d0a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d0e:	fab3 f383 	clz	r3, r3
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001d18:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	461a      	mov	r2, r3
 8001d20:	2301      	movs	r3, #1
 8001d22:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d24:	f7ff fb2a 	bl	800137c <HAL_GetTick>
 8001d28:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d2c:	e00a      	b.n	8001d44 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d2e:	f7ff fb25 	bl	800137c <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d902      	bls.n	8001d44 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	f000 bde2 	b.w	8002908 <HAL_RCC_OscConfig+0x106c>
 8001d44:	2302      	movs	r3, #2
 8001d46:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001d4e:	fa93 f3a3 	rbit	r3, r3
 8001d52:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001d56:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5a:	fab3 f383 	clz	r3, r3
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	095b      	lsrs	r3, r3, #5
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d102      	bne.n	8001d74 <HAL_RCC_OscConfig+0x4d8>
 8001d6e:	4b45      	ldr	r3, [pc, #276]	@ (8001e84 <HAL_RCC_OscConfig+0x5e8>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	e013      	b.n	8001d9c <HAL_RCC_OscConfig+0x500>
 8001d74:	2302      	movs	r3, #2
 8001d76:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001d7e:	fa93 f3a3 	rbit	r3, r3
 8001d82:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001d86:	2302      	movs	r3, #2
 8001d88:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001d8c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001d90:	fa93 f3a3 	rbit	r3, r3
 8001d94:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001d98:	4b3a      	ldr	r3, [pc, #232]	@ (8001e84 <HAL_RCC_OscConfig+0x5e8>)
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001da2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001da6:	fa92 f2a2 	rbit	r2, r2
 8001daa:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001dae:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001db2:	fab2 f282 	clz	r2, r2
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	f042 0220 	orr.w	r2, r2, #32
 8001dbc:	b2d2      	uxtb	r2, r2
 8001dbe:	f002 021f 	and.w	r2, r2, #31
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc8:	4013      	ands	r3, r2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0af      	beq.n	8001d2e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dce:	4b2d      	ldr	r3, [pc, #180]	@ (8001e84 <HAL_RCC_OscConfig+0x5e8>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dda:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	21f8      	movs	r1, #248	@ 0xf8
 8001de4:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de8:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001dec:	fa91 f1a1 	rbit	r1, r1
 8001df0:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001df4:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001df8:	fab1 f181 	clz	r1, r1
 8001dfc:	b2c9      	uxtb	r1, r1
 8001dfe:	408b      	lsls	r3, r1
 8001e00:	4920      	ldr	r1, [pc, #128]	@ (8001e84 <HAL_RCC_OscConfig+0x5e8>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	600b      	str	r3, [r1, #0]
 8001e06:	e06c      	b.n	8001ee2 <HAL_RCC_OscConfig+0x646>
 8001e08:	2301      	movs	r3, #1
 8001e0a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001e12:	fa93 f3a3 	rbit	r3, r3
 8001e16:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001e1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e1e:	fab3 f383 	clz	r3, r3
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e28:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	461a      	mov	r2, r3
 8001e30:	2300      	movs	r3, #0
 8001e32:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e34:	f7ff faa2 	bl	800137c <HAL_GetTick>
 8001e38:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e3c:	e00a      	b.n	8001e54 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e3e:	f7ff fa9d 	bl	800137c <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d902      	bls.n	8001e54 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	f000 bd5a 	b.w	8002908 <HAL_RCC_OscConfig+0x106c>
 8001e54:	2302      	movs	r3, #2
 8001e56:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001e5e:	fa93 f3a3 	rbit	r3, r3
 8001e62:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001e66:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e6a:	fab3 f383 	clz	r3, r3
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	095b      	lsrs	r3, r3, #5
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d104      	bne.n	8001e88 <HAL_RCC_OscConfig+0x5ec>
 8001e7e:	4b01      	ldr	r3, [pc, #4]	@ (8001e84 <HAL_RCC_OscConfig+0x5e8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	e015      	b.n	8001eb0 <HAL_RCC_OscConfig+0x614>
 8001e84:	40021000 	.word	0x40021000
 8001e88:	2302      	movs	r3, #2
 8001e8a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001e92:	fa93 f3a3 	rbit	r3, r3
 8001e96:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001ea0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001ea4:	fa93 f3a3 	rbit	r3, r3
 8001ea8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001eac:	4bc8      	ldr	r3, [pc, #800]	@ (80021d0 <HAL_RCC_OscConfig+0x934>)
 8001eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001eb6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001eba:	fa92 f2a2 	rbit	r2, r2
 8001ebe:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001ec2:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001ec6:	fab2 f282 	clz	r2, r2
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	f042 0220 	orr.w	r2, r2, #32
 8001ed0:	b2d2      	uxtb	r2, r2
 8001ed2:	f002 021f 	and.w	r2, r2, #31
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8001edc:	4013      	ands	r3, r2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1ad      	bne.n	8001e3e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ee2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ee6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f000 8110 	beq.w	8002118 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ef8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001efc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d079      	beq.n	8001ffc <HAL_RCC_OscConfig+0x760>
 8001f08:	2301      	movs	r3, #1
 8001f0a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001f12:	fa93 f3a3 	rbit	r3, r3
 8001f16:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001f1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f1e:	fab3 f383 	clz	r3, r3
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	461a      	mov	r2, r3
 8001f26:	4bab      	ldr	r3, [pc, #684]	@ (80021d4 <HAL_RCC_OscConfig+0x938>)
 8001f28:	4413      	add	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	2301      	movs	r3, #1
 8001f30:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f32:	f7ff fa23 	bl	800137c <HAL_GetTick>
 8001f36:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f3a:	e00a      	b.n	8001f52 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f3c:	f7ff fa1e 	bl	800137c <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d902      	bls.n	8001f52 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	f000 bcdb 	b.w	8002908 <HAL_RCC_OscConfig+0x106c>
 8001f52:	2302      	movs	r3, #2
 8001f54:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f58:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001f5c:	fa93 f3a3 	rbit	r3, r3
 8001f60:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001f64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f68:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f74:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	fa93 f2a3 	rbit	r2, r3
 8001f7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001f90:	2202      	movs	r2, #2
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	fa93 f2a3 	rbit	r2, r3
 8001fa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fa6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001faa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fac:	4b88      	ldr	r3, [pc, #544]	@ (80021d0 <HAL_RCC_OscConfig+0x934>)
 8001fae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fb4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001fb8:	2102      	movs	r1, #2
 8001fba:	6019      	str	r1, [r3, #0]
 8001fbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fc0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	fa93 f1a3 	rbit	r1, r3
 8001fca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fce:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001fd2:	6019      	str	r1, [r3, #0]
  return result;
 8001fd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fd8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	fab3 f383 	clz	r3, r3
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	f003 031f 	and.w	r3, r3, #31
 8001fee:	2101      	movs	r1, #1
 8001ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0a0      	beq.n	8001f3c <HAL_RCC_OscConfig+0x6a0>
 8001ffa:	e08d      	b.n	8002118 <HAL_RCC_OscConfig+0x87c>
 8001ffc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002000:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002004:	2201      	movs	r2, #1
 8002006:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002008:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800200c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	fa93 f2a3 	rbit	r2, r3
 8002016:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800201a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800201e:	601a      	str	r2, [r3, #0]
  return result;
 8002020:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002024:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002028:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800202a:	fab3 f383 	clz	r3, r3
 800202e:	b2db      	uxtb	r3, r3
 8002030:	461a      	mov	r2, r3
 8002032:	4b68      	ldr	r3, [pc, #416]	@ (80021d4 <HAL_RCC_OscConfig+0x938>)
 8002034:	4413      	add	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	461a      	mov	r2, r3
 800203a:	2300      	movs	r3, #0
 800203c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800203e:	f7ff f99d 	bl	800137c <HAL_GetTick>
 8002042:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002046:	e00a      	b.n	800205e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002048:	f7ff f998 	bl	800137c <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d902      	bls.n	800205e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	f000 bc55 	b.w	8002908 <HAL_RCC_OscConfig+0x106c>
 800205e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002062:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002066:	2202      	movs	r2, #2
 8002068:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800206e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	fa93 f2a3 	rbit	r2, r3
 8002078:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800207c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002086:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800208a:	2202      	movs	r2, #2
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002092:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	fa93 f2a3 	rbit	r2, r3
 800209c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020a0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020aa:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80020ae:	2202      	movs	r2, #2
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020b6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	fa93 f2a3 	rbit	r2, r3
 80020c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80020c8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ca:	4b41      	ldr	r3, [pc, #260]	@ (80021d0 <HAL_RCC_OscConfig+0x934>)
 80020cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80020ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020d2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80020d6:	2102      	movs	r1, #2
 80020d8:	6019      	str	r1, [r3, #0]
 80020da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020de:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	fa93 f1a3 	rbit	r1, r3
 80020e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ec:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80020f0:	6019      	str	r1, [r3, #0]
  return result;
 80020f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020f6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	fab3 f383 	clz	r3, r3
 8002100:	b2db      	uxtb	r3, r3
 8002102:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002106:	b2db      	uxtb	r3, r3
 8002108:	f003 031f 	and.w	r3, r3, #31
 800210c:	2101      	movs	r1, #1
 800210e:	fa01 f303 	lsl.w	r3, r1, r3
 8002112:	4013      	ands	r3, r2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d197      	bne.n	8002048 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002118:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800211c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 81a1 	beq.w	8002470 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800212e:	2300      	movs	r3, #0
 8002130:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002134:	4b26      	ldr	r3, [pc, #152]	@ (80021d0 <HAL_RCC_OscConfig+0x934>)
 8002136:	69db      	ldr	r3, [r3, #28]
 8002138:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d116      	bne.n	800216e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002140:	4b23      	ldr	r3, [pc, #140]	@ (80021d0 <HAL_RCC_OscConfig+0x934>)
 8002142:	69db      	ldr	r3, [r3, #28]
 8002144:	4a22      	ldr	r2, [pc, #136]	@ (80021d0 <HAL_RCC_OscConfig+0x934>)
 8002146:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800214a:	61d3      	str	r3, [r2, #28]
 800214c:	4b20      	ldr	r3, [pc, #128]	@ (80021d0 <HAL_RCC_OscConfig+0x934>)
 800214e:	69db      	ldr	r3, [r3, #28]
 8002150:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002154:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002158:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002162:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002166:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002168:	2301      	movs	r3, #1
 800216a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800216e:	4b1a      	ldr	r3, [pc, #104]	@ (80021d8 <HAL_RCC_OscConfig+0x93c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002176:	2b00      	cmp	r3, #0
 8002178:	d11a      	bne.n	80021b0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800217a:	4b17      	ldr	r3, [pc, #92]	@ (80021d8 <HAL_RCC_OscConfig+0x93c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a16      	ldr	r2, [pc, #88]	@ (80021d8 <HAL_RCC_OscConfig+0x93c>)
 8002180:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002184:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002186:	f7ff f8f9 	bl	800137c <HAL_GetTick>
 800218a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800218e:	e009      	b.n	80021a4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002190:	f7ff f8f4 	bl	800137c <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b64      	cmp	r3, #100	@ 0x64
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e3b1      	b.n	8002908 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a4:	4b0c      	ldr	r3, [pc, #48]	@ (80021d8 <HAL_RCC_OscConfig+0x93c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0ef      	beq.n	8002190 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d10d      	bne.n	80021dc <HAL_RCC_OscConfig+0x940>
 80021c0:	4b03      	ldr	r3, [pc, #12]	@ (80021d0 <HAL_RCC_OscConfig+0x934>)
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	4a02      	ldr	r2, [pc, #8]	@ (80021d0 <HAL_RCC_OscConfig+0x934>)
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	6213      	str	r3, [r2, #32]
 80021cc:	e03c      	b.n	8002248 <HAL_RCC_OscConfig+0x9ac>
 80021ce:	bf00      	nop
 80021d0:	40021000 	.word	0x40021000
 80021d4:	10908120 	.word	0x10908120
 80021d8:	40007000 	.word	0x40007000
 80021dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10c      	bne.n	8002206 <HAL_RCC_OscConfig+0x96a>
 80021ec:	4bc1      	ldr	r3, [pc, #772]	@ (80024f4 <HAL_RCC_OscConfig+0xc58>)
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	4ac0      	ldr	r2, [pc, #768]	@ (80024f4 <HAL_RCC_OscConfig+0xc58>)
 80021f2:	f023 0301 	bic.w	r3, r3, #1
 80021f6:	6213      	str	r3, [r2, #32]
 80021f8:	4bbe      	ldr	r3, [pc, #760]	@ (80024f4 <HAL_RCC_OscConfig+0xc58>)
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	4abd      	ldr	r2, [pc, #756]	@ (80024f4 <HAL_RCC_OscConfig+0xc58>)
 80021fe:	f023 0304 	bic.w	r3, r3, #4
 8002202:	6213      	str	r3, [r2, #32]
 8002204:	e020      	b.n	8002248 <HAL_RCC_OscConfig+0x9ac>
 8002206:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800220a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	2b05      	cmp	r3, #5
 8002214:	d10c      	bne.n	8002230 <HAL_RCC_OscConfig+0x994>
 8002216:	4bb7      	ldr	r3, [pc, #732]	@ (80024f4 <HAL_RCC_OscConfig+0xc58>)
 8002218:	6a1b      	ldr	r3, [r3, #32]
 800221a:	4ab6      	ldr	r2, [pc, #728]	@ (80024f4 <HAL_RCC_OscConfig+0xc58>)
 800221c:	f043 0304 	orr.w	r3, r3, #4
 8002220:	6213      	str	r3, [r2, #32]
 8002222:	4bb4      	ldr	r3, [pc, #720]	@ (80024f4 <HAL_RCC_OscConfig+0xc58>)
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	4ab3      	ldr	r2, [pc, #716]	@ (80024f4 <HAL_RCC_OscConfig+0xc58>)
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	6213      	str	r3, [r2, #32]
 800222e:	e00b      	b.n	8002248 <HAL_RCC_OscConfig+0x9ac>
 8002230:	4bb0      	ldr	r3, [pc, #704]	@ (80024f4 <HAL_RCC_OscConfig+0xc58>)
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	4aaf      	ldr	r2, [pc, #700]	@ (80024f4 <HAL_RCC_OscConfig+0xc58>)
 8002236:	f023 0301 	bic.w	r3, r3, #1
 800223a:	6213      	str	r3, [r2, #32]
 800223c:	4bad      	ldr	r3, [pc, #692]	@ (80024f4 <HAL_RCC_OscConfig+0xc58>)
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	4aac      	ldr	r2, [pc, #688]	@ (80024f4 <HAL_RCC_OscConfig+0xc58>)
 8002242:	f023 0304 	bic.w	r3, r3, #4
 8002246:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002248:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800224c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 8081 	beq.w	800235c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225a:	f7ff f88f 	bl	800137c <HAL_GetTick>
 800225e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002262:	e00b      	b.n	800227c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002264:	f7ff f88a 	bl	800137c <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002274:	4293      	cmp	r3, r2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e345      	b.n	8002908 <HAL_RCC_OscConfig+0x106c>
 800227c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002280:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002284:	2202      	movs	r2, #2
 8002286:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002288:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800228c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	fa93 f2a3 	rbit	r2, r3
 8002296:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800229a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022a4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80022a8:	2202      	movs	r2, #2
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022b0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	fa93 f2a3 	rbit	r2, r3
 80022ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022be:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80022c2:	601a      	str	r2, [r3, #0]
  return result;
 80022c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022c8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80022cc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ce:	fab3 f383 	clz	r3, r3
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	095b      	lsrs	r3, r3, #5
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	f043 0302 	orr.w	r3, r3, #2
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d102      	bne.n	80022e8 <HAL_RCC_OscConfig+0xa4c>
 80022e2:	4b84      	ldr	r3, [pc, #528]	@ (80024f4 <HAL_RCC_OscConfig+0xc58>)
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	e013      	b.n	8002310 <HAL_RCC_OscConfig+0xa74>
 80022e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ec:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80022f0:	2202      	movs	r2, #2
 80022f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	fa93 f2a3 	rbit	r2, r3
 8002302:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002306:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	4b79      	ldr	r3, [pc, #484]	@ (80024f4 <HAL_RCC_OscConfig+0xc58>)
 800230e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002310:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002314:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002318:	2102      	movs	r1, #2
 800231a:	6011      	str	r1, [r2, #0]
 800231c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002320:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002324:	6812      	ldr	r2, [r2, #0]
 8002326:	fa92 f1a2 	rbit	r1, r2
 800232a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800232e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002332:	6011      	str	r1, [r2, #0]
  return result;
 8002334:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002338:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800233c:	6812      	ldr	r2, [r2, #0]
 800233e:	fab2 f282 	clz	r2, r2
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002348:	b2d2      	uxtb	r2, r2
 800234a:	f002 021f 	and.w	r2, r2, #31
 800234e:	2101      	movs	r1, #1
 8002350:	fa01 f202 	lsl.w	r2, r1, r2
 8002354:	4013      	ands	r3, r2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d084      	beq.n	8002264 <HAL_RCC_OscConfig+0x9c8>
 800235a:	e07f      	b.n	800245c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800235c:	f7ff f80e 	bl	800137c <HAL_GetTick>
 8002360:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002364:	e00b      	b.n	800237e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002366:	f7ff f809 	bl	800137c <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002376:	4293      	cmp	r3, r2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e2c4      	b.n	8002908 <HAL_RCC_OscConfig+0x106c>
 800237e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002382:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002386:	2202      	movs	r2, #2
 8002388:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800238e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	fa93 f2a3 	rbit	r2, r3
 8002398:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800239c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023a6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80023aa:	2202      	movs	r2, #2
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	fa93 f2a3 	rbit	r2, r3
 80023bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023c0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80023c4:	601a      	str	r2, [r3, #0]
  return result;
 80023c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ca:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80023ce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023d0:	fab3 f383 	clz	r3, r3
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	095b      	lsrs	r3, r3, #5
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	f043 0302 	orr.w	r3, r3, #2
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d102      	bne.n	80023ea <HAL_RCC_OscConfig+0xb4e>
 80023e4:	4b43      	ldr	r3, [pc, #268]	@ (80024f4 <HAL_RCC_OscConfig+0xc58>)
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	e013      	b.n	8002412 <HAL_RCC_OscConfig+0xb76>
 80023ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ee:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80023f2:	2202      	movs	r2, #2
 80023f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023fa:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	fa93 f2a3 	rbit	r2, r3
 8002404:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002408:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	4b39      	ldr	r3, [pc, #228]	@ (80024f4 <HAL_RCC_OscConfig+0xc58>)
 8002410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002412:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002416:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800241a:	2102      	movs	r1, #2
 800241c:	6011      	str	r1, [r2, #0]
 800241e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002422:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002426:	6812      	ldr	r2, [r2, #0]
 8002428:	fa92 f1a2 	rbit	r1, r2
 800242c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002430:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002434:	6011      	str	r1, [r2, #0]
  return result;
 8002436:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800243a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800243e:	6812      	ldr	r2, [r2, #0]
 8002440:	fab2 f282 	clz	r2, r2
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	f002 021f 	and.w	r2, r2, #31
 8002450:	2101      	movs	r1, #1
 8002452:	fa01 f202 	lsl.w	r2, r1, r2
 8002456:	4013      	ands	r3, r2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d184      	bne.n	8002366 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800245c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002460:	2b01      	cmp	r3, #1
 8002462:	d105      	bne.n	8002470 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002464:	4b23      	ldr	r3, [pc, #140]	@ (80024f4 <HAL_RCC_OscConfig+0xc58>)
 8002466:	69db      	ldr	r3, [r3, #28]
 8002468:	4a22      	ldr	r2, [pc, #136]	@ (80024f4 <HAL_RCC_OscConfig+0xc58>)
 800246a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800246e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002470:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002474:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	69db      	ldr	r3, [r3, #28]
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 8242 	beq.w	8002906 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002482:	4b1c      	ldr	r3, [pc, #112]	@ (80024f4 <HAL_RCC_OscConfig+0xc58>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 030c 	and.w	r3, r3, #12
 800248a:	2b08      	cmp	r3, #8
 800248c:	f000 8213 	beq.w	80028b6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002490:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002494:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	69db      	ldr	r3, [r3, #28]
 800249c:	2b02      	cmp	r3, #2
 800249e:	f040 8162 	bne.w	8002766 <HAL_RCC_OscConfig+0xeca>
 80024a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80024aa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80024ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024b4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	fa93 f2a3 	rbit	r2, r3
 80024be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80024c6:	601a      	str	r2, [r3, #0]
  return result;
 80024c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024cc:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80024d0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d2:	fab3 f383 	clz	r3, r3
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80024dc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	461a      	mov	r2, r3
 80024e4:	2300      	movs	r3, #0
 80024e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e8:	f7fe ff48 	bl	800137c <HAL_GetTick>
 80024ec:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f0:	e00c      	b.n	800250c <HAL_RCC_OscConfig+0xc70>
 80024f2:	bf00      	nop
 80024f4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f8:	f7fe ff40 	bl	800137c <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e1fd      	b.n	8002908 <HAL_RCC_OscConfig+0x106c>
 800250c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002510:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002514:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002518:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800251e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	fa93 f2a3 	rbit	r2, r3
 8002528:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800252c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002530:	601a      	str	r2, [r3, #0]
  return result;
 8002532:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002536:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800253a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800253c:	fab3 f383 	clz	r3, r3
 8002540:	b2db      	uxtb	r3, r3
 8002542:	095b      	lsrs	r3, r3, #5
 8002544:	b2db      	uxtb	r3, r3
 8002546:	f043 0301 	orr.w	r3, r3, #1
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b01      	cmp	r3, #1
 800254e:	d102      	bne.n	8002556 <HAL_RCC_OscConfig+0xcba>
 8002550:	4bb0      	ldr	r3, [pc, #704]	@ (8002814 <HAL_RCC_OscConfig+0xf78>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	e027      	b.n	80025a6 <HAL_RCC_OscConfig+0xd0a>
 8002556:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800255a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800255e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002562:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002564:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002568:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	fa93 f2a3 	rbit	r2, r3
 8002572:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002576:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002580:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002584:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800258e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	fa93 f2a3 	rbit	r2, r3
 8002598:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800259c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	4b9c      	ldr	r3, [pc, #624]	@ (8002814 <HAL_RCC_OscConfig+0xf78>)
 80025a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025aa:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80025ae:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80025b2:	6011      	str	r1, [r2, #0]
 80025b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025b8:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80025bc:	6812      	ldr	r2, [r2, #0]
 80025be:	fa92 f1a2 	rbit	r1, r2
 80025c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025c6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80025ca:	6011      	str	r1, [r2, #0]
  return result;
 80025cc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025d0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80025d4:	6812      	ldr	r2, [r2, #0]
 80025d6:	fab2 f282 	clz	r2, r2
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	f042 0220 	orr.w	r2, r2, #32
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	f002 021f 	and.w	r2, r2, #31
 80025e6:	2101      	movs	r1, #1
 80025e8:	fa01 f202 	lsl.w	r2, r1, r2
 80025ec:	4013      	ands	r3, r2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d182      	bne.n	80024f8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025f2:	4b88      	ldr	r3, [pc, #544]	@ (8002814 <HAL_RCC_OscConfig+0xf78>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80025fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002606:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800260a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	430b      	orrs	r3, r1
 8002614:	497f      	ldr	r1, [pc, #508]	@ (8002814 <HAL_RCC_OscConfig+0xf78>)
 8002616:	4313      	orrs	r3, r2
 8002618:	604b      	str	r3, [r1, #4]
 800261a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800261e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002622:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002626:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002628:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800262c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	fa93 f2a3 	rbit	r2, r3
 8002636:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800263a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800263e:	601a      	str	r2, [r3, #0]
  return result;
 8002640:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002644:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002648:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800264a:	fab3 f383 	clz	r3, r3
 800264e:	b2db      	uxtb	r3, r3
 8002650:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002654:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	461a      	mov	r2, r3
 800265c:	2301      	movs	r3, #1
 800265e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002660:	f7fe fe8c 	bl	800137c <HAL_GetTick>
 8002664:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002668:	e009      	b.n	800267e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800266a:	f7fe fe87 	bl	800137c <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e144      	b.n	8002908 <HAL_RCC_OscConfig+0x106c>
 800267e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002682:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002686:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800268a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002690:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	fa93 f2a3 	rbit	r2, r3
 800269a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800269e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80026a2:	601a      	str	r2, [r3, #0]
  return result;
 80026a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80026ac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026ae:	fab3 f383 	clz	r3, r3
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	095b      	lsrs	r3, r3, #5
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	f043 0301 	orr.w	r3, r3, #1
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d102      	bne.n	80026c8 <HAL_RCC_OscConfig+0xe2c>
 80026c2:	4b54      	ldr	r3, [pc, #336]	@ (8002814 <HAL_RCC_OscConfig+0xf78>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	e027      	b.n	8002718 <HAL_RCC_OscConfig+0xe7c>
 80026c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026cc:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80026d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026da:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	fa93 f2a3 	rbit	r2, r3
 80026e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026e8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80026f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002700:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	fa93 f2a3 	rbit	r2, r3
 800270a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800270e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	4b3f      	ldr	r3, [pc, #252]	@ (8002814 <HAL_RCC_OscConfig+0xf78>)
 8002716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002718:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800271c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002720:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002724:	6011      	str	r1, [r2, #0]
 8002726:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800272a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800272e:	6812      	ldr	r2, [r2, #0]
 8002730:	fa92 f1a2 	rbit	r1, r2
 8002734:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002738:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800273c:	6011      	str	r1, [r2, #0]
  return result;
 800273e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002742:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002746:	6812      	ldr	r2, [r2, #0]
 8002748:	fab2 f282 	clz	r2, r2
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	f042 0220 	orr.w	r2, r2, #32
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	f002 021f 	and.w	r2, r2, #31
 8002758:	2101      	movs	r1, #1
 800275a:	fa01 f202 	lsl.w	r2, r1, r2
 800275e:	4013      	ands	r3, r2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d082      	beq.n	800266a <HAL_RCC_OscConfig+0xdce>
 8002764:	e0cf      	b.n	8002906 <HAL_RCC_OscConfig+0x106a>
 8002766:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800276a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800276e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002772:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002774:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002778:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	fa93 f2a3 	rbit	r2, r3
 8002782:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002786:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800278a:	601a      	str	r2, [r3, #0]
  return result;
 800278c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002790:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002794:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002796:	fab3 f383 	clz	r3, r3
 800279a:	b2db      	uxtb	r3, r3
 800279c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80027a0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	461a      	mov	r2, r3
 80027a8:	2300      	movs	r3, #0
 80027aa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ac:	f7fe fde6 	bl	800137c <HAL_GetTick>
 80027b0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027b4:	e009      	b.n	80027ca <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027b6:	f7fe fde1 	bl	800137c <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e09e      	b.n	8002908 <HAL_RCC_OscConfig+0x106c>
 80027ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ce:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80027d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027dc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	fa93 f2a3 	rbit	r2, r3
 80027e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ea:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80027ee:	601a      	str	r2, [r3, #0]
  return result;
 80027f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80027f8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027fa:	fab3 f383 	clz	r3, r3
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	095b      	lsrs	r3, r3, #5
 8002802:	b2db      	uxtb	r3, r3
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b01      	cmp	r3, #1
 800280c:	d104      	bne.n	8002818 <HAL_RCC_OscConfig+0xf7c>
 800280e:	4b01      	ldr	r3, [pc, #4]	@ (8002814 <HAL_RCC_OscConfig+0xf78>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	e029      	b.n	8002868 <HAL_RCC_OscConfig+0xfcc>
 8002814:	40021000 	.word	0x40021000
 8002818:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800281c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002820:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002824:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002826:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800282a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	fa93 f2a3 	rbit	r2, r3
 8002834:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002838:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002842:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002846:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002850:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	fa93 f2a3 	rbit	r2, r3
 800285a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800285e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	4b2b      	ldr	r3, [pc, #172]	@ (8002914 <HAL_RCC_OscConfig+0x1078>)
 8002866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002868:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800286c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002870:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002874:	6011      	str	r1, [r2, #0]
 8002876:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800287a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800287e:	6812      	ldr	r2, [r2, #0]
 8002880:	fa92 f1a2 	rbit	r1, r2
 8002884:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002888:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800288c:	6011      	str	r1, [r2, #0]
  return result;
 800288e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002892:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002896:	6812      	ldr	r2, [r2, #0]
 8002898:	fab2 f282 	clz	r2, r2
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	f042 0220 	orr.w	r2, r2, #32
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	f002 021f 	and.w	r2, r2, #31
 80028a8:	2101      	movs	r1, #1
 80028aa:	fa01 f202 	lsl.w	r2, r1, r2
 80028ae:	4013      	ands	r3, r2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d180      	bne.n	80027b6 <HAL_RCC_OscConfig+0xf1a>
 80028b4:	e027      	b.n	8002906 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d101      	bne.n	80028ca <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e01e      	b.n	8002908 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028ca:	4b12      	ldr	r3, [pc, #72]	@ (8002914 <HAL_RCC_OscConfig+0x1078>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80028d2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80028d6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80028da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d10b      	bne.n	8002902 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80028ea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80028ee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80028f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80028fe:	429a      	cmp	r2, r3
 8002900:	d001      	beq.n	8002906 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e000      	b.n	8002908 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40021000 	.word	0x40021000

08002918 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b09e      	sub	sp, #120	@ 0x78
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002922:	2300      	movs	r3, #0
 8002924:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e162      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002930:	4b90      	ldr	r3, [pc, #576]	@ (8002b74 <HAL_RCC_ClockConfig+0x25c>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	429a      	cmp	r2, r3
 800293c:	d910      	bls.n	8002960 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800293e:	4b8d      	ldr	r3, [pc, #564]	@ (8002b74 <HAL_RCC_ClockConfig+0x25c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f023 0207 	bic.w	r2, r3, #7
 8002946:	498b      	ldr	r1, [pc, #556]	@ (8002b74 <HAL_RCC_ClockConfig+0x25c>)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	4313      	orrs	r3, r2
 800294c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800294e:	4b89      	ldr	r3, [pc, #548]	@ (8002b74 <HAL_RCC_ClockConfig+0x25c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	429a      	cmp	r2, r3
 800295a:	d001      	beq.n	8002960 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e14a      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d008      	beq.n	800297e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800296c:	4b82      	ldr	r3, [pc, #520]	@ (8002b78 <HAL_RCC_ClockConfig+0x260>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	497f      	ldr	r1, [pc, #508]	@ (8002b78 <HAL_RCC_ClockConfig+0x260>)
 800297a:	4313      	orrs	r3, r2
 800297c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 80dc 	beq.w	8002b44 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d13c      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xf6>
 8002994:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002998:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800299c:	fa93 f3a3 	rbit	r3, r3
 80029a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80029a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a4:	fab3 f383 	clz	r3, r3
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	095b      	lsrs	r3, r3, #5
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d102      	bne.n	80029be <HAL_RCC_ClockConfig+0xa6>
 80029b8:	4b6f      	ldr	r3, [pc, #444]	@ (8002b78 <HAL_RCC_ClockConfig+0x260>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	e00f      	b.n	80029de <HAL_RCC_ClockConfig+0xc6>
 80029be:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029c2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029c6:	fa93 f3a3 	rbit	r3, r3
 80029ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80029cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80029d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80029d4:	fa93 f3a3 	rbit	r3, r3
 80029d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80029da:	4b67      	ldr	r3, [pc, #412]	@ (8002b78 <HAL_RCC_ClockConfig+0x260>)
 80029dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029de:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80029e2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80029e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80029e6:	fa92 f2a2 	rbit	r2, r2
 80029ea:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80029ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80029ee:	fab2 f282 	clz	r2, r2
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	f042 0220 	orr.w	r2, r2, #32
 80029f8:	b2d2      	uxtb	r2, r2
 80029fa:	f002 021f 	and.w	r2, r2, #31
 80029fe:	2101      	movs	r1, #1
 8002a00:	fa01 f202 	lsl.w	r2, r1, r2
 8002a04:	4013      	ands	r3, r2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d17b      	bne.n	8002b02 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e0f3      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d13c      	bne.n	8002a90 <HAL_RCC_ClockConfig+0x178>
 8002a16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a1a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a1e:	fa93 f3a3 	rbit	r3, r3
 8002a22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002a24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a26:	fab3 f383 	clz	r3, r3
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	095b      	lsrs	r3, r3, #5
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d102      	bne.n	8002a40 <HAL_RCC_ClockConfig+0x128>
 8002a3a:	4b4f      	ldr	r3, [pc, #316]	@ (8002b78 <HAL_RCC_ClockConfig+0x260>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	e00f      	b.n	8002a60 <HAL_RCC_ClockConfig+0x148>
 8002a40:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a44:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a48:	fa93 f3a3 	rbit	r3, r3
 8002a4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a4e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a52:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a56:	fa93 f3a3 	rbit	r3, r3
 8002a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a5c:	4b46      	ldr	r3, [pc, #280]	@ (8002b78 <HAL_RCC_ClockConfig+0x260>)
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a60:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a64:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002a66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002a68:	fa92 f2a2 	rbit	r2, r2
 8002a6c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002a6e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a70:	fab2 f282 	clz	r2, r2
 8002a74:	b2d2      	uxtb	r2, r2
 8002a76:	f042 0220 	orr.w	r2, r2, #32
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	f002 021f 	and.w	r2, r2, #31
 8002a80:	2101      	movs	r1, #1
 8002a82:	fa01 f202 	lsl.w	r2, r1, r2
 8002a86:	4013      	ands	r3, r2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d13a      	bne.n	8002b02 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e0b2      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x2de>
 8002a90:	2302      	movs	r3, #2
 8002a92:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a96:	fa93 f3a3 	rbit	r3, r3
 8002a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a9e:	fab3 f383 	clz	r3, r3
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	095b      	lsrs	r3, r3, #5
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	f043 0301 	orr.w	r3, r3, #1
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d102      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0x1a0>
 8002ab2:	4b31      	ldr	r3, [pc, #196]	@ (8002b78 <HAL_RCC_ClockConfig+0x260>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	e00d      	b.n	8002ad4 <HAL_RCC_ClockConfig+0x1bc>
 8002ab8:	2302      	movs	r3, #2
 8002aba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002abe:	fa93 f3a3 	rbit	r3, r3
 8002ac2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	623b      	str	r3, [r7, #32]
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	fa93 f3a3 	rbit	r3, r3
 8002ace:	61fb      	str	r3, [r7, #28]
 8002ad0:	4b29      	ldr	r3, [pc, #164]	@ (8002b78 <HAL_RCC_ClockConfig+0x260>)
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad4:	2202      	movs	r2, #2
 8002ad6:	61ba      	str	r2, [r7, #24]
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	fa92 f2a2 	rbit	r2, r2
 8002ade:	617a      	str	r2, [r7, #20]
  return result;
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	fab2 f282 	clz	r2, r2
 8002ae6:	b2d2      	uxtb	r2, r2
 8002ae8:	f042 0220 	orr.w	r2, r2, #32
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	f002 021f 	and.w	r2, r2, #31
 8002af2:	2101      	movs	r1, #1
 8002af4:	fa01 f202 	lsl.w	r2, r1, r2
 8002af8:	4013      	ands	r3, r2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e079      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b02:	4b1d      	ldr	r3, [pc, #116]	@ (8002b78 <HAL_RCC_ClockConfig+0x260>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f023 0203 	bic.w	r2, r3, #3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	491a      	ldr	r1, [pc, #104]	@ (8002b78 <HAL_RCC_ClockConfig+0x260>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b14:	f7fe fc32 	bl	800137c <HAL_GetTick>
 8002b18:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1a:	e00a      	b.n	8002b32 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b1c:	f7fe fc2e 	bl	800137c <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e061      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b32:	4b11      	ldr	r3, [pc, #68]	@ (8002b78 <HAL_RCC_ClockConfig+0x260>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f003 020c 	and.w	r2, r3, #12
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d1eb      	bne.n	8002b1c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b44:	4b0b      	ldr	r3, [pc, #44]	@ (8002b74 <HAL_RCC_ClockConfig+0x25c>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d214      	bcs.n	8002b7c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b52:	4b08      	ldr	r3, [pc, #32]	@ (8002b74 <HAL_RCC_ClockConfig+0x25c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f023 0207 	bic.w	r2, r3, #7
 8002b5a:	4906      	ldr	r1, [pc, #24]	@ (8002b74 <HAL_RCC_ClockConfig+0x25c>)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b62:	4b04      	ldr	r3, [pc, #16]	@ (8002b74 <HAL_RCC_ClockConfig+0x25c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d005      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e040      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x2de>
 8002b74:	40022000 	.word	0x40022000
 8002b78:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d008      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b88:	4b1d      	ldr	r3, [pc, #116]	@ (8002c00 <HAL_RCC_ClockConfig+0x2e8>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	491a      	ldr	r1, [pc, #104]	@ (8002c00 <HAL_RCC_ClockConfig+0x2e8>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0308 	and.w	r3, r3, #8
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d009      	beq.n	8002bba <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ba6:	4b16      	ldr	r3, [pc, #88]	@ (8002c00 <HAL_RCC_ClockConfig+0x2e8>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	4912      	ldr	r1, [pc, #72]	@ (8002c00 <HAL_RCC_ClockConfig+0x2e8>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002bba:	f000 f829 	bl	8002c10 <HAL_RCC_GetSysClockFreq>
 8002bbe:	4601      	mov	r1, r0
 8002bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8002c00 <HAL_RCC_ClockConfig+0x2e8>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bc8:	22f0      	movs	r2, #240	@ 0xf0
 8002bca:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	fa92 f2a2 	rbit	r2, r2
 8002bd2:	60fa      	str	r2, [r7, #12]
  return result;
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	fab2 f282 	clz	r2, r2
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	40d3      	lsrs	r3, r2
 8002bde:	4a09      	ldr	r2, [pc, #36]	@ (8002c04 <HAL_RCC_ClockConfig+0x2ec>)
 8002be0:	5cd3      	ldrb	r3, [r2, r3]
 8002be2:	fa21 f303 	lsr.w	r3, r1, r3
 8002be6:	4a08      	ldr	r2, [pc, #32]	@ (8002c08 <HAL_RCC_ClockConfig+0x2f0>)
 8002be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002bea:	4b08      	ldr	r3, [pc, #32]	@ (8002c0c <HAL_RCC_ClockConfig+0x2f4>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fe fb80 	bl	80012f4 <HAL_InitTick>
  
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3778      	adds	r7, #120	@ 0x78
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40021000 	.word	0x40021000
 8002c04:	08004df4 	.word	0x08004df4
 8002c08:	20000008 	.word	0x20000008
 8002c0c:	2000000c 	.word	0x2000000c

08002c10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b087      	sub	sp, #28
 8002c14:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c16:	2300      	movs	r3, #0
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60bb      	str	r3, [r7, #8]
 8002c1e:	2300      	movs	r3, #0
 8002c20:	617b      	str	r3, [r7, #20]
 8002c22:	2300      	movs	r3, #0
 8002c24:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002c2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ca4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f003 030c 	and.w	r3, r3, #12
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d002      	beq.n	8002c40 <HAL_RCC_GetSysClockFreq+0x30>
 8002c3a:	2b08      	cmp	r3, #8
 8002c3c:	d003      	beq.n	8002c46 <HAL_RCC_GetSysClockFreq+0x36>
 8002c3e:	e026      	b.n	8002c8e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c40:	4b19      	ldr	r3, [pc, #100]	@ (8002ca8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c42:	613b      	str	r3, [r7, #16]
      break;
 8002c44:	e026      	b.n	8002c94 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	0c9b      	lsrs	r3, r3, #18
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	4a17      	ldr	r2, [pc, #92]	@ (8002cac <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c50:	5cd3      	ldrb	r3, [r2, r3]
 8002c52:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002c54:	4b13      	ldr	r3, [pc, #76]	@ (8002ca4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c58:	f003 030f 	and.w	r3, r3, #15
 8002c5c:	4a14      	ldr	r2, [pc, #80]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c5e:	5cd3      	ldrb	r3, [r2, r3]
 8002c60:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d008      	beq.n	8002c7e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c6c:	4a0e      	ldr	r2, [pc, #56]	@ (8002ca8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	fb02 f303 	mul.w	r3, r2, r3
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	e004      	b.n	8002c88 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a0c      	ldr	r2, [pc, #48]	@ (8002cb4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c82:	fb02 f303 	mul.w	r3, r2, r3
 8002c86:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	613b      	str	r3, [r7, #16]
      break;
 8002c8c:	e002      	b.n	8002c94 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c8e:	4b06      	ldr	r3, [pc, #24]	@ (8002ca8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c90:	613b      	str	r3, [r7, #16]
      break;
 8002c92:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c94:	693b      	ldr	r3, [r7, #16]
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	371c      	adds	r7, #28
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	007a1200 	.word	0x007a1200
 8002cac:	08004e0c 	.word	0x08004e0c
 8002cb0:	08004e1c 	.word	0x08004e1c
 8002cb4:	003d0900 	.word	0x003d0900

08002cb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cbc:	4b03      	ldr	r3, [pc, #12]	@ (8002ccc <HAL_RCC_GetHCLKFreq+0x14>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	20000008 	.word	0x20000008

08002cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002cd6:	f7ff ffef 	bl	8002cb8 <HAL_RCC_GetHCLKFreq>
 8002cda:	4601      	mov	r1, r0
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8002d0c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002ce4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002ce8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	fa92 f2a2 	rbit	r2, r2
 8002cf0:	603a      	str	r2, [r7, #0]
  return result;
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	fab2 f282 	clz	r2, r2
 8002cf8:	b2d2      	uxtb	r2, r2
 8002cfa:	40d3      	lsrs	r3, r2
 8002cfc:	4a04      	ldr	r2, [pc, #16]	@ (8002d10 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002cfe:	5cd3      	ldrb	r3, [r2, r3]
 8002d00:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002d04:	4618      	mov	r0, r3
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	08004e04 	.word	0x08004e04

08002d14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002d1a:	f7ff ffcd 	bl	8002cb8 <HAL_RCC_GetHCLKFreq>
 8002d1e:	4601      	mov	r1, r0
 8002d20:	4b0b      	ldr	r3, [pc, #44]	@ (8002d50 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002d28:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002d2c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	fa92 f2a2 	rbit	r2, r2
 8002d34:	603a      	str	r2, [r7, #0]
  return result;
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	fab2 f282 	clz	r2, r2
 8002d3c:	b2d2      	uxtb	r2, r2
 8002d3e:	40d3      	lsrs	r3, r2
 8002d40:	4a04      	ldr	r2, [pc, #16]	@ (8002d54 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002d42:	5cd3      	ldrb	r3, [r2, r3]
 8002d44:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40021000 	.word	0x40021000
 8002d54:	08004e04 	.word	0x08004e04

08002d58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e049      	b.n	8002dfe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d106      	bne.n	8002d84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7fe f8f4 	bl	8000f6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2202      	movs	r2, #2
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3304      	adds	r3, #4
 8002d94:	4619      	mov	r1, r3
 8002d96:	4610      	mov	r0, r2
 8002d98:	f000 fa4a 	bl	8003230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
	...

08002e08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d109      	bne.n	8002e2c <HAL_TIM_PWM_Start+0x24>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	bf14      	ite	ne
 8002e24:	2301      	movne	r3, #1
 8002e26:	2300      	moveq	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	e03c      	b.n	8002ea6 <HAL_TIM_PWM_Start+0x9e>
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	d109      	bne.n	8002e46 <HAL_TIM_PWM_Start+0x3e>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	bf14      	ite	ne
 8002e3e:	2301      	movne	r3, #1
 8002e40:	2300      	moveq	r3, #0
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	e02f      	b.n	8002ea6 <HAL_TIM_PWM_Start+0x9e>
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	2b08      	cmp	r3, #8
 8002e4a:	d109      	bne.n	8002e60 <HAL_TIM_PWM_Start+0x58>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	bf14      	ite	ne
 8002e58:	2301      	movne	r3, #1
 8002e5a:	2300      	moveq	r3, #0
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	e022      	b.n	8002ea6 <HAL_TIM_PWM_Start+0x9e>
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	2b0c      	cmp	r3, #12
 8002e64:	d109      	bne.n	8002e7a <HAL_TIM_PWM_Start+0x72>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	bf14      	ite	ne
 8002e72:	2301      	movne	r3, #1
 8002e74:	2300      	moveq	r3, #0
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	e015      	b.n	8002ea6 <HAL_TIM_PWM_Start+0x9e>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	2b10      	cmp	r3, #16
 8002e7e:	d109      	bne.n	8002e94 <HAL_TIM_PWM_Start+0x8c>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	bf14      	ite	ne
 8002e8c:	2301      	movne	r3, #1
 8002e8e:	2300      	moveq	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	e008      	b.n	8002ea6 <HAL_TIM_PWM_Start+0x9e>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	bf14      	ite	ne
 8002ea0:	2301      	movne	r3, #1
 8002ea2:	2300      	moveq	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e097      	b.n	8002fde <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d104      	bne.n	8002ebe <HAL_TIM_PWM_Start+0xb6>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ebc:	e023      	b.n	8002f06 <HAL_TIM_PWM_Start+0xfe>
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	2b04      	cmp	r3, #4
 8002ec2:	d104      	bne.n	8002ece <HAL_TIM_PWM_Start+0xc6>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ecc:	e01b      	b.n	8002f06 <HAL_TIM_PWM_Start+0xfe>
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	d104      	bne.n	8002ede <HAL_TIM_PWM_Start+0xd6>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002edc:	e013      	b.n	8002f06 <HAL_TIM_PWM_Start+0xfe>
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	2b0c      	cmp	r3, #12
 8002ee2:	d104      	bne.n	8002eee <HAL_TIM_PWM_Start+0xe6>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002eec:	e00b      	b.n	8002f06 <HAL_TIM_PWM_Start+0xfe>
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	2b10      	cmp	r3, #16
 8002ef2:	d104      	bne.n	8002efe <HAL_TIM_PWM_Start+0xf6>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002efc:	e003      	b.n	8002f06 <HAL_TIM_PWM_Start+0xfe>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2202      	movs	r2, #2
 8002f02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	6839      	ldr	r1, [r7, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f000 fd00 	bl	8003914 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a33      	ldr	r2, [pc, #204]	@ (8002fe8 <HAL_TIM_PWM_Start+0x1e0>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d013      	beq.n	8002f46 <HAL_TIM_PWM_Start+0x13e>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a32      	ldr	r2, [pc, #200]	@ (8002fec <HAL_TIM_PWM_Start+0x1e4>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d00e      	beq.n	8002f46 <HAL_TIM_PWM_Start+0x13e>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a30      	ldr	r2, [pc, #192]	@ (8002ff0 <HAL_TIM_PWM_Start+0x1e8>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d009      	beq.n	8002f46 <HAL_TIM_PWM_Start+0x13e>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a2f      	ldr	r2, [pc, #188]	@ (8002ff4 <HAL_TIM_PWM_Start+0x1ec>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d004      	beq.n	8002f46 <HAL_TIM_PWM_Start+0x13e>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a2d      	ldr	r2, [pc, #180]	@ (8002ff8 <HAL_TIM_PWM_Start+0x1f0>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d101      	bne.n	8002f4a <HAL_TIM_PWM_Start+0x142>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e000      	b.n	8002f4c <HAL_TIM_PWM_Start+0x144>
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d007      	beq.n	8002f60 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f5e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a20      	ldr	r2, [pc, #128]	@ (8002fe8 <HAL_TIM_PWM_Start+0x1e0>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d018      	beq.n	8002f9c <HAL_TIM_PWM_Start+0x194>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f72:	d013      	beq.n	8002f9c <HAL_TIM_PWM_Start+0x194>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a20      	ldr	r2, [pc, #128]	@ (8002ffc <HAL_TIM_PWM_Start+0x1f4>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d00e      	beq.n	8002f9c <HAL_TIM_PWM_Start+0x194>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a1f      	ldr	r2, [pc, #124]	@ (8003000 <HAL_TIM_PWM_Start+0x1f8>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d009      	beq.n	8002f9c <HAL_TIM_PWM_Start+0x194>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a17      	ldr	r2, [pc, #92]	@ (8002fec <HAL_TIM_PWM_Start+0x1e4>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d004      	beq.n	8002f9c <HAL_TIM_PWM_Start+0x194>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a16      	ldr	r2, [pc, #88]	@ (8002ff0 <HAL_TIM_PWM_Start+0x1e8>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d115      	bne.n	8002fc8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	4b18      	ldr	r3, [pc, #96]	@ (8003004 <HAL_TIM_PWM_Start+0x1fc>)
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2b06      	cmp	r3, #6
 8002fac:	d015      	beq.n	8002fda <HAL_TIM_PWM_Start+0x1d2>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fb4:	d011      	beq.n	8002fda <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f042 0201 	orr.w	r2, r2, #1
 8002fc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fc6:	e008      	b.n	8002fda <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f042 0201 	orr.w	r2, r2, #1
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	e000      	b.n	8002fdc <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fda:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40012c00 	.word	0x40012c00
 8002fec:	40013400 	.word	0x40013400
 8002ff0:	40014000 	.word	0x40014000
 8002ff4:	40014400 	.word	0x40014400
 8002ff8:	40014800 	.word	0x40014800
 8002ffc:	40000400 	.word	0x40000400
 8003000:	40000800 	.word	0x40000800
 8003004:	00010007 	.word	0x00010007

08003008 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003014:	2300      	movs	r3, #0
 8003016:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800301e:	2b01      	cmp	r3, #1
 8003020:	d101      	bne.n	8003026 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003022:	2302      	movs	r3, #2
 8003024:	e0ff      	b.n	8003226 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b14      	cmp	r3, #20
 8003032:	f200 80f0 	bhi.w	8003216 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003036:	a201      	add	r2, pc, #4	@ (adr r2, 800303c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303c:	08003091 	.word	0x08003091
 8003040:	08003217 	.word	0x08003217
 8003044:	08003217 	.word	0x08003217
 8003048:	08003217 	.word	0x08003217
 800304c:	080030d1 	.word	0x080030d1
 8003050:	08003217 	.word	0x08003217
 8003054:	08003217 	.word	0x08003217
 8003058:	08003217 	.word	0x08003217
 800305c:	08003113 	.word	0x08003113
 8003060:	08003217 	.word	0x08003217
 8003064:	08003217 	.word	0x08003217
 8003068:	08003217 	.word	0x08003217
 800306c:	08003153 	.word	0x08003153
 8003070:	08003217 	.word	0x08003217
 8003074:	08003217 	.word	0x08003217
 8003078:	08003217 	.word	0x08003217
 800307c:	08003195 	.word	0x08003195
 8003080:	08003217 	.word	0x08003217
 8003084:	08003217 	.word	0x08003217
 8003088:	08003217 	.word	0x08003217
 800308c:	080031d5 	.word	0x080031d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68b9      	ldr	r1, [r7, #8]
 8003096:	4618      	mov	r0, r3
 8003098:	f000 f966 	bl	8003368 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	699a      	ldr	r2, [r3, #24]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0208 	orr.w	r2, r2, #8
 80030aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	699a      	ldr	r2, [r3, #24]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 0204 	bic.w	r2, r2, #4
 80030ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6999      	ldr	r1, [r3, #24]
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	691a      	ldr	r2, [r3, #16]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	619a      	str	r2, [r3, #24]
      break;
 80030ce:	e0a5      	b.n	800321c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68b9      	ldr	r1, [r7, #8]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 f9d6 	bl	8003488 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	699a      	ldr	r2, [r3, #24]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	699a      	ldr	r2, [r3, #24]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6999      	ldr	r1, [r3, #24]
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	021a      	lsls	r2, r3, #8
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	430a      	orrs	r2, r1
 800310e:	619a      	str	r2, [r3, #24]
      break;
 8003110:	e084      	b.n	800321c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68b9      	ldr	r1, [r7, #8]
 8003118:	4618      	mov	r0, r3
 800311a:	f000 fa3f 	bl	800359c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	69da      	ldr	r2, [r3, #28]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f042 0208 	orr.w	r2, r2, #8
 800312c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	69da      	ldr	r2, [r3, #28]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 0204 	bic.w	r2, r2, #4
 800313c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	69d9      	ldr	r1, [r3, #28]
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	691a      	ldr	r2, [r3, #16]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	61da      	str	r2, [r3, #28]
      break;
 8003150:	e064      	b.n	800321c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68b9      	ldr	r1, [r7, #8]
 8003158:	4618      	mov	r0, r3
 800315a:	f000 faa7 	bl	80036ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	69da      	ldr	r2, [r3, #28]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800316c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	69da      	ldr	r2, [r3, #28]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800317c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	69d9      	ldr	r1, [r3, #28]
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	021a      	lsls	r2, r3, #8
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	61da      	str	r2, [r3, #28]
      break;
 8003192:	e043      	b.n	800321c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68b9      	ldr	r1, [r7, #8]
 800319a:	4618      	mov	r0, r3
 800319c:	f000 faf0 	bl	8003780 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f042 0208 	orr.w	r2, r2, #8
 80031ae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0204 	bic.w	r2, r2, #4
 80031be:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	691a      	ldr	r2, [r3, #16]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80031d2:	e023      	b.n	800321c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68b9      	ldr	r1, [r7, #8]
 80031da:	4618      	mov	r0, r3
 80031dc:	f000 fb34 	bl	8003848 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031ee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031fe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	021a      	lsls	r2, r3, #8
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	430a      	orrs	r2, r1
 8003212:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003214:	e002      	b.n	800321c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	75fb      	strb	r3, [r7, #23]
      break;
 800321a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003224:	7dfb      	ldrb	r3, [r7, #23]
}
 8003226:	4618      	mov	r0, r3
 8003228:	3718      	adds	r7, #24
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop

08003230 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a42      	ldr	r2, [pc, #264]	@ (800334c <TIM_Base_SetConfig+0x11c>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d00f      	beq.n	8003268 <TIM_Base_SetConfig+0x38>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800324e:	d00b      	beq.n	8003268 <TIM_Base_SetConfig+0x38>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a3f      	ldr	r2, [pc, #252]	@ (8003350 <TIM_Base_SetConfig+0x120>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d007      	beq.n	8003268 <TIM_Base_SetConfig+0x38>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a3e      	ldr	r2, [pc, #248]	@ (8003354 <TIM_Base_SetConfig+0x124>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d003      	beq.n	8003268 <TIM_Base_SetConfig+0x38>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a3d      	ldr	r2, [pc, #244]	@ (8003358 <TIM_Base_SetConfig+0x128>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d108      	bne.n	800327a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800326e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	4313      	orrs	r3, r2
 8003278:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a33      	ldr	r2, [pc, #204]	@ (800334c <TIM_Base_SetConfig+0x11c>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d01b      	beq.n	80032ba <TIM_Base_SetConfig+0x8a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003288:	d017      	beq.n	80032ba <TIM_Base_SetConfig+0x8a>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a30      	ldr	r2, [pc, #192]	@ (8003350 <TIM_Base_SetConfig+0x120>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d013      	beq.n	80032ba <TIM_Base_SetConfig+0x8a>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a2f      	ldr	r2, [pc, #188]	@ (8003354 <TIM_Base_SetConfig+0x124>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d00f      	beq.n	80032ba <TIM_Base_SetConfig+0x8a>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a2e      	ldr	r2, [pc, #184]	@ (8003358 <TIM_Base_SetConfig+0x128>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d00b      	beq.n	80032ba <TIM_Base_SetConfig+0x8a>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a2d      	ldr	r2, [pc, #180]	@ (800335c <TIM_Base_SetConfig+0x12c>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d007      	beq.n	80032ba <TIM_Base_SetConfig+0x8a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a2c      	ldr	r2, [pc, #176]	@ (8003360 <TIM_Base_SetConfig+0x130>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d003      	beq.n	80032ba <TIM_Base_SetConfig+0x8a>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a2b      	ldr	r2, [pc, #172]	@ (8003364 <TIM_Base_SetConfig+0x134>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d108      	bne.n	80032cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a16      	ldr	r2, [pc, #88]	@ (800334c <TIM_Base_SetConfig+0x11c>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d00f      	beq.n	8003318 <TIM_Base_SetConfig+0xe8>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a17      	ldr	r2, [pc, #92]	@ (8003358 <TIM_Base_SetConfig+0x128>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d00b      	beq.n	8003318 <TIM_Base_SetConfig+0xe8>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a16      	ldr	r2, [pc, #88]	@ (800335c <TIM_Base_SetConfig+0x12c>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d007      	beq.n	8003318 <TIM_Base_SetConfig+0xe8>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a15      	ldr	r2, [pc, #84]	@ (8003360 <TIM_Base_SetConfig+0x130>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d003      	beq.n	8003318 <TIM_Base_SetConfig+0xe8>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a14      	ldr	r2, [pc, #80]	@ (8003364 <TIM_Base_SetConfig+0x134>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d103      	bne.n	8003320 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	691a      	ldr	r2, [r3, #16]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b01      	cmp	r3, #1
 8003330:	d105      	bne.n	800333e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	f023 0201 	bic.w	r2, r3, #1
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	611a      	str	r2, [r3, #16]
  }
}
 800333e:	bf00      	nop
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	40012c00 	.word	0x40012c00
 8003350:	40000400 	.word	0x40000400
 8003354:	40000800 	.word	0x40000800
 8003358:	40013400 	.word	0x40013400
 800335c:	40014000 	.word	0x40014000
 8003360:	40014400 	.word	0x40014400
 8003364:	40014800 	.word	0x40014800

08003368 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003368:	b480      	push	{r7}
 800336a:	b087      	sub	sp, #28
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	f023 0201 	bic.w	r2, r3, #1
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003396:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800339a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f023 0303 	bic.w	r3, r3, #3
 80033a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f023 0302 	bic.w	r3, r3, #2
 80033b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	4313      	orrs	r3, r2
 80033be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a2c      	ldr	r2, [pc, #176]	@ (8003474 <TIM_OC1_SetConfig+0x10c>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d00f      	beq.n	80033e8 <TIM_OC1_SetConfig+0x80>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a2b      	ldr	r2, [pc, #172]	@ (8003478 <TIM_OC1_SetConfig+0x110>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d00b      	beq.n	80033e8 <TIM_OC1_SetConfig+0x80>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a2a      	ldr	r2, [pc, #168]	@ (800347c <TIM_OC1_SetConfig+0x114>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d007      	beq.n	80033e8 <TIM_OC1_SetConfig+0x80>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a29      	ldr	r2, [pc, #164]	@ (8003480 <TIM_OC1_SetConfig+0x118>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d003      	beq.n	80033e8 <TIM_OC1_SetConfig+0x80>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a28      	ldr	r2, [pc, #160]	@ (8003484 <TIM_OC1_SetConfig+0x11c>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d10c      	bne.n	8003402 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	f023 0308 	bic.w	r3, r3, #8
 80033ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f023 0304 	bic.w	r3, r3, #4
 8003400:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a1b      	ldr	r2, [pc, #108]	@ (8003474 <TIM_OC1_SetConfig+0x10c>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d00f      	beq.n	800342a <TIM_OC1_SetConfig+0xc2>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a1a      	ldr	r2, [pc, #104]	@ (8003478 <TIM_OC1_SetConfig+0x110>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d00b      	beq.n	800342a <TIM_OC1_SetConfig+0xc2>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a19      	ldr	r2, [pc, #100]	@ (800347c <TIM_OC1_SetConfig+0x114>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d007      	beq.n	800342a <TIM_OC1_SetConfig+0xc2>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a18      	ldr	r2, [pc, #96]	@ (8003480 <TIM_OC1_SetConfig+0x118>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d003      	beq.n	800342a <TIM_OC1_SetConfig+0xc2>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a17      	ldr	r2, [pc, #92]	@ (8003484 <TIM_OC1_SetConfig+0x11c>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d111      	bne.n	800344e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003430:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003438:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	4313      	orrs	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	4313      	orrs	r3, r2
 800344c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	621a      	str	r2, [r3, #32]
}
 8003468:	bf00      	nop
 800346a:	371c      	adds	r7, #28
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr
 8003474:	40012c00 	.word	0x40012c00
 8003478:	40013400 	.word	0x40013400
 800347c:	40014000 	.word	0x40014000
 8003480:	40014400 	.word	0x40014400
 8003484:	40014800 	.word	0x40014800

08003488 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003488:	b480      	push	{r7}
 800348a:	b087      	sub	sp, #28
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	f023 0210 	bic.w	r2, r3, #16
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	021b      	lsls	r3, r3, #8
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f023 0320 	bic.w	r3, r3, #32
 80034d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	011b      	lsls	r3, r3, #4
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a28      	ldr	r2, [pc, #160]	@ (8003588 <TIM_OC2_SetConfig+0x100>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d003      	beq.n	80034f4 <TIM_OC2_SetConfig+0x6c>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a27      	ldr	r2, [pc, #156]	@ (800358c <TIM_OC2_SetConfig+0x104>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d10d      	bne.n	8003510 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	011b      	lsls	r3, r3, #4
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	4313      	orrs	r3, r2
 8003506:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800350e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a1d      	ldr	r2, [pc, #116]	@ (8003588 <TIM_OC2_SetConfig+0x100>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d00f      	beq.n	8003538 <TIM_OC2_SetConfig+0xb0>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a1c      	ldr	r2, [pc, #112]	@ (800358c <TIM_OC2_SetConfig+0x104>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d00b      	beq.n	8003538 <TIM_OC2_SetConfig+0xb0>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a1b      	ldr	r2, [pc, #108]	@ (8003590 <TIM_OC2_SetConfig+0x108>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d007      	beq.n	8003538 <TIM_OC2_SetConfig+0xb0>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a1a      	ldr	r2, [pc, #104]	@ (8003594 <TIM_OC2_SetConfig+0x10c>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d003      	beq.n	8003538 <TIM_OC2_SetConfig+0xb0>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a19      	ldr	r2, [pc, #100]	@ (8003598 <TIM_OC2_SetConfig+0x110>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d113      	bne.n	8003560 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800353e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003546:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	4313      	orrs	r3, r2
 8003552:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4313      	orrs	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	621a      	str	r2, [r3, #32]
}
 800357a:	bf00      	nop
 800357c:	371c      	adds	r7, #28
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	40012c00 	.word	0x40012c00
 800358c:	40013400 	.word	0x40013400
 8003590:	40014000 	.word	0x40014000
 8003594:	40014400 	.word	0x40014400
 8003598:	40014800 	.word	0x40014800

0800359c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800359c:	b480      	push	{r7}
 800359e:	b087      	sub	sp, #28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f023 0303 	bic.w	r3, r3, #3
 80035d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	4313      	orrs	r3, r2
 80035e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80035e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	021b      	lsls	r3, r3, #8
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a27      	ldr	r2, [pc, #156]	@ (8003698 <TIM_OC3_SetConfig+0xfc>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d003      	beq.n	8003606 <TIM_OC3_SetConfig+0x6a>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a26      	ldr	r2, [pc, #152]	@ (800369c <TIM_OC3_SetConfig+0x100>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d10d      	bne.n	8003622 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800360c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	021b      	lsls	r3, r3, #8
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	4313      	orrs	r3, r2
 8003618:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003620:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a1c      	ldr	r2, [pc, #112]	@ (8003698 <TIM_OC3_SetConfig+0xfc>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d00f      	beq.n	800364a <TIM_OC3_SetConfig+0xae>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a1b      	ldr	r2, [pc, #108]	@ (800369c <TIM_OC3_SetConfig+0x100>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d00b      	beq.n	800364a <TIM_OC3_SetConfig+0xae>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a1a      	ldr	r2, [pc, #104]	@ (80036a0 <TIM_OC3_SetConfig+0x104>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d007      	beq.n	800364a <TIM_OC3_SetConfig+0xae>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a19      	ldr	r2, [pc, #100]	@ (80036a4 <TIM_OC3_SetConfig+0x108>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d003      	beq.n	800364a <TIM_OC3_SetConfig+0xae>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a18      	ldr	r2, [pc, #96]	@ (80036a8 <TIM_OC3_SetConfig+0x10c>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d113      	bne.n	8003672 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003650:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003658:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	011b      	lsls	r3, r3, #4
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	4313      	orrs	r3, r2
 8003664:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	4313      	orrs	r3, r2
 8003670:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	621a      	str	r2, [r3, #32]
}
 800368c:	bf00      	nop
 800368e:	371c      	adds	r7, #28
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	40012c00 	.word	0x40012c00
 800369c:	40013400 	.word	0x40013400
 80036a0:	40014000 	.word	0x40014000
 80036a4:	40014400 	.word	0x40014400
 80036a8:	40014800 	.word	0x40014800

080036ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b087      	sub	sp, #28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	021b      	lsls	r3, r3, #8
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80036fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	031b      	lsls	r3, r3, #12
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	4313      	orrs	r3, r2
 8003706:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a18      	ldr	r2, [pc, #96]	@ (800376c <TIM_OC4_SetConfig+0xc0>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d00f      	beq.n	8003730 <TIM_OC4_SetConfig+0x84>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a17      	ldr	r2, [pc, #92]	@ (8003770 <TIM_OC4_SetConfig+0xc4>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d00b      	beq.n	8003730 <TIM_OC4_SetConfig+0x84>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a16      	ldr	r2, [pc, #88]	@ (8003774 <TIM_OC4_SetConfig+0xc8>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d007      	beq.n	8003730 <TIM_OC4_SetConfig+0x84>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a15      	ldr	r2, [pc, #84]	@ (8003778 <TIM_OC4_SetConfig+0xcc>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d003      	beq.n	8003730 <TIM_OC4_SetConfig+0x84>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a14      	ldr	r2, [pc, #80]	@ (800377c <TIM_OC4_SetConfig+0xd0>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d109      	bne.n	8003744 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003736:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	019b      	lsls	r3, r3, #6
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	4313      	orrs	r3, r2
 8003742:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	621a      	str	r2, [r3, #32]
}
 800375e:	bf00      	nop
 8003760:	371c      	adds	r7, #28
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	40012c00 	.word	0x40012c00
 8003770:	40013400 	.word	0x40013400
 8003774:	40014000 	.word	0x40014000
 8003778:	40014400 	.word	0x40014400
 800377c:	40014800 	.word	0x40014800

08003780 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003780:	b480      	push	{r7}
 8003782:	b087      	sub	sp, #28
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80037c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	041b      	lsls	r3, r3, #16
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a17      	ldr	r2, [pc, #92]	@ (8003834 <TIM_OC5_SetConfig+0xb4>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d00f      	beq.n	80037fa <TIM_OC5_SetConfig+0x7a>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a16      	ldr	r2, [pc, #88]	@ (8003838 <TIM_OC5_SetConfig+0xb8>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d00b      	beq.n	80037fa <TIM_OC5_SetConfig+0x7a>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a15      	ldr	r2, [pc, #84]	@ (800383c <TIM_OC5_SetConfig+0xbc>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d007      	beq.n	80037fa <TIM_OC5_SetConfig+0x7a>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a14      	ldr	r2, [pc, #80]	@ (8003840 <TIM_OC5_SetConfig+0xc0>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d003      	beq.n	80037fa <TIM_OC5_SetConfig+0x7a>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a13      	ldr	r2, [pc, #76]	@ (8003844 <TIM_OC5_SetConfig+0xc4>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d109      	bne.n	800380e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003800:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	021b      	lsls	r3, r3, #8
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	4313      	orrs	r3, r2
 800380c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	621a      	str	r2, [r3, #32]
}
 8003828:	bf00      	nop
 800382a:	371c      	adds	r7, #28
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	40012c00 	.word	0x40012c00
 8003838:	40013400 	.word	0x40013400
 800383c:	40014000 	.word	0x40014000
 8003840:	40014400 	.word	0x40014400
 8003844:	40014800 	.word	0x40014800

08003848 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003848:	b480      	push	{r7}
 800384a:	b087      	sub	sp, #28
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800386e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003876:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800387a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	021b      	lsls	r3, r3, #8
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	4313      	orrs	r3, r2
 8003886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800388e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	051b      	lsls	r3, r3, #20
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	4313      	orrs	r3, r2
 800389a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a18      	ldr	r2, [pc, #96]	@ (8003900 <TIM_OC6_SetConfig+0xb8>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d00f      	beq.n	80038c4 <TIM_OC6_SetConfig+0x7c>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a17      	ldr	r2, [pc, #92]	@ (8003904 <TIM_OC6_SetConfig+0xbc>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d00b      	beq.n	80038c4 <TIM_OC6_SetConfig+0x7c>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a16      	ldr	r2, [pc, #88]	@ (8003908 <TIM_OC6_SetConfig+0xc0>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d007      	beq.n	80038c4 <TIM_OC6_SetConfig+0x7c>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a15      	ldr	r2, [pc, #84]	@ (800390c <TIM_OC6_SetConfig+0xc4>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d003      	beq.n	80038c4 <TIM_OC6_SetConfig+0x7c>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a14      	ldr	r2, [pc, #80]	@ (8003910 <TIM_OC6_SetConfig+0xc8>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d109      	bne.n	80038d8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	029b      	lsls	r3, r3, #10
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	621a      	str	r2, [r3, #32]
}
 80038f2:	bf00      	nop
 80038f4:	371c      	adds	r7, #28
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	40012c00 	.word	0x40012c00
 8003904:	40013400 	.word	0x40013400
 8003908:	40014000 	.word	0x40014000
 800390c:	40014400 	.word	0x40014400
 8003910:	40014800 	.word	0x40014800

08003914 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003914:	b480      	push	{r7}
 8003916:	b087      	sub	sp, #28
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	f003 031f 	and.w	r3, r3, #31
 8003926:	2201      	movs	r2, #1
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6a1a      	ldr	r2, [r3, #32]
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	43db      	mvns	r3, r3
 8003936:	401a      	ands	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a1a      	ldr	r2, [r3, #32]
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	f003 031f 	and.w	r3, r3, #31
 8003946:	6879      	ldr	r1, [r7, #4]
 8003948:	fa01 f303 	lsl.w	r3, r1, r3
 800394c:	431a      	orrs	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	621a      	str	r2, [r3, #32]
}
 8003952:	bf00      	nop
 8003954:	371c      	adds	r7, #28
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
	...

08003960 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003970:	2b01      	cmp	r3, #1
 8003972:	d101      	bne.n	8003978 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003974:	2302      	movs	r3, #2
 8003976:	e063      	b.n	8003a40 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2202      	movs	r2, #2
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a2b      	ldr	r2, [pc, #172]	@ (8003a4c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d004      	beq.n	80039ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a2a      	ldr	r2, [pc, #168]	@ (8003a50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d108      	bne.n	80039be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80039b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a1b      	ldr	r2, [pc, #108]	@ (8003a4c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d018      	beq.n	8003a14 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039ea:	d013      	beq.n	8003a14 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a18      	ldr	r2, [pc, #96]	@ (8003a54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d00e      	beq.n	8003a14 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a17      	ldr	r2, [pc, #92]	@ (8003a58 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d009      	beq.n	8003a14 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a12      	ldr	r2, [pc, #72]	@ (8003a50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d004      	beq.n	8003a14 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a13      	ldr	r2, [pc, #76]	@ (8003a5c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d10c      	bne.n	8003a2e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a1a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3714      	adds	r7, #20
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr
 8003a4c:	40012c00 	.word	0x40012c00
 8003a50:	40013400 	.word	0x40013400
 8003a54:	40000400 	.word	0x40000400
 8003a58:	40000800 	.word	0x40000800
 8003a5c:	40014000 	.word	0x40014000

08003a60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e040      	b.n	8003af4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d106      	bne.n	8003a88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7fd fb3a 	bl	80010fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2224      	movs	r2, #36	@ 0x24
 8003a8c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 0201 	bic.w	r2, r2, #1
 8003a9c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d002      	beq.n	8003aac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 fa86 	bl	8003fb8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f8af 	bl	8003c10 <UART_SetConfig>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d101      	bne.n	8003abc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e01b      	b.n	8003af4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003aca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689a      	ldr	r2, [r3, #8]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ada:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f042 0201 	orr.w	r2, r2, #1
 8003aea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 fb05 	bl	80040fc <UART_CheckIdleState>
 8003af2:	4603      	mov	r3, r0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08a      	sub	sp, #40	@ 0x28
 8003b00:	af02      	add	r7, sp, #8
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	603b      	str	r3, [r7, #0]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b10:	2b20      	cmp	r3, #32
 8003b12:	d177      	bne.n	8003c04 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d002      	beq.n	8003b20 <HAL_UART_Transmit+0x24>
 8003b1a:	88fb      	ldrh	r3, [r7, #6]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e070      	b.n	8003c06 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2221      	movs	r2, #33	@ 0x21
 8003b30:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b32:	f7fd fc23 	bl	800137c <HAL_GetTick>
 8003b36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	88fa      	ldrh	r2, [r7, #6]
 8003b3c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	88fa      	ldrh	r2, [r7, #6]
 8003b44:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b50:	d108      	bne.n	8003b64 <HAL_UART_Transmit+0x68>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d104      	bne.n	8003b64 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	61bb      	str	r3, [r7, #24]
 8003b62:	e003      	b.n	8003b6c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b6c:	e02f      	b.n	8003bce <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	2200      	movs	r2, #0
 8003b76:	2180      	movs	r1, #128	@ 0x80
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f000 fb67 	bl	800424c <UART_WaitOnFlagUntilTimeout>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d004      	beq.n	8003b8e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2220      	movs	r2, #32
 8003b88:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e03b      	b.n	8003c06 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10b      	bne.n	8003bac <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	881a      	ldrh	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ba0:	b292      	uxth	r2, r2
 8003ba2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	3302      	adds	r3, #2
 8003ba8:	61bb      	str	r3, [r7, #24]
 8003baa:	e007      	b.n	8003bbc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	781a      	ldrb	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	3301      	adds	r3, #1
 8003bba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1c9      	bne.n	8003b6e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	2200      	movs	r2, #0
 8003be2:	2140      	movs	r1, #64	@ 0x40
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f000 fb31 	bl	800424c <UART_WaitOnFlagUntilTimeout>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d004      	beq.n	8003bfa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e005      	b.n	8003c06 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2220      	movs	r2, #32
 8003bfe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003c00:	2300      	movs	r3, #0
 8003c02:	e000      	b.n	8003c06 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003c04:	2302      	movs	r3, #2
  }
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3720      	adds	r7, #32
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
	...

08003c10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b088      	sub	sp, #32
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	431a      	orrs	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	69db      	ldr	r3, [r3, #28]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8003c3e:	f023 030c 	bic.w	r3, r3, #12
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	6812      	ldr	r2, [r2, #0]
 8003c46:	6979      	ldr	r1, [r7, #20]
 8003c48:	430b      	orrs	r3, r1
 8003c4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68da      	ldr	r2, [r3, #12]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4aa7      	ldr	r2, [pc, #668]	@ (8003f28 <UART_SetConfig+0x318>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d120      	bne.n	8003cd2 <UART_SetConfig+0xc2>
 8003c90:	4ba6      	ldr	r3, [pc, #664]	@ (8003f2c <UART_SetConfig+0x31c>)
 8003c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c94:	f003 0303 	and.w	r3, r3, #3
 8003c98:	2b03      	cmp	r3, #3
 8003c9a:	d817      	bhi.n	8003ccc <UART_SetConfig+0xbc>
 8003c9c:	a201      	add	r2, pc, #4	@ (adr r2, 8003ca4 <UART_SetConfig+0x94>)
 8003c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca2:	bf00      	nop
 8003ca4:	08003cb5 	.word	0x08003cb5
 8003ca8:	08003cc1 	.word	0x08003cc1
 8003cac:	08003cc7 	.word	0x08003cc7
 8003cb0:	08003cbb 	.word	0x08003cbb
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	77fb      	strb	r3, [r7, #31]
 8003cb8:	e0b5      	b.n	8003e26 <UART_SetConfig+0x216>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	77fb      	strb	r3, [r7, #31]
 8003cbe:	e0b2      	b.n	8003e26 <UART_SetConfig+0x216>
 8003cc0:	2304      	movs	r3, #4
 8003cc2:	77fb      	strb	r3, [r7, #31]
 8003cc4:	e0af      	b.n	8003e26 <UART_SetConfig+0x216>
 8003cc6:	2308      	movs	r3, #8
 8003cc8:	77fb      	strb	r3, [r7, #31]
 8003cca:	e0ac      	b.n	8003e26 <UART_SetConfig+0x216>
 8003ccc:	2310      	movs	r3, #16
 8003cce:	77fb      	strb	r3, [r7, #31]
 8003cd0:	e0a9      	b.n	8003e26 <UART_SetConfig+0x216>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a96      	ldr	r2, [pc, #600]	@ (8003f30 <UART_SetConfig+0x320>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d124      	bne.n	8003d26 <UART_SetConfig+0x116>
 8003cdc:	4b93      	ldr	r3, [pc, #588]	@ (8003f2c <UART_SetConfig+0x31c>)
 8003cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ce4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003ce8:	d011      	beq.n	8003d0e <UART_SetConfig+0xfe>
 8003cea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003cee:	d817      	bhi.n	8003d20 <UART_SetConfig+0x110>
 8003cf0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cf4:	d011      	beq.n	8003d1a <UART_SetConfig+0x10a>
 8003cf6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cfa:	d811      	bhi.n	8003d20 <UART_SetConfig+0x110>
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d003      	beq.n	8003d08 <UART_SetConfig+0xf8>
 8003d00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d04:	d006      	beq.n	8003d14 <UART_SetConfig+0x104>
 8003d06:	e00b      	b.n	8003d20 <UART_SetConfig+0x110>
 8003d08:	2300      	movs	r3, #0
 8003d0a:	77fb      	strb	r3, [r7, #31]
 8003d0c:	e08b      	b.n	8003e26 <UART_SetConfig+0x216>
 8003d0e:	2302      	movs	r3, #2
 8003d10:	77fb      	strb	r3, [r7, #31]
 8003d12:	e088      	b.n	8003e26 <UART_SetConfig+0x216>
 8003d14:	2304      	movs	r3, #4
 8003d16:	77fb      	strb	r3, [r7, #31]
 8003d18:	e085      	b.n	8003e26 <UART_SetConfig+0x216>
 8003d1a:	2308      	movs	r3, #8
 8003d1c:	77fb      	strb	r3, [r7, #31]
 8003d1e:	e082      	b.n	8003e26 <UART_SetConfig+0x216>
 8003d20:	2310      	movs	r3, #16
 8003d22:	77fb      	strb	r3, [r7, #31]
 8003d24:	e07f      	b.n	8003e26 <UART_SetConfig+0x216>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a82      	ldr	r2, [pc, #520]	@ (8003f34 <UART_SetConfig+0x324>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d124      	bne.n	8003d7a <UART_SetConfig+0x16a>
 8003d30:	4b7e      	ldr	r3, [pc, #504]	@ (8003f2c <UART_SetConfig+0x31c>)
 8003d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d34:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003d38:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003d3c:	d011      	beq.n	8003d62 <UART_SetConfig+0x152>
 8003d3e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003d42:	d817      	bhi.n	8003d74 <UART_SetConfig+0x164>
 8003d44:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003d48:	d011      	beq.n	8003d6e <UART_SetConfig+0x15e>
 8003d4a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003d4e:	d811      	bhi.n	8003d74 <UART_SetConfig+0x164>
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d003      	beq.n	8003d5c <UART_SetConfig+0x14c>
 8003d54:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d58:	d006      	beq.n	8003d68 <UART_SetConfig+0x158>
 8003d5a:	e00b      	b.n	8003d74 <UART_SetConfig+0x164>
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	77fb      	strb	r3, [r7, #31]
 8003d60:	e061      	b.n	8003e26 <UART_SetConfig+0x216>
 8003d62:	2302      	movs	r3, #2
 8003d64:	77fb      	strb	r3, [r7, #31]
 8003d66:	e05e      	b.n	8003e26 <UART_SetConfig+0x216>
 8003d68:	2304      	movs	r3, #4
 8003d6a:	77fb      	strb	r3, [r7, #31]
 8003d6c:	e05b      	b.n	8003e26 <UART_SetConfig+0x216>
 8003d6e:	2308      	movs	r3, #8
 8003d70:	77fb      	strb	r3, [r7, #31]
 8003d72:	e058      	b.n	8003e26 <UART_SetConfig+0x216>
 8003d74:	2310      	movs	r3, #16
 8003d76:	77fb      	strb	r3, [r7, #31]
 8003d78:	e055      	b.n	8003e26 <UART_SetConfig+0x216>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a6e      	ldr	r2, [pc, #440]	@ (8003f38 <UART_SetConfig+0x328>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d124      	bne.n	8003dce <UART_SetConfig+0x1be>
 8003d84:	4b69      	ldr	r3, [pc, #420]	@ (8003f2c <UART_SetConfig+0x31c>)
 8003d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d88:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003d8c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003d90:	d011      	beq.n	8003db6 <UART_SetConfig+0x1a6>
 8003d92:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003d96:	d817      	bhi.n	8003dc8 <UART_SetConfig+0x1b8>
 8003d98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d9c:	d011      	beq.n	8003dc2 <UART_SetConfig+0x1b2>
 8003d9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003da2:	d811      	bhi.n	8003dc8 <UART_SetConfig+0x1b8>
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <UART_SetConfig+0x1a0>
 8003da8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dac:	d006      	beq.n	8003dbc <UART_SetConfig+0x1ac>
 8003dae:	e00b      	b.n	8003dc8 <UART_SetConfig+0x1b8>
 8003db0:	2300      	movs	r3, #0
 8003db2:	77fb      	strb	r3, [r7, #31]
 8003db4:	e037      	b.n	8003e26 <UART_SetConfig+0x216>
 8003db6:	2302      	movs	r3, #2
 8003db8:	77fb      	strb	r3, [r7, #31]
 8003dba:	e034      	b.n	8003e26 <UART_SetConfig+0x216>
 8003dbc:	2304      	movs	r3, #4
 8003dbe:	77fb      	strb	r3, [r7, #31]
 8003dc0:	e031      	b.n	8003e26 <UART_SetConfig+0x216>
 8003dc2:	2308      	movs	r3, #8
 8003dc4:	77fb      	strb	r3, [r7, #31]
 8003dc6:	e02e      	b.n	8003e26 <UART_SetConfig+0x216>
 8003dc8:	2310      	movs	r3, #16
 8003dca:	77fb      	strb	r3, [r7, #31]
 8003dcc:	e02b      	b.n	8003e26 <UART_SetConfig+0x216>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a5a      	ldr	r2, [pc, #360]	@ (8003f3c <UART_SetConfig+0x32c>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d124      	bne.n	8003e22 <UART_SetConfig+0x212>
 8003dd8:	4b54      	ldr	r3, [pc, #336]	@ (8003f2c <UART_SetConfig+0x31c>)
 8003dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ddc:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003de0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003de4:	d011      	beq.n	8003e0a <UART_SetConfig+0x1fa>
 8003de6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003dea:	d817      	bhi.n	8003e1c <UART_SetConfig+0x20c>
 8003dec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003df0:	d011      	beq.n	8003e16 <UART_SetConfig+0x206>
 8003df2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003df6:	d811      	bhi.n	8003e1c <UART_SetConfig+0x20c>
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d003      	beq.n	8003e04 <UART_SetConfig+0x1f4>
 8003dfc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e00:	d006      	beq.n	8003e10 <UART_SetConfig+0x200>
 8003e02:	e00b      	b.n	8003e1c <UART_SetConfig+0x20c>
 8003e04:	2300      	movs	r3, #0
 8003e06:	77fb      	strb	r3, [r7, #31]
 8003e08:	e00d      	b.n	8003e26 <UART_SetConfig+0x216>
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	77fb      	strb	r3, [r7, #31]
 8003e0e:	e00a      	b.n	8003e26 <UART_SetConfig+0x216>
 8003e10:	2304      	movs	r3, #4
 8003e12:	77fb      	strb	r3, [r7, #31]
 8003e14:	e007      	b.n	8003e26 <UART_SetConfig+0x216>
 8003e16:	2308      	movs	r3, #8
 8003e18:	77fb      	strb	r3, [r7, #31]
 8003e1a:	e004      	b.n	8003e26 <UART_SetConfig+0x216>
 8003e1c:	2310      	movs	r3, #16
 8003e1e:	77fb      	strb	r3, [r7, #31]
 8003e20:	e001      	b.n	8003e26 <UART_SetConfig+0x216>
 8003e22:	2310      	movs	r3, #16
 8003e24:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e2e:	d15b      	bne.n	8003ee8 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8003e30:	7ffb      	ldrb	r3, [r7, #31]
 8003e32:	2b08      	cmp	r3, #8
 8003e34:	d827      	bhi.n	8003e86 <UART_SetConfig+0x276>
 8003e36:	a201      	add	r2, pc, #4	@ (adr r2, 8003e3c <UART_SetConfig+0x22c>)
 8003e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3c:	08003e61 	.word	0x08003e61
 8003e40:	08003e69 	.word	0x08003e69
 8003e44:	08003e71 	.word	0x08003e71
 8003e48:	08003e87 	.word	0x08003e87
 8003e4c:	08003e77 	.word	0x08003e77
 8003e50:	08003e87 	.word	0x08003e87
 8003e54:	08003e87 	.word	0x08003e87
 8003e58:	08003e87 	.word	0x08003e87
 8003e5c:	08003e7f 	.word	0x08003e7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e60:	f7fe ff36 	bl	8002cd0 <HAL_RCC_GetPCLK1Freq>
 8003e64:	61b8      	str	r0, [r7, #24]
        break;
 8003e66:	e013      	b.n	8003e90 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e68:	f7fe ff54 	bl	8002d14 <HAL_RCC_GetPCLK2Freq>
 8003e6c:	61b8      	str	r0, [r7, #24]
        break;
 8003e6e:	e00f      	b.n	8003e90 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e70:	4b33      	ldr	r3, [pc, #204]	@ (8003f40 <UART_SetConfig+0x330>)
 8003e72:	61bb      	str	r3, [r7, #24]
        break;
 8003e74:	e00c      	b.n	8003e90 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e76:	f7fe fecb 	bl	8002c10 <HAL_RCC_GetSysClockFreq>
 8003e7a:	61b8      	str	r0, [r7, #24]
        break;
 8003e7c:	e008      	b.n	8003e90 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e82:	61bb      	str	r3, [r7, #24]
        break;
 8003e84:	e004      	b.n	8003e90 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8003e86:	2300      	movs	r3, #0
 8003e88:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	77bb      	strb	r3, [r7, #30]
        break;
 8003e8e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 8082 	beq.w	8003f9c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	005a      	lsls	r2, r3, #1
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	085b      	lsrs	r3, r3, #1
 8003ea2:	441a      	add	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	2b0f      	cmp	r3, #15
 8003eb2:	d916      	bls.n	8003ee2 <UART_SetConfig+0x2d2>
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003eba:	d212      	bcs.n	8003ee2 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	f023 030f 	bic.w	r3, r3, #15
 8003ec4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	085b      	lsrs	r3, r3, #1
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	89fb      	ldrh	r3, [r7, #14]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	89fa      	ldrh	r2, [r7, #14]
 8003ede:	60da      	str	r2, [r3, #12]
 8003ee0:	e05c      	b.n	8003f9c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	77bb      	strb	r3, [r7, #30]
 8003ee6:	e059      	b.n	8003f9c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ee8:	7ffb      	ldrb	r3, [r7, #31]
 8003eea:	2b08      	cmp	r3, #8
 8003eec:	d835      	bhi.n	8003f5a <UART_SetConfig+0x34a>
 8003eee:	a201      	add	r2, pc, #4	@ (adr r2, 8003ef4 <UART_SetConfig+0x2e4>)
 8003ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef4:	08003f19 	.word	0x08003f19
 8003ef8:	08003f21 	.word	0x08003f21
 8003efc:	08003f45 	.word	0x08003f45
 8003f00:	08003f5b 	.word	0x08003f5b
 8003f04:	08003f4b 	.word	0x08003f4b
 8003f08:	08003f5b 	.word	0x08003f5b
 8003f0c:	08003f5b 	.word	0x08003f5b
 8003f10:	08003f5b 	.word	0x08003f5b
 8003f14:	08003f53 	.word	0x08003f53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f18:	f7fe feda 	bl	8002cd0 <HAL_RCC_GetPCLK1Freq>
 8003f1c:	61b8      	str	r0, [r7, #24]
        break;
 8003f1e:	e021      	b.n	8003f64 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f20:	f7fe fef8 	bl	8002d14 <HAL_RCC_GetPCLK2Freq>
 8003f24:	61b8      	str	r0, [r7, #24]
        break;
 8003f26:	e01d      	b.n	8003f64 <UART_SetConfig+0x354>
 8003f28:	40013800 	.word	0x40013800
 8003f2c:	40021000 	.word	0x40021000
 8003f30:	40004400 	.word	0x40004400
 8003f34:	40004800 	.word	0x40004800
 8003f38:	40004c00 	.word	0x40004c00
 8003f3c:	40005000 	.word	0x40005000
 8003f40:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f44:	4b1b      	ldr	r3, [pc, #108]	@ (8003fb4 <UART_SetConfig+0x3a4>)
 8003f46:	61bb      	str	r3, [r7, #24]
        break;
 8003f48:	e00c      	b.n	8003f64 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f4a:	f7fe fe61 	bl	8002c10 <HAL_RCC_GetSysClockFreq>
 8003f4e:	61b8      	str	r0, [r7, #24]
        break;
 8003f50:	e008      	b.n	8003f64 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f56:	61bb      	str	r3, [r7, #24]
        break;
 8003f58:	e004      	b.n	8003f64 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	77bb      	strb	r3, [r7, #30]
        break;
 8003f62:	bf00      	nop
    }

    if (pclk != 0U)
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d018      	beq.n	8003f9c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	085a      	lsrs	r2, r3, #1
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	441a      	add	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f7c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	2b0f      	cmp	r3, #15
 8003f82:	d909      	bls.n	8003f98 <UART_SetConfig+0x388>
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f8a:	d205      	bcs.n	8003f98 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	60da      	str	r2, [r3, #12]
 8003f96:	e001      	b.n	8003f9c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003fa8:	7fbb      	ldrb	r3, [r7, #30]
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3720      	adds	r7, #32
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	007a1200 	.word	0x007a1200

08003fb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc4:	f003 0308 	and.w	r3, r3, #8
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00a      	beq.n	8003fe2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00a      	beq.n	8004004 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00a      	beq.n	8004026 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402a:	f003 0304 	and.w	r3, r3, #4
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00a      	beq.n	8004048 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	430a      	orrs	r2, r1
 8004046:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404c:	f003 0310 	and.w	r3, r3, #16
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00a      	beq.n	800406a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406e:	f003 0320 	and.w	r3, r3, #32
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00a      	beq.n	800408c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004094:	2b00      	cmp	r3, #0
 8004096:	d01a      	beq.n	80040ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040b6:	d10a      	bne.n	80040ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00a      	beq.n	80040f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	605a      	str	r2, [r3, #4]
  }
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b098      	sub	sp, #96	@ 0x60
 8004100:	af02      	add	r7, sp, #8
 8004102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800410c:	f7fd f936 	bl	800137c <HAL_GetTick>
 8004110:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0308 	and.w	r3, r3, #8
 800411c:	2b08      	cmp	r3, #8
 800411e:	d12e      	bne.n	800417e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004120:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004128:	2200      	movs	r2, #0
 800412a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f88c 	bl	800424c <UART_WaitOnFlagUntilTimeout>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d021      	beq.n	800417e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004142:	e853 3f00 	ldrex	r3, [r3]
 8004146:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800414a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800414e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	461a      	mov	r2, r3
 8004156:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004158:	647b      	str	r3, [r7, #68]	@ 0x44
 800415a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800415e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004160:	e841 2300 	strex	r3, r2, [r1]
 8004164:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004166:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1e6      	bne.n	800413a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2220      	movs	r2, #32
 8004170:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e062      	b.n	8004244 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0304 	and.w	r3, r3, #4
 8004188:	2b04      	cmp	r3, #4
 800418a:	d149      	bne.n	8004220 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800418c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004190:	9300      	str	r3, [sp, #0]
 8004192:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004194:	2200      	movs	r2, #0
 8004196:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f856 	bl	800424c <UART_WaitOnFlagUntilTimeout>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d03c      	beq.n	8004220 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ae:	e853 3f00 	ldrex	r3, [r3]
 80041b2:	623b      	str	r3, [r7, #32]
   return(result);
 80041b4:	6a3b      	ldr	r3, [r7, #32]
 80041b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	461a      	mov	r2, r3
 80041c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80041c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041cc:	e841 2300 	strex	r3, r2, [r1]
 80041d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1e6      	bne.n	80041a6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	3308      	adds	r3, #8
 80041de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	e853 3f00 	ldrex	r3, [r3]
 80041e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f023 0301 	bic.w	r3, r3, #1
 80041ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	3308      	adds	r3, #8
 80041f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041f8:	61fa      	str	r2, [r7, #28]
 80041fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fc:	69b9      	ldr	r1, [r7, #24]
 80041fe:	69fa      	ldr	r2, [r7, #28]
 8004200:	e841 2300 	strex	r3, r2, [r1]
 8004204:	617b      	str	r3, [r7, #20]
   return(result);
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1e5      	bne.n	80041d8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2220      	movs	r2, #32
 8004210:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e011      	b.n	8004244 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2220      	movs	r2, #32
 8004224:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2220      	movs	r2, #32
 800422a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3758      	adds	r7, #88	@ 0x58
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	603b      	str	r3, [r7, #0]
 8004258:	4613      	mov	r3, r2
 800425a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800425c:	e04f      	b.n	80042fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004264:	d04b      	beq.n	80042fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004266:	f7fd f889 	bl	800137c <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	429a      	cmp	r2, r3
 8004274:	d302      	bcc.n	800427c <UART_WaitOnFlagUntilTimeout+0x30>
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d101      	bne.n	8004280 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e04e      	b.n	800431e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0304 	and.w	r3, r3, #4
 800428a:	2b00      	cmp	r3, #0
 800428c:	d037      	beq.n	80042fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	2b80      	cmp	r3, #128	@ 0x80
 8004292:	d034      	beq.n	80042fe <UART_WaitOnFlagUntilTimeout+0xb2>
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	2b40      	cmp	r3, #64	@ 0x40
 8004298:	d031      	beq.n	80042fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	f003 0308 	and.w	r3, r3, #8
 80042a4:	2b08      	cmp	r3, #8
 80042a6:	d110      	bne.n	80042ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2208      	movs	r2, #8
 80042ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f000 f838 	bl	8004326 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2208      	movs	r2, #8
 80042ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e029      	b.n	800431e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	69db      	ldr	r3, [r3, #28]
 80042d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042d8:	d111      	bne.n	80042fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80042e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	f000 f81e 	bl	8004326 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2220      	movs	r2, #32
 80042ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e00f      	b.n	800431e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	69da      	ldr	r2, [r3, #28]
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	4013      	ands	r3, r2
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	429a      	cmp	r2, r3
 800430c:	bf0c      	ite	eq
 800430e:	2301      	moveq	r3, #1
 8004310:	2300      	movne	r3, #0
 8004312:	b2db      	uxtb	r3, r3
 8004314:	461a      	mov	r2, r3
 8004316:	79fb      	ldrb	r3, [r7, #7]
 8004318:	429a      	cmp	r2, r3
 800431a:	d0a0      	beq.n	800425e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004326:	b480      	push	{r7}
 8004328:	b095      	sub	sp, #84	@ 0x54
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004336:	e853 3f00 	ldrex	r3, [r3]
 800433a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800433c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800433e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004342:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	461a      	mov	r2, r3
 800434a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800434c:	643b      	str	r3, [r7, #64]	@ 0x40
 800434e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004350:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004352:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004354:	e841 2300 	strex	r3, r2, [r1]
 8004358:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800435a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1e6      	bne.n	800432e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	3308      	adds	r3, #8
 8004366:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004368:	6a3b      	ldr	r3, [r7, #32]
 800436a:	e853 3f00 	ldrex	r3, [r3]
 800436e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	f023 0301 	bic.w	r3, r3, #1
 8004376:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	3308      	adds	r3, #8
 800437e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004380:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004382:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004384:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004386:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004388:	e841 2300 	strex	r3, r2, [r1]
 800438c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800438e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1e5      	bne.n	8004360 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004398:	2b01      	cmp	r3, #1
 800439a:	d118      	bne.n	80043ce <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	e853 3f00 	ldrex	r3, [r3]
 80043a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	f023 0310 	bic.w	r3, r3, #16
 80043b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	461a      	mov	r2, r3
 80043b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043ba:	61bb      	str	r3, [r7, #24]
 80043bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043be:	6979      	ldr	r1, [r7, #20]
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	e841 2300 	strex	r3, r2, [r1]
 80043c6:	613b      	str	r3, [r7, #16]
   return(result);
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1e6      	bne.n	800439c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2220      	movs	r2, #32
 80043d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80043e2:	bf00      	nop
 80043e4:	3754      	adds	r7, #84	@ 0x54
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
	...

080043f0 <malloc>:
 80043f0:	4b02      	ldr	r3, [pc, #8]	@ (80043fc <malloc+0xc>)
 80043f2:	4601      	mov	r1, r0
 80043f4:	6818      	ldr	r0, [r3, #0]
 80043f6:	f000 b825 	b.w	8004444 <_malloc_r>
 80043fa:	bf00      	nop
 80043fc:	20000014 	.word	0x20000014

08004400 <sbrk_aligned>:
 8004400:	b570      	push	{r4, r5, r6, lr}
 8004402:	4e0f      	ldr	r6, [pc, #60]	@ (8004440 <sbrk_aligned+0x40>)
 8004404:	460c      	mov	r4, r1
 8004406:	6831      	ldr	r1, [r6, #0]
 8004408:	4605      	mov	r5, r0
 800440a:	b911      	cbnz	r1, 8004412 <sbrk_aligned+0x12>
 800440c:	f000 f8ce 	bl	80045ac <_sbrk_r>
 8004410:	6030      	str	r0, [r6, #0]
 8004412:	4621      	mov	r1, r4
 8004414:	4628      	mov	r0, r5
 8004416:	f000 f8c9 	bl	80045ac <_sbrk_r>
 800441a:	1c43      	adds	r3, r0, #1
 800441c:	d103      	bne.n	8004426 <sbrk_aligned+0x26>
 800441e:	f04f 34ff 	mov.w	r4, #4294967295
 8004422:	4620      	mov	r0, r4
 8004424:	bd70      	pop	{r4, r5, r6, pc}
 8004426:	1cc4      	adds	r4, r0, #3
 8004428:	f024 0403 	bic.w	r4, r4, #3
 800442c:	42a0      	cmp	r0, r4
 800442e:	d0f8      	beq.n	8004422 <sbrk_aligned+0x22>
 8004430:	1a21      	subs	r1, r4, r0
 8004432:	4628      	mov	r0, r5
 8004434:	f000 f8ba 	bl	80045ac <_sbrk_r>
 8004438:	3001      	adds	r0, #1
 800443a:	d1f2      	bne.n	8004422 <sbrk_aligned+0x22>
 800443c:	e7ef      	b.n	800441e <sbrk_aligned+0x1e>
 800443e:	bf00      	nop
 8004440:	200002a0 	.word	0x200002a0

08004444 <_malloc_r>:
 8004444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004448:	1ccd      	adds	r5, r1, #3
 800444a:	f025 0503 	bic.w	r5, r5, #3
 800444e:	3508      	adds	r5, #8
 8004450:	2d0c      	cmp	r5, #12
 8004452:	bf38      	it	cc
 8004454:	250c      	movcc	r5, #12
 8004456:	2d00      	cmp	r5, #0
 8004458:	4606      	mov	r6, r0
 800445a:	db01      	blt.n	8004460 <_malloc_r+0x1c>
 800445c:	42a9      	cmp	r1, r5
 800445e:	d904      	bls.n	800446a <_malloc_r+0x26>
 8004460:	230c      	movs	r3, #12
 8004462:	6033      	str	r3, [r6, #0]
 8004464:	2000      	movs	r0, #0
 8004466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800446a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004540 <_malloc_r+0xfc>
 800446e:	f000 f869 	bl	8004544 <__malloc_lock>
 8004472:	f8d8 3000 	ldr.w	r3, [r8]
 8004476:	461c      	mov	r4, r3
 8004478:	bb44      	cbnz	r4, 80044cc <_malloc_r+0x88>
 800447a:	4629      	mov	r1, r5
 800447c:	4630      	mov	r0, r6
 800447e:	f7ff ffbf 	bl	8004400 <sbrk_aligned>
 8004482:	1c43      	adds	r3, r0, #1
 8004484:	4604      	mov	r4, r0
 8004486:	d158      	bne.n	800453a <_malloc_r+0xf6>
 8004488:	f8d8 4000 	ldr.w	r4, [r8]
 800448c:	4627      	mov	r7, r4
 800448e:	2f00      	cmp	r7, #0
 8004490:	d143      	bne.n	800451a <_malloc_r+0xd6>
 8004492:	2c00      	cmp	r4, #0
 8004494:	d04b      	beq.n	800452e <_malloc_r+0xea>
 8004496:	6823      	ldr	r3, [r4, #0]
 8004498:	4639      	mov	r1, r7
 800449a:	4630      	mov	r0, r6
 800449c:	eb04 0903 	add.w	r9, r4, r3
 80044a0:	f000 f884 	bl	80045ac <_sbrk_r>
 80044a4:	4581      	cmp	r9, r0
 80044a6:	d142      	bne.n	800452e <_malloc_r+0xea>
 80044a8:	6821      	ldr	r1, [r4, #0]
 80044aa:	1a6d      	subs	r5, r5, r1
 80044ac:	4629      	mov	r1, r5
 80044ae:	4630      	mov	r0, r6
 80044b0:	f7ff ffa6 	bl	8004400 <sbrk_aligned>
 80044b4:	3001      	adds	r0, #1
 80044b6:	d03a      	beq.n	800452e <_malloc_r+0xea>
 80044b8:	6823      	ldr	r3, [r4, #0]
 80044ba:	442b      	add	r3, r5
 80044bc:	6023      	str	r3, [r4, #0]
 80044be:	f8d8 3000 	ldr.w	r3, [r8]
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	bb62      	cbnz	r2, 8004520 <_malloc_r+0xdc>
 80044c6:	f8c8 7000 	str.w	r7, [r8]
 80044ca:	e00f      	b.n	80044ec <_malloc_r+0xa8>
 80044cc:	6822      	ldr	r2, [r4, #0]
 80044ce:	1b52      	subs	r2, r2, r5
 80044d0:	d420      	bmi.n	8004514 <_malloc_r+0xd0>
 80044d2:	2a0b      	cmp	r2, #11
 80044d4:	d917      	bls.n	8004506 <_malloc_r+0xc2>
 80044d6:	1961      	adds	r1, r4, r5
 80044d8:	42a3      	cmp	r3, r4
 80044da:	6025      	str	r5, [r4, #0]
 80044dc:	bf18      	it	ne
 80044de:	6059      	strne	r1, [r3, #4]
 80044e0:	6863      	ldr	r3, [r4, #4]
 80044e2:	bf08      	it	eq
 80044e4:	f8c8 1000 	streq.w	r1, [r8]
 80044e8:	5162      	str	r2, [r4, r5]
 80044ea:	604b      	str	r3, [r1, #4]
 80044ec:	4630      	mov	r0, r6
 80044ee:	f000 f82f 	bl	8004550 <__malloc_unlock>
 80044f2:	f104 000b 	add.w	r0, r4, #11
 80044f6:	1d23      	adds	r3, r4, #4
 80044f8:	f020 0007 	bic.w	r0, r0, #7
 80044fc:	1ac2      	subs	r2, r0, r3
 80044fe:	bf1c      	itt	ne
 8004500:	1a1b      	subne	r3, r3, r0
 8004502:	50a3      	strne	r3, [r4, r2]
 8004504:	e7af      	b.n	8004466 <_malloc_r+0x22>
 8004506:	6862      	ldr	r2, [r4, #4]
 8004508:	42a3      	cmp	r3, r4
 800450a:	bf0c      	ite	eq
 800450c:	f8c8 2000 	streq.w	r2, [r8]
 8004510:	605a      	strne	r2, [r3, #4]
 8004512:	e7eb      	b.n	80044ec <_malloc_r+0xa8>
 8004514:	4623      	mov	r3, r4
 8004516:	6864      	ldr	r4, [r4, #4]
 8004518:	e7ae      	b.n	8004478 <_malloc_r+0x34>
 800451a:	463c      	mov	r4, r7
 800451c:	687f      	ldr	r7, [r7, #4]
 800451e:	e7b6      	b.n	800448e <_malloc_r+0x4a>
 8004520:	461a      	mov	r2, r3
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	42a3      	cmp	r3, r4
 8004526:	d1fb      	bne.n	8004520 <_malloc_r+0xdc>
 8004528:	2300      	movs	r3, #0
 800452a:	6053      	str	r3, [r2, #4]
 800452c:	e7de      	b.n	80044ec <_malloc_r+0xa8>
 800452e:	230c      	movs	r3, #12
 8004530:	6033      	str	r3, [r6, #0]
 8004532:	4630      	mov	r0, r6
 8004534:	f000 f80c 	bl	8004550 <__malloc_unlock>
 8004538:	e794      	b.n	8004464 <_malloc_r+0x20>
 800453a:	6005      	str	r5, [r0, #0]
 800453c:	e7d6      	b.n	80044ec <_malloc_r+0xa8>
 800453e:	bf00      	nop
 8004540:	200002a4 	.word	0x200002a4

08004544 <__malloc_lock>:
 8004544:	4801      	ldr	r0, [pc, #4]	@ (800454c <__malloc_lock+0x8>)
 8004546:	f000 b86b 	b.w	8004620 <__retarget_lock_acquire_recursive>
 800454a:	bf00      	nop
 800454c:	200003e4 	.word	0x200003e4

08004550 <__malloc_unlock>:
 8004550:	4801      	ldr	r0, [pc, #4]	@ (8004558 <__malloc_unlock+0x8>)
 8004552:	f000 b866 	b.w	8004622 <__retarget_lock_release_recursive>
 8004556:	bf00      	nop
 8004558:	200003e4 	.word	0x200003e4

0800455c <siprintf>:
 800455c:	b40e      	push	{r1, r2, r3}
 800455e:	b500      	push	{lr}
 8004560:	b09c      	sub	sp, #112	@ 0x70
 8004562:	ab1d      	add	r3, sp, #116	@ 0x74
 8004564:	9002      	str	r0, [sp, #8]
 8004566:	9006      	str	r0, [sp, #24]
 8004568:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800456c:	4809      	ldr	r0, [pc, #36]	@ (8004594 <siprintf+0x38>)
 800456e:	9107      	str	r1, [sp, #28]
 8004570:	9104      	str	r1, [sp, #16]
 8004572:	4909      	ldr	r1, [pc, #36]	@ (8004598 <siprintf+0x3c>)
 8004574:	f853 2b04 	ldr.w	r2, [r3], #4
 8004578:	9105      	str	r1, [sp, #20]
 800457a:	6800      	ldr	r0, [r0, #0]
 800457c:	9301      	str	r3, [sp, #4]
 800457e:	a902      	add	r1, sp, #8
 8004580:	f000 f8f6 	bl	8004770 <_svfiprintf_r>
 8004584:	9b02      	ldr	r3, [sp, #8]
 8004586:	2200      	movs	r2, #0
 8004588:	701a      	strb	r2, [r3, #0]
 800458a:	b01c      	add	sp, #112	@ 0x70
 800458c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004590:	b003      	add	sp, #12
 8004592:	4770      	bx	lr
 8004594:	20000014 	.word	0x20000014
 8004598:	ffff0208 	.word	0xffff0208

0800459c <memset>:
 800459c:	4402      	add	r2, r0
 800459e:	4603      	mov	r3, r0
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d100      	bne.n	80045a6 <memset+0xa>
 80045a4:	4770      	bx	lr
 80045a6:	f803 1b01 	strb.w	r1, [r3], #1
 80045aa:	e7f9      	b.n	80045a0 <memset+0x4>

080045ac <_sbrk_r>:
 80045ac:	b538      	push	{r3, r4, r5, lr}
 80045ae:	4d06      	ldr	r5, [pc, #24]	@ (80045c8 <_sbrk_r+0x1c>)
 80045b0:	2300      	movs	r3, #0
 80045b2:	4604      	mov	r4, r0
 80045b4:	4608      	mov	r0, r1
 80045b6:	602b      	str	r3, [r5, #0]
 80045b8:	f7fc fe14 	bl	80011e4 <_sbrk>
 80045bc:	1c43      	adds	r3, r0, #1
 80045be:	d102      	bne.n	80045c6 <_sbrk_r+0x1a>
 80045c0:	682b      	ldr	r3, [r5, #0]
 80045c2:	b103      	cbz	r3, 80045c6 <_sbrk_r+0x1a>
 80045c4:	6023      	str	r3, [r4, #0]
 80045c6:	bd38      	pop	{r3, r4, r5, pc}
 80045c8:	200003e0 	.word	0x200003e0

080045cc <__errno>:
 80045cc:	4b01      	ldr	r3, [pc, #4]	@ (80045d4 <__errno+0x8>)
 80045ce:	6818      	ldr	r0, [r3, #0]
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	20000014 	.word	0x20000014

080045d8 <__libc_init_array>:
 80045d8:	b570      	push	{r4, r5, r6, lr}
 80045da:	4d0d      	ldr	r5, [pc, #52]	@ (8004610 <__libc_init_array+0x38>)
 80045dc:	4c0d      	ldr	r4, [pc, #52]	@ (8004614 <__libc_init_array+0x3c>)
 80045de:	1b64      	subs	r4, r4, r5
 80045e0:	10a4      	asrs	r4, r4, #2
 80045e2:	2600      	movs	r6, #0
 80045e4:	42a6      	cmp	r6, r4
 80045e6:	d109      	bne.n	80045fc <__libc_init_array+0x24>
 80045e8:	4d0b      	ldr	r5, [pc, #44]	@ (8004618 <__libc_init_array+0x40>)
 80045ea:	4c0c      	ldr	r4, [pc, #48]	@ (800461c <__libc_init_array+0x44>)
 80045ec:	f000 fba8 	bl	8004d40 <_init>
 80045f0:	1b64      	subs	r4, r4, r5
 80045f2:	10a4      	asrs	r4, r4, #2
 80045f4:	2600      	movs	r6, #0
 80045f6:	42a6      	cmp	r6, r4
 80045f8:	d105      	bne.n	8004606 <__libc_init_array+0x2e>
 80045fa:	bd70      	pop	{r4, r5, r6, pc}
 80045fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004600:	4798      	blx	r3
 8004602:	3601      	adds	r6, #1
 8004604:	e7ee      	b.n	80045e4 <__libc_init_array+0xc>
 8004606:	f855 3b04 	ldr.w	r3, [r5], #4
 800460a:	4798      	blx	r3
 800460c:	3601      	adds	r6, #1
 800460e:	e7f2      	b.n	80045f6 <__libc_init_array+0x1e>
 8004610:	08004e68 	.word	0x08004e68
 8004614:	08004e68 	.word	0x08004e68
 8004618:	08004e68 	.word	0x08004e68
 800461c:	08004e6c 	.word	0x08004e6c

08004620 <__retarget_lock_acquire_recursive>:
 8004620:	4770      	bx	lr

08004622 <__retarget_lock_release_recursive>:
 8004622:	4770      	bx	lr

08004624 <_free_r>:
 8004624:	b538      	push	{r3, r4, r5, lr}
 8004626:	4605      	mov	r5, r0
 8004628:	2900      	cmp	r1, #0
 800462a:	d041      	beq.n	80046b0 <_free_r+0x8c>
 800462c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004630:	1f0c      	subs	r4, r1, #4
 8004632:	2b00      	cmp	r3, #0
 8004634:	bfb8      	it	lt
 8004636:	18e4      	addlt	r4, r4, r3
 8004638:	f7ff ff84 	bl	8004544 <__malloc_lock>
 800463c:	4a1d      	ldr	r2, [pc, #116]	@ (80046b4 <_free_r+0x90>)
 800463e:	6813      	ldr	r3, [r2, #0]
 8004640:	b933      	cbnz	r3, 8004650 <_free_r+0x2c>
 8004642:	6063      	str	r3, [r4, #4]
 8004644:	6014      	str	r4, [r2, #0]
 8004646:	4628      	mov	r0, r5
 8004648:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800464c:	f7ff bf80 	b.w	8004550 <__malloc_unlock>
 8004650:	42a3      	cmp	r3, r4
 8004652:	d908      	bls.n	8004666 <_free_r+0x42>
 8004654:	6820      	ldr	r0, [r4, #0]
 8004656:	1821      	adds	r1, r4, r0
 8004658:	428b      	cmp	r3, r1
 800465a:	bf01      	itttt	eq
 800465c:	6819      	ldreq	r1, [r3, #0]
 800465e:	685b      	ldreq	r3, [r3, #4]
 8004660:	1809      	addeq	r1, r1, r0
 8004662:	6021      	streq	r1, [r4, #0]
 8004664:	e7ed      	b.n	8004642 <_free_r+0x1e>
 8004666:	461a      	mov	r2, r3
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	b10b      	cbz	r3, 8004670 <_free_r+0x4c>
 800466c:	42a3      	cmp	r3, r4
 800466e:	d9fa      	bls.n	8004666 <_free_r+0x42>
 8004670:	6811      	ldr	r1, [r2, #0]
 8004672:	1850      	adds	r0, r2, r1
 8004674:	42a0      	cmp	r0, r4
 8004676:	d10b      	bne.n	8004690 <_free_r+0x6c>
 8004678:	6820      	ldr	r0, [r4, #0]
 800467a:	4401      	add	r1, r0
 800467c:	1850      	adds	r0, r2, r1
 800467e:	4283      	cmp	r3, r0
 8004680:	6011      	str	r1, [r2, #0]
 8004682:	d1e0      	bne.n	8004646 <_free_r+0x22>
 8004684:	6818      	ldr	r0, [r3, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	6053      	str	r3, [r2, #4]
 800468a:	4408      	add	r0, r1
 800468c:	6010      	str	r0, [r2, #0]
 800468e:	e7da      	b.n	8004646 <_free_r+0x22>
 8004690:	d902      	bls.n	8004698 <_free_r+0x74>
 8004692:	230c      	movs	r3, #12
 8004694:	602b      	str	r3, [r5, #0]
 8004696:	e7d6      	b.n	8004646 <_free_r+0x22>
 8004698:	6820      	ldr	r0, [r4, #0]
 800469a:	1821      	adds	r1, r4, r0
 800469c:	428b      	cmp	r3, r1
 800469e:	bf04      	itt	eq
 80046a0:	6819      	ldreq	r1, [r3, #0]
 80046a2:	685b      	ldreq	r3, [r3, #4]
 80046a4:	6063      	str	r3, [r4, #4]
 80046a6:	bf04      	itt	eq
 80046a8:	1809      	addeq	r1, r1, r0
 80046aa:	6021      	streq	r1, [r4, #0]
 80046ac:	6054      	str	r4, [r2, #4]
 80046ae:	e7ca      	b.n	8004646 <_free_r+0x22>
 80046b0:	bd38      	pop	{r3, r4, r5, pc}
 80046b2:	bf00      	nop
 80046b4:	200002a4 	.word	0x200002a4

080046b8 <__ssputs_r>:
 80046b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046bc:	688e      	ldr	r6, [r1, #8]
 80046be:	461f      	mov	r7, r3
 80046c0:	42be      	cmp	r6, r7
 80046c2:	680b      	ldr	r3, [r1, #0]
 80046c4:	4682      	mov	sl, r0
 80046c6:	460c      	mov	r4, r1
 80046c8:	4690      	mov	r8, r2
 80046ca:	d82d      	bhi.n	8004728 <__ssputs_r+0x70>
 80046cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80046d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80046d4:	d026      	beq.n	8004724 <__ssputs_r+0x6c>
 80046d6:	6965      	ldr	r5, [r4, #20]
 80046d8:	6909      	ldr	r1, [r1, #16]
 80046da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80046de:	eba3 0901 	sub.w	r9, r3, r1
 80046e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80046e6:	1c7b      	adds	r3, r7, #1
 80046e8:	444b      	add	r3, r9
 80046ea:	106d      	asrs	r5, r5, #1
 80046ec:	429d      	cmp	r5, r3
 80046ee:	bf38      	it	cc
 80046f0:	461d      	movcc	r5, r3
 80046f2:	0553      	lsls	r3, r2, #21
 80046f4:	d527      	bpl.n	8004746 <__ssputs_r+0x8e>
 80046f6:	4629      	mov	r1, r5
 80046f8:	f7ff fea4 	bl	8004444 <_malloc_r>
 80046fc:	4606      	mov	r6, r0
 80046fe:	b360      	cbz	r0, 800475a <__ssputs_r+0xa2>
 8004700:	6921      	ldr	r1, [r4, #16]
 8004702:	464a      	mov	r2, r9
 8004704:	f000 fad8 	bl	8004cb8 <memcpy>
 8004708:	89a3      	ldrh	r3, [r4, #12]
 800470a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800470e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004712:	81a3      	strh	r3, [r4, #12]
 8004714:	6126      	str	r6, [r4, #16]
 8004716:	6165      	str	r5, [r4, #20]
 8004718:	444e      	add	r6, r9
 800471a:	eba5 0509 	sub.w	r5, r5, r9
 800471e:	6026      	str	r6, [r4, #0]
 8004720:	60a5      	str	r5, [r4, #8]
 8004722:	463e      	mov	r6, r7
 8004724:	42be      	cmp	r6, r7
 8004726:	d900      	bls.n	800472a <__ssputs_r+0x72>
 8004728:	463e      	mov	r6, r7
 800472a:	6820      	ldr	r0, [r4, #0]
 800472c:	4632      	mov	r2, r6
 800472e:	4641      	mov	r1, r8
 8004730:	f000 faa8 	bl	8004c84 <memmove>
 8004734:	68a3      	ldr	r3, [r4, #8]
 8004736:	1b9b      	subs	r3, r3, r6
 8004738:	60a3      	str	r3, [r4, #8]
 800473a:	6823      	ldr	r3, [r4, #0]
 800473c:	4433      	add	r3, r6
 800473e:	6023      	str	r3, [r4, #0]
 8004740:	2000      	movs	r0, #0
 8004742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004746:	462a      	mov	r2, r5
 8004748:	f000 fac4 	bl	8004cd4 <_realloc_r>
 800474c:	4606      	mov	r6, r0
 800474e:	2800      	cmp	r0, #0
 8004750:	d1e0      	bne.n	8004714 <__ssputs_r+0x5c>
 8004752:	6921      	ldr	r1, [r4, #16]
 8004754:	4650      	mov	r0, sl
 8004756:	f7ff ff65 	bl	8004624 <_free_r>
 800475a:	230c      	movs	r3, #12
 800475c:	f8ca 3000 	str.w	r3, [sl]
 8004760:	89a3      	ldrh	r3, [r4, #12]
 8004762:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004766:	81a3      	strh	r3, [r4, #12]
 8004768:	f04f 30ff 	mov.w	r0, #4294967295
 800476c:	e7e9      	b.n	8004742 <__ssputs_r+0x8a>
	...

08004770 <_svfiprintf_r>:
 8004770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004774:	4698      	mov	r8, r3
 8004776:	898b      	ldrh	r3, [r1, #12]
 8004778:	061b      	lsls	r3, r3, #24
 800477a:	b09d      	sub	sp, #116	@ 0x74
 800477c:	4607      	mov	r7, r0
 800477e:	460d      	mov	r5, r1
 8004780:	4614      	mov	r4, r2
 8004782:	d510      	bpl.n	80047a6 <_svfiprintf_r+0x36>
 8004784:	690b      	ldr	r3, [r1, #16]
 8004786:	b973      	cbnz	r3, 80047a6 <_svfiprintf_r+0x36>
 8004788:	2140      	movs	r1, #64	@ 0x40
 800478a:	f7ff fe5b 	bl	8004444 <_malloc_r>
 800478e:	6028      	str	r0, [r5, #0]
 8004790:	6128      	str	r0, [r5, #16]
 8004792:	b930      	cbnz	r0, 80047a2 <_svfiprintf_r+0x32>
 8004794:	230c      	movs	r3, #12
 8004796:	603b      	str	r3, [r7, #0]
 8004798:	f04f 30ff 	mov.w	r0, #4294967295
 800479c:	b01d      	add	sp, #116	@ 0x74
 800479e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047a2:	2340      	movs	r3, #64	@ 0x40
 80047a4:	616b      	str	r3, [r5, #20]
 80047a6:	2300      	movs	r3, #0
 80047a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80047aa:	2320      	movs	r3, #32
 80047ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80047b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80047b4:	2330      	movs	r3, #48	@ 0x30
 80047b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004954 <_svfiprintf_r+0x1e4>
 80047ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80047be:	f04f 0901 	mov.w	r9, #1
 80047c2:	4623      	mov	r3, r4
 80047c4:	469a      	mov	sl, r3
 80047c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047ca:	b10a      	cbz	r2, 80047d0 <_svfiprintf_r+0x60>
 80047cc:	2a25      	cmp	r2, #37	@ 0x25
 80047ce:	d1f9      	bne.n	80047c4 <_svfiprintf_r+0x54>
 80047d0:	ebba 0b04 	subs.w	fp, sl, r4
 80047d4:	d00b      	beq.n	80047ee <_svfiprintf_r+0x7e>
 80047d6:	465b      	mov	r3, fp
 80047d8:	4622      	mov	r2, r4
 80047da:	4629      	mov	r1, r5
 80047dc:	4638      	mov	r0, r7
 80047de:	f7ff ff6b 	bl	80046b8 <__ssputs_r>
 80047e2:	3001      	adds	r0, #1
 80047e4:	f000 80a7 	beq.w	8004936 <_svfiprintf_r+0x1c6>
 80047e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80047ea:	445a      	add	r2, fp
 80047ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80047ee:	f89a 3000 	ldrb.w	r3, [sl]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f000 809f 	beq.w	8004936 <_svfiprintf_r+0x1c6>
 80047f8:	2300      	movs	r3, #0
 80047fa:	f04f 32ff 	mov.w	r2, #4294967295
 80047fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004802:	f10a 0a01 	add.w	sl, sl, #1
 8004806:	9304      	str	r3, [sp, #16]
 8004808:	9307      	str	r3, [sp, #28]
 800480a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800480e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004810:	4654      	mov	r4, sl
 8004812:	2205      	movs	r2, #5
 8004814:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004818:	484e      	ldr	r0, [pc, #312]	@ (8004954 <_svfiprintf_r+0x1e4>)
 800481a:	f7fb fce1 	bl	80001e0 <memchr>
 800481e:	9a04      	ldr	r2, [sp, #16]
 8004820:	b9d8      	cbnz	r0, 800485a <_svfiprintf_r+0xea>
 8004822:	06d0      	lsls	r0, r2, #27
 8004824:	bf44      	itt	mi
 8004826:	2320      	movmi	r3, #32
 8004828:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800482c:	0711      	lsls	r1, r2, #28
 800482e:	bf44      	itt	mi
 8004830:	232b      	movmi	r3, #43	@ 0x2b
 8004832:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004836:	f89a 3000 	ldrb.w	r3, [sl]
 800483a:	2b2a      	cmp	r3, #42	@ 0x2a
 800483c:	d015      	beq.n	800486a <_svfiprintf_r+0xfa>
 800483e:	9a07      	ldr	r2, [sp, #28]
 8004840:	4654      	mov	r4, sl
 8004842:	2000      	movs	r0, #0
 8004844:	f04f 0c0a 	mov.w	ip, #10
 8004848:	4621      	mov	r1, r4
 800484a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800484e:	3b30      	subs	r3, #48	@ 0x30
 8004850:	2b09      	cmp	r3, #9
 8004852:	d94b      	bls.n	80048ec <_svfiprintf_r+0x17c>
 8004854:	b1b0      	cbz	r0, 8004884 <_svfiprintf_r+0x114>
 8004856:	9207      	str	r2, [sp, #28]
 8004858:	e014      	b.n	8004884 <_svfiprintf_r+0x114>
 800485a:	eba0 0308 	sub.w	r3, r0, r8
 800485e:	fa09 f303 	lsl.w	r3, r9, r3
 8004862:	4313      	orrs	r3, r2
 8004864:	9304      	str	r3, [sp, #16]
 8004866:	46a2      	mov	sl, r4
 8004868:	e7d2      	b.n	8004810 <_svfiprintf_r+0xa0>
 800486a:	9b03      	ldr	r3, [sp, #12]
 800486c:	1d19      	adds	r1, r3, #4
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	9103      	str	r1, [sp, #12]
 8004872:	2b00      	cmp	r3, #0
 8004874:	bfbb      	ittet	lt
 8004876:	425b      	neglt	r3, r3
 8004878:	f042 0202 	orrlt.w	r2, r2, #2
 800487c:	9307      	strge	r3, [sp, #28]
 800487e:	9307      	strlt	r3, [sp, #28]
 8004880:	bfb8      	it	lt
 8004882:	9204      	strlt	r2, [sp, #16]
 8004884:	7823      	ldrb	r3, [r4, #0]
 8004886:	2b2e      	cmp	r3, #46	@ 0x2e
 8004888:	d10a      	bne.n	80048a0 <_svfiprintf_r+0x130>
 800488a:	7863      	ldrb	r3, [r4, #1]
 800488c:	2b2a      	cmp	r3, #42	@ 0x2a
 800488e:	d132      	bne.n	80048f6 <_svfiprintf_r+0x186>
 8004890:	9b03      	ldr	r3, [sp, #12]
 8004892:	1d1a      	adds	r2, r3, #4
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	9203      	str	r2, [sp, #12]
 8004898:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800489c:	3402      	adds	r4, #2
 800489e:	9305      	str	r3, [sp, #20]
 80048a0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004964 <_svfiprintf_r+0x1f4>
 80048a4:	7821      	ldrb	r1, [r4, #0]
 80048a6:	2203      	movs	r2, #3
 80048a8:	4650      	mov	r0, sl
 80048aa:	f7fb fc99 	bl	80001e0 <memchr>
 80048ae:	b138      	cbz	r0, 80048c0 <_svfiprintf_r+0x150>
 80048b0:	9b04      	ldr	r3, [sp, #16]
 80048b2:	eba0 000a 	sub.w	r0, r0, sl
 80048b6:	2240      	movs	r2, #64	@ 0x40
 80048b8:	4082      	lsls	r2, r0
 80048ba:	4313      	orrs	r3, r2
 80048bc:	3401      	adds	r4, #1
 80048be:	9304      	str	r3, [sp, #16]
 80048c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048c4:	4824      	ldr	r0, [pc, #144]	@ (8004958 <_svfiprintf_r+0x1e8>)
 80048c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80048ca:	2206      	movs	r2, #6
 80048cc:	f7fb fc88 	bl	80001e0 <memchr>
 80048d0:	2800      	cmp	r0, #0
 80048d2:	d036      	beq.n	8004942 <_svfiprintf_r+0x1d2>
 80048d4:	4b21      	ldr	r3, [pc, #132]	@ (800495c <_svfiprintf_r+0x1ec>)
 80048d6:	bb1b      	cbnz	r3, 8004920 <_svfiprintf_r+0x1b0>
 80048d8:	9b03      	ldr	r3, [sp, #12]
 80048da:	3307      	adds	r3, #7
 80048dc:	f023 0307 	bic.w	r3, r3, #7
 80048e0:	3308      	adds	r3, #8
 80048e2:	9303      	str	r3, [sp, #12]
 80048e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048e6:	4433      	add	r3, r6
 80048e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80048ea:	e76a      	b.n	80047c2 <_svfiprintf_r+0x52>
 80048ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80048f0:	460c      	mov	r4, r1
 80048f2:	2001      	movs	r0, #1
 80048f4:	e7a8      	b.n	8004848 <_svfiprintf_r+0xd8>
 80048f6:	2300      	movs	r3, #0
 80048f8:	3401      	adds	r4, #1
 80048fa:	9305      	str	r3, [sp, #20]
 80048fc:	4619      	mov	r1, r3
 80048fe:	f04f 0c0a 	mov.w	ip, #10
 8004902:	4620      	mov	r0, r4
 8004904:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004908:	3a30      	subs	r2, #48	@ 0x30
 800490a:	2a09      	cmp	r2, #9
 800490c:	d903      	bls.n	8004916 <_svfiprintf_r+0x1a6>
 800490e:	2b00      	cmp	r3, #0
 8004910:	d0c6      	beq.n	80048a0 <_svfiprintf_r+0x130>
 8004912:	9105      	str	r1, [sp, #20]
 8004914:	e7c4      	b.n	80048a0 <_svfiprintf_r+0x130>
 8004916:	fb0c 2101 	mla	r1, ip, r1, r2
 800491a:	4604      	mov	r4, r0
 800491c:	2301      	movs	r3, #1
 800491e:	e7f0      	b.n	8004902 <_svfiprintf_r+0x192>
 8004920:	ab03      	add	r3, sp, #12
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	462a      	mov	r2, r5
 8004926:	4b0e      	ldr	r3, [pc, #56]	@ (8004960 <_svfiprintf_r+0x1f0>)
 8004928:	a904      	add	r1, sp, #16
 800492a:	4638      	mov	r0, r7
 800492c:	f3af 8000 	nop.w
 8004930:	1c42      	adds	r2, r0, #1
 8004932:	4606      	mov	r6, r0
 8004934:	d1d6      	bne.n	80048e4 <_svfiprintf_r+0x174>
 8004936:	89ab      	ldrh	r3, [r5, #12]
 8004938:	065b      	lsls	r3, r3, #25
 800493a:	f53f af2d 	bmi.w	8004798 <_svfiprintf_r+0x28>
 800493e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004940:	e72c      	b.n	800479c <_svfiprintf_r+0x2c>
 8004942:	ab03      	add	r3, sp, #12
 8004944:	9300      	str	r3, [sp, #0]
 8004946:	462a      	mov	r2, r5
 8004948:	4b05      	ldr	r3, [pc, #20]	@ (8004960 <_svfiprintf_r+0x1f0>)
 800494a:	a904      	add	r1, sp, #16
 800494c:	4638      	mov	r0, r7
 800494e:	f000 f879 	bl	8004a44 <_printf_i>
 8004952:	e7ed      	b.n	8004930 <_svfiprintf_r+0x1c0>
 8004954:	08004e2c 	.word	0x08004e2c
 8004958:	08004e36 	.word	0x08004e36
 800495c:	00000000 	.word	0x00000000
 8004960:	080046b9 	.word	0x080046b9
 8004964:	08004e32 	.word	0x08004e32

08004968 <_printf_common>:
 8004968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800496c:	4616      	mov	r6, r2
 800496e:	4698      	mov	r8, r3
 8004970:	688a      	ldr	r2, [r1, #8]
 8004972:	690b      	ldr	r3, [r1, #16]
 8004974:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004978:	4293      	cmp	r3, r2
 800497a:	bfb8      	it	lt
 800497c:	4613      	movlt	r3, r2
 800497e:	6033      	str	r3, [r6, #0]
 8004980:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004984:	4607      	mov	r7, r0
 8004986:	460c      	mov	r4, r1
 8004988:	b10a      	cbz	r2, 800498e <_printf_common+0x26>
 800498a:	3301      	adds	r3, #1
 800498c:	6033      	str	r3, [r6, #0]
 800498e:	6823      	ldr	r3, [r4, #0]
 8004990:	0699      	lsls	r1, r3, #26
 8004992:	bf42      	ittt	mi
 8004994:	6833      	ldrmi	r3, [r6, #0]
 8004996:	3302      	addmi	r3, #2
 8004998:	6033      	strmi	r3, [r6, #0]
 800499a:	6825      	ldr	r5, [r4, #0]
 800499c:	f015 0506 	ands.w	r5, r5, #6
 80049a0:	d106      	bne.n	80049b0 <_printf_common+0x48>
 80049a2:	f104 0a19 	add.w	sl, r4, #25
 80049a6:	68e3      	ldr	r3, [r4, #12]
 80049a8:	6832      	ldr	r2, [r6, #0]
 80049aa:	1a9b      	subs	r3, r3, r2
 80049ac:	42ab      	cmp	r3, r5
 80049ae:	dc26      	bgt.n	80049fe <_printf_common+0x96>
 80049b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80049b4:	6822      	ldr	r2, [r4, #0]
 80049b6:	3b00      	subs	r3, #0
 80049b8:	bf18      	it	ne
 80049ba:	2301      	movne	r3, #1
 80049bc:	0692      	lsls	r2, r2, #26
 80049be:	d42b      	bmi.n	8004a18 <_printf_common+0xb0>
 80049c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80049c4:	4641      	mov	r1, r8
 80049c6:	4638      	mov	r0, r7
 80049c8:	47c8      	blx	r9
 80049ca:	3001      	adds	r0, #1
 80049cc:	d01e      	beq.n	8004a0c <_printf_common+0xa4>
 80049ce:	6823      	ldr	r3, [r4, #0]
 80049d0:	6922      	ldr	r2, [r4, #16]
 80049d2:	f003 0306 	and.w	r3, r3, #6
 80049d6:	2b04      	cmp	r3, #4
 80049d8:	bf02      	ittt	eq
 80049da:	68e5      	ldreq	r5, [r4, #12]
 80049dc:	6833      	ldreq	r3, [r6, #0]
 80049de:	1aed      	subeq	r5, r5, r3
 80049e0:	68a3      	ldr	r3, [r4, #8]
 80049e2:	bf0c      	ite	eq
 80049e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049e8:	2500      	movne	r5, #0
 80049ea:	4293      	cmp	r3, r2
 80049ec:	bfc4      	itt	gt
 80049ee:	1a9b      	subgt	r3, r3, r2
 80049f0:	18ed      	addgt	r5, r5, r3
 80049f2:	2600      	movs	r6, #0
 80049f4:	341a      	adds	r4, #26
 80049f6:	42b5      	cmp	r5, r6
 80049f8:	d11a      	bne.n	8004a30 <_printf_common+0xc8>
 80049fa:	2000      	movs	r0, #0
 80049fc:	e008      	b.n	8004a10 <_printf_common+0xa8>
 80049fe:	2301      	movs	r3, #1
 8004a00:	4652      	mov	r2, sl
 8004a02:	4641      	mov	r1, r8
 8004a04:	4638      	mov	r0, r7
 8004a06:	47c8      	blx	r9
 8004a08:	3001      	adds	r0, #1
 8004a0a:	d103      	bne.n	8004a14 <_printf_common+0xac>
 8004a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a14:	3501      	adds	r5, #1
 8004a16:	e7c6      	b.n	80049a6 <_printf_common+0x3e>
 8004a18:	18e1      	adds	r1, r4, r3
 8004a1a:	1c5a      	adds	r2, r3, #1
 8004a1c:	2030      	movs	r0, #48	@ 0x30
 8004a1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004a22:	4422      	add	r2, r4
 8004a24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004a28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004a2c:	3302      	adds	r3, #2
 8004a2e:	e7c7      	b.n	80049c0 <_printf_common+0x58>
 8004a30:	2301      	movs	r3, #1
 8004a32:	4622      	mov	r2, r4
 8004a34:	4641      	mov	r1, r8
 8004a36:	4638      	mov	r0, r7
 8004a38:	47c8      	blx	r9
 8004a3a:	3001      	adds	r0, #1
 8004a3c:	d0e6      	beq.n	8004a0c <_printf_common+0xa4>
 8004a3e:	3601      	adds	r6, #1
 8004a40:	e7d9      	b.n	80049f6 <_printf_common+0x8e>
	...

08004a44 <_printf_i>:
 8004a44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a48:	7e0f      	ldrb	r7, [r1, #24]
 8004a4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004a4c:	2f78      	cmp	r7, #120	@ 0x78
 8004a4e:	4691      	mov	r9, r2
 8004a50:	4680      	mov	r8, r0
 8004a52:	460c      	mov	r4, r1
 8004a54:	469a      	mov	sl, r3
 8004a56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004a5a:	d807      	bhi.n	8004a6c <_printf_i+0x28>
 8004a5c:	2f62      	cmp	r7, #98	@ 0x62
 8004a5e:	d80a      	bhi.n	8004a76 <_printf_i+0x32>
 8004a60:	2f00      	cmp	r7, #0
 8004a62:	f000 80d2 	beq.w	8004c0a <_printf_i+0x1c6>
 8004a66:	2f58      	cmp	r7, #88	@ 0x58
 8004a68:	f000 80b9 	beq.w	8004bde <_printf_i+0x19a>
 8004a6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004a74:	e03a      	b.n	8004aec <_printf_i+0xa8>
 8004a76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004a7a:	2b15      	cmp	r3, #21
 8004a7c:	d8f6      	bhi.n	8004a6c <_printf_i+0x28>
 8004a7e:	a101      	add	r1, pc, #4	@ (adr r1, 8004a84 <_printf_i+0x40>)
 8004a80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a84:	08004add 	.word	0x08004add
 8004a88:	08004af1 	.word	0x08004af1
 8004a8c:	08004a6d 	.word	0x08004a6d
 8004a90:	08004a6d 	.word	0x08004a6d
 8004a94:	08004a6d 	.word	0x08004a6d
 8004a98:	08004a6d 	.word	0x08004a6d
 8004a9c:	08004af1 	.word	0x08004af1
 8004aa0:	08004a6d 	.word	0x08004a6d
 8004aa4:	08004a6d 	.word	0x08004a6d
 8004aa8:	08004a6d 	.word	0x08004a6d
 8004aac:	08004a6d 	.word	0x08004a6d
 8004ab0:	08004bf1 	.word	0x08004bf1
 8004ab4:	08004b1b 	.word	0x08004b1b
 8004ab8:	08004bab 	.word	0x08004bab
 8004abc:	08004a6d 	.word	0x08004a6d
 8004ac0:	08004a6d 	.word	0x08004a6d
 8004ac4:	08004c13 	.word	0x08004c13
 8004ac8:	08004a6d 	.word	0x08004a6d
 8004acc:	08004b1b 	.word	0x08004b1b
 8004ad0:	08004a6d 	.word	0x08004a6d
 8004ad4:	08004a6d 	.word	0x08004a6d
 8004ad8:	08004bb3 	.word	0x08004bb3
 8004adc:	6833      	ldr	r3, [r6, #0]
 8004ade:	1d1a      	adds	r2, r3, #4
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	6032      	str	r2, [r6, #0]
 8004ae4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ae8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004aec:	2301      	movs	r3, #1
 8004aee:	e09d      	b.n	8004c2c <_printf_i+0x1e8>
 8004af0:	6833      	ldr	r3, [r6, #0]
 8004af2:	6820      	ldr	r0, [r4, #0]
 8004af4:	1d19      	adds	r1, r3, #4
 8004af6:	6031      	str	r1, [r6, #0]
 8004af8:	0606      	lsls	r6, r0, #24
 8004afa:	d501      	bpl.n	8004b00 <_printf_i+0xbc>
 8004afc:	681d      	ldr	r5, [r3, #0]
 8004afe:	e003      	b.n	8004b08 <_printf_i+0xc4>
 8004b00:	0645      	lsls	r5, r0, #25
 8004b02:	d5fb      	bpl.n	8004afc <_printf_i+0xb8>
 8004b04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004b08:	2d00      	cmp	r5, #0
 8004b0a:	da03      	bge.n	8004b14 <_printf_i+0xd0>
 8004b0c:	232d      	movs	r3, #45	@ 0x2d
 8004b0e:	426d      	negs	r5, r5
 8004b10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b14:	4859      	ldr	r0, [pc, #356]	@ (8004c7c <_printf_i+0x238>)
 8004b16:	230a      	movs	r3, #10
 8004b18:	e011      	b.n	8004b3e <_printf_i+0xfa>
 8004b1a:	6821      	ldr	r1, [r4, #0]
 8004b1c:	6833      	ldr	r3, [r6, #0]
 8004b1e:	0608      	lsls	r0, r1, #24
 8004b20:	f853 5b04 	ldr.w	r5, [r3], #4
 8004b24:	d402      	bmi.n	8004b2c <_printf_i+0xe8>
 8004b26:	0649      	lsls	r1, r1, #25
 8004b28:	bf48      	it	mi
 8004b2a:	b2ad      	uxthmi	r5, r5
 8004b2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004b2e:	4853      	ldr	r0, [pc, #332]	@ (8004c7c <_printf_i+0x238>)
 8004b30:	6033      	str	r3, [r6, #0]
 8004b32:	bf14      	ite	ne
 8004b34:	230a      	movne	r3, #10
 8004b36:	2308      	moveq	r3, #8
 8004b38:	2100      	movs	r1, #0
 8004b3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004b3e:	6866      	ldr	r6, [r4, #4]
 8004b40:	60a6      	str	r6, [r4, #8]
 8004b42:	2e00      	cmp	r6, #0
 8004b44:	bfa2      	ittt	ge
 8004b46:	6821      	ldrge	r1, [r4, #0]
 8004b48:	f021 0104 	bicge.w	r1, r1, #4
 8004b4c:	6021      	strge	r1, [r4, #0]
 8004b4e:	b90d      	cbnz	r5, 8004b54 <_printf_i+0x110>
 8004b50:	2e00      	cmp	r6, #0
 8004b52:	d04b      	beq.n	8004bec <_printf_i+0x1a8>
 8004b54:	4616      	mov	r6, r2
 8004b56:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b5a:	fb03 5711 	mls	r7, r3, r1, r5
 8004b5e:	5dc7      	ldrb	r7, [r0, r7]
 8004b60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b64:	462f      	mov	r7, r5
 8004b66:	42bb      	cmp	r3, r7
 8004b68:	460d      	mov	r5, r1
 8004b6a:	d9f4      	bls.n	8004b56 <_printf_i+0x112>
 8004b6c:	2b08      	cmp	r3, #8
 8004b6e:	d10b      	bne.n	8004b88 <_printf_i+0x144>
 8004b70:	6823      	ldr	r3, [r4, #0]
 8004b72:	07df      	lsls	r7, r3, #31
 8004b74:	d508      	bpl.n	8004b88 <_printf_i+0x144>
 8004b76:	6923      	ldr	r3, [r4, #16]
 8004b78:	6861      	ldr	r1, [r4, #4]
 8004b7a:	4299      	cmp	r1, r3
 8004b7c:	bfde      	ittt	le
 8004b7e:	2330      	movle	r3, #48	@ 0x30
 8004b80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b84:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b88:	1b92      	subs	r2, r2, r6
 8004b8a:	6122      	str	r2, [r4, #16]
 8004b8c:	f8cd a000 	str.w	sl, [sp]
 8004b90:	464b      	mov	r3, r9
 8004b92:	aa03      	add	r2, sp, #12
 8004b94:	4621      	mov	r1, r4
 8004b96:	4640      	mov	r0, r8
 8004b98:	f7ff fee6 	bl	8004968 <_printf_common>
 8004b9c:	3001      	adds	r0, #1
 8004b9e:	d14a      	bne.n	8004c36 <_printf_i+0x1f2>
 8004ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba4:	b004      	add	sp, #16
 8004ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004baa:	6823      	ldr	r3, [r4, #0]
 8004bac:	f043 0320 	orr.w	r3, r3, #32
 8004bb0:	6023      	str	r3, [r4, #0]
 8004bb2:	4833      	ldr	r0, [pc, #204]	@ (8004c80 <_printf_i+0x23c>)
 8004bb4:	2778      	movs	r7, #120	@ 0x78
 8004bb6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004bba:	6823      	ldr	r3, [r4, #0]
 8004bbc:	6831      	ldr	r1, [r6, #0]
 8004bbe:	061f      	lsls	r7, r3, #24
 8004bc0:	f851 5b04 	ldr.w	r5, [r1], #4
 8004bc4:	d402      	bmi.n	8004bcc <_printf_i+0x188>
 8004bc6:	065f      	lsls	r7, r3, #25
 8004bc8:	bf48      	it	mi
 8004bca:	b2ad      	uxthmi	r5, r5
 8004bcc:	6031      	str	r1, [r6, #0]
 8004bce:	07d9      	lsls	r1, r3, #31
 8004bd0:	bf44      	itt	mi
 8004bd2:	f043 0320 	orrmi.w	r3, r3, #32
 8004bd6:	6023      	strmi	r3, [r4, #0]
 8004bd8:	b11d      	cbz	r5, 8004be2 <_printf_i+0x19e>
 8004bda:	2310      	movs	r3, #16
 8004bdc:	e7ac      	b.n	8004b38 <_printf_i+0xf4>
 8004bde:	4827      	ldr	r0, [pc, #156]	@ (8004c7c <_printf_i+0x238>)
 8004be0:	e7e9      	b.n	8004bb6 <_printf_i+0x172>
 8004be2:	6823      	ldr	r3, [r4, #0]
 8004be4:	f023 0320 	bic.w	r3, r3, #32
 8004be8:	6023      	str	r3, [r4, #0]
 8004bea:	e7f6      	b.n	8004bda <_printf_i+0x196>
 8004bec:	4616      	mov	r6, r2
 8004bee:	e7bd      	b.n	8004b6c <_printf_i+0x128>
 8004bf0:	6833      	ldr	r3, [r6, #0]
 8004bf2:	6825      	ldr	r5, [r4, #0]
 8004bf4:	6961      	ldr	r1, [r4, #20]
 8004bf6:	1d18      	adds	r0, r3, #4
 8004bf8:	6030      	str	r0, [r6, #0]
 8004bfa:	062e      	lsls	r6, r5, #24
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	d501      	bpl.n	8004c04 <_printf_i+0x1c0>
 8004c00:	6019      	str	r1, [r3, #0]
 8004c02:	e002      	b.n	8004c0a <_printf_i+0x1c6>
 8004c04:	0668      	lsls	r0, r5, #25
 8004c06:	d5fb      	bpl.n	8004c00 <_printf_i+0x1bc>
 8004c08:	8019      	strh	r1, [r3, #0]
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	6123      	str	r3, [r4, #16]
 8004c0e:	4616      	mov	r6, r2
 8004c10:	e7bc      	b.n	8004b8c <_printf_i+0x148>
 8004c12:	6833      	ldr	r3, [r6, #0]
 8004c14:	1d1a      	adds	r2, r3, #4
 8004c16:	6032      	str	r2, [r6, #0]
 8004c18:	681e      	ldr	r6, [r3, #0]
 8004c1a:	6862      	ldr	r2, [r4, #4]
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	4630      	mov	r0, r6
 8004c20:	f7fb fade 	bl	80001e0 <memchr>
 8004c24:	b108      	cbz	r0, 8004c2a <_printf_i+0x1e6>
 8004c26:	1b80      	subs	r0, r0, r6
 8004c28:	6060      	str	r0, [r4, #4]
 8004c2a:	6863      	ldr	r3, [r4, #4]
 8004c2c:	6123      	str	r3, [r4, #16]
 8004c2e:	2300      	movs	r3, #0
 8004c30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c34:	e7aa      	b.n	8004b8c <_printf_i+0x148>
 8004c36:	6923      	ldr	r3, [r4, #16]
 8004c38:	4632      	mov	r2, r6
 8004c3a:	4649      	mov	r1, r9
 8004c3c:	4640      	mov	r0, r8
 8004c3e:	47d0      	blx	sl
 8004c40:	3001      	adds	r0, #1
 8004c42:	d0ad      	beq.n	8004ba0 <_printf_i+0x15c>
 8004c44:	6823      	ldr	r3, [r4, #0]
 8004c46:	079b      	lsls	r3, r3, #30
 8004c48:	d413      	bmi.n	8004c72 <_printf_i+0x22e>
 8004c4a:	68e0      	ldr	r0, [r4, #12]
 8004c4c:	9b03      	ldr	r3, [sp, #12]
 8004c4e:	4298      	cmp	r0, r3
 8004c50:	bfb8      	it	lt
 8004c52:	4618      	movlt	r0, r3
 8004c54:	e7a6      	b.n	8004ba4 <_printf_i+0x160>
 8004c56:	2301      	movs	r3, #1
 8004c58:	4632      	mov	r2, r6
 8004c5a:	4649      	mov	r1, r9
 8004c5c:	4640      	mov	r0, r8
 8004c5e:	47d0      	blx	sl
 8004c60:	3001      	adds	r0, #1
 8004c62:	d09d      	beq.n	8004ba0 <_printf_i+0x15c>
 8004c64:	3501      	adds	r5, #1
 8004c66:	68e3      	ldr	r3, [r4, #12]
 8004c68:	9903      	ldr	r1, [sp, #12]
 8004c6a:	1a5b      	subs	r3, r3, r1
 8004c6c:	42ab      	cmp	r3, r5
 8004c6e:	dcf2      	bgt.n	8004c56 <_printf_i+0x212>
 8004c70:	e7eb      	b.n	8004c4a <_printf_i+0x206>
 8004c72:	2500      	movs	r5, #0
 8004c74:	f104 0619 	add.w	r6, r4, #25
 8004c78:	e7f5      	b.n	8004c66 <_printf_i+0x222>
 8004c7a:	bf00      	nop
 8004c7c:	08004e3d 	.word	0x08004e3d
 8004c80:	08004e4e 	.word	0x08004e4e

08004c84 <memmove>:
 8004c84:	4288      	cmp	r0, r1
 8004c86:	b510      	push	{r4, lr}
 8004c88:	eb01 0402 	add.w	r4, r1, r2
 8004c8c:	d902      	bls.n	8004c94 <memmove+0x10>
 8004c8e:	4284      	cmp	r4, r0
 8004c90:	4623      	mov	r3, r4
 8004c92:	d807      	bhi.n	8004ca4 <memmove+0x20>
 8004c94:	1e43      	subs	r3, r0, #1
 8004c96:	42a1      	cmp	r1, r4
 8004c98:	d008      	beq.n	8004cac <memmove+0x28>
 8004c9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ca2:	e7f8      	b.n	8004c96 <memmove+0x12>
 8004ca4:	4402      	add	r2, r0
 8004ca6:	4601      	mov	r1, r0
 8004ca8:	428a      	cmp	r2, r1
 8004caa:	d100      	bne.n	8004cae <memmove+0x2a>
 8004cac:	bd10      	pop	{r4, pc}
 8004cae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004cb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004cb6:	e7f7      	b.n	8004ca8 <memmove+0x24>

08004cb8 <memcpy>:
 8004cb8:	440a      	add	r2, r1
 8004cba:	4291      	cmp	r1, r2
 8004cbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cc0:	d100      	bne.n	8004cc4 <memcpy+0xc>
 8004cc2:	4770      	bx	lr
 8004cc4:	b510      	push	{r4, lr}
 8004cc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cce:	4291      	cmp	r1, r2
 8004cd0:	d1f9      	bne.n	8004cc6 <memcpy+0xe>
 8004cd2:	bd10      	pop	{r4, pc}

08004cd4 <_realloc_r>:
 8004cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cd8:	4680      	mov	r8, r0
 8004cda:	4615      	mov	r5, r2
 8004cdc:	460c      	mov	r4, r1
 8004cde:	b921      	cbnz	r1, 8004cea <_realloc_r+0x16>
 8004ce0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ce4:	4611      	mov	r1, r2
 8004ce6:	f7ff bbad 	b.w	8004444 <_malloc_r>
 8004cea:	b92a      	cbnz	r2, 8004cf8 <_realloc_r+0x24>
 8004cec:	f7ff fc9a 	bl	8004624 <_free_r>
 8004cf0:	2400      	movs	r4, #0
 8004cf2:	4620      	mov	r0, r4
 8004cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cf8:	f000 f81a 	bl	8004d30 <_malloc_usable_size_r>
 8004cfc:	4285      	cmp	r5, r0
 8004cfe:	4606      	mov	r6, r0
 8004d00:	d802      	bhi.n	8004d08 <_realloc_r+0x34>
 8004d02:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004d06:	d8f4      	bhi.n	8004cf2 <_realloc_r+0x1e>
 8004d08:	4629      	mov	r1, r5
 8004d0a:	4640      	mov	r0, r8
 8004d0c:	f7ff fb9a 	bl	8004444 <_malloc_r>
 8004d10:	4607      	mov	r7, r0
 8004d12:	2800      	cmp	r0, #0
 8004d14:	d0ec      	beq.n	8004cf0 <_realloc_r+0x1c>
 8004d16:	42b5      	cmp	r5, r6
 8004d18:	462a      	mov	r2, r5
 8004d1a:	4621      	mov	r1, r4
 8004d1c:	bf28      	it	cs
 8004d1e:	4632      	movcs	r2, r6
 8004d20:	f7ff ffca 	bl	8004cb8 <memcpy>
 8004d24:	4621      	mov	r1, r4
 8004d26:	4640      	mov	r0, r8
 8004d28:	f7ff fc7c 	bl	8004624 <_free_r>
 8004d2c:	463c      	mov	r4, r7
 8004d2e:	e7e0      	b.n	8004cf2 <_realloc_r+0x1e>

08004d30 <_malloc_usable_size_r>:
 8004d30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d34:	1f18      	subs	r0, r3, #4
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	bfbc      	itt	lt
 8004d3a:	580b      	ldrlt	r3, [r1, r0]
 8004d3c:	18c0      	addlt	r0, r0, r3
 8004d3e:	4770      	bx	lr

08004d40 <_init>:
 8004d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d42:	bf00      	nop
 8004d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d46:	bc08      	pop	{r3}
 8004d48:	469e      	mov	lr, r3
 8004d4a:	4770      	bx	lr

08004d4c <_fini>:
 8004d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d4e:	bf00      	nop
 8004d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d52:	bc08      	pop	{r3}
 8004d54:	469e      	mov	lr, r3
 8004d56:	4770      	bx	lr
