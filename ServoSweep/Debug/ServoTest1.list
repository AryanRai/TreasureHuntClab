
ServoTest1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000479c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800492c  0800492c  0000592c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049cc  080049cc  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  080049cc  080049cc  000059cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049d4  080049d4  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049d4  080049d4  000059d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080049d8  080049d8  000059d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080049dc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          000002f0  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000034c  2000034c  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d50e  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ae8  00000000  00000000  0001359a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c10  00000000  00000000  00015088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000097c  00000000  00000000  00015c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dd9f  00000000  00000000  00016614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f853  00000000  00000000  000343b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b713d  00000000  00000000  00043c06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fad43  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000037d4  00000000  00000000  000fad88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  000fe55c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004914 	.word	0x08004914

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004914 	.word	0x08004914

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <SweepTest>:
/**
  * @brief Sweep all servos from 0° to 180° and back
  * @retval None
  */
void SweepTest(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
  // Sweep from 0° to 180°
  for (int angle = 0; angle <= 180; angle++)
 8000286:	2300      	movs	r3, #0
 8000288:	60fb      	str	r3, [r7, #12]
 800028a:	e048      	b.n	800031e <SweepTest+0x9e>
  {
    // Calculate pulse width (100–200 ticks)
    uint32_t pulse = PWM_MIN_PULSE + (angle * (PWM_MAX_PULSE - PWM_MIN_PULSE) / 180);
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	2264      	movs	r2, #100	@ 0x64
 8000290:	fb02 f303 	mul.w	r3, r2, r3
 8000294:	4a4d      	ldr	r2, [pc, #308]	@ (80003cc <SweepTest+0x14c>)
 8000296:	fb82 1203 	smull	r1, r2, r2, r3
 800029a:	441a      	add	r2, r3
 800029c:	11d2      	asrs	r2, r2, #7
 800029e:	17db      	asrs	r3, r3, #31
 80002a0:	1ad3      	subs	r3, r2, r3
 80002a2:	3364      	adds	r3, #100	@ 0x64
 80002a4:	603b      	str	r3, [r7, #0]

    // Set PWM for all servos
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse); // Servo 1
 80002a6:	4b4a      	ldr	r3, [pc, #296]	@ (80003d0 <SweepTest+0x150>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	683a      	ldr	r2, [r7, #0]
 80002ac:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulse); // Servo 2
 80002ae:	4b48      	ldr	r3, [pc, #288]	@ (80003d0 <SweepTest+0x150>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	683a      	ldr	r2, [r7, #0]
 80002b4:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pulse); // Servo 3
 80002b6:	4b46      	ldr	r3, [pc, #280]	@ (80003d0 <SweepTest+0x150>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	683a      	ldr	r2, [r7, #0]
 80002bc:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, pulse); // Servo 4
 80002be:	4b44      	ldr	r3, [pc, #272]	@ (80003d0 <SweepTest+0x150>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	683a      	ldr	r2, [r7, #0]
 80002c4:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pulse); // Servo 5
 80002c6:	4b43      	ldr	r3, [pc, #268]	@ (80003d4 <SweepTest+0x154>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	683a      	ldr	r2, [r7, #0]
 80002cc:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, pulse); // Servo 6
 80002ce:	4b41      	ldr	r3, [pc, #260]	@ (80003d4 <SweepTest+0x154>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	683a      	ldr	r2, [r7, #0]
 80002d4:	639a      	str	r2, [r3, #56]	@ 0x38

    // Debug output every 10°
    if (angle % 10 == 0)
 80002d6:	68f9      	ldr	r1, [r7, #12]
 80002d8:	4b3f      	ldr	r3, [pc, #252]	@ (80003d8 <SweepTest+0x158>)
 80002da:	fb83 2301 	smull	r2, r3, r3, r1
 80002de:	109a      	asrs	r2, r3, #2
 80002e0:	17cb      	asrs	r3, r1, #31
 80002e2:	1ad2      	subs	r2, r2, r3
 80002e4:	4613      	mov	r3, r2
 80002e6:	009b      	lsls	r3, r3, #2
 80002e8:	4413      	add	r3, r2
 80002ea:	005b      	lsls	r3, r3, #1
 80002ec:	1aca      	subs	r2, r1, r3
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d10f      	bne.n	8000312 <SweepTest+0x92>
    {
      sprintf(txBuffer, "Servo sweep: angle = %d°\r\n", angle);
 80002f2:	68fa      	ldr	r2, [r7, #12]
 80002f4:	4939      	ldr	r1, [pc, #228]	@ (80003dc <SweepTest+0x15c>)
 80002f6:	483a      	ldr	r0, [pc, #232]	@ (80003e0 <SweepTest+0x160>)
 80002f8:	f003 fe6c 	bl	8003fd4 <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer, strlen(txBuffer), HAL_MAX_DELAY);
 80002fc:	4838      	ldr	r0, [pc, #224]	@ (80003e0 <SweepTest+0x160>)
 80002fe:	f7ff ff67 	bl	80001d0 <strlen>
 8000302:	4603      	mov	r3, r0
 8000304:	b29a      	uxth	r2, r3
 8000306:	f04f 33ff 	mov.w	r3, #4294967295
 800030a:	4935      	ldr	r1, [pc, #212]	@ (80003e0 <SweepTest+0x160>)
 800030c:	4835      	ldr	r0, [pc, #212]	@ (80003e4 <SweepTest+0x164>)
 800030e:	f003 f9e7 	bl	80036e0 <HAL_UART_Transmit>
    }

    HAL_Delay(SWEEP_STEP_MS);
 8000312:	200f      	movs	r0, #15
 8000314:	f000 fc80 	bl	8000c18 <HAL_Delay>
  for (int angle = 0; angle <= 180; angle++)
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	3301      	adds	r3, #1
 800031c:	60fb      	str	r3, [r7, #12]
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	2bb4      	cmp	r3, #180	@ 0xb4
 8000322:	ddb3      	ble.n	800028c <SweepTest+0xc>
  }

  // Sweep from 180° to 0°
  for (int angle = 180; angle >= 0; angle--)
 8000324:	23b4      	movs	r3, #180	@ 0xb4
 8000326:	60bb      	str	r3, [r7, #8]
 8000328:	e048      	b.n	80003bc <SweepTest+0x13c>
  {
    uint32_t pulse = PWM_MIN_PULSE + (angle * (PWM_MAX_PULSE - PWM_MIN_PULSE) / 180);
 800032a:	68bb      	ldr	r3, [r7, #8]
 800032c:	2264      	movs	r2, #100	@ 0x64
 800032e:	fb02 f303 	mul.w	r3, r2, r3
 8000332:	4a26      	ldr	r2, [pc, #152]	@ (80003cc <SweepTest+0x14c>)
 8000334:	fb82 1203 	smull	r1, r2, r2, r3
 8000338:	441a      	add	r2, r3
 800033a:	11d2      	asrs	r2, r2, #7
 800033c:	17db      	asrs	r3, r3, #31
 800033e:	1ad3      	subs	r3, r2, r3
 8000340:	3364      	adds	r3, #100	@ 0x64
 8000342:	607b      	str	r3, [r7, #4]

    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse); // Servo 1
 8000344:	4b22      	ldr	r3, [pc, #136]	@ (80003d0 <SweepTest+0x150>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	687a      	ldr	r2, [r7, #4]
 800034a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulse); // Servo 2
 800034c:	4b20      	ldr	r3, [pc, #128]	@ (80003d0 <SweepTest+0x150>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	687a      	ldr	r2, [r7, #4]
 8000352:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pulse); // Servo 3
 8000354:	4b1e      	ldr	r3, [pc, #120]	@ (80003d0 <SweepTest+0x150>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	687a      	ldr	r2, [r7, #4]
 800035a:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, pulse); // Servo 4
 800035c:	4b1c      	ldr	r3, [pc, #112]	@ (80003d0 <SweepTest+0x150>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	687a      	ldr	r2, [r7, #4]
 8000362:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pulse); // Servo 5
 8000364:	4b1b      	ldr	r3, [pc, #108]	@ (80003d4 <SweepTest+0x154>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	687a      	ldr	r2, [r7, #4]
 800036a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, pulse); // Servo 6
 800036c:	4b19      	ldr	r3, [pc, #100]	@ (80003d4 <SweepTest+0x154>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	687a      	ldr	r2, [r7, #4]
 8000372:	639a      	str	r2, [r3, #56]	@ 0x38

    if (angle % 10 == 0)
 8000374:	68b9      	ldr	r1, [r7, #8]
 8000376:	4b18      	ldr	r3, [pc, #96]	@ (80003d8 <SweepTest+0x158>)
 8000378:	fb83 2301 	smull	r2, r3, r3, r1
 800037c:	109a      	asrs	r2, r3, #2
 800037e:	17cb      	asrs	r3, r1, #31
 8000380:	1ad2      	subs	r2, r2, r3
 8000382:	4613      	mov	r3, r2
 8000384:	009b      	lsls	r3, r3, #2
 8000386:	4413      	add	r3, r2
 8000388:	005b      	lsls	r3, r3, #1
 800038a:	1aca      	subs	r2, r1, r3
 800038c:	2a00      	cmp	r2, #0
 800038e:	d10f      	bne.n	80003b0 <SweepTest+0x130>
    {
      sprintf(txBuffer, "Servo sweep: angle = %d°\r\n", angle);
 8000390:	68ba      	ldr	r2, [r7, #8]
 8000392:	4912      	ldr	r1, [pc, #72]	@ (80003dc <SweepTest+0x15c>)
 8000394:	4812      	ldr	r0, [pc, #72]	@ (80003e0 <SweepTest+0x160>)
 8000396:	f003 fe1d 	bl	8003fd4 <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer, strlen(txBuffer), HAL_MAX_DELAY);
 800039a:	4811      	ldr	r0, [pc, #68]	@ (80003e0 <SweepTest+0x160>)
 800039c:	f7ff ff18 	bl	80001d0 <strlen>
 80003a0:	4603      	mov	r3, r0
 80003a2:	b29a      	uxth	r2, r3
 80003a4:	f04f 33ff 	mov.w	r3, #4294967295
 80003a8:	490d      	ldr	r1, [pc, #52]	@ (80003e0 <SweepTest+0x160>)
 80003aa:	480e      	ldr	r0, [pc, #56]	@ (80003e4 <SweepTest+0x164>)
 80003ac:	f003 f998 	bl	80036e0 <HAL_UART_Transmit>
    }

    HAL_Delay(SWEEP_STEP_MS);
 80003b0:	200f      	movs	r0, #15
 80003b2:	f000 fc31 	bl	8000c18 <HAL_Delay>
  for (int angle = 180; angle >= 0; angle--)
 80003b6:	68bb      	ldr	r3, [r7, #8]
 80003b8:	3b01      	subs	r3, #1
 80003ba:	60bb      	str	r3, [r7, #8]
 80003bc:	68bb      	ldr	r3, [r7, #8]
 80003be:	2b00      	cmp	r3, #0
 80003c0:	dab3      	bge.n	800032a <SweepTest+0xaa>
  }
}
 80003c2:	bf00      	nop
 80003c4:	bf00      	nop
 80003c6:	3710      	adds	r7, #16
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	b60b60b7 	.word	0xb60b60b7
 80003d0:	20000078 	.word	0x20000078
 80003d4:	200000c4 	.word	0x200000c4
 80003d8:	66666667 	.word	0x66666667
 80003dc:	0800492c 	.word	0x0800492c
 80003e0:	20000198 	.word	0x20000198
 80003e4:	20000110 	.word	0x20000110

080003e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ec:	f000 fbae 	bl	8000b4c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f0:	f000 f83c 	bl	800046c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003f4:	f000 f99c 	bl	8000730 <MX_GPIO_Init>
  MX_TIM3_Init();
 80003f8:	f000 f888 	bl	800050c <MX_TIM3_Init>
  MX_TIM4_Init();
 80003fc:	f000 f902 	bl	8000604 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000400:	f000 f966 	bl	80006d0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Start PWM for all servo channels
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // Servo 1
 8000404:	2100      	movs	r1, #0
 8000406:	4814      	ldr	r0, [pc, #80]	@ (8000458 <main+0x70>)
 8000408:	f002 faf0 	bl	80029ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // Servo 2
 800040c:	2104      	movs	r1, #4
 800040e:	4812      	ldr	r0, [pc, #72]	@ (8000458 <main+0x70>)
 8000410:	f002 faec 	bl	80029ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Servo 3
 8000414:	2108      	movs	r1, #8
 8000416:	4810      	ldr	r0, [pc, #64]	@ (8000458 <main+0x70>)
 8000418:	f002 fae8 	bl	80029ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // Servo 4
 800041c:	210c      	movs	r1, #12
 800041e:	480e      	ldr	r0, [pc, #56]	@ (8000458 <main+0x70>)
 8000420:	f002 fae4 	bl	80029ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); // Servo 5
 8000424:	2100      	movs	r1, #0
 8000426:	480d      	ldr	r0, [pc, #52]	@ (800045c <main+0x74>)
 8000428:	f002 fae0 	bl	80029ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); // Servo 6
 800042c:	2104      	movs	r1, #4
 800042e:	480b      	ldr	r0, [pc, #44]	@ (800045c <main+0x74>)
 8000430:	f002 fadc 	bl	80029ec <HAL_TIM_PWM_Start>

  // Send startup message
  sprintf(txBuffer, "Servo Control Started\r\n");
 8000434:	490a      	ldr	r1, [pc, #40]	@ (8000460 <main+0x78>)
 8000436:	480b      	ldr	r0, [pc, #44]	@ (8000464 <main+0x7c>)
 8000438:	f003 fdcc 	bl	8003fd4 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer, strlen(txBuffer), HAL_MAX_DELAY);
 800043c:	4809      	ldr	r0, [pc, #36]	@ (8000464 <main+0x7c>)
 800043e:	f7ff fec7 	bl	80001d0 <strlen>
 8000442:	4603      	mov	r3, r0
 8000444:	b29a      	uxth	r2, r3
 8000446:	f04f 33ff 	mov.w	r3, #4294967295
 800044a:	4906      	ldr	r1, [pc, #24]	@ (8000464 <main+0x7c>)
 800044c:	4806      	ldr	r0, [pc, #24]	@ (8000468 <main+0x80>)
 800044e:	f003 f947 	bl	80036e0 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    SweepTest();
 8000452:	f7ff ff15 	bl	8000280 <SweepTest>
 8000456:	e7fc      	b.n	8000452 <main+0x6a>
 8000458:	20000078 	.word	0x20000078
 800045c:	200000c4 	.word	0x200000c4
 8000460:	08004948 	.word	0x08004948
 8000464:	20000198 	.word	0x20000198
 8000468:	20000110 	.word	0x20000110

0800046c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b09e      	sub	sp, #120	@ 0x78
 8000470:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000472:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000476:	2228      	movs	r2, #40	@ 0x28
 8000478:	2100      	movs	r1, #0
 800047a:	4618      	mov	r0, r3
 800047c:	f003 fdca 	bl	8004014 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000480:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000484:	2200      	movs	r2, #0
 8000486:	601a      	str	r2, [r3, #0]
 8000488:	605a      	str	r2, [r3, #4]
 800048a:	609a      	str	r2, [r3, #8]
 800048c:	60da      	str	r2, [r3, #12]
 800048e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000490:	463b      	mov	r3, r7
 8000492:	223c      	movs	r2, #60	@ 0x3c
 8000494:	2100      	movs	r1, #0
 8000496:	4618      	mov	r0, r3
 8000498:	f003 fdbc 	bl	8004014 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800049c:	2302      	movs	r3, #2
 800049e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004a0:	2301      	movs	r3, #1
 80004a2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004a4:	2310      	movs	r3, #16
 80004a6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004a8:	2300      	movs	r3, #0
 80004aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ac:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80004b0:	4618      	mov	r0, r3
 80004b2:	f000 fe35 	bl	8001120 <HAL_RCC_OscConfig>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80004bc:	f000 f9a4 	bl	8000808 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004c0:	230f      	movs	r3, #15
 80004c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004c4:	2300      	movs	r3, #0
 80004c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004c8:	2300      	movs	r3, #0
 80004ca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004cc:	2300      	movs	r3, #0
 80004ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004d0:	2300      	movs	r3, #0
 80004d2:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004d4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80004d8:	2100      	movs	r1, #0
 80004da:	4618      	mov	r0, r3
 80004dc:	f001 fe5e 	bl	800219c <HAL_RCC_ClockConfig>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80004e6:	f000 f98f 	bl	8000808 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80004ea:	2301      	movs	r3, #1
 80004ec:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80004ee:	2300      	movs	r3, #0
 80004f0:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004f2:	463b      	mov	r3, r7
 80004f4:	4618      	mov	r0, r3
 80004f6:	f002 f871 	bl	80025dc <HAL_RCCEx_PeriphCLKConfig>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000500:	f000 f982 	bl	8000808 <Error_Handler>
  }
}
 8000504:	bf00      	nop
 8000506:	3778      	adds	r7, #120	@ 0x78
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}

0800050c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b08a      	sub	sp, #40	@ 0x28
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_Init 0 */
  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000512:	f107 031c 	add.w	r3, r7, #28
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]
 800051c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800051e:	463b      	mov	r3, r7
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]
 800052c:	615a      	str	r2, [r3, #20]
 800052e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000530:	4b32      	ldr	r3, [pc, #200]	@ (80005fc <MX_TIM3_Init+0xf0>)
 8000532:	4a33      	ldr	r2, [pc, #204]	@ (8000600 <MX_TIM3_Init+0xf4>)
 8000534:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79; // 8 MHz / 80 = 100 kHz
 8000536:	4b31      	ldr	r3, [pc, #196]	@ (80005fc <MX_TIM3_Init+0xf0>)
 8000538:	224f      	movs	r2, #79	@ 0x4f
 800053a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800053c:	4b2f      	ldr	r3, [pc, #188]	@ (80005fc <MX_TIM3_Init+0xf0>)
 800053e:	2200      	movs	r2, #0
 8000540:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = PWM_PERIOD_TICKS - 1; // 20 ms
 8000542:	4b2e      	ldr	r3, [pc, #184]	@ (80005fc <MX_TIM3_Init+0xf0>)
 8000544:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000548:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800054a:	4b2c      	ldr	r3, [pc, #176]	@ (80005fc <MX_TIM3_Init+0xf0>)
 800054c:	2200      	movs	r2, #0
 800054e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000550:	4b2a      	ldr	r3, [pc, #168]	@ (80005fc <MX_TIM3_Init+0xf0>)
 8000552:	2280      	movs	r2, #128	@ 0x80
 8000554:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000556:	4829      	ldr	r0, [pc, #164]	@ (80005fc <MX_TIM3_Init+0xf0>)
 8000558:	f002 f9f0 	bl	800293c <HAL_TIM_PWM_Init>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000562:	f000 f951 	bl	8000808 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000566:	2300      	movs	r3, #0
 8000568:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800056a:	2300      	movs	r3, #0
 800056c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800056e:	f107 031c 	add.w	r3, r7, #28
 8000572:	4619      	mov	r1, r3
 8000574:	4821      	ldr	r0, [pc, #132]	@ (80005fc <MX_TIM3_Init+0xf0>)
 8000576:	f002 ffe5 	bl	8003544 <HAL_TIMEx_MasterConfigSynchronization>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000580:	f000 f942 	bl	8000808 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000584:	2360      	movs	r3, #96	@ 0x60
 8000586:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000588:	2300      	movs	r3, #0
 800058a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000590:	2300      	movs	r3, #0
 8000592:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000594:	463b      	mov	r3, r7
 8000596:	2200      	movs	r2, #0
 8000598:	4619      	mov	r1, r3
 800059a:	4818      	ldr	r0, [pc, #96]	@ (80005fc <MX_TIM3_Init+0xf0>)
 800059c:	f002 fb26 	bl	8002bec <HAL_TIM_PWM_ConfigChannel>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80005a6:	f000 f92f 	bl	8000808 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005aa:	463b      	mov	r3, r7
 80005ac:	2204      	movs	r2, #4
 80005ae:	4619      	mov	r1, r3
 80005b0:	4812      	ldr	r0, [pc, #72]	@ (80005fc <MX_TIM3_Init+0xf0>)
 80005b2:	f002 fb1b 	bl	8002bec <HAL_TIM_PWM_ConfigChannel>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80005bc:	f000 f924 	bl	8000808 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80005c0:	463b      	mov	r3, r7
 80005c2:	2208      	movs	r2, #8
 80005c4:	4619      	mov	r1, r3
 80005c6:	480d      	ldr	r0, [pc, #52]	@ (80005fc <MX_TIM3_Init+0xf0>)
 80005c8:	f002 fb10 	bl	8002bec <HAL_TIM_PWM_ConfigChannel>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 80005d2:	f000 f919 	bl	8000808 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80005d6:	463b      	mov	r3, r7
 80005d8:	220c      	movs	r2, #12
 80005da:	4619      	mov	r1, r3
 80005dc:	4807      	ldr	r0, [pc, #28]	@ (80005fc <MX_TIM3_Init+0xf0>)
 80005de:	f002 fb05 	bl	8002bec <HAL_TIM_PWM_ConfigChannel>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 80005e8:	f000 f90e 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80005ec:	4803      	ldr	r0, [pc, #12]	@ (80005fc <MX_TIM3_Init+0xf0>)
 80005ee:	f000 f969 	bl	80008c4 <HAL_TIM_MspPostInit>
}
 80005f2:	bf00      	nop
 80005f4:	3728      	adds	r7, #40	@ 0x28
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	20000078 	.word	0x20000078
 8000600:	40000400 	.word	0x40000400

08000604 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08a      	sub	sp, #40	@ 0x28
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_Init 0 */
  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800060a:	f107 031c 	add.w	r3, r7, #28
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000616:	463b      	mov	r3, r7
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]
 8000624:	615a      	str	r2, [r3, #20]
 8000626:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */
  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000628:	4b27      	ldr	r3, [pc, #156]	@ (80006c8 <MX_TIM4_Init+0xc4>)
 800062a:	4a28      	ldr	r2, [pc, #160]	@ (80006cc <MX_TIM4_Init+0xc8>)
 800062c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79; // 8 MHz / 80 = 100 kHz
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <MX_TIM4_Init+0xc4>)
 8000630:	224f      	movs	r2, #79	@ 0x4f
 8000632:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000634:	4b24      	ldr	r3, [pc, #144]	@ (80006c8 <MX_TIM4_Init+0xc4>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = PWM_PERIOD_TICKS - 1; // 20 ms
 800063a:	4b23      	ldr	r3, [pc, #140]	@ (80006c8 <MX_TIM4_Init+0xc4>)
 800063c:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000640:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000642:	4b21      	ldr	r3, [pc, #132]	@ (80006c8 <MX_TIM4_Init+0xc4>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000648:	4b1f      	ldr	r3, [pc, #124]	@ (80006c8 <MX_TIM4_Init+0xc4>)
 800064a:	2280      	movs	r2, #128	@ 0x80
 800064c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800064e:	481e      	ldr	r0, [pc, #120]	@ (80006c8 <MX_TIM4_Init+0xc4>)
 8000650:	f002 f974 	bl	800293c <HAL_TIM_PWM_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800065a:	f000 f8d5 	bl	8000808 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000662:	2300      	movs	r3, #0
 8000664:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000666:	f107 031c 	add.w	r3, r7, #28
 800066a:	4619      	mov	r1, r3
 800066c:	4816      	ldr	r0, [pc, #88]	@ (80006c8 <MX_TIM4_Init+0xc4>)
 800066e:	f002 ff69 	bl	8003544 <HAL_TIMEx_MasterConfigSynchronization>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000678:	f000 f8c6 	bl	8000808 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800067c:	2360      	movs	r3, #96	@ 0x60
 800067e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000688:	2300      	movs	r3, #0
 800068a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800068c:	463b      	mov	r3, r7
 800068e:	2200      	movs	r2, #0
 8000690:	4619      	mov	r1, r3
 8000692:	480d      	ldr	r0, [pc, #52]	@ (80006c8 <MX_TIM4_Init+0xc4>)
 8000694:	f002 faaa 	bl	8002bec <HAL_TIM_PWM_ConfigChannel>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800069e:	f000 f8b3 	bl	8000808 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006a2:	463b      	mov	r3, r7
 80006a4:	2204      	movs	r2, #4
 80006a6:	4619      	mov	r1, r3
 80006a8:	4807      	ldr	r0, [pc, #28]	@ (80006c8 <MX_TIM4_Init+0xc4>)
 80006aa:	f002 fa9f 	bl	8002bec <HAL_TIM_PWM_ConfigChannel>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80006b4:	f000 f8a8 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80006b8:	4803      	ldr	r0, [pc, #12]	@ (80006c8 <MX_TIM4_Init+0xc4>)
 80006ba:	f000 f903 	bl	80008c4 <HAL_TIM_MspPostInit>
}
 80006be:	bf00      	nop
 80006c0:	3728      	adds	r7, #40	@ 0x28
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	200000c4 	.word	0x200000c4
 80006cc:	40000800 	.word	0x40000800

080006d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 0 */
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006d4:	4b14      	ldr	r3, [pc, #80]	@ (8000728 <MX_USART1_UART_Init+0x58>)
 80006d6:	4a15      	ldr	r2, [pc, #84]	@ (800072c <MX_USART1_UART_Init+0x5c>)
 80006d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006da:	4b13      	ldr	r3, [pc, #76]	@ (8000728 <MX_USART1_UART_Init+0x58>)
 80006dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <MX_USART1_UART_Init+0x58>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000728 <MX_USART1_UART_Init+0x58>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <MX_USART1_UART_Init+0x58>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <MX_USART1_UART_Init+0x58>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000728 <MX_USART1_UART_Init+0x58>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000700:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <MX_USART1_UART_Init+0x58>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000706:	4b08      	ldr	r3, [pc, #32]	@ (8000728 <MX_USART1_UART_Init+0x58>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800070c:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <MX_USART1_UART_Init+0x58>)
 800070e:	2200      	movs	r2, #0
 8000710:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	@ (8000728 <MX_USART1_UART_Init+0x58>)
 8000714:	f002 ff96 	bl	8003644 <HAL_UART_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800071e:	f000 f873 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */
}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000110 	.word	0x20000110
 800072c:	40013800 	.word	0x40013800

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b088      	sub	sp, #32
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 030c 	add.w	r3, r7, #12
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000746:	4b2c      	ldr	r3, [pc, #176]	@ (80007f8 <MX_GPIO_Init+0xc8>)
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	4a2b      	ldr	r2, [pc, #172]	@ (80007f8 <MX_GPIO_Init+0xc8>)
 800074c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000750:	6153      	str	r3, [r2, #20]
 8000752:	4b29      	ldr	r3, [pc, #164]	@ (80007f8 <MX_GPIO_Init+0xc8>)
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	4b26      	ldr	r3, [pc, #152]	@ (80007f8 <MX_GPIO_Init+0xc8>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	4a25      	ldr	r2, [pc, #148]	@ (80007f8 <MX_GPIO_Init+0xc8>)
 8000764:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000768:	6153      	str	r3, [r2, #20]
 800076a:	4b23      	ldr	r3, [pc, #140]	@ (80007f8 <MX_GPIO_Init+0xc8>)
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000776:	4b20      	ldr	r3, [pc, #128]	@ (80007f8 <MX_GPIO_Init+0xc8>)
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	4a1f      	ldr	r2, [pc, #124]	@ (80007f8 <MX_GPIO_Init+0xc8>)
 800077c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000780:	6153      	str	r3, [r2, #20]
 8000782:	4b1d      	ldr	r3, [pc, #116]	@ (80007f8 <MX_GPIO_Init+0xc8>)
 8000784:	695b      	ldr	r3, [r3, #20]
 8000786:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	683b      	ldr	r3, [r7, #0]

  /* Configure PE2, PE3, PE4, PE5 for TIM3_CH1–4 (Servos 1–4) */
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 800078e:	233c      	movs	r3, #60	@ 0x3c
 8000790:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000792:	2302      	movs	r3, #2
 8000794:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079a:	2300      	movs	r3, #0
 800079c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800079e:	2302      	movs	r3, #2
 80007a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007a2:	f107 030c 	add.w	r3, r7, #12
 80007a6:	4619      	mov	r1, r3
 80007a8:	4814      	ldr	r0, [pc, #80]	@ (80007fc <MX_GPIO_Init+0xcc>)
 80007aa:	f000 fb3f 	bl	8000e2c <HAL_GPIO_Init>

  /* Configure PD12, PD13 for TIM4_CH1–2 (Servos 5–6) */
  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 80007ae:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80007b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b4:	2302      	movs	r3, #2
 80007b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2300      	movs	r3, #0
 80007be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80007c0:	2302      	movs	r3, #2
 80007c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	4619      	mov	r1, r3
 80007ca:	480d      	ldr	r0, [pc, #52]	@ (8000800 <MX_GPIO_Init+0xd0>)
 80007cc:	f000 fb2e 	bl	8000e2c <HAL_GPIO_Init>

  /* Configure PC4 (TX), PC5 (RX) for USART1 */
  GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 80007d0:	2330      	movs	r3, #48	@ 0x30
 80007d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d4:	2302      	movs	r3, #2
 80007d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007dc:	2303      	movs	r3, #3
 80007de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007e0:	2307      	movs	r3, #7
 80007e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007e4:	f107 030c 	add.w	r3, r7, #12
 80007e8:	4619      	mov	r1, r3
 80007ea:	4806      	ldr	r0, [pc, #24]	@ (8000804 <MX_GPIO_Init+0xd4>)
 80007ec:	f000 fb1e 	bl	8000e2c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80007f0:	bf00      	nop
 80007f2:	3720      	adds	r7, #32
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40021000 	.word	0x40021000
 80007fc:	48001000 	.word	0x48001000
 8000800:	48000c00 	.word	0x48000c00
 8000804:	48000800 	.word	0x48000800

08000808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800080c:	b672      	cpsid	i
}
 800080e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000810:	bf00      	nop
 8000812:	e7fd      	b.n	8000810 <Error_Handler+0x8>

08000814 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081a:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <HAL_MspInit+0x44>)
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	4a0e      	ldr	r2, [pc, #56]	@ (8000858 <HAL_MspInit+0x44>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6193      	str	r3, [r2, #24]
 8000826:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <HAL_MspInit+0x44>)
 8000828:	699b      	ldr	r3, [r3, #24]
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000832:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <HAL_MspInit+0x44>)
 8000834:	69db      	ldr	r3, [r3, #28]
 8000836:	4a08      	ldr	r2, [pc, #32]	@ (8000858 <HAL_MspInit+0x44>)
 8000838:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800083c:	61d3      	str	r3, [r2, #28]
 800083e:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <HAL_MspInit+0x44>)
 8000840:	69db      	ldr	r3, [r3, #28]
 8000842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	40021000 	.word	0x40021000

0800085c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a13      	ldr	r2, [pc, #76]	@ (80008b8 <HAL_TIM_PWM_MspInit+0x5c>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d10c      	bne.n	8000888 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800086e:	4b13      	ldr	r3, [pc, #76]	@ (80008bc <HAL_TIM_PWM_MspInit+0x60>)
 8000870:	69db      	ldr	r3, [r3, #28]
 8000872:	4a12      	ldr	r2, [pc, #72]	@ (80008bc <HAL_TIM_PWM_MspInit+0x60>)
 8000874:	f043 0302 	orr.w	r3, r3, #2
 8000878:	61d3      	str	r3, [r2, #28]
 800087a:	4b10      	ldr	r3, [pc, #64]	@ (80008bc <HAL_TIM_PWM_MspInit+0x60>)
 800087c:	69db      	ldr	r3, [r3, #28]
 800087e:	f003 0302 	and.w	r3, r3, #2
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000886:	e010      	b.n	80008aa <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a0c      	ldr	r2, [pc, #48]	@ (80008c0 <HAL_TIM_PWM_MspInit+0x64>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d10b      	bne.n	80008aa <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000892:	4b0a      	ldr	r3, [pc, #40]	@ (80008bc <HAL_TIM_PWM_MspInit+0x60>)
 8000894:	69db      	ldr	r3, [r3, #28]
 8000896:	4a09      	ldr	r2, [pc, #36]	@ (80008bc <HAL_TIM_PWM_MspInit+0x60>)
 8000898:	f043 0304 	orr.w	r3, r3, #4
 800089c:	61d3      	str	r3, [r2, #28]
 800089e:	4b07      	ldr	r3, [pc, #28]	@ (80008bc <HAL_TIM_PWM_MspInit+0x60>)
 80008a0:	69db      	ldr	r3, [r3, #28]
 80008a2:	f003 0304 	and.w	r3, r3, #4
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	68bb      	ldr	r3, [r7, #8]
}
 80008aa:	bf00      	nop
 80008ac:	3714      	adds	r7, #20
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	40000400 	.word	0x40000400
 80008bc:	40021000 	.word	0x40021000
 80008c0:	40000800 	.word	0x40000800

080008c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08a      	sub	sp, #40	@ 0x28
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a22      	ldr	r2, [pc, #136]	@ (800096c <HAL_TIM_MspPostInit+0xa8>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d11c      	bne.n	8000920 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80008e6:	4b22      	ldr	r3, [pc, #136]	@ (8000970 <HAL_TIM_MspPostInit+0xac>)
 80008e8:	695b      	ldr	r3, [r3, #20]
 80008ea:	4a21      	ldr	r2, [pc, #132]	@ (8000970 <HAL_TIM_MspPostInit+0xac>)
 80008ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008f0:	6153      	str	r3, [r2, #20]
 80008f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000970 <HAL_TIM_MspPostInit+0xac>)
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]
    PE2     ------> TIM3_CH1
    PE3     ------> TIM3_CH2
    PE4     ------> TIM3_CH3
    PE5     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80008fe:	233c      	movs	r3, #60	@ 0x3c
 8000900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800090e:	2302      	movs	r3, #2
 8000910:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	4619      	mov	r1, r3
 8000918:	4816      	ldr	r0, [pc, #88]	@ (8000974 <HAL_TIM_MspPostInit+0xb0>)
 800091a:	f000 fa87 	bl	8000e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800091e:	e021      	b.n	8000964 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM4)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a14      	ldr	r2, [pc, #80]	@ (8000978 <HAL_TIM_MspPostInit+0xb4>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d11c      	bne.n	8000964 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800092a:	4b11      	ldr	r3, [pc, #68]	@ (8000970 <HAL_TIM_MspPostInit+0xac>)
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	4a10      	ldr	r2, [pc, #64]	@ (8000970 <HAL_TIM_MspPostInit+0xac>)
 8000930:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000934:	6153      	str	r3, [r2, #20]
 8000936:	4b0e      	ldr	r3, [pc, #56]	@ (8000970 <HAL_TIM_MspPostInit+0xac>)
 8000938:	695b      	ldr	r3, [r3, #20]
 800093a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000942:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000946:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000948:	2302      	movs	r3, #2
 800094a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2300      	movs	r3, #0
 8000952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000954:	2302      	movs	r3, #2
 8000956:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4619      	mov	r1, r3
 800095e:	4807      	ldr	r0, [pc, #28]	@ (800097c <HAL_TIM_MspPostInit+0xb8>)
 8000960:	f000 fa64 	bl	8000e2c <HAL_GPIO_Init>
}
 8000964:	bf00      	nop
 8000966:	3728      	adds	r7, #40	@ 0x28
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40000400 	.word	0x40000400
 8000970:	40021000 	.word	0x40021000
 8000974:	48001000 	.word	0x48001000
 8000978:	40000800 	.word	0x40000800
 800097c:	48000c00 	.word	0x48000c00

08000980 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	@ 0x28
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a17      	ldr	r2, [pc, #92]	@ (80009fc <HAL_UART_MspInit+0x7c>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d127      	bne.n	80009f2 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009a2:	4b17      	ldr	r3, [pc, #92]	@ (8000a00 <HAL_UART_MspInit+0x80>)
 80009a4:	699b      	ldr	r3, [r3, #24]
 80009a6:	4a16      	ldr	r2, [pc, #88]	@ (8000a00 <HAL_UART_MspInit+0x80>)
 80009a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009ac:	6193      	str	r3, [r2, #24]
 80009ae:	4b14      	ldr	r3, [pc, #80]	@ (8000a00 <HAL_UART_MspInit+0x80>)
 80009b0:	699b      	ldr	r3, [r3, #24]
 80009b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ba:	4b11      	ldr	r3, [pc, #68]	@ (8000a00 <HAL_UART_MspInit+0x80>)
 80009bc:	695b      	ldr	r3, [r3, #20]
 80009be:	4a10      	ldr	r2, [pc, #64]	@ (8000a00 <HAL_UART_MspInit+0x80>)
 80009c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80009c4:	6153      	str	r3, [r2, #20]
 80009c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a00 <HAL_UART_MspInit+0x80>)
 80009c8:	695b      	ldr	r3, [r3, #20]
 80009ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80009d2:	2330      	movs	r3, #48	@ 0x30
 80009d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d6:	2302      	movs	r3, #2
 80009d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009de:	2303      	movs	r3, #3
 80009e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009e2:	2307      	movs	r3, #7
 80009e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	4619      	mov	r1, r3
 80009ec:	4805      	ldr	r0, [pc, #20]	@ (8000a04 <HAL_UART_MspInit+0x84>)
 80009ee:	f000 fa1d 	bl	8000e2c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80009f2:	bf00      	nop
 80009f4:	3728      	adds	r7, #40	@ 0x28
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40013800 	.word	0x40013800
 8000a00:	40021000 	.word	0x40021000
 8000a04:	48000800 	.word	0x48000800

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <NMI_Handler+0x4>

08000a10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <HardFault_Handler+0x4>

08000a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <MemManage_Handler+0x4>

08000a20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <BusFault_Handler+0x4>

08000a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <UsageFault_Handler+0x4>

08000a30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a5e:	f000 f8bb 	bl	8000bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
	...

08000a68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a70:	4a14      	ldr	r2, [pc, #80]	@ (8000ac4 <_sbrk+0x5c>)
 8000a72:	4b15      	ldr	r3, [pc, #84]	@ (8000ac8 <_sbrk+0x60>)
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a7c:	4b13      	ldr	r3, [pc, #76]	@ (8000acc <_sbrk+0x64>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d102      	bne.n	8000a8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a84:	4b11      	ldr	r3, [pc, #68]	@ (8000acc <_sbrk+0x64>)
 8000a86:	4a12      	ldr	r2, [pc, #72]	@ (8000ad0 <_sbrk+0x68>)
 8000a88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a8a:	4b10      	ldr	r3, [pc, #64]	@ (8000acc <_sbrk+0x64>)
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4413      	add	r3, r2
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d207      	bcs.n	8000aa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a98:	f003 fac4 	bl	8004024 <__errno>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	220c      	movs	r2, #12
 8000aa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa6:	e009      	b.n	8000abc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aa8:	4b08      	ldr	r3, [pc, #32]	@ (8000acc <_sbrk+0x64>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aae:	4b07      	ldr	r3, [pc, #28]	@ (8000acc <_sbrk+0x64>)
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	4a05      	ldr	r2, [pc, #20]	@ (8000acc <_sbrk+0x64>)
 8000ab8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aba:	68fb      	ldr	r3, [r7, #12]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3718      	adds	r7, #24
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	2000a000 	.word	0x2000a000
 8000ac8:	00000400 	.word	0x00000400
 8000acc:	200001fc 	.word	0x200001fc
 8000ad0:	20000350 	.word	0x20000350

08000ad4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ad8:	4b06      	ldr	r3, [pc, #24]	@ (8000af4 <SystemInit+0x20>)
 8000ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ade:	4a05      	ldr	r2, [pc, #20]	@ (8000af4 <SystemInit+0x20>)
 8000ae0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ae4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000af8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b30 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000afc:	f7ff ffea 	bl	8000ad4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b00:	480c      	ldr	r0, [pc, #48]	@ (8000b34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b02:	490d      	ldr	r1, [pc, #52]	@ (8000b38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b04:	4a0d      	ldr	r2, [pc, #52]	@ (8000b3c <LoopForever+0xe>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b08:	e002      	b.n	8000b10 <LoopCopyDataInit>

08000b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b0e:	3304      	adds	r3, #4

08000b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b14:	d3f9      	bcc.n	8000b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b16:	4a0a      	ldr	r2, [pc, #40]	@ (8000b40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b18:	4c0a      	ldr	r4, [pc, #40]	@ (8000b44 <LoopForever+0x16>)
  movs r3, #0
 8000b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b1c:	e001      	b.n	8000b22 <LoopFillZerobss>

08000b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b20:	3204      	adds	r2, #4

08000b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b24:	d3fb      	bcc.n	8000b1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b26:	f003 fa83 	bl	8004030 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b2a:	f7ff fc5d 	bl	80003e8 <main>

08000b2e <LoopForever>:

LoopForever:
    b LoopForever
 8000b2e:	e7fe      	b.n	8000b2e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b30:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b38:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b3c:	080049dc 	.word	0x080049dc
  ldr r2, =_sbss
 8000b40:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b44:	2000034c 	.word	0x2000034c

08000b48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b48:	e7fe      	b.n	8000b48 <ADC1_2_IRQHandler>
	...

08000b4c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b50:	4b08      	ldr	r3, [pc, #32]	@ (8000b74 <HAL_Init+0x28>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a07      	ldr	r2, [pc, #28]	@ (8000b74 <HAL_Init+0x28>)
 8000b56:	f043 0310 	orr.w	r3, r3, #16
 8000b5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b5c:	2003      	movs	r0, #3
 8000b5e:	f000 f931 	bl	8000dc4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b62:	200f      	movs	r0, #15
 8000b64:	f000 f808 	bl	8000b78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b68:	f7ff fe54 	bl	8000814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40022000 	.word	0x40022000

08000b78 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b80:	4b12      	ldr	r3, [pc, #72]	@ (8000bcc <HAL_InitTick+0x54>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	4b12      	ldr	r3, [pc, #72]	@ (8000bd0 <HAL_InitTick+0x58>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	4619      	mov	r1, r3
 8000b8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b96:	4618      	mov	r0, r3
 8000b98:	f000 f93b 	bl	8000e12 <HAL_SYSTICK_Config>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e00e      	b.n	8000bc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2b0f      	cmp	r3, #15
 8000baa:	d80a      	bhi.n	8000bc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bac:	2200      	movs	r2, #0
 8000bae:	6879      	ldr	r1, [r7, #4]
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	f000 f911 	bl	8000dda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bb8:	4a06      	ldr	r2, [pc, #24]	@ (8000bd4 <HAL_InitTick+0x5c>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	e000      	b.n	8000bc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000000 	.word	0x20000000
 8000bd0:	20000008 	.word	0x20000008
 8000bd4:	20000004 	.word	0x20000004

08000bd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <HAL_IncTick+0x20>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	461a      	mov	r2, r3
 8000be2:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <HAL_IncTick+0x24>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4413      	add	r3, r2
 8000be8:	4a04      	ldr	r2, [pc, #16]	@ (8000bfc <HAL_IncTick+0x24>)
 8000bea:	6013      	str	r3, [r2, #0]
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	20000008 	.word	0x20000008
 8000bfc:	20000200 	.word	0x20000200

08000c00 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c04:	4b03      	ldr	r3, [pc, #12]	@ (8000c14 <HAL_GetTick+0x14>)
 8000c06:	681b      	ldr	r3, [r3, #0]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	20000200 	.word	0x20000200

08000c18 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c20:	f7ff ffee 	bl	8000c00 <HAL_GetTick>
 8000c24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c30:	d005      	beq.n	8000c3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c32:	4b0a      	ldr	r3, [pc, #40]	@ (8000c5c <HAL_Delay+0x44>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	461a      	mov	r2, r3
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c3e:	bf00      	nop
 8000c40:	f7ff ffde 	bl	8000c00 <HAL_GetTick>
 8000c44:	4602      	mov	r2, r0
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d8f7      	bhi.n	8000c40 <HAL_Delay+0x28>
  {
  }
}
 8000c50:	bf00      	nop
 8000c52:	bf00      	nop
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000008 	.word	0x20000008

08000c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c92:	4a04      	ldr	r2, [pc, #16]	@ (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	60d3      	str	r3, [r2, #12]
}
 8000c98:	bf00      	nop
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cac:	4b04      	ldr	r3, [pc, #16]	@ (8000cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	0a1b      	lsrs	r3, r3, #8
 8000cb2:	f003 0307 	and.w	r3, r3, #7
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	6039      	str	r1, [r7, #0]
 8000cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	db0a      	blt.n	8000cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	490c      	ldr	r1, [pc, #48]	@ (8000d10 <__NVIC_SetPriority+0x4c>)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	0112      	lsls	r2, r2, #4
 8000ce4:	b2d2      	uxtb	r2, r2
 8000ce6:	440b      	add	r3, r1
 8000ce8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cec:	e00a      	b.n	8000d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4908      	ldr	r1, [pc, #32]	@ (8000d14 <__NVIC_SetPriority+0x50>)
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	f003 030f 	and.w	r3, r3, #15
 8000cfa:	3b04      	subs	r3, #4
 8000cfc:	0112      	lsls	r2, r2, #4
 8000cfe:	b2d2      	uxtb	r2, r2
 8000d00:	440b      	add	r3, r1
 8000d02:	761a      	strb	r2, [r3, #24]
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000e100 	.word	0xe000e100
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b089      	sub	sp, #36	@ 0x24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	f1c3 0307 	rsb	r3, r3, #7
 8000d32:	2b04      	cmp	r3, #4
 8000d34:	bf28      	it	cs
 8000d36:	2304      	movcs	r3, #4
 8000d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3304      	adds	r3, #4
 8000d3e:	2b06      	cmp	r3, #6
 8000d40:	d902      	bls.n	8000d48 <NVIC_EncodePriority+0x30>
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	3b03      	subs	r3, #3
 8000d46:	e000      	b.n	8000d4a <NVIC_EncodePriority+0x32>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43da      	mvns	r2, r3
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	401a      	ands	r2, r3
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d60:	f04f 31ff 	mov.w	r1, #4294967295
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6a:	43d9      	mvns	r1, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d70:	4313      	orrs	r3, r2
         );
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3724      	adds	r7, #36	@ 0x24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
	...

08000d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d90:	d301      	bcc.n	8000d96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d92:	2301      	movs	r3, #1
 8000d94:	e00f      	b.n	8000db6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d96:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc0 <SysTick_Config+0x40>)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d9e:	210f      	movs	r1, #15
 8000da0:	f04f 30ff 	mov.w	r0, #4294967295
 8000da4:	f7ff ff8e 	bl	8000cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da8:	4b05      	ldr	r3, [pc, #20]	@ (8000dc0 <SysTick_Config+0x40>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dae:	4b04      	ldr	r3, [pc, #16]	@ (8000dc0 <SysTick_Config+0x40>)
 8000db0:	2207      	movs	r2, #7
 8000db2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	e000e010 	.word	0xe000e010

08000dc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff ff47 	bl	8000c60 <__NVIC_SetPriorityGrouping>
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b086      	sub	sp, #24
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	4603      	mov	r3, r0
 8000de2:	60b9      	str	r1, [r7, #8]
 8000de4:	607a      	str	r2, [r7, #4]
 8000de6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dec:	f7ff ff5c 	bl	8000ca8 <__NVIC_GetPriorityGrouping>
 8000df0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	68b9      	ldr	r1, [r7, #8]
 8000df6:	6978      	ldr	r0, [r7, #20]
 8000df8:	f7ff ff8e 	bl	8000d18 <NVIC_EncodePriority>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e02:	4611      	mov	r1, r2
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff ff5d 	bl	8000cc4 <__NVIC_SetPriority>
}
 8000e0a:	bf00      	nop
 8000e0c:	3718      	adds	r7, #24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff ffb0 	bl	8000d80 <SysTick_Config>
 8000e20:	4603      	mov	r3, r0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b087      	sub	sp, #28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e3a:	e154      	b.n	80010e6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	2101      	movs	r1, #1
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	fa01 f303 	lsl.w	r3, r1, r3
 8000e48:	4013      	ands	r3, r2
 8000e4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f000 8146 	beq.w	80010e0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f003 0303 	and.w	r3, r3, #3
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d005      	beq.n	8000e6c <HAL_GPIO_Init+0x40>
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 0303 	and.w	r3, r3, #3
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d130      	bne.n	8000ece <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	2203      	movs	r2, #3
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4013      	ands	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	68da      	ldr	r2, [r3, #12]
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	091b      	lsrs	r3, r3, #4
 8000eb8:	f003 0201 	and.w	r2, r3, #1
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f003 0303 	and.w	r3, r3, #3
 8000ed6:	2b03      	cmp	r3, #3
 8000ed8:	d017      	beq.n	8000f0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	68db      	ldr	r3, [r3, #12]
 8000ede:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43db      	mvns	r3, r3
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	689a      	ldr	r2, [r3, #8]
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f003 0303 	and.w	r3, r3, #3
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d123      	bne.n	8000f5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	08da      	lsrs	r2, r3, #3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	3208      	adds	r2, #8
 8000f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	220f      	movs	r2, #15
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	4013      	ands	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	691a      	ldr	r2, [r3, #16]
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	f003 0307 	and.w	r3, r3, #7
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	08da      	lsrs	r2, r3, #3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3208      	adds	r2, #8
 8000f58:	6939      	ldr	r1, [r7, #16]
 8000f5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	2203      	movs	r2, #3
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	4013      	ands	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 0203 	and.w	r2, r3, #3
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f000 80a0 	beq.w	80010e0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa0:	4b58      	ldr	r3, [pc, #352]	@ (8001104 <HAL_GPIO_Init+0x2d8>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	4a57      	ldr	r2, [pc, #348]	@ (8001104 <HAL_GPIO_Init+0x2d8>)
 8000fa6:	f043 0301 	orr.w	r3, r3, #1
 8000faa:	6193      	str	r3, [r2, #24]
 8000fac:	4b55      	ldr	r3, [pc, #340]	@ (8001104 <HAL_GPIO_Init+0x2d8>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	f003 0301 	and.w	r3, r3, #1
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fb8:	4a53      	ldr	r2, [pc, #332]	@ (8001108 <HAL_GPIO_Init+0x2dc>)
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	089b      	lsrs	r3, r3, #2
 8000fbe:	3302      	adds	r3, #2
 8000fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	220f      	movs	r2, #15
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000fe2:	d019      	beq.n	8001018 <HAL_GPIO_Init+0x1ec>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a49      	ldr	r2, [pc, #292]	@ (800110c <HAL_GPIO_Init+0x2e0>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d013      	beq.n	8001014 <HAL_GPIO_Init+0x1e8>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a48      	ldr	r2, [pc, #288]	@ (8001110 <HAL_GPIO_Init+0x2e4>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d00d      	beq.n	8001010 <HAL_GPIO_Init+0x1e4>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a47      	ldr	r2, [pc, #284]	@ (8001114 <HAL_GPIO_Init+0x2e8>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d007      	beq.n	800100c <HAL_GPIO_Init+0x1e0>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a46      	ldr	r2, [pc, #280]	@ (8001118 <HAL_GPIO_Init+0x2ec>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d101      	bne.n	8001008 <HAL_GPIO_Init+0x1dc>
 8001004:	2304      	movs	r3, #4
 8001006:	e008      	b.n	800101a <HAL_GPIO_Init+0x1ee>
 8001008:	2305      	movs	r3, #5
 800100a:	e006      	b.n	800101a <HAL_GPIO_Init+0x1ee>
 800100c:	2303      	movs	r3, #3
 800100e:	e004      	b.n	800101a <HAL_GPIO_Init+0x1ee>
 8001010:	2302      	movs	r3, #2
 8001012:	e002      	b.n	800101a <HAL_GPIO_Init+0x1ee>
 8001014:	2301      	movs	r3, #1
 8001016:	e000      	b.n	800101a <HAL_GPIO_Init+0x1ee>
 8001018:	2300      	movs	r3, #0
 800101a:	697a      	ldr	r2, [r7, #20]
 800101c:	f002 0203 	and.w	r2, r2, #3
 8001020:	0092      	lsls	r2, r2, #2
 8001022:	4093      	lsls	r3, r2
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4313      	orrs	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800102a:	4937      	ldr	r1, [pc, #220]	@ (8001108 <HAL_GPIO_Init+0x2dc>)
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	089b      	lsrs	r3, r3, #2
 8001030:	3302      	adds	r3, #2
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001038:	4b38      	ldr	r3, [pc, #224]	@ (800111c <HAL_GPIO_Init+0x2f0>)
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	43db      	mvns	r3, r3
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	4013      	ands	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d003      	beq.n	800105c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800105c:	4a2f      	ldr	r2, [pc, #188]	@ (800111c <HAL_GPIO_Init+0x2f0>)
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001062:	4b2e      	ldr	r3, [pc, #184]	@ (800111c <HAL_GPIO_Init+0x2f0>)
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	43db      	mvns	r3, r3
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	4013      	ands	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d003      	beq.n	8001086 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	4313      	orrs	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001086:	4a25      	ldr	r2, [pc, #148]	@ (800111c <HAL_GPIO_Init+0x2f0>)
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800108c:	4b23      	ldr	r3, [pc, #140]	@ (800111c <HAL_GPIO_Init+0x2f0>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	43db      	mvns	r3, r3
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4013      	ands	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d003      	beq.n	80010b0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010b0:	4a1a      	ldr	r2, [pc, #104]	@ (800111c <HAL_GPIO_Init+0x2f0>)
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010b6:	4b19      	ldr	r3, [pc, #100]	@ (800111c <HAL_GPIO_Init+0x2f0>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	43db      	mvns	r3, r3
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	4013      	ands	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010da:	4a10      	ldr	r2, [pc, #64]	@ (800111c <HAL_GPIO_Init+0x2f0>)
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	3301      	adds	r3, #1
 80010e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	fa22 f303 	lsr.w	r3, r2, r3
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	f47f aea3 	bne.w	8000e3c <HAL_GPIO_Init+0x10>
  }
}
 80010f6:	bf00      	nop
 80010f8:	bf00      	nop
 80010fa:	371c      	adds	r7, #28
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	40021000 	.word	0x40021000
 8001108:	40010000 	.word	0x40010000
 800110c:	48000400 	.word	0x48000400
 8001110:	48000800 	.word	0x48000800
 8001114:	48000c00 	.word	0x48000c00
 8001118:	48001000 	.word	0x48001000
 800111c:	40010400 	.word	0x40010400

08001120 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001126:	af00      	add	r7, sp, #0
 8001128:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800112c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001130:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001132:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001136:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d102      	bne.n	8001146 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	f001 b823 	b.w	800218c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001146:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800114a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	2b00      	cmp	r3, #0
 8001158:	f000 817d 	beq.w	8001456 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800115c:	4bbc      	ldr	r3, [pc, #752]	@ (8001450 <HAL_RCC_OscConfig+0x330>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f003 030c 	and.w	r3, r3, #12
 8001164:	2b04      	cmp	r3, #4
 8001166:	d00c      	beq.n	8001182 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001168:	4bb9      	ldr	r3, [pc, #740]	@ (8001450 <HAL_RCC_OscConfig+0x330>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f003 030c 	and.w	r3, r3, #12
 8001170:	2b08      	cmp	r3, #8
 8001172:	d15c      	bne.n	800122e <HAL_RCC_OscConfig+0x10e>
 8001174:	4bb6      	ldr	r3, [pc, #728]	@ (8001450 <HAL_RCC_OscConfig+0x330>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800117c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001180:	d155      	bne.n	800122e <HAL_RCC_OscConfig+0x10e>
 8001182:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001186:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800118e:	fa93 f3a3 	rbit	r3, r3
 8001192:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001196:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800119a:	fab3 f383 	clz	r3, r3
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	095b      	lsrs	r3, r3, #5
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d102      	bne.n	80011b4 <HAL_RCC_OscConfig+0x94>
 80011ae:	4ba8      	ldr	r3, [pc, #672]	@ (8001450 <HAL_RCC_OscConfig+0x330>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	e015      	b.n	80011e0 <HAL_RCC_OscConfig+0xc0>
 80011b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80011b8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011bc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80011c0:	fa93 f3a3 	rbit	r3, r3
 80011c4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80011c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80011cc:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80011d0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80011d4:	fa93 f3a3 	rbit	r3, r3
 80011d8:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80011dc:	4b9c      	ldr	r3, [pc, #624]	@ (8001450 <HAL_RCC_OscConfig+0x330>)
 80011de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011e0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80011e4:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80011e8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80011ec:	fa92 f2a2 	rbit	r2, r2
 80011f0:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80011f4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80011f8:	fab2 f282 	clz	r2, r2
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	f042 0220 	orr.w	r2, r2, #32
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	f002 021f 	and.w	r2, r2, #31
 8001208:	2101      	movs	r1, #1
 800120a:	fa01 f202 	lsl.w	r2, r1, r2
 800120e:	4013      	ands	r3, r2
 8001210:	2b00      	cmp	r3, #0
 8001212:	f000 811f 	beq.w	8001454 <HAL_RCC_OscConfig+0x334>
 8001216:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800121a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	f040 8116 	bne.w	8001454 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	f000 bfaf 	b.w	800218c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800122e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001232:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800123e:	d106      	bne.n	800124e <HAL_RCC_OscConfig+0x12e>
 8001240:	4b83      	ldr	r3, [pc, #524]	@ (8001450 <HAL_RCC_OscConfig+0x330>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a82      	ldr	r2, [pc, #520]	@ (8001450 <HAL_RCC_OscConfig+0x330>)
 8001246:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800124a:	6013      	str	r3, [r2, #0]
 800124c:	e036      	b.n	80012bc <HAL_RCC_OscConfig+0x19c>
 800124e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001252:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d10c      	bne.n	8001278 <HAL_RCC_OscConfig+0x158>
 800125e:	4b7c      	ldr	r3, [pc, #496]	@ (8001450 <HAL_RCC_OscConfig+0x330>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a7b      	ldr	r2, [pc, #492]	@ (8001450 <HAL_RCC_OscConfig+0x330>)
 8001264:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	4b79      	ldr	r3, [pc, #484]	@ (8001450 <HAL_RCC_OscConfig+0x330>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a78      	ldr	r2, [pc, #480]	@ (8001450 <HAL_RCC_OscConfig+0x330>)
 8001270:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	e021      	b.n	80012bc <HAL_RCC_OscConfig+0x19c>
 8001278:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800127c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001288:	d10c      	bne.n	80012a4 <HAL_RCC_OscConfig+0x184>
 800128a:	4b71      	ldr	r3, [pc, #452]	@ (8001450 <HAL_RCC_OscConfig+0x330>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a70      	ldr	r2, [pc, #448]	@ (8001450 <HAL_RCC_OscConfig+0x330>)
 8001290:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	4b6e      	ldr	r3, [pc, #440]	@ (8001450 <HAL_RCC_OscConfig+0x330>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a6d      	ldr	r2, [pc, #436]	@ (8001450 <HAL_RCC_OscConfig+0x330>)
 800129c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	e00b      	b.n	80012bc <HAL_RCC_OscConfig+0x19c>
 80012a4:	4b6a      	ldr	r3, [pc, #424]	@ (8001450 <HAL_RCC_OscConfig+0x330>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a69      	ldr	r2, [pc, #420]	@ (8001450 <HAL_RCC_OscConfig+0x330>)
 80012aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012ae:	6013      	str	r3, [r2, #0]
 80012b0:	4b67      	ldr	r3, [pc, #412]	@ (8001450 <HAL_RCC_OscConfig+0x330>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a66      	ldr	r2, [pc, #408]	@ (8001450 <HAL_RCC_OscConfig+0x330>)
 80012b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012ba:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012bc:	4b64      	ldr	r3, [pc, #400]	@ (8001450 <HAL_RCC_OscConfig+0x330>)
 80012be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012c0:	f023 020f 	bic.w	r2, r3, #15
 80012c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	495f      	ldr	r1, [pc, #380]	@ (8001450 <HAL_RCC_OscConfig+0x330>)
 80012d2:	4313      	orrs	r3, r2
 80012d4:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d059      	beq.n	800139a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e6:	f7ff fc8b 	bl	8000c00 <HAL_GetTick>
 80012ea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ee:	e00a      	b.n	8001306 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f0:	f7ff fc86 	bl	8000c00 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b64      	cmp	r3, #100	@ 0x64
 80012fe:	d902      	bls.n	8001306 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	f000 bf43 	b.w	800218c <HAL_RCC_OscConfig+0x106c>
 8001306:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800130a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001312:	fa93 f3a3 	rbit	r3, r3
 8001316:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800131a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131e:	fab3 f383 	clz	r3, r3
 8001322:	b2db      	uxtb	r3, r3
 8001324:	095b      	lsrs	r3, r3, #5
 8001326:	b2db      	uxtb	r3, r3
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b01      	cmp	r3, #1
 8001330:	d102      	bne.n	8001338 <HAL_RCC_OscConfig+0x218>
 8001332:	4b47      	ldr	r3, [pc, #284]	@ (8001450 <HAL_RCC_OscConfig+0x330>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	e015      	b.n	8001364 <HAL_RCC_OscConfig+0x244>
 8001338:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800133c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001340:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001344:	fa93 f3a3 	rbit	r3, r3
 8001348:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800134c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001350:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001354:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001358:	fa93 f3a3 	rbit	r3, r3
 800135c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001360:	4b3b      	ldr	r3, [pc, #236]	@ (8001450 <HAL_RCC_OscConfig+0x330>)
 8001362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001364:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001368:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 800136c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001370:	fa92 f2a2 	rbit	r2, r2
 8001374:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001378:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800137c:	fab2 f282 	clz	r2, r2
 8001380:	b2d2      	uxtb	r2, r2
 8001382:	f042 0220 	orr.w	r2, r2, #32
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	f002 021f 	and.w	r2, r2, #31
 800138c:	2101      	movs	r1, #1
 800138e:	fa01 f202 	lsl.w	r2, r1, r2
 8001392:	4013      	ands	r3, r2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d0ab      	beq.n	80012f0 <HAL_RCC_OscConfig+0x1d0>
 8001398:	e05d      	b.n	8001456 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139a:	f7ff fc31 	bl	8000c00 <HAL_GetTick>
 800139e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a2:	e00a      	b.n	80013ba <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a4:	f7ff fc2c 	bl	8000c00 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b64      	cmp	r3, #100	@ 0x64
 80013b2:	d902      	bls.n	80013ba <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	f000 bee9 	b.w	800218c <HAL_RCC_OscConfig+0x106c>
 80013ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80013be:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80013c6:	fa93 f3a3 	rbit	r3, r3
 80013ca:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80013ce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013d2:	fab3 f383 	clz	r3, r3
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	095b      	lsrs	r3, r3, #5
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d102      	bne.n	80013ec <HAL_RCC_OscConfig+0x2cc>
 80013e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001450 <HAL_RCC_OscConfig+0x330>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	e015      	b.n	8001418 <HAL_RCC_OscConfig+0x2f8>
 80013ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80013f0:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80013f8:	fa93 f3a3 	rbit	r3, r3
 80013fc:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001400:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001404:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001408:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800140c:	fa93 f3a3 	rbit	r3, r3
 8001410:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001414:	4b0e      	ldr	r3, [pc, #56]	@ (8001450 <HAL_RCC_OscConfig+0x330>)
 8001416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001418:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800141c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001420:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001424:	fa92 f2a2 	rbit	r2, r2
 8001428:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800142c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001430:	fab2 f282 	clz	r2, r2
 8001434:	b2d2      	uxtb	r2, r2
 8001436:	f042 0220 	orr.w	r2, r2, #32
 800143a:	b2d2      	uxtb	r2, r2
 800143c:	f002 021f 	and.w	r2, r2, #31
 8001440:	2101      	movs	r1, #1
 8001442:	fa01 f202 	lsl.w	r2, r1, r2
 8001446:	4013      	ands	r3, r2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d1ab      	bne.n	80013a4 <HAL_RCC_OscConfig+0x284>
 800144c:	e003      	b.n	8001456 <HAL_RCC_OscConfig+0x336>
 800144e:	bf00      	nop
 8001450:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001456:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800145a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	f000 817d 	beq.w	8001766 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800146c:	4ba6      	ldr	r3, [pc, #664]	@ (8001708 <HAL_RCC_OscConfig+0x5e8>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 030c 	and.w	r3, r3, #12
 8001474:	2b00      	cmp	r3, #0
 8001476:	d00b      	beq.n	8001490 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001478:	4ba3      	ldr	r3, [pc, #652]	@ (8001708 <HAL_RCC_OscConfig+0x5e8>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 030c 	and.w	r3, r3, #12
 8001480:	2b08      	cmp	r3, #8
 8001482:	d172      	bne.n	800156a <HAL_RCC_OscConfig+0x44a>
 8001484:	4ba0      	ldr	r3, [pc, #640]	@ (8001708 <HAL_RCC_OscConfig+0x5e8>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d16c      	bne.n	800156a <HAL_RCC_OscConfig+0x44a>
 8001490:	2302      	movs	r3, #2
 8001492:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001496:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800149a:	fa93 f3a3 	rbit	r3, r3
 800149e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80014a2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014a6:	fab3 f383 	clz	r3, r3
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	095b      	lsrs	r3, r3, #5
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d102      	bne.n	80014c0 <HAL_RCC_OscConfig+0x3a0>
 80014ba:	4b93      	ldr	r3, [pc, #588]	@ (8001708 <HAL_RCC_OscConfig+0x5e8>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	e013      	b.n	80014e8 <HAL_RCC_OscConfig+0x3c8>
 80014c0:	2302      	movs	r3, #2
 80014c2:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c6:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80014ca:	fa93 f3a3 	rbit	r3, r3
 80014ce:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80014d2:	2302      	movs	r3, #2
 80014d4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80014d8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80014dc:	fa93 f3a3 	rbit	r3, r3
 80014e0:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80014e4:	4b88      	ldr	r3, [pc, #544]	@ (8001708 <HAL_RCC_OscConfig+0x5e8>)
 80014e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e8:	2202      	movs	r2, #2
 80014ea:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80014ee:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80014f2:	fa92 f2a2 	rbit	r2, r2
 80014f6:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80014fa:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80014fe:	fab2 f282 	clz	r2, r2
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	f042 0220 	orr.w	r2, r2, #32
 8001508:	b2d2      	uxtb	r2, r2
 800150a:	f002 021f 	and.w	r2, r2, #31
 800150e:	2101      	movs	r1, #1
 8001510:	fa01 f202 	lsl.w	r2, r1, r2
 8001514:	4013      	ands	r3, r2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d00a      	beq.n	8001530 <HAL_RCC_OscConfig+0x410>
 800151a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800151e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	691b      	ldr	r3, [r3, #16]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d002      	beq.n	8001530 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	f000 be2e 	b.w	800218c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001530:	4b75      	ldr	r3, [pc, #468]	@ (8001708 <HAL_RCC_OscConfig+0x5e8>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001538:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800153c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	695b      	ldr	r3, [r3, #20]
 8001544:	21f8      	movs	r1, #248	@ 0xf8
 8001546:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154a:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800154e:	fa91 f1a1 	rbit	r1, r1
 8001552:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001556:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800155a:	fab1 f181 	clz	r1, r1
 800155e:	b2c9      	uxtb	r1, r1
 8001560:	408b      	lsls	r3, r1
 8001562:	4969      	ldr	r1, [pc, #420]	@ (8001708 <HAL_RCC_OscConfig+0x5e8>)
 8001564:	4313      	orrs	r3, r2
 8001566:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001568:	e0fd      	b.n	8001766 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800156a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800156e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	2b00      	cmp	r3, #0
 8001578:	f000 8088 	beq.w	800168c <HAL_RCC_OscConfig+0x56c>
 800157c:	2301      	movs	r3, #1
 800157e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001582:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001586:	fa93 f3a3 	rbit	r3, r3
 800158a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800158e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001592:	fab3 f383 	clz	r3, r3
 8001596:	b2db      	uxtb	r3, r3
 8001598:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800159c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	461a      	mov	r2, r3
 80015a4:	2301      	movs	r3, #1
 80015a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a8:	f7ff fb2a 	bl	8000c00 <HAL_GetTick>
 80015ac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b0:	e00a      	b.n	80015c8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015b2:	f7ff fb25 	bl	8000c00 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d902      	bls.n	80015c8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	f000 bde2 	b.w	800218c <HAL_RCC_OscConfig+0x106c>
 80015c8:	2302      	movs	r3, #2
 80015ca:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ce:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80015d2:	fa93 f3a3 	rbit	r3, r3
 80015d6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80015da:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015de:	fab3 f383 	clz	r3, r3
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	095b      	lsrs	r3, r3, #5
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d102      	bne.n	80015f8 <HAL_RCC_OscConfig+0x4d8>
 80015f2:	4b45      	ldr	r3, [pc, #276]	@ (8001708 <HAL_RCC_OscConfig+0x5e8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	e013      	b.n	8001620 <HAL_RCC_OscConfig+0x500>
 80015f8:	2302      	movs	r3, #2
 80015fa:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fe:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001602:	fa93 f3a3 	rbit	r3, r3
 8001606:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800160a:	2302      	movs	r3, #2
 800160c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001610:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001614:	fa93 f3a3 	rbit	r3, r3
 8001618:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800161c:	4b3a      	ldr	r3, [pc, #232]	@ (8001708 <HAL_RCC_OscConfig+0x5e8>)
 800161e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001620:	2202      	movs	r2, #2
 8001622:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001626:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800162a:	fa92 f2a2 	rbit	r2, r2
 800162e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001632:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001636:	fab2 f282 	clz	r2, r2
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	f042 0220 	orr.w	r2, r2, #32
 8001640:	b2d2      	uxtb	r2, r2
 8001642:	f002 021f 	and.w	r2, r2, #31
 8001646:	2101      	movs	r1, #1
 8001648:	fa01 f202 	lsl.w	r2, r1, r2
 800164c:	4013      	ands	r3, r2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d0af      	beq.n	80015b2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001652:	4b2d      	ldr	r3, [pc, #180]	@ (8001708 <HAL_RCC_OscConfig+0x5e8>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800165a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800165e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	21f8      	movs	r1, #248	@ 0xf8
 8001668:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001670:	fa91 f1a1 	rbit	r1, r1
 8001674:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001678:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800167c:	fab1 f181 	clz	r1, r1
 8001680:	b2c9      	uxtb	r1, r1
 8001682:	408b      	lsls	r3, r1
 8001684:	4920      	ldr	r1, [pc, #128]	@ (8001708 <HAL_RCC_OscConfig+0x5e8>)
 8001686:	4313      	orrs	r3, r2
 8001688:	600b      	str	r3, [r1, #0]
 800168a:	e06c      	b.n	8001766 <HAL_RCC_OscConfig+0x646>
 800168c:	2301      	movs	r3, #1
 800168e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001692:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001696:	fa93 f3a3 	rbit	r3, r3
 800169a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800169e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016a2:	fab3 f383 	clz	r3, r3
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80016ac:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	461a      	mov	r2, r3
 80016b4:	2300      	movs	r3, #0
 80016b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b8:	f7ff faa2 	bl	8000c00 <HAL_GetTick>
 80016bc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016c0:	e00a      	b.n	80016d8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016c2:	f7ff fa9d 	bl	8000c00 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d902      	bls.n	80016d8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	f000 bd5a 	b.w	800218c <HAL_RCC_OscConfig+0x106c>
 80016d8:	2302      	movs	r3, #2
 80016da:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016de:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80016e2:	fa93 f3a3 	rbit	r3, r3
 80016e6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80016ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ee:	fab3 f383 	clz	r3, r3
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	095b      	lsrs	r3, r3, #5
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d104      	bne.n	800170c <HAL_RCC_OscConfig+0x5ec>
 8001702:	4b01      	ldr	r3, [pc, #4]	@ (8001708 <HAL_RCC_OscConfig+0x5e8>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	e015      	b.n	8001734 <HAL_RCC_OscConfig+0x614>
 8001708:	40021000 	.word	0x40021000
 800170c:	2302      	movs	r3, #2
 800170e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001712:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001716:	fa93 f3a3 	rbit	r3, r3
 800171a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800171e:	2302      	movs	r3, #2
 8001720:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001724:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001728:	fa93 f3a3 	rbit	r3, r3
 800172c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001730:	4bc8      	ldr	r3, [pc, #800]	@ (8001a54 <HAL_RCC_OscConfig+0x934>)
 8001732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001734:	2202      	movs	r2, #2
 8001736:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800173a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800173e:	fa92 f2a2 	rbit	r2, r2
 8001742:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001746:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800174a:	fab2 f282 	clz	r2, r2
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	f042 0220 	orr.w	r2, r2, #32
 8001754:	b2d2      	uxtb	r2, r2
 8001756:	f002 021f 	and.w	r2, r2, #31
 800175a:	2101      	movs	r1, #1
 800175c:	fa01 f202 	lsl.w	r2, r1, r2
 8001760:	4013      	ands	r3, r2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1ad      	bne.n	80016c2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001766:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800176a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0308 	and.w	r3, r3, #8
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 8110 	beq.w	800199c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800177c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001780:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d079      	beq.n	8001880 <HAL_RCC_OscConfig+0x760>
 800178c:	2301      	movs	r3, #1
 800178e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001792:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001796:	fa93 f3a3 	rbit	r3, r3
 800179a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800179e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017a2:	fab3 f383 	clz	r3, r3
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	461a      	mov	r2, r3
 80017aa:	4bab      	ldr	r3, [pc, #684]	@ (8001a58 <HAL_RCC_OscConfig+0x938>)
 80017ac:	4413      	add	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	461a      	mov	r2, r3
 80017b2:	2301      	movs	r3, #1
 80017b4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b6:	f7ff fa23 	bl	8000c00 <HAL_GetTick>
 80017ba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017be:	e00a      	b.n	80017d6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017c0:	f7ff fa1e 	bl	8000c00 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d902      	bls.n	80017d6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	f000 bcdb 	b.w	800218c <HAL_RCC_OscConfig+0x106c>
 80017d6:	2302      	movs	r3, #2
 80017d8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80017e0:	fa93 f3a3 	rbit	r3, r3
 80017e4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80017e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017ec:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80017f0:	2202      	movs	r2, #2
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017f8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	fa93 f2a3 	rbit	r2, r3
 8001802:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001806:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001810:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001814:	2202      	movs	r2, #2
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800181c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	fa93 f2a3 	rbit	r2, r3
 8001826:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800182a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800182e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001830:	4b88      	ldr	r3, [pc, #544]	@ (8001a54 <HAL_RCC_OscConfig+0x934>)
 8001832:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001834:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001838:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800183c:	2102      	movs	r1, #2
 800183e:	6019      	str	r1, [r3, #0]
 8001840:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001844:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	fa93 f1a3 	rbit	r1, r3
 800184e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001852:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001856:	6019      	str	r1, [r3, #0]
  return result;
 8001858:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800185c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	fab3 f383 	clz	r3, r3
 8001866:	b2db      	uxtb	r3, r3
 8001868:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800186c:	b2db      	uxtb	r3, r3
 800186e:	f003 031f 	and.w	r3, r3, #31
 8001872:	2101      	movs	r1, #1
 8001874:	fa01 f303 	lsl.w	r3, r1, r3
 8001878:	4013      	ands	r3, r2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0a0      	beq.n	80017c0 <HAL_RCC_OscConfig+0x6a0>
 800187e:	e08d      	b.n	800199c <HAL_RCC_OscConfig+0x87c>
 8001880:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001884:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001888:	2201      	movs	r2, #1
 800188a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001890:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	fa93 f2a3 	rbit	r2, r3
 800189a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800189e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80018a2:	601a      	str	r2, [r3, #0]
  return result;
 80018a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018a8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80018ac:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ae:	fab3 f383 	clz	r3, r3
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	461a      	mov	r2, r3
 80018b6:	4b68      	ldr	r3, [pc, #416]	@ (8001a58 <HAL_RCC_OscConfig+0x938>)
 80018b8:	4413      	add	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	461a      	mov	r2, r3
 80018be:	2300      	movs	r3, #0
 80018c0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c2:	f7ff f99d 	bl	8000c00 <HAL_GetTick>
 80018c6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ca:	e00a      	b.n	80018e2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018cc:	f7ff f998 	bl	8000c00 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d902      	bls.n	80018e2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	f000 bc55 	b.w	800218c <HAL_RCC_OscConfig+0x106c>
 80018e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018e6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80018ea:	2202      	movs	r2, #2
 80018ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018f2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	fa93 f2a3 	rbit	r2, r3
 80018fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001900:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800190a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800190e:	2202      	movs	r2, #2
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001916:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	fa93 f2a3 	rbit	r2, r3
 8001920:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001924:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800192e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001932:	2202      	movs	r2, #2
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800193a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	fa93 f2a3 	rbit	r2, r3
 8001944:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001948:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800194c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800194e:	4b41      	ldr	r3, [pc, #260]	@ (8001a54 <HAL_RCC_OscConfig+0x934>)
 8001950:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001952:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001956:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800195a:	2102      	movs	r1, #2
 800195c:	6019      	str	r1, [r3, #0]
 800195e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001962:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	fa93 f1a3 	rbit	r1, r3
 800196c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001970:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001974:	6019      	str	r1, [r3, #0]
  return result;
 8001976:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800197a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	fab3 f383 	clz	r3, r3
 8001984:	b2db      	uxtb	r3, r3
 8001986:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800198a:	b2db      	uxtb	r3, r3
 800198c:	f003 031f 	and.w	r3, r3, #31
 8001990:	2101      	movs	r1, #1
 8001992:	fa01 f303 	lsl.w	r3, r1, r3
 8001996:	4013      	ands	r3, r2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d197      	bne.n	80018cc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800199c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f000 81a1 	beq.w	8001cf4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019b2:	2300      	movs	r3, #0
 80019b4:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019b8:	4b26      	ldr	r3, [pc, #152]	@ (8001a54 <HAL_RCC_OscConfig+0x934>)
 80019ba:	69db      	ldr	r3, [r3, #28]
 80019bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d116      	bne.n	80019f2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019c4:	4b23      	ldr	r3, [pc, #140]	@ (8001a54 <HAL_RCC_OscConfig+0x934>)
 80019c6:	69db      	ldr	r3, [r3, #28]
 80019c8:	4a22      	ldr	r2, [pc, #136]	@ (8001a54 <HAL_RCC_OscConfig+0x934>)
 80019ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019ce:	61d3      	str	r3, [r2, #28]
 80019d0:	4b20      	ldr	r3, [pc, #128]	@ (8001a54 <HAL_RCC_OscConfig+0x934>)
 80019d2:	69db      	ldr	r3, [r3, #28]
 80019d4:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80019d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019dc:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019e6:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80019ea:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80019ec:	2301      	movs	r3, #1
 80019ee:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a5c <HAL_RCC_OscConfig+0x93c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d11a      	bne.n	8001a34 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019fe:	4b17      	ldr	r3, [pc, #92]	@ (8001a5c <HAL_RCC_OscConfig+0x93c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a16      	ldr	r2, [pc, #88]	@ (8001a5c <HAL_RCC_OscConfig+0x93c>)
 8001a04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a08:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a0a:	f7ff f8f9 	bl	8000c00 <HAL_GetTick>
 8001a0e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a12:	e009      	b.n	8001a28 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a14:	f7ff f8f4 	bl	8000c00 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b64      	cmp	r3, #100	@ 0x64
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e3b1      	b.n	800218c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a28:	4b0c      	ldr	r3, [pc, #48]	@ (8001a5c <HAL_RCC_OscConfig+0x93c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0ef      	beq.n	8001a14 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a38:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d10d      	bne.n	8001a60 <HAL_RCC_OscConfig+0x940>
 8001a44:	4b03      	ldr	r3, [pc, #12]	@ (8001a54 <HAL_RCC_OscConfig+0x934>)
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	4a02      	ldr	r2, [pc, #8]	@ (8001a54 <HAL_RCC_OscConfig+0x934>)
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	6213      	str	r3, [r2, #32]
 8001a50:	e03c      	b.n	8001acc <HAL_RCC_OscConfig+0x9ac>
 8001a52:	bf00      	nop
 8001a54:	40021000 	.word	0x40021000
 8001a58:	10908120 	.word	0x10908120
 8001a5c:	40007000 	.word	0x40007000
 8001a60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a64:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d10c      	bne.n	8001a8a <HAL_RCC_OscConfig+0x96a>
 8001a70:	4bc1      	ldr	r3, [pc, #772]	@ (8001d78 <HAL_RCC_OscConfig+0xc58>)
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	4ac0      	ldr	r2, [pc, #768]	@ (8001d78 <HAL_RCC_OscConfig+0xc58>)
 8001a76:	f023 0301 	bic.w	r3, r3, #1
 8001a7a:	6213      	str	r3, [r2, #32]
 8001a7c:	4bbe      	ldr	r3, [pc, #760]	@ (8001d78 <HAL_RCC_OscConfig+0xc58>)
 8001a7e:	6a1b      	ldr	r3, [r3, #32]
 8001a80:	4abd      	ldr	r2, [pc, #756]	@ (8001d78 <HAL_RCC_OscConfig+0xc58>)
 8001a82:	f023 0304 	bic.w	r3, r3, #4
 8001a86:	6213      	str	r3, [r2, #32]
 8001a88:	e020      	b.n	8001acc <HAL_RCC_OscConfig+0x9ac>
 8001a8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a8e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	2b05      	cmp	r3, #5
 8001a98:	d10c      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x994>
 8001a9a:	4bb7      	ldr	r3, [pc, #732]	@ (8001d78 <HAL_RCC_OscConfig+0xc58>)
 8001a9c:	6a1b      	ldr	r3, [r3, #32]
 8001a9e:	4ab6      	ldr	r2, [pc, #728]	@ (8001d78 <HAL_RCC_OscConfig+0xc58>)
 8001aa0:	f043 0304 	orr.w	r3, r3, #4
 8001aa4:	6213      	str	r3, [r2, #32]
 8001aa6:	4bb4      	ldr	r3, [pc, #720]	@ (8001d78 <HAL_RCC_OscConfig+0xc58>)
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	4ab3      	ldr	r2, [pc, #716]	@ (8001d78 <HAL_RCC_OscConfig+0xc58>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6213      	str	r3, [r2, #32]
 8001ab2:	e00b      	b.n	8001acc <HAL_RCC_OscConfig+0x9ac>
 8001ab4:	4bb0      	ldr	r3, [pc, #704]	@ (8001d78 <HAL_RCC_OscConfig+0xc58>)
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	4aaf      	ldr	r2, [pc, #700]	@ (8001d78 <HAL_RCC_OscConfig+0xc58>)
 8001aba:	f023 0301 	bic.w	r3, r3, #1
 8001abe:	6213      	str	r3, [r2, #32]
 8001ac0:	4bad      	ldr	r3, [pc, #692]	@ (8001d78 <HAL_RCC_OscConfig+0xc58>)
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	4aac      	ldr	r2, [pc, #688]	@ (8001d78 <HAL_RCC_OscConfig+0xc58>)
 8001ac6:	f023 0304 	bic.w	r3, r3, #4
 8001aca:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001acc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ad0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 8081 	beq.w	8001be0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ade:	f7ff f88f 	bl	8000c00 <HAL_GetTick>
 8001ae2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae6:	e00b      	b.n	8001b00 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ae8:	f7ff f88a 	bl	8000c00 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e345      	b.n	800218c <HAL_RCC_OscConfig+0x106c>
 8001b00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b04:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001b08:	2202      	movs	r2, #2
 8001b0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b10:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	fa93 f2a3 	rbit	r2, r3
 8001b1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b1e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b28:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b34:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	fa93 f2a3 	rbit	r2, r3
 8001b3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b42:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001b46:	601a      	str	r2, [r3, #0]
  return result;
 8001b48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b4c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001b50:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b52:	fab3 f383 	clz	r3, r3
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	095b      	lsrs	r3, r3, #5
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	f043 0302 	orr.w	r3, r3, #2
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d102      	bne.n	8001b6c <HAL_RCC_OscConfig+0xa4c>
 8001b66:	4b84      	ldr	r3, [pc, #528]	@ (8001d78 <HAL_RCC_OscConfig+0xc58>)
 8001b68:	6a1b      	ldr	r3, [r3, #32]
 8001b6a:	e013      	b.n	8001b94 <HAL_RCC_OscConfig+0xa74>
 8001b6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b70:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001b74:	2202      	movs	r2, #2
 8001b76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b7c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	fa93 f2a3 	rbit	r2, r3
 8001b86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b8a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	4b79      	ldr	r3, [pc, #484]	@ (8001d78 <HAL_RCC_OscConfig+0xc58>)
 8001b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b94:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b98:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001b9c:	2102      	movs	r1, #2
 8001b9e:	6011      	str	r1, [r2, #0]
 8001ba0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ba4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001ba8:	6812      	ldr	r2, [r2, #0]
 8001baa:	fa92 f1a2 	rbit	r1, r2
 8001bae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001bb2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001bb6:	6011      	str	r1, [r2, #0]
  return result;
 8001bb8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001bbc:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001bc0:	6812      	ldr	r2, [r2, #0]
 8001bc2:	fab2 f282 	clz	r2, r2
 8001bc6:	b2d2      	uxtb	r2, r2
 8001bc8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	f002 021f 	and.w	r2, r2, #31
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd8:	4013      	ands	r3, r2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d084      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x9c8>
 8001bde:	e07f      	b.n	8001ce0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be0:	f7ff f80e 	bl	8000c00 <HAL_GetTick>
 8001be4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001be8:	e00b      	b.n	8001c02 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bea:	f7ff f809 	bl	8000c00 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e2c4      	b.n	800218c <HAL_RCC_OscConfig+0x106c>
 8001c02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c06:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c12:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	fa93 f2a3 	rbit	r2, r3
 8001c1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c20:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c2a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001c2e:	2202      	movs	r2, #2
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c36:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	fa93 f2a3 	rbit	r2, r3
 8001c40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c44:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001c48:	601a      	str	r2, [r3, #0]
  return result;
 8001c4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c4e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001c52:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c54:	fab3 f383 	clz	r3, r3
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	095b      	lsrs	r3, r3, #5
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	f043 0302 	orr.w	r3, r3, #2
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d102      	bne.n	8001c6e <HAL_RCC_OscConfig+0xb4e>
 8001c68:	4b43      	ldr	r3, [pc, #268]	@ (8001d78 <HAL_RCC_OscConfig+0xc58>)
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	e013      	b.n	8001c96 <HAL_RCC_OscConfig+0xb76>
 8001c6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c72:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001c76:	2202      	movs	r2, #2
 8001c78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c7e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	fa93 f2a3 	rbit	r2, r3
 8001c88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c8c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	4b39      	ldr	r3, [pc, #228]	@ (8001d78 <HAL_RCC_OscConfig+0xc58>)
 8001c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c96:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c9a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001c9e:	2102      	movs	r1, #2
 8001ca0:	6011      	str	r1, [r2, #0]
 8001ca2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ca6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001caa:	6812      	ldr	r2, [r2, #0]
 8001cac:	fa92 f1a2 	rbit	r1, r2
 8001cb0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001cb4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001cb8:	6011      	str	r1, [r2, #0]
  return result;
 8001cba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001cbe:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001cc2:	6812      	ldr	r2, [r2, #0]
 8001cc4:	fab2 f282 	clz	r2, r2
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	f002 021f 	and.w	r2, r2, #31
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cda:	4013      	ands	r3, r2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d184      	bne.n	8001bea <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ce0:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d105      	bne.n	8001cf4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ce8:	4b23      	ldr	r3, [pc, #140]	@ (8001d78 <HAL_RCC_OscConfig+0xc58>)
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	4a22      	ldr	r2, [pc, #136]	@ (8001d78 <HAL_RCC_OscConfig+0xc58>)
 8001cee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cf2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cf8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f000 8242 	beq.w	800218a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d06:	4b1c      	ldr	r3, [pc, #112]	@ (8001d78 <HAL_RCC_OscConfig+0xc58>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 030c 	and.w	r3, r3, #12
 8001d0e:	2b08      	cmp	r3, #8
 8001d10:	f000 8213 	beq.w	800213a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d18:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	69db      	ldr	r3, [r3, #28]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	f040 8162 	bne.w	8001fea <HAL_RCC_OscConfig+0xeca>
 8001d26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d2a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001d2e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001d32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d38:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	fa93 f2a3 	rbit	r2, r3
 8001d42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d46:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001d4a:	601a      	str	r2, [r3, #0]
  return result;
 8001d4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d50:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001d54:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d56:	fab3 f383 	clz	r3, r3
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001d60:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	461a      	mov	r2, r3
 8001d68:	2300      	movs	r3, #0
 8001d6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6c:	f7fe ff48 	bl	8000c00 <HAL_GetTick>
 8001d70:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d74:	e00c      	b.n	8001d90 <HAL_RCC_OscConfig+0xc70>
 8001d76:	bf00      	nop
 8001d78:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d7c:	f7fe ff40 	bl	8000c00 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e1fd      	b.n	800218c <HAL_RCC_OscConfig+0x106c>
 8001d90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d94:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001d98:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001da2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	fa93 f2a3 	rbit	r2, r3
 8001dac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001db0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001db4:	601a      	str	r2, [r3, #0]
  return result;
 8001db6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dba:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001dbe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc0:	fab3 f383 	clz	r3, r3
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	095b      	lsrs	r3, r3, #5
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	f043 0301 	orr.w	r3, r3, #1
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d102      	bne.n	8001dda <HAL_RCC_OscConfig+0xcba>
 8001dd4:	4bb0      	ldr	r3, [pc, #704]	@ (8002098 <HAL_RCC_OscConfig+0xf78>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	e027      	b.n	8001e2a <HAL_RCC_OscConfig+0xd0a>
 8001dda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dde:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001de2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001de6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dec:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	fa93 f2a3 	rbit	r2, r3
 8001df6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dfa:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e04:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001e08:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e12:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	fa93 f2a3 	rbit	r2, r3
 8001e1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e20:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	4b9c      	ldr	r3, [pc, #624]	@ (8002098 <HAL_RCC_OscConfig+0xf78>)
 8001e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e2a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e2e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001e32:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001e36:	6011      	str	r1, [r2, #0]
 8001e38:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e3c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001e40:	6812      	ldr	r2, [r2, #0]
 8001e42:	fa92 f1a2 	rbit	r1, r2
 8001e46:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e4a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001e4e:	6011      	str	r1, [r2, #0]
  return result;
 8001e50:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e54:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001e58:	6812      	ldr	r2, [r2, #0]
 8001e5a:	fab2 f282 	clz	r2, r2
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	f042 0220 	orr.w	r2, r2, #32
 8001e64:	b2d2      	uxtb	r2, r2
 8001e66:	f002 021f 	and.w	r2, r2, #31
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e70:	4013      	ands	r3, r2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d182      	bne.n	8001d7c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e76:	4b88      	ldr	r3, [pc, #544]	@ (8002098 <HAL_RCC_OscConfig+0xf78>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001e7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001e8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e8e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6a1b      	ldr	r3, [r3, #32]
 8001e96:	430b      	orrs	r3, r1
 8001e98:	497f      	ldr	r1, [pc, #508]	@ (8002098 <HAL_RCC_OscConfig+0xf78>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	604b      	str	r3, [r1, #4]
 8001e9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ea2:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001ea6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001eaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eb0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	fa93 f2a3 	rbit	r2, r3
 8001eba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ebe:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001ec2:	601a      	str	r2, [r3, #0]
  return result;
 8001ec4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ec8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001ecc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ece:	fab3 f383 	clz	r3, r3
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ed8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	461a      	mov	r2, r3
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee4:	f7fe fe8c 	bl	8000c00 <HAL_GetTick>
 8001ee8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eec:	e009      	b.n	8001f02 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eee:	f7fe fe87 	bl	8000c00 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e144      	b.n	800218c <HAL_RCC_OscConfig+0x106c>
 8001f02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f06:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001f0a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f14:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	fa93 f2a3 	rbit	r2, r3
 8001f1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f22:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001f26:	601a      	str	r2, [r3, #0]
  return result;
 8001f28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f2c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001f30:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f32:	fab3 f383 	clz	r3, r3
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	095b      	lsrs	r3, r3, #5
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d102      	bne.n	8001f4c <HAL_RCC_OscConfig+0xe2c>
 8001f46:	4b54      	ldr	r3, [pc, #336]	@ (8002098 <HAL_RCC_OscConfig+0xf78>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	e027      	b.n	8001f9c <HAL_RCC_OscConfig+0xe7c>
 8001f4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f50:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001f54:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f5e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	fa93 f2a3 	rbit	r2, r3
 8001f68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f6c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f76:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001f7a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f84:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	fa93 f2a3 	rbit	r2, r3
 8001f8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f92:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	4b3f      	ldr	r3, [pc, #252]	@ (8002098 <HAL_RCC_OscConfig+0xf78>)
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001fa0:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001fa4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001fa8:	6011      	str	r1, [r2, #0]
 8001faa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001fae:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001fb2:	6812      	ldr	r2, [r2, #0]
 8001fb4:	fa92 f1a2 	rbit	r1, r2
 8001fb8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001fbc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001fc0:	6011      	str	r1, [r2, #0]
  return result;
 8001fc2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001fc6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001fca:	6812      	ldr	r2, [r2, #0]
 8001fcc:	fab2 f282 	clz	r2, r2
 8001fd0:	b2d2      	uxtb	r2, r2
 8001fd2:	f042 0220 	orr.w	r2, r2, #32
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	f002 021f 	and.w	r2, r2, #31
 8001fdc:	2101      	movs	r1, #1
 8001fde:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d082      	beq.n	8001eee <HAL_RCC_OscConfig+0xdce>
 8001fe8:	e0cf      	b.n	800218a <HAL_RCC_OscConfig+0x106a>
 8001fea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fee:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001ff2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001ff6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ffc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	fa93 f2a3 	rbit	r2, r3
 8002006:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800200a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800200e:	601a      	str	r2, [r3, #0]
  return result;
 8002010:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002014:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002018:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800201a:	fab3 f383 	clz	r3, r3
 800201e:	b2db      	uxtb	r3, r3
 8002020:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002024:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	461a      	mov	r2, r3
 800202c:	2300      	movs	r3, #0
 800202e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002030:	f7fe fde6 	bl	8000c00 <HAL_GetTick>
 8002034:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002038:	e009      	b.n	800204e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800203a:	f7fe fde1 	bl	8000c00 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e09e      	b.n	800218c <HAL_RCC_OscConfig+0x106c>
 800204e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002052:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002056:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800205a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002060:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	fa93 f2a3 	rbit	r2, r3
 800206a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800206e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002072:	601a      	str	r2, [r3, #0]
  return result;
 8002074:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002078:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800207c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800207e:	fab3 f383 	clz	r3, r3
 8002082:	b2db      	uxtb	r3, r3
 8002084:	095b      	lsrs	r3, r3, #5
 8002086:	b2db      	uxtb	r3, r3
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b01      	cmp	r3, #1
 8002090:	d104      	bne.n	800209c <HAL_RCC_OscConfig+0xf7c>
 8002092:	4b01      	ldr	r3, [pc, #4]	@ (8002098 <HAL_RCC_OscConfig+0xf78>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	e029      	b.n	80020ec <HAL_RCC_OscConfig+0xfcc>
 8002098:	40021000 	.word	0x40021000
 800209c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020a0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80020a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ae:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	fa93 f2a3 	rbit	r2, r3
 80020b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020bc:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80020ca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020d4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	fa93 f2a3 	rbit	r2, r3
 80020de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020e2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002198 <HAL_RCC_OscConfig+0x1078>)
 80020ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80020f0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80020f4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80020f8:	6011      	str	r1, [r2, #0]
 80020fa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80020fe:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002102:	6812      	ldr	r2, [r2, #0]
 8002104:	fa92 f1a2 	rbit	r1, r2
 8002108:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800210c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002110:	6011      	str	r1, [r2, #0]
  return result;
 8002112:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002116:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800211a:	6812      	ldr	r2, [r2, #0]
 800211c:	fab2 f282 	clz	r2, r2
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	f042 0220 	orr.w	r2, r2, #32
 8002126:	b2d2      	uxtb	r2, r2
 8002128:	f002 021f 	and.w	r2, r2, #31
 800212c:	2101      	movs	r1, #1
 800212e:	fa01 f202 	lsl.w	r2, r1, r2
 8002132:	4013      	ands	r3, r2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d180      	bne.n	800203a <HAL_RCC_OscConfig+0xf1a>
 8002138:	e027      	b.n	800218a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800213a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800213e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d101      	bne.n	800214e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e01e      	b.n	800218c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800214e:	4b12      	ldr	r3, [pc, #72]	@ (8002198 <HAL_RCC_OscConfig+0x1078>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002156:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800215a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800215e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002162:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	429a      	cmp	r2, r3
 800216c:	d10b      	bne.n	8002186 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800216e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002172:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002176:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800217a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002182:	429a      	cmp	r2, r3
 8002184:	d001      	beq.n	800218a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e000      	b.n	800218c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40021000 	.word	0x40021000

0800219c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b09e      	sub	sp, #120	@ 0x78
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e162      	b.n	800247a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021b4:	4b90      	ldr	r3, [pc, #576]	@ (80023f8 <HAL_RCC_ClockConfig+0x25c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d910      	bls.n	80021e4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c2:	4b8d      	ldr	r3, [pc, #564]	@ (80023f8 <HAL_RCC_ClockConfig+0x25c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f023 0207 	bic.w	r2, r3, #7
 80021ca:	498b      	ldr	r1, [pc, #556]	@ (80023f8 <HAL_RCC_ClockConfig+0x25c>)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d2:	4b89      	ldr	r3, [pc, #548]	@ (80023f8 <HAL_RCC_ClockConfig+0x25c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d001      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e14a      	b.n	800247a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d008      	beq.n	8002202 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021f0:	4b82      	ldr	r3, [pc, #520]	@ (80023fc <HAL_RCC_ClockConfig+0x260>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	497f      	ldr	r1, [pc, #508]	@ (80023fc <HAL_RCC_ClockConfig+0x260>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 80dc 	beq.w	80023c8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d13c      	bne.n	8002292 <HAL_RCC_ClockConfig+0xf6>
 8002218:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800221c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002220:	fa93 f3a3 	rbit	r3, r3
 8002224:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002226:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002228:	fab3 f383 	clz	r3, r3
 800222c:	b2db      	uxtb	r3, r3
 800222e:	095b      	lsrs	r3, r3, #5
 8002230:	b2db      	uxtb	r3, r3
 8002232:	f043 0301 	orr.w	r3, r3, #1
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b01      	cmp	r3, #1
 800223a:	d102      	bne.n	8002242 <HAL_RCC_ClockConfig+0xa6>
 800223c:	4b6f      	ldr	r3, [pc, #444]	@ (80023fc <HAL_RCC_ClockConfig+0x260>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	e00f      	b.n	8002262 <HAL_RCC_ClockConfig+0xc6>
 8002242:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002246:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002248:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800224a:	fa93 f3a3 	rbit	r3, r3
 800224e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002250:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002254:	663b      	str	r3, [r7, #96]	@ 0x60
 8002256:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002258:	fa93 f3a3 	rbit	r3, r3
 800225c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800225e:	4b67      	ldr	r3, [pc, #412]	@ (80023fc <HAL_RCC_ClockConfig+0x260>)
 8002260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002262:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002266:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002268:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800226a:	fa92 f2a2 	rbit	r2, r2
 800226e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002270:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002272:	fab2 f282 	clz	r2, r2
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	f042 0220 	orr.w	r2, r2, #32
 800227c:	b2d2      	uxtb	r2, r2
 800227e:	f002 021f 	and.w	r2, r2, #31
 8002282:	2101      	movs	r1, #1
 8002284:	fa01 f202 	lsl.w	r2, r1, r2
 8002288:	4013      	ands	r3, r2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d17b      	bne.n	8002386 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e0f3      	b.n	800247a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2b02      	cmp	r3, #2
 8002298:	d13c      	bne.n	8002314 <HAL_RCC_ClockConfig+0x178>
 800229a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800229e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022a2:	fa93 f3a3 	rbit	r3, r3
 80022a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80022a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022aa:	fab3 f383 	clz	r3, r3
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	095b      	lsrs	r3, r3, #5
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d102      	bne.n	80022c4 <HAL_RCC_ClockConfig+0x128>
 80022be:	4b4f      	ldr	r3, [pc, #316]	@ (80023fc <HAL_RCC_ClockConfig+0x260>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	e00f      	b.n	80022e4 <HAL_RCC_ClockConfig+0x148>
 80022c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022cc:	fa93 f3a3 	rbit	r3, r3
 80022d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80022d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80022d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022da:	fa93 f3a3 	rbit	r3, r3
 80022de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022e0:	4b46      	ldr	r3, [pc, #280]	@ (80023fc <HAL_RCC_ClockConfig+0x260>)
 80022e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022e8:	63ba      	str	r2, [r7, #56]	@ 0x38
 80022ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80022ec:	fa92 f2a2 	rbit	r2, r2
 80022f0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80022f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80022f4:	fab2 f282 	clz	r2, r2
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	f042 0220 	orr.w	r2, r2, #32
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	f002 021f 	and.w	r2, r2, #31
 8002304:	2101      	movs	r1, #1
 8002306:	fa01 f202 	lsl.w	r2, r1, r2
 800230a:	4013      	ands	r3, r2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d13a      	bne.n	8002386 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0b2      	b.n	800247a <HAL_RCC_ClockConfig+0x2de>
 8002314:	2302      	movs	r3, #2
 8002316:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800231a:	fa93 f3a3 	rbit	r3, r3
 800231e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002322:	fab3 f383 	clz	r3, r3
 8002326:	b2db      	uxtb	r3, r3
 8002328:	095b      	lsrs	r3, r3, #5
 800232a:	b2db      	uxtb	r3, r3
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b01      	cmp	r3, #1
 8002334:	d102      	bne.n	800233c <HAL_RCC_ClockConfig+0x1a0>
 8002336:	4b31      	ldr	r3, [pc, #196]	@ (80023fc <HAL_RCC_ClockConfig+0x260>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	e00d      	b.n	8002358 <HAL_RCC_ClockConfig+0x1bc>
 800233c:	2302      	movs	r3, #2
 800233e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002342:	fa93 f3a3 	rbit	r3, r3
 8002346:	627b      	str	r3, [r7, #36]	@ 0x24
 8002348:	2302      	movs	r3, #2
 800234a:	623b      	str	r3, [r7, #32]
 800234c:	6a3b      	ldr	r3, [r7, #32]
 800234e:	fa93 f3a3 	rbit	r3, r3
 8002352:	61fb      	str	r3, [r7, #28]
 8002354:	4b29      	ldr	r3, [pc, #164]	@ (80023fc <HAL_RCC_ClockConfig+0x260>)
 8002356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002358:	2202      	movs	r2, #2
 800235a:	61ba      	str	r2, [r7, #24]
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	fa92 f2a2 	rbit	r2, r2
 8002362:	617a      	str	r2, [r7, #20]
  return result;
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	fab2 f282 	clz	r2, r2
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	f042 0220 	orr.w	r2, r2, #32
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	f002 021f 	and.w	r2, r2, #31
 8002376:	2101      	movs	r1, #1
 8002378:	fa01 f202 	lsl.w	r2, r1, r2
 800237c:	4013      	ands	r3, r2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e079      	b.n	800247a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002386:	4b1d      	ldr	r3, [pc, #116]	@ (80023fc <HAL_RCC_ClockConfig+0x260>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f023 0203 	bic.w	r2, r3, #3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	491a      	ldr	r1, [pc, #104]	@ (80023fc <HAL_RCC_ClockConfig+0x260>)
 8002394:	4313      	orrs	r3, r2
 8002396:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002398:	f7fe fc32 	bl	8000c00 <HAL_GetTick>
 800239c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239e:	e00a      	b.n	80023b6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a0:	f7fe fc2e 	bl	8000c00 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e061      	b.n	800247a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b6:	4b11      	ldr	r3, [pc, #68]	@ (80023fc <HAL_RCC_ClockConfig+0x260>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f003 020c 	and.w	r2, r3, #12
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d1eb      	bne.n	80023a0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023c8:	4b0b      	ldr	r3, [pc, #44]	@ (80023f8 <HAL_RCC_ClockConfig+0x25c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d214      	bcs.n	8002400 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d6:	4b08      	ldr	r3, [pc, #32]	@ (80023f8 <HAL_RCC_ClockConfig+0x25c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f023 0207 	bic.w	r2, r3, #7
 80023de:	4906      	ldr	r1, [pc, #24]	@ (80023f8 <HAL_RCC_ClockConfig+0x25c>)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e6:	4b04      	ldr	r3, [pc, #16]	@ (80023f8 <HAL_RCC_ClockConfig+0x25c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d005      	beq.n	8002400 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e040      	b.n	800247a <HAL_RCC_ClockConfig+0x2de>
 80023f8:	40022000 	.word	0x40022000
 80023fc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0304 	and.w	r3, r3, #4
 8002408:	2b00      	cmp	r3, #0
 800240a:	d008      	beq.n	800241e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800240c:	4b1d      	ldr	r3, [pc, #116]	@ (8002484 <HAL_RCC_ClockConfig+0x2e8>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	491a      	ldr	r1, [pc, #104]	@ (8002484 <HAL_RCC_ClockConfig+0x2e8>)
 800241a:	4313      	orrs	r3, r2
 800241c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	2b00      	cmp	r3, #0
 8002428:	d009      	beq.n	800243e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800242a:	4b16      	ldr	r3, [pc, #88]	@ (8002484 <HAL_RCC_ClockConfig+0x2e8>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	4912      	ldr	r1, [pc, #72]	@ (8002484 <HAL_RCC_ClockConfig+0x2e8>)
 800243a:	4313      	orrs	r3, r2
 800243c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800243e:	f000 f829 	bl	8002494 <HAL_RCC_GetSysClockFreq>
 8002442:	4601      	mov	r1, r0
 8002444:	4b0f      	ldr	r3, [pc, #60]	@ (8002484 <HAL_RCC_ClockConfig+0x2e8>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800244c:	22f0      	movs	r2, #240	@ 0xf0
 800244e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	fa92 f2a2 	rbit	r2, r2
 8002456:	60fa      	str	r2, [r7, #12]
  return result;
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	fab2 f282 	clz	r2, r2
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	40d3      	lsrs	r3, r2
 8002462:	4a09      	ldr	r2, [pc, #36]	@ (8002488 <HAL_RCC_ClockConfig+0x2ec>)
 8002464:	5cd3      	ldrb	r3, [r2, r3]
 8002466:	fa21 f303 	lsr.w	r3, r1, r3
 800246a:	4a08      	ldr	r2, [pc, #32]	@ (800248c <HAL_RCC_ClockConfig+0x2f0>)
 800246c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800246e:	4b08      	ldr	r3, [pc, #32]	@ (8002490 <HAL_RCC_ClockConfig+0x2f4>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f7fe fb80 	bl	8000b78 <HAL_InitTick>
  
  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3778      	adds	r7, #120	@ 0x78
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40021000 	.word	0x40021000
 8002488:	08004960 	.word	0x08004960
 800248c:	20000000 	.word	0x20000000
 8002490:	20000004 	.word	0x20000004

08002494 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002494:	b480      	push	{r7}
 8002496:	b087      	sub	sp, #28
 8002498:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	2300      	movs	r3, #0
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	2300      	movs	r3, #0
 80024a4:	617b      	str	r3, [r7, #20]
 80024a6:	2300      	movs	r3, #0
 80024a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80024ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002528 <HAL_RCC_GetSysClockFreq+0x94>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f003 030c 	and.w	r3, r3, #12
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	d002      	beq.n	80024c4 <HAL_RCC_GetSysClockFreq+0x30>
 80024be:	2b08      	cmp	r3, #8
 80024c0:	d003      	beq.n	80024ca <HAL_RCC_GetSysClockFreq+0x36>
 80024c2:	e026      	b.n	8002512 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024c4:	4b19      	ldr	r3, [pc, #100]	@ (800252c <HAL_RCC_GetSysClockFreq+0x98>)
 80024c6:	613b      	str	r3, [r7, #16]
      break;
 80024c8:	e026      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	0c9b      	lsrs	r3, r3, #18
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	4a17      	ldr	r2, [pc, #92]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024d4:	5cd3      	ldrb	r3, [r2, r3]
 80024d6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80024d8:	4b13      	ldr	r3, [pc, #76]	@ (8002528 <HAL_RCC_GetSysClockFreq+0x94>)
 80024da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024dc:	f003 030f 	and.w	r3, r3, #15
 80024e0:	4a14      	ldr	r2, [pc, #80]	@ (8002534 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024e2:	5cd3      	ldrb	r3, [r2, r3]
 80024e4:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d008      	beq.n	8002502 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80024f0:	4a0e      	ldr	r2, [pc, #56]	@ (800252c <HAL_RCC_GetSysClockFreq+0x98>)
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	fb02 f303 	mul.w	r3, r2, r3
 80024fe:	617b      	str	r3, [r7, #20]
 8002500:	e004      	b.n	800250c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a0c      	ldr	r2, [pc, #48]	@ (8002538 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002506:	fb02 f303 	mul.w	r3, r2, r3
 800250a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	613b      	str	r3, [r7, #16]
      break;
 8002510:	e002      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002512:	4b06      	ldr	r3, [pc, #24]	@ (800252c <HAL_RCC_GetSysClockFreq+0x98>)
 8002514:	613b      	str	r3, [r7, #16]
      break;
 8002516:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002518:	693b      	ldr	r3, [r7, #16]
}
 800251a:	4618      	mov	r0, r3
 800251c:	371c      	adds	r7, #28
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	40021000 	.word	0x40021000
 800252c:	007a1200 	.word	0x007a1200
 8002530:	08004978 	.word	0x08004978
 8002534:	08004988 	.word	0x08004988
 8002538:	003d0900 	.word	0x003d0900

0800253c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002540:	4b03      	ldr	r3, [pc, #12]	@ (8002550 <HAL_RCC_GetHCLKFreq+0x14>)
 8002542:	681b      	ldr	r3, [r3, #0]
}
 8002544:	4618      	mov	r0, r3
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	20000000 	.word	0x20000000

08002554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800255a:	f7ff ffef 	bl	800253c <HAL_RCC_GetHCLKFreq>
 800255e:	4601      	mov	r1, r0
 8002560:	4b0b      	ldr	r3, [pc, #44]	@ (8002590 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002568:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800256c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	fa92 f2a2 	rbit	r2, r2
 8002574:	603a      	str	r2, [r7, #0]
  return result;
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	fab2 f282 	clz	r2, r2
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	40d3      	lsrs	r3, r2
 8002580:	4a04      	ldr	r2, [pc, #16]	@ (8002594 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002582:	5cd3      	ldrb	r3, [r2, r3]
 8002584:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002588:	4618      	mov	r0, r3
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40021000 	.word	0x40021000
 8002594:	08004970 	.word	0x08004970

08002598 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800259e:	f7ff ffcd 	bl	800253c <HAL_RCC_GetHCLKFreq>
 80025a2:	4601      	mov	r1, r0
 80025a4:	4b0b      	ldr	r3, [pc, #44]	@ (80025d4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80025ac:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80025b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	fa92 f2a2 	rbit	r2, r2
 80025b8:	603a      	str	r2, [r7, #0]
  return result;
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	fab2 f282 	clz	r2, r2
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	40d3      	lsrs	r3, r2
 80025c4:	4a04      	ldr	r2, [pc, #16]	@ (80025d8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80025c6:	5cd3      	ldrb	r3, [r2, r3]
 80025c8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80025cc:	4618      	mov	r0, r3
 80025ce:	3708      	adds	r7, #8
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40021000 	.word	0x40021000
 80025d8:	08004970 	.word	0x08004970

080025dc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b092      	sub	sp, #72	@ 0x48
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80025e8:	2300      	movs	r3, #0
 80025ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80025ec:	2300      	movs	r3, #0
 80025ee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 80d4 	beq.w	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002600:	4b4e      	ldr	r3, [pc, #312]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d10e      	bne.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800260c:	4b4b      	ldr	r3, [pc, #300]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	4a4a      	ldr	r2, [pc, #296]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002612:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002616:	61d3      	str	r3, [r2, #28]
 8002618:	4b48      	ldr	r3, [pc, #288]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800261a:	69db      	ldr	r3, [r3, #28]
 800261c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002624:	2301      	movs	r3, #1
 8002626:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262a:	4b45      	ldr	r3, [pc, #276]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002632:	2b00      	cmp	r3, #0
 8002634:	d118      	bne.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002636:	4b42      	ldr	r3, [pc, #264]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a41      	ldr	r2, [pc, #260]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800263c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002640:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002642:	f7fe fadd 	bl	8000c00 <HAL_GetTick>
 8002646:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002648:	e008      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800264a:	f7fe fad9 	bl	8000c00 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b64      	cmp	r3, #100	@ 0x64
 8002656:	d901      	bls.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e169      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800265c:	4b38      	ldr	r3, [pc, #224]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0f0      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002668:	4b34      	ldr	r3, [pc, #208]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002670:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 8084 	beq.w	8002782 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002682:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002684:	429a      	cmp	r2, r3
 8002686:	d07c      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002688:	4b2c      	ldr	r3, [pc, #176]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002690:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002692:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002696:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800269a:	fa93 f3a3 	rbit	r3, r3
 800269e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80026a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026a2:	fab3 f383 	clz	r3, r3
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	461a      	mov	r2, r3
 80026aa:	4b26      	ldr	r3, [pc, #152]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80026ac:	4413      	add	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	461a      	mov	r2, r3
 80026b2:	2301      	movs	r3, #1
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80026ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026be:	fa93 f3a3 	rbit	r3, r3
 80026c2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80026c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026c6:	fab3 f383 	clz	r3, r3
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	461a      	mov	r2, r3
 80026ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80026d0:	4413      	add	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	461a      	mov	r2, r3
 80026d6:	2300      	movs	r3, #0
 80026d8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026da:	4a18      	ldr	r2, [pc, #96]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026de:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d04b      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ea:	f7fe fa89 	bl	8000c00 <HAL_GetTick>
 80026ee:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f0:	e00a      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f2:	f7fe fa85 	bl	8000c00 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002700:	4293      	cmp	r3, r2
 8002702:	d901      	bls.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e113      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002708:	2302      	movs	r3, #2
 800270a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800270e:	fa93 f3a3 	rbit	r3, r3
 8002712:	627b      	str	r3, [r7, #36]	@ 0x24
 8002714:	2302      	movs	r3, #2
 8002716:	623b      	str	r3, [r7, #32]
 8002718:	6a3b      	ldr	r3, [r7, #32]
 800271a:	fa93 f3a3 	rbit	r3, r3
 800271e:	61fb      	str	r3, [r7, #28]
  return result;
 8002720:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002722:	fab3 f383 	clz	r3, r3
 8002726:	b2db      	uxtb	r3, r3
 8002728:	095b      	lsrs	r3, r3, #5
 800272a:	b2db      	uxtb	r3, r3
 800272c:	f043 0302 	orr.w	r3, r3, #2
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d108      	bne.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002736:	4b01      	ldr	r3, [pc, #4]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	e00d      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800273c:	40021000 	.word	0x40021000
 8002740:	40007000 	.word	0x40007000
 8002744:	10908100 	.word	0x10908100
 8002748:	2302      	movs	r3, #2
 800274a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	fa93 f3a3 	rbit	r3, r3
 8002752:	617b      	str	r3, [r7, #20]
 8002754:	4b78      	ldr	r3, [pc, #480]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002758:	2202      	movs	r2, #2
 800275a:	613a      	str	r2, [r7, #16]
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	fa92 f2a2 	rbit	r2, r2
 8002762:	60fa      	str	r2, [r7, #12]
  return result;
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	fab2 f282 	clz	r2, r2
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	f002 021f 	and.w	r2, r2, #31
 8002776:	2101      	movs	r1, #1
 8002778:	fa01 f202 	lsl.w	r2, r1, r2
 800277c:	4013      	ands	r3, r2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0b7      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002782:	4b6d      	ldr	r3, [pc, #436]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	496a      	ldr	r1, [pc, #424]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002790:	4313      	orrs	r3, r2
 8002792:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002794:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002798:	2b01      	cmp	r3, #1
 800279a:	d105      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800279c:	4b66      	ldr	r3, [pc, #408]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800279e:	69db      	ldr	r3, [r3, #28]
 80027a0:	4a65      	ldr	r2, [pc, #404]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d008      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027b4:	4b60      	ldr	r3, [pc, #384]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b8:	f023 0203 	bic.w	r2, r3, #3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	495d      	ldr	r1, [pc, #372]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d008      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027d2:	4b59      	ldr	r3, [pc, #356]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	4956      	ldr	r1, [pc, #344]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d008      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027f0:	4b51      	ldr	r3, [pc, #324]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	494e      	ldr	r1, [pc, #312]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0320 	and.w	r3, r3, #32
 800280a:	2b00      	cmp	r3, #0
 800280c:	d008      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800280e:	4b4a      	ldr	r3, [pc, #296]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002812:	f023 0210 	bic.w	r2, r3, #16
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	4947      	ldr	r1, [pc, #284]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800281c:	4313      	orrs	r3, r2
 800281e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d008      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800282c:	4b42      	ldr	r3, [pc, #264]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002838:	493f      	ldr	r1, [pc, #252]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800283a:	4313      	orrs	r3, r2
 800283c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002846:	2b00      	cmp	r3, #0
 8002848:	d008      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800284a:	4b3b      	ldr	r3, [pc, #236]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284e:	f023 0220 	bic.w	r2, r3, #32
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	4938      	ldr	r1, [pc, #224]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002858:	4313      	orrs	r3, r2
 800285a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0308 	and.w	r3, r3, #8
 8002864:	2b00      	cmp	r3, #0
 8002866:	d008      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002868:	4b33      	ldr	r3, [pc, #204]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800286a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	4930      	ldr	r1, [pc, #192]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002876:	4313      	orrs	r3, r2
 8002878:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0310 	and.w	r3, r3, #16
 8002882:	2b00      	cmp	r3, #0
 8002884:	d008      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002886:	4b2c      	ldr	r3, [pc, #176]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	4929      	ldr	r1, [pc, #164]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002894:	4313      	orrs	r3, r2
 8002896:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d008      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028a4:	4b24      	ldr	r3, [pc, #144]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b0:	4921      	ldr	r1, [pc, #132]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d008      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80028c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c6:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ce:	491a      	ldr	r1, [pc, #104]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d008      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80028e0:	4b15      	ldr	r3, [pc, #84]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e4:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ec:	4912      	ldr	r1, [pc, #72]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d008      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80028fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002902:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290a:	490b      	ldr	r1, [pc, #44]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800290c:	4313      	orrs	r3, r2
 800290e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d008      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800291c:	4b06      	ldr	r3, [pc, #24]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800291e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002920:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002928:	4903      	ldr	r1, [pc, #12]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800292a:	4313      	orrs	r3, r2
 800292c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3748      	adds	r7, #72	@ 0x48
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40021000 	.word	0x40021000

0800293c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e049      	b.n	80029e2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d106      	bne.n	8002968 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7fd ff7a 	bl	800085c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2202      	movs	r2, #2
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3304      	adds	r3, #4
 8002978:	4619      	mov	r1, r3
 800297a:	4610      	mov	r0, r2
 800297c:	f000 fa4a 	bl	8002e14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
	...

080029ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d109      	bne.n	8002a10 <HAL_TIM_PWM_Start+0x24>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	bf14      	ite	ne
 8002a08:	2301      	movne	r3, #1
 8002a0a:	2300      	moveq	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	e03c      	b.n	8002a8a <HAL_TIM_PWM_Start+0x9e>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d109      	bne.n	8002a2a <HAL_TIM_PWM_Start+0x3e>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	bf14      	ite	ne
 8002a22:	2301      	movne	r3, #1
 8002a24:	2300      	moveq	r3, #0
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	e02f      	b.n	8002a8a <HAL_TIM_PWM_Start+0x9e>
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	2b08      	cmp	r3, #8
 8002a2e:	d109      	bne.n	8002a44 <HAL_TIM_PWM_Start+0x58>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	bf14      	ite	ne
 8002a3c:	2301      	movne	r3, #1
 8002a3e:	2300      	moveq	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	e022      	b.n	8002a8a <HAL_TIM_PWM_Start+0x9e>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	2b0c      	cmp	r3, #12
 8002a48:	d109      	bne.n	8002a5e <HAL_TIM_PWM_Start+0x72>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	bf14      	ite	ne
 8002a56:	2301      	movne	r3, #1
 8002a58:	2300      	moveq	r3, #0
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	e015      	b.n	8002a8a <HAL_TIM_PWM_Start+0x9e>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b10      	cmp	r3, #16
 8002a62:	d109      	bne.n	8002a78 <HAL_TIM_PWM_Start+0x8c>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	bf14      	ite	ne
 8002a70:	2301      	movne	r3, #1
 8002a72:	2300      	moveq	r3, #0
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	e008      	b.n	8002a8a <HAL_TIM_PWM_Start+0x9e>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	bf14      	ite	ne
 8002a84:	2301      	movne	r3, #1
 8002a86:	2300      	moveq	r3, #0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e097      	b.n	8002bc2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d104      	bne.n	8002aa2 <HAL_TIM_PWM_Start+0xb6>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002aa0:	e023      	b.n	8002aea <HAL_TIM_PWM_Start+0xfe>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	2b04      	cmp	r3, #4
 8002aa6:	d104      	bne.n	8002ab2 <HAL_TIM_PWM_Start+0xc6>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ab0:	e01b      	b.n	8002aea <HAL_TIM_PWM_Start+0xfe>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d104      	bne.n	8002ac2 <HAL_TIM_PWM_Start+0xd6>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2202      	movs	r2, #2
 8002abc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ac0:	e013      	b.n	8002aea <HAL_TIM_PWM_Start+0xfe>
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	2b0c      	cmp	r3, #12
 8002ac6:	d104      	bne.n	8002ad2 <HAL_TIM_PWM_Start+0xe6>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2202      	movs	r2, #2
 8002acc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002ad0:	e00b      	b.n	8002aea <HAL_TIM_PWM_Start+0xfe>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	2b10      	cmp	r3, #16
 8002ad6:	d104      	bne.n	8002ae2 <HAL_TIM_PWM_Start+0xf6>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ae0:	e003      	b.n	8002aea <HAL_TIM_PWM_Start+0xfe>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2201      	movs	r2, #1
 8002af0:	6839      	ldr	r1, [r7, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 fd00 	bl	80034f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a33      	ldr	r2, [pc, #204]	@ (8002bcc <HAL_TIM_PWM_Start+0x1e0>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d013      	beq.n	8002b2a <HAL_TIM_PWM_Start+0x13e>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a32      	ldr	r2, [pc, #200]	@ (8002bd0 <HAL_TIM_PWM_Start+0x1e4>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d00e      	beq.n	8002b2a <HAL_TIM_PWM_Start+0x13e>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a30      	ldr	r2, [pc, #192]	@ (8002bd4 <HAL_TIM_PWM_Start+0x1e8>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d009      	beq.n	8002b2a <HAL_TIM_PWM_Start+0x13e>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a2f      	ldr	r2, [pc, #188]	@ (8002bd8 <HAL_TIM_PWM_Start+0x1ec>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d004      	beq.n	8002b2a <HAL_TIM_PWM_Start+0x13e>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a2d      	ldr	r2, [pc, #180]	@ (8002bdc <HAL_TIM_PWM_Start+0x1f0>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d101      	bne.n	8002b2e <HAL_TIM_PWM_Start+0x142>
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e000      	b.n	8002b30 <HAL_TIM_PWM_Start+0x144>
 8002b2e:	2300      	movs	r3, #0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d007      	beq.n	8002b44 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b42:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a20      	ldr	r2, [pc, #128]	@ (8002bcc <HAL_TIM_PWM_Start+0x1e0>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d018      	beq.n	8002b80 <HAL_TIM_PWM_Start+0x194>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b56:	d013      	beq.n	8002b80 <HAL_TIM_PWM_Start+0x194>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a20      	ldr	r2, [pc, #128]	@ (8002be0 <HAL_TIM_PWM_Start+0x1f4>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d00e      	beq.n	8002b80 <HAL_TIM_PWM_Start+0x194>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a1f      	ldr	r2, [pc, #124]	@ (8002be4 <HAL_TIM_PWM_Start+0x1f8>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d009      	beq.n	8002b80 <HAL_TIM_PWM_Start+0x194>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a17      	ldr	r2, [pc, #92]	@ (8002bd0 <HAL_TIM_PWM_Start+0x1e4>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d004      	beq.n	8002b80 <HAL_TIM_PWM_Start+0x194>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a16      	ldr	r2, [pc, #88]	@ (8002bd4 <HAL_TIM_PWM_Start+0x1e8>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d115      	bne.n	8002bac <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689a      	ldr	r2, [r3, #8]
 8002b86:	4b18      	ldr	r3, [pc, #96]	@ (8002be8 <HAL_TIM_PWM_Start+0x1fc>)
 8002b88:	4013      	ands	r3, r2
 8002b8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2b06      	cmp	r3, #6
 8002b90:	d015      	beq.n	8002bbe <HAL_TIM_PWM_Start+0x1d2>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b98:	d011      	beq.n	8002bbe <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f042 0201 	orr.w	r2, r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002baa:	e008      	b.n	8002bbe <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f042 0201 	orr.w	r2, r2, #1
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	e000      	b.n	8002bc0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bbe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40012c00 	.word	0x40012c00
 8002bd0:	40013400 	.word	0x40013400
 8002bd4:	40014000 	.word	0x40014000
 8002bd8:	40014400 	.word	0x40014400
 8002bdc:	40014800 	.word	0x40014800
 8002be0:	40000400 	.word	0x40000400
 8002be4:	40000800 	.word	0x40000800
 8002be8:	00010007 	.word	0x00010007

08002bec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d101      	bne.n	8002c0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002c06:	2302      	movs	r3, #2
 8002c08:	e0ff      	b.n	8002e0a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2b14      	cmp	r3, #20
 8002c16:	f200 80f0 	bhi.w	8002dfa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002c1a:	a201      	add	r2, pc, #4	@ (adr r2, 8002c20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c20:	08002c75 	.word	0x08002c75
 8002c24:	08002dfb 	.word	0x08002dfb
 8002c28:	08002dfb 	.word	0x08002dfb
 8002c2c:	08002dfb 	.word	0x08002dfb
 8002c30:	08002cb5 	.word	0x08002cb5
 8002c34:	08002dfb 	.word	0x08002dfb
 8002c38:	08002dfb 	.word	0x08002dfb
 8002c3c:	08002dfb 	.word	0x08002dfb
 8002c40:	08002cf7 	.word	0x08002cf7
 8002c44:	08002dfb 	.word	0x08002dfb
 8002c48:	08002dfb 	.word	0x08002dfb
 8002c4c:	08002dfb 	.word	0x08002dfb
 8002c50:	08002d37 	.word	0x08002d37
 8002c54:	08002dfb 	.word	0x08002dfb
 8002c58:	08002dfb 	.word	0x08002dfb
 8002c5c:	08002dfb 	.word	0x08002dfb
 8002c60:	08002d79 	.word	0x08002d79
 8002c64:	08002dfb 	.word	0x08002dfb
 8002c68:	08002dfb 	.word	0x08002dfb
 8002c6c:	08002dfb 	.word	0x08002dfb
 8002c70:	08002db9 	.word	0x08002db9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68b9      	ldr	r1, [r7, #8]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f000 f966 	bl	8002f4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	699a      	ldr	r2, [r3, #24]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 0208 	orr.w	r2, r2, #8
 8002c8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	699a      	ldr	r2, [r3, #24]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 0204 	bic.w	r2, r2, #4
 8002c9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6999      	ldr	r1, [r3, #24]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	691a      	ldr	r2, [r3, #16]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	619a      	str	r2, [r3, #24]
      break;
 8002cb2:	e0a5      	b.n	8002e00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68b9      	ldr	r1, [r7, #8]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 f9d6 	bl	800306c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	699a      	ldr	r2, [r3, #24]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	699a      	ldr	r2, [r3, #24]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6999      	ldr	r1, [r3, #24]
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	021a      	lsls	r2, r3, #8
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	619a      	str	r2, [r3, #24]
      break;
 8002cf4:	e084      	b.n	8002e00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68b9      	ldr	r1, [r7, #8]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f000 fa3f 	bl	8003180 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	69da      	ldr	r2, [r3, #28]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f042 0208 	orr.w	r2, r2, #8
 8002d10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	69da      	ldr	r2, [r3, #28]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 0204 	bic.w	r2, r2, #4
 8002d20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	69d9      	ldr	r1, [r3, #28]
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	691a      	ldr	r2, [r3, #16]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	61da      	str	r2, [r3, #28]
      break;
 8002d34:	e064      	b.n	8002e00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68b9      	ldr	r1, [r7, #8]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f000 faa7 	bl	8003290 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	69da      	ldr	r2, [r3, #28]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	69da      	ldr	r2, [r3, #28]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	69d9      	ldr	r1, [r3, #28]
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	021a      	lsls	r2, r3, #8
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	61da      	str	r2, [r3, #28]
      break;
 8002d76:	e043      	b.n	8002e00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68b9      	ldr	r1, [r7, #8]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f000 faf0 	bl	8003364 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 0208 	orr.w	r2, r2, #8
 8002d92:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0204 	bic.w	r2, r2, #4
 8002da2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	691a      	ldr	r2, [r3, #16]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002db6:	e023      	b.n	8002e00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68b9      	ldr	r1, [r7, #8]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 fb34 	bl	800342c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002dd2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002de2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	021a      	lsls	r2, r3, #8
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002df8:	e002      	b.n	8002e00 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	75fb      	strb	r3, [r7, #23]
      break;
 8002dfe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3718      	adds	r7, #24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop

08002e14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a42      	ldr	r2, [pc, #264]	@ (8002f30 <TIM_Base_SetConfig+0x11c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d00f      	beq.n	8002e4c <TIM_Base_SetConfig+0x38>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e32:	d00b      	beq.n	8002e4c <TIM_Base_SetConfig+0x38>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a3f      	ldr	r2, [pc, #252]	@ (8002f34 <TIM_Base_SetConfig+0x120>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d007      	beq.n	8002e4c <TIM_Base_SetConfig+0x38>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a3e      	ldr	r2, [pc, #248]	@ (8002f38 <TIM_Base_SetConfig+0x124>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d003      	beq.n	8002e4c <TIM_Base_SetConfig+0x38>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a3d      	ldr	r2, [pc, #244]	@ (8002f3c <TIM_Base_SetConfig+0x128>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d108      	bne.n	8002e5e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a33      	ldr	r2, [pc, #204]	@ (8002f30 <TIM_Base_SetConfig+0x11c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d01b      	beq.n	8002e9e <TIM_Base_SetConfig+0x8a>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e6c:	d017      	beq.n	8002e9e <TIM_Base_SetConfig+0x8a>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a30      	ldr	r2, [pc, #192]	@ (8002f34 <TIM_Base_SetConfig+0x120>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d013      	beq.n	8002e9e <TIM_Base_SetConfig+0x8a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a2f      	ldr	r2, [pc, #188]	@ (8002f38 <TIM_Base_SetConfig+0x124>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d00f      	beq.n	8002e9e <TIM_Base_SetConfig+0x8a>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a2e      	ldr	r2, [pc, #184]	@ (8002f3c <TIM_Base_SetConfig+0x128>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d00b      	beq.n	8002e9e <TIM_Base_SetConfig+0x8a>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a2d      	ldr	r2, [pc, #180]	@ (8002f40 <TIM_Base_SetConfig+0x12c>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d007      	beq.n	8002e9e <TIM_Base_SetConfig+0x8a>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a2c      	ldr	r2, [pc, #176]	@ (8002f44 <TIM_Base_SetConfig+0x130>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d003      	beq.n	8002e9e <TIM_Base_SetConfig+0x8a>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a2b      	ldr	r2, [pc, #172]	@ (8002f48 <TIM_Base_SetConfig+0x134>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d108      	bne.n	8002eb0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ea4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a16      	ldr	r2, [pc, #88]	@ (8002f30 <TIM_Base_SetConfig+0x11c>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d00f      	beq.n	8002efc <TIM_Base_SetConfig+0xe8>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a17      	ldr	r2, [pc, #92]	@ (8002f3c <TIM_Base_SetConfig+0x128>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d00b      	beq.n	8002efc <TIM_Base_SetConfig+0xe8>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a16      	ldr	r2, [pc, #88]	@ (8002f40 <TIM_Base_SetConfig+0x12c>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d007      	beq.n	8002efc <TIM_Base_SetConfig+0xe8>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a15      	ldr	r2, [pc, #84]	@ (8002f44 <TIM_Base_SetConfig+0x130>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d003      	beq.n	8002efc <TIM_Base_SetConfig+0xe8>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a14      	ldr	r2, [pc, #80]	@ (8002f48 <TIM_Base_SetConfig+0x134>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d103      	bne.n	8002f04 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	691a      	ldr	r2, [r3, #16]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d105      	bne.n	8002f22 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	f023 0201 	bic.w	r2, r3, #1
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	611a      	str	r2, [r3, #16]
  }
}
 8002f22:	bf00      	nop
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	40012c00 	.word	0x40012c00
 8002f34:	40000400 	.word	0x40000400
 8002f38:	40000800 	.word	0x40000800
 8002f3c:	40013400 	.word	0x40013400
 8002f40:	40014000 	.word	0x40014000
 8002f44:	40014400 	.word	0x40014400
 8002f48:	40014800 	.word	0x40014800

08002f4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b087      	sub	sp, #28
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	f023 0201 	bic.w	r2, r3, #1
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f023 0303 	bic.w	r3, r3, #3
 8002f86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	f023 0302 	bic.w	r3, r3, #2
 8002f98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a2c      	ldr	r2, [pc, #176]	@ (8003058 <TIM_OC1_SetConfig+0x10c>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d00f      	beq.n	8002fcc <TIM_OC1_SetConfig+0x80>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a2b      	ldr	r2, [pc, #172]	@ (800305c <TIM_OC1_SetConfig+0x110>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d00b      	beq.n	8002fcc <TIM_OC1_SetConfig+0x80>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a2a      	ldr	r2, [pc, #168]	@ (8003060 <TIM_OC1_SetConfig+0x114>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d007      	beq.n	8002fcc <TIM_OC1_SetConfig+0x80>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a29      	ldr	r2, [pc, #164]	@ (8003064 <TIM_OC1_SetConfig+0x118>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d003      	beq.n	8002fcc <TIM_OC1_SetConfig+0x80>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a28      	ldr	r2, [pc, #160]	@ (8003068 <TIM_OC1_SetConfig+0x11c>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d10c      	bne.n	8002fe6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	f023 0308 	bic.w	r3, r3, #8
 8002fd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	f023 0304 	bic.w	r3, r3, #4
 8002fe4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a1b      	ldr	r2, [pc, #108]	@ (8003058 <TIM_OC1_SetConfig+0x10c>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d00f      	beq.n	800300e <TIM_OC1_SetConfig+0xc2>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a1a      	ldr	r2, [pc, #104]	@ (800305c <TIM_OC1_SetConfig+0x110>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d00b      	beq.n	800300e <TIM_OC1_SetConfig+0xc2>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a19      	ldr	r2, [pc, #100]	@ (8003060 <TIM_OC1_SetConfig+0x114>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d007      	beq.n	800300e <TIM_OC1_SetConfig+0xc2>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a18      	ldr	r2, [pc, #96]	@ (8003064 <TIM_OC1_SetConfig+0x118>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d003      	beq.n	800300e <TIM_OC1_SetConfig+0xc2>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a17      	ldr	r2, [pc, #92]	@ (8003068 <TIM_OC1_SetConfig+0x11c>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d111      	bne.n	8003032 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003014:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800301c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	4313      	orrs	r3, r2
 8003026:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	4313      	orrs	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	621a      	str	r2, [r3, #32]
}
 800304c:	bf00      	nop
 800304e:	371c      	adds	r7, #28
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	40012c00 	.word	0x40012c00
 800305c:	40013400 	.word	0x40013400
 8003060:	40014000 	.word	0x40014000
 8003064:	40014400 	.word	0x40014400
 8003068:	40014800 	.word	0x40014800

0800306c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800306c:	b480      	push	{r7}
 800306e:	b087      	sub	sp, #28
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	f023 0210 	bic.w	r2, r3, #16
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800309a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800309e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	021b      	lsls	r3, r3, #8
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	f023 0320 	bic.w	r3, r3, #32
 80030ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	011b      	lsls	r3, r3, #4
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a28      	ldr	r2, [pc, #160]	@ (800316c <TIM_OC2_SetConfig+0x100>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d003      	beq.n	80030d8 <TIM_OC2_SetConfig+0x6c>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a27      	ldr	r2, [pc, #156]	@ (8003170 <TIM_OC2_SetConfig+0x104>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d10d      	bne.n	80030f4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a1d      	ldr	r2, [pc, #116]	@ (800316c <TIM_OC2_SetConfig+0x100>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d00f      	beq.n	800311c <TIM_OC2_SetConfig+0xb0>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a1c      	ldr	r2, [pc, #112]	@ (8003170 <TIM_OC2_SetConfig+0x104>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d00b      	beq.n	800311c <TIM_OC2_SetConfig+0xb0>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a1b      	ldr	r2, [pc, #108]	@ (8003174 <TIM_OC2_SetConfig+0x108>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d007      	beq.n	800311c <TIM_OC2_SetConfig+0xb0>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a1a      	ldr	r2, [pc, #104]	@ (8003178 <TIM_OC2_SetConfig+0x10c>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d003      	beq.n	800311c <TIM_OC2_SetConfig+0xb0>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a19      	ldr	r2, [pc, #100]	@ (800317c <TIM_OC2_SetConfig+0x110>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d113      	bne.n	8003144 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003122:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800312a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	4313      	orrs	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	4313      	orrs	r3, r2
 8003142:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	621a      	str	r2, [r3, #32]
}
 800315e:	bf00      	nop
 8003160:	371c      	adds	r7, #28
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	40012c00 	.word	0x40012c00
 8003170:	40013400 	.word	0x40013400
 8003174:	40014000 	.word	0x40014000
 8003178:	40014400 	.word	0x40014400
 800317c:	40014800 	.word	0x40014800

08003180 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003180:	b480      	push	{r7}
 8003182:	b087      	sub	sp, #28
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f023 0303 	bic.w	r3, r3, #3
 80031ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80031cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	021b      	lsls	r3, r3, #8
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a27      	ldr	r2, [pc, #156]	@ (800327c <TIM_OC3_SetConfig+0xfc>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d003      	beq.n	80031ea <TIM_OC3_SetConfig+0x6a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a26      	ldr	r2, [pc, #152]	@ (8003280 <TIM_OC3_SetConfig+0x100>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d10d      	bne.n	8003206 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80031f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	021b      	lsls	r3, r3, #8
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003204:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a1c      	ldr	r2, [pc, #112]	@ (800327c <TIM_OC3_SetConfig+0xfc>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d00f      	beq.n	800322e <TIM_OC3_SetConfig+0xae>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a1b      	ldr	r2, [pc, #108]	@ (8003280 <TIM_OC3_SetConfig+0x100>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d00b      	beq.n	800322e <TIM_OC3_SetConfig+0xae>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a1a      	ldr	r2, [pc, #104]	@ (8003284 <TIM_OC3_SetConfig+0x104>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d007      	beq.n	800322e <TIM_OC3_SetConfig+0xae>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a19      	ldr	r2, [pc, #100]	@ (8003288 <TIM_OC3_SetConfig+0x108>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d003      	beq.n	800322e <TIM_OC3_SetConfig+0xae>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a18      	ldr	r2, [pc, #96]	@ (800328c <TIM_OC3_SetConfig+0x10c>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d113      	bne.n	8003256 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003234:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800323c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	011b      	lsls	r3, r3, #4
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	4313      	orrs	r3, r2
 8003248:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	011b      	lsls	r3, r3, #4
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	4313      	orrs	r3, r2
 8003254:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	621a      	str	r2, [r3, #32]
}
 8003270:	bf00      	nop
 8003272:	371c      	adds	r7, #28
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	40012c00 	.word	0x40012c00
 8003280:	40013400 	.word	0x40013400
 8003284:	40014000 	.word	0x40014000
 8003288:	40014400 	.word	0x40014400
 800328c:	40014800 	.word	0x40014800

08003290 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003290:	b480      	push	{r7}
 8003292:	b087      	sub	sp, #28
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80032c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	021b      	lsls	r3, r3, #8
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80032de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	031b      	lsls	r3, r3, #12
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a18      	ldr	r2, [pc, #96]	@ (8003350 <TIM_OC4_SetConfig+0xc0>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d00f      	beq.n	8003314 <TIM_OC4_SetConfig+0x84>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a17      	ldr	r2, [pc, #92]	@ (8003354 <TIM_OC4_SetConfig+0xc4>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d00b      	beq.n	8003314 <TIM_OC4_SetConfig+0x84>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a16      	ldr	r2, [pc, #88]	@ (8003358 <TIM_OC4_SetConfig+0xc8>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d007      	beq.n	8003314 <TIM_OC4_SetConfig+0x84>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a15      	ldr	r2, [pc, #84]	@ (800335c <TIM_OC4_SetConfig+0xcc>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d003      	beq.n	8003314 <TIM_OC4_SetConfig+0x84>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a14      	ldr	r2, [pc, #80]	@ (8003360 <TIM_OC4_SetConfig+0xd0>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d109      	bne.n	8003328 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800331a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	019b      	lsls	r3, r3, #6
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	4313      	orrs	r3, r2
 8003326:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	621a      	str	r2, [r3, #32]
}
 8003342:	bf00      	nop
 8003344:	371c      	adds	r7, #28
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	40012c00 	.word	0x40012c00
 8003354:	40013400 	.word	0x40013400
 8003358:	40014000 	.word	0x40014000
 800335c:	40014400 	.word	0x40014400
 8003360:	40014800 	.word	0x40014800

08003364 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003364:	b480      	push	{r7}
 8003366:	b087      	sub	sp, #28
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800338a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003392:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003396:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	4313      	orrs	r3, r2
 80033a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80033a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	041b      	lsls	r3, r3, #16
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a17      	ldr	r2, [pc, #92]	@ (8003418 <TIM_OC5_SetConfig+0xb4>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d00f      	beq.n	80033de <TIM_OC5_SetConfig+0x7a>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a16      	ldr	r2, [pc, #88]	@ (800341c <TIM_OC5_SetConfig+0xb8>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d00b      	beq.n	80033de <TIM_OC5_SetConfig+0x7a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a15      	ldr	r2, [pc, #84]	@ (8003420 <TIM_OC5_SetConfig+0xbc>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d007      	beq.n	80033de <TIM_OC5_SetConfig+0x7a>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a14      	ldr	r2, [pc, #80]	@ (8003424 <TIM_OC5_SetConfig+0xc0>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d003      	beq.n	80033de <TIM_OC5_SetConfig+0x7a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a13      	ldr	r2, [pc, #76]	@ (8003428 <TIM_OC5_SetConfig+0xc4>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d109      	bne.n	80033f2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	021b      	lsls	r3, r3, #8
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	621a      	str	r2, [r3, #32]
}
 800340c:	bf00      	nop
 800340e:	371c      	adds	r7, #28
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	40012c00 	.word	0x40012c00
 800341c:	40013400 	.word	0x40013400
 8003420:	40014000 	.word	0x40014000
 8003424:	40014400 	.word	0x40014400
 8003428:	40014800 	.word	0x40014800

0800342c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800342c:	b480      	push	{r7}
 800342e:	b087      	sub	sp, #28
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800345a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800345e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	021b      	lsls	r3, r3, #8
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	4313      	orrs	r3, r2
 800346a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003472:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	051b      	lsls	r3, r3, #20
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	4313      	orrs	r3, r2
 800347e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a18      	ldr	r2, [pc, #96]	@ (80034e4 <TIM_OC6_SetConfig+0xb8>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d00f      	beq.n	80034a8 <TIM_OC6_SetConfig+0x7c>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a17      	ldr	r2, [pc, #92]	@ (80034e8 <TIM_OC6_SetConfig+0xbc>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d00b      	beq.n	80034a8 <TIM_OC6_SetConfig+0x7c>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a16      	ldr	r2, [pc, #88]	@ (80034ec <TIM_OC6_SetConfig+0xc0>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d007      	beq.n	80034a8 <TIM_OC6_SetConfig+0x7c>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a15      	ldr	r2, [pc, #84]	@ (80034f0 <TIM_OC6_SetConfig+0xc4>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d003      	beq.n	80034a8 <TIM_OC6_SetConfig+0x7c>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a14      	ldr	r2, [pc, #80]	@ (80034f4 <TIM_OC6_SetConfig+0xc8>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d109      	bne.n	80034bc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	029b      	lsls	r3, r3, #10
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	621a      	str	r2, [r3, #32]
}
 80034d6:	bf00      	nop
 80034d8:	371c      	adds	r7, #28
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	40012c00 	.word	0x40012c00
 80034e8:	40013400 	.word	0x40013400
 80034ec:	40014000 	.word	0x40014000
 80034f0:	40014400 	.word	0x40014400
 80034f4:	40014800 	.word	0x40014800

080034f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b087      	sub	sp, #28
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	f003 031f 	and.w	r3, r3, #31
 800350a:	2201      	movs	r2, #1
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6a1a      	ldr	r2, [r3, #32]
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	43db      	mvns	r3, r3
 800351a:	401a      	ands	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6a1a      	ldr	r2, [r3, #32]
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	f003 031f 	and.w	r3, r3, #31
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	fa01 f303 	lsl.w	r3, r1, r3
 8003530:	431a      	orrs	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	621a      	str	r2, [r3, #32]
}
 8003536:	bf00      	nop
 8003538:	371c      	adds	r7, #28
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
	...

08003544 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003554:	2b01      	cmp	r3, #1
 8003556:	d101      	bne.n	800355c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003558:	2302      	movs	r3, #2
 800355a:	e063      	b.n	8003624 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a2b      	ldr	r2, [pc, #172]	@ (8003630 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d004      	beq.n	8003590 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a2a      	ldr	r2, [pc, #168]	@ (8003634 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d108      	bne.n	80035a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003596:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	4313      	orrs	r3, r2
 80035a0:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a1b      	ldr	r2, [pc, #108]	@ (8003630 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d018      	beq.n	80035f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035ce:	d013      	beq.n	80035f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a18      	ldr	r2, [pc, #96]	@ (8003638 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d00e      	beq.n	80035f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a17      	ldr	r2, [pc, #92]	@ (800363c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d009      	beq.n	80035f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a12      	ldr	r2, [pc, #72]	@ (8003634 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d004      	beq.n	80035f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a13      	ldr	r2, [pc, #76]	@ (8003640 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d10c      	bne.n	8003612 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	4313      	orrs	r3, r2
 8003608:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68ba      	ldr	r2, [r7, #8]
 8003610:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3714      	adds	r7, #20
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr
 8003630:	40012c00 	.word	0x40012c00
 8003634:	40013400 	.word	0x40013400
 8003638:	40000400 	.word	0x40000400
 800363c:	40000800 	.word	0x40000800
 8003640:	40014000 	.word	0x40014000

08003644 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e040      	b.n	80036d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800365a:	2b00      	cmp	r3, #0
 800365c:	d106      	bne.n	800366c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7fd f98a 	bl	8000980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2224      	movs	r2, #36	@ 0x24
 8003670:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 0201 	bic.w	r2, r2, #1
 8003680:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003686:	2b00      	cmp	r3, #0
 8003688:	d002      	beq.n	8003690 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 fa86 	bl	8003b9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 f8af 	bl	80037f4 <UART_SetConfig>
 8003696:	4603      	mov	r3, r0
 8003698:	2b01      	cmp	r3, #1
 800369a:	d101      	bne.n	80036a0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e01b      	b.n	80036d8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0201 	orr.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 fb05 	bl	8003ce0 <UART_CheckIdleState>
 80036d6:	4603      	mov	r3, r0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08a      	sub	sp, #40	@ 0x28
 80036e4:	af02      	add	r7, sp, #8
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	603b      	str	r3, [r7, #0]
 80036ec:	4613      	mov	r3, r2
 80036ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036f4:	2b20      	cmp	r3, #32
 80036f6:	d177      	bne.n	80037e8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d002      	beq.n	8003704 <HAL_UART_Transmit+0x24>
 80036fe:	88fb      	ldrh	r3, [r7, #6]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e070      	b.n	80037ea <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2221      	movs	r2, #33	@ 0x21
 8003714:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003716:	f7fd fa73 	bl	8000c00 <HAL_GetTick>
 800371a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	88fa      	ldrh	r2, [r7, #6]
 8003720:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	88fa      	ldrh	r2, [r7, #6]
 8003728:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003734:	d108      	bne.n	8003748 <HAL_UART_Transmit+0x68>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d104      	bne.n	8003748 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800373e:	2300      	movs	r3, #0
 8003740:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	61bb      	str	r3, [r7, #24]
 8003746:	e003      	b.n	8003750 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800374c:	2300      	movs	r3, #0
 800374e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003750:	e02f      	b.n	80037b2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	2200      	movs	r2, #0
 800375a:	2180      	movs	r1, #128	@ 0x80
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f000 fb67 	bl	8003e30 <UART_WaitOnFlagUntilTimeout>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d004      	beq.n	8003772 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2220      	movs	r2, #32
 800376c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e03b      	b.n	80037ea <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d10b      	bne.n	8003790 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	881a      	ldrh	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003784:	b292      	uxth	r2, r2
 8003786:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	3302      	adds	r3, #2
 800378c:	61bb      	str	r3, [r7, #24]
 800378e:	e007      	b.n	80037a0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	781a      	ldrb	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	3301      	adds	r3, #1
 800379e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	3b01      	subs	r3, #1
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1c9      	bne.n	8003752 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	2200      	movs	r2, #0
 80037c6:	2140      	movs	r1, #64	@ 0x40
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f000 fb31 	bl	8003e30 <UART_WaitOnFlagUntilTimeout>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d004      	beq.n	80037de <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2220      	movs	r2, #32
 80037d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e005      	b.n	80037ea <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2220      	movs	r2, #32
 80037e2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80037e4:	2300      	movs	r3, #0
 80037e6:	e000      	b.n	80037ea <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80037e8:	2302      	movs	r3, #2
  }
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3720      	adds	r7, #32
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
	...

080037f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b088      	sub	sp, #32
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037fc:	2300      	movs	r3, #0
 80037fe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	431a      	orrs	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	431a      	orrs	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	69db      	ldr	r3, [r3, #28]
 8003814:	4313      	orrs	r3, r2
 8003816:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8003822:	f023 030c 	bic.w	r3, r3, #12
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6812      	ldr	r2, [r2, #0]
 800382a:	6979      	ldr	r1, [r7, #20]
 800382c:	430b      	orrs	r3, r1
 800382e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68da      	ldr	r2, [r3, #12]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	4313      	orrs	r3, r2
 8003854:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	430a      	orrs	r2, r1
 8003868:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4aa7      	ldr	r2, [pc, #668]	@ (8003b0c <UART_SetConfig+0x318>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d120      	bne.n	80038b6 <UART_SetConfig+0xc2>
 8003874:	4ba6      	ldr	r3, [pc, #664]	@ (8003b10 <UART_SetConfig+0x31c>)
 8003876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003878:	f003 0303 	and.w	r3, r3, #3
 800387c:	2b03      	cmp	r3, #3
 800387e:	d817      	bhi.n	80038b0 <UART_SetConfig+0xbc>
 8003880:	a201      	add	r2, pc, #4	@ (adr r2, 8003888 <UART_SetConfig+0x94>)
 8003882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003886:	bf00      	nop
 8003888:	08003899 	.word	0x08003899
 800388c:	080038a5 	.word	0x080038a5
 8003890:	080038ab 	.word	0x080038ab
 8003894:	0800389f 	.word	0x0800389f
 8003898:	2301      	movs	r3, #1
 800389a:	77fb      	strb	r3, [r7, #31]
 800389c:	e0b5      	b.n	8003a0a <UART_SetConfig+0x216>
 800389e:	2302      	movs	r3, #2
 80038a0:	77fb      	strb	r3, [r7, #31]
 80038a2:	e0b2      	b.n	8003a0a <UART_SetConfig+0x216>
 80038a4:	2304      	movs	r3, #4
 80038a6:	77fb      	strb	r3, [r7, #31]
 80038a8:	e0af      	b.n	8003a0a <UART_SetConfig+0x216>
 80038aa:	2308      	movs	r3, #8
 80038ac:	77fb      	strb	r3, [r7, #31]
 80038ae:	e0ac      	b.n	8003a0a <UART_SetConfig+0x216>
 80038b0:	2310      	movs	r3, #16
 80038b2:	77fb      	strb	r3, [r7, #31]
 80038b4:	e0a9      	b.n	8003a0a <UART_SetConfig+0x216>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a96      	ldr	r2, [pc, #600]	@ (8003b14 <UART_SetConfig+0x320>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d124      	bne.n	800390a <UART_SetConfig+0x116>
 80038c0:	4b93      	ldr	r3, [pc, #588]	@ (8003b10 <UART_SetConfig+0x31c>)
 80038c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80038c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80038cc:	d011      	beq.n	80038f2 <UART_SetConfig+0xfe>
 80038ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80038d2:	d817      	bhi.n	8003904 <UART_SetConfig+0x110>
 80038d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038d8:	d011      	beq.n	80038fe <UART_SetConfig+0x10a>
 80038da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038de:	d811      	bhi.n	8003904 <UART_SetConfig+0x110>
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <UART_SetConfig+0xf8>
 80038e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038e8:	d006      	beq.n	80038f8 <UART_SetConfig+0x104>
 80038ea:	e00b      	b.n	8003904 <UART_SetConfig+0x110>
 80038ec:	2300      	movs	r3, #0
 80038ee:	77fb      	strb	r3, [r7, #31]
 80038f0:	e08b      	b.n	8003a0a <UART_SetConfig+0x216>
 80038f2:	2302      	movs	r3, #2
 80038f4:	77fb      	strb	r3, [r7, #31]
 80038f6:	e088      	b.n	8003a0a <UART_SetConfig+0x216>
 80038f8:	2304      	movs	r3, #4
 80038fa:	77fb      	strb	r3, [r7, #31]
 80038fc:	e085      	b.n	8003a0a <UART_SetConfig+0x216>
 80038fe:	2308      	movs	r3, #8
 8003900:	77fb      	strb	r3, [r7, #31]
 8003902:	e082      	b.n	8003a0a <UART_SetConfig+0x216>
 8003904:	2310      	movs	r3, #16
 8003906:	77fb      	strb	r3, [r7, #31]
 8003908:	e07f      	b.n	8003a0a <UART_SetConfig+0x216>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a82      	ldr	r2, [pc, #520]	@ (8003b18 <UART_SetConfig+0x324>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d124      	bne.n	800395e <UART_SetConfig+0x16a>
 8003914:	4b7e      	ldr	r3, [pc, #504]	@ (8003b10 <UART_SetConfig+0x31c>)
 8003916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003918:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800391c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003920:	d011      	beq.n	8003946 <UART_SetConfig+0x152>
 8003922:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003926:	d817      	bhi.n	8003958 <UART_SetConfig+0x164>
 8003928:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800392c:	d011      	beq.n	8003952 <UART_SetConfig+0x15e>
 800392e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003932:	d811      	bhi.n	8003958 <UART_SetConfig+0x164>
 8003934:	2b00      	cmp	r3, #0
 8003936:	d003      	beq.n	8003940 <UART_SetConfig+0x14c>
 8003938:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800393c:	d006      	beq.n	800394c <UART_SetConfig+0x158>
 800393e:	e00b      	b.n	8003958 <UART_SetConfig+0x164>
 8003940:	2300      	movs	r3, #0
 8003942:	77fb      	strb	r3, [r7, #31]
 8003944:	e061      	b.n	8003a0a <UART_SetConfig+0x216>
 8003946:	2302      	movs	r3, #2
 8003948:	77fb      	strb	r3, [r7, #31]
 800394a:	e05e      	b.n	8003a0a <UART_SetConfig+0x216>
 800394c:	2304      	movs	r3, #4
 800394e:	77fb      	strb	r3, [r7, #31]
 8003950:	e05b      	b.n	8003a0a <UART_SetConfig+0x216>
 8003952:	2308      	movs	r3, #8
 8003954:	77fb      	strb	r3, [r7, #31]
 8003956:	e058      	b.n	8003a0a <UART_SetConfig+0x216>
 8003958:	2310      	movs	r3, #16
 800395a:	77fb      	strb	r3, [r7, #31]
 800395c:	e055      	b.n	8003a0a <UART_SetConfig+0x216>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a6e      	ldr	r2, [pc, #440]	@ (8003b1c <UART_SetConfig+0x328>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d124      	bne.n	80039b2 <UART_SetConfig+0x1be>
 8003968:	4b69      	ldr	r3, [pc, #420]	@ (8003b10 <UART_SetConfig+0x31c>)
 800396a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800396c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003970:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003974:	d011      	beq.n	800399a <UART_SetConfig+0x1a6>
 8003976:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800397a:	d817      	bhi.n	80039ac <UART_SetConfig+0x1b8>
 800397c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003980:	d011      	beq.n	80039a6 <UART_SetConfig+0x1b2>
 8003982:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003986:	d811      	bhi.n	80039ac <UART_SetConfig+0x1b8>
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <UART_SetConfig+0x1a0>
 800398c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003990:	d006      	beq.n	80039a0 <UART_SetConfig+0x1ac>
 8003992:	e00b      	b.n	80039ac <UART_SetConfig+0x1b8>
 8003994:	2300      	movs	r3, #0
 8003996:	77fb      	strb	r3, [r7, #31]
 8003998:	e037      	b.n	8003a0a <UART_SetConfig+0x216>
 800399a:	2302      	movs	r3, #2
 800399c:	77fb      	strb	r3, [r7, #31]
 800399e:	e034      	b.n	8003a0a <UART_SetConfig+0x216>
 80039a0:	2304      	movs	r3, #4
 80039a2:	77fb      	strb	r3, [r7, #31]
 80039a4:	e031      	b.n	8003a0a <UART_SetConfig+0x216>
 80039a6:	2308      	movs	r3, #8
 80039a8:	77fb      	strb	r3, [r7, #31]
 80039aa:	e02e      	b.n	8003a0a <UART_SetConfig+0x216>
 80039ac:	2310      	movs	r3, #16
 80039ae:	77fb      	strb	r3, [r7, #31]
 80039b0:	e02b      	b.n	8003a0a <UART_SetConfig+0x216>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a5a      	ldr	r2, [pc, #360]	@ (8003b20 <UART_SetConfig+0x32c>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d124      	bne.n	8003a06 <UART_SetConfig+0x212>
 80039bc:	4b54      	ldr	r3, [pc, #336]	@ (8003b10 <UART_SetConfig+0x31c>)
 80039be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80039c4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80039c8:	d011      	beq.n	80039ee <UART_SetConfig+0x1fa>
 80039ca:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80039ce:	d817      	bhi.n	8003a00 <UART_SetConfig+0x20c>
 80039d0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039d4:	d011      	beq.n	80039fa <UART_SetConfig+0x206>
 80039d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039da:	d811      	bhi.n	8003a00 <UART_SetConfig+0x20c>
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d003      	beq.n	80039e8 <UART_SetConfig+0x1f4>
 80039e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039e4:	d006      	beq.n	80039f4 <UART_SetConfig+0x200>
 80039e6:	e00b      	b.n	8003a00 <UART_SetConfig+0x20c>
 80039e8:	2300      	movs	r3, #0
 80039ea:	77fb      	strb	r3, [r7, #31]
 80039ec:	e00d      	b.n	8003a0a <UART_SetConfig+0x216>
 80039ee:	2302      	movs	r3, #2
 80039f0:	77fb      	strb	r3, [r7, #31]
 80039f2:	e00a      	b.n	8003a0a <UART_SetConfig+0x216>
 80039f4:	2304      	movs	r3, #4
 80039f6:	77fb      	strb	r3, [r7, #31]
 80039f8:	e007      	b.n	8003a0a <UART_SetConfig+0x216>
 80039fa:	2308      	movs	r3, #8
 80039fc:	77fb      	strb	r3, [r7, #31]
 80039fe:	e004      	b.n	8003a0a <UART_SetConfig+0x216>
 8003a00:	2310      	movs	r3, #16
 8003a02:	77fb      	strb	r3, [r7, #31]
 8003a04:	e001      	b.n	8003a0a <UART_SetConfig+0x216>
 8003a06:	2310      	movs	r3, #16
 8003a08:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a12:	d15b      	bne.n	8003acc <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8003a14:	7ffb      	ldrb	r3, [r7, #31]
 8003a16:	2b08      	cmp	r3, #8
 8003a18:	d827      	bhi.n	8003a6a <UART_SetConfig+0x276>
 8003a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a20 <UART_SetConfig+0x22c>)
 8003a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a20:	08003a45 	.word	0x08003a45
 8003a24:	08003a4d 	.word	0x08003a4d
 8003a28:	08003a55 	.word	0x08003a55
 8003a2c:	08003a6b 	.word	0x08003a6b
 8003a30:	08003a5b 	.word	0x08003a5b
 8003a34:	08003a6b 	.word	0x08003a6b
 8003a38:	08003a6b 	.word	0x08003a6b
 8003a3c:	08003a6b 	.word	0x08003a6b
 8003a40:	08003a63 	.word	0x08003a63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a44:	f7fe fd86 	bl	8002554 <HAL_RCC_GetPCLK1Freq>
 8003a48:	61b8      	str	r0, [r7, #24]
        break;
 8003a4a:	e013      	b.n	8003a74 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a4c:	f7fe fda4 	bl	8002598 <HAL_RCC_GetPCLK2Freq>
 8003a50:	61b8      	str	r0, [r7, #24]
        break;
 8003a52:	e00f      	b.n	8003a74 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a54:	4b33      	ldr	r3, [pc, #204]	@ (8003b24 <UART_SetConfig+0x330>)
 8003a56:	61bb      	str	r3, [r7, #24]
        break;
 8003a58:	e00c      	b.n	8003a74 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a5a:	f7fe fd1b 	bl	8002494 <HAL_RCC_GetSysClockFreq>
 8003a5e:	61b8      	str	r0, [r7, #24]
        break;
 8003a60:	e008      	b.n	8003a74 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a66:	61bb      	str	r3, [r7, #24]
        break;
 8003a68:	e004      	b.n	8003a74 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	77bb      	strb	r3, [r7, #30]
        break;
 8003a72:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f000 8082 	beq.w	8003b80 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	005a      	lsls	r2, r3, #1
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	085b      	lsrs	r3, r3, #1
 8003a86:	441a      	add	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a90:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	2b0f      	cmp	r3, #15
 8003a96:	d916      	bls.n	8003ac6 <UART_SetConfig+0x2d2>
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a9e:	d212      	bcs.n	8003ac6 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	f023 030f 	bic.w	r3, r3, #15
 8003aa8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	085b      	lsrs	r3, r3, #1
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	89fb      	ldrh	r3, [r7, #14]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	89fa      	ldrh	r2, [r7, #14]
 8003ac2:	60da      	str	r2, [r3, #12]
 8003ac4:	e05c      	b.n	8003b80 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	77bb      	strb	r3, [r7, #30]
 8003aca:	e059      	b.n	8003b80 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003acc:	7ffb      	ldrb	r3, [r7, #31]
 8003ace:	2b08      	cmp	r3, #8
 8003ad0:	d835      	bhi.n	8003b3e <UART_SetConfig+0x34a>
 8003ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ad8 <UART_SetConfig+0x2e4>)
 8003ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad8:	08003afd 	.word	0x08003afd
 8003adc:	08003b05 	.word	0x08003b05
 8003ae0:	08003b29 	.word	0x08003b29
 8003ae4:	08003b3f 	.word	0x08003b3f
 8003ae8:	08003b2f 	.word	0x08003b2f
 8003aec:	08003b3f 	.word	0x08003b3f
 8003af0:	08003b3f 	.word	0x08003b3f
 8003af4:	08003b3f 	.word	0x08003b3f
 8003af8:	08003b37 	.word	0x08003b37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003afc:	f7fe fd2a 	bl	8002554 <HAL_RCC_GetPCLK1Freq>
 8003b00:	61b8      	str	r0, [r7, #24]
        break;
 8003b02:	e021      	b.n	8003b48 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b04:	f7fe fd48 	bl	8002598 <HAL_RCC_GetPCLK2Freq>
 8003b08:	61b8      	str	r0, [r7, #24]
        break;
 8003b0a:	e01d      	b.n	8003b48 <UART_SetConfig+0x354>
 8003b0c:	40013800 	.word	0x40013800
 8003b10:	40021000 	.word	0x40021000
 8003b14:	40004400 	.word	0x40004400
 8003b18:	40004800 	.word	0x40004800
 8003b1c:	40004c00 	.word	0x40004c00
 8003b20:	40005000 	.word	0x40005000
 8003b24:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b28:	4b1b      	ldr	r3, [pc, #108]	@ (8003b98 <UART_SetConfig+0x3a4>)
 8003b2a:	61bb      	str	r3, [r7, #24]
        break;
 8003b2c:	e00c      	b.n	8003b48 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b2e:	f7fe fcb1 	bl	8002494 <HAL_RCC_GetSysClockFreq>
 8003b32:	61b8      	str	r0, [r7, #24]
        break;
 8003b34:	e008      	b.n	8003b48 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b3a:	61bb      	str	r3, [r7, #24]
        break;
 8003b3c:	e004      	b.n	8003b48 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	77bb      	strb	r3, [r7, #30]
        break;
 8003b46:	bf00      	nop
    }

    if (pclk != 0U)
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d018      	beq.n	8003b80 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	085a      	lsrs	r2, r3, #1
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	441a      	add	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b60:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	2b0f      	cmp	r3, #15
 8003b66:	d909      	bls.n	8003b7c <UART_SetConfig+0x388>
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b6e:	d205      	bcs.n	8003b7c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	60da      	str	r2, [r3, #12]
 8003b7a:	e001      	b.n	8003b80 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003b8c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3720      	adds	r7, #32
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	007a1200 	.word	0x007a1200

08003b9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba8:	f003 0308 	and.w	r3, r3, #8
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00a      	beq.n	8003bc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00a      	beq.n	8003be8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00a      	beq.n	8003c0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0e:	f003 0304 	and.w	r3, r3, #4
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00a      	beq.n	8003c2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c30:	f003 0310 	and.w	r3, r3, #16
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00a      	beq.n	8003c4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c52:	f003 0320 	and.w	r3, r3, #32
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00a      	beq.n	8003c70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d01a      	beq.n	8003cb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c9a:	d10a      	bne.n	8003cb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00a      	beq.n	8003cd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	605a      	str	r2, [r3, #4]
  }
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b098      	sub	sp, #96	@ 0x60
 8003ce4:	af02      	add	r7, sp, #8
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003cf0:	f7fc ff86 	bl	8000c00 <HAL_GetTick>
 8003cf4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0308 	and.w	r3, r3, #8
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d12e      	bne.n	8003d62 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d04:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 f88c 	bl	8003e30 <UART_WaitOnFlagUntilTimeout>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d021      	beq.n	8003d62 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d26:	e853 3f00 	ldrex	r3, [r3]
 8003d2a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d32:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	461a      	mov	r2, r3
 8003d3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d3e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d44:	e841 2300 	strex	r3, r2, [r1]
 8003d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1e6      	bne.n	8003d1e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2220      	movs	r2, #32
 8003d54:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e062      	b.n	8003e28 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b04      	cmp	r3, #4
 8003d6e:	d149      	bne.n	8003e04 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d70:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f856 	bl	8003e30 <UART_WaitOnFlagUntilTimeout>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d03c      	beq.n	8003e04 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d92:	e853 3f00 	ldrex	r3, [r3]
 8003d96:	623b      	str	r3, [r7, #32]
   return(result);
 8003d98:	6a3b      	ldr	r3, [r7, #32]
 8003d9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	461a      	mov	r2, r3
 8003da6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003da8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003daa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003dae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003db0:	e841 2300 	strex	r3, r2, [r1]
 8003db4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1e6      	bne.n	8003d8a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	3308      	adds	r3, #8
 8003dc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	e853 3f00 	ldrex	r3, [r3]
 8003dca:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f023 0301 	bic.w	r3, r3, #1
 8003dd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	3308      	adds	r3, #8
 8003dda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ddc:	61fa      	str	r2, [r7, #28]
 8003dde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de0:	69b9      	ldr	r1, [r7, #24]
 8003de2:	69fa      	ldr	r2, [r7, #28]
 8003de4:	e841 2300 	strex	r3, r2, [r1]
 8003de8:	617b      	str	r3, [r7, #20]
   return(result);
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1e5      	bne.n	8003dbc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e011      	b.n	8003e28 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2220      	movs	r2, #32
 8003e08:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3758      	adds	r7, #88	@ 0x58
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	603b      	str	r3, [r7, #0]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e40:	e04f      	b.n	8003ee2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e48:	d04b      	beq.n	8003ee2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e4a:	f7fc fed9 	bl	8000c00 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d302      	bcc.n	8003e60 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e04e      	b.n	8003f02 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0304 	and.w	r3, r3, #4
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d037      	beq.n	8003ee2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	2b80      	cmp	r3, #128	@ 0x80
 8003e76:	d034      	beq.n	8003ee2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	2b40      	cmp	r3, #64	@ 0x40
 8003e7c:	d031      	beq.n	8003ee2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	69db      	ldr	r3, [r3, #28]
 8003e84:	f003 0308 	and.w	r3, r3, #8
 8003e88:	2b08      	cmp	r3, #8
 8003e8a:	d110      	bne.n	8003eae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2208      	movs	r2, #8
 8003e92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f000 f838 	bl	8003f0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2208      	movs	r2, #8
 8003e9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e029      	b.n	8003f02 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	69db      	ldr	r3, [r3, #28]
 8003eb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003eb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ebc:	d111      	bne.n	8003ee2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ec6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f000 f81e 	bl	8003f0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e00f      	b.n	8003f02 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	69da      	ldr	r2, [r3, #28]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	4013      	ands	r3, r2
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	bf0c      	ite	eq
 8003ef2:	2301      	moveq	r3, #1
 8003ef4:	2300      	movne	r3, #0
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	461a      	mov	r2, r3
 8003efa:	79fb      	ldrb	r3, [r7, #7]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d0a0      	beq.n	8003e42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b095      	sub	sp, #84	@ 0x54
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f1a:	e853 3f00 	ldrex	r3, [r3]
 8003f1e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f30:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f32:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f34:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f38:	e841 2300 	strex	r3, r2, [r1]
 8003f3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1e6      	bne.n	8003f12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	3308      	adds	r3, #8
 8003f4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	e853 3f00 	ldrex	r3, [r3]
 8003f52:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	f023 0301 	bic.w	r3, r3, #1
 8003f5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	3308      	adds	r3, #8
 8003f62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f6c:	e841 2300 	strex	r3, r2, [r1]
 8003f70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1e5      	bne.n	8003f44 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d118      	bne.n	8003fb2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	e853 3f00 	ldrex	r3, [r3]
 8003f8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	f023 0310 	bic.w	r3, r3, #16
 8003f94:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f9e:	61bb      	str	r3, [r7, #24]
 8003fa0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa2:	6979      	ldr	r1, [r7, #20]
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	e841 2300 	strex	r3, r2, [r1]
 8003faa:	613b      	str	r3, [r7, #16]
   return(result);
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1e6      	bne.n	8003f80 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003fc6:	bf00      	nop
 8003fc8:	3754      	adds	r7, #84	@ 0x54
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
	...

08003fd4 <siprintf>:
 8003fd4:	b40e      	push	{r1, r2, r3}
 8003fd6:	b500      	push	{lr}
 8003fd8:	b09c      	sub	sp, #112	@ 0x70
 8003fda:	ab1d      	add	r3, sp, #116	@ 0x74
 8003fdc:	9002      	str	r0, [sp, #8]
 8003fde:	9006      	str	r0, [sp, #24]
 8003fe0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003fe4:	4809      	ldr	r0, [pc, #36]	@ (800400c <siprintf+0x38>)
 8003fe6:	9107      	str	r1, [sp, #28]
 8003fe8:	9104      	str	r1, [sp, #16]
 8003fea:	4909      	ldr	r1, [pc, #36]	@ (8004010 <siprintf+0x3c>)
 8003fec:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ff0:	9105      	str	r1, [sp, #20]
 8003ff2:	6800      	ldr	r0, [r0, #0]
 8003ff4:	9301      	str	r3, [sp, #4]
 8003ff6:	a902      	add	r1, sp, #8
 8003ff8:	f000 f994 	bl	8004324 <_svfiprintf_r>
 8003ffc:	9b02      	ldr	r3, [sp, #8]
 8003ffe:	2200      	movs	r2, #0
 8004000:	701a      	strb	r2, [r3, #0]
 8004002:	b01c      	add	sp, #112	@ 0x70
 8004004:	f85d eb04 	ldr.w	lr, [sp], #4
 8004008:	b003      	add	sp, #12
 800400a:	4770      	bx	lr
 800400c:	2000000c 	.word	0x2000000c
 8004010:	ffff0208 	.word	0xffff0208

08004014 <memset>:
 8004014:	4402      	add	r2, r0
 8004016:	4603      	mov	r3, r0
 8004018:	4293      	cmp	r3, r2
 800401a:	d100      	bne.n	800401e <memset+0xa>
 800401c:	4770      	bx	lr
 800401e:	f803 1b01 	strb.w	r1, [r3], #1
 8004022:	e7f9      	b.n	8004018 <memset+0x4>

08004024 <__errno>:
 8004024:	4b01      	ldr	r3, [pc, #4]	@ (800402c <__errno+0x8>)
 8004026:	6818      	ldr	r0, [r3, #0]
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	2000000c 	.word	0x2000000c

08004030 <__libc_init_array>:
 8004030:	b570      	push	{r4, r5, r6, lr}
 8004032:	4d0d      	ldr	r5, [pc, #52]	@ (8004068 <__libc_init_array+0x38>)
 8004034:	4c0d      	ldr	r4, [pc, #52]	@ (800406c <__libc_init_array+0x3c>)
 8004036:	1b64      	subs	r4, r4, r5
 8004038:	10a4      	asrs	r4, r4, #2
 800403a:	2600      	movs	r6, #0
 800403c:	42a6      	cmp	r6, r4
 800403e:	d109      	bne.n	8004054 <__libc_init_array+0x24>
 8004040:	4d0b      	ldr	r5, [pc, #44]	@ (8004070 <__libc_init_array+0x40>)
 8004042:	4c0c      	ldr	r4, [pc, #48]	@ (8004074 <__libc_init_array+0x44>)
 8004044:	f000 fc66 	bl	8004914 <_init>
 8004048:	1b64      	subs	r4, r4, r5
 800404a:	10a4      	asrs	r4, r4, #2
 800404c:	2600      	movs	r6, #0
 800404e:	42a6      	cmp	r6, r4
 8004050:	d105      	bne.n	800405e <__libc_init_array+0x2e>
 8004052:	bd70      	pop	{r4, r5, r6, pc}
 8004054:	f855 3b04 	ldr.w	r3, [r5], #4
 8004058:	4798      	blx	r3
 800405a:	3601      	adds	r6, #1
 800405c:	e7ee      	b.n	800403c <__libc_init_array+0xc>
 800405e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004062:	4798      	blx	r3
 8004064:	3601      	adds	r6, #1
 8004066:	e7f2      	b.n	800404e <__libc_init_array+0x1e>
 8004068:	080049d4 	.word	0x080049d4
 800406c:	080049d4 	.word	0x080049d4
 8004070:	080049d4 	.word	0x080049d4
 8004074:	080049d8 	.word	0x080049d8

08004078 <__retarget_lock_acquire_recursive>:
 8004078:	4770      	bx	lr

0800407a <__retarget_lock_release_recursive>:
 800407a:	4770      	bx	lr

0800407c <_free_r>:
 800407c:	b538      	push	{r3, r4, r5, lr}
 800407e:	4605      	mov	r5, r0
 8004080:	2900      	cmp	r1, #0
 8004082:	d041      	beq.n	8004108 <_free_r+0x8c>
 8004084:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004088:	1f0c      	subs	r4, r1, #4
 800408a:	2b00      	cmp	r3, #0
 800408c:	bfb8      	it	lt
 800408e:	18e4      	addlt	r4, r4, r3
 8004090:	f000 f8e0 	bl	8004254 <__malloc_lock>
 8004094:	4a1d      	ldr	r2, [pc, #116]	@ (800410c <_free_r+0x90>)
 8004096:	6813      	ldr	r3, [r2, #0]
 8004098:	b933      	cbnz	r3, 80040a8 <_free_r+0x2c>
 800409a:	6063      	str	r3, [r4, #4]
 800409c:	6014      	str	r4, [r2, #0]
 800409e:	4628      	mov	r0, r5
 80040a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040a4:	f000 b8dc 	b.w	8004260 <__malloc_unlock>
 80040a8:	42a3      	cmp	r3, r4
 80040aa:	d908      	bls.n	80040be <_free_r+0x42>
 80040ac:	6820      	ldr	r0, [r4, #0]
 80040ae:	1821      	adds	r1, r4, r0
 80040b0:	428b      	cmp	r3, r1
 80040b2:	bf01      	itttt	eq
 80040b4:	6819      	ldreq	r1, [r3, #0]
 80040b6:	685b      	ldreq	r3, [r3, #4]
 80040b8:	1809      	addeq	r1, r1, r0
 80040ba:	6021      	streq	r1, [r4, #0]
 80040bc:	e7ed      	b.n	800409a <_free_r+0x1e>
 80040be:	461a      	mov	r2, r3
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	b10b      	cbz	r3, 80040c8 <_free_r+0x4c>
 80040c4:	42a3      	cmp	r3, r4
 80040c6:	d9fa      	bls.n	80040be <_free_r+0x42>
 80040c8:	6811      	ldr	r1, [r2, #0]
 80040ca:	1850      	adds	r0, r2, r1
 80040cc:	42a0      	cmp	r0, r4
 80040ce:	d10b      	bne.n	80040e8 <_free_r+0x6c>
 80040d0:	6820      	ldr	r0, [r4, #0]
 80040d2:	4401      	add	r1, r0
 80040d4:	1850      	adds	r0, r2, r1
 80040d6:	4283      	cmp	r3, r0
 80040d8:	6011      	str	r1, [r2, #0]
 80040da:	d1e0      	bne.n	800409e <_free_r+0x22>
 80040dc:	6818      	ldr	r0, [r3, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	6053      	str	r3, [r2, #4]
 80040e2:	4408      	add	r0, r1
 80040e4:	6010      	str	r0, [r2, #0]
 80040e6:	e7da      	b.n	800409e <_free_r+0x22>
 80040e8:	d902      	bls.n	80040f0 <_free_r+0x74>
 80040ea:	230c      	movs	r3, #12
 80040ec:	602b      	str	r3, [r5, #0]
 80040ee:	e7d6      	b.n	800409e <_free_r+0x22>
 80040f0:	6820      	ldr	r0, [r4, #0]
 80040f2:	1821      	adds	r1, r4, r0
 80040f4:	428b      	cmp	r3, r1
 80040f6:	bf04      	itt	eq
 80040f8:	6819      	ldreq	r1, [r3, #0]
 80040fa:	685b      	ldreq	r3, [r3, #4]
 80040fc:	6063      	str	r3, [r4, #4]
 80040fe:	bf04      	itt	eq
 8004100:	1809      	addeq	r1, r1, r0
 8004102:	6021      	streq	r1, [r4, #0]
 8004104:	6054      	str	r4, [r2, #4]
 8004106:	e7ca      	b.n	800409e <_free_r+0x22>
 8004108:	bd38      	pop	{r3, r4, r5, pc}
 800410a:	bf00      	nop
 800410c:	20000348 	.word	0x20000348

08004110 <sbrk_aligned>:
 8004110:	b570      	push	{r4, r5, r6, lr}
 8004112:	4e0f      	ldr	r6, [pc, #60]	@ (8004150 <sbrk_aligned+0x40>)
 8004114:	460c      	mov	r4, r1
 8004116:	6831      	ldr	r1, [r6, #0]
 8004118:	4605      	mov	r5, r0
 800411a:	b911      	cbnz	r1, 8004122 <sbrk_aligned+0x12>
 800411c:	f000 fba6 	bl	800486c <_sbrk_r>
 8004120:	6030      	str	r0, [r6, #0]
 8004122:	4621      	mov	r1, r4
 8004124:	4628      	mov	r0, r5
 8004126:	f000 fba1 	bl	800486c <_sbrk_r>
 800412a:	1c43      	adds	r3, r0, #1
 800412c:	d103      	bne.n	8004136 <sbrk_aligned+0x26>
 800412e:	f04f 34ff 	mov.w	r4, #4294967295
 8004132:	4620      	mov	r0, r4
 8004134:	bd70      	pop	{r4, r5, r6, pc}
 8004136:	1cc4      	adds	r4, r0, #3
 8004138:	f024 0403 	bic.w	r4, r4, #3
 800413c:	42a0      	cmp	r0, r4
 800413e:	d0f8      	beq.n	8004132 <sbrk_aligned+0x22>
 8004140:	1a21      	subs	r1, r4, r0
 8004142:	4628      	mov	r0, r5
 8004144:	f000 fb92 	bl	800486c <_sbrk_r>
 8004148:	3001      	adds	r0, #1
 800414a:	d1f2      	bne.n	8004132 <sbrk_aligned+0x22>
 800414c:	e7ef      	b.n	800412e <sbrk_aligned+0x1e>
 800414e:	bf00      	nop
 8004150:	20000344 	.word	0x20000344

08004154 <_malloc_r>:
 8004154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004158:	1ccd      	adds	r5, r1, #3
 800415a:	f025 0503 	bic.w	r5, r5, #3
 800415e:	3508      	adds	r5, #8
 8004160:	2d0c      	cmp	r5, #12
 8004162:	bf38      	it	cc
 8004164:	250c      	movcc	r5, #12
 8004166:	2d00      	cmp	r5, #0
 8004168:	4606      	mov	r6, r0
 800416a:	db01      	blt.n	8004170 <_malloc_r+0x1c>
 800416c:	42a9      	cmp	r1, r5
 800416e:	d904      	bls.n	800417a <_malloc_r+0x26>
 8004170:	230c      	movs	r3, #12
 8004172:	6033      	str	r3, [r6, #0]
 8004174:	2000      	movs	r0, #0
 8004176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800417a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004250 <_malloc_r+0xfc>
 800417e:	f000 f869 	bl	8004254 <__malloc_lock>
 8004182:	f8d8 3000 	ldr.w	r3, [r8]
 8004186:	461c      	mov	r4, r3
 8004188:	bb44      	cbnz	r4, 80041dc <_malloc_r+0x88>
 800418a:	4629      	mov	r1, r5
 800418c:	4630      	mov	r0, r6
 800418e:	f7ff ffbf 	bl	8004110 <sbrk_aligned>
 8004192:	1c43      	adds	r3, r0, #1
 8004194:	4604      	mov	r4, r0
 8004196:	d158      	bne.n	800424a <_malloc_r+0xf6>
 8004198:	f8d8 4000 	ldr.w	r4, [r8]
 800419c:	4627      	mov	r7, r4
 800419e:	2f00      	cmp	r7, #0
 80041a0:	d143      	bne.n	800422a <_malloc_r+0xd6>
 80041a2:	2c00      	cmp	r4, #0
 80041a4:	d04b      	beq.n	800423e <_malloc_r+0xea>
 80041a6:	6823      	ldr	r3, [r4, #0]
 80041a8:	4639      	mov	r1, r7
 80041aa:	4630      	mov	r0, r6
 80041ac:	eb04 0903 	add.w	r9, r4, r3
 80041b0:	f000 fb5c 	bl	800486c <_sbrk_r>
 80041b4:	4581      	cmp	r9, r0
 80041b6:	d142      	bne.n	800423e <_malloc_r+0xea>
 80041b8:	6821      	ldr	r1, [r4, #0]
 80041ba:	1a6d      	subs	r5, r5, r1
 80041bc:	4629      	mov	r1, r5
 80041be:	4630      	mov	r0, r6
 80041c0:	f7ff ffa6 	bl	8004110 <sbrk_aligned>
 80041c4:	3001      	adds	r0, #1
 80041c6:	d03a      	beq.n	800423e <_malloc_r+0xea>
 80041c8:	6823      	ldr	r3, [r4, #0]
 80041ca:	442b      	add	r3, r5
 80041cc:	6023      	str	r3, [r4, #0]
 80041ce:	f8d8 3000 	ldr.w	r3, [r8]
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	bb62      	cbnz	r2, 8004230 <_malloc_r+0xdc>
 80041d6:	f8c8 7000 	str.w	r7, [r8]
 80041da:	e00f      	b.n	80041fc <_malloc_r+0xa8>
 80041dc:	6822      	ldr	r2, [r4, #0]
 80041de:	1b52      	subs	r2, r2, r5
 80041e0:	d420      	bmi.n	8004224 <_malloc_r+0xd0>
 80041e2:	2a0b      	cmp	r2, #11
 80041e4:	d917      	bls.n	8004216 <_malloc_r+0xc2>
 80041e6:	1961      	adds	r1, r4, r5
 80041e8:	42a3      	cmp	r3, r4
 80041ea:	6025      	str	r5, [r4, #0]
 80041ec:	bf18      	it	ne
 80041ee:	6059      	strne	r1, [r3, #4]
 80041f0:	6863      	ldr	r3, [r4, #4]
 80041f2:	bf08      	it	eq
 80041f4:	f8c8 1000 	streq.w	r1, [r8]
 80041f8:	5162      	str	r2, [r4, r5]
 80041fa:	604b      	str	r3, [r1, #4]
 80041fc:	4630      	mov	r0, r6
 80041fe:	f000 f82f 	bl	8004260 <__malloc_unlock>
 8004202:	f104 000b 	add.w	r0, r4, #11
 8004206:	1d23      	adds	r3, r4, #4
 8004208:	f020 0007 	bic.w	r0, r0, #7
 800420c:	1ac2      	subs	r2, r0, r3
 800420e:	bf1c      	itt	ne
 8004210:	1a1b      	subne	r3, r3, r0
 8004212:	50a3      	strne	r3, [r4, r2]
 8004214:	e7af      	b.n	8004176 <_malloc_r+0x22>
 8004216:	6862      	ldr	r2, [r4, #4]
 8004218:	42a3      	cmp	r3, r4
 800421a:	bf0c      	ite	eq
 800421c:	f8c8 2000 	streq.w	r2, [r8]
 8004220:	605a      	strne	r2, [r3, #4]
 8004222:	e7eb      	b.n	80041fc <_malloc_r+0xa8>
 8004224:	4623      	mov	r3, r4
 8004226:	6864      	ldr	r4, [r4, #4]
 8004228:	e7ae      	b.n	8004188 <_malloc_r+0x34>
 800422a:	463c      	mov	r4, r7
 800422c:	687f      	ldr	r7, [r7, #4]
 800422e:	e7b6      	b.n	800419e <_malloc_r+0x4a>
 8004230:	461a      	mov	r2, r3
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	42a3      	cmp	r3, r4
 8004236:	d1fb      	bne.n	8004230 <_malloc_r+0xdc>
 8004238:	2300      	movs	r3, #0
 800423a:	6053      	str	r3, [r2, #4]
 800423c:	e7de      	b.n	80041fc <_malloc_r+0xa8>
 800423e:	230c      	movs	r3, #12
 8004240:	6033      	str	r3, [r6, #0]
 8004242:	4630      	mov	r0, r6
 8004244:	f000 f80c 	bl	8004260 <__malloc_unlock>
 8004248:	e794      	b.n	8004174 <_malloc_r+0x20>
 800424a:	6005      	str	r5, [r0, #0]
 800424c:	e7d6      	b.n	80041fc <_malloc_r+0xa8>
 800424e:	bf00      	nop
 8004250:	20000348 	.word	0x20000348

08004254 <__malloc_lock>:
 8004254:	4801      	ldr	r0, [pc, #4]	@ (800425c <__malloc_lock+0x8>)
 8004256:	f7ff bf0f 	b.w	8004078 <__retarget_lock_acquire_recursive>
 800425a:	bf00      	nop
 800425c:	20000340 	.word	0x20000340

08004260 <__malloc_unlock>:
 8004260:	4801      	ldr	r0, [pc, #4]	@ (8004268 <__malloc_unlock+0x8>)
 8004262:	f7ff bf0a 	b.w	800407a <__retarget_lock_release_recursive>
 8004266:	bf00      	nop
 8004268:	20000340 	.word	0x20000340

0800426c <__ssputs_r>:
 800426c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004270:	688e      	ldr	r6, [r1, #8]
 8004272:	461f      	mov	r7, r3
 8004274:	42be      	cmp	r6, r7
 8004276:	680b      	ldr	r3, [r1, #0]
 8004278:	4682      	mov	sl, r0
 800427a:	460c      	mov	r4, r1
 800427c:	4690      	mov	r8, r2
 800427e:	d82d      	bhi.n	80042dc <__ssputs_r+0x70>
 8004280:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004284:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004288:	d026      	beq.n	80042d8 <__ssputs_r+0x6c>
 800428a:	6965      	ldr	r5, [r4, #20]
 800428c:	6909      	ldr	r1, [r1, #16]
 800428e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004292:	eba3 0901 	sub.w	r9, r3, r1
 8004296:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800429a:	1c7b      	adds	r3, r7, #1
 800429c:	444b      	add	r3, r9
 800429e:	106d      	asrs	r5, r5, #1
 80042a0:	429d      	cmp	r5, r3
 80042a2:	bf38      	it	cc
 80042a4:	461d      	movcc	r5, r3
 80042a6:	0553      	lsls	r3, r2, #21
 80042a8:	d527      	bpl.n	80042fa <__ssputs_r+0x8e>
 80042aa:	4629      	mov	r1, r5
 80042ac:	f7ff ff52 	bl	8004154 <_malloc_r>
 80042b0:	4606      	mov	r6, r0
 80042b2:	b360      	cbz	r0, 800430e <__ssputs_r+0xa2>
 80042b4:	6921      	ldr	r1, [r4, #16]
 80042b6:	464a      	mov	r2, r9
 80042b8:	f000 fae8 	bl	800488c <memcpy>
 80042bc:	89a3      	ldrh	r3, [r4, #12]
 80042be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80042c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042c6:	81a3      	strh	r3, [r4, #12]
 80042c8:	6126      	str	r6, [r4, #16]
 80042ca:	6165      	str	r5, [r4, #20]
 80042cc:	444e      	add	r6, r9
 80042ce:	eba5 0509 	sub.w	r5, r5, r9
 80042d2:	6026      	str	r6, [r4, #0]
 80042d4:	60a5      	str	r5, [r4, #8]
 80042d6:	463e      	mov	r6, r7
 80042d8:	42be      	cmp	r6, r7
 80042da:	d900      	bls.n	80042de <__ssputs_r+0x72>
 80042dc:	463e      	mov	r6, r7
 80042de:	6820      	ldr	r0, [r4, #0]
 80042e0:	4632      	mov	r2, r6
 80042e2:	4641      	mov	r1, r8
 80042e4:	f000 faa8 	bl	8004838 <memmove>
 80042e8:	68a3      	ldr	r3, [r4, #8]
 80042ea:	1b9b      	subs	r3, r3, r6
 80042ec:	60a3      	str	r3, [r4, #8]
 80042ee:	6823      	ldr	r3, [r4, #0]
 80042f0:	4433      	add	r3, r6
 80042f2:	6023      	str	r3, [r4, #0]
 80042f4:	2000      	movs	r0, #0
 80042f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042fa:	462a      	mov	r2, r5
 80042fc:	f000 fad4 	bl	80048a8 <_realloc_r>
 8004300:	4606      	mov	r6, r0
 8004302:	2800      	cmp	r0, #0
 8004304:	d1e0      	bne.n	80042c8 <__ssputs_r+0x5c>
 8004306:	6921      	ldr	r1, [r4, #16]
 8004308:	4650      	mov	r0, sl
 800430a:	f7ff feb7 	bl	800407c <_free_r>
 800430e:	230c      	movs	r3, #12
 8004310:	f8ca 3000 	str.w	r3, [sl]
 8004314:	89a3      	ldrh	r3, [r4, #12]
 8004316:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800431a:	81a3      	strh	r3, [r4, #12]
 800431c:	f04f 30ff 	mov.w	r0, #4294967295
 8004320:	e7e9      	b.n	80042f6 <__ssputs_r+0x8a>
	...

08004324 <_svfiprintf_r>:
 8004324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004328:	4698      	mov	r8, r3
 800432a:	898b      	ldrh	r3, [r1, #12]
 800432c:	061b      	lsls	r3, r3, #24
 800432e:	b09d      	sub	sp, #116	@ 0x74
 8004330:	4607      	mov	r7, r0
 8004332:	460d      	mov	r5, r1
 8004334:	4614      	mov	r4, r2
 8004336:	d510      	bpl.n	800435a <_svfiprintf_r+0x36>
 8004338:	690b      	ldr	r3, [r1, #16]
 800433a:	b973      	cbnz	r3, 800435a <_svfiprintf_r+0x36>
 800433c:	2140      	movs	r1, #64	@ 0x40
 800433e:	f7ff ff09 	bl	8004154 <_malloc_r>
 8004342:	6028      	str	r0, [r5, #0]
 8004344:	6128      	str	r0, [r5, #16]
 8004346:	b930      	cbnz	r0, 8004356 <_svfiprintf_r+0x32>
 8004348:	230c      	movs	r3, #12
 800434a:	603b      	str	r3, [r7, #0]
 800434c:	f04f 30ff 	mov.w	r0, #4294967295
 8004350:	b01d      	add	sp, #116	@ 0x74
 8004352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004356:	2340      	movs	r3, #64	@ 0x40
 8004358:	616b      	str	r3, [r5, #20]
 800435a:	2300      	movs	r3, #0
 800435c:	9309      	str	r3, [sp, #36]	@ 0x24
 800435e:	2320      	movs	r3, #32
 8004360:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004364:	f8cd 800c 	str.w	r8, [sp, #12]
 8004368:	2330      	movs	r3, #48	@ 0x30
 800436a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004508 <_svfiprintf_r+0x1e4>
 800436e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004372:	f04f 0901 	mov.w	r9, #1
 8004376:	4623      	mov	r3, r4
 8004378:	469a      	mov	sl, r3
 800437a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800437e:	b10a      	cbz	r2, 8004384 <_svfiprintf_r+0x60>
 8004380:	2a25      	cmp	r2, #37	@ 0x25
 8004382:	d1f9      	bne.n	8004378 <_svfiprintf_r+0x54>
 8004384:	ebba 0b04 	subs.w	fp, sl, r4
 8004388:	d00b      	beq.n	80043a2 <_svfiprintf_r+0x7e>
 800438a:	465b      	mov	r3, fp
 800438c:	4622      	mov	r2, r4
 800438e:	4629      	mov	r1, r5
 8004390:	4638      	mov	r0, r7
 8004392:	f7ff ff6b 	bl	800426c <__ssputs_r>
 8004396:	3001      	adds	r0, #1
 8004398:	f000 80a7 	beq.w	80044ea <_svfiprintf_r+0x1c6>
 800439c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800439e:	445a      	add	r2, fp
 80043a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80043a2:	f89a 3000 	ldrb.w	r3, [sl]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f000 809f 	beq.w	80044ea <_svfiprintf_r+0x1c6>
 80043ac:	2300      	movs	r3, #0
 80043ae:	f04f 32ff 	mov.w	r2, #4294967295
 80043b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043b6:	f10a 0a01 	add.w	sl, sl, #1
 80043ba:	9304      	str	r3, [sp, #16]
 80043bc:	9307      	str	r3, [sp, #28]
 80043be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80043c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80043c4:	4654      	mov	r4, sl
 80043c6:	2205      	movs	r2, #5
 80043c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043cc:	484e      	ldr	r0, [pc, #312]	@ (8004508 <_svfiprintf_r+0x1e4>)
 80043ce:	f7fb ff07 	bl	80001e0 <memchr>
 80043d2:	9a04      	ldr	r2, [sp, #16]
 80043d4:	b9d8      	cbnz	r0, 800440e <_svfiprintf_r+0xea>
 80043d6:	06d0      	lsls	r0, r2, #27
 80043d8:	bf44      	itt	mi
 80043da:	2320      	movmi	r3, #32
 80043dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80043e0:	0711      	lsls	r1, r2, #28
 80043e2:	bf44      	itt	mi
 80043e4:	232b      	movmi	r3, #43	@ 0x2b
 80043e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80043ea:	f89a 3000 	ldrb.w	r3, [sl]
 80043ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80043f0:	d015      	beq.n	800441e <_svfiprintf_r+0xfa>
 80043f2:	9a07      	ldr	r2, [sp, #28]
 80043f4:	4654      	mov	r4, sl
 80043f6:	2000      	movs	r0, #0
 80043f8:	f04f 0c0a 	mov.w	ip, #10
 80043fc:	4621      	mov	r1, r4
 80043fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004402:	3b30      	subs	r3, #48	@ 0x30
 8004404:	2b09      	cmp	r3, #9
 8004406:	d94b      	bls.n	80044a0 <_svfiprintf_r+0x17c>
 8004408:	b1b0      	cbz	r0, 8004438 <_svfiprintf_r+0x114>
 800440a:	9207      	str	r2, [sp, #28]
 800440c:	e014      	b.n	8004438 <_svfiprintf_r+0x114>
 800440e:	eba0 0308 	sub.w	r3, r0, r8
 8004412:	fa09 f303 	lsl.w	r3, r9, r3
 8004416:	4313      	orrs	r3, r2
 8004418:	9304      	str	r3, [sp, #16]
 800441a:	46a2      	mov	sl, r4
 800441c:	e7d2      	b.n	80043c4 <_svfiprintf_r+0xa0>
 800441e:	9b03      	ldr	r3, [sp, #12]
 8004420:	1d19      	adds	r1, r3, #4
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	9103      	str	r1, [sp, #12]
 8004426:	2b00      	cmp	r3, #0
 8004428:	bfbb      	ittet	lt
 800442a:	425b      	neglt	r3, r3
 800442c:	f042 0202 	orrlt.w	r2, r2, #2
 8004430:	9307      	strge	r3, [sp, #28]
 8004432:	9307      	strlt	r3, [sp, #28]
 8004434:	bfb8      	it	lt
 8004436:	9204      	strlt	r2, [sp, #16]
 8004438:	7823      	ldrb	r3, [r4, #0]
 800443a:	2b2e      	cmp	r3, #46	@ 0x2e
 800443c:	d10a      	bne.n	8004454 <_svfiprintf_r+0x130>
 800443e:	7863      	ldrb	r3, [r4, #1]
 8004440:	2b2a      	cmp	r3, #42	@ 0x2a
 8004442:	d132      	bne.n	80044aa <_svfiprintf_r+0x186>
 8004444:	9b03      	ldr	r3, [sp, #12]
 8004446:	1d1a      	adds	r2, r3, #4
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	9203      	str	r2, [sp, #12]
 800444c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004450:	3402      	adds	r4, #2
 8004452:	9305      	str	r3, [sp, #20]
 8004454:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004518 <_svfiprintf_r+0x1f4>
 8004458:	7821      	ldrb	r1, [r4, #0]
 800445a:	2203      	movs	r2, #3
 800445c:	4650      	mov	r0, sl
 800445e:	f7fb febf 	bl	80001e0 <memchr>
 8004462:	b138      	cbz	r0, 8004474 <_svfiprintf_r+0x150>
 8004464:	9b04      	ldr	r3, [sp, #16]
 8004466:	eba0 000a 	sub.w	r0, r0, sl
 800446a:	2240      	movs	r2, #64	@ 0x40
 800446c:	4082      	lsls	r2, r0
 800446e:	4313      	orrs	r3, r2
 8004470:	3401      	adds	r4, #1
 8004472:	9304      	str	r3, [sp, #16]
 8004474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004478:	4824      	ldr	r0, [pc, #144]	@ (800450c <_svfiprintf_r+0x1e8>)
 800447a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800447e:	2206      	movs	r2, #6
 8004480:	f7fb feae 	bl	80001e0 <memchr>
 8004484:	2800      	cmp	r0, #0
 8004486:	d036      	beq.n	80044f6 <_svfiprintf_r+0x1d2>
 8004488:	4b21      	ldr	r3, [pc, #132]	@ (8004510 <_svfiprintf_r+0x1ec>)
 800448a:	bb1b      	cbnz	r3, 80044d4 <_svfiprintf_r+0x1b0>
 800448c:	9b03      	ldr	r3, [sp, #12]
 800448e:	3307      	adds	r3, #7
 8004490:	f023 0307 	bic.w	r3, r3, #7
 8004494:	3308      	adds	r3, #8
 8004496:	9303      	str	r3, [sp, #12]
 8004498:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800449a:	4433      	add	r3, r6
 800449c:	9309      	str	r3, [sp, #36]	@ 0x24
 800449e:	e76a      	b.n	8004376 <_svfiprintf_r+0x52>
 80044a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80044a4:	460c      	mov	r4, r1
 80044a6:	2001      	movs	r0, #1
 80044a8:	e7a8      	b.n	80043fc <_svfiprintf_r+0xd8>
 80044aa:	2300      	movs	r3, #0
 80044ac:	3401      	adds	r4, #1
 80044ae:	9305      	str	r3, [sp, #20]
 80044b0:	4619      	mov	r1, r3
 80044b2:	f04f 0c0a 	mov.w	ip, #10
 80044b6:	4620      	mov	r0, r4
 80044b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044bc:	3a30      	subs	r2, #48	@ 0x30
 80044be:	2a09      	cmp	r2, #9
 80044c0:	d903      	bls.n	80044ca <_svfiprintf_r+0x1a6>
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d0c6      	beq.n	8004454 <_svfiprintf_r+0x130>
 80044c6:	9105      	str	r1, [sp, #20]
 80044c8:	e7c4      	b.n	8004454 <_svfiprintf_r+0x130>
 80044ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80044ce:	4604      	mov	r4, r0
 80044d0:	2301      	movs	r3, #1
 80044d2:	e7f0      	b.n	80044b6 <_svfiprintf_r+0x192>
 80044d4:	ab03      	add	r3, sp, #12
 80044d6:	9300      	str	r3, [sp, #0]
 80044d8:	462a      	mov	r2, r5
 80044da:	4b0e      	ldr	r3, [pc, #56]	@ (8004514 <_svfiprintf_r+0x1f0>)
 80044dc:	a904      	add	r1, sp, #16
 80044de:	4638      	mov	r0, r7
 80044e0:	f3af 8000 	nop.w
 80044e4:	1c42      	adds	r2, r0, #1
 80044e6:	4606      	mov	r6, r0
 80044e8:	d1d6      	bne.n	8004498 <_svfiprintf_r+0x174>
 80044ea:	89ab      	ldrh	r3, [r5, #12]
 80044ec:	065b      	lsls	r3, r3, #25
 80044ee:	f53f af2d 	bmi.w	800434c <_svfiprintf_r+0x28>
 80044f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80044f4:	e72c      	b.n	8004350 <_svfiprintf_r+0x2c>
 80044f6:	ab03      	add	r3, sp, #12
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	462a      	mov	r2, r5
 80044fc:	4b05      	ldr	r3, [pc, #20]	@ (8004514 <_svfiprintf_r+0x1f0>)
 80044fe:	a904      	add	r1, sp, #16
 8004500:	4638      	mov	r0, r7
 8004502:	f000 f879 	bl	80045f8 <_printf_i>
 8004506:	e7ed      	b.n	80044e4 <_svfiprintf_r+0x1c0>
 8004508:	08004998 	.word	0x08004998
 800450c:	080049a2 	.word	0x080049a2
 8004510:	00000000 	.word	0x00000000
 8004514:	0800426d 	.word	0x0800426d
 8004518:	0800499e 	.word	0x0800499e

0800451c <_printf_common>:
 800451c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004520:	4616      	mov	r6, r2
 8004522:	4698      	mov	r8, r3
 8004524:	688a      	ldr	r2, [r1, #8]
 8004526:	690b      	ldr	r3, [r1, #16]
 8004528:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800452c:	4293      	cmp	r3, r2
 800452e:	bfb8      	it	lt
 8004530:	4613      	movlt	r3, r2
 8004532:	6033      	str	r3, [r6, #0]
 8004534:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004538:	4607      	mov	r7, r0
 800453a:	460c      	mov	r4, r1
 800453c:	b10a      	cbz	r2, 8004542 <_printf_common+0x26>
 800453e:	3301      	adds	r3, #1
 8004540:	6033      	str	r3, [r6, #0]
 8004542:	6823      	ldr	r3, [r4, #0]
 8004544:	0699      	lsls	r1, r3, #26
 8004546:	bf42      	ittt	mi
 8004548:	6833      	ldrmi	r3, [r6, #0]
 800454a:	3302      	addmi	r3, #2
 800454c:	6033      	strmi	r3, [r6, #0]
 800454e:	6825      	ldr	r5, [r4, #0]
 8004550:	f015 0506 	ands.w	r5, r5, #6
 8004554:	d106      	bne.n	8004564 <_printf_common+0x48>
 8004556:	f104 0a19 	add.w	sl, r4, #25
 800455a:	68e3      	ldr	r3, [r4, #12]
 800455c:	6832      	ldr	r2, [r6, #0]
 800455e:	1a9b      	subs	r3, r3, r2
 8004560:	42ab      	cmp	r3, r5
 8004562:	dc26      	bgt.n	80045b2 <_printf_common+0x96>
 8004564:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004568:	6822      	ldr	r2, [r4, #0]
 800456a:	3b00      	subs	r3, #0
 800456c:	bf18      	it	ne
 800456e:	2301      	movne	r3, #1
 8004570:	0692      	lsls	r2, r2, #26
 8004572:	d42b      	bmi.n	80045cc <_printf_common+0xb0>
 8004574:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004578:	4641      	mov	r1, r8
 800457a:	4638      	mov	r0, r7
 800457c:	47c8      	blx	r9
 800457e:	3001      	adds	r0, #1
 8004580:	d01e      	beq.n	80045c0 <_printf_common+0xa4>
 8004582:	6823      	ldr	r3, [r4, #0]
 8004584:	6922      	ldr	r2, [r4, #16]
 8004586:	f003 0306 	and.w	r3, r3, #6
 800458a:	2b04      	cmp	r3, #4
 800458c:	bf02      	ittt	eq
 800458e:	68e5      	ldreq	r5, [r4, #12]
 8004590:	6833      	ldreq	r3, [r6, #0]
 8004592:	1aed      	subeq	r5, r5, r3
 8004594:	68a3      	ldr	r3, [r4, #8]
 8004596:	bf0c      	ite	eq
 8004598:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800459c:	2500      	movne	r5, #0
 800459e:	4293      	cmp	r3, r2
 80045a0:	bfc4      	itt	gt
 80045a2:	1a9b      	subgt	r3, r3, r2
 80045a4:	18ed      	addgt	r5, r5, r3
 80045a6:	2600      	movs	r6, #0
 80045a8:	341a      	adds	r4, #26
 80045aa:	42b5      	cmp	r5, r6
 80045ac:	d11a      	bne.n	80045e4 <_printf_common+0xc8>
 80045ae:	2000      	movs	r0, #0
 80045b0:	e008      	b.n	80045c4 <_printf_common+0xa8>
 80045b2:	2301      	movs	r3, #1
 80045b4:	4652      	mov	r2, sl
 80045b6:	4641      	mov	r1, r8
 80045b8:	4638      	mov	r0, r7
 80045ba:	47c8      	blx	r9
 80045bc:	3001      	adds	r0, #1
 80045be:	d103      	bne.n	80045c8 <_printf_common+0xac>
 80045c0:	f04f 30ff 	mov.w	r0, #4294967295
 80045c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045c8:	3501      	adds	r5, #1
 80045ca:	e7c6      	b.n	800455a <_printf_common+0x3e>
 80045cc:	18e1      	adds	r1, r4, r3
 80045ce:	1c5a      	adds	r2, r3, #1
 80045d0:	2030      	movs	r0, #48	@ 0x30
 80045d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80045d6:	4422      	add	r2, r4
 80045d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80045dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80045e0:	3302      	adds	r3, #2
 80045e2:	e7c7      	b.n	8004574 <_printf_common+0x58>
 80045e4:	2301      	movs	r3, #1
 80045e6:	4622      	mov	r2, r4
 80045e8:	4641      	mov	r1, r8
 80045ea:	4638      	mov	r0, r7
 80045ec:	47c8      	blx	r9
 80045ee:	3001      	adds	r0, #1
 80045f0:	d0e6      	beq.n	80045c0 <_printf_common+0xa4>
 80045f2:	3601      	adds	r6, #1
 80045f4:	e7d9      	b.n	80045aa <_printf_common+0x8e>
	...

080045f8 <_printf_i>:
 80045f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045fc:	7e0f      	ldrb	r7, [r1, #24]
 80045fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004600:	2f78      	cmp	r7, #120	@ 0x78
 8004602:	4691      	mov	r9, r2
 8004604:	4680      	mov	r8, r0
 8004606:	460c      	mov	r4, r1
 8004608:	469a      	mov	sl, r3
 800460a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800460e:	d807      	bhi.n	8004620 <_printf_i+0x28>
 8004610:	2f62      	cmp	r7, #98	@ 0x62
 8004612:	d80a      	bhi.n	800462a <_printf_i+0x32>
 8004614:	2f00      	cmp	r7, #0
 8004616:	f000 80d2 	beq.w	80047be <_printf_i+0x1c6>
 800461a:	2f58      	cmp	r7, #88	@ 0x58
 800461c:	f000 80b9 	beq.w	8004792 <_printf_i+0x19a>
 8004620:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004624:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004628:	e03a      	b.n	80046a0 <_printf_i+0xa8>
 800462a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800462e:	2b15      	cmp	r3, #21
 8004630:	d8f6      	bhi.n	8004620 <_printf_i+0x28>
 8004632:	a101      	add	r1, pc, #4	@ (adr r1, 8004638 <_printf_i+0x40>)
 8004634:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004638:	08004691 	.word	0x08004691
 800463c:	080046a5 	.word	0x080046a5
 8004640:	08004621 	.word	0x08004621
 8004644:	08004621 	.word	0x08004621
 8004648:	08004621 	.word	0x08004621
 800464c:	08004621 	.word	0x08004621
 8004650:	080046a5 	.word	0x080046a5
 8004654:	08004621 	.word	0x08004621
 8004658:	08004621 	.word	0x08004621
 800465c:	08004621 	.word	0x08004621
 8004660:	08004621 	.word	0x08004621
 8004664:	080047a5 	.word	0x080047a5
 8004668:	080046cf 	.word	0x080046cf
 800466c:	0800475f 	.word	0x0800475f
 8004670:	08004621 	.word	0x08004621
 8004674:	08004621 	.word	0x08004621
 8004678:	080047c7 	.word	0x080047c7
 800467c:	08004621 	.word	0x08004621
 8004680:	080046cf 	.word	0x080046cf
 8004684:	08004621 	.word	0x08004621
 8004688:	08004621 	.word	0x08004621
 800468c:	08004767 	.word	0x08004767
 8004690:	6833      	ldr	r3, [r6, #0]
 8004692:	1d1a      	adds	r2, r3, #4
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	6032      	str	r2, [r6, #0]
 8004698:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800469c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80046a0:	2301      	movs	r3, #1
 80046a2:	e09d      	b.n	80047e0 <_printf_i+0x1e8>
 80046a4:	6833      	ldr	r3, [r6, #0]
 80046a6:	6820      	ldr	r0, [r4, #0]
 80046a8:	1d19      	adds	r1, r3, #4
 80046aa:	6031      	str	r1, [r6, #0]
 80046ac:	0606      	lsls	r6, r0, #24
 80046ae:	d501      	bpl.n	80046b4 <_printf_i+0xbc>
 80046b0:	681d      	ldr	r5, [r3, #0]
 80046b2:	e003      	b.n	80046bc <_printf_i+0xc4>
 80046b4:	0645      	lsls	r5, r0, #25
 80046b6:	d5fb      	bpl.n	80046b0 <_printf_i+0xb8>
 80046b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80046bc:	2d00      	cmp	r5, #0
 80046be:	da03      	bge.n	80046c8 <_printf_i+0xd0>
 80046c0:	232d      	movs	r3, #45	@ 0x2d
 80046c2:	426d      	negs	r5, r5
 80046c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046c8:	4859      	ldr	r0, [pc, #356]	@ (8004830 <_printf_i+0x238>)
 80046ca:	230a      	movs	r3, #10
 80046cc:	e011      	b.n	80046f2 <_printf_i+0xfa>
 80046ce:	6821      	ldr	r1, [r4, #0]
 80046d0:	6833      	ldr	r3, [r6, #0]
 80046d2:	0608      	lsls	r0, r1, #24
 80046d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80046d8:	d402      	bmi.n	80046e0 <_printf_i+0xe8>
 80046da:	0649      	lsls	r1, r1, #25
 80046dc:	bf48      	it	mi
 80046de:	b2ad      	uxthmi	r5, r5
 80046e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80046e2:	4853      	ldr	r0, [pc, #332]	@ (8004830 <_printf_i+0x238>)
 80046e4:	6033      	str	r3, [r6, #0]
 80046e6:	bf14      	ite	ne
 80046e8:	230a      	movne	r3, #10
 80046ea:	2308      	moveq	r3, #8
 80046ec:	2100      	movs	r1, #0
 80046ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80046f2:	6866      	ldr	r6, [r4, #4]
 80046f4:	60a6      	str	r6, [r4, #8]
 80046f6:	2e00      	cmp	r6, #0
 80046f8:	bfa2      	ittt	ge
 80046fa:	6821      	ldrge	r1, [r4, #0]
 80046fc:	f021 0104 	bicge.w	r1, r1, #4
 8004700:	6021      	strge	r1, [r4, #0]
 8004702:	b90d      	cbnz	r5, 8004708 <_printf_i+0x110>
 8004704:	2e00      	cmp	r6, #0
 8004706:	d04b      	beq.n	80047a0 <_printf_i+0x1a8>
 8004708:	4616      	mov	r6, r2
 800470a:	fbb5 f1f3 	udiv	r1, r5, r3
 800470e:	fb03 5711 	mls	r7, r3, r1, r5
 8004712:	5dc7      	ldrb	r7, [r0, r7]
 8004714:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004718:	462f      	mov	r7, r5
 800471a:	42bb      	cmp	r3, r7
 800471c:	460d      	mov	r5, r1
 800471e:	d9f4      	bls.n	800470a <_printf_i+0x112>
 8004720:	2b08      	cmp	r3, #8
 8004722:	d10b      	bne.n	800473c <_printf_i+0x144>
 8004724:	6823      	ldr	r3, [r4, #0]
 8004726:	07df      	lsls	r7, r3, #31
 8004728:	d508      	bpl.n	800473c <_printf_i+0x144>
 800472a:	6923      	ldr	r3, [r4, #16]
 800472c:	6861      	ldr	r1, [r4, #4]
 800472e:	4299      	cmp	r1, r3
 8004730:	bfde      	ittt	le
 8004732:	2330      	movle	r3, #48	@ 0x30
 8004734:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004738:	f106 36ff 	addle.w	r6, r6, #4294967295
 800473c:	1b92      	subs	r2, r2, r6
 800473e:	6122      	str	r2, [r4, #16]
 8004740:	f8cd a000 	str.w	sl, [sp]
 8004744:	464b      	mov	r3, r9
 8004746:	aa03      	add	r2, sp, #12
 8004748:	4621      	mov	r1, r4
 800474a:	4640      	mov	r0, r8
 800474c:	f7ff fee6 	bl	800451c <_printf_common>
 8004750:	3001      	adds	r0, #1
 8004752:	d14a      	bne.n	80047ea <_printf_i+0x1f2>
 8004754:	f04f 30ff 	mov.w	r0, #4294967295
 8004758:	b004      	add	sp, #16
 800475a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800475e:	6823      	ldr	r3, [r4, #0]
 8004760:	f043 0320 	orr.w	r3, r3, #32
 8004764:	6023      	str	r3, [r4, #0]
 8004766:	4833      	ldr	r0, [pc, #204]	@ (8004834 <_printf_i+0x23c>)
 8004768:	2778      	movs	r7, #120	@ 0x78
 800476a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800476e:	6823      	ldr	r3, [r4, #0]
 8004770:	6831      	ldr	r1, [r6, #0]
 8004772:	061f      	lsls	r7, r3, #24
 8004774:	f851 5b04 	ldr.w	r5, [r1], #4
 8004778:	d402      	bmi.n	8004780 <_printf_i+0x188>
 800477a:	065f      	lsls	r7, r3, #25
 800477c:	bf48      	it	mi
 800477e:	b2ad      	uxthmi	r5, r5
 8004780:	6031      	str	r1, [r6, #0]
 8004782:	07d9      	lsls	r1, r3, #31
 8004784:	bf44      	itt	mi
 8004786:	f043 0320 	orrmi.w	r3, r3, #32
 800478a:	6023      	strmi	r3, [r4, #0]
 800478c:	b11d      	cbz	r5, 8004796 <_printf_i+0x19e>
 800478e:	2310      	movs	r3, #16
 8004790:	e7ac      	b.n	80046ec <_printf_i+0xf4>
 8004792:	4827      	ldr	r0, [pc, #156]	@ (8004830 <_printf_i+0x238>)
 8004794:	e7e9      	b.n	800476a <_printf_i+0x172>
 8004796:	6823      	ldr	r3, [r4, #0]
 8004798:	f023 0320 	bic.w	r3, r3, #32
 800479c:	6023      	str	r3, [r4, #0]
 800479e:	e7f6      	b.n	800478e <_printf_i+0x196>
 80047a0:	4616      	mov	r6, r2
 80047a2:	e7bd      	b.n	8004720 <_printf_i+0x128>
 80047a4:	6833      	ldr	r3, [r6, #0]
 80047a6:	6825      	ldr	r5, [r4, #0]
 80047a8:	6961      	ldr	r1, [r4, #20]
 80047aa:	1d18      	adds	r0, r3, #4
 80047ac:	6030      	str	r0, [r6, #0]
 80047ae:	062e      	lsls	r6, r5, #24
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	d501      	bpl.n	80047b8 <_printf_i+0x1c0>
 80047b4:	6019      	str	r1, [r3, #0]
 80047b6:	e002      	b.n	80047be <_printf_i+0x1c6>
 80047b8:	0668      	lsls	r0, r5, #25
 80047ba:	d5fb      	bpl.n	80047b4 <_printf_i+0x1bc>
 80047bc:	8019      	strh	r1, [r3, #0]
 80047be:	2300      	movs	r3, #0
 80047c0:	6123      	str	r3, [r4, #16]
 80047c2:	4616      	mov	r6, r2
 80047c4:	e7bc      	b.n	8004740 <_printf_i+0x148>
 80047c6:	6833      	ldr	r3, [r6, #0]
 80047c8:	1d1a      	adds	r2, r3, #4
 80047ca:	6032      	str	r2, [r6, #0]
 80047cc:	681e      	ldr	r6, [r3, #0]
 80047ce:	6862      	ldr	r2, [r4, #4]
 80047d0:	2100      	movs	r1, #0
 80047d2:	4630      	mov	r0, r6
 80047d4:	f7fb fd04 	bl	80001e0 <memchr>
 80047d8:	b108      	cbz	r0, 80047de <_printf_i+0x1e6>
 80047da:	1b80      	subs	r0, r0, r6
 80047dc:	6060      	str	r0, [r4, #4]
 80047de:	6863      	ldr	r3, [r4, #4]
 80047e0:	6123      	str	r3, [r4, #16]
 80047e2:	2300      	movs	r3, #0
 80047e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047e8:	e7aa      	b.n	8004740 <_printf_i+0x148>
 80047ea:	6923      	ldr	r3, [r4, #16]
 80047ec:	4632      	mov	r2, r6
 80047ee:	4649      	mov	r1, r9
 80047f0:	4640      	mov	r0, r8
 80047f2:	47d0      	blx	sl
 80047f4:	3001      	adds	r0, #1
 80047f6:	d0ad      	beq.n	8004754 <_printf_i+0x15c>
 80047f8:	6823      	ldr	r3, [r4, #0]
 80047fa:	079b      	lsls	r3, r3, #30
 80047fc:	d413      	bmi.n	8004826 <_printf_i+0x22e>
 80047fe:	68e0      	ldr	r0, [r4, #12]
 8004800:	9b03      	ldr	r3, [sp, #12]
 8004802:	4298      	cmp	r0, r3
 8004804:	bfb8      	it	lt
 8004806:	4618      	movlt	r0, r3
 8004808:	e7a6      	b.n	8004758 <_printf_i+0x160>
 800480a:	2301      	movs	r3, #1
 800480c:	4632      	mov	r2, r6
 800480e:	4649      	mov	r1, r9
 8004810:	4640      	mov	r0, r8
 8004812:	47d0      	blx	sl
 8004814:	3001      	adds	r0, #1
 8004816:	d09d      	beq.n	8004754 <_printf_i+0x15c>
 8004818:	3501      	adds	r5, #1
 800481a:	68e3      	ldr	r3, [r4, #12]
 800481c:	9903      	ldr	r1, [sp, #12]
 800481e:	1a5b      	subs	r3, r3, r1
 8004820:	42ab      	cmp	r3, r5
 8004822:	dcf2      	bgt.n	800480a <_printf_i+0x212>
 8004824:	e7eb      	b.n	80047fe <_printf_i+0x206>
 8004826:	2500      	movs	r5, #0
 8004828:	f104 0619 	add.w	r6, r4, #25
 800482c:	e7f5      	b.n	800481a <_printf_i+0x222>
 800482e:	bf00      	nop
 8004830:	080049a9 	.word	0x080049a9
 8004834:	080049ba 	.word	0x080049ba

08004838 <memmove>:
 8004838:	4288      	cmp	r0, r1
 800483a:	b510      	push	{r4, lr}
 800483c:	eb01 0402 	add.w	r4, r1, r2
 8004840:	d902      	bls.n	8004848 <memmove+0x10>
 8004842:	4284      	cmp	r4, r0
 8004844:	4623      	mov	r3, r4
 8004846:	d807      	bhi.n	8004858 <memmove+0x20>
 8004848:	1e43      	subs	r3, r0, #1
 800484a:	42a1      	cmp	r1, r4
 800484c:	d008      	beq.n	8004860 <memmove+0x28>
 800484e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004852:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004856:	e7f8      	b.n	800484a <memmove+0x12>
 8004858:	4402      	add	r2, r0
 800485a:	4601      	mov	r1, r0
 800485c:	428a      	cmp	r2, r1
 800485e:	d100      	bne.n	8004862 <memmove+0x2a>
 8004860:	bd10      	pop	{r4, pc}
 8004862:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004866:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800486a:	e7f7      	b.n	800485c <memmove+0x24>

0800486c <_sbrk_r>:
 800486c:	b538      	push	{r3, r4, r5, lr}
 800486e:	4d06      	ldr	r5, [pc, #24]	@ (8004888 <_sbrk_r+0x1c>)
 8004870:	2300      	movs	r3, #0
 8004872:	4604      	mov	r4, r0
 8004874:	4608      	mov	r0, r1
 8004876:	602b      	str	r3, [r5, #0]
 8004878:	f7fc f8f6 	bl	8000a68 <_sbrk>
 800487c:	1c43      	adds	r3, r0, #1
 800487e:	d102      	bne.n	8004886 <_sbrk_r+0x1a>
 8004880:	682b      	ldr	r3, [r5, #0]
 8004882:	b103      	cbz	r3, 8004886 <_sbrk_r+0x1a>
 8004884:	6023      	str	r3, [r4, #0]
 8004886:	bd38      	pop	{r3, r4, r5, pc}
 8004888:	2000033c 	.word	0x2000033c

0800488c <memcpy>:
 800488c:	440a      	add	r2, r1
 800488e:	4291      	cmp	r1, r2
 8004890:	f100 33ff 	add.w	r3, r0, #4294967295
 8004894:	d100      	bne.n	8004898 <memcpy+0xc>
 8004896:	4770      	bx	lr
 8004898:	b510      	push	{r4, lr}
 800489a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800489e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048a2:	4291      	cmp	r1, r2
 80048a4:	d1f9      	bne.n	800489a <memcpy+0xe>
 80048a6:	bd10      	pop	{r4, pc}

080048a8 <_realloc_r>:
 80048a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048ac:	4680      	mov	r8, r0
 80048ae:	4615      	mov	r5, r2
 80048b0:	460c      	mov	r4, r1
 80048b2:	b921      	cbnz	r1, 80048be <_realloc_r+0x16>
 80048b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048b8:	4611      	mov	r1, r2
 80048ba:	f7ff bc4b 	b.w	8004154 <_malloc_r>
 80048be:	b92a      	cbnz	r2, 80048cc <_realloc_r+0x24>
 80048c0:	f7ff fbdc 	bl	800407c <_free_r>
 80048c4:	2400      	movs	r4, #0
 80048c6:	4620      	mov	r0, r4
 80048c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048cc:	f000 f81a 	bl	8004904 <_malloc_usable_size_r>
 80048d0:	4285      	cmp	r5, r0
 80048d2:	4606      	mov	r6, r0
 80048d4:	d802      	bhi.n	80048dc <_realloc_r+0x34>
 80048d6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80048da:	d8f4      	bhi.n	80048c6 <_realloc_r+0x1e>
 80048dc:	4629      	mov	r1, r5
 80048de:	4640      	mov	r0, r8
 80048e0:	f7ff fc38 	bl	8004154 <_malloc_r>
 80048e4:	4607      	mov	r7, r0
 80048e6:	2800      	cmp	r0, #0
 80048e8:	d0ec      	beq.n	80048c4 <_realloc_r+0x1c>
 80048ea:	42b5      	cmp	r5, r6
 80048ec:	462a      	mov	r2, r5
 80048ee:	4621      	mov	r1, r4
 80048f0:	bf28      	it	cs
 80048f2:	4632      	movcs	r2, r6
 80048f4:	f7ff ffca 	bl	800488c <memcpy>
 80048f8:	4621      	mov	r1, r4
 80048fa:	4640      	mov	r0, r8
 80048fc:	f7ff fbbe 	bl	800407c <_free_r>
 8004900:	463c      	mov	r4, r7
 8004902:	e7e0      	b.n	80048c6 <_realloc_r+0x1e>

08004904 <_malloc_usable_size_r>:
 8004904:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004908:	1f18      	subs	r0, r3, #4
 800490a:	2b00      	cmp	r3, #0
 800490c:	bfbc      	itt	lt
 800490e:	580b      	ldrlt	r3, [r1, r0]
 8004910:	18c0      	addlt	r0, r0, r3
 8004912:	4770      	bx	lr

08004914 <_init>:
 8004914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004916:	bf00      	nop
 8004918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800491a:	bc08      	pop	{r3}
 800491c:	469e      	mov	lr, r3
 800491e:	4770      	bx	lr

08004920 <_fini>:
 8004920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004922:	bf00      	nop
 8004924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004926:	bc08      	pop	{r3}
 8004928:	469e      	mov	lr, r3
 800492a:	4770      	bx	lr
