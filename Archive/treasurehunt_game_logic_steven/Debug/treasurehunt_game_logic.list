
treasurehunt_game_logic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025ec  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000594  0800278c  0800278c  0000378c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d20  08002d20  000040c0  2**0
                  CONTENTS
  4 .ARM          00000008  08002d20  08002d20  00003d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d28  08002d28  000040c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d28  08002d28  00003d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002d2c  08002d2c  00003d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c0  20000000  08002d30  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000040c0  2**0
                  CONTENTS
 10 .bss          00000380  200000c0  200000c0  000040c0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000440  20000440  000040c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000040c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002677  00000000  00000000  000040f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000b9b  00000000  00000000  00006767  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000248  00000000  00000000  00007308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000193  00000000  00000000  00007550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016f7e  00000000  00000000  000076e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000306e  00000000  00000000  0001e661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00078ec4  00000000  00000000  000216cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0009a593  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000013f4  00000000  00000000  0009a5d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000080  00000000  00000000  0009b9cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000c0 	.word	0x200000c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002774 	.word	0x08002774

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000c4 	.word	0x200000c4
 80001dc:	08002774 	.word	0x08002774

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <check_servo_choice>:
 */

#include "gamestate.h"


int check_servo_choice(int correct_servos[], int servo_choice, int total_servos){
 80002a0:	b480      	push	{r7}
 80002a2:	b087      	sub	sp, #28
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	60f8      	str	r0, [r7, #12]
 80002a8:	60b9      	str	r1, [r7, #8]
 80002aa:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < total_servos; i++){
 80002ac:	2300      	movs	r3, #0
 80002ae:	617b      	str	r3, [r7, #20]
 80002b0:	e00c      	b.n	80002cc <check_servo_choice+0x2c>
		if(correct_servos[i] == servo_choice){
 80002b2:	697b      	ldr	r3, [r7, #20]
 80002b4:	009b      	lsls	r3, r3, #2
 80002b6:	68fa      	ldr	r2, [r7, #12]
 80002b8:	4413      	add	r3, r2
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	68ba      	ldr	r2, [r7, #8]
 80002be:	429a      	cmp	r2, r3
 80002c0:	d101      	bne.n	80002c6 <check_servo_choice+0x26>
	return(1);
 80002c2:	2301      	movs	r3, #1
 80002c4:	e007      	b.n	80002d6 <check_servo_choice+0x36>
	for(int i = 0; i < total_servos; i++){
 80002c6:	697b      	ldr	r3, [r7, #20]
 80002c8:	3301      	adds	r3, #1
 80002ca:	617b      	str	r3, [r7, #20]
 80002cc:	697a      	ldr	r2, [r7, #20]
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	429a      	cmp	r2, r3
 80002d2:	dbee      	blt.n	80002b2 <check_servo_choice+0x12>
        }
    }
    return 0;  // No match found after checking all
 80002d4:	2300      	movs	r3, #0
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	371c      	adds	r7, #28
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
	...

080002e4 <led_set>:
#define LED_OUTPUT 0x5555
//#define pattern 0b10001010
extern volatile uint8_t* lights; //external as in two scripts.

void led_set(uint8_t pattern)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
 80002ec:	71fb      	strb	r3, [r7, #7]
    // Point to upper byte of ODR (PE8â€“PE15)
    //uint8_t* lights = ((uint8_t*)&(GPIOE->ODR)) + 1;

    *lights = pattern;
 80002ee:	4b05      	ldr	r3, [pc, #20]	@ (8000304 <led_set+0x20>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	79fa      	ldrb	r2, [r7, #7]
 80002f4:	701a      	strb	r2, [r3, #0]
}
 80002f6:	bf00      	nop
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	20000060 	.word	0x20000060

08000308 <main>:
			.peek_threshold = 10,
			.pending_peek = 0
  };


int main(void) {
 8000308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800030a:	b08f      	sub	sp, #60	@ 0x3c
 800030c:	af0a      	add	r7, sp, #40	@ 0x28
  // For Testing =======
  char* command = NULL;
 800030e:	2300      	movs	r3, #0
 8000310:	60fb      	str	r3, [r7, #12]
  char* follow = NULL;
 8000312:	2300      	movs	r3, #0
 8000314:	60bb      	str	r3, [r7, #8]
  // For Testing =======

  enableUSART1();
 8000316:	f000 fb17 	bl	8000948 <enableUSART1>
  enableUARTInterrupts();
 800031a:	f000 fb69 	bl	80009f0 <enableUARTInterrupts>
  clear_screen();
 800031e:	f000 fd0d 	bl	8000d3c <clear_screen>



  send_string("hello world");
 8000322:	4886      	ldr	r0, [pc, #536]	@ (800053c <main+0x234>)
 8000324:	f000 fbc0 	bl	8000aa8 <send_string>
  clear_screen();
 8000328:	f000 fd08 	bl	8000d3c <clear_screen>



  //Count item numbers
  int count = 0;
 800032c:	2300      	movs	r3, #0
 800032e:	607b      	str	r3, [r7, #4]
  for (int i = 0; i < 6; i++) {
 8000330:	2300      	movs	r3, #0
 8000332:	603b      	str	r3, [r7, #0]
 8000334:	e00b      	b.n	800034e <main+0x46>
      if (game.correct_servos[i] != 0) {
 8000336:	4a82      	ldr	r2, [pc, #520]	@ (8000540 <main+0x238>)
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800033e:	2b00      	cmp	r3, #0
 8000340:	d002      	beq.n	8000348 <main+0x40>
          count++;
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	3301      	adds	r3, #1
 8000346:	607b      	str	r3, [r7, #4]
  for (int i = 0; i < 6; i++) {
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	3301      	adds	r3, #1
 800034c:	603b      	str	r3, [r7, #0]
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	2b05      	cmp	r3, #5
 8000352:	ddf0      	ble.n	8000336 <main+0x2e>
      }
  }
  game.total_items_to_find = count;
 8000354:	4a7a      	ldr	r2, [pc, #488]	@ (8000540 <main+0x238>)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	6353      	str	r3, [r2, #52]	@ 0x34



  send_string("Game Initialised\r\n");
 800035a:	487a      	ldr	r0, [pc, #488]	@ (8000544 <main+0x23c>)
 800035c:	f000 fba4 	bl	8000aa8 <send_string>
  // print_game_triggers(triggers);

  // triggers.touchpad_pressed = touchpad_interrupt;

  // Loop forever
  enableLEDs();
 8000360:	f000 fb2c 	bl	80009bc <enableLEDs>
      		set_timer2(1000*8);
 8000364:	f44f 50fa 	mov.w	r0, #8000	@ 0x1f40
 8000368:	f000 fe5e 	bl	8001028 <set_timer2>
      		timer2_set_callback(LEDflash);
 800036c:	4876      	ldr	r0, [pc, #472]	@ (8000548 <main+0x240>)
 800036e:	f000 fe4b 	bl	8001008 <timer2_set_callback>
      		enableTimer2();  // enable timer
 8000372:	f000 fe69 	bl	8001048 <enableTimer2>

  while (game.game_over == 0) {
 8000376:	e27a      	b.n	800086e <main+0x566>
    if (message_complete == 1) {
 8000378:	4b74      	ldr	r3, [pc, #464]	@ (800054c <main+0x244>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	2b01      	cmp	r3, #1
 800037e:	d10d      	bne.n	800039c <main+0x94>
      command = strtok((char*)string, " ");  // load commmand
 8000380:	4973      	ldr	r1, [pc, #460]	@ (8000550 <main+0x248>)
 8000382:	4874      	ldr	r0, [pc, #464]	@ (8000554 <main+0x24c>)
 8000384:	f001 f952 	bl	800162c <strtok>
 8000388:	4603      	mov	r3, r0
 800038a:	60fb      	str	r3, [r7, #12]
      follow = strtok(NULL, "");             // load
 800038c:	4972      	ldr	r1, [pc, #456]	@ (8000558 <main+0x250>)
 800038e:	2000      	movs	r0, #0
 8000390:	f001 f94c 	bl	800162c <strtok>
 8000394:	4603      	mov	r3, r0
 8000396:	60bb      	str	r3, [r7, #8]
      //		      message_complete = 0;  // need to reset this for
      //next message
      clear_screen();
 8000398:	f000 fcd0 	bl	8000d3c <clear_screen>
    }
    if (command != NULL && message_complete == 1) {
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	f000 810f 	beq.w	80005c2 <main+0x2ba>
 80003a4:	4b69      	ldr	r3, [pc, #420]	@ (800054c <main+0x244>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	2b01      	cmp	r3, #1
 80003aa:	f040 810a 	bne.w	80005c2 <main+0x2ba>
      if (strcmp(command, "touchpad") == 0 && valid_period_check(follow) != 0) {
 80003ae:	496b      	ldr	r1, [pc, #428]	@ (800055c <main+0x254>)
 80003b0:	68f8      	ldr	r0, [r7, #12]
 80003b2:	f7ff ff15 	bl	80001e0 <strcmp>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d128      	bne.n	800040e <main+0x106>
 80003bc:	68b8      	ldr	r0, [r7, #8]
 80003be:	f000 fcc7 	bl	8000d50 <valid_period_check>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d022      	beq.n	800040e <main+0x106>

        sprintf(feedback_string, "Touchpad set to: %s \r\n", follow);
 80003c8:	68ba      	ldr	r2, [r7, #8]
 80003ca:	4965      	ldr	r1, [pc, #404]	@ (8000560 <main+0x258>)
 80003cc:	4865      	ldr	r0, [pc, #404]	@ (8000564 <main+0x25c>)
 80003ce:	f001 f8c1 	bl	8001554 <siprintf>
        send_string(feedback_string);
 80003d2:	4864      	ldr	r0, [pc, #400]	@ (8000564 <main+0x25c>)
 80003d4:	f000 fb68 	bl	8000aa8 <send_string>
        triggers.touchpad_pressed = atoi(follow);
 80003d8:	68b8      	ldr	r0, [r7, #8]
 80003da:	f000 ff14 	bl	8001206 <atoi>
 80003de:	4603      	mov	r3, r0
 80003e0:	4a61      	ldr	r2, [pc, #388]	@ (8000568 <main+0x260>)
 80003e2:	6013      	str	r3, [r2, #0]
        memset(feedback_string, 0, BUFFER);
 80003e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80003e8:	2100      	movs	r1, #0
 80003ea:	485e      	ldr	r0, [pc, #376]	@ (8000564 <main+0x25c>)
 80003ec:	f001 f915 	bl	800161a <memset>
        send_string("Touchpad set to ");
 80003f0:	485e      	ldr	r0, [pc, #376]	@ (800056c <main+0x264>)
 80003f2:	f000 fb59 	bl	8000aa8 <send_string>
        send_string_buffer(triggers.touchpad_pressed);
 80003f6:	4b5c      	ldr	r3, [pc, #368]	@ (8000568 <main+0x260>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4618      	mov	r0, r3
 80003fc:	f000 fb74 	bl	8000ae8 <send_string_buffer>
        send_string("\r\n");
 8000400:	485b      	ldr	r0, [pc, #364]	@ (8000570 <main+0x268>)
 8000402:	f000 fb51 	bl	8000aa8 <send_string>
        //		          print_game_triggers(triggers);
        message_complete = 0;
 8000406:	4b51      	ldr	r3, [pc, #324]	@ (800054c <main+0x244>)
 8000408:	2200      	movs	r2, #0
 800040a:	601a      	str	r2, [r3, #0]
      if (strcmp(command, "touchpad") == 0 && valid_period_check(follow) != 0) {
 800040c:	e0ca      	b.n	80005a4 <main+0x29c>

      } else if (strcmp(command, "servo") == 0 &&
 800040e:	4959      	ldr	r1, [pc, #356]	@ (8000574 <main+0x26c>)
 8000410:	68f8      	ldr	r0, [r7, #12]
 8000412:	f7ff fee5 	bl	80001e0 <strcmp>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d12e      	bne.n	800047a <main+0x172>
                 valid_period_check(follow) != 0) {
 800041c:	68b8      	ldr	r0, [r7, #8]
 800041e:	f000 fc97 	bl	8000d50 <valid_period_check>
 8000422:	4603      	mov	r3, r0
      } else if (strcmp(command, "servo") == 0 &&
 8000424:	2b00      	cmp	r3, #0
 8000426:	d028      	beq.n	800047a <main+0x172>

        sprintf(feedback_string, "Servo angle set to: %s \r\n", follow);
 8000428:	68ba      	ldr	r2, [r7, #8]
 800042a:	4953      	ldr	r1, [pc, #332]	@ (8000578 <main+0x270>)
 800042c:	484d      	ldr	r0, [pc, #308]	@ (8000564 <main+0x25c>)
 800042e:	f001 f891 	bl	8001554 <siprintf>
        send_string(feedback_string);
 8000432:	484c      	ldr	r0, [pc, #304]	@ (8000564 <main+0x25c>)
 8000434:	f000 fb38 	bl	8000aa8 <send_string>
        triggers.servo_angle = atoi(follow);
 8000438:	68b8      	ldr	r0, [r7, #8]
 800043a:	f000 fee4 	bl	8001206 <atoi>
 800043e:	4603      	mov	r3, r0
 8000440:	4a49      	ldr	r2, [pc, #292]	@ (8000568 <main+0x260>)
 8000442:	6113      	str	r3, [r2, #16]
        triggers.trimpot_value = atoi(follow);  // Remove this later
 8000444:	68b8      	ldr	r0, [r7, #8]
 8000446:	f000 fede 	bl	8001206 <atoi>
 800044a:	4603      	mov	r3, r0
 800044c:	4a46      	ldr	r2, [pc, #280]	@ (8000568 <main+0x260>)
 800044e:	6153      	str	r3, [r2, #20]
        memset(feedback_string, 0, BUFFER);
 8000450:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000454:	2100      	movs	r1, #0
 8000456:	4843      	ldr	r0, [pc, #268]	@ (8000564 <main+0x25c>)
 8000458:	f001 f8df 	bl	800161a <memset>
        send_string("Servo set to ");
 800045c:	4847      	ldr	r0, [pc, #284]	@ (800057c <main+0x274>)
 800045e:	f000 fb23 	bl	8000aa8 <send_string>
        send_string_buffer(triggers.servo_angle);
 8000462:	4b41      	ldr	r3, [pc, #260]	@ (8000568 <main+0x260>)
 8000464:	691b      	ldr	r3, [r3, #16]
 8000466:	4618      	mov	r0, r3
 8000468:	f000 fb3e 	bl	8000ae8 <send_string_buffer>
        send_string("\r\n\r\n");
 800046c:	4844      	ldr	r0, [pc, #272]	@ (8000580 <main+0x278>)
 800046e:	f000 fb1b 	bl	8000aa8 <send_string>
        // print_game_triggers(triggers);
        message_complete = 0;
 8000472:	4b36      	ldr	r3, [pc, #216]	@ (800054c <main+0x244>)
 8000474:	2200      	movs	r2, #0
 8000476:	601a      	str	r2, [r3, #0]
                 valid_period_check(follow) != 0) {
 8000478:	e094      	b.n	80005a4 <main+0x29c>

      } else if (strcmp(command, "trimpot") == 0 &&
 800047a:	4942      	ldr	r1, [pc, #264]	@ (8000584 <main+0x27c>)
 800047c:	68f8      	ldr	r0, [r7, #12]
 800047e:	f7ff feaf 	bl	80001e0 <strcmp>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d128      	bne.n	80004da <main+0x1d2>
                 valid_period_check(follow) != 0) {
 8000488:	68b8      	ldr	r0, [r7, #8]
 800048a:	f000 fc61 	bl	8000d50 <valid_period_check>
 800048e:	4603      	mov	r3, r0
      } else if (strcmp(command, "trimpot") == 0 &&
 8000490:	2b00      	cmp	r3, #0
 8000492:	d022      	beq.n	80004da <main+0x1d2>

        sprintf(feedback_string, "Trimpot Value set to: %s \r\n", follow);
 8000494:	68ba      	ldr	r2, [r7, #8]
 8000496:	493c      	ldr	r1, [pc, #240]	@ (8000588 <main+0x280>)
 8000498:	4832      	ldr	r0, [pc, #200]	@ (8000564 <main+0x25c>)
 800049a:	f001 f85b 	bl	8001554 <siprintf>
        send_string(feedback_string);
 800049e:	4831      	ldr	r0, [pc, #196]	@ (8000564 <main+0x25c>)
 80004a0:	f000 fb02 	bl	8000aa8 <send_string>
        triggers.trimpot_value = atoi(follow);
 80004a4:	68b8      	ldr	r0, [r7, #8]
 80004a6:	f000 feae 	bl	8001206 <atoi>
 80004aa:	4603      	mov	r3, r0
 80004ac:	4a2e      	ldr	r2, [pc, #184]	@ (8000568 <main+0x260>)
 80004ae:	6153      	str	r3, [r2, #20]
        memset(feedback_string, 0, BUFFER);
 80004b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80004b4:	2100      	movs	r1, #0
 80004b6:	482b      	ldr	r0, [pc, #172]	@ (8000564 <main+0x25c>)
 80004b8:	f001 f8af 	bl	800161a <memset>
        send_string("Trimpot set to ");
 80004bc:	4833      	ldr	r0, [pc, #204]	@ (800058c <main+0x284>)
 80004be:	f000 faf3 	bl	8000aa8 <send_string>
        send_string_buffer(triggers.trimpot_value);
 80004c2:	4b29      	ldr	r3, [pc, #164]	@ (8000568 <main+0x260>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	4618      	mov	r0, r3
 80004c8:	f000 fb0e 	bl	8000ae8 <send_string_buffer>
        send_string("\r\n");
 80004cc:	4828      	ldr	r0, [pc, #160]	@ (8000570 <main+0x268>)
 80004ce:	f000 faeb 	bl	8000aa8 <send_string>

        // print_game_triggers(triggers);
        message_complete = 0;
 80004d2:	4b1e      	ldr	r3, [pc, #120]	@ (800054c <main+0x244>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
                 valid_period_check(follow) != 0) {
 80004d8:	e064      	b.n	80005a4 <main+0x29c>

      } else if (strcmp(command, "triggers") == 0){
 80004da:	492d      	ldr	r1, [pc, #180]	@ (8000590 <main+0x288>)
 80004dc:	68f8      	ldr	r0, [r7, #12]
 80004de:	f7ff fe7f 	bl	80001e0 <strcmp>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d10e      	bne.n	8000506 <main+0x1fe>
    	  print_game_triggers(triggers);
 80004e8:	4c1f      	ldr	r4, [pc, #124]	@ (8000568 <main+0x260>)
 80004ea:	466d      	mov	r5, sp
 80004ec:	f104 0310 	add.w	r3, r4, #16
 80004f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004f2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80004f6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80004fa:	f000 fbb9 	bl	8000c70 <print_game_triggers>
    	  message_complete = 0;
 80004fe:	4b13      	ldr	r3, [pc, #76]	@ (800054c <main+0x244>)
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	e04e      	b.n	80005a4 <main+0x29c>
      } else if (strcmp(command, "game") == 0){
 8000506:	4923      	ldr	r1, [pc, #140]	@ (8000594 <main+0x28c>)
 8000508:	68f8      	ldr	r0, [r7, #12]
 800050a:	f7ff fe69 	bl	80001e0 <strcmp>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d141      	bne.n	8000598 <main+0x290>
    	  print_game_state(game);
 8000514:	4e0a      	ldr	r6, [pc, #40]	@ (8000540 <main+0x238>)
 8000516:	466d      	mov	r5, sp
 8000518:	f106 0410 	add.w	r4, r6, #16
 800051c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800051e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000520:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000522:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000524:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000528:	e885 0003 	stmia.w	r5, {r0, r1}
 800052c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000530:	f000 fb02 	bl	8000b38 <print_game_state>
    	  message_complete = 0;
 8000534:	4b05      	ldr	r3, [pc, #20]	@ (800054c <main+0x244>)
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	e033      	b.n	80005a4 <main+0x29c>
 800053c:	0800278c 	.word	0x0800278c
 8000540:	20000008 	.word	0x20000008
 8000544:	08002798 	.word	0x08002798
 8000548:	08001131 	.word	0x08001131
 800054c:	200000dc 	.word	0x200000dc
 8000550:	080027ac 	.word	0x080027ac
 8000554:	200001e4 	.word	0x200001e4
 8000558:	080027b0 	.word	0x080027b0
 800055c:	080027b4 	.word	0x080027b4
 8000560:	080027c0 	.word	0x080027c0
 8000564:	200000e0 	.word	0x200000e0
 8000568:	20000040 	.word	0x20000040
 800056c:	080027d8 	.word	0x080027d8
 8000570:	080027ec 	.word	0x080027ec
 8000574:	080027f0 	.word	0x080027f0
 8000578:	080027f8 	.word	0x080027f8
 800057c:	08002814 	.word	0x08002814
 8000580:	08002824 	.word	0x08002824
 8000584:	0800282c 	.word	0x0800282c
 8000588:	08002834 	.word	0x08002834
 800058c:	08002850 	.word	0x08002850
 8000590:	08002860 	.word	0x08002860
 8000594:	0800286c 	.word	0x0800286c
      } else {
        send_string("Unknown command\r\n");
 8000598:	489a      	ldr	r0, [pc, #616]	@ (8000804 <main+0x4fc>)
 800059a:	f000 fa85 	bl	8000aa8 <send_string>
        message_complete = 0;
 800059e:	4b9a      	ldr	r3, [pc, #616]	@ (8000808 <main+0x500>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
      }
      reset_input_buffer();
 80005a4:	f000 f9be 	bl	8000924 <reset_input_buffer>
      command = NULL;
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]
      follow = NULL;
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
      message_complete = 0;
 80005b0:	4b95      	ldr	r3, [pc, #596]	@ (8000808 <main+0x500>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
      memset(feedback_string, 0, BUFFER);
 80005b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005ba:	2100      	movs	r1, #0
 80005bc:	4893      	ldr	r0, [pc, #588]	@ (800080c <main+0x504>)
 80005be:	f001 f82c 	bl	800161a <memset>
    }

    // Need an interrupt to change triggers.touchpad_pressed = -1 when touchpad
    // is pressed
    if (triggers.touchpad_pressed != -1) {
 80005c2:	4b93      	ldr	r3, [pc, #588]	@ (8000810 <main+0x508>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005ca:	f000 80de 	beq.w	800078a <main+0x482>
      // send_string("\n\ntouchpad pressed\r\n");
      triggers.servo_controlled = triggers.touchpad_pressed;
 80005ce:	4b90      	ldr	r3, [pc, #576]	@ (8000810 <main+0x508>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a8f      	ldr	r2, [pc, #572]	@ (8000810 <main+0x508>)
 80005d4:	60d3      	str	r3, [r2, #12]
      send_string("\r\n");
      touctriggers.touchpad_pressed = -1;
      */
      // print_game_triggers(triggers);

      if (triggers.servo_controlled != -1) {
 80005d6:	4b8e      	ldr	r3, [pc, #568]	@ (8000810 <main+0x508>)
 80005d8:	68db      	ldr	r3, [r3, #12]
 80005da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005de:	f000 80d4 	beq.w	800078a <main+0x482>
    	  if (triggers.servo_controlled != last_servo_selection) {
 80005e2:	4b8b      	ldr	r3, [pc, #556]	@ (8000810 <main+0x508>)
 80005e4:	68da      	ldr	r2, [r3, #12]
 80005e6:	4b8b      	ldr	r3, [pc, #556]	@ (8000814 <main+0x50c>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	429a      	cmp	r2, r3
 80005ec:	d025      	beq.n	800063a <main+0x332>
    	          if(triggers.pending_peek == 1){
 80005ee:	4b88      	ldr	r3, [pc, #544]	@ (8000810 <main+0x508>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d11a      	bne.n	800062c <main+0x324>
    	        	game.peeks_used += 1;
 80005f6:	4b88      	ldr	r3, [pc, #544]	@ (8000818 <main+0x510>)
 80005f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80005fa:	3301      	adds	r3, #1
 80005fc:	4a86      	ldr	r2, [pc, #536]	@ (8000818 <main+0x510>)
 80005fe:	6293      	str	r3, [r2, #40]	@ 0x28
					send_string("New Peek Used\r\n");
 8000600:	4886      	ldr	r0, [pc, #536]	@ (800081c <main+0x514>)
 8000602:	f000 fa51 	bl	8000aa8 <send_string>
					print_game_state(game);
 8000606:	4e84      	ldr	r6, [pc, #528]	@ (8000818 <main+0x510>)
 8000608:	466d      	mov	r5, sp
 800060a:	f106 0410 	add.w	r4, r6, #16
 800060e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000610:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000612:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000614:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000616:	e894 0003 	ldmia.w	r4, {r0, r1}
 800061a:	e885 0003 	stmia.w	r5, {r0, r1}
 800061e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000622:	f000 fa89 	bl	8000b38 <print_game_state>
					triggers.pending_peek = 0;
 8000626:	4b7a      	ldr	r3, [pc, #488]	@ (8000810 <main+0x508>)
 8000628:	2200      	movs	r2, #0
 800062a:	61da      	str	r2, [r3, #28]
    	          } // Reset peek
    	          triggers.servo_angle = 0;
 800062c:	4b78      	ldr	r3, [pc, #480]	@ (8000810 <main+0x508>)
 800062e:	2200      	movs	r2, #0
 8000630:	611a      	str	r2, [r3, #16]
    	          last_servo_selection = triggers.servo_controlled;
 8000632:	4b77      	ldr	r3, [pc, #476]	@ (8000810 <main+0x508>)
 8000634:	68db      	ldr	r3, [r3, #12]
 8000636:	4a77      	ldr	r2, [pc, #476]	@ (8000814 <main+0x50c>)
 8000638:	6013      	str	r3, [r2, #0]
    	      }


          if (triggers.servo_angle != last_servo_angle) {
 800063a:	4b75      	ldr	r3, [pc, #468]	@ (8000810 <main+0x508>)
 800063c:	691a      	ldr	r2, [r3, #16]
 800063e:	4b78      	ldr	r3, [pc, #480]	@ (8000820 <main+0x518>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	429a      	cmp	r2, r3
 8000644:	f000 80a1 	beq.w	800078a <main+0x482>

              // Respond to angle
              if (triggers.servo_angle == 0) {
 8000648:	4b71      	ldr	r3, [pc, #452]	@ (8000810 <main+0x508>)
 800064a:	691b      	ldr	r3, [r3, #16]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d12a      	bne.n	80006a6 <main+0x39e>
                  send_string("Door Closed\r\n");
 8000650:	4874      	ldr	r0, [pc, #464]	@ (8000824 <main+0x51c>)
 8000652:	f000 fa29 	bl	8000aa8 <send_string>


                  if (triggers.pending_peek == 1 && last_servo_selection == triggers.servo_controlled) { // only change peek if dig is not passed
 8000656:	4b6e      	ldr	r3, [pc, #440]	@ (8000810 <main+0x508>)
 8000658:	69db      	ldr	r3, [r3, #28]
 800065a:	2b01      	cmp	r3, #1
 800065c:	f040 808d 	bne.w	800077a <main+0x472>
 8000660:	4b6b      	ldr	r3, [pc, #428]	@ (8000810 <main+0x508>)
 8000662:	68da      	ldr	r2, [r3, #12]
 8000664:	4b6b      	ldr	r3, [pc, #428]	@ (8000814 <main+0x50c>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	429a      	cmp	r2, r3
 800066a:	f040 8086 	bne.w	800077a <main+0x472>
                      game.peeks_used += 1;
 800066e:	4b6a      	ldr	r3, [pc, #424]	@ (8000818 <main+0x510>)
 8000670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000672:	3301      	adds	r3, #1
 8000674:	4a68      	ldr	r2, [pc, #416]	@ (8000818 <main+0x510>)
 8000676:	6293      	str	r3, [r2, #40]	@ 0x28
                      send_string("New Peek Used\r\n");
 8000678:	4868      	ldr	r0, [pc, #416]	@ (800081c <main+0x514>)
 800067a:	f000 fa15 	bl	8000aa8 <send_string>
                      print_game_state(game);
 800067e:	4e66      	ldr	r6, [pc, #408]	@ (8000818 <main+0x510>)
 8000680:	466d      	mov	r5, sp
 8000682:	f106 0410 	add.w	r4, r6, #16
 8000686:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000688:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800068a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800068c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800068e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000692:	e885 0003 	stmia.w	r5, {r0, r1}
 8000696:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800069a:	f000 fa4d 	bl	8000b38 <print_game_state>
                      triggers.pending_peek = 0; // Reset peek
 800069e:	4b5c      	ldr	r3, [pc, #368]	@ (8000810 <main+0x508>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	61da      	str	r2, [r3, #28]
 80006a4:	e069      	b.n	800077a <main+0x472>
                  }
              } else if (triggers.servo_angle > 0 && triggers.servo_angle < triggers.peek_threshold) {
 80006a6:	4b5a      	ldr	r3, [pc, #360]	@ (8000810 <main+0x508>)
 80006a8:	691b      	ldr	r3, [r3, #16]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	dd16      	ble.n	80006dc <main+0x3d4>
 80006ae:	4b58      	ldr	r3, [pc, #352]	@ (8000810 <main+0x508>)
 80006b0:	691a      	ldr	r2, [r3, #16]
 80006b2:	4b57      	ldr	r3, [pc, #348]	@ (8000810 <main+0x508>)
 80006b4:	699b      	ldr	r3, [r3, #24]
 80006b6:	429a      	cmp	r2, r3
 80006b8:	da10      	bge.n	80006dc <main+0x3d4>
                  send_string("Below Dig Threshold. But above 0. Peek in Progress.\r\n");
 80006ba:	485b      	ldr	r0, [pc, #364]	@ (8000828 <main+0x520>)
 80006bc:	f000 f9f4 	bl	8000aa8 <send_string>

                  // Only increment peek count if coming *from* a closed or dig state
                  if (last_servo_angle == 0 && last_servo_selection == triggers.servo_controlled) {
 80006c0:	4b57      	ldr	r3, [pc, #348]	@ (8000820 <main+0x518>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d157      	bne.n	8000778 <main+0x470>
 80006c8:	4b51      	ldr	r3, [pc, #324]	@ (8000810 <main+0x508>)
 80006ca:	68da      	ldr	r2, [r3, #12]
 80006cc:	4b51      	ldr	r3, [pc, #324]	@ (8000814 <main+0x50c>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d151      	bne.n	8000778 <main+0x470>
                	  //game.peeks_used += 1;
                      //send_string("New Peek Used\r\n");
                	  //print_game_state(game);
                	  triggers.pending_peek = 1;
 80006d4:	4b4e      	ldr	r3, [pc, #312]	@ (8000810 <main+0x508>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	61da      	str	r2, [r3, #28]
                  if (last_servo_angle == 0 && last_servo_selection == triggers.servo_controlled) {
 80006da:	e04d      	b.n	8000778 <main+0x470>
                  }

              } else if (triggers.servo_angle >= triggers.peek_threshold) {
 80006dc:	4b4c      	ldr	r3, [pc, #304]	@ (8000810 <main+0x508>)
 80006de:	691a      	ldr	r2, [r3, #16]
 80006e0:	4b4b      	ldr	r3, [pc, #300]	@ (8000810 <main+0x508>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	db48      	blt.n	800077a <main+0x472>
                  send_string("Dig Threshold Passed.\r\n");
 80006e8:	4850      	ldr	r0, [pc, #320]	@ (800082c <main+0x524>)
 80006ea:	f000 f9dd 	bl	8000aa8 <send_string>


                  // Only increment dig count if last angle was not already a dig
                  if (last_servo_angle < triggers.peek_threshold && last_servo_selection == triggers.servo_controlled) {
 80006ee:	4b48      	ldr	r3, [pc, #288]	@ (8000810 <main+0x508>)
 80006f0:	699a      	ldr	r2, [r3, #24]
 80006f2:	4b4b      	ldr	r3, [pc, #300]	@ (8000820 <main+0x518>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	429a      	cmp	r2, r3
 80006f8:	dd3a      	ble.n	8000770 <main+0x468>
 80006fa:	4b45      	ldr	r3, [pc, #276]	@ (8000810 <main+0x508>)
 80006fc:	68da      	ldr	r2, [r3, #12]
 80006fe:	4b45      	ldr	r3, [pc, #276]	@ (8000814 <main+0x50c>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	429a      	cmp	r2, r3
 8000704:	d134      	bne.n	8000770 <main+0x468>
                      game.digs_taken += 1;
 8000706:	4b44      	ldr	r3, [pc, #272]	@ (8000818 <main+0x510>)
 8000708:	6a1b      	ldr	r3, [r3, #32]
 800070a:	3301      	adds	r3, #1
 800070c:	4a42      	ldr	r2, [pc, #264]	@ (8000818 <main+0x510>)
 800070e:	6213      	str	r3, [r2, #32]
                      game.digs_remaining -= 1;
 8000710:	4b41      	ldr	r3, [pc, #260]	@ (8000818 <main+0x510>)
 8000712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000714:	3b01      	subs	r3, #1
 8000716:	4a40      	ldr	r2, [pc, #256]	@ (8000818 <main+0x510>)
 8000718:	6253      	str	r3, [r2, #36]	@ 0x24
                      if (check_servo_choice(game.correct_servos, triggers.servo_controlled, game.total_items_to_find) == 1) {
 800071a:	4b3d      	ldr	r3, [pc, #244]	@ (8000810 <main+0x508>)
 800071c:	68db      	ldr	r3, [r3, #12]
 800071e:	4a3e      	ldr	r2, [pc, #248]	@ (8000818 <main+0x510>)
 8000720:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000722:	4619      	mov	r1, r3
 8000724:	483c      	ldr	r0, [pc, #240]	@ (8000818 <main+0x510>)
 8000726:	f7ff fdbb 	bl	80002a0 <check_servo_choice>
 800072a:	4603      	mov	r3, r0
 800072c:	2b01      	cmp	r3, #1
 800072e:	d109      	bne.n	8000744 <main+0x43c>
                              game.items_found++;
 8000730:	4b39      	ldr	r3, [pc, #228]	@ (8000818 <main+0x510>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	3301      	adds	r3, #1
 8000736:	4a38      	ldr	r2, [pc, #224]	@ (8000818 <main+0x510>)
 8000738:	6193      	str	r3, [r2, #24]
                              game.items_left_to_find--;
 800073a:	4b37      	ldr	r3, [pc, #220]	@ (8000818 <main+0x510>)
 800073c:	69db      	ldr	r3, [r3, #28]
 800073e:	3b01      	subs	r3, #1
 8000740:	4a35      	ldr	r2, [pc, #212]	@ (8000818 <main+0x510>)
 8000742:	61d3      	str	r3, [r2, #28]
                          }
                      send_string("New Dig Used\r\n\r\n");
 8000744:	483a      	ldr	r0, [pc, #232]	@ (8000830 <main+0x528>)
 8000746:	f000 f9af 	bl	8000aa8 <send_string>
                      print_game_state(game);
 800074a:	4e33      	ldr	r6, [pc, #204]	@ (8000818 <main+0x510>)
 800074c:	466d      	mov	r5, sp
 800074e:	f106 0410 	add.w	r4, r6, #16
 8000752:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000754:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000756:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000758:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800075a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800075e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000762:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000766:	f000 f9e7 	bl	8000b38 <print_game_state>
                      send_string("\r\n");
 800076a:	4832      	ldr	r0, [pc, #200]	@ (8000834 <main+0x52c>)
 800076c:	f000 f99c 	bl	8000aa8 <send_string>

                  }
                  triggers.pending_peek = 0;
 8000770:	4b27      	ldr	r3, [pc, #156]	@ (8000810 <main+0x508>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
 8000776:	e000      	b.n	800077a <main+0x472>
                  if (last_servo_angle == 0 && last_servo_selection == triggers.servo_controlled) {
 8000778:	bf00      	nop
              }

              // Update the last angle
              last_servo_angle = triggers.servo_angle;
 800077a:	4b25      	ldr	r3, [pc, #148]	@ (8000810 <main+0x508>)
 800077c:	691b      	ldr	r3, [r3, #16]
 800077e:	4a28      	ldr	r2, [pc, #160]	@ (8000820 <main+0x518>)
 8000780:	6013      	str	r3, [r2, #0]
              last_servo_selection =triggers.servo_controlled;
 8000782:	4b23      	ldr	r3, [pc, #140]	@ (8000810 <main+0x508>)
 8000784:	68db      	ldr	r3, [r3, #12]
 8000786:	4a23      	ldr	r2, [pc, #140]	@ (8000814 <main+0x50c>)
 8000788:	6013      	str	r3, [r2, #0]

    if(game.items_left_to_find == 0 || game.digs_remaining == 0 ||
game.time_remaining == 0;){ game.game_over = 1;
    }
*/
    if(game.items_left_to_find == 0 || game.digs_remaining == 0 ||
 800078a:	4b23      	ldr	r3, [pc, #140]	@ (8000818 <main+0x510>)
 800078c:	69db      	ldr	r3, [r3, #28]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d007      	beq.n	80007a2 <main+0x49a>
 8000792:	4b21      	ldr	r3, [pc, #132]	@ (8000818 <main+0x510>)
 8000794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000796:	2b00      	cmp	r3, #0
 8000798:	d003      	beq.n	80007a2 <main+0x49a>
    game.game_time_remaining == 0){
 800079a:	4b1f      	ldr	r3, [pc, #124]	@ (8000818 <main+0x510>)
 800079c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    if(game.items_left_to_find == 0 || game.digs_remaining == 0 ||
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d165      	bne.n	800086e <main+0x566>
    	game.game_over = 1;
 80007a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000818 <main+0x510>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	631a      	str	r2, [r3, #48]	@ 0x30
    	print_game_state(game);
 80007a8:	4e1b      	ldr	r6, [pc, #108]	@ (8000818 <main+0x510>)
 80007aa:	466d      	mov	r5, sp
 80007ac:	f106 0410 	add.w	r4, r6, #16
 80007b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80007bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80007c0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80007c4:	f000 f9b8 	bl	8000b38 <print_game_state>
    	send_string("Game Over\r\n");
 80007c8:	481b      	ldr	r0, [pc, #108]	@ (8000838 <main+0x530>)
 80007ca:	f000 f96d 	bl	8000aa8 <send_string>

    	if(game.digs_remaining == 0 & game.items_left_to_find != 0 ){
 80007ce:	4b12      	ldr	r3, [pc, #72]	@ (8000818 <main+0x510>)
 80007d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	bf0c      	ite	eq
 80007d6:	2301      	moveq	r3, #1
 80007d8:	2300      	movne	r3, #0
 80007da:	b2da      	uxtb	r2, r3
 80007dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000818 <main+0x510>)
 80007de:	69db      	ldr	r3, [r3, #28]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	bf14      	ite	ne
 80007e4:	2301      	movne	r3, #1
 80007e6:	2300      	moveq	r3, #0
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	4013      	ands	r3, r2
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d026      	beq.n	8000840 <main+0x538>
    		send_string("You used all your digs without finding the treasure, you lose.\r\n");
 80007f2:	4812      	ldr	r0, [pc, #72]	@ (800083c <main+0x534>)
 80007f4:	f000 f958 	bl	8000aa8 <send_string>
    		disableTimer2();
 80007f8:	f000 fcc0 	bl	800117c <disableTimer2>
    		led_set(00100010);
 80007fc:	2008      	movs	r0, #8
 80007fe:	f7ff fd71 	bl	80002e4 <led_set>
 8000802:	e034      	b.n	800086e <main+0x566>
 8000804:	08002874 	.word	0x08002874
 8000808:	200000dc 	.word	0x200000dc
 800080c:	200000e0 	.word	0x200000e0
 8000810:	20000040 	.word	0x20000040
 8000814:	20000004 	.word	0x20000004
 8000818:	20000008 	.word	0x20000008
 800081c:	08002888 	.word	0x08002888
 8000820:	20000000 	.word	0x20000000
 8000824:	08002898 	.word	0x08002898
 8000828:	080028a8 	.word	0x080028a8
 800082c:	080028e0 	.word	0x080028e0
 8000830:	080028f8 	.word	0x080028f8
 8000834:	080027ec 	.word	0x080027ec
 8000838:	0800290c 	.word	0x0800290c
 800083c:	08002918 	.word	0x08002918
    	} else if(game.game_time_remaining == 0){
 8000840:	4b10      	ldr	r3, [pc, #64]	@ (8000884 <main+0x57c>)
 8000842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000844:	2b00      	cmp	r3, #0
 8000846:	d10a      	bne.n	800085e <main+0x556>
    		send_string("You ran out of time to find the treasure, you lose.\r\n");
 8000848:	480f      	ldr	r0, [pc, #60]	@ (8000888 <main+0x580>)
 800084a:	f000 f92d 	bl	8000aa8 <send_string>
    		disableTimer2();
 800084e:	f000 fc95 	bl	800117c <disableTimer2>
    		led_set("00100010");
 8000852:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <main+0x584>)
 8000854:	b2db      	uxtb	r3, r3
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff fd44 	bl	80002e4 <led_set>
 800085c:	e007      	b.n	800086e <main+0x566>
    	} else {
    		send_string("You found all the treasure, you win!\r\n");
 800085e:	480c      	ldr	r0, [pc, #48]	@ (8000890 <main+0x588>)
 8000860:	f000 f922 	bl	8000aa8 <send_string>
    		disableTimer2();
 8000864:	f000 fc8a 	bl	800117c <disableTimer2>
    		led_set(10001000);
 8000868:	2068      	movs	r0, #104	@ 0x68
 800086a:	f7ff fd3b 	bl	80002e4 <led_set>
  while (game.game_over == 0) {
 800086e:	4b05      	ldr	r3, [pc, #20]	@ (8000884 <main+0x57c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	2b00      	cmp	r3, #0
 8000874:	f43f ad80 	beq.w	8000378 <main+0x70>


    	}
    }
}
  return 0;
 8000878:	2300      	movs	r3, #0
}
 800087a:	4618      	mov	r0, r3
 800087c:	3714      	adds	r7, #20
 800087e:	46bd      	mov	sp, r7
 8000880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000882:	bf00      	nop
 8000884:	20000008 	.word	0x20000008
 8000888:	0800295c 	.word	0x0800295c
 800088c:	08002994 	.word	0x08002994
 8000890:	080029a0 	.word	0x080029a0

08000894 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800089e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	db0b      	blt.n	80008be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	f003 021f 	and.w	r2, r3, #31
 80008ac:	4907      	ldr	r1, [pc, #28]	@ (80008cc <__NVIC_EnableIRQ+0x38>)
 80008ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b2:	095b      	lsrs	r3, r3, #5
 80008b4:	2001      	movs	r0, #1
 80008b6:	fa00 f202 	lsl.w	r2, r0, r2
 80008ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008be:	bf00      	nop
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000e100 	.word	0xe000e100

080008d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	6039      	str	r1, [r7, #0]
 80008da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	db0a      	blt.n	80008fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	490c      	ldr	r1, [pc, #48]	@ (800091c <__NVIC_SetPriority+0x4c>)
 80008ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ee:	0112      	lsls	r2, r2, #4
 80008f0:	b2d2      	uxtb	r2, r2
 80008f2:	440b      	add	r3, r1
 80008f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008f8:	e00a      	b.n	8000910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	4908      	ldr	r1, [pc, #32]	@ (8000920 <__NVIC_SetPriority+0x50>)
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	f003 030f 	and.w	r3, r3, #15
 8000906:	3b04      	subs	r3, #4
 8000908:	0112      	lsls	r2, r2, #4
 800090a:	b2d2      	uxtb	r2, r2
 800090c:	440b      	add	r3, r1
 800090e:	761a      	strb	r2, [r3, #24]
}
 8000910:	bf00      	nop
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	e000e100 	.word	0xe000e100
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <reset_input_buffer>:

int i;
unsigned char string[BUFFER];
extern int message_complete;

void reset_input_buffer() {
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
    memset(string, 0, BUFFER);
 8000928:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800092c:	2100      	movs	r1, #0
 800092e:	4804      	ldr	r0, [pc, #16]	@ (8000940 <reset_input_buffer+0x1c>)
 8000930:	f000 fe73 	bl	800161a <memset>
    i = 0;
 8000934:	4b03      	ldr	r3, [pc, #12]	@ (8000944 <reset_input_buffer+0x20>)
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	200001e4 	.word	0x200001e4
 8000944:	200001e0 	.word	0x200001e0

08000948 <enableUSART1>:

void enableUSART1()
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
	// Enable GPIO C and USART1's clocks
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN_Msk;
 800094c:	4b18      	ldr	r3, [pc, #96]	@ (80009b0 <enableUSART1+0x68>)
 800094e:	695b      	ldr	r3, [r3, #20]
 8000950:	4a17      	ldr	r2, [pc, #92]	@ (80009b0 <enableUSART1+0x68>)
 8000952:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000956:	6153      	str	r3, [r2, #20]
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN_Msk;
 8000958:	4b15      	ldr	r3, [pc, #84]	@ (80009b0 <enableUSART1+0x68>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	4a14      	ldr	r2, [pc, #80]	@ (80009b0 <enableUSART1+0x68>)
 800095e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000962:	6193      	str	r3, [r2, #24]

	// Set GPIO C to use UART as alternate function
	GPIOC->MODER = ALTFUNCTION;
 8000964:	4b13      	ldr	r3, [pc, #76]	@ (80009b4 <enableUSART1+0x6c>)
 8000966:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 800096a:	601a      	str	r2, [r3, #0]
	GPIOC->AFR[0] = RXTX;
 800096c:	4b11      	ldr	r3, [pc, #68]	@ (80009b4 <enableUSART1+0x6c>)
 800096e:	f44f 02ee 	mov.w	r2, #7798784	@ 0x770000
 8000972:	621a      	str	r2, [r3, #32]
	GPIOC->OSPEEDR = HIGHSPEED;
 8000974:	4b0f      	ldr	r3, [pc, #60]	@ (80009b4 <enableUSART1+0x6c>)
 8000976:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 800097a:	609a      	str	r2, [r3, #8]

	// Set the baud rate and ready USART 1 for both receive and transmit
	USART1->BRR = BAUDRATE;                   // Baud rate = 115200
 800097c:	4b0e      	ldr	r3, [pc, #56]	@ (80009b8 <enableUSART1+0x70>)
 800097e:	2246      	movs	r2, #70	@ 0x46
 8000980:	60da      	str	r2, [r3, #12]
	USART1->CR1 |= USART_CR1_RE_Msk;
 8000982:	4b0d      	ldr	r3, [pc, #52]	@ (80009b8 <enableUSART1+0x70>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a0c      	ldr	r2, [pc, #48]	@ (80009b8 <enableUSART1+0x70>)
 8000988:	f043 0304 	orr.w	r3, r3, #4
 800098c:	6013      	str	r3, [r2, #0]
	USART1->CR1 |= USART_CR1_TE_Msk;
 800098e:	4b0a      	ldr	r3, [pc, #40]	@ (80009b8 <enableUSART1+0x70>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a09      	ldr	r2, [pc, #36]	@ (80009b8 <enableUSART1+0x70>)
 8000994:	f043 0308 	orr.w	r3, r3, #8
 8000998:	6013      	str	r3, [r2, #0]
	USART1->CR1 |= USART_CR1_UE_Msk;
 800099a:	4b07      	ldr	r3, [pc, #28]	@ (80009b8 <enableUSART1+0x70>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a06      	ldr	r2, [pc, #24]	@ (80009b8 <enableUSART1+0x70>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	6013      	str	r3, [r2, #0]
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr
 80009b0:	40021000 	.word	0x40021000
 80009b4:	48000800 	.word	0x48000800
 80009b8:	40013800 	.word	0x40013800

080009bc <enableLEDs>:

void enableLEDs()
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
	// Enable clock for Port E (LEDs)
	RCC->AHBENR |= RCC_AHBENR_GPIOEEN;
 80009c2:	4b09      	ldr	r3, [pc, #36]	@ (80009e8 <enableLEDs+0x2c>)
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	4a08      	ldr	r2, [pc, #32]	@ (80009e8 <enableLEDs+0x2c>)
 80009c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009cc:	6153      	str	r3, [r2, #20]

	// Get the most significant 16 bits of port mode register as that is where the mode for the LEDs are defined
	uint16_t* portMode = ((uint16_t*)&(GPIOE->MODER))+1;
 80009ce:	4b07      	ldr	r3, [pc, #28]	@ (80009ec <enableLEDs+0x30>)
 80009d0:	607b      	str	r3, [r7, #4]

	// Set the mode of the port pins to output since they are LEDs
	*portMode = LED_OUTPUT;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	f245 5255 	movw	r2, #21845	@ 0x5555
 80009d8:	801a      	strh	r2, [r3, #0]
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	40021000 	.word	0x40021000
 80009ec:	48001002 	.word	0x48001002

080009f0 <enableUARTInterrupts>:

void enableUARTInterrupts()
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f4:	b672      	cpsid	i
}
 80009f6:	bf00      	nop
	__disable_irq();

	// Generate an interrupt upon receiving data
	USART1->CR1 |= USART_CR1_RXNEIE_Msk;
 80009f8:	4b08      	ldr	r3, [pc, #32]	@ (8000a1c <enableUARTInterrupts+0x2c>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a07      	ldr	r2, [pc, #28]	@ (8000a1c <enableUARTInterrupts+0x2c>)
 80009fe:	f043 0320 	orr.w	r3, r3, #32
 8000a02:	6013      	str	r3, [r2, #0]

	// Set priority and enable interrupts
	NVIC_SetPriority(USART1_IRQn, 1);
 8000a04:	2101      	movs	r1, #1
 8000a06:	2025      	movs	r0, #37	@ 0x25
 8000a08:	f7ff ff62 	bl	80008d0 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn);
 8000a0c:	2025      	movs	r0, #37	@ 0x25
 8000a0e:	f7ff ff41 	bl	8000894 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000a12:	b662      	cpsie	i
}
 8000a14:	bf00      	nop

	__enable_irq();
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40013800 	.word	0x40013800

08000a20 <USART1_EXTI25_IRQHandler>:

void USART1_EXTI25_IRQHandler()
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
	// Check for overrun or frame errors
	if ((USART1->ISR & USART_ISR_FE_Msk) && (USART1->ISR & USART_ISR_ORE_Msk))
 8000a26:	4b1c      	ldr	r3, [pc, #112]	@ (8000a98 <USART1_EXTI25_IRQHandler+0x78>)
 8000a28:	69db      	ldr	r3, [r3, #28]
 8000a2a:	f003 0302 	and.w	r3, r3, #2
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d005      	beq.n	8000a3e <USART1_EXTI25_IRQHandler+0x1e>
 8000a32:	4b19      	ldr	r3, [pc, #100]	@ (8000a98 <USART1_EXTI25_IRQHandler+0x78>)
 8000a34:	69db      	ldr	r3, [r3, #28]
 8000a36:	f003 0308 	and.w	r3, r3, #8
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d124      	bne.n	8000a88 <USART1_EXTI25_IRQHandler+0x68>
	{
		return;
	}

	// If we have stored the maximum amount, stop
	if (i == BUFFER)
 8000a3e:	4b17      	ldr	r3, [pc, #92]	@ (8000a9c <USART1_EXTI25_IRQHandler+0x7c>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000a46:	d021      	beq.n	8000a8c <USART1_EXTI25_IRQHandler+0x6c>
	{
		return;
	}

	if (USART1->ISR & USART_ISR_RXNE_Msk)
 8000a48:	4b13      	ldr	r3, [pc, #76]	@ (8000a98 <USART1_EXTI25_IRQHandler+0x78>)
 8000a4a:	69db      	ldr	r3, [r3, #28]
 8000a4c:	f003 0320 	and.w	r3, r3, #32
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d01c      	beq.n	8000a8e <USART1_EXTI25_IRQHandler+0x6e>
	{
		// Read data
		unsigned char data = (uint8_t) USART1->RDR;
 8000a54:	4b10      	ldr	r3, [pc, #64]	@ (8000a98 <USART1_EXTI25_IRQHandler+0x78>)
 8000a56:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	71fb      	strb	r3, [r7, #7]
		USART1->TDR = data;  // Echo back
 8000a5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a98 <USART1_EXTI25_IRQHandler+0x78>)
 8000a5e:	79fa      	ldrb	r2, [r7, #7]
 8000a60:	b292      	uxth	r2, r2
 8000a62:	851a      	strh	r2, [r3, #40]	@ 0x28

		if (data != '\r')
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	2b0d      	cmp	r3, #13
 8000a68:	d00a      	beq.n	8000a80 <USART1_EXTI25_IRQHandler+0x60>
		{
		// Store the read data
		string[i] = data;
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a9c <USART1_EXTI25_IRQHandler+0x7c>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	490c      	ldr	r1, [pc, #48]	@ (8000aa0 <USART1_EXTI25_IRQHandler+0x80>)
 8000a70:	79fa      	ldrb	r2, [r7, #7]
 8000a72:	54ca      	strb	r2, [r1, r3]
		i++;
 8000a74:	4b09      	ldr	r3, [pc, #36]	@ (8000a9c <USART1_EXTI25_IRQHandler+0x7c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	4a08      	ldr	r2, [pc, #32]	@ (8000a9c <USART1_EXTI25_IRQHandler+0x7c>)
 8000a7c:	6013      	str	r3, [r2, #0]
 8000a7e:	e006      	b.n	8000a8e <USART1_EXTI25_IRQHandler+0x6e>
		//USART1->TDR = '\n';


		} else {
		message_complete = 1;
 8000a80:	4b08      	ldr	r3, [pc, #32]	@ (8000aa4 <USART1_EXTI25_IRQHandler+0x84>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	e002      	b.n	8000a8e <USART1_EXTI25_IRQHandler+0x6e>
		return;
 8000a88:	bf00      	nop
 8000a8a:	e000      	b.n	8000a8e <USART1_EXTI25_IRQHandler+0x6e>
		return;
 8000a8c:	bf00      	nop

		}
	}
}
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	40013800 	.word	0x40013800
 8000a9c:	200001e0 	.word	0x200001e0
 8000aa0:	200001e4 	.word	0x200001e4
 8000aa4:	200000dc 	.word	0x200000dc

08000aa8 <send_string>:


void send_string(const char *msg) {
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
    while (*msg) {
 8000ab0:	e00c      	b.n	8000acc <send_string+0x24>
        while (!(USART1->ISR & USART_ISR_TXE_Msk));
 8000ab2:	bf00      	nop
 8000ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae4 <send_string+0x3c>)
 8000ab6:	69db      	ldr	r3, [r3, #28]
 8000ab8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d0f9      	beq.n	8000ab4 <send_string+0xc>
        USART1->TDR = *msg++;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	1c5a      	adds	r2, r3, #1
 8000ac4:	607a      	str	r2, [r7, #4]
 8000ac6:	781a      	ldrb	r2, [r3, #0]
 8000ac8:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <send_string+0x3c>)
 8000aca:	851a      	strh	r2, [r3, #40]	@ 0x28
    while (*msg) {
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d1ee      	bne.n	8000ab2 <send_string+0xa>
    }
}
 8000ad4:	bf00      	nop
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	40013800 	.word	0x40013800

08000ae8 <send_string_buffer>:

void send_string_buffer(int struct_data) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	char buffer[12];
	itoa(struct_data, buffer, 10);
 8000af0:	f107 0308 	add.w	r3, r7, #8
 8000af4:	220a      	movs	r2, #10
 8000af6:	4619      	mov	r1, r3
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f000 fba0 	bl	800123e <itoa>
	char *msg = buffer; // Create a pointer to walk through the buffer
 8000afe:	f107 0308 	add.w	r3, r7, #8
 8000b02:	617b      	str	r3, [r7, #20]
	while (*msg) {
 8000b04:	e00c      	b.n	8000b20 <send_string_buffer+0x38>
        while (!(USART1->ISR & USART_ISR_TXE_Msk));
 8000b06:	bf00      	nop
 8000b08:	4b0a      	ldr	r3, [pc, #40]	@ (8000b34 <send_string_buffer+0x4c>)
 8000b0a:	69db      	ldr	r3, [r3, #28]
 8000b0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d0f9      	beq.n	8000b08 <send_string_buffer+0x20>
        USART1->TDR = *msg++;
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	1c5a      	adds	r2, r3, #1
 8000b18:	617a      	str	r2, [r7, #20]
 8000b1a:	781a      	ldrb	r2, [r3, #0]
 8000b1c:	4b05      	ldr	r3, [pc, #20]	@ (8000b34 <send_string_buffer+0x4c>)
 8000b1e:	851a      	strh	r2, [r3, #40]	@ 0x28
	while (*msg) {
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d1ee      	bne.n	8000b06 <send_string_buffer+0x1e>
    }
}
 8000b28:	bf00      	nop
 8000b2a:	bf00      	nop
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40013800 	.word	0x40013800

08000b38 <print_game_state>:

void print_game_state(GameState game) {
 8000b38:	b084      	sub	sp, #16
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	f107 0c10 	add.w	ip, r7, #16
 8000b44:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	send_string("correct_servos: ");
 8000b48:	483b      	ldr	r0, [pc, #236]	@ (8000c38 <print_game_state+0x100>)
 8000b4a:	f7ff ffad 	bl	8000aa8 <send_string>
	for(int i = 0; i < game.total_items_to_find; i++){
 8000b4e:	2300      	movs	r3, #0
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	e00d      	b.n	8000b70 <print_game_state+0x38>
		send_string(" ");
 8000b54:	4839      	ldr	r0, [pc, #228]	@ (8000c3c <print_game_state+0x104>)
 8000b56:	f7ff ffa7 	bl	8000aa8 <send_string>
		send_string_buffer(game.correct_servos[i]);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	f107 0210 	add.w	r2, r7, #16
 8000b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff ffbf 	bl	8000ae8 <send_string_buffer>
	for(int i = 0; i < game.total_items_to_find; i++){
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	dbed      	blt.n	8000b54 <print_game_state+0x1c>
	}
	send_string("\r\n");
 8000b78:	4831      	ldr	r0, [pc, #196]	@ (8000c40 <print_game_state+0x108>)
 8000b7a:	f7ff ff95 	bl	8000aa8 <send_string>

	send_string("items_found: ");
 8000b7e:	4831      	ldr	r0, [pc, #196]	@ (8000c44 <print_game_state+0x10c>)
 8000b80:	f7ff ff92 	bl	8000aa8 <send_string>
    send_string_buffer(game.items_found);
 8000b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff ffae 	bl	8000ae8 <send_string_buffer>
    send_string("\r\n");
 8000b8c:	482c      	ldr	r0, [pc, #176]	@ (8000c40 <print_game_state+0x108>)
 8000b8e:	f7ff ff8b 	bl	8000aa8 <send_string>


    send_string("items_left_to_find: ");
 8000b92:	482d      	ldr	r0, [pc, #180]	@ (8000c48 <print_game_state+0x110>)
 8000b94:	f7ff ff88 	bl	8000aa8 <send_string>
    send_string_buffer(game.items_left_to_find);
 8000b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff ffa4 	bl	8000ae8 <send_string_buffer>
    send_string("\r\n");
 8000ba0:	4827      	ldr	r0, [pc, #156]	@ (8000c40 <print_game_state+0x108>)
 8000ba2:	f7ff ff81 	bl	8000aa8 <send_string>

    send_string("digs_taken: ");
 8000ba6:	4829      	ldr	r0, [pc, #164]	@ (8000c4c <print_game_state+0x114>)
 8000ba8:	f7ff ff7e 	bl	8000aa8 <send_string>
    send_string_buffer(game.digs_taken);
 8000bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff ff9a 	bl	8000ae8 <send_string_buffer>
    send_string("\r\n");
 8000bb4:	4822      	ldr	r0, [pc, #136]	@ (8000c40 <print_game_state+0x108>)
 8000bb6:	f7ff ff77 	bl	8000aa8 <send_string>

    send_string("digs_remaining: ");
 8000bba:	4825      	ldr	r0, [pc, #148]	@ (8000c50 <print_game_state+0x118>)
 8000bbc:	f7ff ff74 	bl	8000aa8 <send_string>
    send_string_buffer(game.digs_remaining);
 8000bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff ff90 	bl	8000ae8 <send_string_buffer>
    send_string("\r\n");
 8000bc8:	481d      	ldr	r0, [pc, #116]	@ (8000c40 <print_game_state+0x108>)
 8000bca:	f7ff ff6d 	bl	8000aa8 <send_string>

    send_string("peeks_used: ");
 8000bce:	4821      	ldr	r0, [pc, #132]	@ (8000c54 <print_game_state+0x11c>)
 8000bd0:	f7ff ff6a 	bl	8000aa8 <send_string>
    send_string_buffer(game.peeks_used);
 8000bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff ff86 	bl	8000ae8 <send_string_buffer>
    send_string("\r\n");
 8000bdc:	4818      	ldr	r0, [pc, #96]	@ (8000c40 <print_game_state+0x108>)
 8000bde:	f7ff ff63 	bl	8000aa8 <send_string>

    send_string("total_items_to_find: ");
 8000be2:	481d      	ldr	r0, [pc, #116]	@ (8000c58 <print_game_state+0x120>)
 8000be4:	f7ff ff60 	bl	8000aa8 <send_string>
    send_string_buffer(game.total_items_to_find);
 8000be8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff ff7c 	bl	8000ae8 <send_string_buffer>
    send_string("\r\n");
 8000bf0:	4813      	ldr	r0, [pc, #76]	@ (8000c40 <print_game_state+0x108>)
 8000bf2:	f7ff ff59 	bl	8000aa8 <send_string>

    send_string("game_time_remaining: ");
 8000bf6:	4819      	ldr	r0, [pc, #100]	@ (8000c5c <print_game_state+0x124>)
 8000bf8:	f7ff ff56 	bl	8000aa8 <send_string>
    send_string_buffer(game.game_time_remaining);
 8000bfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff ff72 	bl	8000ae8 <send_string_buffer>
    send_string("\r\n");
 8000c04:	480e      	ldr	r0, [pc, #56]	@ (8000c40 <print_game_state+0x108>)
 8000c06:	f7ff ff4f 	bl	8000aa8 <send_string>

    send_string("game_over: ");
 8000c0a:	4815      	ldr	r0, [pc, #84]	@ (8000c60 <print_game_state+0x128>)
 8000c0c:	f7ff ff4c 	bl	8000aa8 <send_string>
    send_string(game.game_over ? "true\n" : "false\n");
 8000c10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <print_game_state+0xe2>
 8000c16:	4b13      	ldr	r3, [pc, #76]	@ (8000c64 <print_game_state+0x12c>)
 8000c18:	e000      	b.n	8000c1c <print_game_state+0xe4>
 8000c1a:	4b13      	ldr	r3, [pc, #76]	@ (8000c68 <print_game_state+0x130>)
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff ff43 	bl	8000aa8 <send_string>
    send_string("\r\n\r\n");
 8000c22:	4812      	ldr	r0, [pc, #72]	@ (8000c6c <print_game_state+0x134>)
 8000c24:	f7ff ff40 	bl	8000aa8 <send_string>
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c32:	b004      	add	sp, #16
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	080029c8 	.word	0x080029c8
 8000c3c:	080029dc 	.word	0x080029dc
 8000c40:	080029e0 	.word	0x080029e0
 8000c44:	080029e4 	.word	0x080029e4
 8000c48:	080029f4 	.word	0x080029f4
 8000c4c:	08002a0c 	.word	0x08002a0c
 8000c50:	08002a1c 	.word	0x08002a1c
 8000c54:	08002a30 	.word	0x08002a30
 8000c58:	08002a40 	.word	0x08002a40
 8000c5c:	08002a58 	.word	0x08002a58
 8000c60:	08002a70 	.word	0x08002a70
 8000c64:	08002a7c 	.word	0x08002a7c
 8000c68:	08002a84 	.word	0x08002a84
 8000c6c:	08002a8c 	.word	0x08002a8c

08000c70 <print_game_triggers>:

void print_game_triggers(GameTriggers triggers) {
 8000c70:	b084      	sub	sp, #16
 8000c72:	b580      	push	{r7, lr}
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	f107 0c08 	add.w	ip, r7, #8
 8000c7a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    send_string("touchpad_pressed: ");
 8000c7e:	4826      	ldr	r0, [pc, #152]	@ (8000d18 <print_game_triggers+0xa8>)
 8000c80:	f7ff ff12 	bl	8000aa8 <send_string>
    send_string_buffer(triggers.touchpad_pressed);
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff ff2e 	bl	8000ae8 <send_string_buffer>
    send_string("\r\n");
 8000c8c:	4823      	ldr	r0, [pc, #140]	@ (8000d1c <print_game_triggers+0xac>)
 8000c8e:	f7ff ff0b 	bl	8000aa8 <send_string>


    send_string("magnet1_det: ");
 8000c92:	4823      	ldr	r0, [pc, #140]	@ (8000d20 <print_game_triggers+0xb0>)
 8000c94:	f7ff ff08 	bl	8000aa8 <send_string>
    send_string_buffer(triggers.magnet1_det);
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff ff24 	bl	8000ae8 <send_string_buffer>
    send_string("\r\n");
 8000ca0:	481e      	ldr	r0, [pc, #120]	@ (8000d1c <print_game_triggers+0xac>)
 8000ca2:	f7ff ff01 	bl	8000aa8 <send_string>

    send_string("magnet2_det: ");
 8000ca6:	481f      	ldr	r0, [pc, #124]	@ (8000d24 <print_game_triggers+0xb4>)
 8000ca8:	f7ff fefe 	bl	8000aa8 <send_string>
    send_string_buffer(triggers.magnet2_det);
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff ff1a 	bl	8000ae8 <send_string_buffer>
    send_string("\r\n");
 8000cb4:	4819      	ldr	r0, [pc, #100]	@ (8000d1c <print_game_triggers+0xac>)
 8000cb6:	f7ff fef7 	bl	8000aa8 <send_string>

    send_string("servo_controlled: ");
 8000cba:	481b      	ldr	r0, [pc, #108]	@ (8000d28 <print_game_triggers+0xb8>)
 8000cbc:	f7ff fef4 	bl	8000aa8 <send_string>
    send_string_buffer(triggers.servo_controlled);
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff ff10 	bl	8000ae8 <send_string_buffer>
    send_string("\r\n");
 8000cc8:	4814      	ldr	r0, [pc, #80]	@ (8000d1c <print_game_triggers+0xac>)
 8000cca:	f7ff feed 	bl	8000aa8 <send_string>

    send_string("servo_angle: ");
 8000cce:	4817      	ldr	r0, [pc, #92]	@ (8000d2c <print_game_triggers+0xbc>)
 8000cd0:	f7ff feea 	bl	8000aa8 <send_string>
	send_string_buffer(triggers.servo_angle);
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff ff06 	bl	8000ae8 <send_string_buffer>
	send_string("\r\n");
 8000cdc:	480f      	ldr	r0, [pc, #60]	@ (8000d1c <print_game_triggers+0xac>)
 8000cde:	f7ff fee3 	bl	8000aa8 <send_string>

    send_string("trimpot_value: ");
 8000ce2:	4813      	ldr	r0, [pc, #76]	@ (8000d30 <print_game_triggers+0xc0>)
 8000ce4:	f7ff fee0 	bl	8000aa8 <send_string>
	send_string_buffer(triggers.trimpot_value);
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fefc 	bl	8000ae8 <send_string_buffer>
	send_string("\r\n");
 8000cf0:	480a      	ldr	r0, [pc, #40]	@ (8000d1c <print_game_triggers+0xac>)
 8000cf2:	f7ff fed9 	bl	8000aa8 <send_string>

	send_string("peek_threshold: ");
 8000cf6:	480f      	ldr	r0, [pc, #60]	@ (8000d34 <print_game_triggers+0xc4>)
 8000cf8:	f7ff fed6 	bl	8000aa8 <send_string>
	send_string_buffer(triggers.peek_threshold);
 8000cfc:	6a3b      	ldr	r3, [r7, #32]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fef2 	bl	8000ae8 <send_string_buffer>
	send_string("\r\n\r\n");
 8000d04:	480c      	ldr	r0, [pc, #48]	@ (8000d38 <print_game_triggers+0xc8>)
 8000d06:	f7ff fecf 	bl	8000aa8 <send_string>
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d12:	b004      	add	sp, #16
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	08002a94 	.word	0x08002a94
 8000d1c:	080029e0 	.word	0x080029e0
 8000d20:	08002aa8 	.word	0x08002aa8
 8000d24:	08002ab8 	.word	0x08002ab8
 8000d28:	08002ac8 	.word	0x08002ac8
 8000d2c:	08002adc 	.word	0x08002adc
 8000d30:	08002aec 	.word	0x08002aec
 8000d34:	08002afc 	.word	0x08002afc
 8000d38:	08002a8c 	.word	0x08002a8c

08000d3c <clear_screen>:


void clear_screen(void) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
    send_string("\x1B[2J\x1B[H");
 8000d40:	4802      	ldr	r0, [pc, #8]	@ (8000d4c <clear_screen+0x10>)
 8000d42:	f7ff feb1 	bl	8000aa8 <send_string>
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	08002b10 	.word	0x08002b10

08000d50 <valid_period_check>:


//For Testing
int valid_period_check(char *input){
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
    // Check for an empty string
    if (input == NULL || strlen(input) == 0) {
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d003      	beq.n	8000d66 <valid_period_check+0x16>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d101      	bne.n	8000d6a <valid_period_check+0x1a>
        return 0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	e015      	b.n	8000d96 <valid_period_check+0x46>
    }

    // Confirm every character is a digit
    for (int i = 0; input[i] != '\0'; i++) {
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	e00b      	b.n	8000d88 <valid_period_check+0x38>
        if (!isdigit((unsigned char)input[i])) {
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	3b30      	subs	r3, #48	@ 0x30
 8000d7a:	2b09      	cmp	r3, #9
 8000d7c:	d901      	bls.n	8000d82 <valid_period_check+0x32>
            return 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	e009      	b.n	8000d96 <valid_period_check+0x46>
    for (int i = 0; input[i] != '\0'; i++) {
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	3301      	adds	r3, #1
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d1ed      	bne.n	8000d70 <valid_period_check+0x20>
        }
    }
    return 1;
 8000d94:	2301      	movs	r3, #1
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3714      	adds	r7, #20
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0
  return 1;
 8000da6:	2301      	movs	r3, #1
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <_kill>:

int _kill(int pid, int sig)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
 8000dba:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000dbc:	f000 fcd8 	bl	8001770 <__errno>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2216      	movs	r2, #22
 8000dc4:	601a      	str	r2, [r3, #0]
  return -1;
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <_exit>:

void _exit (int status)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000dda:	f04f 31ff 	mov.w	r1, #4294967295
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f7ff ffe7 	bl	8000db2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000de4:	bf00      	nop
 8000de6:	e7fd      	b.n	8000de4 <_exit+0x12>

08000de8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
 8000df8:	e00a      	b.n	8000e10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dfa:	f3af 8000 	nop.w
 8000dfe:	4601      	mov	r1, r0
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	1c5a      	adds	r2, r3, #1
 8000e04:	60ba      	str	r2, [r7, #8]
 8000e06:	b2ca      	uxtb	r2, r1
 8000e08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	697a      	ldr	r2, [r7, #20]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	dbf0      	blt.n	8000dfa <_read+0x12>
  }

  return len;
 8000e18:	687b      	ldr	r3, [r7, #4]
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b086      	sub	sp, #24
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	60f8      	str	r0, [r7, #12]
 8000e2a:	60b9      	str	r1, [r7, #8]
 8000e2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
 8000e32:	e009      	b.n	8000e48 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	1c5a      	adds	r2, r3, #1
 8000e38:	60ba      	str	r2, [r7, #8]
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	3301      	adds	r3, #1
 8000e46:	617b      	str	r3, [r7, #20]
 8000e48:	697a      	ldr	r2, [r7, #20]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	dbf1      	blt.n	8000e34 <_write+0x12>
  }
  return len;
 8000e50:	687b      	ldr	r3, [r7, #4]
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <_close>:

int _close(int file)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	b083      	sub	sp, #12
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e72:	b480      	push	{r7}
 8000e74:	b083      	sub	sp, #12
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
 8000e7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e82:	605a      	str	r2, [r3, #4]
  return 0;
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <_isatty>:

int _isatty(int file)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b083      	sub	sp, #12
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e9a:	2301      	movs	r3, #1
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
	...

08000ec4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ecc:	4a14      	ldr	r2, [pc, #80]	@ (8000f20 <_sbrk+0x5c>)
 8000ece:	4b15      	ldr	r3, [pc, #84]	@ (8000f24 <_sbrk+0x60>)
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed8:	4b13      	ldr	r3, [pc, #76]	@ (8000f28 <_sbrk+0x64>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d102      	bne.n	8000ee6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee0:	4b11      	ldr	r3, [pc, #68]	@ (8000f28 <_sbrk+0x64>)
 8000ee2:	4a12      	ldr	r2, [pc, #72]	@ (8000f2c <_sbrk+0x68>)
 8000ee4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ee6:	4b10      	ldr	r3, [pc, #64]	@ (8000f28 <_sbrk+0x64>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4413      	add	r3, r2
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d207      	bcs.n	8000f04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef4:	f000 fc3c 	bl	8001770 <__errno>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	220c      	movs	r2, #12
 8000efc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000efe:	f04f 33ff 	mov.w	r3, #4294967295
 8000f02:	e009      	b.n	8000f18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f04:	4b08      	ldr	r3, [pc, #32]	@ (8000f28 <_sbrk+0x64>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f0a:	4b07      	ldr	r3, [pc, #28]	@ (8000f28 <_sbrk+0x64>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4413      	add	r3, r2
 8000f12:	4a05      	ldr	r2, [pc, #20]	@ (8000f28 <_sbrk+0x64>)
 8000f14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f16:	68fb      	ldr	r3, [r7, #12]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3718      	adds	r7, #24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	2000a000 	.word	0x2000a000
 8000f24:	00000400 	.word	0x00000400
 8000f28:	200002e4 	.word	0x200002e4
 8000f2c:	20000440 	.word	0x20000440

08000f30 <__NVIC_EnableIRQ>:
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	db0b      	blt.n	8000f5a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	f003 021f 	and.w	r2, r3, #31
 8000f48:	4907      	ldr	r1, [pc, #28]	@ (8000f68 <__NVIC_EnableIRQ+0x38>)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	095b      	lsrs	r3, r3, #5
 8000f50:	2001      	movs	r0, #1
 8000f52:	fa00 f202 	lsl.w	r2, r0, r2
 8000f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	e000e100 	.word	0xe000e100

08000f6c <__NVIC_DisableIRQ>:
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	db12      	blt.n	8000fa4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	f003 021f 	and.w	r2, r3, #31
 8000f84:	490a      	ldr	r1, [pc, #40]	@ (8000fb0 <__NVIC_DisableIRQ+0x44>)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	095b      	lsrs	r3, r3, #5
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f92:	3320      	adds	r3, #32
 8000f94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f98:	f3bf 8f4f 	dsb	sy
}
 8000f9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f9e:	f3bf 8f6f 	isb	sy
}
 8000fa2:	bf00      	nop
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000e100 	.word	0xe000e100

08000fb4 <__NVIC_SetPriority>:
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	6039      	str	r1, [r7, #0]
 8000fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	db0a      	blt.n	8000fde <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	490c      	ldr	r1, [pc, #48]	@ (8001000 <__NVIC_SetPriority+0x4c>)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	0112      	lsls	r2, r2, #4
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	440b      	add	r3, r1
 8000fd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000fdc:	e00a      	b.n	8000ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	4908      	ldr	r1, [pc, #32]	@ (8001004 <__NVIC_SetPriority+0x50>)
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	f003 030f 	and.w	r3, r3, #15
 8000fea:	3b04      	subs	r3, #4
 8000fec:	0112      	lsls	r2, r2, #4
 8000fee:	b2d2      	uxtb	r2, r2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	761a      	strb	r2, [r3, #24]
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000e100 	.word	0xe000e100
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <timer2_set_callback>:

//static function pointer that stores a function
static void (*timer2_callback)(void) = 0; //set as 0 until we run timer_function_callback

// allow us to store a function into compare callback
void timer2_set_callback(void (*cb)(void)) {
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	timer2_callback = cb;
 8001010:	4a04      	ldr	r2, [pc, #16]	@ (8001024 <timer2_set_callback+0x1c>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6013      	str	r3, [r2, #0]
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	200002e8 	.word	0x200002e8

08001028 <set_timer2>:

static uint32_t timer2_period = 0; // Set base timer period

void set_timer2(uint32_t value) {
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	timer2_period = value; }
 8001030:	4a04      	ldr	r2, [pc, #16]	@ (8001044 <set_timer2+0x1c>)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6013      	str	r3, [r2, #0]
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	200002ec 	.word	0x200002ec

08001048 <enableTimer2>:
uint32_t get_timer2(void) {
	return timer2_period; }


void enableTimer2()
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800104c:	b672      	cpsid	i
}
 800104e:	bf00      	nop
	__disable_irq();

	// Enable the clock for Timer 2
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN_Msk;
 8001050:	4b23      	ldr	r3, [pc, #140]	@ (80010e0 <enableTimer2+0x98>)
 8001052:	69db      	ldr	r3, [r3, #28]
 8001054:	4a22      	ldr	r2, [pc, #136]	@ (80010e0 <enableTimer2+0x98>)
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	61d3      	str	r3, [r2, #28]

	// Set Timer 2 Channel 1 to output compare
	TIM2->CCER |= TIM_CCER_CC1E_Msk;
 800105c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001060:	6a1b      	ldr	r3, [r3, #32]
 8001062:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	6213      	str	r3, [r2, #32]

	// Set output pin to toggle on successful output compare
	TIM2->CCMR1 |= TIM_CCMR1_OC1M_0 | TIM_CCMR1_OC1M_1;
 800106c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001070:	699b      	ldr	r3, [r3, #24]
 8001072:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001076:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800107a:	6193      	str	r3, [r2, #24]

	// Value to be compared against
	TIM2->PSC = PRESCALER; // divide by 10001? Would make it 8000 hz
 800107c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001080:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001084:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 0xFFFFFFFF; //count restarts at 4294967295 counts
 8001086:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800108a:	f04f 32ff 	mov.w	r2, #4294967295
 800108e:	62da      	str	r2, [r3, #44]	@ 0x2c

	//Setting the CCR1 to 8000 means that the compare flags when CNT gets to 8000 which is 1 second with prescaler
	TIM2->CCR1 = timer2_period; // delay is 8000 so 8000 is 1 second.
 8001090:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001094:	4b13      	ldr	r3, [pc, #76]	@ (80010e4 <enableTimer2+0x9c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	6353      	str	r3, [r2, #52]	@ 0x34
	// Force update event to apply PSC and ARR. Because prescaler only takes effect an event
	TIM2->EGR |= TIM_EGR_UG; // Forces update event, immediately loads prescaler and ARR values
 800109a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800109e:	695b      	ldr	r3, [r3, #20]
 80010a0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	6153      	str	r3, [r2, #20]

	//Interupts =================================================================================

	// Request an interrupt upon successful output compare
	TIM2->DIER |= TIM_DIER_CC1IE_Msk;
 80010aa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010b4:	f043 0302 	orr.w	r3, r3, #2
 80010b8:	60d3      	str	r3, [r2, #12]

	// Set priority and enable interrupts
	NVIC_SetPriority(TIM2_IRQn, 1);
 80010ba:	2101      	movs	r1, #1
 80010bc:	201c      	movs	r0, #28
 80010be:	f7ff ff79 	bl	8000fb4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn);
 80010c2:	201c      	movs	r0, #28
 80010c4:	f7ff ff34 	bl	8000f30 <__NVIC_EnableIRQ>

	// Start the counter
	TIM2->CR1 |= TIM_CR1_CEN_Msk;
 80010c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80010d8:	b662      	cpsie	i
}
 80010da:	bf00      	nop

	__enable_irq();
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40021000 	.word	0x40021000
 80010e4:	200002ec 	.word	0x200002ec

080010e8 <TIM2_IRQHandler>:

void TIM2_IRQHandler()
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
	// Output compare Interrupt SR = status register of timer 2 and a bitmask checking the Capture/Compare 1 Interrupt Flag.
	if (TIM2->SR & TIM_SR_CC1IF_Msk)
 80010ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010f0:	691b      	ldr	r3, [r3, #16]
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d013      	beq.n	8001122 <TIM2_IRQHandler+0x3a>
	{
		// The next output compare should occur in the next 8000 clock cycles
		TIM2->CCR1 = TIM2->CNT + timer2_period; // changes CCR1 to the current count + the delay
 80010fa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001100:	4b09      	ldr	r3, [pc, #36]	@ (8001128 <TIM2_IRQHandler+0x40>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001108:	4413      	add	r3, r2
 800110a:	634b      	str	r3, [r1, #52]	@ 0x34
		TIM2->SR = 0x00; // clear all status flags in interupt register
 800110c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
		//*lights = *lights ^ 1UL << LED_POS; //toggle LED on or off
		if(timer2_callback) {
 8001114:	4b05      	ldr	r3, [pc, #20]	@ (800112c <TIM2_IRQHandler+0x44>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d002      	beq.n	8001122 <TIM2_IRQHandler+0x3a>
			timer2_callback();
 800111c:	4b03      	ldr	r3, [pc, #12]	@ (800112c <TIM2_IRQHandler+0x44>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4798      	blx	r3
		}
		}
	}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200002ec 	.word	0x200002ec
 800112c:	200002e8 	.word	0x200002e8

08001130 <LEDflash>:

// Pre-scaler updates only upon "events" so this triggers an overflow
// This is how it's done in the lectures. But I use the EGR register instead


void LEDflash(){
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
	//*lights = *lights ^ 1UL << LED_FLASH_POS; //toggle LED on or off
	static uint8_t state = 0;
		if (state) {
 8001134:	4b0e      	ldr	r3, [pc, #56]	@ (8001170 <LEDflash+0x40>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d004      	beq.n	8001146 <LEDflash+0x16>
			*lights = 0x55;  // Turn 0b01010101 on
 800113c:	4b0d      	ldr	r3, [pc, #52]	@ (8001174 <LEDflash+0x44>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2255      	movs	r2, #85	@ 0x55
 8001142:	701a      	strb	r2, [r3, #0]
 8001144:	e003      	b.n	800114e <LEDflash+0x1e>
		} else {
			*lights = 0xAA;  // 0b10101010: On-Off-On-Off...
 8001146:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <LEDflash+0x44>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	22aa      	movs	r2, #170	@ 0xaa
 800114c:	701a      	strb	r2, [r3, #0]
		}
		state ^= 1;  // Flip between 0 and 1
 800114e:	4b08      	ldr	r3, [pc, #32]	@ (8001170 <LEDflash+0x40>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	f083 0301 	eor.w	r3, r3, #1
 8001156:	b2da      	uxtb	r2, r3
 8001158:	4b05      	ldr	r3, [pc, #20]	@ (8001170 <LEDflash+0x40>)
 800115a:	701a      	strb	r2, [r3, #0]
		game.game_time_remaining -= 1;
 800115c:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <LEDflash+0x48>)
 800115e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001160:	3b01      	subs	r3, #1
 8001162:	4a05      	ldr	r2, [pc, #20]	@ (8001178 <LEDflash+0x48>)
 8001164:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8001166:	bf00      	nop
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	200002f0 	.word	0x200002f0
 8001174:	20000060 	.word	0x20000060
 8001178:	20000008 	.word	0x20000008

0800117c <disableTimer2>:

void disableTimer2() {
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
    TIM2->CR1 &= ~TIM_CR1_CEN_Msk;        // stop the timer
 8001180:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800118a:	f023 0301 	bic.w	r3, r3, #1
 800118e:	6013      	str	r3, [r2, #0]
    TIM2->DIER &= ~TIM_DIER_CC1IE_Msk;    // disable interrupt
 8001190:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800119a:	f023 0302 	bic.w	r3, r3, #2
 800119e:	60d3      	str	r3, [r2, #12]
    TIM2->CNT = 0;  					// reset counter
 80011a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011a4:	2200      	movs	r2, #0
 80011a6:	625a      	str	r2, [r3, #36]	@ 0x24
    NVIC_DisableIRQ(TIM2_IRQn);           // disable NVIC interrupt, stops going to TIM2_IRQ handler
 80011a8:	201c      	movs	r0, #28
 80011aa:	f7ff fedf 	bl	8000f6c <__NVIC_DisableIRQ>
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011b4:	480d      	ldr	r0, [pc, #52]	@ (80011ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011b6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80011b8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011bc:	480c      	ldr	r0, [pc, #48]	@ (80011f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80011be:	490d      	ldr	r1, [pc, #52]	@ (80011f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011c0:	4a0d      	ldr	r2, [pc, #52]	@ (80011f8 <LoopForever+0xe>)
  movs r3, #0
 80011c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c4:	e002      	b.n	80011cc <LoopCopyDataInit>

080011c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ca:	3304      	adds	r3, #4

080011cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d0:	d3f9      	bcc.n	80011c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d2:	4a0a      	ldr	r2, [pc, #40]	@ (80011fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80011d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001200 <LoopForever+0x16>)
  movs r3, #0
 80011d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d8:	e001      	b.n	80011de <LoopFillZerobss>

080011da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011dc:	3204      	adds	r2, #4

080011de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e0:	d3fb      	bcc.n	80011da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80011e2:	f000 facb 	bl	800177c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011e6:	f7ff f88f 	bl	8000308 <main>

080011ea <LoopForever>:

LoopForever:
  b LoopForever
 80011ea:	e7fe      	b.n	80011ea <LoopForever>
  ldr   r0, =_estack
 80011ec:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80011f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f4:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 80011f8:	08002d30 	.word	0x08002d30
  ldr r2, =_sbss
 80011fc:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8001200:	20000440 	.word	0x20000440

08001204 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001204:	e7fe      	b.n	8001204 <ADC1_2_IRQHandler>

08001206 <atoi>:
 8001206:	220a      	movs	r2, #10
 8001208:	2100      	movs	r1, #0
 800120a:	f000 b895 	b.w	8001338 <strtol>

0800120e <__itoa>:
 800120e:	1e93      	subs	r3, r2, #2
 8001210:	2b22      	cmp	r3, #34	@ 0x22
 8001212:	b510      	push	{r4, lr}
 8001214:	460c      	mov	r4, r1
 8001216:	d904      	bls.n	8001222 <__itoa+0x14>
 8001218:	2300      	movs	r3, #0
 800121a:	700b      	strb	r3, [r1, #0]
 800121c:	461c      	mov	r4, r3
 800121e:	4620      	mov	r0, r4
 8001220:	bd10      	pop	{r4, pc}
 8001222:	2a0a      	cmp	r2, #10
 8001224:	d109      	bne.n	800123a <__itoa+0x2c>
 8001226:	2800      	cmp	r0, #0
 8001228:	da07      	bge.n	800123a <__itoa+0x2c>
 800122a:	232d      	movs	r3, #45	@ 0x2d
 800122c:	700b      	strb	r3, [r1, #0]
 800122e:	4240      	negs	r0, r0
 8001230:	2101      	movs	r1, #1
 8001232:	4421      	add	r1, r4
 8001234:	f000 f88a 	bl	800134c <__utoa>
 8001238:	e7f1      	b.n	800121e <__itoa+0x10>
 800123a:	2100      	movs	r1, #0
 800123c:	e7f9      	b.n	8001232 <__itoa+0x24>

0800123e <itoa>:
 800123e:	f7ff bfe6 	b.w	800120e <__itoa>
	...

08001244 <_strtol_l.constprop.0>:
 8001244:	2b24      	cmp	r3, #36	@ 0x24
 8001246:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800124a:	4686      	mov	lr, r0
 800124c:	4690      	mov	r8, r2
 800124e:	d801      	bhi.n	8001254 <_strtol_l.constprop.0+0x10>
 8001250:	2b01      	cmp	r3, #1
 8001252:	d106      	bne.n	8001262 <_strtol_l.constprop.0+0x1e>
 8001254:	f000 fa8c 	bl	8001770 <__errno>
 8001258:	2316      	movs	r3, #22
 800125a:	6003      	str	r3, [r0, #0]
 800125c:	2000      	movs	r0, #0
 800125e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001262:	4834      	ldr	r0, [pc, #208]	@ (8001334 <_strtol_l.constprop.0+0xf0>)
 8001264:	460d      	mov	r5, r1
 8001266:	462a      	mov	r2, r5
 8001268:	f815 4b01 	ldrb.w	r4, [r5], #1
 800126c:	5d06      	ldrb	r6, [r0, r4]
 800126e:	f016 0608 	ands.w	r6, r6, #8
 8001272:	d1f8      	bne.n	8001266 <_strtol_l.constprop.0+0x22>
 8001274:	2c2d      	cmp	r4, #45	@ 0x2d
 8001276:	d12d      	bne.n	80012d4 <_strtol_l.constprop.0+0x90>
 8001278:	782c      	ldrb	r4, [r5, #0]
 800127a:	2601      	movs	r6, #1
 800127c:	1c95      	adds	r5, r2, #2
 800127e:	f033 0210 	bics.w	r2, r3, #16
 8001282:	d109      	bne.n	8001298 <_strtol_l.constprop.0+0x54>
 8001284:	2c30      	cmp	r4, #48	@ 0x30
 8001286:	d12a      	bne.n	80012de <_strtol_l.constprop.0+0x9a>
 8001288:	782a      	ldrb	r2, [r5, #0]
 800128a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800128e:	2a58      	cmp	r2, #88	@ 0x58
 8001290:	d125      	bne.n	80012de <_strtol_l.constprop.0+0x9a>
 8001292:	786c      	ldrb	r4, [r5, #1]
 8001294:	2310      	movs	r3, #16
 8001296:	3502      	adds	r5, #2
 8001298:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800129c:	f10c 3cff 	add.w	ip, ip, #4294967295
 80012a0:	2200      	movs	r2, #0
 80012a2:	fbbc f9f3 	udiv	r9, ip, r3
 80012a6:	4610      	mov	r0, r2
 80012a8:	fb03 ca19 	mls	sl, r3, r9, ip
 80012ac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80012b0:	2f09      	cmp	r7, #9
 80012b2:	d81b      	bhi.n	80012ec <_strtol_l.constprop.0+0xa8>
 80012b4:	463c      	mov	r4, r7
 80012b6:	42a3      	cmp	r3, r4
 80012b8:	dd27      	ble.n	800130a <_strtol_l.constprop.0+0xc6>
 80012ba:	1c57      	adds	r7, r2, #1
 80012bc:	d007      	beq.n	80012ce <_strtol_l.constprop.0+0x8a>
 80012be:	4581      	cmp	r9, r0
 80012c0:	d320      	bcc.n	8001304 <_strtol_l.constprop.0+0xc0>
 80012c2:	d101      	bne.n	80012c8 <_strtol_l.constprop.0+0x84>
 80012c4:	45a2      	cmp	sl, r4
 80012c6:	db1d      	blt.n	8001304 <_strtol_l.constprop.0+0xc0>
 80012c8:	fb00 4003 	mla	r0, r0, r3, r4
 80012cc:	2201      	movs	r2, #1
 80012ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80012d2:	e7eb      	b.n	80012ac <_strtol_l.constprop.0+0x68>
 80012d4:	2c2b      	cmp	r4, #43	@ 0x2b
 80012d6:	bf04      	itt	eq
 80012d8:	782c      	ldrbeq	r4, [r5, #0]
 80012da:	1c95      	addeq	r5, r2, #2
 80012dc:	e7cf      	b.n	800127e <_strtol_l.constprop.0+0x3a>
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1da      	bne.n	8001298 <_strtol_l.constprop.0+0x54>
 80012e2:	2c30      	cmp	r4, #48	@ 0x30
 80012e4:	bf0c      	ite	eq
 80012e6:	2308      	moveq	r3, #8
 80012e8:	230a      	movne	r3, #10
 80012ea:	e7d5      	b.n	8001298 <_strtol_l.constprop.0+0x54>
 80012ec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80012f0:	2f19      	cmp	r7, #25
 80012f2:	d801      	bhi.n	80012f8 <_strtol_l.constprop.0+0xb4>
 80012f4:	3c37      	subs	r4, #55	@ 0x37
 80012f6:	e7de      	b.n	80012b6 <_strtol_l.constprop.0+0x72>
 80012f8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80012fc:	2f19      	cmp	r7, #25
 80012fe:	d804      	bhi.n	800130a <_strtol_l.constprop.0+0xc6>
 8001300:	3c57      	subs	r4, #87	@ 0x57
 8001302:	e7d8      	b.n	80012b6 <_strtol_l.constprop.0+0x72>
 8001304:	f04f 32ff 	mov.w	r2, #4294967295
 8001308:	e7e1      	b.n	80012ce <_strtol_l.constprop.0+0x8a>
 800130a:	1c53      	adds	r3, r2, #1
 800130c:	d108      	bne.n	8001320 <_strtol_l.constprop.0+0xdc>
 800130e:	2322      	movs	r3, #34	@ 0x22
 8001310:	f8ce 3000 	str.w	r3, [lr]
 8001314:	4660      	mov	r0, ip
 8001316:	f1b8 0f00 	cmp.w	r8, #0
 800131a:	d0a0      	beq.n	800125e <_strtol_l.constprop.0+0x1a>
 800131c:	1e69      	subs	r1, r5, #1
 800131e:	e006      	b.n	800132e <_strtol_l.constprop.0+0xea>
 8001320:	b106      	cbz	r6, 8001324 <_strtol_l.constprop.0+0xe0>
 8001322:	4240      	negs	r0, r0
 8001324:	f1b8 0f00 	cmp.w	r8, #0
 8001328:	d099      	beq.n	800125e <_strtol_l.constprop.0+0x1a>
 800132a:	2a00      	cmp	r2, #0
 800132c:	d1f6      	bne.n	800131c <_strtol_l.constprop.0+0xd8>
 800132e:	f8c8 1000 	str.w	r1, [r8]
 8001332:	e794      	b.n	800125e <_strtol_l.constprop.0+0x1a>
 8001334:	08002b3e 	.word	0x08002b3e

08001338 <strtol>:
 8001338:	4613      	mov	r3, r2
 800133a:	460a      	mov	r2, r1
 800133c:	4601      	mov	r1, r0
 800133e:	4802      	ldr	r0, [pc, #8]	@ (8001348 <strtol+0x10>)
 8001340:	6800      	ldr	r0, [r0, #0]
 8001342:	f7ff bf7f 	b.w	8001244 <_strtol_l.constprop.0>
 8001346:	bf00      	nop
 8001348:	20000070 	.word	0x20000070

0800134c <__utoa>:
 800134c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800134e:	4c1f      	ldr	r4, [pc, #124]	@ (80013cc <__utoa+0x80>)
 8001350:	b08b      	sub	sp, #44	@ 0x2c
 8001352:	4605      	mov	r5, r0
 8001354:	460b      	mov	r3, r1
 8001356:	466e      	mov	r6, sp
 8001358:	f104 0c20 	add.w	ip, r4, #32
 800135c:	6820      	ldr	r0, [r4, #0]
 800135e:	6861      	ldr	r1, [r4, #4]
 8001360:	4637      	mov	r7, r6
 8001362:	c703      	stmia	r7!, {r0, r1}
 8001364:	3408      	adds	r4, #8
 8001366:	4564      	cmp	r4, ip
 8001368:	463e      	mov	r6, r7
 800136a:	d1f7      	bne.n	800135c <__utoa+0x10>
 800136c:	7921      	ldrb	r1, [r4, #4]
 800136e:	7139      	strb	r1, [r7, #4]
 8001370:	1e91      	subs	r1, r2, #2
 8001372:	6820      	ldr	r0, [r4, #0]
 8001374:	6038      	str	r0, [r7, #0]
 8001376:	2922      	cmp	r1, #34	@ 0x22
 8001378:	f04f 0100 	mov.w	r1, #0
 800137c:	d904      	bls.n	8001388 <__utoa+0x3c>
 800137e:	7019      	strb	r1, [r3, #0]
 8001380:	460b      	mov	r3, r1
 8001382:	4618      	mov	r0, r3
 8001384:	b00b      	add	sp, #44	@ 0x2c
 8001386:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001388:	1e58      	subs	r0, r3, #1
 800138a:	4684      	mov	ip, r0
 800138c:	fbb5 f7f2 	udiv	r7, r5, r2
 8001390:	fb02 5617 	mls	r6, r2, r7, r5
 8001394:	3628      	adds	r6, #40	@ 0x28
 8001396:	446e      	add	r6, sp
 8001398:	460c      	mov	r4, r1
 800139a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800139e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80013a2:	462e      	mov	r6, r5
 80013a4:	42b2      	cmp	r2, r6
 80013a6:	f101 0101 	add.w	r1, r1, #1
 80013aa:	463d      	mov	r5, r7
 80013ac:	d9ee      	bls.n	800138c <__utoa+0x40>
 80013ae:	2200      	movs	r2, #0
 80013b0:	545a      	strb	r2, [r3, r1]
 80013b2:	1919      	adds	r1, r3, r4
 80013b4:	1aa5      	subs	r5, r4, r2
 80013b6:	42aa      	cmp	r2, r5
 80013b8:	dae3      	bge.n	8001382 <__utoa+0x36>
 80013ba:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80013be:	780e      	ldrb	r6, [r1, #0]
 80013c0:	7006      	strb	r6, [r0, #0]
 80013c2:	3201      	adds	r2, #1
 80013c4:	f801 5901 	strb.w	r5, [r1], #-1
 80013c8:	e7f4      	b.n	80013b4 <__utoa+0x68>
 80013ca:	bf00      	nop
 80013cc:	08002b18 	.word	0x08002b18

080013d0 <std>:
 80013d0:	2300      	movs	r3, #0
 80013d2:	b510      	push	{r4, lr}
 80013d4:	4604      	mov	r4, r0
 80013d6:	e9c0 3300 	strd	r3, r3, [r0]
 80013da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80013de:	6083      	str	r3, [r0, #8]
 80013e0:	8181      	strh	r1, [r0, #12]
 80013e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80013e4:	81c2      	strh	r2, [r0, #14]
 80013e6:	6183      	str	r3, [r0, #24]
 80013e8:	4619      	mov	r1, r3
 80013ea:	2208      	movs	r2, #8
 80013ec:	305c      	adds	r0, #92	@ 0x5c
 80013ee:	f000 f914 	bl	800161a <memset>
 80013f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001428 <std+0x58>)
 80013f4:	6263      	str	r3, [r4, #36]	@ 0x24
 80013f6:	4b0d      	ldr	r3, [pc, #52]	@ (800142c <std+0x5c>)
 80013f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80013fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001430 <std+0x60>)
 80013fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80013fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001434 <std+0x64>)
 8001400:	6323      	str	r3, [r4, #48]	@ 0x30
 8001402:	4b0d      	ldr	r3, [pc, #52]	@ (8001438 <std+0x68>)
 8001404:	6224      	str	r4, [r4, #32]
 8001406:	429c      	cmp	r4, r3
 8001408:	d006      	beq.n	8001418 <std+0x48>
 800140a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800140e:	4294      	cmp	r4, r2
 8001410:	d002      	beq.n	8001418 <std+0x48>
 8001412:	33d0      	adds	r3, #208	@ 0xd0
 8001414:	429c      	cmp	r4, r3
 8001416:	d105      	bne.n	8001424 <std+0x54>
 8001418:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800141c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001420:	f000 b9d0 	b.w	80017c4 <__retarget_lock_init_recursive>
 8001424:	bd10      	pop	{r4, pc}
 8001426:	bf00      	nop
 8001428:	08001595 	.word	0x08001595
 800142c:	080015b7 	.word	0x080015b7
 8001430:	080015ef 	.word	0x080015ef
 8001434:	08001613 	.word	0x08001613
 8001438:	200002f4 	.word	0x200002f4

0800143c <stdio_exit_handler>:
 800143c:	4a02      	ldr	r2, [pc, #8]	@ (8001448 <stdio_exit_handler+0xc>)
 800143e:	4903      	ldr	r1, [pc, #12]	@ (800144c <stdio_exit_handler+0x10>)
 8001440:	4803      	ldr	r0, [pc, #12]	@ (8001450 <stdio_exit_handler+0x14>)
 8001442:	f000 b869 	b.w	8001518 <_fwalk_sglue>
 8001446:	bf00      	nop
 8001448:	20000064 	.word	0x20000064
 800144c:	080020dd 	.word	0x080020dd
 8001450:	20000074 	.word	0x20000074

08001454 <cleanup_stdio>:
 8001454:	6841      	ldr	r1, [r0, #4]
 8001456:	4b0c      	ldr	r3, [pc, #48]	@ (8001488 <cleanup_stdio+0x34>)
 8001458:	4299      	cmp	r1, r3
 800145a:	b510      	push	{r4, lr}
 800145c:	4604      	mov	r4, r0
 800145e:	d001      	beq.n	8001464 <cleanup_stdio+0x10>
 8001460:	f000 fe3c 	bl	80020dc <_fflush_r>
 8001464:	68a1      	ldr	r1, [r4, #8]
 8001466:	4b09      	ldr	r3, [pc, #36]	@ (800148c <cleanup_stdio+0x38>)
 8001468:	4299      	cmp	r1, r3
 800146a:	d002      	beq.n	8001472 <cleanup_stdio+0x1e>
 800146c:	4620      	mov	r0, r4
 800146e:	f000 fe35 	bl	80020dc <_fflush_r>
 8001472:	68e1      	ldr	r1, [r4, #12]
 8001474:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <cleanup_stdio+0x3c>)
 8001476:	4299      	cmp	r1, r3
 8001478:	d004      	beq.n	8001484 <cleanup_stdio+0x30>
 800147a:	4620      	mov	r0, r4
 800147c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001480:	f000 be2c 	b.w	80020dc <_fflush_r>
 8001484:	bd10      	pop	{r4, pc}
 8001486:	bf00      	nop
 8001488:	200002f4 	.word	0x200002f4
 800148c:	2000035c 	.word	0x2000035c
 8001490:	200003c4 	.word	0x200003c4

08001494 <global_stdio_init.part.0>:
 8001494:	b510      	push	{r4, lr}
 8001496:	4b0b      	ldr	r3, [pc, #44]	@ (80014c4 <global_stdio_init.part.0+0x30>)
 8001498:	4c0b      	ldr	r4, [pc, #44]	@ (80014c8 <global_stdio_init.part.0+0x34>)
 800149a:	4a0c      	ldr	r2, [pc, #48]	@ (80014cc <global_stdio_init.part.0+0x38>)
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	4620      	mov	r0, r4
 80014a0:	2200      	movs	r2, #0
 80014a2:	2104      	movs	r1, #4
 80014a4:	f7ff ff94 	bl	80013d0 <std>
 80014a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80014ac:	2201      	movs	r2, #1
 80014ae:	2109      	movs	r1, #9
 80014b0:	f7ff ff8e 	bl	80013d0 <std>
 80014b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80014b8:	2202      	movs	r2, #2
 80014ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014be:	2112      	movs	r1, #18
 80014c0:	f7ff bf86 	b.w	80013d0 <std>
 80014c4:	2000042c 	.word	0x2000042c
 80014c8:	200002f4 	.word	0x200002f4
 80014cc:	0800143d 	.word	0x0800143d

080014d0 <__sfp_lock_acquire>:
 80014d0:	4801      	ldr	r0, [pc, #4]	@ (80014d8 <__sfp_lock_acquire+0x8>)
 80014d2:	f000 b978 	b.w	80017c6 <__retarget_lock_acquire_recursive>
 80014d6:	bf00      	nop
 80014d8:	20000435 	.word	0x20000435

080014dc <__sfp_lock_release>:
 80014dc:	4801      	ldr	r0, [pc, #4]	@ (80014e4 <__sfp_lock_release+0x8>)
 80014de:	f000 b973 	b.w	80017c8 <__retarget_lock_release_recursive>
 80014e2:	bf00      	nop
 80014e4:	20000435 	.word	0x20000435

080014e8 <__sinit>:
 80014e8:	b510      	push	{r4, lr}
 80014ea:	4604      	mov	r4, r0
 80014ec:	f7ff fff0 	bl	80014d0 <__sfp_lock_acquire>
 80014f0:	6a23      	ldr	r3, [r4, #32]
 80014f2:	b11b      	cbz	r3, 80014fc <__sinit+0x14>
 80014f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014f8:	f7ff bff0 	b.w	80014dc <__sfp_lock_release>
 80014fc:	4b04      	ldr	r3, [pc, #16]	@ (8001510 <__sinit+0x28>)
 80014fe:	6223      	str	r3, [r4, #32]
 8001500:	4b04      	ldr	r3, [pc, #16]	@ (8001514 <__sinit+0x2c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1f5      	bne.n	80014f4 <__sinit+0xc>
 8001508:	f7ff ffc4 	bl	8001494 <global_stdio_init.part.0>
 800150c:	e7f2      	b.n	80014f4 <__sinit+0xc>
 800150e:	bf00      	nop
 8001510:	08001455 	.word	0x08001455
 8001514:	2000042c 	.word	0x2000042c

08001518 <_fwalk_sglue>:
 8001518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800151c:	4607      	mov	r7, r0
 800151e:	4688      	mov	r8, r1
 8001520:	4614      	mov	r4, r2
 8001522:	2600      	movs	r6, #0
 8001524:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001528:	f1b9 0901 	subs.w	r9, r9, #1
 800152c:	d505      	bpl.n	800153a <_fwalk_sglue+0x22>
 800152e:	6824      	ldr	r4, [r4, #0]
 8001530:	2c00      	cmp	r4, #0
 8001532:	d1f7      	bne.n	8001524 <_fwalk_sglue+0xc>
 8001534:	4630      	mov	r0, r6
 8001536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800153a:	89ab      	ldrh	r3, [r5, #12]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d907      	bls.n	8001550 <_fwalk_sglue+0x38>
 8001540:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001544:	3301      	adds	r3, #1
 8001546:	d003      	beq.n	8001550 <_fwalk_sglue+0x38>
 8001548:	4629      	mov	r1, r5
 800154a:	4638      	mov	r0, r7
 800154c:	47c0      	blx	r8
 800154e:	4306      	orrs	r6, r0
 8001550:	3568      	adds	r5, #104	@ 0x68
 8001552:	e7e9      	b.n	8001528 <_fwalk_sglue+0x10>

08001554 <siprintf>:
 8001554:	b40e      	push	{r1, r2, r3}
 8001556:	b500      	push	{lr}
 8001558:	b09c      	sub	sp, #112	@ 0x70
 800155a:	ab1d      	add	r3, sp, #116	@ 0x74
 800155c:	9002      	str	r0, [sp, #8]
 800155e:	9006      	str	r0, [sp, #24]
 8001560:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8001564:	4809      	ldr	r0, [pc, #36]	@ (800158c <siprintf+0x38>)
 8001566:	9107      	str	r1, [sp, #28]
 8001568:	9104      	str	r1, [sp, #16]
 800156a:	4909      	ldr	r1, [pc, #36]	@ (8001590 <siprintf+0x3c>)
 800156c:	f853 2b04 	ldr.w	r2, [r3], #4
 8001570:	9105      	str	r1, [sp, #20]
 8001572:	6800      	ldr	r0, [r0, #0]
 8001574:	9301      	str	r3, [sp, #4]
 8001576:	a902      	add	r1, sp, #8
 8001578:	f000 faa2 	bl	8001ac0 <_svfiprintf_r>
 800157c:	9b02      	ldr	r3, [sp, #8]
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]
 8001582:	b01c      	add	sp, #112	@ 0x70
 8001584:	f85d eb04 	ldr.w	lr, [sp], #4
 8001588:	b003      	add	sp, #12
 800158a:	4770      	bx	lr
 800158c:	20000070 	.word	0x20000070
 8001590:	ffff0208 	.word	0xffff0208

08001594 <__sread>:
 8001594:	b510      	push	{r4, lr}
 8001596:	460c      	mov	r4, r1
 8001598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800159c:	f000 f8c4 	bl	8001728 <_read_r>
 80015a0:	2800      	cmp	r0, #0
 80015a2:	bfab      	itete	ge
 80015a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80015a6:	89a3      	ldrhlt	r3, [r4, #12]
 80015a8:	181b      	addge	r3, r3, r0
 80015aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80015ae:	bfac      	ite	ge
 80015b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80015b2:	81a3      	strhlt	r3, [r4, #12]
 80015b4:	bd10      	pop	{r4, pc}

080015b6 <__swrite>:
 80015b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015ba:	461f      	mov	r7, r3
 80015bc:	898b      	ldrh	r3, [r1, #12]
 80015be:	05db      	lsls	r3, r3, #23
 80015c0:	4605      	mov	r5, r0
 80015c2:	460c      	mov	r4, r1
 80015c4:	4616      	mov	r6, r2
 80015c6:	d505      	bpl.n	80015d4 <__swrite+0x1e>
 80015c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015cc:	2302      	movs	r3, #2
 80015ce:	2200      	movs	r2, #0
 80015d0:	f000 f898 	bl	8001704 <_lseek_r>
 80015d4:	89a3      	ldrh	r3, [r4, #12]
 80015d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80015da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80015de:	81a3      	strh	r3, [r4, #12]
 80015e0:	4632      	mov	r2, r6
 80015e2:	463b      	mov	r3, r7
 80015e4:	4628      	mov	r0, r5
 80015e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80015ea:	f000 b8af 	b.w	800174c <_write_r>

080015ee <__sseek>:
 80015ee:	b510      	push	{r4, lr}
 80015f0:	460c      	mov	r4, r1
 80015f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015f6:	f000 f885 	bl	8001704 <_lseek_r>
 80015fa:	1c43      	adds	r3, r0, #1
 80015fc:	89a3      	ldrh	r3, [r4, #12]
 80015fe:	bf15      	itete	ne
 8001600:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001602:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001606:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800160a:	81a3      	strheq	r3, [r4, #12]
 800160c:	bf18      	it	ne
 800160e:	81a3      	strhne	r3, [r4, #12]
 8001610:	bd10      	pop	{r4, pc}

08001612 <__sclose>:
 8001612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001616:	f000 b865 	b.w	80016e4 <_close_r>

0800161a <memset>:
 800161a:	4402      	add	r2, r0
 800161c:	4603      	mov	r3, r0
 800161e:	4293      	cmp	r3, r2
 8001620:	d100      	bne.n	8001624 <memset+0xa>
 8001622:	4770      	bx	lr
 8001624:	f803 1b01 	strb.w	r1, [r3], #1
 8001628:	e7f9      	b.n	800161e <memset+0x4>
	...

0800162c <strtok>:
 800162c:	4b16      	ldr	r3, [pc, #88]	@ (8001688 <strtok+0x5c>)
 800162e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001632:	681f      	ldr	r7, [r3, #0]
 8001634:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8001636:	4605      	mov	r5, r0
 8001638:	460e      	mov	r6, r1
 800163a:	b9ec      	cbnz	r4, 8001678 <strtok+0x4c>
 800163c:	2050      	movs	r0, #80	@ 0x50
 800163e:	f000 f92d 	bl	800189c <malloc>
 8001642:	4602      	mov	r2, r0
 8001644:	6478      	str	r0, [r7, #68]	@ 0x44
 8001646:	b920      	cbnz	r0, 8001652 <strtok+0x26>
 8001648:	4b10      	ldr	r3, [pc, #64]	@ (800168c <strtok+0x60>)
 800164a:	4811      	ldr	r0, [pc, #68]	@ (8001690 <strtok+0x64>)
 800164c:	215b      	movs	r1, #91	@ 0x5b
 800164e:	f000 f8bd 	bl	80017cc <__assert_func>
 8001652:	e9c0 4400 	strd	r4, r4, [r0]
 8001656:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800165a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800165e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8001662:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8001666:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800166a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800166e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8001672:	6184      	str	r4, [r0, #24]
 8001674:	7704      	strb	r4, [r0, #28]
 8001676:	6244      	str	r4, [r0, #36]	@ 0x24
 8001678:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800167a:	4631      	mov	r1, r6
 800167c:	4628      	mov	r0, r5
 800167e:	2301      	movs	r3, #1
 8001680:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001684:	f000 b806 	b.w	8001694 <__strtok_r>
 8001688:	20000070 	.word	0x20000070
 800168c:	08002c3e 	.word	0x08002c3e
 8001690:	08002c55 	.word	0x08002c55

08001694 <__strtok_r>:
 8001694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001696:	4604      	mov	r4, r0
 8001698:	b908      	cbnz	r0, 800169e <__strtok_r+0xa>
 800169a:	6814      	ldr	r4, [r2, #0]
 800169c:	b144      	cbz	r4, 80016b0 <__strtok_r+0x1c>
 800169e:	4620      	mov	r0, r4
 80016a0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80016a4:	460f      	mov	r7, r1
 80016a6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80016aa:	b91e      	cbnz	r6, 80016b4 <__strtok_r+0x20>
 80016ac:	b965      	cbnz	r5, 80016c8 <__strtok_r+0x34>
 80016ae:	6015      	str	r5, [r2, #0]
 80016b0:	2000      	movs	r0, #0
 80016b2:	e005      	b.n	80016c0 <__strtok_r+0x2c>
 80016b4:	42b5      	cmp	r5, r6
 80016b6:	d1f6      	bne.n	80016a6 <__strtok_r+0x12>
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1f0      	bne.n	800169e <__strtok_r+0xa>
 80016bc:	6014      	str	r4, [r2, #0]
 80016be:	7003      	strb	r3, [r0, #0]
 80016c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016c2:	461c      	mov	r4, r3
 80016c4:	e00c      	b.n	80016e0 <__strtok_r+0x4c>
 80016c6:	b915      	cbnz	r5, 80016ce <__strtok_r+0x3a>
 80016c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80016cc:	460e      	mov	r6, r1
 80016ce:	f816 5b01 	ldrb.w	r5, [r6], #1
 80016d2:	42ab      	cmp	r3, r5
 80016d4:	d1f7      	bne.n	80016c6 <__strtok_r+0x32>
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d0f3      	beq.n	80016c2 <__strtok_r+0x2e>
 80016da:	2300      	movs	r3, #0
 80016dc:	f804 3c01 	strb.w	r3, [r4, #-1]
 80016e0:	6014      	str	r4, [r2, #0]
 80016e2:	e7ed      	b.n	80016c0 <__strtok_r+0x2c>

080016e4 <_close_r>:
 80016e4:	b538      	push	{r3, r4, r5, lr}
 80016e6:	4d06      	ldr	r5, [pc, #24]	@ (8001700 <_close_r+0x1c>)
 80016e8:	2300      	movs	r3, #0
 80016ea:	4604      	mov	r4, r0
 80016ec:	4608      	mov	r0, r1
 80016ee:	602b      	str	r3, [r5, #0]
 80016f0:	f7ff fbb3 	bl	8000e5a <_close>
 80016f4:	1c43      	adds	r3, r0, #1
 80016f6:	d102      	bne.n	80016fe <_close_r+0x1a>
 80016f8:	682b      	ldr	r3, [r5, #0]
 80016fa:	b103      	cbz	r3, 80016fe <_close_r+0x1a>
 80016fc:	6023      	str	r3, [r4, #0]
 80016fe:	bd38      	pop	{r3, r4, r5, pc}
 8001700:	20000430 	.word	0x20000430

08001704 <_lseek_r>:
 8001704:	b538      	push	{r3, r4, r5, lr}
 8001706:	4d07      	ldr	r5, [pc, #28]	@ (8001724 <_lseek_r+0x20>)
 8001708:	4604      	mov	r4, r0
 800170a:	4608      	mov	r0, r1
 800170c:	4611      	mov	r1, r2
 800170e:	2200      	movs	r2, #0
 8001710:	602a      	str	r2, [r5, #0]
 8001712:	461a      	mov	r2, r3
 8001714:	f7ff fbc8 	bl	8000ea8 <_lseek>
 8001718:	1c43      	adds	r3, r0, #1
 800171a:	d102      	bne.n	8001722 <_lseek_r+0x1e>
 800171c:	682b      	ldr	r3, [r5, #0]
 800171e:	b103      	cbz	r3, 8001722 <_lseek_r+0x1e>
 8001720:	6023      	str	r3, [r4, #0]
 8001722:	bd38      	pop	{r3, r4, r5, pc}
 8001724:	20000430 	.word	0x20000430

08001728 <_read_r>:
 8001728:	b538      	push	{r3, r4, r5, lr}
 800172a:	4d07      	ldr	r5, [pc, #28]	@ (8001748 <_read_r+0x20>)
 800172c:	4604      	mov	r4, r0
 800172e:	4608      	mov	r0, r1
 8001730:	4611      	mov	r1, r2
 8001732:	2200      	movs	r2, #0
 8001734:	602a      	str	r2, [r5, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	f7ff fb56 	bl	8000de8 <_read>
 800173c:	1c43      	adds	r3, r0, #1
 800173e:	d102      	bne.n	8001746 <_read_r+0x1e>
 8001740:	682b      	ldr	r3, [r5, #0]
 8001742:	b103      	cbz	r3, 8001746 <_read_r+0x1e>
 8001744:	6023      	str	r3, [r4, #0]
 8001746:	bd38      	pop	{r3, r4, r5, pc}
 8001748:	20000430 	.word	0x20000430

0800174c <_write_r>:
 800174c:	b538      	push	{r3, r4, r5, lr}
 800174e:	4d07      	ldr	r5, [pc, #28]	@ (800176c <_write_r+0x20>)
 8001750:	4604      	mov	r4, r0
 8001752:	4608      	mov	r0, r1
 8001754:	4611      	mov	r1, r2
 8001756:	2200      	movs	r2, #0
 8001758:	602a      	str	r2, [r5, #0]
 800175a:	461a      	mov	r2, r3
 800175c:	f7ff fb61 	bl	8000e22 <_write>
 8001760:	1c43      	adds	r3, r0, #1
 8001762:	d102      	bne.n	800176a <_write_r+0x1e>
 8001764:	682b      	ldr	r3, [r5, #0]
 8001766:	b103      	cbz	r3, 800176a <_write_r+0x1e>
 8001768:	6023      	str	r3, [r4, #0]
 800176a:	bd38      	pop	{r3, r4, r5, pc}
 800176c:	20000430 	.word	0x20000430

08001770 <__errno>:
 8001770:	4b01      	ldr	r3, [pc, #4]	@ (8001778 <__errno+0x8>)
 8001772:	6818      	ldr	r0, [r3, #0]
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	20000070 	.word	0x20000070

0800177c <__libc_init_array>:
 800177c:	b570      	push	{r4, r5, r6, lr}
 800177e:	4d0d      	ldr	r5, [pc, #52]	@ (80017b4 <__libc_init_array+0x38>)
 8001780:	4c0d      	ldr	r4, [pc, #52]	@ (80017b8 <__libc_init_array+0x3c>)
 8001782:	1b64      	subs	r4, r4, r5
 8001784:	10a4      	asrs	r4, r4, #2
 8001786:	2600      	movs	r6, #0
 8001788:	42a6      	cmp	r6, r4
 800178a:	d109      	bne.n	80017a0 <__libc_init_array+0x24>
 800178c:	4d0b      	ldr	r5, [pc, #44]	@ (80017bc <__libc_init_array+0x40>)
 800178e:	4c0c      	ldr	r4, [pc, #48]	@ (80017c0 <__libc_init_array+0x44>)
 8001790:	f000 fff0 	bl	8002774 <_init>
 8001794:	1b64      	subs	r4, r4, r5
 8001796:	10a4      	asrs	r4, r4, #2
 8001798:	2600      	movs	r6, #0
 800179a:	42a6      	cmp	r6, r4
 800179c:	d105      	bne.n	80017aa <__libc_init_array+0x2e>
 800179e:	bd70      	pop	{r4, r5, r6, pc}
 80017a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80017a4:	4798      	blx	r3
 80017a6:	3601      	adds	r6, #1
 80017a8:	e7ee      	b.n	8001788 <__libc_init_array+0xc>
 80017aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80017ae:	4798      	blx	r3
 80017b0:	3601      	adds	r6, #1
 80017b2:	e7f2      	b.n	800179a <__libc_init_array+0x1e>
 80017b4:	08002d28 	.word	0x08002d28
 80017b8:	08002d28 	.word	0x08002d28
 80017bc:	08002d28 	.word	0x08002d28
 80017c0:	08002d2c 	.word	0x08002d2c

080017c4 <__retarget_lock_init_recursive>:
 80017c4:	4770      	bx	lr

080017c6 <__retarget_lock_acquire_recursive>:
 80017c6:	4770      	bx	lr

080017c8 <__retarget_lock_release_recursive>:
 80017c8:	4770      	bx	lr
	...

080017cc <__assert_func>:
 80017cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80017ce:	4614      	mov	r4, r2
 80017d0:	461a      	mov	r2, r3
 80017d2:	4b09      	ldr	r3, [pc, #36]	@ (80017f8 <__assert_func+0x2c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4605      	mov	r5, r0
 80017d8:	68d8      	ldr	r0, [r3, #12]
 80017da:	b954      	cbnz	r4, 80017f2 <__assert_func+0x26>
 80017dc:	4b07      	ldr	r3, [pc, #28]	@ (80017fc <__assert_func+0x30>)
 80017de:	461c      	mov	r4, r3
 80017e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80017e4:	9100      	str	r1, [sp, #0]
 80017e6:	462b      	mov	r3, r5
 80017e8:	4905      	ldr	r1, [pc, #20]	@ (8001800 <__assert_func+0x34>)
 80017ea:	f000 fc9f 	bl	800212c <fiprintf>
 80017ee:	f000 fce7 	bl	80021c0 <abort>
 80017f2:	4b04      	ldr	r3, [pc, #16]	@ (8001804 <__assert_func+0x38>)
 80017f4:	e7f4      	b.n	80017e0 <__assert_func+0x14>
 80017f6:	bf00      	nop
 80017f8:	20000070 	.word	0x20000070
 80017fc:	08002cea 	.word	0x08002cea
 8001800:	08002cbc 	.word	0x08002cbc
 8001804:	08002caf 	.word	0x08002caf

08001808 <_free_r>:
 8001808:	b538      	push	{r3, r4, r5, lr}
 800180a:	4605      	mov	r5, r0
 800180c:	2900      	cmp	r1, #0
 800180e:	d041      	beq.n	8001894 <_free_r+0x8c>
 8001810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001814:	1f0c      	subs	r4, r1, #4
 8001816:	2b00      	cmp	r3, #0
 8001818:	bfb8      	it	lt
 800181a:	18e4      	addlt	r4, r4, r3
 800181c:	f000 f8e8 	bl	80019f0 <__malloc_lock>
 8001820:	4a1d      	ldr	r2, [pc, #116]	@ (8001898 <_free_r+0x90>)
 8001822:	6813      	ldr	r3, [r2, #0]
 8001824:	b933      	cbnz	r3, 8001834 <_free_r+0x2c>
 8001826:	6063      	str	r3, [r4, #4]
 8001828:	6014      	str	r4, [r2, #0]
 800182a:	4628      	mov	r0, r5
 800182c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001830:	f000 b8e4 	b.w	80019fc <__malloc_unlock>
 8001834:	42a3      	cmp	r3, r4
 8001836:	d908      	bls.n	800184a <_free_r+0x42>
 8001838:	6820      	ldr	r0, [r4, #0]
 800183a:	1821      	adds	r1, r4, r0
 800183c:	428b      	cmp	r3, r1
 800183e:	bf01      	itttt	eq
 8001840:	6819      	ldreq	r1, [r3, #0]
 8001842:	685b      	ldreq	r3, [r3, #4]
 8001844:	1809      	addeq	r1, r1, r0
 8001846:	6021      	streq	r1, [r4, #0]
 8001848:	e7ed      	b.n	8001826 <_free_r+0x1e>
 800184a:	461a      	mov	r2, r3
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	b10b      	cbz	r3, 8001854 <_free_r+0x4c>
 8001850:	42a3      	cmp	r3, r4
 8001852:	d9fa      	bls.n	800184a <_free_r+0x42>
 8001854:	6811      	ldr	r1, [r2, #0]
 8001856:	1850      	adds	r0, r2, r1
 8001858:	42a0      	cmp	r0, r4
 800185a:	d10b      	bne.n	8001874 <_free_r+0x6c>
 800185c:	6820      	ldr	r0, [r4, #0]
 800185e:	4401      	add	r1, r0
 8001860:	1850      	adds	r0, r2, r1
 8001862:	4283      	cmp	r3, r0
 8001864:	6011      	str	r1, [r2, #0]
 8001866:	d1e0      	bne.n	800182a <_free_r+0x22>
 8001868:	6818      	ldr	r0, [r3, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	6053      	str	r3, [r2, #4]
 800186e:	4408      	add	r0, r1
 8001870:	6010      	str	r0, [r2, #0]
 8001872:	e7da      	b.n	800182a <_free_r+0x22>
 8001874:	d902      	bls.n	800187c <_free_r+0x74>
 8001876:	230c      	movs	r3, #12
 8001878:	602b      	str	r3, [r5, #0]
 800187a:	e7d6      	b.n	800182a <_free_r+0x22>
 800187c:	6820      	ldr	r0, [r4, #0]
 800187e:	1821      	adds	r1, r4, r0
 8001880:	428b      	cmp	r3, r1
 8001882:	bf04      	itt	eq
 8001884:	6819      	ldreq	r1, [r3, #0]
 8001886:	685b      	ldreq	r3, [r3, #4]
 8001888:	6063      	str	r3, [r4, #4]
 800188a:	bf04      	itt	eq
 800188c:	1809      	addeq	r1, r1, r0
 800188e:	6021      	streq	r1, [r4, #0]
 8001890:	6054      	str	r4, [r2, #4]
 8001892:	e7ca      	b.n	800182a <_free_r+0x22>
 8001894:	bd38      	pop	{r3, r4, r5, pc}
 8001896:	bf00      	nop
 8001898:	2000043c 	.word	0x2000043c

0800189c <malloc>:
 800189c:	4b02      	ldr	r3, [pc, #8]	@ (80018a8 <malloc+0xc>)
 800189e:	4601      	mov	r1, r0
 80018a0:	6818      	ldr	r0, [r3, #0]
 80018a2:	f000 b825 	b.w	80018f0 <_malloc_r>
 80018a6:	bf00      	nop
 80018a8:	20000070 	.word	0x20000070

080018ac <sbrk_aligned>:
 80018ac:	b570      	push	{r4, r5, r6, lr}
 80018ae:	4e0f      	ldr	r6, [pc, #60]	@ (80018ec <sbrk_aligned+0x40>)
 80018b0:	460c      	mov	r4, r1
 80018b2:	6831      	ldr	r1, [r6, #0]
 80018b4:	4605      	mov	r5, r0
 80018b6:	b911      	cbnz	r1, 80018be <sbrk_aligned+0x12>
 80018b8:	f000 fc64 	bl	8002184 <_sbrk_r>
 80018bc:	6030      	str	r0, [r6, #0]
 80018be:	4621      	mov	r1, r4
 80018c0:	4628      	mov	r0, r5
 80018c2:	f000 fc5f 	bl	8002184 <_sbrk_r>
 80018c6:	1c43      	adds	r3, r0, #1
 80018c8:	d103      	bne.n	80018d2 <sbrk_aligned+0x26>
 80018ca:	f04f 34ff 	mov.w	r4, #4294967295
 80018ce:	4620      	mov	r0, r4
 80018d0:	bd70      	pop	{r4, r5, r6, pc}
 80018d2:	1cc4      	adds	r4, r0, #3
 80018d4:	f024 0403 	bic.w	r4, r4, #3
 80018d8:	42a0      	cmp	r0, r4
 80018da:	d0f8      	beq.n	80018ce <sbrk_aligned+0x22>
 80018dc:	1a21      	subs	r1, r4, r0
 80018de:	4628      	mov	r0, r5
 80018e0:	f000 fc50 	bl	8002184 <_sbrk_r>
 80018e4:	3001      	adds	r0, #1
 80018e6:	d1f2      	bne.n	80018ce <sbrk_aligned+0x22>
 80018e8:	e7ef      	b.n	80018ca <sbrk_aligned+0x1e>
 80018ea:	bf00      	nop
 80018ec:	20000438 	.word	0x20000438

080018f0 <_malloc_r>:
 80018f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80018f4:	1ccd      	adds	r5, r1, #3
 80018f6:	f025 0503 	bic.w	r5, r5, #3
 80018fa:	3508      	adds	r5, #8
 80018fc:	2d0c      	cmp	r5, #12
 80018fe:	bf38      	it	cc
 8001900:	250c      	movcc	r5, #12
 8001902:	2d00      	cmp	r5, #0
 8001904:	4606      	mov	r6, r0
 8001906:	db01      	blt.n	800190c <_malloc_r+0x1c>
 8001908:	42a9      	cmp	r1, r5
 800190a:	d904      	bls.n	8001916 <_malloc_r+0x26>
 800190c:	230c      	movs	r3, #12
 800190e:	6033      	str	r3, [r6, #0]
 8001910:	2000      	movs	r0, #0
 8001912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001916:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80019ec <_malloc_r+0xfc>
 800191a:	f000 f869 	bl	80019f0 <__malloc_lock>
 800191e:	f8d8 3000 	ldr.w	r3, [r8]
 8001922:	461c      	mov	r4, r3
 8001924:	bb44      	cbnz	r4, 8001978 <_malloc_r+0x88>
 8001926:	4629      	mov	r1, r5
 8001928:	4630      	mov	r0, r6
 800192a:	f7ff ffbf 	bl	80018ac <sbrk_aligned>
 800192e:	1c43      	adds	r3, r0, #1
 8001930:	4604      	mov	r4, r0
 8001932:	d158      	bne.n	80019e6 <_malloc_r+0xf6>
 8001934:	f8d8 4000 	ldr.w	r4, [r8]
 8001938:	4627      	mov	r7, r4
 800193a:	2f00      	cmp	r7, #0
 800193c:	d143      	bne.n	80019c6 <_malloc_r+0xd6>
 800193e:	2c00      	cmp	r4, #0
 8001940:	d04b      	beq.n	80019da <_malloc_r+0xea>
 8001942:	6823      	ldr	r3, [r4, #0]
 8001944:	4639      	mov	r1, r7
 8001946:	4630      	mov	r0, r6
 8001948:	eb04 0903 	add.w	r9, r4, r3
 800194c:	f000 fc1a 	bl	8002184 <_sbrk_r>
 8001950:	4581      	cmp	r9, r0
 8001952:	d142      	bne.n	80019da <_malloc_r+0xea>
 8001954:	6821      	ldr	r1, [r4, #0]
 8001956:	1a6d      	subs	r5, r5, r1
 8001958:	4629      	mov	r1, r5
 800195a:	4630      	mov	r0, r6
 800195c:	f7ff ffa6 	bl	80018ac <sbrk_aligned>
 8001960:	3001      	adds	r0, #1
 8001962:	d03a      	beq.n	80019da <_malloc_r+0xea>
 8001964:	6823      	ldr	r3, [r4, #0]
 8001966:	442b      	add	r3, r5
 8001968:	6023      	str	r3, [r4, #0]
 800196a:	f8d8 3000 	ldr.w	r3, [r8]
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	bb62      	cbnz	r2, 80019cc <_malloc_r+0xdc>
 8001972:	f8c8 7000 	str.w	r7, [r8]
 8001976:	e00f      	b.n	8001998 <_malloc_r+0xa8>
 8001978:	6822      	ldr	r2, [r4, #0]
 800197a:	1b52      	subs	r2, r2, r5
 800197c:	d420      	bmi.n	80019c0 <_malloc_r+0xd0>
 800197e:	2a0b      	cmp	r2, #11
 8001980:	d917      	bls.n	80019b2 <_malloc_r+0xc2>
 8001982:	1961      	adds	r1, r4, r5
 8001984:	42a3      	cmp	r3, r4
 8001986:	6025      	str	r5, [r4, #0]
 8001988:	bf18      	it	ne
 800198a:	6059      	strne	r1, [r3, #4]
 800198c:	6863      	ldr	r3, [r4, #4]
 800198e:	bf08      	it	eq
 8001990:	f8c8 1000 	streq.w	r1, [r8]
 8001994:	5162      	str	r2, [r4, r5]
 8001996:	604b      	str	r3, [r1, #4]
 8001998:	4630      	mov	r0, r6
 800199a:	f000 f82f 	bl	80019fc <__malloc_unlock>
 800199e:	f104 000b 	add.w	r0, r4, #11
 80019a2:	1d23      	adds	r3, r4, #4
 80019a4:	f020 0007 	bic.w	r0, r0, #7
 80019a8:	1ac2      	subs	r2, r0, r3
 80019aa:	bf1c      	itt	ne
 80019ac:	1a1b      	subne	r3, r3, r0
 80019ae:	50a3      	strne	r3, [r4, r2]
 80019b0:	e7af      	b.n	8001912 <_malloc_r+0x22>
 80019b2:	6862      	ldr	r2, [r4, #4]
 80019b4:	42a3      	cmp	r3, r4
 80019b6:	bf0c      	ite	eq
 80019b8:	f8c8 2000 	streq.w	r2, [r8]
 80019bc:	605a      	strne	r2, [r3, #4]
 80019be:	e7eb      	b.n	8001998 <_malloc_r+0xa8>
 80019c0:	4623      	mov	r3, r4
 80019c2:	6864      	ldr	r4, [r4, #4]
 80019c4:	e7ae      	b.n	8001924 <_malloc_r+0x34>
 80019c6:	463c      	mov	r4, r7
 80019c8:	687f      	ldr	r7, [r7, #4]
 80019ca:	e7b6      	b.n	800193a <_malloc_r+0x4a>
 80019cc:	461a      	mov	r2, r3
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	42a3      	cmp	r3, r4
 80019d2:	d1fb      	bne.n	80019cc <_malloc_r+0xdc>
 80019d4:	2300      	movs	r3, #0
 80019d6:	6053      	str	r3, [r2, #4]
 80019d8:	e7de      	b.n	8001998 <_malloc_r+0xa8>
 80019da:	230c      	movs	r3, #12
 80019dc:	6033      	str	r3, [r6, #0]
 80019de:	4630      	mov	r0, r6
 80019e0:	f000 f80c 	bl	80019fc <__malloc_unlock>
 80019e4:	e794      	b.n	8001910 <_malloc_r+0x20>
 80019e6:	6005      	str	r5, [r0, #0]
 80019e8:	e7d6      	b.n	8001998 <_malloc_r+0xa8>
 80019ea:	bf00      	nop
 80019ec:	2000043c 	.word	0x2000043c

080019f0 <__malloc_lock>:
 80019f0:	4801      	ldr	r0, [pc, #4]	@ (80019f8 <__malloc_lock+0x8>)
 80019f2:	f7ff bee8 	b.w	80017c6 <__retarget_lock_acquire_recursive>
 80019f6:	bf00      	nop
 80019f8:	20000434 	.word	0x20000434

080019fc <__malloc_unlock>:
 80019fc:	4801      	ldr	r0, [pc, #4]	@ (8001a04 <__malloc_unlock+0x8>)
 80019fe:	f7ff bee3 	b.w	80017c8 <__retarget_lock_release_recursive>
 8001a02:	bf00      	nop
 8001a04:	20000434 	.word	0x20000434

08001a08 <__ssputs_r>:
 8001a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a0c:	688e      	ldr	r6, [r1, #8]
 8001a0e:	461f      	mov	r7, r3
 8001a10:	42be      	cmp	r6, r7
 8001a12:	680b      	ldr	r3, [r1, #0]
 8001a14:	4682      	mov	sl, r0
 8001a16:	460c      	mov	r4, r1
 8001a18:	4690      	mov	r8, r2
 8001a1a:	d82d      	bhi.n	8001a78 <__ssputs_r+0x70>
 8001a1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001a20:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001a24:	d026      	beq.n	8001a74 <__ssputs_r+0x6c>
 8001a26:	6965      	ldr	r5, [r4, #20]
 8001a28:	6909      	ldr	r1, [r1, #16]
 8001a2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001a2e:	eba3 0901 	sub.w	r9, r3, r1
 8001a32:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001a36:	1c7b      	adds	r3, r7, #1
 8001a38:	444b      	add	r3, r9
 8001a3a:	106d      	asrs	r5, r5, #1
 8001a3c:	429d      	cmp	r5, r3
 8001a3e:	bf38      	it	cc
 8001a40:	461d      	movcc	r5, r3
 8001a42:	0553      	lsls	r3, r2, #21
 8001a44:	d527      	bpl.n	8001a96 <__ssputs_r+0x8e>
 8001a46:	4629      	mov	r1, r5
 8001a48:	f7ff ff52 	bl	80018f0 <_malloc_r>
 8001a4c:	4606      	mov	r6, r0
 8001a4e:	b360      	cbz	r0, 8001aaa <__ssputs_r+0xa2>
 8001a50:	6921      	ldr	r1, [r4, #16]
 8001a52:	464a      	mov	r2, r9
 8001a54:	f000 fba6 	bl	80021a4 <memcpy>
 8001a58:	89a3      	ldrh	r3, [r4, #12]
 8001a5a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001a5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a62:	81a3      	strh	r3, [r4, #12]
 8001a64:	6126      	str	r6, [r4, #16]
 8001a66:	6165      	str	r5, [r4, #20]
 8001a68:	444e      	add	r6, r9
 8001a6a:	eba5 0509 	sub.w	r5, r5, r9
 8001a6e:	6026      	str	r6, [r4, #0]
 8001a70:	60a5      	str	r5, [r4, #8]
 8001a72:	463e      	mov	r6, r7
 8001a74:	42be      	cmp	r6, r7
 8001a76:	d900      	bls.n	8001a7a <__ssputs_r+0x72>
 8001a78:	463e      	mov	r6, r7
 8001a7a:	6820      	ldr	r0, [r4, #0]
 8001a7c:	4632      	mov	r2, r6
 8001a7e:	4641      	mov	r1, r8
 8001a80:	f000 fb66 	bl	8002150 <memmove>
 8001a84:	68a3      	ldr	r3, [r4, #8]
 8001a86:	1b9b      	subs	r3, r3, r6
 8001a88:	60a3      	str	r3, [r4, #8]
 8001a8a:	6823      	ldr	r3, [r4, #0]
 8001a8c:	4433      	add	r3, r6
 8001a8e:	6023      	str	r3, [r4, #0]
 8001a90:	2000      	movs	r0, #0
 8001a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a96:	462a      	mov	r2, r5
 8001a98:	f000 fb99 	bl	80021ce <_realloc_r>
 8001a9c:	4606      	mov	r6, r0
 8001a9e:	2800      	cmp	r0, #0
 8001aa0:	d1e0      	bne.n	8001a64 <__ssputs_r+0x5c>
 8001aa2:	6921      	ldr	r1, [r4, #16]
 8001aa4:	4650      	mov	r0, sl
 8001aa6:	f7ff feaf 	bl	8001808 <_free_r>
 8001aaa:	230c      	movs	r3, #12
 8001aac:	f8ca 3000 	str.w	r3, [sl]
 8001ab0:	89a3      	ldrh	r3, [r4, #12]
 8001ab2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ab6:	81a3      	strh	r3, [r4, #12]
 8001ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8001abc:	e7e9      	b.n	8001a92 <__ssputs_r+0x8a>
	...

08001ac0 <_svfiprintf_r>:
 8001ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ac4:	4698      	mov	r8, r3
 8001ac6:	898b      	ldrh	r3, [r1, #12]
 8001ac8:	061b      	lsls	r3, r3, #24
 8001aca:	b09d      	sub	sp, #116	@ 0x74
 8001acc:	4607      	mov	r7, r0
 8001ace:	460d      	mov	r5, r1
 8001ad0:	4614      	mov	r4, r2
 8001ad2:	d510      	bpl.n	8001af6 <_svfiprintf_r+0x36>
 8001ad4:	690b      	ldr	r3, [r1, #16]
 8001ad6:	b973      	cbnz	r3, 8001af6 <_svfiprintf_r+0x36>
 8001ad8:	2140      	movs	r1, #64	@ 0x40
 8001ada:	f7ff ff09 	bl	80018f0 <_malloc_r>
 8001ade:	6028      	str	r0, [r5, #0]
 8001ae0:	6128      	str	r0, [r5, #16]
 8001ae2:	b930      	cbnz	r0, 8001af2 <_svfiprintf_r+0x32>
 8001ae4:	230c      	movs	r3, #12
 8001ae6:	603b      	str	r3, [r7, #0]
 8001ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aec:	b01d      	add	sp, #116	@ 0x74
 8001aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001af2:	2340      	movs	r3, #64	@ 0x40
 8001af4:	616b      	str	r3, [r5, #20]
 8001af6:	2300      	movs	r3, #0
 8001af8:	9309      	str	r3, [sp, #36]	@ 0x24
 8001afa:	2320      	movs	r3, #32
 8001afc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001b00:	f8cd 800c 	str.w	r8, [sp, #12]
 8001b04:	2330      	movs	r3, #48	@ 0x30
 8001b06:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001ca4 <_svfiprintf_r+0x1e4>
 8001b0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001b0e:	f04f 0901 	mov.w	r9, #1
 8001b12:	4623      	mov	r3, r4
 8001b14:	469a      	mov	sl, r3
 8001b16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001b1a:	b10a      	cbz	r2, 8001b20 <_svfiprintf_r+0x60>
 8001b1c:	2a25      	cmp	r2, #37	@ 0x25
 8001b1e:	d1f9      	bne.n	8001b14 <_svfiprintf_r+0x54>
 8001b20:	ebba 0b04 	subs.w	fp, sl, r4
 8001b24:	d00b      	beq.n	8001b3e <_svfiprintf_r+0x7e>
 8001b26:	465b      	mov	r3, fp
 8001b28:	4622      	mov	r2, r4
 8001b2a:	4629      	mov	r1, r5
 8001b2c:	4638      	mov	r0, r7
 8001b2e:	f7ff ff6b 	bl	8001a08 <__ssputs_r>
 8001b32:	3001      	adds	r0, #1
 8001b34:	f000 80a7 	beq.w	8001c86 <_svfiprintf_r+0x1c6>
 8001b38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001b3a:	445a      	add	r2, fp
 8001b3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8001b3e:	f89a 3000 	ldrb.w	r3, [sl]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 809f 	beq.w	8001c86 <_svfiprintf_r+0x1c6>
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001b52:	f10a 0a01 	add.w	sl, sl, #1
 8001b56:	9304      	str	r3, [sp, #16]
 8001b58:	9307      	str	r3, [sp, #28]
 8001b5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001b5e:	931a      	str	r3, [sp, #104]	@ 0x68
 8001b60:	4654      	mov	r4, sl
 8001b62:	2205      	movs	r2, #5
 8001b64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b68:	484e      	ldr	r0, [pc, #312]	@ (8001ca4 <_svfiprintf_r+0x1e4>)
 8001b6a:	f7fe fb49 	bl	8000200 <memchr>
 8001b6e:	9a04      	ldr	r2, [sp, #16]
 8001b70:	b9d8      	cbnz	r0, 8001baa <_svfiprintf_r+0xea>
 8001b72:	06d0      	lsls	r0, r2, #27
 8001b74:	bf44      	itt	mi
 8001b76:	2320      	movmi	r3, #32
 8001b78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001b7c:	0711      	lsls	r1, r2, #28
 8001b7e:	bf44      	itt	mi
 8001b80:	232b      	movmi	r3, #43	@ 0x2b
 8001b82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001b86:	f89a 3000 	ldrb.w	r3, [sl]
 8001b8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b8c:	d015      	beq.n	8001bba <_svfiprintf_r+0xfa>
 8001b8e:	9a07      	ldr	r2, [sp, #28]
 8001b90:	4654      	mov	r4, sl
 8001b92:	2000      	movs	r0, #0
 8001b94:	f04f 0c0a 	mov.w	ip, #10
 8001b98:	4621      	mov	r1, r4
 8001b9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001b9e:	3b30      	subs	r3, #48	@ 0x30
 8001ba0:	2b09      	cmp	r3, #9
 8001ba2:	d94b      	bls.n	8001c3c <_svfiprintf_r+0x17c>
 8001ba4:	b1b0      	cbz	r0, 8001bd4 <_svfiprintf_r+0x114>
 8001ba6:	9207      	str	r2, [sp, #28]
 8001ba8:	e014      	b.n	8001bd4 <_svfiprintf_r+0x114>
 8001baa:	eba0 0308 	sub.w	r3, r0, r8
 8001bae:	fa09 f303 	lsl.w	r3, r9, r3
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	9304      	str	r3, [sp, #16]
 8001bb6:	46a2      	mov	sl, r4
 8001bb8:	e7d2      	b.n	8001b60 <_svfiprintf_r+0xa0>
 8001bba:	9b03      	ldr	r3, [sp, #12]
 8001bbc:	1d19      	adds	r1, r3, #4
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	9103      	str	r1, [sp, #12]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	bfbb      	ittet	lt
 8001bc6:	425b      	neglt	r3, r3
 8001bc8:	f042 0202 	orrlt.w	r2, r2, #2
 8001bcc:	9307      	strge	r3, [sp, #28]
 8001bce:	9307      	strlt	r3, [sp, #28]
 8001bd0:	bfb8      	it	lt
 8001bd2:	9204      	strlt	r2, [sp, #16]
 8001bd4:	7823      	ldrb	r3, [r4, #0]
 8001bd6:	2b2e      	cmp	r3, #46	@ 0x2e
 8001bd8:	d10a      	bne.n	8001bf0 <_svfiprintf_r+0x130>
 8001bda:	7863      	ldrb	r3, [r4, #1]
 8001bdc:	2b2a      	cmp	r3, #42	@ 0x2a
 8001bde:	d132      	bne.n	8001c46 <_svfiprintf_r+0x186>
 8001be0:	9b03      	ldr	r3, [sp, #12]
 8001be2:	1d1a      	adds	r2, r3, #4
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	9203      	str	r2, [sp, #12]
 8001be8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001bec:	3402      	adds	r4, #2
 8001bee:	9305      	str	r3, [sp, #20]
 8001bf0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8001cb4 <_svfiprintf_r+0x1f4>
 8001bf4:	7821      	ldrb	r1, [r4, #0]
 8001bf6:	2203      	movs	r2, #3
 8001bf8:	4650      	mov	r0, sl
 8001bfa:	f7fe fb01 	bl	8000200 <memchr>
 8001bfe:	b138      	cbz	r0, 8001c10 <_svfiprintf_r+0x150>
 8001c00:	9b04      	ldr	r3, [sp, #16]
 8001c02:	eba0 000a 	sub.w	r0, r0, sl
 8001c06:	2240      	movs	r2, #64	@ 0x40
 8001c08:	4082      	lsls	r2, r0
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	3401      	adds	r4, #1
 8001c0e:	9304      	str	r3, [sp, #16]
 8001c10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c14:	4824      	ldr	r0, [pc, #144]	@ (8001ca8 <_svfiprintf_r+0x1e8>)
 8001c16:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001c1a:	2206      	movs	r2, #6
 8001c1c:	f7fe faf0 	bl	8000200 <memchr>
 8001c20:	2800      	cmp	r0, #0
 8001c22:	d036      	beq.n	8001c92 <_svfiprintf_r+0x1d2>
 8001c24:	4b21      	ldr	r3, [pc, #132]	@ (8001cac <_svfiprintf_r+0x1ec>)
 8001c26:	bb1b      	cbnz	r3, 8001c70 <_svfiprintf_r+0x1b0>
 8001c28:	9b03      	ldr	r3, [sp, #12]
 8001c2a:	3307      	adds	r3, #7
 8001c2c:	f023 0307 	bic.w	r3, r3, #7
 8001c30:	3308      	adds	r3, #8
 8001c32:	9303      	str	r3, [sp, #12]
 8001c34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001c36:	4433      	add	r3, r6
 8001c38:	9309      	str	r3, [sp, #36]	@ 0x24
 8001c3a:	e76a      	b.n	8001b12 <_svfiprintf_r+0x52>
 8001c3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8001c40:	460c      	mov	r4, r1
 8001c42:	2001      	movs	r0, #1
 8001c44:	e7a8      	b.n	8001b98 <_svfiprintf_r+0xd8>
 8001c46:	2300      	movs	r3, #0
 8001c48:	3401      	adds	r4, #1
 8001c4a:	9305      	str	r3, [sp, #20]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f04f 0c0a 	mov.w	ip, #10
 8001c52:	4620      	mov	r0, r4
 8001c54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001c58:	3a30      	subs	r2, #48	@ 0x30
 8001c5a:	2a09      	cmp	r2, #9
 8001c5c:	d903      	bls.n	8001c66 <_svfiprintf_r+0x1a6>
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d0c6      	beq.n	8001bf0 <_svfiprintf_r+0x130>
 8001c62:	9105      	str	r1, [sp, #20]
 8001c64:	e7c4      	b.n	8001bf0 <_svfiprintf_r+0x130>
 8001c66:	fb0c 2101 	mla	r1, ip, r1, r2
 8001c6a:	4604      	mov	r4, r0
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e7f0      	b.n	8001c52 <_svfiprintf_r+0x192>
 8001c70:	ab03      	add	r3, sp, #12
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	462a      	mov	r2, r5
 8001c76:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb0 <_svfiprintf_r+0x1f0>)
 8001c78:	a904      	add	r1, sp, #16
 8001c7a:	4638      	mov	r0, r7
 8001c7c:	f3af 8000 	nop.w
 8001c80:	1c42      	adds	r2, r0, #1
 8001c82:	4606      	mov	r6, r0
 8001c84:	d1d6      	bne.n	8001c34 <_svfiprintf_r+0x174>
 8001c86:	89ab      	ldrh	r3, [r5, #12]
 8001c88:	065b      	lsls	r3, r3, #25
 8001c8a:	f53f af2d 	bmi.w	8001ae8 <_svfiprintf_r+0x28>
 8001c8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001c90:	e72c      	b.n	8001aec <_svfiprintf_r+0x2c>
 8001c92:	ab03      	add	r3, sp, #12
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	462a      	mov	r2, r5
 8001c98:	4b05      	ldr	r3, [pc, #20]	@ (8001cb0 <_svfiprintf_r+0x1f0>)
 8001c9a:	a904      	add	r1, sp, #16
 8001c9c:	4638      	mov	r0, r7
 8001c9e:	f000 f879 	bl	8001d94 <_printf_i>
 8001ca2:	e7ed      	b.n	8001c80 <_svfiprintf_r+0x1c0>
 8001ca4:	08002ceb 	.word	0x08002ceb
 8001ca8:	08002cf5 	.word	0x08002cf5
 8001cac:	00000000 	.word	0x00000000
 8001cb0:	08001a09 	.word	0x08001a09
 8001cb4:	08002cf1 	.word	0x08002cf1

08001cb8 <_printf_common>:
 8001cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001cbc:	4616      	mov	r6, r2
 8001cbe:	4698      	mov	r8, r3
 8001cc0:	688a      	ldr	r2, [r1, #8]
 8001cc2:	690b      	ldr	r3, [r1, #16]
 8001cc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	bfb8      	it	lt
 8001ccc:	4613      	movlt	r3, r2
 8001cce:	6033      	str	r3, [r6, #0]
 8001cd0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001cd4:	4607      	mov	r7, r0
 8001cd6:	460c      	mov	r4, r1
 8001cd8:	b10a      	cbz	r2, 8001cde <_printf_common+0x26>
 8001cda:	3301      	adds	r3, #1
 8001cdc:	6033      	str	r3, [r6, #0]
 8001cde:	6823      	ldr	r3, [r4, #0]
 8001ce0:	0699      	lsls	r1, r3, #26
 8001ce2:	bf42      	ittt	mi
 8001ce4:	6833      	ldrmi	r3, [r6, #0]
 8001ce6:	3302      	addmi	r3, #2
 8001ce8:	6033      	strmi	r3, [r6, #0]
 8001cea:	6825      	ldr	r5, [r4, #0]
 8001cec:	f015 0506 	ands.w	r5, r5, #6
 8001cf0:	d106      	bne.n	8001d00 <_printf_common+0x48>
 8001cf2:	f104 0a19 	add.w	sl, r4, #25
 8001cf6:	68e3      	ldr	r3, [r4, #12]
 8001cf8:	6832      	ldr	r2, [r6, #0]
 8001cfa:	1a9b      	subs	r3, r3, r2
 8001cfc:	42ab      	cmp	r3, r5
 8001cfe:	dc26      	bgt.n	8001d4e <_printf_common+0x96>
 8001d00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001d04:	6822      	ldr	r2, [r4, #0]
 8001d06:	3b00      	subs	r3, #0
 8001d08:	bf18      	it	ne
 8001d0a:	2301      	movne	r3, #1
 8001d0c:	0692      	lsls	r2, r2, #26
 8001d0e:	d42b      	bmi.n	8001d68 <_printf_common+0xb0>
 8001d10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001d14:	4641      	mov	r1, r8
 8001d16:	4638      	mov	r0, r7
 8001d18:	47c8      	blx	r9
 8001d1a:	3001      	adds	r0, #1
 8001d1c:	d01e      	beq.n	8001d5c <_printf_common+0xa4>
 8001d1e:	6823      	ldr	r3, [r4, #0]
 8001d20:	6922      	ldr	r2, [r4, #16]
 8001d22:	f003 0306 	and.w	r3, r3, #6
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	bf02      	ittt	eq
 8001d2a:	68e5      	ldreq	r5, [r4, #12]
 8001d2c:	6833      	ldreq	r3, [r6, #0]
 8001d2e:	1aed      	subeq	r5, r5, r3
 8001d30:	68a3      	ldr	r3, [r4, #8]
 8001d32:	bf0c      	ite	eq
 8001d34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001d38:	2500      	movne	r5, #0
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	bfc4      	itt	gt
 8001d3e:	1a9b      	subgt	r3, r3, r2
 8001d40:	18ed      	addgt	r5, r5, r3
 8001d42:	2600      	movs	r6, #0
 8001d44:	341a      	adds	r4, #26
 8001d46:	42b5      	cmp	r5, r6
 8001d48:	d11a      	bne.n	8001d80 <_printf_common+0xc8>
 8001d4a:	2000      	movs	r0, #0
 8001d4c:	e008      	b.n	8001d60 <_printf_common+0xa8>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	4652      	mov	r2, sl
 8001d52:	4641      	mov	r1, r8
 8001d54:	4638      	mov	r0, r7
 8001d56:	47c8      	blx	r9
 8001d58:	3001      	adds	r0, #1
 8001d5a:	d103      	bne.n	8001d64 <_printf_common+0xac>
 8001d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d64:	3501      	adds	r5, #1
 8001d66:	e7c6      	b.n	8001cf6 <_printf_common+0x3e>
 8001d68:	18e1      	adds	r1, r4, r3
 8001d6a:	1c5a      	adds	r2, r3, #1
 8001d6c:	2030      	movs	r0, #48	@ 0x30
 8001d6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001d72:	4422      	add	r2, r4
 8001d74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001d78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001d7c:	3302      	adds	r3, #2
 8001d7e:	e7c7      	b.n	8001d10 <_printf_common+0x58>
 8001d80:	2301      	movs	r3, #1
 8001d82:	4622      	mov	r2, r4
 8001d84:	4641      	mov	r1, r8
 8001d86:	4638      	mov	r0, r7
 8001d88:	47c8      	blx	r9
 8001d8a:	3001      	adds	r0, #1
 8001d8c:	d0e6      	beq.n	8001d5c <_printf_common+0xa4>
 8001d8e:	3601      	adds	r6, #1
 8001d90:	e7d9      	b.n	8001d46 <_printf_common+0x8e>
	...

08001d94 <_printf_i>:
 8001d94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001d98:	7e0f      	ldrb	r7, [r1, #24]
 8001d9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001d9c:	2f78      	cmp	r7, #120	@ 0x78
 8001d9e:	4691      	mov	r9, r2
 8001da0:	4680      	mov	r8, r0
 8001da2:	460c      	mov	r4, r1
 8001da4:	469a      	mov	sl, r3
 8001da6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001daa:	d807      	bhi.n	8001dbc <_printf_i+0x28>
 8001dac:	2f62      	cmp	r7, #98	@ 0x62
 8001dae:	d80a      	bhi.n	8001dc6 <_printf_i+0x32>
 8001db0:	2f00      	cmp	r7, #0
 8001db2:	f000 80d2 	beq.w	8001f5a <_printf_i+0x1c6>
 8001db6:	2f58      	cmp	r7, #88	@ 0x58
 8001db8:	f000 80b9 	beq.w	8001f2e <_printf_i+0x19a>
 8001dbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001dc0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001dc4:	e03a      	b.n	8001e3c <_printf_i+0xa8>
 8001dc6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001dca:	2b15      	cmp	r3, #21
 8001dcc:	d8f6      	bhi.n	8001dbc <_printf_i+0x28>
 8001dce:	a101      	add	r1, pc, #4	@ (adr r1, 8001dd4 <_printf_i+0x40>)
 8001dd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001dd4:	08001e2d 	.word	0x08001e2d
 8001dd8:	08001e41 	.word	0x08001e41
 8001ddc:	08001dbd 	.word	0x08001dbd
 8001de0:	08001dbd 	.word	0x08001dbd
 8001de4:	08001dbd 	.word	0x08001dbd
 8001de8:	08001dbd 	.word	0x08001dbd
 8001dec:	08001e41 	.word	0x08001e41
 8001df0:	08001dbd 	.word	0x08001dbd
 8001df4:	08001dbd 	.word	0x08001dbd
 8001df8:	08001dbd 	.word	0x08001dbd
 8001dfc:	08001dbd 	.word	0x08001dbd
 8001e00:	08001f41 	.word	0x08001f41
 8001e04:	08001e6b 	.word	0x08001e6b
 8001e08:	08001efb 	.word	0x08001efb
 8001e0c:	08001dbd 	.word	0x08001dbd
 8001e10:	08001dbd 	.word	0x08001dbd
 8001e14:	08001f63 	.word	0x08001f63
 8001e18:	08001dbd 	.word	0x08001dbd
 8001e1c:	08001e6b 	.word	0x08001e6b
 8001e20:	08001dbd 	.word	0x08001dbd
 8001e24:	08001dbd 	.word	0x08001dbd
 8001e28:	08001f03 	.word	0x08001f03
 8001e2c:	6833      	ldr	r3, [r6, #0]
 8001e2e:	1d1a      	adds	r2, r3, #4
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6032      	str	r2, [r6, #0]
 8001e34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001e38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e09d      	b.n	8001f7c <_printf_i+0x1e8>
 8001e40:	6833      	ldr	r3, [r6, #0]
 8001e42:	6820      	ldr	r0, [r4, #0]
 8001e44:	1d19      	adds	r1, r3, #4
 8001e46:	6031      	str	r1, [r6, #0]
 8001e48:	0606      	lsls	r6, r0, #24
 8001e4a:	d501      	bpl.n	8001e50 <_printf_i+0xbc>
 8001e4c:	681d      	ldr	r5, [r3, #0]
 8001e4e:	e003      	b.n	8001e58 <_printf_i+0xc4>
 8001e50:	0645      	lsls	r5, r0, #25
 8001e52:	d5fb      	bpl.n	8001e4c <_printf_i+0xb8>
 8001e54:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001e58:	2d00      	cmp	r5, #0
 8001e5a:	da03      	bge.n	8001e64 <_printf_i+0xd0>
 8001e5c:	232d      	movs	r3, #45	@ 0x2d
 8001e5e:	426d      	negs	r5, r5
 8001e60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001e64:	4859      	ldr	r0, [pc, #356]	@ (8001fcc <_printf_i+0x238>)
 8001e66:	230a      	movs	r3, #10
 8001e68:	e011      	b.n	8001e8e <_printf_i+0xfa>
 8001e6a:	6821      	ldr	r1, [r4, #0]
 8001e6c:	6833      	ldr	r3, [r6, #0]
 8001e6e:	0608      	lsls	r0, r1, #24
 8001e70:	f853 5b04 	ldr.w	r5, [r3], #4
 8001e74:	d402      	bmi.n	8001e7c <_printf_i+0xe8>
 8001e76:	0649      	lsls	r1, r1, #25
 8001e78:	bf48      	it	mi
 8001e7a:	b2ad      	uxthmi	r5, r5
 8001e7c:	2f6f      	cmp	r7, #111	@ 0x6f
 8001e7e:	4853      	ldr	r0, [pc, #332]	@ (8001fcc <_printf_i+0x238>)
 8001e80:	6033      	str	r3, [r6, #0]
 8001e82:	bf14      	ite	ne
 8001e84:	230a      	movne	r3, #10
 8001e86:	2308      	moveq	r3, #8
 8001e88:	2100      	movs	r1, #0
 8001e8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001e8e:	6866      	ldr	r6, [r4, #4]
 8001e90:	60a6      	str	r6, [r4, #8]
 8001e92:	2e00      	cmp	r6, #0
 8001e94:	bfa2      	ittt	ge
 8001e96:	6821      	ldrge	r1, [r4, #0]
 8001e98:	f021 0104 	bicge.w	r1, r1, #4
 8001e9c:	6021      	strge	r1, [r4, #0]
 8001e9e:	b90d      	cbnz	r5, 8001ea4 <_printf_i+0x110>
 8001ea0:	2e00      	cmp	r6, #0
 8001ea2:	d04b      	beq.n	8001f3c <_printf_i+0x1a8>
 8001ea4:	4616      	mov	r6, r2
 8001ea6:	fbb5 f1f3 	udiv	r1, r5, r3
 8001eaa:	fb03 5711 	mls	r7, r3, r1, r5
 8001eae:	5dc7      	ldrb	r7, [r0, r7]
 8001eb0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001eb4:	462f      	mov	r7, r5
 8001eb6:	42bb      	cmp	r3, r7
 8001eb8:	460d      	mov	r5, r1
 8001eba:	d9f4      	bls.n	8001ea6 <_printf_i+0x112>
 8001ebc:	2b08      	cmp	r3, #8
 8001ebe:	d10b      	bne.n	8001ed8 <_printf_i+0x144>
 8001ec0:	6823      	ldr	r3, [r4, #0]
 8001ec2:	07df      	lsls	r7, r3, #31
 8001ec4:	d508      	bpl.n	8001ed8 <_printf_i+0x144>
 8001ec6:	6923      	ldr	r3, [r4, #16]
 8001ec8:	6861      	ldr	r1, [r4, #4]
 8001eca:	4299      	cmp	r1, r3
 8001ecc:	bfde      	ittt	le
 8001ece:	2330      	movle	r3, #48	@ 0x30
 8001ed0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001ed4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001ed8:	1b92      	subs	r2, r2, r6
 8001eda:	6122      	str	r2, [r4, #16]
 8001edc:	f8cd a000 	str.w	sl, [sp]
 8001ee0:	464b      	mov	r3, r9
 8001ee2:	aa03      	add	r2, sp, #12
 8001ee4:	4621      	mov	r1, r4
 8001ee6:	4640      	mov	r0, r8
 8001ee8:	f7ff fee6 	bl	8001cb8 <_printf_common>
 8001eec:	3001      	adds	r0, #1
 8001eee:	d14a      	bne.n	8001f86 <_printf_i+0x1f2>
 8001ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef4:	b004      	add	sp, #16
 8001ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001efa:	6823      	ldr	r3, [r4, #0]
 8001efc:	f043 0320 	orr.w	r3, r3, #32
 8001f00:	6023      	str	r3, [r4, #0]
 8001f02:	4833      	ldr	r0, [pc, #204]	@ (8001fd0 <_printf_i+0x23c>)
 8001f04:	2778      	movs	r7, #120	@ 0x78
 8001f06:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001f0a:	6823      	ldr	r3, [r4, #0]
 8001f0c:	6831      	ldr	r1, [r6, #0]
 8001f0e:	061f      	lsls	r7, r3, #24
 8001f10:	f851 5b04 	ldr.w	r5, [r1], #4
 8001f14:	d402      	bmi.n	8001f1c <_printf_i+0x188>
 8001f16:	065f      	lsls	r7, r3, #25
 8001f18:	bf48      	it	mi
 8001f1a:	b2ad      	uxthmi	r5, r5
 8001f1c:	6031      	str	r1, [r6, #0]
 8001f1e:	07d9      	lsls	r1, r3, #31
 8001f20:	bf44      	itt	mi
 8001f22:	f043 0320 	orrmi.w	r3, r3, #32
 8001f26:	6023      	strmi	r3, [r4, #0]
 8001f28:	b11d      	cbz	r5, 8001f32 <_printf_i+0x19e>
 8001f2a:	2310      	movs	r3, #16
 8001f2c:	e7ac      	b.n	8001e88 <_printf_i+0xf4>
 8001f2e:	4827      	ldr	r0, [pc, #156]	@ (8001fcc <_printf_i+0x238>)
 8001f30:	e7e9      	b.n	8001f06 <_printf_i+0x172>
 8001f32:	6823      	ldr	r3, [r4, #0]
 8001f34:	f023 0320 	bic.w	r3, r3, #32
 8001f38:	6023      	str	r3, [r4, #0]
 8001f3a:	e7f6      	b.n	8001f2a <_printf_i+0x196>
 8001f3c:	4616      	mov	r6, r2
 8001f3e:	e7bd      	b.n	8001ebc <_printf_i+0x128>
 8001f40:	6833      	ldr	r3, [r6, #0]
 8001f42:	6825      	ldr	r5, [r4, #0]
 8001f44:	6961      	ldr	r1, [r4, #20]
 8001f46:	1d18      	adds	r0, r3, #4
 8001f48:	6030      	str	r0, [r6, #0]
 8001f4a:	062e      	lsls	r6, r5, #24
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	d501      	bpl.n	8001f54 <_printf_i+0x1c0>
 8001f50:	6019      	str	r1, [r3, #0]
 8001f52:	e002      	b.n	8001f5a <_printf_i+0x1c6>
 8001f54:	0668      	lsls	r0, r5, #25
 8001f56:	d5fb      	bpl.n	8001f50 <_printf_i+0x1bc>
 8001f58:	8019      	strh	r1, [r3, #0]
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	6123      	str	r3, [r4, #16]
 8001f5e:	4616      	mov	r6, r2
 8001f60:	e7bc      	b.n	8001edc <_printf_i+0x148>
 8001f62:	6833      	ldr	r3, [r6, #0]
 8001f64:	1d1a      	adds	r2, r3, #4
 8001f66:	6032      	str	r2, [r6, #0]
 8001f68:	681e      	ldr	r6, [r3, #0]
 8001f6a:	6862      	ldr	r2, [r4, #4]
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	4630      	mov	r0, r6
 8001f70:	f7fe f946 	bl	8000200 <memchr>
 8001f74:	b108      	cbz	r0, 8001f7a <_printf_i+0x1e6>
 8001f76:	1b80      	subs	r0, r0, r6
 8001f78:	6060      	str	r0, [r4, #4]
 8001f7a:	6863      	ldr	r3, [r4, #4]
 8001f7c:	6123      	str	r3, [r4, #16]
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001f84:	e7aa      	b.n	8001edc <_printf_i+0x148>
 8001f86:	6923      	ldr	r3, [r4, #16]
 8001f88:	4632      	mov	r2, r6
 8001f8a:	4649      	mov	r1, r9
 8001f8c:	4640      	mov	r0, r8
 8001f8e:	47d0      	blx	sl
 8001f90:	3001      	adds	r0, #1
 8001f92:	d0ad      	beq.n	8001ef0 <_printf_i+0x15c>
 8001f94:	6823      	ldr	r3, [r4, #0]
 8001f96:	079b      	lsls	r3, r3, #30
 8001f98:	d413      	bmi.n	8001fc2 <_printf_i+0x22e>
 8001f9a:	68e0      	ldr	r0, [r4, #12]
 8001f9c:	9b03      	ldr	r3, [sp, #12]
 8001f9e:	4298      	cmp	r0, r3
 8001fa0:	bfb8      	it	lt
 8001fa2:	4618      	movlt	r0, r3
 8001fa4:	e7a6      	b.n	8001ef4 <_printf_i+0x160>
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	4632      	mov	r2, r6
 8001faa:	4649      	mov	r1, r9
 8001fac:	4640      	mov	r0, r8
 8001fae:	47d0      	blx	sl
 8001fb0:	3001      	adds	r0, #1
 8001fb2:	d09d      	beq.n	8001ef0 <_printf_i+0x15c>
 8001fb4:	3501      	adds	r5, #1
 8001fb6:	68e3      	ldr	r3, [r4, #12]
 8001fb8:	9903      	ldr	r1, [sp, #12]
 8001fba:	1a5b      	subs	r3, r3, r1
 8001fbc:	42ab      	cmp	r3, r5
 8001fbe:	dcf2      	bgt.n	8001fa6 <_printf_i+0x212>
 8001fc0:	e7eb      	b.n	8001f9a <_printf_i+0x206>
 8001fc2:	2500      	movs	r5, #0
 8001fc4:	f104 0619 	add.w	r6, r4, #25
 8001fc8:	e7f5      	b.n	8001fb6 <_printf_i+0x222>
 8001fca:	bf00      	nop
 8001fcc:	08002cfc 	.word	0x08002cfc
 8001fd0:	08002d0d 	.word	0x08002d0d

08001fd4 <__sflush_r>:
 8001fd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fdc:	0716      	lsls	r6, r2, #28
 8001fde:	4605      	mov	r5, r0
 8001fe0:	460c      	mov	r4, r1
 8001fe2:	d454      	bmi.n	800208e <__sflush_r+0xba>
 8001fe4:	684b      	ldr	r3, [r1, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	dc02      	bgt.n	8001ff0 <__sflush_r+0x1c>
 8001fea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	dd48      	ble.n	8002082 <__sflush_r+0xae>
 8001ff0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001ff2:	2e00      	cmp	r6, #0
 8001ff4:	d045      	beq.n	8002082 <__sflush_r+0xae>
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001ffc:	682f      	ldr	r7, [r5, #0]
 8001ffe:	6a21      	ldr	r1, [r4, #32]
 8002000:	602b      	str	r3, [r5, #0]
 8002002:	d030      	beq.n	8002066 <__sflush_r+0x92>
 8002004:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002006:	89a3      	ldrh	r3, [r4, #12]
 8002008:	0759      	lsls	r1, r3, #29
 800200a:	d505      	bpl.n	8002018 <__sflush_r+0x44>
 800200c:	6863      	ldr	r3, [r4, #4]
 800200e:	1ad2      	subs	r2, r2, r3
 8002010:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002012:	b10b      	cbz	r3, 8002018 <__sflush_r+0x44>
 8002014:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002016:	1ad2      	subs	r2, r2, r3
 8002018:	2300      	movs	r3, #0
 800201a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800201c:	6a21      	ldr	r1, [r4, #32]
 800201e:	4628      	mov	r0, r5
 8002020:	47b0      	blx	r6
 8002022:	1c43      	adds	r3, r0, #1
 8002024:	89a3      	ldrh	r3, [r4, #12]
 8002026:	d106      	bne.n	8002036 <__sflush_r+0x62>
 8002028:	6829      	ldr	r1, [r5, #0]
 800202a:	291d      	cmp	r1, #29
 800202c:	d82b      	bhi.n	8002086 <__sflush_r+0xb2>
 800202e:	4a2a      	ldr	r2, [pc, #168]	@ (80020d8 <__sflush_r+0x104>)
 8002030:	410a      	asrs	r2, r1
 8002032:	07d6      	lsls	r6, r2, #31
 8002034:	d427      	bmi.n	8002086 <__sflush_r+0xb2>
 8002036:	2200      	movs	r2, #0
 8002038:	6062      	str	r2, [r4, #4]
 800203a:	04d9      	lsls	r1, r3, #19
 800203c:	6922      	ldr	r2, [r4, #16]
 800203e:	6022      	str	r2, [r4, #0]
 8002040:	d504      	bpl.n	800204c <__sflush_r+0x78>
 8002042:	1c42      	adds	r2, r0, #1
 8002044:	d101      	bne.n	800204a <__sflush_r+0x76>
 8002046:	682b      	ldr	r3, [r5, #0]
 8002048:	b903      	cbnz	r3, 800204c <__sflush_r+0x78>
 800204a:	6560      	str	r0, [r4, #84]	@ 0x54
 800204c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800204e:	602f      	str	r7, [r5, #0]
 8002050:	b1b9      	cbz	r1, 8002082 <__sflush_r+0xae>
 8002052:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002056:	4299      	cmp	r1, r3
 8002058:	d002      	beq.n	8002060 <__sflush_r+0x8c>
 800205a:	4628      	mov	r0, r5
 800205c:	f7ff fbd4 	bl	8001808 <_free_r>
 8002060:	2300      	movs	r3, #0
 8002062:	6363      	str	r3, [r4, #52]	@ 0x34
 8002064:	e00d      	b.n	8002082 <__sflush_r+0xae>
 8002066:	2301      	movs	r3, #1
 8002068:	4628      	mov	r0, r5
 800206a:	47b0      	blx	r6
 800206c:	4602      	mov	r2, r0
 800206e:	1c50      	adds	r0, r2, #1
 8002070:	d1c9      	bne.n	8002006 <__sflush_r+0x32>
 8002072:	682b      	ldr	r3, [r5, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0c6      	beq.n	8002006 <__sflush_r+0x32>
 8002078:	2b1d      	cmp	r3, #29
 800207a:	d001      	beq.n	8002080 <__sflush_r+0xac>
 800207c:	2b16      	cmp	r3, #22
 800207e:	d11e      	bne.n	80020be <__sflush_r+0xea>
 8002080:	602f      	str	r7, [r5, #0]
 8002082:	2000      	movs	r0, #0
 8002084:	e022      	b.n	80020cc <__sflush_r+0xf8>
 8002086:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800208a:	b21b      	sxth	r3, r3
 800208c:	e01b      	b.n	80020c6 <__sflush_r+0xf2>
 800208e:	690f      	ldr	r7, [r1, #16]
 8002090:	2f00      	cmp	r7, #0
 8002092:	d0f6      	beq.n	8002082 <__sflush_r+0xae>
 8002094:	0793      	lsls	r3, r2, #30
 8002096:	680e      	ldr	r6, [r1, #0]
 8002098:	bf08      	it	eq
 800209a:	694b      	ldreq	r3, [r1, #20]
 800209c:	600f      	str	r7, [r1, #0]
 800209e:	bf18      	it	ne
 80020a0:	2300      	movne	r3, #0
 80020a2:	eba6 0807 	sub.w	r8, r6, r7
 80020a6:	608b      	str	r3, [r1, #8]
 80020a8:	f1b8 0f00 	cmp.w	r8, #0
 80020ac:	dde9      	ble.n	8002082 <__sflush_r+0xae>
 80020ae:	6a21      	ldr	r1, [r4, #32]
 80020b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80020b2:	4643      	mov	r3, r8
 80020b4:	463a      	mov	r2, r7
 80020b6:	4628      	mov	r0, r5
 80020b8:	47b0      	blx	r6
 80020ba:	2800      	cmp	r0, #0
 80020bc:	dc08      	bgt.n	80020d0 <__sflush_r+0xfc>
 80020be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020c6:	81a3      	strh	r3, [r4, #12]
 80020c8:	f04f 30ff 	mov.w	r0, #4294967295
 80020cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020d0:	4407      	add	r7, r0
 80020d2:	eba8 0800 	sub.w	r8, r8, r0
 80020d6:	e7e7      	b.n	80020a8 <__sflush_r+0xd4>
 80020d8:	dfbffffe 	.word	0xdfbffffe

080020dc <_fflush_r>:
 80020dc:	b538      	push	{r3, r4, r5, lr}
 80020de:	690b      	ldr	r3, [r1, #16]
 80020e0:	4605      	mov	r5, r0
 80020e2:	460c      	mov	r4, r1
 80020e4:	b913      	cbnz	r3, 80020ec <_fflush_r+0x10>
 80020e6:	2500      	movs	r5, #0
 80020e8:	4628      	mov	r0, r5
 80020ea:	bd38      	pop	{r3, r4, r5, pc}
 80020ec:	b118      	cbz	r0, 80020f6 <_fflush_r+0x1a>
 80020ee:	6a03      	ldr	r3, [r0, #32]
 80020f0:	b90b      	cbnz	r3, 80020f6 <_fflush_r+0x1a>
 80020f2:	f7ff f9f9 	bl	80014e8 <__sinit>
 80020f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d0f3      	beq.n	80020e6 <_fflush_r+0xa>
 80020fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002100:	07d0      	lsls	r0, r2, #31
 8002102:	d404      	bmi.n	800210e <_fflush_r+0x32>
 8002104:	0599      	lsls	r1, r3, #22
 8002106:	d402      	bmi.n	800210e <_fflush_r+0x32>
 8002108:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800210a:	f7ff fb5c 	bl	80017c6 <__retarget_lock_acquire_recursive>
 800210e:	4628      	mov	r0, r5
 8002110:	4621      	mov	r1, r4
 8002112:	f7ff ff5f 	bl	8001fd4 <__sflush_r>
 8002116:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002118:	07da      	lsls	r2, r3, #31
 800211a:	4605      	mov	r5, r0
 800211c:	d4e4      	bmi.n	80020e8 <_fflush_r+0xc>
 800211e:	89a3      	ldrh	r3, [r4, #12]
 8002120:	059b      	lsls	r3, r3, #22
 8002122:	d4e1      	bmi.n	80020e8 <_fflush_r+0xc>
 8002124:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002126:	f7ff fb4f 	bl	80017c8 <__retarget_lock_release_recursive>
 800212a:	e7dd      	b.n	80020e8 <_fflush_r+0xc>

0800212c <fiprintf>:
 800212c:	b40e      	push	{r1, r2, r3}
 800212e:	b503      	push	{r0, r1, lr}
 8002130:	4601      	mov	r1, r0
 8002132:	ab03      	add	r3, sp, #12
 8002134:	4805      	ldr	r0, [pc, #20]	@ (800214c <fiprintf+0x20>)
 8002136:	f853 2b04 	ldr.w	r2, [r3], #4
 800213a:	6800      	ldr	r0, [r0, #0]
 800213c:	9301      	str	r3, [sp, #4]
 800213e:	f000 f89d 	bl	800227c <_vfiprintf_r>
 8002142:	b002      	add	sp, #8
 8002144:	f85d eb04 	ldr.w	lr, [sp], #4
 8002148:	b003      	add	sp, #12
 800214a:	4770      	bx	lr
 800214c:	20000070 	.word	0x20000070

08002150 <memmove>:
 8002150:	4288      	cmp	r0, r1
 8002152:	b510      	push	{r4, lr}
 8002154:	eb01 0402 	add.w	r4, r1, r2
 8002158:	d902      	bls.n	8002160 <memmove+0x10>
 800215a:	4284      	cmp	r4, r0
 800215c:	4623      	mov	r3, r4
 800215e:	d807      	bhi.n	8002170 <memmove+0x20>
 8002160:	1e43      	subs	r3, r0, #1
 8002162:	42a1      	cmp	r1, r4
 8002164:	d008      	beq.n	8002178 <memmove+0x28>
 8002166:	f811 2b01 	ldrb.w	r2, [r1], #1
 800216a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800216e:	e7f8      	b.n	8002162 <memmove+0x12>
 8002170:	4402      	add	r2, r0
 8002172:	4601      	mov	r1, r0
 8002174:	428a      	cmp	r2, r1
 8002176:	d100      	bne.n	800217a <memmove+0x2a>
 8002178:	bd10      	pop	{r4, pc}
 800217a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800217e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002182:	e7f7      	b.n	8002174 <memmove+0x24>

08002184 <_sbrk_r>:
 8002184:	b538      	push	{r3, r4, r5, lr}
 8002186:	4d06      	ldr	r5, [pc, #24]	@ (80021a0 <_sbrk_r+0x1c>)
 8002188:	2300      	movs	r3, #0
 800218a:	4604      	mov	r4, r0
 800218c:	4608      	mov	r0, r1
 800218e:	602b      	str	r3, [r5, #0]
 8002190:	f7fe fe98 	bl	8000ec4 <_sbrk>
 8002194:	1c43      	adds	r3, r0, #1
 8002196:	d102      	bne.n	800219e <_sbrk_r+0x1a>
 8002198:	682b      	ldr	r3, [r5, #0]
 800219a:	b103      	cbz	r3, 800219e <_sbrk_r+0x1a>
 800219c:	6023      	str	r3, [r4, #0]
 800219e:	bd38      	pop	{r3, r4, r5, pc}
 80021a0:	20000430 	.word	0x20000430

080021a4 <memcpy>:
 80021a4:	440a      	add	r2, r1
 80021a6:	4291      	cmp	r1, r2
 80021a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80021ac:	d100      	bne.n	80021b0 <memcpy+0xc>
 80021ae:	4770      	bx	lr
 80021b0:	b510      	push	{r4, lr}
 80021b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80021b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80021ba:	4291      	cmp	r1, r2
 80021bc:	d1f9      	bne.n	80021b2 <memcpy+0xe>
 80021be:	bd10      	pop	{r4, pc}

080021c0 <abort>:
 80021c0:	b508      	push	{r3, lr}
 80021c2:	2006      	movs	r0, #6
 80021c4:	f000 fa2e 	bl	8002624 <raise>
 80021c8:	2001      	movs	r0, #1
 80021ca:	f7fe fe02 	bl	8000dd2 <_exit>

080021ce <_realloc_r>:
 80021ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021d2:	4680      	mov	r8, r0
 80021d4:	4615      	mov	r5, r2
 80021d6:	460c      	mov	r4, r1
 80021d8:	b921      	cbnz	r1, 80021e4 <_realloc_r+0x16>
 80021da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80021de:	4611      	mov	r1, r2
 80021e0:	f7ff bb86 	b.w	80018f0 <_malloc_r>
 80021e4:	b92a      	cbnz	r2, 80021f2 <_realloc_r+0x24>
 80021e6:	f7ff fb0f 	bl	8001808 <_free_r>
 80021ea:	2400      	movs	r4, #0
 80021ec:	4620      	mov	r0, r4
 80021ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021f2:	f000 fa33 	bl	800265c <_malloc_usable_size_r>
 80021f6:	4285      	cmp	r5, r0
 80021f8:	4606      	mov	r6, r0
 80021fa:	d802      	bhi.n	8002202 <_realloc_r+0x34>
 80021fc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002200:	d8f4      	bhi.n	80021ec <_realloc_r+0x1e>
 8002202:	4629      	mov	r1, r5
 8002204:	4640      	mov	r0, r8
 8002206:	f7ff fb73 	bl	80018f0 <_malloc_r>
 800220a:	4607      	mov	r7, r0
 800220c:	2800      	cmp	r0, #0
 800220e:	d0ec      	beq.n	80021ea <_realloc_r+0x1c>
 8002210:	42b5      	cmp	r5, r6
 8002212:	462a      	mov	r2, r5
 8002214:	4621      	mov	r1, r4
 8002216:	bf28      	it	cs
 8002218:	4632      	movcs	r2, r6
 800221a:	f7ff ffc3 	bl	80021a4 <memcpy>
 800221e:	4621      	mov	r1, r4
 8002220:	4640      	mov	r0, r8
 8002222:	f7ff faf1 	bl	8001808 <_free_r>
 8002226:	463c      	mov	r4, r7
 8002228:	e7e0      	b.n	80021ec <_realloc_r+0x1e>

0800222a <__sfputc_r>:
 800222a:	6893      	ldr	r3, [r2, #8]
 800222c:	3b01      	subs	r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	b410      	push	{r4}
 8002232:	6093      	str	r3, [r2, #8]
 8002234:	da08      	bge.n	8002248 <__sfputc_r+0x1e>
 8002236:	6994      	ldr	r4, [r2, #24]
 8002238:	42a3      	cmp	r3, r4
 800223a:	db01      	blt.n	8002240 <__sfputc_r+0x16>
 800223c:	290a      	cmp	r1, #10
 800223e:	d103      	bne.n	8002248 <__sfputc_r+0x1e>
 8002240:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002244:	f000 b932 	b.w	80024ac <__swbuf_r>
 8002248:	6813      	ldr	r3, [r2, #0]
 800224a:	1c58      	adds	r0, r3, #1
 800224c:	6010      	str	r0, [r2, #0]
 800224e:	7019      	strb	r1, [r3, #0]
 8002250:	4608      	mov	r0, r1
 8002252:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002256:	4770      	bx	lr

08002258 <__sfputs_r>:
 8002258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800225a:	4606      	mov	r6, r0
 800225c:	460f      	mov	r7, r1
 800225e:	4614      	mov	r4, r2
 8002260:	18d5      	adds	r5, r2, r3
 8002262:	42ac      	cmp	r4, r5
 8002264:	d101      	bne.n	800226a <__sfputs_r+0x12>
 8002266:	2000      	movs	r0, #0
 8002268:	e007      	b.n	800227a <__sfputs_r+0x22>
 800226a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800226e:	463a      	mov	r2, r7
 8002270:	4630      	mov	r0, r6
 8002272:	f7ff ffda 	bl	800222a <__sfputc_r>
 8002276:	1c43      	adds	r3, r0, #1
 8002278:	d1f3      	bne.n	8002262 <__sfputs_r+0xa>
 800227a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800227c <_vfiprintf_r>:
 800227c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002280:	460d      	mov	r5, r1
 8002282:	b09d      	sub	sp, #116	@ 0x74
 8002284:	4614      	mov	r4, r2
 8002286:	4698      	mov	r8, r3
 8002288:	4606      	mov	r6, r0
 800228a:	b118      	cbz	r0, 8002294 <_vfiprintf_r+0x18>
 800228c:	6a03      	ldr	r3, [r0, #32]
 800228e:	b90b      	cbnz	r3, 8002294 <_vfiprintf_r+0x18>
 8002290:	f7ff f92a 	bl	80014e8 <__sinit>
 8002294:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002296:	07d9      	lsls	r1, r3, #31
 8002298:	d405      	bmi.n	80022a6 <_vfiprintf_r+0x2a>
 800229a:	89ab      	ldrh	r3, [r5, #12]
 800229c:	059a      	lsls	r2, r3, #22
 800229e:	d402      	bmi.n	80022a6 <_vfiprintf_r+0x2a>
 80022a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80022a2:	f7ff fa90 	bl	80017c6 <__retarget_lock_acquire_recursive>
 80022a6:	89ab      	ldrh	r3, [r5, #12]
 80022a8:	071b      	lsls	r3, r3, #28
 80022aa:	d501      	bpl.n	80022b0 <_vfiprintf_r+0x34>
 80022ac:	692b      	ldr	r3, [r5, #16]
 80022ae:	b99b      	cbnz	r3, 80022d8 <_vfiprintf_r+0x5c>
 80022b0:	4629      	mov	r1, r5
 80022b2:	4630      	mov	r0, r6
 80022b4:	f000 f938 	bl	8002528 <__swsetup_r>
 80022b8:	b170      	cbz	r0, 80022d8 <_vfiprintf_r+0x5c>
 80022ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80022bc:	07dc      	lsls	r4, r3, #31
 80022be:	d504      	bpl.n	80022ca <_vfiprintf_r+0x4e>
 80022c0:	f04f 30ff 	mov.w	r0, #4294967295
 80022c4:	b01d      	add	sp, #116	@ 0x74
 80022c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022ca:	89ab      	ldrh	r3, [r5, #12]
 80022cc:	0598      	lsls	r0, r3, #22
 80022ce:	d4f7      	bmi.n	80022c0 <_vfiprintf_r+0x44>
 80022d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80022d2:	f7ff fa79 	bl	80017c8 <__retarget_lock_release_recursive>
 80022d6:	e7f3      	b.n	80022c0 <_vfiprintf_r+0x44>
 80022d8:	2300      	movs	r3, #0
 80022da:	9309      	str	r3, [sp, #36]	@ 0x24
 80022dc:	2320      	movs	r3, #32
 80022de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80022e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80022e6:	2330      	movs	r3, #48	@ 0x30
 80022e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002498 <_vfiprintf_r+0x21c>
 80022ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80022f0:	f04f 0901 	mov.w	r9, #1
 80022f4:	4623      	mov	r3, r4
 80022f6:	469a      	mov	sl, r3
 80022f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80022fc:	b10a      	cbz	r2, 8002302 <_vfiprintf_r+0x86>
 80022fe:	2a25      	cmp	r2, #37	@ 0x25
 8002300:	d1f9      	bne.n	80022f6 <_vfiprintf_r+0x7a>
 8002302:	ebba 0b04 	subs.w	fp, sl, r4
 8002306:	d00b      	beq.n	8002320 <_vfiprintf_r+0xa4>
 8002308:	465b      	mov	r3, fp
 800230a:	4622      	mov	r2, r4
 800230c:	4629      	mov	r1, r5
 800230e:	4630      	mov	r0, r6
 8002310:	f7ff ffa2 	bl	8002258 <__sfputs_r>
 8002314:	3001      	adds	r0, #1
 8002316:	f000 80a7 	beq.w	8002468 <_vfiprintf_r+0x1ec>
 800231a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800231c:	445a      	add	r2, fp
 800231e:	9209      	str	r2, [sp, #36]	@ 0x24
 8002320:	f89a 3000 	ldrb.w	r3, [sl]
 8002324:	2b00      	cmp	r3, #0
 8002326:	f000 809f 	beq.w	8002468 <_vfiprintf_r+0x1ec>
 800232a:	2300      	movs	r3, #0
 800232c:	f04f 32ff 	mov.w	r2, #4294967295
 8002330:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002334:	f10a 0a01 	add.w	sl, sl, #1
 8002338:	9304      	str	r3, [sp, #16]
 800233a:	9307      	str	r3, [sp, #28]
 800233c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002340:	931a      	str	r3, [sp, #104]	@ 0x68
 8002342:	4654      	mov	r4, sl
 8002344:	2205      	movs	r2, #5
 8002346:	f814 1b01 	ldrb.w	r1, [r4], #1
 800234a:	4853      	ldr	r0, [pc, #332]	@ (8002498 <_vfiprintf_r+0x21c>)
 800234c:	f7fd ff58 	bl	8000200 <memchr>
 8002350:	9a04      	ldr	r2, [sp, #16]
 8002352:	b9d8      	cbnz	r0, 800238c <_vfiprintf_r+0x110>
 8002354:	06d1      	lsls	r1, r2, #27
 8002356:	bf44      	itt	mi
 8002358:	2320      	movmi	r3, #32
 800235a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800235e:	0713      	lsls	r3, r2, #28
 8002360:	bf44      	itt	mi
 8002362:	232b      	movmi	r3, #43	@ 0x2b
 8002364:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002368:	f89a 3000 	ldrb.w	r3, [sl]
 800236c:	2b2a      	cmp	r3, #42	@ 0x2a
 800236e:	d015      	beq.n	800239c <_vfiprintf_r+0x120>
 8002370:	9a07      	ldr	r2, [sp, #28]
 8002372:	4654      	mov	r4, sl
 8002374:	2000      	movs	r0, #0
 8002376:	f04f 0c0a 	mov.w	ip, #10
 800237a:	4621      	mov	r1, r4
 800237c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002380:	3b30      	subs	r3, #48	@ 0x30
 8002382:	2b09      	cmp	r3, #9
 8002384:	d94b      	bls.n	800241e <_vfiprintf_r+0x1a2>
 8002386:	b1b0      	cbz	r0, 80023b6 <_vfiprintf_r+0x13a>
 8002388:	9207      	str	r2, [sp, #28]
 800238a:	e014      	b.n	80023b6 <_vfiprintf_r+0x13a>
 800238c:	eba0 0308 	sub.w	r3, r0, r8
 8002390:	fa09 f303 	lsl.w	r3, r9, r3
 8002394:	4313      	orrs	r3, r2
 8002396:	9304      	str	r3, [sp, #16]
 8002398:	46a2      	mov	sl, r4
 800239a:	e7d2      	b.n	8002342 <_vfiprintf_r+0xc6>
 800239c:	9b03      	ldr	r3, [sp, #12]
 800239e:	1d19      	adds	r1, r3, #4
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	9103      	str	r1, [sp, #12]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	bfbb      	ittet	lt
 80023a8:	425b      	neglt	r3, r3
 80023aa:	f042 0202 	orrlt.w	r2, r2, #2
 80023ae:	9307      	strge	r3, [sp, #28]
 80023b0:	9307      	strlt	r3, [sp, #28]
 80023b2:	bfb8      	it	lt
 80023b4:	9204      	strlt	r2, [sp, #16]
 80023b6:	7823      	ldrb	r3, [r4, #0]
 80023b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80023ba:	d10a      	bne.n	80023d2 <_vfiprintf_r+0x156>
 80023bc:	7863      	ldrb	r3, [r4, #1]
 80023be:	2b2a      	cmp	r3, #42	@ 0x2a
 80023c0:	d132      	bne.n	8002428 <_vfiprintf_r+0x1ac>
 80023c2:	9b03      	ldr	r3, [sp, #12]
 80023c4:	1d1a      	adds	r2, r3, #4
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	9203      	str	r2, [sp, #12]
 80023ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80023ce:	3402      	adds	r4, #2
 80023d0:	9305      	str	r3, [sp, #20]
 80023d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80024a8 <_vfiprintf_r+0x22c>
 80023d6:	7821      	ldrb	r1, [r4, #0]
 80023d8:	2203      	movs	r2, #3
 80023da:	4650      	mov	r0, sl
 80023dc:	f7fd ff10 	bl	8000200 <memchr>
 80023e0:	b138      	cbz	r0, 80023f2 <_vfiprintf_r+0x176>
 80023e2:	9b04      	ldr	r3, [sp, #16]
 80023e4:	eba0 000a 	sub.w	r0, r0, sl
 80023e8:	2240      	movs	r2, #64	@ 0x40
 80023ea:	4082      	lsls	r2, r0
 80023ec:	4313      	orrs	r3, r2
 80023ee:	3401      	adds	r4, #1
 80023f0:	9304      	str	r3, [sp, #16]
 80023f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023f6:	4829      	ldr	r0, [pc, #164]	@ (800249c <_vfiprintf_r+0x220>)
 80023f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80023fc:	2206      	movs	r2, #6
 80023fe:	f7fd feff 	bl	8000200 <memchr>
 8002402:	2800      	cmp	r0, #0
 8002404:	d03f      	beq.n	8002486 <_vfiprintf_r+0x20a>
 8002406:	4b26      	ldr	r3, [pc, #152]	@ (80024a0 <_vfiprintf_r+0x224>)
 8002408:	bb1b      	cbnz	r3, 8002452 <_vfiprintf_r+0x1d6>
 800240a:	9b03      	ldr	r3, [sp, #12]
 800240c:	3307      	adds	r3, #7
 800240e:	f023 0307 	bic.w	r3, r3, #7
 8002412:	3308      	adds	r3, #8
 8002414:	9303      	str	r3, [sp, #12]
 8002416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002418:	443b      	add	r3, r7
 800241a:	9309      	str	r3, [sp, #36]	@ 0x24
 800241c:	e76a      	b.n	80022f4 <_vfiprintf_r+0x78>
 800241e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002422:	460c      	mov	r4, r1
 8002424:	2001      	movs	r0, #1
 8002426:	e7a8      	b.n	800237a <_vfiprintf_r+0xfe>
 8002428:	2300      	movs	r3, #0
 800242a:	3401      	adds	r4, #1
 800242c:	9305      	str	r3, [sp, #20]
 800242e:	4619      	mov	r1, r3
 8002430:	f04f 0c0a 	mov.w	ip, #10
 8002434:	4620      	mov	r0, r4
 8002436:	f810 2b01 	ldrb.w	r2, [r0], #1
 800243a:	3a30      	subs	r2, #48	@ 0x30
 800243c:	2a09      	cmp	r2, #9
 800243e:	d903      	bls.n	8002448 <_vfiprintf_r+0x1cc>
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0c6      	beq.n	80023d2 <_vfiprintf_r+0x156>
 8002444:	9105      	str	r1, [sp, #20]
 8002446:	e7c4      	b.n	80023d2 <_vfiprintf_r+0x156>
 8002448:	fb0c 2101 	mla	r1, ip, r1, r2
 800244c:	4604      	mov	r4, r0
 800244e:	2301      	movs	r3, #1
 8002450:	e7f0      	b.n	8002434 <_vfiprintf_r+0x1b8>
 8002452:	ab03      	add	r3, sp, #12
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	462a      	mov	r2, r5
 8002458:	4b12      	ldr	r3, [pc, #72]	@ (80024a4 <_vfiprintf_r+0x228>)
 800245a:	a904      	add	r1, sp, #16
 800245c:	4630      	mov	r0, r6
 800245e:	f3af 8000 	nop.w
 8002462:	4607      	mov	r7, r0
 8002464:	1c78      	adds	r0, r7, #1
 8002466:	d1d6      	bne.n	8002416 <_vfiprintf_r+0x19a>
 8002468:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800246a:	07d9      	lsls	r1, r3, #31
 800246c:	d405      	bmi.n	800247a <_vfiprintf_r+0x1fe>
 800246e:	89ab      	ldrh	r3, [r5, #12]
 8002470:	059a      	lsls	r2, r3, #22
 8002472:	d402      	bmi.n	800247a <_vfiprintf_r+0x1fe>
 8002474:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002476:	f7ff f9a7 	bl	80017c8 <__retarget_lock_release_recursive>
 800247a:	89ab      	ldrh	r3, [r5, #12]
 800247c:	065b      	lsls	r3, r3, #25
 800247e:	f53f af1f 	bmi.w	80022c0 <_vfiprintf_r+0x44>
 8002482:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002484:	e71e      	b.n	80022c4 <_vfiprintf_r+0x48>
 8002486:	ab03      	add	r3, sp, #12
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	462a      	mov	r2, r5
 800248c:	4b05      	ldr	r3, [pc, #20]	@ (80024a4 <_vfiprintf_r+0x228>)
 800248e:	a904      	add	r1, sp, #16
 8002490:	4630      	mov	r0, r6
 8002492:	f7ff fc7f 	bl	8001d94 <_printf_i>
 8002496:	e7e4      	b.n	8002462 <_vfiprintf_r+0x1e6>
 8002498:	08002ceb 	.word	0x08002ceb
 800249c:	08002cf5 	.word	0x08002cf5
 80024a0:	00000000 	.word	0x00000000
 80024a4:	08002259 	.word	0x08002259
 80024a8:	08002cf1 	.word	0x08002cf1

080024ac <__swbuf_r>:
 80024ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ae:	460e      	mov	r6, r1
 80024b0:	4614      	mov	r4, r2
 80024b2:	4605      	mov	r5, r0
 80024b4:	b118      	cbz	r0, 80024be <__swbuf_r+0x12>
 80024b6:	6a03      	ldr	r3, [r0, #32]
 80024b8:	b90b      	cbnz	r3, 80024be <__swbuf_r+0x12>
 80024ba:	f7ff f815 	bl	80014e8 <__sinit>
 80024be:	69a3      	ldr	r3, [r4, #24]
 80024c0:	60a3      	str	r3, [r4, #8]
 80024c2:	89a3      	ldrh	r3, [r4, #12]
 80024c4:	071a      	lsls	r2, r3, #28
 80024c6:	d501      	bpl.n	80024cc <__swbuf_r+0x20>
 80024c8:	6923      	ldr	r3, [r4, #16]
 80024ca:	b943      	cbnz	r3, 80024de <__swbuf_r+0x32>
 80024cc:	4621      	mov	r1, r4
 80024ce:	4628      	mov	r0, r5
 80024d0:	f000 f82a 	bl	8002528 <__swsetup_r>
 80024d4:	b118      	cbz	r0, 80024de <__swbuf_r+0x32>
 80024d6:	f04f 37ff 	mov.w	r7, #4294967295
 80024da:	4638      	mov	r0, r7
 80024dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024de:	6823      	ldr	r3, [r4, #0]
 80024e0:	6922      	ldr	r2, [r4, #16]
 80024e2:	1a98      	subs	r0, r3, r2
 80024e4:	6963      	ldr	r3, [r4, #20]
 80024e6:	b2f6      	uxtb	r6, r6
 80024e8:	4283      	cmp	r3, r0
 80024ea:	4637      	mov	r7, r6
 80024ec:	dc05      	bgt.n	80024fa <__swbuf_r+0x4e>
 80024ee:	4621      	mov	r1, r4
 80024f0:	4628      	mov	r0, r5
 80024f2:	f7ff fdf3 	bl	80020dc <_fflush_r>
 80024f6:	2800      	cmp	r0, #0
 80024f8:	d1ed      	bne.n	80024d6 <__swbuf_r+0x2a>
 80024fa:	68a3      	ldr	r3, [r4, #8]
 80024fc:	3b01      	subs	r3, #1
 80024fe:	60a3      	str	r3, [r4, #8]
 8002500:	6823      	ldr	r3, [r4, #0]
 8002502:	1c5a      	adds	r2, r3, #1
 8002504:	6022      	str	r2, [r4, #0]
 8002506:	701e      	strb	r6, [r3, #0]
 8002508:	6962      	ldr	r2, [r4, #20]
 800250a:	1c43      	adds	r3, r0, #1
 800250c:	429a      	cmp	r2, r3
 800250e:	d004      	beq.n	800251a <__swbuf_r+0x6e>
 8002510:	89a3      	ldrh	r3, [r4, #12]
 8002512:	07db      	lsls	r3, r3, #31
 8002514:	d5e1      	bpl.n	80024da <__swbuf_r+0x2e>
 8002516:	2e0a      	cmp	r6, #10
 8002518:	d1df      	bne.n	80024da <__swbuf_r+0x2e>
 800251a:	4621      	mov	r1, r4
 800251c:	4628      	mov	r0, r5
 800251e:	f7ff fddd 	bl	80020dc <_fflush_r>
 8002522:	2800      	cmp	r0, #0
 8002524:	d0d9      	beq.n	80024da <__swbuf_r+0x2e>
 8002526:	e7d6      	b.n	80024d6 <__swbuf_r+0x2a>

08002528 <__swsetup_r>:
 8002528:	b538      	push	{r3, r4, r5, lr}
 800252a:	4b29      	ldr	r3, [pc, #164]	@ (80025d0 <__swsetup_r+0xa8>)
 800252c:	4605      	mov	r5, r0
 800252e:	6818      	ldr	r0, [r3, #0]
 8002530:	460c      	mov	r4, r1
 8002532:	b118      	cbz	r0, 800253c <__swsetup_r+0x14>
 8002534:	6a03      	ldr	r3, [r0, #32]
 8002536:	b90b      	cbnz	r3, 800253c <__swsetup_r+0x14>
 8002538:	f7fe ffd6 	bl	80014e8 <__sinit>
 800253c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002540:	0719      	lsls	r1, r3, #28
 8002542:	d422      	bmi.n	800258a <__swsetup_r+0x62>
 8002544:	06da      	lsls	r2, r3, #27
 8002546:	d407      	bmi.n	8002558 <__swsetup_r+0x30>
 8002548:	2209      	movs	r2, #9
 800254a:	602a      	str	r2, [r5, #0]
 800254c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002550:	81a3      	strh	r3, [r4, #12]
 8002552:	f04f 30ff 	mov.w	r0, #4294967295
 8002556:	e033      	b.n	80025c0 <__swsetup_r+0x98>
 8002558:	0758      	lsls	r0, r3, #29
 800255a:	d512      	bpl.n	8002582 <__swsetup_r+0x5a>
 800255c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800255e:	b141      	cbz	r1, 8002572 <__swsetup_r+0x4a>
 8002560:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002564:	4299      	cmp	r1, r3
 8002566:	d002      	beq.n	800256e <__swsetup_r+0x46>
 8002568:	4628      	mov	r0, r5
 800256a:	f7ff f94d 	bl	8001808 <_free_r>
 800256e:	2300      	movs	r3, #0
 8002570:	6363      	str	r3, [r4, #52]	@ 0x34
 8002572:	89a3      	ldrh	r3, [r4, #12]
 8002574:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002578:	81a3      	strh	r3, [r4, #12]
 800257a:	2300      	movs	r3, #0
 800257c:	6063      	str	r3, [r4, #4]
 800257e:	6923      	ldr	r3, [r4, #16]
 8002580:	6023      	str	r3, [r4, #0]
 8002582:	89a3      	ldrh	r3, [r4, #12]
 8002584:	f043 0308 	orr.w	r3, r3, #8
 8002588:	81a3      	strh	r3, [r4, #12]
 800258a:	6923      	ldr	r3, [r4, #16]
 800258c:	b94b      	cbnz	r3, 80025a2 <__swsetup_r+0x7a>
 800258e:	89a3      	ldrh	r3, [r4, #12]
 8002590:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002594:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002598:	d003      	beq.n	80025a2 <__swsetup_r+0x7a>
 800259a:	4621      	mov	r1, r4
 800259c:	4628      	mov	r0, r5
 800259e:	f000 f88b 	bl	80026b8 <__smakebuf_r>
 80025a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025a6:	f013 0201 	ands.w	r2, r3, #1
 80025aa:	d00a      	beq.n	80025c2 <__swsetup_r+0x9a>
 80025ac:	2200      	movs	r2, #0
 80025ae:	60a2      	str	r2, [r4, #8]
 80025b0:	6962      	ldr	r2, [r4, #20]
 80025b2:	4252      	negs	r2, r2
 80025b4:	61a2      	str	r2, [r4, #24]
 80025b6:	6922      	ldr	r2, [r4, #16]
 80025b8:	b942      	cbnz	r2, 80025cc <__swsetup_r+0xa4>
 80025ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80025be:	d1c5      	bne.n	800254c <__swsetup_r+0x24>
 80025c0:	bd38      	pop	{r3, r4, r5, pc}
 80025c2:	0799      	lsls	r1, r3, #30
 80025c4:	bf58      	it	pl
 80025c6:	6962      	ldrpl	r2, [r4, #20]
 80025c8:	60a2      	str	r2, [r4, #8]
 80025ca:	e7f4      	b.n	80025b6 <__swsetup_r+0x8e>
 80025cc:	2000      	movs	r0, #0
 80025ce:	e7f7      	b.n	80025c0 <__swsetup_r+0x98>
 80025d0:	20000070 	.word	0x20000070

080025d4 <_raise_r>:
 80025d4:	291f      	cmp	r1, #31
 80025d6:	b538      	push	{r3, r4, r5, lr}
 80025d8:	4605      	mov	r5, r0
 80025da:	460c      	mov	r4, r1
 80025dc:	d904      	bls.n	80025e8 <_raise_r+0x14>
 80025de:	2316      	movs	r3, #22
 80025e0:	6003      	str	r3, [r0, #0]
 80025e2:	f04f 30ff 	mov.w	r0, #4294967295
 80025e6:	bd38      	pop	{r3, r4, r5, pc}
 80025e8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80025ea:	b112      	cbz	r2, 80025f2 <_raise_r+0x1e>
 80025ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80025f0:	b94b      	cbnz	r3, 8002606 <_raise_r+0x32>
 80025f2:	4628      	mov	r0, r5
 80025f4:	f000 f830 	bl	8002658 <_getpid_r>
 80025f8:	4622      	mov	r2, r4
 80025fa:	4601      	mov	r1, r0
 80025fc:	4628      	mov	r0, r5
 80025fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002602:	f000 b817 	b.w	8002634 <_kill_r>
 8002606:	2b01      	cmp	r3, #1
 8002608:	d00a      	beq.n	8002620 <_raise_r+0x4c>
 800260a:	1c59      	adds	r1, r3, #1
 800260c:	d103      	bne.n	8002616 <_raise_r+0x42>
 800260e:	2316      	movs	r3, #22
 8002610:	6003      	str	r3, [r0, #0]
 8002612:	2001      	movs	r0, #1
 8002614:	e7e7      	b.n	80025e6 <_raise_r+0x12>
 8002616:	2100      	movs	r1, #0
 8002618:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800261c:	4620      	mov	r0, r4
 800261e:	4798      	blx	r3
 8002620:	2000      	movs	r0, #0
 8002622:	e7e0      	b.n	80025e6 <_raise_r+0x12>

08002624 <raise>:
 8002624:	4b02      	ldr	r3, [pc, #8]	@ (8002630 <raise+0xc>)
 8002626:	4601      	mov	r1, r0
 8002628:	6818      	ldr	r0, [r3, #0]
 800262a:	f7ff bfd3 	b.w	80025d4 <_raise_r>
 800262e:	bf00      	nop
 8002630:	20000070 	.word	0x20000070

08002634 <_kill_r>:
 8002634:	b538      	push	{r3, r4, r5, lr}
 8002636:	4d07      	ldr	r5, [pc, #28]	@ (8002654 <_kill_r+0x20>)
 8002638:	2300      	movs	r3, #0
 800263a:	4604      	mov	r4, r0
 800263c:	4608      	mov	r0, r1
 800263e:	4611      	mov	r1, r2
 8002640:	602b      	str	r3, [r5, #0]
 8002642:	f7fe fbb6 	bl	8000db2 <_kill>
 8002646:	1c43      	adds	r3, r0, #1
 8002648:	d102      	bne.n	8002650 <_kill_r+0x1c>
 800264a:	682b      	ldr	r3, [r5, #0]
 800264c:	b103      	cbz	r3, 8002650 <_kill_r+0x1c>
 800264e:	6023      	str	r3, [r4, #0]
 8002650:	bd38      	pop	{r3, r4, r5, pc}
 8002652:	bf00      	nop
 8002654:	20000430 	.word	0x20000430

08002658 <_getpid_r>:
 8002658:	f7fe bba3 	b.w	8000da2 <_getpid>

0800265c <_malloc_usable_size_r>:
 800265c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002660:	1f18      	subs	r0, r3, #4
 8002662:	2b00      	cmp	r3, #0
 8002664:	bfbc      	itt	lt
 8002666:	580b      	ldrlt	r3, [r1, r0]
 8002668:	18c0      	addlt	r0, r0, r3
 800266a:	4770      	bx	lr

0800266c <__swhatbuf_r>:
 800266c:	b570      	push	{r4, r5, r6, lr}
 800266e:	460c      	mov	r4, r1
 8002670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002674:	2900      	cmp	r1, #0
 8002676:	b096      	sub	sp, #88	@ 0x58
 8002678:	4615      	mov	r5, r2
 800267a:	461e      	mov	r6, r3
 800267c:	da0d      	bge.n	800269a <__swhatbuf_r+0x2e>
 800267e:	89a3      	ldrh	r3, [r4, #12]
 8002680:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002684:	f04f 0100 	mov.w	r1, #0
 8002688:	bf14      	ite	ne
 800268a:	2340      	movne	r3, #64	@ 0x40
 800268c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002690:	2000      	movs	r0, #0
 8002692:	6031      	str	r1, [r6, #0]
 8002694:	602b      	str	r3, [r5, #0]
 8002696:	b016      	add	sp, #88	@ 0x58
 8002698:	bd70      	pop	{r4, r5, r6, pc}
 800269a:	466a      	mov	r2, sp
 800269c:	f000 f848 	bl	8002730 <_fstat_r>
 80026a0:	2800      	cmp	r0, #0
 80026a2:	dbec      	blt.n	800267e <__swhatbuf_r+0x12>
 80026a4:	9901      	ldr	r1, [sp, #4]
 80026a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80026aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80026ae:	4259      	negs	r1, r3
 80026b0:	4159      	adcs	r1, r3
 80026b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026b6:	e7eb      	b.n	8002690 <__swhatbuf_r+0x24>

080026b8 <__smakebuf_r>:
 80026b8:	898b      	ldrh	r3, [r1, #12]
 80026ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80026bc:	079d      	lsls	r5, r3, #30
 80026be:	4606      	mov	r6, r0
 80026c0:	460c      	mov	r4, r1
 80026c2:	d507      	bpl.n	80026d4 <__smakebuf_r+0x1c>
 80026c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80026c8:	6023      	str	r3, [r4, #0]
 80026ca:	6123      	str	r3, [r4, #16]
 80026cc:	2301      	movs	r3, #1
 80026ce:	6163      	str	r3, [r4, #20]
 80026d0:	b003      	add	sp, #12
 80026d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026d4:	ab01      	add	r3, sp, #4
 80026d6:	466a      	mov	r2, sp
 80026d8:	f7ff ffc8 	bl	800266c <__swhatbuf_r>
 80026dc:	9f00      	ldr	r7, [sp, #0]
 80026de:	4605      	mov	r5, r0
 80026e0:	4639      	mov	r1, r7
 80026e2:	4630      	mov	r0, r6
 80026e4:	f7ff f904 	bl	80018f0 <_malloc_r>
 80026e8:	b948      	cbnz	r0, 80026fe <__smakebuf_r+0x46>
 80026ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026ee:	059a      	lsls	r2, r3, #22
 80026f0:	d4ee      	bmi.n	80026d0 <__smakebuf_r+0x18>
 80026f2:	f023 0303 	bic.w	r3, r3, #3
 80026f6:	f043 0302 	orr.w	r3, r3, #2
 80026fa:	81a3      	strh	r3, [r4, #12]
 80026fc:	e7e2      	b.n	80026c4 <__smakebuf_r+0xc>
 80026fe:	89a3      	ldrh	r3, [r4, #12]
 8002700:	6020      	str	r0, [r4, #0]
 8002702:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002706:	81a3      	strh	r3, [r4, #12]
 8002708:	9b01      	ldr	r3, [sp, #4]
 800270a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800270e:	b15b      	cbz	r3, 8002728 <__smakebuf_r+0x70>
 8002710:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002714:	4630      	mov	r0, r6
 8002716:	f000 f81d 	bl	8002754 <_isatty_r>
 800271a:	b128      	cbz	r0, 8002728 <__smakebuf_r+0x70>
 800271c:	89a3      	ldrh	r3, [r4, #12]
 800271e:	f023 0303 	bic.w	r3, r3, #3
 8002722:	f043 0301 	orr.w	r3, r3, #1
 8002726:	81a3      	strh	r3, [r4, #12]
 8002728:	89a3      	ldrh	r3, [r4, #12]
 800272a:	431d      	orrs	r5, r3
 800272c:	81a5      	strh	r5, [r4, #12]
 800272e:	e7cf      	b.n	80026d0 <__smakebuf_r+0x18>

08002730 <_fstat_r>:
 8002730:	b538      	push	{r3, r4, r5, lr}
 8002732:	4d07      	ldr	r5, [pc, #28]	@ (8002750 <_fstat_r+0x20>)
 8002734:	2300      	movs	r3, #0
 8002736:	4604      	mov	r4, r0
 8002738:	4608      	mov	r0, r1
 800273a:	4611      	mov	r1, r2
 800273c:	602b      	str	r3, [r5, #0]
 800273e:	f7fe fb98 	bl	8000e72 <_fstat>
 8002742:	1c43      	adds	r3, r0, #1
 8002744:	d102      	bne.n	800274c <_fstat_r+0x1c>
 8002746:	682b      	ldr	r3, [r5, #0]
 8002748:	b103      	cbz	r3, 800274c <_fstat_r+0x1c>
 800274a:	6023      	str	r3, [r4, #0]
 800274c:	bd38      	pop	{r3, r4, r5, pc}
 800274e:	bf00      	nop
 8002750:	20000430 	.word	0x20000430

08002754 <_isatty_r>:
 8002754:	b538      	push	{r3, r4, r5, lr}
 8002756:	4d06      	ldr	r5, [pc, #24]	@ (8002770 <_isatty_r+0x1c>)
 8002758:	2300      	movs	r3, #0
 800275a:	4604      	mov	r4, r0
 800275c:	4608      	mov	r0, r1
 800275e:	602b      	str	r3, [r5, #0]
 8002760:	f7fe fb97 	bl	8000e92 <_isatty>
 8002764:	1c43      	adds	r3, r0, #1
 8002766:	d102      	bne.n	800276e <_isatty_r+0x1a>
 8002768:	682b      	ldr	r3, [r5, #0]
 800276a:	b103      	cbz	r3, 800276e <_isatty_r+0x1a>
 800276c:	6023      	str	r3, [r4, #0]
 800276e:	bd38      	pop	{r3, r4, r5, pc}
 8002770:	20000430 	.word	0x20000430

08002774 <_init>:
 8002774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002776:	bf00      	nop
 8002778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800277a:	bc08      	pop	{r3}
 800277c:	469e      	mov	lr, r3
 800277e:	4770      	bx	lr

08002780 <_fini>:
 8002780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002782:	bf00      	nop
 8002784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002786:	bc08      	pop	{r3}
 8002788:	469e      	mov	lr, r3
 800278a:	4770      	bx	lr
